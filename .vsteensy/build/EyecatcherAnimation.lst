
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000c380 l    d  .fini	00000000 .fini
0000c384 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001560 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000b304 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000a4d8 l     F .text.itcm	0000005c schedule_transfer
0000a534 l     F .text.itcm	00000030 run_callbacks
0000a564 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000a5fc l     F .text.itcm	00000544 isr
2000c1a8 l     O .bss	00000004 endpointN_notify_mask
2000c1b0 l     O .bss	00000004 endpoint0_notify_mask
2000c1b4 l     O .bss	00000001 usb_reboot_timer
2000c1b8 l     O .bss	00000008 endpoint0_setupdata
2000c1c0 l     O .bss	00000008 reply_buffer
2000c1c8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000c1dc l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000c200 l     O .bss	00000004 s_hotTemp
2000c204 l     O .bss	00000004 s_hot_ROOM
2000c208 l     O .bss	00000004 s_roomC_hotC
2000c20c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001560 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001564 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000ed8 l     F .text.itcm	000008e8 Screen::iterate_animation() [clone .part.13]
00003160 l     F .text.itcm	00006600 _GLOBAL__sub_I_low_threshold
20000060 l     O .data	00000400 dim_curve
200007d0 l     O .data	00000240 background_B
20000a10 l     O .data	00000240 background_A
20006158 l     O .bss	000006c0 mask_A
20006818 l     O .bss	000006c0 mask_B
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
00009ca4 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00009760 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009de4 l     F .text.itcm	00000028 rx_event
00009e0c l     F .text.itcm	00000070 usb_serial_flush_callback
00009e7c l     F .text.itcm	0000015c usb_serial_write.part.1
2000b854 l     O .bss	00000700 txbuffer
2000bf54 l     O .bss	00000001 tx_noautoflush
2000bf55 l     O .bss	00000001 tx_head
2000bf58 l     O .bss	000000c0 rx_buffer
2000c018 l     O .bss	00000006 rx_index
2000c020 l     O .bss	00000006 rx_count
2000c040 l     O .bss	00000060 rx_transfer
2000c0a0 l     O .bss	00000002 tx_available
2000c0c0 l     O .bss	000000e0 tx_transfer
2000c1a0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000ae4c l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000c58 l     O .data	0000000a qualifier_descriptor
20000c7c l     O .data	00000043 config_descriptor
20000cc0 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
2000c1dd l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000aff4 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000c1e0 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000d20 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __yield_veneer
600015c0 l     F .text.progmem	00000008 __memset_veneer
600015c8 l     F .text.progmem	00000008 __loop_veneer
600015d0 l     F .text.progmem	00000008 __delay_veneer
600015d8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015e0 l     F .text.progmem	00000008 __setup_veneer
600015e8 l     F .text.progmem	00000008 __pwm_init_veneer
600015f0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015f8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
0000c378 l     F .text.itcm	00000008 ___init_veneer
0000a100 g     F .text.itcm	00000014 usb_serial_available
0000af54  w    F .text.itcm	000000a0 yield
0000b6f8 g     F .text.itcm	000000a8 sqrt
2000c1ac g     O .bss	00000004 usb_timer1_callback
20000c64 g     O .data	00000018 usb_string_manufacturer_name_default
2000c210 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00009bec g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
2000157c g     O .bss	00000004 sinceBeam
0000b2d0 g     F .text.itcm	00000020 Print::println()
0000b084 g     F .text.itcm	00000014 random(long, long)
00009c4c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000c03c g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
20000c54 g     O .data	00000004 F_CPU_ACTUAL
0000b6d0 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000b1e4 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20003d0c g     O .bss	00000004 sinceFadeUpdate
2000c1f8 g     O .bss	00000001 EventResponder::runningFromYield
2000b790 g     O .bss	000000c4 Alarm
0000b9b0 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000c1e4 g     O .bss	00000004 EventResponder::firstInterrupt
0000ac88 g     F .text.itcm	00000028 usb_transfer_status
20000d06 g     O .data	00000001 usb_enable_serial_event_processing
0000b2b4  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200004a8 g     O .data	00000280 digital_pin_to_info_PGM
2000e6c0 g     O .bss	00000004 errno
0000c380 g       .text.itcm	00000000 _etext
00009adc g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001560 g       .bss	00000000 _sbss
000097e8 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001610 g       *ABS*	00000000 _stextload
00002f70 g     F .text.itcm	000001ec loop
20003d10 g     O .bss	00001224 sat_automaton_B
20006ed8 g     O .bss	00000014 synapse_A
0000ab40 g     F .text.itcm	00000064 usb_config_rx
0000b17c g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00009894 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
2000c1e8 g     O .bss	00000004 EventResponder::lastInterrupt
00009cb0 g     F .text.itcm	00000134 memcpy
2000c1d8 g     O .bss	00000004 systick_millis_count
2000c1d0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000c64  w    O .data	00000018 usb_string_manufacturer_name
0000ba0c g     F .text.itcm	00000010 malloc
20006eec g     O .bss	00000014 synapse_B
0000b118  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
00000448 g     F .text.itcm	00000594 updateBeams()
2000c238 g     O .bss	00000004 __malloc_top_pad
0000acb0 g     F .text.itcm	0000002c rtc_set
2000e280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
200007cc g     O .data	00000000 .hidden __dso_handle
0000980c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000c040 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000a090 g     F .text.itcm	0000004c usb_serial_getchar
2000c264 g     O .bss	00000008 usb_cdc_line_coding
0000ae70 g     F .text.itcm	0000000a digitalWrite
2000c1f0 g     O .bss	00000004 EventResponder::lastYield
2000c234 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ae7c g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
20000d1c g     O .data	00000001 __fdlib_version
2000c1f4 g     O .bss	00000004 EventResponder::firstYield
200007c8 g     O .data	00000004 _global_impure_ptr
0000b9bc g     F .text.itcm	00000050 __libc_init_array
0000b30c  w    F .text.itcm	0000008c HardFault_HandlerC
0000b29c  w    F .text.itcm	00000004 usb_serial_class::clear()
0000b398 g     F .text.itcm	00000030 _sbrk
6000d99c g       *ABS*	00000000 _sdataload
2000c1fc g     O .bss	00000004 MillisTimer::listWaiting
20000d18 g     O .data	00000004 __brkval
2000c1a1 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000007c  w    F .text.itcm	000000b4 Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
600015a8 g     F .text.progmem	00000000 _init
00009fd8 g     F .text.itcm	00000002 usb_serial_reset
2000e700 g       .bss	00000000 _ebss
0000b934 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
20009348 g     O .bss	00001224 bg_automaton_A
00009844 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
2000d000 g     O .bss	00000020 endpoint0_transfer_data
0000b418 g     F .text.itcm	000002b8 pwm_init
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00009b38 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000d020 g     O .bss	00000020 endpoint0_transfer_ack
2000c26c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ac3c g     F .text.itcm	00000028 usb_transmit
0000b27c g     F .text.itcm	00000020 systick_isr
20000d08 g     O .data	00000010 Serial
2000c22c g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
0000b2bc  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000a0dc g     F .text.itcm	00000024 usb_serial_peekchar
0000a24c g     F .text.itcm	0000028c set_arm_clock
2000c1d4 g     O .bss	00000004 systick_cycle_count
20000cf0 g     O .data	00000016 usb_string_serial_number_default
0000c1a4 g     F .text.itcm	000001d0 _free_r
0000b2ac  w    F .text.itcm	00000004 usb_serial_class::flush()
20001558 g     O .data	00000004 __malloc_sbrk_base
0000b2a4  w    F .text.itcm	00000004 usb_serial_class::read()
0000ac0c g     F .text.itcm	0000002e usb_prepare_transfer
0000b2f4 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000c1a4 g     O .bss	00000004 usb_timer0_callback
0000b2c4  w    F .text.itcm	0000000c serialEvent()
0000c064 g     F .text.itcm	000000a4 __register_exitproc
00009c4c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000a114 g     F .text.itcm	0000003c usb_serial_flush_input
0000a150 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2000c23c g     O .bss	00000028 __malloc_current_mallinfo
20006f00 g     O .bss	00001224 grow_automaton_A
00000200 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000b9a4 g     F .text.itcm	0000000c __cxa_atexit
20004f34 g     O .bss	00001224 sat_automaton_A
0000b07c g     F .text.itcm	00000008 random(unsigned long)
20000794  w    O .data	00000028 vtable for usb_serial_class
200039e0 g     O .bss	00000014 matrix_B
2000c1ec g     O .bss	00000004 MillisTimer::listActive
2000114c g     O .data	00000408 __malloc_av_
0000a1e0 g     F .text.itcm	0000006c usb_serial_flush_output
0000c038 g     F .text.itcm	00000002 __malloc_lock
2000e400 g     O .bss	000002c0 _VectorsRam
0000b944 g     F .text.itcm	0000005e _calloc_r
00009be8 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
0000bf9c g     F .text.itcm	0000009a memset
2000c230 g     O .bss	00000004 __malloc_max_total_mem
00000130 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
0000007c  w    F .text.itcm	000000b4 Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
000009e0 g     F .text.itcm	000004f8 updateScreensFade()
0000b924 g     F .text.itcm	00000004 matherr
0000aefc g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000ba2c g     F .text.itcm	00000570 _malloc_r
0000b098 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
200039cc g     O .bss	00000014 matrix_A
0000ad9c g     F .text.itcm	00000054 micros
0000c108 g     F .text.itcm	0000009c _malloc_trim_r
20001584 g     O .bss	00001224 fg_automaton_A
20000cec g     O .data	00000004 string0
0000a17c g     F .text.itcm	00000018 usb_serial_write
0000b2a8  w    F .text.itcm	00000004 usb_serial_class::available()
00009c40 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
2000e000 g     O .bss	00000280 endpoint_queue_head
20000cd4  w    O .data	00000016 usb_string_product_name
0000acdc g     F .text.itcm	000000c0 delay
0000c380 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
2000a56c g     O .bss	00001224 bg_automaton_B
20001148 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
00009a74 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000b070 g     F .text.itcm	0000000c randomSeed(unsigned long)
000017c0 g     F .text.itcm	000017ac setup
20000728 g     O .data	0000006c usb_descriptor_list
20003aa4 g     O .bss	000000b0 screen_B
20008124 g     O .bss	00001224 grow_automaton_B
0000b7a0 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
0000a194 g     F .text.itcm	0000004c usb_serial_write_buffer_free
200027a8 g     O .bss	00001224 fg_automaton_B
200039f4 g     O .bss	000000b0 screen_A
00009fdc g     F .text.itcm	000000b4 usb_serial_configure
20001560 g       .data	00000000 _edata
00009ab0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000b2b0  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00009b2c g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000b3c8 g     F .text.itcm	0000004e ultoa
20001580 g     O .bss	00000004 sinceBeamUpdate
20003b54 g     O .bss	000001b8 beams
0000b2f0 g     F .text.itcm	00000004 operator new(unsigned int)
0000b134 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001554 g     O .data	00000004 __malloc_trim_threshold
0000b2a0  w    F .text.itcm	00000004 usb_serial_class::peek()
60001600 g       .text.progmem	00000000 __init_array_start
0000adf0 g     F .text.itcm	0000005c analogRead
20000c50 g     O .data	00000004 F_BUS_ACTUAL
2000048c g     O .data	0000001c pin_to_channel
00009ab0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000cd4 g     O .data	00000016 usb_string_product_name_default
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001600 g       .text.progmem	00000000 __preinit_array_start
0000ac64 g     F .text.itcm	00000024 usb_receive
000097c8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
000097c8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000eef0 g       *ABS*	00000000 _flashimagelen
0000b928 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000b178 g     F .text.itcm	00000004 pendablesrvreq_isr
0000aba4 g     F .text.itcm	00000068 usb_config_tx
0000ba1c g     F .text.itcm	00000010 free
20000cf0  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015d8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015e8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015e0 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015c8 <__loop_veneer>
		yield();
600011da:	bl	600015b8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000c380
600011f8:	.word	0x20000000
600011fc:	.word	0x6000d99c
60001200:	.word	0x20001560
60001204:	.word	0x20001560
60001208:	.word	0x2000e700
6000120c:	.word	0xe000ed88
60001210:	.word	0x2000e3fc
60001214:	.word	0x0000b2f5
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000b179
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000b27d
6000124c:	.word	0xe0001004
60001250:	.word	0x2000c1d4
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000c1d8
60001264:	.word	0x2000e400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015f8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015d0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015c0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x2000e000
60001348:	.word	0x2000e400
6000134c:	.word	0x0000a5fd
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x2000c1dc

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000c208
60001598:	.word	0x2000c204
6000159c:	.word	0x2000c20c
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000c200

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__yield_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__yield_veneer+0x4>
600015bc:	.word	0x0000af55

600015c0 <__memset_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__memset_veneer+0x4>
600015c4:	.word	0x0000bf9d

600015c8 <__loop_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__loop_veneer+0x4>
600015cc:	.word	0x00002f71

600015d0 <__delay_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__delay_veneer+0x4>
600015d4:	.word	0x0000acdd

600015d8 <__set_arm_clock_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__set_arm_clock_veneer+0x4>
600015dc:	.word	0x0000a24d

600015e0 <__setup_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__setup_veneer+0x4>
600015e4:	.word	0x000017c1

600015e8 <__pwm_init_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__pwm_init_veneer+0x4>
600015ec:	.word	0x0000b419

600015f0 <____libc_init_array_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <____libc_init_array_veneer+0x4>
600015f4:	.word	0x0000b9bd

600015f8 <__usb_init_serialnumber_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__usb_init_serialnumber_veneer+0x4>
600015fc:	.word	0x0000aefd

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x00003161
60001608:	.word	0x00009ca5

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r4, #21
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	stmia	r3!, {r2, r7}
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      68:	.word	0x00000000
      6c:	asrs	r4, r4, #21
      6e:	.short	0x2000
      70:	stmia	r3!, {r2, r7}
      72:	.short	0x0000
      74:	asrs	r0, r4, #21
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>:
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      80:	.word	0x4693460f
      84:	ldr	r1, [pc, #164]	; (12c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])+0xb0>)
      86:	.short	0x2260
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r4, r0
      8a:	mov	r6, r3
      8c:	movs	r5, #0
  
  if(num >= 4){
      8e:	.short	0xf009
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	cdp2	0, 0, cr15, cr15, cr15, {2}
      94:	.word	0x22020901
      98:	movs	r1, #6
      9a:	str	r5, [r4, #96]	; 0x60
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      9c:	str.w	r9, [r4, #100]	; 0x64
		{1, 1, 1, 0, 0, 1}
	};

	Seed possible_seeds[2] = {
		{ALL, 1, true},
		{SQUARE, random(2, 6), true},
      a0:	mov	r0, r2
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      a2:	strb.w	r9, [r4, #104]	; 0x68
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      a6:	mov.w	r8, #1728	; 0x6c0
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      aa:	str	r2, [r4, #108]	; 0x6c
		{1, 1, 1, 0, 0, 1}
	};

	Seed possible_seeds[2] = {
		{ALL, 1, true},
		{SQUARE, random(2, 6), true},
      ac:	bl	b084 <random(long, long)>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      b0:	movs	r2, #0
      b2:	.short	0x6720
      b4:	mov	r0, r8
      b6:	.short	0xf884
      b8:	str	r0, [sp, #464]	; 0x1d0
      ba:	.short	0xf8c4
      bc:	movs	r0, #156	; 0x9c
      be:	str.w	r5, [r4, #152]	; 0x98
      c2:	.short	0xf8c4
      c4:	str	r0, [r4, r2]
      c6:	bl	b2f0 <operator new(unsigned int)>
      ca:	.short	0x4681
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      cc:	mov	r1, r5
      ce:	mov	r2, r8
      d0:	bl	bf9c <memset>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      d4:	.word	0x90a4f8c4
      d8:	mov	r0, r8
      da:	.short	0xf00b
      dc:	vst1.32	{d4-d6}, [r9], r1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      e0:	.word	0x46294642
      e4:	bl	bf9c <memset>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      e8:	.word	0x90a8f8c4
      ec:	mov	r0, r8
      ee:	.short	0xf00b
      f0:	ldr??.w	r4, [pc, #1602]	; 736 <updateBeams()+0x2ee>
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      f4:	mov	r1, r5
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      f6:	.short	0x4681
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      f8:	bl	bf9c <memset>

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
      fc:	.word	0xf8c49b08
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
     100:	add	sp, #480	; 0x1e0
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		
	}
     102:	.short	0x4620

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     104:	str.w	r3, [r4, #132]	; 0x84
		_screen = screen;
     108:	.word	0xf8c49b09
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     10c:	str	r0, [sp, #688]	; 0x2b0
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
     10e:	.short	0xf8c4
     110:	adds	r0, #136	; 0x88
		_mask = mask;
     112:	.short	0x9b0a

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
     114:	str	r7, [r4, #124]	; 0x7c
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
     116:	.short	0xf8c4
     118:	adds	r0, #140	; 0x8c
		_bg_mask = bg_mask;
     11a:	.short	0x9b0b
public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
     11c:	str.w	r6, [r4, #128]	; 0x80
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
     120:	str.w	r3, [r4, #144]	; 0x90
		newFrameReady = false;
     124:	.word	0x5094f884
		
	}
     128:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
     12c:	.word	0x20000000

00000130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     130:	sub	sp, #8
     132:	.short	0x4684
     134:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     138:	.word	0xb0852400
     13c:	mov	lr, r1
     13e:	.short	0x4e2e
     140:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     142:	mov	r5, r4

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     144:	.word	0x000ce881
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     148:	ldrb	r3, [r6, r4]
     14a:	.short	0x342c
     14c:	ldr	r2, [pc, #168]	; (1f8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     14e:	.short	0xb143
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     150:	adds	r5, #1
     152:	.short	0x2d0a
     154:	bne.n	148 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     156:	.short	0x2000
}
     158:	add	sp, #20
     15a:	.short	0xe8bd
     15c:	mvns	r0, r6
     15e:	.short	0xb002
     160:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     162:	.short	0x232c
     164:	movs	r1, #1
     166:	.short	0x466f
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     168:	ldr.w	r8, [pc, #144]	; 1fc <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xcc>
     16c:	.word	0xf305fb03
     170:	add.w	r9, r2, r3
     174:	.word	0xab0c54d1
	strip = _strip;
     178:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     17c:	add.w	r4, r9, #12

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     180:	.word	0xe008f889
     184:	ldmia	r3, {r0, r1, r2, r3}
     186:	.short	0xc707
     188:	strh	r3, [r7, #0]
	color = _color;
     18a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     18c:	mov	r7, r8
     18e:	ldmdb	r3, {r0, r1, r2, r3}
     192:	.short	0xc407
     194:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     196:	ldr	r3, [sp, #64]	; 0x40
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     198:	vstr	s0, [r9, #28]
	duration = _duration;
     19c:	str.w	r3, [r9, #32]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1a0:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     1a4:	ldr.w	r1, [r8, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     1a8:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     1aa:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     1ac:	cmp	r3, r1
     1ae:	it	eq
     1b0:	.word	0x461442a2
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
     1b4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     1b6:	ite	eq	; unpredictable <IT:eq>
     1b8:	moveq	r0, #1
     1ba:	movne	r0, #0
     1bc:	cmp	r0, #0
     1be:	beq.n	1a8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x78>
	startTime = rtcMillis();
     1c0:	.word	0x232c0959
     1c4:	orr.w	r1, r1, r2, lsl #27
     1c8:	.word	0x6505fb03
     1cc:	vmov	s15, r1
     1d0:	.word	0x5b07ed9f
     1d4:	vcvt.f64.u32	d7, s15
     1d8:	.word	0x6b05ee87
     1dc:	vcvt.u32.f64	s12, d6
     1e0:	vstr	s12, [r5, #36]	; 0x24
     1e4:	.word	0xe8bdb005
     1e8:	mvns	r0, r6
     1ea:	.short	0xb002
     1ec:	bx	lr
     1ee:	.short	0xbf00
     1f0:	add	r1, sp, #1008	; 0x3f0
     1f2:	.short	0xd2f1
     1f4:	str	r5, [r1, #36]	; 0x24
     1f6:	.short	0x3ff0
     1f8:	subs	r3, #84	; 0x54
     1fa:	.short	0x2000
     1fc:	ands	r0, r0
     1fe:	.short	0x400d

00000200 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     200:	sub	sp, #8
     202:	.short	0xe92d
     204:	ldr	r7, [pc, #960]	; (5c8 <updateBeams()+0x180>)
     206:	.short	0xb085
  int colInt = strip->getPixelColor(pixel);
     208:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     20a:	.short	0x4680
     20c:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     210:	.word	0xf89d4631
     214:	str	r0, [sp, #272]	; 0x110
     216:	.short	0x9401
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     218:	add	r4, sp, #56	; 0x38
     21a:	.short	0xf89d
     21c:	str	r0, [r0, r1]
     21e:	.short	0xe884
     220:	movs	r4, r1
     222:	.short	0xf89d
     224:	add	r0, pc, #224	; (adr r0, 308 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x108>)
     226:	.short	0xf89d
     228:	ands	r1, r7
     22a:	.short	0xf89d
     22c:	add	sp, #232	; 0xe8
     22e:	.short	0x9f0f
  int colInt = strip->getPixelColor(pixel);
     230:	bl	9b38 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     234:	.word	0xf3c09003
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     238:	ands	r7, r0
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     23a:	.short	0xf1b9
     23c:	lsrs	r0, r0, #28
     23e:	.short	0xd021
     240:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     242:	.short	0xf89d
     244:	movs	r0, #13
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     246:	.short	0xf89d
     248:	str	r4, [r1, r0]

  strip->setPixelColor(pixel, *(int*)getCol);
     24a:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     24c:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     24e:	cmp.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     252:	add.w	r3, r5, fp

  strip->setPixelColor(pixel, *(int*)getCol);
     256:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     258:	it	ge
     25a:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     25e:	cmp	r4, #255	; 0xff
     260:	it	ge
     262:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     264:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     266:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     26a:	it	ge
     26c:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     26e:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     272:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     276:	ldr	r2, [sp, #12]
}
     278:	add	sp, #20
     27a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     27e:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     280:	b.w	9b2c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     284:	ldr	r3, [sp, #4]
     286:	cmp	r3, #99	; 0x63
     288:	bgt.n	306 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     28a:	vmov	s15, r3
     28e:	vldr	d6, [pc, #424]	; 438 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     292:	vcvt.f64.s32	d7, s15
     296:	vmul.f64	d7, d7, d6
     29a:	vcvt.u32.f64	s15, d7
     29e:	vstr	s15, [sp, #4]
     2a2:	ldrb.w	sl, [sp, #4]
     2a6:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     2a8:	cbz	r5, 310 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     2aa:	cmp	r5, #99	; 0x63
     2ac:	bgt.n	314 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     2ae:	vmov	s15, r5
     2b2:	vldr	d6, [pc, #388]	; 438 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     2b6:	vcvt.f64.s32	d7, s15
     2ba:	vmul.f64	d7, d7, d6
     2be:	vcvt.s32.f64	s15, d7
     2c2:	vmov	r2, s15
     2c6:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2ca:	ldr	r4, [pc, #372]	; (440 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     2cc:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2ce:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2d2:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2d6:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2da:	adds	r4, r7, r5
     2dc:	mov.w	r5, #360	; 0x168
     2e0:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2e4:	ldr	r4, [pc, #348]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2e6:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2ea:	smull	r3, r4, r4, r1
     2ee:	asrs	r5, r1, #31
     2f0:	add	r4, r1
     2f2:	rsb	r4, r5, r4, asr #5
     2f6:	cmp	r4, #5
     2f8:	bhi.w	42e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     2fc:	tbb	[pc, r4]
     300:	.word	0x415b7588
     304:	.short	0x0c27
     306:	mov.w	sl, #254	; 0xfe
     30a:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     30c:	cmp	r5, #0
     30e:	bne.n	2aa <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     310:	mov	r4, sl
     312:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     314:	movs	r2, #1
     316:	b.n	2ca <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     318:	ldr	r7, [pc, #296]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     31a:	rsb	r3, r2, sl
     31e:	smull	r4, lr, r7, r1
     322:	mov	r4, r2
     324:	add	lr, r1
     326:	rsb	r5, r5, lr, asr #5
     32a:	rsb	r5, r5, r5, lsl #4
     32e:	sub.w	r1, r1, r5, lsl #2
     332:	rsb	r1, r1, #60	; 0x3c
     336:	mul.w	r3, r1, r3
     33a:	smull	r1, r7, r7, r3
     33e:	asrs	r1, r3, #31
     340:	add	r3, r7
     342:	rsb	r3, r1, r3, asr #5
     346:	add	r3, r2
     348:	uxtb.w	fp, r3
     34c:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     34e:	ldr	r7, [pc, #244]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     350:	rsb	sl, r2, sl
     354:	mov	r4, r2
     356:	smull	r3, lr, r7, r1
     35a:	add	lr, r1
     35c:	rsb	r5, r5, lr, asr #5
     360:	rsb	r5, r5, r5, lsl #4
     364:	sub.w	r1, r1, r5, lsl #2
     368:	mul.w	r1, r1, sl
     36c:	smull	r3, r7, r7, r1
     370:	mov.w	sl, r1, asr #31
     374:	add	r1, r7
     376:	rsb	r1, sl, r1, asr #5
     37a:	add	r2, r1
     37c:	uxtb.w	sl, r2
     380:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     382:	ldr	r7, [pc, #192]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     384:	rsb	lr, r2, sl
     388:	mov	sl, r2
     38a:	smull	r3, r4, r7, r1
     38e:	add	r4, r1
     390:	rsb	r5, r5, r4, asr #5
     394:	rsb	r5, r5, r5, lsl #4
     398:	sub.w	r1, r1, r5, lsl #2
     39c:	rsb	r4, r1, #60	; 0x3c
     3a0:	mul.w	r1, r4, lr
     3a4:	smull	r3, r7, r7, r1
     3a8:	asrs	r4, r1, #31
     3aa:	add	r1, r7
     3ac:	rsb	r4, r4, r1, asr #5
     3b0:	add	r4, r2
     3b2:	uxtb	r4, r4
     3b4:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     3b6:	ldr	r7, [pc, #140]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3b8:	rsb	lr, r2, sl
     3bc:	mov	r4, sl
     3be:	mov	sl, r2
     3c0:	smull	ip, r3, r7, r1
     3c4:	add	r3, r1
     3c6:	rsb	r5, r5, r3, asr #5
     3ca:	rsb	r5, r5, r5, lsl #4
     3ce:	sub.w	r1, r1, r5, lsl #2
     3d2:	mul.w	r1, r1, lr
     3d6:	smull	r3, r7, r7, r1
     3da:	asrs	r3, r1, #31
     3dc:	add	r1, r7
     3de:	rsb	r3, r3, r1, asr #5
     3e2:	add	r3, r2
     3e4:	uxtb.w	fp, r3
     3e8:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     3ea:	ldr	r7, [pc, #88]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3ec:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     3f0:	mov	r4, sl
      output.g = bri;
      output.b = base;
     3f2:	mov	fp, r2
     3f4:	smull	r3, ip, r7, r1
     3f8:	add	ip, r1
     3fa:	rsb	r5, r5, ip, asr #5
     3fe:	rsb	r5, r5, r5, lsl #4
     402:	sub.w	r5, r1, r5, lsl #2
     406:	rsb	r5, r5, #60	; 0x3c
     40a:	mul.w	r1, r5, lr
     40e:	b.n	36c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     410:	rsb	r3, r2, sl
     414:	ldr	r5, [pc, #44]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     416:	mov	fp, r2
     418:	mul.w	r1, r1, r3
     41c:	smull	r3, r5, r5, r1
     420:	asrs	r4, r1, #31
     422:	add	r1, r5
     424:	rsb	r1, r4, r1, asr #5
     428:	adds	r4, r2, r1
     42a:	uxtb	r4, r4
     42c:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     42e:	mov.w	sl, #0
     432:	mov	r4, sl
     434:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     436:	nop
     438:	.word	0x66666666
     43c:	.word	0x40046666
     440:	.word	0xb60b60b7
     444:	.word	0x88888889

00000448 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     448:	ldr	r3, [pc, #772]	; (750 <updateBeams()+0x308>)
    }
  }
  return false;
}

void updateBeams() {
     44a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     44e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     450:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     452:	ldr	r1, [r3, #40]	; 0x28
     454:	vpush	{d8-d10}
     458:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     45a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     45c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     45e:	ldr	r6, [pc, #752]	; (750 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     460:	cmp	r3, r1
     462:	it	eq
     464:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     466:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     468:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     46a:	ite	eq
     46c:	moveq	r5, #1
     46e:	movne	r5, #0
     470:	cmp	r5, #0
     472:	beq.n	45a <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     474:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     476:	ldr	r4, [pc, #732]	; (754 <updateBeams()+0x30c>)
     478:	orr.w	r1, r1, r2, lsl #27
     47c:	ldr	r3, [r4, #0]
     47e:	vmov	s15, r1
     482:	vldr	d5, [pc, #700]	; 740 <updateBeams()+0x2f8>
     486:	vcvt.f64.u32	d7, s15
     48a:	vdiv.f64	d6, d7, d5
     48e:	vcvt.u32.f64	s12, d6
     492:	vmov	r2, s12
     496:	subs	r3, r2, r3
     498:	cmp	r3, #15
     49a:	ble.w	83a <updateBeams()+0x3f2>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     49e:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4a0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     4a2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4a4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     4a6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     4a8:	cmp	r3, r1
     4aa:	it	eq
     4ac:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4ae:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     4b0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     4b2:	ite	eq
     4b4:	moveq	r6, #1
     4b6:	movne	r6, #0
     4b8:	cmp	r6, #0
     4ba:	beq.n	4a4 <updateBeams()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     4bc:	lsrs	r1, r3, #5
     4be:	ldr	r7, [pc, #664]	; (758 <updateBeams()+0x310>)
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4c0:	ldr	r0, [pc, #664]	; (75c <updateBeams()+0x314>)
     4c2:	orr.w	r1, r1, r2, lsl #27
     4c6:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     4ca:	ldr.w	fp, [pc, #644]	; 750 <updateBeams()+0x308>
  synapse_B.clear();
     4ce:	mov	sl, r7
     4d0:	vmov	s15, r1
     4d4:	vldr	d8, [pc, #616]	; 740 <updateBeams()+0x2f8>
     4d8:	vcvt.f64.u32	d7, s15
     4dc:	vldr	d9, [pc, #616]	; 748 <updateBeams()+0x300>
     4e0:	vdiv.f64	d6, d7, d8
     4e4:	vcvt.u32.f64	s12, d6
     4e8:	vstr	s12, [r4]

void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4ec:	bl	9c40 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     4f0:	ldr	r0, [pc, #620]	; (760 <updateBeams()+0x318>)
     4f2:	bl	9c40 <Adafruit_NeoPixel::clear()>
     4f6:	b.n	502 <updateBeams()+0xba>
     4f8:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     4fc:	cmp	sl, r9
     4fe:	beq.w	7e8 <updateBeams()+0x3a0>
    if (beams[i].active) {
     502:	ldrb.w	r3, [sl, #-36]
     506:	cmp	r3, #0
     508:	beq.n	4f8 <updateBeams()+0xb0>
     50a:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     50e:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     512:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     516:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     51a:	ldr	r7, [pc, #564]	; (750 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     51c:	cmp	r3, r1
     51e:	it	eq
     520:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     522:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     524:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     526:	ite	eq
     528:	moveq	r4, #1
     52a:	movne	r4, #0
     52c:	cmp	r4, #0
     52e:	beq.n	512 <updateBeams()+0xca>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     530:	lsrs	r1, r3, #5
     532:	ldr.w	r5, [sl]
     536:	ldr.w	r6, [sl, #-4]
     53a:	orr.w	r1, r1, r2, lsl #27
     53e:	adds	r3, r6, r5
     540:	vmov	s15, r1
     544:	vcvt.f64.u32	d7, s15
     548:	vdiv.f64	d6, d7, d8
     54c:	vcvt.u32.f64	s12, d6
     550:	vmov	r2, s12
     554:	cmp	r2, r3
     556:	bhi.w	832 <updateBeams()+0x3ea>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     55a:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     55c:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     55e:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     562:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     566:	cmp	r3, r1
     568:	it	eq
     56a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     56c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     56e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     570:	ite	eq
     572:	moveq	r4, #1
     574:	movne	r4, #0
     576:	cmp	r4, #0
     578:	beq.n	55e <updateBeams()+0x116>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     57a:	lsrs	r1, r3, #5
     57c:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     580:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     584:	orr.w	r1, r1, r2, lsl #27
     588:	vcvt.f32.s32	s11, s15
     58c:	vmov	s15, r1
     590:	vcvt.f64.u32	d7, s15
     594:	vdiv.f64	d6, d7, d8
     598:	vcvt.u32.f64	s12, d6
     59c:	vmov	r2, s12
     5a0:	subs	r5, r2, r5
     5a2:	vmov	s15, r5
     5a6:	vcvt.f32.u32	s15, s15
     5aa:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     5ae:	cmp	r3, #0
     5b0:	bne.w	828 <updateBeams()+0x3e0>
	position = (strip->numPixels() + length) * posFac - length / 2;
     5b4:	ldr.w	r0, [sl, #-32]
     5b8:	bl	9be8 <Adafruit_NeoPixel::numPixels() const>
     5bc:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     5c0:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     5c4:	vmov.f32	s14, #96	; 0x3f000000  0.5
     5c8:	vcvt.f32.s32	s13, s15
     5cc:	vldr	s15, [sl, #-8]
     5d0:	vmul.f32	s14, s15, s14
     5d4:	vadd.f32	s15, s13, s15
     5d8:	vmov.f32	s13, s14
     5dc:	vfnms.f32	s13, s15, s20
     5e0:	vmov.f32	s15, s13
     5e4:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     5e8:	cmp	r3, #0
     5ea:	beq.n	4f8 <updateBeams()+0xb0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     5ec:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     5f0:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     5f4:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     5f8:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     5fc:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     600:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     604:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     608:	cmp	r7, r3
     60a:	ble.n	706 <updateBeams()+0x2be>
     60c:	b.n	4f8 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     60e:	vldr	s11, [sl, #-8]
     612:	vmov.f32	s14, #112	; 0x3f800000  1.0
     616:	vmov.f32	s13, #0	; 0x40000000  2.0
     61a:	vdiv.f32	s12, s15, s11
     61e:	vmov.f32	s15, s14
     622:	vfms.f32	s15, s12, s13
     626:	vcmpe.f32	s15, #0.0
     62a:	vmrs	APSR_nzcv, fpscr
     62e:	bmi.w	738 <updateBeams()+0x2f0>
     632:	vcmp.f32	s15, s14
     636:	vmrs	APSR_nzcv, fpscr
     63a:	it	gt
     63c:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     640:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     644:	sub.w	r3, sl, #24
     648:	add	r4, sp, #24
     64a:	ldrb.w	ip, [sl, #-24]
     64e:	ldrb.w	lr, [sl, #-23]
     652:	vcmp.f32	s15, s14
     656:	ldrb.w	r6, [sl, #-22]
     65a:	ldr.w	r8, [sl, #-20]
     65e:	vmrs	APSR_nzcv, fpscr
     662:	ldmia	r3, {r0, r1, r2, r3}
     664:	stmia.w	r4, {r0, r1, r2, r3}
     668:	ldrb.w	r3, [sl, #-16]
     66c:	ldrb.w	r2, [sl, #-15]
     670:	ldrb.w	r1, [sl, #-12]
     674:	beq.n	6ca <updateBeams()+0x282>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     676:	cmp	r1, #0
     678:	beq.n	768 <updateBeams()+0x320>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     67a:	vmov	s14, ip
     67e:	vmov	s13, lr
     682:	vcvt.f32.s32	s14, s14
     686:	vmul.f32	s14, s14, s15
     68a:	vcvt.u32.f32	s14, s14
     68e:	vstr	s14, [sp, #12]
     692:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     696:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     69a:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     69e:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     6a0:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6a2:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6a6:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     6aa:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6ae:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6b2:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     6b6:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6ba:	vstr	s14, [sp, #12]
     6be:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     6c2:	vstr	s15, [sp, #16]
     6c6:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     6ca:	strb.w	r3, [sp, #32]
     6ce:	add	r3, sp, #40	; 0x28
     6d0:	strb.w	r2, [sp, #33]	; 0x21
     6d4:	strb.w	r1, [sp, #36]	; 0x24
     6d8:	strb.w	ip, [sp, #24]
     6dc:	strb.w	lr, [sp, #25]
     6e0:	strb.w	r6, [sp, #26]
     6e4:	str.w	r8, [sp, #28]
     6e8:	ldmdb	r3, {r0, r1}
     6ec:	ldmia.w	r4, {r2, r3}
     6f0:	stmia.w	sp, {r0, r1}
     6f4:	mov	r1, r7
     6f6:	ldr.w	r0, [sl, #-32]
     6fa:	bl	200 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     6fe:	adds	r7, #1
     700:	cmp	r5, r7
     702:	blt.w	4f8 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
     706:	cmp	r7, #0
     708:	blt.n	6fe <updateBeams()+0x2b6>
     70a:	ldr.w	r0, [sl, #-32]
     70e:	bl	9be8 <Adafruit_NeoPixel::numPixels() const>
     712:	cmp	r0, r7
     714:	ble.n	6fe <updateBeams()+0x2b6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     716:	vmov	s14, r7
     71a:	vldr	s15, [sl, #4]
     71e:	vcvt.f32.s32	s14, s14
     722:	vsub.f32	s15, s14, s15
     726:	vcmpe.f32	s15, #0.0
     72a:	vmrs	APSR_nzcv, fpscr
     72e:	bgt.w	60e <updateBeams()+0x1c6>
     732:	vneg.f32	s15, s15
     736:	b.n	60e <updateBeams()+0x1c6>
     738:	vldr	s15, [pc, #40]	; 764 <updateBeams()+0x31c>
     73c:	b.n	640 <updateBeams()+0x1f8>
     73e:	nop
     740:	.word	0xd2f1a9fc
     744:	.word	0x3ff0624d
     748:	.word	0x66666666
     74c:	.word	0x40046666
     750:	.word	0x400d4000
     754:	.word	0x20001580
     758:	.word	0x20003b78
     75c:	.word	0x20006ed8
     760:	.word	0x20006eec
     764:	.word	0x00000000
     768:	cmp	r2, #99	; 0x63
     76a:	bgt.n	7fe <updateBeams()+0x3b6>
     76c:	vmov	s14, r2
     770:	vcvt.f64.s32	d6, s14
     774:	vmul.f64	d6, d6, d9
     778:	vcvt.u32.f64	s14, d6
     77c:	vstr	s14, [sp, #12]
     780:	ldrb.w	ip, [sp, #12]
     784:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     786:	cmp	r3, #0
     788:	beq.n	808 <updateBeams()+0x3c0>
     78a:	cmp	r3, #99	; 0x63
     78c:	bgt.n	844 <updateBeams()+0x3fc>
     78e:	vmov	s14, r3
     792:	vcvt.f64.s32	d6, s14
     796:	vmul.f64	d6, d6, d9
     79a:	vcvt.s32.f64	s14, d6
     79e:	vmov	r6, s14
     7a2:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7a6:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7aa:	ldr	r1, [pc, #544]	; (9cc <updateBeams()+0x584>)
     7ac:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7b0:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7b4:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7b6:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7b8:	mov.w	r0, r8, asr #31
     7bc:	rsb	r1, r0, r1, asr #8
     7c0:	mov.w	r0, #360	; 0x168
     7c4:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     7c8:	ldr	r0, [pc, #516]	; (9d0 <updateBeams()+0x588>)
     7ca:	smull	r6, r0, r0, r1
     7ce:	asrs	r6, r1, #31
     7d0:	add	r0, r1
     7d2:	str	r6, [sp, #16]
     7d4:	rsb	r0, r6, r0, asr #5
     7d8:	cmp	r0, #5
     7da:	bhi.w	9c2 <updateBeams()+0x57a>
     7de:	tbb	[pc, r0]
     7e2:	.short	0xbadc
     7e4:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     7e8:	ldr	r0, [pc, #488]	; (9d4 <updateBeams()+0x58c>)
     7ea:	bl	9894 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     7ee:	ldr	r0, [pc, #488]	; (9d8 <updateBeams()+0x590>)
}
     7f0:	add	sp, #44	; 0x2c
     7f2:	vpop	{d8-d10}
     7f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     7fa:	b.w	9894 <Adafruit_NeoPixel::show()>
     7fe:	mov.w	ip, #254	; 0xfe
     802:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     804:	cmp	r3, #0
     806:	bne.n	78a <updateBeams()+0x342>
     808:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     80c:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     810:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     812:	vcvt.f32.s32	s14, s14
     816:	vmul.f32	s14, s14, s15
     81a:	vcvt.u32.f32	s14, s14
     81e:	vstr	s14, [sp, #12]
     822:	ldrb.w	ip, [sp, #12]
     826:	b.n	696 <updateBeams()+0x24e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     828:	vmov.f32	s15, #112	; 0x3f800000  1.0
     82c:	vsub.f32	s20, s15, s20
     830:	b.n	5b4 <updateBeams()+0x16c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     832:	movs	r3, #0
     834:	strb.w	r3, [sl, #-36]
     838:	b.n	4f8 <updateBeams()+0xb0>
}
     83a:	add	sp, #44	; 0x2c
     83c:	vpop	{d8-d10}
     840:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     844:	movs	r6, #1
     846:	b.n	7a6 <updateBeams()+0x35e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     848:	ldr	r0, [pc, #388]	; (9d0 <updateBeams()+0x588>)
     84a:	smull	r6, r0, r0, r1
     84e:	ldr	r6, [sp, #12]
     850:	add	r0, r1
     852:	vmov	s13, r6
     856:	rsb	lr, r6, ip
     85a:	ldr	r6, [sp, #16]
     85c:	rsb	r0, r6, r0, asr #5
     860:	rsb	r0, r0, r0, lsl #4
     864:	sub.w	r1, r1, r0, lsl #2
     868:	rsb	r1, r1, #60	; 0x3c
     86c:	mul.w	lr, r1, lr
     870:	ldr	r1, [pc, #348]	; (9d0 <updateBeams()+0x588>)
     872:	smull	r1, r0, r1, lr
     876:	mov.w	r1, lr, asr #31
     87a:	add	lr, r0
     87c:	rsb	lr, r1, lr, asr #5
     880:	vmov	r1, s13
     884:	add	r1, lr
     886:	uxtb.w	lr, r1
     88a:	b.n	80c <updateBeams()+0x3c4>
     88c:	ldr	r0, [pc, #320]	; (9d0 <updateBeams()+0x588>)
     88e:	smull	r6, r0, r0, r1
     892:	ldr	r6, [sp, #12]
     894:	add	r0, r1
     896:	rsb	ip, r6, ip
     89a:	vmov	s13, r6
     89e:	ldr	r6, [sp, #16]
     8a0:	rsb	r0, r6, r0, asr #5
     8a4:	vmov	r6, s13
     8a8:	rsb	r0, r0, r0, lsl #4
     8ac:	sub.w	r1, r1, r0, lsl #2
     8b0:	mul.w	ip, r1, ip
     8b4:	ldr	r1, [pc, #280]	; (9d0 <updateBeams()+0x588>)
     8b6:	smull	r1, r0, r1, ip
     8ba:	mov.w	r1, ip, asr #31
     8be:	add	ip, r0
     8c0:	rsb	ip, r1, ip, asr #5
     8c4:	add	r6, ip
     8c6:	uxtb.w	ip, r6
     8ca:	b.n	80c <updateBeams()+0x3c4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     8cc:	ldr	r0, [pc, #256]	; (9d0 <updateBeams()+0x588>)
     8ce:	smull	r6, r0, r0, r1
     8d2:	ldr	r6, [sp, #12]
     8d4:	add	r0, r1
     8d6:	rsb	r6, r6, ip
     8da:	ldr.w	ip, [sp, #12]
     8de:	str	r6, [sp, #20]
     8e0:	mov	r6, r0
     8e2:	ldr	r0, [sp, #16]
     8e4:	rsb	r0, r0, r6, asr #5
     8e8:	ldr	r6, [sp, #20]
     8ea:	rsb	r0, r0, r0, lsl #4
     8ee:	sub.w	r1, r1, r0, lsl #2
     8f2:	ldr	r0, [pc, #220]	; (9d0 <updateBeams()+0x588>)
     8f4:	rsb	r1, r1, #60	; 0x3c
     8f8:	mul.w	r1, r1, r6
     8fc:	smull	r6, r0, r0, r1
     900:	mov	r6, r0
     902:	asrs	r0, r1, #31
     904:	add	r1, r6
     906:	mov	r6, ip
     908:	rsb	r0, r0, r1, asr #5
     90c:	add	r6, r0
     90e:	uxtb	r1, r6
     910:	vmov	s13, r1
     914:	b.n	80c <updateBeams()+0x3c4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     916:	ldr	r0, [pc, #184]	; (9d0 <updateBeams()+0x588>)
     918:	vmov	s13, ip
     91c:	smull	r6, r0, r0, r1
     920:	ldr	r6, [sp, #12]
     922:	add	r0, r1
     924:	rsb	lr, r6, ip
     928:	mov	ip, r6
     92a:	ldr	r6, [sp, #16]
     92c:	rsb	r0, r6, r0, asr #5
     930:	mov	r6, ip
     932:	rsb	r0, r0, r0, lsl #4
     936:	sub.w	r1, r1, r0, lsl #2
     93a:	mul.w	lr, r1, lr
     93e:	ldr	r1, [pc, #144]	; (9d0 <updateBeams()+0x588>)
     940:	smull	r1, r0, r1, lr
     944:	mov.w	r1, lr, asr #31
     948:	add	lr, r0
     94a:	rsb	lr, r1, lr, asr #5
     94e:	add	r6, lr
     950:	uxtb.w	lr, r6
     954:	b.n	80c <updateBeams()+0x3c4>
     956:	ldr	r0, [pc, #120]	; (9d0 <updateBeams()+0x588>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     958:	vmov	s13, ip
     95c:	smull	r6, r0, r0, r1
     960:	ldr	r6, [sp, #12]
     962:	add	r0, r1
     964:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     968:	mov	lr, r6
     96a:	ldr	r6, [sp, #16]
     96c:	rsb	r0, r6, r0, asr #5
     970:	mov	r6, lr
     972:	rsb	r0, r0, r0, lsl #4
     976:	sub.w	r1, r1, r0, lsl #2
     97a:	rsb	r1, r1, #60	; 0x3c
     97e:	mul.w	ip, r1, ip
     982:	ldr	r1, [pc, #76]	; (9d0 <updateBeams()+0x588>)
     984:	smull	r1, r0, r1, ip
     988:	mov.w	r1, ip, asr #31
     98c:	add	ip, r0
     98e:	rsb	ip, r1, ip, asr #5
     992:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     994:	uxtb.w	ip, r6
     998:	b.n	80c <updateBeams()+0x3c4>
     99a:	ldr	r6, [sp, #12]
     99c:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     9a0:	mov	lr, r6
     9a2:	mul.w	r1, r1, r0
     9a6:	ldr	r0, [pc, #40]	; (9d0 <updateBeams()+0x588>)
     9a8:	smull	r6, r0, r0, r1
     9ac:	mov	r6, r0
     9ae:	asrs	r0, r1, #31
     9b0:	add	r1, r6
     9b2:	mov	r6, lr
     9b4:	rsb	r0, r0, r1, asr #5
     9b8:	add	r6, r0
     9ba:	uxtb	r1, r6
     9bc:	vmov	s13, r1
     9c0:	b.n	80c <updateBeams()+0x3c4>
     9c2:	mov.w	ip, #0
     9c6:	vmov	s13, ip
     9ca:	b.n	80c <updateBeams()+0x3c4>
     9cc:	.word	0xb60b60b7
     9d0:	.word	0x88888889
     9d4:	.word	0x20006ed8
     9d8:	.word	0x20006eec
     9dc:	.word	0x00000000

000009e0 <updateScreensFade()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     9e0:	ldr	r3, [pc, #748]	; (cd0 <updateScreensFade()+0x2f0>)





void updateScreensFade() {
     9e2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9e6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9e8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     9ea:	ldr	r1, [r3, #40]	; 0x28
     9ec:	vpush	{d8}
     9f0:	sub	sp, #28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9f2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     9f4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9f6:	ldr	r6, [pc, #728]	; (cd0 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     9f8:	cmp	r3, r1
     9fa:	it	eq
     9fc:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9fe:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     a00:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     a02:	ite	eq
     a04:	moveq	r5, #1
     a06:	movne	r5, #0
     a08:	cmp	r5, #0
     a0a:	beq.n	9f2 <updateScreensFade()+0x12>
  if (sinceFadeUpdate < FADE_INTERVAL) return;
     a0c:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     a0e:	ldr	r7, [pc, #708]	; (cd4 <updateScreensFade()+0x2f4>)
     a10:	orr.w	r1, r1, r2, lsl #27
     a14:	ldr	r3, [r7, #0]
     a16:	vmov	s15, r1
     a1a:	vldr	d5, [pc, #684]	; cc8 <updateScreensFade()+0x2e8>
     a1e:	vcvt.f64.u32	d7, s15
     a22:	vdiv.f64	d6, d7, d5
     a26:	vcvt.u32.f64	s12, d6
     a2a:	vmov	r2, s12
     a2e:	subs	r3, r2, r3
     a30:	cmp	r3, #15
     a32:	bls.w	c36 <updateScreensFade()+0x256>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     a36:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a38:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     a3a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a3c:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     a3e:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a40:	ldr	r4, [pc, #652]	; (cd0 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     a42:	cmp	r3, r1
     a44:	it	eq
     a46:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a48:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     a4a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     a4c:	ite	eq
     a4e:	moveq	r6, #1
     a50:	movne	r6, #0
     a52:	cmp	r6, #0
     a54:	beq.n	a3c <updateScreensFade()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     a56:	lsrs	r1, r3, #5
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     a58:	ldr.w	r8, [pc, #652]	; ce8 <updateScreensFade()+0x308>
     a5c:	vmov.f32	s11, #112	; 0x3f800000  1.0
     a60:	orr.w	r1, r1, r2, lsl #27
     a64:	vldr	s10, [r8, #156]	; 0x9c
     a68:	vmov	s15, r1
     a6c:	vcmpe.f32	s10, s11
     a70:	vcvt.f64.u32	d7, s15
     a74:	vmrs	APSR_nzcv, fpscr
     a78:	vldr	d4, [pc, #588]	; cc8 <updateScreensFade()+0x2e8>
     a7c:	vdiv.f64	d6, d7, d4
     a80:	vcvt.u32.f64	s12, d6
     a84:	vstr	s12, [r7]
     a88:	blt.w	c40 <updateScreensFade()+0x260>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a8c:	movs	r1, #11
     a8e:	ldr	r0, [pc, #584]	; (cd8 <updateScreensFade()+0x2f8>)
     a90:	bl	a17c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a94:	ldr	r0, [pc, #580]	; (cdc <updateScreensFade()+0x2fc>)
     a96:	bl	b2d0 <Print::println()>
      Serial.println("end of fade");
			if (newFrameReady) {
     a9a:	ldrb.w	r3, [r8, #148]	; 0x94
     a9e:	cmp	r3, #0
     aa0:	bne.w	e50 <updateScreensFade()+0x470>
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     aa4:	ldr.w	r8, [pc, #572]	; ce4 <updateScreensFade()+0x304>
     aa8:	vmov.f32	s15, #112	; 0x3f800000  1.0
     aac:	vldr	s14, [r8, #156]	; 0x9c
     ab0:	vcmpe.f32	s14, s15
     ab4:	vmrs	APSR_nzcv, fpscr
     ab8:	bge.w	c1e <updateScreensFade()+0x23e>
     abc:	ldr.w	r6, [r8, #160]	; 0xa0
     ac0:	ldr.w	r2, [r8, #164]	; 0xa4
     ac4:	ldr.w	ip, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     ac8:	ldr	r3, [pc, #516]	; (cd0 <updateScreensFade()+0x2f0>)
     aca:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     acc:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     ace:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ad0:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     ad2:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     ad4:	cmp	r3, r0
     ad6:	it	eq
     ad8:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ada:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     adc:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     ade:	ite	eq
     ae0:	moveq	r7, #1
     ae2:	movne	r7, #0
     ae4:	cmp	r7, #0
     ae6:	beq.n	ad0 <updateScreensFade()+0xf0>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     ae8:	lsrs	r0, r3, #5
     aea:	vldr	s10, [pc, #500]	; ce0 <updateScreensFade()+0x300>
     aee:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     af2:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     af4:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     af8:	ldr	r5, [pc, #488]	; (ce4 <updateScreensFade()+0x304>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     afa:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     afc:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     b00:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b04:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     b06:	vcvt.f64.u32	d7, s15
     b0a:	vldr	d4, [pc, #444]	; cc8 <updateScreensFade()+0x2e8>
     b0e:	vdiv.f64	d6, d7, d4
     b12:	vcvt.u32.f64	s14, d6
     b16:	vmov	r3, s14
     b1a:	subs	r6, r3, r6
     b1c:	vmov	s15, r6
     b20:	vcvt.f32.u32	s14, s15
     b24:	vdiv.f32	s15, s14, s10
     b28:	vcmpe.f32	s15, s11
     b2c:	vmrs	APSR_nzcv, fpscr
     b30:	it	pl
     b32:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     b36:	vstr	s15, [r8, #156]	; 0x9c
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b3a:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     b3e:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b40:	lsls	r6, r6, #3
     b42:	b.n	b50 <updateScreensFade()+0x170>
     b44:	ldr.w	r2, [r5, #164]	; 0xa4
     b48:	vldr	s15, [r5, #156]	; 0x9c
     b4c:	ldr.w	ip, [r5, #168]	; 0xa8
     b50:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     b54:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b58:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     b5a:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b5c:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b5e:	ldr.w	r0, [r8, #136]	; 0x88
     b62:	uxth	r1, r1
     b64:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b68:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b6c:	vmov	s14, lr
     b70:	ldrb.w	ip, [fp, #1]
     b74:	ldrb.w	lr, [fp, #2]
     b78:	vmov	s13, ip
     b7c:	vcvt.f32.s32	s14, s14
     b80:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b84:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b88:	vcvt.f32.s32	s13, s13
     b8c:	ldrb	r3, [r2, r3]
     b8e:	ldrb.w	ip, [lr, #2]
     b92:	vcvt.f32.s32	s12, s12
     b96:	vmov	s10, r3
     b9a:	ldrb.w	r3, [lr, #1]
     b9e:	vmov	s8, ip
     ba2:	vmul.f32	s13, s13, s15
     ba6:	vmov	s9, r3
     baa:	vmul.f32	s12, s12, s15
     bae:	vcvt.f32.s32	s8, s8
     bb2:	ldr.w	fp, [pc, #304]	; ce4 <updateScreensFade()+0x304>
     bb6:	vcvt.f32.s32	s9, s9
     bba:	vmul.f32	s15, s14, s15
     bbe:	vcvt.f32.s32	s10, s10
     bc2:	vmov.f32	s14, s13
     bc6:	vfma.f32	s12, s11, s8
     bca:	vfma.f32	s15, s10, s11
     bce:	vfma.f32	s14, s11, s9
     bd2:	vcvt.s32.f32	s13, s12
     bd6:	vcvt.s32.f32	s15, s15
     bda:	vcvt.s32.f32	s14, s14
     bde:	vstr	s13, [sp, #20]
     be2:	ldrb.w	r2, [sp, #20]
     be6:	vstr	s14, [sp, #12]
     bea:	vstr	s15, [sp, #16]
     bee:	str	r2, [sp, #0]
     bf0:	ldrb.w	r3, [sp, #12]
     bf4:	ldrb.w	r2, [sp, #16]
     bf8:	bl	9adc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     bfc:	cmp	r4, #24
     bfe:	bne.n	b44 <updateScreensFade()+0x164>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     c00:	add.w	r9, r9, #1
     c04:	adds	r7, #24
     c06:	cmp.w	r9, #24
     c0a:	uxth	r7, r7
     c0c:	beq.w	dc4 <updateScreensFade()+0x3e4>
     c10:	ldr.w	r2, [sl, #164]	; 0xa4
     c14:	vldr	s15, [sl, #156]	; 0x9c
     c18:	ldr.w	ip, [sl, #168]	; 0xa8
     c1c:	b.n	b3a <updateScreensFade()+0x15a>
     c1e:	movs	r1, #11
     c20:	ldr	r0, [pc, #180]	; (cd8 <updateScreensFade()+0x2f8>)
     c22:	bl	a17c <usb_serial_write>
     c26:	ldr	r0, [pc, #180]	; (cdc <updateScreensFade()+0x2fc>)
     c28:	bl	b2d0 <Print::println()>
	}

	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
     c2c:	ldrb.w	r3, [r8, #148]	; 0x94
     c30:	cmp	r3, #0
     c32:	bne.w	de0 <updateScreensFade()+0x400>
  sinceFadeUpdate = 0;

  screen_A.updateFade();
  screen_B.updateFade();
}
     c36:	add	sp, #28
     c38:	vpop	{d8}
     c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c40:	ldr.w	r6, [r8, #160]	; 0xa0
     c44:	ldr.w	r2, [r8, #164]	; 0xa4
     c48:	ldr.w	ip, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c4c:	ldr	r3, [pc, #128]	; (cd0 <updateScreensFade()+0x2f0>)
     c4e:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c50:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c52:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c54:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c56:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     c58:	cmp	r3, r0
     c5a:	it	eq
     c5c:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c5e:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     c60:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     c62:	ite	eq
     c64:	moveq	r7, #1
     c66:	movne	r7, #0
     c68:	cmp	r7, #0
     c6a:	beq.n	c54 <updateScreensFade()+0x274>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c6c:	lsrs	r0, r3, #5
     c6e:	vldr	s10, [pc, #112]	; ce0 <updateScreensFade()+0x300>
     c72:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     c76:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c78:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c7c:	ldr	r5, [pc, #104]	; (ce8 <updateScreensFade()+0x308>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     c7e:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c80:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     c84:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c88:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c8a:	vcvt.f64.u32	d7, s15
     c8e:	vldr	d4, [pc, #56]	; cc8 <updateScreensFade()+0x2e8>
     c92:	vdiv.f64	d6, d7, d4
     c96:	vcvt.u32.f64	s14, d6
     c9a:	vmov	r3, s14
     c9e:	subs	r6, r3, r6
     ca0:	vmov	s15, r6
     ca4:	vcvt.f32.u32	s14, s15
     ca8:	vdiv.f32	s15, s14, s10
     cac:	vcmpe.f32	s15, s11
     cb0:	vmrs	APSR_nzcv, fpscr
     cb4:	it	pl
     cb6:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     cba:	vstr	s15, [r8, #156]	; 0x9c
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     cbe:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     cc2:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     cc4:	lsls	r6, r6, #3
     cc6:	b.n	cf8 <updateScreensFade()+0x318>
     cc8:	.word	0xd2f1a9fc
     ccc:	.word	0x3ff0624d
     cd0:	.word	0x400d4000
     cd4:	.word	0x20003d0c
     cd8:	.word	0x20000460
     cdc:	.word	0x20000d08
     ce0:	.word	0x43c80000
     ce4:	.word	0x20003aa4
     ce8:	.word	0x200039f4
     cec:	ldr.w	r2, [r5, #164]	; 0xa4
     cf0:	vldr	s15, [r5, #156]	; 0x9c
     cf4:	ldr.w	ip, [r5, #168]	; 0xa8
     cf8:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     cfc:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d00:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     d02:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d04:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d06:	ldr.w	r0, [r8, #136]	; 0x88
     d0a:	uxth	r1, r1
     d0c:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d10:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d14:	vmov	s14, lr
     d18:	ldrb.w	ip, [fp, #1]
     d1c:	ldrb.w	lr, [fp, #2]
     d20:	vmov	s13, ip
     d24:	vcvt.f32.s32	s14, s14
     d28:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d2c:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d30:	vcvt.f32.s32	s13, s13
     d34:	ldrb	r3, [r2, r3]
     d36:	ldrb.w	ip, [lr, #2]
     d3a:	vcvt.f32.s32	s12, s12
     d3e:	vmov	s10, r3
     d42:	ldrb.w	r3, [lr, #1]
     d46:	vmov	s8, ip
     d4a:	vmul.f32	s13, s13, s15
     d4e:	vmov	s9, r3
     d52:	vmul.f32	s12, s12, s15
     d56:	vcvt.f32.s32	s8, s8
     d5a:	ldr.w	fp, [pc, #376]	; ed4 <updateScreensFade()+0x4f4>
     d5e:	vcvt.f32.s32	s9, s9
     d62:	vmul.f32	s15, s14, s15
     d66:	vcvt.f32.s32	s10, s10
     d6a:	vmov.f32	s14, s13
     d6e:	vfma.f32	s12, s11, s8
     d72:	vfma.f32	s15, s10, s11
     d76:	vfma.f32	s14, s11, s9
     d7a:	vcvt.s32.f32	s13, s12
     d7e:	vcvt.s32.f32	s15, s15
     d82:	vcvt.s32.f32	s14, s14
     d86:	vstr	s13, [sp, #20]
     d8a:	ldrb.w	r2, [sp, #20]
     d8e:	vstr	s14, [sp, #12]
     d92:	vstr	s15, [sp, #16]
     d96:	str	r2, [sp, #0]
     d98:	ldrb.w	r3, [sp, #12]
     d9c:	ldrb.w	r2, [sp, #16]
     da0:	bl	9adc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     da4:	cmp	r4, #24
     da6:	bne.n	cec <updateScreensFade()+0x30c>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     da8:	add.w	r9, r9, #1
     dac:	adds	r7, #24
     dae:	cmp.w	r9, #24
     db2:	uxth	r7, r7
     db4:	beq.n	dd6 <updateScreensFade()+0x3f6>
     db6:	ldr.w	r2, [sl, #164]	; 0xa4
     dba:	vldr	s15, [sl, #156]	; 0x9c
     dbe:	ldr.w	ip, [sl, #168]	; 0xa8
     dc2:	b.n	cbe <updateScreensFade()+0x2de>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     dc4:	ldr.w	r0, [fp, #136]	; 0x88
     dc8:	add	sp, #28
     dca:	vpop	{d8}
     dce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd2:	b.w	9894 <Adafruit_NeoPixel::show()>
     dd6:	ldr.w	r0, [fp, #136]	; 0x88
     dda:	bl	9894 <Adafruit_NeoPixel::show()>
     dde:	b.n	aa4 <updateScreensFade()+0xc4>
     de0:	movs	r1, #15
     de2:	ldr	r0, [pc, #228]	; (ec8 <updateScreensFade()+0x4e8>)
     de4:	bl	a17c <usb_serial_write>
     de8:	ldr	r0, [pc, #224]	; (ecc <updateScreensFade()+0x4ec>)
     dea:	bl	b2d0 <Print::println()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     dee:	ldr	r3, [pc, #224]	; (ed0 <updateScreensFade()+0x4f0>)
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     df0:	ldr.w	r1, [r8, #164]	; 0xa4
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     df4:	ldr.w	ip, [r8, #172]	; 0xac
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     df8:	mov	r5, r3
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     dfa:	ldr.w	r2, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     dfe:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     e00:	ldr	r3, [r3, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     e02:	str.w	r1, [r8, #172]	; 0xac
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e06:	str.w	ip, [r8, #168]	; 0xa8
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e0a:	str.w	r2, [r8, #164]	; 0xa4
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e0e:	ldr	r0, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     e10:	ldr	r1, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     e12:	cmp	r1, r3
     e14:	it	eq
     e16:	cmpeq	r0, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e18:	mov	r4, r0
    uint32_t lo2 = SNVS_HPRTCLR;
     e1a:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
     e1c:	ite	eq
     e1e:	moveq	r6, #1
     e20:	movne	r6, #0
     e22:	cmp	r6, #0
     e24:	beq.n	e0e <updateScreensFade()+0x42e>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     e26:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     e28:	movs	r1, #0
     e2a:	orr.w	r3, r3, r0, lsl #27
     e2e:	strb.w	r1, [r8, #148]	; 0x94
     e32:	vmov	s15, r3
     e36:	vldr	d5, [pc, #136]	; ec0 <updateScreensFade()+0x4e0>
     e3a:	vcvt.f64.u32	d7, s15
     e3e:	vdiv.f64	d6, d7, d5
     e42:	vcvt.u32.f64	s15, d6
     e46:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     e4a:	vstr	s15, [r8, #160]	; 0xa0
     e4e:	b.n	ac8 <updateScreensFade()+0xe8>
     e50:	movs	r1, #15
     e52:	ldr	r0, [pc, #116]	; (ec8 <updateScreensFade()+0x4e8>)
     e54:	bl	a17c <usb_serial_write>
     e58:	ldr	r0, [pc, #112]	; (ecc <updateScreensFade()+0x4ec>)
     e5a:	bl	b2d0 <Print::println()>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e5e:	mov	r6, r4
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     e60:	ldr.w	r1, [r8, #164]	; 0xa4
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e64:	ldr.w	ip, [r8, #172]	; 0xac
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e68:	ldr.w	r2, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     e6c:	ldr	r5, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     e6e:	ldr	r3, [r4, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     e70:	str.w	r1, [r8, #172]	; 0xac
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e74:	str.w	ip, [r8, #168]	; 0xa8
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e78:	str.w	r2, [r8, #164]	; 0xa4
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e7c:	ldr	r0, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     e7e:	ldr	r1, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     e80:	cmp	r1, r3
     e82:	it	eq
     e84:	cmpeq	r0, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e86:	mov	r5, r0
    uint32_t lo2 = SNVS_HPRTCLR;
     e88:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
     e8a:	ite	eq
     e8c:	moveq	r4, #1
     e8e:	movne	r4, #0
     e90:	cmp	r4, #0
     e92:	beq.n	e7c <updateScreensFade()+0x49c>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     e94:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     e96:	movs	r1, #0
     e98:	orr.w	r3, r3, r0, lsl #27
     e9c:	strb.w	r1, [r8, #148]	; 0x94
     ea0:	vmov	s15, r3
     ea4:	vldr	d5, [pc, #24]	; ec0 <updateScreensFade()+0x4e0>
     ea8:	vcvt.f64.u32	d7, s15
     eac:	vdiv.f64	d6, d7, d5
     eb0:	vcvt.u32.f64	s15, d6
     eb4:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     eb8:	vstr	s15, [r8, #160]	; 0xa0
     ebc:	b.n	c4c <updateScreensFade()+0x26c>
     ebe:	nop
     ec0:	.word	0xd2f1a9fc
     ec4:	.word	0x3ff0624d
     ec8:	.word	0x2000046c
     ecc:	.word	0x20000d08
     ed0:	.word	0x400d4000
     ed4:	.word	0x200039f4

00000ed8 <Screen::iterate_animation() [clone .part.13]>:
		_screen->show();
	}


	
	void iterate_animation() {
     ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     edc:	movs	r3, #2
     ede:	sub	sp, #68	; 0x44
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
     ee0:	ldr.w	r9, [r0, #124]	; 0x7c
     ee4:	movs	r2, #32
     ee6:	str	r3, [sp, #4]
		_screen->show();
	}


	
	void iterate_animation() {
     ee8:	mov	fp, r0
     eea:	addw	r3, r9, #2428	; 0x97c
     eee:	movs	r1, #0
     ef0:	ldr.w	sl, [pc, #1500]	; 14d0 <Screen::iterate_animation() [clone .part.13]+0x5f8>
     ef4:	add.w	r0, sp, r2
     ef8:	str	r3, [sp, #12]
     efa:	add.w	r3, r9, #4640	; 0x1220
     efe:	str	r1, [sp, #20]
     f00:	str	r3, [sp, #24]
     f02:	bl	bf9c <memset>
     f06:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
     f0a:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     f0e:	movs	r7, #2
  updateScreensFade();
     f10:	bl	9e0 <updateScreensFade()>
     f14:	ldrb.w	r2, [r9, #24]
     f18:	ldr	r3, [sp, #24]
     f1a:	str	r2, [sp, #16]
     f1c:	ldr	r3, [r3, #0]
     f1e:	ldr	r2, [sp, #20]
     f20:	ldr	r1, [sp, #12]
     f22:	add.w	r8, r3, r2
     f26:	sub.w	ip, r1, #96	; 0x60
     f2a:	sub.w	r3, r1, #2400	; 0x960
     f2e:	mov	fp, r8
     f30:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     f32:	ldr	r3, [sp, #16]
     f34:	cmp	r3, #0
     f36:	beq.w	130a <Screen::iterate_animation() [clone .part.13]+0x432>
      return _background[x][y];
     f3a:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     f3e:	cmp	r3, #0
     f40:	beq.n	1016 <Screen::iterate_animation() [clone .part.13]+0x13e>
     f42:	ldr	r3, [sp, #4]
     f44:	add.w	lr, sp, #32
     f48:	subs	r6, r3, #3
     f4a:	subs	r3, r7, #3
     f4c:	str	r3, [sp, #8]
     f4e:	smull	r3, r2, sl, r6
     f52:	asrs	r3, r6, #31
     f54:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     f56:	mov	r5, lr
     f58:	rsb	r3, r3, r2, asr #2
     f5c:	add.w	r3, r3, r3, lsl #1
     f60:	sub.w	r3, r6, r3, lsl #3
     f64:	adds	r3, #24
     f66:	smull	r2, r1, sl, r3
     f6a:	asrs	r2, r3, #31
     f6c:	rsb	r2, r2, r1, asr #2
     f70:	add.w	r2, r2, r2, lsl #1
     f74:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     f78:	add.w	r2, r2, r2, lsl #1
     f7c:	lsls	r4, r2, #3
     f7e:	smull	r3, r2, sl, r0
     f82:	asrs	r3, r0, #31
     f84:	rsb	r3, r3, r2, asr #2
     f88:	add.w	r3, r3, r3, lsl #1
     f8c:	sub.w	r3, r0, r3, lsl #3
     f90:	adds	r0, #1
     f92:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     f94:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     f96:	smull	r2, r1, sl, r3
     f9a:	mov.w	r2, r3, asr #31
     f9e:	rsb	r2, r2, r1, asr #2
     fa2:	add.w	r2, r2, r2, lsl #1
     fa6:	sub.w	r3, r3, r2, lsl #3
     faa:	add	r3, r4
     fac:	add.w	r3, r9, r3, lsl #2
     fb0:	ldr	r3, [r3, #28]
     fb2:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     fb6:	bne.n	f7e <Screen::iterate_animation() [clone .part.13]+0xa6>
     fb8:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     fba:	ldr	r3, [sp, #4]
     fbc:	add.w	lr, lr, #12
     fc0:	cmp	r6, r3
     fc2:	bne.n	f4e <Screen::iterate_animation() [clone .part.13]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     fc4:	ldr	r3, [sp, #0]
     fc6:	movs	r0, #1
     fc8:	ldr	r1, [r3, #0]
     fca:	ldr.w	r3, [r9]
     fce:	adds	r5, r1, r3
     fd0:	movs	r4, #0
     fd2:	mov	r3, r4
     fd4:	b.n	fdc <Screen::iterate_animation() [clone .part.13]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     fd6:	adds	r3, #1
     fd8:	cmp	r3, #8
     fda:	beq.n	ff2 <Screen::iterate_animation() [clone .part.13]+0x11a>
          if ((i >> j) % 2 == 1){
     fdc:	asr.w	r2, r0, r3
     fe0:	lsls	r6, r2, #31
     fe2:	bpl.n	fd6 <Screen::iterate_animation() [clone .part.13]+0xfe>
            sum += neighbours[j];
     fe4:	add	r2, sp, #32
     fe6:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     fea:	adds	r3, #1
     fec:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     fee:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     ff0:	bne.n	fdc <Screen::iterate_animation() [clone .part.13]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     ff2:	cmp	r5, r4
     ff4:	beq.w	1314 <Screen::iterate_animation() [clone .part.13]+0x43c>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
     ff8:	adds	r0, #1
     ffa:	cmp.w	r0, #256	; 0x100
     ffe:	bne.n	fd0 <Screen::iterate_animation() [clone .part.13]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1000:	ldr.w	r3, [r9, #8]
    1004:	subs	r1, r1, r3
    1006:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    100a:	ldr.w	r3, [r9, #12]
    100e:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    1010:	it	gt
    1012:	strgt.w	r3, [ip]
    1016:	ldr	r3, [sp, #0]
    1018:	add.w	ip, ip, #4
    101c:	adds	r7, #1
    101e:	add.w	r8, r8, #1
    1022:	adds	r3, #4
    1024:	add.w	fp, fp, #1
    1028:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    102a:	ldr	r3, [sp, #12]
    102c:	cmp	ip, r3
    102e:	bne.n	f32 <Screen::iterate_animation() [clone .part.13]+0x5a>
    1030:	ldr	r3, [sp, #20]
    1032:	add.w	r2, ip, #96	; 0x60
    1036:	adds	r3, #24
    1038:	str	r2, [sp, #12]
    103a:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    103c:	cmp.w	r3, #576	; 0x240
    1040:	str	r3, [sp, #20]
    1042:	add.w	r2, r2, #1
    1046:	str	r2, [sp, #4]
    1048:	bne.w	f0a <Screen::iterate_animation() [clone .part.13]+0x32>
    104c:	movw	r5, #4632	; 0x1218
    1050:	ldr.w	fp, [sp, #28]
    1054:	addw	r4, r9, #2328	; 0x918
    1058:	add	r5, r9
    105a:	sub.w	r3, r4, #2304	; 0x900
    105e:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1062:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1064:	ldr.w	r1, [r2, #4]!
    1068:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    106c:	cmp	r3, r0
    106e:	bne.n	1064 <Screen::iterate_animation() [clone .part.13]+0x18c>
    1070:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1072:	cmp	r4, r5
    1074:	bne.n	105a <Screen::iterate_animation() [clone .part.13]+0x182>
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    1076:	ldr.w	r9, [fp, #120]	; 0x78
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    107a:	movs	r3, #2
    107c:	movs	r2, #32
    107e:	movs	r1, #0
    1080:	str	r3, [sp, #4]
    1082:	addw	r3, r9, #2428	; 0x97c
    1086:	ldr.w	sl, [pc, #1096]	; 14d0 <Screen::iterate_animation() [clone .part.13]+0x5f8>
    108a:	add.w	r0, sp, r2
    108e:	str	r3, [sp, #12]
    1090:	add.w	r3, r9, #4640	; 0x1220
    1094:	str	r1, [sp, #20]
    1096:	str	r3, [sp, #24]
    1098:	bl	bf9c <memset>
    109c:	str.w	fp, [sp, #28]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    10a0:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    10a4:	movs	r7, #2
  updateScreensFade();
    10a6:	bl	9e0 <updateScreensFade()>
    10aa:	ldrb.w	r2, [r9, #24]
    10ae:	ldr	r3, [sp, #24]
    10b0:	str	r2, [sp, #16]
    10b2:	ldr	r3, [r3, #0]
    10b4:	ldr	r2, [sp, #20]
    10b6:	ldr	r1, [sp, #12]
    10b8:	add.w	r8, r3, r2
    10bc:	sub.w	ip, r1, #96	; 0x60
    10c0:	sub.w	r3, r1, #2400	; 0x960
    10c4:	mov	fp, r8
    10c6:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    10c8:	ldr	r3, [sp, #16]
    10ca:	cmp	r3, #0
    10cc:	beq.w	1320 <Screen::iterate_animation() [clone .part.13]+0x448>
      return _background[x][y];
    10d0:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    10d4:	cmp	r3, #0
    10d6:	beq.n	11ac <Screen::iterate_animation() [clone .part.13]+0x2d4>
    10d8:	ldr	r3, [sp, #4]
    10da:	add.w	lr, sp, #32
    10de:	subs	r6, r3, #3
    10e0:	subs	r3, r7, #3
    10e2:	str	r3, [sp, #8]
    10e4:	smull	r3, r2, sl, r6
    10e8:	asrs	r3, r6, #31
    10ea:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    10ec:	mov	r5, lr
    10ee:	rsb	r3, r3, r2, asr #2
    10f2:	add.w	r3, r3, r3, lsl #1
    10f6:	sub.w	r3, r6, r3, lsl #3
    10fa:	adds	r3, #24
    10fc:	smull	r2, r1, sl, r3
    1100:	asrs	r2, r3, #31
    1102:	rsb	r2, r2, r1, asr #2
    1106:	add.w	r2, r2, r2, lsl #1
    110a:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    110e:	add.w	r2, r2, r2, lsl #1
    1112:	lsls	r4, r2, #3
    1114:	smull	r3, r2, sl, r0
    1118:	asrs	r3, r0, #31
    111a:	rsb	r3, r3, r2, asr #2
    111e:	add.w	r3, r3, r3, lsl #1
    1122:	sub.w	r3, r0, r3, lsl #3
    1126:	adds	r0, #1
    1128:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    112a:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    112c:	smull	r2, r1, sl, r3
    1130:	mov.w	r2, r3, asr #31
    1134:	rsb	r2, r2, r1, asr #2
    1138:	add.w	r2, r2, r2, lsl #1
    113c:	sub.w	r3, r3, r2, lsl #3
    1140:	add	r3, r4
    1142:	add.w	r3, r9, r3, lsl #2
    1146:	ldr	r3, [r3, #28]
    1148:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    114c:	bne.n	1114 <Screen::iterate_animation() [clone .part.13]+0x23c>
    114e:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1150:	ldr	r3, [sp, #4]
    1152:	add.w	lr, lr, #12
    1156:	cmp	r6, r3
    1158:	bne.n	10e4 <Screen::iterate_animation() [clone .part.13]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    115a:	ldr	r3, [sp, #0]
    115c:	movs	r0, #1
    115e:	ldr	r1, [r3, #0]
    1160:	ldr.w	r3, [r9]
    1164:	adds	r5, r1, r3
    1166:	movs	r4, #0
    1168:	mov	r3, r4
    116a:	b.n	1172 <Screen::iterate_animation() [clone .part.13]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    116c:	adds	r3, #1
    116e:	cmp	r3, #8
    1170:	beq.n	1188 <Screen::iterate_animation() [clone .part.13]+0x2b0>
          if ((i >> j) % 2 == 1){
    1172:	asr.w	r2, r0, r3
    1176:	lsls	r2, r2, #31
    1178:	bpl.n	116c <Screen::iterate_animation() [clone .part.13]+0x294>
            sum += neighbours[j];
    117a:	add	r2, sp, #32
    117c:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1180:	adds	r3, #1
    1182:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1184:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1186:	bne.n	1172 <Screen::iterate_animation() [clone .part.13]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1188:	cmp	r5, r4
    118a:	beq.w	132a <Screen::iterate_animation() [clone .part.13]+0x452>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    118e:	adds	r0, #1
    1190:	cmp.w	r0, #256	; 0x100
    1194:	bne.n	1166 <Screen::iterate_animation() [clone .part.13]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1196:	ldr.w	r3, [r9, #8]
    119a:	subs	r1, r1, r3
    119c:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    11a0:	ldr.w	r3, [r9, #12]
    11a4:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    11a6:	it	gt
    11a8:	strgt.w	r3, [ip]
    11ac:	ldr	r3, [sp, #0]
    11ae:	add.w	ip, ip, #4
    11b2:	adds	r7, #1
    11b4:	add.w	r8, r8, #1
    11b8:	adds	r3, #4
    11ba:	add.w	fp, fp, #1
    11be:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    11c0:	ldr	r3, [sp, #12]
    11c2:	cmp	r3, ip
    11c4:	bne.n	10c8 <Screen::iterate_animation() [clone .part.13]+0x1f0>
    11c6:	ldr	r2, [sp, #12]
    11c8:	ldr	r3, [sp, #20]
    11ca:	adds	r2, #96	; 0x60
    11cc:	adds	r3, #24
    11ce:	str	r2, [sp, #12]
    11d0:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    11d2:	cmp.w	r3, #576	; 0x240
    11d6:	str	r3, [sp, #20]
    11d8:	add.w	r2, r2, #1
    11dc:	str	r2, [sp, #4]
    11de:	bne.w	10a0 <Screen::iterate_animation() [clone .part.13]+0x1c8>
    11e2:	movw	r5, #4632	; 0x1218
    11e6:	ldr.w	fp, [sp, #28]
    11ea:	addw	r4, r9, #2328	; 0x918
    11ee:	add	r5, r9
    11f0:	sub.w	r3, r4, #2304	; 0x900
    11f4:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    11f8:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    11fa:	ldr.w	r1, [r2, #4]!
    11fe:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1202:	cmp	r0, r3
    1204:	bne.n	11fa <Screen::iterate_animation() [clone .part.13]+0x322>
    1206:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1208:	cmp	r5, r4
    120a:	bne.n	11f0 <Screen::iterate_animation() [clone .part.13]+0x318>
		ratio++;
    120c:	ldr.w	r3, [fp, #152]	; 0x98
    1210:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    1212:	cmp	r3, #1
	
	void iterate_animation() {
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    1214:	str.w	r3, [fp, #152]	; 0x98
		if (ratio == RATIO_GROWTH){
    1218:	beq.w	14d4 <Screen::iterate_animation() [clone .part.13]+0x5fc>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    121c:	mov.w	ip, #0
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1220:	ldr	r1, [pc, #660]	; (14b8 <Screen::iterate_animation() [clone .part.13]+0x5e0>)
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1222:	mov.w	lr, #360	; 0x168
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    1226:	ldr	r0, [pc, #660]	; (14bc <Screen::iterate_animation() [clone .part.13]+0x5e4>)
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1228:	str.w	ip, [sp, #4]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    122c:	ldr	r2, [sp, #4]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    122e:	movs	r4, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1230:	add.w	sl, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    1234:	add.w	r3, r2, r2, lsl #3
    1238:	mov.w	sl, sl, lsl #3
    123c:	lsls	r3, r3, #3
    123e:	str	r3, [sp, #0]

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				if ((*_fg_automaton).can_color(x, y)) {
    1240:	ldr.w	r3, [fp, #124]	; 0x7c
    1244:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1248:	ldrb	r5, [r3, #24]
    124a:	ldr	r2, [r2, #0]
      return _background[x][y];
    124c:	add	r2, r4
    124e:	ldrb.w	r2, [r2, ip]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1252:	cbnz	r5, 1258 <Screen::iterate_animation() [clone .part.13]+0x380>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1254:	eor.w	r2, r2, #1
    1258:	cbnz	r2, 125e <Screen::iterate_animation() [clone .part.13]+0x386>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    125a:	ldr.w	r3, [fp, #120]	; 0x78
    125e:	add.w	r2, sl, r4
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1262:	add.w	r6, sl, r4
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1266:	add.w	r3, r3, r2, lsl #2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    126a:	adds	r6, #6
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    126c:	ldr	r5, [r3, #28]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    126e:	lsls	r6, r6, #2
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1270:	ldr	r3, [pc, #588]	; (14c0 <Screen::iterate_animation() [clone .part.13]+0x5e8>)
    1272:	smull	r2, r3, r5, r3
    1276:	asrs	r2, r5, #31
    1278:	add	r3, r5
    127a:	rsb	r3, r2, r3, asr #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    127e:	ldr.w	r2, [fp, #128]	; 0x80
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1282:	mls	r3, lr, r3, r5
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    1286:	ldr.w	r5, [fp, #132]	; 0x84
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    128a:	add	r2, r6
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    128c:	add	r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    128e:	ldr	r2, [r2, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    1290:	ldr	r5, [r5, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1292:	add.w	r2, r2, r2, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    1296:	adds	r5, #50	; 0x32
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1298:	lsls	r2, r2, #1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    129a:	smull	r8, r9, r5, r1
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    129e:	smull	r6, r7, r2, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12a2:	asrs	r6, r5, #31
    12a4:	add.w	r8, r5, r9
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12a8:	add.w	r9, r2, r7
    12ac:	asrs	r7, r2, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12ae:	rsb	r6, r6, r8, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12b2:	rsb	r7, r7, r9, asr #7
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12b6:	rsb	r6, r6, r6, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12ba:	rsb	r7, r7, r7, lsl #8
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12be:	subs	r6, r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12c0:	subs	r7, r2, r7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    12c2:	cmp	r6, #219	; 0xdb
    12c4:	ble.n	1336 <Screen::iterate_animation() [clone .part.13]+0x45e>
    12c6:	rsb	r6, r6, #255	; 0xff
    12ca:	ldr	r5, [pc, #504]	; (14c4 <Screen::iterate_animation() [clone .part.13]+0x5ec>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    12cc:	cmp	r7, #150	; 0x96
    12ce:	ldr.w	r2, [r5, r6, lsl #2]
    12d2:	bgt.w	14a0 <Screen::iterate_animation() [clone .part.13]+0x5c8>
    12d6:	movs	r5, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    12d8:	cmp	r2, #255	; 0xff
    12da:	bne.n	1342 <Screen::iterate_animation() [clone .part.13]+0x46a>


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    12dc:	adds	r4, #1
    12de:	cmp	r4, #24
    12e0:	bne.n	1240 <Screen::iterate_animation() [clone .part.13]+0x368>
	}


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    12e2:	ldr	r3, [sp, #4]
    12e4:	add.w	ip, ip, #24
    12e8:	adds	r3, #1
    12ea:	cmp	r3, #24
    12ec:	str	r3, [sp, #4]
    12ee:	bne.n	122c <Screen::iterate_animation() [clone .part.13]+0x354>
			ratio = 0;
		}

		gen_color_matrix();

		newFrameReady = true;
    12f0:	movs	r3, #1
    12f2:	movs	r1, #13
    12f4:	ldr	r0, [pc, #464]	; (14c8 <Screen::iterate_animation() [clone .part.13]+0x5f0>)
    12f6:	strb.w	r3, [fp, #148]	; 0x94
    12fa:	bl	a17c <usb_serial_write>
    12fe:	ldr	r0, [pc, #460]	; (14cc <Screen::iterate_animation() [clone .part.13]+0x5f4>)
    Serial.println("newFrameReady");
	}
    1300:	add	sp, #68	; 0x44
    1302:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1306:	b.w	b2d0 <Print::println()>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    130a:	ldrb.w	r3, [fp]
    130e:	eor.w	r3, r3, #1
    1312:	b.n	f3e <Screen::iterate_animation() [clone .part.13]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1314:	ldr.w	r2, [r9, #4]
    1318:	add	r1, r2
    131a:	str.w	r1, [ip]
    131e:	b.n	100a <Screen::iterate_animation() [clone .part.13]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1320:	ldrb.w	r3, [fp]
    1324:	eor.w	r3, r3, #1
    1328:	b.n	10d4 <Screen::iterate_animation() [clone .part.13]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    132a:	ldr.w	r2, [r9, #4]
    132e:	add	r1, r2
    1330:	str.w	r1, [ip]
    1334:	b.n	11a0 <Screen::iterate_animation() [clone .part.13]+0x2c8>
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    1336:	cmp	r7, #150	; 0x96
    1338:	mov.w	r2, #5
    133c:	bgt.w	149e <Screen::iterate_animation() [clone .part.13]+0x5c6>
    1340:	movs	r5, #0
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    1342:	smull	r7, r6, r0, r3
    1346:	asrs	r7, r3, #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    1348:	mul.w	r2, r5, r2
    switch(hue/60) {
    134c:	add	r6, r3
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    134e:	asrs	r2, r2, #8
    switch(hue/60) {
    1350:	rsb	r6, r7, r6, asr #5
    1354:	cmp	r6, #5
    1356:	bhi.w	14ae <Screen::iterate_animation() [clone .part.13]+0x5d6>
    135a:	tbb	[pc, r6]
    135e:	.short	0x7d99
    1360:	.word	0x032c4662
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    1364:	smull	r6, r9, r0, r3
    1368:	rsb	r8, r2, r5
    136c:	uxtb	r6, r5
    136e:	add.w	r5, r9, r3
    1372:	uxtb.w	r9, r2
    1376:	rsb	r5, r7, r5, asr #5
    137a:	rsb	r5, r5, r5, lsl #4
    137e:	sub.w	r3, r3, r5, lsl #2
    1382:	rsb	r3, r3, #60	; 0x3c
    1386:	mul.w	r3, r8, r3
    138a:	smull	r5, r7, r0, r3
    138e:	asrs	r5, r3, #31
    1390:	add	r3, r7
    1392:	rsb	r3, r5, r3, asr #5
    1396:	add	r2, r3
    1398:	uxtb.w	r8, r2
    break;
    }
    *r = colors[0];
    139c:	ldr	r5, [sp, #0]
    139e:	add.w	r3, r4, r4, lsl #1
				

				//hue = filter_hue(hue);
				bri = shift_bri(bri);

				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    13a2:	ldr.w	r2, [fp, #172]	; 0xac
    13a6:	add	r3, r5
    13a8:	adds	r5, r2, r3
    13aa:	strb	r6, [r2, r3]
    *g = colors[1];
    13ac:	strb.w	r9, [r5, #1]
    *b = colors[2]; 
    13b0:	strb.w	r8, [r5, #2]
    13b4:	b.n	12dc <Screen::iterate_animation() [clone .part.13]+0x404>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    13b6:	smull	r6, r9, r0, r3
    13ba:	uxtb.w	r8, r5
    13be:	subs	r6, r5, r2
    13c0:	add.w	r5, r9, r3
    13c4:	uxtb.w	r9, r2
    13c8:	rsb	r5, r7, r5, asr #5
    13cc:	rsb	r5, r5, r5, lsl #4
    13d0:	sub.w	r3, r3, r5, lsl #2
    13d4:	mul.w	r6, r3, r6
    13d8:	smull	r3, r5, r0, r6
    13dc:	asrs	r3, r6, #31
    13de:	add	r6, r5
    13e0:	rsb	r6, r3, r6, asr #5
    13e4:	add	r2, r6
    13e6:	uxtb	r6, r2
    13e8:	b.n	139c <Screen::iterate_animation() [clone .part.13]+0x4c4>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    13ea:	smull	r8, r6, r0, r3
    13ee:	rsb	r9, r2, r5
    13f2:	uxtb.w	r8, r5
    13f6:	adds	r5, r6, r3
    13f8:	uxtb	r6, r2
    13fa:	rsb	r5, r7, r5, asr #5
    13fe:	rsb	r5, r5, r5, lsl #4
    1402:	sub.w	r3, r3, r5, lsl #2
    1406:	rsb	r3, r3, #60	; 0x3c
    140a:	mul.w	r3, r9, r3
    140e:	smull	r5, r7, r0, r3
    1412:	asrs	r5, r3, #31
    1414:	add	r3, r7
    1416:	rsb	r3, r5, r3, asr #5
    141a:	add	r2, r3
    141c:	uxtb.w	r9, r2
    1420:	b.n	139c <Screen::iterate_animation() [clone .part.13]+0x4c4>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    1422:	smull	r8, r6, r0, r3
    1426:	uxtb.w	r9, r5
    142a:	rsb	r8, r2, r5
    142e:	adds	r5, r6, r3
    1430:	uxtb	r6, r2
    1432:	rsb	r5, r7, r5, asr #5
    1436:	rsb	r5, r5, r5, lsl #4
    143a:	sub.w	r3, r3, r5, lsl #2
    143e:	mul.w	r8, r3, r8
    1442:	smull	r3, r5, r0, r8
    1446:	mov.w	r3, r8, asr #31
    144a:	add	r8, r5
    144c:	rsb	r8, r3, r8, asr #5
    1450:	add	r2, r8
    1452:	uxtb.w	r8, r2
    1456:	b.n	139c <Screen::iterate_animation() [clone .part.13]+0x4c4>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    1458:	smull	r6, r8, r0, r3
    145c:	uxtb.w	r9, r5
    1460:	subs	r6, r5, r2
    1462:	add.w	r5, r8, r3
    1466:	uxtb.w	r8, r2
    146a:	rsb	r5, r7, r5, asr #5
    146e:	rsb	r5, r5, r5, lsl #4
    1472:	sub.w	r3, r3, r5, lsl #2
    1476:	rsb	r3, r3, #60	; 0x3c
    147a:	mul.w	r3, r6, r3
    147e:	smull	r5, r6, r0, r3
    1482:	asrs	r5, r3, #31
    1484:	add	r3, r6
    1486:	rsb	r3, r5, r3, asr #5
    148a:	add	r2, r3
    148c:	uxtb	r6, r2
    148e:	b.n	139c <Screen::iterate_animation() [clone .part.13]+0x4c4>
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    1490:	subs	r7, r5, r2
    1492:	uxtb	r6, r5
    1494:	uxtb.w	r8, r2
    1498:	mul.w	r3, r3, r7
    149c:	b.n	140e <Screen::iterate_animation() [clone .part.13]+0x536>
    149e:	ldr	r5, [pc, #36]	; (14c4 <Screen::iterate_animation() [clone .part.13]+0x5ec>)
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    14a0:	adds	r7, #100	; 0x64
    14a2:	cmp	r7, #255	; 0xff
    14a4:	it	ge
    14a6:	movge	r7, #255	; 0xff
    14a8:	ldr.w	r5, [r5, r7, lsl #2]
    14ac:	b.n	12d8 <Screen::iterate_animation() [clone .part.13]+0x400>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    14ae:	mov.w	r8, #0
    14b2:	mov	r9, r8
    14b4:	mov	r6, r8
    14b6:	b.n	139c <Screen::iterate_animation() [clone .part.13]+0x4c4>
    14b8:	.word	0x80808081
    14bc:	.word	0x88888889
    14c0:	.word	0xb60b60b7
    14c4:	.word	0x20000060
    14c8:	.word	0x2000047c
    14cc:	.word	0x20000d08
    14d0:	.word	0x2aaaaaab
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    14d4:	ldr.w	sl, [fp, #128]	; 0x80
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    14d8:	movs	r2, #32
    14da:	mov.w	r8, #2
    14de:	ldr.w	r9, [pc, #732]	; 17bc <Screen::iterate_animation() [clone .part.13]+0x8e4>
    14e2:	addw	r3, sl, #2332	; 0x91c
    14e6:	movs	r1, #0
    14e8:	add.w	r0, sp, r2
    14ec:	str	r3, [sp, #4]
    14ee:	bl	bf9c <memset>
    14f2:	str.w	fp, [sp, #20]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    14f6:	bl	448 <updateBeams()>
  updateScreensFade();
    14fa:	bl	9e0 <updateScreensFade()>
    14fe:	ldr.w	r3, [sl]
    1502:	ldr	r2, [sp, #4]
    1504:	mov.w	ip, #4294967295
    1508:	str	r3, [sp, #8]
    150a:	ldr.w	r3, [sl, #12]
    150e:	mov	fp, r2
    1510:	str	r3, [sp, #12]
    1512:	subw	r3, r2, #2308	; 0x904
    1516:	str	r3, [sp, #0]
    1518:	sub.w	r3, r8, #3
    151c:	str	r3, [sp, #16]
    151e:	ldr	r6, [sp, #16]
    1520:	add.w	lr, sp, #32
    1524:	add.w	r7, ip, #3
    1528:	smull	r3, r2, r9, r6
    152c:	asrs	r3, r6, #31
    152e:	mov	r4, lr
    1530:	mov	r1, ip
    1532:	rsb	r3, r3, r2, asr #2
    1536:	add.w	r3, r3, r3, lsl #1
    153a:	sub.w	r3, r6, r3, lsl #3
    153e:	adds	r3, #24
    1540:	smull	r2, r0, r9, r3
    1544:	asrs	r2, r3, #31
    1546:	rsb	r0, r2, r0, asr #2
    154a:	add.w	r0, r0, r0, lsl #1
    154e:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1552:	add.w	r0, r0, r0, lsl #1
    1556:	lsls	r0, r0, #3
    1558:	smull	r3, r2, r9, r1
    155c:	asrs	r3, r1, #31
    155e:	rsb	r3, r3, r2, asr #2
    1562:	add.w	r3, r3, r3, lsl #1
    1566:	sub.w	r3, r1, r3, lsl #3
    156a:	adds	r1, #1
    156c:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    156e:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1570:	smull	r2, r5, r9, r3
    1574:	mov.w	r2, r3, asr #31
    1578:	rsb	r2, r2, r5, asr #2
    157c:	add.w	r2, r2, r2, lsl #1
    1580:	sub.w	r3, r3, r2, lsl #3
    1584:	add	r3, r0
    1586:	add.w	r3, sl, r3, lsl #2
    158a:	ldr	r3, [r3, #28]
    158c:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1590:	bne.n	1558 <Screen::iterate_animation() [clone .part.13]+0x680>
    1592:	adds	r6, #1
    1594:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    1598:	cmp	r8, r6
    159a:	bne.n	1528 <Screen::iterate_animation() [clone .part.13]+0x650>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    159c:	ldr	r3, [sp, #0]
    159e:	movs	r1, #1
    15a0:	ldr.w	r0, [r3, #4]!
    15a4:	str	r3, [sp, #0]
    15a6:	ldr	r3, [sp, #8]
    15a8:	adds	r5, r0, r3
    15aa:	movs	r4, #0
    15ac:	mov	r3, r4
    15ae:	b.n	15b6 <Screen::iterate_animation() [clone .part.13]+0x6de>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15b0:	adds	r3, #1
    15b2:	cmp	r3, #8
    15b4:	beq.n	15cc <Screen::iterate_animation() [clone .part.13]+0x6f4>
          if ((i >> j) % 2 == 1){
    15b6:	asr.w	r2, r1, r3
    15ba:	lsls	r6, r2, #31
    15bc:	bpl.n	15b0 <Screen::iterate_animation() [clone .part.13]+0x6d8>
            sum += neighbours[j];
    15be:	add	r2, sp, #32
    15c0:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15c4:	adds	r3, #1
    15c6:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    15c8:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15ca:	bne.n	15b6 <Screen::iterate_animation() [clone .part.13]+0x6de>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    15cc:	cmp	r5, r4
    15ce:	beq.w	17a2 <Screen::iterate_animation() [clone .part.13]+0x8ca>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    15d2:	adds	r1, #1
    15d4:	cmp.w	r1, #256	; 0x100
    15d8:	bne.n	15aa <Screen::iterate_animation() [clone .part.13]+0x6d2>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    15da:	ldr.w	r3, [sl, #8]
    15de:	subs	r0, r0, r3
    15e0:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    15e4:	ldr	r2, [sp, #12]
    15e6:	add.w	ip, ip, #1
    15ea:	add.w	fp, fp, #4
    15ee:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    15f0:	it	gt
    15f2:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    15f6:	cmp.w	ip, #23
    15fa:	bne.n	151e <Screen::iterate_animation() [clone .part.13]+0x646>
    15fc:	ldr	r3, [sp, #4]
    15fe:	add.w	r8, r8, #1
    1602:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1604:	cmp.w	r8, #26
    1608:	str	r3, [sp, #4]
    160a:	bne.w	14f6 <Screen::iterate_animation() [clone .part.13]+0x61e>
    160e:	movw	r0, #4632	; 0x1218
    1612:	ldr.w	fp, [sp, #20]
    1616:	addw	r3, sl, #2328	; 0x918
    161a:	add	r0, sl
    161c:	sub.w	r2, r3, #2304	; 0x900
    1620:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1624:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1626:	ldr.w	r4, [r1, #4]!
    162a:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    162e:	cmp	r5, r2
    1630:	bne.n	1626 <Screen::iterate_animation() [clone .part.13]+0x74e>
    1632:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1634:	cmp	r0, r3
    1636:	bne.n	161c <Screen::iterate_animation() [clone .part.13]+0x744>
			(*_sat_automaton).iterate_growth();
    1638:	ldr.w	sl, [fp, #132]	; 0x84
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    163c:	movs	r2, #32
    163e:	mov.w	r8, #2
    1642:	ldr.w	r9, [pc, #376]	; 17bc <Screen::iterate_animation() [clone .part.13]+0x8e4>
    1646:	addw	r3, sl, #2332	; 0x91c
    164a:	movs	r1, #0
    164c:	add.w	r0, sp, r2
    1650:	str	r3, [sp, #4]
    1652:	bl	bf9c <memset>
    1656:	str.w	fp, [sp, #20]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    165a:	bl	448 <updateBeams()>
  updateScreensFade();
    165e:	bl	9e0 <updateScreensFade()>
    1662:	ldr.w	r3, [sl]
    1666:	ldr	r2, [sp, #4]
    1668:	mov.w	ip, #4294967295
    166c:	str	r3, [sp, #8]
    166e:	ldr.w	r3, [sl, #12]
    1672:	mov	fp, r2
    1674:	str	r3, [sp, #12]
    1676:	subw	r3, r2, #2308	; 0x904
    167a:	str	r3, [sp, #0]
    167c:	sub.w	r3, r8, #3
    1680:	str	r3, [sp, #16]
    1682:	ldr	r6, [sp, #16]
    1684:	add.w	lr, sp, #32
    1688:	add.w	r7, ip, #3
    168c:	smull	r3, r2, r9, r6
    1690:	asrs	r3, r6, #31
    1692:	mov	r4, lr
    1694:	mov	r1, ip
    1696:	rsb	r3, r3, r2, asr #2
    169a:	add.w	r3, r3, r3, lsl #1
    169e:	sub.w	r3, r6, r3, lsl #3
    16a2:	adds	r3, #24
    16a4:	smull	r2, r0, r9, r3
    16a8:	asrs	r2, r3, #31
    16aa:	rsb	r0, r2, r0, asr #2
    16ae:	add.w	r0, r0, r0, lsl #1
    16b2:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    16b6:	add.w	r0, r0, r0, lsl #1
    16ba:	lsls	r0, r0, #3
    16bc:	smull	r3, r2, r9, r1
    16c0:	asrs	r3, r1, #31
    16c2:	rsb	r3, r3, r2, asr #2
    16c6:	add.w	r3, r3, r3, lsl #1
    16ca:	sub.w	r3, r1, r3, lsl #3
    16ce:	adds	r1, #1
    16d0:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    16d2:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    16d4:	smull	r2, r5, r9, r3
    16d8:	mov.w	r2, r3, asr #31
    16dc:	rsb	r2, r2, r5, asr #2
    16e0:	add.w	r2, r2, r2, lsl #1
    16e4:	sub.w	r3, r3, r2, lsl #3
    16e8:	add	r3, r0
    16ea:	add.w	r3, sl, r3, lsl #2
    16ee:	ldr	r3, [r3, #28]
    16f0:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    16f4:	bne.n	16bc <Screen::iterate_animation() [clone .part.13]+0x7e4>
    16f6:	adds	r6, #1
    16f8:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    16fc:	cmp	r6, r8
    16fe:	bne.n	168c <Screen::iterate_animation() [clone .part.13]+0x7b4>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1700:	ldr	r3, [sp, #0]
    1702:	movs	r1, #1
    1704:	ldr.w	r0, [r3, #4]!
    1708:	str	r3, [sp, #0]
    170a:	ldr	r3, [sp, #8]
    170c:	adds	r5, r0, r3
    170e:	movs	r4, #0
    1710:	mov	r3, r4
    1712:	b.n	171a <Screen::iterate_animation() [clone .part.13]+0x842>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1714:	adds	r3, #1
    1716:	cmp	r3, #8
    1718:	beq.n	1730 <Screen::iterate_animation() [clone .part.13]+0x858>
          if ((i >> j) % 2 == 1){
    171a:	asr.w	r2, r1, r3
    171e:	lsls	r2, r2, #31
    1720:	bpl.n	1714 <Screen::iterate_animation() [clone .part.13]+0x83c>
            sum += neighbours[j];
    1722:	add	r2, sp, #32
    1724:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1728:	adds	r3, #1
    172a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    172c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    172e:	bne.n	171a <Screen::iterate_animation() [clone .part.13]+0x842>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1730:	cmp	r5, r4
    1732:	beq.n	17ae <Screen::iterate_animation() [clone .part.13]+0x8d6>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1734:	adds	r1, #1
    1736:	cmp.w	r1, #256	; 0x100
    173a:	bne.n	170e <Screen::iterate_animation() [clone .part.13]+0x836>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    173c:	ldr.w	r3, [sl, #8]
    1740:	subs	r0, r0, r3
    1742:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    1746:	ldr	r2, [sp, #12]
    1748:	add.w	ip, ip, #1
    174c:	add.w	fp, fp, #4
    1750:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    1752:	it	gt
    1754:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1758:	cmp.w	ip, #23
    175c:	bne.n	1682 <Screen::iterate_animation() [clone .part.13]+0x7aa>
    175e:	ldr	r3, [sp, #4]
    1760:	add.w	r8, r8, #1
    1764:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1766:	cmp.w	r8, #26
    176a:	str	r3, [sp, #4]
    176c:	bne.w	165a <Screen::iterate_animation() [clone .part.13]+0x782>
    1770:	movw	r0, #4632	; 0x1218
    1774:	ldr.w	fp, [sp, #20]
    1778:	addw	r3, sl, #2328	; 0x918
    177c:	add	r0, sl
    177e:	sub.w	r2, r3, #2304	; 0x900
    1782:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1786:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1788:	ldr.w	r4, [r1, #4]!
    178c:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1790:	cmp	r5, r2
    1792:	bne.n	1788 <Screen::iterate_animation() [clone .part.13]+0x8b0>
    1794:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1796:	cmp	r0, r3
    1798:	bne.n	177e <Screen::iterate_animation() [clone .part.13]+0x8a6>
			ratio = 0;
    179a:	movs	r3, #0
    179c:	str.w	r3, [fp, #152]	; 0x98
    17a0:	b.n	121c <Screen::iterate_animation() [clone .part.13]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    17a2:	ldr.w	r2, [sl, #4]
    17a6:	add	r0, r2
    17a8:	str.w	r0, [fp]
    17ac:	b.n	15e4 <Screen::iterate_animation() [clone .part.13]+0x70c>
    17ae:	ldr.w	r2, [sl, #4]
    17b2:	add	r0, r2
    17b4:	str.w	r0, [fp]
    17b8:	b.n	1746 <Screen::iterate_animation() [clone .part.13]+0x86e>
    17ba:	nop
    17bc:	.word	0x2aaaaaab

000017c0 <setup>:
}




void setup() {
    17c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rtc_set(0);
    17c4:	movs	r0, #0
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    17c6:	mov.w	sl, #0
    17ca:	ldr	r7, [pc, #700]	; (1a88 <setup+0x2c8>)
}




void setup() {
    17cc:	vpush	{d8-d9}
    17d0:	sub	sp, #12
  rtc_set(0);
    17d2:	bl	acb0 <rtc_set>
  randomSeed(analogRead(17));
    17d6:	movs	r0, #17
    17d8:	bl	adf0 <analogRead>
    17dc:	bl	b070 <randomSeed(unsigned long)>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    17e0:	ldr	r3, [pc, #676]	; (1a88 <setup+0x2c8>)
    17e2:	ldr.w	r0, [r3, #136]	; 0x88
    17e6:	bl	97e8 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    17ea:	ldr	r3, [pc, #668]	; (1a88 <setup+0x2c8>)
    17ec:	movs	r1, #255	; 0xff
    17ee:	ldr.w	r0, [r3, #136]	; 0x88
    17f2:	bl	9bec <Adafruit_NeoPixel::setBrightness(unsigned char)>
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    17f6:	ldr	r3, [pc, #656]	; (1a88 <setup+0x2c8>)
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    17f8:	ldr	r1, [pc, #652]	; (1a88 <setup+0x2c8>)
    17fa:	ldr.w	r6, [r3, #140]	; 0x8c
    17fe:	ldr.w	r0, [r3, #144]	; 0x90
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    1802:	ldr	r5, [r3, #124]	; 0x7c
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1804:	ldr	r2, [r3, #4]
    1806:	ldr	r3, [r3, #8]
    1808:	add.w	r8, r5, #4640	; 0x1220
    180c:	ldr.w	r9, [r1, #28]
    1810:	str	r3, [r5, #8]
    1812:	ldr	r3, [pc, #628]	; (1a88 <setup+0x2c8>)
    1814:	ldr.w	lr, [r1, #32]
    1818:	ldr	r3, [r3, #12]
    181a:	ldr.w	ip, [r1, #36]	; 0x24
    181e:	str	r3, [r5, #12]
    1820:	ldr	r3, [pc, #612]	; (1a88 <setup+0x2c8>)
    1822:	ldr	r7, [r7, #24]
    1824:	ldr	r3, [r3, #16]
    1826:	str	r3, [r5, #16]
    1828:	ldr	r3, [pc, #604]	; (1a88 <setup+0x2c8>)
    182a:	ldr	r3, [r3, #20]
    182c:	str	r3, [r5, #20]
    182e:	ldr	r3, [pc, #600]	; (1a88 <setup+0x2c8>)
    1830:	ldr	r3, [r3, #0]
    1832:	mov	r4, r3
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    1834:	ldr	r3, [r1, #120]	; 0x78
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1836:	str	r2, [r5, #4]
    1838:	ldr	r2, [pc, #588]	; (1a88 <setup+0x2c8>)
    183a:	add.w	fp, r3, #4640	; 0x1220
    183e:	ldr	r1, [r1, #40]	; 0x28
    1840:	ldr	r2, [r2, #44]	; 0x2c
    1842:	str	r4, [r5, #0]
    1844:	movw	r4, #4636	; 0x121c
    1848:	strb.w	sl, [r5, #24]
    184c:	str	r6, [r5, r4]
    184e:	str.w	r0, [r8]
    1852:	str	r2, [r3, #20]
    1854:	mov.w	r2, #1
    1858:	str.w	ip, [r3, #12]
    185c:	str	r1, [r3, #16]
    185e:	strb	r2, [r3, #24]
    1860:	ldr	r1, [pc, #548]	; (1a88 <setup+0x2c8>)
    1862:	stmia.w	r3, {r7, r9, lr}
    1866:	str	r6, [r3, r4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    1868:	ldr	r3, [pc, #540]	; (1a88 <setup+0x2c8>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    186a:	ldr	r4, [pc, #540]	; (1a88 <setup+0x2c8>)
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    186c:	ldr.w	r2, [r3, #128]	; 0x80
		initialize_automaton(_sat_automaton, &possible_automatons[3], true);
    1870:	ldr.w	r3, [r3, #132]	; 0x84
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1874:	ldr.w	ip, [r4, #64]	; 0x40
    1878:	ldr.w	lr, [r4, #68]	; 0x44
    187c:	add.w	r4, r3, #4640	; 0x1220
    1880:	ldr.w	sl, [r1, #52]	; 0x34
    1884:	add.w	r1, r2, #4640	; 0x1220
    1888:	str	r4, [sp, #4]
    188a:	ldr	r4, [pc, #508]	; (1a88 <setup+0x2c8>)
    188c:	mov	r7, r1
    188e:	str.w	r0, [fp]
    1892:	movw	fp, #4636	; 0x121c
    1896:	ldr	r4, [r4, #48]	; 0x30
    1898:	ldr	r1, [pc, #492]	; (1a88 <setup+0x2c8>)
    189a:	str.w	r6, [r2, fp]
    189e:	ldr.w	r9, [r1, #56]	; 0x38
    18a2:	ldr	r1, [r1, #60]	; 0x3c
    18a4:	str.w	r9, [r2, #8]
    18a8:	stmia.w	r2, {r4, sl}
    18ac:	ldr	r4, [pc, #472]	; (1a88 <setup+0x2c8>)
    18ae:	ldr.w	r9, [r4, #76]	; 0x4c
    18b2:	str	r1, [r2, #12]
    18b4:	mov.w	r1, #1
    18b8:	ldr.w	sl, [r4, #80]	; 0x50
    18bc:	str.w	ip, [r2, #16]
    18c0:	ldr.w	ip, [r4, #84]	; 0x54
    18c4:	str.w	lr, [r2, #20]
    18c8:	ldr.w	lr, [r4, #88]	; 0x58
    18cc:	strb	r1, [r2, #24]
    18ce:	ldr	r2, [r4, #92]	; 0x5c
    18d0:	str	r0, [r7, #0]
    18d2:	ldr	r1, [r4, #72]	; 0x48
    18d4:	str.w	r6, [r3, fp]
    18d8:	str	r2, [r3, #20]
    18da:	mov.w	r2, #1
    18de:	str.w	lr, [r3, #16]
    18e2:	stmia.w	r3, {r1, r9, sl, ip}
    18e6:	strb	r2, [r3, #24]
    18e8:	ldr	r3, [sp, #4]
    18ea:	ldr	r6, [r4, #100]	; 0x64
    18ec:	str	r0, [r3, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    18ee:	ldr	r3, [r4, #96]	; 0x60
    18f0:	ldrb.w	fp, [r4, #104]	; 0x68
    18f4:	subs	r3, #1
    18f6:	cmp	r3, #3
    18f8:	bhi.w	294a <setup+0x118a>
    18fc:	tbb	[pc, r3]
    1900:	.word	0x0248c69b
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1904:	cmp	r6, #0
    1906:	ble.w	1b3c <setup+0x37c>
    190a:	mov	r9, r5
    190c:	movs	r7, #0
    190e:	mov	r5, fp
    1910:	b.n	1926 <setup+0x166>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1912:	add.w	r3, r4, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1916:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1918:	ldr.w	r2, [r9]
    191c:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1920:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1922:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1924:	beq.n	196e <setup+0x1ae>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1926:	movs	r0, #14
    1928:	bl	b07c <random(unsigned long)>
    192c:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1930:	movs	r0, #14
    1932:	bl	b07c <random(unsigned long)>
    1936:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1938:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    193c:	cmp	r5, #0
    193e:	beq.n	1912 <setup+0x152>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1940:	ldr.w	r3, [r9, #20]
    1944:	add.w	r8, r8, r8, lsl #1
    1948:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    194c:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    194e:	add.w	r4, r4, r8, lsl #3
    1952:	subs	r0, r3, r2
    1954:	add.w	r4, r9, r4, lsl #2
    1958:	adds	r0, #2
    195a:	bl	b07c <random(unsigned long)>
    195e:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1962:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1964:	add.w	r3, r3, #4294967295
    1968:	add	r0, r3
    196a:	str	r0, [r4, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    196c:	bne.n	1926 <setup+0x166>
    196e:	ldr	r3, [pc, #280]	; (1a88 <setup+0x2c8>)
    1970:	ldr	r2, [pc, #276]	; (1a88 <setup+0x2c8>)
    1972:	ldr	r5, [r3, #120]	; 0x78
    1974:	ldr	r3, [r3, #96]	; 0x60
    1976:	ldrb.w	fp, [r2, #104]	; 0x68
    197a:	subs	r3, #1
    197c:	ldr	r6, [r2, #100]	; 0x64
    197e:	cmp	r3, #3
    1980:	bhi.w	2a2a <setup+0x126a>
    1984:	tbh	[pc, r3, lsl #1]
    1988:	.word	0x063e00bd
    198c:	.word	0x09c605ea
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1990:	movs	r0, #14
    1992:	mov	r7, r5
    1994:	bl	b07c <random(unsigned long)>
    1998:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    199a:	movs	r0, #14
    199c:	add.w	r9, r5, #96	; 0x60
    19a0:	bl	b07c <random(unsigned long)>
    19a4:	vmov	s15, r6
    19a8:	adds	r4, #5
    19aa:	adds	r3, r0, #5
    19ac:	vcvt.f64.s32	d9, s15
    19b0:	rsb	sl, r0, #19
    19b4:	negs	r3, r3
    19b6:	rsb	r8, r4, #0
    19ba:	str	r3, [sp, #4]
    19bc:	vmov	s15, r8
    19c0:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    19c2:	mov	r6, r7
    19c4:	vcvt.f64.s32	d8, s15
    19c8:	vmul.f64	d8, d8, d8
    19cc:	b.n	19da <setup+0x21a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    19ce:	ldr	r3, [r5, #0]
    19d0:	str	r3, [r6, #28]
    19d2:	adds	r4, #1
    19d4:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    19d6:	cmp	r4, sl
    19d8:	beq.n	1a2a <setup+0x26a>
      double xx = x-midPoint_y;
    19da:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    19de:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    19e2:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    19e6:	vfma.f64	d0, d7, d7
    19ea:	vsqrt.f64	d7, d0
    19ee:	vcmp.f64	d7, d7
    19f2:	vmrs	APSR_nzcv, fpscr
    19f6:	bne.w	2f30 <setup+0x1770>
    19fa:	vcmpe.f64	d7, d9
    19fe:	vmrs	APSR_nzcv, fpscr
    1a02:	bhi.n	19d2 <setup+0x212>
        if (rand){
    1a04:	cmp.w	fp, #0
    1a08:	beq.n	19ce <setup+0x20e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1a0a:	ldr	r3, [r5, #20]
    1a0c:	adds	r4, #1
    1a0e:	ldr	r0, [r5, #16]
    1a10:	adds	r6, #96	; 0x60
    1a12:	subs	r0, r3, r0
    1a14:	adds	r0, #2
    1a16:	bl	b07c <random(unsigned long)>
    1a1a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1a1c:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1a1e:	add.w	r3, r3, #4294967295
    1a22:	add	r0, r3
    1a24:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1a28:	bne.n	19da <setup+0x21a>
    1a2a:	adds	r7, #4
    1a2c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1a30:	cmp	r7, r9
    1a32:	bne.n	19bc <setup+0x1fc>
    1a34:	b.n	196e <setup+0x1ae>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a36:	movs	r0, #14
    1a38:	bl	b07c <random(unsigned long)>
    1a3c:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a3e:	movs	r0, #14
    1a40:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1a44:	cmp	r6, #0
    1a46:	ble.n	196e <setup+0x1ae>
    1a48:	add.w	r4, r4, r4, lsl #1
    1a4c:	add.w	r3, r0, #12
    1a50:	movs	r7, #0
    1a52:	add.w	r4, r3, r4, lsl #3
    1a56:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1a5a:	cmp.w	fp, #0
    1a5e:	bne.n	1a72 <setup+0x2b2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1a60:	ldr	r3, [r5, #0]
    1a62:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1a64:	adds	r7, #1
    1a66:	adds	r4, #4
    1a68:	cmp	r7, r6
    1a6a:	beq.n	196e <setup+0x1ae>
      if (rand){
    1a6c:	cmp.w	fp, #0
    1a70:	beq.n	1a60 <setup+0x2a0>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1a72:	ldr	r3, [r5, #20]
    1a74:	ldr	r2, [r5, #16]
    1a76:	subs	r0, r3, r2
    1a78:	adds	r0, #2
    1a7a:	bl	b07c <random(unsigned long)>
    1a7e:	ldr	r3, [r5, #16]
    1a80:	subs	r3, #1
    1a82:	add	r0, r3
    1a84:	str	r0, [r4, #0]
    1a86:	b.n	1a64 <setup+0x2a4>
    1a88:	.word	0x200039f4
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a8c:	movs	r0, #14
    1a8e:	bl	b07c <random(unsigned long)>
    1a92:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a94:	movs	r0, #14
    1a96:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1a9a:	cmp	r6, #0
    1a9c:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a9e:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1aa2:	it	lt
    1aa4:	addlt	r3, r6, #1
    1aa6:	cmp	r6, #0
    1aa8:	mov.w	r8, r3, asr #1
    1aac:	it	lt
    1aae:	addlt	r6, #1
    1ab0:	rsb	r8, r8, #0
    1ab4:	asrs	r6, r6, #1
    1ab6:	add.w	r7, r0, r8
    1aba:	adds	r3, r0, r6
    1abc:	cmp	r7, r3
    1abe:	str	r3, [sp, #4]
    1ac0:	bge.w	196e <setup+0x1ae>
    1ac4:	add	r8, r4
    1ac6:	add	r4, r6
    1ac8:	add.w	r6, r8, r8, lsl #1
    1acc:	add.w	r6, r7, r6, lsl #3
    1ad0:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1ad4:	cmp	r8, r4
    1ad6:	bge.n	1af6 <setup+0x336>
    1ad8:	mov	sl, r6
    1ada:	mov	r9, r8
        if (rand){
    1adc:	cmp.w	fp, #0
    1ae0:	bne.w	2dfa <setup+0x163a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1ae4:	ldr	r3, [r5, #0]
    1ae6:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1aea:	add.w	r9, r9, #1
    1aee:	add.w	sl, sl, #96	; 0x60
    1af2:	cmp	r9, r4
    1af4:	bne.n	1adc <setup+0x31c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1af6:	adds	r7, #1
    1af8:	ldr	r3, [sp, #4]
    1afa:	adds	r6, #4
    1afc:	cmp	r7, r3
    1afe:	bne.n	1ad4 <setup+0x314>
    1b00:	b.n	196e <setup+0x1ae>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b02:	movs	r0, #14
    1b04:	bl	b07c <random(unsigned long)>
    1b08:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b0a:	movs	r0, #14
    1b0c:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1b10:	cmp	r6, #0
    1b12:	ble.n	1b3c <setup+0x37c>
    1b14:	add.w	r4, r4, r4, lsl #1
    1b18:	add.w	r3, r0, #12
    1b1c:	mov	r8, r6
    1b1e:	movs	r7, #0
    1b20:	add.w	r4, r3, r4, lsl #3
    1b24:	mov	r6, fp
    1b26:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1b2a:	cmp	r6, #0
    1b2c:	bne.w	2eae <setup+0x16ee>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1b30:	ldr	r3, [r5, #0]
    1b32:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1b34:	adds	r7, #1
    1b36:	adds	r4, #4
    1b38:	cmp	r7, r8
    1b3a:	bne.n	1b2a <setup+0x36a>
    1b3c:	ldr	r3, [pc, #544]	; (1d60 <setup+0x5a0>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    1b3e:	ldr	r2, [pc, #544]	; (1d60 <setup+0x5a0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1b40:	ldr	r3, [r3, #108]	; 0x6c
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    1b42:	ldr.w	r5, [r2, #128]	; 0x80
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1b46:	subs	r3, #1
    1b48:	ldr	r6, [r2, #112]	; 0x70
    1b4a:	ldrb.w	fp, [r2, #116]	; 0x74
    1b4e:	cmp	r3, #3
    1b50:	bhi.w	28dc <setup+0x111c>
    1b54:	tbb	[pc, r3]
    1b58:	.word	0x024a9dd8
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1b5c:	cmp	r6, #0
    1b5e:	ble.w	1d9c <setup+0x5dc>
    1b62:	mov	r9, r5
    1b64:	movs	r7, #0
    1b66:	mov	r5, fp
    1b68:	b.n	1b7e <setup+0x3be>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1b6a:	add.w	r3, r4, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1b6e:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1b70:	ldr.w	r2, [r9]
    1b74:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1b78:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1b7a:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1b7c:	beq.n	1bc6 <setup+0x406>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b7e:	movs	r0, #14
    1b80:	bl	b07c <random(unsigned long)>
    1b84:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b88:	movs	r0, #14
    1b8a:	bl	b07c <random(unsigned long)>
    1b8e:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1b90:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1b94:	cmp	r5, #0
    1b96:	beq.n	1b6a <setup+0x3aa>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1b98:	ldr.w	r3, [r9, #20]
    1b9c:	add.w	r8, r8, r8, lsl #1
    1ba0:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ba4:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1ba6:	add.w	r4, r4, r8, lsl #3
    1baa:	subs	r0, r3, r2
    1bac:	add.w	r4, r9, r4, lsl #2
    1bb0:	adds	r0, #2
    1bb2:	bl	b07c <random(unsigned long)>
    1bb6:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1bba:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bbc:	add.w	r3, r3, #4294967295
    1bc0:	add	r0, r3
    1bc2:	str	r0, [r4, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1bc4:	bne.n	1b7e <setup+0x3be>
    1bc6:	ldr	r3, [pc, #408]	; (1d60 <setup+0x5a0>)
    1bc8:	ldr	r2, [pc, #404]	; (1d60 <setup+0x5a0>)
    1bca:	ldr	r3, [r3, #108]	; 0x6c
    1bcc:	ldr	r4, [r2, #112]	; 0x70
    1bce:	ldrb.w	fp, [r2, #116]	; 0x74
    1bd2:	subs	r3, #1

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
    1bd4:	ldr	r2, [pc, #392]	; (1d60 <setup+0x5a0>)
    1bd6:	ldr.w	r5, [r2, #132]	; 0x84
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1bda:	cmp	r3, #3
    1bdc:	bhi.w	2be0 <setup+0x1420>
    1be0:	tbh	[pc, r3, lsl #1]
    1be4:	.word	0x05b200c0
    1be8:	.word	0x0864055e
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bec:	movs	r0, #14
    1bee:	mov	r7, r5
    1bf0:	bl	b07c <random(unsigned long)>
    1bf4:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bf6:	movs	r0, #14
    1bf8:	add.w	r9, r5, #96	; 0x60
    1bfc:	bl	b07c <random(unsigned long)>
    1c00:	vmov	s15, r6
    1c04:	adds	r4, #5
    1c06:	adds	r3, r0, #5
    1c08:	vcvt.f64.s32	d9, s15
    1c0c:	rsb	sl, r0, #19
    1c10:	negs	r3, r3
    1c12:	rsb	r8, r4, #0
    1c16:	str	r3, [sp, #4]
    1c18:	vmov	s15, r8
    1c1c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1c1e:	mov	r6, r7
    1c20:	vcvt.f64.s32	d8, s15
    1c24:	vmul.f64	d8, d8, d8
    1c28:	b.n	1c36 <setup+0x476>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1c2a:	ldr	r3, [r5, #0]
    1c2c:	str	r3, [r6, #28]
    1c2e:	adds	r4, #1
    1c30:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c32:	cmp	r4, sl
    1c34:	beq.n	1c86 <setup+0x4c6>
      double xx = x-midPoint_y;
    1c36:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1c3a:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1c3e:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1c42:	vfma.f64	d0, d7, d7
    1c46:	vsqrt.f64	d7, d0
    1c4a:	vcmp.f64	d7, d7
    1c4e:	vmrs	APSR_nzcv, fpscr
    1c52:	bne.w	2f48 <setup+0x1788>
    1c56:	vcmpe.f64	d7, d9
    1c5a:	vmrs	APSR_nzcv, fpscr
    1c5e:	bhi.n	1c2e <setup+0x46e>
        if (rand){
    1c60:	cmp.w	fp, #0
    1c64:	beq.n	1c2a <setup+0x46a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c66:	ldr	r3, [r5, #20]
    1c68:	adds	r4, #1
    1c6a:	ldr	r0, [r5, #16]
    1c6c:	adds	r6, #96	; 0x60
    1c6e:	subs	r0, r3, r0
    1c70:	adds	r0, #2
    1c72:	bl	b07c <random(unsigned long)>
    1c76:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c78:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c7a:	add.w	r3, r3, #4294967295
    1c7e:	add	r0, r3
    1c80:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c84:	bne.n	1c36 <setup+0x476>
    1c86:	adds	r7, #4
    1c88:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1c8c:	cmp	r7, r9
    1c8e:	bne.n	1c18 <setup+0x458>
    1c90:	b.n	1bc6 <setup+0x406>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c92:	movs	r0, #14
    1c94:	bl	b07c <random(unsigned long)>
    1c98:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c9a:	movs	r0, #14
    1c9c:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ca0:	cmp	r6, #0
    1ca2:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ca4:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ca8:	it	lt
    1caa:	addlt	r3, r6, #1
    1cac:	cmp	r6, #0
    1cae:	mov.w	r8, r3, asr #1
    1cb2:	it	lt
    1cb4:	addlt	r6, #1
    1cb6:	rsb	r8, r8, #0
    1cba:	asrs	r6, r6, #1
    1cbc:	add.w	r7, r0, r8
    1cc0:	adds	r3, r0, r6
    1cc2:	cmp	r7, r3
    1cc4:	str	r3, [sp, #4]
    1cc6:	bge.w	1bc6 <setup+0x406>
    1cca:	add	r8, r4
    1ccc:	add	r4, r6
    1cce:	add.w	r6, r8, r8, lsl #1
    1cd2:	add.w	r6, r7, r6, lsl #3
    1cd6:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1cda:	cmp	r8, r4
    1cdc:	bge.n	1cfc <setup+0x53c>
    1cde:	mov	sl, r6
    1ce0:	mov	r9, r8
        if (rand){
    1ce2:	cmp.w	fp, #0
    1ce6:	bne.w	2e14 <setup+0x1654>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1cea:	ldr	r3, [r5, #0]
    1cec:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1cf0:	add.w	r9, r9, #1
    1cf4:	add.w	sl, sl, #96	; 0x60
    1cf8:	cmp	r9, r4
    1cfa:	bne.n	1ce2 <setup+0x522>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1cfc:	adds	r7, #1
    1cfe:	ldr	r3, [sp, #4]
    1d00:	adds	r6, #4
    1d02:	cmp	r7, r3
    1d04:	bne.n	1cda <setup+0x51a>
    1d06:	b.n	1bc6 <setup+0x406>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d08:	movs	r0, #14
    1d0a:	bl	b07c <random(unsigned long)>
    1d0e:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d10:	movs	r0, #14
    1d12:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1d16:	cmp	r6, #0
    1d18:	ble.w	1bc6 <setup+0x406>
    1d1c:	add.w	r3, r0, #12
    1d20:	add.w	r4, r4, r4, lsl #1
    1d24:	movs	r7, #0
    1d26:	add.w	r4, r3, r4, lsl #3
    1d2a:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1d2e:	cmp.w	fp, #0
    1d32:	bne.n	1d48 <setup+0x588>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1d34:	ldr	r3, [r5, #0]
    1d36:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1d38:	adds	r7, #1
    1d3a:	adds	r4, #4
    1d3c:	cmp	r7, r6
    1d3e:	beq.w	1bc6 <setup+0x406>
      if (rand){
    1d42:	cmp.w	fp, #0
    1d46:	beq.n	1d34 <setup+0x574>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1d48:	ldr	r3, [r5, #20]
    1d4a:	ldr	r2, [r5, #16]
    1d4c:	subs	r0, r3, r2
    1d4e:	adds	r0, #2
    1d50:	bl	b07c <random(unsigned long)>
    1d54:	ldr	r3, [r5, #16]
    1d56:	subs	r3, #1
    1d58:	add	r0, r3
    1d5a:	str	r0, [r4, #0]
    1d5c:	b.n	1d38 <setup+0x578>
    1d5e:	nop
    1d60:	.word	0x200039f4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d64:	movs	r0, #14
    1d66:	bl	b07c <random(unsigned long)>
    1d6a:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d6c:	movs	r0, #14
    1d6e:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1d72:	cmp	r4, #0
    1d74:	ble.n	1d9c <setup+0x5dc>
    1d76:	add.w	r6, r6, r6, lsl #1
    1d7a:	add.w	r3, r0, #12
    1d7e:	movs	r7, #0
    1d80:	add.w	r6, r3, r6, lsl #3
    1d84:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1d88:	cmp.w	fp, #0
    1d8c:	bne.w	2ec6 <setup+0x1706>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1d90:	ldr	r3, [r5, #0]
    1d92:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1d94:	adds	r7, #1
    1d96:	adds	r6, #4
    1d98:	cmp	r7, r4
    1d9a:	bne.n	1d88 <setup+0x5c8>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    1d9c:	ldr	r3, [pc, #716]	; (206c <setup+0x8ac>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1d9e:	mov.w	sl, #0
    1da2:	ldr	r7, [pc, #712]	; (206c <setup+0x8ac>)
			
		}
	}

	void init_screen() {	
		_screen->begin();
    1da4:	ldr.w	r0, [r3, #136]	; 0x88
    1da8:	bl	97e8 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    1dac:	ldr	r3, [pc, #700]	; (206c <setup+0x8ac>)
    1dae:	movs	r1, #255	; 0xff
    1db0:	ldr.w	r0, [r3, #136]	; 0x88
    1db4:	bl	9bec <Adafruit_NeoPixel::setBrightness(unsigned char)>
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    1db8:	ldr	r3, [pc, #688]	; (206c <setup+0x8ac>)
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    1dba:	ldr	r1, [pc, #688]	; (206c <setup+0x8ac>)
    1dbc:	ldr.w	r0, [r3, #144]	; 0x90
    1dc0:	ldr.w	r6, [r3, #140]	; 0x8c
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    1dc4:	ldr	r5, [r3, #124]	; 0x7c
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1dc6:	ldr	r2, [r3, #4]
    1dc8:	ldr	r3, [r3, #8]
    1dca:	add.w	r8, r5, #4640	; 0x1220
    1dce:	ldr.w	r9, [r1, #28]
    1dd2:	str	r3, [r5, #8]
    1dd4:	ldr	r3, [pc, #660]	; (206c <setup+0x8ac>)
    1dd6:	ldr.w	lr, [r1, #32]
    1dda:	ldr	r3, [r3, #12]
    1ddc:	ldr.w	ip, [r1, #36]	; 0x24
    1de0:	str	r3, [r5, #12]
    1de2:	ldr	r3, [pc, #648]	; (206c <setup+0x8ac>)
    1de4:	ldr	r7, [r7, #24]
    1de6:	ldr	r3, [r3, #16]
    1de8:	str	r3, [r5, #16]
    1dea:	ldr	r3, [pc, #640]	; (206c <setup+0x8ac>)
    1dec:	ldr	r3, [r3, #20]
    1dee:	str	r3, [r5, #20]
    1df0:	ldr	r3, [pc, #632]	; (206c <setup+0x8ac>)
    1df2:	ldr	r3, [r3, #0]
    1df4:	mov	r4, r3
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    1df6:	ldr	r3, [r1, #120]	; 0x78
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1df8:	str	r2, [r5, #4]
    1dfa:	ldr	r2, [pc, #624]	; (206c <setup+0x8ac>)
    1dfc:	add.w	fp, r3, #4640	; 0x1220
    1e00:	ldr	r1, [r1, #40]	; 0x28
    1e02:	ldr	r2, [r2, #44]	; 0x2c
    1e04:	str	r4, [r5, #0]
    1e06:	movw	r4, #4636	; 0x121c
    1e0a:	strb.w	sl, [r5, #24]
    1e0e:	str	r6, [r5, r4]
    1e10:	str.w	r0, [r8]
    1e14:	str	r2, [r3, #20]
    1e16:	mov.w	r2, #1
    1e1a:	str.w	ip, [r3, #12]
    1e1e:	str	r1, [r3, #16]
    1e20:	strb	r2, [r3, #24]
    1e22:	ldr	r1, [pc, #584]	; (206c <setup+0x8ac>)
    1e24:	stmia.w	r3, {r7, r9, lr}
    1e28:	str	r6, [r3, r4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    1e2a:	ldr	r3, [pc, #576]	; (206c <setup+0x8ac>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1e2c:	ldr	r4, [pc, #572]	; (206c <setup+0x8ac>)
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    1e2e:	ldr.w	r2, [r3, #128]	; 0x80
		initialize_automaton(_sat_automaton, &possible_automatons[3], true);
    1e32:	ldr.w	r3, [r3, #132]	; 0x84
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1e36:	ldr.w	ip, [r4, #64]	; 0x40
    1e3a:	ldr.w	lr, [r4, #68]	; 0x44
    1e3e:	add.w	r4, r3, #4640	; 0x1220
    1e42:	ldr.w	sl, [r1, #52]	; 0x34
    1e46:	add.w	r1, r2, #4640	; 0x1220
    1e4a:	str	r4, [sp, #4]
    1e4c:	ldr	r4, [pc, #540]	; (206c <setup+0x8ac>)
    1e4e:	mov	r7, r1
    1e50:	str.w	r0, [fp]
    1e54:	movw	fp, #4636	; 0x121c
    1e58:	ldr	r4, [r4, #48]	; 0x30
    1e5a:	ldr	r1, [pc, #528]	; (206c <setup+0x8ac>)
    1e5c:	str.w	r6, [r2, fp]
    1e60:	ldr.w	r9, [r1, #56]	; 0x38
    1e64:	ldr	r1, [r1, #60]	; 0x3c
    1e66:	str.w	r9, [r2, #8]
    1e6a:	stmia.w	r2, {r4, sl}
    1e6e:	ldr	r4, [pc, #508]	; (206c <setup+0x8ac>)
    1e70:	ldr.w	r9, [r4, #76]	; 0x4c
    1e74:	str	r1, [r2, #12]
    1e76:	mov.w	r1, #1
    1e7a:	ldr.w	sl, [r4, #80]	; 0x50
    1e7e:	str.w	ip, [r2, #16]
    1e82:	ldr.w	ip, [r4, #84]	; 0x54
    1e86:	str.w	lr, [r2, #20]
    1e8a:	ldr.w	lr, [r4, #88]	; 0x58
    1e8e:	strb	r1, [r2, #24]
    1e90:	ldr	r2, [r4, #92]	; 0x5c
    1e92:	str	r0, [r7, #0]
    1e94:	ldr	r1, [r4, #72]	; 0x48
    1e96:	str.w	r6, [r3, fp]
    1e9a:	str	r2, [r3, #20]
    1e9c:	mov.w	r2, #1
    1ea0:	str.w	lr, [r3, #16]
    1ea4:	stmia.w	r3, {r1, r9, sl, ip}
    1ea8:	strb	r2, [r3, #24]
    1eaa:	mov	r2, r4
    1eac:	ldr	r3, [sp, #4]
    1eae:	ldrb.w	fp, [r2, #104]	; 0x68
    1eb2:	str	r0, [r3, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1eb4:	ldr	r3, [r4, #96]	; 0x60
    1eb6:	ldr	r4, [r4, #100]	; 0x64
    1eb8:	subs	r3, #1
    1eba:	cmp	r3, #3
    1ebc:	bhi.w	29ba <setup+0x11fa>
    1ec0:	tbb	[pc, r3]
    1ec4:	.word	0x02479ad6
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ec8:	cmp	r4, #0
    1eca:	ble.w	2100 <setup+0x940>
    1ece:	mov	r9, r5
    1ed0:	movs	r7, #0
    1ed2:	mov	r5, fp
    1ed4:	b.n	1eea <setup+0x72a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1ed6:	add.w	r3, r6, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1eda:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1edc:	ldr.w	r2, [r9]
    1ee0:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ee4:	cmp	r7, r4
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1ee6:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ee8:	beq.n	1f32 <setup+0x772>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1eea:	movs	r0, #14
    1eec:	bl	b07c <random(unsigned long)>
    1ef0:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ef4:	movs	r0, #14
    1ef6:	bl	b07c <random(unsigned long)>
    1efa:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1efc:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1f00:	cmp	r5, #0
    1f02:	beq.n	1ed6 <setup+0x716>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1f04:	ldr.w	r3, [r9, #20]
    1f08:	add.w	r8, r8, r8, lsl #1
    1f0c:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1f10:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1f12:	add.w	r6, r6, r8, lsl #3
    1f16:	subs	r0, r3, r2
    1f18:	add.w	r6, r9, r6, lsl #2
    1f1c:	adds	r0, #2
    1f1e:	bl	b07c <random(unsigned long)>
    1f22:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1f26:	cmp	r7, r4
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1f28:	add.w	r3, r3, #4294967295
    1f2c:	add	r0, r3
    1f2e:	str	r0, [r6, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1f30:	bne.n	1eea <setup+0x72a>
    1f32:	ldr	r3, [pc, #312]	; (206c <setup+0x8ac>)
    1f34:	ldr	r5, [r3, #120]	; 0x78
    1f36:	ldrb.w	fp, [r3, #104]	; 0x68
    1f3a:	ldr	r4, [r3, #100]	; 0x64
    1f3c:	ldr	r3, [r3, #96]	; 0x60
    1f3e:	subs	r3, #1
    1f40:	cmp	r3, #3
    1f42:	bhi.w	2b72 <setup+0x13b2>
    1f46:	tbh	[pc, r3, lsl #1]
    1f4a:	.short	0x00be
    1f4c:	.word	0x043b048e
    1f50:	.short	0x0682
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f52:	movs	r0, #14
    1f54:	mov	r7, r5
    1f56:	bl	b07c <random(unsigned long)>
    1f5a:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f5c:	movs	r0, #14
    1f5e:	add.w	r9, r5, #96	; 0x60
    1f62:	bl	b07c <random(unsigned long)>
    1f66:	vmov	s15, r4
    1f6a:	adds	r6, #5
    1f6c:	adds	r3, r0, #5
    1f6e:	vcvt.f64.s32	d9, s15
    1f72:	rsb	sl, r0, #19
    1f76:	negs	r3, r3
    1f78:	rsb	r8, r6, #0
    1f7c:	str	r3, [sp, #4]
    1f7e:	vmov	s15, r8
    1f82:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1f84:	mov	r6, r7
    1f86:	vcvt.f64.s32	d8, s15
    1f8a:	vmul.f64	d8, d8, d8
    1f8e:	b.n	1f9c <setup+0x7dc>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1f90:	ldr	r3, [r5, #0]
    1f92:	str	r3, [r6, #28]
    1f94:	adds	r4, #1
    1f96:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f98:	cmp	sl, r4
    1f9a:	beq.n	1fec <setup+0x82c>
      double xx = x-midPoint_y;
    1f9c:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1fa0:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1fa4:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1fa8:	vfma.f64	d0, d7, d7
    1fac:	vsqrt.f64	d7, d0
    1fb0:	vcmp.f64	d7, d7
    1fb4:	vmrs	APSR_nzcv, fpscr
    1fb8:	bne.w	2f3c <setup+0x177c>
    1fbc:	vcmpe.f64	d7, d9
    1fc0:	vmrs	APSR_nzcv, fpscr
    1fc4:	bhi.n	1f94 <setup+0x7d4>
        if (rand){
    1fc6:	cmp.w	fp, #0
    1fca:	beq.n	1f90 <setup+0x7d0>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fcc:	ldr	r3, [r5, #20]
    1fce:	adds	r4, #1
    1fd0:	ldr	r0, [r5, #16]
    1fd2:	adds	r6, #96	; 0x60
    1fd4:	subs	r0, r3, r0
    1fd6:	adds	r0, #2
    1fd8:	bl	b07c <random(unsigned long)>
    1fdc:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fde:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fe0:	add.w	r3, r3, #4294967295
    1fe4:	add	r0, r3
    1fe6:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fea:	bne.n	1f9c <setup+0x7dc>
    1fec:	adds	r7, #4
    1fee:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1ff2:	cmp	r9, r7
    1ff4:	bne.n	1f7e <setup+0x7be>
    1ff6:	b.n	1f32 <setup+0x772>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ff8:	movs	r0, #14
    1ffa:	bl	b07c <random(unsigned long)>
    1ffe:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2000:	movs	r0, #14
    2002:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2006:	cmp	r4, #0
    2008:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    200a:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    200e:	it	lt
    2010:	addlt	r3, r4, #1
    2012:	cmp	r4, #0
    2014:	mov.w	r8, r3, asr #1
    2018:	it	lt
    201a:	addlt	r4, #1
    201c:	rsb	r8, r8, #0
    2020:	asrs	r4, r4, #1
    2022:	add.w	r7, r0, r8
    2026:	adds	r3, r4, r0
    2028:	cmp	r7, r3
    202a:	str	r3, [sp, #4]
    202c:	bge.n	1f32 <setup+0x772>
    202e:	add	r8, r6
    2030:	add.w	sl, r4, r6
    2034:	add.w	r6, r8, r8, lsl #1
    2038:	add.w	r6, r7, r6, lsl #3
    203c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2040:	cmp	sl, r8
    2042:	ble.n	2060 <setup+0x8a0>
    2044:	mov	r9, r6
    2046:	mov	r4, r8
        if (rand){
    2048:	cmp.w	fp, #0
    204c:	bne.w	2e2e <setup+0x166e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2050:	ldr	r3, [r5, #0]
    2052:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2056:	adds	r4, #1
    2058:	add.w	r9, r9, #96	; 0x60
    205c:	cmp	r4, sl
    205e:	bne.n	2048 <setup+0x888>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2060:	adds	r7, #1
    2062:	ldr	r3, [sp, #4]
    2064:	adds	r6, #4
    2066:	cmp	r7, r3
    2068:	bne.n	2040 <setup+0x880>
    206a:	b.n	1f32 <setup+0x772>
    206c:	.word	0x20003aa4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2070:	movs	r0, #14
    2072:	bl	b07c <random(unsigned long)>
    2076:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2078:	movs	r0, #14
    207a:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    207e:	cmp	r4, #0
    2080:	ble.w	1f32 <setup+0x772>
    2084:	add.w	r3, r0, #12
    2088:	add.w	r6, r6, r6, lsl #1
    208c:	movs	r7, #0
    208e:	add.w	r6, r3, r6, lsl #3
    2092:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2096:	cmp.w	fp, #0
    209a:	bne.n	20b0 <setup+0x8f0>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    209c:	ldr	r3, [r5, #0]
    209e:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    20a0:	adds	r7, #1
    20a2:	adds	r6, #4
    20a4:	cmp	r7, r4
    20a6:	beq.w	1f32 <setup+0x772>
      if (rand){
    20aa:	cmp.w	fp, #0
    20ae:	beq.n	209c <setup+0x8dc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    20b0:	ldr	r3, [r5, #20]
    20b2:	ldr	r2, [r5, #16]
    20b4:	subs	r0, r3, r2
    20b6:	adds	r0, #2
    20b8:	bl	b07c <random(unsigned long)>
    20bc:	ldr	r3, [r5, #16]
    20be:	subs	r3, #1
    20c0:	add	r0, r3
    20c2:	str	r0, [r6, #0]
    20c4:	b.n	20a0 <setup+0x8e0>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20c6:	movs	r0, #14
    20c8:	bl	b07c <random(unsigned long)>
    20cc:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20ce:	movs	r0, #14
    20d0:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    20d4:	cmp	r4, #0
    20d6:	ble.n	2100 <setup+0x940>
    20d8:	add.w	r3, r0, #12
    20dc:	add.w	r6, r6, r6, lsl #1
    20e0:	mov	r8, r4
    20e2:	movs	r7, #0
    20e4:	add.w	r6, r3, r6, lsl #3
    20e8:	mov	r4, fp
    20ea:	add.w	r6, r5, r6, lsl #2
      if (rand){
    20ee:	cmp	r4, #0
    20f0:	bne.w	2ede <setup+0x171e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    20f4:	ldr	r3, [r5, #0]
    20f6:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    20f8:	adds	r7, #1
    20fa:	adds	r6, #4
    20fc:	cmp	r7, r8
    20fe:	bne.n	20ee <setup+0x92e>
    2100:	ldr	r3, [pc, #544]	; (2324 <setup+0xb64>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    2102:	ldr	r2, [pc, #544]	; (2324 <setup+0xb64>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    2104:	ldr	r3, [r3, #108]	; 0x6c
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    2106:	ldr.w	r5, [r2, #128]	; 0x80
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    210a:	subs	r3, #1
    210c:	ldr	r4, [r2, #112]	; 0x70
    210e:	ldrb.w	fp, [r2, #116]	; 0x74
    2112:	cmp	r3, #3
    2114:	bhi.w	2b04 <setup+0x1344>
    2118:	tbb	[pc, r3]
    211c:	.word	0x024a9dd8
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2120:	cmp	r4, #0
    2122:	ble.w	2362 <setup+0xba2>
    2126:	mov	r9, r5
    2128:	movs	r7, #0
    212a:	mov	r5, fp
    212c:	b.n	2142 <setup+0x982>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    212e:	add.w	r3, r6, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2132:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2134:	ldr.w	r2, [r9]
    2138:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    213c:	cmp	r4, r7
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    213e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2140:	beq.n	218a <setup+0x9ca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2142:	movs	r0, #14
    2144:	bl	b07c <random(unsigned long)>
    2148:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    214c:	movs	r0, #14
    214e:	bl	b07c <random(unsigned long)>
    2152:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2154:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2158:	cmp	r5, #0
    215a:	beq.n	212e <setup+0x96e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    215c:	ldr.w	r3, [r9, #20]
    2160:	add.w	r8, r8, r8, lsl #1
    2164:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2168:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    216a:	add.w	r6, r6, r8, lsl #3
    216e:	subs	r0, r3, r2
    2170:	add.w	r6, r9, r6, lsl #2
    2174:	adds	r0, #2
    2176:	bl	b07c <random(unsigned long)>
    217a:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    217e:	cmp	r4, r7
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2180:	add.w	r3, r3, #4294967295
    2184:	add	r0, r3
    2186:	str	r0, [r6, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2188:	bne.n	2142 <setup+0x982>
    218a:	ldr	r3, [pc, #408]	; (2324 <setup+0xb64>)
    218c:	ldr	r2, [pc, #404]	; (2324 <setup+0xb64>)
    218e:	ldr	r3, [r3, #108]	; 0x6c
    2190:	ldrb.w	fp, [r2, #116]	; 0x74
    2194:	ldr	r6, [r2, #112]	; 0x70
    2196:	subs	r3, #1

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
    2198:	ldr	r2, [pc, #392]	; (2324 <setup+0xb64>)
    219a:	ldr.w	r5, [r2, #132]	; 0x84
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    219e:	cmp	r3, #3
    21a0:	bhi.w	2a98 <setup+0x12d8>
    21a4:	tbh	[pc, r3, lsl #1]
    21a8:	.word	0x019f00c0
    21ac:	.word	0x05e9014c
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21b0:	movs	r0, #14
    21b2:	mov	r7, r5
    21b4:	bl	b07c <random(unsigned long)>
    21b8:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21ba:	movs	r0, #14
    21bc:	add.w	r9, r5, #96	; 0x60
    21c0:	bl	b07c <random(unsigned long)>
    21c4:	vmov	s15, r4
    21c8:	adds	r6, #5
    21ca:	adds	r3, r0, #5
    21cc:	vcvt.f64.s32	d9, s15
    21d0:	rsb	sl, r0, #19
    21d4:	negs	r3, r3
    21d6:	rsb	r8, r6, #0
    21da:	str	r3, [sp, #4]
    21dc:	vmov	s15, r8
    21e0:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    21e2:	mov	r6, r7
    21e4:	vcvt.f64.s32	d8, s15
    21e8:	vmul.f64	d8, d8, d8
    21ec:	b.n	21fa <setup+0xa3a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    21ee:	ldr	r3, [r5, #0]
    21f0:	str	r3, [r6, #28]
    21f2:	adds	r4, #1
    21f4:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    21f6:	cmp	r4, sl
    21f8:	beq.n	224a <setup+0xa8a>
      double xx = x-midPoint_y;
    21fa:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    21fe:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2202:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2206:	vfma.f64	d0, d7, d7
    220a:	vsqrt.f64	d7, d0
    220e:	vcmp.f64	d7, d7
    2212:	vmrs	APSR_nzcv, fpscr
    2216:	bne.w	2f54 <setup+0x1794>
    221a:	vcmpe.f64	d7, d9
    221e:	vmrs	APSR_nzcv, fpscr
    2222:	bhi.n	21f2 <setup+0xa32>
        if (rand){
    2224:	cmp.w	fp, #0
    2228:	beq.n	21ee <setup+0xa2e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    222a:	ldr	r3, [r5, #20]
    222c:	adds	r4, #1
    222e:	ldr	r0, [r5, #16]
    2230:	adds	r6, #96	; 0x60
    2232:	subs	r0, r3, r0
    2234:	adds	r0, #2
    2236:	bl	b07c <random(unsigned long)>
    223a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    223c:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    223e:	add.w	r3, r3, #4294967295
    2242:	add	r0, r3
    2244:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2248:	bne.n	21fa <setup+0xa3a>
    224a:	adds	r7, #4
    224c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2250:	cmp	r9, r7
    2252:	bne.n	21dc <setup+0xa1c>
    2254:	b.n	218a <setup+0x9ca>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2256:	movs	r0, #14
    2258:	bl	b07c <random(unsigned long)>
    225c:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    225e:	movs	r0, #14
    2260:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2264:	cmp	r4, #0
    2266:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2268:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    226c:	it	lt
    226e:	addlt	r3, r4, #1
    2270:	cmp	r4, #0
    2272:	mov.w	r8, r3, asr #1
    2276:	it	lt
    2278:	addlt	r4, #1
    227a:	rsb	r8, r8, #0
    227e:	asrs	r4, r4, #1
    2280:	add.w	r7, r0, r8
    2284:	adds	r3, r4, r0
    2286:	cmp	r3, r7
    2288:	str	r3, [sp, #4]
    228a:	ble.w	218a <setup+0x9ca>
    228e:	add	r8, r6
    2290:	add.w	sl, r4, r6
    2294:	add.w	r6, r8, r8, lsl #1
    2298:	add.w	r6, r7, r6, lsl #3
    229c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22a0:	cmp	sl, r8
    22a2:	ble.n	22c0 <setup+0xb00>
    22a4:	mov	r9, r6
    22a6:	mov	r4, r8
        if (rand){
    22a8:	cmp.w	fp, #0
    22ac:	bne.w	2e94 <setup+0x16d4>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    22b0:	ldr	r3, [r5, #0]
    22b2:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22b6:	adds	r4, #1
    22b8:	add.w	r9, r9, #96	; 0x60
    22bc:	cmp	r4, sl
    22be:	bne.n	22a8 <setup+0xae8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    22c0:	adds	r7, #1
    22c2:	ldr	r3, [sp, #4]
    22c4:	adds	r6, #4
    22c6:	cmp	r3, r7
    22c8:	bne.n	22a0 <setup+0xae0>
    22ca:	b.n	218a <setup+0x9ca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22cc:	movs	r0, #14
    22ce:	bl	b07c <random(unsigned long)>
    22d2:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22d4:	movs	r0, #14
    22d6:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    22da:	cmp	r4, #0
    22dc:	ble.w	218a <setup+0x9ca>
    22e0:	add.w	r6, r6, r6, lsl #1
    22e4:	add.w	r3, r0, #12
    22e8:	movs	r7, #0
    22ea:	add.w	r6, r3, r6, lsl #3
    22ee:	add.w	r6, r5, r6, lsl #2
      if (rand){
    22f2:	cmp.w	fp, #0
    22f6:	bne.n	230c <setup+0xb4c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    22f8:	ldr	r3, [r5, #0]
    22fa:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    22fc:	adds	r7, #1
    22fe:	adds	r6, #4
    2300:	cmp	r4, r7
    2302:	beq.w	218a <setup+0x9ca>
      if (rand){
    2306:	cmp.w	fp, #0
    230a:	beq.n	22f8 <setup+0xb38>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    230c:	ldr	r3, [r5, #20]
    230e:	ldr	r2, [r5, #16]
    2310:	subs	r0, r3, r2
    2312:	adds	r0, #2
    2314:	bl	b07c <random(unsigned long)>
    2318:	ldr	r3, [r5, #16]
    231a:	subs	r3, #1
    231c:	add	r0, r3
    231e:	str	r0, [r6, #0]
    2320:	b.n	22fc <setup+0xb3c>
    2322:	nop
    2324:	.word	0x20003aa4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2328:	movs	r0, #14
    232a:	bl	b07c <random(unsigned long)>
    232e:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2330:	movs	r0, #14
    2332:	bl	b07c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2336:	cmp	r6, #0
    2338:	ble.n	2362 <setup+0xba2>
    233a:	add.w	r4, r4, r4, lsl #1
    233e:	add.w	r3, r0, #12
    2342:	mov	r8, r6
    2344:	movs	r7, #0
    2346:	add.w	r4, r3, r4, lsl #3
    234a:	mov	r6, fp
    234c:	add.w	r4, r5, r4, lsl #2
      if (rand){
    2350:	cmp	r6, #0
    2352:	bne.w	2ef6 <setup+0x1736>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2356:	ldr	r3, [r5, #0]
    2358:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    235a:	adds	r7, #1
    235c:	adds	r4, #4
    235e:	cmp	r7, r8
    2360:	bne.n	2350 <setup+0xb90>

  screen_A.init_screen();
  screen_B.init_screen();

  synapse_A.begin();
    2362:	ldr	r0, [pc, #804]	; (2688 <setup+0xec8>)
    2364:	bl	97e8 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    2368:	ldr	r0, [pc, #800]	; (268c <setup+0xecc>)
    236a:	bl	97e8 <Adafruit_NeoPixel::begin()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    236e:	ldr	r3, [pc, #800]	; (2690 <setup+0xed0>)
    2370:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2372:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2374:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2376:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2378:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    237a:	ldr	r6, [pc, #788]	; (2690 <setup+0xed0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    237c:	cmp	r3, r1
    237e:	it	eq
    2380:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2382:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2384:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2386:	ite	eq
    2388:	moveq	r5, #1
    238a:	movne	r5, #0
    238c:	cmp	r5, #0
    238e:	beq.n	2376 <setup+0xbb6>
    2390:	lsrs	r1, r3, #5
    2392:	ldr	r3, [pc, #768]	; (2694 <setup+0xed4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2394:	mov	r4, r6
    2396:	orr.w	r1, r1, r2, lsl #27
    239a:	vmov	s15, r1
    239e:	vldr	d5, [pc, #736]	; 2680 <setup+0xec0>
    23a2:	vcvt.f64.u32	d7, s15
    23a6:	vdiv.f64	d6, d7, d5
    23aa:	vcvt.u32.f64	s12, d6
    23ae:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    23b2:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    23b4:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23b6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    23b8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23ba:	ldr	r6, [pc, #724]	; (2690 <setup+0xed0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    23bc:	cmp	r3, r1
    23be:	it	eq
    23c0:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23c2:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    23c4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    23c6:	ite	eq
    23c8:	moveq	r5, #1
    23ca:	movne	r5, #0
    23cc:	cmp	r5, #0
    23ce:	beq.n	23b6 <setup+0xbf6>
    23d0:	lsrs	r1, r3, #5
    23d2:	ldr	r3, [pc, #708]	; (2698 <setup+0xed8>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23d4:	mov	r5, r6
    23d6:	orr.w	r1, r1, r2, lsl #27
    23da:	vmov	s15, r1
    23de:	vldr	d5, [pc, #672]	; 2680 <setup+0xec0>
    23e2:	vcvt.f64.u32	d7, s15
    23e6:	vdiv.f64	d6, d7, d5
    23ea:	vcvt.u32.f64	s12, d6
    23ee:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    23f2:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    23f4:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23f6:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    23f8:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    23fa:	cmp	r3, r1
    23fc:	it	eq
    23fe:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2400:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2402:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2404:	ite	eq
    2406:	moveq	r0, #1
    2408:	movne	r0, #0
    240a:	cmp	r0, #0
    240c:	beq.n	23f6 <setup+0xc36>
    240e:	lsrs	r1, r3, #5
  
  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceFadeUpdate = 0;

  delay(SETUP_DELAY);
    2410:	mov.w	r0, #1000	; 0x3e8
    2414:	ldr	r3, [pc, #644]	; (269c <setup+0xedc>)
    2416:	orr.w	r1, r1, r2, lsl #27
    241a:	vmov	s15, r1
    241e:	vldr	d5, [pc, #608]	; 2680 <setup+0xec0>
    2422:	vcvt.f64.u32	d7, s15
    2426:	vdiv.f64	d6, d7, d5
    242a:	vcvt.u32.f64	s12, d6
    242e:	vstr	s12, [r3]
}
    2432:	add	sp, #12
    2434:	vpop	{d8-d9}
    2438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceFadeUpdate = 0;

  delay(SETUP_DELAY);
    243c:	b.w	acdc <delay>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2440:	movs	r0, #14
    2442:	mov	r7, r5
    2444:	bl	b07c <random(unsigned long)>
    2448:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    244a:	movs	r0, #14
    244c:	add.w	r9, r5, #96	; 0x60
    2450:	bl	b07c <random(unsigned long)>
    2454:	vmov	s15, r6
    2458:	adds	r4, #5
    245a:	adds	r3, r0, #5
    245c:	vcvt.f64.s32	d9, s15
    2460:	rsb	sl, r0, #19
    2464:	negs	r3, r3
    2466:	rsb	r8, r4, #0
    246a:	str	r3, [sp, #4]
    246c:	vmov	s15, r8
    2470:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    2472:	mov	r6, r7
    2474:	vcvt.f64.s32	d8, s15
    2478:	vmul.f64	d8, d8, d8
    247c:	b.n	248a <setup+0xcca>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    247e:	ldr	r3, [r5, #0]
    2480:	str	r3, [r6, #28]
    2482:	adds	r4, #1
    2484:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2486:	cmp	sl, r4
    2488:	beq.n	24da <setup+0xd1a>
      double xx = x-midPoint_y;
    248a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    248e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2492:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2496:	vfma.f64	d0, d7, d7
    249a:	vsqrt.f64	d7, d0
    249e:	vcmp.f64	d7, d7
    24a2:	vmrs	APSR_nzcv, fpscr
    24a6:	bne.w	2f1a <setup+0x175a>
    24aa:	vcmpe.f64	d7, d9
    24ae:	vmrs	APSR_nzcv, fpscr
    24b2:	bhi.n	2482 <setup+0xcc2>
        if (rand){
    24b4:	cmp.w	fp, #0
    24b8:	beq.n	247e <setup+0xcbe>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24ba:	ldr	r3, [r5, #20]
    24bc:	adds	r4, #1
    24be:	ldr	r0, [r5, #16]
    24c0:	adds	r6, #96	; 0x60
    24c2:	subs	r0, r3, r0
    24c4:	adds	r0, #2
    24c6:	bl	b07c <random(unsigned long)>
    24ca:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24cc:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24ce:	add.w	r3, r3, #4294967295
    24d2:	add	r0, r3
    24d4:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24d8:	bne.n	248a <setup+0xcca>
    24da:	adds	r7, #4
    24dc:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    24e0:	cmp	r9, r7
    24e2:	bne.n	246c <setup+0xcac>
    24e4:	b.n	2362 <setup+0xba2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24e6:	movs	r0, #14
    24e8:	bl	b07c <random(unsigned long)>
    24ec:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24ee:	movs	r0, #14
    24f0:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24f4:	cmp	r6, #0
    24f6:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24f8:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24fc:	it	lt
    24fe:	addlt	r3, r6, #1
    2500:	cmp	r6, #0
    2502:	mov.w	r8, r3, asr #1
    2506:	it	lt
    2508:	addlt	r6, #1
    250a:	rsb	r8, r8, #0
    250e:	asrs	r6, r6, #1
    2510:	add.w	r7, r0, r8
    2514:	adds	r3, r0, r6
    2516:	cmp	r3, r7
    2518:	str	r3, [sp, #4]
    251a:	ble.w	2362 <setup+0xba2>
    251e:	add	r8, r4
    2520:	add	r4, r6
    2522:	add.w	r6, r8, r8, lsl #1
    2526:	add.w	r6, r7, r6, lsl #3
    252a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    252e:	cmp	r4, r8
    2530:	ble.n	2550 <setup+0xd90>
    2532:	mov	sl, r6
    2534:	mov	r9, r8
        if (rand){
    2536:	cmp.w	fp, #0
    253a:	bne.w	2e7a <setup+0x16ba>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    253e:	ldr	r3, [r5, #0]
    2540:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2544:	add.w	r9, r9, #1
    2548:	add.w	sl, sl, #96	; 0x60
    254c:	cmp	r9, r4
    254e:	bne.n	2536 <setup+0xd76>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2550:	adds	r7, #1
    2552:	ldr	r3, [sp, #4]
    2554:	adds	r6, #4
    2556:	cmp	r3, r7
    2558:	bne.n	252e <setup+0xd6e>
    255a:	b.n	2362 <setup+0xba2>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    255c:	movs	r0, #14
    255e:	mov	r7, r5
    2560:	bl	b07c <random(unsigned long)>
    2564:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2566:	movs	r0, #14
    2568:	add.w	r9, r5, #96	; 0x60
    256c:	bl	b07c <random(unsigned long)>
    2570:	vmov	s15, r6
    2574:	adds	r4, #5
    2576:	adds	r3, r0, #5
    2578:	vcvt.f64.s32	d9, s15
    257c:	rsb	sl, r0, #19
    2580:	negs	r3, r3
    2582:	rsb	r8, r4, #0
    2586:	str	r3, [sp, #4]
    2588:	vmov	s15, r8
    258c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    258e:	mov	r6, r7
    2590:	vcvt.f64.s32	d8, s15
    2594:	vmul.f64	d8, d8, d8
    2598:	b.n	25a6 <setup+0xde6>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    259a:	ldr	r3, [r5, #0]
    259c:	str	r3, [r6, #28]
    259e:	adds	r4, #1
    25a0:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    25a2:	cmp	r4, sl
    25a4:	beq.n	25f6 <setup+0xe36>
      double xx = x-midPoint_y;
    25a6:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    25aa:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    25ae:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    25b2:	vfma.f64	d0, d7, d7
    25b6:	vsqrt.f64	d7, d0
    25ba:	vcmp.f64	d7, d7
    25be:	vmrs	APSR_nzcv, fpscr
    25c2:	bne.w	2f60 <setup+0x17a0>
    25c6:	vcmpe.f64	d7, d9
    25ca:	vmrs	APSR_nzcv, fpscr
    25ce:	bhi.n	259e <setup+0xdde>
        if (rand){
    25d0:	cmp.w	fp, #0
    25d4:	beq.n	259a <setup+0xdda>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25d6:	ldr	r3, [r5, #20]
    25d8:	adds	r4, #1
    25da:	ldr	r0, [r5, #16]
    25dc:	adds	r6, #96	; 0x60
    25de:	subs	r0, r3, r0
    25e0:	adds	r0, #2
    25e2:	bl	b07c <random(unsigned long)>
    25e6:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    25e8:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25ea:	add.w	r3, r3, #4294967295
    25ee:	add	r0, r3
    25f0:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    25f4:	bne.n	25a6 <setup+0xde6>
    25f6:	adds	r7, #4
    25f8:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    25fc:	cmp	r7, r9
    25fe:	bne.n	2588 <setup+0xdc8>
    2600:	b.w	1b3c <setup+0x37c>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2604:	movs	r0, #14
    2606:	bl	b07c <random(unsigned long)>
    260a:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    260c:	movs	r0, #14
    260e:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2612:	cmp	r6, #0
    2614:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2616:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    261a:	it	lt
    261c:	addlt	r3, r6, #1
    261e:	cmp	r6, #0
    2620:	mov.w	r8, r3, asr #1
    2624:	it	lt
    2626:	addlt	r6, #1
    2628:	rsb	r8, r8, #0
    262c:	asrs	r6, r6, #1
    262e:	add.w	r7, r0, r8
    2632:	adds	r3, r0, r6
    2634:	cmp	r7, r3
    2636:	str	r3, [sp, #4]
    2638:	bge.w	1b3c <setup+0x37c>
    263c:	add	r8, r4
    263e:	add	r4, r6
    2640:	add.w	r6, r8, r8, lsl #1
    2644:	add.w	r6, r7, r6, lsl #3
    2648:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    264c:	cmp	r8, r4
    264e:	bge.n	266e <setup+0xeae>
    2650:	mov	sl, r6
    2652:	mov	r9, r8
        if (rand){
    2654:	cmp.w	fp, #0
    2658:	bne.w	2e60 <setup+0x16a0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    265c:	ldr	r3, [r5, #0]
    265e:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2662:	add.w	r9, r9, #1
    2666:	add.w	sl, sl, #96	; 0x60
    266a:	cmp	r9, r4
    266c:	bne.n	2654 <setup+0xe94>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    266e:	adds	r7, #1
    2670:	ldr	r3, [sp, #4]
    2672:	adds	r6, #4
    2674:	cmp	r7, r3
    2676:	bne.n	264c <setup+0xe8c>
    2678:	b.w	1b3c <setup+0x37c>
    267c:	nop.w
    2680:	.word	0xd2f1a9fc
    2684:	.word	0x3ff0624d
    2688:	.word	0x20006ed8
    268c:	.word	0x20006eec
    2690:	.word	0x400d4000
    2694:	.word	0x2000157c
    2698:	.word	0x20001580
    269c:	.word	0x20003d0c
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    26a0:	movs	r0, #14
    26a2:	mov	r7, r5
    26a4:	bl	b07c <random(unsigned long)>
    26a8:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    26aa:	movs	r0, #14
    26ac:	add.w	r9, r5, #96	; 0x60
    26b0:	bl	b07c <random(unsigned long)>
    26b4:	vmov	s15, r4
    26b8:	adds	r6, #5
    26ba:	adds	r3, r0, #5
    26bc:	vcvt.f64.s32	d9, s15
    26c0:	rsb	sl, r0, #19
    26c4:	negs	r3, r3
    26c6:	rsb	r8, r6, #0
    26ca:	str	r3, [sp, #4]
    26cc:	vmov	s15, r8
    26d0:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    26d2:	mov	r6, r7
    26d4:	vcvt.f64.s32	d8, s15
    26d8:	vmul.f64	d8, d8, d8
    26dc:	b.n	26ea <setup+0xf2a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    26de:	ldr	r3, [r5, #0]
    26e0:	str	r3, [r6, #28]
    26e2:	adds	r4, #1
    26e4:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    26e6:	cmp	r4, sl
    26e8:	beq.n	273a <setup+0xf7a>
      double xx = x-midPoint_y;
    26ea:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    26ee:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    26f2:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    26f6:	vfma.f64	d0, d7, d7
    26fa:	vsqrt.f64	d7, d0
    26fe:	vcmp.f64	d7, d7
    2702:	vmrs	APSR_nzcv, fpscr
    2706:	bne.w	2f0e <setup+0x174e>
    270a:	vcmpe.f64	d7, d9
    270e:	vmrs	APSR_nzcv, fpscr
    2712:	bhi.n	26e2 <setup+0xf22>
        if (rand){
    2714:	cmp.w	fp, #0
    2718:	beq.n	26de <setup+0xf1e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    271a:	ldr	r3, [r5, #20]
    271c:	adds	r4, #1
    271e:	ldr	r0, [r5, #16]
    2720:	adds	r6, #96	; 0x60
    2722:	subs	r0, r3, r0
    2724:	adds	r0, #2
    2726:	bl	b07c <random(unsigned long)>
    272a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    272c:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    272e:	add.w	r3, r3, #4294967295
    2732:	add	r0, r3
    2734:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2738:	bne.n	26ea <setup+0xf2a>
    273a:	adds	r7, #4
    273c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2740:	cmp	r7, r9
    2742:	bne.n	26cc <setup+0xf0c>
    2744:	b.w	1d9c <setup+0x5dc>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2748:	movs	r0, #14
    274a:	bl	b07c <random(unsigned long)>
    274e:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2750:	movs	r0, #14
    2752:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2756:	cmp	r4, #0
    2758:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    275a:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    275e:	it	lt
    2760:	addlt	r3, r4, #1
    2762:	cmp	r4, #0
    2764:	mov.w	r8, r3, asr #1
    2768:	it	lt
    276a:	addlt	r4, #1
    276c:	rsb	r8, r8, #0
    2770:	asrs	r4, r4, #1
    2772:	add.w	r7, r0, r8
    2776:	adds	r3, r4, r0
    2778:	cmp	r7, r3
    277a:	str	r3, [sp, #4]
    277c:	bge.w	1d9c <setup+0x5dc>
    2780:	add	r8, r6
    2782:	add.w	sl, r4, r6
    2786:	add.w	r6, r8, r8, lsl #1
    278a:	add.w	r6, r7, r6, lsl #3
    278e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2792:	cmp	r8, sl
    2794:	bge.n	27b2 <setup+0xff2>
    2796:	mov	r9, r6
    2798:	mov	r4, r8
        if (rand){
    279a:	cmp.w	fp, #0
    279e:	bne.w	2e48 <setup+0x1688>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    27a2:	ldr	r3, [r5, #0]
    27a4:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    27a8:	adds	r4, #1
    27aa:	add.w	r9, r9, #96	; 0x60
    27ae:	cmp	r4, sl
    27b0:	bne.n	279a <setup+0xfda>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    27b2:	adds	r7, #1
    27b4:	ldr	r3, [sp, #4]
    27b6:	adds	r6, #4
    27b8:	cmp	r7, r3
    27ba:	bne.n	2792 <setup+0xfd2>
    27bc:	b.w	1d9c <setup+0x5dc>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    27c0:	movs	r0, #14
    27c2:	mov	r7, r5
    27c4:	bl	b07c <random(unsigned long)>
    27c8:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    27ca:	movs	r0, #14
    27cc:	add.w	r9, r5, #96	; 0x60
    27d0:	bl	b07c <random(unsigned long)>
    27d4:	vmov	s15, r4
    27d8:	adds	r6, #5
    27da:	adds	r3, r0, #5
    27dc:	vcvt.f64.s32	d9, s15
    27e0:	rsb	sl, r0, #19
    27e4:	negs	r3, r3
    27e6:	rsb	r8, r6, #0
    27ea:	str	r3, [sp, #4]
    27ec:	vmov	s15, r8
    27f0:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    27f2:	mov	r6, r7
    27f4:	vcvt.f64.s32	d8, s15
    27f8:	vmul.f64	d8, d8, d8
    27fc:	b.n	280a <setup+0x104a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    27fe:	ldr	r3, [r5, #0]
    2800:	str	r3, [r6, #28]
    2802:	adds	r4, #1
    2804:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2806:	cmp	sl, r4
    2808:	beq.n	285a <setup+0x109a>
      double xx = x-midPoint_y;
    280a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    280e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2812:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2816:	vfma.f64	d0, d7, d7
    281a:	vsqrt.f64	d7, d0
    281e:	vcmp.f64	d7, d7
    2822:	vmrs	APSR_nzcv, fpscr
    2826:	bne.w	2f26 <setup+0x1766>
    282a:	vcmpe.f64	d7, d9
    282e:	vmrs	APSR_nzcv, fpscr
    2832:	bhi.n	2802 <setup+0x1042>
        if (rand){
    2834:	cmp.w	fp, #0
    2838:	beq.n	27fe <setup+0x103e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    283a:	ldr	r3, [r5, #20]
    283c:	adds	r4, #1
    283e:	ldr	r0, [r5, #16]
    2840:	adds	r6, #96	; 0x60
    2842:	subs	r0, r3, r0
    2844:	adds	r0, #2
    2846:	bl	b07c <random(unsigned long)>
    284a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    284c:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    284e:	add.w	r3, r3, #4294967295
    2852:	add	r0, r3
    2854:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2858:	bne.n	280a <setup+0x104a>
    285a:	adds	r7, #4
    285c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2860:	cmp	r9, r7
    2862:	bne.n	27ec <setup+0x102c>
    2864:	b.n	2100 <setup+0x940>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2866:	movs	r0, #14
    2868:	bl	b07c <random(unsigned long)>
    286c:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    286e:	movs	r0, #14
    2870:	bl	b07c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2874:	cmp	r4, #0
    2876:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2878:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    287c:	it	lt
    287e:	addlt	r3, r4, #1
    2880:	cmp	r4, #0
    2882:	mov.w	r8, r3, asr #1
    2886:	it	lt
    2888:	addlt	r4, #1
    288a:	rsb	r8, r8, #0
    288e:	asrs	r4, r4, #1
    2890:	add.w	r7, r0, r8
    2894:	adds	r3, r4, r0
    2896:	cmp	r3, r7
    2898:	str	r3, [sp, #4]
    289a:	ble.w	2100 <setup+0x940>
    289e:	add	r8, r6
    28a0:	add.w	sl, r4, r6
    28a4:	add.w	r6, r8, r8, lsl #1
    28a8:	add.w	r6, r7, r6, lsl #3
    28ac:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    28b0:	cmp	sl, r8
    28b2:	ble.n	28d0 <setup+0x1110>
    28b4:	mov	r9, r6
    28b6:	mov	r4, r8
        if (rand){
    28b8:	cmp.w	fp, #0
    28bc:	bne.w	2de2 <setup+0x1622>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    28c0:	ldr	r3, [r5, #0]
    28c2:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    28c6:	adds	r4, #1
    28c8:	add.w	r9, r9, #96	; 0x60
    28cc:	cmp	r4, sl
    28ce:	bne.n	28b8 <setup+0x10f8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    28d0:	adds	r7, #1
    28d2:	ldr	r3, [sp, #4]
    28d4:	adds	r6, #4
    28d6:	cmp	r3, r7
    28d8:	bne.n	28b0 <setup+0x10f0>
    28da:	b.n	2100 <setup+0x940>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    28dc:	movw	sl, #4636	; 0x121c
    28e0:	add.w	r3, r5, #28
    28e4:	movs	r7, #0
    28e6:	add.w	r9, r5, #4640	; 0x1220
    28ea:	add	sl, r5
    28ec:	str	r3, [sp, #4]
    28ee:	add.w	r8, r7, r7, lsl #1
    28f2:	ldr	r6, [sp, #4]
    28f4:	movs	r4, #0
    28f6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    28fa:	ldrb	r2, [r5, #24]
      return _background[x][y];
    28fc:	add	r3, r4
    28fe:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2900:	cbnz	r2, 2906 <setup+0x1146>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2902:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2906:	cbnz	r3, 2922 <setup+0x1162>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2908:	adds	r4, #1
    290a:	adds	r6, #4
    290c:	cmp	r4, #24
    290e:	bne.n	28f6 <setup+0x1136>
    2910:	ldr	r3, [sp, #4]
    2912:	adds	r7, #24
    2914:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2916:	cmp.w	r7, #576	; 0x240
    291a:	str	r3, [sp, #4]
    291c:	bne.n	28ee <setup+0x112e>
    291e:	b.w	1bc6 <setup+0x406>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2922:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2924:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2928:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    292a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    292e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2930:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2932:	adds	r0, #2
    2934:	ldrb.w	fp, [r3, r1]
    2938:	bl	b07c <random(unsigned long)>
    293c:	ldr	r3, [r5, #16]
    293e:	rsb	r3, r3, fp
    2942:	adds	r3, #1
    2944:	subs	r0, r3, r0
    2946:	str	r0, [r6, #0]
    2948:	b.n	2908 <setup+0x1148>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    294a:	movw	sl, #4636	; 0x121c
    294e:	add.w	r3, r5, #28
    2952:	mov.w	r9, #0
    2956:	add	sl, r5
    2958:	str	r3, [sp, #4]
    295a:	add.w	r7, r9, r9, lsl #1
    295e:	ldr	r6, [sp, #4]
    2960:	movs	r4, #0
    2962:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2966:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2968:	add	r3, r4
    296a:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    296e:	cbnz	r2, 2974 <setup+0x11b4>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2970:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2974:	cbnz	r3, 2992 <setup+0x11d2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2976:	adds	r4, #1
    2978:	adds	r6, #4
    297a:	cmp	r4, #24
    297c:	bne.n	2962 <setup+0x11a2>
    297e:	ldr	r3, [sp, #4]
    2980:	add.w	r9, r9, #24
    2984:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2986:	cmp.w	r9, #576	; 0x240
    298a:	str	r3, [sp, #4]
    298c:	bne.n	295a <setup+0x119a>
    298e:	b.w	196e <setup+0x1ae>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2992:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2994:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2998:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    299a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    299e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29a0:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29a2:	adds	r0, #2
    29a4:	ldrb.w	fp, [r3, r1]
    29a8:	bl	b07c <random(unsigned long)>
    29ac:	ldr	r3, [r5, #16]
    29ae:	rsb	r3, r3, fp
    29b2:	adds	r3, #1
    29b4:	subs	r0, r3, r0
    29b6:	str	r0, [r6, #0]
    29b8:	b.n	2976 <setup+0x11b6>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29ba:	movw	sl, #4636	; 0x121c
    29be:	add.w	r3, r5, #28
    29c2:	mov.w	r9, #0
    29c6:	add	sl, r5
    29c8:	str	r3, [sp, #4]
    29ca:	add.w	r7, r9, r9, lsl #1
    29ce:	ldr	r6, [sp, #4]
    29d0:	movs	r4, #0
    29d2:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29d6:	ldrb	r2, [r5, #24]
      return _background[x][y];
    29d8:	add	r3, r4
    29da:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29de:	cbnz	r2, 29e4 <setup+0x1224>
      return _background[x][y];
    } else {
      return !_background[x][y];
    29e0:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    29e4:	cbnz	r3, 2a02 <setup+0x1242>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    29e6:	adds	r4, #1
    29e8:	adds	r6, #4
    29ea:	cmp	r4, #24
    29ec:	bne.n	29d2 <setup+0x1212>
    29ee:	ldr	r3, [sp, #4]
    29f0:	add.w	r9, r9, #24
    29f4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    29f6:	cmp.w	r9, #576	; 0x240
    29fa:	str	r3, [sp, #4]
    29fc:	bne.n	29ca <setup+0x120a>
    29fe:	b.w	1f32 <setup+0x772>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a02:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a04:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a08:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a0a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a0e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a10:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a12:	adds	r0, #2
    2a14:	ldrb.w	fp, [r3, r1]
    2a18:	bl	b07c <random(unsigned long)>
    2a1c:	ldr	r3, [r5, #16]
    2a1e:	rsb	r3, r3, fp
    2a22:	adds	r3, #1
    2a24:	subs	r0, r3, r0
    2a26:	str	r0, [r6, #0]
    2a28:	b.n	29e6 <setup+0x1226>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a2a:	movw	sl, #4636	; 0x121c
    2a2e:	add.w	r3, r5, #28
    2a32:	movs	r7, #0
    2a34:	add.w	r9, r5, #4640	; 0x1220
    2a38:	add	sl, r5
    2a3a:	str	r3, [sp, #4]
    2a3c:	add.w	r8, r7, r7, lsl #1
    2a40:	ldr	r6, [sp, #4]
    2a42:	movs	r4, #0
    2a44:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a48:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2a4a:	add	r3, r4
    2a4c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a4e:	cbnz	r2, 2a54 <setup+0x1294>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2a50:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2a54:	cbnz	r3, 2a70 <setup+0x12b0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2a56:	adds	r4, #1
    2a58:	adds	r6, #4
    2a5a:	cmp	r4, #24
    2a5c:	bne.n	2a44 <setup+0x1284>
    2a5e:	ldr	r3, [sp, #4]
    2a60:	adds	r7, #24
    2a62:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2a64:	cmp.w	r7, #576	; 0x240
    2a68:	str	r3, [sp, #4]
    2a6a:	bne.n	2a3c <setup+0x127c>
    2a6c:	b.w	1b3c <setup+0x37c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a70:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a72:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a76:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a78:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a7c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a7e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a80:	adds	r0, #2
    2a82:	ldrb.w	fp, [r3, r1]
    2a86:	bl	b07c <random(unsigned long)>
    2a8a:	ldr	r3, [r5, #16]
    2a8c:	rsb	r3, r3, fp
    2a90:	adds	r3, #1
    2a92:	subs	r0, r3, r0
    2a94:	str	r0, [r6, #0]
    2a96:	b.n	2a56 <setup+0x1296>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a98:	movw	sl, #4636	; 0x121c
    2a9c:	add.w	r3, r5, #28
    2aa0:	movs	r7, #0
    2aa2:	add.w	r9, r5, #4640	; 0x1220
    2aa6:	add	sl, r5
    2aa8:	str	r3, [sp, #4]
    2aaa:	add.w	r8, r7, r7, lsl #1
    2aae:	ldr	r6, [sp, #4]
    2ab0:	movs	r4, #0
    2ab2:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2ab6:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2ab8:	add	r3, r4
    2aba:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2abc:	cbnz	r2, 2ac2 <setup+0x1302>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2abe:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2ac2:	cbnz	r3, 2adc <setup+0x131c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2ac4:	adds	r4, #1
    2ac6:	adds	r6, #4
    2ac8:	cmp	r4, #24
    2aca:	bne.n	2ab2 <setup+0x12f2>
    2acc:	ldr	r3, [sp, #4]
    2ace:	adds	r7, #24
    2ad0:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2ad2:	cmp.w	r7, #576	; 0x240
    2ad6:	str	r3, [sp, #4]
    2ad8:	bne.n	2aaa <setup+0x12ea>
    2ada:	b.n	2362 <setup+0xba2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2adc:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ade:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ae2:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ae4:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ae8:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2aea:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2aec:	adds	r0, #2
    2aee:	ldrb.w	fp, [r3, r1]
    2af2:	bl	b07c <random(unsigned long)>
    2af6:	ldr	r3, [r5, #16]
    2af8:	rsb	r3, r3, fp
    2afc:	adds	r3, #1
    2afe:	subs	r0, r3, r0
    2b00:	str	r0, [r6, #0]
    2b02:	b.n	2ac4 <setup+0x1304>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b04:	movw	sl, #4636	; 0x121c
    2b08:	add.w	r3, r5, #28
    2b0c:	movs	r7, #0
    2b0e:	add.w	r9, r5, #4640	; 0x1220
    2b12:	add	sl, r5
    2b14:	str	r3, [sp, #4]
    2b16:	add.w	r8, r7, r7, lsl #1
    2b1a:	ldr	r6, [sp, #4]
    2b1c:	movs	r4, #0
    2b1e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b22:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b24:	add	r3, r4
    2b26:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b28:	cbnz	r2, 2b2e <setup+0x136e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b2a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b2e:	cbnz	r3, 2b4a <setup+0x138a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b30:	adds	r4, #1
    2b32:	adds	r6, #4
    2b34:	cmp	r4, #24
    2b36:	bne.n	2b1e <setup+0x135e>
    2b38:	ldr	r3, [sp, #4]
    2b3a:	adds	r7, #24
    2b3c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b3e:	cmp.w	r7, #576	; 0x240
    2b42:	str	r3, [sp, #4]
    2b44:	bne.n	2b16 <setup+0x1356>
    2b46:	b.w	218a <setup+0x9ca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b4a:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b4c:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b50:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b52:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b56:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b58:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b5a:	adds	r0, #2
    2b5c:	ldrb.w	fp, [r3, r1]
    2b60:	bl	b07c <random(unsigned long)>
    2b64:	ldr	r3, [r5, #16]
    2b66:	rsb	r3, r3, fp
    2b6a:	adds	r3, #1
    2b6c:	subs	r0, r3, r0
    2b6e:	str	r0, [r6, #0]
    2b70:	b.n	2b30 <setup+0x1370>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b72:	movw	sl, #4636	; 0x121c
    2b76:	add.w	r3, r5, #28
    2b7a:	movs	r7, #0
    2b7c:	add.w	r9, r5, #4640	; 0x1220
    2b80:	add	sl, r5
    2b82:	str	r3, [sp, #4]
    2b84:	add.w	r8, r7, r7, lsl #1
    2b88:	ldr	r6, [sp, #4]
    2b8a:	movs	r4, #0
    2b8c:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b90:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b92:	add	r3, r4
    2b94:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b96:	cbnz	r2, 2b9c <setup+0x13dc>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b98:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b9c:	cbnz	r3, 2bb8 <setup+0x13f8>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b9e:	adds	r4, #1
    2ba0:	adds	r6, #4
    2ba2:	cmp	r4, #24
    2ba4:	bne.n	2b8c <setup+0x13cc>
    2ba6:	ldr	r3, [sp, #4]
    2ba8:	adds	r7, #24
    2baa:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2bac:	cmp.w	r7, #576	; 0x240
    2bb0:	str	r3, [sp, #4]
    2bb2:	bne.n	2b84 <setup+0x13c4>
    2bb4:	b.w	2100 <setup+0x940>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2bb8:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bba:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2bbe:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bc0:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2bc4:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bc6:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2bc8:	adds	r0, #2
    2bca:	ldrb.w	fp, [r3, r1]
    2bce:	bl	b07c <random(unsigned long)>
    2bd2:	ldr	r3, [r5, #16]
    2bd4:	rsb	r3, r3, fp
    2bd8:	adds	r3, #1
    2bda:	subs	r0, r3, r0
    2bdc:	str	r0, [r6, #0]
    2bde:	b.n	2b9e <setup+0x13de>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2be0:	movw	sl, #4636	; 0x121c
    2be4:	add.w	r3, r5, #28
    2be8:	movs	r7, #0
    2bea:	add.w	r9, r5, #4640	; 0x1220
    2bee:	add	sl, r5
    2bf0:	str	r3, [sp, #4]
    2bf2:	add.w	r8, r7, r7, lsl #1
    2bf6:	ldr	r6, [sp, #4]
    2bf8:	movs	r4, #0
    2bfa:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2bfe:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2c00:	add	r3, r4
    2c02:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2c04:	cbnz	r2, 2c0a <setup+0x144a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2c06:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2c0a:	cbnz	r3, 2c26 <setup+0x1466>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2c0c:	adds	r4, #1
    2c0e:	adds	r6, #4
    2c10:	cmp	r4, #24
    2c12:	bne.n	2bfa <setup+0x143a>
    2c14:	ldr	r3, [sp, #4]
    2c16:	adds	r7, #24
    2c18:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2c1a:	cmp.w	r7, #576	; 0x240
    2c1e:	str	r3, [sp, #4]
    2c20:	bne.n	2bf2 <setup+0x1432>
    2c22:	b.w	1d9c <setup+0x5dc>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c26:	ldr	r2, [r5, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c28:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c2c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c2e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c32:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c34:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c36:	adds	r0, #2
    2c38:	ldrb.w	fp, [r3, r1]
    2c3c:	bl	b07c <random(unsigned long)>
    2c40:	ldr	r3, [r5, #16]
    2c42:	rsb	r3, r3, fp
    2c46:	adds	r3, #1
    2c48:	subs	r0, r3, r0
    2c4a:	str	r0, [r6, #0]
    2c4c:	b.n	2c0c <setup+0x144c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2c4e:	cmp	r4, #0
    2c50:	ble.w	2100 <setup+0x940>
    2c54:	mov	r9, r4
    2c56:	movs	r7, #0
    2c58:	mov	r4, fp
    2c5a:	b.n	2c70 <setup+0x14b0>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2c5c:	add.w	r3, r6, r3, lsl #3
    2c60:	ldr	r2, [r5, #0]
    2c62:	add.w	r3, r5, r3, lsl #2
    2c66:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2c68:	adds	r7, #1
    2c6a:	cmp	r7, r9
    2c6c:	beq.w	2100 <setup+0x940>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c70:	movs	r0, #14
    2c72:	bl	b07c <random(unsigned long)>
    2c76:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c7a:	movs	r0, #14
    2c7c:	bl	b07c <random(unsigned long)>
    2c80:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2c82:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2c86:	cmp	r4, #0
    2c88:	beq.n	2c5c <setup+0x149c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c8a:	ldr	r3, [r5, #20]
    2c8c:	add.w	r8, r8, r8, lsl #1
    2c90:	ldr	r2, [r5, #16]
    2c92:	add.w	r6, r6, r8, lsl #3
    2c96:	subs	r0, r3, r2
    2c98:	add.w	r6, r5, r6, lsl #2
    2c9c:	adds	r0, #2
    2c9e:	bl	b07c <random(unsigned long)>
    2ca2:	ldr	r3, [r5, #16]
    2ca4:	subs	r3, #1
    2ca6:	add	r0, r3
    2ca8:	str	r0, [r6, #28]
    2caa:	b.n	2c68 <setup+0x14a8>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2cac:	cmp	r4, #0
    2cae:	ble.w	1d9c <setup+0x5dc>
    2cb2:	mov	r9, r5
    2cb4:	mov.w	r8, #0
    2cb8:	mov	r5, fp
    2cba:	b.n	2cd4 <setup+0x1514>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2cbc:	add.w	r3, r6, r3, lsl #3
    2cc0:	ldr.w	r2, [r9]
    2cc4:	add.w	r3, r9, r3, lsl #2
    2cc8:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2cca:	add.w	r8, r8, #1
    2cce:	cmp	r8, r4
    2cd0:	beq.w	1d9c <setup+0x5dc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2cd4:	movs	r0, #14
    2cd6:	bl	b07c <random(unsigned long)>
    2cda:	adds	r7, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2cdc:	movs	r0, #14
    2cde:	bl	b07c <random(unsigned long)>
    2ce2:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2ce4:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2ce8:	cmp	r5, #0
    2cea:	beq.n	2cbc <setup+0x14fc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2cec:	ldr.w	r3, [r9, #20]
    2cf0:	add.w	r7, r7, r7, lsl #1
    2cf4:	ldr.w	r2, [r9, #16]
    2cf8:	add.w	r6, r6, r7, lsl #3
    2cfc:	subs	r0, r3, r2
    2cfe:	add.w	r6, r9, r6, lsl #2
    2d02:	adds	r0, #2
    2d04:	bl	b07c <random(unsigned long)>
    2d08:	ldr.w	r3, [r9, #16]
    2d0c:	subs	r3, #1
    2d0e:	add	r0, r3
    2d10:	str	r0, [r6, #28]
    2d12:	b.n	2cca <setup+0x150a>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2d14:	cmp	r6, #0
    2d16:	ble.w	1b3c <setup+0x37c>
    2d1a:	mov	r9, r5
    2d1c:	movs	r7, #0
    2d1e:	mov	r5, fp
    2d20:	b.n	2d38 <setup+0x1578>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2d22:	add.w	r3, r4, r3, lsl #3
    2d26:	ldr.w	r2, [r9]
    2d2a:	add.w	r3, r9, r3, lsl #2
    2d2e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2d30:	adds	r7, #1
    2d32:	cmp	r7, r6
    2d34:	beq.w	1b3c <setup+0x37c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2d38:	movs	r0, #14
    2d3a:	bl	b07c <random(unsigned long)>
    2d3e:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2d42:	movs	r0, #14
    2d44:	bl	b07c <random(unsigned long)>
    2d48:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2d4a:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2d4e:	cmp	r5, #0
    2d50:	beq.n	2d22 <setup+0x1562>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2d52:	ldr.w	r3, [r9, #20]
    2d56:	add.w	r8, r8, r8, lsl #1
    2d5a:	ldr.w	r2, [r9, #16]
    2d5e:	add.w	r4, r4, r8, lsl #3
    2d62:	subs	r0, r3, r2
    2d64:	add.w	r4, r9, r4, lsl #2
    2d68:	adds	r0, #2
    2d6a:	bl	b07c <random(unsigned long)>
    2d6e:	ldr.w	r3, [r9, #16]
    2d72:	subs	r3, #1
    2d74:	add	r0, r3
    2d76:	str	r0, [r4, #28]
    2d78:	b.n	2d30 <setup+0x1570>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2d7a:	cmp	r6, #0
    2d7c:	ble.w	2362 <setup+0xba2>
    2d80:	mov	r9, r5
    2d82:	mov.w	r8, #0
    2d86:	mov	r5, fp
    2d88:	b.n	2da2 <setup+0x15e2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2d8a:	add.w	r3, r4, r3, lsl #3
    2d8e:	ldr.w	r2, [r9]
    2d92:	add.w	r3, r9, r3, lsl #2
    2d96:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2d98:	add.w	r8, r8, #1
    2d9c:	cmp	r8, r6
    2d9e:	beq.w	2362 <setup+0xba2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2da2:	movs	r0, #14
    2da4:	bl	b07c <random(unsigned long)>
    2da8:	adds	r7, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2daa:	movs	r0, #14
    2dac:	bl	b07c <random(unsigned long)>
    2db0:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2db2:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2db6:	cmp	r5, #0
    2db8:	beq.n	2d8a <setup+0x15ca>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2dba:	ldr.w	r3, [r9, #20]
    2dbe:	add.w	r7, r7, r7, lsl #1
    2dc2:	ldr.w	r2, [r9, #16]
    2dc6:	add.w	r4, r4, r7, lsl #3
    2dca:	subs	r0, r3, r2
    2dcc:	add.w	r4, r9, r4, lsl #2
    2dd0:	adds	r0, #2
    2dd2:	bl	b07c <random(unsigned long)>
    2dd6:	ldr.w	r3, [r9, #16]
    2dda:	subs	r3, #1
    2ddc:	add	r0, r3
    2dde:	str	r0, [r4, #28]
    2de0:	b.n	2d98 <setup+0x15d8>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2de2:	ldr	r3, [r5, #20]
    2de4:	ldr	r0, [r5, #16]
    2de6:	subs	r0, r3, r0
    2de8:	adds	r0, #2
    2dea:	bl	b07c <random(unsigned long)>
    2dee:	ldr	r3, [r5, #16]
    2df0:	subs	r3, #1
    2df2:	add	r0, r3
    2df4:	str.w	r0, [r9, #28]
    2df8:	b.n	28c6 <setup+0x1106>
    2dfa:	ldr	r3, [r5, #20]
    2dfc:	ldr	r0, [r5, #16]
    2dfe:	subs	r0, r3, r0
    2e00:	adds	r0, #2
    2e02:	bl	b07c <random(unsigned long)>
    2e06:	ldr	r3, [r5, #16]
    2e08:	subs	r3, #1
    2e0a:	add	r0, r3
    2e0c:	str.w	r0, [sl, #28]
    2e10:	b.w	1aea <setup+0x32a>
    2e14:	ldr	r3, [r5, #20]
    2e16:	ldr	r0, [r5, #16]
    2e18:	subs	r0, r3, r0
    2e1a:	adds	r0, #2
    2e1c:	bl	b07c <random(unsigned long)>
    2e20:	ldr	r3, [r5, #16]
    2e22:	subs	r3, #1
    2e24:	add	r0, r3
    2e26:	str.w	r0, [sl, #28]
    2e2a:	b.w	1cf0 <setup+0x530>
    2e2e:	ldr	r3, [r5, #20]
    2e30:	ldr	r0, [r5, #16]
    2e32:	subs	r0, r3, r0
    2e34:	adds	r0, #2
    2e36:	bl	b07c <random(unsigned long)>
    2e3a:	ldr	r3, [r5, #16]
    2e3c:	subs	r3, #1
    2e3e:	add	r0, r3
    2e40:	str.w	r0, [r9, #28]
    2e44:	b.w	2056 <setup+0x896>
    2e48:	ldr	r3, [r5, #20]
    2e4a:	ldr	r0, [r5, #16]
    2e4c:	subs	r0, r3, r0
    2e4e:	adds	r0, #2
    2e50:	bl	b07c <random(unsigned long)>
    2e54:	ldr	r3, [r5, #16]
    2e56:	subs	r3, #1
    2e58:	add	r0, r3
    2e5a:	str.w	r0, [r9, #28]
    2e5e:	b.n	27a8 <setup+0xfe8>
    2e60:	ldr	r3, [r5, #20]
    2e62:	ldr	r0, [r5, #16]
    2e64:	subs	r0, r3, r0
    2e66:	adds	r0, #2
    2e68:	bl	b07c <random(unsigned long)>
    2e6c:	ldr	r3, [r5, #16]
    2e6e:	subs	r3, #1
    2e70:	add	r0, r3
    2e72:	str.w	r0, [sl, #28]
    2e76:	b.w	2662 <setup+0xea2>
    2e7a:	ldr	r3, [r5, #20]
    2e7c:	ldr	r0, [r5, #16]
    2e7e:	subs	r0, r3, r0
    2e80:	adds	r0, #2
    2e82:	bl	b07c <random(unsigned long)>
    2e86:	ldr	r3, [r5, #16]
    2e88:	subs	r3, #1
    2e8a:	add	r0, r3
    2e8c:	str.w	r0, [sl, #28]
    2e90:	b.w	2544 <setup+0xd84>
    2e94:	ldr	r3, [r5, #20]
    2e96:	ldr	r0, [r5, #16]
    2e98:	subs	r0, r3, r0
    2e9a:	adds	r0, #2
    2e9c:	bl	b07c <random(unsigned long)>
    2ea0:	ldr	r3, [r5, #16]
    2ea2:	subs	r3, #1
    2ea4:	add	r0, r3
    2ea6:	str.w	r0, [r9, #28]
    2eaa:	b.w	22b6 <setup+0xaf6>
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
      if (rand){
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2eae:	ldr	r3, [r5, #20]
    2eb0:	ldr	r2, [r5, #16]
    2eb2:	subs	r0, r3, r2
    2eb4:	adds	r0, #2
    2eb6:	bl	b07c <random(unsigned long)>
    2eba:	ldr	r3, [r5, #16]
    2ebc:	subs	r3, #1
    2ebe:	add	r0, r3
    2ec0:	str	r0, [r4, #0]
    2ec2:	b.w	1b34 <setup+0x374>
    2ec6:	ldr	r3, [r5, #20]
    2ec8:	ldr	r2, [r5, #16]
    2eca:	subs	r0, r3, r2
    2ecc:	adds	r0, #2
    2ece:	bl	b07c <random(unsigned long)>
    2ed2:	ldr	r3, [r5, #16]
    2ed4:	subs	r3, #1
    2ed6:	add	r0, r3
    2ed8:	str	r0, [r6, #0]
    2eda:	b.w	1d94 <setup+0x5d4>
    2ede:	ldr	r3, [r5, #20]
    2ee0:	ldr	r2, [r5, #16]
    2ee2:	subs	r0, r3, r2
    2ee4:	adds	r0, #2
    2ee6:	bl	b07c <random(unsigned long)>
    2eea:	ldr	r3, [r5, #16]
    2eec:	subs	r3, #1
    2eee:	add	r0, r3
    2ef0:	str	r0, [r6, #0]
    2ef2:	b.w	20f8 <setup+0x938>
    2ef6:	ldr	r3, [r5, #20]
    2ef8:	ldr	r2, [r5, #16]
    2efa:	subs	r0, r3, r2
    2efc:	adds	r0, #2
    2efe:	bl	b07c <random(unsigned long)>
    2f02:	ldr	r3, [r5, #16]
    2f04:	subs	r3, #1
    2f06:	add	r0, r3
    2f08:	str	r0, [r4, #0]
    2f0a:	b.w	235a <setup+0xb9a>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    2f0e:	bl	b6f8 <sqrt>
    2f12:	vmov.f64	d7, d0
    2f16:	b.w	270a <setup+0xf4a>
    2f1a:	bl	b6f8 <sqrt>
    2f1e:	vmov.f64	d7, d0
    2f22:	b.w	24aa <setup+0xcea>
    2f26:	bl	b6f8 <sqrt>
    2f2a:	vmov.f64	d7, d0
    2f2e:	b.n	282a <setup+0x106a>
    2f30:	bl	b6f8 <sqrt>
    2f34:	vmov.f64	d7, d0
    2f38:	b.w	19fa <setup+0x23a>
    2f3c:	bl	b6f8 <sqrt>
    2f40:	vmov.f64	d7, d0
    2f44:	b.w	1fbc <setup+0x7fc>
    2f48:	bl	b6f8 <sqrt>
    2f4c:	vmov.f64	d7, d0
    2f50:	b.w	1c56 <setup+0x496>
    2f54:	bl	b6f8 <sqrt>
    2f58:	vmov.f64	d7, d0
    2f5c:	b.w	221a <setup+0xa5a>
    2f60:	bl	b6f8 <sqrt>
    2f64:	vmov.f64	d7, d0
    2f68:	b.w	25c6 <setup+0xe06>
    2f6c:	movs	r0, r0
	...

00002f70 <loop>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2f70:	ldr	r3, [pc, #460]	; (3140 <loop+0x1d0>)
}



void loop() {
    2f72:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f76:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f78:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2f7a:	ldr	r1, [r3, #40]	; 0x28
    2f7c:	vpush	{d8}
    2f80:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f82:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2f84:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f86:	ldr	r6, [pc, #440]	; (3140 <loop+0x1d0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2f88:	cmp	r3, r1
    2f8a:	it	eq
    2f8c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f8e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2f90:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2f92:	ite	eq
    2f94:	moveq	r5, #1
    2f96:	movne	r5, #0
    2f98:	cmp	r5, #0
    2f9a:	beq.n	2f82 <loop+0x12>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    2f9c:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2f9e:	ldr	r5, [pc, #420]	; (3144 <loop+0x1d4>)
    2fa0:	orr.w	r1, r1, r2, lsl #27
    2fa4:	ldr	r3, [r5, #0]
    2fa6:	vmov	s15, r1
    2faa:	vldr	d5, [pc, #396]	; 3138 <loop+0x1c8>
    2fae:	vcvt.f64.u32	d7, s15
    2fb2:	vdiv.f64	d6, d7, d5
    2fb6:	vcvt.u32.f64	s12, d6
    2fba:	vmov	r2, s12
    2fbe:	subs	r3, r2, r3
    2fc0:	cmp.w	r3, #800	; 0x320
    2fc4:	bls.w	3108 <loop+0x198>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2fc8:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fca:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2fcc:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fce:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2fd0:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2fd2:	cmp	r3, r1
    2fd4:	it	eq
    2fd6:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fd8:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2fda:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2fdc:	ite	eq
    2fde:	moveq	r6, #1
    2fe0:	movne	r6, #0
    2fe2:	cmp	r6, #0
    2fe4:	beq.n	2fce <loop+0x5e>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2fe6:	lsrs	r3, r3, #5
    sinceBeam = 0;
    newBeam(&synapse_B, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    2fe8:	movs	r0, #0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    2fea:	mov.w	r9, #360	; 0x168
    2fee:	movs	r1, #2
    2ff0:	orr.w	r3, r3, r2, lsl #27
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    2ff4:	mov	r7, r0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    2ff6:	ldr.w	r8, [pc, #352]	; 3158 <loop+0x1e8>
	HSB_color.s = s;
	HSB_color.b = b;
    2ffa:	mov.w	sl, #100	; 0x64
    2ffe:	vmov	s15, r3
	RGB_updated = false;
	HSB_updated = true;
    3002:	mov.w	fp, #1
    3006:	add	r6, sp, #32
    3008:	add	r4, sp, #24
    300a:	vcvt.f64.u32	d7, s15
    300e:	vldr	d5, [pc, #296]	; 3138 <loop+0x1c8>
    3012:	vdiv.f64	d6, d7, d5
    3016:	vcvt.u32.f64	s12, d6
    301a:	vstr	s12, [r5]
    301e:	bl	b084 <random(long, long)>
    3022:	mov	r1, r9
    3024:	mov	r5, r0
    3026:	mov	r0, r7
    3028:	bl	b084 <random(long, long)>
    302c:	movs	r1, #101	; 0x65
    302e:	str	r0, [sp, #20]
    3030:	movs	r0, #80	; 0x50
    3032:	bl	b084 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    3036:	ldr	r3, [sp, #20]
	HSB_color.s = s;
    3038:	strb.w	r0, [sp, #32]
    303c:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    303e:	add.w	r2, r3, #720	; 0x2d0
    3042:	movs	r0, #8
	HSB_color.s = s;
	HSB_color.b = b;
    3044:	strb.w	sl, [sp, #33]	; 0x21
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    3048:	lsrs	r3, r2, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    304a:	strb.w	r7, [sp, #36]	; 0x24
	HSB_updated = true;
    304e:	strb.w	fp, [sp, #37]	; 0x25
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    3052:	umull	lr, r3, r8, r3
    3056:	lsrs	r3, r3, #2
    3058:	mls	r3, r9, r3, r2
    305c:	str	r3, [sp, #28]
    305e:	bl	b084 <random(long, long)>
    3062:	movw	r1, #6000	; 0x1770
    3066:	vmov	s16, r0
    306a:	mov.w	r0, #2000	; 0x7d0
    306e:	bl	b084 <random(long, long)>
    3072:	str	r0, [sp, #8]
    3074:	vcvt.f32.s32	s0, s16
    3078:	ldmia.w	r6, {r0, r1}
    307c:	ldmia.w	r4, {r2, r3}
    3080:	stmia.w	sp, {r0, r1}
    3084:	subs	r1, r5, r7
    3086:	ldr	r0, [pc, #192]	; (3148 <loop+0x1d8>)
    3088:	it	ne
    308a:	movne	r1, #1
    308c:	bl	130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_A, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    3090:	movs	r1, #2
    3092:	mov	r0, r7
    3094:	bl	b084 <random(long, long)>
    3098:	mov	r1, r9
    309a:	mov	r5, r0
    309c:	mov	r0, r7
    309e:	bl	b084 <random(long, long)>
    30a2:	movs	r1, #101	; 0x65
    30a4:	str	r0, [sp, #20]
    30a6:	movs	r0, #80	; 0x50
    30a8:	bl	b084 <random(long, long)>
    30ac:	ldr	r3, [sp, #20]
	HSB_color.s = s;
    30ae:	strb.w	r0, [sp, #32]
    30b2:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    30b4:	add.w	r3, r3, #720	; 0x2d0
    30b8:	movs	r0, #8
	HSB_color.s = s;
	HSB_color.b = b;
    30ba:	strb.w	sl, [sp, #33]	; 0x21
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    30be:	lsrs	r2, r3, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    30c0:	strb.w	r7, [sp, #36]	; 0x24
	HSB_updated = true;
    30c4:	strb.w	fp, [sp, #37]	; 0x25
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    30c8:	umull	r2, r8, r8, r2
    30cc:	mov.w	r8, r8, lsr #2
    30d0:	mls	r3, r9, r8, r3
    30d4:	str	r3, [sp, #28]
    30d6:	bl	b084 <random(long, long)>
    30da:	movw	r1, #6000	; 0x1770
    30de:	vmov	s16, r0
    30e2:	mov.w	r0, #2000	; 0x7d0
    30e6:	bl	b084 <random(long, long)>
    30ea:	str	r0, [sp, #8]
    30ec:	vcvt.f32.s32	s0, s16
    30f0:	ldmia.w	r6, {r0, r1}
    30f4:	ldmia.w	r4, {r2, r3}
    30f8:	stmia.w	sp, {r0, r1}
    30fc:	subs	r1, r5, r7
    30fe:	ldr	r0, [pc, #76]	; (314c <loop+0x1dc>)
    3100:	it	ne
    3102:	movne	r1, #1
    3104:	bl	130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
	}


	
	void iterate_animation() {
		if (newFrameReady) return;
    3108:	ldr	r0, [pc, #68]	; (3150 <loop+0x1e0>)
    310a:	ldrb.w	r3, [r0, #148]	; 0x94
    310e:	cbz	r3, 312e <loop+0x1be>
    3110:	ldr	r0, [pc, #64]	; (3154 <loop+0x1e4>)
    3112:	ldrb.w	r3, [r0, #148]	; 0x94
    3116:	cbnz	r3, 311c <loop+0x1ac>
    3118:	bl	ed8 <Screen::iterate_animation() [clone .part.13]>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    311c:	bl	448 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    3120:	add	sp, #44	; 0x2c
    3122:	vpop	{d8}
    3126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    312a:	b.w	9e0 <updateScreensFade()>
    312e:	bl	ed8 <Screen::iterate_animation() [clone .part.13]>
    3132:	b.n	3110 <loop+0x1a0>
    3134:	nop.w
    3138:	.word	0xd2f1a9fc
    313c:	.word	0x3ff0624d
    3140:	.word	0x400d4000
    3144:	.word	0x2000157c
    3148:	.word	0x20006eec
    314c:	.word	0x20006ed8
    3150:	.word	0x200039f4
    3154:	.word	0x20003aa4
    3158:	.word	0x16c16c17
    315c:	.word	0x00000000

00003160 <_GLOBAL__sub_I_low_threshold>:

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    3160:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
      _b = b;
    3164:	mvn.w	r0, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3168:	ldr	r5, [pc, #1004]	; (3558 <_GLOBAL__sub_I_low_threshold+0x3f8>)
    316a:	movs	r3, #0
    316c:	mov.w	r9, #139	; 0x8b
      _s = s;
      _b = b;
    3170:	strb	r0, [r5, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3172:	mov.w	r0, #106	; 0x6a
    3176:	strb	r3, [r5, #0]
    3178:	movs	r6, #131	; 0x83
    317a:	strb	r0, [r5, #3]
    317c:	movs	r2, #130	; 0x82
    317e:	strb	r0, [r5, #18]
      _s = s;
    3180:	mov.w	r0, #2
    3184:	strb	r3, [r5, #1]
      _b = b;
    3186:	mov.w	lr, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    318a:	strb	r0, [r5, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    318c:	mov.w	r8, #138	; 0x8a
      _s = s;
    3190:	strb	r0, [r5, #19]
      _b = b;
    3192:	mvn.w	r0, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3196:	strb	r3, [r5, #9]
      _s = s;
    3198:	mvn.w	ip, #5
      _b = b;
    319c:	strb	r0, [r5, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    319e:	mov.w	r0, #85	; 0x55
      _s = s;
    31a2:	strb	r3, [r5, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31a4:	movs	r1, #132	; 0x84
    31a6:	strb	r0, [r5, #6]
      _s = s;
    31a8:	mov.w	r0, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31ac:	strb	r3, [r5, #12]
      _s = s;
    31ae:	movs	r7, #142	; 0x8e
    31b0:	strb	r0, [r5, #7]
      _b = b;
    31b2:	mvn.w	r0, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31b6:	strb	r3, [r5, #13]
      _b = b;
    31b8:	mvn.w	sl, #24
    31bc:	strb	r0, [r5, #8]
    31be:	mvn.w	r0, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31c2:	strb	r3, [r5, #15]
    31c4:	mov.w	fp, #140	; 0x8c
      _s = s;
      _b = b;
    31c8:	strb	r0, [r5, #11]
    31ca:	mvn.w	r0, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31ce:	strb	r3, [r5, #16]
    31d0:	sub	sp, #20
      _b = b;
    31d2:	strb	r0, [r5, #14]
    31d4:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31d8:	strb.w	r9, [r5, #30]
      _s = s;
      _b = b;
    31dc:	strb	r0, [r5, #17]
    31de:	mvn.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e2:	ldr	r4, [pc, #888]	; (355c <_GLOBAL__sub_I_low_threshold+0x3fc>)
      _s = s;
      _b = b;
    31e4:	strb	r0, [r5, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e6:	mov.w	r0, #109	; 0x6d
    31ea:	strb	r0, [r5, #21]
      _s = s;
    31ec:	mov.w	r0, #10
    31f0:	strb	r0, [r5, #22]
      _b = b;
    31f2:	mvn.w	r0, #79	; 0x4f
    31f6:	strb	r0, [r5, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31f8:	mov.w	r0, #114	; 0x72
    31fc:	strb	r0, [r5, #24]
      _s = s;
    31fe:	mov.w	r0, #20
    3202:	strb	r0, [r5, #25]
      _b = b;
    3204:	mvn.w	r0, #92	; 0x5c
    3208:	strb	r0, [r5, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    320a:	mov.w	r0, #115	; 0x73
    320e:	strb	r0, [r5, #27]
      _s = s;
    3210:	mov.w	r0, #26
    3214:	strb	r0, [r5, #28]
      _b = b;
    3216:	mvn.w	r0, #119	; 0x77
    321a:	strb	r0, [r5, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    321c:	mov.w	r0, #48	; 0x30
    3220:	strb	r0, [r5, #31]
      _b = b;
    3222:	mov.w	r0, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3226:	strb.w	r3, [r5, #57]	; 0x39
      _s = s;
      _b = b;
    322a:	strb.w	r0, [r5, #32]
    322e:	mvn.w	r0, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3232:	strb.w	r3, [r5, #58]	; 0x3a
      _b = b;
    3236:	strb.w	r0, [r5, #50]	; 0x32
    323a:	mvn.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    323e:	strb.w	r3, [r5, #60]	; 0x3c
      _s = s;
      _b = b;
    3242:	strb.w	r0, [r5, #53]	; 0x35
    3246:	mvn.w	r0, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    324a:	strb.w	r3, [r5, #61]	; 0x3d
      _b = b;
    324e:	strb.w	r0, [r5, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3252:	mvn.w	r0, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3256:	strb.w	r3, [r5, #63]	; 0x3f
      _s = s;
    325a:	strb.w	r0, [r5, #34]	; 0x22
      _b = b;
    325e:	mov.w	r0, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3262:	strb.w	r3, [r5, #64]	; 0x40
      _b = b;
    3266:	strb.w	r0, [r5, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    326a:	mvn.w	r0, #121	; 0x79
    326e:	strb.w	r2, [r5, #39]	; 0x27
    3272:	strb.w	r0, [r5, #36]	; 0x24
      _s = s;
    3276:	mvn.w	r0, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    327a:	strb.w	r2, [r5, #45]	; 0x2d
      _s = s;
    327e:	strb.w	r0, [r5, #37]	; 0x25
      _b = b;
    3282:	mov.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3286:	strb.w	r2, [r5, #48]	; 0x30
      _s = s;
      _b = b;
    328a:	strb.w	r0, [r5, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    328e:	mov.w	r0, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3292:	strb.w	r6, [r5, #42]	; 0x2a
      _s = s;
    3296:	strb.w	r0, [r5, #40]	; 0x28
      _b = b;
    329a:	mvn.w	r0, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    329e:	strb.w	r8, [r5, #33]	; 0x21
      _s = s;
      _b = b;
    32a2:	strb.w	r0, [r5, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32a6:	mvn.w	r0, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32aa:	strb.w	r8, [r5, #54]	; 0x36
      _s = s;
    32ae:	strb.w	r0, [r5, #43]	; 0x2b
      _b = b;
    32b2:	mvn.w	r0, #45	; 0x2d
    32b6:	strb.w	r0, [r5, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32ba:	mvn.w	r0, #11
    32be:	strb.w	r0, [r5, #46]	; 0x2e
      _b = b;
    32c2:	mvn.w	r0, #33	; 0x21
    32c6:	strb.w	r0, [r5, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32ca:	mvn.w	r0, #96	; 0x60
    32ce:	strb.w	r0, [r5, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32d2:	mvn.w	r0, #120	; 0x78
    32d6:	strb.w	r0, [r5, #51]	; 0x33
      _s = s;
    32da:	mov.w	r0, #51	; 0x33
    32de:	strb.w	r0, [r5, #52]	; 0x34
    32e2:	mov.w	r0, #8
    32e6:	strb.w	r0, [r5, #55]	; 0x37
      _b = b;
    32ea:	mvn.w	r0, #9
    32ee:	strb.w	r0, [r5, #56]	; 0x38
    32f2:	mvn.w	r0, #4
    32f6:	strb.w	lr, [r5, #62]	; 0x3e
    32fa:	strb.w	r0, [r5, #74]	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32fe:	mov.w	r0, #5
      _b = b;
    3302:	strb.w	lr, [r5, #65]	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3306:	strb.w	r0, [r5, #76]	; 0x4c
      _b = b;
    330a:	mov.w	r0, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    330e:	strb.w	r3, [r5, #66]	; 0x42
      _s = s;
      _b = b;
    3312:	strb.w	r0, [r5, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3316:	mov.w	r0, #60	; 0x3c
      _s = s;
    331a:	strb.w	r3, [r5, #67]	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    331e:	strb.w	r0, [r5, #90]	; 0x5a
      _s = s;
    3322:	mvn.w	r0, #39	; 0x27
      _b = b;
    3326:	strb.w	lr, [r5, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    332a:	strb.w	r0, [r5, #97]	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    332e:	mov.w	r0, #95	; 0x5f
    3332:	strb.w	r3, [r5, #69]	; 0x45
    3336:	strb.w	r0, [r5, #75]	; 0x4b
      _s = s;
      _b = b;
    333a:	mvn.w	r0, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    333e:	strb.w	r3, [r5, #70]	; 0x46
      _b = b;
    3342:	strb.w	r0, [r5, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3346:	mvn.w	r0, #118	; 0x76
      _b = b;
    334a:	strb.w	lr, [r5, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    334e:	strb.w	r0, [r5, #79]	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3352:	mov.w	r0, #94	; 0x5e
    3356:	strb.w	r3, [r5, #72]	; 0x48
    335a:	strb.w	r0, [r5, #81]	; 0x51
      _s = s;
    335e:	mov.w	r0, #11
    3362:	strb.w	r3, [r5, #73]	; 0x49
    3366:	strb.w	r0, [r5, #82]	; 0x52
      _b = b;
    336a:	mvn.w	r0, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    336e:	strb.w	r9, [r5, #78]	; 0x4e
      _s = s;
      _b = b;
    3372:	strb.w	r0, [r5, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3376:	mov.w	r0, #96	; 0x60
    337a:	strb.w	r0, [r5, #84]	; 0x54
      _s = s;
    337e:	mov.w	r0, #14
    3382:	strb.w	r0, [r5, #85]	; 0x55
      _b = b;
    3386:	mvn.w	r0, #58	; 0x3a
    338a:	strb.w	r0, [r5, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    338e:	mov.w	r0, #46	; 0x2e
    3392:	strb.w	r0, [r5, #87]	; 0x57
      _s = s;
    3396:	mov.w	r0, #37	; 0x25
    339a:	strb.w	r0, [r5, #88]	; 0x58
      _b = b;
    339e:	mvn.w	r0, #99	; 0x63
    33a2:	strb.w	r0, [r5, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33a6:	mov.w	r0, #121	; 0x79
    33aa:	strb.w	r0, [r5, #91]	; 0x5b
      _b = b;
    33ae:	mov.w	r0, #113	; 0x71
    33b2:	strb.w	r0, [r5, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33b6:	mov.w	r0, #105	; 0x69
    33ba:	strb.w	r0, [r5, #93]	; 0x5d
      _s = s;
    33be:	mvn.w	r0, #69	; 0x45
    33c2:	strb.w	r0, [r5, #94]	; 0x5e
      _b = b;
    33c6:	mov.w	r0, #101	; 0x65
    33ca:	strb.w	r0, [r5, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33ce:	mov.w	r0, #118	; 0x76
    33d2:	strb.w	r0, [r5, #96]	; 0x60
      _s = s;
      _b = b;
    33d6:	mov.w	r0, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33da:	strb.w	ip, [r5, #106]	; 0x6a
      _b = b;
    33de:	mvn.w	ip, #88	; 0x58
    33e2:	strb.w	r0, [r5, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e6:	mvn.w	r0, #43	; 0x2b
      _s = s;
      _b = b;
    33ea:	strb.w	ip, [r5, #107]	; 0x6b
    33ee:	mvn.w	ip, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33f2:	strb.w	r0, [r5, #99]	; 0x63
      _s = s;
    33f6:	mov.w	r0, #95	; 0x5f
      _b = b;
    33fa:	strb.w	ip, [r5, #110]	; 0x6e
    33fe:	mvn.w	ip, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3402:	strb.w	r0, [r5, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3406:	mvn.w	r0, #121	; 0x79
      _s = s;
      _b = b;
    340a:	strb.w	ip, [r5, #113]	; 0x71
    340e:	mvn.w	ip, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3412:	strb.w	r0, [r5, #105]	; 0x69
    3416:	mvn.w	r0, #122	; 0x7a
      _s = s;
      _b = b;
    341a:	strb.w	ip, [r5, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    341e:	mvn.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3422:	strb.w	r0, [r5, #111]	; 0x6f
      _s = s;
    3426:	mov.w	r0, #106	; 0x6a
    342a:	strb.w	ip, [r5, #121]	; 0x79
    342e:	strb.w	r0, [r5, #112]	; 0x70
    3432:	mvn.w	r0, #111	; 0x6f
      _b = b;
    3436:	strb.w	ip, [r5, #125]	; 0x7d
    343a:	mvn.w	ip, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    343e:	strb.w	r0, [r5, #115]	; 0x73
      _b = b;
    3442:	mvn.w	r0, #34	; 0x22
    3446:	strb.w	ip, [r5, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    344a:	mvn.w	ip, #59	; 0x3b
      _b = b;
    344e:	strb.w	r0, [r5, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3452:	mvn.w	r0, #16
    3456:	strb.w	ip, [r5, #124]	; 0x7c
    345a:	mov.w	ip, #87	; 0x57
    345e:	strb.w	r0, [r5, #118]	; 0x76
      _b = b;
    3462:	mov.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3466:	strb.w	ip, [r5, #127]	; 0x7f
      _b = b;
    346a:	mvn.w	ip, #52	; 0x34
    346e:	strb.w	r0, [r5, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3472:	mvn.w	r0, #104	; 0x68
      _b = b;
    3476:	strb.w	ip, [r5, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    347a:	mvn.w	ip, #107	; 0x6b
      _s = s;
    347e:	strb.w	r0, [r5, #103]	; 0x67
      _b = b;
    3482:	mov.w	r0, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3486:	strb.w	ip, [r5, #129]	; 0x81
      _s = s;
    348a:	mov.w	ip, #4
    348e:	strb.w	lr, [r5, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3492:	strb.w	r6, [r5, #114]	; 0x72
    3496:	strb.w	r2, [r5, #117]	; 0x75
    349a:	strb.w	r2, [r5, #120]	; 0x78
    349e:	strb.w	r2, [r5, #123]	; 0x7b
    34a2:	strb.w	r6, [r5, #126]	; 0x7e
      _s = s;
      _b = b;
    34a6:	strb.w	r0, [r5, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34aa:	movs	r0, #143	; 0x8f
    34ac:	strb.w	r1, [r5, #108]	; 0x6c
    34b0:	strb.w	r9, [r5, #102]	; 0x66
      _s = s;
    34b4:	strb.w	ip, [r5, #130]	; 0x82
      _b = b;
    34b8:	mvn.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34bc:	strb.w	r3, [r5, #132]	; 0x84
      _s = s;
      _b = b;
    34c0:	strb.w	ip, [r5, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34c4:	mov.w	ip, #113	; 0x71
      _s = s;
    34c8:	strb.w	r3, [r5, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34cc:	strb.w	ip, [r5, #144]	; 0x90
      _s = s;
      _b = b;
    34d0:	mvn.w	ip, #5
    34d4:	strb.w	lr, [r5, #134]	; 0x86
    34d8:	strb.w	ip, [r5, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34dc:	mov.w	ip, #51	; 0x33
    34e0:	strb.w	r3, [r5, #135]	; 0x87
    34e4:	strb.w	ip, [r5, #147]	; 0x93
      _s = s;
    34e8:	mov.w	ip, #10
    34ec:	strb.w	r3, [r5, #136]	; 0x88
    34f0:	strb.w	ip, [r5, #148]	; 0x94
      _b = b;
    34f4:	mvn.w	ip, #36	; 0x24
    34f8:	strb.w	lr, [r5, #137]	; 0x89
    34fc:	strb.w	ip, [r5, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3500:	mov.w	ip, #121	; 0x79
    3504:	strb.w	r3, [r5, #138]	; 0x8a
    3508:	strb.w	ip, [r5, #150]	; 0x96
      _s = s;
    350c:	mov.w	ip, #60	; 0x3c
    3510:	strb.w	r3, [r5, #139]	; 0x8b
    3514:	strb.w	ip, [r5, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3518:	mov.w	ip, #32
    351c:	strb.w	r3, [r5, #141]	; 0x8d
    3520:	strb.w	ip, [r5, #153]	; 0x99
      _s = s;
    3524:	mvn.w	ip, #67	; 0x43
    3528:	strb.w	r3, [r5, #142]	; 0x8e
    352c:	strb.w	ip, [r5, #160]	; 0xa0
      _b = b;
    3530:	mvn.w	ip, #2
    3534:	strb.w	ip, [r5, #140]	; 0x8c
    3538:	strb.w	ip, [r5, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    353c:	mov.w	ip, #3
    3540:	strb.w	ip, [r5, #145]	; 0x91
      _b = b;
    3544:	mov.w	ip, #123	; 0x7b
    3548:	strb.w	ip, [r5, #152]	; 0x98
    354c:	strb.w	ip, [r5, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3550:	mvn.w	ip, #82	; 0x52
    3554:	b.n	3560 <_GLOBAL__sub_I_low_threshold+0x400>
    3556:	nop
    3558:	.word	0x20006158
    355c:	.word	0x20006818
    3560:	strb.w	ip, [r5, #154]	; 0x9a
      _b = b;
    3564:	mvn.w	ip, #105	; 0x69
    3568:	strb.w	ip, [r5, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    356c:	mov.w	ip, #54	; 0x36
    3570:	strb.w	ip, [r5, #156]	; 0x9c
      _s = s;
    3574:	mov.w	ip, #97	; 0x61
    3578:	strb.w	ip, [r5, #157]	; 0x9d
      _b = b;
    357c:	mov.w	ip, #120	; 0x78
    3580:	strb.w	ip, [r5, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3584:	mov.w	ip, #25
    3588:	strb.w	ip, [r5, #159]	; 0x9f
    358c:	mov.w	ip, #28
    3590:	strb.w	ip, [r5, #162]	; 0xa2
      _s = s;
    3594:	mvn.w	ip, #93	; 0x5d
    3598:	strb.w	ip, [r5, #163]	; 0xa3
      _b = b;
    359c:	mov.w	ip, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a0:	strb.w	r1, [r5, #183]	; 0xb7
      _s = s;
      _b = b;
    35a4:	strb.w	ip, [r5, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a8:	mov.w	ip, #97	; 0x61
    35ac:	strb.w	r2, [r5, #186]	; 0xba
    35b0:	strb.w	ip, [r5, #165]	; 0xa5
      _s = s;
      _b = b;
    35b4:	mvn.w	ip, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35b8:	strb.w	r2, [r5, #189]	; 0xbd
      _s = s;
      _b = b;
    35bc:	strb.w	ip, [r5, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35c0:	mov.w	ip, #121	; 0x79
    35c4:	strb.w	r2, [r5, #192]	; 0xc0
    35c8:	strb.w	ip, [r5, #168]	; 0xa8
      _s = s;
    35cc:	mvn.w	ip, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d0:	strb.w	r0, [r5, #174]	; 0xae
      _s = s;
    35d4:	strb.w	ip, [r5, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d8:	mvn.w	ip, #39	; 0x27
      _s = s;
    35dc:	strb.w	r8, [r5, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35e0:	strb.w	ip, [r5, #171]	; 0xab
      _s = s;
    35e4:	mvn.w	ip, #104	; 0x68
    35e8:	strb.w	ip, [r5, #175]	; 0xaf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35ec:	mvn.w	ip, #118	; 0x76
    35f0:	strb.w	ip, [r5, #177]	; 0xb1
      _s = s;
    35f4:	mvn.w	ip, #32
    35f8:	strb.w	ip, [r5, #178]	; 0xb2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35fc:	mvn.w	ip, #119	; 0x77
    3600:	strb.w	ip, [r5, #180]	; 0xb4
      _s = s;
    3604:	mvn.w	ip, #22
    3608:	strb.w	ip, [r5, #181]	; 0xb5
      _b = b;
    360c:	mov.w	ip, #103	; 0x67
    3610:	strb.w	ip, [r5, #185]	; 0xb9
    3614:	mvn.w	ip, #36	; 0x24
    3618:	strb.w	ip, [r5, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    361c:	mvn.w	ip, #65	; 0x41
    3620:	strb.w	ip, [r5, #190]	; 0xbe
      _b = b;
    3624:	mvn.w	ip, #32
    3628:	strb.w	ip, [r5, #191]	; 0xbf
    362c:	mvn.w	ip, #28
    3630:	strb.w	ip, [r5, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3634:	mvn.w	ip, #122	; 0x7a
    3638:	strb.w	ip, [r5, #195]	; 0xc3
      _s = s;
    363c:	mvn.w	ip, #81	; 0x51
    3640:	strb.w	ip, [r5, #166]	; 0xa6
      _b = b;
    3644:	mvn.w	ip, #101	; 0x65
    3648:	strb.w	ip, [r5, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    364c:	mov.w	ip, #93	; 0x5d
    3650:	strb.w	ip, [r5, #172]	; 0xac
      _b = b;
    3654:	mov.w	ip, #30
    3658:	strb.w	ip, [r5, #173]	; 0xad
    365c:	mov.w	ip, #59	; 0x3b
    3660:	strb.w	ip, [r5, #176]	; 0xb0
    3664:	strb.w	ip, [r5, #182]	; 0xb6
    3668:	mov.w	ip, #57	; 0x39
    366c:	strb.w	ip, [r5, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3670:	strb.w	ip, [r5, #187]	; 0xbb
    3674:	mvn.w	ip, #51	; 0x33
    3678:	strb.w	ip, [r5, #193]	; 0xc1
    367c:	mov.w	ip, #90	; 0x5a
    3680:	strb.w	ip, [r5, #196]	; 0xc4
      _b = b;
    3684:	mvn.w	ip, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3688:	strb.w	r0, [r5, #198]	; 0xc6
      _s = s;
      _b = b;
    368c:	strb.w	ip, [r5, #197]	; 0xc5
    3690:	mvn.w	ip, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3694:	strb.w	r3, [r5, #210]	; 0xd2
      _s = s;
      _b = b;
    3698:	strb.w	ip, [r5, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    369c:	mvn.w	ip, #96	; 0x60
      _s = s;
    36a0:	strb.w	r3, [r5, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36a4:	strb.w	ip, [r5, #201]	; 0xc9
    36a8:	mvn.w	ip, #105	; 0x69
    36ac:	strb.w	r3, [r5, #213]	; 0xd5
    36b0:	strb.w	ip, [r5, #204]	; 0xcc
      _s = s;
    36b4:	mov.w	ip, #26
    36b8:	strb.w	r3, [r5, #214]	; 0xd6
    36bc:	strb.w	ip, [r5, #205]	; 0xcd
      _b = b;
    36c0:	mvn.w	ip, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36c4:	strb.w	r7, [r5, #226]	; 0xe2
      _b = b;
    36c8:	strb.w	ip, [r5, #209]	; 0xd1
    36cc:	mvn.w	ip, #2
    36d0:	strb.w	ip, [r5, #212]	; 0xd4
    36d4:	strb.w	ip, [r5, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36d8:	mov.w	ip, #106	; 0x6a
    36dc:	strb.w	ip, [r5, #216]	; 0xd8
      _s = s;
      _b = b;
    36e0:	mvn.w	ip, #29
    36e4:	strb.w	ip, [r5, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36e8:	mvn.w	ip, #82	; 0x52
    36ec:	strb.w	ip, [r5, #223]	; 0xdf
      _b = b;
    36f0:	mvn.w	ip, #36	; 0x24
    36f4:	strb.w	ip, [r5, #224]	; 0xe0
    36f8:	mvn.w	ip, #15
    36fc:	strb.w	ip, [r5, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3700:	mvn.w	ip, #62	; 0x3e
    3704:	strb.w	ip, [r5, #229]	; 0xe5
    3708:	mov.w	ip, #44	; 0x2c
    370c:	strb.w	ip, [r5, #199]	; 0xc7
    3710:	mov.w	ip, #35	; 0x23
    3714:	strb.w	ip, [r5, #202]	; 0xca
      _b = b;
    3718:	mvn.w	ip, #74	; 0x4a
    371c:	strb.w	ip, [r5, #203]	; 0xcb
    3720:	mvn.w	ip, #66	; 0x42
    3724:	strb.w	ip, [r5, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3728:	mov.w	ip, #127	; 0x7f
    372c:	strb.w	ip, [r5, #207]	; 0xcf
      _s = s;
    3730:	mov.w	ip, #1
    3734:	strb.w	ip, [r5, #208]	; 0xd0
    3738:	mov.w	ip, #66	; 0x42
    373c:	strb.w	ip, [r5, #217]	; 0xd9
      _b = b;
    3740:	mvn.w	ip, #110	; 0x6e
    3744:	strb.w	ip, [r5, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3748:	mov.w	ip, #102	; 0x66
    374c:	strb.w	ip, [r5, #219]	; 0xdb
      _s = s;
    3750:	mov.w	ip, #72	; 0x48
    3754:	strb.w	ip, [r5, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3758:	mov.w	ip, #31
    375c:	strb.w	ip, [r5, #222]	; 0xde
    3760:	mov.w	ip, #33	; 0x21
    3764:	strb.w	ip, [r5, #225]	; 0xe1
    3768:	mov.w	ip, #29
    376c:	strb.w	ip, [r5, #228]	; 0xe4
      _s = s;
      _b = b;
    3770:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3774:	strb.w	r7, [r5, #235]	; 0xeb
      _b = b;
    3778:	strb.w	ip, [r5, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    377c:	mvn.w	ip, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3780:	strb.w	r2, [r5, #246]	; 0xf6
      _s = s;
    3784:	strb.w	ip, [r5, #232]	; 0xe8
      _b = b;
    3788:	mvn.w	ip, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    378c:	strb.w	r1, [r5, #258]	; 0x102
      _s = s;
      _b = b;
    3790:	strb.w	ip, [r5, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3794:	mov.w	ip, #77	; 0x4d
    3798:	strb.w	r8, [r5, #249]	; 0xf9
    379c:	strb.w	ip, [r5, #237]	; 0xed
      _s = s;
    37a0:	mov.w	ip, #73	; 0x49
    37a4:	strb.w	ip, [r5, #241]	; 0xf1
      _b = b;
    37a8:	mvn.w	ip, #74	; 0x4a
    37ac:	strb.w	ip, [r5, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37b0:	mvn.w	ip, #43	; 0x2b
    37b4:	strb.w	ip, [r5, #243]	; 0xf3
      _s = s;
    37b8:	mov.w	ip, #87	; 0x57
    37bc:	strb.w	ip, [r5, #244]	; 0xf4
      _b = b;
    37c0:	mov.w	ip, #32
    37c4:	strb.w	ip, [r5, #245]	; 0xf5
    37c8:	mov.w	ip, #90	; 0x5a
    37cc:	strb.w	ip, [r5, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37d0:	mvn.w	ip, #120	; 0x78
    37d4:	strb.w	ip, [r5, #252]	; 0xfc
    37d8:	mvn.w	ip, #118	; 0x76
    37dc:	strb.w	ip, [r5, #255]	; 0xff
      _s = s;
    37e0:	mvn.w	ip, #30
    37e4:	strb.w	ip, [r5, #256]	; 0x100
      _b = b;
    37e8:	mov.w	ip, #51	; 0x33
    37ec:	strb.w	ip, [r5, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37f0:	mvn.w	ip, #122	; 0x7a
    37f4:	strb.w	ip, [r5, #261]	; 0x105
      _s = s;
    37f8:	mov.w	ip, #48	; 0x30
    37fc:	strb.w	ip, [r5, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3800:	mov.w	ip, #22
    3804:	strb.w	ip, [r5, #231]	; 0xe7
    3808:	mov.w	ip, #55	; 0x37
    380c:	strb.w	ip, [r5, #234]	; 0xea
      _s = s;
      _b = b;
    3810:	mvn.w	ip, #85	; 0x55
    3814:	strb.w	ip, [r5, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3818:	strb.w	ip, [r5, #238]	; 0xee
      _b = b;
    381c:	mvn.w	ip, #86	; 0x56
    3820:	strb.w	ip, [r5, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3824:	mov.w	ip, #112	; 0x70
    3828:	strb.w	ip, [r5, #240]	; 0xf0
      _s = s;
    382c:	mov.w	ip, #34	; 0x22
    3830:	strb.w	ip, [r5, #247]	; 0xf7
      _b = b;
    3834:	mov.w	ip, #110	; 0x6e
    3838:	strb.w	ip, [r5, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    383c:	mvn.w	ip, #108	; 0x6c
    3840:	strb.w	ip, [r5, #250]	; 0xfa
    3844:	mvn.w	ip, #18
    3848:	strb.w	ip, [r5, #253]	; 0xfd
      _b = b;
    384c:	mov.w	ip, #71	; 0x47
    3850:	strb.w	ip, [r5, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3854:	mov.w	ip, #69	; 0x45
    3858:	strb.w	ip, [r5, #259]	; 0x103
      _b = b;
    385c:	mov.w	ip, #99	; 0x63
    3860:	strb.w	ip, [r5, #260]	; 0x104
    3864:	mvn.w	ip, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3868:	strb.w	r6, [r5, #279]	; 0x117
      _s = s;
      _b = b;
    386c:	strb.w	ip, [r5, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3870:	mvn.w	ip, #119	; 0x77
    3874:	strb.w	r1, [r5, #282]	; 0x11a
    3878:	strb.w	ip, [r5, #264]	; 0x108
      _s = s;
    387c:	mov.w	ip, #55	; 0x37
    3880:	strb.w	ip, [r5, #265]	; 0x109
      _b = b;
    3884:	mvn.w	ip, #24
    3888:	strb.w	ip, [r5, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    388c:	mvn.w	ip, #120	; 0x78
    3890:	strb.w	ip, [r5, #267]	; 0x10b
      _s = s;
      _b = b;
    3894:	mvn.w	ip, #18
    3898:	strb.w	ip, [r5, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    389c:	mov.w	ip, #69	; 0x45
    38a0:	strb.w	ip, [r5, #271]	; 0x10f
    38a4:	mov.w	ip, #72	; 0x48
    38a8:	strb.w	ip, [r5, #274]	; 0x112
      _b = b;
    38ac:	mvn.w	ip, #52	; 0x34
    38b0:	strb.w	ip, [r5, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38b4:	mov.w	ip, #35	; 0x23
    38b8:	strb.w	ip, [r5, #277]	; 0x115
      _b = b;
    38bc:	mvn.w	ip, #46	; 0x2e
    38c0:	strb.w	ip, [r5, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38c4:	mov.w	ip, #66	; 0x42
    38c8:	strb.w	ip, [r5, #280]	; 0x118
      _b = b;
    38cc:	mvn.w	ip, #33	; 0x21
    38d0:	strb.w	ip, [r5, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38d4:	mov.w	ip, #59	; 0x3b
    38d8:	strb.w	ip, [r5, #283]	; 0x11b
      _b = b;
    38dc:	mvn.w	ip, #22
    38e0:	strb.w	ip, [r5, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38e4:	mvn.w	ip, #111	; 0x6f
    38e8:	strb.w	ip, [r5, #285]	; 0x11d
      _s = s;
    38ec:	mov.w	ip, #5
    38f0:	strb.w	ip, [r5, #286]	; 0x11e
      _b = b;
    38f4:	mvn.w	ip, #9
    38f8:	strb.w	ip, [r5, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38fc:	mvn.w	ip, #32
    3900:	strb.w	ip, [r5, #288]	; 0x120
    3904:	mov.w	ip, #77	; 0x4d
    3908:	strb.w	ip, [r5, #291]	; 0x123
      _s = s;
    390c:	mov.w	ip, #59	; 0x3b
    3910:	strb.w	ip, [r5, #292]	; 0x124
      _b = b;
    3914:	mvn.w	ip, #49	; 0x31
    3918:	strb.w	ip, [r5, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    391c:	mov.w	ip, #34	; 0x22
    3920:	strb.w	ip, [r5, #294]	; 0x126
      _s = s;
    3924:	mov.w	ip, #17
    3928:	strb.w	ip, [r5, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    392c:	mvn.w	ip, #109	; 0x6d
    3930:	strb.w	ip, [r5, #270]	; 0x10e
    3934:	strb.w	ip, [r5, #273]	; 0x111
      _s = s;
      _b = b;
    3938:	mvn.w	ip, #54	; 0x36
    393c:	strb.w	ip, [r5, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3940:	mvn.w	ip, #106	; 0x6a
    3944:	strb.w	ip, [r5, #276]	; 0x114
      _s = s;
    3948:	mov.w	ip, #65	; 0x41
    394c:	strb.w	ip, [r5, #289]	; 0x121
      _b = b;
    3950:	mov.w	ip, #58	; 0x3a
    3954:	strb.w	ip, [r5, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3958:	mvn.w	ip, #40	; 0x28
    395c:	strb.w	ip, [r5, #295]	; 0x127
      _b = b;
    3960:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3964:	strb.w	r0, [r5, #298]	; 0x12a
      _b = b;
    3968:	strb.w	ip, [r5, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    396c:	mov.w	ip, #31
    3970:	strb.w	r2, [r5, #321]	; 0x141
    3974:	strb.w	ip, [r5, #297]	; 0x129
    3978:	mov.w	ip, #28
    397c:	strb.w	r1, [r5, #324]	; 0x144
    3980:	strb.w	ip, [r5, #300]	; 0x12c
      _s = s;
    3984:	mvn.w	ip, #59	; 0x3b
      _b = b;
    3988:	strb.w	r0, [r5, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    398c:	strb.w	ip, [r5, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3990:	mov.w	ip, #20
    3994:	strb.w	ip, [r5, #303]	; 0x12f
      _s = s;
    3998:	mvn.w	ip, #120	; 0x78
    399c:	strb.w	ip, [r5, #304]	; 0x130
      _b = b;
    39a0:	mvn.w	ip, #54	; 0x36
    39a4:	strb.w	ip, [r5, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a8:	mov.w	ip, #29
    39ac:	strb.w	ip, [r5, #306]	; 0x132
      _s = s;
    39b0:	mvn.w	ip, #96	; 0x60
    39b4:	strb.w	ip, [r5, #307]	; 0x133
      _b = b;
    39b8:	mvn.w	ip, #62	; 0x3e
    39bc:	strb.w	ip, [r5, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39c0:	mov.w	ip, #112	; 0x70
    39c4:	strb.w	ip, [r5, #312]	; 0x138
      _s = s;
    39c8:	mov.w	ip, #48	; 0x30
    39cc:	strb.w	ip, [r5, #313]	; 0x139
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d0:	mov.w	ip, #123	; 0x7b
    39d4:	strb.w	ip, [r5, #315]	; 0x13b
      _s = s;
    39d8:	mov.w	ip, #22
    39dc:	strb.w	ip, [r5, #316]	; 0x13c
      _b = b;
    39e0:	mvn.w	ip, #120	; 0x78
    39e4:	strb.w	ip, [r5, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e8:	mov.w	ip, #123	; 0x7b
    39ec:	strb.w	ip, [r5, #318]	; 0x13e
      _s = s;
    39f0:	mov.w	ip, #22
    39f4:	strb.w	ip, [r5, #319]	; 0x13f
      _b = b;
    39f8:	mvn.w	ip, #27
    39fc:	strb.w	ip, [r5, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a00:	mvn.w	ip, #4
    3a04:	strb.w	ip, [r5, #325]	; 0x145
    3a08:	mov.w	ip, #115	; 0x73
    3a0c:	strb.w	ip, [r5, #328]	; 0x148
      _b = b;
    3a10:	mvn.w	ip, #31
    3a14:	strb.w	ip, [r5, #299]	; 0x12b
    3a18:	mvn.w	ip, #72	; 0x48
    3a1c:	strb.w	ip, [r5, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a20:	mov.w	ip, #88	; 0x58
    3a24:	strb.w	ip, [r5, #309]	; 0x135
      _s = s;
    3a28:	mov.w	ip, #61	; 0x3d
    3a2c:	strb.w	ip, [r5, #310]	; 0x136
    3a30:	strb.w	ip, [r5, #322]	; 0x142
      _b = b;
    3a34:	mvn.w	ip, #61	; 0x3d
    3a38:	strb.w	ip, [r5, #311]	; 0x137
    3a3c:	mvn.w	ip, #78	; 0x4e
    3a40:	strb.w	ip, [r5, #314]	; 0x13a
    3a44:	mvn.w	ip, #73	; 0x49
    3a48:	strb.w	ip, [r5, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a4c:	mov.w	ip, #125	; 0x7d
    3a50:	strb.w	ip, [r5, #327]	; 0x147
      _s = s;
      _b = b;
    3a54:	mvn.w	ip, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a58:	strb.w	r1, [r5, #333]	; 0x14d
      _s = s;
      _b = b;
    3a5c:	strb.w	ip, [r5, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a60:	mov.w	ip, #127	; 0x7f
    3a64:	strb.w	r0, [r5, #339]	; 0x153
    3a68:	strb.w	ip, [r5, #330]	; 0x14a
      _s = s;
    3a6c:	mov.w	ip, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a70:	strb.w	r1, [r5, #351]	; 0x15f
      _s = s;
    3a74:	strb.w	ip, [r5, #331]	; 0x14b
      _b = b;
    3a78:	mvn.w	ip, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a7c:	strb.w	r6, [r5, #354]	; 0x162
      _s = s;
      _b = b;
    3a80:	strb.w	ip, [r5, #332]	; 0x14c
    3a84:	mvn.w	ip, #118	; 0x76
    3a88:	strb.w	ip, [r5, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a8c:	mvn.w	ip, #62	; 0x3e
    3a90:	strb.w	ip, [r5, #337]	; 0x151
      _b = b;
    3a94:	mov.w	ip, #121	; 0x79
    3a98:	strb.w	ip, [r5, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a9c:	mov.w	ip, #115	; 0x73
    3aa0:	strb.w	ip, [r5, #340]	; 0x154
      _b = b;
    3aa4:	mvn.w	ip, #102	; 0x66
    3aa8:	strb.w	ip, [r5, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aac:	mvn.w	ip, #107	; 0x6b
    3ab0:	strb.w	ip, [r5, #342]	; 0x156
      _s = s;
    3ab4:	mov.w	ip, #94	; 0x5e
    3ab8:	strb.w	ip, [r5, #343]	; 0x157
      _b = b;
    3abc:	mvn.w	ip, #72	; 0x48
    3ac0:	strb.w	ip, [r5, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ac4:	mvn.w	ip, #100	; 0x64
    3ac8:	strb.w	ip, [r5, #345]	; 0x159
      _s = s;
      _b = b;
    3acc:	mvn.w	ip, #74	; 0x4a
    3ad0:	strb.w	ip, [r5, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ad4:	mvn.w	ip, #122	; 0x7a
    3ad8:	strb.w	ip, [r5, #348]	; 0x15c
      _s = s;
    3adc:	mov.w	ip, #85	; 0x55
    3ae0:	strb.w	ip, [r5, #352]	; 0x160
    3ae4:	mvn.w	ip, #79	; 0x4f
    3ae8:	strb.w	ip, [r5, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aec:	mvn.w	ip, #122	; 0x7a
    3af0:	strb.w	ip, [r5, #357]	; 0x165
    3af4:	mvn.w	ip, #37	; 0x25
    3af8:	strb.w	ip, [r5, #360]	; 0x168
      _s = s;
    3afc:	mov.w	ip, #74	; 0x4a
    3b00:	strb.w	ip, [r5, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b04:	mvn.w	ip, #114	; 0x72
    3b08:	strb.w	ip, [r5, #336]	; 0x150
      _s = s;
    3b0c:	mov.w	ip, #45	; 0x2d
    3b10:	strb.w	ip, [r5, #346]	; 0x15a
    3b14:	mov.w	ip, #41	; 0x29
    3b18:	strb.w	ip, [r5, #349]	; 0x15d
      _b = b;
    3b1c:	mvn.w	ip, #12
    3b20:	strb.w	ip, [r5, #350]	; 0x15e
    3b24:	mvn.w	ip, #13
    3b28:	strb.w	ip, [r5, #353]	; 0x161
    3b2c:	mvn.w	ip, #23
    3b30:	strb.w	ip, [r5, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b34:	mvn.w	ip, #63	; 0x3f
    3b38:	strb.w	ip, [r5, #358]	; 0x166
      _b = b;
    3b3c:	strb.w	ip, [r5, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b40:	mov.w	ip, #76	; 0x4c
    3b44:	strb.w	ip, [r5, #361]	; 0x169
      _b = b;
    3b48:	mov.w	ip, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b4c:	strb.w	r1, [r5, #393]	; 0x189
      _s = s;
      _b = b;
    3b50:	strb.w	ip, [r5, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b54:	mov.w	ip, #101	; 0x65
    3b58:	strb.w	ip, [r5, #363]	; 0x16b
      _s = s;
      _b = b;
    3b5c:	mvn.w	ip, #79	; 0x4f
    3b60:	strb.w	ip, [r5, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b64:	mov.w	ip, #22
    3b68:	strb.w	ip, [r5, #369]	; 0x171
      _s = s;
    3b6c:	mvn.w	ip, #32
    3b70:	strb.w	ip, [r5, #370]	; 0x172
      _b = b;
    3b74:	mvn.w	ip, #99	; 0x63
    3b78:	strb.w	ip, [r5, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b7c:	mvn.w	ip, #12
    3b80:	strb.w	ip, [r5, #373]	; 0x175
      _b = b;
    3b84:	mvn.w	ip, #71	; 0x47
    3b88:	strb.w	ip, [r5, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b8c:	mov.w	ip, #24
    3b90:	strb.w	ip, [r5, #375]	; 0x177
      _s = s;
    3b94:	mvn.w	ip, #4
    3b98:	strb.w	ip, [r5, #376]	; 0x178
      _b = b;
    3b9c:	mvn.w	ip, #46	; 0x2e
    3ba0:	strb.w	ip, [r5, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ba4:	mov.w	ip, #54	; 0x36
    3ba8:	strb.w	ip, [r5, #378]	; 0x17a
      _s = s;
      _b = b;
    3bac:	mvn.w	ip, #108	; 0x6c
    3bb0:	strb.w	ip, [r5, #380]	; 0x17c
    3bb4:	mov.w	ip, #127	; 0x7f
    3bb8:	strb.w	ip, [r5, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bbc:	mov.w	ip, #95	; 0x5f
    3bc0:	strb.w	ip, [r5, #384]	; 0x180
      _s = s;
    3bc4:	mov.w	ip, #87	; 0x57
    3bc8:	strb.w	ip, [r5, #385]	; 0x181
      _b = b;
    3bcc:	mov.w	ip, #93	; 0x5d
    3bd0:	strb.w	ip, [r5, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bd4:	mov.w	ip, #123	; 0x7b
    3bd8:	strb.w	ip, [r5, #387]	; 0x183
      _s = s;
    3bdc:	mov.w	ip, #105	; 0x69
    3be0:	strb.w	ip, [r5, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3be4:	mov.w	ip, #127	; 0x7f
    3be8:	strb.w	ip, [r5, #390]	; 0x186
      _s = s;
    3bec:	mov.w	ip, #47	; 0x2f
    3bf0:	strb.w	ip, [r5, #391]	; 0x187
      _b = b;
    3bf4:	mvn.w	ip, #109	; 0x6d
    3bf8:	strb.w	ip, [r5, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3bfc:	mvn.w	ip, #83	; 0x53
    3c00:	strb.w	ip, [r5, #394]	; 0x18a
    3c04:	mov.w	ip, #92	; 0x5c
    3c08:	strb.w	ip, [r5, #364]	; 0x16c
      _b = b;
    3c0c:	mvn.w	ip, #95	; 0x5f
    3c10:	strb.w	ip, [r5, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c14:	mov.w	ip, #40	; 0x28
    3c18:	strb.w	ip, [r5, #366]	; 0x16e
      _s = s;
    3c1c:	mvn.w	ip, #89	; 0x59
    3c20:	strb.w	ip, [r5, #367]	; 0x16f
    3c24:	strb.w	ip, [r5, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c28:	mov.w	ip, #21
    3c2c:	strb.w	ip, [r5, #372]	; 0x174
    3c30:	mov.w	ip, #111	; 0x6f
    3c34:	strb.w	ip, [r5, #381]	; 0x17d
      _s = s;
    3c38:	mvn.w	ip, #77	; 0x4d
    3c3c:	strb.w	ip, [r5, #382]	; 0x17e
      _b = b;
    3c40:	mov.w	ip, #70	; 0x46
    3c44:	strb.w	ip, [r5, #389]	; 0x185
    3c48:	mvn.w	ip, #100	; 0x64
    3c4c:	strb.w	sl, [r5, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c50:	mov.w	sl, #99	; 0x63
      _b = b;
    3c54:	strb.w	ip, [r5, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c58:	mov.w	ip, #72	; 0x48
    3c5c:	strb.w	sl, [r5, #403]	; 0x193
      _b = b;
    3c60:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c64:	strb.w	ip, [r5, #397]	; 0x18d
      _b = b;
    3c68:	mvn.w	ip, #51	; 0x33
    3c6c:	strb.w	sl, [r5, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c70:	mov.w	sl, #95	; 0x5f
      _b = b;
    3c74:	strb.w	ip, [r5, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c78:	mov.w	ip, #57	; 0x39
    3c7c:	strb.w	sl, [r5, #406]	; 0x196
      _b = b;
    3c80:	mvn.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c84:	strb.w	r1, [r5, #399]	; 0x18f
      _s = s;
      _b = b;
    3c88:	strb.w	sl, [r5, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c8c:	mvn.w	sl, #122	; 0x7a
      _s = s;
    3c90:	strb.w	ip, [r5, #400]	; 0x190
      _b = b;
    3c94:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c98:	strb.w	sl, [r5, #408]	; 0x198
      _s = s;
    3c9c:	mov.w	sl, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ca0:	strb.w	r6, [r5, #420]	; 0x1a4
      _s = s;
    3ca4:	strb.w	sl, [r5, #409]	; 0x199
      _b = b;
    3ca8:	mvn.w	sl, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cac:	strb.w	r2, [r5, #423]	; 0x1a7
      _s = s;
      _b = b;
    3cb0:	strb.w	sl, [r5, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cb4:	mov.w	sl, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cb8:	strb.w	r6, [r5, #426]	; 0x1aa
      _s = s;
    3cbc:	strb.w	sl, [r5, #412]	; 0x19c
      _b = b;
    3cc0:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cc4:	strb.w	r9, [r5, #402]	; 0x192
      _s = s;
      _b = b;
    3cc8:	strb.w	sl, [r5, #413]	; 0x19d
    3ccc:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cd0:	strb.w	r8, [r5, #405]	; 0x195
      _s = s;
      _b = b;
    3cd4:	strb.w	sl, [r5, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cd8:	mvn.w	sl, #108	; 0x6c
    3cdc:	strb.w	r9, [r5, #411]	; 0x19b
    3ce0:	strb.w	sl, [r5, #417]	; 0x1a1
      _s = s;
    3ce4:	mov.w	sl, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ce8:	strb.w	fp, [r5, #414]	; 0x19e
      _s = s;
    3cec:	strb.w	sl, [r5, #418]	; 0x1a2
    3cf0:	mov.w	sl, #73	; 0x49
      _b = b;
    3cf4:	strb.w	fp, [r5, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cf8:	strb.w	sl, [r5, #421]	; 0x1a5
      _b = b;
    3cfc:	mvn.w	sl, #21
    3d00:	strb.w	sl, [r5, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d04:	mvn.w	sl, #78	; 0x4e
    3d08:	strb.w	sl, [r5, #424]	; 0x1a8
      _b = b;
    3d0c:	mvn.w	sl, #22
    3d10:	strb.w	sl, [r5, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d14:	mvn.w	sl, #49	; 0x31
    3d18:	strb.w	sl, [r5, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d1c:	mov.w	sl, #126	; 0x7e
    3d20:	strb.w	sl, [r5, #396]	; 0x18c
      _s = s;
    3d24:	mov.w	sl, #116	; 0x74
    3d28:	strb.w	sl, [r5, #415]	; 0x19f
      _b = b;
    3d2c:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d30:	strb.w	r1, [r5, #429]	; 0x1ad
      _s = s;
      _b = b;
    3d34:	strb.w	sl, [r5, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d38:	mvn.w	sl, #96	; 0x60
      _b = b;
    3d3c:	strb.w	r0, [r5, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d40:	strb.w	sl, [r5, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d44:	mvn.w	sl, #95	; 0x5f
    3d48:	strb.w	sl, [r5, #432]	; 0x1b0
      _s = s;
    3d4c:	mov.w	sl, #37	; 0x25
    3d50:	strb.w	sl, [r5, #433]	; 0x1b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d54:	mov.w	sl, #116	; 0x74
    3d58:	strb.w	sl, [r5, #435]	; 0x1b3
      _s = s;
    3d5c:	mov.w	sl, #123	; 0x7b
    3d60:	strb.w	sl, [r5, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d64:	mov.w	sl, #114	; 0x72
    3d68:	strb.w	sl, [r5, #438]	; 0x1b6
      _s = s;
    3d6c:	mov.w	sl, #96	; 0x60
    3d70:	strb.w	sl, [r5, #439]	; 0x1b7
      _b = b;
    3d74:	mvn.w	sl, #39	; 0x27
    3d78:	strb.w	sl, [r5, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d7c:	mov.w	sl, #106	; 0x6a
    3d80:	strb.w	sl, [r5, #441]	; 0x1b9
      _s = s;
    3d84:	mov.w	sl, #66	; 0x42
    3d88:	strb.w	sl, [r5, #442]	; 0x1ba
      _b = b;
    3d8c:	mvn.w	sl, #30
    3d90:	strb.w	sl, [r5, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d94:	mvn.w	sl, #102	; 0x66
    3d98:	strb.w	sl, [r5, #445]	; 0x1bd
      _b = b;
    3d9c:	mvn.w	sl, #79	; 0x4f
    3da0:	strb.w	sl, [r5, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3da4:	mov.w	sl, #112	; 0x70
    3da8:	strb.w	sl, [r5, #447]	; 0x1bf
      _s = s;
    3dac:	mov.w	sl, #118	; 0x76
    3db0:	strb.w	sl, [r5, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3db4:	mov.w	sl, #116	; 0x74
    3db8:	strb.w	sl, [r5, #450]	; 0x1c2
      _s = s;
    3dbc:	mvn.w	sl, #34	; 0x22
    3dc0:	strb.w	sl, [r5, #451]	; 0x1c3
      _b = b;
    3dc4:	mov.w	sl, #120	; 0x78
    3dc8:	strb.w	sl, [r5, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dcc:	mov.w	sl, #98	; 0x62
    3dd0:	strb.w	sl, [r5, #453]	; 0x1c5
      _s = s;
    3dd4:	mvn.w	sl, #110	; 0x6e
    3dd8:	strb.w	sl, [r5, #454]	; 0x1c6
      _b = b;
    3ddc:	mov.w	sl, #102	; 0x66
    3de0:	strb.w	sl, [r5, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3de4:	mov.w	sl, #105	; 0x69
    3de8:	strb.w	sl, [r5, #456]	; 0x1c8
    3dec:	mvn.w	sl, #52	; 0x34
    3df0:	strb.w	sl, [r5, #459]	; 0x1cb
      _s = s;
    3df4:	mov.w	sl, #95	; 0x5f
    3df8:	strb.w	sl, [r5, #460]	; 0x1cc
      _b = b;
    3dfc:	mvn.w	sl, #55	; 0x37
    3e00:	strb.w	sl, [r5, #431]	; 0x1af
    3e04:	mov.w	sl, #62	; 0x3e
    3e08:	strb.w	sl, [r5, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e0c:	mov.w	sl, #38	; 0x26
    3e10:	strb.w	sl, [r5, #444]	; 0x1bc
      _s = s;
      _b = b;
    3e14:	mvn.w	sl, #64	; 0x40
    3e18:	strb.w	sl, [r5, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e1c:	mov.w	sl, #124	; 0x7c
    3e20:	strb.w	sl, [r5, #457]	; 0x1c9
      _b = b;
    3e24:	mov.w	sl, #43	; 0x2b
    3e28:	strb.w	sl, [r5, #458]	; 0x1ca
    3e2c:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e30:	strb.w	r6, [r5, #465]	; 0x1d1
      _s = s;
      _b = b;
    3e34:	strb.w	sl, [r5, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e38:	mov.w	sl, #121	; 0x79
    3e3c:	strb.w	r7, [r5, #471]	; 0x1d7
    3e40:	strb.w	sl, [r5, #462]	; 0x1ce
      _s = s;
    3e44:	mvn.w	sl, #121	; 0x79
    3e48:	strb.w	r0, [r5, #478]	; 0x1de
    3e4c:	strb.w	sl, [r5, #463]	; 0x1cf
      _b = b;
    3e50:	mov.w	sl, #106	; 0x6a
    3e54:	strb.w	ip, [r5, #485]	; 0x1e5
    3e58:	strb.w	sl, [r5, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e5c:	mvn.w	sl, #73	; 0x49
    3e60:	strb.w	r9, [r5, #469]	; 0x1d5
    3e64:	strb.w	sl, [r5, #466]	; 0x1d2
      _b = b;
    3e68:	mvn.w	sl, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e6c:	strb.w	r8, [r5, #486]	; 0x1e6
      _s = s;
      _b = b;
    3e70:	strb.w	sl, [r5, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e74:	mvn.w	sl, #118	; 0x76
    3e78:	strb.w	sl, [r5, #468]	; 0x1d4
      _s = s;
      _b = b;
    3e7c:	mvn.w	sl, #34	; 0x22
    3e80:	strb.w	sl, [r5, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e84:	mvn.w	sl, #45	; 0x2d
    3e88:	strb.w	sl, [r5, #472]	; 0x1d8
      _b = b;
    3e8c:	strb.w	sl, [r5, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e90:	mvn.w	sl, #109	; 0x6d
    3e94:	strb.w	sl, [r5, #474]	; 0x1da
      _s = s;
    3e98:	mvn.w	sl, #110	; 0x6e
    3e9c:	strb.w	sl, [r5, #475]	; 0x1db
      _b = b;
    3ea0:	mvn.w	sl, #37	; 0x25
    3ea4:	strb.w	sl, [r5, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ea8:	mvn.w	sl, #114	; 0x72
    3eac:	strb.w	sl, [r5, #477]	; 0x1dd
    3eb0:	mvn.w	sl, #111	; 0x6f
    3eb4:	strb.w	sl, [r5, #480]	; 0x1e0
      _s = s;
    3eb8:	mvn.w	sl, #81	; 0x51
    3ebc:	strb.w	sl, [r5, #481]	; 0x1e1
      _b = b;
    3ec0:	mvn.w	sl, #31
    3ec4:	strb.w	sl, [r5, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ec8:	mvn.w	sl, #109	; 0x6d
    3ecc:	strb.w	sl, [r5, #483]	; 0x1e3
      _s = s;
    3ed0:	mvn.w	sl, #101	; 0x65
    3ed4:	strb.w	sl, [r5, #484]	; 0x1e4
      _b = b;
    3ed8:	mvn.w	sl, #37	; 0x25
    3edc:	strb.w	sl, [r5, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ee0:	mov.w	sl, #37	; 0x25
    3ee4:	strb.w	sl, [r5, #490]	; 0x1ea
      _b = b;
    3ee8:	mvn.w	sl, #105	; 0x69
    3eec:	strb.w	sl, [r5, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ef0:	mov.w	sl, #113	; 0x71
    3ef4:	strb.w	sl, [r5, #492]	; 0x1ec
      _s = s;
      _b = b;
    3ef8:	mvn.w	sl, #44	; 0x2c
    3efc:	strb.w	sl, [r5, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f00:	mov.w	sl, #79	; 0x4f
    3f04:	strb.w	sl, [r5, #487]	; 0x1e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f08:	mov.w	sl, #119	; 0x77
    3f0c:	strb.w	sl, [r5, #489]	; 0x1e9
      _s = s;
    3f10:	mov.w	sl, #52	; 0x34
    3f14:	strb.w	sl, [r5, #493]	; 0x1ed
      _b = b;
    3f18:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f1c:	strb.w	r2, [r5, #504]	; 0x1f8
      _s = s;
      _b = b;
    3f20:	strb.w	sl, [r5, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f24:	mov.w	sl, #121	; 0x79
      _s = s;
    3f28:	strb.w	r6, [r5, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f2c:	strb.w	sl, [r5, #495]	; 0x1ef
      _s = s;
    3f30:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f34:	strb.w	r6, [r5, #510]	; 0x1fe
      _s = s;
    3f38:	strb.w	sl, [r5, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f3c:	strb.w	sl, [r5, #498]	; 0x1f2
      _s = s;
    3f40:	mvn.w	sl, #58	; 0x3a
    3f44:	strb.w	lr, [r5, #517]	; 0x205
    3f48:	strb.w	sl, [r5, #499]	; 0x1f3
      _b = b;
    3f4c:	mvn.w	sl, #65	; 0x41
    3f50:	strb.w	sl, [r5, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f54:	mov.w	sl, #127	; 0x7f
    3f58:	strb.w	sl, [r5, #501]	; 0x1f5
      _s = s;
    3f5c:	mvn.w	sl, #107	; 0x6b
    3f60:	strb.w	sl, [r5, #502]	; 0x1f6
      _b = b;
    3f64:	mvn.w	sl, #78	; 0x4e
    3f68:	strb.w	sl, [r5, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f6c:	mov.w	sl, #97	; 0x61
    3f70:	strb.w	sl, [r5, #505]	; 0x1f9
      _b = b;
    3f74:	mvn.w	sl, #96	; 0x60
    3f78:	strb.w	sl, [r5, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f7c:	mov.w	sl, #127	; 0x7f
    3f80:	strb.w	sl, [r5, #507]	; 0x1fb
      _s = s;
      _b = b;
    3f84:	mvn.w	sl, #67	; 0x43
    3f88:	strb.w	sl, [r5, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f8c:	mvn.w	sl, #34	; 0x22
    3f90:	strb.w	sl, [r5, #511]	; 0x1ff
      _b = b;
    3f94:	mvn.w	sl, #110	; 0x6e
    3f98:	strb.w	sl, [r5, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f9c:	mvn.w	sl, #120	; 0x78
    3fa0:	strb.w	sl, [r5, #513]	; 0x201
      _s = s;
    3fa4:	mvn.w	sl, #28
    3fa8:	strb.w	sl, [r5, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fac:	mvn.w	sl, #120	; 0x78
    3fb0:	strb.w	sl, [r5, #516]	; 0x204
      _s = s;
      _b = b;
    3fb4:	mvn.w	sl, #52	; 0x34
    3fb8:	strb.w	sl, [r5, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fbc:	mvn.w	sl, #119	; 0x77
    3fc0:	strb.w	sl, [r5, #519]	; 0x207
      _s = s;
    3fc4:	mvn.w	sl, #5
    3fc8:	strb.w	sl, [r5, #520]	; 0x208
      _b = b;
    3fcc:	mvn.w	sl, #78	; 0x4e
    3fd0:	strb.w	sl, [r5, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fd4:	mov.w	sl, #111	; 0x6f
    3fd8:	strb.w	sl, [r5, #522]	; 0x20a
      _s = s;
    3fdc:	mvn.w	sl, #104	; 0x68
    3fe0:	strb.w	sl, [r5, #523]	; 0x20b
      _b = b;
    3fe4:	mvn.w	sl, #119	; 0x77
    3fe8:	strb.w	sl, [r5, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fec:	mov.w	sl, #99	; 0x63
    3ff0:	strb.w	sl, [r5, #525]	; 0x20d
      _s = s;
    3ff4:	mov.w	sl, #114	; 0x72
    3ff8:	strb.w	sl, [r5, #526]	; 0x20e
      _b = b;
    3ffc:	mvn.w	sl, #47	; 0x2f
    4000:	strb.w	sl, [r5, #497]	; 0x1f1
    4004:	mvn.w	sl, #53	; 0x35
    4008:	strb.w	sl, [r5, #515]	; 0x203
    400c:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4010:	strb.w	lr, [r5, #541]	; 0x21d
      _b = b;
    4014:	strb.w	sl, [r5, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4018:	mvn.w	sl, #64	; 0x40
    401c:	strb.w	r7, [r5, #543]	; 0x21f
    4020:	strb.w	sl, [r5, #528]	; 0x210
      _s = s;
    4024:	mov.w	sl, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4028:	strb.w	r7, [r5, #558]	; 0x22e
      _s = s;
    402c:	strb.w	sl, [r5, #529]	; 0x211
      _b = b;
    4030:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4034:	strb.w	r2, [r5, #559]	; 0x22f
      _b = b;
    4038:	strb.w	sl, [r5, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    403c:	mvn.w	sl, #64	; 0x40
    4040:	strb.w	fp, [r5, #546]	; 0x222
    4044:	strb.w	sl, [r5, #531]	; 0x213
      _s = s;
    4048:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    404c:	strb.w	r9, [r5, #549]	; 0x225
      _s = s;
    4050:	strb.w	sl, [r5, #532]	; 0x214
      _b = b;
    4054:	mov.w	sl, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4058:	strb.w	fp, [r5, #552]	; 0x228
      _s = s;
      _b = b;
    405c:	strb.w	sl, [r5, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4060:	mov.w	sl, #127	; 0x7f
    4064:	strb.w	fp, [r5, #555]	; 0x22b
    4068:	strb.w	sl, [r5, #534]	; 0x216
      _s = s;
    406c:	mov.w	sl, #115	; 0x73
    4070:	strb.w	sl, [r5, #535]	; 0x217
      _b = b;
    4074:	mov.w	sl, #121	; 0x79
    4078:	strb.w	sl, [r5, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    407c:	mvn.w	sl, #122	; 0x7a
    4080:	strb.w	sl, [r5, #537]	; 0x219
      _s = s;
    4084:	mvn.w	sl, #61	; 0x3d
    4088:	strb.w	sl, [r5, #538]	; 0x21a
      _b = b;
    408c:	mvn.w	sl, #37	; 0x25
    4090:	strb.w	sl, [r5, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4094:	mvn.w	sl, #111	; 0x6f
    4098:	strb.w	sl, [r5, #540]	; 0x21c
      _s = s;
      _b = b;
    409c:	mvn.w	sl, #54	; 0x36
    40a0:	strb.w	sl, [r5, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40a4:	mov.w	sl, #121	; 0x79
    40a8:	strb.w	sl, [r5, #544]	; 0x220
      _b = b;
    40ac:	mvn.w	sl, #35	; 0x23
    40b0:	strb.w	sl, [r5, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40b4:	mov.w	sl, #114	; 0x72
    40b8:	strb.w	sl, [r5, #547]	; 0x223
      _b = b;
    40bc:	mvn.w	sl, #23
    40c0:	strb.w	sl, [r5, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40c4:	mvn.w	sl, #70	; 0x46
    40c8:	strb.w	sl, [r5, #550]	; 0x226
    40cc:	mov.w	sl, #124	; 0x7c
    40d0:	strb.w	sl, [r5, #553]	; 0x229
    40d4:	mov.w	sl, #110	; 0x6e
    40d8:	strb.w	sl, [r5, #556]	; 0x22c
      _b = b;
    40dc:	mvn.w	sl, #19
    40e0:	strb.w	sl, [r5, #557]	; 0x22d
    40e4:	mvn.w	sl, #38	; 0x26
    40e8:	strb.w	sl, [r5, #551]	; 0x227
    40ec:	mvn.w	sl, #25
    40f0:	strb.w	sl, [r5, #554]	; 0x22a
    40f4:	strb.w	sl, [r5, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40f8:	mvn.w	sl, #122	; 0x7a
    40fc:	strb.w	r2, [r5, #579]	; 0x243
    4100:	strb.w	sl, [r5, #561]	; 0x231
      _s = s;
      _b = b;
    4104:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4108:	strb.w	r1, [r5, #582]	; 0x246
      _s = s;
      _b = b;
    410c:	strb.w	sl, [r5, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4110:	mov.w	sl, #110	; 0x6e
    4114:	strb.w	r6, [r5, #585]	; 0x249
    4118:	strb.w	sl, [r5, #564]	; 0x234
      _s = s;
    411c:	mov.w	sl, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4120:	strb.w	r6, [r5, #588]	; 0x24c
      _s = s;
    4124:	strb.w	sl, [r5, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4128:	mov.w	sl, #120	; 0x78
      _s = s;
      _b = b;
    412c:	strb.w	r9, [r5, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4130:	strb.w	sl, [r5, #567]	; 0x237
    4134:	strb.w	sl, [r5, #570]	; 0x23a
      _s = s;
    4138:	mov.w	sl, #124	; 0x7c
      _b = b;
    413c:	strb.w	fp, [r5, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4140:	strb.w	sl, [r5, #571]	; 0x23b
      _b = b;
    4144:	mvn.w	sl, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4148:	strb.w	r8, [r5, #591]	; 0x24f
      _s = s;
      _b = b;
    414c:	strb.w	sl, [r5, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4150:	mov.w	sl, #126	; 0x7e
    4154:	strb.w	sl, [r5, #573]	; 0x23d
      _s = s;
    4158:	mov.w	sl, #115	; 0x73
    415c:	strb.w	sl, [r5, #574]	; 0x23e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4160:	mov.w	sl, #120	; 0x78
    4164:	strb.w	sl, [r5, #576]	; 0x240
      _s = s;
    4168:	mov.w	sl, #45	; 0x2d
    416c:	strb.w	sl, [r5, #577]	; 0x241
      _b = b;
    4170:	mvn.w	sl, #66	; 0x42
    4174:	strb.w	sl, [r5, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4178:	mvn.w	sl, #55	; 0x37
    417c:	strb.w	sl, [r5, #580]	; 0x244
      _b = b;
    4180:	mvn.w	sl, #104	; 0x68
    4184:	strb.w	sl, [r5, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4188:	mvn.w	sl, #8
    418c:	strb.w	sl, [r5, #583]	; 0x247
      _b = b;
    4190:	mvn.w	sl, #119	; 0x77
    4194:	strb.w	sl, [r5, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4198:	mvn.w	sl, #5
    419c:	strb.w	sl, [r5, #586]	; 0x24a
    41a0:	mvn.w	sl, #17
    41a4:	strb.w	sl, [r5, #589]	; 0x24d
      _b = b;
    41a8:	mvn.w	sl, #105	; 0x69
    41ac:	strb.w	sl, [r5, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41b0:	mov.w	sl, #78	; 0x4e
    41b4:	strb.w	sl, [r5, #562]	; 0x232
    41b8:	mov.w	sl, #122	; 0x7a
    41bc:	strb.w	sl, [r5, #568]	; 0x238
      _b = b;
    41c0:	mvn.w	sl, #94	; 0x5e
    41c4:	strb.w	sl, [r5, #575]	; 0x23f
    41c8:	mvn.w	sl, #90	; 0x5a
    41cc:	strb.w	sl, [r5, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41d0:	mvn.w	sl, #98	; 0x62
    41d4:	strb.w	sl, [r5, #592]	; 0x250
      _b = b;
    41d8:	mvn.w	sl, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41dc:	strb.w	r1, [r5, #604]	; 0x25c
      _b = b;
    41e0:	strb.w	sl, [r5, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41e4:	mvn.w	sl, #94	; 0x5e
      _s = s;
    41e8:	strb.w	r7, [r5, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41ec:	strb.w	sl, [r5, #594]	; 0x252
      _s = s;
      _b = b;
    41f0:	mvn.w	sl, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41f4:	strb.w	r7, [r5, #624]	; 0x270
      _s = s;
      _b = b;
    41f8:	strb.w	sl, [r5, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41fc:	mvn.w	sl, #15
    4200:	strb.w	sl, [r5, #597]	; 0x255
      _s = s;
    4204:	mov.w	sl, #119	; 0x77
    4208:	strb.w	sl, [r5, #598]	; 0x256
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    420c:	mov.w	sl, #1
    4210:	strb.w	sl, [r5, #600]	; 0x258
      _s = s;
    4214:	mov.w	sl, #102	; 0x66
    4218:	strb.w	sl, [r5, #601]	; 0x259
      _b = b;
    421c:	mov.w	sl, #112	; 0x70
    4220:	strb.w	sl, [r5, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4224:	mvn.w	sl, #114	; 0x72
    4228:	strb.w	sl, [r5, #603]	; 0x25b
      _s = s;
      _b = b;
    422c:	mov.w	sl, #127	; 0x7f
    4230:	strb.w	sl, [r5, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4234:	mvn.w	sl, #114	; 0x72
    4238:	strb.w	sl, [r5, #606]	; 0x25e
      _s = s;
    423c:	mvn.w	sl, #35	; 0x23
    4240:	strb.w	sl, [r5, #607]	; 0x25f
      _b = b;
    4244:	mvn.w	sl, #26
    4248:	strb.w	sl, [r5, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    424c:	mvn.w	sl, #114	; 0x72
    4250:	strb.w	sl, [r5, #609]	; 0x261
      _s = s;
    4254:	mvn.w	sl, #45	; 0x2d
    4258:	strb.w	sl, [r5, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    425c:	mvn.w	sl, #118	; 0x76
    4260:	strb.w	sl, [r5, #612]	; 0x264
      _s = s;
      _b = b;
    4264:	mvn.w	sl, #35	; 0x23
    4268:	strb.w	sl, [r5, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    426c:	mvn.w	sl, #120	; 0x78
    4270:	strb.w	sl, [r5, #615]	; 0x267
      _s = s;
    4274:	mvn.w	sl, #92	; 0x5c
    4278:	strb.w	sl, [r5, #616]	; 0x268
      _b = b;
    427c:	mvn.w	sl, #23
    4280:	strb.w	sl, [r5, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4284:	mvn.w	sl, #121	; 0x79
    4288:	strb.w	sl, [r5, #618]	; 0x26a
      _s = s;
    428c:	mvn.w	sl, #8
    4290:	strb.w	sl, [r5, #619]	; 0x26b
      _b = b;
    4294:	mvn.w	sl, #29
    4298:	strb.w	sl, [r5, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    429c:	mvn.w	sl, #118	; 0x76
    42a0:	strb.w	sl, [r5, #621]	; 0x26d
      _s = s;
    42a4:	mvn.w	sl, #81	; 0x51
    42a8:	strb.w	sl, [r5, #622]	; 0x26e
      _b = b;
    42ac:	mvn.w	sl, #47	; 0x2f
    42b0:	strb.w	sl, [r5, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42b4:	mvn.w	sl, #119	; 0x77
    42b8:	strb.w	sl, [r5, #625]	; 0x271
    42bc:	mov.w	sl, #83	; 0x53
    42c0:	strb.w	sl, [r5, #595]	; 0x253
      _b = b;
    42c4:	strb.w	sl, [r5, #599]	; 0x257
    42c8:	mvn.w	sl, #56	; 0x38
    42cc:	strb.w	sl, [r5, #611]	; 0x263
    42d0:	mvn.w	sl, #50	; 0x32
    42d4:	strb.w	ip, [r5, #629]	; 0x275
    42d8:	strb.w	sl, [r5, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42dc:	mvn.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42e0:	strb.w	r2, [r5, #636]	; 0x27c
      _s = s;
    42e4:	strb.w	sl, [r5, #628]	; 0x274
      _b = b;
    42e8:	mvn.w	sl, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42ec:	strb.w	r1, [r5, #657]	; 0x291
      _s = s;
      _b = b;
    42f0:	strb.w	sl, [r5, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42f4:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42f8:	strb.w	fp, [r5, #627]	; 0x273
      _s = s;
    42fc:	strb.w	sl, [r5, #634]	; 0x27a
      _b = b;
    4300:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4304:	strb.w	r8, [r5, #630]	; 0x276
      _s = s;
      _b = b;
    4308:	strb.w	sl, [r5, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    430c:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4310:	strb.w	r8, [r5, #633]	; 0x279
      _s = s;
    4314:	strb.w	sl, [r5, #637]	; 0x27d
      _b = b;
    4318:	mov.w	sl, #97	; 0x61
    431c:	strb.w	sl, [r5, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4320:	mvn.w	sl, #50	; 0x32
    4324:	strb.w	sl, [r5, #639]	; 0x27f
      _s = s;
    4328:	mov.w	sl, #85	; 0x55
    432c:	strb.w	sl, [r5, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4330:	mvn.w	sl, #50	; 0x32
    4334:	strb.w	sl, [r5, #642]	; 0x282
      _s = s;
    4338:	mov.w	sl, #90	; 0x5a
    433c:	strb.w	sl, [r5, #643]	; 0x283
      _b = b;
    4340:	mov.w	sl, #17
    4344:	strb.w	sl, [r5, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4348:	mvn.w	sl, #51	; 0x33
    434c:	strb.w	sl, [r5, #645]	; 0x285
      _s = s;
    4350:	mov.w	sl, #70	; 0x46
    4354:	strb.w	sl, [r5, #646]	; 0x286
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4358:	mov.w	sl, #95	; 0x5f
    435c:	strb.w	sl, [r5, #648]	; 0x288
      _s = s;
      _b = b;
    4360:	mvn.w	sl, #29
    4364:	strb.w	sl, [r5, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4368:	mvn.w	sl, #122	; 0x7a
    436c:	strb.w	sl, [r5, #651]	; 0x28b
      _s = s;
    4370:	mov.w	sl, #87	; 0x57
    4374:	strb.w	sl, [r5, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4378:	mvn.w	sl, #122	; 0x7a
    437c:	strb.w	sl, [r5, #654]	; 0x28e
      _s = s;
    4380:	mvn.w	sl, #106	; 0x6a
    4384:	strb.w	sl, [r5, #658]	; 0x292
    4388:	mov.w	sl, #86	; 0x56
    438c:	strb.w	sl, [r5, #631]	; 0x277
      _b = b;
    4390:	mov.w	sl, #18
    4394:	strb.w	sl, [r5, #641]	; 0x281
    4398:	strb.w	sl, [r5, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    439c:	mov.w	sl, #13
    43a0:	strb.w	sl, [r5, #649]	; 0x289
      _b = b;
    43a4:	mvn.w	sl, #68	; 0x44
    43a8:	strb.w	sl, [r5, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43ac:	mvn.w	sl, #7
    43b0:	strb.w	sl, [r5, #655]	; 0x28f
      _b = b;
    43b4:	mvn.w	sl, #91	; 0x5b
    43b8:	strb.w	sl, [r5, #656]	; 0x290
    43bc:	mvn.w	sl, #67	; 0x43
    43c0:	strb.w	lr, [r5, #665]	; 0x299
    43c4:	strb.w	sl, [r5, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43c8:	mvn.w	sl, #78	; 0x4e
    43cc:	strb.w	r2, [r5, #673]	; 0x2a1
    43d0:	strb.w	sl, [r5, #661]	; 0x295
      _b = b;
    43d4:	mvn.w	sl, #30
    43d8:	strb.w	ip, [r5, #677]	; 0x2a5
    43dc:	strb.w	sl, [r5, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43e0:	mvn.w	sl, #99	; 0x63
      _s = s;
    43e4:	strb.w	lr, [r5, #679]	; 0x2a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43e8:	strb.w	sl, [r5, #663]	; 0x297
    43ec:	mvn.w	sl, #78	; 0x4e
    43f0:	strb.w	r6, [r5, #684]	; 0x2ac
    43f4:	strb.w	sl, [r5, #666]	; 0x29a
      _s = s;
    43f8:	mvn.w	sl, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43fc:	strb.w	r9, [r5, #660]	; 0x294
      _s = s;
    4400:	strb.w	sl, [r5, #667]	; 0x29b
      _b = b;
    4404:	mvn.w	sl, #6
    4408:	strb.w	sl, [r5, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    440c:	mvn.w	sl, #72	; 0x48
    4410:	strb.w	sl, [r5, #669]	; 0x29d
      _s = s;
    4414:	mov.w	sl, #115	; 0x73
    4418:	strb.w	sl, [r5, #670]	; 0x29e
      _b = b;
    441c:	mvn.w	sl, #5
    4420:	strb.w	sl, [r5, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4424:	mvn.w	sl, #71	; 0x47
    4428:	strb.w	sl, [r5, #672]	; 0x2a0
      _s = s;
    442c:	mvn.w	sl, #56	; 0x38
    4430:	strb.w	sl, [r5, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4434:	mvn.w	sl, #93	; 0x5d
    4438:	strb.w	sl, [r5, #678]	; 0x2a6
      _s = s;
      _b = b;
    443c:	mvn.w	sl, #31
    4440:	strb.w	sl, [r5, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4444:	mvn.w	sl, #114	; 0x72
    4448:	strb.w	sl, [r5, #681]	; 0x2a9
      _s = s;
      _b = b;
    444c:	mvn.w	sl, #54	; 0x36
    4450:	strb.w	sl, [r5, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4454:	mvn.w	sl, #95	; 0x5f
    4458:	strb.w	sl, [r5, #685]	; 0x2ad
      _b = b;
    445c:	mvn.w	sl, #24
    4460:	strb.w	sl, [r5, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4464:	mvn.w	sl, #120	; 0x78
    4468:	strb.w	sl, [r5, #687]	; 0x2af
      _s = s;
    446c:	mvn.w	sl, #6
    4470:	strb.w	sl, [r5, #688]	; 0x2b0
      _b = b;
    4474:	mvn.w	sl, #36	; 0x24
    4478:	strb.w	sl, [r5, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    447c:	mvn.w	sl, #118	; 0x76
    4480:	strb.w	sl, [r5, #690]	; 0x2b2
      _s = s;
    4484:	mvn.w	sl, #9
    4488:	strb.w	sl, [r5, #691]	; 0x2b3
    448c:	mov.w	sl, #91	; 0x5b
    4490:	strb.w	sl, [r5, #664]	; 0x298
      _b = b;
    4494:	mvn.w	sl, #14
    4498:	strb.w	sl, [r5, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    449c:	mvn.w	sl, #103	; 0x67
    44a0:	strb.w	sl, [r5, #675]	; 0x2a3
      _s = s;
    44a4:	mvn.w	sl, #84	; 0x54
    44a8:	strb.w	sl, [r5, #682]	; 0x2aa
      _b = b;
    44ac:	mvn.w	sl, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44b0:	strb.w	r0, [r5, #699]	; 0x2bb
      _s = s;
      _b = b;
    44b4:	strb.w	sl, [r5, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44b8:	mvn.w	sl, #118	; 0x76
    44bc:	strb.w	r0, [r5, #705]	; 0x2c1
    44c0:	strb.w	sl, [r5, #693]	; 0x2b5
      _s = s;
    44c4:	mvn.w	sl, #62	; 0x3e
      _b = b;
    44c8:	strb.w	ip, [r5, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44cc:	strb.w	sl, [r5, #694]	; 0x2b6
      _b = b;
    44d0:	mvn.w	sl, #57	; 0x39
    44d4:	strb.w	r0, [r5, #722]	; 0x2d2
    44d8:	strb.w	sl, [r5, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44dc:	mvn.w	sl, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e0:	strb.w	fp, [r5, #696]	; 0x2b8
      _s = s;
    44e4:	strb.w	sl, [r5, #697]	; 0x2b9
      _b = b;
    44e8:	mvn.w	sl, #43	; 0x2b
    44ec:	strb.w	sl, [r5, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44f0:	mov.w	sl, #123	; 0x7b
    44f4:	strb.w	sl, [r5, #700]	; 0x2bc
      _b = b;
    44f8:	mvn.w	sl, #28
    44fc:	strb.w	sl, [r5, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4500:	mvn.w	sl, #105	; 0x69
    4504:	strb.w	sl, [r5, #702]	; 0x2be
      _s = s;
    4508:	mov.w	sl, #85	; 0x55
    450c:	strb.w	sl, [r5, #703]	; 0x2bf
      _b = b;
    4510:	mvn.w	sl, #17
    4514:	strb.w	sl, [r5, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4518:	mvn.w	sl, #105	; 0x69
    451c:	strb.w	sl, [r5, #708]	; 0x2c4
      _s = s;
    4520:	mvn.w	sl, #41	; 0x29
    4524:	strb.w	sl, [r5, #709]	; 0x2c5
      _b = b;
    4528:	mvn.w	sl, #59	; 0x3b
    452c:	strb.w	sl, [r5, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4530:	mvn.w	sl, #64	; 0x40
    4534:	strb.w	sl, [r5, #711]	; 0x2c7
      _s = s;
    4538:	mov.w	sl, #97	; 0x61
    453c:	strb.w	sl, [r5, #712]	; 0x2c8
      _b = b;
    4540:	mov.w	sl, #21
    4544:	strb.w	sl, [r5, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4548:	mvn.w	sl, #43	; 0x2b
    454c:	strb.w	sl, [r5, #714]	; 0x2ca
      _s = s;
    4550:	mov.w	sl, #90	; 0x5a
    4554:	strb.w	sl, [r5, #715]	; 0x2cb
      _b = b;
    4558:	mov.w	sl, #17
    455c:	strb.w	sl, [r5, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4560:	mvn.w	sl, #50	; 0x32
    4564:	strb.w	sl, [r5, #717]	; 0x2cd
      _s = s;
    4568:	mov.w	sl, #76	; 0x4c
    456c:	strb.w	sl, [r5, #718]	; 0x2ce
      _b = b;
    4570:	mov.w	sl, #20
    4574:	strb.w	sl, [r5, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4578:	mov.w	sl, #113	; 0x71
    457c:	strb.w	sl, [r5, #720]	; 0x2d0
      _s = s;
    4580:	mov.w	sl, #69	; 0x45
    4584:	strb.w	sl, [r5, #721]	; 0x2d1
    4588:	mov.w	sl, #97	; 0x61
    458c:	strb.w	sl, [r5, #724]	; 0x2d4
    4590:	mvn.w	sl, #126	; 0x7e
    4594:	strb.w	sl, [r5, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4598:	strb.w	sl, [r5, #723]	; 0x2d3
    459c:	mvn.w	sl, #122	; 0x7a
    45a0:	strb.w	r1, [r5, #756]	; 0x2f4
    45a4:	strb.w	sl, [r5, #726]	; 0x2d6
      _s = s;
    45a8:	mov.w	sl, #90	; 0x5a
      _b = b;
    45ac:	strb.w	r8, [r5, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45b0:	strb.w	sl, [r5, #727]	; 0x2d7
      _b = b;
    45b4:	mvn.w	sl, #11
    45b8:	strb.w	sl, [r5, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45bc:	mvn.w	sl, #111	; 0x6f
    45c0:	strb.w	sl, [r5, #729]	; 0x2d9
      _s = s;
    45c4:	mov.w	sl, #46	; 0x2e
    45c8:	strb.w	sl, [r5, #730]	; 0x2da
      _b = b;
    45cc:	mvn.w	sl, #5
    45d0:	strb.w	sl, [r5, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45d4:	mvn.w	sl, #107	; 0x6b
    45d8:	strb.w	sl, [r5, #732]	; 0x2dc
      _s = s;
      _b = b;
    45dc:	mvn.w	sl, #4
    45e0:	strb.w	sl, [r5, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45e4:	mvn.w	sl, #91	; 0x5b
    45e8:	strb.w	sl, [r5, #735]	; 0x2df
      _s = s;
    45ec:	mov.w	sl, #85	; 0x55
    45f0:	strb.w	sl, [r5, #736]	; 0x2e0
      _b = b;
    45f4:	mvn.w	sl, #4
    45f8:	strb.w	sl, [r5, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45fc:	mvn.w	sl, #79	; 0x4f
    4600:	strb.w	sl, [r5, #738]	; 0x2e2
      _s = s;
    4604:	mov.w	sl, #121	; 0x79
    4608:	strb.w	sl, [r5, #739]	; 0x2e3
      _b = b;
    460c:	mvn.w	sl, #5
    4610:	strb.w	sl, [r5, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4614:	mvn.w	sl, #69	; 0x45
    4618:	strb.w	sl, [r5, #741]	; 0x2e5
      _s = s;
    461c:	mov.w	sl, #103	; 0x67
    4620:	strb.w	sl, [r5, #742]	; 0x2e6
      _b = b;
    4624:	mvn.w	sl, #6
    4628:	strb.w	sl, [r5, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    462c:	mvn.w	sl, #71	; 0x47
    4630:	strb.w	sl, [r5, #744]	; 0x2e8
      _s = s;
    4634:	mov.w	sl, #69	; 0x45
    4638:	strb.w	sl, [r5, #745]	; 0x2e9
      _b = b;
    463c:	mvn.w	sl, #9
    4640:	strb.w	sl, [r5, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4644:	mvn.w	sl, #68	; 0x44
    4648:	strb.w	sl, [r5, #747]	; 0x2eb
      _s = s;
    464c:	mov.w	sl, #59	; 0x3b
    4650:	strb.w	sl, [r5, #748]	; 0x2ec
      _b = b;
    4654:	mvn.w	sl, #10
    4658:	strb.w	sl, [r5, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    465c:	mvn.w	sl, #105	; 0x69
    4660:	strb.w	sl, [r5, #751]	; 0x2ef
      _b = b;
    4664:	mvn.w	sl, #17
    4668:	strb.w	sl, [r5, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    466c:	mvn.w	sl, #109	; 0x6d
    4670:	strb.w	sl, [r5, #753]	; 0x2f1
      _s = s;
      _b = b;
    4674:	mvn.w	sl, #54	; 0x36
    4678:	strb.w	sl, [r5, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    467c:	mvn.w	sl, #114	; 0x72
    4680:	strb.w	sl, [r5, #757]	; 0x2f5
    4684:	mov.w	sl, #104	; 0x68
    4688:	strb.w	sl, [r5, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    468c:	mvn.w	sl, #87	; 0x57
    4690:	strb.w	sl, [r5, #750]	; 0x2ee
      _s = s;
    4694:	mvn.w	sl, #42	; 0x2a
    4698:	strb.w	sl, [r5, #754]	; 0x2f2
      _b = b;
    469c:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a0:	strb.w	r7, [r5, #765]	; 0x2fd
      _s = s;
      _b = b;
    46a4:	strb.w	sl, [r5, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a8:	mvn.w	sl, #120	; 0x78
    46ac:	strb.w	r0, [r5, #771]	; 0x303
    46b0:	strb.w	sl, [r5, #759]	; 0x2f7
      _s = s;
    46b4:	mvn.w	sl, #104	; 0x68
    46b8:	strb.w	r7, [r5, #778]	; 0x30a
    46bc:	strb.w	sl, [r5, #760]	; 0x2f8
      _b = b;
    46c0:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46c4:	strb.w	lr, [r5, #781]	; 0x30d
      _b = b;
    46c8:	strb.w	sl, [r5, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46cc:	mvn.w	sl, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46d0:	strb.w	r9, [r5, #762]	; 0x2fa
      _s = s;
    46d4:	strb.w	sl, [r5, #763]	; 0x2fb
      _b = b;
    46d8:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46dc:	strb.w	r8, [r5, #768]	; 0x300
      _s = s;
      _b = b;
    46e0:	strb.w	sl, [r5, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46e4:	mvn.w	sl, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46e8:	strb.w	r9, [r5, #777]	; 0x309
      _s = s;
    46ec:	strb.w	sl, [r5, #766]	; 0x2fe
    46f0:	mvn.w	sl, #80	; 0x50
    46f4:	strb.w	sl, [r5, #769]	; 0x301
      _b = b;
    46f8:	mvn.w	sl, #52	; 0x34
    46fc:	strb.w	sl, [r5, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4700:	mov.w	sl, #91	; 0x5b
    4704:	strb.w	sl, [r5, #772]	; 0x304
      _b = b;
    4708:	mvn.w	sl, #35	; 0x23
    470c:	strb.w	sl, [r5, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4710:	mov.w	sl, #99	; 0x63
    4714:	strb.w	sl, [r5, #775]	; 0x307
      _b = b;
    4718:	mvn.w	sl, #19
    471c:	strb.w	sl, [r5, #776]	; 0x308
    4720:	mvn.w	sl, #17
    4724:	strb.w	sl, [r5, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4728:	mvn.w	sl, #103	; 0x67
    472c:	strb.w	sl, [r5, #780]	; 0x30c
      _s = s;
      _b = b;
    4730:	mvn.w	sl, #18
    4734:	strb.w	sl, [r5, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4738:	mvn.w	sl, #107	; 0x6b
    473c:	strb.w	sl, [r5, #783]	; 0x30f
      _s = s;
    4740:	mvn.w	sl, #15
    4744:	strb.w	sl, [r5, #784]	; 0x310
      _b = b;
    4748:	mvn.w	sl, #93	; 0x5d
    474c:	strb.w	sl, [r5, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4750:	mvn.w	sl, #107	; 0x6b
    4754:	strb.w	sl, [r5, #786]	; 0x312
      _s = s;
    4758:	strb.w	sl, [r5, #787]	; 0x313
      _b = b;
    475c:	mov.w	sl, #31
    4760:	strb.w	sl, [r5, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4764:	mvn.w	sl, #122	; 0x7a
    4768:	strb.w	sl, [r5, #789]	; 0x315
      _s = s;
    476c:	mvn.w	sl, #107	; 0x6b
    4770:	strb.w	sl, [r5, #790]	; 0x316
      _b = b;
    4774:	mvn.w	sl, #75	; 0x4b
    4778:	strb.w	sl, [r5, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    477c:	mvn.w	sl, #97	; 0x61
    4780:	strb.w	sl, [r5, #774]	; 0x306
      _s = s;
      _b = b;
    4784:	mov.w	sl, #103	; 0x67
    4788:	strb.w	lr, [r5, #806]	; 0x326
    478c:	strb.w	sl, [r5, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4790:	mov.w	sl, #121	; 0x79
      _s = s;
      _b = b;
    4794:	strb.w	lr, [r5, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4798:	strb.w	sl, [r5, #792]	; 0x318
      _s = s;
    479c:	mov.w	sl, #119	; 0x77
    47a0:	strb.w	fp, [r5, #808]	; 0x328
    47a4:	strb.w	sl, [r5, #793]	; 0x319
      _b = b;
    47a8:	mvn.w	sl, #56	; 0x38
    47ac:	strb.w	sl, [r5, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47b0:	mvn.w	sl, #119	; 0x77
    47b4:	strb.w	sl, [r5, #795]	; 0x31b
      _s = s;
    47b8:	mvn.w	sl, #50	; 0x32
    47bc:	strb.w	sl, [r5, #796]	; 0x31c
      _b = b;
    47c0:	mvn.w	sl, #11
    47c4:	strb.w	sl, [r5, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47c8:	mvn.w	sl, #100	; 0x64
    47cc:	strb.w	sl, [r5, #798]	; 0x31e
      _s = s;
    47d0:	mov.w	sl, #45	; 0x2d
    47d4:	strb.w	sl, [r5, #799]	; 0x31f
      _b = b;
    47d8:	mvn.w	sl, #5
    47dc:	strb.w	sl, [r5, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47e0:	mvn.w	sl, #95	; 0x5f
    47e4:	strb.w	sl, [r5, #801]	; 0x321
      _s = s;
    47e8:	mov.w	sl, #79	; 0x4f
    47ec:	strb.w	sl, [r5, #802]	; 0x322
      _b = b;
    47f0:	mvn.w	sl, #8
    47f4:	strb.w	sl, [r5, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47f8:	mvn.w	sl, #107	; 0x6b
    47fc:	strb.w	sl, [r5, #804]	; 0x324
      _s = s;
    4800:	mov.w	sl, #124	; 0x7c
    4804:	strb.w	sl, [r5, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4808:	mvn.w	sl, #90	; 0x5a
    480c:	strb.w	sl, [r5, #807]	; 0x327
      _s = s;
      _b = b;
    4810:	mvn.w	sl, #7
    4814:	strb.w	sl, [r5, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4818:	mvn.w	sl, #74	; 0x4a
    481c:	strb.w	sl, [r5, #810]	; 0x32a
    4820:	mvn.w	sl, #62	; 0x3e
    4824:	strb.w	sl, [r5, #813]	; 0x32d
      _s = s;
    4828:	mov.w	sl, #88	; 0x58
    482c:	strb.w	sl, [r5, #814]	; 0x32e
      _b = b;
    4830:	mvn.w	sl, #5
    4834:	strb.w	sl, [r5, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4838:	mvn.w	sl, #59	; 0x3b
    483c:	strb.w	sl, [r5, #816]	; 0x330
      _s = s;
      _b = b;
    4840:	mvn.w	sl, #6
    4844:	strb.w	sl, [r5, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4848:	mvn.w	sl, #57	; 0x39
    484c:	strb.w	sl, [r5, #819]	; 0x333
      _s = s;
    4850:	mov.w	sl, #58	; 0x3a
    4854:	strb.w	sl, [r5, #820]	; 0x334
      _b = b;
    4858:	mvn.w	sl, #9
    485c:	strb.w	sl, [r5, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4860:	mvn.w	sl, #73	; 0x49
    4864:	strb.w	sl, [r5, #822]	; 0x336
      _s = s;
    4868:	mov.w	sl, #74	; 0x4a
    486c:	strb.w	sl, [r5, #823]	; 0x337
    4870:	mov.w	sl, #68	; 0x44
    4874:	strb.w	sl, [r5, #811]	; 0x32b
    4878:	mov.w	sl, #75	; 0x4b
    487c:	strb.w	sl, [r5, #817]	; 0x331
      _b = b;
    4880:	mvn.w	sl, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4884:	strb.w	r6, [r5, #841]	; 0x349
      _b = b;
    4888:	strb.w	sl, [r5, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    488c:	mvn.w	sl, #95	; 0x5f
      _s = s;
    4890:	strb.w	ip, [r5, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4894:	strb.w	sl, [r5, #825]	; 0x339
      _s = s;
    4898:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    489c:	strb.w	r0, [r5, #855]	; 0x357
      _s = s;
    48a0:	strb.w	sl, [r5, #826]	; 0x33a
      _b = b;
    48a4:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48a8:	strb.w	fp, [r5, #831]	; 0x33f
      _s = s;
      _b = b;
    48ac:	strb.w	sl, [r5, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48b0:	mvn.w	sl, #102	; 0x66
    48b4:	strb.w	r9, [r5, #840]	; 0x348
    48b8:	strb.w	sl, [r5, #828]	; 0x33c
      _s = s;
    48bc:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48c0:	strb.w	fp, [r5, #843]	; 0x34b
      _s = s;
    48c4:	strb.w	sl, [r5, #829]	; 0x33d
      _b = b;
    48c8:	mvn.w	sl, #58	; 0x3a
    48cc:	strb.w	sl, [r5, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48d0:	mvn.w	sl, #26
    48d4:	strb.w	sl, [r5, #832]	; 0x340
      _b = b;
    48d8:	mvn.w	sl, #48	; 0x30
    48dc:	strb.w	sl, [r5, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48e0:	mvn.w	sl, #118	; 0x76
    48e4:	strb.w	sl, [r5, #834]	; 0x342
      _s = s;
    48e8:	mvn.w	sl, #51	; 0x33
    48ec:	strb.w	sl, [r5, #835]	; 0x343
      _b = b;
    48f0:	mvn.w	sl, #47	; 0x2f
    48f4:	strb.w	sl, [r5, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48f8:	mvn.w	sl, #114	; 0x72
    48fc:	strb.w	sl, [r5, #837]	; 0x345
      _s = s;
    4900:	mvn.w	sl, #68	; 0x44
    4904:	strb.w	sl, [r5, #838]	; 0x346
      _b = b;
    4908:	mvn.w	sl, #66	; 0x42
    490c:	strb.w	sl, [r5, #839]	; 0x347
    4910:	mvn.w	sl, #36	; 0x24
    4914:	strb.w	sl, [r5, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4918:	mov.w	sl, #115	; 0x73
    491c:	strb.w	sl, [r5, #844]	; 0x34c
      _b = b;
    4920:	mvn.w	sl, #24
    4924:	strb.w	sl, [r5, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4928:	mvn.w	sl, #103	; 0x67
    492c:	strb.w	sl, [r5, #846]	; 0x34e
      _s = s;
    4930:	mov.w	sl, #126	; 0x7e
    4934:	strb.w	sl, [r5, #847]	; 0x34f
      _b = b;
    4938:	mvn.w	sl, #22
    493c:	strb.w	sl, [r5, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4940:	mvn.w	sl, #110	; 0x6e
    4944:	strb.w	sl, [r5, #849]	; 0x351
      _s = s;
    4948:	mvn.w	sl, #37	; 0x25
    494c:	strb.w	sl, [r5, #850]	; 0x352
      _b = b;
    4950:	mvn.w	sl, #26
    4954:	strb.w	sl, [r5, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4958:	mvn.w	sl, #107	; 0x6b
    495c:	strb.w	sl, [r5, #852]	; 0x354
      _s = s;
      _b = b;
    4960:	mvn.w	sl, #16
    4964:	strb.w	sl, [r5, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4968:	mov.w	sl, #100	; 0x64
    496c:	strb.w	sl, [r5, #856]	; 0x358
      _b = b;
    4970:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4974:	strb.w	r0, [r5, #858]	; 0x35a
      _s = s;
      _b = b;
    4978:	strb.w	sl, [r5, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    497c:	mvn.w	sl, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4980:	strb.w	r7, [r5, #861]	; 0x35d
      _s = s;
    4984:	strb.w	sl, [r5, #859]	; 0x35b
      _b = b;
    4988:	mov.w	sl, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    498c:	strb.w	lr, [r5, #862]	; 0x35e
      _b = b;
    4990:	strb.w	sl, [r5, #860]	; 0x35c
    4994:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4998:	strb.w	r1, [r5, #864]	; 0x360
      _s = s;
      _b = b;
    499c:	strb.w	sl, [r5, #863]	; 0x35f
    49a0:	mvn.w	sl, #9
    49a4:	strb.w	sl, [r5, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49a8:	mvn.w	sl, #98	; 0x62
    49ac:	strb.w	sl, [r5, #867]	; 0x363
      _s = s;
    49b0:	mov.w	sl, #98	; 0x62
    49b4:	strb.w	sl, [r5, #868]	; 0x364
      _b = b;
    49b8:	mvn.w	sl, #9
    49bc:	strb.w	sl, [r5, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49c0:	mvn.w	sl, #82	; 0x52
    49c4:	strb.w	sl, [r5, #870]	; 0x366
      _s = s;
    49c8:	mov.w	sl, #43	; 0x2b
    49cc:	strb.w	sl, [r5, #871]	; 0x367
      _b = b;
    49d0:	mvn.w	sl, #6
    49d4:	strb.w	sl, [r5, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49d8:	mvn.w	sl, #91	; 0x5b
    49dc:	strb.w	sl, [r5, #873]	; 0x369
      _s = s;
    49e0:	mov.w	sl, #115	; 0x73
    49e4:	strb.w	sl, [r5, #874]	; 0x36a
      _b = b;
    49e8:	mvn.w	sl, #18
    49ec:	strb.w	sl, [r5, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49f0:	mvn.w	sl, #90	; 0x5a
    49f4:	strb.w	sl, [r5, #876]	; 0x36c
      _s = s;
    49f8:	mov.w	sl, #116	; 0x74
    49fc:	strb.w	sl, [r5, #877]	; 0x36d
      _b = b;
    4a00:	mvn.w	sl, #13
    4a04:	strb.w	sl, [r5, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a08:	mvn.w	sl, #89	; 0x59
    4a0c:	strb.w	sl, [r5, #879]	; 0x36f
      _s = s;
    4a10:	mvn.w	sl, #106	; 0x6a
    4a14:	strb.w	sl, [r5, #880]	; 0x370
      _b = b;
    4a18:	mvn.w	sl, #13
    4a1c:	strb.w	sl, [r5, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a20:	mvn.w	sl, #78	; 0x4e
    4a24:	strb.w	sl, [r5, #882]	; 0x372
      _s = s;
    4a28:	mov.w	sl, #113	; 0x71
    4a2c:	strb.w	sl, [r5, #883]	; 0x373
      _b = b;
    4a30:	mvn.w	sl, #10
    4a34:	strb.w	sl, [r5, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a38:	mvn.w	sl, #68	; 0x44
    4a3c:	strb.w	sl, [r5, #885]	; 0x375
      _s = s;
    4a40:	mov.w	sl, #99	; 0x63
    4a44:	strb.w	sl, [r5, #886]	; 0x376
      _b = b;
    4a48:	mvn.w	sl, #11
    4a4c:	strb.w	sl, [r5, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a50:	mvn.w	sl, #61	; 0x3d
    4a54:	strb.w	sl, [r5, #888]	; 0x378
      _s = s;
    4a58:	mov.w	sl, #79	; 0x4f
    4a5c:	strb.w	sl, [r5, #889]	; 0x379
    4a60:	mvn.w	sl, #127	; 0x7f
    4a64:	strb.w	sl, [r5, #865]	; 0x361
      _b = b;
    4a68:	mvn.w	sl, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a6c:	strb.w	r6, [r5, #909]	; 0x38d
      _s = s;
      _b = b;
    4a70:	strb.w	sl, [r5, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a74:	mvn.w	sl, #63	; 0x3f
      _s = s;
    4a78:	strb.w	fp, [r5, #907]	; 0x38b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a7c:	strb.w	sl, [r5, #891]	; 0x37b
      _s = s;
    4a80:	mov.w	sl, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a84:	strb.w	r8, [r5, #912]	; 0x390
      _s = s;
    4a88:	strb.w	sl, [r5, #892]	; 0x37c
      _b = b;
    4a8c:	mvn.w	sl, #15
    4a90:	strb.w	sl, [r5, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a94:	mvn.w	sl, #77	; 0x4d
    4a98:	strb.w	sl, [r5, #894]	; 0x37e
      _s = s;
    4a9c:	mvn.w	sl, #122	; 0x7a
    4aa0:	strb.w	sl, [r5, #895]	; 0x37f
      _b = b;
    4aa4:	mvn.w	sl, #16
    4aa8:	strb.w	sl, [r5, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aac:	mvn.w	sl, #97	; 0x61
    4ab0:	strb.w	sl, [r5, #897]	; 0x381
      _s = s;
    4ab4:	mvn.w	sl, #38	; 0x26
    4ab8:	strb.w	sl, [r5, #898]	; 0x382
      _b = b;
    4abc:	mvn.w	sl, #23
    4ac0:	strb.w	sl, [r5, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ac4:	mvn.w	sl, #99	; 0x63
    4ac8:	strb.w	sl, [r5, #900]	; 0x384
      _s = s;
    4acc:	mvn.w	sl, #6
    4ad0:	strb.w	sl, [r5, #901]	; 0x385
      _b = b;
    4ad4:	mvn.w	sl, #71	; 0x47
    4ad8:	strb.w	sl, [r5, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4adc:	mvn.w	sl, #111	; 0x6f
    4ae0:	strb.w	sl, [r5, #903]	; 0x387
      _s = s;
    4ae4:	mvn.w	sl, #6
    4ae8:	strb.w	sl, [r5, #904]	; 0x388
      _b = b;
    4aec:	mvn.w	sl, #63	; 0x3f
    4af0:	strb.w	sl, [r5, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4af4:	mvn.w	sl, #118	; 0x76
    4af8:	strb.w	sl, [r5, #906]	; 0x38a
      _s = s;
      _b = b;
    4afc:	mvn.w	sl, #75	; 0x4b
    4b00:	strb.w	sl, [r5, #908]	; 0x38c
    4b04:	mvn.w	sl, #32
    4b08:	strb.w	sl, [r5, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b0c:	mov.w	sl, #105	; 0x69
    4b10:	strb.w	sl, [r5, #913]	; 0x391
      _b = b;
    4b14:	mvn.w	sl, #37	; 0x25
    4b18:	strb.w	sl, [r5, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b1c:	mvn.w	sl, #104	; 0x68
    4b20:	strb.w	sl, [r5, #915]	; 0x393
      _s = s;
    4b24:	mov.w	sl, #93	; 0x5d
    4b28:	strb.w	sl, [r5, #916]	; 0x394
      _b = b;
    4b2c:	mvn.w	sl, #27
    4b30:	strb.w	sl, [r5, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b34:	mvn.w	sl, #104	; 0x68
    4b38:	strb.w	sl, [r5, #918]	; 0x396
      _s = s;
    4b3c:	mvn.w	sl, #61	; 0x3d
    4b40:	strb.w	sl, [r5, #919]	; 0x397
      _b = b;
    4b44:	mvn.w	sl, #29
    4b48:	strb.w	sl, [r5, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b4c:	mvn.w	sl, #102	; 0x66
    4b50:	strb.w	sl, [r5, #921]	; 0x399
      _s = s;
    4b54:	mvn.w	sl, #39	; 0x27
    4b58:	strb.w	sl, [r5, #922]	; 0x39a
    4b5c:	mov.w	sl, #108	; 0x6c
    4b60:	strb.w	sl, [r5, #910]	; 0x38e
      _b = b;
    4b64:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b68:	strb.w	r7, [r5, #927]	; 0x39f
      _s = s;
      _b = b;
    4b6c:	strb.w	sl, [r5, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b70:	mvn.w	sl, #104	; 0x68
    4b74:	strb.w	r0, [r5, #933]	; 0x3a5
    4b78:	strb.w	sl, [r5, #924]	; 0x39c
      _s = s;
    4b7c:	mov.w	sl, #124	; 0x7c
      _b = b;
    4b80:	strb.w	ip, [r5, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b84:	strb.w	sl, [r5, #925]	; 0x39d
      _b = b;
    4b88:	mvn.w	sl, #15
    4b8c:	strb.w	ip, [r5, #950]	; 0x3b6
    4b90:	strb.w	sl, [r5, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b94:	mov.w	sl, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b98:	strb.w	fp, [r5, #930]	; 0x3a2
      _s = s;
    4b9c:	strb.w	sl, [r5, #928]	; 0x3a0
      _b = b;
    4ba0:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ba4:	strb.w	r9, [r5, #945]	; 0x3b1
      _s = s;
      _b = b;
    4ba8:	strb.w	sl, [r5, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bac:	mov.w	sl, #58	; 0x3a
    4bb0:	strb.w	sl, [r5, #931]	; 0x3a3
      _b = b;
    4bb4:	mvn.w	sl, #82	; 0x52
    4bb8:	strb.w	sl, [r5, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bbc:	mvn.w	sl, #5
    4bc0:	strb.w	sl, [r5, #934]	; 0x3a6
      _b = b;
    4bc4:	mvn.w	sl, #66	; 0x42
    4bc8:	strb.w	sl, [r5, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bcc:	mvn.w	sl, #122	; 0x7a
    4bd0:	strb.w	sl, [r5, #936]	; 0x3a8
      _s = s;
    4bd4:	mov.w	sl, #52	; 0x34
    4bd8:	strb.w	sl, [r5, #937]	; 0x3a9
      _b = b;
    4bdc:	mvn.w	sl, #4
    4be0:	strb.w	sl, [r5, #938]	; 0x3aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4be4:	mvn.w	sl, #97	; 0x61
    4be8:	strb.w	sl, [r5, #939]	; 0x3ab
      _s = s;
    4bec:	mov.w	sl, #99	; 0x63
    4bf0:	strb.w	sl, [r5, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bf4:	mvn.w	sl, #114	; 0x72
    4bf8:	strb.w	sl, [r5, #942]	; 0x3ae
      _s = s;
    4bfc:	mvn.w	sl, #81	; 0x51
    4c00:	strb.w	sl, [r5, #943]	; 0x3af
      _b = b;
    4c04:	mvn.w	sl, #17
    4c08:	strb.w	sl, [r5, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c0c:	mvn.w	sl, #77	; 0x4d
    4c10:	strb.w	sl, [r5, #946]	; 0x3b2
      _b = b;
    4c14:	mvn.w	sl, #7
    4c18:	strb.w	sl, [r5, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c1c:	mvn.w	sl, #110	; 0x6e
    4c20:	strb.w	sl, [r5, #948]	; 0x3b4
      _s = s;
    4c24:	mvn.w	sl, #80	; 0x50
    4c28:	strb.w	sl, [r5, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c2c:	mvn.w	sl, #106	; 0x6a
    4c30:	strb.w	sl, [r5, #951]	; 0x3b7
      _s = s;
    4c34:	mvn.w	sl, #109	; 0x6d
    4c38:	strb.w	sl, [r5, #952]	; 0x3b8
      _b = b;
    4c3c:	mvn.w	sl, #10
    4c40:	strb.w	sl, [r5, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c44:	mvn.w	sl, #85	; 0x55
    4c48:	strb.w	sl, [r5, #954]	; 0x3ba
      _s = s;
    4c4c:	mvn.w	sl, #92	; 0x5c
    4c50:	strb.w	sl, [r5, #955]	; 0x3bb
      _b = b;
    4c54:	mvn.w	sl, #26
    4c58:	strb.w	ip, [r5, #959]	; 0x3bf
    4c5c:	strb.w	sl, [r5, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c60:	mvn.w	sl, #73	; 0x49
    4c64:	strb.w	r2, [r5, #969]	; 0x3c9
    4c68:	strb.w	sl, [r5, #957]	; 0x3bd
      _s = s;
    4c6c:	mvn.w	sl, #57	; 0x39
      _b = b;
    4c70:	strb.w	r9, [r5, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c74:	strb.w	sl, [r5, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c78:	mvn.w	sl, #55	; 0x37
    4c7c:	strb.w	sl, [r5, #960]	; 0x3c0
      _s = s;
    4c80:	mov.w	sl, #114	; 0x72
    4c84:	strb.w	sl, [r5, #961]	; 0x3c1
      _b = b;
    4c88:	mvn.w	sl, #10
    4c8c:	strb.w	sl, [r5, #962]	; 0x3c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c90:	mvn.w	sl, #54	; 0x36
    4c94:	strb.w	sl, [r5, #963]	; 0x3c3
      _s = s;
    4c98:	mov.w	sl, #104	; 0x68
    4c9c:	strb.w	sl, [r5, #964]	; 0x3c4
      _b = b;
    4ca0:	mvn.w	sl, #33	; 0x21
    4ca4:	strb.w	sl, [r5, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ca8:	mvn.w	sl, #75	; 0x4b
    4cac:	strb.w	sl, [r5, #966]	; 0x3c6
      _s = s;
    4cb0:	mvn.w	sl, #95	; 0x5f
    4cb4:	strb.w	sl, [r5, #967]	; 0x3c7
      _b = b;
    4cb8:	mvn.w	sl, #50	; 0x32
    4cbc:	strb.w	sl, [r5, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cc0:	mov.w	sl, #97	; 0x61
    4cc4:	strb.w	sl, [r5, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cc8:	mvn.w	sl, #97	; 0x61
    4ccc:	strb.w	sl, [r5, #972]	; 0x3cc
      _s = s;
    4cd0:	mvn.w	sl, #70	; 0x46
    4cd4:	strb.w	sl, [r5, #973]	; 0x3cd
      _b = b;
    4cd8:	mvn.w	sl, #89	; 0x59
    4cdc:	strb.w	sl, [r5, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce0:	mvn.w	sl, #70	; 0x46
    4ce4:	strb.w	sl, [r5, #975]	; 0x3cf
      _s = s;
    4ce8:	mvn.w	sl, #111	; 0x6f
    4cec:	strb.w	sl, [r5, #976]	; 0x3d0
      _b = b;
    4cf0:	mvn.w	sl, #25
    4cf4:	strb.w	sl, [r5, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cf8:	mvn.w	sl, #86	; 0x56
    4cfc:	strb.w	sl, [r5, #978]	; 0x3d2
      _s = s;
    4d00:	mvn.w	sl, #90	; 0x5a
    4d04:	strb.w	sl, [r5, #979]	; 0x3d3
      _b = b;
    4d08:	mvn.w	sl, #62	; 0x3e
    4d0c:	strb.w	sl, [r5, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d10:	mvn.w	sl, #103	; 0x67
    4d14:	strb.w	sl, [r5, #981]	; 0x3d5
      _s = s;
    4d18:	mvn.w	sl, #127	; 0x7f
    4d1c:	strb.w	sl, [r5, #982]	; 0x3d6
      _b = b;
    4d20:	mvn.w	sl, #59	; 0x3b
    4d24:	strb.w	sl, [r5, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d28:	mvn.w	sl, #109	; 0x6d
    4d2c:	strb.w	sl, [r5, #984]	; 0x3d8
      _s = s;
    4d30:	mvn.w	sl, #127	; 0x7f
    4d34:	strb.w	sl, [r5, #985]	; 0x3d9
      _b = b;
    4d38:	mvn.w	sl, #46	; 0x2e
    4d3c:	strb.w	sl, [r5, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d40:	mvn.w	sl, #97	; 0x61
    4d44:	strb.w	sl, [r5, #987]	; 0x3db
      _s = s;
    4d48:	mvn.w	sl, #4
    4d4c:	strb.w	sl, [r5, #988]	; 0x3dc
      _b = b;
    4d50:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d54:	strb.w	r7, [r5, #1002]	; 0x3ea
      _s = s;
      _b = b;
    4d58:	strb.w	sl, [r5, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d5c:	mvn.w	sl, #97	; 0x61
      _s = s;
    4d60:	strb.w	fp, [r5, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d64:	strb.w	sl, [r5, #990]	; 0x3de
      _s = s;
    4d68:	mvn.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d6c:	strb.w	r8, [r5, #1005]	; 0x3ed
      _s = s;
    4d70:	strb.w	sl, [r5, #991]	; 0x3df
      _b = b;
    4d74:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d78:	strb.w	r8, [r5, #1014]	; 0x3f6
      _s = s;
      _b = b;
    4d7c:	strb.w	sl, [r5, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d80:	mvn.w	sl, #92	; 0x5c
    4d84:	strb.w	r8, [r5, #1017]	; 0x3f9
    4d88:	strb.w	sl, [r5, #993]	; 0x3e1
      _s = s;
      _b = b;
    4d8c:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d90:	strb.w	r9, [r5, #1020]	; 0x3fc
      _s = s;
      _b = b;
    4d94:	strb.w	sl, [r5, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d98:	mvn.w	sl, #75	; 0x4b
    4d9c:	strb.w	sl, [r5, #996]	; 0x3e4
      _s = s;
    4da0:	mov.w	sl, #69	; 0x45
    4da4:	strb.w	sl, [r5, #997]	; 0x3e5
      _b = b;
    4da8:	mvn.w	sl, #17
    4dac:	strb.w	sl, [r5, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4db0:	mvn.w	sl, #91	; 0x5b
    4db4:	strb.w	sl, [r5, #999]	; 0x3e7
      _s = s;
    4db8:	mov.w	sl, #109	; 0x6d
    4dbc:	strb.w	sl, [r5, #1000]	; 0x3e8
      _b = b;
    4dc0:	mvn.w	sl, #13
    4dc4:	strb.w	sl, [r5, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4dc8:	mov.w	sl, #74	; 0x4a
    4dcc:	strb.w	sl, [r5, #1003]	; 0x3eb
      _b = b;
    4dd0:	mvn.w	sl, #18
    4dd4:	strb.w	sl, [r5, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4dd8:	mov.w	sl, #73	; 0x49
    4ddc:	strb.w	sl, [r5, #1006]	; 0x3ee
      _b = b;
    4de0:	mvn.w	sl, #75	; 0x4b
    4de4:	strb.w	sl, [r5, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4de8:	mvn.w	sl, #120	; 0x78
    4dec:	strb.w	sl, [r5, #1008]	; 0x3f0
      _s = s;
    4df0:	mov.w	sl, #90	; 0x5a
    4df4:	strb.w	sl, [r5, #1009]	; 0x3f1
      _b = b;
    4df8:	mvn.w	sl, #30
    4dfc:	strb.w	sl, [r5, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e00:	mvn.w	sl, #111	; 0x6f
    4e04:	strb.w	sl, [r5, #1011]	; 0x3f3
      _s = s;
    4e08:	mvn.w	sl, #37	; 0x25
    4e0c:	strb.w	sl, [r5, #1012]	; 0x3f4
      _b = b;
    4e10:	mvn.w	sl, #58	; 0x3a
    4e14:	strb.w	sl, [r5, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e18:	mvn.w	sl, #84	; 0x54
    4e1c:	strb.w	sl, [r5, #1015]	; 0x3f7
      _b = b;
    4e20:	mvn.w	sl, #34	; 0x22
    4e24:	strb.w	sl, [r5, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e28:	mvn.w	sl, #25
    4e2c:	strb.w	sl, [r5, #1018]	; 0x3fa
      _b = b;
    4e30:	mvn.w	sl, #43	; 0x2b
    4e34:	strb.w	sl, [r5, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e38:	mvn.w	sl, #84	; 0x54
    4e3c:	strb.w	sl, [r5, #1021]	; 0x3fd
      _b = b;
    4e40:	mvn.w	sl, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e44:	strb.w	r7, [r5, #1023]	; 0x3ff
      _s = s;
      _b = b;
    4e48:	strb.w	sl, [r5, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e4c:	mvn.w	sl, #84	; 0x54
    4e50:	strb.w	r2, [r5, #1051]	; 0x41b
    4e54:	strb.w	sl, [r5, #1024]	; 0x400
      _b = b;
    4e58:	mvn.w	sl, #13
    4e5c:	strb.w	sl, [r5, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e60:	mvn.w	sl, #106	; 0x6a
    4e64:	strb.w	sl, [r5, #1026]	; 0x402
      _s = s;
    4e68:	mvn.w	sl, #99	; 0x63
    4e6c:	strb.w	sl, [r5, #1027]	; 0x403
      _b = b;
    4e70:	mvn.w	sl, #30
    4e74:	strb.w	sl, [r5, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e78:	mvn.w	sl, #85	; 0x55
    4e7c:	strb.w	sl, [r5, #1029]	; 0x405
      _s = s;
    4e80:	mvn.w	sl, #101	; 0x65
    4e84:	strb.w	sl, [r5, #1030]	; 0x406
      _b = b;
    4e88:	mvn.w	sl, #21
    4e8c:	strb.w	sl, [r5, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e90:	mvn.w	sl, #82	; 0x52
    4e94:	strb.w	sl, [r5, #1032]	; 0x408
      _s = s;
    4e98:	mov.w	sl, #103	; 0x67
    4e9c:	strb.w	sl, [r5, #1033]	; 0x409
      _b = b;
    4ea0:	mvn.w	sl, #24
    4ea4:	strb.w	sl, [r5, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ea8:	mvn.w	sl, #70	; 0x46
    4eac:	strb.w	sl, [r5, #1035]	; 0x40b
      _s = s;
    4eb0:	mov.w	sl, #76	; 0x4c
    4eb4:	strb.w	sl, [r5, #1036]	; 0x40c
      _b = b;
    4eb8:	mvn.w	sl, #101	; 0x65
    4ebc:	strb.w	sl, [r5, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ec0:	mov.w	sl, #31
    4ec4:	strb.w	sl, [r5, #1039]	; 0x40f
      _b = b;
    4ec8:	mvn.w	sl, #119	; 0x77
    4ecc:	strb.w	sl, [r5, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ed0:	mvn.w	sl, #104	; 0x68
    4ed4:	strb.w	sl, [r5, #1041]	; 0x411
      _s = s;
      _b = b;
    4ed8:	mov.w	sl, #111	; 0x6f
    4edc:	strb.w	sl, [r5, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ee0:	mvn.w	sl, #96	; 0x60
    4ee4:	strb.w	sl, [r5, #1044]	; 0x414
      _s = s;
    4ee8:	mov.w	sl, #95	; 0x5f
    4eec:	strb.w	sl, [r5, #1045]	; 0x415
      _b = b;
    4ef0:	mvn.w	sl, #55	; 0x37
    4ef4:	strb.w	sl, [r5, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ef8:	mvn.w	sl, #53	; 0x35
    4efc:	strb.w	sl, [r5, #1047]	; 0x417
      _s = s;
    4f00:	mov.w	sl, #47	; 0x2f
    4f04:	strb.w	sl, [r5, #1048]	; 0x418
      _b = b;
    4f08:	mvn.w	sl, #51	; 0x33
    4f0c:	strb.w	sl, [r5, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f10:	mvn.w	sl, #56	; 0x38
    4f14:	strb.w	sl, [r5, #1050]	; 0x41a
      _s = s;
      _b = b;
    4f18:	mvn.w	sl, #28
    4f1c:	strb.w	sl, [r5, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f20:	mvn.w	sl, #73	; 0x49
    4f24:	strb.w	sl, [r5, #1053]	; 0x41d
      _s = s;
    4f28:	mvn.w	sl, #86	; 0x56
    4f2c:	strb.w	sl, [r5, #1054]	; 0x41e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f30:	mov.w	sl, #117	; 0x75
    4f34:	strb.w	sl, [r5, #1038]	; 0x40e
      _s = s;
    4f38:	mov.w	sl, #107	; 0x6b
    4f3c:	strb.w	sl, [r5, #1042]	; 0x412
      _b = b;
    4f40:	mvn.w	sl, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f44:	strb.w	r2, [r5, #1080]	; 0x438
      _s = s;
      _b = b;
    4f48:	strb.w	sl, [r5, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f4c:	mvn.w	sl, #92	; 0x5c
    4f50:	strb.w	r1, [r5, #1083]	; 0x43b
    4f54:	strb.w	sl, [r5, #1056]	; 0x420
      _s = s;
    4f58:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f5c:	strb.w	r7, [r5, #1086]	; 0x43e
      _s = s;
    4f60:	strb.w	sl, [r5, #1057]	; 0x421
      _b = b;
    4f64:	mvn.w	sl, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f68:	strb.w	r9, [r5, #1087]	; 0x43f
      _b = b;
    4f6c:	strb.w	sl, [r5, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f70:	mvn.w	sl, #90	; 0x5a
    4f74:	strb.w	sl, [r5, #1059]	; 0x423
      _s = s;
    4f78:	mvn.w	sl, #32
    4f7c:	strb.w	sl, [r5, #1060]	; 0x424
      _b = b;
    4f80:	mvn.w	sl, #25
    4f84:	strb.w	sl, [r5, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f88:	mvn.w	sl, #97	; 0x61
    4f8c:	strb.w	sl, [r5, #1062]	; 0x426
      _s = s;
    4f90:	mvn.w	sl, #70	; 0x46
    4f94:	strb.w	sl, [r5, #1063]	; 0x427
      _b = b;
    4f98:	mvn.w	sl, #19
    4f9c:	strb.w	sl, [r5, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fa0:	mvn.w	sl, #65	; 0x41
    4fa4:	strb.w	sl, [r5, #1065]	; 0x429
      _s = s;
    4fa8:	mov.w	sl, #119	; 0x77
    4fac:	strb.w	sl, [r5, #1066]	; 0x42a
      _b = b;
    4fb0:	mvn.w	sl, #16
    4fb4:	strb.w	sl, [r5, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fb8:	mvn.w	sl, #66	; 0x42
    4fbc:	strb.w	sl, [r5, #1068]	; 0x42c
      _s = s;
    4fc0:	mvn.w	sl, #92	; 0x5c
    4fc4:	strb.w	sl, [r5, #1069]	; 0x42d
      _b = b;
    4fc8:	mvn.w	sl, #21
    4fcc:	strb.w	sl, [r5, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fd0:	mvn.w	sl, #71	; 0x47
    4fd4:	strb.w	sl, [r5, #1071]	; 0x42f
      _s = s;
    4fd8:	mvn.w	sl, #80	; 0x50
    4fdc:	strb.w	sl, [r5, #1072]	; 0x430
      _b = b;
    4fe0:	mvn.w	sl, #10
    4fe4:	strb.w	sl, [r5, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fe8:	mvn.w	sl, #88	; 0x58
    4fec:	strb.w	sl, [r5, #1074]	; 0x432
      _s = s;
    4ff0:	mov.w	sl, #92	; 0x5c
    4ff4:	strb.w	sl, [r5, #1075]	; 0x433
      _b = b;
    4ff8:	mvn.w	sl, #13
    4ffc:	strb.w	sl, [r5, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5000:	mvn.w	sl, #119	; 0x77
    5004:	strb.w	sl, [r5, #1077]	; 0x435
      _s = s;
      _b = b;
    5008:	mvn.w	sl, #19
    500c:	strb.w	sl, [r5, #1079]	; 0x437
    5010:	mvn.w	sl, #7
    5014:	strb.w	sl, [r5, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5018:	mvn.w	sl, #109	; 0x6d
    501c:	strb.w	sl, [r5, #1084]	; 0x43c
      _b = b;
    5020:	mvn.w	sl, #15
    5024:	strb.w	sl, [r5, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5028:	mov.w	sl, #42	; 0x2a
    502c:	strb.w	sl, [r5, #1078]	; 0x436
    5030:	mov.w	sl, #89	; 0x59
    5034:	strb.w	sl, [r5, #1081]	; 0x439
      _b = b;
    5038:	mvn.w	sl, #15
    503c:	strb.w	ip, [r5, #1091]	; 0x443
    5040:	strb.w	sl, [r5, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5044:	mvn.w	sl, #107	; 0x6b
    5048:	strb.w	r7, [r5, #1092]	; 0x444
    504c:	strb.w	sl, [r5, #1089]	; 0x441
      _s = s;
    5050:	mvn.w	sl, #59	; 0x3b
      _b = b;
    5054:	strb.w	r6, [r5, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5058:	strb.w	sl, [r5, #1093]	; 0x445
      _b = b;
    505c:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5060:	strb.w	r7, [r5, #1113]	; 0x459
      _s = s;
      _b = b;
    5064:	strb.w	sl, [r5, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5068:	mvn.w	sl, #118	; 0x76
      _s = s;
    506c:	strb.w	r8, [r5, #1090]	; 0x442
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5070:	strb.w	sl, [r5, #1095]	; 0x447
      _s = s;
    5074:	mvn.w	sl, #65	; 0x41
    5078:	strb.w	sl, [r5, #1096]	; 0x448
      _b = b;
    507c:	mvn.w	sl, #19
    5080:	strb.w	sl, [r5, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5084:	mvn.w	sl, #109	; 0x6d
    5088:	strb.w	sl, [r5, #1098]	; 0x44a
      _s = s;
    508c:	mvn.w	sl, #103	; 0x67
    5090:	strb.w	sl, [r5, #1099]	; 0x44b
      _b = b;
    5094:	mvn.w	sl, #21
    5098:	strb.w	sl, [r5, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    509c:	mvn.w	sl, #93	; 0x5d
    50a0:	strb.w	sl, [r5, #1101]	; 0x44d
      _s = s;
    50a4:	mvn.w	sl, #51	; 0x33
    50a8:	strb.w	sl, [r5, #1102]	; 0x44e
      _b = b;
    50ac:	mvn.w	sl, #46	; 0x2e
    50b0:	strb.w	sl, [r5, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50b4:	mvn.w	sl, #101	; 0x65
    50b8:	strb.w	sl, [r5, #1104]	; 0x450
      _s = s;
    50bc:	mov.w	sl, #79	; 0x4f
    50c0:	strb.w	sl, [r5, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50c4:	mov.w	sl, #102	; 0x66
    50c8:	strb.w	sl, [r5, #1107]	; 0x453
      _s = s;
    50cc:	mov.w	sl, #103	; 0x67
    50d0:	strb.w	sl, [r5, #1108]	; 0x454
      _b = b;
    50d4:	mov.w	sl, #86	; 0x56
    50d8:	strb.w	sl, [r5, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50dc:	mov.w	sl, #111	; 0x6f
    50e0:	strb.w	sl, [r5, #1111]	; 0x457
      _b = b;
    50e4:	mov.w	sl, #117	; 0x75
    50e8:	strb.w	sl, [r5, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50ec:	mov.w	sl, #58	; 0x3a
    50f0:	strb.w	sl, [r5, #1114]	; 0x45a
      _b = b;
    50f4:	mov.w	sl, #87	; 0x57
    50f8:	strb.w	sl, [r5, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50fc:	mov.w	sl, #18
    5100:	strb.w	sl, [r5, #1116]	; 0x45c
      _s = s;
    5104:	mov.w	sl, #74	; 0x4a
    5108:	strb.w	sl, [r5, #1117]	; 0x45d
      _b = b;
    510c:	mvn.w	sl, #76	; 0x4c
    5110:	strb.w	sl, [r5, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5114:	mov.w	sl, #17
    5118:	strb.w	sl, [r5, #1119]	; 0x45f
      _s = s;
    511c:	mov.w	sl, #94	; 0x5e
    5120:	strb.w	sl, [r5, #1120]	; 0x460
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5124:	mov.w	sl, #80	; 0x50
    5128:	strb.w	sl, [r5, #1110]	; 0x456
      _s = s;
      _b = b;
    512c:	mvn.w	sl, #36	; 0x24
    5130:	strb.w	ip, [r5, #1142]	; 0x476
    5134:	strb.w	sl, [r5, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5138:	mvn.w	sl, #51	; 0x33
    513c:	strb.w	r0, [r5, #1149]	; 0x47d
    5140:	strb.w	sl, [r5, #1122]	; 0x462
      _s = s;
    5144:	mov.w	sl, #99	; 0x63
    5148:	strb.w	sl, [r5, #1123]	; 0x463
      _b = b;
    514c:	mvn.w	sl, #37	; 0x25
    5150:	strb.w	sl, [r5, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5154:	mvn.w	sl, #43	; 0x2b
    5158:	strb.w	sl, [r5, #1125]	; 0x465
      _s = s;
    515c:	mov.w	sl, #32
    5160:	strb.w	sl, [r5, #1126]	; 0x466
      _b = b;
    5164:	mvn.w	sl, #25
    5168:	strb.w	sl, [r5, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    516c:	mvn.w	sl, #70	; 0x46
    5170:	strb.w	sl, [r5, #1128]	; 0x468
      _s = s;
      _b = b;
    5174:	mvn.w	sl, #33	; 0x21
    5178:	strb.w	sl, [r5, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    517c:	mvn.w	sl, #96	; 0x60
    5180:	strb.w	sl, [r5, #1131]	; 0x46b
      _s = s;
    5184:	mvn.w	sl, #18
    5188:	strb.w	sl, [r5, #1132]	; 0x46c
      _b = b;
    518c:	mvn.w	sl, #24
    5190:	strb.w	sl, [r5, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5194:	mvn.w	sl, #83	; 0x53
    5198:	strb.w	sl, [r5, #1134]	; 0x46e
      _s = s;
    519c:	mov.w	sl, #99	; 0x63
    51a0:	strb.w	sl, [r5, #1135]	; 0x46f
      _b = b;
    51a4:	mvn.w	sl, #15
    51a8:	strb.w	sl, [r5, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ac:	mvn.w	sl, #55	; 0x37
    51b0:	strb.w	sl, [r5, #1137]	; 0x471
      _s = s;
    51b4:	mov.w	sl, #60	; 0x3c
    51b8:	strb.w	sl, [r5, #1138]	; 0x472
      _b = b;
    51bc:	mvn.w	sl, #17
    51c0:	strb.w	sl, [r5, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51c4:	mvn.w	sl, #49	; 0x31
    51c8:	strb.w	sl, [r5, #1140]	; 0x474
      _s = s;
    51cc:	mov.w	sl, #58	; 0x3a
    51d0:	strb.w	sl, [r5, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51d4:	mvn.w	sl, #62	; 0x3e
    51d8:	strb.w	sl, [r5, #1143]	; 0x477
      _s = s;
    51dc:	mvn.w	sl, #18
    51e0:	strb.w	sl, [r5, #1144]	; 0x478
      _b = b;
    51e4:	mvn.w	sl, #12
    51e8:	strb.w	sl, [r5, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ec:	mvn.w	sl, #75	; 0x4b
    51f0:	strb.w	sl, [r5, #1146]	; 0x47a
      _s = s;
    51f4:	mov.w	sl, #78	; 0x4e
    51f8:	strb.w	sl, [r5, #1147]	; 0x47b
      _b = b;
    51fc:	mvn.w	sl, #11
    5200:	strb.w	sl, [r5, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5204:	mov.w	sl, #72	; 0x48
    5208:	strb.w	sl, [r5, #1150]	; 0x47e
      _b = b;
    520c:	mvn.w	sl, #18
    5210:	strb.w	sl, [r5, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5214:	mvn.w	sl, #126	; 0x7e
    5218:	strb.w	sl, [r5, #1152]	; 0x480
      _s = s;
    521c:	mvn.w	sl, #84	; 0x54
    5220:	strb.w	sl, [r5, #1153]	; 0x481
    5224:	mov.w	sl, #67	; 0x43
    5228:	strb.w	sl, [r5, #1129]	; 0x469
      _b = b;
    522c:	mvn.w	sl, #19
    5230:	strb.w	ip, [r5, #1163]	; 0x48b
    5234:	strb.w	sl, [r5, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5238:	mvn.w	sl, #122	; 0x7a
      _s = s;
    523c:	strb.w	fp, [r5, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5240:	strb.w	sl, [r5, #1155]	; 0x483
      _s = s;
    5244:	mov.w	sl, #100	; 0x64
    5248:	strb.w	sl, [r5, #1156]	; 0x484
      _b = b;
    524c:	mvn.w	sl, #22
    5250:	strb.w	sl, [r5, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5254:	mvn.w	sl, #111	; 0x6f
    5258:	strb.w	sl, [r5, #1158]	; 0x486
      _s = s;
    525c:	mov.w	sl, #125	; 0x7d
    5260:	strb.w	sl, [r5, #1159]	; 0x487
      _b = b;
    5264:	mvn.w	sl, #28
    5268:	strb.w	sl, [r5, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    526c:	mvn.w	sl, #108	; 0x6c
    5270:	strb.w	sl, [r5, #1161]	; 0x489
      _s = s;
    5274:	mvn.w	sl, #110	; 0x6e
    5278:	strb.w	sl, [r5, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    527c:	mvn.w	sl, #103	; 0x67
    5280:	strb.w	sl, [r5, #1164]	; 0x48c
      _s = s;
      _b = b;
    5284:	mvn.w	sl, #31
    5288:	strb.w	sl, [r5, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    528c:	mvn.w	sl, #118	; 0x76
    5290:	strb.w	sl, [r5, #1167]	; 0x48f
      _s = s;
    5294:	mvn.w	sl, #95	; 0x5f
    5298:	strb.w	sl, [r5, #1168]	; 0x490
      _b = b;
    529c:	mvn.w	sl, #16
    52a0:	strb.w	sl, [r5, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52a4:	mvn.w	sl, #109	; 0x6d
    52a8:	strb.w	sl, [r5, #1170]	; 0x492
      _s = s;
    52ac:	mvn.w	sl, #75	; 0x4b
    52b0:	strb.w	sl, [r5, #1171]	; 0x493
      _b = b;
    52b4:	mvn.w	sl, #18
    52b8:	strb.w	sl, [r5, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52bc:	mvn.w	sl, #111	; 0x6f
    52c0:	strb.w	sl, [r5, #1173]	; 0x495
      _s = s;
    52c4:	mov.w	sl, #97	; 0x61
    52c8:	strb.w	sl, [r5, #1174]	; 0x496
      _b = b;
    52cc:	mvn.w	sl, #64	; 0x40
    52d0:	strb.w	sl, [r5, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52d4:	mov.w	sl, #55	; 0x37
    52d8:	strb.w	sl, [r5, #1176]	; 0x498
      _s = s;
    52dc:	mov.w	sl, #94	; 0x5e
    52e0:	strb.w	sl, [r5, #1177]	; 0x499
      _b = b;
    52e4:	mvn.w	sl, #99	; 0x63
    52e8:	strb.w	sl, [r5, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ec:	mov.w	sl, #44	; 0x2c
    52f0:	strb.w	sl, [r5, #1179]	; 0x49b
      _s = s;
    52f4:	mvn.w	sl, #33	; 0x21
    52f8:	strb.w	sl, [r5, #1180]	; 0x49c
      _b = b;
    52fc:	mov.w	sl, #111	; 0x6f
    5300:	strb.w	sl, [r5, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5304:	mov.w	sl, #85	; 0x55
    5308:	strb.w	sl, [r5, #1182]	; 0x49e
      _s = s;
    530c:	mvn.w	sl, #126	; 0x7e
    5310:	strb.w	sl, [r5, #1183]	; 0x49f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5314:	mov.w	sl, #108	; 0x6c
    5318:	strb.w	sl, [r5, #1185]	; 0x4a1
      _s = s;
    531c:	mvn.w	sl, #82	; 0x52
    5320:	strb.w	sl, [r5, #1186]	; 0x4a2
      _b = b;
    5324:	mov.w	sl, #53	; 0x35
    5328:	strb.w	sl, [r5, #1184]	; 0x4a0
    532c:	mov.w	sl, #47	; 0x2f
    5330:	strb.w	sl, [r5, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5334:	mov.w	sl, #18
    5338:	strb.w	sl, [r5, #1188]	; 0x4a4
      _s = s;
    533c:	mvn.w	sl, #94	; 0x5e
    5340:	strb.w	sl, [r5, #1189]	; 0x4a5
      _b = b;
    5344:	mov.w	sl, #101	; 0x65
    5348:	strb.w	sl, [r5, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    534c:	mvn.w	sl, #30
    5350:	strb.w	sl, [r5, #1191]	; 0x4a7
      _s = s;
    5354:	mov.w	sl, #95	; 0x5f
    5358:	strb.w	sl, [r5, #1192]	; 0x4a8
      _b = b;
    535c:	mvn.w	sl, #89	; 0x59
    5360:	strb.w	sl, [r5, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5364:	mvn.w	sl, #42	; 0x2a
    5368:	strb.w	sl, [r5, #1194]	; 0x4aa
      _s = s;
      _b = b;
    536c:	mvn.w	sl, #29
    5370:	strb.w	sl, [r5, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5374:	mvn.w	sl, #39	; 0x27
    5378:	strb.w	sl, [r5, #1197]	; 0x4ad
      _s = s;
    537c:	mov.w	sl, #33	; 0x21
    5380:	strb.w	sl, [r5, #1198]	; 0x4ae
      _b = b;
    5384:	mvn.w	sl, #21
    5388:	strb.w	sl, [r5, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    538c:	mvn.w	sl, #52	; 0x34
    5390:	strb.w	sl, [r5, #1200]	; 0x4b0
      _s = s;
    5394:	mov.w	sl, #41	; 0x29
    5398:	strb.w	sl, [r5, #1201]	; 0x4b1
      _b = b;
    539c:	mvn.w	sl, #26
    53a0:	strb.w	sl, [r5, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53a4:	mvn.w	sl, #95	; 0x5f
    53a8:	strb.w	sl, [r5, #1203]	; 0x4b3
      _s = s;
    53ac:	mvn.w	sl, #75	; 0x4b
    53b0:	strb.w	sl, [r5, #1204]	; 0x4b4
      _b = b;
    53b4:	mvn.w	sl, #22
    53b8:	strb.w	sl, [r5, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53bc:	mvn.w	sl, #59	; 0x3b
    53c0:	strb.w	sl, [r5, #1206]	; 0x4b6
      _s = s;
    53c4:	mov.w	sl, #111	; 0x6f
    53c8:	strb.w	sl, [r5, #1207]	; 0x4b7
      _b = b;
    53cc:	mvn.w	sl, #18
    53d0:	strb.w	sl, [r5, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53d4:	mvn.w	sl, #65	; 0x41
    53d8:	strb.w	sl, [r5, #1209]	; 0x4b9
      _s = s;
    53dc:	mov.w	sl, #48	; 0x30
    53e0:	strb.w	sl, [r5, #1210]	; 0x4ba
      _b = b;
    53e4:	mvn.w	sl, #18
    53e8:	strb.w	sl, [r5, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53ec:	mvn.w	sl, #41	; 0x29
    53f0:	strb.w	sl, [r5, #1212]	; 0x4bc
      _s = s;
      _b = b;
    53f4:	mvn.w	sl, #17
    53f8:	strb.w	sl, [r5, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53fc:	mvn.w	sl, #59	; 0x3b
    5400:	strb.w	sl, [r5, #1215]	; 0x4bf
      _s = s;
    5404:	mvn.w	sl, #41	; 0x29
    5408:	strb.w	sl, [r5, #1216]	; 0x4c0
      _b = b;
    540c:	mvn.w	sl, #11
    5410:	strb.w	sl, [r5, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5414:	mvn.w	sl, #78	; 0x4e
    5418:	strb.w	sl, [r5, #1218]	; 0x4c2
      _s = s;
    541c:	mov.w	sl, #122	; 0x7a
    5420:	strb.w	sl, [r5, #1219]	; 0x4c3
    5424:	mov.w	sl, #39	; 0x27
    5428:	strb.w	sl, [r5, #1195]	; 0x4ab
    542c:	strb.w	sl, [r5, #1213]	; 0x4bd
      _b = b;
    5430:	mvn.w	sl, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5434:	strb.w	r6, [r5, #1227]	; 0x4cb
      _s = s;
      _b = b;
    5438:	strb.w	sl, [r5, #1220]	; 0x4c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    543c:	mvn.w	sl, #109	; 0x6d
    5440:	strb.w	r7, [r5, #1245]	; 0x4dd
    5444:	strb.w	sl, [r5, #1221]	; 0x4c5
      _s = s;
    5448:	mov.w	sl, #55	; 0x37
    544c:	strb.w	sl, [r5, #1222]	; 0x4c6
      _b = b;
    5450:	mvn.w	sl, #17
    5454:	strb.w	sl, [r5, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5458:	mvn.w	sl, #126	; 0x7e
    545c:	strb.w	sl, [r5, #1224]	; 0x4c8
      _s = s;
    5460:	mvn.w	sl, #95	; 0x5f
    5464:	strb.w	sl, [r5, #1225]	; 0x4c9
      _b = b;
    5468:	mvn.w	sl, #24
    546c:	strb.w	sl, [r5, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5470:	mov.w	sl, #105	; 0x69
    5474:	strb.w	sl, [r5, #1228]	; 0x4cc
      _b = b;
    5478:	mvn.w	sl, #11
    547c:	strb.w	sl, [r5, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5480:	mvn.w	sl, #119	; 0x77
    5484:	strb.w	sl, [r5, #1230]	; 0x4ce
      _s = s;
    5488:	mov.w	sl, #99	; 0x63
    548c:	strb.w	sl, [r5, #1231]	; 0x4cf
      _b = b;
    5490:	mvn.w	sl, #11
    5494:	strb.w	sl, [r5, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5498:	mvn.w	sl, #108	; 0x6c
    549c:	strb.w	sl, [r5, #1233]	; 0x4d1
      _s = s;
    54a0:	mov.w	sl, #103	; 0x67
    54a4:	strb.w	sl, [r5, #1234]	; 0x4d2
      _b = b;
    54a8:	mvn.w	sl, #22
    54ac:	strb.w	sl, [r5, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54b0:	mvn.w	sl, #104	; 0x68
    54b4:	strb.w	sl, [r5, #1236]	; 0x4d4
      _s = s;
    54b8:	mov.w	sl, #79	; 0x4f
    54bc:	strb.w	sl, [r5, #1237]	; 0x4d5
      _b = b;
    54c0:	mvn.w	sl, #18
    54c4:	strb.w	sl, [r5, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54c8:	mvn.w	sl, #110	; 0x6e
    54cc:	strb.w	sl, [r5, #1239]	; 0x4d7
      _s = s;
    54d0:	mov.w	sl, #119	; 0x77
    54d4:	strb.w	sl, [r5, #1240]	; 0x4d8
      _b = b;
    54d8:	mvn.w	sl, #11
    54dc:	strb.w	sl, [r5, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54e0:	mvn.w	sl, #100	; 0x64
    54e4:	strb.w	sl, [r5, #1242]	; 0x4da
      _s = s;
    54e8:	mvn.w	sl, #103	; 0x67
    54ec:	strb.w	sl, [r5, #1243]	; 0x4db
      _b = b;
    54f0:	mvn.w	sl, #18
    54f4:	strb.w	sl, [r5, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54f8:	mov.w	sl, #88	; 0x58
    54fc:	strb.w	sl, [r5, #1246]	; 0x4de
      _b = b;
    5500:	mvn.w	sl, #80	; 0x50
    5504:	strb.w	sl, [r5, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5508:	mov.w	sl, #47	; 0x2f
    550c:	strb.w	sl, [r5, #1248]	; 0x4e0
      _s = s;
    5510:	mov.w	sl, #124	; 0x7c
    5514:	strb.w	sl, [r5, #1249]	; 0x4e1
      _b = b;
    5518:	mov.w	sl, #117	; 0x75
    551c:	strb.w	sl, [r5, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5520:	mov.w	sl, #52	; 0x34
    5524:	strb.w	sl, [r5, #1251]	; 0x4e3
      _s = s;
    5528:	mvn.w	sl, #84	; 0x54
    552c:	strb.w	sl, [r5, #1252]	; 0x4e4
      _b = b;
    5530:	mov.w	sl, #98	; 0x62
    5534:	strb.w	ip, [r5, #1280]	; 0x500
    5538:	strb.w	sl, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    553c:	mvn.w	sl, #48	; 0x30
    5540:	strb.w	sl, [r5, #1255]	; 0x4e7
      _b = b;
    5544:	mov.w	sl, #70	; 0x46
    5548:	strb.w	sl, [r5, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    554c:	mvn.w	sl, #22
    5550:	strb.w	sl, [r5, #1257]	; 0x4e9
      _s = s;
      _b = b;
    5554:	mov.w	sl, #14
    5558:	strb.w	sl, [r5, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    555c:	mov.w	sl, #18
    5560:	strb.w	sl, [r5, #1260]	; 0x4ec
      _s = s;
    5564:	mvn.w	sl, #49	; 0x31
    5568:	strb.w	sl, [r5, #1261]	; 0x4ed
      _b = b;
    556c:	mov.w	sl, #116	; 0x74
    5570:	strb.w	sl, [r5, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5574:	mvn.w	sl, #34	; 0x22
    5578:	strb.w	sl, [r5, #1263]	; 0x4ef
      _s = s;
    557c:	mov.w	sl, #40	; 0x28
    5580:	strb.w	sl, [r5, #1264]	; 0x4f0
      _b = b;
    5584:	mvn.w	sl, #43	; 0x2b
    5588:	strb.w	sl, [r5, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    558c:	strb.w	sl, [r5, #1266]	; 0x4f2
      _s = s;
    5590:	mov.w	sl, #39	; 0x27
    5594:	strb.w	sl, [r5, #1267]	; 0x4f3
      _b = b;
    5598:	mvn.w	sl, #27
    559c:	strb.w	sl, [r5, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55a0:	mvn.w	sl, #39	; 0x27
    55a4:	strb.w	sl, [r5, #1269]	; 0x4f5
      _s = s;
    55a8:	mov.w	sl, #33	; 0x21
    55ac:	strb.w	sl, [r5, #1270]	; 0x4f6
      _b = b;
    55b0:	mvn.w	sl, #22
    55b4:	strb.w	sl, [r5, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55b8:	mov.w	sl, #59	; 0x3b
    55bc:	strb.w	sl, [r5, #1273]	; 0x4f9
      _b = b;
    55c0:	mvn.w	sl, #25
    55c4:	strb.w	sl, [r5, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55c8:	mvn.w	sl, #105	; 0x69
    55cc:	strb.w	sl, [r5, #1275]	; 0x4fb
      _s = s;
    55d0:	mvn.w	sl, #101	; 0x65
    55d4:	strb.w	sl, [r5, #1276]	; 0x4fc
      _b = b;
    55d8:	mvn.w	sl, #24
    55dc:	strb.w	sl, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55e0:	mvn.w	sl, #72	; 0x48
    55e4:	strb.w	sl, [r5, #1278]	; 0x4fe
      _s = s;
    55e8:	mov.w	sl, #122	; 0x7a
    55ec:	strb.w	sl, [r5, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55f0:	mvn.w	sl, #54	; 0x36
    55f4:	strb.w	sl, [r5, #1281]	; 0x501
      _s = s;
    55f8:	mov.w	sl, #80	; 0x50
    55fc:	strb.w	sl, [r5, #1282]	; 0x502
      _b = b;
    5600:	mvn.w	sl, #21
    5604:	strb.w	sl, [r5, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5608:	mvn.w	sl, #51	; 0x33
    560c:	strb.w	sl, [r5, #1284]	; 0x504
      _s = s;
    5610:	mov.w	sl, #75	; 0x4b
    5614:	strb.w	sl, [r5, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5618:	mov.w	sl, #12
    561c:	strb.w	sl, [r5, #1254]	; 0x4e6
      _s = s;
    5620:	mov.w	sl, #36	; 0x24
    5624:	strb.w	sl, [r5, #1258]	; 0x4ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5628:	mvn.w	sl, #60	; 0x3c
    562c:	strb.w	sl, [r5, #1272]	; 0x4f8
      _s = s;
      _b = b;
    5630:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5634:	strb.w	r6, [r5, #1299]	; 0x513
      _s = s;
      _b = b;
    5638:	strb.w	sl, [r5, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    563c:	mvn.w	sl, #57	; 0x39
      _s = s;
    5640:	strb.w	r0, [r5, #1312]	; 0x520
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5644:	strb.w	sl, [r5, #1287]	; 0x507
      _s = s;
    5648:	mvn.w	sl, #55	; 0x37
    564c:	strb.w	sl, [r5, #1288]	; 0x508
      _b = b;
    5650:	mvn.w	sl, #12
    5654:	strb.w	sl, [r5, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5658:	mvn.w	sl, #82	; 0x52
    565c:	strb.w	sl, [r5, #1290]	; 0x50a
      _s = s;
    5660:	mov.w	sl, #124	; 0x7c
    5664:	strb.w	sl, [r5, #1291]	; 0x50b
      _b = b;
    5668:	mvn.w	sl, #12
    566c:	strb.w	sl, [r5, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5670:	mvn.w	sl, #108	; 0x6c
    5674:	strb.w	sl, [r5, #1293]	; 0x50d
      _s = s;
      _b = b;
    5678:	mvn.w	sl, #22
    567c:	strb.w	sl, [r5, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5680:	mvn.w	sl, #127	; 0x7f
    5684:	strb.w	sl, [r5, #1296]	; 0x510
      _s = s;
    5688:	mov.w	sl, #105	; 0x69
    568c:	strb.w	sl, [r5, #1297]	; 0x511
      _b = b;
    5690:	mvn.w	sl, #7
    5694:	strb.w	sl, [r5, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5698:	mvn.w	sl, #100	; 0x64
    569c:	strb.w	sl, [r5, #1300]	; 0x514
      _b = b;
    56a0:	mvn.w	sl, #21
    56a4:	strb.w	sl, [r5, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56a8:	mvn.w	sl, #99	; 0x63
    56ac:	strb.w	sl, [r5, #1302]	; 0x516
      _s = s;
    56b0:	mvn.w	sl, #61	; 0x3d
    56b4:	strb.w	sl, [r5, #1303]	; 0x517
      _b = b;
    56b8:	mvn.w	sl, #26
    56bc:	strb.w	sl, [r5, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56c0:	mvn.w	sl, #96	; 0x60
    56c4:	strb.w	sl, [r5, #1305]	; 0x519
      _s = s;
    56c8:	mov.w	sl, #99	; 0x63
    56cc:	strb.w	sl, [r5, #1306]	; 0x51a
      _b = b;
    56d0:	mvn.w	sl, #21
    56d4:	strb.w	sl, [r5, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56d8:	mvn.w	sl, #96	; 0x60
    56dc:	strb.w	sl, [r5, #1308]	; 0x51c
      _s = s;
    56e0:	mov.w	sl, #96	; 0x60
    56e4:	strb.w	sl, [r5, #1309]	; 0x51d
      _b = b;
    56e8:	mvn.w	sl, #23
    56ec:	strb.w	sl, [r5, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56f0:	mvn.w	sl, #90	; 0x5a
    56f4:	strb.w	sl, [r5, #1311]	; 0x51f
      _s = s;
      _b = b;
    56f8:	mvn.w	sl, #21
    56fc:	strb.w	sl, [r5, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5700:	mvn.w	sl, #98	; 0x62
    5704:	strb.w	sl, [r5, #1314]	; 0x522
      _s = s;
    5708:	mvn.w	sl, #62	; 0x3e
    570c:	strb.w	sl, [r5, #1315]	; 0x523
      _b = b;
    5710:	mvn.w	sl, #22
    5714:	strb.w	sl, [r5, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5718:	mvn.w	sl, #111	; 0x6f
    571c:	strb.w	sl, [r5, #1317]	; 0x525
      _s = s;
    5720:	mvn.w	sl, #96	; 0x60
    5724:	strb.w	sl, [r5, #1318]	; 0x526
    5728:	mov.w	sl, #56	; 0x38
    572c:	strb.w	sl, [r5, #1294]	; 0x50e
      _b = b;
    5730:	mvn.w	sl, #71	; 0x47
    5734:	strb.w	sl, [r5, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5738:	mov.w	sl, #114	; 0x72
    573c:	strb.w	sl, [r5, #1320]	; 0x528
      _s = s;
    5740:	mov.w	sl, #121	; 0x79
    5744:	strb.w	sl, [r5, #1321]	; 0x529
      _b = b;
    5748:	mov.w	sl, #120	; 0x78
    574c:	strb.w	sl, [r5, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5750:	mov.w	sl, #36	; 0x24
    5754:	strb.w	sl, [r5, #1323]	; 0x52b
      _s = s;
    5758:	mvn.w	sl, #49	; 0x31
    575c:	strb.w	sl, [r5, #1324]	; 0x52c
      _b = b;
    5760:	mov.w	sl, #73	; 0x49
    5764:	strb.w	sl, [r5, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5768:	mov.w	sl, #105	; 0x69
    576c:	strb.w	sl, [r5, #1326]	; 0x52e
      _s = s;
    5770:	mvn.w	sl, #85	; 0x55
    5774:	strb.w	sl, [r5, #1327]	; 0x52f
      _b = b;
    5778:	mov.w	sl, #88	; 0x58
    577c:	strb.w	sl, [r5, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5780:	mov.w	sl, #108	; 0x6c
    5784:	strb.w	sl, [r5, #1329]	; 0x531
      _s = s;
    5788:	mvn.w	sl, #67	; 0x43
    578c:	strb.w	sl, [r5, #1330]	; 0x532
      _b = b;
    5790:	mov.w	sl, #46	; 0x2e
    5794:	strb.w	sl, [r5, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5798:	mov.w	sl, #26
    579c:	strb.w	sl, [r5, #1332]	; 0x534
      _s = s;
    57a0:	mov.w	sl, #116	; 0x74
    57a4:	strb.w	sl, [r5, #1333]	; 0x535
      _b = b;
    57a8:	mov.w	sl, #92	; 0x5c
    57ac:	strb.w	sl, [r5, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57b0:	mvn.w	sl, #6
    57b4:	strb.w	sl, [r5, #1335]	; 0x537
      _s = s;
    57b8:	mov.w	sl, #53	; 0x35
    57bc:	strb.w	sl, [r5, #1336]	; 0x538
      _b = b;
    57c0:	mvn.w	sl, #49	; 0x31
    57c4:	strb.w	sl, [r5, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57c8:	mvn.w	sl, #38	; 0x26
    57cc:	strb.w	sl, [r5, #1338]	; 0x53a
      _s = s;
    57d0:	mov.w	sl, #37	; 0x25
    57d4:	strb.w	sl, [r5, #1339]	; 0x53b
      _b = b;
    57d8:	mvn.w	sl, #24
    57dc:	strb.w	sl, [r5, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57e0:	mvn.w	sl, #45	; 0x2d
    57e4:	strb.w	sl, [r5, #1341]	; 0x53d
      _s = s;
    57e8:	mov.w	sl, #48	; 0x30
    57ec:	strb.w	sl, [r5, #1342]	; 0x53e
      _b = b;
    57f0:	mvn.w	sl, #25
    57f4:	strb.w	sl, [r5, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57f8:	mvn.w	sl, #69	; 0x45
    57fc:	strb.w	sl, [r5, #1344]	; 0x540
      _s = s;
    5800:	mov.w	sl, #78	; 0x4e
    5804:	strb.w	sl, [r5, #1345]	; 0x541
      _b = b;
    5808:	mvn.w	sl, #25
    580c:	strb.w	sl, [r5, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5810:	mvn.w	sl, #103	; 0x67
    5814:	strb.w	sl, [r5, #1347]	; 0x543
      _s = s;
    5818:	mvn.w	sl, #56	; 0x38
    581c:	strb.w	sl, [r5, #1348]	; 0x544
      _b = b;
    5820:	mvn.w	sl, #22
    5824:	strb.w	sl, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5828:	mvn.w	sl, #65	; 0x41
    582c:	strb.w	sl, [r5, #1350]	; 0x546
      _s = s;
    5830:	mvn.w	sl, #81	; 0x51
    5834:	strb.w	sl, [r5, #1351]	; 0x547
      _b = b;
    5838:	mvn.w	sl, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    583c:	strb.w	r1, [r5, #1368]	; 0x558
      _s = s;
      _b = b;
    5840:	strb.w	sl, [r5, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5844:	mvn.w	sl, #57	; 0x39
    5848:	strb.w	r2, [r5, #1371]	; 0x55b
    584c:	strb.w	sl, [r5, #1353]	; 0x549
      _s = s;
    5850:	mvn.w	sl, #82	; 0x52
    5854:	strb.w	sl, [r5, #1354]	; 0x54a
      _b = b;
    5858:	mvn.w	sl, #15
    585c:	strb.w	sl, [r5, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5860:	mvn.w	sl, #54	; 0x36
    5864:	strb.w	sl, [r5, #1356]	; 0x54c
      _s = s;
    5868:	mov.w	sl, #117	; 0x75
    586c:	strb.w	sl, [r5, #1357]	; 0x54d
      _b = b;
    5870:	mvn.w	sl, #14
    5874:	strb.w	sl, [r5, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5878:	mvn.w	sl, #59	; 0x3b
    587c:	strb.w	sl, [r5, #1359]	; 0x54f
      _s = s;
    5880:	mvn.w	sl, #64	; 0x40
    5884:	strb.w	sl, [r5, #1360]	; 0x550
      _b = b;
    5888:	mvn.w	sl, #11
    588c:	strb.w	sl, [r5, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5890:	mvn.w	sl, #81	; 0x51
    5894:	strb.w	sl, [r5, #1362]	; 0x552
      _s = s;
    5898:	mvn.w	sl, #121	; 0x79
    589c:	strb.w	sl, [r5, #1363]	; 0x553
      _b = b;
    58a0:	mvn.w	sl, #11
    58a4:	strb.w	sl, [r5, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58a8:	mvn.w	sl, #110	; 0x6e
    58ac:	strb.w	sl, [r5, #1365]	; 0x555
      _s = s;
    58b0:	mov.w	sl, #46	; 0x2e
    58b4:	strb.w	sl, [r5, #1366]	; 0x556
      _b = b;
    58b8:	mvn.w	sl, #19
    58bc:	strb.w	sl, [r5, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58c0:	mvn.w	sl, #59	; 0x3b
    58c4:	strb.w	sl, [r5, #1369]	; 0x559
      _b = b;
    58c8:	mvn.w	sl, #12
    58cc:	strb.w	sl, [r5, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58d0:	mvn.w	sl, #102	; 0x66
    58d4:	strb.w	sl, [r5, #1372]	; 0x55c
      _b = b;
    58d8:	mvn.w	sl, #8
    58dc:	strb.w	sl, [r5, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58e0:	mvn.w	sl, #101	; 0x65
    58e4:	strb.w	sl, [r5, #1374]	; 0x55e
      _s = s;
    58e8:	mvn.w	sl, #90	; 0x5a
    58ec:	strb.w	sl, [r5, #1375]	; 0x55f
      _b = b;
    58f0:	mvn.w	sl, #19
    58f4:	strb.w	sl, [r5, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58f8:	mvn.w	sl, #96	; 0x60
    58fc:	strb.w	sl, [r5, #1377]	; 0x561
      _s = s;
    5900:	mvn.w	sl, #110	; 0x6e
    5904:	strb.w	sl, [r5, #1378]	; 0x562
      _b = b;
    5908:	mvn.w	sl, #13
    590c:	strb.w	sl, [r5, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5910:	mvn.w	sl, #77	; 0x4d
    5914:	strb.w	sl, [r5, #1380]	; 0x564
      _s = s;
    5918:	mvn.w	sl, #66	; 0x42
    591c:	strb.w	sl, [r5, #1381]	; 0x565
      _b = b;
    5920:	mvn.w	sl, #19
    5924:	strb.w	sl, [r5, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5928:	mvn.w	sl, #75	; 0x4b
    592c:	strb.w	sl, [r5, #1383]	; 0x567
      _s = s;
    5930:	mvn.w	sl, #106	; 0x6a
    5934:	strb.w	sl, [r5, #1384]	; 0x568
      _b = b;
    5938:	mvn.w	sl, #16
    593c:	strb.w	ip, [r5, #1388]	; 0x56c
    5940:	strb.w	sl, [r5, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5944:	mvn.w	sl, #81	; 0x51
    5948:	strb.w	sl, [r5, #1386]	; 0x56a
      _s = s;
    594c:	mov.w	sl, #113	; 0x71
    5950:	strb.w	sl, [r5, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5954:	mvn.w	sl, #100	; 0x64
    5958:	strb.w	sl, [r5, #1389]	; 0x56d
      _s = s;
    595c:	mvn.w	sl, #94	; 0x5e
    5960:	strb.w	sl, [r5, #1390]	; 0x56e
      _b = b;
    5964:	mvn.w	sl, #39	; 0x27
    5968:	strb.w	sl, [r5, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    596c:	mov.w	sl, #103	; 0x67
    5970:	strb.w	sl, [r5, #1392]	; 0x570
      _s = s;
    5974:	mov.w	sl, #95	; 0x5f
    5978:	strb.w	sl, [r5, #1393]	; 0x571
      _b = b;
    597c:	mov.w	sl, #126	; 0x7e
    5980:	strb.w	sl, [r5, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5984:	mov.w	sl, #95	; 0x5f
    5988:	strb.w	sl, [r5, #1395]	; 0x573
      _s = s;
    598c:	mov.w	sl, #88	; 0x58
    5990:	strb.w	sl, [r5, #1396]	; 0x574
      _b = b;
    5994:	mvn.w	sl, #114	; 0x72
    5998:	strb.w	sl, [r5, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    599c:	mov.w	sl, #120	; 0x78
    59a0:	strb.w	sl, [r5, #1398]	; 0x576
      _s = s;
    59a4:	mvn.w	sl, #58	; 0x3a
    59a8:	strb.w	sl, [r5, #1399]	; 0x577
      _b = b;
    59ac:	mvn.w	sl, #127	; 0x7f
    59b0:	strb.w	sl, [r5, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59b4:	mov.w	sl, #95	; 0x5f
    59b8:	strb.w	sl, [r5, #1401]	; 0x579
      _s = s;
    59bc:	mvn.w	sl, #84	; 0x54
    59c0:	strb.w	sl, [r5, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59c4:	mov.w	sl, #113	; 0x71
    59c8:	strb.w	sl, [r5, #1404]	; 0x57c
      _s = s;
    59cc:	mvn.w	sl, #126	; 0x7e
    59d0:	strb.w	sl, [r5, #1405]	; 0x57d
      _b = b;
    59d4:	mvn.w	sl, #127	; 0x7f
    59d8:	strb.w	sl, [r5, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59dc:	mvn.w	sl, #34	; 0x22
    59e0:	strb.w	sl, [r5, #1407]	; 0x57f
      _s = s;
    59e4:	mov.w	sl, #64	; 0x40
    59e8:	strb.w	sl, [r5, #1408]	; 0x580
      _b = b;
    59ec:	mvn.w	sl, #90	; 0x5a
    59f0:	strb.w	sl, [r5, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59f4:	mvn.w	sl, #58	; 0x3a
    59f8:	strb.w	sl, [r5, #1410]	; 0x582
      _s = s;
    59fc:	mov.w	sl, #72	; 0x48
    5a00:	strb.w	sl, [r5, #1411]	; 0x583
      _b = b;
    5a04:	mvn.w	sl, #27
    5a08:	strb.w	sl, [r5, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a0c:	mvn.w	sl, #65	; 0x41
    5a10:	strb.w	sl, [r5, #1413]	; 0x585
      _s = s;
    5a14:	mov.w	sl, #108	; 0x6c
    5a18:	strb.w	sl, [r5, #1414]	; 0x586
      _b = b;
    5a1c:	mvn.w	sl, #21
    5a20:	strb.w	sl, [r5, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a24:	mvn.w	sl, #96	; 0x60
    5a28:	strb.w	sl, [r5, #1416]	; 0x588
      _s = s;
    5a2c:	mvn.w	sl, #102	; 0x66
    5a30:	strb.w	sl, [r5, #1417]	; 0x589
      _b = b;
    5a34:	mov.w	sl, #82	; 0x52
    5a38:	strb.w	sl, [r5, #1403]	; 0x57b
    5a3c:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a40:	strb.w	r6, [r5, #1429]	; 0x595
      _b = b;
    5a44:	strb.w	sl, [r5, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a48:	mvn.w	sl, #119	; 0x77
      _s = s;
      _b = b;
    5a4c:	strb.w	ip, [r5, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a50:	strb.w	sl, [r5, #1419]	; 0x58b
      _s = s;
    5a54:	mvn.w	sl, #85	; 0x55
      _b = b;
    5a58:	strb.w	ip, [r5, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a5c:	strb.w	sl, [r5, #1420]	; 0x58c
      _b = b;
    5a60:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a64:	strb.w	r1, [r5, #1443]	; 0x5a3
      _s = s;
      _b = b;
    5a68:	strb.w	sl, [r5, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a6c:	mvn.w	sl, #73	; 0x49
    5a70:	strb.w	sl, [r5, #1422]	; 0x58e
      _s = s;
    5a74:	mov.w	sl, #109	; 0x6d
    5a78:	strb.w	sl, [r5, #1423]	; 0x58f
      _b = b;
    5a7c:	mvn.w	sl, #17
    5a80:	strb.w	sl, [r5, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a84:	mvn.w	sl, #56	; 0x38
    5a88:	strb.w	sl, [r5, #1425]	; 0x591
      _s = s;
    5a8c:	mvn.w	sl, #66	; 0x42
    5a90:	strb.w	sl, [r5, #1426]	; 0x592
      _b = b;
    5a94:	mvn.w	sl, #16
    5a98:	strb.w	sl, [r5, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a9c:	mvn.w	sl, #55	; 0x37
    5aa0:	strb.w	sl, [r5, #1428]	; 0x594
      _s = s;
      _b = b;
    5aa4:	mvn.w	sl, #14
    5aa8:	strb.w	sl, [r5, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5aac:	mvn.w	sl, #63	; 0x3f
    5ab0:	strb.w	sl, [r5, #1431]	; 0x597
      _s = s;
    5ab4:	mvn.w	sl, #81	; 0x51
    5ab8:	strb.w	sl, [r5, #1432]	; 0x598
      _b = b;
    5abc:	mvn.w	sl, #13
    5ac0:	strb.w	sl, [r5, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ac4:	mvn.w	sl, #96	; 0x60
    5ac8:	strb.w	sl, [r5, #1434]	; 0x59a
      _s = s;
    5acc:	mov.w	sl, #124	; 0x7c
    5ad0:	strb.w	sl, [r5, #1435]	; 0x59b
      _b = b;
    5ad4:	mvn.w	sl, #15
    5ad8:	strb.w	sl, [r5, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5adc:	mvn.w	sl, #118	; 0x76
    5ae0:	strb.w	sl, [r5, #1437]	; 0x59d
      _s = s;
    5ae4:	mov.w	sl, #28
    5ae8:	strb.w	sl, [r5, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5aec:	mvn.w	sl, #121	; 0x79
    5af0:	strb.w	sl, [r5, #1440]	; 0x5a0
      _s = s;
    5af4:	mvn.w	sl, #83	; 0x53
    5af8:	strb.w	sl, [r5, #1441]	; 0x5a1
    5afc:	mvn.w	sl, #38	; 0x26
    5b00:	strb.w	sl, [r5, #1444]	; 0x5a4
      _b = b;
    5b04:	mvn.w	sl, #15
    5b08:	strb.w	sl, [r5, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b0c:	mvn.w	sl, #110	; 0x6e
    5b10:	strb.w	sl, [r5, #1446]	; 0x5a6
      _s = s;
    5b14:	mvn.w	sl, #58	; 0x3a
    5b18:	strb.w	sl, [r5, #1447]	; 0x5a7
      _b = b;
    5b1c:	mvn.w	sl, #18
    5b20:	strb.w	sl, [r5, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b24:	mvn.w	sl, #109	; 0x6d
    5b28:	strb.w	sl, [r5, #1449]	; 0x5a9
      _s = s;
      _b = b;
    5b2c:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b30:	strb.w	r6, [r5, #1450]	; 0x5aa
      _b = b;
    5b34:	strb.w	sl, [r5, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b38:	mvn.w	sl, #68	; 0x44
      _s = s;
    5b3c:	strb.w	r1, [r5, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b40:	strb.w	sl, [r5, #1452]	; 0x5ac
      _s = s;
    5b44:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b48:	strb.w	r7, [r5, #1464]	; 0x5b8
      _s = s;
    5b4c:	strb.w	sl, [r5, #1453]	; 0x5ad
      _b = b;
    5b50:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b54:	strb.w	r6, [r5, #1470]	; 0x5be
      _s = s;
      _b = b;
    5b58:	strb.w	sl, [r5, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b5c:	mvn.w	sl, #53	; 0x35
      _s = s;
    5b60:	strb.w	ip, [r5, #1471]	; 0x5bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b64:	strb.w	sl, [r5, #1455]	; 0x5af
      _s = s;
    5b68:	mov.w	sl, #52	; 0x34
      _b = b;
    5b6c:	strb.w	r0, [r5, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b70:	strb.w	sl, [r5, #1456]	; 0x5b0
      _b = b;
    5b74:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b78:	strb.w	r6, [r5, #1473]	; 0x5c1
      _s = s;
      _b = b;
    5b7c:	strb.w	sl, [r5, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b80:	mvn.w	sl, #50	; 0x32
      _s = s;
    5b84:	strb.w	r7, [r5, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b88:	strb.w	sl, [r5, #1458]	; 0x5b2
      _s = s;
    5b8c:	mov.w	sl, #62	; 0x3e
    5b90:	strb.w	sl, [r5, #1459]	; 0x5b3
      _b = b;
    5b94:	mvn.w	sl, #9
    5b98:	strb.w	sl, [r5, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b9c:	mvn.w	sl, #77	; 0x4d
    5ba0:	strb.w	sl, [r5, #1461]	; 0x5b5
      _s = s;
      _b = b;
    5ba4:	mvn.w	sl, #34	; 0x22
    5ba8:	strb.w	sl, [r5, #1463]	; 0x5b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bac:	mvn.w	sl, #46	; 0x2e
    5bb0:	strb.w	sl, [r5, #1465]	; 0x5b9
      _b = b;
    5bb4:	mov.w	sl, #118	; 0x76
    5bb8:	strb.w	sl, [r5, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bbc:	mov.w	sl, #110	; 0x6e
    5bc0:	strb.w	sl, [r5, #1467]	; 0x5bb
      _s = s;
    5bc4:	mvn.w	sl, #63	; 0x3f
    5bc8:	strb.w	sl, [r5, #1468]	; 0x5bc
      _b = b;
    5bcc:	mov.w	sl, #74	; 0x4a
    5bd0:	strb.w	sl, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bd4:	mvn.w	sl, #53	; 0x35
    5bd8:	strb.w	sl, [r5, #1474]	; 0x5c2
      _b = b;
    5bdc:	mov.w	sl, #87	; 0x57
    5be0:	strb.w	sl, [r5, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5be4:	mvn.w	sl, #110	; 0x6e
    5be8:	strb.w	sl, [r5, #1476]	; 0x5c4
      _s = s;
      _b = b;
    5bec:	mov.w	sl, #102	; 0x66
    5bf0:	strb.w	sl, [r5, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bf4:	mvn.w	sl, #97	; 0x61
    5bf8:	strb.w	sl, [r5, #1479]	; 0x5c7
      _s = s;
    5bfc:	mvn.w	sl, #79	; 0x4f
    5c00:	strb.w	sl, [r5, #1480]	; 0x5c8
      _b = b;
    5c04:	mvn.w	sl, #51	; 0x33
    5c08:	strb.w	sl, [r5, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c0c:	mvn.w	sl, #95	; 0x5f
    5c10:	strb.w	sl, [r5, #1482]	; 0x5ca
      _s = s;
    5c14:	mvn.w	sl, #28
    5c18:	strb.w	sl, [r5, #1483]	; 0x5cb
      _b = b;
    5c1c:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c20:	strb.w	lr, [r5, #1489]	; 0x5d1
      _b = b;
    5c24:	strb.w	sl, [r5, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c28:	mvn.w	sl, #96	; 0x60
      _s = s;
      _b = b;
    5c2c:	strb.w	ip, [r5, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c30:	strb.w	sl, [r5, #1485]	; 0x5cd
      _s = s;
    5c34:	mvn.w	sl, #5
    5c38:	strb.w	r7, [r5, #1498]	; 0x5da
    5c3c:	strb.w	sl, [r5, #1486]	; 0x5ce
      _b = b;
    5c40:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c44:	strb.w	r6, [r5, #1504]	; 0x5e0
      _b = b;
    5c48:	strb.w	sl, [r5, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c4c:	mvn.w	sl, #98	; 0x62
      _s = s;
    5c50:	strb.w	r9, [r5, #1495]	; 0x5d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c54:	strb.w	sl, [r5, #1488]	; 0x5d0
      _s = s;
      _b = b;
    5c58:	mvn.w	sl, #28
    5c5c:	strb.w	sl, [r5, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c60:	mvn.w	sl, #108	; 0x6c
    5c64:	strb.w	sl, [r5, #1491]	; 0x5d3
      _s = s;
    5c68:	mvn.w	sl, #60	; 0x3c
    5c6c:	strb.w	sl, [r5, #1492]	; 0x5d4
      _b = b;
    5c70:	mvn.w	sl, #26
    5c74:	strb.w	sl, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c78:	mvn.w	sl, #101	; 0x65
    5c7c:	strb.w	sl, [r5, #1494]	; 0x5d6
    5c80:	mvn.w	sl, #66	; 0x42
    5c84:	strb.w	sl, [r5, #1497]	; 0x5d9
      _s = s;
      _b = b;
    5c88:	mvn.w	sl, #16
    5c8c:	strb.w	sl, [r5, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c90:	mvn.w	sl, #61	; 0x3d
    5c94:	strb.w	sl, [r5, #1500]	; 0x5dc
      _s = s;
    5c98:	mov.w	sl, #115	; 0x73
    5c9c:	strb.w	sl, [r5, #1501]	; 0x5dd
      _b = b;
    5ca0:	mvn.w	sl, #16
    5ca4:	strb.w	sl, [r5, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ca8:	mvn.w	sl, #88	; 0x58
    5cac:	strb.w	sl, [r5, #1503]	; 0x5df
      _s = s;
      _b = b;
    5cb0:	mvn.w	sl, #15
    5cb4:	strb.w	sl, [r5, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cb8:	mvn.w	sl, #111	; 0x6f
    5cbc:	strb.w	sl, [r5, #1506]	; 0x5e2
      _s = s;
    5cc0:	mov.w	sl, #113	; 0x71
    5cc4:	strb.w	sl, [r5, #1507]	; 0x5e3
      _b = b;
    5cc8:	mvn.w	sl, #17
    5ccc:	strb.w	sl, [r5, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cd0:	mvn.w	sl, #120	; 0x78
    5cd4:	strb.w	sl, [r5, #1509]	; 0x5e5
      _s = s;
    5cd8:	mov.w	sl, #57	; 0x39
    5cdc:	strb.w	sl, [r5, #1510]	; 0x5e6
      _b = b;
    5ce0:	mvn.w	sl, #21
    5ce4:	strb.w	sl, [r5, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ce8:	mov.w	sl, #94	; 0x5e
    5cec:	strb.w	sl, [r5, #1512]	; 0x5e8
      _s = s;
    5cf0:	mov.w	sl, #40	; 0x28
    5cf4:	strb.w	sl, [r5, #1513]	; 0x5e9
      _b = b;
    5cf8:	mvn.w	sl, #87	; 0x57
    5cfc:	strb.w	sl, [r5, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d00:	mov.w	sl, #122	; 0x7a
    5d04:	strb.w	sl, [r5, #1515]	; 0x5eb
      _s = s;
    5d08:	mov.w	sl, #116	; 0x74
    5d0c:	strb.w	sl, [r5, #1516]	; 0x5ec
      _b = b;
    5d10:	mvn.w	sl, #65	; 0x41
    5d14:	strb.w	r0, [r5, #1544]	; 0x608
    5d18:	strb.w	sl, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d1c:	mvn.w	sl, #118	; 0x76
    5d20:	strb.w	sl, [r5, #1518]	; 0x5ee
      _s = s;
    5d24:	mvn.w	sl, #50	; 0x32
    5d28:	strb.w	sl, [r5, #1519]	; 0x5ef
      _b = b;
    5d2c:	mvn.w	sl, #23
    5d30:	strb.w	sl, [r5, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d34:	mvn.w	sl, #103	; 0x67
    5d38:	strb.w	sl, [r5, #1521]	; 0x5f1
      _s = s;
    5d3c:	mvn.w	sl, #93	; 0x5d
    5d40:	strb.w	sl, [r5, #1522]	; 0x5f2
      _b = b;
    5d44:	mvn.w	sl, #9
    5d48:	strb.w	sl, [r5, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d4c:	mvn.w	sl, #71	; 0x47
    5d50:	strb.w	sl, [r5, #1524]	; 0x5f4
      _s = s;
    5d54:	mov.w	sl, #108	; 0x6c
    5d58:	strb.w	sl, [r5, #1525]	; 0x5f5
      _b = b;
    5d5c:	mvn.w	sl, #6
    5d60:	strb.w	sl, [r5, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d64:	mvn.w	sl, #51	; 0x33
    5d68:	strb.w	sl, [r5, #1527]	; 0x5f7
      _s = s;
    5d6c:	mov.w	sl, #59	; 0x3b
    5d70:	strb.w	sl, [r5, #1528]	; 0x5f8
      _b = b;
    5d74:	mvn.w	sl, #6
    5d78:	strb.w	sl, [r5, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d7c:	mvn.w	sl, #47	; 0x2f
    5d80:	strb.w	sl, [r5, #1530]	; 0x5fa
      _s = s;
      _b = b;
    5d84:	mvn.w	sl, #9
    5d88:	strb.w	sl, [r5, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d8c:	mvn.w	sl, #38	; 0x26
    5d90:	strb.w	sl, [r5, #1533]	; 0x5fd
      _s = s;
    5d94:	mov.w	sl, #37	; 0x25
    5d98:	strb.w	sl, [r5, #1534]	; 0x5fe
      _b = b;
    5d9c:	mvn.w	sl, #11
    5da0:	strb.w	sl, [r5, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5da4:	mvn.w	sl, #94	; 0x5e
    5da8:	strb.w	sl, [r5, #1536]	; 0x600
      _s = s;
      _b = b;
    5dac:	mvn.w	sl, #77	; 0x4d
    5db0:	strb.w	sl, [r5, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5db4:	mov.w	sl, #91	; 0x5b
    5db8:	strb.w	sl, [r5, #1540]	; 0x604
      _b = b;
    5dbc:	mvn.w	sl, #104	; 0x68
    5dc0:	strb.w	sl, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dc4:	mov.w	sl, #118	; 0x76
    5dc8:	strb.w	sl, [r5, #1542]	; 0x606
      _s = s;
    5dcc:	mvn.w	sl, #63	; 0x3f
    5dd0:	strb.w	sl, [r5, #1543]	; 0x607
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd4:	mov.w	sl, #100	; 0x64
    5dd8:	strb.w	sl, [r5, #1545]	; 0x609
      _s = s;
    5ddc:	mvn.w	sl, #65	; 0x41
    5de0:	strb.w	sl, [r5, #1546]	; 0x60a
      _b = b;
    5de4:	mov.w	sl, #63	; 0x3f
    5de8:	strb.w	sl, [r5, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dec:	mvn.w	sl, #110	; 0x6e
    5df0:	strb.w	sl, [r5, #1548]	; 0x60c
      _s = s;
    5df4:	mvn.w	sl, #13
    5df8:	strb.w	sl, [r5, #1549]	; 0x60d
    5dfc:	mov.w	sl, #81	; 0x51
    5e00:	strb.w	sl, [r5, #1531]	; 0x5fb
    5e04:	strb.w	sl, [r5, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e08:	mov.w	sl, #84	; 0x54
    5e0c:	strb.w	sl, [r5, #1539]	; 0x603
    5e10:	mvn.w	sl, #107	; 0x6b
      _s = s;
      _b = b;
    5e14:	strb.w	r7, [r5, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e18:	strb.w	sl, [r5, #1551]	; 0x60f
      _s = s;
      _b = b;
    5e1c:	mvn.w	sl, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e20:	strb.w	lr, [r5, #1552]	; 0x610
      _b = b;
    5e24:	strb.w	sl, [r5, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e28:	mvn.w	sl, #101	; 0x65
      _s = s;
    5e2c:	strb.w	lr, [r5, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e30:	strb.w	sl, [r5, #1554]	; 0x612
      _s = s;
    5e34:	mvn.w	sl, #105	; 0x69
      _b = b;
    5e38:	strb.w	ip, [r5, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e3c:	strb.w	sl, [r5, #1555]	; 0x613
      _b = b;
    5e40:	mvn.w	sl, #31
    5e44:	strb.w	ip, [r5, #1577]	; 0x629
    5e48:	strb.w	sl, [r5, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e4c:	mov.w	sl, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e50:	strb.w	fp, [r5, #1557]	; 0x615
      _s = s;
    5e54:	strb.w	sl, [r5, #1558]	; 0x616
      _b = b;
    5e58:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e5c:	strb.w	r8, [r5, #1578]	; 0x62a
      _s = s;
      _b = b;
    5e60:	strb.w	sl, [r5, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e64:	mvn.w	sl, #107	; 0x6b
    5e68:	strb.w	fp, [r5, #1581]	; 0x62d
    5e6c:	strb.w	sl, [r5, #1560]	; 0x618
      _s = s;
    5e70:	mvn.w	sl, #121	; 0x79
    5e74:	strb.w	sl, [r5, #1561]	; 0x619
      _b = b;
    5e78:	mvn.w	sl, #32
    5e7c:	strb.w	sl, [r5, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e80:	mvn.w	sl, #96	; 0x60
    5e84:	strb.w	sl, [r5, #1563]	; 0x61b
      _s = s;
      _b = b;
    5e88:	mvn.w	sl, #39	; 0x27
    5e8c:	strb.w	sl, [r5, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e90:	mvn.w	sl, #110	; 0x6e
    5e94:	strb.w	sl, [r5, #1566]	; 0x61e
      _s = s;
    5e98:	mvn.w	sl, #47	; 0x2f
    5e9c:	strb.w	sl, [r5, #1567]	; 0x61f
      _b = b;
    5ea0:	mvn.w	sl, #24
    5ea4:	strb.w	sl, [r5, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ea8:	mvn.w	sl, #110	; 0x6e
    5eac:	strb.w	sl, [r5, #1569]	; 0x621
      _s = s;
    5eb0:	mvn.w	sl, #40	; 0x28
    5eb4:	strb.w	sl, [r5, #1570]	; 0x622
      _b = b;
    5eb8:	mvn.w	sl, #23
    5ebc:	strb.w	sl, [r5, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ec0:	mvn.w	sl, #106	; 0x6a
    5ec4:	strb.w	sl, [r5, #1572]	; 0x624
      _s = s;
    5ec8:	mvn.w	sl, #59	; 0x3b
    5ecc:	strb.w	sl, [r5, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ed0:	mvn.w	sl, #107	; 0x6b
    5ed4:	strb.w	sl, [r5, #1575]	; 0x627
      _s = s;
    5ed8:	mvn.w	sl, #87	; 0x57
    5edc:	strb.w	sl, [r5, #1576]	; 0x628
    5ee0:	mov.w	sl, #61	; 0x3d
    5ee4:	strb.w	sl, [r5, #1579]	; 0x62b
      _b = b;
    5ee8:	mvn.w	sl, #23
    5eec:	strb.w	sl, [r5, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ef0:	mov.w	sl, #63	; 0x3f
    5ef4:	strb.w	sl, [r5, #1582]	; 0x62e
      _b = b;
    5ef8:	mvn.w	sl, #22
    5efc:	strb.w	sl, [r5, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f00:	mvn.w	sl, #12
    5f04:	strb.w	sl, [r5, #1584]	; 0x630
      _s = s;
    5f08:	mov.w	sl, #88	; 0x58
    5f0c:	strb.w	sl, [r5, #1585]	; 0x631
      _b = b;
    5f10:	mov.w	sl, #43	; 0x2b
    5f14:	strb.w	sl, [r5, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f18:	mov.w	sl, #59	; 0x3b
    5f1c:	strb.w	sl, [r5, #1587]	; 0x633
      _s = s;
    5f20:	mov.w	sl, #44	; 0x2c
    5f24:	strb.w	sl, [r5, #1588]	; 0x634
      _b = b;
    5f28:	mov.w	sl, #57	; 0x39
    5f2c:	strb.w	sl, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f30:	mov.w	sl, #125	; 0x7d
    5f34:	strb.w	sl, [r5, #1590]	; 0x636
      _s = s;
    5f38:	mov.w	sl, #79	; 0x4f
    5f3c:	strb.w	sl, [r5, #1591]	; 0x637
      _b = b;
    5f40:	mvn.w	sl, #47	; 0x2f
    5f44:	strb.w	sl, [r5, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f48:	mvn.w	sl, #121	; 0x79
    5f4c:	strb.w	sl, [r5, #1593]	; 0x639
      _s = s;
    5f50:	mov.w	sl, #95	; 0x5f
    5f54:	strb.w	sl, [r5, #1594]	; 0x63a
      _b = b;
    5f58:	mvn.w	sl, #9
    5f5c:	strb.w	sl, [r5, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f60:	mvn.w	sl, #66	; 0x42
    5f64:	strb.w	sl, [r5, #1596]	; 0x63c
      _s = s;
    5f68:	mov.w	sl, #116	; 0x74
    5f6c:	strb.w	sl, [r5, #1597]	; 0x63d
      _b = b;
    5f70:	mvn.w	sl, #5
    5f74:	strb.w	sl, [r5, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f78:	mvn.w	sl, #64	; 0x40
    5f7c:	strb.w	sl, [r5, #1599]	; 0x63f
      _s = s;
    5f80:	mov.w	sl, #50	; 0x32
    5f84:	strb.w	sl, [r5, #1600]	; 0x640
      _b = b;
    5f88:	mvn.w	sl, #6
    5f8c:	strb.w	sl, [r5, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f90:	mvn.w	sl, #45	; 0x2d
    5f94:	strb.w	sl, [r5, #1602]	; 0x642
      _s = s;
    5f98:	mov.w	sl, #57	; 0x39
    5f9c:	strb.w	sl, [r5, #1603]	; 0x643
      _b = b;
    5fa0:	mvn.w	sl, #9
    5fa4:	strb.w	sl, [r5, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fa8:	mvn.w	sl, #50	; 0x32
    5fac:	strb.w	sl, [r5, #1605]	; 0x645
      _s = s;
    5fb0:	mov.w	sl, #41	; 0x29
    5fb4:	strb.w	sl, [r5, #1606]	; 0x646
      _b = b;
    5fb8:	mvn.w	sl, #15
    5fbc:	strb.w	sl, [r5, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fc0:	mvn.w	sl, #94	; 0x5e
    5fc4:	strb.w	sl, [r5, #1608]	; 0x648
      _s = s;
    5fc8:	mov.w	sl, #117	; 0x75
    5fcc:	strb.w	sl, [r5, #1609]	; 0x649
      _b = b;
    5fd0:	mvn.w	sl, #28
    5fd4:	strb.w	sl, [r5, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fd8:	mvn.w	sl, #121	; 0x79
    5fdc:	strb.w	sl, [r5, #1611]	; 0x64b
      _s = s;
    5fe0:	mvn.w	sl, #12
    5fe4:	strb.w	sl, [r5, #1612]	; 0x64c
      _b = b;
    5fe8:	mvn.w	sl, #35	; 0x23
    5fec:	strb.w	sl, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ff0:	mvn.w	sl, #118	; 0x76
    5ff4:	strb.w	sl, [r5, #1614]	; 0x64e
      _s = s;
    5ff8:	mvn.w	sl, #19
    5ffc:	strb.w	sl, [r5, #1615]	; 0x64f
      _b = b;
    6000:	mvn.w	sl, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6004:	strb.w	r7, [r5, #1641]	; 0x669
      _s = s;
      _b = b;
    6008:	strb.w	sl, [r5, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    600c:	mvn.w	sl, #108	; 0x6c
    6010:	strb.w	r6, [r5, #1647]	; 0x66f
    6014:	strb.w	sl, [r5, #1617]	; 0x651
      _s = s;
    6018:	mvn.w	sl, #43	; 0x2b
    601c:	strb.w	r8, [r5, #1627]	; 0x65b
    6020:	strb.w	sl, [r5, #1618]	; 0x652
      _b = b;
    6024:	mov.w	sl, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6028:	strb.w	r9, [r5, #1644]	; 0x66c
      _s = s;
      _b = b;
    602c:	strb.w	sl, [r5, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6030:	mvn.w	sl, #122	; 0x7a
    6034:	strb.w	sl, [r5, #1620]	; 0x654
      _s = s;
    6038:	mvn.w	sl, #25
    603c:	strb.w	sl, [r5, #1621]	; 0x655
      _b = b;
    6040:	mvn.w	sl, #100	; 0x64
    6044:	strb.w	sl, [r5, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6048:	mov.w	sl, #57	; 0x39
    604c:	strb.w	sl, [r5, #1623]	; 0x657
      _s = s;
    6050:	mov.w	sl, #99	; 0x63
    6054:	strb.w	sl, [r5, #1624]	; 0x658
      _b = b;
    6058:	mvn.w	sl, #43	; 0x2b
    605c:	strb.w	sl, [r5, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6060:	mov.w	sl, #42	; 0x2a
    6064:	strb.w	sl, [r5, #1626]	; 0x65a
      _s = s;
      _b = b;
    6068:	mvn.w	sl, #39	; 0x27
    606c:	strb.w	sl, [r5, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6070:	mov.w	sl, #33	; 0x21
    6074:	strb.w	sl, [r5, #1629]	; 0x65d
      _s = s;
    6078:	mvn.w	sl, #84	; 0x54
    607c:	strb.w	sl, [r5, #1630]	; 0x65e
      _b = b;
    6080:	mvn.w	sl, #30
    6084:	strb.w	sl, [r5, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6088:	mov.w	sl, #34	; 0x22
    608c:	strb.w	sl, [r5, #1632]	; 0x660
      _s = s;
    6090:	mov.w	sl, #91	; 0x5b
    6094:	strb.w	sl, [r5, #1633]	; 0x661
      _b = b;
    6098:	mvn.w	sl, #47	; 0x2f
    609c:	strb.w	sl, [r5, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60a0:	mvn.w	sl, #102	; 0x66
    60a4:	strb.w	sl, [r5, #1635]	; 0x663
      _s = s;
    60a8:	mvn.w	sl, #85	; 0x55
    60ac:	strb.w	sl, [r5, #1636]	; 0x664
      _b = b;
    60b0:	mvn.w	sl, #36	; 0x24
    60b4:	strb.w	sl, [r5, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60b8:	mvn.w	sl, #101	; 0x65
    60bc:	strb.w	sl, [r5, #1638]	; 0x666
      _s = s;
    60c0:	mvn.w	sl, #2
    60c4:	strb.w	sl, [r5, #1639]	; 0x667
      _b = b;
    60c8:	mvn.w	sl, #36	; 0x24
    60cc:	strb.w	sl, [r5, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60d0:	mvn.w	sl, #57	; 0x39
    60d4:	strb.w	sl, [r5, #1642]	; 0x66a
      _b = b;
    60d8:	mvn.w	sl, #23
    60dc:	strb.w	sl, [r5, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60e0:	mov.w	sl, #57	; 0x39
    60e4:	strb.w	sl, [r5, #1645]	; 0x66d
      _b = b;
    60e8:	mvn.w	sl, #26
    60ec:	strb.w	sl, [r5, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60f0:	mov.w	sl, #24
    60f4:	strb.w	sl, [r5, #1648]	; 0x670
      _b = b;
    60f8:	mvn.w	sl, #27
    60fc:	strb.w	ip, [r5, #1670]	; 0x686
    6100:	strb.w	sl, [r5, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6104:	mvn.w	sl, #114	; 0x72
    6108:	strb.w	sl, [r5, #1650]	; 0x672
      _s = s;
    610c:	mov.w	sl, #83	; 0x53
    6110:	strb.w	sl, [r5, #1651]	; 0x673
      _b = b;
    6114:	mvn.w	sl, #25
    6118:	strb.w	sl, [r5, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    611c:	mvn.w	sl, #43	; 0x2b
    6120:	strb.w	sl, [r5, #1653]	; 0x675
      _s = s;
    6124:	mov.w	sl, #14
    6128:	strb.w	sl, [r5, #1654]	; 0x676
      _b = b;
    612c:	mvn.w	sl, #41	; 0x29
    6130:	strb.w	sl, [r5, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6134:	mvn.w	sl, #8
    6138:	strb.w	sl, [r5, #1656]	; 0x678
      _s = s;
    613c:	mov.w	sl, #94	; 0x5e
    6140:	strb.w	sl, [r5, #1657]	; 0x679
      _b = b;
    6144:	mov.w	sl, #46	; 0x2e
    6148:	strb.w	sl, [r5, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    614c:	mov.w	sl, #1
    6150:	strb.w	sl, [r5, #1659]	; 0x67b
      _s = s;
    6154:	mov.w	sl, #90	; 0x5a
    6158:	strb.w	sl, [r5, #1660]	; 0x67c
      _b = b;
    615c:	mov.w	sl, #62	; 0x3e
    6160:	strb.w	sl, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6164:	mvn.w	sl, #107	; 0x6b
    6168:	strb.w	sl, [r5, #1662]	; 0x67e
      _s = s;
    616c:	mov.w	sl, #95	; 0x5f
    6170:	strb.w	sl, [r5, #1663]	; 0x67f
      _b = b;
    6174:	mov.w	sl, #88	; 0x58
    6178:	strb.w	sl, [r5, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    617c:	mvn.w	sl, #119	; 0x77
    6180:	strb.w	sl, [r5, #1665]	; 0x681
      _s = s;
    6184:	mvn.w	sl, #69	; 0x45
    6188:	strb.w	sl, [r5, #1666]	; 0x682
      _b = b;
    618c:	mvn.w	sl, #53	; 0x35
    6190:	strb.w	sl, [r5, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6194:	mvn.w	sl, #111	; 0x6f
    6198:	strb.w	sl, [r5, #1668]	; 0x684
      _s = s;
    619c:	mov.w	sl, #95	; 0x5f
    61a0:	strb.w	sl, [r5, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61a4:	mvn.w	sl, #103	; 0x67
    61a8:	strb.w	sl, [r5, #1671]	; 0x687
      _s = s;
    61ac:	mov.w	sl, #69	; 0x45
    61b0:	strb.w	sl, [r5, #1672]	; 0x688
      _b = b;
    61b4:	mvn.w	sl, #8
    61b8:	strb.w	sl, [r5, #1673]	; 0x689
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61bc:	mvn.w	sl, #55	; 0x37
    61c0:	strb.w	sl, [r5, #1674]	; 0x68a
      _s = s;
    61c4:	mov.w	sl, #43	; 0x2b
    61c8:	strb.w	sl, [r5, #1675]	; 0x68b
      _b = b;
    61cc:	mvn.w	sl, #7
    61d0:	strb.w	sl, [r5, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61d4:	mvn.w	sl, #58	; 0x3a
    61d8:	strb.w	sl, [r5, #1677]	; 0x68d
      _s = s;
    61dc:	mov.w	sl, #92	; 0x5c
    61e0:	strb.w	sl, [r5, #1678]	; 0x68e
      _b = b;
    61e4:	mvn.w	sl, #8
    61e8:	strb.w	sl, [r5, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61ec:	mvn.w	sl, #110	; 0x6e
    61f0:	strb.w	sl, [r5, #1680]	; 0x690
      _s = s;
    61f4:	mov.w	sl, #107	; 0x6b
    61f8:	strb.w	sl, [r5, #1681]	; 0x691
      _b = b;
    61fc:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6200:	strb.w	lr, [r5, #1687]	; 0x697
      _b = b;
    6204:	strb.w	sl, [r5, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6208:	mvn.w	sl, #7
    620c:	strb.w	lr, [r5, #1696]	; 0x6a0
    6210:	strb.w	sl, [r5, #1684]	; 0x694
      _b = b;
    6214:	mvn.w	sl, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6218:	strb.w	r8, [r5, #1683]	; 0x693
      _s = s;
      _b = b;
    621c:	strb.w	sl, [r5, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6220:	mvn.w	sl, #109	; 0x6d
    6224:	strb.w	sl, [r5, #1686]	; 0x696
      _s = s;
      _b = b;
    6228:	mvn.w	sl, #77	; 0x4d
    622c:	strb.w	sl, [r5, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6230:	mvn.w	sl, #121	; 0x79
    6234:	strb.w	sl, [r5, #1689]	; 0x699
      _s = s;
    6238:	mvn.w	sl, #6
    623c:	strb.w	sl, [r5, #1690]	; 0x69a
      _b = b;
    6240:	mvn.w	sl, #120	; 0x78
    6244:	strb.w	sl, [r5, #1691]	; 0x69b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6248:	mov.w	sl, #60	; 0x3c
    624c:	strb.w	sl, [r5, #1692]	; 0x69c
      _s = s;
    6250:	mov.w	sl, #124	; 0x7c
    6254:	strb.w	sl, [r5, #1693]	; 0x69d
      _b = b;
    6258:	mvn.w	sl, #61	; 0x3d
    625c:	strb.w	sl, [r5, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6260:	mov.w	sl, #37	; 0x25
    6264:	strb.w	sl, [r5, #1695]	; 0x69f
      _s = s;
      _b = b;
    6268:	mvn.w	sl, #33	; 0x21
    626c:	strb.w	sl, [r5, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6270:	mov.w	sl, #31
    6274:	strb.w	sl, [r5, #1698]	; 0x6a2
      _s = s;
    6278:	mvn.w	sl, #25
    627c:	strb.w	sl, [r5, #1699]	; 0x6a3
      _b = b;
    6280:	mvn.w	sl, #38	; 0x26
    6284:	strb.w	sl, [r5, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6288:	mov.w	sl, #26
    628c:	strb.w	sl, [r5, #1701]	; 0x6a5
      _s = s;
    6290:	mvn.w	sl, #51	; 0x33
    6294:	strb.w	sl, [r5, #1702]	; 0x6a6
      _b = b;
    6298:	mvn.w	sl, #40	; 0x28
    629c:	strb.w	sl, [r5, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62a0:	mov.w	sl, #22
    62a4:	strb.w	sl, [r5, #1704]	; 0x6a8
      _s = s;
    62a8:	mvn.w	sl, #71	; 0x47
    62ac:	strb.w	sl, [r5, #1705]	; 0x6a9
      _b = b;
    62b0:	mvn.w	sl, #30
    62b4:	strb.w	sl, [r5, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62b8:	mov.w	sl, #13
    62bc:	strb.w	sl, [r5, #1707]	; 0x6ab
      _s = s;
    62c0:	mov.w	sl, #76	; 0x4c
    62c4:	strb.w	sl, [r5, #1708]	; 0x6ac
      _b = b;
    62c8:	mvn.w	sl, #27
    62cc:	strb.w	sl, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62d0:	mvn.w	sl, #36	; 0x24
    62d4:	strb.w	sl, [r5, #1710]	; 0x6ae
      _s = s;
    62d8:	mov.w	sl, #62	; 0x3e
    62dc:	strb.w	sl, [r5, #1711]	; 0x6af
      _b = b;
    62e0:	mvn.w	sl, #87	; 0x57
    62e4:	strb.w	sl, [r5, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62e8:	mvn.w	sl, #16
    62ec:	strb.w	sl, [r5, #1713]	; 0x6b1
      _s = s;
    62f0:	mov.w	sl, #56	; 0x38
    62f4:	strb.w	sl, [r5, #1714]	; 0x6b2
      _b = b;
    62f8:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    62fc:	strb.w	lr, [r5, #1726]	; 0x6be
      _b = b;
    6300:	strb.w	sl, [r5, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6304:	mvn.w	sl, #13
    6308:	strb	r3, [r4, #0]
    630a:	strb.w	sl, [r5, #1716]	; 0x6b4
      _s = s;
    630e:	mov.w	sl, #24
    6312:	strb	r3, [r4, #1]
    6314:	strb.w	sl, [r5, #1717]	; 0x6b5
      _b = b;
    6318:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    631c:	strb	r3, [r4, #9]
      _s = s;
      _b = b;
    631e:	strb.w	sl, [r5, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6322:	mvn.w	sl, #18
      _s = s;
    6326:	strb	r3, [r4, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6328:	strb.w	sl, [r5, #1719]	; 0x6b7
      _s = s;
    632c:	mvn.w	sl, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6330:	strb	r3, [r4, #12]
      _s = s;
    6332:	strb.w	sl, [r5, #1720]	; 0x6b8
      _b = b;
    6336:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    633a:	strb	r3, [r4, #13]
      _b = b;
    633c:	strb.w	sl, [r5, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6340:	mvn.w	sl, #15
    6344:	strb	r3, [r4, #15]
    6346:	strb.w	sl, [r5, #1722]	; 0x6ba
      _s = s;
    634a:	mov.w	sl, #114	; 0x72
    634e:	strb	r3, [r4, #16]
    6350:	strb.w	sl, [r5, #1723]	; 0x6bb
      _b = b;
    6354:	mvn.w	sl, #35	; 0x23
    6358:	strb.w	sl, [r5, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    635c:	mvn.w	sl, #26
    6360:	strb.w	sl, [r5, #1725]	; 0x6bd
      _s = s;
      _b = b;
    6364:	mvn.w	sl, #35	; 0x23
    6368:	strb.w	sl, [r5, #1727]	; 0x6bf
    636c:	mvn.w	sl, #4
    6370:	strb.w	sl, [r4, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6374:	mov.w	sl, #106	; 0x6a
    6378:	strb.w	sl, [r4, #3]
      _s = s;
    637c:	mov.w	sl, #2
    6380:	strb.w	sl, [r4, #4]
      _b = b;
    6384:	mvn.w	sl, #39	; 0x27
    6388:	strb.w	sl, [r4, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    638c:	mov.w	sl, #85	; 0x55
    6390:	strb.w	sl, [r4, #6]
      _s = s;
    6394:	mov.w	sl, #5
    6398:	strb.w	sl, [r4, #7]
      _b = b;
    639c:	mvn.w	sl, #102	; 0x66
    63a0:	strb.w	sl, [r4, #8]
    63a4:	mvn.w	sl, #16
    63a8:	strb.w	sl, [r4, #11]
    63ac:	mvn.w	sl, #8
    63b0:	strb.w	sl, [r4, #14]
    63b4:	mvn.w	sl, #10
    63b8:	strb.w	sl, [r4, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63bc:	mov.w	sl, #106	; 0x6a
    63c0:	strb.w	sl, [r4, #18]
      _s = s;
    63c4:	mov.w	sl, #2
    63c8:	strb.w	sl, [r4, #19]
      _b = b;
    63cc:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63d0:	strb.w	r2, [r4, #39]	; 0x27
      _s = s;
      _b = b;
    63d4:	strb.w	sl, [r4, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63d8:	mov.w	sl, #109	; 0x6d
    63dc:	strb.w	r6, [r4, #42]	; 0x2a
    63e0:	strb.w	sl, [r4, #21]
      _s = s;
    63e4:	mov.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63e8:	strb.w	r2, [r4, #45]	; 0x2d
      _s = s;
    63ec:	strb.w	sl, [r4, #22]
      _b = b;
    63f0:	mvn.w	sl, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63f4:	strb.w	r2, [r4, #48]	; 0x30
      _s = s;
      _b = b;
    63f8:	strb.w	sl, [r4, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63fc:	mov.w	sl, #114	; 0x72
    6400:	strb.w	r9, [r4, #30]
    6404:	strb.w	sl, [r4, #24]
      _s = s;
    6408:	mov.w	sl, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    640c:	strb.w	r8, [r4, #33]	; 0x21
      _s = s;
    6410:	strb.w	sl, [r4, #25]
      _b = b;
    6414:	mvn.w	sl, #92	; 0x5c
    6418:	strb.w	sl, [r4, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    641c:	mov.w	sl, #115	; 0x73
    6420:	strb.w	sl, [r4, #27]
      _s = s;
    6424:	mov.w	sl, #26
    6428:	strb.w	sl, [r4, #28]
      _b = b;
    642c:	mvn.w	sl, #119	; 0x77
    6430:	strb.w	sl, [r4, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6434:	mov.w	sl, #48	; 0x30
    6438:	strb.w	sl, [r4, #31]
      _b = b;
    643c:	mov.w	sl, #73	; 0x49
    6440:	strb.w	sl, [r4, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6444:	mvn.w	sl, #70	; 0x46
    6448:	strb.w	sl, [r4, #34]	; 0x22
      _b = b;
    644c:	mov.w	sl, #77	; 0x4d
    6450:	strb.w	sl, [r4, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6454:	mvn.w	sl, #121	; 0x79
    6458:	strb.w	sl, [r4, #36]	; 0x24
      _s = s;
    645c:	mvn.w	sl, #34	; 0x22
    6460:	strb.w	sl, [r4, #37]	; 0x25
      _b = b;
    6464:	mov.w	sl, #100	; 0x64
    6468:	strb.w	sl, [r4, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    646c:	mov.w	sl, #63	; 0x3f
    6470:	strb.w	sl, [r4, #40]	; 0x28
      _b = b;
    6474:	mvn.w	sl, #122	; 0x7a
    6478:	strb.w	sl, [r4, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    647c:	mvn.w	sl, #83	; 0x53
    6480:	strb.w	sl, [r4, #43]	; 0x2b
      _b = b;
    6484:	mvn.w	sl, #45	; 0x2d
    6488:	strb.w	sl, [r4, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    648c:	mvn.w	sl, #11
    6490:	strb.w	sl, [r4, #46]	; 0x2e
      _b = b;
    6494:	mvn.w	sl, #33	; 0x21
    6498:	strb.w	sl, [r4, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    649c:	mvn.w	sl, #96	; 0x60
    64a0:	strb.w	sl, [r4, #49]	; 0x31
      _b = b;
    64a4:	mvn.w	sl, #39	; 0x27
    64a8:	strb.w	sl, [r4, #50]	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64ac:	mvn.w	sl, #120	; 0x78
    64b0:	strb.w	sl, [r4, #51]	; 0x33
      _s = s;
    64b4:	mov.w	sl, #51	; 0x33
    64b8:	strb.w	sl, [r4, #52]	; 0x34
      _b = b;
    64bc:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64c0:	strb.w	r3, [r4, #57]	; 0x39
      _s = s;
      _b = b;
    64c4:	strb.w	sl, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64c8:	mov.w	sl, #8
      _b = b;
    64cc:	strb.w	lr, [r4, #62]	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64d0:	strb.w	sl, [r4, #55]	; 0x37
      _b = b;
    64d4:	mvn.w	sl, #9
    64d8:	strb.w	lr, [r4, #65]	; 0x41
    64dc:	strb.w	sl, [r4, #56]	; 0x38
    64e0:	mvn.w	sl, #4
    64e4:	strb.w	lr, [r4, #68]	; 0x44
    64e8:	strb.w	sl, [r4, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64ec:	mov.w	sl, #95	; 0x5f
      _s = s;
      _b = b;
    64f0:	strb.w	lr, [r4, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64f4:	strb.w	sl, [r4, #75]	; 0x4b
      _s = s;
    64f8:	mov.w	sl, #5
    64fc:	strb.w	r3, [r4, #58]	; 0x3a
    6500:	strb.w	sl, [r4, #76]	; 0x4c
      _b = b;
    6504:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6508:	strb.w	r3, [r4, #60]	; 0x3c
      _s = s;
      _b = b;
    650c:	strb.w	sl, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6510:	mvn.w	sl, #118	; 0x76
    6514:	strb.w	r3, [r4, #61]	; 0x3d
    6518:	strb.w	sl, [r4, #79]	; 0x4f
      _b = b;
    651c:	mov.w	sl, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6520:	strb.w	r3, [r4, #63]	; 0x3f
      _s = s;
      _b = b;
    6524:	strb.w	sl, [r4, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6528:	mov.w	sl, #94	; 0x5e
      _s = s;
    652c:	strb.w	r3, [r4, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6530:	strb.w	sl, [r4, #81]	; 0x51
      _s = s;
    6534:	mov.w	sl, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6538:	strb.w	r3, [r4, #66]	; 0x42
      _s = s;
    653c:	strb.w	sl, [r4, #82]	; 0x52
      _b = b;
    6540:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6544:	strb.w	r3, [r4, #67]	; 0x43
      _b = b;
    6548:	strb.w	sl, [r4, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    654c:	mov.w	sl, #96	; 0x60
    6550:	strb.w	r3, [r4, #69]	; 0x45
    6554:	strb.w	sl, [r4, #84]	; 0x54
      _s = s;
    6558:	mov.w	sl, #14
    655c:	strb.w	r3, [r4, #70]	; 0x46
    6560:	strb.w	sl, [r4, #85]	; 0x55
      _b = b;
    6564:	mvn.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6568:	strb.w	r3, [r4, #72]	; 0x48
      _s = s;
    656c:	strb.w	r3, [r4, #73]	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6570:	strb.w	r8, [r4, #54]	; 0x36
    6574:	strb.w	r9, [r4, #78]	; 0x4e
      _s = s;
      _b = b;
    6578:	strb.w	sl, [r4, #74]	; 0x4a
    657c:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6580:	strb.w	r1, [r4, #108]	; 0x6c
      _s = s;
      _b = b;
    6584:	strb.w	sl, [r4, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6588:	mov.w	sl, #46	; 0x2e
      _s = s;
    658c:	strb.w	lr, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6590:	strb.w	sl, [r4, #87]	; 0x57
      _s = s;
    6594:	mov.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6598:	strb.w	r6, [r4, #114]	; 0x72
      _s = s;
    659c:	strb.w	sl, [r4, #88]	; 0x58
      _b = b;
    65a0:	mvn.w	sl, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65a4:	strb.w	r2, [r4, #117]	; 0x75
      _s = s;
      _b = b;
    65a8:	strb.w	sl, [r4, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ac:	mov.w	sl, #60	; 0x3c
    65b0:	strb.w	r9, [r4, #102]	; 0x66
    65b4:	strb.w	sl, [r4, #90]	; 0x5a
      _s = s;
    65b8:	mov.w	sl, #121	; 0x79
    65bc:	strb.w	sl, [r4, #91]	; 0x5b
      _b = b;
    65c0:	mov.w	sl, #113	; 0x71
    65c4:	strb.w	sl, [r4, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65c8:	mov.w	sl, #105	; 0x69
    65cc:	strb.w	sl, [r4, #93]	; 0x5d
      _s = s;
    65d0:	mvn.w	sl, #69	; 0x45
    65d4:	strb.w	sl, [r4, #94]	; 0x5e
      _b = b;
    65d8:	mov.w	sl, #101	; 0x65
    65dc:	strb.w	sl, [r4, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65e0:	mov.w	sl, #118	; 0x76
    65e4:	strb.w	sl, [r4, #96]	; 0x60
      _s = s;
    65e8:	mvn.w	sl, #39	; 0x27
    65ec:	strb.w	sl, [r4, #97]	; 0x61
      _b = b;
    65f0:	mov.w	sl, #106	; 0x6a
    65f4:	strb.w	sl, [r4, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65f8:	mvn.w	sl, #43	; 0x2b
    65fc:	strb.w	sl, [r4, #99]	; 0x63
      _s = s;
    6600:	mov.w	sl, #95	; 0x5f
    6604:	strb.w	sl, [r4, #100]	; 0x64
      _b = b;
    6608:	mov.w	sl, #32
    660c:	strb.w	sl, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6610:	mvn.w	sl, #104	; 0x68
    6614:	strb.w	sl, [r4, #103]	; 0x67
      _b = b;
    6618:	mov.w	sl, #64	; 0x40
    661c:	strb.w	sl, [r4, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6620:	mvn.w	sl, #121	; 0x79
    6624:	strb.w	sl, [r4, #105]	; 0x69
      _s = s;
    6628:	mvn.w	sl, #5
    662c:	strb.w	sl, [r4, #106]	; 0x6a
      _b = b;
    6630:	mvn.w	sl, #88	; 0x58
    6634:	strb.w	sl, [r4, #107]	; 0x6b
    6638:	mvn.w	sl, #76	; 0x4c
    663c:	strb.w	sl, [r4, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6640:	mvn.w	sl, #122	; 0x7a
    6644:	strb.w	sl, [r4, #111]	; 0x6f
      _s = s;
    6648:	mov.w	sl, #106	; 0x6a
    664c:	strb.w	sl, [r4, #112]	; 0x70
      _b = b;
    6650:	mvn.w	sl, #80	; 0x50
    6654:	strb.w	sl, [r4, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6658:	mvn.w	sl, #111	; 0x6f
    665c:	strb.w	sl, [r4, #115]	; 0x73
      _b = b;
    6660:	mvn.w	sl, #34	; 0x22
    6664:	strb.w	sl, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6668:	mvn.w	sl, #16
    666c:	strb.w	sl, [r4, #118]	; 0x76
      _b = b;
    6670:	mvn.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6674:	strb.w	r2, [r4, #120]	; 0x78
      _s = s;
      _b = b;
    6678:	strb.w	sl, [r4, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    667c:	mov.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6680:	strb.w	r2, [r4, #123]	; 0x7b
      _s = s;
    6684:	strb.w	sl, [r4, #130]	; 0x82
    6688:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    668c:	strb.w	r6, [r4, #126]	; 0x7e
      _s = s;
    6690:	strb.w	sl, [r4, #121]	; 0x79
      _b = b;
    6694:	mvn.w	sl, #30
    6698:	strb.w	lr, [r4, #134]	; 0x86
    669c:	strb.w	sl, [r4, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66a0:	mvn.w	sl, #59	; 0x3b
      _b = b;
    66a4:	strb.w	lr, [r4, #137]	; 0x89
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66a8:	strb.w	sl, [r4, #124]	; 0x7c
      _b = b;
    66ac:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66b0:	strb.w	r3, [r4, #132]	; 0x84
      _s = s;
      _b = b;
    66b4:	strb.w	sl, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66b8:	mov.w	sl, #87	; 0x57
    66bc:	strb.w	r3, [r4, #133]	; 0x85
    66c0:	strb.w	sl, [r4, #127]	; 0x7f
      _b = b;
    66c4:	mvn.w	sl, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c8:	strb.w	r3, [r4, #135]	; 0x87
      _s = s;
      _b = b;
    66cc:	strb.w	sl, [r4, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66d0:	mvn.w	sl, #107	; 0x6b
      _s = s;
    66d4:	strb.w	r3, [r4, #136]	; 0x88
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66d8:	strb.w	sl, [r4, #129]	; 0x81
      _s = s;
      _b = b;
    66dc:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66e0:	strb.w	r3, [r4, #138]	; 0x8a
      _s = s;
      _b = b;
    66e4:	strb.w	sl, [r4, #131]	; 0x83
    66e8:	mvn.w	sl, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66ec:	strb.w	r3, [r4, #139]	; 0x8b
      _b = b;
    66f0:	strb.w	sl, [r4, #140]	; 0x8c
    66f4:	strb.w	sl, [r4, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66f8:	mov.w	sl, #113	; 0x71
    66fc:	strb.w	r3, [r4, #141]	; 0x8d
    6700:	strb.w	sl, [r4, #144]	; 0x90
      _s = s;
    6704:	mov.w	sl, #3
    6708:	strb.w	sl, [r4, #145]	; 0x91
      _b = b;
    670c:	mvn.w	sl, #5
    6710:	strb.w	sl, [r4, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6714:	mov.w	sl, #51	; 0x33
    6718:	strb.w	sl, [r4, #147]	; 0x93
      _s = s;
    671c:	mov.w	sl, #10
    6720:	strb.w	sl, [r4, #148]	; 0x94
      _b = b;
    6724:	mvn.w	sl, #36	; 0x24
    6728:	strb.w	sl, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    672c:	mov.w	sl, #121	; 0x79
    6730:	strb.w	sl, [r4, #150]	; 0x96
      _s = s;
    6734:	mov.w	sl, #60	; 0x3c
    6738:	strb.w	sl, [r4, #151]	; 0x97
      _b = b;
    673c:	mov.w	sl, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6740:	strb.w	r3, [r4, #142]	; 0x8e
      _b = b;
    6744:	strb.w	sl, [r4, #152]	; 0x98
    6748:	mov.w	sl, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    674c:	strb.w	r0, [r4, #174]	; 0xae
      _s = s;
      _b = b;
    6750:	strb.w	sl, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6754:	mov.w	sl, #32
    6758:	strb.w	r1, [r4, #183]	; 0xb7
    675c:	strb.w	sl, [r4, #153]	; 0x99
      _s = s;
    6760:	mvn.w	sl, #82	; 0x52
    6764:	strb.w	r8, [r4, #184]	; 0xb8
    6768:	strb.w	sl, [r4, #154]	; 0x9a
      _b = b;
    676c:	mvn.w	sl, #105	; 0x69
    6770:	strb.w	sl, [r4, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6774:	mov.w	sl, #54	; 0x36
    6778:	strb.w	sl, [r4, #156]	; 0x9c
      _s = s;
    677c:	mov.w	sl, #97	; 0x61
    6780:	strb.w	sl, [r4, #157]	; 0x9d
      _b = b;
    6784:	mov.w	sl, #120	; 0x78
    6788:	strb.w	sl, [r4, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    678c:	mov.w	sl, #25
    6790:	strb.w	sl, [r4, #159]	; 0x9f
      _s = s;
    6794:	mvn.w	sl, #67	; 0x43
    6798:	strb.w	sl, [r4, #160]	; 0xa0
      _b = b;
    679c:	mov.w	sl, #123	; 0x7b
    67a0:	strb.w	sl, [r4, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67a4:	mov.w	sl, #28
    67a8:	strb.w	sl, [r4, #162]	; 0xa2
      _s = s;
    67ac:	mvn.w	sl, #93	; 0x5d
    67b0:	strb.w	sl, [r4, #163]	; 0xa3
      _b = b;
    67b4:	mov.w	sl, #85	; 0x55
    67b8:	strb.w	sl, [r4, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67bc:	mov.w	sl, #97	; 0x61
    67c0:	strb.w	sl, [r4, #165]	; 0xa5
      _s = s;
    67c4:	mvn.w	sl, #81	; 0x51
    67c8:	strb.w	sl, [r4, #166]	; 0xa6
      _b = b;
    67cc:	mvn.w	sl, #118	; 0x76
    67d0:	strb.w	sl, [r4, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67d4:	mov.w	sl, #121	; 0x79
    67d8:	strb.w	sl, [r4, #168]	; 0xa8
      _s = s;
    67dc:	mvn.w	sl, #93	; 0x5d
    67e0:	strb.w	sl, [r4, #169]	; 0xa9
      _b = b;
    67e4:	mvn.w	sl, #101	; 0x65
    67e8:	strb.w	sl, [r4, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67ec:	mov.w	sl, #93	; 0x5d
    67f0:	strb.w	sl, [r4, #172]	; 0xac
    67f4:	mvn.w	sl, #104	; 0x68
    67f8:	strb.w	sl, [r4, #175]	; 0xaf
      _b = b;
    67fc:	mov.w	sl, #59	; 0x3b
    6800:	strb.w	sl, [r4, #176]	; 0xb0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6804:	mvn.w	sl, #118	; 0x76
    6808:	strb.w	sl, [r4, #177]	; 0xb1
      _s = s;
    680c:	mvn.w	sl, #32
    6810:	strb.w	sl, [r4, #178]	; 0xb2
      _b = b;
    6814:	mov.w	sl, #57	; 0x39
    6818:	strb.w	sl, [r4, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    681c:	mvn.w	sl, #119	; 0x77
    6820:	strb.w	sl, [r4, #180]	; 0xb4
      _s = s;
    6824:	mvn.w	sl, #22
    6828:	strb.w	sl, [r4, #181]	; 0xb5
      _b = b;
    682c:	mov.w	sl, #59	; 0x3b
    6830:	strb.w	sl, [r4, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6834:	mvn.w	sl, #39	; 0x27
    6838:	strb.w	sl, [r4, #171]	; 0xab
      _s = s;
      _b = b;
    683c:	mov.w	sl, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6840:	strb.w	r3, [r4, #210]	; 0xd2
      _s = s;
      _b = b;
    6844:	strb.w	sl, [r4, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6848:	mov.w	sl, #57	; 0x39
    684c:	strb.w	r3, [r4, #211]	; 0xd3
    6850:	strb.w	sl, [r4, #187]	; 0xbb
      _b = b;
    6854:	mvn.w	sl, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6858:	strb.w	r3, [r4, #213]	; 0xd5
      _s = s;
      _b = b;
    685c:	strb.w	sl, [r4, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6860:	mvn.w	sl, #65	; 0x41
    6864:	strb.w	r3, [r4, #214]	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6868:	mov.w	r3, #106	; 0x6a
      _s = s;
    686c:	strb.w	sl, [r4, #190]	; 0xbe
      _b = b;
    6870:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6874:	strb.w	r3, [r4, #216]	; 0xd8
      _s = s;
    6878:	mov.w	r3, #66	; 0x42
      _b = b;
    687c:	strb.w	sl, [r4, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6880:	mvn.w	sl, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6884:	strb.w	r2, [r4, #186]	; 0xba
      _s = s;
    6888:	strb.w	sl, [r4, #193]	; 0xc1
      _b = b;
    688c:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6890:	strb.w	r2, [r4, #189]	; 0xbd
      _s = s;
      _b = b;
    6894:	strb.w	sl, [r4, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6898:	mvn.w	sl, #122	; 0x7a
    689c:	strb.w	r2, [r4, #192]	; 0xc0
    68a0:	strb.w	sl, [r4, #195]	; 0xc3
      _s = s;
    68a4:	mov.w	sl, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68a8:	strb.w	r0, [r4, #198]	; 0xc6
      _s = s;
    68ac:	strb.w	sl, [r4, #196]	; 0xc4
      _b = b;
    68b0:	mvn.w	sl, #21
    68b4:	strb.w	sl, [r4, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68b8:	mov.w	sl, #44	; 0x2c
    68bc:	strb.w	sl, [r4, #199]	; 0xc7
      _b = b;
    68c0:	mvn.w	sl, #41	; 0x29
    68c4:	strb.w	sl, [r4, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68c8:	mvn.w	sl, #96	; 0x60
    68cc:	strb.w	sl, [r4, #201]	; 0xc9
      _s = s;
    68d0:	mov.w	sl, #35	; 0x23
    68d4:	strb.w	sl, [r4, #202]	; 0xca
      _b = b;
    68d8:	mvn.w	sl, #74	; 0x4a
    68dc:	strb.w	sl, [r4, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68e0:	mvn.w	sl, #105	; 0x69
    68e4:	strb.w	sl, [r4, #204]	; 0xcc
      _s = s;
    68e8:	mov.w	sl, #26
    68ec:	strb.w	sl, [r4, #205]	; 0xcd
      _b = b;
    68f0:	mvn.w	sl, #66	; 0x42
    68f4:	strb.w	sl, [r4, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68f8:	mov.w	sl, #127	; 0x7f
    68fc:	strb.w	sl, [r4, #207]	; 0xcf
      _s = s;
    6900:	mov.w	sl, #1
    6904:	strb.w	sl, [r4, #208]	; 0xd0
      _b = b;
    6908:	mvn.w	sl, #10
    690c:	strb.w	sl, [r4, #209]	; 0xd1
    6910:	mvn.w	sl, #2
    6914:	strb.w	sl, [r4, #212]	; 0xd4
    6918:	strb.w	sl, [r4, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    691c:	mvn.w	sl, #85	; 0x55
    6920:	strb.w	r3, [r4, #217]	; 0xd9
      _b = b;
    6924:	mvn.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6928:	strb.w	r7, [r4, #226]	; 0xe2
      _b = b;
    692c:	strb.w	r3, [r4, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6930:	mov.w	r3, #102	; 0x66
      _s = s;
    6934:	strb.w	r7, [r4, #235]	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6938:	strb.w	r3, [r4, #219]	; 0xdb
      _s = s;
    693c:	mov.w	r3, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6940:	strb.w	r2, [r4, #246]	; 0xf6
      _s = s;
    6944:	strb.w	r3, [r4, #220]	; 0xdc
      _b = b;
    6948:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    694c:	strb.w	r8, [r4, #249]	; 0xf9
      _s = s;
      _b = b;
    6950:	strb.w	r3, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6954:	mov.w	r3, #31
    6958:	strb.w	r3, [r4, #222]	; 0xde
      _s = s;
    695c:	mvn.w	r3, #82	; 0x52
    6960:	strb.w	r3, [r4, #223]	; 0xdf
      _b = b;
    6964:	mvn.w	r3, #36	; 0x24
    6968:	strb.w	r3, [r4, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    696c:	mov.w	r3, #33	; 0x21
    6970:	strb.w	r3, [r4, #225]	; 0xe1
      _s = s;
      _b = b;
    6974:	mvn.w	r3, #15
    6978:	strb.w	r3, [r4, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    697c:	mov.w	r3, #29
    6980:	strb.w	r3, [r4, #228]	; 0xe4
      _s = s;
    6984:	mvn.w	r3, #62	; 0x3e
    6988:	strb.w	r3, [r4, #229]	; 0xe5
      _b = b;
    698c:	mvn.w	r3, #67	; 0x43
    6990:	strb.w	r3, [r4, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6994:	mov.w	r3, #22
    6998:	strb.w	r3, [r4, #231]	; 0xe7
      _s = s;
    699c:	mvn.w	r3, #33	; 0x21
    69a0:	strb.w	r3, [r4, #232]	; 0xe8
      _b = b;
    69a4:	mvn.w	r3, #92	; 0x5c
    69a8:	strb.w	r3, [r4, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69ac:	mov.w	r3, #55	; 0x37
    69b0:	strb.w	r3, [r4, #234]	; 0xea
      _s = s;
      _b = b;
    69b4:	mvn.w	r3, #85	; 0x55
    69b8:	strb.w	r3, [r4, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69bc:	mov.w	r3, #77	; 0x4d
    69c0:	strb.w	r3, [r4, #237]	; 0xed
      _s = s;
    69c4:	mvn.w	r3, #85	; 0x55
    69c8:	strb.w	r3, [r4, #238]	; 0xee
      _b = b;
    69cc:	mvn.w	r3, #86	; 0x56
    69d0:	strb.w	r3, [r4, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69d4:	mov.w	r3, #112	; 0x70
    69d8:	strb.w	r3, [r4, #240]	; 0xf0
      _s = s;
    69dc:	mov.w	r3, #73	; 0x49
    69e0:	strb.w	r3, [r4, #241]	; 0xf1
      _b = b;
    69e4:	mvn.w	r3, #74	; 0x4a
    69e8:	strb.w	r3, [r4, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69ec:	mvn.w	r3, #43	; 0x2b
    69f0:	strb.w	r3, [r4, #243]	; 0xf3
      _s = s;
    69f4:	mov.w	r3, #87	; 0x57
    69f8:	strb.w	r3, [r4, #244]	; 0xf4
      _b = b;
    69fc:	mov.w	r3, #32
    6a00:	strb.w	r3, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a04:	mov.w	r3, #34	; 0x22
    6a08:	strb.w	r3, [r4, #247]	; 0xf7
      _b = b;
    6a0c:	mov.w	r3, #110	; 0x6e
    6a10:	strb.w	r3, [r4, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a14:	mvn.w	r3, #108	; 0x6c
    6a18:	strb.w	r3, [r4, #250]	; 0xfa
      _b = b;
    6a1c:	mov.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a20:	strb.w	r1, [r4, #258]	; 0x102
      _s = s;
      _b = b;
    6a24:	strb.w	r3, [r4, #251]	; 0xfb
    6a28:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a2c:	strb.w	r1, [r4, #282]	; 0x11a
      _s = s;
      _b = b;
    6a30:	strb.w	r3, [r4, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a34:	mvn.w	r3, #120	; 0x78
    6a38:	strb.w	r6, [r4, #279]	; 0x117
    6a3c:	strb.w	r3, [r4, #252]	; 0xfc
      _s = s;
    6a40:	mvn.w	r3, #18
    6a44:	strb.w	r3, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a48:	mvn.w	r3, #118	; 0x76
    6a4c:	strb.w	r3, [r4, #255]	; 0xff
      _s = s;
    6a50:	mvn.w	r3, #30
    6a54:	strb.w	r3, [r4, #256]	; 0x100
      _b = b;
    6a58:	mov.w	r3, #51	; 0x33
    6a5c:	strb.w	r3, [r4, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a60:	mov.w	r3, #69	; 0x45
    6a64:	strb.w	r3, [r4, #259]	; 0x103
      _b = b;
    6a68:	mov.w	r3, #99	; 0x63
    6a6c:	strb.w	r3, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a70:	mvn.w	r3, #122	; 0x7a
    6a74:	strb.w	r3, [r4, #261]	; 0x105
      _s = s;
    6a78:	mov.w	r3, #48	; 0x30
    6a7c:	strb.w	r3, [r4, #262]	; 0x106
      _b = b;
    6a80:	mvn.w	r3, #62	; 0x3e
    6a84:	strb.w	r3, [r4, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a88:	mvn.w	r3, #119	; 0x77
    6a8c:	strb.w	r3, [r4, #264]	; 0x108
      _s = s;
    6a90:	mov.w	r3, #55	; 0x37
    6a94:	strb.w	r3, [r4, #265]	; 0x109
      _b = b;
    6a98:	mvn.w	r3, #24
    6a9c:	strb.w	r3, [r4, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6aa0:	mvn.w	r3, #120	; 0x78
    6aa4:	strb.w	r3, [r4, #267]	; 0x10b
      _s = s;
    6aa8:	mov.w	r3, #17
    6aac:	strb.w	r3, [r4, #268]	; 0x10c
      _b = b;
    6ab0:	mvn.w	r3, #18
    6ab4:	strb.w	r3, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ab8:	mvn.w	r3, #109	; 0x6d
    6abc:	strb.w	r3, [r4, #270]	; 0x10e
      _s = s;
    6ac0:	mov.w	r3, #69	; 0x45
    6ac4:	strb.w	r3, [r4, #271]	; 0x10f
      _b = b;
    6ac8:	mvn.w	r3, #54	; 0x36
    6acc:	strb.w	r3, [r4, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ad0:	mvn.w	r3, #109	; 0x6d
    6ad4:	strb.w	r3, [r4, #273]	; 0x111
      _s = s;
    6ad8:	mov.w	r3, #72	; 0x48
    6adc:	strb.w	r3, [r4, #274]	; 0x112
      _b = b;
    6ae0:	mvn.w	r3, #52	; 0x34
    6ae4:	strb.w	r3, [r4, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ae8:	mvn.w	r3, #106	; 0x6a
    6aec:	strb.w	r3, [r4, #276]	; 0x114
      _s = s;
    6af0:	mov.w	r3, #35	; 0x23
    6af4:	strb.w	r3, [r4, #277]	; 0x115
      _b = b;
    6af8:	mvn.w	r3, #46	; 0x2e
    6afc:	strb.w	r3, [r4, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b00:	mov.w	r3, #66	; 0x42
    6b04:	strb.w	r3, [r4, #280]	; 0x118
    6b08:	mov.w	r3, #59	; 0x3b
    6b0c:	strb.w	r3, [r4, #283]	; 0x11b
      _b = b;
    6b10:	mvn.w	r3, #33	; 0x21
    6b14:	strb.w	r3, [r4, #281]	; 0x119
    6b18:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b1c:	strb.w	r0, [r4, #298]	; 0x12a
      _b = b;
    6b20:	strb.w	r3, [r4, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b24:	mov.w	r3, #65	; 0x41
    6b28:	strb.w	r3, [r4, #289]	; 0x121
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b2c:	mvn.w	r3, #111	; 0x6f
    6b30:	strb.w	r3, [r4, #285]	; 0x11d
      _s = s;
      _b = b;
    6b34:	mvn.w	r3, #9
    6b38:	strb.w	r3, [r4, #287]	; 0x11f
    6b3c:	mov.w	r3, #58	; 0x3a
    6b40:	strb.w	r3, [r4, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b44:	mov.w	r3, #59	; 0x3b
    6b48:	strb.w	r3, [r4, #292]	; 0x124
      _b = b;
    6b4c:	mvn.w	r3, #49	; 0x31
    6b50:	strb.w	r3, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b54:	mov.w	r3, #34	; 0x22
    6b58:	strb.w	r3, [r4, #294]	; 0x126
      _s = s;
    6b5c:	mvn.w	r3, #40	; 0x28
    6b60:	strb.w	r3, [r4, #295]	; 0x127
      _b = b;
    6b64:	mvn.w	r3, #22
    6b68:	strb.w	r3, [r4, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b6c:	mov.w	r3, #31
    6b70:	strb.w	r3, [r4, #297]	; 0x129
      _s = s;
      _b = b;
    6b74:	mvn.w	r3, #31
    6b78:	strb.w	r3, [r4, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b7c:	mov.w	r3, #28
    6b80:	strb.w	r3, [r4, #300]	; 0x12c
      _s = s;
    6b84:	mvn.w	r3, #59	; 0x3b
    6b88:	strb.w	r3, [r4, #301]	; 0x12d
      _b = b;
    6b8c:	mvn.w	r3, #72	; 0x48
    6b90:	strb.w	r3, [r4, #302]	; 0x12e
    6b94:	mvn.w	r3, #54	; 0x36
    6b98:	strb.w	r3, [r4, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b9c:	mov.w	r3, #29
    6ba0:	strb.w	r3, [r4, #306]	; 0x132
      _s = s;
      _b = b;
    6ba4:	mvn.w	r3, #62	; 0x3e
    6ba8:	strb.w	r3, [r4, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bac:	mov.w	r3, #88	; 0x58
    6bb0:	strb.w	r3, [r4, #309]	; 0x135
      _s = s;
    6bb4:	mov.w	r3, #61	; 0x3d
    6bb8:	strb.w	r3, [r4, #310]	; 0x136
      _b = b;
    6bbc:	mvn.w	r3, #61	; 0x3d
    6bc0:	strb.w	r3, [r4, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bc4:	mov.w	r3, #112	; 0x70
    6bc8:	strb.w	r3, [r4, #312]	; 0x138
      _s = s;
      _b = b;
    6bcc:	mvn.w	r3, #78	; 0x4e
    6bd0:	strb.w	r3, [r4, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bd4:	mov.w	r3, #123	; 0x7b
    6bd8:	strb.w	r3, [r4, #315]	; 0x13b
      _s = s;
    6bdc:	mov.w	r3, #22
    6be0:	strb.w	r3, [r4, #316]	; 0x13c
    6be4:	mov.w	r3, #5
    6be8:	strb.w	r3, [r4, #286]	; 0x11e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bec:	mvn.w	r3, #32
    6bf0:	strb.w	r3, [r4, #288]	; 0x120
    6bf4:	mov.w	r3, #77	; 0x4d
    6bf8:	strb.w	r3, [r4, #291]	; 0x123
    6bfc:	mov.w	r3, #20
    6c00:	strb.w	r3, [r4, #303]	; 0x12f
      _s = s;
    6c04:	mvn.w	r3, #120	; 0x78
    6c08:	strb.w	r3, [r4, #304]	; 0x130
    6c0c:	mvn.w	r3, #96	; 0x60
    6c10:	strb.w	r3, [r4, #307]	; 0x133
    6c14:	mov.w	r3, #48	; 0x30
    6c18:	strb.w	r3, [r4, #313]	; 0x139
      _b = b;
    6c1c:	mvn.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c20:	strb.w	r2, [r4, #321]	; 0x141
      _s = s;
      _b = b;
    6c24:	strb.w	r3, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c28:	mov.w	r3, #123	; 0x7b
    6c2c:	strb.w	r1, [r4, #324]	; 0x144
    6c30:	strb.w	r3, [r4, #318]	; 0x13e
      _s = s;
    6c34:	mov.w	r3, #22
      _b = b;
    6c38:	strb.w	r0, [r4, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c3c:	strb.w	r3, [r4, #319]	; 0x13f
      _b = b;
    6c40:	mvn.w	r3, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c44:	strb.w	r1, [r4, #333]	; 0x14d
      _s = s;
      _b = b;
    6c48:	strb.w	r3, [r4, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c4c:	mov.w	r3, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c50:	strb.w	r0, [r4, #339]	; 0x153
      _s = s;
    6c54:	strb.w	r3, [r4, #322]	; 0x142
      _b = b;
    6c58:	mvn.w	r3, #73	; 0x49
    6c5c:	strb.w	r3, [r4, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c60:	mvn.w	r3, #4
    6c64:	strb.w	r3, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c68:	mov.w	r3, #125	; 0x7d
    6c6c:	strb.w	r3, [r4, #327]	; 0x147
      _s = s;
    6c70:	mov.w	r3, #115	; 0x73
    6c74:	strb.w	r3, [r4, #328]	; 0x148
      _b = b;
    6c78:	mvn.w	r3, #102	; 0x66
    6c7c:	strb.w	r3, [r4, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c80:	mov.w	r3, #127	; 0x7f
    6c84:	strb.w	r3, [r4, #330]	; 0x14a
      _s = s;
    6c88:	mov.w	r3, #57	; 0x39
    6c8c:	strb.w	r3, [r4, #331]	; 0x14b
      _b = b;
    6c90:	mvn.w	r3, #86	; 0x56
    6c94:	strb.w	r3, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c98:	mov.w	r3, #74	; 0x4a
    6c9c:	strb.w	r3, [r4, #334]	; 0x14e
      _b = b;
    6ca0:	mvn.w	r3, #118	; 0x76
    6ca4:	strb.w	r3, [r4, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ca8:	mvn.w	r3, #114	; 0x72
    6cac:	strb.w	r3, [r4, #336]	; 0x150
      _s = s;
    6cb0:	mvn.w	r3, #62	; 0x3e
    6cb4:	strb.w	r3, [r4, #337]	; 0x151
      _b = b;
    6cb8:	mov.w	r3, #121	; 0x79
    6cbc:	strb.w	r3, [r4, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cc0:	mov.w	r3, #115	; 0x73
    6cc4:	strb.w	r3, [r4, #340]	; 0x154
      _b = b;
    6cc8:	mvn.w	r3, #102	; 0x66
    6ccc:	strb.w	r3, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cd0:	mvn.w	r3, #107	; 0x6b
    6cd4:	strb.w	r3, [r4, #342]	; 0x156
      _s = s;
    6cd8:	mov.w	r3, #94	; 0x5e
    6cdc:	strb.w	r3, [r4, #343]	; 0x157
      _b = b;
    6ce0:	mvn.w	r3, #72	; 0x48
    6ce4:	strb.w	r3, [r4, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ce8:	mvn.w	r3, #100	; 0x64
    6cec:	strb.w	r3, [r4, #345]	; 0x159
      _s = s;
    6cf0:	mov.w	r3, #45	; 0x2d
    6cf4:	strb.w	r3, [r4, #346]	; 0x15a
      _b = b;
    6cf8:	mvn.w	r3, #74	; 0x4a
    6cfc:	strb.w	r3, [r4, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d00:	mvn.w	r3, #122	; 0x7a
    6d04:	strb.w	r3, [r4, #348]	; 0x15c
      _s = s;
    6d08:	mov.w	r3, #41	; 0x29
    6d0c:	strb.w	r3, [r4, #349]	; 0x15d
      _b = b;
    6d10:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d14:	strb.w	r1, [r4, #351]	; 0x15f
      _s = s;
      _b = b;
    6d18:	strb.w	r3, [r4, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d1c:	mov.w	r3, #54	; 0x36
    6d20:	strb.w	r6, [r4, #354]	; 0x162
    6d24:	strb.w	r3, [r4, #378]	; 0x17a
      _s = s;
      _b = b;
    6d28:	mvn.w	r3, #13
    6d2c:	strb.w	r3, [r4, #353]	; 0x161
    6d30:	mvn.w	r3, #23
    6d34:	strb.w	r3, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d38:	mvn.w	r3, #63	; 0x3f
    6d3c:	strb.w	r3, [r4, #358]	; 0x166
      _b = b;
    6d40:	strb.w	r3, [r4, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d44:	mvn.w	r3, #37	; 0x25
    6d48:	strb.w	r3, [r4, #360]	; 0x168
      _s = s;
    6d4c:	mov.w	r3, #76	; 0x4c
    6d50:	strb.w	r3, [r4, #361]	; 0x169
      _b = b;
    6d54:	mov.w	r3, #50	; 0x32
    6d58:	strb.w	r3, [r4, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d5c:	mov.w	r3, #101	; 0x65
    6d60:	strb.w	r3, [r4, #363]	; 0x16b
      _s = s;
    6d64:	mov.w	r3, #92	; 0x5c
    6d68:	strb.w	r3, [r4, #364]	; 0x16c
      _b = b;
    6d6c:	mvn.w	r3, #95	; 0x5f
    6d70:	strb.w	r3, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d74:	mov.w	r3, #40	; 0x28
    6d78:	strb.w	r3, [r4, #366]	; 0x16e
      _s = s;
    6d7c:	mvn.w	r3, #89	; 0x59
    6d80:	strb.w	r3, [r4, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d84:	mov.w	r3, #22
    6d88:	strb.w	r3, [r4, #369]	; 0x171
      _s = s;
      _b = b;
    6d8c:	mvn.w	r3, #99	; 0x63
    6d90:	strb.w	r3, [r4, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d94:	mov.w	r3, #21
    6d98:	strb.w	r3, [r4, #372]	; 0x174
      _s = s;
    6d9c:	mvn.w	r3, #12
    6da0:	strb.w	r3, [r4, #373]	; 0x175
      _b = b;
    6da4:	mvn.w	r3, #71	; 0x47
    6da8:	strb.w	r3, [r4, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dac:	mov.w	r3, #24
    6db0:	strb.w	r3, [r4, #375]	; 0x177
      _s = s;
      _b = b;
    6db4:	mvn.w	r3, #46	; 0x2e
    6db8:	strb.w	r3, [r4, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6dbc:	mvn.w	r3, #89	; 0x59
    6dc0:	strb.w	r3, [r4, #379]	; 0x17b
      _b = b;
    6dc4:	mvn.w	r3, #108	; 0x6c
    6dc8:	strb.w	r3, [r4, #380]	; 0x17c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dcc:	mov.w	r3, #111	; 0x6f
    6dd0:	strb.w	r3, [r4, #381]	; 0x17d
      _s = s;
    6dd4:	mvn.w	r3, #77	; 0x4d
    6dd8:	strb.w	r3, [r4, #382]	; 0x17e
    6ddc:	mov.w	r3, #85	; 0x55
    6de0:	strb.w	r3, [r4, #352]	; 0x160
    6de4:	mvn.w	r3, #79	; 0x4f
    6de8:	strb.w	r3, [r4, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dec:	mvn.w	r3, #122	; 0x7a
    6df0:	strb.w	r3, [r4, #357]	; 0x165
      _s = s;
      _b = b;
    6df4:	mvn.w	r3, #79	; 0x4f
    6df8:	strb.w	r3, [r4, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6dfc:	mvn.w	r3, #32
    6e00:	strb.w	r3, [r4, #370]	; 0x172
    6e04:	mvn.w	r3, #4
    6e08:	strb.w	r3, [r4, #376]	; 0x178
      _b = b;
    6e0c:	mov.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e10:	strb.w	r1, [r4, #393]	; 0x189
      _s = s;
      _b = b;
    6e14:	strb.w	r3, [r4, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e18:	mov.w	r3, #95	; 0x5f
    6e1c:	strb.w	r1, [r4, #399]	; 0x18f
    6e20:	strb.w	r3, [r4, #384]	; 0x180
      _s = s;
    6e24:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e28:	strb.w	r9, [r4, #402]	; 0x192
      _s = s;
    6e2c:	strb.w	r3, [r4, #385]	; 0x181
      _b = b;
    6e30:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e34:	strb.w	r8, [r4, #405]	; 0x195
      _s = s;
      _b = b;
    6e38:	strb.w	r3, [r4, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e3c:	mov.w	r3, #123	; 0x7b
    6e40:	strb.w	r9, [r4, #411]	; 0x19b
    6e44:	strb.w	r3, [r4, #387]	; 0x183
      _s = s;
    6e48:	mov.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e4c:	strb.w	fp, [r4, #414]	; 0x19e
      _s = s;
    6e50:	strb.w	r3, [r4, #388]	; 0x184
      _b = b;
    6e54:	mov.w	r3, #70	; 0x46
    6e58:	strb.w	r3, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e5c:	mov.w	r3, #127	; 0x7f
    6e60:	strb.w	r3, [r4, #390]	; 0x186
      _s = s;
    6e64:	mov.w	r3, #47	; 0x2f
    6e68:	strb.w	r3, [r4, #391]	; 0x187
      _b = b;
    6e6c:	mvn.w	r3, #109	; 0x6d
    6e70:	strb.w	r3, [r4, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e74:	mvn.w	r3, #83	; 0x53
    6e78:	strb.w	r3, [r4, #394]	; 0x18a
      _b = b;
    6e7c:	mvn.w	r3, #100	; 0x64
    6e80:	strb.w	r3, [r4, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e84:	mov.w	r3, #126	; 0x7e
    6e88:	strb.w	r3, [r4, #396]	; 0x18c
      _s = s;
    6e8c:	mov.w	r3, #72	; 0x48
    6e90:	strb.w	r3, [r4, #397]	; 0x18d
      _b = b;
    6e94:	mvn.w	r3, #51	; 0x33
    6e98:	strb.w	r3, [r4, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e9c:	mov.w	r3, #57	; 0x39
    6ea0:	strb.w	r3, [r4, #400]	; 0x190
      _b = b;
    6ea4:	mvn.w	r3, #24
    6ea8:	strb.w	r3, [r4, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6eac:	mov.w	r3, #99	; 0x63
    6eb0:	strb.w	r3, [r4, #403]	; 0x193
      _b = b;
    6eb4:	mvn.w	r3, #28
    6eb8:	strb.w	r3, [r4, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ebc:	mov.w	r3, #95	; 0x5f
    6ec0:	strb.w	r3, [r4, #406]	; 0x196
      _b = b;
    6ec4:	mvn.w	r3, #29
    6ec8:	strb.w	r3, [r4, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ecc:	mvn.w	r3, #122	; 0x7a
    6ed0:	strb.w	r3, [r4, #408]	; 0x198
      _s = s;
    6ed4:	mov.w	r3, #99	; 0x63
    6ed8:	strb.w	r3, [r4, #409]	; 0x199
      _b = b;
    6edc:	mvn.w	r3, #52	; 0x34
    6ee0:	strb.w	r3, [r4, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ee4:	mov.w	r3, #98	; 0x62
    6ee8:	strb.w	r3, [r4, #412]	; 0x19c
      _b = b;
    6eec:	mvn.w	r3, #69	; 0x45
    6ef0:	strb.w	r3, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ef4:	mov.w	r3, #116	; 0x74
    6ef8:	strb.w	r3, [r4, #415]	; 0x19f
      _b = b;
    6efc:	mov.w	r3, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f00:	strb.w	r1, [r4, #429]	; 0x1ad
      _s = s;
      _b = b;
    6f04:	strb.w	r3, [r4, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f08:	mov.w	r3, #66	; 0x42
      _b = b;
    6f0c:	strb.w	r0, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f10:	strb.w	r3, [r4, #442]	; 0x1ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f14:	mvn.w	r3, #108	; 0x6c
    6f18:	strb.w	r6, [r4, #420]	; 0x1a4
    6f1c:	strb.w	r3, [r4, #417]	; 0x1a1
      _s = s;
    6f20:	mov.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f24:	strb.w	r2, [r4, #423]	; 0x1a7
      _s = s;
    6f28:	strb.w	r3, [r4, #418]	; 0x1a2
      _b = b;
    6f2c:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f30:	strb.w	r6, [r4, #426]	; 0x1aa
      _s = s;
      _b = b;
    6f34:	strb.w	r3, [r4, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f38:	mvn.w	r3, #78	; 0x4e
      _b = b;
    6f3c:	strb.w	fp, [r4, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f40:	strb.w	r3, [r4, #424]	; 0x1a8
      _b = b;
    6f44:	mvn.w	r3, #22
    6f48:	strb.w	r3, [r4, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f4c:	mvn.w	r3, #49	; 0x31
    6f50:	strb.w	r3, [r4, #427]	; 0x1ab
      _b = b;
    6f54:	mvn.w	r3, #26
    6f58:	strb.w	r3, [r4, #428]	; 0x1ac
    6f5c:	mvn.w	r3, #55	; 0x37
    6f60:	strb.w	r3, [r4, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f64:	mvn.w	r3, #95	; 0x5f
    6f68:	strb.w	r3, [r4, #432]	; 0x1b0
      _s = s;
    6f6c:	mov.w	r3, #37	; 0x25
    6f70:	strb.w	r3, [r4, #433]	; 0x1b1
      _b = b;
    6f74:	mov.w	r3, #62	; 0x3e
    6f78:	strb.w	r3, [r4, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f7c:	mov.w	r3, #116	; 0x74
    6f80:	strb.w	r3, [r4, #435]	; 0x1b3
      _s = s;
    6f84:	mov.w	r3, #123	; 0x7b
    6f88:	strb.w	r3, [r4, #436]	; 0x1b4
    6f8c:	mov.w	r3, #96	; 0x60
    6f90:	strb.w	r3, [r4, #439]	; 0x1b7
      _b = b;
    6f94:	mvn.w	r3, #30
    6f98:	strb.w	r3, [r4, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f9c:	mov.w	r3, #38	; 0x26
    6fa0:	strb.w	r3, [r4, #444]	; 0x1bc
    6fa4:	mov.w	r3, #112	; 0x70
    6fa8:	strb.w	r3, [r4, #447]	; 0x1bf
      _s = s;
    6fac:	mov.w	r3, #118	; 0x76
    6fb0:	strb.w	r3, [r4, #448]	; 0x1c0
    6fb4:	mov.w	r3, #73	; 0x49
    6fb8:	strb.w	r3, [r4, #421]	; 0x1a5
    6fbc:	mvn.w	r3, #96	; 0x60
    6fc0:	strb.w	r3, [r4, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fc4:	mov.w	r3, #114	; 0x72
    6fc8:	strb.w	r3, [r4, #438]	; 0x1b6
      _s = s;
      _b = b;
    6fcc:	mvn.w	r3, #39	; 0x27
    6fd0:	strb.w	r3, [r4, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fd4:	mov.w	r3, #106	; 0x6a
    6fd8:	strb.w	r3, [r4, #441]	; 0x1b9
      _s = s;
    6fdc:	mvn.w	r3, #102	; 0x66
    6fe0:	strb.w	r3, [r4, #445]	; 0x1bd
      _b = b;
    6fe4:	mvn.w	r3, #79	; 0x4f
    6fe8:	strb.w	r3, [r4, #446]	; 0x1be
    6fec:	mvn.w	r3, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ff0:	strb.w	r7, [r4, #471]	; 0x1d7
      _s = s;
      _b = b;
    6ff4:	strb.w	r3, [r4, #449]	; 0x1c1
    6ff8:	mvn.w	r3, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ffc:	strb.w	r0, [r4, #478]	; 0x1de
      _b = b;
    7000:	strb.w	r3, [r4, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7004:	mov.w	r3, #116	; 0x74
    7008:	strb.w	r6, [r4, #465]	; 0x1d1
    700c:	strb.w	r3, [r4, #450]	; 0x1c2
      _s = s;
      _b = b;
    7010:	mov.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7014:	strb.w	r9, [r4, #469]	; 0x1d5
      _b = b;
    7018:	strb.w	r3, [r4, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    701c:	mov.w	r3, #98	; 0x62
    7020:	strb.w	r3, [r4, #453]	; 0x1c5
      _s = s;
    7024:	mvn.w	r3, #110	; 0x6e
    7028:	strb.w	r3, [r4, #454]	; 0x1c6
      _b = b;
    702c:	mov.w	r3, #102	; 0x66
    7030:	strb.w	r3, [r4, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7034:	mov.w	r3, #105	; 0x69
    7038:	strb.w	r3, [r4, #456]	; 0x1c8
      _s = s;
    703c:	mov.w	r3, #124	; 0x7c
    7040:	strb.w	r3, [r4, #457]	; 0x1c9
      _b = b;
    7044:	mov.w	r3, #43	; 0x2b
    7048:	strb.w	r3, [r4, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    704c:	mvn.w	r3, #52	; 0x34
    7050:	strb.w	r3, [r4, #459]	; 0x1cb
      _s = s;
    7054:	mov.w	r3, #95	; 0x5f
    7058:	strb.w	r3, [r4, #460]	; 0x1cc
      _b = b;
    705c:	mov.w	r3, #24
    7060:	strb.w	r3, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7064:	mov.w	r3, #121	; 0x79
    7068:	strb.w	r3, [r4, #462]	; 0x1ce
      _s = s;
    706c:	mvn.w	r3, #73	; 0x49
    7070:	strb.w	r3, [r4, #466]	; 0x1d2
      _b = b;
    7074:	mvn.w	r3, #80	; 0x50
    7078:	strb.w	r3, [r4, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    707c:	mvn.w	r3, #118	; 0x76
    7080:	strb.w	r3, [r4, #468]	; 0x1d4
    7084:	mvn.w	r3, #109	; 0x6d
    7088:	strb.w	r3, [r4, #474]	; 0x1da
      _s = s;
    708c:	mvn.w	r3, #110	; 0x6e
    7090:	strb.w	r3, [r4, #475]	; 0x1db
      _b = b;
    7094:	mvn.w	r3, #37	; 0x25
    7098:	strb.w	r3, [r4, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    709c:	mvn.w	r3, #114	; 0x72
    70a0:	strb.w	r3, [r4, #477]	; 0x1dd
    70a4:	mvn.w	r3, #111	; 0x6f
    70a8:	strb.w	r3, [r4, #480]	; 0x1e0
      _s = s;
    70ac:	mvn.w	r3, #81	; 0x51
    70b0:	strb.w	r3, [r4, #481]	; 0x1e1
    70b4:	mvn.w	r3, #34	; 0x22
    70b8:	strb.w	r3, [r4, #451]	; 0x1c3
    70bc:	mvn.w	r3, #121	; 0x79
    70c0:	strb.w	r3, [r4, #463]	; 0x1cf
      _b = b;
    70c4:	mov.w	r3, #106	; 0x6a
    70c8:	strb.w	r3, [r4, #464]	; 0x1d0
    70cc:	mvn.w	r3, #34	; 0x22
    70d0:	strb.w	r3, [r4, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70d4:	mvn.w	r3, #45	; 0x2d
    70d8:	strb.w	r3, [r4, #472]	; 0x1d8
      _b = b;
    70dc:	strb.w	r3, [r4, #473]	; 0x1d9
    70e0:	mvn.w	r3, #31
    70e4:	strb.w	ip, [r4, #485]	; 0x1e5
    70e8:	strb.w	r3, [r4, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ec:	mvn.w	r3, #109	; 0x6d
    70f0:	strb.w	r2, [r4, #504]	; 0x1f8
    70f4:	strb.w	r3, [r4, #483]	; 0x1e3
      _s = s;
    70f8:	mvn.w	r3, #101	; 0x65
    70fc:	strb.w	r6, [r4, #508]	; 0x1fc
    7100:	strb.w	r3, [r4, #484]	; 0x1e4
    7104:	mov.w	r3, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7108:	strb.w	r6, [r4, #510]	; 0x1fe
      _s = s;
    710c:	strb.w	r3, [r4, #487]	; 0x1e7
      _b = b;
    7110:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7114:	strb.w	r8, [r4, #486]	; 0x1e6
      _s = s;
      _b = b;
    7118:	strb.w	r3, [r4, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    711c:	mov.w	r3, #119	; 0x77
    7120:	strb.w	r3, [r4, #489]	; 0x1e9
      _s = s;
    7124:	mov.w	r3, #37	; 0x25
    7128:	strb.w	r3, [r4, #490]	; 0x1ea
      _b = b;
    712c:	mvn.w	r3, #105	; 0x69
    7130:	strb.w	r3, [r4, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7134:	mov.w	r3, #113	; 0x71
    7138:	strb.w	r3, [r4, #492]	; 0x1ec
      _s = s;
    713c:	mov.w	r3, #52	; 0x34
    7140:	strb.w	r3, [r4, #493]	; 0x1ed
      _b = b;
    7144:	mvn.w	r3, #43	; 0x2b
    7148:	strb.w	r3, [r4, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    714c:	mov.w	r3, #121	; 0x79
    7150:	strb.w	r3, [r4, #495]	; 0x1ef
      _s = s;
    7154:	mov.w	r3, #126	; 0x7e
    7158:	strb.w	r3, [r4, #496]	; 0x1f0
      _b = b;
    715c:	mvn.w	r3, #47	; 0x2f
    7160:	strb.w	r3, [r4, #497]	; 0x1f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7164:	mov.w	r3, #126	; 0x7e
    7168:	strb.w	r3, [r4, #498]	; 0x1f2
      _s = s;
    716c:	mvn.w	r3, #58	; 0x3a
    7170:	strb.w	r3, [r4, #499]	; 0x1f3
      _b = b;
    7174:	mvn.w	r3, #65	; 0x41
    7178:	strb.w	r3, [r4, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    717c:	mov.w	r3, #127	; 0x7f
    7180:	strb.w	r3, [r4, #501]	; 0x1f5
      _s = s;
    7184:	mvn.w	r3, #107	; 0x6b
    7188:	strb.w	r3, [r4, #502]	; 0x1f6
      _b = b;
    718c:	mvn.w	r3, #78	; 0x4e
    7190:	strb.w	r3, [r4, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7194:	mov.w	r3, #97	; 0x61
    7198:	strb.w	r3, [r4, #505]	; 0x1f9
      _b = b;
    719c:	mvn.w	r3, #96	; 0x60
    71a0:	strb.w	r3, [r4, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71a4:	mov.w	r3, #127	; 0x7f
    71a8:	strb.w	r3, [r4, #507]	; 0x1fb
      _s = s;
      _b = b;
    71ac:	mvn.w	r3, #67	; 0x43
    71b0:	strb.w	r3, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71b4:	mvn.w	r3, #34	; 0x22
    71b8:	strb.w	r3, [r4, #511]	; 0x1ff
      _b = b;
    71bc:	mvn.w	r3, #110	; 0x6e
    71c0:	strb.w	r3, [r4, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71c4:	mvn.w	r3, #120	; 0x78
    71c8:	strb.w	r3, [r4, #513]	; 0x201
      _s = s;
    71cc:	mvn.w	r3, #28
    71d0:	strb.w	r3, [r4, #514]	; 0x202
      _b = b;
    71d4:	mvn.w	r3, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71d8:	strb.w	lr, [r4, #517]	; 0x205
      _b = b;
    71dc:	strb.w	r3, [r4, #515]	; 0x203
    71e0:	mov.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71e4:	strb.w	lr, [r4, #541]	; 0x21d
      _b = b;
    71e8:	strb.w	r3, [r4, #533]	; 0x215
    71ec:	mvn.w	r3, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71f0:	strb.w	r7, [r4, #543]	; 0x21f
      _s = s;
      _b = b;
    71f4:	strb.w	r3, [r4, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71f8:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71fc:	strb.w	fp, [r4, #546]	; 0x222
      _s = s;
    7200:	strb.w	r3, [r4, #520]	; 0x208
      _b = b;
    7204:	mvn.w	r3, #78	; 0x4e
    7208:	strb.w	r3, [r4, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    720c:	mov.w	r3, #111	; 0x6f
    7210:	strb.w	r3, [r4, #522]	; 0x20a
      _s = s;
    7214:	mvn.w	r3, #104	; 0x68
    7218:	strb.w	r3, [r4, #523]	; 0x20b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    721c:	mov.w	r3, #99	; 0x63
    7220:	strb.w	r3, [r4, #525]	; 0x20d
      _s = s;
      _b = b;
    7224:	mov.w	r3, #60	; 0x3c
    7228:	strb.w	r3, [r4, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    722c:	mvn.w	r3, #64	; 0x40
    7230:	strb.w	r3, [r4, #528]	; 0x210
      _s = s;
      _b = b;
    7234:	mov.w	r3, #24
    7238:	strb.w	r3, [r4, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    723c:	mvn.w	r3, #64	; 0x40
    7240:	strb.w	r3, [r4, #531]	; 0x213
      _s = s;
    7244:	mov.w	r3, #102	; 0x66
    7248:	strb.w	r3, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    724c:	mov.w	r3, #127	; 0x7f
    7250:	strb.w	r3, [r4, #534]	; 0x216
      _s = s;
      _b = b;
    7254:	mov.w	r3, #121	; 0x79
    7258:	strb.w	r3, [r4, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    725c:	mvn.w	r3, #61	; 0x3d
    7260:	strb.w	r3, [r4, #538]	; 0x21a
      _b = b;
    7264:	mvn.w	r3, #37	; 0x25
    7268:	strb.w	r3, [r4, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    726c:	mvn.w	r3, #111	; 0x6f
    7270:	strb.w	r3, [r4, #540]	; 0x21c
      _s = s;
      _b = b;
    7274:	mvn.w	r3, #54	; 0x36
    7278:	strb.w	r3, [r4, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    727c:	mov.w	r3, #121	; 0x79
    7280:	strb.w	r3, [r4, #544]	; 0x220
      _b = b;
    7284:	mvn.w	r3, #35	; 0x23
    7288:	strb.w	r3, [r4, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    728c:	mvn.w	r3, #120	; 0x78
    7290:	strb.w	r3, [r4, #516]	; 0x204
    7294:	mvn.w	r3, #119	; 0x77
    7298:	strb.w	r3, [r4, #519]	; 0x207
      _s = s;
      _b = b;
    729c:	strb.w	r3, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72a0:	mov.w	r3, #114	; 0x72
    72a4:	strb.w	r3, [r4, #526]	; 0x20e
    72a8:	mov.w	r3, #106	; 0x6a
    72ac:	strb.w	r3, [r4, #529]	; 0x211
    72b0:	mov.w	r3, #115	; 0x73
    72b4:	strb.w	r3, [r4, #535]	; 0x217
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72b8:	mvn.w	r3, #122	; 0x7a
    72bc:	strb.w	r3, [r4, #537]	; 0x219
      _s = s;
    72c0:	mov.w	r3, #114	; 0x72
    72c4:	strb.w	r3, [r4, #547]	; 0x223
      _b = b;
    72c8:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72cc:	strb.w	r7, [r4, #558]	; 0x22e
      _s = s;
      _b = b;
    72d0:	strb.w	r3, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72d4:	mvn.w	r3, #70	; 0x46
    72d8:	strb.w	r2, [r4, #559]	; 0x22f
    72dc:	strb.w	r3, [r4, #550]	; 0x226
      _b = b;
    72e0:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72e4:	strb.w	r2, [r4, #579]	; 0x243
      _s = s;
      _b = b;
    72e8:	strb.w	r3, [r4, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72ec:	mov.w	r3, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72f0:	strb.w	r9, [r4, #549]	; 0x225
      _s = s;
    72f4:	strb.w	r3, [r4, #553]	; 0x229
      _b = b;
    72f8:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72fc:	strb.w	fp, [r4, #552]	; 0x228
      _s = s;
      _b = b;
    7300:	strb.w	r3, [r4, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7304:	mov.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7308:	strb.w	fp, [r4, #555]	; 0x22b
      _s = s;
    730c:	strb.w	r3, [r4, #556]	; 0x22c
      _b = b;
    7310:	mvn.w	r3, #19
    7314:	strb.w	r9, [r4, #566]	; 0x236
    7318:	strb.w	r3, [r4, #557]	; 0x22d
    731c:	mvn.w	r3, #25
    7320:	strb.w	fp, [r4, #569]	; 0x239
    7324:	strb.w	r3, [r4, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7328:	mvn.w	r3, #122	; 0x7a
    732c:	strb.w	r3, [r4, #561]	; 0x231
      _s = s;
    7330:	mov.w	r3, #78	; 0x4e
    7334:	strb.w	r3, [r4, #562]	; 0x232
      _b = b;
    7338:	mvn.w	r3, #58	; 0x3a
    733c:	strb.w	r3, [r4, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7340:	mov.w	r3, #110	; 0x6e
    7344:	strb.w	r3, [r4, #564]	; 0x234
      _s = s;
    7348:	mov.w	r3, #93	; 0x5d
    734c:	strb.w	r3, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7350:	mov.w	r3, #120	; 0x78
    7354:	strb.w	r3, [r4, #567]	; 0x237
      _s = s;
    7358:	mov.w	r3, #122	; 0x7a
    735c:	strb.w	r3, [r4, #568]	; 0x238
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7360:	mov.w	r3, #120	; 0x78
    7364:	strb.w	r3, [r4, #570]	; 0x23a
      _s = s;
    7368:	mov.w	r3, #124	; 0x7c
    736c:	strb.w	r3, [r4, #571]	; 0x23b
      _b = b;
    7370:	mvn.w	r3, #93	; 0x5d
    7374:	strb.w	r3, [r4, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7378:	mov.w	r3, #126	; 0x7e
    737c:	strb.w	r3, [r4, #573]	; 0x23d
      _s = s;
    7380:	mov.w	r3, #115	; 0x73
    7384:	strb.w	r3, [r4, #574]	; 0x23e
      _b = b;
    7388:	mvn.w	r3, #94	; 0x5e
    738c:	strb.w	r3, [r4, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7390:	mov.w	r3, #120	; 0x78
    7394:	strb.w	r3, [r4, #576]	; 0x240
      _s = s;
    7398:	mov.w	r3, #45	; 0x2d
    739c:	strb.w	r3, [r4, #577]	; 0x241
      _b = b;
    73a0:	mvn.w	r3, #66	; 0x42
    73a4:	strb.w	r3, [r4, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73a8:	mvn.w	r3, #55	; 0x37
    73ac:	strb.w	r3, [r4, #580]	; 0x244
      _b = b;
    73b0:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73b4:	strb.w	r1, [r4, #582]	; 0x246
      _s = s;
      _b = b;
    73b8:	strb.w	r3, [r4, #581]	; 0x245
    73bc:	mov.w	r3, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73c0:	strb.w	r1, [r4, #604]	; 0x25c
      _b = b;
    73c4:	strb.w	r3, [r4, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73c8:	mvn.w	r3, #5
    73cc:	strb.w	r7, [r4, #613]	; 0x265
    73d0:	strb.w	r3, [r4, #586]	; 0x24a
      _b = b;
    73d4:	mvn.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73d8:	strb.w	r6, [r4, #585]	; 0x249
      _s = s;
      _b = b;
    73dc:	strb.w	r3, [r4, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73e0:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e4:	strb.w	r6, [r4, #588]	; 0x24c
      _s = s;
    73e8:	strb.w	r3, [r4, #589]	; 0x24d
      _b = b;
    73ec:	mvn.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73f0:	strb.w	r8, [r4, #591]	; 0x24f
      _s = s;
      _b = b;
    73f4:	strb.w	r3, [r4, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73f8:	mvn.w	r3, #98	; 0x62
    73fc:	strb.w	r3, [r4, #592]	; 0x250
      _b = b;
    7400:	mvn.w	r3, #111	; 0x6f
    7404:	strb.w	r3, [r4, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7408:	mvn.w	r3, #94	; 0x5e
    740c:	strb.w	r3, [r4, #594]	; 0x252
      _s = s;
    7410:	mov.w	r3, #83	; 0x53
    7414:	strb.w	r3, [r4, #595]	; 0x253
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7418:	mvn.w	r3, #15
    741c:	strb.w	r3, [r4, #597]	; 0x255
      _s = s;
    7420:	mov.w	r3, #119	; 0x77
    7424:	strb.w	r3, [r4, #598]	; 0x256
      _b = b;
    7428:	mov.w	r3, #83	; 0x53
    742c:	strb.w	r3, [r4, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7430:	mov.w	r3, #1
    7434:	strb.w	r3, [r4, #600]	; 0x258
      _s = s;
    7438:	mov.w	r3, #102	; 0x66
    743c:	strb.w	r3, [r4, #601]	; 0x259
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7440:	mvn.w	r3, #114	; 0x72
    7444:	strb.w	r3, [r4, #603]	; 0x25b
      _s = s;
      _b = b;
    7448:	mov.w	r3, #127	; 0x7f
    744c:	strb.w	r3, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7450:	mvn.w	r3, #114	; 0x72
    7454:	strb.w	r3, [r4, #606]	; 0x25e
      _s = s;
    7458:	mvn.w	r3, #35	; 0x23
    745c:	strb.w	r3, [r4, #607]	; 0x25f
      _b = b;
    7460:	mvn.w	r3, #26
    7464:	strb.w	r3, [r4, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7468:	mvn.w	r3, #114	; 0x72
    746c:	strb.w	r3, [r4, #609]	; 0x261
      _s = s;
      _b = b;
    7470:	mvn.w	r3, #56	; 0x38
    7474:	strb.w	r3, [r4, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7478:	mvn.w	r3, #118	; 0x76
    747c:	strb.w	r3, [r4, #612]	; 0x264
      _s = s;
    7480:	mvn.w	r3, #8
    7484:	strb.w	r3, [r4, #583]	; 0x247
      _b = b;
    7488:	mvn.w	r3, #119	; 0x77
    748c:	strb.w	r3, [r4, #584]	; 0x248
    7490:	mvn.w	r3, #120	; 0x78
    7494:	strb.w	r3, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7498:	mvn.w	r3, #45	; 0x2d
    749c:	strb.w	r3, [r4, #610]	; 0x262
      _b = b;
    74a0:	mvn.w	r3, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74a4:	strb.w	r7, [r4, #624]	; 0x270
      _s = s;
      _b = b;
    74a8:	strb.w	r3, [r4, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ac:	mvn.w	r3, #120	; 0x78
      _s = s;
      _b = b;
    74b0:	strb.w	ip, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74b4:	strb.w	r3, [r4, #615]	; 0x267
      _s = s;
    74b8:	mvn.w	r3, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74bc:	strb.w	r2, [r4, #636]	; 0x27c
      _s = s;
    74c0:	strb.w	r3, [r4, #616]	; 0x268
      _b = b;
    74c4:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74c8:	strb.w	fp, [r4, #627]	; 0x273
      _s = s;
      _b = b;
    74cc:	strb.w	r3, [r4, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74d0:	mvn.w	r3, #121	; 0x79
    74d4:	strb.w	r8, [r4, #630]	; 0x276
    74d8:	strb.w	r3, [r4, #618]	; 0x26a
      _s = s;
    74dc:	mvn.w	r3, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74e0:	strb.w	r8, [r4, #633]	; 0x279
      _s = s;
    74e4:	strb.w	r3, [r4, #619]	; 0x26b
      _b = b;
    74e8:	mvn.w	r3, #29
    74ec:	strb.w	r3, [r4, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74f0:	mvn.w	r3, #118	; 0x76
    74f4:	strb.w	r3, [r4, #621]	; 0x26d
      _s = s;
    74f8:	mvn.w	r3, #81	; 0x51
    74fc:	strb.w	r3, [r4, #622]	; 0x26e
      _b = b;
    7500:	mvn.w	r3, #47	; 0x2f
    7504:	strb.w	r3, [r4, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7508:	mvn.w	r3, #119	; 0x77
    750c:	strb.w	r3, [r4, #625]	; 0x271
      _b = b;
    7510:	mvn.w	r3, #50	; 0x32
    7514:	strb.w	r3, [r4, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7518:	mvn.w	r3, #102	; 0x66
    751c:	strb.w	r3, [r4, #628]	; 0x274
    7520:	mov.w	r3, #86	; 0x56
    7524:	strb.w	r3, [r4, #631]	; 0x277
      _b = b;
    7528:	mvn.w	r3, #23
    752c:	strb.w	r3, [r4, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7530:	mov.w	r3, #114	; 0x72
    7534:	strb.w	r3, [r4, #634]	; 0x27a
      _b = b;
    7538:	mvn.w	r3, #32
    753c:	strb.w	r3, [r4, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7540:	mvn.w	r3, #40	; 0x28
    7544:	strb.w	r3, [r4, #637]	; 0x27d
      _b = b;
    7548:	mov.w	r3, #97	; 0x61
    754c:	strb.w	r3, [r4, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7550:	mvn.w	r3, #50	; 0x32
    7554:	strb.w	r3, [r4, #639]	; 0x27f
      _s = s;
    7558:	mov.w	r3, #85	; 0x55
    755c:	strb.w	r3, [r4, #640]	; 0x280
      _b = b;
    7560:	mov.w	r3, #18
    7564:	strb.w	r3, [r4, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7568:	mvn.w	r3, #50	; 0x32
    756c:	strb.w	r3, [r4, #642]	; 0x282
      _s = s;
    7570:	mov.w	r3, #90	; 0x5a
    7574:	strb.w	r3, [r4, #643]	; 0x283
      _b = b;
    7578:	mov.w	r3, #17
    757c:	strb.w	r3, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7580:	mvn.w	r3, #51	; 0x33
    7584:	strb.w	r3, [r4, #645]	; 0x285
      _s = s;
    7588:	mov.w	r3, #70	; 0x46
    758c:	strb.w	r3, [r4, #646]	; 0x286
      _b = b;
    7590:	mov.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7594:	strb.w	r1, [r4, #657]	; 0x291
      _s = s;
      _b = b;
    7598:	strb.w	r3, [r4, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    759c:	mov.w	r3, #95	; 0x5f
      _s = s;
      _b = b;
    75a0:	strb.w	lr, [r4, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75a4:	strb.w	r3, [r4, #648]	; 0x288
      _s = s;
    75a8:	mov.w	r3, #13
    75ac:	strb.w	r2, [r4, #673]	; 0x2a1
    75b0:	strb.w	r3, [r4, #649]	; 0x289
      _b = b;
    75b4:	mvn.w	r3, #29
    75b8:	strb.w	ip, [r4, #677]	; 0x2a5
    75bc:	strb.w	r3, [r4, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75c0:	mvn.w	r3, #122	; 0x7a
    75c4:	strb.w	r9, [r4, #660]	; 0x294
    75c8:	strb.w	r3, [r4, #651]	; 0x28b
      _s = s;
    75cc:	mov.w	r3, #87	; 0x57
    75d0:	strb.w	r3, [r4, #652]	; 0x28c
      _b = b;
    75d4:	mvn.w	r3, #68	; 0x44
    75d8:	strb.w	r3, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75dc:	mvn.w	r3, #122	; 0x7a
    75e0:	strb.w	r3, [r4, #654]	; 0x28e
      _s = s;
    75e4:	mvn.w	r3, #7
    75e8:	strb.w	r3, [r4, #655]	; 0x28f
      _b = b;
    75ec:	mvn.w	r3, #91	; 0x5b
    75f0:	strb.w	r3, [r4, #656]	; 0x290
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    75f4:	mvn.w	r3, #106	; 0x6a
    75f8:	strb.w	r3, [r4, #658]	; 0x292
      _b = b;
    75fc:	mvn.w	r3, #67	; 0x43
    7600:	strb.w	r3, [r4, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7604:	mvn.w	r3, #78	; 0x4e
    7608:	strb.w	r3, [r4, #661]	; 0x295
      _b = b;
    760c:	mvn.w	r3, #30
    7610:	strb.w	r3, [r4, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7614:	mvn.w	r3, #99	; 0x63
    7618:	strb.w	r3, [r4, #663]	; 0x297
      _s = s;
    761c:	mov.w	r3, #91	; 0x5b
    7620:	strb.w	r3, [r4, #664]	; 0x298
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7624:	mvn.w	r3, #78	; 0x4e
    7628:	strb.w	r3, [r4, #666]	; 0x29a
      _s = s;
    762c:	mvn.w	r3, #66	; 0x42
    7630:	strb.w	r3, [r4, #667]	; 0x29b
      _b = b;
    7634:	mvn.w	r3, #6
    7638:	strb.w	r3, [r4, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    763c:	mvn.w	r3, #72	; 0x48
    7640:	strb.w	r3, [r4, #669]	; 0x29d
      _s = s;
    7644:	mov.w	r3, #115	; 0x73
    7648:	strb.w	r3, [r4, #670]	; 0x29e
      _b = b;
    764c:	mvn.w	r3, #5
    7650:	strb.w	r3, [r4, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7654:	mvn.w	r3, #71	; 0x47
    7658:	strb.w	r3, [r4, #672]	; 0x2a0
      _s = s;
      _b = b;
    765c:	mvn.w	r3, #14
    7660:	strb.w	r3, [r4, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7664:	mvn.w	r3, #103	; 0x67
    7668:	strb.w	r3, [r4, #675]	; 0x2a3
      _s = s;
    766c:	mvn.w	r3, #56	; 0x38
    7670:	strb.w	r3, [r4, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7674:	mvn.w	r3, #93	; 0x5d
    7678:	strb.w	r3, [r4, #678]	; 0x2a6
      _s = s;
      _b = b;
    767c:	mvn.w	r3, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7680:	strb.w	lr, [r4, #679]	; 0x2a7
      _b = b;
    7684:	strb.w	r3, [r4, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7688:	mov.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    768c:	strb.w	r0, [r4, #699]	; 0x2bb
      _s = s;
    7690:	strb.w	r3, [r4, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7694:	mvn.w	r3, #114	; 0x72
    7698:	strb.w	r0, [r4, #705]	; 0x2c1
    769c:	strb.w	r3, [r4, #681]	; 0x2a9
      _s = s;
    76a0:	mvn.w	r3, #84	; 0x54
      _b = b;
    76a4:	strb.w	ip, [r4, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76a8:	strb.w	r3, [r4, #682]	; 0x2aa
      _b = b;
    76ac:	mvn.w	r3, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76b0:	strb.w	r6, [r4, #684]	; 0x2ac
      _s = s;
      _b = b;
    76b4:	strb.w	r3, [r4, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76b8:	mvn.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76bc:	strb.w	fp, [r4, #696]	; 0x2b8
      _s = s;
    76c0:	strb.w	r3, [r4, #685]	; 0x2ad
      _b = b;
    76c4:	mvn.w	r3, #24
    76c8:	strb.w	r3, [r4, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76cc:	mvn.w	r3, #6
    76d0:	strb.w	r3, [r4, #688]	; 0x2b0
      _b = b;
    76d4:	mvn.w	r3, #36	; 0x24
    76d8:	strb.w	r3, [r4, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76dc:	mvn.w	r3, #118	; 0x76
    76e0:	strb.w	r3, [r4, #690]	; 0x2b2
      _s = s;
    76e4:	mvn.w	r3, #9
    76e8:	strb.w	r3, [r4, #691]	; 0x2b3
      _b = b;
    76ec:	mvn.w	r3, #49	; 0x31
    76f0:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76f4:	mvn.w	r3, #118	; 0x76
    76f8:	strb.w	r3, [r4, #693]	; 0x2b5
      _s = s;
    76fc:	mvn.w	r3, #62	; 0x3e
    7700:	strb.w	r3, [r4, #694]	; 0x2b6
      _b = b;
    7704:	mvn.w	r3, #57	; 0x39
    7708:	strb.w	r3, [r4, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    770c:	mvn.w	r3, #38	; 0x26
    7710:	strb.w	r3, [r4, #697]	; 0x2b9
      _b = b;
    7714:	mvn.w	r3, #43	; 0x2b
    7718:	strb.w	r3, [r4, #698]	; 0x2ba
    771c:	mvn.w	r3, #28
    7720:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7724:	mvn.w	r3, #105	; 0x69
    7728:	strb.w	r3, [r4, #702]	; 0x2be
      _s = s;
      _b = b;
    772c:	mvn.w	r3, #17
    7730:	strb.w	r3, [r4, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7734:	mvn.w	r3, #126	; 0x7e
    7738:	strb.w	r3, [r4, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    773c:	mvn.w	r3, #105	; 0x69
    7740:	strb.w	r3, [r4, #708]	; 0x2c4
      _s = s;
    7744:	mvn.w	r3, #41	; 0x29
    7748:	strb.w	r3, [r4, #709]	; 0x2c5
      _b = b;
    774c:	mvn.w	r3, #59	; 0x3b
    7750:	strb.w	r3, [r4, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7754:	mvn.w	r3, #64	; 0x40
    7758:	strb.w	r3, [r4, #711]	; 0x2c7
      _s = s;
    775c:	mov.w	r3, #97	; 0x61
    7760:	strb.w	r3, [r4, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7764:	mvn.w	r3, #120	; 0x78
    7768:	strb.w	r3, [r4, #687]	; 0x2af
      _s = s;
    776c:	mov.w	r3, #85	; 0x55
    7770:	strb.w	r3, [r4, #703]	; 0x2bf
      _b = b;
    7774:	mov.w	r3, #21
    7778:	strb.w	r0, [r4, #722]	; 0x2d2
    777c:	strb.w	r3, [r4, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7780:	mvn.w	r3, #43	; 0x2b
      _s = s;
      _b = b;
    7784:	strb.w	r8, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7788:	strb.w	r3, [r4, #714]	; 0x2ca
      _s = s;
    778c:	mov.w	r3, #90	; 0x5a
    7790:	strb.w	r3, [r4, #715]	; 0x2cb
      _b = b;
    7794:	mov.w	r3, #17
    7798:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    779c:	mvn.w	r3, #50	; 0x32
    77a0:	strb.w	r3, [r4, #717]	; 0x2cd
      _s = s;
    77a4:	mov.w	r3, #76	; 0x4c
    77a8:	strb.w	r3, [r4, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ac:	mov.w	r3, #113	; 0x71
    77b0:	strb.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    77b4:	mov.w	r3, #69	; 0x45
    77b8:	strb.w	r3, [r4, #721]	; 0x2d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77bc:	mvn.w	r3, #126	; 0x7e
    77c0:	strb.w	r3, [r4, #723]	; 0x2d3
      _s = s;
    77c4:	mov.w	r3, #97	; 0x61
    77c8:	strb.w	r3, [r4, #724]	; 0x2d4
    77cc:	mov.w	r3, #90	; 0x5a
    77d0:	strb.w	r3, [r4, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77d4:	mvn.w	r3, #111	; 0x6f
    77d8:	strb.w	r3, [r4, #729]	; 0x2d9
      _s = s;
    77dc:	mov.w	r3, #46	; 0x2e
    77e0:	strb.w	r3, [r4, #730]	; 0x2da
      _b = b;
    77e4:	mvn.w	r3, #5
    77e8:	strb.w	r3, [r4, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ec:	mvn.w	r3, #107	; 0x6b
    77f0:	strb.w	r3, [r4, #732]	; 0x2dc
      _s = s;
    77f4:	mov.w	r3, #104	; 0x68
    77f8:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77fc:	mvn.w	r3, #91	; 0x5b
    7800:	strb.w	r3, [r4, #735]	; 0x2df
      _s = s;
    7804:	mov.w	r3, #121	; 0x79
    7808:	strb.w	r3, [r4, #739]	; 0x2e3
      _b = b;
    780c:	mvn.w	r3, #5
    7810:	strb.w	r3, [r4, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7814:	mvn.w	r3, #69	; 0x45
    7818:	strb.w	r3, [r4, #741]	; 0x2e5
      _s = s;
    781c:	mov.w	r3, #103	; 0x67
    7820:	strb.w	r3, [r4, #742]	; 0x2e6
      _b = b;
    7824:	mvn.w	r3, #6
    7828:	strb.w	r3, [r4, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    782c:	mvn.w	r3, #71	; 0x47
    7830:	strb.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    7834:	mov.w	r3, #69	; 0x45
    7838:	strb.w	r3, [r4, #745]	; 0x2e9
      _b = b;
    783c:	mov.w	r3, #20
    7840:	strb.w	r3, [r4, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7844:	mvn.w	r3, #122	; 0x7a
    7848:	strb.w	r3, [r4, #726]	; 0x2d6
      _s = s;
      _b = b;
    784c:	mvn.w	r3, #11
    7850:	strb.w	r3, [r4, #728]	; 0x2d8
    7854:	mvn.w	r3, #4
    7858:	strb.w	r3, [r4, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    785c:	mov.w	r3, #85	; 0x55
    7860:	strb.w	r3, [r4, #736]	; 0x2e0
      _b = b;
    7864:	mvn.w	r3, #4
    7868:	strb.w	r3, [r4, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    786c:	mvn.w	r3, #79	; 0x4f
    7870:	strb.w	r3, [r4, #738]	; 0x2e2
      _s = s;
      _b = b;
    7874:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7878:	strb.w	r1, [r4, #756]	; 0x2f4
      _s = s;
      _b = b;
    787c:	strb.w	r3, [r4, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7880:	mvn.w	r3, #68	; 0x44
    7884:	strb.w	r7, [r4, #765]	; 0x2fd
    7888:	strb.w	r3, [r4, #747]	; 0x2eb
      _s = s;
    788c:	mov.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7890:	strb.w	r0, [r4, #771]	; 0x303
      _s = s;
    7894:	strb.w	r3, [r4, #748]	; 0x2ec
      _b = b;
    7898:	mvn.w	r3, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    789c:	strb.w	r9, [r4, #762]	; 0x2fa
      _s = s;
      _b = b;
    78a0:	strb.w	r3, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78a4:	mvn.w	r3, #87	; 0x57
    78a8:	strb.w	r8, [r4, #768]	; 0x300
    78ac:	strb.w	r3, [r4, #750]	; 0x2ee
      _s = s;
    78b0:	mvn.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78b4:	strb.w	r9, [r4, #777]	; 0x309
      _s = s;
    78b8:	strb.w	r3, [r4, #751]	; 0x2ef
      _b = b;
    78bc:	mvn.w	r3, #17
    78c0:	strb.w	r3, [r4, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78c4:	mvn.w	r3, #109	; 0x6d
    78c8:	strb.w	r3, [r4, #753]	; 0x2f1
      _s = s;
    78cc:	mvn.w	r3, #42	; 0x2a
    78d0:	strb.w	r3, [r4, #754]	; 0x2f2
      _b = b;
    78d4:	mvn.w	r3, #54	; 0x36
    78d8:	strb.w	r3, [r4, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78dc:	mvn.w	r3, #114	; 0x72
    78e0:	strb.w	r3, [r4, #757]	; 0x2f5
      _b = b;
    78e4:	mvn.w	r3, #28
    78e8:	strb.w	r3, [r4, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78ec:	mvn.w	r3, #120	; 0x78
    78f0:	strb.w	r3, [r4, #759]	; 0x2f7
      _s = s;
    78f4:	mvn.w	r3, #104	; 0x68
    78f8:	strb.w	r3, [r4, #760]	; 0x2f8
      _b = b;
    78fc:	mvn.w	r3, #48	; 0x30
    7900:	strb.w	r3, [r4, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7904:	mvn.w	r3, #51	; 0x33
    7908:	strb.w	r3, [r4, #763]	; 0x2fb
      _b = b;
    790c:	mvn.w	r3, #58	; 0x3a
    7910:	strb.w	r3, [r4, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7914:	mvn.w	r3, #70	; 0x46
    7918:	strb.w	r3, [r4, #766]	; 0x2fe
      _b = b;
    791c:	mvn.w	r3, #75	; 0x4b
    7920:	strb.w	r3, [r4, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7924:	mvn.w	r3, #80	; 0x50
    7928:	strb.w	r3, [r4, #769]	; 0x301
      _b = b;
    792c:	mvn.w	r3, #52	; 0x34
    7930:	strb.w	r3, [r4, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7934:	mov.w	r3, #91	; 0x5b
    7938:	strb.w	r3, [r4, #772]	; 0x304
      _b = b;
    793c:	mvn.w	r3, #35	; 0x23
    7940:	strb.w	r3, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7944:	mvn.w	r3, #97	; 0x61
    7948:	strb.w	r3, [r4, #774]	; 0x306
      _s = s;
    794c:	mov.w	r3, #99	; 0x63
    7950:	strb.w	r3, [r4, #775]	; 0x307
      _b = b;
    7954:	mvn.w	r3, #19
    7958:	strb.w	r3, [r4, #776]	; 0x308
    795c:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7960:	strb.w	r7, [r4, #778]	; 0x30a
      _b = b;
    7964:	strb.w	r3, [r4, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7968:	mov.w	r3, #45	; 0x2d
    796c:	strb.w	lr, [r4, #781]	; 0x30d
    7970:	strb.w	r3, [r4, #799]	; 0x31f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7974:	mvn.w	r3, #103	; 0x67
      _s = s;
      _b = b;
    7978:	strb.w	lr, [r4, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    797c:	strb.w	r3, [r4, #780]	; 0x30c
      _s = s;
      _b = b;
    7980:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7984:	strb.w	fp, [r4, #808]	; 0x328
      _b = b;
    7988:	strb.w	r3, [r4, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    798c:	mvn.w	r3, #107	; 0x6b
    7990:	strb.w	r3, [r4, #783]	; 0x30f
      _s = s;
    7994:	mvn.w	r3, #15
    7998:	strb.w	r3, [r4, #784]	; 0x310
      _b = b;
    799c:	mvn.w	r3, #93	; 0x5d
    79a0:	strb.w	r3, [r4, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79a4:	mvn.w	r3, #107	; 0x6b
    79a8:	strb.w	r3, [r4, #786]	; 0x312
      _s = s;
    79ac:	strb.w	r3, [r4, #787]	; 0x313
      _b = b;
    79b0:	mov.w	r3, #31
    79b4:	strb.w	r3, [r4, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79b8:	mvn.w	r3, #107	; 0x6b
    79bc:	strb.w	r3, [r4, #790]	; 0x316
      _b = b;
    79c0:	mov.w	r3, #103	; 0x67
    79c4:	strb.w	r3, [r4, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79c8:	mov.w	r3, #121	; 0x79
    79cc:	strb.w	r3, [r4, #792]	; 0x318
      _s = s;
    79d0:	mov.w	r3, #119	; 0x77
    79d4:	strb.w	r3, [r4, #793]	; 0x319
      _b = b;
    79d8:	mvn.w	r3, #56	; 0x38
    79dc:	strb.w	r3, [r4, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79e0:	mvn.w	r3, #50	; 0x32
    79e4:	strb.w	r3, [r4, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79e8:	mvn.w	r3, #100	; 0x64
    79ec:	strb.w	r3, [r4, #798]	; 0x31e
      _s = s;
      _b = b;
    79f0:	mvn.w	r3, #5
    79f4:	strb.w	r3, [r4, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79f8:	mvn.w	r3, #95	; 0x5f
    79fc:	strb.w	r3, [r4, #801]	; 0x321
      _s = s;
    7a00:	mov.w	r3, #79	; 0x4f
    7a04:	strb.w	r3, [r4, #802]	; 0x322
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a08:	mvn.w	r3, #107	; 0x6b
    7a0c:	strb.w	r3, [r4, #804]	; 0x324
      _s = s;
    7a10:	mov.w	r3, #124	; 0x7c
    7a14:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a18:	mvn.w	r3, #90	; 0x5a
    7a1c:	strb.w	r3, [r4, #807]	; 0x327
      _s = s;
      _b = b;
    7a20:	mvn.w	r3, #7
    7a24:	strb.w	r3, [r4, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a28:	mvn.w	r3, #74	; 0x4a
    7a2c:	strb.w	r3, [r4, #810]	; 0x32a
      _s = s;
    7a30:	mov.w	r3, #68	; 0x44
    7a34:	strb.w	r3, [r4, #811]	; 0x32b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a38:	mvn.w	r3, #122	; 0x7a
    7a3c:	strb.w	r3, [r4, #789]	; 0x315
    7a40:	mvn.w	r3, #119	; 0x77
    7a44:	strb.w	r3, [r4, #795]	; 0x31b
      _s = s;
      _b = b;
    7a48:	mvn.w	r3, #11
    7a4c:	strb.w	r3, [r4, #797]	; 0x31d
    7a50:	mvn.w	r3, #8
    7a54:	strb.w	r3, [r4, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a58:	mvn.w	r3, #62	; 0x3e
      _s = s;
      _b = b;
    7a5c:	strb.w	lr, [r4, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a60:	strb.w	r3, [r4, #813]	; 0x32d
      _s = s;
    7a64:	mov.w	r3, #88	; 0x58
    7a68:	strb.w	r6, [r4, #841]	; 0x349
    7a6c:	strb.w	r3, [r4, #814]	; 0x32e
      _b = b;
    7a70:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a74:	strb.w	fp, [r4, #831]	; 0x33f
      _s = s;
      _b = b;
    7a78:	strb.w	r3, [r4, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a7c:	mvn.w	r3, #59	; 0x3b
    7a80:	strb.w	r9, [r4, #840]	; 0x348
    7a84:	strb.w	r3, [r4, #816]	; 0x330
      _s = s;
    7a88:	mov.w	r3, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a8c:	strb.w	fp, [r4, #843]	; 0x34b
      _s = s;
    7a90:	strb.w	r3, [r4, #817]	; 0x331
      _b = b;
    7a94:	mvn.w	r3, #6
    7a98:	strb.w	r3, [r4, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a9c:	mvn.w	r3, #57	; 0x39
    7aa0:	strb.w	r3, [r4, #819]	; 0x333
      _s = s;
    7aa4:	mov.w	r3, #58	; 0x3a
    7aa8:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    7aac:	mvn.w	r3, #9
    7ab0:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab4:	mvn.w	r3, #73	; 0x49
    7ab8:	strb.w	r3, [r4, #822]	; 0x336
      _s = s;
    7abc:	mov.w	r3, #74	; 0x4a
    7ac0:	strb.w	r3, [r4, #823]	; 0x337
      _b = b;
    7ac4:	mvn.w	r3, #15
    7ac8:	strb.w	r3, [r4, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7acc:	mvn.w	r3, #95	; 0x5f
    7ad0:	strb.w	r3, [r4, #825]	; 0x339
      _s = s;
    7ad4:	mvn.w	r3, #10
    7ad8:	strb.w	r3, [r4, #826]	; 0x33a
      _b = b;
    7adc:	mvn.w	r3, #42	; 0x2a
    7ae0:	strb.w	r3, [r4, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ae4:	mvn.w	r3, #102	; 0x66
    7ae8:	strb.w	r3, [r4, #828]	; 0x33c
      _s = s;
    7aec:	mvn.w	r3, #6
    7af0:	strb.w	r3, [r4, #829]	; 0x33d
      _b = b;
    7af4:	mvn.w	r3, #58	; 0x3a
    7af8:	strb.w	r3, [r4, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7afc:	mvn.w	r3, #26
    7b00:	strb.w	r3, [r4, #832]	; 0x340
      _b = b;
    7b04:	mvn.w	r3, #48	; 0x30
    7b08:	strb.w	r3, [r4, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b0c:	mvn.w	r3, #118	; 0x76
    7b10:	strb.w	r3, [r4, #834]	; 0x342
      _s = s;
    7b14:	mvn.w	r3, #51	; 0x33
    7b18:	strb.w	r3, [r4, #835]	; 0x343
      _b = b;
    7b1c:	mvn.w	r3, #47	; 0x2f
    7b20:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b24:	mvn.w	r3, #114	; 0x72
    7b28:	strb.w	r3, [r4, #837]	; 0x345
      _s = s;
    7b2c:	mvn.w	r3, #68	; 0x44
    7b30:	strb.w	r3, [r4, #838]	; 0x346
      _b = b;
    7b34:	mvn.w	r3, #66	; 0x42
    7b38:	strb.w	r3, [r4, #839]	; 0x347
    7b3c:	mvn.w	r3, #36	; 0x24
    7b40:	strb.w	r3, [r4, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b44:	mov.w	r3, #115	; 0x73
    7b48:	strb.w	r3, [r4, #844]	; 0x34c
      _b = b;
    7b4c:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b50:	strb.w	ip, [r4, #853]	; 0x355
      _b = b;
    7b54:	strb.w	r3, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b58:	mvn.w	r3, #103	; 0x67
    7b5c:	strb.w	r0, [r4, #855]	; 0x357
    7b60:	strb.w	r3, [r4, #846]	; 0x34e
      _s = s;
    7b64:	mov.w	r3, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b68:	strb.w	r0, [r4, #858]	; 0x35a
      _s = s;
    7b6c:	strb.w	r3, [r4, #847]	; 0x34f
      _b = b;
    7b70:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b74:	strb.w	r7, [r4, #861]	; 0x35d
      _s = s;
      _b = b;
    7b78:	strb.w	r3, [r4, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b7c:	mvn.w	r3, #110	; 0x6e
      _s = s;
    7b80:	strb.w	lr, [r4, #862]	; 0x35e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b84:	strb.w	r3, [r4, #849]	; 0x351
      _s = s;
    7b88:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b8c:	strb.w	r1, [r4, #864]	; 0x360
      _s = s;
    7b90:	strb.w	r3, [r4, #850]	; 0x352
      _b = b;
    7b94:	mvn.w	r3, #26
    7b98:	strb.w	r3, [r4, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b9c:	mvn.w	r3, #107	; 0x6b
    7ba0:	strb.w	r3, [r4, #852]	; 0x354
      _s = s;
      _b = b;
    7ba4:	mvn.w	r3, #16
    7ba8:	strb.w	r3, [r4, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bac:	mov.w	r3, #100	; 0x64
    7bb0:	strb.w	r3, [r4, #856]	; 0x358
      _b = b;
    7bb4:	mvn.w	r3, #32
    7bb8:	strb.w	r3, [r4, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bbc:	mvn.w	r3, #66	; 0x42
    7bc0:	strb.w	r3, [r4, #859]	; 0x35b
      _b = b;
    7bc4:	mov.w	r3, #47	; 0x2f
    7bc8:	strb.w	r3, [r4, #860]	; 0x35c
    7bcc:	mvn.w	r3, #57	; 0x39
    7bd0:	strb.w	r3, [r4, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bd4:	mvn.w	r3, #127	; 0x7f
    7bd8:	strb.w	r3, [r4, #865]	; 0x361
      _b = b;
    7bdc:	mvn.w	r3, #9
    7be0:	strb.w	r3, [r4, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7be4:	mvn.w	r3, #98	; 0x62
    7be8:	strb.w	r3, [r4, #867]	; 0x363
      _s = s;
    7bec:	mov.w	r3, #98	; 0x62
    7bf0:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    7bf4:	mvn.w	r3, #9
    7bf8:	strb.w	r3, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bfc:	mvn.w	r3, #82	; 0x52
    7c00:	strb.w	r3, [r4, #870]	; 0x366
      _s = s;
    7c04:	mov.w	r3, #43	; 0x2b
    7c08:	strb.w	r3, [r4, #871]	; 0x367
      _b = b;
    7c0c:	mvn.w	r3, #6
    7c10:	strb.w	r3, [r4, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c14:	mvn.w	r3, #91	; 0x5b
    7c18:	strb.w	r3, [r4, #873]	; 0x369
      _s = s;
    7c1c:	mov.w	r3, #115	; 0x73
    7c20:	strb.w	r3, [r4, #874]	; 0x36a
      _b = b;
    7c24:	mvn.w	r3, #18
    7c28:	strb.w	r3, [r4, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c2c:	mvn.w	r3, #90	; 0x5a
    7c30:	strb.w	r3, [r4, #876]	; 0x36c
      _s = s;
    7c34:	mov.w	r3, #116	; 0x74
    7c38:	strb.w	r3, [r4, #877]	; 0x36d
      _b = b;
    7c3c:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c40:	strb.w	r6, [r4, #909]	; 0x38d
      _s = s;
      _b = b;
    7c44:	strb.w	r3, [r4, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c48:	mvn.w	r3, #89	; 0x59
      _s = s;
    7c4c:	strb.w	fp, [r4, #907]	; 0x38b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c50:	strb.w	r3, [r4, #879]	; 0x36f
      _s = s;
    7c54:	mvn.w	r3, #106	; 0x6a
    7c58:	strb.w	r3, [r4, #880]	; 0x370
      _b = b;
    7c5c:	mvn.w	r3, #13
    7c60:	strb.w	r3, [r4, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c64:	mvn.w	r3, #78	; 0x4e
    7c68:	strb.w	r3, [r4, #882]	; 0x372
      _s = s;
    7c6c:	mov.w	r3, #113	; 0x71
    7c70:	strb.w	r3, [r4, #883]	; 0x373
      _b = b;
    7c74:	mvn.w	r3, #10
    7c78:	strb.w	r3, [r4, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c7c:	mvn.w	r3, #68	; 0x44
    7c80:	strb.w	r3, [r4, #885]	; 0x375
      _s = s;
    7c84:	mov.w	r3, #99	; 0x63
    7c88:	strb.w	r3, [r4, #886]	; 0x376
      _b = b;
    7c8c:	mvn.w	r3, #11
    7c90:	strb.w	r3, [r4, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c94:	mvn.w	r3, #61	; 0x3d
    7c98:	strb.w	r3, [r4, #888]	; 0x378
      _s = s;
    7c9c:	mov.w	r3, #79	; 0x4f
    7ca0:	strb.w	r3, [r4, #889]	; 0x379
      _b = b;
    7ca4:	mvn.w	r3, #9
    7ca8:	strb.w	r3, [r4, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cac:	mvn.w	r3, #63	; 0x3f
    7cb0:	strb.w	r3, [r4, #891]	; 0x37b
      _s = s;
    7cb4:	mov.w	r3, #79	; 0x4f
    7cb8:	strb.w	r3, [r4, #892]	; 0x37c
      _b = b;
    7cbc:	mvn.w	r3, #15
    7cc0:	strb.w	r3, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cc4:	mvn.w	r3, #77	; 0x4d
    7cc8:	strb.w	r3, [r4, #894]	; 0x37e
      _s = s;
    7ccc:	mvn.w	r3, #122	; 0x7a
    7cd0:	strb.w	r3, [r4, #895]	; 0x37f
      _b = b;
    7cd4:	mvn.w	r3, #16
    7cd8:	strb.w	r3, [r4, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cdc:	mvn.w	r3, #97	; 0x61
    7ce0:	strb.w	r3, [r4, #897]	; 0x381
      _s = s;
    7ce4:	mvn.w	r3, #38	; 0x26
    7ce8:	strb.w	r3, [r4, #898]	; 0x382
      _b = b;
    7cec:	mvn.w	r3, #23
    7cf0:	strb.w	r3, [r4, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cf4:	mvn.w	r3, #99	; 0x63
    7cf8:	strb.w	r3, [r4, #900]	; 0x384
      _s = s;
    7cfc:	mvn.w	r3, #6
    7d00:	strb.w	r3, [r4, #901]	; 0x385
      _b = b;
    7d04:	mvn.w	r3, #71	; 0x47
    7d08:	strb.w	r3, [r4, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d0c:	mvn.w	r3, #111	; 0x6f
    7d10:	strb.w	r3, [r4, #903]	; 0x387
      _s = s;
    7d14:	mvn.w	r3, #6
    7d18:	strb.w	r3, [r4, #904]	; 0x388
      _b = b;
    7d1c:	mvn.w	r3, #63	; 0x3f
    7d20:	strb.w	r3, [r4, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d24:	mvn.w	r3, #118	; 0x76
    7d28:	strb.w	r3, [r4, #906]	; 0x38a
      _s = s;
      _b = b;
    7d2c:	mvn.w	r3, #75	; 0x4b
    7d30:	strb.w	r3, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d34:	mov.w	r3, #108	; 0x6c
    7d38:	strb.w	r3, [r4, #910]	; 0x38e
      _b = b;
    7d3c:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d40:	strb.w	r7, [r4, #927]	; 0x39f
      _s = s;
      _b = b;
    7d44:	strb.w	r3, [r4, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d48:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d4c:	strb.w	r0, [r4, #933]	; 0x3a5
      _s = s;
    7d50:	strb.w	r3, [r4, #916]	; 0x394
    7d54:	mov.w	r3, #105	; 0x69
      _b = b;
    7d58:	strb.w	ip, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d5c:	strb.w	r3, [r4, #913]	; 0x391
      _b = b;
    7d60:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d64:	strb.w	fp, [r4, #930]	; 0x3a2
      _s = s;
      _b = b;
    7d68:	strb.w	r3, [r4, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d6c:	mvn.w	r3, #104	; 0x68
    7d70:	strb.w	r8, [r4, #912]	; 0x390
    7d74:	strb.w	r3, [r4, #915]	; 0x393
      _s = s;
      _b = b;
    7d78:	mvn.w	r3, #27
    7d7c:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d80:	mvn.w	r3, #104	; 0x68
    7d84:	strb.w	r3, [r4, #918]	; 0x396
      _s = s;
    7d88:	mvn.w	r3, #61	; 0x3d
    7d8c:	strb.w	r3, [r4, #919]	; 0x397
      _b = b;
    7d90:	mvn.w	r3, #29
    7d94:	strb.w	r3, [r4, #920]	; 0x398
    7d98:	mvn.w	r3, #22
    7d9c:	strb.w	r3, [r4, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7da0:	mvn.w	r3, #104	; 0x68
    7da4:	strb.w	r3, [r4, #924]	; 0x39c
      _s = s;
    7da8:	mov.w	r3, #124	; 0x7c
    7dac:	strb.w	r3, [r4, #925]	; 0x39d
      _b = b;
    7db0:	mvn.w	r3, #15
    7db4:	strb.w	r3, [r4, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7db8:	mov.w	r3, #91	; 0x5b
    7dbc:	strb.w	r3, [r4, #928]	; 0x3a0
      _b = b;
    7dc0:	mvn.w	r3, #19
    7dc4:	strb.w	r3, [r4, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dc8:	mov.w	r3, #58	; 0x3a
    7dcc:	strb.w	r3, [r4, #931]	; 0x3a3
      _b = b;
    7dd0:	mvn.w	r3, #82	; 0x52
    7dd4:	strb.w	r3, [r4, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dd8:	mvn.w	r3, #5
    7ddc:	strb.w	r3, [r4, #934]	; 0x3a6
      _b = b;
    7de0:	mvn.w	r3, #66	; 0x42
    7de4:	strb.w	r3, [r4, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7de8:	mov.w	r3, #52	; 0x34
    7dec:	strb.w	r3, [r4, #937]	; 0x3a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7df0:	mvn.w	r3, #97	; 0x61
    7df4:	strb.w	r3, [r4, #939]	; 0x3ab
      _s = s;
    7df8:	mov.w	r3, #99	; 0x63
    7dfc:	strb.w	r3, [r4, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e00:	mvn.w	r3, #114	; 0x72
    7e04:	strb.w	r3, [r4, #942]	; 0x3ae
      _s = s;
    7e08:	mvn.w	r3, #81	; 0x51
    7e0c:	strb.w	r3, [r4, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e10:	mvn.w	r3, #102	; 0x66
    7e14:	strb.w	r3, [r4, #921]	; 0x399
      _s = s;
    7e18:	mvn.w	r3, #39	; 0x27
    7e1c:	strb.w	r3, [r4, #922]	; 0x39a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e20:	mvn.w	r3, #122	; 0x7a
    7e24:	strb.w	r3, [r4, #936]	; 0x3a8
      _s = s;
      _b = b;
    7e28:	mvn.w	r3, #4
    7e2c:	strb.w	r3, [r4, #938]	; 0x3aa
    7e30:	mvn.w	r3, #17
    7e34:	strb.w	ip, [r4, #950]	; 0x3b6
    7e38:	strb.w	r3, [r4, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e3c:	mov.w	r3, #104	; 0x68
      _b = b;
    7e40:	strb.w	ip, [r4, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e44:	strb.w	r3, [r4, #964]	; 0x3c4
    7e48:	mvn.w	r3, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e4c:	strb.w	r2, [r4, #969]	; 0x3c9
      _s = s;
    7e50:	strb.w	r3, [r4, #946]	; 0x3b2
      _b = b;
    7e54:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e58:	strb.w	r9, [r4, #945]	; 0x3b1
      _s = s;
      _b = b;
    7e5c:	strb.w	r3, [r4, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e60:	mvn.w	r3, #110	; 0x6e
      _s = s;
      _b = b;
    7e64:	strb.w	r9, [r4, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e68:	strb.w	r3, [r4, #948]	; 0x3b4
      _s = s;
    7e6c:	mvn.w	r3, #80	; 0x50
    7e70:	strb.w	r3, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e74:	mvn.w	r3, #106	; 0x6a
    7e78:	strb.w	r3, [r4, #951]	; 0x3b7
      _s = s;
    7e7c:	mvn.w	r3, #109	; 0x6d
    7e80:	strb.w	r3, [r4, #952]	; 0x3b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e84:	mvn.w	r3, #85	; 0x55
    7e88:	strb.w	r3, [r4, #954]	; 0x3ba
      _s = s;
      _b = b;
    7e8c:	mvn.w	r3, #26
    7e90:	strb.w	r3, [r4, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e94:	mvn.w	r3, #73	; 0x49
    7e98:	strb.w	r3, [r4, #957]	; 0x3bd
      _s = s;
    7e9c:	mvn.w	r3, #57	; 0x39
    7ea0:	strb.w	r3, [r4, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ea4:	mvn.w	r3, #55	; 0x37
    7ea8:	strb.w	r3, [r4, #960]	; 0x3c0
    7eac:	mvn.w	r3, #54	; 0x36
    7eb0:	strb.w	r3, [r4, #963]	; 0x3c3
    7eb4:	mvn.w	r3, #75	; 0x4b
    7eb8:	strb.w	r3, [r4, #966]	; 0x3c6
      _s = s;
    7ebc:	mvn.w	r3, #95	; 0x5f
    7ec0:	strb.w	r3, [r4, #967]	; 0x3c7
      _b = b;
    7ec4:	mvn.w	r3, #50	; 0x32
    7ec8:	strb.w	r3, [r4, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ecc:	mov.w	r3, #97	; 0x61
    7ed0:	strb.w	r3, [r4, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ed4:	mvn.w	r3, #97	; 0x61
    7ed8:	strb.w	r3, [r4, #972]	; 0x3cc
      _s = s;
      _b = b;
    7edc:	mvn.w	r3, #89	; 0x59
    7ee0:	strb.w	r3, [r4, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ee4:	mvn.w	r3, #111	; 0x6f
    7ee8:	strb.w	r3, [r4, #976]	; 0x3d0
      _b = b;
    7eec:	mvn.w	r3, #10
    7ef0:	strb.w	r3, [r4, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ef4:	mvn.w	r3, #92	; 0x5c
    7ef8:	strb.w	r3, [r4, #955]	; 0x3bb
    7efc:	mov.w	r3, #114	; 0x72
    7f00:	strb.w	r3, [r4, #961]	; 0x3c1
      _b = b;
    7f04:	mvn.w	r3, #10
    7f08:	strb.w	r3, [r4, #962]	; 0x3c2
    7f0c:	mvn.w	r3, #33	; 0x21
    7f10:	strb.w	r3, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f14:	mvn.w	r3, #70	; 0x46
    7f18:	strb.w	r3, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f1c:	strb.w	r3, [r4, #975]	; 0x3cf
      _s = s;
      _b = b;
    7f20:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f24:	strb.w	r7, [r4, #1002]	; 0x3ea
      _s = s;
      _b = b;
    7f28:	strb.w	r3, [r4, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f2c:	mvn.w	r3, #91	; 0x5b
      _s = s;
    7f30:	strb.w	fp, [r4, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f34:	strb.w	r3, [r4, #999]	; 0x3e7
    7f38:	mvn.w	r3, #86	; 0x56
    7f3c:	strb.w	r8, [r4, #1005]	; 0x3ed
    7f40:	strb.w	r3, [r4, #978]	; 0x3d2
      _s = s;
    7f44:	mvn.w	r3, #90	; 0x5a
    7f48:	strb.w	r3, [r4, #979]	; 0x3d3
      _b = b;
    7f4c:	mvn.w	r3, #62	; 0x3e
    7f50:	strb.w	r3, [r4, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f54:	mvn.w	r3, #103	; 0x67
    7f58:	strb.w	r3, [r4, #981]	; 0x3d5
      _s = s;
    7f5c:	mvn.w	r3, #127	; 0x7f
    7f60:	strb.w	r3, [r4, #982]	; 0x3d6
      _b = b;
    7f64:	mvn.w	r3, #59	; 0x3b
    7f68:	strb.w	r3, [r4, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f6c:	mvn.w	r3, #109	; 0x6d
    7f70:	strb.w	r3, [r4, #984]	; 0x3d8
      _s = s;
    7f74:	mvn.w	r3, #127	; 0x7f
    7f78:	strb.w	r3, [r4, #985]	; 0x3d9
      _b = b;
    7f7c:	mvn.w	r3, #46	; 0x2e
    7f80:	strb.w	r3, [r4, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f84:	mvn.w	r3, #97	; 0x61
    7f88:	strb.w	r3, [r4, #987]	; 0x3db
      _s = s;
      _b = b;
    7f8c:	mvn.w	r3, #41	; 0x29
    7f90:	strb.w	r3, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f94:	mvn.w	r3, #97	; 0x61
    7f98:	strb.w	r3, [r4, #990]	; 0x3de
      _s = s;
      _b = b;
    7f9c:	mvn.w	r3, #28
    7fa0:	strb.w	r3, [r4, #992]	; 0x3e0
    7fa4:	mvn.w	r3, #19
    7fa8:	strb.w	r3, [r4, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fac:	mvn.w	r3, #75	; 0x4b
    7fb0:	strb.w	r3, [r4, #996]	; 0x3e4
      _s = s;
    7fb4:	mov.w	r3, #69	; 0x45
    7fb8:	strb.w	r3, [r4, #997]	; 0x3e5
      _b = b;
    7fbc:	mvn.w	r3, #17
    7fc0:	strb.w	r3, [r4, #998]	; 0x3e6
    7fc4:	mvn.w	r3, #13
    7fc8:	strb.w	r3, [r4, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fcc:	mov.w	r3, #74	; 0x4a
    7fd0:	strb.w	r3, [r4, #1003]	; 0x3eb
      _b = b;
    7fd4:	mvn.w	r3, #18
    7fd8:	strb.w	r3, [r4, #1004]	; 0x3ec
    7fdc:	mvn.w	r3, #75	; 0x4b
    7fe0:	strb.w	r3, [r4, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fe4:	mov.w	r3, #90	; 0x5a
    7fe8:	strb.w	r3, [r4, #1009]	; 0x3f1
    7fec:	mvn.w	r3, #4
    7ff0:	strb.w	r3, [r4, #988]	; 0x3dc
    7ff4:	strb.w	r3, [r4, #991]	; 0x3df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ff8:	mvn.w	r3, #92	; 0x5c
    7ffc:	strb.w	r3, [r4, #993]	; 0x3e1
      _s = s;
    8000:	mov.w	r3, #109	; 0x6d
    8004:	strb.w	r3, [r4, #1000]	; 0x3e8
    8008:	mov.w	r3, #73	; 0x49
    800c:	strb.w	r3, [r4, #1006]	; 0x3ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8010:	mvn.w	r3, #120	; 0x78
    8014:	strb.w	r3, [r4, #1008]	; 0x3f0
      _s = s;
      _b = b;
    8018:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    801c:	strb.w	r7, [r4, #1023]	; 0x3ff
      _s = s;
      _b = b;
    8020:	strb.w	r3, [r4, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8024:	mvn.w	r3, #111	; 0x6f
    8028:	strb.w	r8, [r4, #1014]	; 0x3f6
    802c:	strb.w	r3, [r4, #1011]	; 0x3f3
      _s = s;
    8030:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8034:	strb.w	r8, [r4, #1017]	; 0x3f9
      _s = s;
    8038:	strb.w	r3, [r4, #1012]	; 0x3f4
      _b = b;
    803c:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8040:	strb.w	r9, [r4, #1020]	; 0x3fc
      _s = s;
      _b = b;
    8044:	strb.w	r3, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8048:	mvn.w	r3, #84	; 0x54
    804c:	strb.w	r3, [r4, #1015]	; 0x3f7
      _b = b;
    8050:	mvn.w	r3, #34	; 0x22
    8054:	strb.w	r3, [r4, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8058:	mvn.w	r3, #25
    805c:	strb.w	r3, [r4, #1018]	; 0x3fa
      _b = b;
    8060:	mvn.w	r3, #43	; 0x2b
    8064:	strb.w	r3, [r4, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8068:	mvn.w	r3, #84	; 0x54
    806c:	strb.w	r3, [r4, #1021]	; 0x3fd
      _b = b;
    8070:	mvn.w	r3, #17
    8074:	strb.w	r3, [r4, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8078:	mvn.w	r3, #84	; 0x54
    807c:	strb.w	r3, [r4, #1024]	; 0x400
      _b = b;
    8080:	mvn.w	r3, #13
    8084:	strb.w	r3, [r4, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8088:	mvn.w	r3, #106	; 0x6a
    808c:	strb.w	r3, [r4, #1026]	; 0x402
      _s = s;
    8090:	mvn.w	r3, #99	; 0x63
    8094:	strb.w	r3, [r4, #1027]	; 0x403
      _b = b;
    8098:	mvn.w	r3, #30
    809c:	strb.w	r3, [r4, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80a0:	mvn.w	r3, #85	; 0x55
    80a4:	strb.w	r3, [r4, #1029]	; 0x405
      _s = s;
    80a8:	mvn.w	r3, #101	; 0x65
    80ac:	strb.w	r3, [r4, #1030]	; 0x406
      _b = b;
    80b0:	mvn.w	r3, #21
    80b4:	strb.w	r3, [r4, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80b8:	mvn.w	r3, #82	; 0x52
    80bc:	strb.w	r3, [r4, #1032]	; 0x408
      _s = s;
    80c0:	mov.w	r3, #103	; 0x67
    80c4:	strb.w	r3, [r4, #1033]	; 0x409
      _b = b;
    80c8:	mvn.w	r3, #24
    80cc:	strb.w	r3, [r4, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80d0:	mvn.w	r3, #70	; 0x46
    80d4:	strb.w	r3, [r4, #1035]	; 0x40b
      _s = s;
    80d8:	mov.w	r3, #76	; 0x4c
    80dc:	strb.w	r3, [r4, #1036]	; 0x40c
      _b = b;
    80e0:	mvn.w	r3, #101	; 0x65
    80e4:	strb.w	r3, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80e8:	mov.w	r3, #117	; 0x75
    80ec:	strb.w	r3, [r4, #1038]	; 0x40e
      _s = s;
    80f0:	mov.w	r3, #31
    80f4:	strb.w	r3, [r4, #1039]	; 0x40f
      _b = b;
    80f8:	mvn.w	r3, #119	; 0x77
    80fc:	strb.w	r3, [r4, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8100:	mvn.w	r3, #104	; 0x68
    8104:	strb.w	r3, [r4, #1041]	; 0x411
      _s = s;
    8108:	mov.w	r3, #107	; 0x6b
    810c:	strb.w	r3, [r4, #1042]	; 0x412
      _b = b;
    8110:	mov.w	r3, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8114:	strb.w	r2, [r4, #1051]	; 0x41b
      _b = b;
    8118:	strb.w	r3, [r4, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    811c:	mvn.w	r3, #86	; 0x56
    8120:	strb.w	r3, [r4, #1054]	; 0x41e
    8124:	mov.w	r3, #95	; 0x5f
    8128:	strb.w	r3, [r4, #1045]	; 0x415
      _b = b;
    812c:	mvn.w	r3, #55	; 0x37
    8130:	strb.w	r3, [r4, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8134:	mvn.w	r3, #53	; 0x35
    8138:	strb.w	r3, [r4, #1047]	; 0x417
      _s = s;
    813c:	mov.w	r3, #47	; 0x2f
    8140:	strb.w	r3, [r4, #1048]	; 0x418
      _b = b;
    8144:	mvn.w	r3, #51	; 0x33
    8148:	strb.w	r3, [r4, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    814c:	mvn.w	r3, #56	; 0x38
    8150:	strb.w	r3, [r4, #1050]	; 0x41a
      _s = s;
      _b = b;
    8154:	mvn.w	r3, #28
    8158:	strb.w	r3, [r4, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    815c:	mvn.w	r3, #73	; 0x49
    8160:	strb.w	r3, [r4, #1053]	; 0x41d
      _s = s;
      _b = b;
    8164:	mvn.w	r3, #35	; 0x23
    8168:	strb.w	r3, [r4, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    816c:	mvn.w	r3, #69	; 0x45
    8170:	strb.w	r3, [r4, #1057]	; 0x421
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8174:	mvn.w	r3, #90	; 0x5a
    8178:	strb.w	r3, [r4, #1059]	; 0x423
      _s = s;
      _b = b;
    817c:	mvn.w	r3, #25
    8180:	strb.w	r3, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8184:	mvn.w	r3, #97	; 0x61
    8188:	strb.w	r3, [r4, #1062]	; 0x426
      _s = s;
      _b = b;
    818c:	mvn.w	r3, #19
    8190:	strb.w	r3, [r4, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8194:	mvn.w	r3, #65	; 0x41
    8198:	strb.w	r3, [r4, #1065]	; 0x429
      _s = s;
    819c:	mov.w	r3, #119	; 0x77
    81a0:	strb.w	r3, [r4, #1066]	; 0x42a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81a4:	mvn.w	r3, #66	; 0x42
    81a8:	strb.w	r3, [r4, #1068]	; 0x42c
      _s = s;
      _b = b;
    81ac:	mvn.w	r3, #21
    81b0:	strb.w	r3, [r4, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81b4:	mvn.w	r3, #71	; 0x47
    81b8:	strb.w	r3, [r4, #1071]	; 0x42f
      _s = s;
    81bc:	mvn.w	r3, #80	; 0x50
    81c0:	strb.w	r3, [r4, #1072]	; 0x430
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81c4:	mvn.w	r3, #88	; 0x58
    81c8:	strb.w	r3, [r4, #1074]	; 0x432
      _s = s;
    81cc:	mov.w	r3, #92	; 0x5c
    81d0:	strb.w	r3, [r4, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81d4:	mvn.w	r3, #96	; 0x60
    81d8:	strb.w	r3, [r4, #1044]	; 0x414
    81dc:	mvn.w	r3, #92	; 0x5c
    81e0:	strb.w	r3, [r4, #1056]	; 0x420
      _s = s;
      _b = b;
    81e4:	mvn.w	r3, #39	; 0x27
    81e8:	strb.w	r3, [r4, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    81ec:	mvn.w	r3, #32
    81f0:	strb.w	r3, [r4, #1060]	; 0x424
    81f4:	mvn.w	r3, #70	; 0x46
    81f8:	strb.w	r3, [r4, #1063]	; 0x427
      _b = b;
    81fc:	mvn.w	r3, #16
    8200:	strb.w	r3, [r4, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8204:	mvn.w	r3, #92	; 0x5c
    8208:	strb.w	r3, [r4, #1069]	; 0x42d
      _b = b;
    820c:	mvn.w	r3, #10
    8210:	strb.w	r3, [r4, #1073]	; 0x431
    8214:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8218:	strb.w	r2, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    821c:	strb.w	r3, [r4, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8220:	mvn.w	r3, #119	; 0x77
    8224:	strb.w	r1, [r4, #1083]	; 0x43b
    8228:	strb.w	r3, [r4, #1077]	; 0x435
      _s = s;
    822c:	mov.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8230:	strb.w	r7, [r4, #1086]	; 0x43e
      _s = s;
    8234:	strb.w	r3, [r4, #1078]	; 0x436
      _b = b;
    8238:	mvn.w	r3, #19
    823c:	strb.w	ip, [r4, #1091]	; 0x443
    8240:	strb.w	r3, [r4, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8244:	mov.w	r3, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8248:	strb.w	r7, [r4, #1092]	; 0x444
      _s = s;
    824c:	strb.w	r3, [r4, #1081]	; 0x439
      _b = b;
    8250:	mvn.w	r3, #7
    8254:	strb.w	r6, [r4, #1106]	; 0x452
    8258:	strb.w	r3, [r4, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    825c:	mvn.w	r3, #109	; 0x6d
    8260:	strb.w	r9, [r4, #1087]	; 0x43f
    8264:	strb.w	r3, [r4, #1084]	; 0x43c
      _b = b;
    8268:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    826c:	strb.w	r8, [r4, #1090]	; 0x442
      _b = b;
    8270:	strb.w	r3, [r4, #1085]	; 0x43d
    8274:	strb.w	r3, [r4, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8278:	mvn.w	r3, #107	; 0x6b
    827c:	strb.w	r3, [r4, #1089]	; 0x441
      _s = s;
    8280:	mvn.w	r3, #59	; 0x3b
    8284:	strb.w	r3, [r4, #1093]	; 0x445
      _b = b;
    8288:	mvn.w	r3, #42	; 0x2a
    828c:	strb.w	r3, [r4, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8290:	mvn.w	r3, #118	; 0x76
    8294:	strb.w	r3, [r4, #1095]	; 0x447
      _s = s;
    8298:	mvn.w	r3, #65	; 0x41
    829c:	strb.w	r3, [r4, #1096]	; 0x448
      _b = b;
    82a0:	mvn.w	r3, #19
    82a4:	strb.w	r3, [r4, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82a8:	mvn.w	r3, #109	; 0x6d
    82ac:	strb.w	r3, [r4, #1098]	; 0x44a
      _s = s;
    82b0:	mvn.w	r3, #103	; 0x67
    82b4:	strb.w	r3, [r4, #1099]	; 0x44b
      _b = b;
    82b8:	mvn.w	r3, #21
    82bc:	strb.w	r3, [r4, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82c0:	mvn.w	r3, #93	; 0x5d
    82c4:	strb.w	r3, [r4, #1101]	; 0x44d
      _s = s;
    82c8:	mvn.w	r3, #51	; 0x33
    82cc:	strb.w	r3, [r4, #1102]	; 0x44e
      _b = b;
    82d0:	mvn.w	r3, #46	; 0x2e
    82d4:	strb.w	r3, [r4, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82d8:	mvn.w	r3, #101	; 0x65
    82dc:	strb.w	r3, [r4, #1104]	; 0x450
      _s = s;
    82e0:	mov.w	r3, #79	; 0x4f
    82e4:	strb.w	r3, [r4, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82e8:	mov.w	r3, #102	; 0x66
    82ec:	strb.w	r3, [r4, #1107]	; 0x453
      _s = s;
    82f0:	mov.w	r3, #103	; 0x67
    82f4:	strb.w	r3, [r4, #1108]	; 0x454
      _b = b;
    82f8:	mov.w	r3, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82fc:	strb.w	r7, [r4, #1113]	; 0x459
      _s = s;
      _b = b;
    8300:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8304:	mov.w	r3, #80	; 0x50
    8308:	strb.w	r3, [r4, #1110]	; 0x456
      _s = s;
    830c:	mov.w	r3, #111	; 0x6f
    8310:	strb.w	r3, [r4, #1111]	; 0x457
      _b = b;
    8314:	mov.w	r3, #117	; 0x75
    8318:	strb.w	r3, [r4, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    831c:	mov.w	r3, #58	; 0x3a
    8320:	strb.w	r3, [r4, #1114]	; 0x45a
      _b = b;
    8324:	mov.w	r3, #87	; 0x57
    8328:	strb.w	r3, [r4, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    832c:	mov.w	r3, #18
    8330:	strb.w	r3, [r4, #1116]	; 0x45c
      _s = s;
    8334:	mov.w	r3, #74	; 0x4a
    8338:	strb.w	r3, [r4, #1117]	; 0x45d
      _b = b;
    833c:	mvn.w	r3, #76	; 0x4c
    8340:	strb.w	r3, [r4, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8344:	mov.w	r3, #17
    8348:	strb.w	r3, [r4, #1119]	; 0x45f
      _s = s;
    834c:	mov.w	r3, #94	; 0x5e
    8350:	strb.w	r3, [r4, #1120]	; 0x460
      _b = b;
    8354:	mvn.w	r3, #36	; 0x24
    8358:	strb.w	r3, [r4, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    835c:	mvn.w	r3, #51	; 0x33
    8360:	strb.w	r3, [r4, #1122]	; 0x462
      _s = s;
    8364:	mov.w	r3, #99	; 0x63
    8368:	strb.w	r3, [r4, #1123]	; 0x463
      _b = b;
    836c:	mvn.w	r3, #37	; 0x25
    8370:	strb.w	r3, [r4, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8374:	mvn.w	r3, #43	; 0x2b
    8378:	strb.w	r3, [r4, #1125]	; 0x465
      _s = s;
    837c:	mov.w	r3, #32
    8380:	strb.w	r3, [r4, #1126]	; 0x466
      _b = b;
    8384:	mvn.w	r3, #25
    8388:	strb.w	r3, [r4, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    838c:	mov.w	r3, #67	; 0x43
    8390:	strb.w	r3, [r4, #1129]	; 0x469
    8394:	mvn.w	r3, #18
    8398:	strb.w	r3, [r4, #1132]	; 0x46c
      _b = b;
    839c:	mvn.w	r3, #24
    83a0:	strb.w	r3, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    83a4:	mov.w	r3, #99	; 0x63
    83a8:	strb.w	r3, [r4, #1135]	; 0x46f
      _b = b;
    83ac:	mvn.w	r3, #15
    83b0:	strb.w	r3, [r4, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83b4:	mvn.w	r3, #55	; 0x37
    83b8:	strb.w	r3, [r4, #1137]	; 0x471
      _s = s;
    83bc:	mov.w	r3, #60	; 0x3c
    83c0:	strb.w	r3, [r4, #1138]	; 0x472
      _b = b;
    83c4:	mvn.w	r3, #17
    83c8:	strb.w	r3, [r4, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83cc:	mvn.w	r3, #49	; 0x31
    83d0:	strb.w	r3, [r4, #1140]	; 0x474
      _s = s;
    83d4:	mov.w	r3, #58	; 0x3a
    83d8:	strb.w	r3, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83dc:	mvn.w	r3, #70	; 0x46
    83e0:	strb.w	r3, [r4, #1128]	; 0x468
      _s = s;
      _b = b;
    83e4:	mvn.w	r3, #33	; 0x21
    83e8:	strb.w	r3, [r4, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83ec:	mvn.w	r3, #96	; 0x60
    83f0:	strb.w	r3, [r4, #1131]	; 0x46b
    83f4:	mvn.w	r3, #83	; 0x53
    83f8:	strb.w	r3, [r4, #1134]	; 0x46e
      _s = s;
    83fc:	mov.w	r3, #97	; 0x61
      _b = b;
    8400:	strb.w	ip, [r4, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8404:	strb.w	r3, [r4, #1174]	; 0x496
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8408:	mvn.w	r3, #62	; 0x3e
    840c:	strb.w	r0, [r4, #1149]	; 0x47d
    8410:	strb.w	r3, [r4, #1143]	; 0x477
      _s = s;
    8414:	mvn.w	r3, #18
      _b = b;
    8418:	strb.w	ip, [r4, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    841c:	strb.w	r3, [r4, #1144]	; 0x478
      _b = b;
    8420:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8424:	strb.w	fp, [r4, #1165]	; 0x48d
      _b = b;
    8428:	strb.w	r3, [r4, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    842c:	mvn.w	r3, #75	; 0x4b
    8430:	strb.w	r3, [r4, #1146]	; 0x47a
      _s = s;
    8434:	mov.w	r3, #78	; 0x4e
    8438:	strb.w	r3, [r4, #1147]	; 0x47b
    843c:	mov.w	r3, #72	; 0x48
    8440:	strb.w	r3, [r4, #1150]	; 0x47e
      _b = b;
    8444:	mvn.w	r3, #18
    8448:	strb.w	r3, [r4, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    844c:	mvn.w	r3, #126	; 0x7e
    8450:	strb.w	r3, [r4, #1152]	; 0x480
      _s = s;
    8454:	mvn.w	r3, #84	; 0x54
    8458:	strb.w	r3, [r4, #1153]	; 0x481
      _b = b;
    845c:	mvn.w	r3, #19
    8460:	strb.w	r3, [r4, #1154]	; 0x482
    8464:	mvn.w	r3, #22
    8468:	strb.w	r3, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    846c:	mvn.w	r3, #111	; 0x6f
    8470:	strb.w	r3, [r4, #1158]	; 0x486
      _s = s;
    8474:	mov.w	r3, #125	; 0x7d
    8478:	strb.w	r3, [r4, #1159]	; 0x487
      _b = b;
    847c:	mvn.w	r3, #28
    8480:	strb.w	r3, [r4, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8484:	mvn.w	r3, #108	; 0x6c
    8488:	strb.w	r3, [r4, #1161]	; 0x489
      _s = s;
    848c:	mvn.w	r3, #110	; 0x6e
    8490:	strb.w	r3, [r4, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8494:	mvn.w	r3, #103	; 0x67
    8498:	strb.w	r3, [r4, #1164]	; 0x48c
      _s = s;
      _b = b;
    849c:	mvn.w	r3, #31
    84a0:	strb.w	r3, [r4, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84a4:	mvn.w	r3, #118	; 0x76
    84a8:	strb.w	r3, [r4, #1167]	; 0x48f
      _s = s;
    84ac:	mvn.w	r3, #95	; 0x5f
    84b0:	strb.w	r3, [r4, #1168]	; 0x490
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84b4:	mvn.w	r3, #109	; 0x6d
    84b8:	strb.w	r3, [r4, #1170]	; 0x492
      _s = s;
    84bc:	mvn.w	r3, #75	; 0x4b
    84c0:	strb.w	r3, [r4, #1171]	; 0x493
      _b = b;
    84c4:	mvn.w	r3, #18
    84c8:	strb.w	r3, [r4, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84cc:	mvn.w	r3, #111	; 0x6f
    84d0:	strb.w	r3, [r4, #1173]	; 0x495
      _s = s;
      _b = b;
    84d4:	mvn.w	r3, #11
    84d8:	strb.w	r3, [r4, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84dc:	mvn.w	r3, #122	; 0x7a
    84e0:	strb.w	r3, [r4, #1155]	; 0x483
      _s = s;
    84e4:	mov.w	r3, #100	; 0x64
    84e8:	strb.w	r3, [r4, #1156]	; 0x484
      _b = b;
    84ec:	mvn.w	r3, #16
    84f0:	strb.w	r3, [r4, #1169]	; 0x491
    84f4:	mvn.w	r3, #64	; 0x40
    84f8:	strb.w	r3, [r4, #1175]	; 0x497
    84fc:	mov.w	r3, #101	; 0x65
    8500:	strb.w	r3, [r4, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8504:	mov.w	r3, #55	; 0x37
    8508:	strb.w	r3, [r4, #1176]	; 0x498
      _s = s;
    850c:	mov.w	r3, #94	; 0x5e
    8510:	strb.w	r3, [r4, #1177]	; 0x499
      _b = b;
    8514:	mvn.w	r3, #99	; 0x63
    8518:	strb.w	r3, [r4, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    851c:	mov.w	r3, #44	; 0x2c
    8520:	strb.w	r3, [r4, #1179]	; 0x49b
      _s = s;
      _b = b;
    8524:	mov.w	r3, #111	; 0x6f
    8528:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    852c:	mvn.w	r3, #126	; 0x7e
    8530:	strb.w	r3, [r4, #1183]	; 0x49f
      _b = b;
    8534:	mov.w	r3, #53	; 0x35
    8538:	strb.w	r3, [r4, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    853c:	mov.w	r3, #108	; 0x6c
    8540:	strb.w	r3, [r4, #1185]	; 0x4a1
      _s = s;
    8544:	mvn.w	r3, #82	; 0x52
    8548:	strb.w	r3, [r4, #1186]	; 0x4a2
      _b = b;
    854c:	mov.w	r3, #47	; 0x2f
    8550:	strb.w	r3, [r4, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8554:	mov.w	r3, #18
    8558:	strb.w	r3, [r4, #1188]	; 0x4a4
      _s = s;
    855c:	mvn.w	r3, #94	; 0x5e
    8560:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8564:	mvn.w	r3, #30
    8568:	strb.w	r3, [r4, #1191]	; 0x4a7
      _s = s;
    856c:	mov.w	r3, #95	; 0x5f
    8570:	strb.w	r3, [r4, #1192]	; 0x4a8
      _b = b;
    8574:	mvn.w	r3, #89	; 0x59
    8578:	strb.w	r3, [r4, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    857c:	mvn.w	r3, #42	; 0x2a
    8580:	strb.w	r3, [r4, #1194]	; 0x4aa
      _s = s;
    8584:	mov.w	r3, #39	; 0x27
    8588:	strb.w	r3, [r4, #1195]	; 0x4ab
      _b = b;
    858c:	mvn.w	r3, #29
    8590:	strb.w	r3, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8594:	mov.w	r3, #33	; 0x21
    8598:	strb.w	r3, [r4, #1198]	; 0x4ae
      _b = b;
    859c:	mvn.w	r3, #21
    85a0:	strb.w	r3, [r4, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85a4:	mvn.w	r3, #52	; 0x34
    85a8:	strb.w	r3, [r4, #1200]	; 0x4b0
      _s = s;
    85ac:	mov.w	r3, #41	; 0x29
    85b0:	strb.w	r3, [r4, #1201]	; 0x4b1
      _b = b;
    85b4:	mvn.w	r3, #26
    85b8:	strb.w	r3, [r4, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85bc:	mvn.w	r3, #95	; 0x5f
    85c0:	strb.w	r3, [r4, #1203]	; 0x4b3
      _s = s;
    85c4:	mvn.w	r3, #75	; 0x4b
    85c8:	strb.w	r3, [r4, #1204]	; 0x4b4
      _b = b;
    85cc:	mvn.w	r3, #22
    85d0:	strb.w	r3, [r4, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85d4:	mvn.w	r3, #59	; 0x3b
    85d8:	strb.w	r3, [r4, #1206]	; 0x4b6
      _s = s;
    85dc:	mov.w	r3, #111	; 0x6f
    85e0:	strb.w	r3, [r4, #1207]	; 0x4b7
    85e4:	mvn.w	r3, #33	; 0x21
    85e8:	strb.w	r3, [r4, #1180]	; 0x49c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85ec:	mov.w	r3, #85	; 0x55
    85f0:	strb.w	r3, [r4, #1182]	; 0x49e
    85f4:	mvn.w	r3, #39	; 0x27
    85f8:	strb.w	r3, [r4, #1197]	; 0x4ad
      _s = s;
      _b = b;
    85fc:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8600:	strb.w	r6, [r4, #1227]	; 0x4cb
      _s = s;
      _b = b;
    8604:	strb.w	r3, [r4, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8608:	mvn.w	r3, #78	; 0x4e
    860c:	strb.w	r3, [r4, #1218]	; 0x4c2
    8610:	mvn.w	r3, #65	; 0x41
    8614:	strb.w	r3, [r4, #1209]	; 0x4b9
      _s = s;
      _b = b;
    8618:	mvn.w	r3, #18
    861c:	strb.w	r3, [r4, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8620:	mvn.w	r3, #41	; 0x29
    8624:	strb.w	r3, [r4, #1212]	; 0x4bc
      _s = s;
    8628:	mov.w	r3, #39	; 0x27
    862c:	strb.w	r3, [r4, #1213]	; 0x4bd
      _b = b;
    8630:	mvn.w	r3, #17
    8634:	strb.w	r3, [r4, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8638:	mvn.w	r3, #59	; 0x3b
    863c:	strb.w	r3, [r4, #1215]	; 0x4bf
      _s = s;
    8640:	mvn.w	r3, #41	; 0x29
    8644:	strb.w	r3, [r4, #1216]	; 0x4c0
    8648:	mov.w	r3, #122	; 0x7a
    864c:	strb.w	r3, [r4, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8650:	mvn.w	r3, #109	; 0x6d
    8654:	strb.w	r3, [r4, #1221]	; 0x4c5
      _s = s;
    8658:	mov.w	r3, #55	; 0x37
    865c:	strb.w	r3, [r4, #1222]	; 0x4c6
      _b = b;
    8660:	mvn.w	r3, #17
    8664:	strb.w	r3, [r4, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8668:	mvn.w	r3, #126	; 0x7e
    866c:	strb.w	r3, [r4, #1224]	; 0x4c8
      _s = s;
    8670:	mvn.w	r3, #95	; 0x5f
    8674:	strb.w	r3, [r4, #1225]	; 0x4c9
      _b = b;
    8678:	mvn.w	r3, #24
    867c:	strb.w	r3, [r4, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8680:	mov.w	r3, #105	; 0x69
    8684:	strb.w	r3, [r4, #1228]	; 0x4cc
    8688:	mov.w	r3, #99	; 0x63
    868c:	strb.w	r3, [r4, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8690:	mvn.w	r3, #108	; 0x6c
    8694:	strb.w	r3, [r4, #1233]	; 0x4d1
      _s = s;
    8698:	mov.w	r3, #103	; 0x67
    869c:	strb.w	r3, [r4, #1234]	; 0x4d2
      _b = b;
    86a0:	mvn.w	r3, #22
    86a4:	strb.w	r3, [r4, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86a8:	mvn.w	r3, #104	; 0x68
    86ac:	strb.w	r3, [r4, #1236]	; 0x4d4
      _s = s;
    86b0:	mov.w	r3, #79	; 0x4f
    86b4:	strb.w	r3, [r4, #1237]	; 0x4d5
      _b = b;
    86b8:	mvn.w	r3, #18
    86bc:	strb.w	r3, [r4, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86c0:	mvn.w	r3, #110	; 0x6e
    86c4:	strb.w	r3, [r4, #1239]	; 0x4d7
      _s = s;
    86c8:	mov.w	r3, #119	; 0x77
    86cc:	strb.w	r3, [r4, #1240]	; 0x4d8
    86d0:	mov.w	r3, #48	; 0x30
    86d4:	strb.w	r3, [r4, #1210]	; 0x4ba
      _b = b;
    86d8:	mvn.w	r3, #11
    86dc:	strb.w	r3, [r4, #1217]	; 0x4c1
    86e0:	strb.w	r3, [r4, #1220]	; 0x4c4
    86e4:	strb.w	r3, [r4, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86e8:	mvn.w	r3, #119	; 0x77
    86ec:	strb.w	r3, [r4, #1230]	; 0x4ce
      _s = s;
      _b = b;
    86f0:	mvn.w	r3, #11
    86f4:	strb.w	r3, [r4, #1232]	; 0x4d0
    86f8:	strb.w	r3, [r4, #1241]	; 0x4d9
    86fc:	mvn.w	r3, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8700:	strb.w	r7, [r4, #1245]	; 0x4dd
      _s = s;
      _b = b;
    8704:	strb.w	r3, [r4, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8708:	mvn.w	r3, #100	; 0x64
    870c:	strb.w	r3, [r4, #1242]	; 0x4da
      _s = s;
    8710:	mvn.w	r3, #103	; 0x67
    8714:	strb.w	r3, [r4, #1243]	; 0x4db
      _b = b;
    8718:	mvn.w	r3, #18
    871c:	strb.w	r3, [r4, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8720:	mov.w	r3, #88	; 0x58
    8724:	strb.w	r3, [r4, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8728:	mov.w	r3, #47	; 0x2f
    872c:	strb.w	r3, [r4, #1248]	; 0x4e0
      _s = s;
    8730:	mov.w	r3, #124	; 0x7c
    8734:	strb.w	r3, [r4, #1249]	; 0x4e1
      _b = b;
    8738:	mov.w	r3, #117	; 0x75
    873c:	strb.w	r3, [r4, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8740:	mov.w	r3, #52	; 0x34
    8744:	strb.w	r3, [r4, #1251]	; 0x4e3
      _s = s;
    8748:	mvn.w	r3, #84	; 0x54
    874c:	strb.w	r3, [r4, #1252]	; 0x4e4
      _b = b;
    8750:	mov.w	r3, #98	; 0x62
    8754:	strb.w	r3, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8758:	mov.w	r3, #12
    875c:	strb.w	r3, [r4, #1254]	; 0x4e6
      _s = s;
    8760:	mvn.w	r3, #48	; 0x30
    8764:	strb.w	r3, [r4, #1255]	; 0x4e7
      _b = b;
    8768:	mov.w	r3, #70	; 0x46
    876c:	strb.w	r3, [r4, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8770:	mvn.w	r3, #22
    8774:	strb.w	r3, [r4, #1257]	; 0x4e9
      _s = s;
    8778:	mov.w	r3, #36	; 0x24
    877c:	strb.w	r3, [r4, #1258]	; 0x4ea
      _b = b;
    8780:	mov.w	r3, #14
    8784:	strb.w	r3, [r4, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8788:	mov.w	r3, #18
    878c:	strb.w	r3, [r4, #1260]	; 0x4ec
      _s = s;
    8790:	mvn.w	r3, #49	; 0x31
    8794:	strb.w	r3, [r4, #1261]	; 0x4ed
      _b = b;
    8798:	mov.w	r3, #116	; 0x74
    879c:	strb.w	r3, [r4, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    87a0:	mov.w	r3, #40	; 0x28
    87a4:	strb.w	r3, [r4, #1264]	; 0x4f0
      _b = b;
    87a8:	mvn.w	r3, #43	; 0x2b
    87ac:	strb.w	r3, [r4, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87b0:	strb.w	r3, [r4, #1266]	; 0x4f2
      _s = s;
    87b4:	mov.w	r3, #39	; 0x27
    87b8:	strb.w	r3, [r4, #1267]	; 0x4f3
      _b = b;
    87bc:	mvn.w	r3, #27
    87c0:	strb.w	r3, [r4, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    87c4:	mov.w	r3, #33	; 0x21
    87c8:	strb.w	r3, [r4, #1270]	; 0x4f6
      _b = b;
    87cc:	mvn.w	r3, #22
    87d0:	strb.w	r3, [r4, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87d4:	mvn.w	r3, #60	; 0x3c
    87d8:	strb.w	r3, [r4, #1272]	; 0x4f8
      _s = s;
    87dc:	mov.w	r3, #59	; 0x3b
    87e0:	strb.w	r3, [r4, #1273]	; 0x4f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87e4:	mvn.w	r3, #34	; 0x22
    87e8:	strb.w	r3, [r4, #1263]	; 0x4ef
    87ec:	mvn.w	r3, #39	; 0x27
    87f0:	strb.w	r3, [r4, #1269]	; 0x4f5
      _s = s;
      _b = b;
    87f4:	mvn.w	r3, #25
    87f8:	strb.w	ip, [r4, #1280]	; 0x500
    87fc:	strb.w	r3, [r4, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8800:	mvn.w	r3, #72	; 0x48
    8804:	strb.w	r6, [r4, #1299]	; 0x513
    8808:	strb.w	r3, [r4, #1278]	; 0x4fe
    880c:	mvn.w	r3, #105	; 0x69
    8810:	strb.w	r3, [r4, #1275]	; 0x4fb
      _s = s;
    8814:	mvn.w	r3, #101	; 0x65
    8818:	strb.w	r3, [r4, #1276]	; 0x4fc
      _b = b;
    881c:	mvn.w	r3, #24
    8820:	strb.w	r3, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8824:	mov.w	r3, #122	; 0x7a
    8828:	strb.w	r3, [r4, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    882c:	mvn.w	r3, #54	; 0x36
    8830:	strb.w	r3, [r4, #1281]	; 0x501
      _s = s;
    8834:	mov.w	r3, #80	; 0x50
    8838:	strb.w	r3, [r4, #1282]	; 0x502
      _b = b;
    883c:	mvn.w	r3, #21
    8840:	strb.w	r3, [r4, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8844:	mvn.w	r3, #51	; 0x33
    8848:	strb.w	r3, [r4, #1284]	; 0x504
      _s = s;
    884c:	mov.w	r3, #75	; 0x4b
    8850:	strb.w	r3, [r4, #1285]	; 0x505
      _b = b;
    8854:	mvn.w	r3, #19
    8858:	strb.w	r3, [r4, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    885c:	mvn.w	r3, #57	; 0x39
    8860:	strb.w	r3, [r4, #1287]	; 0x507
      _s = s;
    8864:	mvn.w	r3, #55	; 0x37
    8868:	strb.w	r3, [r4, #1288]	; 0x508
      _b = b;
    886c:	mvn.w	r3, #12
    8870:	strb.w	r3, [r4, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8874:	mvn.w	r3, #82	; 0x52
    8878:	strb.w	r3, [r4, #1290]	; 0x50a
      _s = s;
    887c:	mov.w	r3, #124	; 0x7c
    8880:	strb.w	r3, [r4, #1291]	; 0x50b
      _b = b;
    8884:	mvn.w	r3, #12
    8888:	strb.w	r3, [r4, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    888c:	mvn.w	r3, #108	; 0x6c
    8890:	strb.w	r3, [r4, #1293]	; 0x50d
      _s = s;
    8894:	mov.w	r3, #56	; 0x38
    8898:	strb.w	r3, [r4, #1294]	; 0x50e
      _b = b;
    889c:	mvn.w	r3, #22
    88a0:	strb.w	r3, [r4, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88a4:	mvn.w	r3, #127	; 0x7f
    88a8:	strb.w	r3, [r4, #1296]	; 0x510
      _s = s;
    88ac:	mov.w	r3, #105	; 0x69
    88b0:	strb.w	r3, [r4, #1297]	; 0x511
      _b = b;
    88b4:	mvn.w	r3, #7
    88b8:	strb.w	r3, [r4, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    88bc:	mvn.w	r3, #100	; 0x64
    88c0:	strb.w	r3, [r4, #1300]	; 0x514
      _b = b;
    88c4:	mvn.w	r3, #21
    88c8:	strb.w	r3, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88cc:	mvn.w	r3, #99	; 0x63
    88d0:	strb.w	r3, [r4, #1302]	; 0x516
      _s = s;
    88d4:	mvn.w	r3, #61	; 0x3d
    88d8:	strb.w	r3, [r4, #1303]	; 0x517
      _b = b;
    88dc:	mvn.w	r3, #26
    88e0:	strb.w	r3, [r4, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    88e4:	mov.w	r3, #99	; 0x63
    88e8:	strb.w	r3, [r4, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88ec:	mvn.w	r3, #96	; 0x60
    88f0:	strb.w	r3, [r4, #1305]	; 0x519
      _s = s;
      _b = b;
    88f4:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    88f8:	strb.w	r0, [r4, #1312]	; 0x520
      _b = b;
    88fc:	strb.w	r3, [r4, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8900:	mov.w	r3, #96	; 0x60
    8904:	strb.w	r3, [r4, #1309]	; 0x51d
      _b = b;
    8908:	mvn.w	r3, #23
    890c:	strb.w	r3, [r4, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8910:	mvn.w	r3, #90	; 0x5a
    8914:	strb.w	r3, [r4, #1311]	; 0x51f
      _s = s;
      _b = b;
    8918:	mvn.w	r3, #21
    891c:	strb.w	r3, [r4, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8920:	mvn.w	r3, #98	; 0x62
    8924:	strb.w	r3, [r4, #1314]	; 0x522
      _s = s;
    8928:	mvn.w	r3, #62	; 0x3e
    892c:	strb.w	r3, [r4, #1315]	; 0x523
      _b = b;
    8930:	mvn.w	r3, #22
    8934:	strb.w	r3, [r4, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8938:	mvn.w	r3, #111	; 0x6f
    893c:	strb.w	r3, [r4, #1317]	; 0x525
      _s = s;
      _b = b;
    8940:	mvn.w	r3, #71	; 0x47
    8944:	strb.w	r3, [r4, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8948:	mov.w	r3, #121	; 0x79
    894c:	strb.w	r3, [r4, #1321]	; 0x529
      _b = b;
    8950:	mov.w	r3, #120	; 0x78
    8954:	strb.w	r3, [r4, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8958:	mov.w	r3, #36	; 0x24
    895c:	strb.w	r3, [r4, #1323]	; 0x52b
      _s = s;
    8960:	mvn.w	r3, #49	; 0x31
    8964:	strb.w	r3, [r4, #1324]	; 0x52c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8968:	mov.w	r3, #105	; 0x69
    896c:	strb.w	r3, [r4, #1326]	; 0x52e
      _s = s;
    8970:	mvn.w	r3, #85	; 0x55
    8974:	strb.w	r3, [r4, #1327]	; 0x52f
      _b = b;
    8978:	mov.w	r3, #88	; 0x58
    897c:	strb.w	r3, [r4, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8980:	mov.w	r3, #108	; 0x6c
    8984:	strb.w	r3, [r4, #1329]	; 0x531
      _s = s;
    8988:	mvn.w	r3, #67	; 0x43
    898c:	strb.w	r3, [r4, #1330]	; 0x532
      _b = b;
    8990:	mov.w	r3, #46	; 0x2e
    8994:	strb.w	r3, [r4, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8998:	mov.w	r3, #116	; 0x74
    899c:	strb.w	r3, [r4, #1333]	; 0x535
      _b = b;
    89a0:	mov.w	r3, #92	; 0x5c
    89a4:	strb.w	r3, [r4, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89a8:	mvn.w	r3, #6
    89ac:	strb.w	r3, [r4, #1335]	; 0x537
      _s = s;
    89b0:	mov.w	r3, #53	; 0x35
    89b4:	strb.w	r3, [r4, #1336]	; 0x538
      _b = b;
    89b8:	mvn.w	r3, #49	; 0x31
    89bc:	strb.w	r3, [r4, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89c0:	mvn.w	r3, #38	; 0x26
    89c4:	strb.w	r3, [r4, #1338]	; 0x53a
      _s = s;
    89c8:	mov.w	r3, #37	; 0x25
    89cc:	strb.w	r3, [r4, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89d0:	mvn.w	r3, #96	; 0x60
    89d4:	strb.w	r3, [r4, #1308]	; 0x51c
      _s = s;
    89d8:	strb.w	r3, [r4, #1318]	; 0x526
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89dc:	mov.w	r3, #114	; 0x72
    89e0:	strb.w	r3, [r4, #1320]	; 0x528
      _s = s;
      _b = b;
    89e4:	mov.w	r3, #73	; 0x49
    89e8:	strb.w	r3, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89ec:	mov.w	r3, #26
    89f0:	strb.w	r3, [r4, #1332]	; 0x534
      _s = s;
      _b = b;
    89f4:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89f8:	strb.w	r1, [r4, #1368]	; 0x558
      _s = s;
      _b = b;
    89fc:	strb.w	r3, [r4, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8a00:	mov.w	r3, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a04:	strb.w	r2, [r4, #1371]	; 0x55b
    8a08:	mov.w	r2, #34	; 0x22
      _s = s;
    8a0c:	strb.w	r3, [r4, #1345]	; 0x541
      _b = b;
    8a10:	mvn.w	r3, #25
    8a14:	strb.w	r3, [r4, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a18:	mvn.w	r3, #69	; 0x45
    8a1c:	strb.w	r3, [r4, #1344]	; 0x540
      _s = s;
      _b = b;
    8a20:	mvn.w	r3, #25
    8a24:	strb.w	r3, [r4, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a28:	mvn.w	r3, #103	; 0x67
    8a2c:	strb.w	r3, [r4, #1347]	; 0x543
      _s = s;
    8a30:	mvn.w	r3, #56	; 0x38
    8a34:	strb.w	r3, [r4, #1348]	; 0x544
      _b = b;
    8a38:	mvn.w	r3, #22
    8a3c:	strb.w	r3, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a40:	mvn.w	r3, #65	; 0x41
    8a44:	strb.w	r3, [r4, #1350]	; 0x546
      _s = s;
    8a48:	mvn.w	r3, #81	; 0x51
    8a4c:	strb.w	r3, [r4, #1351]	; 0x547
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a50:	mvn.w	r3, #57	; 0x39
    8a54:	strb.w	r3, [r4, #1353]	; 0x549
      _s = s;
    8a58:	mvn.w	r3, #82	; 0x52
    8a5c:	strb.w	r3, [r4, #1354]	; 0x54a
      _b = b;
    8a60:	mvn.w	r3, #15
    8a64:	strb.w	r3, [r4, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a68:	mvn.w	r3, #54	; 0x36
    8a6c:	strb.w	r3, [r4, #1356]	; 0x54c
      _s = s;
    8a70:	mov.w	r3, #117	; 0x75
    8a74:	strb.w	r3, [r4, #1357]	; 0x54d
      _b = b;
    8a78:	mvn.w	r3, #14
    8a7c:	strb.w	r3, [r4, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a80:	mvn.w	r3, #59	; 0x3b
    8a84:	strb.w	r3, [r4, #1359]	; 0x54f
      _s = s;
    8a88:	mvn.w	r3, #64	; 0x40
    8a8c:	strb.w	r3, [r4, #1360]	; 0x550
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a90:	mvn.w	r3, #81	; 0x51
    8a94:	strb.w	r3, [r4, #1362]	; 0x552
    8a98:	mvn.w	r3, #110	; 0x6e
    8a9c:	strb.w	r3, [r4, #1365]	; 0x555
      _s = s;
    8aa0:	mov.w	r3, #46	; 0x2e
    8aa4:	strb.w	r3, [r4, #1366]	; 0x556
      _b = b;
    8aa8:	mvn.w	r3, #19
    8aac:	strb.w	r3, [r4, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ab0:	mvn.w	r3, #59	; 0x3b
    8ab4:	strb.w	r3, [r4, #1369]	; 0x559
      _b = b;
    8ab8:	mvn.w	r3, #12
    8abc:	strb.w	r3, [r4, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ac0:	mvn.w	r3, #45	; 0x2d
    8ac4:	strb.w	r3, [r4, #1341]	; 0x53d
      _s = s;
    8ac8:	mov.w	r3, #48	; 0x30
    8acc:	strb.w	r3, [r4, #1342]	; 0x53e
      _b = b;
    8ad0:	mvn.w	r3, #16
    8ad4:	strb.w	r3, [r4, #1352]	; 0x548
    8ad8:	mvn.w	r3, #11
    8adc:	strb.w	r3, [r4, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ae0:	mvn.w	r3, #121	; 0x79
    8ae4:	strb.w	r3, [r4, #1363]	; 0x553
      _b = b;
    8ae8:	mvn.w	r3, #11
    8aec:	strb.w	r3, [r4, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8af0:	mvn.w	r3, #102	; 0x66
    8af4:	strb.w	r3, [r4, #1372]	; 0x55c
      _b = b;
    8af8:	mvn.w	r3, #8
    8afc:	strb.w	ip, [r4, #1388]	; 0x56c
    8b00:	strb.w	r3, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b04:	mvn.w	r3, #75	; 0x4b
    8b08:	strb.w	r3, [r4, #1383]	; 0x567
    8b0c:	mvn.w	r3, #101	; 0x65
    8b10:	strb.w	r3, [r4, #1374]	; 0x55e
      _s = s;
    8b14:	mvn.w	r3, #90	; 0x5a
    8b18:	strb.w	r3, [r4, #1375]	; 0x55f
      _b = b;
    8b1c:	mvn.w	r3, #19
    8b20:	strb.w	r3, [r4, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b24:	mvn.w	r3, #110	; 0x6e
    8b28:	strb.w	r3, [r4, #1378]	; 0x562
      _b = b;
    8b2c:	mvn.w	r3, #13
    8b30:	strb.w	r3, [r4, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b34:	mvn.w	r3, #77	; 0x4d
    8b38:	strb.w	r3, [r4, #1380]	; 0x564
      _s = s;
    8b3c:	mvn.w	r3, #66	; 0x42
    8b40:	strb.w	r3, [r4, #1381]	; 0x565
      _b = b;
    8b44:	mvn.w	r3, #19
    8b48:	strb.w	r3, [r4, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b4c:	mvn.w	r3, #106	; 0x6a
    8b50:	strb.w	r3, [r4, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b54:	mvn.w	r3, #81	; 0x51
    8b58:	strb.w	r3, [r4, #1386]	; 0x56a
      _s = s;
    8b5c:	mov.w	r3, #113	; 0x71
    8b60:	strb.w	r3, [r4, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b64:	mvn.w	r3, #100	; 0x64
    8b68:	strb.w	r3, [r4, #1389]	; 0x56d
      _s = s;
    8b6c:	mvn.w	r3, #94	; 0x5e
    8b70:	strb.w	r3, [r4, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b74:	mov.w	r3, #103	; 0x67
    8b78:	strb.w	r3, [r4, #1392]	; 0x570
      _s = s;
    8b7c:	mov.w	r3, #95	; 0x5f
    8b80:	strb.w	r3, [r4, #1393]	; 0x571
      _b = b;
    8b84:	mov.w	r3, #126	; 0x7e
    8b88:	strb.w	r3, [r4, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b8c:	mov.w	r3, #95	; 0x5f
    8b90:	strb.w	r3, [r4, #1395]	; 0x573
      _s = s;
    8b94:	mov.w	r3, #88	; 0x58
    8b98:	strb.w	r3, [r4, #1396]	; 0x574
      _b = b;
    8b9c:	mvn.w	r3, #114	; 0x72
    8ba0:	strb.w	r3, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ba4:	mov.w	r3, #120	; 0x78
    8ba8:	strb.w	r3, [r4, #1398]	; 0x576
      _s = s;
    8bac:	mvn.w	r3, #58	; 0x3a
    8bb0:	strb.w	r3, [r4, #1399]	; 0x577
      _b = b;
    8bb4:	mvn.w	r3, #127	; 0x7f
    8bb8:	strb.w	r3, [r4, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bbc:	mov.w	r3, #95	; 0x5f
    8bc0:	strb.w	r3, [r4, #1401]	; 0x579
      _s = s;
    8bc4:	mvn.w	r3, #84	; 0x54
    8bc8:	strb.w	r3, [r4, #1402]	; 0x57a
      _b = b;
    8bcc:	mov.w	r3, #82	; 0x52
    8bd0:	strb.w	r3, [r4, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bd4:	mov.w	r3, #113	; 0x71
    8bd8:	strb.w	r3, [r4, #1404]	; 0x57c
      _s = s;
    8bdc:	mvn.w	r3, #126	; 0x7e
    8be0:	strb.w	r3, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8be4:	mvn.w	r3, #96	; 0x60
    8be8:	strb.w	r3, [r4, #1377]	; 0x561
      _s = s;
      _b = b;
    8bec:	mvn.w	r3, #16
    8bf0:	strb.w	r3, [r4, #1385]	; 0x569
    8bf4:	mvn.w	r3, #39	; 0x27
    8bf8:	strb.w	r3, [r4, #1391]	; 0x56f
    8bfc:	mvn.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c00:	strb.w	r6, [r4, #1429]	; 0x595
      _b = b;
    8c04:	strb.w	r3, [r4, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c08:	mov.w	r3, #64	; 0x40
    8c0c:	strb.w	r3, [r4, #1408]	; 0x580
      _b = b;
    8c10:	mvn.w	r3, #90	; 0x5a
    8c14:	strb.w	r3, [r4, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c18:	mvn.w	r3, #58	; 0x3a
    8c1c:	strb.w	r3, [r4, #1410]	; 0x582
      _s = s;
    8c20:	mov.w	r3, #72	; 0x48
    8c24:	strb.w	r3, [r4, #1411]	; 0x583
      _b = b;
    8c28:	mvn.w	r3, #27
    8c2c:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c30:	mvn.w	r3, #65	; 0x41
    8c34:	strb.w	r3, [r4, #1413]	; 0x585
      _s = s;
    8c38:	mov.w	r3, #108	; 0x6c
    8c3c:	strb.w	r3, [r4, #1414]	; 0x586
      _b = b;
    8c40:	mvn.w	r3, #21
    8c44:	strb.w	r3, [r4, #1415]	; 0x587
    8c48:	mvn.w	r3, #24
    8c4c:	strb.w	r3, [r4, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c50:	mvn.w	r3, #85	; 0x55
    8c54:	strb.w	r3, [r4, #1420]	; 0x58c
      _b = b;
    8c58:	mvn.w	r3, #22
    8c5c:	strb.w	r3, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c60:	mvn.w	r3, #73	; 0x49
    8c64:	strb.w	r3, [r4, #1422]	; 0x58e
      _s = s;
      _b = b;
    8c68:	mvn.w	r3, #17
    8c6c:	strb.w	r3, [r4, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c70:	mvn.w	r3, #56	; 0x38
    8c74:	strb.w	r3, [r4, #1425]	; 0x591
      _s = s;
    8c78:	mvn.w	r3, #66	; 0x42
    8c7c:	strb.w	r3, [r4, #1426]	; 0x592
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c80:	mvn.w	r3, #55	; 0x37
    8c84:	strb.w	r3, [r4, #1428]	; 0x594
      _s = s;
      _b = b;
    8c88:	mvn.w	r3, #14
    8c8c:	strb.w	r3, [r4, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c90:	mvn.w	r3, #63	; 0x3f
    8c94:	strb.w	r3, [r4, #1431]	; 0x597
      _s = s;
    8c98:	mvn.w	r3, #81	; 0x51
    8c9c:	strb.w	r3, [r4, #1432]	; 0x598
      _b = b;
    8ca0:	mvn.w	r3, #13
    8ca4:	strb.w	r3, [r4, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ca8:	mov.w	r3, #124	; 0x7c
    8cac:	strb.w	r3, [r4, #1435]	; 0x59b
      _b = b;
    8cb0:	mvn.w	r3, #15
    8cb4:	strb.w	r3, [r4, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cb8:	mvn.w	r3, #118	; 0x76
    8cbc:	strb.w	r3, [r4, #1437]	; 0x59d
      _s = s;
    8cc0:	mov.w	r3, #28
    8cc4:	strb.w	r3, [r4, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cc8:	mvn.w	r3, #34	; 0x22
    8ccc:	strb.w	r3, [r4, #1407]	; 0x57f
    8cd0:	mvn.w	r3, #96	; 0x60
    8cd4:	strb.w	r3, [r4, #1416]	; 0x588
      _s = s;
    8cd8:	mvn.w	r3, #102	; 0x66
    8cdc:	strb.w	r3, [r4, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ce0:	mvn.w	r3, #119	; 0x77
    8ce4:	strb.w	r3, [r4, #1419]	; 0x58b
      _s = s;
    8ce8:	mov.w	r3, #109	; 0x6d
    8cec:	strb.w	r3, [r4, #1423]	; 0x58f
      _b = b;
    8cf0:	mvn.w	r3, #16
    8cf4:	strb.w	r3, [r4, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cf8:	mvn.w	r3, #96	; 0x60
    8cfc:	strb.w	r3, [r4, #1434]	; 0x59a
    8d00:	mvn.w	r3, #68	; 0x44
      _s = s;
      _b = b;
    8d04:	strb.w	ip, [r4, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d08:	strb.w	r3, [r4, #1452]	; 0x5ac
      _s = s;
    8d0c:	mvn.w	r3, #38	; 0x26
      _b = b;
    8d10:	strb.w	ip, [r4, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8d14:	strb.w	r3, [r4, #1444]	; 0x5a4
      _b = b;
    8d18:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d1c:	strb.w	r1, [r4, #1443]	; 0x5a3
      _s = s;
      _b = b;
    8d20:	strb.w	r3, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d24:	mvn.w	r3, #110	; 0x6e
      _s = s;
    8d28:	strb.w	r1, [r4, #1462]	; 0x5b6
    8d2c:	mov.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d30:	strb.w	r3, [r4, #1446]	; 0x5a6
      _s = s;
    8d34:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d38:	strb.w	r7, [r4, #1464]	; 0x5b8
      _s = s;
    8d3c:	strb.w	r3, [r4, #1447]	; 0x5a7
      _b = b;
    8d40:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8d44:	strb.w	ip, [r4, #1471]	; 0x5bf
      _b = b;
    8d48:	strb.w	r3, [r4, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d4c:	mvn.w	r3, #109	; 0x6d
      _s = s;
    8d50:	strb.w	r6, [r4, #1450]	; 0x5aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d54:	strb.w	r3, [r4, #1449]	; 0x5a9
      _s = s;
      _b = b;
    8d58:	mvn.w	r3, #6
    8d5c:	strb.w	r3, [r4, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8d60:	mov.w	r3, #126	; 0x7e
    8d64:	strb.w	r3, [r4, #1453]	; 0x5ad
      _b = b;
    8d68:	mvn.w	r3, #5
    8d6c:	strb.w	r3, [r4, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d70:	mvn.w	r3, #53	; 0x35
    8d74:	strb.w	r3, [r4, #1455]	; 0x5af
      _s = s;
    8d78:	mov.w	r3, #52	; 0x34
    8d7c:	strb.w	r3, [r4, #1456]	; 0x5b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d80:	mvn.w	r3, #50	; 0x32
    8d84:	strb.w	r3, [r4, #1458]	; 0x5b2
      _s = s;
    8d88:	mov.w	r3, #62	; 0x3e
    8d8c:	strb.w	r3, [r4, #1459]	; 0x5b3
      _b = b;
    8d90:	mvn.w	r3, #9
    8d94:	strb.w	r3, [r4, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d98:	mvn.w	r3, #77	; 0x4d
    8d9c:	strb.w	r3, [r4, #1461]	; 0x5b5
      _s = s;
    8da0:	mvn.w	r3, #46	; 0x2e
    8da4:	strb.w	r3, [r4, #1465]	; 0x5b9
      _b = b;
    8da8:	mov.w	r3, #118	; 0x76
    8dac:	strb.w	r3, [r4, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8db0:	mov.w	r3, #110	; 0x6e
    8db4:	strb.w	r3, [r4, #1467]	; 0x5bb
      _s = s;
    8db8:	mvn.w	r3, #63	; 0x3f
    8dbc:	strb.w	r3, [r4, #1468]	; 0x5bc
      _b = b;
    8dc0:	mov.w	r3, #74	; 0x4a
    8dc4:	strb.w	r3, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8dc8:	mvn.w	r3, #121	; 0x79
    8dcc:	strb.w	r3, [r4, #1440]	; 0x5a0
      _s = s;
    8dd0:	mvn.w	r3, #83	; 0x53
    8dd4:	strb.w	r3, [r4, #1441]	; 0x5a1
      _b = b;
    8dd8:	mvn.w	r3, #8
    8ddc:	strb.w	r3, [r4, #1457]	; 0x5b1
    8de0:	mvn.w	r3, #34	; 0x22
    8de4:	strb.w	r3, [r4, #1463]	; 0x5b7
    8de8:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8dec:	strb.w	r6, [r4, #1470]	; 0x5be
      _s = s;
      _b = b;
    8df0:	strb.w	r3, [r4, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8df4:	mvn.w	r3, #53	; 0x35
      _b = b;
    8df8:	strb.w	r0, [r4, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8dfc:	strb.w	r3, [r4, #1474]	; 0x5c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e00:	mvn.w	r3, #110	; 0x6e
      _s = s;
    8e04:	strb.w	r7, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e08:	strb.w	r3, [r4, #1476]	; 0x5c4
      _s = s;
      _b = b;
    8e0c:	mov.w	r3, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e10:	strb.w	lr, [r4, #1489]	; 0x5d1
      _b = b;
    8e14:	strb.w	r3, [r4, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e18:	mvn.w	r3, #97	; 0x61
      _s = s;
      _b = b;
    8e1c:	strb.w	ip, [r4, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e20:	strb.w	r3, [r4, #1479]	; 0x5c7
      _s = s;
      _b = b;
    8e24:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e28:	strb.w	r7, [r4, #1498]	; 0x5da
      _b = b;
    8e2c:	strb.w	r3, [r4, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e30:	mvn.w	r3, #95	; 0x5f
    8e34:	strb.w	r6, [r4, #1473]	; 0x5c1
    8e38:	strb.w	r3, [r4, #1482]	; 0x5ca
      _s = s;
    8e3c:	mvn.w	r3, #28
    8e40:	strb.w	r9, [r4, #1495]	; 0x5d7
    8e44:	strb.w	r3, [r4, #1483]	; 0x5cb
      _b = b;
    8e48:	mvn.w	r3, #24
    8e4c:	strb.w	r3, [r4, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e50:	mvn.w	r3, #5
    8e54:	strb.w	r3, [r4, #1486]	; 0x5ce
      _b = b;
    8e58:	mvn.w	r3, #22
    8e5c:	strb.w	r3, [r4, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e60:	mvn.w	r3, #98	; 0x62
    8e64:	strb.w	r3, [r4, #1488]	; 0x5d0
      _s = s;
      _b = b;
    8e68:	mvn.w	r3, #28
    8e6c:	strb.w	r3, [r4, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e70:	mvn.w	r3, #108	; 0x6c
    8e74:	strb.w	r3, [r4, #1491]	; 0x5d3
      _s = s;
    8e78:	mvn.w	r3, #60	; 0x3c
    8e7c:	strb.w	r3, [r4, #1492]	; 0x5d4
      _b = b;
    8e80:	mvn.w	r3, #26
    8e84:	strb.w	r3, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e88:	mvn.w	r3, #101	; 0x65
    8e8c:	strb.w	r3, [r4, #1494]	; 0x5d6
    8e90:	mvn.w	r3, #66	; 0x42
    8e94:	strb.w	r3, [r4, #1497]	; 0x5d9
    8e98:	mvn.w	r3, #61	; 0x3d
    8e9c:	strb.w	r3, [r4, #1500]	; 0x5dc
    8ea0:	mvn.w	r3, #88	; 0x58
    8ea4:	strb.w	r3, [r4, #1503]	; 0x5df
      _s = s;
    8ea8:	mvn.w	r3, #79	; 0x4f
    8eac:	strb.w	r3, [r4, #1480]	; 0x5c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8eb0:	mvn.w	r3, #96	; 0x60
    8eb4:	strb.w	r3, [r4, #1485]	; 0x5cd
      _s = s;
      _b = b;
    8eb8:	mvn.w	r3, #16
    8ebc:	strb.w	r3, [r4, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ec0:	mov.w	r3, #115	; 0x73
    8ec4:	strb.w	r3, [r4, #1501]	; 0x5dd
      _b = b;
    8ec8:	mvn.w	r3, #16
    8ecc:	strb.w	r3, [r4, #1502]	; 0x5de
    8ed0:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ed4:	strb.w	r6, [r4, #1504]	; 0x5e0
      _b = b;
    8ed8:	strb.w	r3, [r4, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8edc:	mov.w	r3, #113	; 0x71
    8ee0:	strb.w	r3, [r4, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ee4:	mvn.w	r3, #111	; 0x6f
    8ee8:	strb.w	r3, [r4, #1506]	; 0x5e2
      _s = s;
      _b = b;
    8eec:	mvn.w	r3, #17
    8ef0:	strb.w	r3, [r4, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ef4:	mov.w	r3, #57	; 0x39
    8ef8:	strb.w	r3, [r4, #1510]	; 0x5e6
      _b = b;
    8efc:	mvn.w	r3, #21
    8f00:	strb.w	r3, [r4, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f04:	mov.w	r3, #94	; 0x5e
    8f08:	strb.w	r3, [r4, #1512]	; 0x5e8
      _s = s;
    8f0c:	mov.w	r3, #40	; 0x28
    8f10:	strb.w	r3, [r4, #1513]	; 0x5e9
      _b = b;
    8f14:	mvn.w	r3, #87	; 0x57
    8f18:	strb.w	r3, [r4, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f1c:	mov.w	r3, #122	; 0x7a
    8f20:	strb.w	r3, [r4, #1515]	; 0x5eb
      _s = s;
    8f24:	mov.w	r3, #116	; 0x74
    8f28:	strb.w	r3, [r4, #1516]	; 0x5ec
      _b = b;
    8f2c:	mvn.w	r3, #65	; 0x41
    8f30:	strb.w	r3, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f34:	mvn.w	r3, #118	; 0x76
    8f38:	strb.w	r3, [r4, #1518]	; 0x5ee
      _s = s;
    8f3c:	mvn.w	r3, #50	; 0x32
    8f40:	strb.w	r3, [r4, #1519]	; 0x5ef
      _b = b;
    8f44:	mvn.w	r3, #23
    8f48:	strb.w	r3, [r4, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f4c:	mvn.w	r3, #103	; 0x67
    8f50:	strb.w	r3, [r4, #1521]	; 0x5f1
      _s = s;
    8f54:	mvn.w	r3, #93	; 0x5d
    8f58:	strb.w	r3, [r4, #1522]	; 0x5f2
      _b = b;
    8f5c:	mvn.w	r3, #9
    8f60:	strb.w	r3, [r4, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f64:	mvn.w	r3, #71	; 0x47
    8f68:	strb.w	r3, [r4, #1524]	; 0x5f4
      _s = s;
    8f6c:	mov.w	r3, #108	; 0x6c
    8f70:	strb.w	r3, [r4, #1525]	; 0x5f5
      _b = b;
    8f74:	mvn.w	r3, #6
    8f78:	strb.w	r3, [r4, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f7c:	mvn.w	r3, #51	; 0x33
    8f80:	strb.w	r3, [r4, #1527]	; 0x5f7
      _s = s;
    8f84:	mov.w	r3, #59	; 0x3b
    8f88:	strb.w	r3, [r4, #1528]	; 0x5f8
      _b = b;
    8f8c:	mvn.w	r3, #6
    8f90:	strb.w	r3, [r4, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8f94:	mvn.w	r3, #47	; 0x2f
    8f98:	strb.w	r3, [r4, #1530]	; 0x5fa
      _s = s;
    8f9c:	mov.w	r3, #81	; 0x51
    8fa0:	strb.w	r3, [r4, #1531]	; 0x5fb
      _b = b;
    8fa4:	mvn.w	r3, #9
    8fa8:	strb.w	r3, [r4, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8fac:	mvn.w	r3, #38	; 0x26
    8fb0:	strb.w	r3, [r4, #1533]	; 0x5fd
      _s = s;
    8fb4:	mov.w	r3, #37	; 0x25
    8fb8:	strb.w	r3, [r4, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8fbc:	mvn.w	r3, #94	; 0x5e
    8fc0:	strb.w	r3, [r4, #1536]	; 0x600
      _s = s;
    8fc4:	mov.w	r3, #81	; 0x51
    8fc8:	strb.w	r3, [r4, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8fcc:	mvn.w	r3, #120	; 0x78
    8fd0:	strb.w	r3, [r4, #1509]	; 0x5e5
      _s = s;
      _b = b;
    8fd4:	mvn.w	r3, #11
    8fd8:	strb.w	r3, [r4, #1535]	; 0x5ff
    8fdc:	mvn.w	r3, #77	; 0x4d
    8fe0:	strb.w	r0, [r4, #1544]	; 0x608
    8fe4:	mvn.w	r0, #47	; 0x2f
    8fe8:	strb.w	r3, [r4, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8fec:	mov.w	r3, #84	; 0x54
      _s = s;
      _b = b;
    8ff0:	strb.w	r7, [r4, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ff4:	strb.w	r3, [r4, #1539]	; 0x603
      _s = s;
    8ff8:	mov.w	r3, #91	; 0x5b
    8ffc:	strb.w	lr, [r4, #1552]	; 0x610
    9000:	strb.w	r3, [r4, #1540]	; 0x604
      _b = b;
    9004:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9008:	strb.w	lr, [r4, #1564]	; 0x61c
      _b = b;
    900c:	strb.w	r3, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9010:	mov.w	r3, #118	; 0x76
    9014:	strb.w	fp, [r4, #1557]	; 0x615
    9018:	strb.w	r3, [r4, #1542]	; 0x606
      _s = s;
    901c:	mvn.w	r3, #63	; 0x3f
    9020:	strb.w	r3, [r4, #1543]	; 0x607
    9024:	mvn.w	r3, #65	; 0x41
    9028:	strb.w	r3, [r4, #1546]	; 0x60a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    902c:	mvn.w	r3, #110	; 0x6e
    9030:	strb.w	r3, [r4, #1548]	; 0x60c
      _s = s;
    9034:	mvn.w	r3, #13
    9038:	strb.w	r3, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    903c:	mvn.w	r3, #107	; 0x6b
    9040:	strb.w	r3, [r4, #1551]	; 0x60f
      _s = s;
      _b = b;
    9044:	mvn.w	r3, #65	; 0x41
    9048:	strb.w	r3, [r4, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    904c:	mvn.w	r3, #101	; 0x65
    9050:	strb.w	r3, [r4, #1554]	; 0x612
      _s = s;
    9054:	mvn.w	r3, #105	; 0x69
    9058:	strb.w	r3, [r4, #1555]	; 0x613
      _b = b;
    905c:	mvn.w	r3, #31
    9060:	strb.w	r3, [r4, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9064:	mov.w	r3, #75	; 0x4b
    9068:	strb.w	r3, [r4, #1558]	; 0x616
      _b = b;
    906c:	mvn.w	r3, #41	; 0x29
    9070:	strb.w	r3, [r4, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9074:	mvn.w	r3, #107	; 0x6b
    9078:	strb.w	r3, [r4, #1560]	; 0x618
    907c:	mvn.w	r3, #110	; 0x6e
    9080:	strb.w	r3, [r4, #1566]	; 0x61e
      _s = s;
    9084:	mvn.w	r3, #47	; 0x2f
    9088:	strb.w	r3, [r4, #1567]	; 0x61f
      _b = b;
    908c:	mvn.w	r3, #24
    9090:	strb.w	r3, [r4, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9094:	mvn.w	r3, #110	; 0x6e
    9098:	strb.w	r3, [r4, #1569]	; 0x621
      _s = s;
    909c:	mvn.w	r3, #40	; 0x28
    90a0:	strb.w	r3, [r4, #1570]	; 0x622
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90a4:	mov.w	r3, #100	; 0x64
    90a8:	strb.w	r3, [r4, #1545]	; 0x609
      _s = s;
      _b = b;
    90ac:	mov.w	r3, #63	; 0x3f
    90b0:	strb.w	r3, [r4, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    90b4:	mvn.w	r3, #121	; 0x79
    90b8:	strb.w	r3, [r4, #1561]	; 0x619
      _b = b;
    90bc:	mvn.w	r3, #32
    90c0:	strb.w	r3, [r4, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90c4:	mvn.w	r3, #96	; 0x60
    90c8:	strb.w	r3, [r4, #1563]	; 0x61b
      _s = s;
      _b = b;
    90cc:	mvn.w	r3, #39	; 0x27
    90d0:	strb.w	r3, [r4, #1565]	; 0x61d
    90d4:	mvn.w	r3, #23
    90d8:	strb.w	ip, [r4, #1574]	; 0x626
    90dc:	strb.w	r3, [r4, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90e0:	mvn.w	r3, #106	; 0x6a
      _s = s;
      _b = b;
    90e4:	strb.w	ip, [r4, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90e8:	strb.w	r3, [r4, #1572]	; 0x624
      _s = s;
    90ec:	mvn.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90f0:	strb.w	fp, [r4, #1581]	; 0x62d
      _s = s;
    90f4:	strb.w	r3, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    90f8:	mvn.w	r3, #107	; 0x6b
    90fc:	strb.w	r8, [r4, #1578]	; 0x62a
    9100:	strb.w	r3, [r4, #1575]	; 0x627
      _s = s;
    9104:	mvn.w	r3, #87	; 0x57
    9108:	strb.w	r3, [r4, #1576]	; 0x628
    910c:	mov.w	r3, #61	; 0x3d
    9110:	strb.w	r3, [r4, #1579]	; 0x62b
      _b = b;
    9114:	mvn.w	r3, #23
    9118:	strb.w	r3, [r4, #1580]	; 0x62c
    911c:	mvn.w	r3, #22
    9120:	strb.w	r3, [r4, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9124:	mvn.w	r3, #12
    9128:	strb.w	r3, [r4, #1584]	; 0x630
      _s = s;
    912c:	mov.w	r3, #88	; 0x58
    9130:	strb.w	r3, [r4, #1585]	; 0x631
      _b = b;
    9134:	mov.w	r3, #43	; 0x2b
    9138:	strb.w	r3, [r4, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    913c:	mov.w	r3, #59	; 0x3b
    9140:	strb.w	r3, [r4, #1587]	; 0x633
      _s = s;
    9144:	mov.w	r3, #44	; 0x2c
    9148:	strb.w	r3, [r4, #1588]	; 0x634
      _b = b;
    914c:	mov.w	r3, #57	; 0x39
    9150:	strb.w	r3, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9154:	mov.w	r3, #125	; 0x7d
    9158:	strb.w	r3, [r4, #1590]	; 0x636
      _s = s;
    915c:	mov.w	r3, #79	; 0x4f
    9160:	strb.w	r3, [r4, #1591]	; 0x637
      _b = b;
    9164:	mvn.w	r3, #47	; 0x2f
    9168:	strb.w	r3, [r4, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    916c:	mov.w	r3, #95	; 0x5f
    9170:	strb.w	r3, [r4, #1594]	; 0x63a
      _b = b;
    9174:	mvn.w	r3, #9
    9178:	strb.w	r3, [r4, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    917c:	mvn.w	r3, #66	; 0x42
    9180:	strb.w	r3, [r4, #1596]	; 0x63c
      _s = s;
    9184:	mov.w	r3, #116	; 0x74
    9188:	strb.w	r3, [r4, #1597]	; 0x63d
      _b = b;
    918c:	mvn.w	r3, #5
    9190:	strb.w	r3, [r4, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9194:	mvn.w	r3, #64	; 0x40
    9198:	strb.w	r3, [r4, #1599]	; 0x63f
      _s = s;
    919c:	mov.w	r3, #50	; 0x32
    91a0:	strb.w	r3, [r4, #1600]	; 0x640
      _b = b;
    91a4:	mvn.w	r3, #6
    91a8:	strb.w	r3, [r4, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    91ac:	mov.w	r3, #57	; 0x39
    91b0:	strb.w	r3, [r4, #1603]	; 0x643
    91b4:	mov.w	r3, #63	; 0x3f
    91b8:	strb.w	r3, [r4, #1582]	; 0x62e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    91bc:	mvn.w	r3, #121	; 0x79
    91c0:	strb.w	r3, [r4, #1593]	; 0x639
    91c4:	mvn.w	r3, #45	; 0x2d
    91c8:	strb.w	r3, [r4, #1602]	; 0x642
      _s = s;
      _b = b;
    91cc:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    91d0:	strb.w	sl, [r4, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    91d4:	mvn.w	sl, #122	; 0x7a
      _s = s;
      _b = b;
    91d8:	strb.w	r3, [r4, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    91dc:	mvn.w	r3, #50	; 0x32
    91e0:	strb.w	sl, [r4, #1620]	; 0x654
    91e4:	mvn.w	sl, #121	; 0x79
    91e8:	strb.w	r3, [r4, #1605]	; 0x645
      _s = s;
    91ec:	mov.w	r3, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    91f0:	strb.w	sl, [r4, #1611]	; 0x64b
    91f4:	mvn.w	sl, #102	; 0x66
      _s = s;
    91f8:	strb.w	r3, [r4, #1606]	; 0x646
      _b = b;
    91fc:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9200:	strb.w	sl, [r4, #1635]	; 0x663
      _s = s;
      _b = b;
    9204:	mvn.w	sl, #39	; 0x27
    9208:	strb.w	r3, [r4, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    920c:	mvn.w	r3, #94	; 0x5e
    9210:	strb.w	r2, [r4, #1632]	; 0x660
#include "Screen.h"



//--------------------------------------------Screens
Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    9214:	movs	r2, #7
    9216:	strb.w	r3, [r4, #1608]	; 0x648
      _s = s;
    921a:	mov.w	r3, #117	; 0x75
    921e:	strb.w	r1, [r4, #1633]	; 0x661
    9222:	mov.w	r1, #576	; 0x240
    9226:	strb.w	r3, [r4, #1609]	; 0x649
      _b = b;
    922a:	mvn.w	r3, #28
    922e:	strb.w	r0, [r4, #1634]	; 0x662
    9232:	strb.w	r3, [r4, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9236:	mvn.w	r3, #12
    923a:	strb.w	r8, [r4, #1627]	; 0x65b
    923e:	strb.w	r3, [r4, #1612]	; 0x64c
      _b = b;
    9242:	mvn.w	r3, #35	; 0x23
    9246:	ldr	r0, [pc, #964]	; (960c <_GLOBAL__sub_I_low_threshold+0x64ac>)
    9248:	strb.w	r3, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    924c:	mvn.w	r3, #118	; 0x76
    9250:	strb.w	r3, [r4, #1614]	; 0x64e
      _s = s;
    9254:	mvn.w	r3, #19
    9258:	strb.w	r3, [r4, #1615]	; 0x64f
      _b = b;
    925c:	mvn.w	r3, #46	; 0x2e
    9260:	strb.w	r3, [r4, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9264:	mvn.w	r3, #108	; 0x6c
    9268:	strb.w	r3, [r4, #1617]	; 0x651
      _s = s;
    926c:	mvn.w	r3, #43	; 0x2b
    9270:	strb.w	r3, [r4, #1618]	; 0x652
      _b = b;
    9274:	mov.w	r3, #89	; 0x59
    9278:	strb.w	r3, [r4, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    927c:	mvn.w	r3, #25
    9280:	strb.w	r3, [r4, #1621]	; 0x655
      _b = b;
    9284:	mvn.w	r3, #100	; 0x64
    9288:	strb.w	r3, [r4, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    928c:	mov.w	r3, #57	; 0x39
    9290:	strb.w	r3, [r4, #1623]	; 0x657
      _s = s;
    9294:	mov.w	r3, #99	; 0x63
    9298:	strb.w	r3, [r4, #1624]	; 0x658
      _b = b;
    929c:	mvn.w	r3, #43	; 0x2b
    92a0:	strb.w	r3, [r4, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    92a4:	mov.w	r3, #42	; 0x2a
    92a8:	strb.w	r3, [r4, #1626]	; 0x65a
    92ac:	mov.w	r3, #33	; 0x21
    92b0:	strb.w	r3, [r4, #1629]	; 0x65d
      _s = s;
    92b4:	mvn.w	r3, #84	; 0x54
    92b8:	strb.w	r3, [r4, #1630]	; 0x65e
      _b = b;
    92bc:	mvn.w	r3, #30
    92c0:	strb.w	r3, [r4, #1631]	; 0x65f
    92c4:	movs	r3, #82	; 0x52
    92c6:	strb.w	sl, [r4, #1628]	; 0x65c
    92ca:	mvn.w	sl, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    92ce:	strb.w	r7, [r4, #1641]	; 0x669
      _s = s;
    92d2:	mvn.w	r7, #57	; 0x39
      _b = b;
    92d6:	strb.w	sl, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    92da:	mvn.w	sl, #101	; 0x65
      _s = s;
    92de:	strb.w	r7, [r4, #1642]	; 0x66a
      _b = b;
    92e2:	mvn.w	r7, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    92e6:	strb.w	sl, [r4, #1638]	; 0x666
      _s = s;
    92ea:	mvn.w	sl, #2
      _b = b;
    92ee:	strb.w	r7, [r4, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    92f2:	mov.w	r7, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    92f6:	strb.w	r6, [r4, #1647]	; 0x66f
    92fa:	mvn.w	r6, #119	; 0x77
      _s = s;
    92fe:	strb.w	r7, [r4, #1645]	; 0x66d
      _b = b;
    9302:	mvn.w	r7, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9306:	strb.w	sl, [r4, #1639]	; 0x667
      _b = b;
    930a:	mvn.w	sl, #36	; 0x24
    930e:	strb.w	r7, [r4, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9312:	mov.w	r7, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9316:	strb.w	r6, [r4, #1665]	; 0x681
    931a:	mvn.w	r6, #8
      _s = s;
    931e:	strb.w	r7, [r4, #1648]	; 0x670
      _b = b;
    9322:	mvn.w	r7, #27
    9326:	strb.w	sl, [r4, #1640]	; 0x668
    932a:	strb.w	r7, [r4, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    932e:	mvn.w	r7, #114	; 0x72
    9332:	strb.w	r9, [r4, #1644]	; 0x66c
    9336:	strb.w	r7, [r4, #1650]	; 0x672
      _s = s;
    933a:	mov.w	r7, #83	; 0x53
    933e:	strb.w	r7, [r4, #1651]	; 0x673
      _b = b;
    9342:	mvn.w	r7, #25
    9346:	strb.w	r7, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    934a:	mvn.w	r7, #43	; 0x2b
    934e:	strb.w	r7, [r4, #1653]	; 0x675
      _s = s;
    9352:	mov.w	r7, #14
    9356:	strb.w	r7, [r4, #1654]	; 0x676
      _b = b;
    935a:	mvn.w	r7, #41	; 0x29
    935e:	strb.w	r7, [r4, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9362:	mov.w	r7, #94	; 0x5e
    9366:	strb.w	r7, [r4, #1657]	; 0x679
      _b = b;
    936a:	mov.w	r7, #46	; 0x2e
    936e:	strb.w	r7, [r4, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9372:	mov.w	r7, #1
    9376:	strb.w	r7, [r4, #1659]	; 0x67b
      _s = s;
    937a:	mov.w	r7, #90	; 0x5a
    937e:	strb.w	r7, [r4, #1660]	; 0x67c
      _b = b;
    9382:	mov.w	r7, #62	; 0x3e
    9386:	strb.w	r7, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    938a:	mvn.w	r7, #107	; 0x6b
    938e:	strb.w	r7, [r4, #1662]	; 0x67e
      _s = s;
    9392:	mov.w	r7, #95	; 0x5f
    9396:	strb.w	r7, [r4, #1663]	; 0x67f
      _b = b;
    939a:	mov.w	r7, #88	; 0x58
    939e:	strb.w	r7, [r4, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    93a2:	mvn.w	r7, #69	; 0x45
    93a6:	strb.w	r7, [r4, #1666]	; 0x682
      _b = b;
    93aa:	mvn.w	r7, #53	; 0x35
    93ae:	strb.w	r7, [r4, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93b2:	mvn.w	r7, #111	; 0x6f
    93b6:	strb.w	r7, [r4, #1668]	; 0x684
      _s = s;
    93ba:	mov.w	r7, #95	; 0x5f
    93be:	strb.w	r7, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93c2:	strb.w	r6, [r4, #1656]	; 0x678
    93c6:	mvn.w	r6, #103	; 0x67
      _s = s;
      _b = b;
    93ca:	strb.w	ip, [r4, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93ce:	strb.w	r6, [r4, #1671]	; 0x687
      _s = s;
    93d2:	mov.w	r6, #69	; 0x45
    93d6:	strb.w	lr, [r4, #1687]	; 0x697
    93da:	strb.w	r6, [r4, #1672]	; 0x688
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93de:	mvn.w	r6, #55	; 0x37
      _s = s;
    93e2:	strb.w	lr, [r4, #1696]	; 0x6a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93e6:	strb.w	r6, [r4, #1674]	; 0x68a
      _s = s;
    93ea:	mov.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93ee:	strb.w	r8, [r4, #1683]	; 0x693
      _s = s;
    93f2:	strb.w	r6, [r4, #1675]	; 0x68b
      _b = b;
    93f6:	mvn.w	r6, #7
    93fa:	strb.w	r6, [r4, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    93fe:	mvn.w	r6, #58	; 0x3a
    9402:	strb.w	r6, [r4, #1677]	; 0x68d
      _s = s;
    9406:	mov.w	r6, #92	; 0x5c
    940a:	strb.w	r6, [r4, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    940e:	mvn.w	r6, #110	; 0x6e
    9412:	strb.w	r6, [r4, #1680]	; 0x690
      _s = s;
    9416:	mov.w	r6, #107	; 0x6b
    941a:	strb.w	r6, [r4, #1681]	; 0x691
      _b = b;
    941e:	mvn.w	r6, #24
    9422:	strb.w	r6, [r4, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9426:	mvn.w	r6, #7
    942a:	strb.w	r6, [r4, #1684]	; 0x694
      _b = b;
    942e:	mvn.w	r6, #71	; 0x47
    9432:	strb.w	r6, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9436:	mvn.w	r6, #109	; 0x6d
    943a:	strb.w	r6, [r4, #1686]	; 0x696
      _s = s;
      _b = b;
    943e:	mvn.w	r6, #77	; 0x4d
    9442:	strb.w	r6, [r4, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9446:	mvn.w	r6, #6
    944a:	strb.w	r6, [r4, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    944e:	mov.w	r6, #60	; 0x3c
    9452:	strb.w	r6, [r4, #1692]	; 0x69c
      _s = s;
    9456:	mov.w	r6, #124	; 0x7c
    945a:	strb.w	r6, [r4, #1693]	; 0x69d
      _b = b;
    945e:	mvn.w	r6, #61	; 0x3d
    9462:	strb.w	r6, [r4, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9466:	mov.w	r6, #37	; 0x25
    946a:	strb.w	r6, [r4, #1695]	; 0x69f
    946e:	mov.w	r6, #31
    9472:	strb.w	r6, [r4, #1698]	; 0x6a2
      _s = s;
    9476:	mvn.w	r6, #25
    947a:	strb.w	r6, [r4, #1699]	; 0x6a3
      _b = b;
    947e:	mvn.w	r6, #38	; 0x26
    9482:	strb.w	r6, [r4, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    9486:	mvn.w	r6, #51	; 0x33
    948a:	strb.w	r6, [r4, #1702]	; 0x6a6
      _b = b;
    948e:	mvn.w	r6, #120	; 0x78
    9492:	strb.w	r6, [r4, #1691]	; 0x69b
    9496:	mvn.w	r6, #33	; 0x21
    949a:	strb.w	r6, [r4, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    949e:	mvn.w	r6, #121	; 0x79
    94a2:	strb.w	r6, [r4, #1689]	; 0x699
    94a6:	mov.w	r6, #26
    94aa:	strb.w	r6, [r4, #1701]	; 0x6a5
      _s = s;
      _b = b;
    94ae:	mvn.w	r6, #8
    94b2:	strb.w	r6, [r4, #1673]	; 0x689
    94b6:	strb.w	r6, [r4, #1679]	; 0x68f
    94ba:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    94be:	strb.w	sl, [r4, #1710]	; 0x6ae
      _s = s;
      _b = b;
    94c2:	strb.w	r6, [r4, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    94c6:	mov.w	r6, #22
      _s = s;
    94ca:	strb.w	lr, [r4, #1726]	; 0x6be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    94ce:	strb.w	r6, [r4, #1704]	; 0x6a8
      _s = s;
    94d2:	mvn.w	r6, #71	; 0x47
    94d6:	strb.w	r6, [r4, #1705]	; 0x6a9
      _b = b;
    94da:	mvn.w	r6, #30
    94de:	strb.w	r6, [r4, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    94e2:	mov.w	r6, #13
    94e6:	strb.w	r6, [r4, #1707]	; 0x6ab
      _s = s;
    94ea:	mov.w	r6, #76	; 0x4c
    94ee:	strb.w	r6, [r4, #1708]	; 0x6ac
      _b = b;
    94f2:	mvn.w	r6, #27
    94f6:	strb.w	r6, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    94fa:	mov.w	r6, #62	; 0x3e
    94fe:	strb.w	r6, [r4, #1711]	; 0x6af
      _b = b;
    9502:	mvn.w	r6, #87	; 0x57
    9506:	strb.w	r6, [r4, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    950a:	mov.w	r6, #56	; 0x38
    950e:	strb.w	r6, [r4, #1714]	; 0x6b2
      _b = b;
    9512:	mvn.w	r6, #43	; 0x2b
    9516:	strb.w	r6, [r4, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    951a:	mvn.w	r6, #13
    951e:	strb.w	r6, [r4, #1716]	; 0x6b4
      _s = s;
    9522:	mov.w	r6, #24
    9526:	strb.w	r6, [r4, #1717]	; 0x6b5
      _b = b;
    952a:	mvn.w	r6, #40	; 0x28
    952e:	strb.w	r6, [r4, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9532:	mvn.w	r6, #18
    9536:	strb.w	r6, [r4, #1719]	; 0x6b7
      _s = s;
    953a:	mvn.w	r6, #127	; 0x7f
    953e:	strb.w	r6, [r4, #1720]	; 0x6b8
      _b = b;
    9542:	mvn.w	r6, #24
    9546:	strb.w	r6, [r4, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    954a:	mvn.w	r6, #15
    954e:	strb.w	r6, [r4, #1722]	; 0x6ba
      _s = s;
      _b = b;
    9552:	mvn.w	r6, #35	; 0x23
    9556:	strb.w	r6, [r4, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    955a:	mvn.w	r6, #26
    955e:	strb.w	r6, [r4, #1725]	; 0x6bd
      _s = s;
      _b = b;
    9562:	mvn.w	r6, #35	; 0x23
    9566:	strb.w	r6, [r4, #1727]	; 0x6bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    956a:	mov.w	r6, #114	; 0x72
    956e:	strb.w	r6, [r4, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    9572:	mvn.w	r6, #16
    9576:	strb.w	r6, [r4, #1713]	; 0x6b1
    957a:	bl	9ab0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    957e:	ldr	r2, [pc, #144]	; (9610 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    9580:	ldr	r1, [pc, #144]	; (9614 <_GLOBAL__sub_I_low_threshold+0x64b4>)
    9582:	ldr	r0, [pc, #136]	; (960c <_GLOBAL__sub_I_low_threshold+0x64ac>)
    9584:	bl	b928 <__aeabi_atexit>
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    9588:	movs	r3, #82	; 0x52
    958a:	movs	r2, #8
    958c:	mov.w	r1, #576	; 0x240
    9590:	ldr	r0, [pc, #132]	; (9618 <_GLOBAL__sub_I_low_threshold+0x64b8>)
    9592:	bl	9ab0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9596:	ldr	r2, [pc, #120]	; (9610 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    9598:	ldr	r1, [pc, #120]	; (9614 <_GLOBAL__sub_I_low_threshold+0x64b4>)
    959a:	ldr	r0, [pc, #124]	; (9618 <_GLOBAL__sub_I_low_threshold+0x64b8>)
    959c:	bl	b928 <__aeabi_atexit>
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    95a0:	movs	r3, #82	; 0x52
    95a2:	movs	r2, #2
    95a4:	movs	r1, #120	; 0x78
    95a6:	ldr	r0, [pc, #116]	; (961c <_GLOBAL__sub_I_low_threshold+0x64bc>)
    95a8:	bl	9ab0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    95ac:	ldr	r2, [pc, #96]	; (9610 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    95ae:	ldr	r1, [pc, #100]	; (9614 <_GLOBAL__sub_I_low_threshold+0x64b4>)
    95b0:	ldr	r0, [pc, #104]	; (961c <_GLOBAL__sub_I_low_threshold+0x64bc>)
    95b2:	bl	b928 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    95b6:	movs	r3, #82	; 0x52
    95b8:	movs	r2, #14
    95ba:	movs	r1, #120	; 0x78
    95bc:	ldr	r0, [pc, #96]	; (9620 <_GLOBAL__sub_I_low_threshold+0x64c0>)
    95be:	bl	9ab0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    95c2:	ldr	r2, [pc, #76]	; (9610 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    95c4:	ldr	r1, [pc, #76]	; (9614 <_GLOBAL__sub_I_low_threshold+0x64b4>)
    95c6:	ldr	r0, [pc, #88]	; (9620 <_GLOBAL__sub_I_low_threshold+0x64c0>)
    95c8:	bl	b928 <__aeabi_atexit>
    95cc:	ldr	r3, [pc, #84]	; (9624 <_GLOBAL__sub_I_low_threshold+0x64c4>)

	public:
		

Color(){
	RGB_updated = false;
    95ce:	movs	r2, #0
    95d0:	add.w	r1, r3, #440	; 0x1b8
    95d4:	strb.w	r2, [r3, #-20]
    95d8:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    95da:	strb.w	r2, [r3, #-63]
		

		

Beam() {
	active = false;
    95de:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    95e2:	cmp	r3, r1
    95e4:	bne.n	95d4 <_GLOBAL__sub_I_low_threshold+0x6474>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    95e6:	ldr	r3, [pc, #64]	; (9628 <_GLOBAL__sub_I_low_threshold+0x64c8>)
    95e8:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    95ea:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    95ec:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    95ee:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    95f0:	ldr	r3, [r7, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    95f2:	ldr	r6, [pc, #52]	; (9628 <_GLOBAL__sub_I_low_threshold+0x64c8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    95f4:	cmp	r3, r1
    95f6:	it	eq
    95f8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    95fa:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    95fc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    95fe:	ite	eq
    9600:	moveq.w	lr, #1
    9604:	movne.w	lr, #0
    9608:	b.n	962c <_GLOBAL__sub_I_low_threshold+0x64cc>
    960a:	nop
    960c:	.word	0x200039cc
    9610:	.word	0x200007cc
    9614:	.word	0x000097c9
    9618:	.word	0x200039e0
    961c:	.word	0x20006ed8
    9620:	.word	0x20006eec
    9624:	.word	0x20003b80
    9628:	.word	0x400d4000
    962c:	cmp.w	lr, #0
    9630:	beq.n	95ee <_GLOBAL__sub_I_low_threshold+0x648e>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    9632:	lsrs	r1, r3, #5
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    9634:	str	r5, [sp, #8]
    9636:	ldr	r2, [pc, #224]	; (9718 <_GLOBAL__sub_I_low_threshold+0x65b8>)
    9638:	orr.w	r1, r1, r0, lsl #27
    963c:	ldr	r3, [pc, #220]	; (971c <_GLOBAL__sub_I_low_threshold+0x65bc>)
    963e:	ldr	r7, [pc, #224]	; (9720 <_GLOBAL__sub_I_low_threshold+0x65c0>)
    9640:	vmov	s15, r1
    9644:	ldr	r5, [pc, #220]	; (9724 <_GLOBAL__sub_I_low_threshold+0x65c4>)
    9646:	str	r2, [sp, #4]
    9648:	vcvt.f64.u32	d7, s15
    964c:	str	r3, [sp, #0]
    964e:	str	r7, [sp, #12]
    9650:	ldr	r3, [pc, #212]	; (9728 <_GLOBAL__sub_I_low_threshold+0x65c8>)
    9652:	ldr	r2, [pc, #216]	; (972c <_GLOBAL__sub_I_low_threshold+0x65cc>)
    9654:	ldr	r1, [pc, #216]	; (9730 <_GLOBAL__sub_I_low_threshold+0x65d0>)
    9656:	ldr	r0, [pc, #220]	; (9734 <_GLOBAL__sub_I_low_threshold+0x65d4>)
    9658:	vldr	d5, [pc, #180]	; 9710 <_GLOBAL__sub_I_low_threshold+0x65b0>
    965c:	vdiv.f64	d6, d7, d5
    9660:	vcvt.u32.f64	s12, d6
    9664:	vstr	s12, [r5]
    9668:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
Screen screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    966c:	ldr	r1, [pc, #200]	; (9738 <_GLOBAL__sub_I_low_threshold+0x65d8>)
    966e:	ldr	r2, [pc, #204]	; (973c <_GLOBAL__sub_I_low_threshold+0x65dc>)
    9670:	ldr	r3, [pc, #204]	; (9740 <_GLOBAL__sub_I_low_threshold+0x65e0>)
    9672:	str	r4, [sp, #8]
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9674:	mov	r4, r6
    9676:	str	r1, [sp, #12]
    9678:	str	r2, [sp, #4]
    967a:	str	r3, [sp, #0]
    967c:	ldr	r1, [pc, #196]	; (9744 <_GLOBAL__sub_I_low_threshold+0x65e4>)
    967e:	ldr	r3, [pc, #200]	; (9748 <_GLOBAL__sub_I_low_threshold+0x65e8>)
    9680:	ldr	r2, [pc, #200]	; (974c <_GLOBAL__sub_I_low_threshold+0x65ec>)
    9682:	ldr	r0, [pc, #204]	; (9750 <_GLOBAL__sub_I_low_threshold+0x65f0>)
    9684:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9688:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    968a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    968c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    968e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9690:	ldr	r6, [pc, #192]	; (9754 <_GLOBAL__sub_I_low_threshold+0x65f4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9692:	cmp	r3, r1
    9694:	it	eq
    9696:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9698:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    969a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    969c:	ite	eq
    969e:	moveq	r5, #1
    96a0:	movne	r5, #0
    96a2:	cmp	r5, #0
    96a4:	beq.n	968c <_GLOBAL__sub_I_low_threshold+0x652c>
    96a6:	lsrs	r1, r3, #5
    96a8:	ldr	r3, [pc, #172]	; (9758 <_GLOBAL__sub_I_low_threshold+0x65f8>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    96aa:	mov	r4, r6
    96ac:	orr.w	r1, r1, r2, lsl #27
    96b0:	vmov	s15, r1
    96b4:	vldr	d5, [pc, #88]	; 9710 <_GLOBAL__sub_I_low_threshold+0x65b0>
    96b8:	vcvt.f64.u32	d7, s15
    96bc:	vdiv.f64	d6, d7, d5
    96c0:	vcvt.u32.f64	s12, d6
    96c4:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    96c8:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    96ca:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    96cc:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    96ce:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    96d0:	cmp	r3, r1
    96d2:	it	eq
    96d4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    96d6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    96d8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    96da:	ite	eq
    96dc:	moveq	r5, #1
    96de:	movne	r5, #0
    96e0:	cmp	r5, #0
    96e2:	beq.n	96cc <_GLOBAL__sub_I_low_threshold+0x656c>
    96e4:	lsrs	r1, r3, #5
    96e6:	ldr	r3, [pc, #116]	; (975c <_GLOBAL__sub_I_low_threshold+0x65fc>)
    96e8:	orr.w	r1, r1, r2, lsl #27
    96ec:	vmov	s15, r1
    96f0:	vldr	d5, [pc, #28]	; 9710 <_GLOBAL__sub_I_low_threshold+0x65b0>
    96f4:	vcvt.f64.u32	d7, s15
    96f8:	vdiv.f64	d6, d7, d5
    96fc:	vcvt.u32.f64	s12, d6
    9700:	vstr	s12, [r3]

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    9704:	add	sp, #20
    9706:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    970a:	nop
    970c:	nop.w
    9710:	.word	0xd2f1a9fc
    9714:	.word	0x3ff0624d
    9718:	.word	0x200039cc
    971c:	.word	0x20004f34
    9720:	.word	0x20000a10
    9724:	.word	0x20001580
    9728:	.word	0x20006f00
    972c:	.word	0x20009348
    9730:	.word	0x20001584
    9734:	.word	0x200039f4
    9738:	.word	0x200007d0
    973c:	.word	0x200039e0
    9740:	.word	0x20003d10
    9744:	.word	0x200027a8
    9748:	.word	0x20008124
    974c:	.word	0x2000a56c
    9750:	.word	0x20003aa4
    9754:	.word	0x400d4000
    9758:	.word	0x2000157c
    975c:	.word	0x20003d0c

00009760 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    9760:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    9762:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    9764:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    9766:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9768:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    976a:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    976c:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    9770:	cbz	r3, 978a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    9772:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    9776:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    977a:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    977e:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    9782:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    9786:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    978a:	ldrb	r7, [r0, #15]
    978c:	ldrb	r4, [r0, #12]
    978e:	cmp	r4, r7
    9790:	beq.n	97bc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    9792:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    9794:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    9796:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    979a:	add	r7, r1
    979c:	cbnz	r3, 97b2 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    979e:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    97a0:	strb	r3, [r7, #0]
    97a2:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    97a4:	strb	r6, [r1, r7]
    p[gOffset] = g;
    97a6:	ldrb	r3, [r0, #13]
    97a8:	strb	r5, [r1, r3]
    p[bOffset] = b;
    97aa:	ldrb	r3, [r0, #14]
    97ac:	strb.w	lr, [r1, r3]
    97b0:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    97b2:	mul.w	r3, r3, r2
    97b6:	ubfx	r3, r3, #8, #8
    97ba:	b.n	97a0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    97bc:	add.w	r1, r1, r1, lsl #1
    97c0:	ldr	r3, [r0, #8]
    97c2:	add	r1, r3
    97c4:	b.n	97a4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    97c6:	nop

000097c8 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    97c8:	push	{r4, lr}
    97ca:	mov	r4, r0
  if(pixels)   free(pixels);
    97cc:	ldr	r0, [r0, #8]
    97ce:	cbz	r0, 97d4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    97d0:	bl	ba1c <free>
  if(pin >= 0) pinMode(pin, INPUT);
    97d4:	ldrsb.w	r0, [r4, #6]
    97d8:	cmp	r0, #0
    97da:	blt.n	97e4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    97dc:	uxtb	r0, r0
    97de:	movs	r1, #0
    97e0:	bl	ae7c <pinMode>
}
    97e4:	mov	r0, r4
    97e6:	pop	{r4, pc}

000097e8 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    97e8:	push	{r4, lr}
    97ea:	mov	r4, r0
  if(pin >= 0) {
    97ec:	ldrsb.w	r0, [r0, #6]
    97f0:	cmp	r0, #0
    97f2:	blt.n	9804 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    97f4:	uxtb	r0, r0
    97f6:	movs	r1, #1
    97f8:	bl	ae7c <pinMode>
    digitalWrite(pin, LOW);
    97fc:	movs	r1, #0
    97fe:	ldrb	r0, [r4, #6]
    9800:	bl	ae70 <digitalWrite>
  }
  begun = true;
    9804:	movs	r3, #1
    9806:	strb	r3, [r4, #1]
    9808:	pop	{r4, pc}
    980a:	nop

0000980c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    980c:	push	{r3, r4, r5, lr}
    980e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    9810:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    9812:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    9814:	cbz	r0, 981a <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    9816:	bl	ba1c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    981a:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    981c:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    981e:	ldrb	r0, [r4, #12]
    9820:	cmp	r3, r0
    9822:	ite	eq
    9824:	moveq	r0, #3
    9826:	movne	r0, #4
    9828:	smulbb	r0, r0, r5
    982c:	uxth	r0, r0
    982e:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    9830:	bl	b934 <calloc>
    9834:	str	r0, [r4, #8]
    9836:	cbz	r0, 983c <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    9838:	strh	r5, [r4, #2]
    983a:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    983c:	strh	r0, [r4, #4]
    983e:	strh	r0, [r4, #2]
    9840:	pop	{r3, r4, r5, pc}
    9842:	nop

00009844 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    9844:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    9846:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    9848:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    984c:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    9850:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    9852:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    9856:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    985a:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    985e:	ite	hi
    9860:	movhi	r6, #0
    9862:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    9864:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    9868:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    986c:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    986e:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    9870:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    9872:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    9874:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    9876:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    9878:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    987a:	cbz	r5, 9892 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    987c:	subs	r1, r2, r1
    987e:	clz	r1, r1
    9882:	lsrs	r1, r1, #5
    9884:	cmp	r1, r4
    9886:	beq.n	9892 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    9888:	ldrh	r1, [r0, #2]
  }
}
    988a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    988e:	b.w	980c <Adafruit_NeoPixel::updateLength(unsigned short)>
    9892:	pop	{r4, r5, r6, r7, pc}

00009894 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    9894:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    9898:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    989a:	sub	sp, #20
    989c:	str	r0, [sp, #12]

  if(!pixels) return;
    989e:	cmp	r3, #0
    98a0:	beq.n	9986 <Adafruit_NeoPixel::show()+0xf2>
    98a2:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    98a4:	bl	ad9c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    98a8:	ldr	r3, [r4, #16]
    98aa:	subs	r0, r0, r3
    98ac:	cmp.w	r0, #300	; 0x12c
    98b0:	bcc.n	98a4 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    98b2:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    98b4:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    98b6:	ldr	r0, [pc, #408]	; (9a50 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    98b8:	ldrsb.w	r3, [r6, #6]
    98bc:	ldr	r4, [pc, #404]	; (9a54 <Adafruit_NeoPixel::show()+0x1c0>)
    98be:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    98c0:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    98c2:	ldr	r1, [pc, #404]	; (9a58 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    98c4:	ldr.w	ip, [r4, r3]
    98c8:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    98ca:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    98cc:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    98d0:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    98d4:	mov	r5, r6
    98d6:	mov	r6, r3
    98d8:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    98da:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    98dc:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    98de:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    98e0:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    98e2:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    98e4:	ldr	r4, [pc, #372]	; (9a5c <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    98e6:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    98ea:	str	r2, [sp, #8]
    98ec:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    98ee:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    98f0:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    98f2:	ldr	r1, [pc, #364]	; (9a60 <Adafruit_NeoPixel::show()+0x1cc>)
    98f4:	ldr	r0, [r4, #0]
    98f6:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    98f8:	cmp	r2, #0
    98fa:	beq.n	998c <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    98fc:	ldr	r5, [pc, #356]	; (9a64 <Adafruit_NeoPixel::show()+0x1d0>)
    98fe:	lsrs	r3, r3, #8
    while(p < end) {
    9900:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9902:	umull	r2, r3, r5, r3
    9906:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    990a:	bcs.n	9966 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    990c:	ldr	r7, [pc, #344]	; (9a68 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    990e:	ldr	r6, [pc, #348]	; (9a6c <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9910:	ldr	r3, [sp, #4]
    9912:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    9916:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    991a:	ldrb.w	sl, [r3], #1
    991e:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    9920:	ldr	r2, [r4, #0]
    9922:	ldr	r3, [r1, #0]
    9924:	subs	r2, r2, r0
    9926:	lsrs	r3, r3, #8
    9928:	umull	fp, r3, r5, r3
    992c:	cmp.w	r2, r3, lsr #4
    9930:	bcc.n	9920 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    9932:	ldr	r3, [pc, #296]	; (9a5c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    9934:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    9938:	ldr	r0, [r3, #0]
        *set = msk;
    993a:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    993e:	beq.n	9a3e <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    9940:	ldr	r3, [r4, #0]
    9942:	ldr	r2, [r1, #0]
    9944:	subs	r3, r3, r0
    9946:	umull	fp, r2, r7, r2
    994a:	cmp.w	r3, r2, lsr #19
    994e:	bcc.n	9940 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9950:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    9954:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9958:	mov.w	lr, lr, lsr #1
    995c:	bne.n	9920 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    995e:	ldr	r3, [sp, #8]
    9960:	ldr	r2, [sp, #4]
    9962:	cmp	r3, r2
    9964:	bne.n	9910 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    9966:	ldr	r5, [pc, #244]	; (9a5c <Adafruit_NeoPixel::show()+0x1c8>)
    9968:	ldr	r4, [pc, #248]	; (9a64 <Adafruit_NeoPixel::show()+0x1d0>)
    996a:	ldr	r2, [r5, #0]
    996c:	ldr	r3, [r1, #0]
    996e:	subs	r2, r2, r0
    9970:	lsrs	r3, r3, #8
    9972:	umull	r6, r3, r4, r3
    9976:	cmp.w	r2, r3, lsr #4
    997a:	bcc.n	996a <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    997c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    997e:	bl	ad9c <micros>
    9982:	ldr	r3, [sp, #12]
    9984:	str	r0, [r3, #16]
}
    9986:	add	sp, #20
    9988:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    998c:	ldr	r6, [pc, #212]	; (9a64 <Adafruit_NeoPixel::show()+0x1d0>)
    998e:	lsrs	r3, r3, #7
    9990:	umull	r2, r3, r6, r3
    while(p < end) {
    9994:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    9996:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    999a:	ldr	r3, [sp, #4]
    999c:	cmp	r3, r2
    999e:	bcs.n	9a0a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    99a0:	ldr.w	lr, [pc, #204]	; 9a70 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    99a4:	ldr	r7, [pc, #196]	; (9a6c <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    99a6:	ldr	r3, [sp, #4]
    99a8:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    99ac:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    99b0:	ldrb.w	fp, [r3], #1
    99b4:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    99b6:	ldr	r2, [r4, #0]
    99b8:	ldr	r3, [r1, #0]
    99ba:	subs	r2, r2, r0
    99bc:	lsrs	r3, r3, #7
    99be:	umull	r5, r3, r6, r3
    99c2:	cmp.w	r2, r3, lsr #4
    99c6:	bcc.n	99b6 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    99c8:	ldr	r3, [pc, #144]	; (9a5c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    99ca:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    99ce:	ldr	r0, [r3, #0]
        *set = msk;
    99d0:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    99d4:	beq.n	9a2c <Adafruit_NeoPixel::show()+0x198>
    99d6:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    99da:	ldr	r2, [r4, #0]
    99dc:	ldr	r5, [r1, #0]
    99de:	subs	r2, r2, r0
    99e0:	umull	ip, r3, lr, r5
    99e4:	subs	r5, r5, r3
    99e6:	add.w	r3, r3, r5, lsr #1
    99ea:	cmp.w	r2, r3, lsr #19
    99ee:	bcc.n	99da <Adafruit_NeoPixel::show()+0x146>
    99f0:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    99f4:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    99f8:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    99fc:	mov.w	r9, r9, lsr #1
    9a00:	bne.n	99b6 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    9a02:	ldr	r3, [sp, #8]
    9a04:	ldr	r2, [sp, #4]
    9a06:	cmp	r3, r2
    9a08:	bne.n	99a6 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    9a0a:	ldr	r5, [pc, #80]	; (9a5c <Adafruit_NeoPixel::show()+0x1c8>)
    9a0c:	ldr	r4, [pc, #84]	; (9a64 <Adafruit_NeoPixel::show()+0x1d0>)
    9a0e:	ldr	r2, [r5, #0]
    9a10:	ldr	r3, [r1, #0]
    9a12:	subs	r2, r2, r0
    9a14:	lsrs	r3, r3, #7
    9a16:	umull	r6, r3, r4, r3
    9a1a:	cmp.w	r2, r3, lsr #4
    9a1e:	bcc.n	9a0e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    9a20:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    9a22:	bl	ad9c <micros>
    9a26:	ldr	r3, [sp, #12]
    9a28:	str	r0, [r3, #16]
    9a2a:	b.n	9986 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    9a2c:	ldr	r3, [r4, #0]
    9a2e:	ldr	r2, [r1, #0]
    9a30:	subs	r3, r3, r0
    9a32:	umull	r5, r2, r7, r2
    9a36:	cmp.w	r3, r2, lsr #19
    9a3a:	bcc.n	9a2c <Adafruit_NeoPixel::show()+0x198>
    9a3c:	b.n	99f4 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    9a3e:	ldr	r3, [r4, #0]
    9a40:	ldr	r2, [r1, #0]
    9a42:	subs	r3, r3, r0
    9a44:	umull	fp, r2, r6, r2
    9a48:	cmp.w	r3, r2, lsr #20
    9a4c:	bcc.n	9a3e <Adafruit_NeoPixel::show()+0x1aa>
    9a4e:	b.n	9950 <Adafruit_NeoPixel::show()+0xbc>
    9a50:	.word	0xe000edfc
    9a54:	.word	0x200004a8
    9a58:	.word	0xe0001000
    9a5c:	.word	0xe0001004
    9a60:	.word	0x20000c54
    9a64:	.word	0x014f8b59
    9a68:	.word	0x6b5fca6b
    9a6c:	.word	0x431bde83
    9a70:	.word	0x421f67b3

00009a74 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    9a74:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    9a76:	ldrb	r3, [r0, #1]
    9a78:	cbz	r3, 9a96 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    9a7a:	mov	r4, r0
    9a7c:	ldrsb.w	r0, [r0, #6]
    9a80:	mov	r5, r1
    9a82:	cmp	r0, #0
    9a84:	blt.n	9a9a <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    9a86:	uxtb	r0, r0
    9a88:	movs	r1, #0
    9a8a:	bl	ae7c <pinMode>
    9a8e:	ldrb	r3, [r4, #1]
    pin = p;
    9a90:	strb	r5, [r4, #6]
    if(begun) {
    9a92:	cbnz	r3, 9a9c <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    9a94:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    9a96:	strb	r1, [r0, #6]
    9a98:	pop	{r3, r4, r5, pc}
    9a9a:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    9a9c:	mov	r0, r5
    9a9e:	movs	r1, #1
    9aa0:	bl	ae7c <pinMode>
      digitalWrite(p, LOW);
    9aa4:	mov	r0, r5
    9aa6:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    9aa8:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    9aac:	b.w	ae70 <digitalWrite>

00009ab0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9ab0:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9ab2:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9ab4:	mov	r4, r0
    9ab6:	mov	r7, r1
    9ab8:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    9aba:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9abc:	strb	r5, [r0, #1]
    9abe:	strb	r5, [r0, #7]
    9ac0:	str	r5, [r0, #8]
    9ac2:	str	r5, [r0, #16]
{
  updateType(t);
    9ac4:	bl	9844 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    9ac8:	mov	r1, r7
    9aca:	mov	r0, r4
    9acc:	bl	980c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    9ad0:	mov	r0, r4
    9ad2:	mov	r1, r6
    9ad4:	bl	9a74 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    9ad8:	mov	r0, r4
    9ada:	pop	{r3, r4, r5, r6, r7, pc}

00009adc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9adc:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    9ade:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9ae0:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    9ae4:	cmp	r4, r1
    9ae6:	bls.n	9b1c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    9ae8:	ldrb	r4, [r0, #7]
    9aea:	cbz	r4, 9afe <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    9aec:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    9af0:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    9af4:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9af8:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    9afa:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    9afc:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    9afe:	ldrb	r5, [r0, #15]
    9b00:	ldrb	r4, [r0, #12]
    9b02:	cmp	r4, r5
    9b04:	beq.n	9b20 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9b06:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9b08:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9b0a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9b0e:	strb	r7, [r1, r5]
    9b10:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    9b12:	strb	r2, [r1, r5]
    p[gOffset] = g;
    9b14:	ldrb	r2, [r0, #13]
    9b16:	strb	r3, [r1, r2]
    p[bOffset] = b;
    9b18:	ldrb	r3, [r0, #14]
    9b1a:	strb	r6, [r1, r3]
  }
}
    9b1c:	pop	{r4, r5, r6, r7}
    9b1e:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    9b20:	add.w	r1, r1, r1, lsl #1
    9b24:	ldr	r4, [r0, #8]
    9b26:	add	r1, r4
    9b28:	b.n	9b12 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    9b2a:	nop

00009b2c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    9b2c:	ldrh	r3, [r0, #2]
    9b2e:	cmp	r3, r1
    9b30:	bls.n	9b36 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    9b32:	b.w	9760 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    9b36:	bx	lr

00009b38 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9b38:	ldrh	r3, [r0, #2]
    9b3a:	cmp	r3, r1
    9b3c:	bls.n	9b6e <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    9b3e:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    9b40:	ldrb	r2, [r0, #15]
    9b42:	ldrb	r3, [r0, #12]
    9b44:	cmp	r2, r3
    9b46:	beq.n	9b72 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9b48:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    9b4a:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9b4c:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b50:	ldrb	r3, [r1, r3]
    9b52:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    9b54:	cbnz	r4, 9ba4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    9b56:	lsls	r3, r3, #16
    9b58:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9b5a:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    9b5c:	orr.w	r0, r3, r5, lsl #24
    9b60:	ldrb	r3, [r1, r4]
    9b62:	ldrb	r2, [r1, r2]
    9b64:	orrs	r3, r0
    9b66:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    9b6a:	pop	{r4, r5}
    9b6c:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9b6e:	movs	r0, #0
    9b70:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9b72:	add.w	r1, r1, r1, lsl #1
    9b76:	ldr	r3, [r0, #8]
    if(brightness) {
    9b78:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9b7a:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b7c:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    9b7e:	cbz	r4, 9bd4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9b80:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b82:	lsls	r2, r2, #8
    9b84:	ldrb	r3, [r0, #14]
    9b86:	ldrb	r0, [r1, r5]
    9b88:	ldrb	r3, [r1, r3]
    9b8a:	lsls	r0, r0, #8
    9b8c:	lsls	r3, r3, #8
    9b8e:	udiv	r2, r2, r4
    9b92:	udiv	r0, r0, r4
    9b96:	lsls	r2, r2, #16
    9b98:	udiv	r3, r3, r4
    9b9c:	orr.w	r0, r2, r0, lsl #8
    9ba0:	orrs	r0, r3
    9ba2:	b.n	9b6a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9ba4:	lsls	r3, r3, #8
    9ba6:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9ba8:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9baa:	lsls	r5, r5, #8
    9bac:	ldrb	r2, [r1, r2]
    9bae:	ldrb	r0, [r1, r0]
    9bb0:	lsls	r2, r2, #8
    9bb2:	lsls	r0, r0, #8
    9bb4:	udiv	r1, r3, r4
    9bb8:	udiv	r5, r5, r4
    9bbc:	udiv	r2, r2, r4
    9bc0:	lsls	r3, r1, #16
    9bc2:	udiv	r0, r0, r4
    9bc6:	orr.w	r3, r3, r5, lsl #24
    9bca:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9bcc:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9bce:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9bd2:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9bd4:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    9bd6:	lsls	r2, r2, #16
    9bd8:	ldrb	r3, [r0, #14]
    9bda:	ldrb	r0, [r1, r4]
    9bdc:	ldrb	r3, [r1, r3]
    9bde:	orr.w	r0, r2, r0, lsl #8
    9be2:	orrs	r0, r3
    9be4:	b.n	9b6a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    9be6:	nop

00009be8 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    9be8:	ldrh	r0, [r0, #2]
    9bea:	bx	lr

00009bec <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    9bec:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9bee:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    9bf0:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9bf2:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    9bf4:	cmp	r6, r4
    9bf6:	beq.n	9c20 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    9bf8:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    9bfa:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    9bfc:	ands.w	r4, r4, #255	; 0xff
    9c00:	bne.n	9c24 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9c02:	ldrh	r3, [r0, #4]
    9c04:	cbz	r3, 9c1e <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    9c06:	mov	r2, r5
      c      = *ptr;
    9c08:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    9c0a:	mul.w	r3, r4, r3
    9c0e:	asrs	r3, r3, #8
    9c10:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9c14:	subs	r3, r2, r5
    9c16:	ldrh	r1, [r0, #4]
    9c18:	uxth	r3, r3
    9c1a:	cmp	r1, r3
    9c1c:	bhi.n	9c08 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    9c1e:	strb	r6, [r0, #7]
  }
}
    9c20:	pop	{r4, r5, r6}
    9c22:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9c24:	cmp	r1, #255	; 0xff
    9c26:	beq.n	9c34 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    9c28:	lsls	r3, r6, #8
    9c2a:	subs	r3, #1
    9c2c:	sdiv	r4, r3, r4
    9c30:	uxth	r4, r4
    9c32:	b.n	9c02 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9c34:	movw	r3, #65535	; 0xffff
    9c38:	sdiv	r4, r3, r4
    9c3c:	b.n	9c02 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    9c3e:	nop

00009c40 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    9c40:	ldrh	r2, [r0, #4]
    9c42:	movs	r1, #0
    9c44:	ldr	r0, [r0, #8]
    9c46:	b.w	bf9c <memset>
    9c4a:	nop

00009c4c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9c4c:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9c4e:	movs	r1, #0
    9c50:	mov	r3, r0
    9c52:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    9c56:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9c58:	movs	r4, #0
    9c5a:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9c5c:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    9c60:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9c62:	bfc	r2, #0, #4
    9c66:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    9c68:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9c6c:	cmp	r3, r5
    9c6e:	bne.n	9c56 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    9c70:	mov	r2, r4
    9c72:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    9c74:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    9c76:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9c7a:	add.w	r3, r0, r2, lsl #4
    9c7e:	adds	r3, #8
    9c80:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c82:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9c86:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c8a:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9c8e:	beq.n	9c98 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c90:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    9c92:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    9c94:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    9c96:	str	r6, [r1, #8]
    9c98:	adds	r2, #1
    9c9a:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    9c9c:	cmp	r2, #12
    9c9e:	bne.n	9c7a <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    9ca0:	pop	{r4, r5, r6}
    9ca2:	bx	lr

00009ca4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    9ca4:	ldr	r0, [pc, #4]	; (9cac <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    9ca6:	b.w	9c4c <TimeAlarmsClass::TimeAlarmsClass()>
    9caa:	nop
    9cac:	.word	0x2000b790

00009cb0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9cb0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9cb2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9cb6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9cba:	bne.n	9d98 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9cbc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9cbe:	bcc.n	9d44 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9cc0:	ldr.w	r3, [r1], #4
    9cc4:	str.w	r3, [r0], #4
    9cc8:	ldr.w	r3, [r1], #4
    9ccc:	str.w	r3, [r0], #4
    9cd0:	ldr.w	r3, [r1], #4
    9cd4:	str.w	r3, [r0], #4
    9cd8:	ldr.w	r3, [r1], #4
    9cdc:	str.w	r3, [r0], #4
    9ce0:	ldr.w	r3, [r1], #4
    9ce4:	str.w	r3, [r0], #4
    9ce8:	ldr.w	r3, [r1], #4
    9cec:	str.w	r3, [r0], #4
    9cf0:	ldr.w	r3, [r1], #4
    9cf4:	str.w	r3, [r0], #4
    9cf8:	ldr.w	r3, [r1], #4
    9cfc:	str.w	r3, [r0], #4
    9d00:	ldr.w	r3, [r1], #4
    9d04:	str.w	r3, [r0], #4
    9d08:	ldr.w	r3, [r1], #4
    9d0c:	str.w	r3, [r0], #4
    9d10:	ldr.w	r3, [r1], #4
    9d14:	str.w	r3, [r0], #4
    9d18:	ldr.w	r3, [r1], #4
    9d1c:	str.w	r3, [r0], #4
    9d20:	ldr.w	r3, [r1], #4
    9d24:	str.w	r3, [r0], #4
    9d28:	ldr.w	r3, [r1], #4
    9d2c:	str.w	r3, [r0], #4
    9d30:	ldr.w	r3, [r1], #4
    9d34:	str.w	r3, [r0], #4
    9d38:	ldr.w	r3, [r1], #4
    9d3c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9d40:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9d42:	bcs.n	9cc0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9d44:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9d46:	bcc.n	9d6c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9d48:	ldr.w	r3, [r1], #4
    9d4c:	str.w	r3, [r0], #4
    9d50:	ldr.w	r3, [r1], #4
    9d54:	str.w	r3, [r0], #4
    9d58:	ldr.w	r3, [r1], #4
    9d5c:	str.w	r3, [r0], #4
    9d60:	ldr.w	r3, [r1], #4
    9d64:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9d68:	subs	r2, #16
	bhs	.Lmid_block_loop
    9d6a:	bcs.n	9d48 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9d6c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9d6e:	bcc.n	9d7c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9d70:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9d74:	str.w	r3, [r0], #4
	subs	r2, #4
    9d78:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9d7a:	bcs.n	9d70 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9d7c:	adds	r2, #4
	beq	.Ldone
    9d7e:	beq.n	9d92 <memcpy+0xe2>

	lsls	r2, r2, #31
    9d80:	lsls	r2, r2, #31
	itt ne
    9d82:	itt	ne
	ldrbne  r3, [r1], #1
    9d84:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d88:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9d8c:	bcc.n	9d92 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9d8e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9d90:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d92:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d94:	bx	lr
    9d96:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9d98:	cmp	r2, #8
	blo	.Lbyte_copy
    9d9a:	bcc.n	9dc4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9d9c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9d9e:	beq.n	9cbc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9da0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9da4:	beq.n	9cbc <memcpy+0xc>

	rsb	r3, #4
    9da6:	rsb	r3, r3, #4
	subs	r2, r3
    9daa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9dac:	lsls	r3, r3, #31
	itt ne
    9dae:	itt	ne
	ldrbne  r3, [r1], #1
    9db0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9db4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9db8:	bcc.n	9cbc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9dba:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9dbe:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9dc2:	b.n	9cbc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9dc4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9dc6:	bcc.n	9d7c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9dc8:	subs	r2, #1
	ldrb    r3, [r1], #1
    9dca:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9dce:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9dd2:	bcs.n	9dc8 <memcpy+0x118>

	ldrb	r3, [r1]
    9dd4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9dd6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9dd8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9dda:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9ddc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9dde:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9de0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9de2:	bx	lr

00009de4 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    9de4:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    9de6:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9de8:	ubfx	r3, r3, #16, #15
    9dec:	ldr	r1, [pc, #20]	; (9e04 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    9dee:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9df0:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    9df4:	ldr	r4, [pc, #16]	; (9e08 <rx_event+0x24>)
    9df6:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9df8:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    9dfc:	strh.w	r5, [r4, r2, lsl #1]
}
    9e00:	pop	{r4, r5}
    9e02:	bx	lr
    9e04:	.word	0x2000c020
    9e08:	.word	0x2000c018

00009e0c <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9e0c:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    9e0e:	ldr	r3, [pc, #84]	; (9e64 <usb_serial_flush_callback+0x58>)
    9e10:	ldrb	r3, [r3, #0]
    9e12:	cbnz	r3, 9e24 <usb_serial_flush_callback+0x18>
    9e14:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    9e18:	ldr	r3, [pc, #76]	; (9e68 <usb_serial_flush_callback+0x5c>)
    9e1a:	ldrb	r3, [r3, #0]
    9e1c:	cbz	r3, 9e24 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    9e1e:	ldr	r5, [pc, #76]	; (9e6c <usb_serial_flush_callback+0x60>)
    9e20:	ldrh	r2, [r5, #0]
    9e22:	cbnz	r2, 9e26 <usb_serial_flush_callback+0x1a>
    9e24:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e26:	ldr	r7, [pc, #72]	; (9e70 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9e28:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e2a:	ldr	r6, [pc, #72]	; (9e74 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9e2c:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e30:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9e32:	ldr	r0, [pc, #68]	; (9e78 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e34:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9e38:	add.w	r1, r0, r1, lsl #8
    9e3c:	mov	r0, r6
    9e3e:	bl	ac0c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9e42:	mov	r1, r6
    9e44:	movs	r0, #4
    9e46:	bl	ac3c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9e4a:	ldrb	r3, [r7, #0]
    9e4c:	adds	r3, #1
    9e4e:	uxtb	r3, r3
    9e50:	cmp	r3, #6
    9e52:	it	ls
    9e54:	strbls	r3, [r7, #0]
	tx_available = 0;
    9e56:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    9e5a:	it	hi
    9e5c:	strbhi	r4, [r7, #0]
	tx_available = 0;
    9e5e:	strh	r3, [r5, #0]
    9e60:	pop	{r3, r4, r5, r6, r7, pc}
    9e62:	nop
    9e64:	.word	0x2000bf54
    9e68:	.word	0x2000c1d0
    9e6c:	.word	0x2000c0a0
    9e70:	.word	0x2000bf55
    9e74:	.word	0x2000c0c0
    9e78:	.word	0x2000b854

00009e7c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9e7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e80:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9e82:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9e84:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9e86:	cmp	r1, #0
    9e88:	beq.w	9fb4 <usb_serial_write.part.1+0x138>
    9e8c:	movs	r3, #0
    9e8e:	ldr.w	r8, [pc, #320]	; 9fd0 <usb_serial_write.part.1+0x154>
    9e92:	ldr.w	r9, [pc, #304]	; 9fc4 <usb_serial_write.part.1+0x148>
    9e96:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9e98:	ldr	r6, [pc, #284]	; (9fb8 <usb_serial_write.part.1+0x13c>)
    9e9a:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9e9e:	ldr.w	sl, [pc, #308]	; 9fd4 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9ea2:	ldr	r2, [pc, #280]	; (9fbc <usb_serial_write.part.1+0x140>)
    9ea4:	ldrb	r4, [r2, #0]
    9ea6:	ldr	r2, [pc, #280]	; (9fc0 <usb_serial_write.part.1+0x144>)
    9ea8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9eac:	cmp	r3, #0
    9eae:	bne.n	9f6c <usb_serial_write.part.1+0xf0>
    9eb0:	mov	r5, r3
    9eb2:	mov	r4, r3
    9eb4:	b.n	9ee0 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9eb6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9eba:	cbnz	r4, 9ebe <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    9ebc:	ldr	r5, [r6, #0]
    9ebe:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9ec0:	cmp	r3, #0
    9ec2:	bne.n	9f60 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9ec4:	ldr	r3, [r6, #0]
    9ec6:	subs	r3, r3, r5
    9ec8:	cmp	r3, #120	; 0x78
    9eca:	bhi.n	9fa8 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9ecc:	ldrb.w	r3, [sl]
    9ed0:	cmp	r3, #0
    9ed2:	beq.n	9f60 <usb_serial_write.part.1+0xe4>
			yield();
    9ed4:	bl	af54 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9ed8:	ldrh.w	r3, [r8]
    9edc:	cmp	r3, #0
    9ede:	bne.n	9f68 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9ee0:	mov	r0, r7
    9ee2:	bl	ac88 <usb_transfer_status>
			if (!(status & 0x80)) {
    9ee6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9eea:	ldr	r2, [pc, #216]	; (9fc4 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    9eec:	bne.n	9eb6 <usb_serial_write.part.1+0x3a>
    9eee:	ldr	r2, [pc, #204]	; (9fbc <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9ef0:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    9ef4:	strb.w	r0, [r9]
    9ef8:	ldrb	r4, [r2, #0]
    9efa:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9efc:	ldr	r1, [pc, #200]	; (9fc8 <usb_serial_write.part.1+0x14c>)
    9efe:	lsls	r4, r4, #8
		if (size >= tx_available) {
    9f00:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9f02:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f06:	add	r0, r4
    9f08:	add	r0, r1
		if (size >= tx_available) {
    9f0a:	bcc.n	9f7e <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    9f0c:	ldr	r1, [sp, #8]
    9f0e:	bl	9cb0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    9f12:	ldr	r3, [pc, #180]	; (9fc8 <usb_serial_write.part.1+0x14c>)
    9f14:	mov.w	r2, #256	; 0x100
    9f18:	mov	r0, r7
    9f1a:	adds	r1, r3, r4
    9f1c:	movs	r3, #0
    9f1e:	bl	ac0c <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9f22:	mov	r1, r7
    9f24:	movs	r0, #4
    9f26:	bl	ac3c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9f2a:	ldr	r3, [pc, #144]	; (9fbc <usb_serial_write.part.1+0x140>)
    9f2c:	ldr	r2, [pc, #140]	; (9fbc <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9f2e:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9f30:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9f32:	ldr	r0, [pc, #152]	; (9fcc <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9f34:	adds	r3, #1
    9f36:	uxtb	r3, r3
    9f38:	cmp	r3, #6
    9f3a:	it	hi
    9f3c:	movhi	r3, #0
    9f3e:	strb	r3, [r2, #0]
			size -= tx_available;
    9f40:	ldrh.w	r2, [r8]
			sent += tx_available;
    9f44:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9f46:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9f4a:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    9f4e:	add	r3, r2
    9f50:	str	r3, [sp, #4]
			data += tx_available;
    9f52:	ldr	r3, [sp, #8]
    9f54:	add	r3, r2
    9f56:	str	r3, [sp, #8]
    9f58:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9f5a:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9f5e:	bne.n	9ea2 <usb_serial_write.part.1+0x26>
    9f60:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9f62:	add	sp, #20
    9f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f68:	ldr	r2, [pc, #80]	; (9fbc <usb_serial_write.part.1+0x140>)
    9f6a:	ldrb	r4, [r2, #0]
    9f6c:	mov	r2, r3
    9f6e:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f72:	lsls	r4, r4, #8
    9f74:	ldr	r1, [pc, #80]	; (9fc8 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    9f76:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f78:	add	r0, r4
    9f7a:	add	r0, r1
		if (size >= tx_available) {
    9f7c:	bcs.n	9f0c <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9f7e:	ldr	r1, [sp, #8]
    9f80:	mov	r2, fp
    9f82:	str	r3, [sp, #12]
    9f84:	bl	9cb0 <memcpy>
			tx_available -= size;
    9f88:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f8a:	mov.w	r1, #3221225472	; 0xc0000000
    9f8e:	ldr	r2, [pc, #60]	; (9fcc <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9f90:	rsb	r3, fp, r3
    9f94:	strh.w	r3, [r8]
    9f98:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f9a:	str.w	r1, [r2, #132]	; 0x84
    9f9e:	add	r3, fp
    9fa0:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9fa2:	add	sp, #20
    9fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9fa8:	movs	r3, #1
				return sent;
    9faa:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9fac:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9fae:	add	sp, #20
    9fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9fb4:	mov	r0, r1
    9fb6:	b.n	9f62 <usb_serial_write.part.1+0xe6>
    9fb8:	.word	0x2000c1d8
    9fbc:	.word	0x2000bf55
    9fc0:	.word	0x2000c0c0
    9fc4:	.word	0x2000c1a0
    9fc8:	.word	0x2000b854
    9fcc:	.word	0x402e0000
    9fd0:	.word	0x2000c0a0
    9fd4:	.word	0x2000c1d0

00009fd8 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    9fd8:	bx	lr
    9fda:	nop

00009fdc <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9fdc:	movs	r1, #0
    9fde:	movs	r2, #224	; 0xe0
    9fe0:	ldr	r0, [pc, #128]	; (a064 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    9fe2:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9fe4:	mov	r4, r1
    9fe6:	ldr	r6, [pc, #128]	; (a068 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9fe8:	ldr	r5, [pc, #128]	; (a06c <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9fea:	bl	bf9c <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9fee:	ldr	r7, [pc, #128]	; (a070 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ff0:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9ff2:	ldr	r3, [pc, #128]	; (a074 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ff4:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9ff6:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ff8:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9ffa:	ldr	r6, [pc, #124]	; (a078 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9ffc:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ffe:	bl	bf9c <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a002:	mov	r3, r4
    a004:	mov	r2, r4
    a006:	movs	r1, #16
    a008:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a00a:	str	r4, [r7, #0]
    a00c:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    a00e:	str	r4, [r6, #0]
    a010:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a012:	bl	aba4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    a016:	mov	r2, r4
    a018:	ldr	r3, [pc, #96]	; (a07c <usb_serial_configure+0xa0>)
    a01a:	movs	r1, #64	; 0x40
    a01c:	movs	r0, #3
    a01e:	bl	ab40 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    a022:	mov	r3, r4
    a024:	mov	r2, r4
    a026:	movs	r1, #64	; 0x40
    a028:	movs	r0, #4
    a02a:	bl	aba4 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a02e:	mov	r3, r4
    a030:	movs	r2, #64	; 0x40
    a032:	mov	r0, r5
    a034:	ldr	r1, [pc, #72]	; (a080 <usb_serial_configure+0xa4>)
    a036:	bl	ac0c <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a03a:	mov	r1, r5
    a03c:	movs	r0, #3
    a03e:	bl	ac64 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    a042:	ldr	r3, [pc, #64]	; (a084 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    a044:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a046:	ldr	r1, [pc, #64]	; (a088 <usb_serial_configure+0xac>)
    a048:	ldr	r0, [pc, #64]	; (a08c <usb_serial_configure+0xb0>)
    a04a:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    a04c:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a050:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a054:	ldr.w	r2, [r3, #328]	; 0x148
    a058:	orr.w	r2, r2, #16777216	; 0x1000000
    a05c:	str.w	r2, [r3, #328]	; 0x148
    a060:	pop	{r3, r4, r5, r6, r7, pc}
    a062:	nop
    a064:	.word	0x2000c0c0
    a068:	.word	0x2000bf55
    a06c:	.word	0x2000c040
    a070:	.word	0x2000c020
    a074:	.word	0x2000c0a0
    a078:	.word	0x2000c018
    a07c:	.word	0x00009de5
    a080:	.word	0x2000bf58
    a084:	.word	0x402e0000
    a088:	.word	0x2000c1a4
    a08c:	.word	0x00009e0d

0000a090 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a090:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a092:	ldr	r5, [pc, #56]	; (a0cc <usb_serial_getchar+0x3c>)
    a094:	ldr	r3, [pc, #56]	; (a0d0 <usb_serial_getchar+0x40>)
    a096:	ldrh	r2, [r5, #0]
    a098:	ldrh	r0, [r3, #0]
    a09a:	cmp	r2, r0
    a09c:	bcs.n	a0c6 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    a09e:	adds	r3, r2, #1
    a0a0:	ldr	r1, [pc, #48]	; (a0d4 <usb_serial_getchar+0x44>)
    a0a2:	uxth	r3, r3
    a0a4:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    a0a6:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    a0a8:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    a0aa:	bls.n	a0b0 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    a0ac:	mov	r0, r4
	}
	return -1;
}
    a0ae:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a0b0:	movs	r3, #0
    a0b2:	movs	r2, #64	; 0x40
    a0b4:	ldr	r0, [pc, #32]	; (a0d8 <usb_serial_getchar+0x48>)
    a0b6:	bl	ac0c <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a0ba:	ldr	r1, [pc, #28]	; (a0d8 <usb_serial_getchar+0x48>)
    a0bc:	movs	r0, #3
    a0be:	bl	ac64 <usb_receive>
		}
		return c;
    a0c2:	mov	r0, r4
    a0c4:	pop	{r3, r4, r5, pc}
	}
	return -1;
    a0c6:	mov.w	r0, #4294967295
    a0ca:	pop	{r3, r4, r5, pc}
    a0cc:	.word	0x2000c018
    a0d0:	.word	0x2000c020
    a0d4:	.word	0x2000bf58
    a0d8:	.word	0x2000c040

0000a0dc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    a0dc:	ldr	r3, [pc, #20]	; (a0f4 <usb_serial_peekchar+0x18>)
    a0de:	ldr	r2, [pc, #24]	; (a0f8 <usb_serial_peekchar+0x1c>)
    a0e0:	ldrh	r3, [r3, #0]
    a0e2:	ldrh	r2, [r2, #0]
    a0e4:	cmp	r2, r3
    a0e6:	bls.n	a0ee <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    a0e8:	ldr	r2, [pc, #16]	; (a0fc <usb_serial_peekchar+0x20>)
    a0ea:	ldrb	r0, [r2, r3]
    a0ec:	bx	lr
	}

	return -1;
    a0ee:	mov.w	r0, #4294967295
}
    a0f2:	bx	lr
    a0f4:	.word	0x2000c018
    a0f8:	.word	0x2000c020
    a0fc:	.word	0x2000bf58

0000a100 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    a100:	ldr	r2, [pc, #8]	; (a10c <usb_serial_available+0xc>)
    a102:	ldr	r3, [pc, #12]	; (a110 <usb_serial_available+0x10>)
    a104:	ldrh	r0, [r2, #0]
    a106:	ldrh	r3, [r3, #0]
}
    a108:	subs	r0, r0, r3
    a10a:	bx	lr
    a10c:	.word	0x2000c020
    a110:	.word	0x2000c018

0000a114 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    a114:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a116:	ldr	r3, [pc, #40]	; (a140 <usb_serial_flush_input+0x2c>)
    a118:	ldr	r4, [pc, #40]	; (a144 <usb_serial_flush_input+0x30>)
    a11a:	ldrh	r5, [r3, #0]
    a11c:	ldrh	r3, [r4, #0]
    a11e:	cmp	r3, r5
    a120:	bcc.n	a124 <usb_serial_flush_input+0x10>
    a122:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a124:	movs	r3, #0
    a126:	ldr	r1, [pc, #32]	; (a148 <usb_serial_flush_input+0x34>)
    a128:	ldr	r0, [pc, #32]	; (a14c <usb_serial_flush_input+0x38>)
    a12a:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    a12c:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a12e:	bl	ac0c <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a132:	ldr	r1, [pc, #24]	; (a14c <usb_serial_flush_input+0x38>)
    a134:	movs	r0, #3
	}
}
    a136:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a13a:	b.w	ac64 <usb_receive>
    a13e:	nop
    a140:	.word	0x2000c020
    a144:	.word	0x2000c018
    a148:	.word	0x2000bf58
    a14c:	.word	0x2000c040

0000a150 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a150:	ldr	r3, [pc, #36]	; (a178 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a152:	push	{lr}
    a154:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a156:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a158:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a15c:	cbnz	r3, a168 <usb_serial_putchar+0x18>
    a15e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a162:	add	sp, #12
    a164:	ldr.w	pc, [sp], #4
    a168:	movs	r1, #1
    a16a:	add.w	r0, sp, #7
    a16e:	bl	9e7c <usb_serial_write.part.1>
    a172:	add	sp, #12
    a174:	ldr.w	pc, [sp], #4
    a178:	.word	0x2000c1d0

0000a17c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a17c:	ldr	r3, [pc, #16]	; (a190 <usb_serial_write+0x14>)
    a17e:	ldrb	r3, [r3, #0]
    a180:	and.w	r2, r3, #255	; 0xff
    a184:	cbz	r3, a18a <usb_serial_write+0xe>
    a186:	b.w	9e7c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a18a:	mov	r0, r2
    a18c:	bx	lr
    a18e:	nop
    a190:	.word	0x2000c1d0

0000a194 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a194:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a198:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a19a:	ldr.w	r8, [pc, #64]	; a1dc <usb_serial_write_buffer_free+0x48>
    a19e:	movs	r3, #1
    a1a0:	ldr	r5, [pc, #48]	; (a1d4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a1a2:	mov	r7, r4
    a1a4:	ldr	r6, [pc, #48]	; (a1d8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a1a6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a1aa:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a1ac:	mov	r0, r5
    a1ae:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a1b0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a1b2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a1b6:	beq.n	a1c4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a1b8:	bl	ac88 <usb_transfer_status>
    a1bc:	lsls	r3, r0, #24
    a1be:	it	pl
    a1c0:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a1c4:	cmp	r4, #7
    a1c6:	bne.n	a1aa <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a1c8:	movs	r3, #0
	return sum;
}
    a1ca:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a1cc:	strb.w	r3, [r8]
	return sum;
}
    a1d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1d4:	.word	0x2000c0c0
    a1d8:	.word	0x2000bf55
    a1dc:	.word	0x2000bf54

0000a1e0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a1e0:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    a1e2:	ldr	r3, [pc, #80]	; (a234 <usb_serial_flush_output+0x54>)
    a1e4:	ldrb	r3, [r3, #0]
    a1e6:	cbz	r3, a1ee <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    a1e8:	ldr	r4, [pc, #76]	; (a238 <usb_serial_flush_output+0x58>)
    a1ea:	ldrh	r2, [r4, #0]
    a1ec:	cbnz	r2, a1f0 <usb_serial_flush_output+0x10>
    a1ee:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a1f0:	ldr	r6, [pc, #72]	; (a23c <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a1f2:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a1f6:	ldr	r5, [pc, #72]	; (a240 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a1f8:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a1fa:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a1fc:	rsb	r2, r2, #256	; 0x100
    a200:	ldr	r0, [pc, #64]	; (a244 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a202:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a206:	ldr	r7, [pc, #64]	; (a248 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a208:	add.w	r1, r0, r1, lsl #8
    a20c:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a20e:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a212:	bl	ac0c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a216:	mov	r1, r5
    a218:	movs	r0, #4
    a21a:	bl	ac3c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a21e:	ldrb	r3, [r6, #0]
    a220:	adds	r3, #1
    a222:	uxtb	r3, r3
    a224:	cmp	r3, #6
    a226:	it	hi
    a228:	movhi	r3, #0
    a22a:	strb	r3, [r6, #0]
	tx_available = 0;
    a22c:	movs	r3, #0
    a22e:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    a230:	strb	r3, [r7, #0]
    a232:	pop	{r3, r4, r5, r6, r7, pc}
    a234:	.word	0x2000c1d0
    a238:	.word	0x2000c0a0
    a23c:	.word	0x2000bf55
    a240:	.word	0x2000c0c0
    a244:	.word	0x2000b854
    a248:	.word	0x2000bf54

0000a24c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a24c:	ldr	r2, [pc, #556]	; (a47c <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a24e:	ldr	r3, [pc, #560]	; (a480 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a250:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a252:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a256:	ldr	r5, [pc, #556]	; (a484 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a258:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a25a:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a25c:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a25e:	bls.n	a29c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a260:	ldr	r3, [pc, #548]	; (a488 <set_arm_clock+0x23c>)
    a262:	cmp	r0, r3
    a264:	bls.w	a468 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a268:	ldr	r3, [pc, #544]	; (a48c <set_arm_clock+0x240>)
    a26a:	movw	r6, #1300	; 0x514
    a26e:	ldr.w	lr, [pc, #600]	; a4c8 <set_arm_clock+0x27c>
    a272:	add	r3, r0
    a274:	ldr	r5, [pc, #536]	; (a490 <set_arm_clock+0x244>)
    a276:	lsrs	r2, r3, #8
    a278:	umull	r3, r2, lr, r2
    a27c:	lsrs	r3, r2, #7
    a27e:	add.w	r3, r3, r3, lsl #2
    a282:	add.w	r2, r3, r3, lsl #2
    a286:	addw	r3, r2, #1250	; 0x4e2
    a28a:	cmp	r3, r6
    a28c:	it	cs
    a28e:	movcs	r3, r6
    a290:	sub.w	r3, r3, #800	; 0x320
    a294:	umull	r3, r6, r5, r3
    a298:	lsrs	r6, r6, #3
    a29a:	b.n	a2a4 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    a29c:	cmp	r0, #25
    a29e:	ite	cc
    a2a0:	movcc	r6, #6
    a2a2:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a2a4:	ldr	r2, [pc, #472]	; (a480 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a2a6:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a2aa:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a2ae:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a2b0:	orr.w	r3, r3, #192	; 0xc0
    a2b4:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a2b8:	bcs.n	a2d0 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a2ba:	ldr	r3, [pc, #456]	; (a484 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a2bc:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a2c0:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a2c2:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a2c4:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a2c6:	ldr	r3, [r2, #0]
    a2c8:	cmp	r3, #0
    a2ca:	bge.n	a2c6 <set_arm_clock+0x7a>
    a2cc:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a2d0:	ands.w	r3, r4, #33554432	; 0x2000000
    a2d4:	bne.n	a334 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a2d6:	ldr	r5, [pc, #444]	; (a494 <set_arm_clock+0x248>)
    a2d8:	ldr	r2, [pc, #444]	; (a498 <set_arm_clock+0x24c>)
    a2da:	ldr.w	ip, [r5, #16]
    a2de:	mov	r5, r2
    a2e0:	and.w	r2, ip, r2
    a2e4:	cmp	r2, r5
    a2e6:	itet	eq
    a2e8:	moveq.w	r3, #402653184	; 0x18000000
    a2ec:	movne.w	r2, #4096	; 0x1000
    a2f0:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a2f2:	eor.w	r5, r4, r3
    a2f6:	tst.w	r5, #939524096	; 0x38000000
    a2fa:	beq.n	a30a <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a2fc:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a300:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a304:	ldr	r5, [pc, #376]	; (a480 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a306:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    a308:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a30a:	eor.w	r3, r1, r2
    a30e:	tst.w	r3, #12288	; 0x3000
    a312:	beq.n	a326 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a314:	ldr	r3, [pc, #360]	; (a480 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a316:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a31a:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a31c:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a31e:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a320:	ldr	r3, [r2, #72]	; 0x48
    a322:	lsls	r5, r3, #28
    a324:	bmi.n	a320 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a326:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a32a:	ldr	r2, [pc, #340]	; (a480 <set_arm_clock+0x234>)
    a32c:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a32e:	ldr	r3, [r2, #72]	; 0x48
    a330:	lsls	r1, r3, #26
    a332:	bmi.n	a32e <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a334:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a336:	ldr	r5, [pc, #356]	; (a49c <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a338:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a33a:	mul.w	r3, r1, r2
    a33e:	mul.w	r3, r0, r3
    a342:	cmp	r3, r5
    a344:	bhi.n	a35a <set_arm_clock+0x10e>
		if (div_arm < 8) {
    a346:	cmp	r2, #7
    a348:	bhi.w	a454 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    a34c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a34e:	mul.w	r3, r1, r2
    a352:	mul.w	r3, r0, r3
    a356:	cmp	r3, r5
    a358:	bls.n	a346 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a35a:	ldr	r0, [pc, #324]	; (a4a0 <set_arm_clock+0x254>)
    a35c:	ldr	r5, [pc, #324]	; (a4a4 <set_arm_clock+0x258>)
    a35e:	add	r0, r3
    a360:	umull	r3, r0, r5, r0
    a364:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    a366:	cmp	r3, #108	; 0x6c
    a368:	bhi.n	a45e <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    a36a:	cmp	r3, #53	; 0x35
    a36c:	bhi.n	a46c <set_arm_clock+0x220>
    a36e:	ldr.w	r8, [pc, #348]	; a4cc <set_arm_clock+0x280>
    a372:	movs	r3, #54	; 0x36
    a374:	ldr	r0, [pc, #304]	; (a4a8 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a376:	ldr.w	ip, [pc, #284]	; a494 <set_arm_clock+0x248>
    a37a:	ldr	r5, [pc, #304]	; (a4ac <set_arm_clock+0x260>)
    a37c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a380:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a384:	and.w	r5, r9, r5
    a388:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a38a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a38e:	beq.n	a3a8 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a390:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a394:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a398:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a39a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a39e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a3a2:	ldr	r3, [r5, #0]
    a3a4:	cmp	r3, #0
    a3a6:	bge.n	a3a2 <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a3a8:	ldr.w	ip, [pc, #212]	; a480 <set_arm_clock+0x234>
    a3ac:	subs	r2, #1
    a3ae:	ldr.w	r3, [ip, #16]
    a3b2:	and.w	r3, r3, #7
    a3b6:	cmp	r3, r2
    a3b8:	beq.n	a3ca <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a3ba:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a3be:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a3c0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a3c4:	ldr	r3, [r5, #72]	; 0x48
    a3c6:	lsls	r3, r3, #15
    a3c8:	bmi.n	a3c4 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a3ca:	subs	r1, #1
    a3cc:	lsls	r1, r1, #10
    a3ce:	eor.w	r3, r4, r1
    a3d2:	tst.w	r3, #7168	; 0x1c00
    a3d6:	beq.n	a3ee <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a3d8:	ldr	r3, [pc, #164]	; (a480 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a3da:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a3de:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a3e2:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a3e4:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    a3e6:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a3e8:	ldr	r3, [r2, #72]	; 0x48
    a3ea:	lsls	r1, r3, #30
    a3ec:	bmi.n	a3e8 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a3ee:	ldr	r3, [pc, #192]	; (a4b0 <set_arm_clock+0x264>)
    a3f0:	ldr	r1, [pc, #192]	; (a4b4 <set_arm_clock+0x268>)
    a3f2:	add	r3, r0
    a3f4:	lsrs	r3, r3, #7
    a3f6:	umull	r3, r1, r1, r3
    a3fa:	lsrs	r1, r1, #12
    a3fc:	cmp	r1, #4
    a3fe:	it	cs
    a400:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a402:	subs	r3, r1, #1
    a404:	lsls	r3, r3, #8
    a406:	eor.w	r2, r4, r3
    a40a:	tst.w	r2, #768	; 0x300
    a40e:	beq.n	a41e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a410:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a414:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a418:	ldr	r2, [pc, #100]	; (a480 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a41a:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a41c:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a41e:	ldr	r3, [pc, #96]	; (a480 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a420:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a424:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a426:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a428:	ldr	r3, [r2, #72]	; 0x48
    a42a:	lsls	r3, r3, #26
    a42c:	bmi.n	a428 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a42e:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a432:	ldr	r2, [pc, #132]	; (a4b8 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a434:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a436:	ldr	r3, [pc, #132]	; (a4bc <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a438:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a43a:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a43c:	bcs.n	a450 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a43e:	ldr	r3, [pc, #68]	; (a484 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a440:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a444:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a446:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a448:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a44a:	ldr	r3, [r2, #0]
    a44c:	cmp	r3, #0
    a44e:	bge.n	a44a <set_arm_clock+0x1fe>
	}

	return frequency;
}
    a450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a454:	cmp	r1, #4
    a456:	bhi.n	a35a <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    a458:	adds	r1, #1
				div_arm = 1;
    a45a:	movs	r2, #1
    a45c:	b.n	a33a <set_arm_clock+0xee>
    a45e:	ldr.w	r8, [pc, #112]	; a4d0 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a462:	movs	r3, #108	; 0x6c
    a464:	ldr	r0, [pc, #88]	; (a4c0 <set_arm_clock+0x274>)
    a466:	b.n	a376 <set_arm_clock+0x12a>
    a468:	movs	r6, #18
    a46a:	b.n	a2a4 <set_arm_clock+0x58>
    a46c:	ldr	r0, [pc, #84]	; (a4c4 <set_arm_clock+0x278>)
    a46e:	ldr.w	r8, [pc, #100]	; a4d4 <set_arm_clock+0x288>
    a472:	mul.w	r0, r0, r3
    a476:	orr.w	r8, r3, r8
    a47a:	b.n	a376 <set_arm_clock+0x12a>
    a47c:	.word	0x1f78a400
    a480:	.word	0x400fc000
    a484:	.word	0x40080000
    a488:	.word	0x23c34600
    a48c:	.word	0xdc3cba00
    a490:	.word	0x51eb851f
    a494:	.word	0x400d8000
    a498:	.word	0x80003040
    a49c:	.word	0x269fb1ff
    a4a0:	.word	0x005b8d80
    a4a4:	.word	0x165e9f81
    a4a8:	.word	0x269fb200
    a4ac:	.word	0x8001307f
    a4b0:	.word	0x08f0d17f
    a4b4:	.word	0x00e5109f
    a4b8:	.word	0x20000c54
    a4bc:	.word	0x20000c50
    a4c0:	.word	0x4d3f6400
    a4c4:	.word	0x00b71b00
    a4c8:	.word	0x004cb223
    a4cc:	.word	0x80002036
    a4d0:	.word	0x8000206c
    a4d4:	.word	0x80002000

0000a4d8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a4d8:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a4da:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a4dc:	cbz	r3, a4e6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a4de:	ldr	r3, [r2, #4]
    a4e0:	orr.w	r3, r3, #32768	; 0x8000
    a4e4:	str	r3, [r2, #4]
	}
	__disable_irq();
    a4e6:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a4e8:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a4ea:	cbz	r4, a514 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a4ec:	ldr	r3, [pc, #64]	; (a530 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a4ee:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a4f0:	ldr.w	r4, [r3, #432]	; 0x1b0
    a4f4:	tst	r4, r1
    a4f6:	bne.n	a528 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a4f8:	ldr.w	r4, [r3, #320]	; 0x140
    a4fc:	orr.w	r4, r4, #16384	; 0x4000
    a500:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a504:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    a508:	ldr.w	r4, [r3, #320]	; 0x140
    a50c:	lsls	r4, r4, #17
    a50e:	bpl.n	a4f8 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a510:	tst	r1, r5
    a512:	bne.n	a528 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a514:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a516:	ldr	r4, [pc, #24]	; (a530 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a518:	str	r2, [r0, #8]
	endpoint->status = 0;
    a51a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a51c:	ldr.w	r3, [r4, #432]	; 0x1b0
    a520:	orrs	r1, r3
    a522:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a526:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a528:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a52a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a52c:	pop	{r4, r5}
    a52e:	bx	lr
    a530:	.word	0x402e0000

0000a534 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a534:	push	{r3, r4, r5, lr}
    a536:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    a538:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    a53a:	b.n	a54a <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a53c:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    a53e:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    a540:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    a542:	ldr	r2, [r5, #52]	; 0x34
    a544:	mov	r3, r4
    a546:	cmp	r4, r2
    a548:	beq.n	a55c <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a54a:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    a54c:	cbz	r3, a55c <run_callbacks+0x28>
    a54e:	cmp	r3, #1
    a550:	beq.n	a55c <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    a552:	ldr	r2, [r3, #4]
    a554:	lsls	r2, r2, #24
    a556:	bpl.n	a53c <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    a558:	str	r3, [r5, #48]	; 0x30
			return;
    a55a:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    a55c:	movs	r3, #0
    a55e:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    a560:	str	r3, [r5, #52]	; 0x34
    a562:	pop	{r3, r4, r5, pc}

0000a564 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a564:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a566:	cbnz	r1, a59a <endpoint0_transmit.constprop.0+0x36>
    a568:	ldr	r4, [pc, #124]	; (a5e8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a56a:	ldr	r3, [pc, #128]	; (a5ec <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a56c:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a56e:	ldr	r0, [pc, #128]	; (a5f0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a570:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a572:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a574:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a576:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a578:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a57a:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a57c:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    a57e:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a582:	ldr	r5, [pc, #112]	; (a5f4 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a584:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a588:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a58a:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a58e:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a590:	ldr.w	r3, [r2, #432]	; 0x1b0
    a594:	cmp	r3, #0
    a596:	bne.n	a590 <endpoint0_transmit.constprop.0+0x2c>
}
    a598:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a59a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a59c:	ldr	r3, [pc, #88]	; (a5f8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a59e:	ldr	r5, [pc, #80]	; (a5f0 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5a0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5a2:	ldr	r4, [pc, #68]	; (a5e8 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5a4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5a8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5aa:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5ac:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5ae:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5b2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5b4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5b8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5ba:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5be:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5c2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a5c6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a5c8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5ca:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5ce:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5d2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5d6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5d8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5da:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a5de:	ldr.w	r3, [r2, #432]	; 0x1b0
    a5e2:	cmp	r3, #0
    a5e4:	bne.n	a5de <endpoint0_transmit.constprop.0+0x7a>
    a5e6:	b.n	a56a <endpoint0_transmit.constprop.0+0x6>
    a5e8:	.word	0x2000e000
    a5ec:	.word	0x2000d020
    a5f0:	.word	0x402e0000
    a5f4:	.word	0x2000c1b0
    a5f8:	.word	0x2000d000

0000a5fc <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    a5fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a600:	ldr	r4, [pc, #696]	; (a8bc <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    a602:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a604:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a608:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a60c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a610:	beq.n	a6d0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a612:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a616:	cmp	r3, #0
    a618:	beq.n	a6c6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a61a:	mov.w	r9, #65537	; 0x10001
    a61e:	ldr.w	fp, [pc, #700]	; a8dc <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a622:	mov	r6, r4
    a624:	ldr	r7, [pc, #664]	; (a8c0 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a626:	mov	sl, r9
    a628:	ldr	r1, [r7, #40]	; 0x28
    a62a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a62c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a630:	ldr.w	r3, [r4, #320]	; 0x140
    a634:	orr.w	r3, r3, #8192	; 0x2000
    a638:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a63c:	ldr.w	r3, [r4, #320]	; 0x140
    a640:	lsls	r5, r3, #18
    a642:	bpl.n	a630 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a644:	ldr.w	r3, [r6, #320]	; 0x140
    a648:	bic.w	r3, r3, #8192	; 0x2000
    a64c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a650:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a654:	ldr.w	r3, [r4, #436]	; 0x1b4
    a658:	ands.w	r3, r3, #65537	; 0x10001
    a65c:	bne.n	a654 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a65e:	uxth	r0, r1
    a660:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a664:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a668:	cmp	r0, r5
    a66a:	bhi.w	a78e <isr+0x192>
    a66e:	cmp.w	r0, #1664	; 0x680
    a672:	bcs.w	a9d8 <isr+0x3dc>
    a676:	cmp.w	r0, #258	; 0x102
    a67a:	beq.w	a8f8 <isr+0x2fc>
    a67e:	bhi.w	a814 <isr+0x218>
    a682:	cmp	r0, #128	; 0x80
    a684:	beq.w	a8a2 <isr+0x2a6>
    a688:	cmp	r0, #130	; 0x82
    a68a:	bne.w	a804 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a68e:	uxth	r2, r2
    a690:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a694:	cmp	r1, #7
    a696:	bhi.w	a804 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a69a:	lsls	r1, r1, #2
    a69c:	ldr	r0, [pc, #548]	; (a8c4 <isr+0x2c8>)
		reply_buffer[0] = 0;
    a69e:	ldr	r5, [pc, #552]	; (a8c8 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a6a0:	add	r0, r1
    a6a2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6a4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a6a6:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    a6a8:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6aa:	bpl.w	aa2a <isr+0x42e>
    a6ae:	lsls	r2, r1, #15
    a6b0:	bpl.n	a6b6 <isr+0xba>
			reply_buffer[0] = 1;
    a6b2:	movs	r3, #1
    a6b4:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a6b6:	movs	r1, #2
    a6b8:	ldr	r0, [pc, #524]	; (a8c8 <isr+0x2cc>)
    a6ba:	bl	a564 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a6be:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a6c2:	cmp	r3, #0
    a6c4:	bne.n	a628 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a6c6:	ldr	r2, [pc, #500]	; (a8bc <isr+0x2c0>)
    a6c8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a6cc:	cmp	r3, #0
    a6ce:	bne.n	a75a <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a6d0:	tst.w	r8, #64	; 0x40
    a6d4:	beq.n	a708 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6d6:	ldr	r3, [pc, #484]	; (a8bc <isr+0x2c0>)
    a6d8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6dc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6de:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a6e2:	ldr.w	r1, [r3, #444]	; 0x1bc
    a6e6:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6ea:	ldr.w	r4, [r2, #432]	; 0x1b0
    a6ee:	ldr	r3, [pc, #460]	; (a8bc <isr+0x2c0>)
    a6f0:	cmp	r4, #0
    a6f2:	bne.n	a6ea <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a6f4:	mov.w	r2, #4294967295
    a6f8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a6fc:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a700:	bl	9fd8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a704:	ldr	r3, [pc, #452]	; (a8cc <isr+0x2d0>)
    a706:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a708:	tst.w	r8, #16777216	; 0x1000000
    a70c:	beq.n	a716 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a70e:	ldr	r3, [pc, #448]	; (a8d0 <isr+0x2d4>)
    a710:	ldr	r3, [r3, #0]
    a712:	cbz	r3, a716 <isr+0x11a>
    a714:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a716:	tst.w	r8, #33554432	; 0x2000000
    a71a:	beq.n	a724 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a71c:	ldr	r3, [pc, #436]	; (a8d4 <isr+0x2d8>)
    a71e:	ldr	r3, [r3, #0]
    a720:	cbz	r3, a724 <isr+0x128>
    a722:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a724:	tst.w	r8, #4
    a728:	beq.n	a730 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a72a:	ldr	r3, [pc, #400]	; (a8bc <isr+0x2c0>)
    a72c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a730:	ldr	r3, [pc, #392]	; (a8bc <isr+0x2c0>)
    a732:	ldr.w	r2, [r3, #328]	; 0x148
    a736:	lsls	r2, r2, #24
    a738:	bpl.n	a754 <isr+0x158>
    a73a:	tst.w	r8, #128	; 0x80
    a73e:	beq.n	a754 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a740:	ldr	r1, [pc, #404]	; (a8d8 <isr+0x2dc>)
    a742:	ldrb	r2, [r1, #0]
    a744:	cmp	r2, #0
    a746:	beq.w	aa18 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    a74a:	subs	r3, r2, #1
    a74c:	uxtb	r3, r3
    a74e:	strb	r3, [r1, #0]
    a750:	cbnz	r3, a754 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    a752:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    a754:	add	sp, #12
    a756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a75a:	ldr	r1, [pc, #384]	; (a8dc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a75c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a760:	ldr	r0, [r1, #0]
    a762:	tst	r3, r0
    a764:	bne.w	aaa6 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a768:	ldr	r2, [pc, #352]	; (a8cc <isr+0x2d0>)
    a76a:	ldr	r4, [r2, #0]
			if (completestatus) {
    a76c:	ands	r4, r3
    a76e:	beq.n	a6d0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a770:	lsls	r6, r4, #29
    a772:	bmi.w	aae0 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a776:	lsls	r5, r4, #13
    a778:	bmi.w	aaf0 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a77c:	lsls	r0, r4, #28
    a77e:	bmi.w	aae8 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a782:	lsls	r1, r4, #12
    a784:	bpl.n	a6d0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    a786:	ldr	r0, [pc, #344]	; (a8e0 <isr+0x2e4>)
    a788:	bl	a534 <run_callbacks>
    a78c:	b.n	a6d0 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a78e:	movw	r5, #8225	; 0x2021
    a792:	cmp	r0, r5
    a794:	beq.n	a7fc <isr+0x200>
    a796:	bhi.n	a860 <isr+0x264>
    a798:	cmp.w	r0, #2176	; 0x880
    a79c:	beq.w	a9bc <isr+0x3c0>
    a7a0:	cmp.w	r0, #2304	; 0x900
    a7a4:	bne.n	a804 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a7a6:	ubfx	r1, r1, #16, #8
    a7aa:	ldr	r2, [pc, #312]	; (a8e4 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a7ac:	ldr	r0, [pc, #312]	; (a8e8 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a7ae:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a7b0:	ldr	r1, [pc, #312]	; (a8ec <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a7b2:	ldr	r2, [pc, #316]	; (a8f0 <isr+0x2f4>)
    a7b4:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a7b6:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a7ba:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a7be:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a7c2:	bl	9fdc <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7c6:	ldr	r2, [pc, #300]	; (a8f4 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a7c8:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a7ca:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7cc:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    a7ce:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7d0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a7d2:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a7d4:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a7d8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a7da:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7dc:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a7e0:	ldr	r2, [pc, #248]	; (a8dc <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7e2:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a7e6:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a7e8:	ldr.w	r3, [r4, #432]	; 0x1b0
    a7ec:	cmp	r3, #0
    a7ee:	bne.n	a7e8 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a7f0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a7f4:	cmp	r3, #0
    a7f6:	bne.w	a628 <isr+0x2c>
    a7fa:	b.n	a6c6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a7fc:	lsrs	r0, r2, #16
    a7fe:	cmp	r0, #7
    a800:	beq.w	aa32 <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a804:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a808:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a80c:	cmp	r3, #0
    a80e:	bne.w	a628 <isr+0x2c>
    a812:	b.n	a6c6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a814:	movw	r5, #770	; 0x302
    a818:	cmp	r0, r5
    a81a:	beq.w	a962 <isr+0x366>
    a81e:	cmp.w	r0, #1280	; 0x500
    a822:	bne.n	a804 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a824:	ldr	r2, [pc, #204]	; (a8f4 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    a826:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a828:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a82a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a82c:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a82e:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a830:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a834:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a836:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a83a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a83c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a840:	ldr.w	r3, [r4, #432]	; 0x1b0
    a844:	cmp	r3, #0
    a846:	bne.n	a840 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a848:	lsrs	r3, r1, #16
    a84a:	lsls	r3, r3, #25
    a84c:	orr.w	r3, r3, #16777216	; 0x1000000
    a850:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a854:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a858:	cmp	r3, #0
    a85a:	bne.w	a628 <isr+0x2c>
    a85e:	b.n	a6c6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a860:	movw	r3, #8737	; 0x2221
    a864:	cmp	r0, r3
    a866:	beq.n	a950 <isr+0x354>
    a868:	movw	r3, #8993	; 0x2321
    a86c:	cmp	r0, r3
    a86e:	bne.n	a804 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a870:	ldr	r3, [pc, #128]	; (a8f4 <isr+0x2f8>)
    a872:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    a874:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a876:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a878:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a87a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a87c:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a880:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a882:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a886:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a888:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a88a:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a88e:	ldr.w	r3, [r4, #432]	; 0x1b0
    a892:	cmp	r3, #0
    a894:	bne.n	a88e <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a896:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a89a:	cmp	r3, #0
    a89c:	bne.w	a628 <isr+0x2c>
    a8a0:	b.n	a6c6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a8a2:	ldr	r2, [pc, #36]	; (a8c8 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    a8a4:	movs	r1, #2
    a8a6:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a8a8:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a8aa:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a8ac:	bl	a564 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8b0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8b4:	cmp	r3, #0
    a8b6:	bne.w	a628 <isr+0x2c>
    a8ba:	b.n	a6c6 <isr+0xca>
    a8bc:	.word	0x402e0000
    a8c0:	.word	0x2000e000
    a8c4:	.word	0x402e01c0
    a8c8:	.word	0x2000c1c0
    a8cc:	.word	0x2000c1a8
    a8d0:	.word	0x2000c1a4
    a8d4:	.word	0x2000c1ac
    a8d8:	.word	0x2000c1b4
    a8dc:	.word	0x2000c1b0
    a8e0:	.word	0x2000e1c0
    a8e4:	.word	0x2000c1d0
    a8e8:	.word	0x00cc0002
    a8ec:	.word	0x000200c8
    a8f0:	.word	0x00c80002
    a8f4:	.word	0x2000d020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a8f8:	uxth	r2, r2
    a8fa:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a8fe:	cmp	r3, #7
    a900:	bhi.n	a804 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a902:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a906:	mov.w	r3, r3, lsl #2
    a90a:	ldr	r2, [pc, #492]	; (aaf8 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a90c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a910:	add	r2, r3
    a912:	ldr	r3, [r2, #0]
    a914:	ite	ne
    a916:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a91a:	biceq.w	r3, r3, #1
    a91e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a920:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a922:	ldr	r3, [pc, #472]	; (aafc <isr+0x500>)
    a924:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a926:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a928:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a92a:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a92e:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a930:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a934:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a936:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a938:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a93c:	ldr.w	r3, [r4, #432]	; 0x1b0
    a940:	cmp	r3, #0
    a942:	bne.n	a93c <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a944:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a948:	cmp	r3, #0
    a94a:	bne.w	a628 <isr+0x2c>
    a94e:	b.n	a6c6 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a950:	ldr	r3, [pc, #428]	; (ab00 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a952:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a956:	ldr	r2, [pc, #428]	; (ab04 <isr+0x508>)
    a958:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a95a:	ldr	r3, [pc, #428]	; (ab08 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a95c:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a95e:	strb	r1, [r3, #0]
    a960:	b.n	a870 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a962:	uxth	r2, r2
    a964:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a968:	cmp	r3, #7
    a96a:	bhi.w	a804 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a96e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a972:	mov.w	r3, r3, lsl #2
    a976:	ldr	r2, [pc, #384]	; (aaf8 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a978:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a97c:	add	r2, r3
    a97e:	ldr	r3, [r2, #0]
    a980:	ite	ne
    a982:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a986:	orreq.w	r3, r3, #1
    a98a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a98c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a98e:	ldr	r3, [pc, #364]	; (aafc <isr+0x500>)
    a990:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a992:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a994:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a996:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a99a:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a99c:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a9a0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a9a2:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a9a4:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a9a8:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9ac:	cmp	r3, #0
    a9ae:	bne.n	a9a8 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a9b0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a9b4:	cmp	r3, #0
    a9b6:	bne.w	a628 <isr+0x2c>
    a9ba:	b.n	a6c6 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a9bc:	ldr	r2, [pc, #332]	; (ab0c <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a9be:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a9c0:	ldr	r3, [pc, #332]	; (ab10 <isr+0x514>)
    a9c2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a9c4:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a9c6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a9c8:	bl	a564 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a9cc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a9d0:	cmp	r3, #0
    a9d2:	bne.w	a628 <isr+0x2c>
    a9d6:	b.n	a6c6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a9d8:	ldr	r3, [pc, #312]	; (ab14 <isr+0x518>)
    a9da:	ldr	r0, [r3, #4]
    a9dc:	cmp	r0, #0
    a9de:	beq.w	a804 <isr+0x208>
    a9e2:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a9e4:	uxth.w	lr, r2
    a9e8:	b.n	a9f4 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a9ea:	adds	r3, #12
    a9ec:	ldr	r0, [r3, #4]
    a9ee:	cmp	r0, #0
    a9f0:	beq.w	a804 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a9f4:	ldrh	r5, [r3, #0]
    a9f6:	cmp	r5, r1
    a9f8:	bne.n	a9ea <isr+0x3ee>
    a9fa:	ldrh	r5, [r3, #2]
    a9fc:	cmp	r5, lr
    a9fe:	bne.n	a9ea <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    aa00:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    aa02:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    aa04:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    aa06:	ite	eq
    aa08:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    aa0a:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    aa0c:	cmp	r1, r2
    aa0e:	it	cs
    aa10:	movcs	r1, r2
    aa12:	bl	a564 <endpoint0_transmit.constprop.0>
    aa16:	b.n	a6be <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    aa18:	ldr.w	r2, [r3, #328]	; 0x148
    aa1c:	bic.w	r2, r2, #128	; 0x80
    aa20:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    aa24:	add	sp, #12
    aa26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    aa2a:	lsls	r3, r1, #31
    aa2c:	bpl.w	a6b6 <isr+0xba>
    aa30:	b.n	a6b2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aa32:	ldr	r5, [pc, #228]	; (ab18 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aa34:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    aa36:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aa38:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aa3a:	ldr	r3, [pc, #224]	; (ab1c <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    aa3c:	ldr	r1, [pc, #224]	; (ab20 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aa3e:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    aa40:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa42:	ldr	r1, [pc, #224]	; (ab24 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa44:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aa48:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa4a:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa4e:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa52:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa56:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aa5a:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa5c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa5e:	sub.w	r0, r1, #4096	; 0x1000
    aa62:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa64:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa68:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa6a:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa6c:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    aa70:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa74:	cmp	r3, #0
    aa76:	bne.n	aa70 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    aa78:	ldr	r2, [pc, #128]	; (aafc <isr+0x500>)
    aa7a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    aa7c:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa7e:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa80:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa82:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    aa86:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa88:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aa8c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa8e:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa92:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa94:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa98:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    aa9c:	ldr.w	r3, [r4, #432]	; 0x1b0
    aaa0:	cmp	r3, #0
    aaa2:	bne.n	aa9c <isr+0x4a0>
    aaa4:	b.n	a6be <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    aaa6:	ldr	r4, [pc, #112]	; (ab18 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aaa8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aaac:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aaae:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aab0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aab2:	cmp	r4, r0
    aab4:	bne.w	a768 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aab8:	ldr	r1, [pc, #108]	; (ab28 <isr+0x52c>)
    aaba:	ldr	r4, [pc, #112]	; (ab2c <isr+0x530>)
    aabc:	ldmia	r1, {r0, r1}
    aabe:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aac0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aac2:	str	r0, [r4, #0]
    aac4:	strh	r1, [r4, #4]
    aac6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aac8:	bne.w	a768 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    aacc:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aad0:	movs	r4, #80	; 0x50
    aad2:	ldr	r0, [pc, #92]	; (ab30 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    aad4:	orr.w	r1, r1, #128	; 0x80
    aad8:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aadc:	strb	r4, [r0, #0]
    aade:	b.n	a768 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    aae0:	ldr	r0, [pc, #80]	; (ab34 <isr+0x538>)
    aae2:	bl	a534 <run_callbacks>
    aae6:	b.n	a776 <isr+0x17a>
    aae8:	ldr	r0, [pc, #76]	; (ab38 <isr+0x53c>)
    aaea:	bl	a534 <run_callbacks>
    aaee:	b.n	a782 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    aaf0:	ldr	r0, [pc, #72]	; (ab3c <isr+0x540>)
    aaf2:	bl	a534 <run_callbacks>
    aaf6:	b.n	a77c <isr+0x180>
    aaf8:	.word	0x402e01c0
    aafc:	.word	0x2000d020
    ab00:	.word	0x2000c1d8
    ab04:	.word	0x2000c26c
    ab08:	.word	0x2000c1a1
    ab0c:	.word	0x2000c1d0
    ab10:	.word	0x2000c1c0
    ab14:	.word	0x20000728
    ab18:	.word	0x2000c1b8
    ab1c:	.word	0x2000d000
    ab20:	.word	0x00078080
    ab24:	.word	0x2000e1c8
    ab28:	.word	0x2000c1c8
    ab2c:	.word	0x2000c264
    ab30:	.word	0x2000c1b4
    ab34:	.word	0x2000e100
    ab38:	.word	0x2000e180
    ab3c:	.word	0x2000e140

0000ab40 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab40:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab42:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ab46:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab4a:	ite	ne
    ab4c:	movne	r7, #0
    ab4e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab52:	cmp	r2, #2
    ab54:	bls.n	ab5a <usb_config_rx+0x1a>
    ab56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ab5a:	mov.w	sl, r0, lsl #7
    ab5e:	ldr.w	r9, [pc, #64]	; aba0 <usb_config_rx+0x60>
    ab62:	mov	r5, r1
    ab64:	mov	r4, r0
    ab66:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ab6a:	movs	r1, #0
    ab6c:	movs	r2, #64	; 0x40
    ab6e:	mov	r8, r3
    ab70:	mov	r0, r6
    ab72:	bl	bf9c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab76:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ab78:	orr.w	r1, r7, r5, lsl #16
    ab7c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ab80:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab84:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ab86:	cmp.w	r8, #0
    ab8a:	beq.n	ab56 <usb_config_rx+0x16>
    ab8c:	ldr	r3, [pc, #12]	; (ab9c <usb_config_rx+0x5c>)
    ab8e:	lsls	r0, r4
    ab90:	ldr	r4, [r3, #0]
    ab92:	orrs	r0, r4
    ab94:	str	r0, [r3, #0]
    ab96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab9a:	nop
    ab9c:	.word	0x2000c1a8
    aba0:	.word	0x2000e000

0000aba4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    aba4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    aba6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    abaa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    abae:	ite	ne
    abb0:	movne	r7, #0
    abb2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    abb6:	cmp	r2, #2
    abb8:	bls.n	abbe <usb_config_tx+0x1a>
    abba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    abbe:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    abc0:	lsls	r5, r0, #7
    abc2:	ldr.w	r9, [pc, #68]	; ac08 <usb_config_tx+0x64>
    abc6:	mov	r8, r1
    abc8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    abca:	movs	r1, #0
    abcc:	mov	r4, r0
    abce:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    abd0:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    abd4:	mov	r0, sl
    abd6:	bl	bf9c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    abda:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    abdc:	orr.w	r1, r7, r8, lsl #16
    abe0:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    abe4:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    abe8:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    abec:	cmp	r6, #0
    abee:	beq.n	abba <usb_config_tx+0x16>
    abf0:	add.w	r0, r4, #16
    abf4:	ldr	r3, [pc, #12]	; (ac04 <usb_config_tx+0x60>)
    abf6:	lsls	r2, r0
    abf8:	ldr	r0, [r3, #0]
    abfa:	orrs	r2, r0
    abfc:	str	r2, [r3, #0]
    abfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac02:	nop
    ac04:	.word	0x2000c1a8
    ac08:	.word	0x2000e000

0000ac0c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ac0c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ac0e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ac10:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ac12:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ac16:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ac18:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ac1a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ac1c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ac20:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ac24:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ac28:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ac2c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ac2e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ac30:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ac32:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ac34:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    ac36:	pop	{r4, r5, r6, r7}
    ac38:	bx	lr
    ac3a:	nop

0000ac3c <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac3c:	subs	r3, r0, #2
    ac3e:	cmp	r3, #2
    ac40:	bls.n	ac44 <usb_transmit+0x8>
    ac42:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ac44:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ac46:	ldr	r3, [pc, #24]	; (ac60 <usb_transmit+0x24>)
    ac48:	add.w	r4, r0, #16
    ac4c:	movs	r5, #1
    ac4e:	mov	r2, r1
    ac50:	add.w	r0, r3, r0, lsl #7
    ac54:	lsl.w	r1, r5, r4
}
    ac58:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ac5a:	b.w	a4d8 <schedule_transfer>
    ac5e:	nop
    ac60:	.word	0x2000e040

0000ac64 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac64:	subs	r3, r0, #2
    ac66:	cmp	r3, #2
    ac68:	bls.n	ac6c <usb_receive+0x8>
    ac6a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ac6c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ac6e:	ldr	r3, [pc, #20]	; (ac84 <usb_receive+0x20>)
    ac70:	movs	r4, #1
    ac72:	mov	r2, r1
    ac74:	lsl.w	r1, r4, r0
    ac78:	add.w	r0, r3, r0, lsl #7
}
    ac7c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ac80:	b.w	a4d8 <schedule_transfer>
    ac84:	.word	0x2000e000

0000ac88 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ac88:	ldr	r2, [pc, #32]	; (acac <usb_transfer_status+0x24>)
    ac8a:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ac8e:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ac90:	orr.w	r3, r3, #16384	; 0x4000
    ac94:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ac98:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ac9a:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ac9e:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    aca0:	tst.w	r3, #16384	; 0x4000
    aca4:	beq.n	ac8e <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    aca6:	mov	r0, r1
    aca8:	bx	lr
    acaa:	nop
    acac:	.word	0x402e0000

0000acb0 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    acb0:	ldr	r3, [pc, #36]	; (acd8 <rtc_set+0x28>)
    acb2:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    acb4:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    acb6:	bic.w	r2, r2, #1
    acba:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    acbc:	ldr	r3, [r1, #8]
    acbe:	ldr	r2, [pc, #24]	; (acd8 <rtc_set+0x28>)
    acc0:	lsls	r3, r3, #31
    acc2:	bmi.n	acbc <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    acc4:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    acc6:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    acc8:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    acca:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    accc:	ldr	r3, [r2, #8]
    acce:	orr.w	r3, r3, #1
    acd2:	str	r3, [r2, #8]
    acd4:	bx	lr
    acd6:	nop
    acd8:	.word	0x400d4000

0000acdc <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    acdc:	cmp	r0, #0
    acde:	beq.n	ad86 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    ace0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ace4:	mov	r9, r0
    ace6:	sub	sp, #12
    ace8:	ldr	r4, [pc, #156]	; (ad88 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    acea:	movs	r0, #1
    acec:	ldr	r5, [pc, #156]	; (ad8c <delay+0xb0>)
    acee:	ldr	r6, [pc, #160]	; (ad90 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    acf0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    acf4:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    acf6:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    acf8:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    acfc:	cmp	r3, #0
    acfe:	bne.n	acf0 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    ad00:	ldr	r7, [pc, #144]	; (ad94 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad02:	mov.w	lr, #1000	; 0x3e8
    ad06:	ldr	r0, [pc, #144]	; (ad98 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    ad08:	ldr.w	ip, [r7]
    ad0c:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad0e:	add.w	r7, r7, #1660944384	; 0x63000000
    ad12:	ldr	r3, [r0, #0]
    ad14:	rsb	r1, r1, ip
    ad18:	add.w	r7, r7, #1818624	; 0x1bc000
    ad1c:	addw	r7, r7, #3711	; 0xe7f
    ad20:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ad24:	mov	sl, r7
    ad26:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad28:	lsrs	r3, r3, #18
    ad2a:	udiv	r3, r1, r3
    ad2e:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ad32:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ad36:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ad38:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ad3a:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    ad3e:	cmp	r3, #0
    ad40:	bne.n	ad32 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    ad42:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ad46:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad4a:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ad4c:	mul.w	r2, lr, r2
    ad50:	rsb	r1, r1, ip
    ad54:	umull	r3, lr, sl, r3
    ad58:	rsb	r3, r8, r2
    ad5c:	mov.w	r2, lr, lsr #18
    ad60:	udiv	r1, r1, r2
    ad64:	adds	r2, r1, r3
    ad66:	cmp.w	r2, #1000	; 0x3e8
    ad6a:	bcc.n	ad7c <delay+0xa0>
			if (--msec == 0) return;
    ad6c:	subs.w	r9, r9, #1
			start += 1000;
    ad70:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    ad74:	bne.n	ad32 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    ad76:	add	sp, #12
    ad78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad7c:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    ad7e:	bl	af54 <yield>
	}
    ad82:	ldr	r0, [sp, #4]
    ad84:	b.n	ad32 <delay+0x56>
    ad86:	bx	lr
    ad88:	.word	0x2000e280
    ad8c:	.word	0x2000c1d8
    ad90:	.word	0x2000c1d4
    ad94:	.word	0xe0001004
    ad98:	.word	0x20000c54

0000ad9c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    ad9c:	push	{r4, r5, r6}
    ad9e:	ldr	r3, [pc, #56]	; (add8 <micros+0x3c>)
    ada0:	movs	r6, #1
    ada2:	ldr	r5, [pc, #56]	; (addc <micros+0x40>)
    ada4:	ldr	r0, [pc, #56]	; (ade0 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ada6:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    adaa:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    adac:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    adae:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    adb2:	cmp	r2, #0
    adb4:	bne.n	ada6 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    adb6:	ldr	r3, [pc, #44]	; (ade4 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    adb8:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    adbc:	ldr	r2, [pc, #40]	; (ade8 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    adbe:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    adc0:	ldr	r5, [pc, #40]	; (adec <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    adc2:	ldr	r2, [r2, #0]
	return usec;
    adc4:	subs	r4, r3, r4
    adc6:	umull	r2, r3, r5, r2
    adca:	lsrs	r3, r3, #18
    adcc:	udiv	r4, r4, r3
}
    add0:	mla	r0, r0, r1, r4
    add4:	pop	{r4, r5, r6}
    add6:	bx	lr
    add8:	.word	0x2000e280
    addc:	.word	0x2000c1d8
    ade0:	.word	0x2000c1d4
    ade4:	.word	0xe0001004
    ade8:	.word	0x20000c54
    adec:	.word	0x431bde83

0000adf0 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    adf0:	cmp	r0, #28
    adf2:	bhi.n	ae20 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    adf4:	ldr	r1, [pc, #68]	; (ae3c <analogRead+0x4c>)
    adf6:	ldrb	r3, [r1, #0]
    adf8:	cbz	r3, ae06 <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    adfa:	ldr	r2, [pc, #68]	; (ae40 <analogRead+0x50>)
    adfc:	ldr	r3, [r2, #72]	; 0x48
    adfe:	ands.w	r3, r3, #128	; 0x80
    ae02:	bne.n	adfc <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    ae04:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    ae06:	ldr	r3, [pc, #60]	; (ae44 <analogRead+0x54>)
    ae08:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    ae0a:	lsls	r2, r3, #24
    ae0c:	bmi.n	ae24 <analogRead+0x34>
		ADC1_HC0 = ch;
    ae0e:	ldr	r2, [pc, #48]	; (ae40 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    ae10:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    ae12:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    ae14:	ldr	r3, [r1, #32]
    ae16:	ldr	r2, [pc, #40]	; (ae40 <analogRead+0x50>)
    ae18:	lsls	r0, r3, #31
    ae1a:	bpl.n	ae14 <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    ae1c:	ldr	r0, [r2, #36]	; 0x24
    ae1e:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    ae20:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    ae22:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    ae24:	ldr	r2, [pc, #32]	; (ae48 <analogRead+0x58>)
    ae26:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    ae2a:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    ae2c:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    ae2e:	ldr	r3, [r1, #32]
    ae30:	ldr	r2, [pc, #20]	; (ae48 <analogRead+0x58>)
    ae32:	lsls	r3, r3, #31
    ae34:	bpl.n	ae2e <analogRead+0x3e>
		return ADC2_R0;
    ae36:	ldr	r0, [r2, #36]	; 0x24
    ae38:	bx	lr
    ae3a:	nop
    ae3c:	.word	0x2000c1dc
    ae40:	.word	0x400c4000
    ae44:	.word	0x2000048c
    ae48:	.word	0x400c8000

0000ae4c <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    ae4c:	lsls	r0, r0, #4
    ae4e:	ldr	r3, [pc, #28]	; (ae6c <digitalWrite.part.0+0x20>)
    ae50:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    ae52:	ldr	r3, [r3, r0]
	mask = p->mask;
    ae54:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    ae56:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    ae58:	tst	r0, r2
    ae5a:	beq.n	ae62 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    ae5c:	cbnz	r1, ae64 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    ae5e:	str.w	r2, [r3, #136]	; 0x88
    ae62:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    ae64:	str.w	r2, [r3, #132]	; 0x84
    ae68:	bx	lr
    ae6a:	nop
    ae6c:	.word	0x200004a8

0000ae70 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ae70:	cmp	r0, #39	; 0x27
    ae72:	bhi.n	ae78 <digitalWrite+0x8>
    ae74:	b.w	ae4c <digitalWrite.part.0>
    ae78:	bx	lr
    ae7a:	nop

0000ae7c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ae7c:	cmp	r0, #39	; 0x27
    ae7e:	bhi.n	aeba <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    ae80:	lsls	r0, r0, #4
    ae82:	ldr	r2, [pc, #104]	; (aeec <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ae84:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    ae86:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ae8a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    ae8c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ae8e:	beq.n	aebc <pinMode+0x40>
    ae90:	cmp	r1, #4
    ae92:	beq.n	aebc <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ae94:	ldr	r4, [r3, #12]
    ae96:	ldr	r2, [r0, #4]
    ae98:	bic.w	r2, r2, r4
    ae9c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ae9e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    aea0:	cbz	r1, aede <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    aea2:	cmp	r1, #2
    aea4:	beq.n	aee4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    aea6:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    aea8:	ldr	r3, [r3, #4]
}
    aeaa:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    aeae:	ite	eq
    aeb0:	ldreq	r1, [pc, #60]	; (aef0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    aeb2:	ldrne	r1, [pc, #64]	; (aef4 <pinMode+0x78>)
    aeb4:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    aeb6:	movs	r2, #21
    aeb8:	str	r2, [r3, #0]
}
    aeba:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    aebc:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    aebe:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    aec0:	ldr	r4, [r0, #4]
    aec2:	orr.w	r2, r2, r4
    aec6:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    aec8:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    aeca:	beq.n	aede <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    aecc:	movw	r1, #2104	; 0x838
    aed0:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    aed2:	ldr	r3, [r3, #4]
    aed4:	movs	r2, #21
}
    aed6:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    aeda:	str	r2, [r3, #0]
}
    aedc:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    aede:	movs	r1, #56	; 0x38
    aee0:	str	r1, [r2, #0]
    aee2:	b.n	aed2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    aee4:	ldr	r1, [pc, #16]	; (aef8 <pinMode+0x7c>)
    aee6:	str	r1, [r2, #0]
    aee8:	b.n	aed2 <pinMode+0x56>
    aeea:	nop
    aeec:	.word	0x200004a8
    aef0:	.word	0x00013038
    aef4:	.word	0x00010038
    aef8:	.word	0x0001f038

0000aefc <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    aefc:	ldr	r2, [pc, #72]	; (af48 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aefe:	ldr	r3, [pc, #76]	; (af4c <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    af00:	ldr.w	r0, [r2, #544]	; 0x220
    af04:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    af08:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    af0a:	push	{r4, lr}
    af0c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    af0e:	bhi.n	af16 <usb_init_serialnumber+0x1a>
    af10:	add.w	r0, r0, r0, lsl #2
    af14:	lsls	r0, r0, #1
    af16:	ldr	r4, [pc, #56]	; (af50 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    af18:	add	r1, sp, #4
    af1a:	movs	r2, #10
    af1c:	bl	b3c8 <ultoa>
    af20:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    af22:	movs	r3, #0
    af24:	mov	r0, r4
		char c = buf[i];
    af26:	ldrb.w	r2, [r1], #1
    af2a:	adds	r3, #1
		if (!c) break;
    af2c:	cbz	r2, af3e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    af2e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    af30:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    af34:	bne.n	af26 <usb_init_serialnumber+0x2a>
    af36:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    af38:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    af3a:	add	sp, #16
    af3c:	pop	{r4, pc}
    af3e:	lsls	r3, r3, #1
    af40:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    af42:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    af44:	add	sp, #16
    af46:	pop	{r4, pc}
    af48:	.word	0x401f4400
    af4c:	.word	0x0098967f
    af50:	.word	0x20000cf0

0000af54 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    af54:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    af56:	ldr	r4, [pc, #132]	; (afdc <yield+0x88>)
    af58:	ldrb	r3, [r4, #0]
    af5a:	cbnz	r3, af7e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    af5c:	ldr	r3, [pc, #128]	; (afe0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    af5e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    af60:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    af62:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    af64:	cbnz	r3, afae <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    af66:	ldr	r3, [pc, #124]	; (afe4 <yield+0x90>)
    af68:	ldrb	r3, [r3, #0]
    af6a:	cmp	r3, #0
    af6c:	bne.n	afc2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    af6e:	ldr	r3, [pc, #120]	; (afe8 <yield+0x94>)

	running = 0;
    af70:	movs	r1, #0
    af72:	ldr	r2, [r3, #0]
    af74:	strb	r1, [r4, #0]
    af76:	cbz	r2, af7e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    af78:	mrs	r2, IPSR
		if (ipsr != 0) return;
    af7c:	cbz	r2, af80 <yield+0x2c>
    af7e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    af80:	mrs	r0, PRIMASK
		__disable_irq();
    af84:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    af86:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    af88:	cbz	r2, afc8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    af8a:	ldr	r4, [pc, #96]	; (afec <yield+0x98>)
    af8c:	ldrb	r1, [r4, #0]
    af8e:	cbnz	r1, afc8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    af90:	movs	r6, #1
		firstYield = first->_next;
    af92:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    af94:	strb	r6, [r4, #0]
		firstYield = first->_next;
    af96:	str	r5, [r3, #0]
		if (firstYield) {
    af98:	cbz	r5, afd0 <yield+0x7c>
			firstYield->_prev = nullptr;
    af9a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    af9c:	cbnz	r0, afa0 <yield+0x4c>
    af9e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    afa0:	movs	r5, #0
		(*(first->_function))(*first);
    afa2:	ldr	r3, [r2, #8]
    afa4:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    afa6:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    afa8:	blx	r3
		runningFromYield = false;
    afaa:	strb	r5, [r4, #0]
    afac:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    afae:	bl	a100 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    afb2:	cmp	r0, #0
    afb4:	beq.n	af66 <yield+0x12>
    afb6:	bl	b2c4 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    afba:	ldr	r3, [pc, #40]	; (afe4 <yield+0x90>)
    afbc:	ldrb	r3, [r3, #0]
    afbe:	cmp	r3, #0
    afc0:	beq.n	af6e <yield+0x1a>
    afc2:	bl	b6d0 <HardwareSerial::processSerialEvents()>
    afc6:	b.n	af6e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    afc8:	cmp	r0, #0
    afca:	bne.n	af7e <yield+0x2a>
    afcc:	cpsie	i
    afce:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    afd0:	ldr	r3, [pc, #28]	; (aff0 <yield+0x9c>)
    afd2:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    afd4:	cmp	r0, #0
    afd6:	bne.n	afa0 <yield+0x4c>
    afd8:	b.n	af9e <yield+0x4a>
    afda:	nop
    afdc:	.word	0x2000c1dd
    afe0:	.word	0x20000d06
    afe4:	.word	0x2000c22c
    afe8:	.word	0x2000c1f4
    afec:	.word	0x2000c1f8
    aff0:	.word	0x2000c1f0

0000aff4 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    aff4:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    aff6:	ldr	r4, [pc, #100]	; (b05c <random(unsigned long) [clone .part.0]+0x68>)
    aff8:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    affa:	cbz	r3, b040 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    affc:	ldr	r1, [pc, #96]	; (b060 <random(unsigned long) [clone .part.0]+0x6c>)
    affe:	asrs	r5, r3, #31
    b000:	ldr.w	lr, [pc, #104]	; b06c <random(unsigned long) [clone .part.0]+0x78>
    b004:	smull	r6, r7, r3, r1
    b008:	ldr	r6, [pc, #88]	; (b064 <random(unsigned long) [clone .part.0]+0x70>)
    b00a:	smull	r2, r1, r1, r3
    b00e:	adds	r2, r3, r7
    b010:	add	r1, r3
    b012:	rsb	r2, r5, r2, asr #16
    b016:	rsb	r1, r5, r1, asr #16
    b01a:	movw	r5, #16807	; 0x41a7
    b01e:	mls	r2, lr, r2, r3
    b022:	mul.w	r1, r6, r1
    b026:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    b02a:	cmp	r3, #0
    b02c:	bge.n	b04e <random(unsigned long) [clone .part.0]+0x5a>
    b02e:	mvn.w	r2, #2147483648	; 0x80000000
    b032:	add	r2, r3
    b034:	udiv	r3, r2, r0
	seed = x;
    b038:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b03a:	mls	r0, r0, r3, r2
    b03e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    b040:	ldr	r2, [pc, #36]	; (b068 <random(unsigned long) [clone .part.0]+0x74>)
    b042:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b046:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b048:	mls	r0, r0, r3, r2
    b04c:	pop	{r4, r5, r6, r7, pc}
    b04e:	mov	r2, r3
    b050:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b054:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b056:	mls	r0, r0, r3, r2
    b05a:	pop	{r4, r5, r6, r7, pc}
    b05c:	.word	0x2000c1e0
    b060:	.word	0x834e0b5f
    b064:	.word	0xfffff4ec
    b068:	.word	0x1f0cce42
    b06c:	.word	0x0001f31d

0000b070 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    b070:	cbz	r0, b076 <randomSeed(unsigned long)+0x6>
    b072:	ldr	r3, [pc, #4]	; (b078 <randomSeed(unsigned long)+0x8>)
    b074:	str	r0, [r3, #0]
    b076:	bx	lr
    b078:	.word	0x2000c1e0

0000b07c <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    b07c:	cbz	r0, b082 <random(unsigned long)+0x6>
    b07e:	b.w	aff4 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    b082:	bx	lr

0000b084 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    b084:	cmp	r0, r1
    b086:	bge.n	b096 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    b088:	push	{r4, lr}
    b08a:	mov	r4, r0
    b08c:	subs	r0, r1, r0
    b08e:	bl	aff4 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    b092:	add	r0, r4
}
    b094:	pop	{r4, pc}
    b096:	bx	lr

0000b098 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    b098:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b09a:	mrs	r2, PRIMASK
		__disable_irq();
    b09e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b0a0:	ldrb	r3, [r0, #29]
    b0a2:	cbnz	r3, b0b2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b0a4:	ldrb	r1, [r0, #28]
    b0a6:	cmp	r1, #1
    b0a8:	beq.n	b0bc <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b0aa:	cmp	r1, #3
    b0ac:	beq.n	b0d0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b0ae:	movs	r3, #1
    b0b0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b0b2:	cbnz	r2, b0b6 <EventResponder::triggerEventNotImmediate()+0x1e>
    b0b4:	cpsie	i
	}
	enableInterrupts(irq);
}
    b0b6:	ldr.w	r4, [sp], #4
    b0ba:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b0bc:	ldr	r4, [pc, #68]	; (b104 <EventResponder::triggerEventNotImmediate()+0x6c>)
    b0be:	ldr	r1, [r4, #0]
    b0c0:	cbz	r1, b0ec <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b0c2:	ldr	r1, [pc, #68]	; (b108 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b0c4:	str	r3, [r0, #20]
				_prev = lastYield;
    b0c6:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b0c8:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b0ca:	str	r3, [r0, #24]
				_prev->_next = this;
    b0cc:	str	r0, [r3, #20]
    b0ce:	b.n	b0ae <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b0d0:	ldr	r4, [pc, #56]	; (b10c <EventResponder::triggerEventNotImmediate()+0x74>)
    b0d2:	ldr	r1, [r4, #0]
    b0d4:	cbz	r1, b0f8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b0d6:	ldr	r1, [pc, #56]	; (b110 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b0d8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b0da:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b0dc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b0de:	str	r3, [r0, #24]
				_prev->_next = this;
    b0e0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b0e2:	ldr	r3, [pc, #48]	; (b114 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b0e4:	mov.w	r1, #268435456	; 0x10000000
    b0e8:	str	r1, [r3, #0]
    b0ea:	b.n	b0ae <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b0ec:	ldr	r3, [pc, #24]	; (b108 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b0ee:	str	r1, [r0, #20]
				_prev = nullptr;
    b0f0:	str	r1, [r0, #24]
				firstYield = this;
    b0f2:	str	r0, [r4, #0]
				lastYield = this;
    b0f4:	str	r0, [r3, #0]
    b0f6:	b.n	b0ae <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b0f8:	ldr	r3, [pc, #20]	; (b110 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b0fa:	str	r1, [r0, #20]
				_prev = nullptr;
    b0fc:	str	r1, [r0, #24]
				firstInterrupt = this;
    b0fe:	str	r0, [r4, #0]
				lastInterrupt = this;
    b100:	str	r0, [r3, #0]
    b102:	b.n	b0e2 <EventResponder::triggerEventNotImmediate()+0x4a>
    b104:	.word	0x2000c1f4
    b108:	.word	0x2000c1f0
    b10c:	.word	0x2000c1e4
    b110:	.word	0x2000c1e8
    b114:	.word	0xe000ed04

0000b118 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    b118:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b11a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b11c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b11e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b120:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b122:	beq.n	b12c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    b124:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b128:	b.w	b098 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b12c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    b12e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b132:	bx	r3

0000b134 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b134:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b136:	mrs	r1, PRIMASK
		__disable_irq();
    b13a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b13c:	ldr	r4, [pc, #48]	; (b170 <EventResponder::runFromInterrupt()+0x3c>)
    b13e:	ldr	r3, [r4, #0]
		if (first) {
    b140:	cbz	r3, b166 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b142:	ldr	r6, [pc, #48]	; (b174 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b144:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b146:	ldr	r2, [r3, #20]
    b148:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b14a:	cbz	r2, b16c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b14c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b14e:	cbnz	r1, b152 <EventResponder::runFromInterrupt()+0x1e>
    b150:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b152:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b154:	mov	r0, r3
    b156:	ldr	r3, [r3, #8]
    b158:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b15a:	mrs	r1, PRIMASK
		__disable_irq();
    b15e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b160:	ldr	r3, [r4, #0]
		if (first) {
    b162:	cmp	r3, #0
    b164:	bne.n	b146 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b166:	cbnz	r1, b16a <EventResponder::runFromInterrupt()+0x36>
    b168:	cpsie	i
    b16a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b16c:	str	r2, [r6, #0]
    b16e:	b.n	b14e <EventResponder::runFromInterrupt()+0x1a>
    b170:	.word	0x2000c1e4
    b174:	.word	0x2000c1e8

0000b178 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b178:	b.w	b134 <EventResponder::runFromInterrupt()>

0000b17c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    b17c:	ldr	r2, [pc, #96]	; (b1e0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    b17e:	push	{r4, r5}
	if (listActive == nullptr) {
    b180:	ldr	r4, [r2, #0]
    b182:	cmp	r4, #0
    b184:	beq.n	b1d8 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    b186:	ldr	r3, [r0, #0]
    b188:	ldr	r1, [r4, #0]
    b18a:	cmp	r3, r1
    b18c:	bcs.n	b1ae <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b18e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    b190:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    b192:	str	r4, [r0, #8]
		_prev = nullptr;
    b194:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b196:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    b198:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    b19a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b19c:	movs	r3, #2
}
    b19e:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b1a0:	strb	r3, [r0, #20]
}
    b1a2:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    b1a4:	str	r3, [r0, #0]
    b1a6:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    b1a8:	ldr	r1, [r2, #0]
    b1aa:	cmp	r3, r1
    b1ac:	bcc.n	b1c0 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b1ae:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b1b0:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b1b2:	cmp	r2, #0
    b1b4:	bne.n	b1a4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    b1b6:	str	r2, [r0, #8]
		_prev = timer;
    b1b8:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b1ba:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    b1bc:	str	r0, [r4, #8]
    b1be:	b.n	b19c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b1c0:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    b1c2:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    b1c4:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    b1c6:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b1c8:	str	r5, [r0, #12]
				timer->_prev = this;
    b1ca:	str	r0, [r4, #12]
				_prev->_next = this;
    b1cc:	ldr	r1, [r0, #12]
    b1ce:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    b1d0:	str	r3, [r4, #0]
				_state = TimerActive;
    b1d2:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    b1d4:	pop	{r4, r5}
    b1d6:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    b1d8:	str	r4, [r0, #8]
		_prev = nullptr;
    b1da:	str	r4, [r0, #12]
		listActive = this;
    b1dc:	str	r0, [r2, #0]
    b1de:	b.n	b19c <MillisTimer::addToActiveList()+0x20>
    b1e0:	.word	0x2000c1ec

0000b1e4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    b1e4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    b1e6:	ldr	r6, [pc, #136]	; (b270 <MillisTimer::runFromTimer()+0x8c>)
    b1e8:	ldr	r4, [r6, #0]
	while (timer) {
    b1ea:	cbz	r4, b238 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b1ec:	ldr	r3, [r4, #0]
    b1ee:	cmp	r3, #0
    b1f0:	bne.n	b268 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    b1f2:	mov	r5, r3
    b1f4:	ldr	r7, [pc, #124]	; (b274 <MillisTimer::runFromTimer()+0x90>)
    b1f6:	b.n	b202 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    b1f8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b1fa:	cbz	r4, b238 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b1fc:	ldr	r3, [r4, #0]
    b1fe:	cmp	r3, #0
    b200:	bne.n	b268 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    b202:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    b204:	cbz	r3, b208 <MillisTimer::runFromTimer()+0x24>
    b206:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    b208:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    b20a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b20c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    b20e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b210:	ldr	r3, [r3, #0]
    b212:	cmp	r3, r7
    b214:	bne.n	b25a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b216:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b218:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b21a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b21c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    b21e:	beq.n	b262 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b220:	bl	b098 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    b224:	ldr	r3, [r4, #4]
    b226:	cmp	r3, #0
    b228:	beq.n	b1f8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    b22a:	str	r3, [r4, #0]
				timer->addToActiveList();
    b22c:	mov	r0, r4
    b22e:	bl	b17c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    b232:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b234:	cmp	r4, #0
    b236:	bne.n	b1fc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b238:	mrs	r3, PRIMASK
		__disable_irq();
    b23c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b23e:	ldr	r2, [pc, #56]	; (b278 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b240:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b242:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b244:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    b246:	cbnz	r3, b24a <MillisTimer::runFromTimer()+0x66>
    b248:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    b24a:	cbz	r0, b258 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    b24c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    b24e:	bl	b17c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    b252:	mov	r0, r4
    b254:	cmp	r0, #0
    b256:	bne.n	b24c <MillisTimer::runFromTimer()+0x68>
    b258:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b25a:	mov	r2, r4
    b25c:	movs	r1, #0
    b25e:	blx	r3
    b260:	b.n	b224 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b262:	ldr	r3, [r0, #8]
    b264:	blx	r3
    b266:	b.n	b224 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    b268:	subs	r3, #1
    b26a:	str	r3, [r4, #0]
			break;
    b26c:	b.n	b238 <MillisTimer::runFromTimer()+0x54>
    b26e:	nop
    b270:	.word	0x2000c1ec
    b274:	.word	0x0000b119
    b278:	.word	0x2000c1fc

0000b27c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b27c:	ldr	r2, [pc, #16]	; (b290 <systick_isr+0x14>)
    b27e:	ldr	r3, [pc, #20]	; (b294 <systick_isr+0x18>)
    b280:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b282:	ldr	r2, [pc, #20]	; (b298 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b284:	str	r1, [r3, #0]
	systick_millis_count++;
    b286:	ldr	r3, [r2, #0]
    b288:	adds	r3, #1
    b28a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    b28c:	b.w	b1e4 <MillisTimer::runFromTimer()>
    b290:	.word	0xe0001004
    b294:	.word	0x2000c1d4
    b298:	.word	0x2000c1d8

0000b29c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b29c:	b.w	a114 <usb_serial_flush_input>

0000b2a0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b2a0:	b.w	a0dc <usb_serial_peekchar>

0000b2a4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    b2a4:	b.w	a090 <usb_serial_getchar>

0000b2a8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b2a8:	b.w	a100 <usb_serial_available>

0000b2ac <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b2ac:	b.w	a1e0 <usb_serial_flush_output>

0000b2b0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b2b0:	b.w	a194 <usb_serial_write_buffer_free>

0000b2b4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b2b4:	mov	r0, r1
    b2b6:	mov	r1, r2
    b2b8:	b.w	a17c <usb_serial_write>

0000b2bc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b2bc:	mov	r0, r1
    b2be:	b.w	a150 <usb_serial_putchar>
    b2c2:	nop

0000b2c4 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    b2c4:	ldr	r3, [pc, #4]	; (b2cc <serialEvent()+0x8>)
    b2c6:	movs	r2, #0
    b2c8:	strb	r2, [r3, #0]
    b2ca:	bx	lr
    b2cc:	.word	0x20000d06

0000b2d0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b2d0:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    b2d2:	ldr	r4, [pc, #24]	; (b2ec <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b2d4:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b2d6:	ldr	r3, [r0, #0]
    b2d8:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b2da:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    b2dc:	add	r1, sp, #4
    b2de:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b2e0:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    b2e4:	blx	r3
}
    b2e6:	add	sp, #8
    b2e8:	pop	{r4, pc}
    b2ea:	nop
    b2ec:	.word	0x200007bc

0000b2f0 <operator new(unsigned int)>:
    b2f0:	b.w	ba0c <malloc>

0000b2f4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    b2f4:	movs	r0, #4
    b2f6:	mov	r1, lr
    b2f8:	tst	r0, r1
    b2fa:	beq.n	b304 <_MSP>
    b2fc:	mrs	r0, PSP
    b300:	b.w	b30c <HardFault_HandlerC>

0000b304 <_MSP>:
    b304:	mrs	r0, MSP
    b308:	b.w	b30c <HardFault_HandlerC>

0000b30c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b30c:	ldr	r3, [pc, #108]	; (b37c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    b30e:	movs	r1, #5
    b310:	ldr	r2, [pc, #108]	; (b380 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    b312:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    b314:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    b316:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    b31a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    b31c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    b320:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b322:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    b324:	ldr	r4, [pc, #92]	; (b384 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b326:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    b328:	ldr	r0, [pc, #92]	; (b388 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b32a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    b32c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    b330:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    b334:	ldr	r3, [r4, #0]
    b336:	cmp	r3, r0
    b338:	bls.n	b340 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    b33a:	ldr	r0, [pc, #80]	; (b38c <HardFault_HandlerC+0x80>)
    b33c:	bl	a24c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    b340:	ldr	r5, [pc, #56]	; (b37c <HardFault_HandlerC+0x70>)
    b342:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    b344:	movs	r0, #0
    b346:	ldr	r2, [pc, #72]	; (b390 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    b348:	ldr	r1, [pc, #72]	; (b394 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    b34a:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    b34e:	str	r0, [sp, #4]
    b350:	ldr	r3, [sp, #4]
    b352:	cmp	r3, r2
    b354:	bhi.n	b362 <HardFault_HandlerC+0x56>
    b356:	ldr	r3, [sp, #4]
    b358:	adds	r3, #1
    b35a:	str	r3, [sp, #4]
    b35c:	ldr	r3, [sp, #4]
    b35e:	cmp	r3, r2
    b360:	bls.n	b356 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    b362:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    b366:	str	r0, [sp, #4]
    b368:	ldr	r3, [sp, #4]
    b36a:	cmp	r3, r1
    b36c:	bhi.n	b34a <HardFault_HandlerC+0x3e>
    b36e:	ldr	r3, [sp, #4]
    b370:	adds	r3, #1
    b372:	str	r3, [sp, #4]
    b374:	ldr	r3, [sp, #4]
    b376:	cmp	r3, r1
    b378:	bls.n	b36e <HardFault_HandlerC+0x62>
    b37a:	b.n	b34a <HardFault_HandlerC+0x3e>
    b37c:	.word	0x401bc000
    b380:	.word	0x401f8000
    b384:	.word	0x20000c54
    b388:	.word	0x23c345ff
    b38c:	.word	0x11e1a300
    b390:	.word	0x000f423f
    b394:	.word	0x0089543f

0000b398 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    b398:	ldr	r2, [pc, #36]	; (b3c0 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    b39a:	push	{r3, lr}
        char *prev = __brkval;
    b39c:	ldr	r3, [r2, #0]
        if (incr != 0) {
    b39e:	cbz	r0, b3aa <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    b3a0:	add	r0, r3
    b3a2:	ldr	r1, [pc, #32]	; (b3c4 <_sbrk+0x2c>)
    b3a4:	cmp	r0, r1
    b3a6:	bhi.n	b3ae <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    b3a8:	str	r0, [r2, #0]
        }
        return prev;
}
    b3aa:	mov	r0, r3
    b3ac:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b3ae:	bl	b9b0 <__errno>
    b3b2:	movs	r2, #12
                        return (void *)-1;
    b3b4:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b3b8:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b3ba:	mov	r0, r3
    b3bc:	pop	{r3, pc}
    b3be:	nop
    b3c0:	.word	0x20000d18
    b3c4:	.word	0x20280000

0000b3c8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b3c8:	push	{r4, r5, r6, r7}
    b3ca:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    b3cc:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b3ce:	mov	r7, r6
    b3d0:	b.n	b3d4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b3d2:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b3d4:	udiv	r3, r0, r2
    b3d8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b3dc:	add.w	r4, r0, #55	; 0x37
    b3e0:	cmp	r0, #9
    b3e2:	add.w	r0, r0, #48	; 0x30
    b3e6:	uxtb	r4, r4
    b3e8:	it	ls
    b3ea:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    b3ec:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b3ee:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    b3f2:	cmp	r3, #0
    b3f4:	bne.n	b3d2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b3f6:	adds	r2, r1, r5
    b3f8:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b3fa:	cbz	r5, b410 <ultoa+0x48>
    b3fc:	adds	r3, #1
		t = buf[j];
    b3fe:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    b402:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b404:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    b406:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b408:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b40a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b40e:	blt.n	b3fc <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b410:	mov	r0, r1
    b412:	pop	{r4, r5, r6, r7}
    b414:	bx	lr
    b416:	nop

0000b418 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b418:	ldr	r0, [pc, #656]	; (b6ac <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b41a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b41e:	ldr	r3, [pc, #656]	; (b6b0 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b420:	ldr	r2, [r0, #120]	; 0x78
    b422:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    b426:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b428:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b42a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b42c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b430:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b434:	ldr	r4, [pc, #636]	; (b6b4 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b436:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b43a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b43c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b440:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b442:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b444:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b448:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b44c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b450:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b454:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b458:	ldrh.w	r0, [r3, #392]	; 0x188
    b45c:	uxth	r0, r0
    b45e:	orr.w	r0, r0, #240	; 0xf0
    b462:	strh.w	r0, [r3, #392]	; 0x188
    b466:	add.w	r0, r1, r1, lsl #1
    b46a:	ldr	r3, [pc, #580]	; (b6b0 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    b46c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b46e:	movs	r5, #0
    b470:	lsls	r0, r0, #5
    b472:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b474:	cmp	r1, #4
    b476:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b478:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b47c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    b47e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b480:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b482:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b484:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b486:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b488:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b48a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b48c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b48e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b490:	bne.n	b466 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b492:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b496:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b49a:	ldr	r3, [pc, #540]	; (b6b8 <pwm_init+0x2a0>)
    b49c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4a0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b4a2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b4a4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b4a8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4aa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b4ae:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4b2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b4b6:	ldrh.w	r0, [r4, #392]	; 0x188
    b4ba:	uxth	r0, r0
    b4bc:	orr.w	r0, r0, #3840	; 0xf00
    b4c0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b4c4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b4c8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b4cc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b4d0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b4d4:	ldrh.w	r0, [r3, #392]	; 0x188
    b4d8:	uxth	r0, r0
    b4da:	orr.w	r0, r0, #240	; 0xf0
    b4de:	strh.w	r0, [r3, #392]	; 0x188
    b4e2:	add.w	r0, r1, r1, lsl #1
    b4e6:	ldr	r3, [pc, #464]	; (b6b8 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    b4e8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b4ea:	movs	r5, #0
    b4ec:	lsls	r0, r0, #5
    b4ee:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b4f0:	cmp	r1, #4
    b4f2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b4f4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b4f6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b4fa:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b4fc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b4fe:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b500:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b502:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b504:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b506:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b508:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b50a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b50c:	bne.n	b4e2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b50e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b512:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b516:	ldr	r3, [pc, #420]	; (b6bc <pwm_init+0x2a4>)
    b518:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b51c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b51e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b520:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b524:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b526:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b52a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b52e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b532:	ldrh.w	r0, [r4, #392]	; 0x188
    b536:	uxth	r0, r0
    b538:	orr.w	r0, r0, #3840	; 0xf00
    b53c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b540:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b544:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b548:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b54c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b550:	ldrh.w	r0, [r3, #392]	; 0x188
    b554:	uxth	r0, r0
    b556:	orr.w	r0, r0, #240	; 0xf0
    b55a:	strh.w	r0, [r3, #392]	; 0x188
    b55e:	add.w	r0, r1, r1, lsl #1
    b562:	ldr	r3, [pc, #344]	; (b6bc <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    b564:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b566:	movs	r5, #0
    b568:	lsls	r0, r0, #5
    b56a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b56c:	cmp	r1, #4
    b56e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b570:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b572:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b576:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b578:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b57a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b57c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b57e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b580:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b582:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b584:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b586:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b588:	bne.n	b55e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b58a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b58e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b592:	ldr	r3, [pc, #300]	; (b6c0 <pwm_init+0x2a8>)
    b594:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b598:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b59a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b59c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b5a0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b5a2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b5a6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b5aa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b5ae:	ldrh.w	r0, [r4, #392]	; 0x188
    b5b2:	uxth	r0, r0
    b5b4:	orr.w	r0, r0, #3840	; 0xf00
    b5b8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b5bc:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b5c0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b5c4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b5c8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b5cc:	ldrh.w	r0, [r3, #392]	; 0x188
    b5d0:	uxth	r0, r0
    b5d2:	orr.w	r0, r0, #240	; 0xf0
    b5d6:	strh.w	r0, [r3, #392]	; 0x188
    b5da:	add.w	r0, r1, r1, lsl #1
    b5de:	ldr	r3, [pc, #224]	; (b6c0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    b5e0:	adds	r1, #1
    b5e2:	lsls	r0, r0, #5
    b5e4:	mov	r4, r3
    b5e6:	cmp	r1, #4
    b5e8:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b5ea:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b5ec:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b5f0:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b5f2:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b5f4:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b5f6:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b5f8:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    b5fa:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b5fc:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b5fe:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b600:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b602:	bne.n	b5da <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b604:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b608:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b60a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b60c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b610:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b612:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b616:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b618:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b61c:	orrs	r3, r7
    b61e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b622:	ldrh.w	r3, [r4, #392]	; 0x188
    b626:	uxth	r3, r3
    b628:	orr.w	r3, r3, #3840	; 0xf00
    b62c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b630:	lsls	r0, r2, #5
    b632:	ldr	r3, [pc, #144]	; (b6c4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b634:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b636:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b638:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b63a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b63c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b63e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b640:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b642:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b646:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b648:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b64a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b64c:	bne.n	b630 <pwm_init+0x218>
    b64e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b650:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b652:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b656:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b65a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b65c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b660:	lsls	r0, r2, #5
    b662:	ldr	r3, [pc, #100]	; (b6c8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b664:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b666:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b668:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b66a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b66c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b66e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b670:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b672:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b674:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b676:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b678:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b67a:	bne.n	b660 <pwm_init+0x248>
    b67c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b67e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b680:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b684:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b688:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b68a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b68e:	lsls	r0, r2, #5
    b690:	ldr	r3, [pc, #56]	; (b6cc <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b692:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b694:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b696:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b698:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b69a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b69c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b69e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b6a0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b6a2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b6a4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b6a6:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b6a8:	bne.n	b68e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b6aa:	pop	{r4, r5, r6, r7, pc}
    b6ac:	.word	0x400fc000
    b6b0:	.word	0x403dc000
    b6b4:	.word	0xfc030000
    b6b8:	.word	0x403e0000
    b6bc:	.word	0x403e4000
    b6c0:	.word	0x403e8000
    b6c4:	.word	0x401dc000
    b6c8:	.word	0x401e0000
    b6cc:	.word	0x401e4000

0000b6d0 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    b6d0:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    b6d2:	ldr	r3, [pc, #28]	; (b6f0 <HardwareSerial::processSerialEvents()+0x20>)
    b6d4:	ldrb	r4, [r3, #0]
    b6d6:	cbz	r4, b6ec <HardwareSerial::processSerialEvents()+0x1c>
    b6d8:	ldr	r5, [pc, #24]	; (b6f4 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    b6da:	ldr.w	r3, [r5, #4]!
    b6de:	cmp	r3, #0
    b6e0:	beq.n	b6da <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    b6e2:	blx	r3
			if (--handlers_still_to_process == 0) return;
    b6e4:	subs	r3, r4, #1
    b6e6:	ands.w	r4, r3, #255	; 0xff
    b6ea:	bne.n	b6da <HardwareSerial::processSerialEvents()+0xa>
    b6ec:	pop	{r3, r4, r5, pc}
    b6ee:	nop
    b6f0:	.word	0x2000c22c
    b6f4:	.word	0x2000c20c

0000b6f8 <sqrt>:
    b6f8:	push	{lr}
    b6fa:	vpush	{d8}
    b6fe:	vmov.f64	d8, d0
    b702:	sub	sp, #44	; 0x2c
    b704:	bl	b7a0 <__ieee754_sqrt>
    b708:	ldr	r3, [pc, #140]	; (b798 <sqrt+0xa0>)
    b70a:	ldrsb.w	r3, [r3]
    b70e:	adds	r2, r3, #1
    b710:	beq.n	b72a <sqrt+0x32>
    b712:	vcmp.f64	d8, d8
    b716:	vmrs	APSR_nzcv, fpscr
    b71a:	bvs.n	b72a <sqrt+0x32>
    b71c:	vldr	d7, [pc, #112]	; b790 <sqrt+0x98>
    b720:	vcmpe.f64	d8, d7
    b724:	vmrs	APSR_nzcv, fpscr
    b728:	bmi.n	b734 <sqrt+0x3c>
    b72a:	add	sp, #44	; 0x2c
    b72c:	vpop	{d8}
    b730:	ldr.w	pc, [sp], #4
    b734:	movs	r2, #1
    b736:	ldr	r1, [pc, #100]	; (b79c <sqrt+0xa4>)
    b738:	str	r2, [sp, #0]
    b73a:	movs	r2, #0
    b73c:	vstr	d8, [sp, #16]
    b740:	vstr	d8, [sp, #8]
    b744:	str	r1, [sp, #4]
    b746:	str	r2, [sp, #32]
    b748:	cbz	r3, b770 <sqrt+0x78>
    b74a:	vdiv.f64	d6, d7, d7
    b74e:	cmp	r3, #2
    b750:	vstr	d6, [sp, #24]
    b754:	bne.n	b774 <sqrt+0x7c>
    b756:	bl	b9b0 <__errno>
    b75a:	movs	r3, #33	; 0x21
    b75c:	str	r3, [r0, #0]
    b75e:	ldr	r3, [sp, #32]
    b760:	cbnz	r3, b780 <sqrt+0x88>
    b762:	vldr	d0, [sp, #24]
    b766:	add	sp, #44	; 0x2c
    b768:	vpop	{d8}
    b76c:	ldr.w	pc, [sp], #4
    b770:	vstr	d7, [sp, #24]
    b774:	mov	r0, sp
    b776:	bl	b924 <matherr>
    b77a:	cmp	r0, #0
    b77c:	bne.n	b75e <sqrt+0x66>
    b77e:	b.n	b756 <sqrt+0x5e>
    b780:	bl	b9b0 <__errno>
    b784:	ldr	r3, [sp, #32]
    b786:	str	r3, [r0, #0]
    b788:	b.n	b762 <sqrt+0x6a>
    b78a:	nop
    b78c:	nop.w
	...
    b798:	.word	0x20000d1c
    b79c:	.word	0x200007c0

0000b7a0 <__ieee754_sqrt>:
    b7a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7a4:	sub	sp, #8
    b7a6:	vstr	d0, [sp]
    b7aa:	ldr	r1, [pc, #372]	; (b920 <__ieee754_sqrt+0x180>)
    b7ac:	ldr	r3, [sp, #4]
    b7ae:	ldr	r0, [sp, #0]
    b7b0:	mov	r4, r1
    b7b2:	ands	r1, r3
    b7b4:	cmp	r1, r4
    b7b6:	beq.w	b8ea <__ieee754_sqrt+0x14a>
    b7ba:	cmp	r3, #0
    b7bc:	mov	r2, r0
    b7be:	ble.n	b8b0 <__ieee754_sqrt+0x110>
    b7c0:	asrs	r7, r3, #20
    b7c2:	beq.w	b8ca <__ieee754_sqrt+0x12a>
    b7c6:	subw	r7, r7, #1023	; 0x3ff
    b7ca:	ubfx	r3, r3, #0, #20
    b7ce:	lsls	r1, r7, #31
    b7d0:	orr.w	r3, r3, #1048576	; 0x100000
    b7d4:	bmi.n	b8a6 <__ieee754_sqrt+0x106>
    b7d6:	add.w	r1, r3, r2, lsr #31
    b7da:	movs	r6, #0
    b7dc:	add	r3, r1
    b7de:	asrs	r7, r7, #1
    b7e0:	lsls	r2, r2, #1
    b7e2:	mov	lr, r6
    b7e4:	movs	r0, #22
    b7e6:	mov.w	r1, #2097152	; 0x200000
    b7ea:	add.w	r4, lr, r1
    b7ee:	cmp	r4, r3
    b7f0:	mov.w	r5, r2, lsr #31
    b7f4:	mov.w	r2, r2, lsl #1
    b7f8:	bgt.n	b802 <__ieee754_sqrt+0x62>
    b7fa:	subs	r3, r3, r4
    b7fc:	add.w	lr, r4, r1
    b800:	add	r6, r1
    b802:	subs	r0, #1
    b804:	add.w	r3, r5, r3, lsl #1
    b808:	mov.w	r1, r1, lsr #1
    b80c:	bne.n	b7ea <__ieee754_sqrt+0x4a>
    b80e:	mov	ip, r0
    b810:	movs	r4, #32
    b812:	mov.w	r1, #2147483648	; 0x80000000
    b816:	b.n	b82c <__ieee754_sqrt+0x8c>
    b818:	beq.n	b85c <__ieee754_sqrt+0xbc>
    b81a:	add.w	r5, r3, r2, lsr #31
    b81e:	subs	r4, #1
    b820:	mov.w	r1, r1, lsr #1
    b824:	add	r3, r5
    b826:	mov.w	r2, r2, lsl #1
    b82a:	beq.n	b86e <__ieee754_sqrt+0xce>
    b82c:	cmp	lr, r3
    b82e:	add.w	r5, r1, ip
    b832:	bge.n	b818 <__ieee754_sqrt+0x78>
    b834:	cmp	r5, #0
    b836:	add.w	ip, r5, r1
    b83a:	blt.n	b850 <__ieee754_sqrt+0xb0>
    b83c:	mov	r8, lr
    b83e:	cmp	r5, r2
    b840:	rsb	r3, lr, r3
    b844:	bls.n	b848 <__ieee754_sqrt+0xa8>
    b846:	subs	r3, #1
    b848:	subs	r2, r2, r5
    b84a:	add	r0, r1
    b84c:	mov	lr, r8
    b84e:	b.n	b81a <__ieee754_sqrt+0x7a>
    b850:	cmp.w	ip, #0
    b854:	blt.n	b83c <__ieee754_sqrt+0x9c>
    b856:	add.w	r8, lr, #1
    b85a:	b.n	b83e <__ieee754_sqrt+0x9e>
    b85c:	cmp	r5, r2
    b85e:	bhi.n	b896 <__ieee754_sqrt+0xf6>
    b860:	cmp	r5, #0
    b862:	add.w	ip, r5, r1
    b866:	blt.n	b8fa <__ieee754_sqrt+0x15a>
    b868:	mov	r8, r3
    b86a:	movs	r3, #0
    b86c:	b.n	b848 <__ieee754_sqrt+0xa8>
    b86e:	orrs	r3, r2
    b870:	bne.n	b89a <__ieee754_sqrt+0xfa>
    b872:	lsrs	r0, r0, #1
    b874:	asrs	r1, r6, #1
    b876:	lsls	r3, r6, #31
    b878:	add.w	r1, r1, #1069547520	; 0x3fc00000
    b87c:	add.w	r1, r1, #2097152	; 0x200000
    b880:	it	mi
    b882:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    b886:	add.w	r3, r1, r7, lsl #20
    b88a:	mov	r2, r0
    b88c:	vmov	d0, r2, r3
    b890:	add	sp, #8
    b892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b896:	mov	r3, lr
    b898:	b.n	b81a <__ieee754_sqrt+0x7a>
    b89a:	adds	r2, r0, #1
    b89c:	beq.n	b902 <__ieee754_sqrt+0x162>
    b89e:	and.w	r3, r0, #1
    b8a2:	add	r0, r3
    b8a4:	b.n	b872 <__ieee754_sqrt+0xd2>
    b8a6:	lsls	r3, r3, #1
    b8a8:	add.w	r3, r3, r2, lsr #31
    b8ac:	lsls	r2, r2, #1
    b8ae:	b.n	b7d6 <__ieee754_sqrt+0x36>
    b8b0:	bic.w	r1, r3, #2147483648	; 0x80000000
    b8b4:	orrs	r1, r0
    b8b6:	beq.n	b8f4 <__ieee754_sqrt+0x154>
    b8b8:	cbnz	r3, b912 <__ieee754_sqrt+0x172>
    b8ba:	mov	r7, r3
    b8bc:	lsrs	r3, r2, #11
    b8be:	subs	r7, #21
    b8c0:	lsls	r2, r2, #21
    b8c2:	cmp	r3, #0
    b8c4:	beq.n	b8bc <__ieee754_sqrt+0x11c>
    b8c6:	lsls	r5, r3, #11
    b8c8:	bmi.n	b908 <__ieee754_sqrt+0x168>
    b8ca:	movs	r1, #0
    b8cc:	b.n	b8d0 <__ieee754_sqrt+0x130>
    b8ce:	mov	r1, r0
    b8d0:	lsls	r3, r3, #1
    b8d2:	lsls	r4, r3, #11
    b8d4:	add.w	r0, r1, #1
    b8d8:	bpl.n	b8ce <__ieee754_sqrt+0x12e>
    b8da:	rsb	r4, r0, #32
    b8de:	lsr.w	r4, r2, r4
    b8e2:	orrs	r3, r4
    b8e4:	subs	r7, r7, r1
    b8e6:	lsls	r2, r0
    b8e8:	b.n	b7c6 <__ieee754_sqrt+0x26>
    b8ea:	vfma.f64	d0, d0, d0
    b8ee:	add	sp, #8
    b8f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8f4:	vldr	d0, [sp]
    b8f8:	b.n	b890 <__ieee754_sqrt+0xf0>
    b8fa:	cmp.w	ip, #0
    b8fe:	bge.n	b856 <__ieee754_sqrt+0xb6>
    b900:	b.n	b868 <__ieee754_sqrt+0xc8>
    b902:	adds	r6, #1
    b904:	mov	r0, r4
    b906:	b.n	b874 <__ieee754_sqrt+0xd4>
    b908:	movs	r4, #32
    b90a:	mov.w	r1, #4294967295
    b90e:	movs	r0, #0
    b910:	b.n	b8de <__ieee754_sqrt+0x13e>
    b912:	vldr	d7, [sp]
    b916:	vsub.f64	d7, d7, d7
    b91a:	vdiv.f64	d0, d7, d7
    b91e:	b.n	b890 <__ieee754_sqrt+0xf0>
    b920:	.word	0x7ff00000

0000b924 <matherr>:
    b924:	movs	r0, #0
    b926:	bx	lr

0000b928 <__aeabi_atexit>:
    b928:	mov	r3, r1
    b92a:	mov	r1, r0
    b92c:	mov	r0, r3
    b92e:	b.w	b9a4 <__cxa_atexit>
    b932:	nop

0000b934 <calloc>:
    b934:	ldr	r3, [pc, #8]	; (b940 <calloc+0xc>)
    b936:	mov	r2, r1
    b938:	mov	r1, r0
    b93a:	ldr	r0, [r3, #0]
    b93c:	b.w	b944 <_calloc_r>
    b940:	.word	0x20001148

0000b944 <_calloc_r>:
    b944:	push	{r4, lr}
    b946:	mul.w	r1, r2, r1
    b94a:	bl	ba2c <_malloc_r>
    b94e:	mov	r4, r0
    b950:	cbz	r0, b98a <_calloc_r+0x46>
    b952:	ldr.w	r2, [r0, #-4]
    b956:	bic.w	r2, r2, #3
    b95a:	subs	r2, #4
    b95c:	cmp	r2, #36	; 0x24
    b95e:	bhi.n	b992 <_calloc_r+0x4e>
    b960:	cmp	r2, #19
    b962:	bls.n	b98e <_calloc_r+0x4a>
    b964:	movs	r3, #0
    b966:	cmp	r2, #27
    b968:	str	r3, [r0, #0]
    b96a:	str	r3, [r0, #4]
    b96c:	bls.n	b99c <_calloc_r+0x58>
    b96e:	cmp	r2, #36	; 0x24
    b970:	str	r3, [r0, #8]
    b972:	str	r3, [r0, #12]
    b974:	iteee	ne
    b976:	addne.w	r2, r0, #16
    b97a:	streq	r3, [r0, #16]
    b97c:	streq	r3, [r0, #20]
    b97e:	addeq.w	r2, r0, #24
    b982:	movs	r3, #0
    b984:	str	r3, [r2, #0]
    b986:	str	r3, [r2, #4]
    b988:	str	r3, [r2, #8]
    b98a:	mov	r0, r4
    b98c:	pop	{r4, pc}
    b98e:	mov	r2, r0
    b990:	b.n	b982 <_calloc_r+0x3e>
    b992:	movs	r1, #0
    b994:	bl	bf9c <memset>
    b998:	mov	r0, r4
    b99a:	pop	{r4, pc}
    b99c:	add.w	r2, r0, #8
    b9a0:	b.n	b982 <_calloc_r+0x3e>
    b9a2:	nop

0000b9a4 <__cxa_atexit>:
    b9a4:	mov	r3, r2
    b9a6:	mov	r2, r1
    b9a8:	mov	r1, r0
    b9aa:	movs	r0, #2
    b9ac:	b.w	c064 <__register_exitproc>

0000b9b0 <__errno>:
    b9b0:	ldr	r3, [pc, #4]	; (b9b8 <__errno+0x8>)
    b9b2:	ldr	r0, [r3, #0]
    b9b4:	bx	lr
    b9b6:	nop
    b9b8:	.word	0x20001148

0000b9bc <__libc_init_array>:
    b9bc:	push	{r4, r5, r6, lr}
    b9be:	ldr	r6, [pc, #60]	; (b9fc <__libc_init_array+0x40>)
    b9c0:	ldr	r5, [pc, #60]	; (ba00 <__libc_init_array+0x44>)
    b9c2:	subs	r6, r6, r5
    b9c4:	asrs	r6, r6, #2
    b9c6:	it	ne
    b9c8:	movne	r4, #0
    b9ca:	beq.n	b9d8 <__libc_init_array+0x1c>
    b9cc:	adds	r4, #1
    b9ce:	ldr.w	r3, [r5], #4
    b9d2:	blx	r3
    b9d4:	cmp	r6, r4
    b9d6:	bne.n	b9cc <__libc_init_array+0x10>
    b9d8:	ldr	r6, [pc, #40]	; (ba04 <__libc_init_array+0x48>)
    b9da:	ldr	r5, [pc, #44]	; (ba08 <__libc_init_array+0x4c>)
    b9dc:	subs	r6, r6, r5
    b9de:	bl	c378 <___init_veneer>
    b9e2:	asrs	r6, r6, #2
    b9e4:	it	ne
    b9e6:	movne	r4, #0
    b9e8:	beq.n	b9f8 <__libc_init_array+0x3c>
    b9ea:	adds	r4, #1
    b9ec:	ldr.w	r3, [r5], #4
    b9f0:	blx	r3
    b9f2:	cmp	r6, r4
    b9f4:	bne.n	b9ea <__libc_init_array+0x2e>
    b9f6:	pop	{r4, r5, r6, pc}
    b9f8:	pop	{r4, r5, r6, pc}
    b9fa:	nop
    b9fc:	.word	0x60001600
    ba00:	.word	0x60001600
    ba04:	.word	0x6000160c
    ba08:	.word	0x60001600

0000ba0c <malloc>:
    ba0c:	ldr	r3, [pc, #8]	; (ba18 <malloc+0xc>)
    ba0e:	mov	r1, r0
    ba10:	ldr	r0, [r3, #0]
    ba12:	b.w	ba2c <_malloc_r>
    ba16:	nop
    ba18:	.word	0x20001148

0000ba1c <free>:
    ba1c:	ldr	r3, [pc, #8]	; (ba28 <free+0xc>)
    ba1e:	mov	r1, r0
    ba20:	ldr	r0, [r3, #0]
    ba22:	b.w	c1a4 <_free_r>
    ba26:	nop
    ba28:	.word	0x20001148

0000ba2c <_malloc_r>:
    ba2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba30:	add.w	r5, r1, #11
    ba34:	cmp	r5, #22
    ba36:	sub	sp, #12
    ba38:	mov	r6, r0
    ba3a:	bls.w	bb7c <_malloc_r+0x150>
    ba3e:	bics.w	r5, r5, #7
    ba42:	bmi.w	bbc4 <_malloc_r+0x198>
    ba46:	cmp	r1, r5
    ba48:	bhi.w	bbc4 <_malloc_r+0x198>
    ba4c:	bl	c038 <__malloc_lock>
    ba50:	cmp.w	r5, #504	; 0x1f8
    ba54:	bcc.w	bf90 <_malloc_r+0x564>
    ba58:	lsrs	r3, r5, #9
    ba5a:	beq.w	bbd2 <_malloc_r+0x1a6>
    ba5e:	cmp	r3, #4
    ba60:	bhi.w	bd6a <_malloc_r+0x33e>
    ba64:	lsrs	r0, r5, #6
    ba66:	add.w	lr, r0, #57	; 0x39
    ba6a:	mov.w	r3, lr, lsl #1
    ba6e:	adds	r0, #56	; 0x38
    ba70:	ldr	r7, [pc, #784]	; (bd84 <_malloc_r+0x358>)
    ba72:	add.w	r3, r7, r3, lsl #2
    ba76:	sub.w	r1, r3, #8
    ba7a:	ldr	r4, [r3, #4]
    ba7c:	cmp	r1, r4
    ba7e:	bne.n	ba90 <_malloc_r+0x64>
    ba80:	b.n	bbdc <_malloc_r+0x1b0>
    ba82:	cmp	r2, #0
    ba84:	bge.w	bbe0 <_malloc_r+0x1b4>
    ba88:	ldr	r4, [r4, #12]
    ba8a:	cmp	r1, r4
    ba8c:	beq.w	bbdc <_malloc_r+0x1b0>
    ba90:	ldr	r3, [r4, #4]
    ba92:	bic.w	r3, r3, #3
    ba96:	subs	r2, r3, r5
    ba98:	cmp	r2, #15
    ba9a:	ble.n	ba82 <_malloc_r+0x56>
    ba9c:	ldr	r1, [pc, #740]	; (bd84 <_malloc_r+0x358>)
    ba9e:	ldr	r4, [r7, #16]
    baa0:	add.w	lr, r1, #8
    baa4:	cmp	r4, lr
    baa6:	beq.w	be10 <_malloc_r+0x3e4>
    baaa:	ldr	r3, [r4, #4]
    baac:	bic.w	r3, r3, #3
    bab0:	subs	r2, r3, r5
    bab2:	cmp	r2, #15
    bab4:	bgt.w	bdea <_malloc_r+0x3be>
    bab8:	cmp	r2, #0
    baba:	str.w	lr, [r1, #20]
    babe:	str.w	lr, [r1, #16]
    bac2:	bge.w	bc02 <_malloc_r+0x1d6>
    bac6:	cmp.w	r3, #512	; 0x200
    baca:	bcs.w	bd9c <_malloc_r+0x370>
    bace:	lsrs	r3, r3, #3
    bad0:	add.w	ip, r3, #1
    bad4:	movs	r2, #1
    bad6:	asrs	r3, r3, #2
    bad8:	lsl.w	r3, r2, r3
    badc:	ldr	r2, [r1, #4]
    bade:	ldr.w	r8, [r1, ip, lsl #3]
    bae2:	str.w	r8, [r4, #8]
    bae6:	add.w	r9, r1, ip, lsl #3
    baea:	orrs	r2, r3
    baec:	sub.w	r3, r9, #8
    baf0:	str	r3, [r4, #12]
    baf2:	str	r2, [r1, #4]
    baf4:	str.w	r4, [r1, ip, lsl #3]
    baf8:	str.w	r4, [r8, #12]
    bafc:	asrs	r3, r0, #2
    bafe:	movs	r4, #1
    bb00:	lsls	r4, r3
    bb02:	cmp	r4, r2
    bb04:	bhi.w	bc1c <_malloc_r+0x1f0>
    bb08:	tst	r4, r2
    bb0a:	bne.n	bb1a <_malloc_r+0xee>
    bb0c:	bic.w	r0, r0, #3
    bb10:	lsls	r4, r4, #1
    bb12:	tst	r4, r2
    bb14:	add.w	r0, r0, #4
    bb18:	beq.n	bb10 <_malloc_r+0xe4>
    bb1a:	add.w	r9, r7, r0, lsl #3
    bb1e:	mov	ip, r9
    bb20:	mov	r8, r0
    bb22:	ldr.w	r1, [ip, #12]
    bb26:	cmp	ip, r1
    bb28:	bne.n	bb3a <_malloc_r+0x10e>
    bb2a:	b.n	be14 <_malloc_r+0x3e8>
    bb2c:	cmp	r2, #0
    bb2e:	bge.w	be34 <_malloc_r+0x408>
    bb32:	ldr	r1, [r1, #12]
    bb34:	cmp	ip, r1
    bb36:	beq.w	be14 <_malloc_r+0x3e8>
    bb3a:	ldr	r3, [r1, #4]
    bb3c:	bic.w	r3, r3, #3
    bb40:	subs	r2, r3, r5
    bb42:	cmp	r2, #15
    bb44:	ble.n	bb2c <_malloc_r+0x100>
    bb46:	mov	r4, r1
    bb48:	ldr.w	ip, [r1, #12]
    bb4c:	ldr.w	r8, [r4, #8]!
    bb50:	adds	r3, r1, r5
    bb52:	orr.w	r5, r5, #1
    bb56:	str	r5, [r1, #4]
    bb58:	orr.w	r1, r2, #1
    bb5c:	str.w	ip, [r8, #12]
    bb60:	mov	r0, r6
    bb62:	str.w	r8, [ip, #8]
    bb66:	str	r3, [r7, #20]
    bb68:	str	r3, [r7, #16]
    bb6a:	str.w	lr, [r3, #12]
    bb6e:	str.w	lr, [r3, #8]
    bb72:	str	r1, [r3, #4]
    bb74:	str	r2, [r3, r2]
    bb76:	bl	c03c <__malloc_unlock>
    bb7a:	b.n	bbbc <_malloc_r+0x190>
    bb7c:	cmp	r1, #16
    bb7e:	bhi.n	bbc4 <_malloc_r+0x198>
    bb80:	bl	c038 <__malloc_lock>
    bb84:	movs	r5, #16
    bb86:	movs	r3, #6
    bb88:	movs	r0, #2
    bb8a:	ldr	r7, [pc, #504]	; (bd84 <_malloc_r+0x358>)
    bb8c:	add.w	r3, r7, r3, lsl #2
    bb90:	sub.w	r2, r3, #8
    bb94:	ldr	r4, [r3, #4]
    bb96:	cmp	r4, r2
    bb98:	beq.w	be26 <_malloc_r+0x3fa>
    bb9c:	ldr	r3, [r4, #4]
    bb9e:	ldr	r1, [r4, #12]
    bba0:	ldr	r5, [r4, #8]
    bba2:	bic.w	r3, r3, #3
    bba6:	add	r3, r4
    bba8:	mov	r0, r6
    bbaa:	ldr	r2, [r3, #4]
    bbac:	str	r1, [r5, #12]
    bbae:	orr.w	r2, r2, #1
    bbb2:	str	r5, [r1, #8]
    bbb4:	str	r2, [r3, #4]
    bbb6:	bl	c03c <__malloc_unlock>
    bbba:	adds	r4, #8
    bbbc:	mov	r0, r4
    bbbe:	add	sp, #12
    bbc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbc4:	movs	r4, #0
    bbc6:	movs	r3, #12
    bbc8:	mov	r0, r4
    bbca:	str	r3, [r6, #0]
    bbcc:	add	sp, #12
    bbce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbd2:	movs	r3, #128	; 0x80
    bbd4:	mov.w	lr, #64	; 0x40
    bbd8:	movs	r0, #63	; 0x3f
    bbda:	b.n	ba70 <_malloc_r+0x44>
    bbdc:	mov	r0, lr
    bbde:	b.n	ba9c <_malloc_r+0x70>
    bbe0:	add	r3, r4
    bbe2:	ldr	r1, [r4, #12]
    bbe4:	ldr	r2, [r3, #4]
    bbe6:	ldr	r5, [r4, #8]
    bbe8:	orr.w	r2, r2, #1
    bbec:	str	r1, [r5, #12]
    bbee:	mov	r0, r6
    bbf0:	str	r5, [r1, #8]
    bbf2:	str	r2, [r3, #4]
    bbf4:	bl	c03c <__malloc_unlock>
    bbf8:	adds	r4, #8
    bbfa:	mov	r0, r4
    bbfc:	add	sp, #12
    bbfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc02:	add	r3, r4
    bc04:	mov	r0, r6
    bc06:	ldr	r2, [r3, #4]
    bc08:	orr.w	r2, r2, #1
    bc0c:	str	r2, [r3, #4]
    bc0e:	bl	c03c <__malloc_unlock>
    bc12:	adds	r4, #8
    bc14:	mov	r0, r4
    bc16:	add	sp, #12
    bc18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc1c:	ldr	r4, [r7, #8]
    bc1e:	ldr	r3, [r4, #4]
    bc20:	bic.w	r8, r3, #3
    bc24:	cmp	r8, r5
    bc26:	bcc.n	bc32 <_malloc_r+0x206>
    bc28:	rsb	r3, r5, r8
    bc2c:	cmp	r3, #15
    bc2e:	bgt.w	bd4a <_malloc_r+0x31e>
    bc32:	ldr	r3, [pc, #340]	; (bd88 <_malloc_r+0x35c>)
    bc34:	ldr.w	r9, [pc, #352]	; bd98 <_malloc_r+0x36c>
    bc38:	ldr	r2, [r3, #0]
    bc3a:	ldr.w	r3, [r9]
    bc3e:	adds	r3, #1
    bc40:	add	r2, r5
    bc42:	add.w	sl, r4, r8
    bc46:	beq.w	bf0a <_malloc_r+0x4de>
    bc4a:	add.w	r2, r2, #4096	; 0x1000
    bc4e:	adds	r2, #15
    bc50:	bic.w	r2, r2, #4080	; 0xff0
    bc54:	bic.w	r2, r2, #15
    bc58:	mov	r1, r2
    bc5a:	mov	r0, r6
    bc5c:	str	r2, [sp, #4]
    bc5e:	bl	c040 <_sbrk_r>
    bc62:	cmp.w	r0, #4294967295
    bc66:	mov	fp, r0
    bc68:	ldr	r2, [sp, #4]
    bc6a:	beq.w	bf1e <_malloc_r+0x4f2>
    bc6e:	cmp	sl, r0
    bc70:	bhi.w	be6c <_malloc_r+0x440>
    bc74:	ldr	r3, [pc, #276]	; (bd8c <_malloc_r+0x360>)
    bc76:	ldr	r1, [r3, #0]
    bc78:	cmp	sl, fp
    bc7a:	add	r1, r2
    bc7c:	str	r1, [r3, #0]
    bc7e:	beq.w	bf28 <_malloc_r+0x4fc>
    bc82:	ldr.w	r0, [r9]
    bc86:	ldr.w	lr, [pc, #272]	; bd98 <_malloc_r+0x36c>
    bc8a:	adds	r0, #1
    bc8c:	ittet	ne
    bc8e:	rsbne	sl, sl, fp
    bc92:	addne	r1, sl
    bc94:	streq.w	fp, [lr]
    bc98:	strne	r1, [r3, #0]
    bc9a:	ands.w	r1, fp, #7
    bc9e:	beq.w	bed0 <_malloc_r+0x4a4>
    bca2:	rsb	r0, r1, #8
    bca6:	rsb	r1, r1, #4096	; 0x1000
    bcaa:	add	fp, r0
    bcac:	adds	r1, #8
    bcae:	add	r2, fp
    bcb0:	ubfx	r2, r2, #0, #12
    bcb4:	rsb	r9, r2, r1
    bcb8:	mov	r1, r9
    bcba:	mov	r0, r6
    bcbc:	str	r3, [sp, #4]
    bcbe:	bl	c040 <_sbrk_r>
    bcc2:	adds	r3, r0, #1
    bcc4:	ldr	r3, [sp, #4]
    bcc6:	beq.w	bf48 <_malloc_r+0x51c>
    bcca:	rsb	r2, fp, r0
    bcce:	add	r2, r9
    bcd0:	orr.w	r2, r2, #1
    bcd4:	ldr	r1, [r3, #0]
    bcd6:	str.w	fp, [r7, #8]
    bcda:	add	r1, r9
    bcdc:	cmp	r4, r7
    bcde:	str.w	r2, [fp, #4]
    bce2:	str	r1, [r3, #0]
    bce4:	ldr.w	r9, [pc, #164]	; bd8c <_malloc_r+0x360>
    bce8:	beq.n	bd18 <_malloc_r+0x2ec>
    bcea:	cmp.w	r8, #15
    bcee:	bls.w	beec <_malloc_r+0x4c0>
    bcf2:	ldr	r2, [r4, #4]
    bcf4:	sub.w	r3, r8, #12
    bcf8:	bic.w	r3, r3, #7
    bcfc:	adds	r0, r4, r3
    bcfe:	and.w	r2, r2, #1
    bd02:	mov.w	lr, #5
    bd06:	orrs	r2, r3
    bd08:	cmp	r3, #15
    bd0a:	str	r2, [r4, #4]
    bd0c:	str.w	lr, [r0, #4]
    bd10:	str.w	lr, [r0, #8]
    bd14:	bhi.w	bf50 <_malloc_r+0x524>
    bd18:	ldr	r3, [pc, #116]	; (bd90 <_malloc_r+0x364>)
    bd1a:	ldr	r4, [r7, #8]
    bd1c:	ldr	r2, [r3, #0]
    bd1e:	cmp	r1, r2
    bd20:	it	hi
    bd22:	strhi	r1, [r3, #0]
    bd24:	ldr	r3, [pc, #108]	; (bd94 <_malloc_r+0x368>)
    bd26:	ldr	r2, [r3, #0]
    bd28:	cmp	r1, r2
    bd2a:	ldr	r2, [r4, #4]
    bd2c:	it	hi
    bd2e:	strhi	r1, [r3, #0]
    bd30:	bic.w	r2, r2, #3
    bd34:	cmp	r5, r2
    bd36:	sub.w	r3, r2, r5
    bd3a:	bhi.n	bd40 <_malloc_r+0x314>
    bd3c:	cmp	r3, #15
    bd3e:	bgt.n	bd4a <_malloc_r+0x31e>
    bd40:	mov	r0, r6
    bd42:	bl	c03c <__malloc_unlock>
    bd46:	movs	r4, #0
    bd48:	b.n	bbbc <_malloc_r+0x190>
    bd4a:	adds	r2, r4, r5
    bd4c:	orr.w	r3, r3, #1
    bd50:	orr.w	r5, r5, #1
    bd54:	str	r5, [r4, #4]
    bd56:	mov	r0, r6
    bd58:	str	r2, [r7, #8]
    bd5a:	str	r3, [r2, #4]
    bd5c:	bl	c03c <__malloc_unlock>
    bd60:	adds	r4, #8
    bd62:	mov	r0, r4
    bd64:	add	sp, #12
    bd66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd6a:	cmp	r3, #20
    bd6c:	bls.n	be52 <_malloc_r+0x426>
    bd6e:	cmp	r3, #84	; 0x54
    bd70:	bhi.w	bebc <_malloc_r+0x490>
    bd74:	lsrs	r0, r5, #12
    bd76:	add.w	lr, r0, #111	; 0x6f
    bd7a:	mov.w	r3, lr, lsl #1
    bd7e:	adds	r0, #110	; 0x6e
    bd80:	b.n	ba70 <_malloc_r+0x44>
    bd82:	nop
    bd84:	.word	0x2000114c
    bd88:	.word	0x2000c238
    bd8c:	.word	0x2000c23c
    bd90:	.word	0x2000c234
    bd94:	.word	0x2000c230
    bd98:	.word	0x20001558
    bd9c:	lsrs	r2, r3, #9
    bd9e:	cmp	r2, #4
    bda0:	bls.n	be60 <_malloc_r+0x434>
    bda2:	cmp	r2, #20
    bda4:	bhi.w	bf0e <_malloc_r+0x4e2>
    bda8:	add.w	r1, r2, #92	; 0x5c
    bdac:	lsls	r1, r1, #1
    bdae:	adds	r2, #91	; 0x5b
    bdb0:	add.w	ip, r7, r1, lsl #2
    bdb4:	ldr.w	r1, [r7, r1, lsl #2]
    bdb8:	ldr.w	r8, [pc, #476]	; bf98 <_malloc_r+0x56c>
    bdbc:	sub.w	ip, ip, #8
    bdc0:	cmp	ip, r1
    bdc2:	beq.w	bed6 <_malloc_r+0x4aa>
    bdc6:	ldr	r2, [r1, #4]
    bdc8:	bic.w	r2, r2, #3
    bdcc:	cmp	r3, r2
    bdce:	bcs.n	bdd6 <_malloc_r+0x3aa>
    bdd0:	ldr	r1, [r1, #8]
    bdd2:	cmp	ip, r1
    bdd4:	bne.n	bdc6 <_malloc_r+0x39a>
    bdd6:	ldr.w	ip, [r1, #12]
    bdda:	ldr	r2, [r7, #4]
    bddc:	str.w	ip, [r4, #12]
    bde0:	str	r1, [r4, #8]
    bde2:	str.w	r4, [ip, #8]
    bde6:	str	r4, [r1, #12]
    bde8:	b.n	bafc <_malloc_r+0xd0>
    bdea:	adds	r3, r4, r5
    bdec:	orr.w	r7, r2, #1
    bdf0:	orr.w	r5, r5, #1
    bdf4:	str	r5, [r4, #4]
    bdf6:	mov	r0, r6
    bdf8:	str	r3, [r1, #20]
    bdfa:	str	r3, [r1, #16]
    bdfc:	str.w	lr, [r3, #12]
    be00:	str.w	lr, [r3, #8]
    be04:	str	r7, [r3, #4]
    be06:	str	r2, [r3, r2]
    be08:	adds	r4, #8
    be0a:	bl	c03c <__malloc_unlock>
    be0e:	b.n	bbbc <_malloc_r+0x190>
    be10:	ldr	r2, [r1, #4]
    be12:	b.n	bafc <_malloc_r+0xd0>
    be14:	add.w	r8, r8, #1
    be18:	tst.w	r8, #3
    be1c:	add.w	ip, ip, #8
    be20:	bne.w	bb22 <_malloc_r+0xf6>
    be24:	b.n	be88 <_malloc_r+0x45c>
    be26:	ldr	r4, [r3, #12]
    be28:	cmp	r3, r4
    be2a:	it	eq
    be2c:	addeq	r0, #2
    be2e:	beq.w	ba9c <_malloc_r+0x70>
    be32:	b.n	bb9c <_malloc_r+0x170>
    be34:	add	r3, r1
    be36:	mov	r4, r1
    be38:	ldr	r2, [r3, #4]
    be3a:	ldr	r1, [r1, #12]
    be3c:	ldr.w	r5, [r4, #8]!
    be40:	orr.w	r2, r2, #1
    be44:	str	r2, [r3, #4]
    be46:	mov	r0, r6
    be48:	str	r1, [r5, #12]
    be4a:	str	r5, [r1, #8]
    be4c:	bl	c03c <__malloc_unlock>
    be50:	b.n	bbbc <_malloc_r+0x190>
    be52:	add.w	lr, r3, #92	; 0x5c
    be56:	add.w	r0, r3, #91	; 0x5b
    be5a:	mov.w	r3, lr, lsl #1
    be5e:	b.n	ba70 <_malloc_r+0x44>
    be60:	lsrs	r2, r3, #6
    be62:	add.w	r1, r2, #57	; 0x39
    be66:	lsls	r1, r1, #1
    be68:	adds	r2, #56	; 0x38
    be6a:	b.n	bdb0 <_malloc_r+0x384>
    be6c:	cmp	r4, r7
    be6e:	ldr	r3, [pc, #296]	; (bf98 <_malloc_r+0x56c>)
    be70:	beq.w	bc74 <_malloc_r+0x248>
    be74:	ldr	r4, [r3, #8]
    be76:	ldr	r2, [r4, #4]
    be78:	bic.w	r2, r2, #3
    be7c:	b.n	bd34 <_malloc_r+0x308>
    be7e:	ldr.w	r3, [r9], #-8
    be82:	cmp	r9, r3
    be84:	bne.w	bf8c <_malloc_r+0x560>
    be88:	tst.w	r0, #3
    be8c:	add.w	r0, r0, #4294967295
    be90:	bne.n	be7e <_malloc_r+0x452>
    be92:	ldr	r3, [r7, #4]
    be94:	bic.w	r3, r3, r4
    be98:	str	r3, [r7, #4]
    be9a:	lsls	r4, r4, #1
    be9c:	cmp	r4, r3
    be9e:	bhi.w	bc1c <_malloc_r+0x1f0>
    bea2:	cmp	r4, #0
    bea4:	beq.w	bc1c <_malloc_r+0x1f0>
    bea8:	tst	r4, r3
    beaa:	mov	r0, r8
    beac:	bne.w	bb1a <_malloc_r+0xee>
    beb0:	lsls	r4, r4, #1
    beb2:	tst	r4, r3
    beb4:	add.w	r0, r0, #4
    beb8:	beq.n	beb0 <_malloc_r+0x484>
    beba:	b.n	bb1a <_malloc_r+0xee>
    bebc:	cmp.w	r3, #340	; 0x154
    bec0:	bhi.n	bef4 <_malloc_r+0x4c8>
    bec2:	lsrs	r0, r5, #15
    bec4:	add.w	lr, r0, #120	; 0x78
    bec8:	mov.w	r3, lr, lsl #1
    becc:	adds	r0, #119	; 0x77
    bece:	b.n	ba70 <_malloc_r+0x44>
    bed0:	mov.w	r1, #4096	; 0x1000
    bed4:	b.n	bcae <_malloc_r+0x282>
    bed6:	movs	r1, #1
    bed8:	ldr.w	r3, [r8, #4]
    bedc:	asrs	r2, r2, #2
    bede:	lsl.w	r2, r1, r2
    bee2:	orrs	r2, r3
    bee4:	str.w	r2, [r8, #4]
    bee8:	mov	r1, ip
    beea:	b.n	bddc <_malloc_r+0x3b0>
    beec:	movs	r3, #1
    beee:	str.w	r3, [fp, #4]
    bef2:	b.n	bd40 <_malloc_r+0x314>
    bef4:	movw	r2, #1364	; 0x554
    bef8:	cmp	r3, r2
    befa:	bhi.n	bf3e <_malloc_r+0x512>
    befc:	lsrs	r0, r5, #18
    befe:	add.w	lr, r0, #125	; 0x7d
    bf02:	mov.w	r3, lr, lsl #1
    bf06:	adds	r0, #124	; 0x7c
    bf08:	b.n	ba70 <_malloc_r+0x44>
    bf0a:	adds	r2, #16
    bf0c:	b.n	bc58 <_malloc_r+0x22c>
    bf0e:	cmp	r2, #84	; 0x54
    bf10:	bhi.n	bf60 <_malloc_r+0x534>
    bf12:	lsrs	r2, r3, #12
    bf14:	add.w	r1, r2, #111	; 0x6f
    bf18:	lsls	r1, r1, #1
    bf1a:	adds	r2, #110	; 0x6e
    bf1c:	b.n	bdb0 <_malloc_r+0x384>
    bf1e:	ldr	r4, [r7, #8]
    bf20:	ldr	r2, [r4, #4]
    bf22:	bic.w	r2, r2, #3
    bf26:	b.n	bd34 <_malloc_r+0x308>
    bf28:	ubfx	r0, sl, #0, #12
    bf2c:	cmp	r0, #0
    bf2e:	bne.w	bc82 <_malloc_r+0x256>
    bf32:	add	r2, r8
    bf34:	ldr	r3, [r7, #8]
    bf36:	orr.w	r2, r2, #1
    bf3a:	str	r2, [r3, #4]
    bf3c:	b.n	bd18 <_malloc_r+0x2ec>
    bf3e:	movs	r3, #254	; 0xfe
    bf40:	mov.w	lr, #127	; 0x7f
    bf44:	movs	r0, #126	; 0x7e
    bf46:	b.n	ba70 <_malloc_r+0x44>
    bf48:	movs	r2, #1
    bf4a:	mov.w	r9, #0
    bf4e:	b.n	bcd4 <_malloc_r+0x2a8>
    bf50:	add.w	r1, r4, #8
    bf54:	mov	r0, r6
    bf56:	bl	c1a4 <_free_r>
    bf5a:	ldr.w	r1, [r9]
    bf5e:	b.n	bd18 <_malloc_r+0x2ec>
    bf60:	cmp.w	r2, #340	; 0x154
    bf64:	bhi.n	bf72 <_malloc_r+0x546>
    bf66:	lsrs	r2, r3, #15
    bf68:	add.w	r1, r2, #120	; 0x78
    bf6c:	lsls	r1, r1, #1
    bf6e:	adds	r2, #119	; 0x77
    bf70:	b.n	bdb0 <_malloc_r+0x384>
    bf72:	movw	r1, #1364	; 0x554
    bf76:	cmp	r2, r1
    bf78:	bhi.n	bf86 <_malloc_r+0x55a>
    bf7a:	lsrs	r2, r3, #18
    bf7c:	add.w	r1, r2, #125	; 0x7d
    bf80:	lsls	r1, r1, #1
    bf82:	adds	r2, #124	; 0x7c
    bf84:	b.n	bdb0 <_malloc_r+0x384>
    bf86:	movs	r1, #254	; 0xfe
    bf88:	movs	r2, #126	; 0x7e
    bf8a:	b.n	bdb0 <_malloc_r+0x384>
    bf8c:	ldr	r3, [r7, #4]
    bf8e:	b.n	be9a <_malloc_r+0x46e>
    bf90:	lsrs	r0, r5, #3
    bf92:	adds	r3, r0, #1
    bf94:	lsls	r3, r3, #1
    bf96:	b.n	bb8a <_malloc_r+0x15e>
    bf98:	.word	0x2000114c

0000bf9c <memset>:
    bf9c:	push	{r4, r5, r6}
    bf9e:	lsls	r4, r0, #30
    bfa0:	beq.n	c030 <memset+0x94>
    bfa2:	subs	r4, r2, #1
    bfa4:	cmp	r2, #0
    bfa6:	beq.n	c02c <memset+0x90>
    bfa8:	uxtb	r5, r1
    bfaa:	mov	r3, r0
    bfac:	b.n	bfb4 <memset+0x18>
    bfae:	subs	r2, r4, #1
    bfb0:	cbz	r4, c02c <memset+0x90>
    bfb2:	mov	r4, r2
    bfb4:	strb.w	r5, [r3], #1
    bfb8:	lsls	r2, r3, #30
    bfba:	bne.n	bfae <memset+0x12>
    bfbc:	cmp	r4, #3
    bfbe:	bls.n	c01e <memset+0x82>
    bfc0:	uxtb	r5, r1
    bfc2:	orr.w	r5, r5, r5, lsl #8
    bfc6:	cmp	r4, #15
    bfc8:	orr.w	r5, r5, r5, lsl #16
    bfcc:	bls.n	c002 <memset+0x66>
    bfce:	add.w	r2, r3, #16
    bfd2:	mov	r6, r4
    bfd4:	subs	r6, #16
    bfd6:	cmp	r6, #15
    bfd8:	str.w	r5, [r2, #-16]
    bfdc:	str.w	r5, [r2, #-12]
    bfe0:	str.w	r5, [r2, #-8]
    bfe4:	str.w	r5, [r2, #-4]
    bfe8:	add.w	r2, r2, #16
    bfec:	bhi.n	bfd4 <memset+0x38>
    bfee:	sub.w	r2, r4, #16
    bff2:	bic.w	r2, r2, #15
    bff6:	and.w	r4, r4, #15
    bffa:	adds	r2, #16
    bffc:	cmp	r4, #3
    bffe:	add	r3, r2
    c000:	bls.n	c01e <memset+0x82>
    c002:	mov	r6, r3
    c004:	mov	r2, r4
    c006:	subs	r2, #4
    c008:	cmp	r2, #3
    c00a:	str.w	r5, [r6], #4
    c00e:	bhi.n	c006 <memset+0x6a>
    c010:	subs	r2, r4, #4
    c012:	bic.w	r2, r2, #3
    c016:	adds	r2, #4
    c018:	add	r3, r2
    c01a:	and.w	r4, r4, #3
    c01e:	cbz	r4, c02c <memset+0x90>
    c020:	uxtb	r1, r1
    c022:	add	r4, r3
    c024:	strb.w	r1, [r3], #1
    c028:	cmp	r3, r4
    c02a:	bne.n	c024 <memset+0x88>
    c02c:	pop	{r4, r5, r6}
    c02e:	bx	lr
    c030:	mov	r4, r2
    c032:	mov	r3, r0
    c034:	b.n	bfbc <memset+0x20>
    c036:	nop

0000c038 <__malloc_lock>:
    c038:	bx	lr
    c03a:	nop

0000c03c <__malloc_unlock>:
    c03c:	bx	lr
    c03e:	nop

0000c040 <_sbrk_r>:
    c040:	push	{r3, r4, r5, lr}
    c042:	ldr	r4, [pc, #28]	; (c060 <_sbrk_r+0x20>)
    c044:	movs	r3, #0
    c046:	mov	r5, r0
    c048:	mov	r0, r1
    c04a:	str	r3, [r4, #0]
    c04c:	bl	b398 <_sbrk>
    c050:	adds	r3, r0, #1
    c052:	beq.n	c056 <_sbrk_r+0x16>
    c054:	pop	{r3, r4, r5, pc}
    c056:	ldr	r3, [r4, #0]
    c058:	cmp	r3, #0
    c05a:	beq.n	c054 <_sbrk_r+0x14>
    c05c:	str	r3, [r5, #0]
    c05e:	pop	{r3, r4, r5, pc}
    c060:	.word	0x2000e6c0

0000c064 <__register_exitproc>:
    c064:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c068:	ldr	r4, [pc, #148]	; (c100 <__register_exitproc+0x9c>)
    c06a:	ldr	r5, [r4, #0]
    c06c:	ldr.w	r4, [r5, #328]	; 0x148
    c070:	mov	r6, r0
    c072:	mov	r8, r1
    c074:	mov	sl, r2
    c076:	mov	r9, r3
    c078:	cbz	r4, c0ec <__register_exitproc+0x88>
    c07a:	ldr	r0, [r4, #4]
    c07c:	cmp	r0, #31
    c07e:	bgt.n	c0b0 <__register_exitproc+0x4c>
    c080:	adds	r3, r0, #1
    c082:	cbz	r6, c0a2 <__register_exitproc+0x3e>
    c084:	add.w	r5, r4, r0, lsl #2
    c088:	movs	r2, #1
    c08a:	str.w	sl, [r5, #136]	; 0x88
    c08e:	ldr.w	r1, [r4, #392]	; 0x188
    c092:	lsls	r2, r0
    c094:	orrs	r1, r2
    c096:	cmp	r6, #2
    c098:	str.w	r1, [r4, #392]	; 0x188
    c09c:	str.w	r9, [r5, #264]	; 0x108
    c0a0:	beq.n	c0e0 <__register_exitproc+0x7c>
    c0a2:	adds	r0, #2
    c0a4:	str	r3, [r4, #4]
    c0a6:	str.w	r8, [r4, r0, lsl #2]
    c0aa:	movs	r0, #0
    c0ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0b0:	ldr	r3, [pc, #80]	; (c104 <__register_exitproc+0xa0>)
    c0b2:	cbz	r3, c0f6 <__register_exitproc+0x92>
    c0b4:	mov.w	r0, #400	; 0x190
    c0b8:	bl	ba0c <malloc>
    c0bc:	mov	r4, r0
    c0be:	cbz	r0, c0f6 <__register_exitproc+0x92>
    c0c0:	ldr.w	r3, [r5, #328]	; 0x148
    c0c4:	movs	r7, #0
    c0c6:	stmia.w	r0, {r3, r7}
    c0ca:	str.w	r4, [r5, #328]	; 0x148
    c0ce:	mov	r0, r7
    c0d0:	movs	r3, #1
    c0d2:	str.w	r7, [r4, #392]	; 0x188
    c0d6:	str.w	r7, [r4, #396]	; 0x18c
    c0da:	cmp	r6, #0
    c0dc:	beq.n	c0a2 <__register_exitproc+0x3e>
    c0de:	b.n	c084 <__register_exitproc+0x20>
    c0e0:	ldr.w	r1, [r4, #396]	; 0x18c
    c0e4:	orrs	r2, r1
    c0e6:	str.w	r2, [r4, #396]	; 0x18c
    c0ea:	b.n	c0a2 <__register_exitproc+0x3e>
    c0ec:	add.w	r4, r5, #332	; 0x14c
    c0f0:	str.w	r4, [r5, #328]	; 0x148
    c0f4:	b.n	c07a <__register_exitproc+0x16>
    c0f6:	mov.w	r0, #4294967295
    c0fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0fe:	nop
    c100:	.word	0x200007c8
    c104:	.word	0x0000ba0d

0000c108 <_malloc_trim_r>:
    c108:	push	{r3, r4, r5, r6, r7, lr}
    c10a:	ldr	r7, [pc, #140]	; (c198 <_malloc_trim_r+0x90>)
    c10c:	mov	r4, r1
    c10e:	mov	r6, r0
    c110:	bl	c038 <__malloc_lock>
    c114:	ldr	r3, [r7, #8]
    c116:	ldr	r5, [r3, #4]
    c118:	bic.w	r5, r5, #3
    c11c:	subs	r1, r5, r4
    c11e:	addw	r1, r1, #4079	; 0xfef
    c122:	bic.w	r1, r1, #4080	; 0xff0
    c126:	bic.w	r1, r1, #15
    c12a:	sub.w	r4, r1, #4096	; 0x1000
    c12e:	cmp.w	r4, #4096	; 0x1000
    c132:	blt.n	c144 <_malloc_trim_r+0x3c>
    c134:	movs	r1, #0
    c136:	mov	r0, r6
    c138:	bl	c040 <_sbrk_r>
    c13c:	ldr	r3, [r7, #8]
    c13e:	add	r3, r5
    c140:	cmp	r0, r3
    c142:	beq.n	c14e <_malloc_trim_r+0x46>
    c144:	mov	r0, r6
    c146:	bl	c03c <__malloc_unlock>
    c14a:	movs	r0, #0
    c14c:	pop	{r3, r4, r5, r6, r7, pc}
    c14e:	negs	r1, r4
    c150:	mov	r0, r6
    c152:	bl	c040 <_sbrk_r>
    c156:	adds	r0, #1
    c158:	beq.n	c176 <_malloc_trim_r+0x6e>
    c15a:	ldr	r3, [pc, #64]	; (c19c <_malloc_trim_r+0x94>)
    c15c:	ldr	r2, [r7, #8]
    c15e:	ldr	r1, [r3, #0]
    c160:	subs	r5, r5, r4
    c162:	orr.w	r5, r5, #1
    c166:	mov	r0, r6
    c168:	subs	r1, r1, r4
    c16a:	str	r5, [r2, #4]
    c16c:	str	r1, [r3, #0]
    c16e:	bl	c03c <__malloc_unlock>
    c172:	movs	r0, #1
    c174:	pop	{r3, r4, r5, r6, r7, pc}
    c176:	movs	r1, #0
    c178:	mov	r0, r6
    c17a:	bl	c040 <_sbrk_r>
    c17e:	ldr	r2, [r7, #8]
    c180:	subs	r3, r0, r2
    c182:	cmp	r3, #15
    c184:	ble.n	c144 <_malloc_trim_r+0x3c>
    c186:	ldr	r4, [pc, #24]	; (c1a0 <_malloc_trim_r+0x98>)
    c188:	ldr	r1, [pc, #16]	; (c19c <_malloc_trim_r+0x94>)
    c18a:	ldr	r4, [r4, #0]
    c18c:	orr.w	r3, r3, #1
    c190:	subs	r0, r0, r4
    c192:	str	r3, [r2, #4]
    c194:	str	r0, [r1, #0]
    c196:	b.n	c144 <_malloc_trim_r+0x3c>
    c198:	.word	0x2000114c
    c19c:	.word	0x2000c23c
    c1a0:	.word	0x20001558

0000c1a4 <_free_r>:
    c1a4:	cmp	r1, #0
    c1a6:	beq.n	c234 <_free_r+0x90>
    c1a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1ac:	mov	r5, r1
    c1ae:	mov	r8, r0
    c1b0:	bl	c038 <__malloc_lock>
    c1b4:	ldr.w	r7, [r5, #-4]
    c1b8:	ldr	r1, [pc, #424]	; (c364 <_free_r+0x1c0>)
    c1ba:	bic.w	r3, r7, #1
    c1be:	sub.w	r4, r5, #8
    c1c2:	adds	r2, r4, r3
    c1c4:	ldr	r6, [r1, #8]
    c1c6:	ldr	r0, [r2, #4]
    c1c8:	cmp	r2, r6
    c1ca:	bic.w	r0, r0, #3
    c1ce:	beq.n	c296 <_free_r+0xf2>
    c1d0:	lsls	r6, r7, #31
    c1d2:	str	r0, [r2, #4]
    c1d4:	bmi.n	c1ee <_free_r+0x4a>
    c1d6:	ldr.w	r7, [r5, #-8]
    c1da:	subs	r4, r4, r7
    c1dc:	add.w	lr, r1, #8
    c1e0:	ldr	r5, [r4, #8]
    c1e2:	cmp	r5, lr
    c1e4:	add	r3, r7
    c1e6:	beq.n	c2c8 <_free_r+0x124>
    c1e8:	ldr	r7, [r4, #12]
    c1ea:	str	r7, [r5, #12]
    c1ec:	str	r5, [r7, #8]
    c1ee:	adds	r5, r2, r0
    c1f0:	ldr	r5, [r5, #4]
    c1f2:	lsls	r5, r5, #31
    c1f4:	bpl.n	c27c <_free_r+0xd8>
    c1f6:	orr.w	r2, r3, #1
    c1fa:	str	r2, [r4, #4]
    c1fc:	str	r3, [r4, r3]
    c1fe:	cmp.w	r3, #512	; 0x200
    c202:	bcs.n	c236 <_free_r+0x92>
    c204:	lsrs	r3, r3, #3
    c206:	adds	r2, r3, #1
    c208:	ldr	r5, [r1, #4]
    c20a:	ldr.w	r7, [r1, r2, lsl #3]
    c20e:	str	r7, [r4, #8]
    c210:	movs	r0, #1
    c212:	asrs	r3, r3, #2
    c214:	lsl.w	r3, r0, r3
    c218:	add.w	r0, r1, r2, lsl #3
    c21c:	orrs	r5, r3
    c21e:	subs	r0, #8
    c220:	str	r0, [r4, #12]
    c222:	str	r5, [r1, #4]
    c224:	str.w	r4, [r1, r2, lsl #3]
    c228:	str	r4, [r7, #12]
    c22a:	mov	r0, r8
    c22c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c230:	b.w	c03c <__malloc_unlock>
    c234:	bx	lr
    c236:	lsrs	r2, r3, #9
    c238:	cmp	r2, #4
    c23a:	bhi.n	c2e4 <_free_r+0x140>
    c23c:	lsrs	r2, r3, #6
    c23e:	add.w	r7, r2, #57	; 0x39
    c242:	lsls	r7, r7, #1
    c244:	add.w	r5, r2, #56	; 0x38
    c248:	add.w	r0, r1, r7, lsl #2
    c24c:	ldr.w	r2, [r1, r7, lsl #2]
    c250:	ldr	r1, [pc, #272]	; (c364 <_free_r+0x1c0>)
    c252:	subs	r0, #8
    c254:	cmp	r0, r2
    c256:	beq.n	c2f4 <_free_r+0x150>
    c258:	ldr	r1, [r2, #4]
    c25a:	bic.w	r1, r1, #3
    c25e:	cmp	r3, r1
    c260:	bcs.n	c268 <_free_r+0xc4>
    c262:	ldr	r2, [r2, #8]
    c264:	cmp	r0, r2
    c266:	bne.n	c258 <_free_r+0xb4>
    c268:	ldr	r0, [r2, #12]
    c26a:	str	r0, [r4, #12]
    c26c:	str	r2, [r4, #8]
    c26e:	str	r4, [r0, #8]
    c270:	str	r4, [r2, #12]
    c272:	mov	r0, r8
    c274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c278:	b.w	c03c <__malloc_unlock>
    c27c:	ldr	r5, [r2, #8]
    c27e:	ldr	r7, [pc, #232]	; (c368 <_free_r+0x1c4>)
    c280:	cmp	r5, r7
    c282:	add	r3, r0
    c284:	beq.n	c306 <_free_r+0x162>
    c286:	ldr	r0, [r2, #12]
    c288:	str	r0, [r5, #12]
    c28a:	orr.w	r2, r3, #1
    c28e:	str	r5, [r0, #8]
    c290:	str	r2, [r4, #4]
    c292:	str	r3, [r4, r3]
    c294:	b.n	c1fe <_free_r+0x5a>
    c296:	lsls	r7, r7, #31
    c298:	add	r3, r0
    c29a:	bmi.n	c2ac <_free_r+0x108>
    c29c:	ldr.w	r2, [r5, #-8]
    c2a0:	subs	r4, r4, r2
    c2a2:	add	r3, r2
    c2a4:	ldr	r0, [r4, #8]
    c2a6:	ldr	r2, [r4, #12]
    c2a8:	str	r2, [r0, #12]
    c2aa:	str	r0, [r2, #8]
    c2ac:	ldr	r2, [pc, #188]	; (c36c <_free_r+0x1c8>)
    c2ae:	ldr	r2, [r2, #0]
    c2b0:	orr.w	r0, r3, #1
    c2b4:	cmp	r3, r2
    c2b6:	str	r0, [r4, #4]
    c2b8:	str	r4, [r1, #8]
    c2ba:	bcc.n	c22a <_free_r+0x86>
    c2bc:	ldr	r3, [pc, #176]	; (c370 <_free_r+0x1cc>)
    c2be:	mov	r0, r8
    c2c0:	ldr	r1, [r3, #0]
    c2c2:	bl	c108 <_malloc_trim_r>
    c2c6:	b.n	c22a <_free_r+0x86>
    c2c8:	adds	r1, r2, r0
    c2ca:	ldr	r1, [r1, #4]
    c2cc:	lsls	r1, r1, #31
    c2ce:	bmi.n	c35a <_free_r+0x1b6>
    c2d0:	ldr	r1, [r2, #8]
    c2d2:	ldr	r2, [r2, #12]
    c2d4:	str	r2, [r1, #12]
    c2d6:	add	r3, r0
    c2d8:	orr.w	r0, r3, #1
    c2dc:	str	r1, [r2, #8]
    c2de:	str	r0, [r4, #4]
    c2e0:	str	r3, [r4, r3]
    c2e2:	b.n	c22a <_free_r+0x86>
    c2e4:	cmp	r2, #20
    c2e6:	bhi.n	c318 <_free_r+0x174>
    c2e8:	add.w	r7, r2, #92	; 0x5c
    c2ec:	lsls	r7, r7, #1
    c2ee:	add.w	r5, r2, #91	; 0x5b
    c2f2:	b.n	c248 <_free_r+0xa4>
    c2f4:	asrs	r2, r5, #2
    c2f6:	ldr	r3, [r1, #4]
    c2f8:	movs	r5, #1
    c2fa:	lsl.w	r2, r5, r2
    c2fe:	orrs	r3, r2
    c300:	str	r3, [r1, #4]
    c302:	mov	r2, r0
    c304:	b.n	c26a <_free_r+0xc6>
    c306:	orr.w	r2, r3, #1
    c30a:	str	r4, [r1, #20]
    c30c:	str	r4, [r1, #16]
    c30e:	str	r5, [r4, #12]
    c310:	str	r5, [r4, #8]
    c312:	str	r2, [r4, #4]
    c314:	str	r3, [r4, r3]
    c316:	b.n	c22a <_free_r+0x86>
    c318:	cmp	r2, #84	; 0x54
    c31a:	bhi.n	c32a <_free_r+0x186>
    c31c:	lsrs	r2, r3, #12
    c31e:	add.w	r7, r2, #111	; 0x6f
    c322:	lsls	r7, r7, #1
    c324:	add.w	r5, r2, #110	; 0x6e
    c328:	b.n	c248 <_free_r+0xa4>
    c32a:	cmp.w	r2, #340	; 0x154
    c32e:	bhi.n	c33e <_free_r+0x19a>
    c330:	lsrs	r2, r3, #15
    c332:	add.w	r7, r2, #120	; 0x78
    c336:	lsls	r7, r7, #1
    c338:	add.w	r5, r2, #119	; 0x77
    c33c:	b.n	c248 <_free_r+0xa4>
    c33e:	movw	r0, #1364	; 0x554
    c342:	cmp	r2, r0
    c344:	bhi.n	c354 <_free_r+0x1b0>
    c346:	lsrs	r2, r3, #18
    c348:	add.w	r7, r2, #125	; 0x7d
    c34c:	lsls	r7, r7, #1
    c34e:	add.w	r5, r2, #124	; 0x7c
    c352:	b.n	c248 <_free_r+0xa4>
    c354:	movs	r7, #254	; 0xfe
    c356:	movs	r5, #126	; 0x7e
    c358:	b.n	c248 <_free_r+0xa4>
    c35a:	orr.w	r2, r3, #1
    c35e:	str	r2, [r4, #4]
    c360:	str	r3, [r4, r3]
    c362:	b.n	c22a <_free_r+0x86>
    c364:	.word	0x2000114c
    c368:	.word	0x20001154
    c36c:	.word	0x20001554
    c370:	.word	0x2000c238
    c374:	.word	0x00000000

0000c378 <___init_veneer>:
    c378:	ldr.w	pc, [pc]	; c37c <___init_veneer+0x4>
    c37c:	.word	0x600015a9

Disassembly of section .fini:

0000c380 <_fini>:
    c380:	push	{r3, r4, r5, r6, r7, lr}
    c382:	nop
