
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000e920 l    d  .fini	00000000 .fini
0000e924 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001740 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000cf0c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000b490 l     F .text.itcm	0000005c schedule_transfer
0000b4ec l     F .text.itcm	00000030 run_callbacks
0000b51c l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000b5b4 l     F .text.itcm	00000544 isr
2000dec8 l     O .bss	00000004 endpointN_notify_mask
2000ded0 l     O .bss	00000004 endpoint0_notify_mask
2000ded4 l     O .bss	00000001 usb_reboot_timer
2000ded8 l     O .bss	00000008 endpoint0_setupdata
2000dee0 l     O .bss	00000008 reply_buffer
2000dee8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000e75c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000e760 l     O .bss	00000004 s_hotTemp
2000e764 l     O .bss	00000004 s_hot_ROOM
2000e768 l     O .bss	00000004 s_roomC_hotC
2000e76c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001740 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001744 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000327c l     F .text.itcm	00000958 Screen::iterate_animation() [clone .part.20]
000053c8 l     F .text.itcm	00004b40 _GLOBAL__sub_I_bri_level
20000144 l     O .data	00000400 dim_curve
20000938 l     O .data	00000240 background_B
20004dd4 l     O .bss	00001200 mask_A
20005fd4 l     O .bss	00001200 mask_B
20000b7c l     O .data	00000240 background_A
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
0000ac5c l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
0000a718 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000ad9c l     F .text.itcm	00000028 rx_event
0000adc4 l     F .text.itcm	00000070 usb_serial_flush_callback
0000ae34 l     F .text.itcm	0000015c usb_serial_write.part.1
2000d578 l     O .bss	00000700 txbuffer
2000dc78 l     O .bss	00000001 tx_noautoflush
2000dc79 l     O .bss	00000001 tx_head
2000dc7c l     O .bss	000000c0 rx_buffer
2000dd3c l     O .bss	00000006 rx_index
2000dd44 l     O .bss	00000006 rx_count
2000dd60 l     O .bss	00000060 rx_transfer
2000ddc0 l     O .bss	00000002 tx_available
2000dde0 l     O .bss	000000e0 tx_transfer
2000dec0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000bc94 l     F .text.itcm	00000068 flash_wait
0000bcfc l     F .text.itcm	000000d0 flash_write.constprop.0
2000def4 l     O .bss	0000001e sector_index
2000df12 l     O .bss	00000001 initialized
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000c168 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000dc8 l     O .data	0000000a qualifier_descriptor
20000dec l     O .data	00000043 config_descriptor
20000e30 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 WString.cpp
0000c900 l     F .text.itcm	0000001a String::operator=(char const*) [clone .part.3]
00000000 l    df *ABS*	00000000 yield.cpp
2000df39 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000cac0 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000df3c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
2000df40 l     O .bss	00000400 tx_buffer1
200008a0 l     O .data	0000005c UART6_Hardware
2000e340 l     O .bss	00000400 rx_buffer1
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000ef8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __memset_veneer
600015c0 l     F .text.progmem	00000008 __setup_veneer
600015c8 l     F .text.progmem	00000008 __delay_veneer
600015d0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015d8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015e0 l     F .text.progmem	00000008 __pwm_init_veneer
600015e8 l     F .text.progmem	00000008 __loop_veneer
600015f0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015f8 l     F .text.progmem	00000008 __yield_veneer
0000e918 l     F .text.itcm	00000008 ___init_veneer
0000b0b8 g     F .text.itcm	00000014 usb_serial_available
0000e3dc g     F .text.itcm	000000ba strcpy
0000ca20  w    F .text.itcm	000000a0 yield
0000d2d8 g     F .text.itcm	000000a8 sqrt
2000c0cc g     O .bss	00000001 didPulse
2000decc g     O .bss	00000004 usb_timer1_callback
20000dd4 g     O .data	00000018 usb_string_manufacturer_name_default
2000df1c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000aba4 g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
0000ce40 g     F .text.itcm	00000020 Print::println()
0000cb50 g     F .text.itcm	00000014 random(long, long)
20004dd0 g     O .bss	00000004 sinceCircle
0000ac04 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000dce4 g     F .text.itcm	00000002 __malloc_unlock
2000be28 g     O .bss	00000004 speed_offset
60001458 g     F .text.progmem	00000058 analog_init
0000bdcc g     F .text.itcm	0000004c eeprom_initialize
20000dc4 g     O .data	00000004 F_CPU_ACTUAL
0000c804 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000db7c g     F .text.itcm	000000c6 memmove
000010f8 g     F .text.itcm	00001bee regular_setup()
0000ccdc g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000c2ac g     F .text.itcm	00000038 HardwareSerial::peek()
2000e754 g     O .bss	00000001 EventResponder::runningFromYield
2000d4b4 g     O .bss	000000c4 Alarm
0000cdc8 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000d590 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000e740 g     O .bss	00000004 EventResponder::firstInterrupt
0000bc40 g     F .text.itcm	00000028 usb_transfer_status
20000ed8 g     O .data	00000001 usb_enable_serial_event_processing
20000e78 g     O .data	00000060 Serial1
0000cdac  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000590 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
0000e920 g       .text.itcm	00000000 _etext
0000aa94 g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001740 g       .bss	00000000 _sbss
0000a7a0 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
0000c290 g     F .text.itcm	0000001c HardwareSerial::available()
60001610 g       *ABS*	00000000 _stextload
00009ffc g     F .text.itcm	00000020 loop
20003bac g     O .bss	00001224 sat_automaton_B
2000c0ac g     O .bss	00000014 synapse_A
0000baf8 g     F .text.itcm	00000064 usb_config_rx
0000cb70  w    F .text.itcm	0000000c serialEvent1()
0000cc74 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000a84c g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000c6ac g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000e744 g     O .bss	00000004 EventResponder::lastInterrupt
0000ac68 g     F .text.itcm	00000134 memcpy
2000d4b0 g     O .bss	00000004 sinceIntro
0000c82c g     F .text.itcm	0000002c HardwareSerial::disableSerialEvents()
2000df18 g     O .bss	00000004 systick_millis_count
2000def0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00000b88 g     F .text.itcm	00000534 updateCircles()
20000dd4  w    O .data	00000018 usb_string_manufacturer_name
0000d5ec g     F .text.itcm	00000010 malloc
2000c098 g     O .bss	00000014 synapse_B
0000cc10  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
2000be2c g     O .bss	00000258 circles
60001268 g     F .text.progmem	000000ec usb_init
000005d0 g     F .text.itcm	000005b4 updateBeams()
2000e778 g     O .bss	00000004 __malloc_top_pad
0000bc68 g     F .text.itcm	0000002c rtc_set
20010280 g     O .bss	00000004 systick_safe_read
00003bd8 g     F .text.itcm	00001316 regular_animation()
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000934 g     O .data	00000000 .hidden __dso_handle
0000a7c4 g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000c868 g     F .text.itcm	0000002a String::reserve(unsigned int)
0000e0d8 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000b048 g     F .text.itcm	0000004c usb_serial_getchar
2000e7a4 g     O .bss	00000008 usb_cdc_line_coding
0000c18c g     F .text.itcm	0000000a digitalWrite
2000e74c g     O .bss	00000004 EventResponder::lastYield
00009f08 g     F .text.itcm	000000f4 readMessages()
2000c0c0 g     O .bss	00000004 sinceLastPulses
00004ef0 g     F .text.itcm	000004d4 ceremony_animation()
2000e774 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c198 g     F .text.itcm	00000080 pinMode
0000c9ec g     F .text.itcm	00000034 String::getBytes(unsigned char*, unsigned int, unsigned int) const
20009620 g     O .bss	00000010 readBuffer
20280000 g       .bss	00000000 _heap_end
2000c0c8 g     O .bss	00000004 implosionTimer
20002984 g     O .bss	00000001 isRegularAnimation
20000ef0 g     O .data	00000001 __fdlib_version
2000e750 g     O .bss	00000004 EventResponder::firstYield
20000930 g     O .data	00000004 _global_impure_ptr
0000dcf8 g     F .text.itcm	000003de _realloc_r
0000d59c g     F .text.itcm	00000050 __libc_init_array
0000cf14  w    F .text.itcm	0000008c HardFault_HandlerC
2000961c g     O .bss	00000001 screenFadeUpdateSwitcher
0000cd94  w    F .text.itcm	00000004 usb_serial_class::clear()
0000cfa0 g     F .text.itcm	00000030 _sbrk
6000ff3c g       *ABS*	00000000 _sdataload
2000e758 g     O .bss	00000004 MillisTimer::listWaiting
20000eec g     O .data	00000004 __brkval
2000dec1 g     O .bss	00000001 usb_cdc_line_rtsdtr
2000c08c g     O .bss	00000004 sinceBeam1
600015a8 g     F .text.progmem	00000000 _init
0000af90 g     F .text.itcm	00000002 usb_serial_reset
0000c858 g     F .text.itcm	0000000e String::~String()
0000be88 g     F .text.itcm	000001ac eeprom_write_byte
20010700 g       .bss	00000000 _ebss
0000c270 g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
0000c930 g     F .text.itcm	00000070 String::append(char const*, unsigned int)
2000c0c4 g     O .bss	00000004 randomSeedN
0000d514 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
200071d4 g     O .bss	00001224 bg_automaton_A
0000c894 g     F .text.itcm	00000042 String::copy(char const*, unsigned int)
0000a7fc g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
0000c5ec g     F .text.itcm	000000c0 HardwareSerial::write9bit(unsigned long)
2000f000 g     O .bss	00000020 endpoint0_transfer_data
0000d020 g     F .text.itcm	000002b8 pwm_init
0000c350 g     F .text.itcm	0000001a HardwareSerial::flush()
0000c858 g     F .text.itcm	0000000e String::~String()
600013f4 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000aaf0 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e7ac g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000bbf4 g     F .text.itcm	00000028 usb_transmit
0000cd74 g     F .text.itcm	00000020 systick_isr
20000edc g     O .data	00000010 Serial
0000cb64 g     F .text.itcm	0000000c IRQHandler_Serial1
2000df38 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
2000087c g     O .data	00000024 vtable for HardwareSerial
0000cdb4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000b094 g     F .text.itcm	00000024 usb_serial_peekchar
0000b204 g     F .text.itcm	0000028c set_arm_clock
2000df14 g     O .bss	00000004 systick_cycle_count
20000e60 g     O .data	00000016 usb_string_serial_number_default
0000e744 g     F .text.itcm	000001d0 _free_r
0000cda4  w    F .text.itcm	00000004 usb_serial_class::flush()
20001730 g     O .data	00000004 __malloc_sbrk_base
0000cd9c  w    F .text.itcm	00000004 usb_serial_class::read()
00000290 g     F .text.itcm	000000f4 newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])
0000bbc4 g     F .text.itcm	0000002e usb_prepare_transfer
0000cefc g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000dec4 g     O .bss	00000004 usb_timer0_callback
0000cdbc  w    F .text.itcm	0000000c serialEvent()
0000e604 g     F .text.itcm	000000a4 __register_exitproc
0000ac04 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000be18 g     F .text.itcm	00000070 eeprom_read_byte
0000b0cc g     F .text.itcm	0000003c usb_serial_flush_input
0000b108 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
0000e59c g     F .text.itcm	00000066 strncpy
2000e77c g     O .bss	00000028 __malloc_current_mallinfo
2000175c g     O .bss	00001224 grow_automaton_A
00000080  w    F .text.itcm	00000140 Screen::Screen()
0000dce8 g     F .text.itcm	00000010 realloc
00000388 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000d584 g     F .text.itcm	0000000c __cxa_atexit
20002988 g     O .bss	00001224 sat_automaton_A
0000cb7c g     F .text.itcm	00000014 serial_event_check_serial1()
0000cb48 g     F .text.itcm	00000008 random(unsigned long)
200008fc  w    O .data	00000028 vtable for usb_serial_class
0000c8d8 g     F .text.itcm	00000026 String::String(char const*)
200099cc g     O .bss	00000014 matrix_B
2000e748 g     O .bss	00000004 MillisTimer::listActive
20002985 g     O .bss	00000001 incomingByte
20001324 g     O .data	00000408 __malloc_av_
0000b198 g     F .text.itcm	0000006c usb_serial_flush_output
0000dce0 g     F .text.itcm	00000002 __malloc_lock
000010bc g     F .text.itcm	00000038 updateRandomSeed()
20010400 g     O .bss	000002c0 _VectorsRam
0000d524 g     F .text.itcm	0000005e _calloc_r
0000c9c0 g     F .text.itcm	0000002c String::equals(char const*) const
0000aba0 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
20000dbc g     O .data	00000004 bri_level
0000dc44 g     F .text.itcm	0000009a memset
2000e770 g     O .bss	00000004 __malloc_max_total_mem
000001c0 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
00002ce8 g     F .text.itcm	00000594 updateScreensFade()
0000d504 g     F .text.itcm	00000004 matherr
0000c218 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000d60c g     F .text.itcm	00000570 _malloc_r
0000cb90 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
200099b8 g     O .bss	00000014 matrix_A
0000c114 g     F .text.itcm	00000054 micros
0000e6a8 g     F .text.itcm	0000009c _malloc_trim_r
200099e0 g     O .bss	00001224 fg_automaton_A
20000e5c g     O .data	00000004 string0
0000b134 g     F .text.itcm	00000018 usb_serial_write
0000cda0  w    F .text.itcm	00000004 usb_serial_class::available()
0000e108 g     F .text.itcm	000002dc strcmp
0000abf8 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
20010000 g     O .bss	00000280 endpoint_queue_head
20000e44  w    O .data	00000016 usb_string_product_name
0000c054 g     F .text.itcm	000000c0 delay
0000e920 g     F .fini	00000000 _fini
0000c91c g     F .text.itcm	00000014 String::operator=(char const*)
60001020 g     O .text.progmem	0000000c BootData
0000cee0 g     F .text.itcm	00000016 Print::print(long)
2000c090 g     O .bss	00000004 sinceBeam2
200083f8 g     O .bss	00001224 bg_automaton_B
0000c8d8 g     F .text.itcm	00000026 String::String(char const*)
20001320 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
0000aa2c g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000cb3c g     F .text.itcm	0000000c randomSeed(unsigned long)
0000c6b0 g     F .text.itcm	00000152 HardwareSerial::IRQHandler()
0000a148 g     F .text.itcm	000005d0 setup
20000810 g     O .data	0000006c usb_descriptor_list
200097f4 g     O .bss	000001c4 screen_B
2000c28c g     O .bss	00001224 grow_automaton_B
2000c094 g     O .bss	00000004 sinceAutomatonInit
0000d380 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
2000c084 g     O .bss	00000004 sinceCircleUpdate
0000b14c g     F .text.itcm	0000004c usb_serial_write_buffer_free
2000ac04 g     O .bss	00001224 fg_automaton_B
20009630 g     O .bss	000001c4 screen_A
0000af94 g     F .text.itcm	000000b4 usb_serial_configure
20001740 g       .data	00000000 _edata
0000aa68 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000cda8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20000b78 g     O .data	00000004 freq_offset
0000c36c g     F .text.itcm	00000040 nvic_execution_priority()
0000aae4 g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000cfd0 g     F .text.itcm	0000004e ultoa
2000c088 g     O .bss	00000004 sinceBeamUpdate
2000c0d0 g     O .bss	000001b8 beams
0000cef8 g     F .text.itcm	00000004 operator new(unsigned int)
0000cc2c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
2000172c g     O .data	00000004 __malloc_trim_threshold
0000cd98  w    F .text.itcm	00000004 usb_serial_class::peek()
0000c2e4 g     F .text.itcm	0000006a HardwareSerial::read()
20002980 g     O .bss	00000004 numPulses
60001600 g       .text.progmem	00000000 __init_array_start
20000dc0 g     O .data	00000004 F_BUS_ACTUAL
0000aa68 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
2000c288 g     O .bss	00000001 didIntro
0000e4c0 g     F .text.itcm	000000dc strlen
20000e44 g     O .data	00000016 usb_string_product_name_default
0000a020 g     F .text.itcm	00000124 readAnimationType()
0000cdf4 g     F .text.itcm	0000004a Print::print(String const&)
60001354 g     F .text.progmem	000000a0 configure_cache
0000c034 g     F .text.itcm	0000001e eeprom_write_block
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000c3ac g     F .text.itcm	00000240 HardwareSerial::begin(unsigned long, unsigned short)
60001600 g       .text.progmem	00000000 __preinit_array_start
0000bc1c g     F .text.itcm	00000024 usb_receive
0000a780 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000c9a0 g     F .text.itcm	0000001e String::append(char)
0000a780 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00011670 g       *ABS*	00000000 _flashimagelen
0000d508 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000cc70 g     F .text.itcm	00000004 pendablesrvreq_isr
0000ce60 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000bb5c g     F .text.itcm	00000068 usb_config_tx
0000d5fc g     F .text.itcm	00000010 free
20000e60  w    O .data	00000016 usb_string_serial_number
00000080  w    F .text.itcm	00000140 Screen::Screen()



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`p.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	60001354 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	600013f4 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015d8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001458 <analog_init>
	pwm_init();
600011be:	bl	600015e0 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015d0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015c0 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015e8 <__loop_veneer>
		yield();
600011da:	bl	600015f8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000e920
600011f8:	.word	0x20000000
600011fc:	.word	0x6000ff3c
60001200:	.word	0x20001740
60001204:	.word	0x20001740
60001208:	.word	0x20010700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200103fc
60001214:	.word	0x0000cefd
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000cc71
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000cd75
6000124c:	.word	0xe0001004
60001250:	.word	0x2000df14
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000df18
60001264:	.word	0x20010400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015f0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015c8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015b8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20010000
60001348:	.word	0x20010400
6000134c:	.word	0x0000b5b5
60001350:	.word	0xe000e10c

60001354 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
60001354:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001356:	ldr	r2, [pc, #100]	; (600013bc <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001358:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000135a:	ldr	r3, [pc, #100]	; (600013c0 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000135c:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001360:	ldr	r0, [pc, #96]	; (600013c4 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001362:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001364:	ldr	r6, [pc, #96]	; (600013c8 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001366:	ldr	r5, [pc, #100]	; (600013cc <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001368:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000136a:	ldr	r7, [pc, #100]	; (600013d0 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000136c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001370:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001372:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001374:	ldr	r6, [pc, #92]	; (600013d4 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001376:	ldr	r5, [pc, #96]	; (600013d8 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001378:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000137a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000137c:	ldr	r7, [pc, #92]	; (600013dc <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000137e:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001380:	ldr	r6, [pc, #92]	; (600013e0 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001382:	ldr	r5, [pc, #96]	; (600013e4 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001384:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001386:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001388:	ldr	r7, [pc, #92]	; (600013e8 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000138a:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000138c:	ldr	r6, [pc, #92]	; (600013ec <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000138e:	ldr	r5, [pc, #96]	; (600013f0 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001390:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001392:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001394:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001398:	dsb	sy
	asm("isb");
6000139c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013a0:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013a4:	dsb	sy
	asm("isb");
600013a8:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013ac:	ldr.w	r3, [r2, #-136]
600013b0:	orr.w	r3, r3, #196608	; 0x30000
600013b4:	str.w	r3, [r2, #-136]
600013b8:	pop	{r4, r5, r6, r7, pc}
600013ba:	nop
600013bc:	.word	0xe000ed9c
600013c0:	.word	0xe000eda0
600013c4:	.word	0xe000ed94
600013c8:	.word	0x03080025
600013cc:	.word	0x00200011
600013d0:	.word	0x07020021
600013d4:	.word	0x20000012
600013d8:	.word	0x13080025
600013dc:	.word	0x20200013
600013e0:	.word	0x130b0027
600013e4:	.word	0x40000014
600013e8:	.word	0x13100033
600013ec:	.word	0x60000015
600013f0:	.word	0x070b002f

600013f4 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
600013f4:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	tst.w	r3, #2
60001414:	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	tst.w	r3, #2
60001422:	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	tst.w	r3, #8192	; 0x2000
60001428:	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	str	r5, [r2, #20]
			continue;
6000142c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	tst.w	r3, #4096	; 0x1000
60001432:	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	str	r6, [r2, #20]
			continue;
60001436:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	cmp	r3, #0
6000143a:	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	tst.w	r3, #65536	; 0x10000
60001440:	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	str	r1, [r2, #24]
			continue;
60001444:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	lsls	r3, r3, #25
60001448:	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	str	r7, [r2, #20]
			continue;
6000144c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	pop	{r4, r5, r6, r7}
60001450:	bx	lr
60001452:	nop
60001454:	.word	0x400d8000

60001458 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001458:	ldr	r3, [pc, #68]	; (600014a0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000145a:	ldr	r1, [pc, #72]	; (600014a4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000145c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000145e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001460:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001464:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001466:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001468:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000146c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000146e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001470:	orr.w	r0, r0, #768	; 0x300
60001474:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001476:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001478:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000147a:	ldr	r3, [r2, #72]	; 0x48
6000147c:	lsls	r3, r3, #24
6000147e:	bmi.n	6000147a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001480:	ldr	r3, [pc, #36]	; (600014a8 <analog_init+0x50>)
60001482:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001486:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001488:	ldr	r2, [pc, #24]	; (600014a4 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000148c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000148e:	ldr	r3, [r2, #72]	; 0x48
60001490:	ands.w	r3, r3, #128	; 0x80
60001494:	bne.n	6000148e <analog_init+0x36>
	calibrating = 0;
60001496:	ldr	r2, [pc, #20]	; (600014ac <analog_init+0x54>)
60001498:	strb	r3, [r2, #0]
}
6000149a:	pop	{r4, r5}
6000149c:	bx	lr
6000149e:	nop
600014a0:	.word	0x400fc000
600014a4:	.word	0x400c4000
600014a8:	.word	0x400c8000
600014ac:	.word	0x2000e75c

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000e768
60001598:	.word	0x2000e764
6000159c:	.word	0x2000e76c
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000e760

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__memset_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__memset_veneer+0x4>
600015bc:	.word	0x0000dc45

600015c0 <__setup_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__setup_veneer+0x4>
600015c4:	.word	0x0000a149

600015c8 <__delay_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__delay_veneer+0x4>
600015cc:	.word	0x0000c055

600015d0 <____libc_init_array_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <____libc_init_array_veneer+0x4>
600015d4:	.word	0x0000d59d

600015d8 <__set_arm_clock_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__set_arm_clock_veneer+0x4>
600015dc:	.word	0x0000b205

600015e0 <__pwm_init_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__pwm_init_veneer+0x4>
600015e4:	.word	0x0000d021

600015e8 <__loop_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__loop_veneer+0x4>
600015ec:	.word	0x00009ffd

600015f0 <__usb_init_serialnumber_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__usb_init_serialnumber_veneer+0x4>
600015f4:	.word	0x0000c219

600015f8 <__yield_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__yield_veneer+0x4>
600015fc:	.word	0x0000ca21

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x000053c9
60001608:	.word	0x0000ac5d

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r0, #29
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x0000e924

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r0, #29
      6e:	.short	0x2000
      70:	stmdb	r4!, {}
      74:	asrs	r0, r0, #29
      76:	movs	r0, #0
	...

00000080 <Screen::Screen()>:
      80:	.word	0x41f0e92d
      84:	ldr	r4, [pc, #304]	; (1b8 <Screen::Screen()+0x138>)
      86:	mov	r6, r0
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r5, r0
      8a:	.short	0x2705
      8c:	mov.w	r8, #1
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	.word	0xc50fcc0f
      94:	ldmia.w	r4, {r0, r1}
      98:	.word	0xe88522a8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      9c:	movs	r3, r0
      9e:	add.w	r1, r4, #8
      a2:	.short	0xf106
      a4:	movs	r0, r3
      a6:	.short	0xf00a
      a8:	ldc2l	1, cr15, [pc, #16]	; bc <Screen::Screen()+0x3c>
      ac:	lsls	r0, r6, #6
      ae:	add.w	r4, r4, #296	; 0x128
      b2:	movs	r2, #120	; 0x78
      b4:	add.w	r0, r6, #192	; 0xc0
      b8:	.word	0xfdd6f00a
      bc:	add.w	r3, r6, #312	; 0x138
      c0:	ldmia.w	r4, {r0, r1, r2}
      c4:	stmia.w	r3, {r0, r1, r2}
      c8:	.word	0x2100223c
      cc:	add.w	r0, r6, #324	; 0x144
      d0:	bl	dc44 <memset>
      d4:	movs	r3, #2
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
      d6:	mov	r1, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      d8:	str.w	r7, [r6, #324]	; 0x144
      dc:	str.w	r3, [r6, #336]	; 0x150
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
      e0:	movs	r0, #3
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      e2:	str.w	r8, [r6, #328]	; 0x148
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
      e6:	bl	cb50 <random(long, long)>
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      ea:	.short	0x2303
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
      ec:	mov	r1, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      ee:	.short	0xf8c6
      f0:	lsls	r4, r2, #5
      f2:	.short	0xf8c6
      f4:	adds	r1, #92	; 0x5c
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
      f6:	mov	r0, r3
      f8:	.word	0xfd2af00c
		{LINE, random(6, 10), false}
      fc:	movs	r1, #10
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      fe:	str.w	r0, [r6, #352]	; 0x160

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
		{LINE, random(6, 10), false}
     102:	.short	0x2006
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     104:	str.w	r8, [r6, #360]	; 0x168
     108:	.word	0xf00c2700

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
		{LINE, random(6, 10), false}
     10c:	stc2	11, cr4, [r1, #-172]!	; 0xffffff54
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     110:	.word	0x461d2200
     114:	str.w	r2, [r6, #424]	; 0x1a8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     118:	.word	0x6a996a5c
     11c:	str.w	r0, [r6, #364]	; 0x16c
     120:	str.w	r7, [r6, #420]	; 0x1a4
     124:	str.w	r2, [r6, #416]	; 0x1a0
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     128:	.word	0x6aab6a6a
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     12c:	cmp	r3, r1
     12e:	.short	0xbf08
     130:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     132:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     134:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     136:	ite	eq
     138:	moveq	r0, #1
     13a:	movne	r0, #0
     13c:	cmp	r0, #0
     13e:	beq.n	128 <Screen::Screen()+0xa8>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
     140:	lsrs	r1, r3, #5
     142:	mov.w	r0, #1728	; 0x6c0
     146:	orr.w	r1, r1, r2, lsl #27
     14a:	vmov	s15, r1
     14e:	vldr	d5, [pc, #96]	; 1b0 <Screen::Screen()+0x130>
     152:	.short	0xeeb8
     154:	ldrb	r7, [r4, #13]
     156:	.short	0xee87
     158:	ldr	r5, [r0, #48]	; 0x30
     15a:	vcvt.u32.f64	s12, d6
     15e:	vstr	s12, [r6, #428]	; 0x1ac
     162:	bl	cef8 <operator new(unsigned int)>
     166:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     168:	mov.w	r2, #1728	; 0x6c0
     16c:	.word	0xf00d2100
     170:	stc2l	8, cr15, [r9, #-792]!	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     174:	sbcs	r0, r7
     176:	mov.w	r0, #1728	; 0x6c0
     17a:	bl	cef8 <operator new(unsigned int)>
     17e:	mov	r4, r0
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     180:	mov.w	r2, #1728	; 0x6c0
     184:	.word	0xf00d2100
     188:	ldc2l	8, cr15, [sp, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     18c:	.word	0xf44f41bc
     190:	str	r0, [r3, #12]
     192:	bl	cef8 <operator new(unsigned int)>
     196:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     198:	mov.w	r2, #1728	; 0x6c0
     19c:	.word	0xf00d2100
     1a0:	ldc2l	8, cr15, [r1, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(80, 300);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     1a4:	.word	0x463041c0
     1a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1ac:	nop.w
     1b0:	.word	0xd2f1a9fc
     1b4:	str	r5, [r1, #36]	; 0x24
     1b6:	.short	0x3ff0
     1b8:	movs	r0, r0
     1ba:	.short	0x2000
     1bc:	ands	r0, r0
     1be:	.short	0x400d

000001c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1c0:	sub	sp, #8
     1c2:	.short	0x4684
     1c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     1c8:	.word	0xb0852400
     1cc:	mov	lr, r1
     1ce:	.short	0x4e2e
     1d0:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     1d2:	.short	0x4625

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1d4:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     1d8:	.word	0x342c5d33
     1dc:	ldr	r2, [pc, #168]	; (288 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     1de:	cbz	r3, 1f2 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x32>
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     1e0:	.word	0x2d0a3501
     1e4:	bne.n	1d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     1e6:	.short	0x2000
}
     1e8:	add	sp, #20
     1ea:	.short	0xe8bd
     1ec:	mvns	r0, r6
     1ee:	.short	0xb002
     1f0:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     1f2:	.short	0x232c
     1f4:	movs	r1, #1
     1f6:	mov	r7, sp
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1f8:	.word	0x8090f8df
     1fc:	mul.w	r3, r3, r5
     200:	.word	0x0903eb02
     204:	strb	r1, [r2, r3]
     206:	.short	0xab0c
	strip = _strip;
     208:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     20c:	.word	0x040cf109

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     210:	strb.w	lr, [r9, #8]
     214:	.word	0xc707cb0f
     218:	strh	r3, [r7, #0]
	color = _color;
     21a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     21c:	mov	r7, r8
     21e:	.short	0xe913
     220:	movs	r7, r1
     222:	.short	0xc407
     224:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     226:	.short	0x9b10
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     228:	vstr	s0, [r9, #28]
	duration = _duration;
     22c:	.word	0x3020f8c9
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     230:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     234:	.word	0x1028f8d8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     238:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     23a:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     23c:	.word	0xbf08428b
     240:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     242:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     244:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     246:	.short	0xbf0c
     248:	moveq	r0, #1
     24a:	movne	r0, #0
     24c:	.word	0xd0f32800
	startTime = rtcMillis();
     250:	lsrs	r1, r3, #5
     252:	movs	r3, #44	; 0x2c
     254:	orr.w	r1, r1, r2, lsl #27
     258:	mla	r5, r3, r5, r6
     25c:	vmov	s15, r1
     260:	vldr	d5, [pc, #28]	; 280 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc0>
     264:	vcvt.f64.u32	d7, s15
     268:	vdiv.f64	d6, d7, d5
     26c:	vcvt.u32.f64	s12, d6
     270:	vstr	s12, [r5, #36]	; 0x24
     274:	.word	0xe8bdb005
     278:	mvns	r0, r6
     27a:	add	sp, #8
     27c:	bx	lr
     27e:	nop
     280:	add	r1, sp, #1008	; 0x3f0
     282:	bcs.n	268 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xa8>
     284:	.word	0x3ff0624d
     288:	stmia	r0!, {r4, r6, r7}
     28a:	.short	0x2000
     28c:	ands	r0, r0
     28e:	.short	0x400d

00000290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>:

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     290:	sub	sp, #16
     292:	.short	0xe92d
     294:	ldr	r7, [pc, #960]	; (658 <updateBeams()+0x88>)
     296:	.short	0x2400
     298:	sub	sp, #20
     29a:	.short	0x4e35
     29c:	add.w	lr, sp, #60	; 0x3c
	for (int i = 0; i < CIRCLE_AM; i++) {
     2a0:	.word	0xe88e4625

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     2a4:	movs	r6, r1
	for (int i = 0; i < CIRCLE_AM; i++) {
		if (!circles[i].active) {
     2a6:	.short	0x5d33
     2a8:	adds	r4, #60	; 0x3c
     2aa:	.short	0x4a31
     2ac:	cbz	r3, 2c0 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0x30>
elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
	for (int i = 0; i < CIRCLE_AM; i++) {
     2ae:	.short	0x3501
     2b0:	cmp	r5, #10
     2b2:	.short	0xd1f8
		if (!circles[i].active) {
			circles[i].begin(_strip, SIZE_SCREEN / 2, SIZE_SCREEN / 2, _c, 2, 35, -3, _duration, _mask);
			return true;
		}
	}
	return false;
     2b4:	movs	r0, #0
}
     2b6:	add	sp, #20
     2b8:	.word	0x4ff0e8bd
     2bc:	add	sp, #16
     2be:	.short	0x4770
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c0:	lsls	r7, r5, #4
     2c2:	.short	0x2101
		strip = _strip;
		pos.x = x;
     2c4:	ldr	r3, [pc, #172]	; (374 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xe4>)
     2c6:	.short	0x46e8
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c8:	subs	r4, r7, r5
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     2ca:	.short	0xf04f
     2cc:	ldr	r3, [pc, #512]	; (4d0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x148>)
		BSize = _BSize;
		ESize = _ESize;
     2ce:	.short	0xf8df
     2d0:	str	r0, [sp, #688]	; 0x2b0
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d2:	.short	0x00a4
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     2d4:	ldr.w	sl, [pc, #168]	; 380 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xf0>
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d8:	.word	0x44145511
		strip = _strip;
     2dc:	str	r0, [r4, #4]
		pos.x = x;
		pos.y = y;
		color = _color;
     2de:	.short	0xf104
     2e0:	lsrs	r0, r4, #16
	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
		strip = _strip;
		pos.x = x;
     2e2:	.short	0x60e3
		pos.y = y;
     2e4:	str	r3, [r4, #16]
     2e6:	.short	0xe89e
     2e8:	movs	r7, r1
     2ea:	stmia.w	r8!, {r0, r1, r2}
     2ee:	.short	0xf8a8
     2f0:	adds	r0, #0
		color = _color;
     2f2:	.short	0xab04
     2f4:	ldmdb	r3, {r0, r1, r2, r3}
     2f8:	.word	0x0007e8ac
     2fc:	strh.w	r3, [ip]
		borderSize = _borderSize;
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
     300:	.word	0x4a1d9b13
     304:	str	r3, [r4, #48]	; 0x30
        mask = _mask;
     306:	.short	0x9b14
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     308:	mov	lr, r2
		active = true;
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     30a:	.short	0xf8c4
     30c:	add	sp, #224	; 0xe0
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
        mask = _mask;
     30e:	.short	0x60a3
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     310:	str.w	sl, [r4, #24]
		ESize = _ESize;
     314:	.word	0x901cf8c4
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     318:	ldr	r4, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     31a:	.short	0x6a91
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     31c:	ldr.w	r2, [lr, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     320:	.word	0x3028f8de
    if (lo1 == lo2 && hi1 == hi2) {
     324:	cmp	r3, r1
     326:	.short	0xbf08
     328:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     32a:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     32c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     32e:	.short	0xbf0c
     330:	moveq	r0, #1
     332:	.short	0x2000
     334:	cmp	r0, #0
     336:	.short	0xd0f1
		duration = _duration;
        mask = _mask;
		startTime = rtcMillis();
     338:	lsrs	r1, r3, #5
     33a:	.short	0x1b7d
     33c:	orr.w	r1, r1, r2, lsl #27
     340:	.word	0x0685eb06
     344:	vmov	s15, r1
     348:	.word	0x5b07ed9f
     34c:	vcvt.f64.u32	d7, s15
     350:	.word	0x6b05ee87
     354:	vcvt.u32.f64	s12, d6
     358:	.word	0x6a0ded86
     35c:	add	sp, #20
     35e:	.short	0xe8bd
     360:	ldr	r7, [pc, #960]	; (724 <updateBeams()+0x154>)
     362:	.short	0xb004
     364:	bx	lr	; unpredictable branch in IT block

     366:	.short	0xbf00
     368:	.word	0xd2f1a9fc
     36c:	.word	0x3ff0624d
     370:	.word	0x2000be2c
     374:	.word	0x41400000
     378:	.word	0x400d4000
     37c:	.word	0xc0400000
     380:	.word	0x420c0000
     384:	.word	0x00000000

00000388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     388:	sub	sp, #8
     38a:	stmdbne	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38e:	sub	sp, #20
	int colInt = strip->getPixelColor(pixel);
     390:	uxth	r6, r1
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     392:	mov	r8, r0
     394:	ldrb.w	r4, [sp, #65]	; 0x41
	int colInt = strip->getPixelColor(pixel);
     398:	mov	r1, r6
     39a:	ldrb.w	r9, [sp, #68]	; 0x44
     39e:	str	r4, [sp, #4]
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     3a0:	add	r4, sp, #56	; 0x38
     3a2:	ldrb.w	r5, [sp, #64]	; 0x40
     3a6:	stmia.w	r4, {r2, r3}
     3aa:	ldrb.w	sl, [sp, #56]	; 0x38
     3ae:	ldrb.w	r4, [sp, #57]	; 0x39
     3b2:	ldrb.w	fp, [sp, #58]	; 0x3a
     3b6:	ldr	r7, [sp, #60]	; 0x3c
	int colInt = strip->getPixelColor(pixel);
     3b8:	bl	aaf0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     3bc:	str	r0, [sp, #12]
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3be:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     3c2:	cmp.w	r9, #0
     3c6:	beq.n	40c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     3c8:	add	sl, r0
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3ca:	ldrb.w	r2, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ce:	ldrb.w	r5, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3d2:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3d4:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3d6:	cmp.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3da:	add.w	r3, r5, fp

	strip->setPixelColor(pixel, *(int*)getCol);
     3de:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3e0:	it	ge
     3e2:	movge.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3e6:	cmp	r4, #255	; 0xff
     3e8:	it	ge
     3ea:	movge	r4, #255	; 0xff
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ec:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3ee:	strb.w	sl, [sp, #14]
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3f2:	it	ge
     3f4:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3f6:	strb.w	r4, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3fa:	strb.w	r3, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3fe:	ldr	r2, [sp, #12]
}
     400:	add	sp, #20
     402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     406:	add	sp, #8
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);

	strip->setPixelColor(pixel, *(int*)getCol);
     408:	b.w	aae4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     40c:	ldr	r3, [sp, #4]
     40e:	cmp	r3, #99	; 0x63
     410:	bgt.n	48e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     412:	vmov	s15, r3
     416:	vldr	d6, [pc, #424]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     41a:	vcvt.f64.s32	d7, s15
     41e:	vmul.f64	d7, d7, d6
     422:	vcvt.u32.f64	s15, d7
     426:	vstr	s15, [sp, #4]
     42a:	ldrb.w	sl, [sp, #4]
     42e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     430:	cbz	r5, 498 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     432:	cmp	r5, #99	; 0x63
     434:	bgt.n	49c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     436:	vmov	s15, r5
     43a:	vldr	d6, [pc, #388]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     43e:	vcvt.f64.s32	d7, s15
     442:	vmul.f64	d7, d7, d6
     446:	vcvt.s32.f64	s15, d7
     44a:	vmov	r2, s15
     44e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     452:	ldr	r4, [pc, #372]	; (5c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     454:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     456:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     45a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     45e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     462:	adds	r4, r7, r5
     464:	mov.w	r5, #360	; 0x168
     468:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     46c:	ldr	r4, [pc, #348]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     46e:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     472:	smull	r3, r4, r4, r1
     476:	asrs	r5, r1, #31
     478:	add	r4, r1
     47a:	rsb	r4, r5, r4, asr #5
     47e:	cmp	r4, #5
     480:	bhi.w	5b6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     484:	tbb	[pc, r4]
     488:	.word	0x415b7588
     48c:	.short	0x0c27
     48e:	mov.w	sl, #254	; 0xfe
     492:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     494:	cmp	r5, #0
     496:	bne.n	432 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     498:	mov	r4, sl
     49a:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     49c:	movs	r2, #1
     49e:	b.n	452 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     4a0:	ldr	r7, [pc, #296]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4a2:	rsb	r3, r2, sl
     4a6:	smull	r4, lr, r7, r1
     4aa:	mov	r4, r2
     4ac:	add	lr, r1
     4ae:	rsb	r5, r5, lr, asr #5
     4b2:	rsb	r5, r5, r5, lsl #4
     4b6:	sub.w	r1, r1, r5, lsl #2
     4ba:	rsb	r1, r1, #60	; 0x3c
     4be:	mul.w	r3, r1, r3
     4c2:	smull	r1, r7, r7, r3
     4c6:	asrs	r1, r3, #31
     4c8:	add	r3, r7
     4ca:	rsb	r3, r1, r3, asr #5
     4ce:	add	r3, r2
     4d0:	uxtb.w	fp, r3
     4d4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     4d6:	ldr	r7, [pc, #244]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4d8:	rsb	sl, r2, sl
     4dc:	mov	r4, r2
     4de:	smull	r3, lr, r7, r1
     4e2:	add	lr, r1
     4e4:	rsb	r5, r5, lr, asr #5
     4e8:	rsb	r5, r5, r5, lsl #4
     4ec:	sub.w	r1, r1, r5, lsl #2
     4f0:	mul.w	r1, r1, sl
     4f4:	smull	r3, r7, r7, r1
     4f8:	mov.w	sl, r1, asr #31
     4fc:	add	r1, r7
     4fe:	rsb	r1, sl, r1, asr #5
     502:	add	r2, r1
     504:	uxtb.w	sl, r2
     508:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     50a:	ldr	r7, [pc, #192]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     50c:	rsb	lr, r2, sl
     510:	mov	sl, r2
     512:	smull	r3, r4, r7, r1
     516:	add	r4, r1
     518:	rsb	r5, r5, r4, asr #5
     51c:	rsb	r5, r5, r5, lsl #4
     520:	sub.w	r1, r1, r5, lsl #2
     524:	rsb	r4, r1, #60	; 0x3c
     528:	mul.w	r1, r4, lr
     52c:	smull	r3, r7, r7, r1
     530:	asrs	r4, r1, #31
     532:	add	r1, r7
     534:	rsb	r4, r4, r1, asr #5
     538:	add	r4, r2
     53a:	uxtb	r4, r4
     53c:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     53e:	ldr	r7, [pc, #140]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     540:	rsb	lr, r2, sl
     544:	mov	r4, sl
     546:	mov	sl, r2
     548:	smull	ip, r3, r7, r1
     54c:	add	r3, r1
     54e:	rsb	r5, r5, r3, asr #5
     552:	rsb	r5, r5, r5, lsl #4
     556:	sub.w	r1, r1, r5, lsl #2
     55a:	mul.w	r1, r1, lr
     55e:	smull	r3, r7, r7, r1
     562:	asrs	r3, r1, #31
     564:	add	r1, r7
     566:	rsb	r3, r3, r1, asr #5
     56a:	add	r3, r2
     56c:	uxtb.w	fp, r3
     570:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     572:	ldr	r7, [pc, #88]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     574:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     578:	mov	r4, sl
      output.g = bri;
      output.b = base;
     57a:	mov	fp, r2
     57c:	smull	r3, ip, r7, r1
     580:	add	ip, r1
     582:	rsb	r5, r5, ip, asr #5
     586:	rsb	r5, r5, r5, lsl #4
     58a:	sub.w	r5, r1, r5, lsl #2
     58e:	rsb	r5, r5, #60	; 0x3c
     592:	mul.w	r1, r5, lr
     596:	b.n	4f4 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     598:	rsb	r3, r2, sl
     59c:	ldr	r5, [pc, #44]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     59e:	mov	fp, r2
     5a0:	mul.w	r1, r1, r3
     5a4:	smull	r3, r5, r5, r1
     5a8:	asrs	r4, r1, #31
     5aa:	add	r1, r5
     5ac:	rsb	r1, r4, r1, asr #5
     5b0:	adds	r4, r2, r1
     5b2:	uxtb	r4, r4
     5b4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5b6:	mov.w	sl, #0
     5ba:	mov	r4, sl
     5bc:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5be:	nop
     5c0:	.word	0x66666666
     5c4:	.word	0x40046666
     5c8:	.word	0xb60b60b7
     5cc:	.word	0x88888889

000005d0 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     5d0:	ldr	r3, [pc, #804]	; (8f8 <updateBeams()+0x328>)

void updateBeams() {
     5d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5d8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     5da:	ldr	r1, [r3, #40]	; 0x28
     5dc:	vpush	{d8-d10}
     5e0:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     5e4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e6:	ldr	r6, [pc, #784]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     5e8:	cmp	r3, r1
     5ea:	it	eq
     5ec:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5ee:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     5f0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     5f2:	ite	eq
     5f4:	moveq	r5, #1
     5f6:	movne	r5, #0
     5f8:	cmp	r5, #0
     5fa:	beq.n	5e2 <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     5fc:	lsrs	r1, r3, #5
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     5fe:	ldr	r4, [pc, #764]	; (8fc <updateBeams()+0x32c>)
     600:	orr.w	r1, r1, r2, lsl #27
     604:	ldr	r3, [r4, #0]
     606:	vmov	s15, r1
     60a:	vldr	d5, [pc, #732]	; 8e8 <updateBeams()+0x318>
     60e:	vcvt.f64.u32	d7, s15
     612:	vdiv.f64	d6, d7, d5
     616:	vcvt.u32.f64	s12, d6
     61a:	vmov	r2, s12
     61e:	subs	r3, r2, r3
     620:	cmp	r3, #24
     622:	ble.w	9e2 <updateBeams()+0x412>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     626:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     628:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     62a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     62c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     62e:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     630:	ldr	r7, [pc, #708]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     632:	cmp	r3, r1
     634:	it	eq
     636:	cmpeq	r2, r5
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    }
    hi1 = hi2;
     638:	mov	r5, r2
    lo1 = lo2;
     63a:	mov	r1, r3
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     63c:	ite	eq
     63e:	moveq	r6, #1
     640:	movne	r6, #0
     642:	cmp	r6, #0
     644:	beq.n	62c <updateBeams()+0x5c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     646:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     648:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     64a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     64c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     64e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     650:	cmp	r3, r1
     652:	it	eq
     654:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     656:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     658:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     65a:	ite	eq
     65c:	moveq	r6, #1
     65e:	movne	r6, #0
     660:	cmp	r6, #0
     662:	beq.n	64c <updateBeams()+0x7c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     664:	lsrs	r1, r3, #5
     666:	ldr	r7, [pc, #664]	; (900 <updateBeams()+0x330>)
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     668:	ldr	r0, [pc, #664]	; (904 <updateBeams()+0x334>)
     66a:	orr.w	r1, r1, r2, lsl #27
     66e:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     672:	ldr.w	fp, [pc, #644]	; 8f8 <updateBeams()+0x328>
  synapse_B.clear();
     676:	mov	sl, r7
     678:	vmov	s15, r1
     67c:	vldr	d8, [pc, #616]	; 8e8 <updateBeams()+0x318>
     680:	vcvt.f64.u32	d7, s15
     684:	vldr	d9, [pc, #616]	; 8f0 <updateBeams()+0x320>
     688:	vdiv.f64	d6, d7, d8
     68c:	vcvt.u32.f64	s12, d6
     690:	vstr	s12, [r4]
void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     694:	bl	abf8 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     698:	ldr	r0, [pc, #620]	; (908 <updateBeams()+0x338>)
     69a:	bl	abf8 <Adafruit_NeoPixel::clear()>
     69e:	b.n	6aa <updateBeams()+0xda>
     6a0:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     6a4:	cmp	sl, r9
     6a6:	beq.w	990 <updateBeams()+0x3c0>
    if (beams[i].active) {
     6aa:	ldrb.w	r3, [sl, #-36]
     6ae:	cmp	r3, #0
     6b0:	beq.n	6a0 <updateBeams()+0xd0>
     6b2:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     6b6:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ba:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     6be:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6c2:	ldr	r7, [pc, #564]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     6c4:	cmp	r3, r1
     6c6:	it	eq
     6c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     6cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     6ce:	ite	eq
     6d0:	moveq	r4, #1
     6d2:	movne	r4, #0
     6d4:	cmp	r4, #0
     6d6:	beq.n	6ba <updateBeams()+0xea>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     6d8:	lsrs	r1, r3, #5
     6da:	ldr.w	r5, [sl]
     6de:	ldr.w	r6, [sl, #-4]
     6e2:	orr.w	r1, r1, r2, lsl #27
     6e6:	adds	r3, r6, r5
     6e8:	vmov	s15, r1
     6ec:	vcvt.f64.u32	d7, s15
     6f0:	vdiv.f64	d6, d7, d8
     6f4:	vcvt.u32.f64	s12, d6
     6f8:	vmov	r2, s12
     6fc:	cmp	r2, r3
     6fe:	bhi.w	9da <updateBeams()+0x40a>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     702:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     704:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     706:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     70a:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     70e:	cmp	r3, r1
     710:	it	eq
     712:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     714:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     716:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     718:	ite	eq
     71a:	moveq	r4, #1
     71c:	movne	r4, #0
     71e:	cmp	r4, #0
     720:	beq.n	706 <updateBeams()+0x136>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     722:	lsrs	r1, r3, #5
     724:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     728:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     72c:	orr.w	r1, r1, r2, lsl #27
     730:	vcvt.f32.s32	s11, s15
     734:	vmov	s15, r1
     738:	vcvt.f64.u32	d7, s15
     73c:	vdiv.f64	d6, d7, d8
     740:	vcvt.u32.f64	s12, d6
     744:	vmov	r2, s12
     748:	subs	r5, r2, r5
     74a:	vmov	s15, r5
     74e:	vcvt.f32.u32	s15, s15
     752:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     756:	cmp	r3, #0
     758:	bne.w	9d0 <updateBeams()+0x400>
	position = (strip->numPixels() + length) * posFac - length / 2;
     75c:	ldr.w	r0, [sl, #-32]
     760:	bl	aba0 <Adafruit_NeoPixel::numPixels() const>
     764:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     768:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     76c:	vmov.f32	s14, #96	; 0x3f000000  0.5
     770:	vcvt.f32.s32	s13, s15
     774:	vldr	s15, [sl, #-8]
     778:	vmul.f32	s14, s15, s14
     77c:	vadd.f32	s15, s13, s15
     780:	vmov.f32	s13, s14
     784:	vfnms.f32	s13, s15, s20
     788:	vmov.f32	s15, s13
     78c:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     790:	cmp	r3, #0
     792:	beq.n	6a0 <updateBeams()+0xd0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     794:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     798:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     79c:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7a0:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     7a4:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     7a8:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7ac:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     7b0:	cmp	r7, r3
     7b2:	ble.n	8ae <updateBeams()+0x2de>
     7b4:	b.n	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     7b6:	vldr	s11, [sl, #-8]
     7ba:	vmov.f32	s14, #112	; 0x3f800000  1.0
     7be:	vmov.f32	s13, #0	; 0x40000000  2.0
     7c2:	vdiv.f32	s12, s15, s11
     7c6:	vmov.f32	s15, s14
     7ca:	vfms.f32	s15, s12, s13
     7ce:	vcmpe.f32	s15, #0.0
     7d2:	vmrs	APSR_nzcv, fpscr
     7d6:	bmi.w	8e0 <updateBeams()+0x310>
     7da:	vcmp.f32	s15, s14
     7de:	vmrs	APSR_nzcv, fpscr
     7e2:	it	gt
     7e4:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     7e8:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     7ec:	sub.w	r3, sl, #24
     7f0:	add	r4, sp, #24
     7f2:	ldrb.w	ip, [sl, #-24]
     7f6:	ldrb.w	lr, [sl, #-23]
     7fa:	vcmp.f32	s15, s14
     7fe:	ldrb.w	r6, [sl, #-22]
     802:	ldr.w	r8, [sl, #-20]
     806:	vmrs	APSR_nzcv, fpscr
     80a:	ldmia	r3, {r0, r1, r2, r3}
     80c:	stmia.w	r4, {r0, r1, r2, r3}
     810:	ldrb.w	r3, [sl, #-16]
     814:	ldrb.w	r2, [sl, #-15]
     818:	ldrb.w	r1, [sl, #-12]
     81c:	beq.n	872 <updateBeams()+0x2a2>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     81e:	cmp	r1, #0
     820:	beq.n	910 <updateBeams()+0x340>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     822:	vmov	s14, ip
     826:	vmov	s13, lr
     82a:	vcvt.f32.s32	s14, s14
     82e:	vmul.f32	s14, s14, s15
     832:	vcvt.u32.f32	s14, s14
     836:	vstr	s14, [sp, #12]
     83a:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     83e:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     842:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     846:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     848:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     84a:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     84e:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     852:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     856:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     85a:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     85e:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     862:	vstr	s14, [sp, #12]
     866:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     86a:	vstr	s15, [sp, #16]
     86e:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     872:	strb.w	r3, [sp, #32]
     876:	add	r3, sp, #40	; 0x28
     878:	strb.w	r2, [sp, #33]	; 0x21
     87c:	strb.w	r1, [sp, #36]	; 0x24
     880:	strb.w	ip, [sp, #24]
     884:	strb.w	lr, [sp, #25]
     888:	strb.w	r6, [sp, #26]
     88c:	str.w	r8, [sp, #28]
     890:	ldmdb	r3, {r0, r1}
     894:	ldmia.w	r4, {r2, r3}
     898:	stmia.w	sp, {r0, r1}
     89c:	mov	r1, r7
     89e:	ldr.w	r0, [sl, #-32]
     8a2:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     8a6:	adds	r7, #1
     8a8:	cmp	r5, r7
     8aa:	blt.w	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
     8ae:	cmp	r7, #0
     8b0:	blt.n	8a6 <updateBeams()+0x2d6>
     8b2:	ldr.w	r0, [sl, #-32]
     8b6:	bl	aba0 <Adafruit_NeoPixel::numPixels() const>
     8ba:	cmp	r0, r7
     8bc:	ble.n	8a6 <updateBeams()+0x2d6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     8be:	vmov	s14, r7
     8c2:	vldr	s15, [sl, #4]
     8c6:	vcvt.f32.s32	s14, s14
     8ca:	vsub.f32	s15, s14, s15
     8ce:	vcmpe.f32	s15, #0.0
     8d2:	vmrs	APSR_nzcv, fpscr
     8d6:	bgt.w	7b6 <updateBeams()+0x1e6>
     8da:	vneg.f32	s15, s15
     8de:	b.n	7b6 <updateBeams()+0x1e6>
     8e0:	vldr	s15, [pc, #40]	; 90c <updateBeams()+0x33c>
     8e4:	b.n	7e8 <updateBeams()+0x218>
     8e6:	nop
     8e8:	.word	0xd2f1a9fc
     8ec:	.word	0x3ff0624d
     8f0:	.word	0x66666666
     8f4:	.word	0x40046666
     8f8:	.word	0x400d4000
     8fc:	.word	0x2000c088
     900:	.word	0x2000c0f4
     904:	.word	0x2000c0ac
     908:	.word	0x2000c098
     90c:	.word	0x00000000
     910:	cmp	r2, #99	; 0x63
     912:	bgt.n	9a6 <updateBeams()+0x3d6>
     914:	vmov	s14, r2
     918:	vcvt.f64.s32	d6, s14
     91c:	vmul.f64	d6, d6, d9
     920:	vcvt.u32.f64	s14, d6
     924:	vstr	s14, [sp, #12]
     928:	ldrb.w	ip, [sp, #12]
     92c:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     92e:	cmp	r3, #0
     930:	beq.n	9b0 <updateBeams()+0x3e0>
     932:	cmp	r3, #99	; 0x63
     934:	bgt.n	9ec <updateBeams()+0x41c>
     936:	vmov	s14, r3
     93a:	vcvt.f64.s32	d6, s14
     93e:	vmul.f64	d6, d6, d9
     942:	vcvt.s32.f64	s14, d6
     946:	vmov	r6, s14
     94a:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     94e:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     952:	ldr	r1, [pc, #544]	; (b74 <updateBeams()+0x5a4>)
     954:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     958:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     95c:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     95e:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     960:	mov.w	r0, r8, asr #31
     964:	rsb	r1, r0, r1, asr #8
     968:	mov.w	r0, #360	; 0x168
     96c:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     970:	ldr	r0, [pc, #516]	; (b78 <updateBeams()+0x5a8>)
     972:	smull	r6, r0, r0, r1
     976:	asrs	r6, r1, #31
     978:	add	r0, r1
     97a:	str	r6, [sp, #16]
     97c:	rsb	r0, r6, r0, asr #5
     980:	cmp	r0, #5
     982:	bhi.w	b6a <updateBeams()+0x59a>
     986:	tbb	[pc, r0]
     98a:	.short	0xbadc
     98c:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     990:	ldr	r0, [pc, #488]	; (b7c <updateBeams()+0x5ac>)
     992:	bl	a84c <Adafruit_NeoPixel::show()>
  synapse_B.show();
     996:	ldr	r0, [pc, #488]	; (b80 <updateBeams()+0x5b0>)
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     998:	add	sp, #44	; 0x2c
     99a:	vpop	{d8-d10}
     99e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     9a2:	b.w	a84c <Adafruit_NeoPixel::show()>
     9a6:	mov.w	ip, #254	; 0xfe
     9aa:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     9ac:	cmp	r3, #0
     9ae:	bne.n	932 <updateBeams()+0x362>
     9b0:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9b4:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     9b8:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9ba:	vcvt.f32.s32	s14, s14
     9be:	vmul.f32	s14, s14, s15
     9c2:	vcvt.u32.f32	s14, s14
     9c6:	vstr	s14, [sp, #12]
     9ca:	ldrb.w	ip, [sp, #12]
     9ce:	b.n	83e <updateBeams()+0x26e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     9d0:	vmov.f32	s15, #112	; 0x3f800000  1.0
     9d4:	vsub.f32	s20, s15, s20
     9d8:	b.n	75c <updateBeams()+0x18c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     9da:	movs	r3, #0
     9dc:	strb.w	r3, [sl, #-36]
     9e0:	b.n	6a0 <updateBeams()+0xd0>
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     9e2:	add	sp, #44	; 0x2c
     9e4:	vpop	{d8-d10}
     9e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9ec:	movs	r6, #1
     9ee:	b.n	94e <updateBeams()+0x37e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     9f0:	ldr	r0, [pc, #388]	; (b78 <updateBeams()+0x5a8>)
     9f2:	smull	r6, r0, r0, r1
     9f6:	ldr	r6, [sp, #12]
     9f8:	add	r0, r1
     9fa:	vmov	s13, r6
     9fe:	rsb	lr, r6, ip
     a02:	ldr	r6, [sp, #16]
     a04:	rsb	r0, r6, r0, asr #5
     a08:	rsb	r0, r0, r0, lsl #4
     a0c:	sub.w	r1, r1, r0, lsl #2
     a10:	rsb	r1, r1, #60	; 0x3c
     a14:	mul.w	lr, r1, lr
     a18:	ldr	r1, [pc, #348]	; (b78 <updateBeams()+0x5a8>)
     a1a:	smull	r1, r0, r1, lr
     a1e:	mov.w	r1, lr, asr #31
     a22:	add	lr, r0
     a24:	rsb	lr, r1, lr, asr #5
     a28:	vmov	r1, s13
     a2c:	add	r1, lr
     a2e:	uxtb.w	lr, r1
     a32:	b.n	9b4 <updateBeams()+0x3e4>
     a34:	ldr	r0, [pc, #320]	; (b78 <updateBeams()+0x5a8>)
     a36:	smull	r6, r0, r0, r1
     a3a:	ldr	r6, [sp, #12]
     a3c:	add	r0, r1
     a3e:	rsb	ip, r6, ip
     a42:	vmov	s13, r6
     a46:	ldr	r6, [sp, #16]
     a48:	rsb	r0, r6, r0, asr #5
     a4c:	vmov	r6, s13
     a50:	rsb	r0, r0, r0, lsl #4
     a54:	sub.w	r1, r1, r0, lsl #2
     a58:	mul.w	ip, r1, ip
     a5c:	ldr	r1, [pc, #280]	; (b78 <updateBeams()+0x5a8>)
     a5e:	smull	r1, r0, r1, ip
     a62:	mov.w	r1, ip, asr #31
     a66:	add	ip, r0
     a68:	rsb	ip, r1, ip, asr #5
     a6c:	add	r6, ip
     a6e:	uxtb.w	ip, r6
     a72:	b.n	9b4 <updateBeams()+0x3e4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     a74:	ldr	r0, [pc, #256]	; (b78 <updateBeams()+0x5a8>)
     a76:	smull	r6, r0, r0, r1
     a7a:	ldr	r6, [sp, #12]
     a7c:	add	r0, r1
     a7e:	rsb	r6, r6, ip
     a82:	ldr.w	ip, [sp, #12]
     a86:	str	r6, [sp, #20]
     a88:	mov	r6, r0
     a8a:	ldr	r0, [sp, #16]
     a8c:	rsb	r0, r0, r6, asr #5
     a90:	ldr	r6, [sp, #20]
     a92:	rsb	r0, r0, r0, lsl #4
     a96:	sub.w	r1, r1, r0, lsl #2
     a9a:	ldr	r0, [pc, #220]	; (b78 <updateBeams()+0x5a8>)
     a9c:	rsb	r1, r1, #60	; 0x3c
     aa0:	mul.w	r1, r1, r6
     aa4:	smull	r6, r0, r0, r1
     aa8:	mov	r6, r0
     aaa:	asrs	r0, r1, #31
     aac:	add	r1, r6
     aae:	mov	r6, ip
     ab0:	rsb	r0, r0, r1, asr #5
     ab4:	add	r6, r0
     ab6:	uxtb	r1, r6
     ab8:	vmov	s13, r1
     abc:	b.n	9b4 <updateBeams()+0x3e4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     abe:	ldr	r0, [pc, #184]	; (b78 <updateBeams()+0x5a8>)
     ac0:	vmov	s13, ip
     ac4:	smull	r6, r0, r0, r1
     ac8:	ldr	r6, [sp, #12]
     aca:	add	r0, r1
     acc:	rsb	lr, r6, ip
     ad0:	mov	ip, r6
     ad2:	ldr	r6, [sp, #16]
     ad4:	rsb	r0, r6, r0, asr #5
     ad8:	mov	r6, ip
     ada:	rsb	r0, r0, r0, lsl #4
     ade:	sub.w	r1, r1, r0, lsl #2
     ae2:	mul.w	lr, r1, lr
     ae6:	ldr	r1, [pc, #144]	; (b78 <updateBeams()+0x5a8>)
     ae8:	smull	r1, r0, r1, lr
     aec:	mov.w	r1, lr, asr #31
     af0:	add	lr, r0
     af2:	rsb	lr, r1, lr, asr #5
     af6:	add	r6, lr
     af8:	uxtb.w	lr, r6
     afc:	b.n	9b4 <updateBeams()+0x3e4>
     afe:	ldr	r0, [pc, #120]	; (b78 <updateBeams()+0x5a8>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b00:	vmov	s13, ip
     b04:	smull	r6, r0, r0, r1
     b08:	ldr	r6, [sp, #12]
     b0a:	add	r0, r1
     b0c:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     b10:	mov	lr, r6
     b12:	ldr	r6, [sp, #16]
     b14:	rsb	r0, r6, r0, asr #5
     b18:	mov	r6, lr
     b1a:	rsb	r0, r0, r0, lsl #4
     b1e:	sub.w	r1, r1, r0, lsl #2
     b22:	rsb	r1, r1, #60	; 0x3c
     b26:	mul.w	ip, r1, ip
     b2a:	ldr	r1, [pc, #76]	; (b78 <updateBeams()+0x5a8>)
     b2c:	smull	r1, r0, r1, ip
     b30:	mov.w	r1, ip, asr #31
     b34:	add	ip, r0
     b36:	rsb	ip, r1, ip, asr #5
     b3a:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b3c:	uxtb.w	ip, r6
     b40:	b.n	9b4 <updateBeams()+0x3e4>
     b42:	ldr	r6, [sp, #12]
     b44:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     b48:	mov	lr, r6
     b4a:	mul.w	r1, r1, r0
     b4e:	ldr	r0, [pc, #40]	; (b78 <updateBeams()+0x5a8>)
     b50:	smull	r6, r0, r0, r1
     b54:	mov	r6, r0
     b56:	asrs	r0, r1, #31
     b58:	add	r1, r6
     b5a:	mov	r6, lr
     b5c:	rsb	r0, r0, r1, asr #5
     b60:	add	r6, r0
     b62:	uxtb	r1, r6
     b64:	vmov	s13, r1
     b68:	b.n	9b4 <updateBeams()+0x3e4>
     b6a:	mov.w	ip, #0
     b6e:	vmov	s13, ip
     b72:	b.n	9b4 <updateBeams()+0x3e4>
     b74:	.word	0xb60b60b7
     b78:	.word	0x88888889
     b7c:	.word	0x2000c0ac
     b80:	.word	0x2000c098
     b84:	.word	0x00000000

00000b88 <updateCircles()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     b88:	ldr	r3, [pc, #772]	; (e90 <updateCircles()+0x308>)
		}
	}
	return false;
}

void updateCircles() {
     b8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b8e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b90:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     b92:	ldr	r1, [r3, #40]	; 0x28
     b94:	vpush	{d8}
     b98:	sub	sp, #52	; 0x34
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     b9c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9e:	ldr	r6, [pc, #752]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     ba0:	cmp	r3, r1
     ba2:	it	eq
     ba4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ba6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     ba8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     baa:	ite	eq
     bac:	moveq	r5, #1
     bae:	movne	r5, #0
     bb0:	cmp	r5, #0
     bb2:	beq.n	b9a <updateCircles()+0x12>
	if ((int)sinceCircleUpdate < CIRCLE_UPDATE_INTERVAL) return;
     bb4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     bb6:	ldr	r4, [pc, #732]	; (e94 <updateCircles()+0x30c>)
     bb8:	orr.w	r1, r1, r2, lsl #27
     bbc:	ldr	r3, [r4, #0]
     bbe:	vmov	s15, r1
     bc2:	vldr	d5, [pc, #708]	; e88 <updateCircles()+0x300>
     bc6:	vcvt.f64.u32	d7, s15
     bca:	vdiv.f64	d6, d7, d5
     bce:	vcvt.u32.f64	s12, d6
     bd2:	vmov	r2, s12
     bd6:	subs	r3, r2, r3
     bd8:	cmp	r3, #15
     bda:	ble.w	1076 <updateCircles()+0x4ee>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     bde:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     be2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     be6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     be8:	cmp	r3, r1
     bea:	it	eq
     bec:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     bee:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     bf0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     bf2:	ite	eq
     bf4:	moveq	r6, #1
     bf6:	movne	r6, #0
     bf8:	cmp	r6, #0
     bfa:	beq.n	be4 <updateCircles()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     bfc:	lsrs	r1, r3, #5
	sinceCircleUpdate = 0;

	matrix_A.clear();
     bfe:	ldr	r0, [pc, #664]	; (e98 <updateCircles()+0x310>)
     c00:	ldr.w	fp, [pc, #684]	; eb0 <updateCircles()+0x328>
     c04:	orr.w	r1, r1, r2, lsl #27
     c08:	vmov	s15, r1
     c0c:	vldr	d8, [pc, #632]	; e88 <updateCircles()+0x300>
     c10:	vcvt.f64.u32	d7, s15
     c14:	vdiv.f64	d6, d7, d8
     c18:	vcvt.u32.f64	s12, d6
     c1c:	vstr	s12, [r4]
     c20:	bl	abf8 <Adafruit_NeoPixel::clear()>
	matrix_B.clear();
     c24:	ldr	r0, [pc, #628]	; (e9c <updateCircles()+0x314>)
     c26:	bl	abf8 <Adafruit_NeoPixel::clear()>
     c2a:	b.n	c38 <updateCircles()+0xb0>
     c2c:	add.w	fp, fp, #60	; 0x3c

	for (int i = 0; i < CIRCLE_AM; i++) {
     c30:	ldr	r3, [pc, #620]	; (ea0 <updateCircles()+0x318>)
     c32:	cmp	r3, fp
     c34:	beq.w	e70 <updateCircles()+0x2e8>
		if (circles[i].active) {
     c38:	ldrb.w	r3, [fp, #-52]
     c3c:	cmp	r3, #0
     c3e:	beq.n	c2c <updateCircles()+0xa4>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c40:	ldr	r3, [pc, #588]	; (e90 <updateCircles()+0x308>)
     c42:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c44:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c46:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c48:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c4a:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c4c:	ldr	r6, [pc, #576]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     c4e:	cmp	r3, r1
     c50:	it	eq
     c52:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c54:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     c56:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     c58:	ite	eq
     c5a:	moveq	r5, #1
     c5c:	movne	r5, #0
     c5e:	cmp	r5, #0
     c60:	beq.n	c48 <updateCircles()+0xc0>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
     c62:	lsrs	r1, r3, #5
     c64:	ldr.w	r4, [fp]
     c68:	ldr.w	r7, [fp, #-4]
     c6c:	orr.w	r1, r1, r2, lsl #27
     c70:	adds	r3, r7, r4
     c72:	vmov	s15, r1
     c76:	vcvt.f64.u32	d7, s15
     c7a:	vdiv.f64	d6, d7, d8
     c7e:	vcvt.u32.f64	s12, d6
     c82:	vmov	r2, s12
     c86:	cmp	r2, r3
     c88:	bhi.w	106e <updateCircles()+0x4e6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c8c:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c8e:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c90:	ldr	r3, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c92:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c94:	ldr	r2, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     c96:	cmp	r2, r3
     c98:	it	eq
     c9a:	cmpeq	r1, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c9c:	mov	r0, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     c9e:	mov	r3, r2
    if (lo1 == lo2 && hi1 == hi2) {
     ca0:	ite	eq
     ca2:	moveq	r6, #1
     ca4:	movne	r6, #0
     ca6:	cmp	r6, #0
     ca8:	beq.n	c92 <updateCircles()+0x10a>
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     caa:	lsrs	r3, r2, #5
     cac:	vmov	s15, r7
     cb0:	vldr	s11, [fp, #-28]	; 0xffffffe4
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cb4:	vmov.f32	s8, #96	; 0x3f000000  0.5
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cb8:	orr.w	r3, r3, r1, lsl #27
     cbc:	vcvt.f32.s32	s7, s15
     cc0:	vldr	s6, [fp, #-24]	; 0xffffffe8
     cc4:	vmov	s15, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     cc8:	vldr	s10, [fp, #-36]	; 0xffffffdc
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ccc:	vsub.f32	s6, s6, s11
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cd0:	vldr	s9, [fp, #-40]	; 0xffffffd8
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cd4:	vcvt.f64.u32	d7, s15
     cd8:	vdiv.f64	d6, d7, d8
     cdc:	vcvt.u32.f64	s12, d6

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     ce0:	vmov.f32	s13, s9
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ce4:	vmov	r3, s12
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     ce8:	vmov.f32	s12, s10
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cec:	subs	r4, r3, r4
     cee:	vmov	s15, r4
     cf2:	vcvt.f32.u32	s15, s15
     cf6:	vdiv.f32	s14, s15, s7
     cfa:	vmov.f32	s15, s11
     cfe:	vfma.f32	s15, s14, s6
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d02:	vneg.f32	s14, s15
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     d06:	vstr	s15, [fp, #-32]	; 0xffffffe0
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d0a:	vfma.f32	s12, s15, s8

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d0e:	vfma.f32	s13, s15, s8
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d12:	vfma.f32	s9, s14, s8
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d16:	vfma.f32	s10, s14, s8
		int y2 = pos.y + size / 2;
     d1a:	vcvt.s32.f32	s15, s12

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d1e:	vcvt.s32.f32	s14, s13
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d22:	vmov	r5, s15
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d26:	vcvt.s32.f32	s15, s9
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d2a:	vmov	r3, s14

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d2e:	vstr	s14, [sp, #28]
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d32:	vmov	r9, s15
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d36:	vcvt.s32.f32	s15, s10
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d3a:	cmp	r9, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d3c:	vstr	s15, [sp, #20]
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d40:	bgt.w	c2c <updateCircles()+0xa4>
     d44:	add.w	r3, r9, r9, lsl #1
     d48:	add.w	r2, r9, r9, lsl #3
     d4c:	lsls	r6, r3, #3
     d4e:	mov.w	r8, r2, lsl #9
     d52:	mov	r3, r6
     d54:	mov	r6, r9
     d56:	mov	r9, r3
			for (int y = y1; y <= y2; y++) {
     d58:	ldr	r3, [sp, #20]
     d5a:	cmp	r3, r5
     d5c:	bgt.n	e52 <updateCircles()+0x2ca>
     d5e:	cmp	r6, #23
     d60:	ldr	r4, [sp, #20]
     d62:	ite	ls
     d64:	movls	r7, #0
     d66:	movhi	r7, #1
     d68:	b.n	d70 <updateCircles()+0x1e8>
     d6a:	adds	r4, #1
     d6c:	cmp	r5, r4
     d6e:	blt.n	e52 <updateCircles()+0x2ca>

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
     d70:	cmp	r4, #23
     d72:	bhi.n	d6a <updateCircles()+0x1e2>
     d74:	cmp	r7, #0
     d76:	bne.n	d6a <updateCircles()+0x1e2>
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
     d78:	vmov	s14, r4
     d7c:	vldr	s15, [fp, #-36]	; 0xffffffdc
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d80:	vldr	s13, [fp, #-40]	; 0xffffffd8
     d84:	add.w	sl, r4, r9
				float Dy = y - pos.y;
     d88:	vcvt.f32.s32	s14, s14
     d8c:	vsub.f32	s14, s14, s15
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d90:	vmov	s15, r6
     d94:	vcvt.f32.s32	s15, s15
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     d98:	vmul.f32	s14, s14, s14
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d9c:	vsub.f32	s15, s15, s13
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     da0:	vfma.f32	s14, s15, s15
     da4:	vcvt.f64.f32	d7, s14
     da8:	vsqrt.f64	d0, d7
     dac:	vcmp.f64	d0, d0
     db0:	vmrs	APSR_nzcv, fpscr
     db4:	bne.w	10a2 <updateCircles()+0x51a>


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     db8:	vcvt.f32.f64	s0, d0
     dbc:	vldr	s14, [fp, #-32]	; 0xffffffe0
     dc0:	vmov.f64	d6, #96	; 0x3f000000  0.5
     dc4:	vldr	s10, [fp, #4]
     dc8:	vcvt.f64.f32	d7, s14

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dcc:	ldr.w	r3, [fp, #-44]
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd0:	vcvt.f64.f32	d0, s0

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dd4:	add.w	r2, r4, r4, lsl #1
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd8:	vcvt.f64.f32	d5, s10
     ddc:	vfnms.f64	d0, d7, d6
     de0:	vmov.f64	d6, #112	; 0x3f800000  1.0
     de4:	vcmpe.f64	d0, #0.0
     de8:	vmrs	APSR_nzcv, fpscr
     dec:	it	le
     dee:	vnegle.f64	d0, d0
     df2:	vdiv.f64	d7, d0, d5
     df6:	vcmpe.f64	d7, d6
     dfa:	vmrs	APSR_nzcv, fpscr
     dfe:	bmi.n	eb4 <updateCircles()+0x32c>

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     e00:	add.w	r3, r3, r2, lsl #6
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     e04:	movs	r0, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e06:	mov.w	r1, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
     e0a:	vldr	s14, [pc, #152]	; ea4 <updateCircles()+0x31c>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e0e:	ldr.w	r2, [r3, r8]
	HSB_color.s = s;
     e12:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e16:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     e1a:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e1e:	ldr	r0, [pc, #136]	; (ea8 <updateCircles()+0x320>)
     e20:	lsrs	r3, r2, #3
     e22:	umull	r0, r3, r0, r3
     e26:	lsrs	r3, r3, #2
     e28:	mls	r3, r1, r3, r2
     e2c:	str	r3, [sp, #36]	; 0x24
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     e2e:	ldr	r2, [pc, #124]	; (eac <updateCircles()+0x324>)
     e30:	smull	r1, r2, r2, r3
     e34:	asrs	r1, r3, #31
     e36:	add	r2, r3
     e38:	rsb	r2, r1, r2, asr #5
     e3c:	subs	r2, #1
     e3e:	cmp	r2, #4
     e40:	bhi.w	1046 <updateCircles()+0x4be>
     e44:	tbh	[pc, r2, lsl #1]
     e48:	.word	0x00d100ee
     e4c:	.word	0x007600b2
     e50:	.short	0x011c
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     e52:	adds	r6, #1
     e54:	ldr	r3, [sp, #28]
     e56:	add.w	r8, r8, #4608	; 0x1200
     e5a:	add.w	r9, r9, #24
     e5e:	cmp	r3, r6
     e60:	bge.w	d58 <updateCircles()+0x1d0>
     e64:	add.w	fp, fp, #60	; 0x3c
	sinceCircleUpdate = 0;

	matrix_A.clear();
	matrix_B.clear();

	for (int i = 0; i < CIRCLE_AM; i++) {
     e68:	ldr	r3, [pc, #52]	; (ea0 <updateCircles()+0x318>)
     e6a:	cmp	r3, fp
     e6c:	bne.w	c38 <updateCircles()+0xb0>
	// for (int i = 0; i < synapse_B.numPixels(); i++) {
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
     e70:	ldr	r0, [pc, #36]	; (e98 <updateCircles()+0x310>)
     e72:	bl	a84c <Adafruit_NeoPixel::show()>
	matrix_B.show();
     e76:	ldr	r0, [pc, #36]	; (e9c <updateCircles()+0x314>)

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
     e78:	add	sp, #52	; 0x34
     e7a:	vpop	{d8}
     e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
	matrix_B.show();
     e82:	b.w	a84c <Adafruit_NeoPixel::show()>
     e86:	nop
     e88:	.word	0xd2f1a9fc
     e8c:	.word	0x3ff0624d
     e90:	.word	0x400d4000
     e94:	.word	0x2000c084
     e98:	.word	0x200099b8
     e9c:	.word	0x200099cc
     ea0:	.word	0x2000c0b8
     ea4:	.word	0x00000000
     ea8:	.word	0x16c16c17
     eac:	.word	0x88888889
     eb0:	.word	0x2000be60

				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     eb4:	add.w	r3, r3, r2, lsl #6
     eb8:	vsub.f64	d7, d6, d7
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     ebc:	movs	r0, #100	; 0x64
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ebe:	vmov.f32	s13, #112	; 0x3f800000  1.0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ec2:	ldr.w	r2, [r3, r8]
     ec6:	mov.w	r1, #360	; 0x168
     eca:	vcvt.f32.f64	s14, d7
	HSB_color.s = s;
     ece:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ed2:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     ed6:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eda:	ldr	r0, [pc, #464]	; (10ac <updateCircles()+0x524>)
     edc:	lsrs	r3, r2, #3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ede:	vcmp.f32	s14, s13
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ee2:	umull	r0, r3, r0, r3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ee6:	vmrs	APSR_nzcv, fpscr
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eea:	mov.w	r3, r3, lsr #2
     eee:	mls	r3, r1, r3, r2
     ef2:	str	r3, [sp, #36]	; 0x24
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ef4:	bne.n	e2e <updateCircles()+0x2a6>
void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
     ef6:	movs	r2, #1

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
     ef8:	movs	r3, #0
	HSB_updated = true;
     efa:	strb.w	r2, [sp, #45]	; 0x2d
				c.multiply(b);
				addPixelColor(strip, ledID, c);
     efe:	ldrb.w	r2, [sp, #8]
     f02:	strb.w	r3, [sp, #44]	; 0x2c
     f06:	add	r3, sp, #32
     f08:	strb.w	r2, [sp, #32]
     f0c:	ldrb.w	r2, [sp, #16]
     f10:	strb.w	r2, [sp, #33]	; 0x21
     f14:	ldrb.w	r2, [sp, #12]
     f18:	strb.w	r2, [sp, #34]	; 0x22
     f1c:	add	r2, sp, #48	; 0x30
     f1e:	ldmdb	r2, {r0, r1}
     f22:	stmia.w	sp, {r0, r1}
     f26:	mov	r1, sl
     f28:	ldr.w	r0, [fp, #-48]
     f2c:	ldmia	r3, {r2, r3}
     f2e:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
     f32:	b.n	d6a <updateCircles()+0x1e2>
     f34:	ldr	r2, [pc, #376]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
     f36:	vldr	s13, [pc, #380]	; 10b4 <updateCircles()+0x52c>
     f3a:	smull	r0, r2, r2, r3
     f3e:	vldr	s12, [pc, #376]	; 10b8 <updateCircles()+0x530>
     f42:	add	r2, r3
     f44:	rsb	r1, r1, r2, asr #5
     f48:	rsb	r1, r1, r1, lsl #4
     f4c:	sub.w	r3, r3, r1, lsl #2
     f50:	rsb	r3, r3, r3, lsl #7
     f54:	ldr	r2, [pc, #344]	; (10b0 <updateCircles()+0x528>)
     f56:	lsls	r3, r3, #1
     f58:	smull	r2, r1, r2, r3
     f5c:	asrs	r2, r3, #31
     f5e:	add	r3, r1
     f60:	rsb	r3, r2, r3, asr #5
     f64:	vmov	s15, r3
     f68:	vcvt.f32.s32	s15, s15
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f6c:	vmul.f32	s15, s15, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f70:	movs	r2, #0
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     f72:	vmul.f32	s13, s13, s14

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     f76:	movs	r3, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     f78:	vmul.f32	s14, s12, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f7c:	strb.w	r2, [sp, #45]	; 0x2d
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f80:	vcvt.u32.f32	s15, s15
     f84:	vstr	s15, [sp, #8]
		byte g = green()*multFac;
     f88:	vcvt.u32.f32	s15, s13
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f8c:	ldrb.w	r2, [sp, #8]
		byte g = green()*multFac;
     f90:	vstr	s15, [sp, #12]
		byte b = blue()*multFac;
     f94:	vcvt.u32.f32	s15, s14
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f98:	str	r2, [sp, #8]
		byte g = green()*multFac;
     f9a:	ldrb.w	r2, [sp, #12]
		byte b = blue()*multFac;
     f9e:	vstr	s15, [sp, #24]
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     fa2:	str	r2, [sp, #16]
		byte b = blue()*multFac;
     fa4:	ldrb.w	r2, [sp, #24]
     fa8:	str	r2, [sp, #12]
     faa:	b.n	efe <updateCircles()+0x376>
     fac:	ldr	r2, [pc, #256]	; (10b0 <updateCircles()+0x528>)
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     fae:	vldr	s12, [pc, #264]	; 10b8 <updateCircles()+0x530>
     fb2:	smull	r0, r2, r2, r3
     fb6:	vldr	s15, [pc, #252]	; 10b4 <updateCircles()+0x52c>
     fba:	add	r2, r3
     fbc:	rsb	r1, r1, r2, asr #5
     fc0:	ldr	r2, [pc, #236]	; (10b0 <updateCircles()+0x528>)
     fc2:	rsb	r1, r1, r1, lsl #4
     fc6:	sub.w	r3, r3, r1, lsl #2
     fca:	rsb	r3, r3, #60	; 0x3c
     fce:	rsb	r3, r3, r3, lsl #7
     fd2:	lsls	r3, r3, #1
     fd4:	smull	r2, r1, r2, r3
     fd8:	asrs	r2, r3, #31
     fda:	add	r3, r1
     fdc:	rsb	r3, r2, r3, asr #5
     fe0:	vmov	s13, r3
     fe4:	vcvt.f32.s32	s13, s13
     fe8:	b.n	f6c <updateCircles()+0x3e4>
     fea:	ldr	r2, [pc, #196]	; (10b0 <updateCircles()+0x528>)
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     fec:	vldr	s13, [pc, #200]	; 10b8 <updateCircles()+0x530>
     ff0:	smull	r0, r2, r2, r3
     ff4:	vldr	s15, [pc, #188]	; 10b4 <updateCircles()+0x52c>
     ff8:	add	r2, r3
     ffa:	rsb	r1, r1, r2, asr #5
     ffe:	rsb	r1, r1, r1, lsl #4
    1002:	sub.w	r3, r3, r1, lsl #2
    1006:	rsb	r3, r3, r3, lsl #7
    100a:	ldr	r2, [pc, #164]	; (10b0 <updateCircles()+0x528>)
    100c:	lsls	r3, r3, #1
    100e:	smull	r2, r1, r2, r3
    1012:	asrs	r2, r3, #31
    1014:	add	r3, r1
    1016:	rsb	r3, r2, r3, asr #5
    101a:	vmov	s12, r3
    101e:	vcvt.f32.s32	s12, s12
    1022:	b.n	f6c <updateCircles()+0x3e4>
    1024:	ldr	r2, [pc, #136]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
    1026:	vldr	s13, [pc, #144]	; 10b8 <updateCircles()+0x530>
    102a:	smull	r0, r2, r2, r3
    102e:	vldr	s12, [pc, #132]	; 10b4 <updateCircles()+0x52c>
    1032:	add	r2, r3
    1034:	rsb	r1, r1, r2, asr #5
    1038:	rsb	r1, r1, r1, lsl #4
    103c:	sub.w	r3, r3, r1, lsl #2
    1040:	rsb	r3, r3, #60	; 0x3c
    1044:	b.n	f50 <updateCircles()+0x3c8>
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
    1046:	rsb	r3, r3, r3, lsl #7
    104a:	ldr	r2, [pc, #100]	; (10b0 <updateCircles()+0x528>)
    104c:	vldr	s12, [pc, #100]	; 10b4 <updateCircles()+0x52c>
    1050:	lsls	r3, r3, #1
    1052:	vldr	s15, [pc, #100]	; 10b8 <updateCircles()+0x530>
    1056:	smull	r2, r1, r2, r3
    105a:	asrs	r2, r3, #31
    105c:	add	r3, r1
    105e:	rsb	r3, r2, r3, asr #5
    1062:	uxtb	r3, r3
    1064:	vmov	s13, r3
    1068:	vcvt.f32.s32	s13, s13
    106c:	b.n	f6c <updateCircles()+0x3e4>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
			active = false;
    106e:	movs	r3, #0
    1070:	strb.w	r3, [fp, #-52]
    1074:	b.n	c2c <updateCircles()+0xa4>

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
    1076:	add	sp, #52	; 0x34
    1078:	vpop	{d8}
    107c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1080:	ldr	r2, [pc, #44]	; (10b0 <updateCircles()+0x528>)
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
    1082:	vldr	s13, [pc, #48]	; 10b4 <updateCircles()+0x52c>
    1086:	smull	r0, r2, r2, r3
    108a:	vldr	s15, [pc, #44]	; 10b8 <updateCircles()+0x530>
    108e:	add	r2, r3
    1090:	rsb	r1, r1, r2, asr #5
    1094:	rsb	r1, r1, r1, lsl #4
    1098:	sub.w	r3, r3, r1, lsl #2
    109c:	rsb	r3, r3, #60	; 0x3c
    10a0:	b.n	1006 <updateCircles()+0x47e>
				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
    10a2:	vmov.f64	d0, d7
    10a6:	bl	d2d8 <sqrt>
    10aa:	b.n	db8 <updateCircles()+0x230>
    10ac:	.word	0x16c16c17
    10b0:	.word	0x88888889
    10b4:	.word	0x00000000
    10b8:	.word	0x437e0000

000010bc <updateRandomSeed()>:
      }
  }
}

unsigned int randomSeedN = 0;
void updateRandomSeed(){
    10bc:	push	{r4, r5, r6, lr}
    10be:	ldr	r6, [pc, #48]	; (10f0 <updateRandomSeed()+0x34>)
    10c0:	movs	r4, #0
    10c2:	mov	r5, r6

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    10c4:	mov	r0, r4
    10c6:	adds	r4, #1
    10c8:	bl	be18 <eeprom_read_byte>

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    10cc:	strb.w	r0, [r5], #1
    10d0:	cmp	r4, #4
    10d2:	bne.n	10c4 <updateRandomSeed()+0x8>
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
    10d4:	ldr	r3, [r6, #0]
    }

    template< typename T > const T &put( int idx, const T &t ){        
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    10d6:	mov	r2, r4
    10d8:	ldr	r0, [pc, #20]	; (10f0 <updateRandomSeed()+0x34>)
    10da:	movs	r1, #0
    10dc:	adds	r3, #1
    10de:	str	r3, [r6, #0]
    10e0:	bl	c034 <eeprom_write_block>
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10e4:	ldr	r0, [r6, #0]
}
    10e6:	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int randomSeedN = 0;
void updateRandomSeed(){
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10ea:	b.w	cb3c <randomSeed(unsigned long)>
    10ee:	nop
    10f0:	.word	0x2000c0c4
    10f4:	.word	0x00000000

000010f8 <regular_setup()>:
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    10f8:	ldr	r3, [pc, #716]	; (13c8 <regular_setup()+0x2d0>)
    10fa:	movs	r1, #255	; 0xff
}

elapsedMillis sinceAutomatonInit;
elapsedMillis sinceLastPulses;

void regular_setup(){
    10fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1100:	ldr.w	r0, [r3, #400]	; 0x190
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1104:	mov.w	fp, #1
    1108:	movw	r5, #4636	; 0x121c
    110c:	vpush	{d8-d9}
    1110:	sub	sp, #12
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1112:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    1116:	ldr	r3, [pc, #688]	; (13c8 <regular_setup()+0x2d0>)
    1118:	movs	r1, #8
    111a:	movs	r0, #0
    111c:	ldr.w	r4, [r3, #388]	; 0x184
    1120:	bl	cb50 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1124:	add.w	r1, r0, fp
    1128:	ldr	r3, [pc, #668]	; (13c8 <regular_setup()+0x2d0>)
    112a:	add.w	r0, r0, r0, lsl #1
    112e:	mov.w	ip, #0
    1132:	add.w	r1, r1, r1, lsl #1
    1136:	ldr.w	lr, [r3, #404]	; 0x194
    113a:	add.w	r8, r3, r0, lsl #3
    113e:	ldr	r0, [pc, #648]	; (13c8 <regular_setup()+0x2d0>)
    1140:	lsls	r1, r1, #3
    1142:	str.w	lr, [r4, r5]
    1146:	ldr.w	r2, [r8, #32]
    114a:	ldr.w	r6, [r8, #40]	; 0x28
    114e:	add.w	r9, r0, r1
    1152:	ldr	r0, [r0, r1]
    1154:	ldr.w	r1, [r8, #36]	; 0x24
    1158:	ldr.w	r7, [r3, #408]	; 0x198
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    115c:	ldr.w	r3, [r3, #384]	; 0x180
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1160:	str	r1, [r4, #12]
    1162:	ldr.w	r1, [r9, #4]
    1166:	add.w	r9, r3, #4640	; 0x1220
    116a:	str	r6, [r4, #16]
    116c:	ldr.w	r6, [r8, #44]	; 0x2c
    1170:	add.w	r8, r4, #4640	; 0x1220
    1174:	str	r2, [r4, #8]
    1176:	ldr	r2, [pc, #592]	; (13c8 <regular_setup()+0x2d0>)
    1178:	str	r6, [r4, #20]
    117a:	ldr	r2, [r2, #4]
    117c:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    117e:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1180:	mov	r6, r2
    1182:	ldr	r2, [pc, #580]	; (13c8 <regular_setup()+0x2d0>)
    1184:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    1186:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1188:	strb.w	ip, [r4, #24]
    118c:	ldr.w	ip, [r2, #12]
    1190:	ldr	r4, [r2, #8]
    1192:	ldr	r2, [r2, #16]
    1194:	str.w	r7, [r8]
    1198:	str	r2, [r3, #16]
    119a:	ldr	r2, [pc, #556]	; (13c8 <regular_setup()+0x2d0>)
    119c:	str.w	lr, [r3, r5]
    11a0:	ldr	r2, [r2, #20]
    11a2:	strb.w	fp, [r3, #24]
    11a6:	str	r2, [r3, #20]
    11a8:	ldr	r2, [pc, #540]	; (13c8 <regular_setup()+0x2d0>)
    11aa:	str.w	ip, [r3, #12]
    11ae:	ldr	r2, [r2, #0]
    11b0:	str	r6, [r3, #4]
    11b2:	str	r2, [r3, #0]
    11b4:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    11b6:	ldr	r3, [pc, #528]	; (13c8 <regular_setup()+0x2d0>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11b8:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    11bc:	ldr.w	r8, [r3, #392]	; 0x188
    11c0:	bl	cb50 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11c4:	ldr	r3, [pc, #512]	; (13c8 <regular_setup()+0x2d0>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11c6:	add.w	r0, r0, r0, lsl #1
    11ca:	add.w	sl, r8, #4640	; 0x1220
    11ce:	add.w	r0, r3, r0, lsl #3
    11d2:	ldr.w	ip, [r3, #404]	; 0x194
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11d6:	ldr.w	r7, [r3, #396]	; 0x18c
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11da:	add.w	r1, r0, #200	; 0xc8
    11de:	str.w	ip, [r8, r5]
    11e2:	ldr.w	r3, [r3, #408]	; 0x198
    11e6:	add.w	r9, r7, #4640	; 0x1220
    11ea:	ldr.w	r4, [r0, #196]	; 0xc4
    11ee:	ldmia	r1, {r1, r2, r6}
    11f0:	str.w	r6, [r8, #16]
    11f4:	ldr.w	r6, [r0, #212]	; 0xd4
    11f8:	ldr.w	r0, [r0, #192]	; 0xc0
    11fc:	str.w	r1, [r8, #8]
    1200:	ldr	r1, [pc, #452]	; (13c8 <regular_setup()+0x2d0>)
    1202:	str.w	r2, [r8, #12]
    1206:	ldr	r1, [r1, #4]
    1208:	ldr	r2, [pc, #444]	; (13c8 <regular_setup()+0x2d0>)
    120a:	str.w	r6, [r8, #20]
    120e:	mov	r6, r1
    1210:	ldr.w	lr, [r2, #8]
    1214:	ldr	r1, [r2, #20]
    1216:	strb.w	fp, [r8, #24]
    121a:	stmia.w	r8, {r0, r4}
    121e:	ldr	r4, [r2, #16]
    1220:	ldr	r0, [r2, #12]
    1222:	ldr	r2, [r2, #0]
    1224:	str.w	r3, [sl]
    1228:	str.w	ip, [r7, r5]
    122c:	str	r6, [r7, #4]
    122e:	str	r2, [r7, #0]
    1230:	strb.w	fp, [r7, #24]
    1234:	str.w	lr, [r7, #8]
    1238:	str	r0, [r7, #12]
    123a:	str	r4, [r7, #16]
    123c:	str	r1, [r7, #20]
    123e:	str.w	r3, [r9]
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1242:	ldr	r3, [pc, #388]	; (13c8 <regular_setup()+0x2d0>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1244:	ldr	r2, [pc, #384]	; (13c8 <regular_setup()+0x2d0>)
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1246:	ldr.w	r3, [r3, #312]	; 0x138
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    124a:	ldr.w	r5, [r2, #388]	; 0x184
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    124e:	subs	r3, #1
    1250:	ldr.w	r6, [r2, #316]	; 0x13c
    1254:	ldrb.w	sl, [r2, #320]	; 0x140
    1258:	cmp	r3, #4
    125a:	bhi.w	29a4 <regular_setup()+0x18ac>
    125e:	tbh	[pc, r3, lsl #1]
    1262:	.short	0x002e
    1264:	.word	0x00930058
    1268:	.word	0x000500e9
    126c:	add.w	r7, r5, #2304	; 0x900
    1270:	add.w	r6, r5, #28
    1274:	mov	r4, r5
    1276:	mov	r8, r7
    1278:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    127a:	cmp	r7, #0
    127c:	bne.w	26be <regular_setup()+0x15c6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1280:	ldr	r3, [r5, #0]
    1282:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1284:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1288:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    128a:	str	r3, [r4, #120]	; 0x78
    128c:	adds	r4, #96	; 0x60
    128e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1290:	cmp	r4, r8
    1292:	bne.n	127a <regular_setup()+0x182>
    1294:	ldr	r3, [pc, #304]	; (13c8 <regular_setup()+0x2d0>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1296:	ldr	r2, [pc, #304]	; (13c8 <regular_setup()+0x2d0>)
    1298:	ldrb.w	sl, [r3, #320]	; 0x140
    129c:	ldr.w	r6, [r3, #316]	; 0x13c
    12a0:	ldr.w	r3, [r3, #312]	; 0x138
    12a4:	ldr.w	r5, [r2, #384]	; 0x180
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    12a8:	subs	r3, #1
    12aa:	cmp	r3, #4
    12ac:	bhi.w	2a78 <regular_setup()+0x1980>
    12b0:	tbh	[pc, r3, lsl #1]
    12b4:	.word	0x017901b5
    12b8:	.word	0x01e00125
    12bc:	.short	0x00f3
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12be:	movs	r0, #8
    12c0:	bl	cb48 <random(unsigned long)>
    12c4:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12c8:	movs	r0, #8
    12ca:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    12ce:	cmp	r6, #0
    12d0:	ble.n	1294 <regular_setup()+0x19c>
    12d2:	add.w	r3, r0, #15
    12d6:	add.w	r4, r4, r4, lsl #1
    12da:	movs	r7, #0
    12dc:	add.w	r4, r3, r4, lsl #3
    12e0:	add.w	r4, r5, r4, lsl #2
      if (rand){
    12e4:	cmp.w	sl, #0
    12e8:	bne.n	12fc <regular_setup()+0x204>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    12ea:	ldr	r3, [r5, #0]
    12ec:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    12ee:	adds	r7, #1
    12f0:	adds	r4, #4
    12f2:	cmp	r7, r6
    12f4:	beq.n	1294 <regular_setup()+0x19c>
      if (rand){
    12f6:	cmp.w	sl, #0
    12fa:	beq.n	12ea <regular_setup()+0x1f2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    12fc:	ldr	r3, [r5, #20]
    12fe:	ldr	r2, [r5, #16]
    1300:	subs	r0, r3, r2
    1302:	adds	r0, #2
    1304:	bl	cb48 <random(unsigned long)>
    1308:	ldr	r3, [r5, #16]
    130a:	subs	r3, #1
    130c:	add	r0, r3
    130e:	str	r0, [r4, #0]
    1310:	b.n	12ee <regular_setup()+0x1f6>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1312:	movs	r0, #8
    1314:	bl	cb48 <random(unsigned long)>
    1318:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    131c:	movs	r0, #8
    131e:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1322:	cmp	r6, #0
    1324:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1326:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    132a:	it	lt
    132c:	addlt	r3, r6, #1
    132e:	cmp	r6, #0
    1330:	mov.w	fp, r3, asr #1
    1334:	it	lt
    1336:	addlt	r6, #1
    1338:	rsb	fp, fp, #0
    133c:	asrs	r6, r6, #1
    133e:	add.w	r7, r0, fp
    1342:	adds	r3, r0, r6
    1344:	cmp	r7, r3
    1346:	str	r3, [sp, #4]
    1348:	bge.n	1294 <regular_setup()+0x19c>
    134a:	add	fp, r4
    134c:	add	r4, r6
    134e:	add.w	r6, fp, fp, lsl #1
    1352:	add.w	r6, r7, r6, lsl #3
    1356:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    135a:	cmp	fp, r4
    135c:	bge.n	137c <regular_setup()+0x284>
    135e:	mov	r9, r6
    1360:	mov	r8, fp
        if (rand){
    1362:	cmp.w	sl, #0
    1366:	bne.w	26a4 <regular_setup()+0x15ac>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    136a:	ldr	r3, [r5, #0]
    136c:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1370:	add.w	r8, r8, #1
    1374:	add.w	r9, r9, #96	; 0x60
    1378:	cmp	r8, r4
    137a:	bne.n	1362 <regular_setup()+0x26a>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    137c:	adds	r7, #1
    137e:	ldr	r3, [sp, #4]
    1380:	adds	r6, #4
    1382:	cmp	r7, r3
    1384:	bne.n	135a <regular_setup()+0x262>
    1386:	b.n	1294 <regular_setup()+0x19c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1388:	movs	r0, #8
    138a:	mov	r7, r5
    138c:	bl	cb48 <random(unsigned long)>
    1390:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1392:	movs	r0, #8
    1394:	add.w	fp, r5, #96	; 0x60
    1398:	bl	cb48 <random(unsigned long)>
    139c:	vmov	s15, r6
    13a0:	adds	r4, #8
    13a2:	add.w	r3, r0, #8
    13a6:	vcvt.f64.s32	d9, s15
    13aa:	rsb	r9, r0, #16
    13ae:	negs	r3, r3
    13b0:	rsb	r8, r4, #0
    13b4:	str	r3, [sp, #4]
    13b6:	vmov	s15, r8
    13ba:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    13bc:	mov	r6, r7
    13be:	vcvt.f64.s32	d8, s15
    13c2:	vmul.f64	d8, d8, d8
    13c6:	b.n	13d8 <regular_setup()+0x2e0>
    13c8:	.word	0x20009630
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    13cc:	ldr	r3, [r5, #0]
    13ce:	str	r3, [r6, #28]
    13d0:	adds	r4, #1
    13d2:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    13d4:	cmp	r4, r9
    13d6:	beq.n	1428 <regular_setup()+0x330>
      double xx = x-midPoint_y;
    13d8:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    13dc:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    13e0:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    13e4:	vfma.f64	d0, d7, d7
    13e8:	vsqrt.f64	d7, d0
    13ec:	vcmp.f64	d7, d7
    13f0:	vmrs	APSR_nzcv, fpscr
    13f4:	bne.w	2c88 <regular_setup()+0x1b90>
    13f8:	vcmpe.f64	d7, d9
    13fc:	vmrs	APSR_nzcv, fpscr
    1400:	bhi.n	13d0 <regular_setup()+0x2d8>
        if (rand){
    1402:	cmp.w	sl, #0
    1406:	beq.n	13cc <regular_setup()+0x2d4>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1408:	ldr	r3, [r5, #20]
    140a:	adds	r4, #1
    140c:	ldr	r0, [r5, #16]
    140e:	adds	r6, #96	; 0x60
    1410:	subs	r0, r3, r0
    1412:	adds	r0, #2
    1414:	bl	cb48 <random(unsigned long)>
    1418:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    141a:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    141c:	add.w	r3, r3, #4294967295
    1420:	add	r0, r3
    1422:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1426:	bne.n	13d8 <regular_setup()+0x2e0>
    1428:	adds	r7, #4
    142a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    142e:	cmp	r7, fp
    1430:	bne.n	13b6 <regular_setup()+0x2be>
    1432:	b.n	1294 <regular_setup()+0x19c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1434:	cmp	r6, #0
    1436:	ble.n	14c2 <regular_setup()+0x3ca>
    1438:	mov	r9, r5
    143a:	movs	r7, #0
    143c:	mov	r5, sl
    143e:	b.n	1456 <regular_setup()+0x35e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1440:	add.w	r3, r8, r3, lsl #3
    1444:	ldr.w	r2, [r9]
    1448:	add.w	r3, r9, r3, lsl #2
    144c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    144e:	adds	r7, #1
    1450:	cmp	r7, r6
    1452:	beq.w	1294 <regular_setup()+0x19c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1456:	movs	r0, #8
    1458:	bl	cb48 <random(unsigned long)>
    145c:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1460:	movs	r0, #8
    1462:	bl	cb48 <random(unsigned long)>
    1466:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    146a:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    146e:	cmp	r5, #0
    1470:	beq.n	1440 <regular_setup()+0x348>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1472:	ldr.w	r3, [r9, #20]
    1476:	add.w	r4, r4, r4, lsl #1
    147a:	ldr.w	r2, [r9, #16]
    147e:	subs	r0, r3, r2
    1480:	adds	r0, #2
    1482:	bl	cb48 <random(unsigned long)>
    1486:	ldr.w	r3, [r9, #16]
    148a:	subs	r2, r3, #1
    148c:	add.w	r3, r8, r4, lsl #3
    1490:	add	r0, r2
    1492:	add.w	r3, r9, r3, lsl #2
    1496:	str	r0, [r3, #28]
    1498:	b.n	144e <regular_setup()+0x356>
    149a:	add.w	r7, r5, #2304	; 0x900
    149e:	add.w	r6, r5, #28
    14a2:	mov	r4, r5
    14a4:	mov	r8, r7
    14a6:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    14a8:	cmp	r7, #0
    14aa:	bne.w	275e <regular_setup()+0x1666>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    14ae:	ldr	r3, [r5, #0]
    14b0:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    14b2:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    14b6:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    14b8:	str	r3, [r4, #120]	; 0x78
    14ba:	adds	r4, #96	; 0x60
    14bc:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    14be:	cmp	r4, r8
    14c0:	bne.n	14a8 <regular_setup()+0x3b0>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    14c2:	ldr	r3, [pc, #800]	; (17e4 <regular_setup()+0x6ec>)
    14c4:	movs	r1, #4
    14c6:	movs	r0, #0
    14c8:	ldr.w	r5, [r3, #392]	; 0x188
    14cc:	bl	cb50 <random(long, long)>
    14d0:	ldr	r3, [pc, #784]	; (17e4 <regular_setup()+0x6ec>)
    14d2:	add.w	r0, r0, r0, lsl #1
    14d6:	add.w	r3, r3, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    14da:	ldr.w	r2, [r3, #324]	; 0x144
    14de:	add.w	r3, r3, #324	; 0x144
    14e2:	subs	r2, #1
    14e4:	ldr	r4, [r3, #4]
    14e6:	ldrb.w	sl, [r3, #8]
    14ea:	cmp	r2, #4
    14ec:	bhi.w	293a <regular_setup()+0x1842>
    14f0:	tbh	[pc, r2, lsl #1]
    14f4:	.word	0x01ae01ea
    14f8:	.word	0x01260158
    14fc:	.short	0x00f4
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    14fe:	movs	r0, #8
    1500:	mov	r7, r5
    1502:	bl	cb48 <random(unsigned long)>
    1506:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1508:	movs	r0, #8
    150a:	add.w	fp, r5, #96	; 0x60
    150e:	bl	cb48 <random(unsigned long)>
    1512:	vmov	s15, r6
    1516:	adds	r4, #8
    1518:	add.w	r3, r0, #8
    151c:	vcvt.f64.s32	d9, s15
    1520:	rsb	r9, r0, #16
    1524:	negs	r3, r3
    1526:	rsb	r8, r4, #0
    152a:	str	r3, [sp, #4]
    152c:	vmov	s15, r8
    1530:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1532:	mov	r6, r7
    1534:	vcvt.f64.s32	d8, s15
    1538:	vmul.f64	d8, d8, d8
    153c:	b.n	154a <regular_setup()+0x452>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    153e:	ldr	r3, [r5, #0]
    1540:	str	r3, [r6, #28]
    1542:	adds	r4, #1
    1544:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1546:	cmp	r4, r9
    1548:	beq.n	159a <regular_setup()+0x4a2>
      double xx = x-midPoint_y;
    154a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    154e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1552:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1556:	vfma.f64	d0, d7, d7
    155a:	vsqrt.f64	d7, d0
    155e:	vcmp.f64	d7, d7
    1562:	vmrs	APSR_nzcv, fpscr
    1566:	bne.w	2cda <regular_setup()+0x1be2>
    156a:	vcmpe.f64	d7, d9
    156e:	vmrs	APSR_nzcv, fpscr
    1572:	bhi.n	1542 <regular_setup()+0x44a>
        if (rand){
    1574:	cmp.w	sl, #0
    1578:	beq.n	153e <regular_setup()+0x446>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    157a:	ldr	r3, [r5, #20]
    157c:	adds	r4, #1
    157e:	ldr	r0, [r5, #16]
    1580:	adds	r6, #96	; 0x60
    1582:	subs	r0, r3, r0
    1584:	adds	r0, #2
    1586:	bl	cb48 <random(unsigned long)>
    158a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    158c:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    158e:	add.w	r3, r3, #4294967295
    1592:	add	r0, r3
    1594:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1598:	bne.n	154a <regular_setup()+0x452>
    159a:	adds	r7, #4
    159c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    15a0:	cmp	r7, fp
    15a2:	bne.n	152c <regular_setup()+0x434>
    15a4:	b.n	14c2 <regular_setup()+0x3ca>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15a6:	movs	r0, #8
    15a8:	bl	cb48 <random(unsigned long)>
    15ac:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15b0:	movs	r0, #8
    15b2:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15b6:	cmp	r6, #0
    15b8:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15ba:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15be:	it	lt
    15c0:	addlt	r3, r6, #1
    15c2:	cmp	r6, #0
    15c4:	mov.w	fp, r3, asr #1
    15c8:	it	lt
    15ca:	addlt	r6, #1
    15cc:	rsb	fp, fp, #0
    15d0:	asrs	r6, r6, #1
    15d2:	add.w	r7, r0, fp
    15d6:	adds	r3, r0, r6
    15d8:	cmp	r7, r3
    15da:	str	r3, [sp, #4]
    15dc:	bge.w	14c2 <regular_setup()+0x3ca>
    15e0:	add	fp, r4
    15e2:	add	r4, r6
    15e4:	add.w	r6, fp, fp, lsl #1
    15e8:	add.w	r6, r7, r6, lsl #3
    15ec:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    15f0:	cmp	fp, r4
    15f2:	bge.n	1612 <regular_setup()+0x51a>
    15f4:	mov	r9, r6
    15f6:	mov	r8, fp
        if (rand){
    15f8:	cmp.w	sl, #0
    15fc:	bne.w	2670 <regular_setup()+0x1578>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1600:	ldr	r3, [r5, #0]
    1602:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1606:	add.w	r8, r8, #1
    160a:	add.w	r9, r9, #96	; 0x60
    160e:	cmp	r8, r4
    1610:	bne.n	15f8 <regular_setup()+0x500>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1612:	adds	r7, #1
    1614:	ldr	r3, [sp, #4]
    1616:	adds	r6, #4
    1618:	cmp	r7, r3
    161a:	bne.n	15f0 <regular_setup()+0x4f8>
    161c:	b.n	14c2 <regular_setup()+0x3ca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    161e:	movs	r0, #8
    1620:	bl	cb48 <random(unsigned long)>
    1624:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1628:	movs	r0, #8
    162a:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    162e:	cmp	r6, #0
    1630:	ble.w	14c2 <regular_setup()+0x3ca>
    1634:	add.w	r3, r0, #15
    1638:	add.w	r4, r4, r4, lsl #1
    163c:	mov	r8, r6
    163e:	mov	r6, sl
    1640:	add.w	r4, r3, r4, lsl #3
    1644:	movs	r7, #0
    1646:	add.w	r4, r5, r4, lsl #2
      if (rand){
    164a:	cbnz	r6, 165e <regular_setup()+0x566>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    164c:	ldr	r3, [r5, #0]
    164e:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1650:	adds	r7, #1
    1652:	adds	r4, #4
    1654:	cmp	r7, r8
    1656:	beq.w	14c2 <regular_setup()+0x3ca>
      if (rand){
    165a:	cmp	r6, #0
    165c:	beq.n	164c <regular_setup()+0x554>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    165e:	ldr	r3, [r5, #20]
    1660:	ldr	r2, [r5, #16]
    1662:	subs	r0, r3, r2
    1664:	adds	r0, #2
    1666:	bl	cb48 <random(unsigned long)>
    166a:	ldr	r3, [r5, #16]
    166c:	subs	r3, #1
    166e:	add	r0, r3
    1670:	str	r0, [r4, #0]
    1672:	b.n	1650 <regular_setup()+0x558>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1674:	cmp	r6, #0
    1676:	ble.w	14c2 <regular_setup()+0x3ca>
    167a:	mov	r9, r5
    167c:	movs	r7, #0
    167e:	mov	r5, sl
    1680:	b.n	1698 <regular_setup()+0x5a0>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1682:	add.w	r3, r4, r3, lsl #3
    1686:	ldr.w	r2, [r9]
    168a:	add.w	r3, r9, r3, lsl #2
    168e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1690:	adds	r7, #1
    1692:	cmp	r7, r6
    1694:	beq.w	14c2 <regular_setup()+0x3ca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1698:	movs	r0, #8
    169a:	bl	cb48 <random(unsigned long)>
    169e:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    16a2:	movs	r0, #8
    16a4:	bl	cb48 <random(unsigned long)>
    16a8:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    16ac:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    16b0:	cmp	r5, #0
    16b2:	beq.n	1682 <regular_setup()+0x58a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16b4:	ldr.w	r3, [r9, #20]
    16b8:	add.w	r8, r8, r8, lsl #1
    16bc:	ldr.w	r2, [r9, #16]
    16c0:	add.w	r4, r4, r8, lsl #3
    16c4:	subs	r0, r3, r2
    16c6:	add.w	r4, r9, r4, lsl #2
    16ca:	adds	r0, #2
    16cc:	bl	cb48 <random(unsigned long)>
    16d0:	ldr.w	r3, [r9, #16]
    16d4:	subs	r3, #1
    16d6:	add	r0, r3
    16d8:	str	r0, [r4, #28]
    16da:	b.n	1690 <regular_setup()+0x598>
    16dc:	add.w	r7, r5, #2304	; 0x900
    16e0:	add.w	r6, r5, #28
    16e4:	mov	r4, r5
    16e6:	mov	r8, r7
    16e8:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    16ea:	cmp	r7, #0
    16ec:	bne.w	270e <regular_setup()+0x1616>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    16f0:	ldr	r3, [r5, #0]
    16f2:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    16f4:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    16f8:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    16fa:	str	r3, [r4, #120]	; 0x78
    16fc:	adds	r4, #96	; 0x60
    16fe:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1700:	cmp	r4, r8
    1702:	bne.n	16ea <regular_setup()+0x5f2>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    1704:	ldr	r3, [pc, #220]	; (17e4 <regular_setup()+0x6ec>)
    1706:	movs	r1, #4
    1708:	movs	r0, #0
    170a:	ldr.w	r5, [r3, #396]	; 0x18c
    170e:	bl	cb50 <random(long, long)>
    1712:	ldr	r3, [pc, #208]	; (17e4 <regular_setup()+0x6ec>)
    1714:	add.w	r0, r0, r0, lsl #1
    1718:	add.w	r3, r3, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    171c:	ldr.w	r2, [r3, #324]	; 0x144
    1720:	add.w	r3, r3, #324	; 0x144
    1724:	subs	r2, #1
    1726:	ldr	r6, [r3, #4]
    1728:	ldrb.w	fp, [r3, #8]
    172c:	cmp	r2, #4
    172e:	bhi.w	2c1e <regular_setup()+0x1b26>
    1732:	tbh	[pc, r2, lsl #1]
    1736:	.short	0x0287
    1738:	.word	0x01f40248
    173c:	.word	0x00f501be
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1740:	cmp	r4, #0
    1742:	ble.n	1704 <regular_setup()+0x60c>
    1744:	mov	r9, r5
    1746:	movs	r7, #0
    1748:	mov	r5, sl
    174a:	b.n	1760 <regular_setup()+0x668>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    174c:	add.w	r3, r6, r3, lsl #3
    1750:	ldr.w	r2, [r9]
    1754:	add.w	r3, r9, r3, lsl #2
    1758:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    175a:	adds	r7, #1
    175c:	cmp	r7, r4
    175e:	beq.n	1704 <regular_setup()+0x60c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1760:	movs	r0, #8
    1762:	bl	cb48 <random(unsigned long)>
    1766:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    176a:	movs	r0, #8
    176c:	bl	cb48 <random(unsigned long)>
    1770:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1774:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1778:	cmp	r5, #0
    177a:	beq.n	174c <regular_setup()+0x654>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    177c:	ldr.w	r3, [r9, #20]
    1780:	add.w	r8, r8, r8, lsl #1
    1784:	ldr.w	r2, [r9, #16]
    1788:	add.w	r6, r6, r8, lsl #3
    178c:	subs	r0, r3, r2
    178e:	add.w	r6, r9, r6, lsl #2
    1792:	adds	r0, #2
    1794:	bl	cb48 <random(unsigned long)>
    1798:	ldr.w	r3, [r9, #16]
    179c:	subs	r3, #1
    179e:	add	r0, r3
    17a0:	str	r0, [r6, #28]
    17a2:	b.n	175a <regular_setup()+0x662>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17a4:	movs	r0, #8
    17a6:	mov	r7, r5
    17a8:	bl	cb48 <random(unsigned long)>
    17ac:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17ae:	movs	r0, #8
    17b0:	add.w	fp, r5, #96	; 0x60
    17b4:	bl	cb48 <random(unsigned long)>
    17b8:	vmov	s15, r4
    17bc:	adds	r6, #8
    17be:	add.w	r3, r0, #8
    17c2:	vcvt.f64.s32	d9, s15
    17c6:	rsb	r9, r0, #16
    17ca:	negs	r3, r3
    17cc:	rsb	r8, r6, #0
    17d0:	str	r3, [sp, #4]
    17d2:	vmov	s15, r8
    17d6:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    17d8:	mov	r6, r7
    17da:	vcvt.f64.s32	d8, s15
    17de:	vmul.f64	d8, d8, d8
    17e2:	b.n	17f4 <regular_setup()+0x6fc>
    17e4:	.word	0x20009630
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    17e8:	ldr	r3, [r5, #0]
    17ea:	str	r3, [r6, #28]
    17ec:	adds	r4, #1
    17ee:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    17f0:	cmp	r4, r9
    17f2:	beq.n	1844 <regular_setup()+0x74c>
      double xx = x-midPoint_y;
    17f4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    17f8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    17fc:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1800:	vfma.f64	d0, d7, d7
    1804:	vsqrt.f64	d7, d0
    1808:	vcmp.f64	d7, d7
    180c:	vmrs	APSR_nzcv, fpscr
    1810:	bne.w	2cce <regular_setup()+0x1bd6>
    1814:	vcmpe.f64	d7, d9
    1818:	vmrs	APSR_nzcv, fpscr
    181c:	bhi.n	17ec <regular_setup()+0x6f4>
        if (rand){
    181e:	cmp.w	sl, #0
    1822:	beq.n	17e8 <regular_setup()+0x6f0>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1824:	ldr	r3, [r5, #20]
    1826:	adds	r4, #1
    1828:	ldr	r0, [r5, #16]
    182a:	adds	r6, #96	; 0x60
    182c:	subs	r0, r3, r0
    182e:	adds	r0, #2
    1830:	bl	cb48 <random(unsigned long)>
    1834:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1836:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1838:	add.w	r3, r3, #4294967295
    183c:	add	r0, r3
    183e:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1842:	bne.n	17f4 <regular_setup()+0x6fc>
    1844:	adds	r7, #4
    1846:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    184a:	cmp	r7, fp
    184c:	bne.n	17d2 <regular_setup()+0x6da>
    184e:	b.n	1704 <regular_setup()+0x60c>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1850:	movs	r0, #8
    1852:	bl	cb48 <random(unsigned long)>
    1856:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    185a:	movs	r0, #8
    185c:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1860:	cmp	r4, #0
    1862:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1864:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1868:	it	lt
    186a:	addlt	r3, r4, #1
    186c:	cmp	r4, #0
    186e:	mov.w	fp, r3, asr #1
    1872:	it	lt
    1874:	addlt	r4, #1
    1876:	rsb	fp, fp, #0
    187a:	asrs	r4, r4, #1
    187c:	add.w	r7, r0, fp
    1880:	adds	r3, r4, r0
    1882:	cmp	r3, r7
    1884:	str	r3, [sp, #4]
    1886:	ble.w	1704 <regular_setup()+0x60c>
    188a:	add	fp, r6
    188c:	add.w	r9, r4, r6
    1890:	add.w	r6, fp, fp, lsl #1
    1894:	add.w	r6, r7, r6, lsl #3
    1898:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    189c:	cmp	fp, r9
    189e:	bge.n	18bc <regular_setup()+0x7c4>
    18a0:	mov	r8, r6
    18a2:	mov	r4, fp
        if (rand){
    18a4:	cmp.w	sl, #0
    18a8:	bne.w	268a <regular_setup()+0x1592>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    18ac:	ldr	r3, [r5, #0]
    18ae:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    18b2:	adds	r4, #1
    18b4:	add.w	r8, r8, #96	; 0x60
    18b8:	cmp	r4, r9
    18ba:	bne.n	18a4 <regular_setup()+0x7ac>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    18bc:	adds	r7, #1
    18be:	ldr	r3, [sp, #4]
    18c0:	adds	r6, #4
    18c2:	cmp	r3, r7
    18c4:	bne.n	189c <regular_setup()+0x7a4>
    18c6:	b.n	1704 <regular_setup()+0x60c>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18c8:	movs	r0, #8
    18ca:	bl	cb48 <random(unsigned long)>
    18ce:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18d2:	movs	r0, #8
    18d4:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    18d8:	cmp	r4, #0
    18da:	ble.w	1704 <regular_setup()+0x60c>
    18de:	add.w	r3, r0, #15
    18e2:	add.w	r6, r6, r6, lsl #1
    18e6:	movs	r7, #0
    18e8:	add.w	r6, r3, r6, lsl #3
    18ec:	add.w	r6, r5, r6, lsl #2
      if (rand){
    18f0:	cmp.w	sl, #0
    18f4:	bne.n	190a <regular_setup()+0x812>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    18f6:	ldr	r3, [r5, #0]
    18f8:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    18fa:	adds	r7, #1
    18fc:	adds	r6, #4
    18fe:	cmp	r7, r4
    1900:	beq.w	1704 <regular_setup()+0x60c>
      if (rand){
    1904:	cmp.w	sl, #0
    1908:	beq.n	18f6 <regular_setup()+0x7fe>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    190a:	ldr	r3, [r5, #20]
    190c:	ldr	r2, [r5, #16]
    190e:	subs	r0, r3, r2
    1910:	adds	r0, #2
    1912:	bl	cb48 <random(unsigned long)>
    1916:	ldr	r3, [r5, #16]
    1918:	subs	r3, #1
    191a:	add	r0, r3
    191c:	str	r0, [r6, #0]
    191e:	b.n	18fa <regular_setup()+0x802>
    1920:	add.w	r7, r5, #2304	; 0x900
    1924:	add.w	r6, r5, #28
    1928:	mov	r4, r5
    192a:	mov	r8, r7
    192c:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    192e:	cmp	r7, #0
    1930:	bne.w	289a <regular_setup()+0x17a2>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1934:	ldr	r3, [r5, #0]
    1936:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1938:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    193c:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    193e:	str	r3, [r4, #120]	; 0x78
    1940:	adds	r4, #96	; 0x60
    1942:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1944:	cmp	r4, r8
    1946:	bne.n	192e <regular_setup()+0x836>
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1948:	ldr	r3, [pc, #756]	; (1c40 <regular_setup()+0xb48>)
    194a:	movs	r1, #255	; 0xff
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    194c:	mov.w	fp, #1
    1950:	movw	r5, #4636	; 0x121c
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1954:	ldr.w	r0, [r3, #400]	; 0x190
    1958:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    195c:	ldr	r3, [pc, #736]	; (1c40 <regular_setup()+0xb48>)
    195e:	movs	r1, #8
    1960:	movs	r0, #0
    1962:	ldr.w	r4, [r3, #388]	; 0x184
    1966:	bl	cb50 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    196a:	add.w	r1, r0, fp
    196e:	ldr	r3, [pc, #720]	; (1c40 <regular_setup()+0xb48>)
    1970:	add.w	r0, r0, r0, lsl #1
    1974:	mov.w	ip, #0
    1978:	add.w	r1, r1, r1, lsl #1
    197c:	ldr.w	lr, [r3, #404]	; 0x194
    1980:	add.w	r8, r3, r0, lsl #3
    1984:	ldr	r0, [pc, #696]	; (1c40 <regular_setup()+0xb48>)
    1986:	lsls	r1, r1, #3
    1988:	str.w	lr, [r4, r5]
    198c:	ldr.w	r2, [r8, #32]
    1990:	ldr.w	r6, [r8, #40]	; 0x28
    1994:	add.w	r9, r0, r1
    1998:	ldr	r0, [r0, r1]
    199a:	ldr.w	r1, [r8, #36]	; 0x24
    199e:	ldr.w	r7, [r3, #408]	; 0x198
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    19a2:	ldr.w	r3, [r3, #384]	; 0x180
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19a6:	str	r1, [r4, #12]
    19a8:	ldr.w	r1, [r9, #4]
    19ac:	add.w	r9, r3, #4640	; 0x1220
    19b0:	str	r6, [r4, #16]
    19b2:	ldr.w	r6, [r8, #44]	; 0x2c
    19b6:	add.w	r8, r4, #4640	; 0x1220
    19ba:	str	r2, [r4, #8]
    19bc:	ldr	r2, [pc, #640]	; (1c40 <regular_setup()+0xb48>)
    19be:	str	r6, [r4, #20]
    19c0:	ldr	r2, [r2, #4]
    19c2:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    19c4:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19c6:	mov	r6, r2
    19c8:	ldr	r2, [pc, #628]	; (1c40 <regular_setup()+0xb48>)
    19ca:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    19cc:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19ce:	strb.w	ip, [r4, #24]
    19d2:	ldr.w	ip, [r2, #12]
    19d6:	ldr	r4, [r2, #8]
    19d8:	ldr	r2, [r2, #16]
    19da:	str.w	r7, [r8]
    19de:	str	r2, [r3, #16]
    19e0:	ldr	r2, [pc, #604]	; (1c40 <regular_setup()+0xb48>)
    19e2:	str.w	lr, [r3, r5]
    19e6:	ldr	r2, [r2, #20]
    19e8:	strb.w	fp, [r3, #24]
    19ec:	str	r2, [r3, #20]
    19ee:	ldr	r2, [pc, #592]	; (1c40 <regular_setup()+0xb48>)
    19f0:	str.w	ip, [r3, #12]
    19f4:	ldr	r2, [r2, #0]
    19f6:	str	r6, [r3, #4]
    19f8:	str	r2, [r3, #0]
    19fa:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    19fc:	ldr	r3, [pc, #576]	; (1c40 <regular_setup()+0xb48>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19fe:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
    1a02:	ldr.w	r8, [r3, #392]	; 0x188
    1a06:	bl	cb50 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a0a:	ldr	r3, [pc, #564]	; (1c40 <regular_setup()+0xb48>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a0c:	add.w	r0, r0, r0, lsl #1
    1a10:	add.w	sl, r8, #4640	; 0x1220
    1a14:	add.w	r0, r3, r0, lsl #3
    1a18:	ldr.w	ip, [r3, #404]	; 0x194
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a1c:	ldr.w	r7, [r3, #396]	; 0x18c
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a20:	add.w	r1, r0, #200	; 0xc8
    1a24:	str.w	ip, [r8, r5]
    1a28:	ldr.w	r3, [r3, #408]	; 0x198
    1a2c:	add.w	r9, r7, #4640	; 0x1220
    1a30:	ldr.w	r4, [r0, #196]	; 0xc4
    1a34:	ldmia	r1, {r1, r2, r6}
    1a36:	str.w	r6, [r8, #16]
    1a3a:	ldr.w	r6, [r0, #212]	; 0xd4
    1a3e:	ldr.w	r0, [r0, #192]	; 0xc0
    1a42:	str.w	r1, [r8, #8]
    1a46:	ldr	r1, [pc, #504]	; (1c40 <regular_setup()+0xb48>)
    1a48:	str.w	r2, [r8, #12]
    1a4c:	ldr	r1, [r1, #4]
    1a4e:	ldr	r2, [pc, #496]	; (1c40 <regular_setup()+0xb48>)
    1a50:	str.w	r6, [r8, #20]
    1a54:	mov	r6, r1
    1a56:	ldr.w	lr, [r2, #8]
    1a5a:	ldr	r1, [r2, #20]
    1a5c:	strb.w	fp, [r8, #24]
    1a60:	stmia.w	r8, {r0, r4}
    1a64:	ldr	r4, [r2, #16]
    1a66:	ldr	r0, [r2, #12]
    1a68:	ldr	r2, [r2, #0]
    1a6a:	str.w	r3, [sl]
    1a6e:	str.w	ip, [r7, r5]
    1a72:	str	r4, [r7, #16]
    1a74:	str	r2, [r7, #0]
    1a76:	strb.w	fp, [r7, #24]
    1a7a:	str	r6, [r7, #4]
    1a7c:	str.w	lr, [r7, #8]
    1a80:	str	r0, [r7, #12]
    1a82:	str	r1, [r7, #20]
    1a84:	str.w	r3, [r9]
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a88:	ldr	r3, [pc, #436]	; (1c40 <regular_setup()+0xb48>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a8a:	ldr	r2, [pc, #436]	; (1c40 <regular_setup()+0xb48>)
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a8c:	ldr.w	r3, [r3, #312]	; 0x138
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 5)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a90:	ldr.w	r5, [r2, #388]	; 0x184
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a94:	subs	r3, #1
    1a96:	ldr.w	r4, [r2, #316]	; 0x13c
    1a9a:	ldrb.w	sl, [r2, #320]	; 0x140
    1a9e:	cmp	r3, #4
    1aa0:	bhi.w	2bb4 <regular_setup()+0x1abc>
    1aa4:	tbh	[pc, r3, lsl #1]
    1aa8:	.word	0x01a901e5
    1aac:	.word	0x01220155
    1ab0:	.short	0x00f9
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ab2:	cmp	r6, #0
    1ab4:	ble.w	1948 <regular_setup()+0x850>
    1ab8:	mov	r9, r5
    1aba:	mov.w	r8, #0
    1abe:	mov	r5, fp
    1ac0:	b.n	1ada <regular_setup()+0x9e2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1ac2:	add.w	r3, r4, r3, lsl #3
    1ac6:	ldr.w	r2, [r9]
    1aca:	add.w	r3, r9, r3, lsl #2
    1ace:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ad0:	add.w	r8, r8, #1
    1ad4:	cmp	r8, r6
    1ad6:	beq.w	1948 <regular_setup()+0x850>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ada:	movs	r0, #8
    1adc:	bl	cb48 <random(unsigned long)>
    1ae0:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ae4:	movs	r0, #8
    1ae6:	bl	cb48 <random(unsigned long)>
    1aea:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1aee:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1af2:	cmp	r5, #0
    1af4:	beq.n	1ac2 <regular_setup()+0x9ca>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1af6:	ldr.w	r3, [r9, #20]
    1afa:	add.w	r7, r7, r7, lsl #1
    1afe:	ldr.w	r2, [r9, #16]
    1b02:	add.w	r4, r4, r7, lsl #3
    1b06:	subs	r0, r3, r2
    1b08:	add.w	r4, r9, r4, lsl #2
    1b0c:	adds	r0, #2
    1b0e:	bl	cb48 <random(unsigned long)>
    1b12:	ldr.w	r3, [r9, #16]
    1b16:	subs	r3, #1
    1b18:	add	r0, r3
    1b1a:	str	r0, [r4, #28]
    1b1c:	b.n	1ad0 <regular_setup()+0x9d8>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b1e:	movs	r0, #8
    1b20:	mov	r7, r5
    1b22:	bl	cb48 <random(unsigned long)>
    1b26:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b28:	movs	r0, #8
    1b2a:	add.w	r9, r5, #96	; 0x60
    1b2e:	bl	cb48 <random(unsigned long)>
    1b32:	vmov	s15, r6
    1b36:	adds	r4, #8
    1b38:	add.w	r3, r0, #8
    1b3c:	vcvt.f64.s32	d9, s15
    1b40:	rsb	sl, r0, #16
    1b44:	negs	r3, r3
    1b46:	rsb	r8, r4, #0
    1b4a:	str	r3, [sp, #4]
    1b4c:	vmov	s15, r8
    1b50:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1b52:	mov	r6, r7
    1b54:	vcvt.f64.s32	d8, s15
    1b58:	vmul.f64	d8, d8, d8
    1b5c:	b.n	1b6a <regular_setup()+0xa72>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1b5e:	ldr	r3, [r5, #0]
    1b60:	str	r3, [r6, #28]
    1b62:	adds	r4, #1
    1b64:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1b66:	cmp	r4, sl
    1b68:	beq.n	1bba <regular_setup()+0xac2>
      double xx = x-midPoint_y;
    1b6a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1b6e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1b72:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1b76:	vfma.f64	d0, d7, d7
    1b7a:	vsqrt.f64	d7, d0
    1b7e:	vcmp.f64	d7, d7
    1b82:	vmrs	APSR_nzcv, fpscr
    1b86:	bne.w	2cc2 <regular_setup()+0x1bca>
    1b8a:	vcmpe.f64	d7, d9
    1b8e:	vmrs	APSR_nzcv, fpscr
    1b92:	bhi.n	1b62 <regular_setup()+0xa6a>
        if (rand){
    1b94:	cmp.w	fp, #0
    1b98:	beq.n	1b5e <regular_setup()+0xa66>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1b9a:	ldr	r3, [r5, #20]
    1b9c:	adds	r4, #1
    1b9e:	ldr	r0, [r5, #16]
    1ba0:	adds	r6, #96	; 0x60
    1ba2:	subs	r0, r3, r0
    1ba4:	adds	r0, #2
    1ba6:	bl	cb48 <random(unsigned long)>
    1baa:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bac:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1bae:	add.w	r3, r3, #4294967295
    1bb2:	add	r0, r3
    1bb4:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bb8:	bne.n	1b6a <regular_setup()+0xa72>
    1bba:	adds	r7, #4
    1bbc:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1bc0:	cmp	r7, r9
    1bc2:	bne.n	1b4c <regular_setup()+0xa54>
    1bc4:	b.n	1948 <regular_setup()+0x850>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bc6:	movs	r0, #8
    1bc8:	bl	cb48 <random(unsigned long)>
    1bcc:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bd0:	movs	r0, #8
    1bd2:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bd6:	cmp	r6, #0
    1bd8:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bda:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bde:	it	lt
    1be0:	addlt	r3, r6, #1
    1be2:	cmp	r6, #0
    1be4:	mov.w	r8, r3, asr #1
    1be8:	it	lt
    1bea:	addlt	r6, #1
    1bec:	rsb	r8, r8, #0
    1bf0:	asrs	r6, r6, #1
    1bf2:	add.w	r7, r0, r8
    1bf6:	adds	r3, r0, r6
    1bf8:	cmp	r7, r3
    1bfa:	str	r3, [sp, #4]
    1bfc:	bge.w	1948 <regular_setup()+0x850>
    1c00:	add	r8, r4
    1c02:	add	r4, r6
    1c04:	add.w	r6, r8, r8, lsl #1
    1c08:	add.w	r6, r7, r6, lsl #3
    1c0c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c10:	cmp	r8, r4
    1c12:	bge.n	1c32 <regular_setup()+0xb3a>
    1c14:	mov	sl, r6
    1c16:	mov	r9, r8
        if (rand){
    1c18:	cmp.w	fp, #0
    1c1c:	bne.w	2656 <regular_setup()+0x155e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1c20:	ldr	r3, [r5, #0]
    1c22:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c26:	add.w	r9, r9, #1
    1c2a:	add.w	sl, sl, #96	; 0x60
    1c2e:	cmp	r9, r4
    1c30:	bne.n	1c18 <regular_setup()+0xb20>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c32:	adds	r7, #1
    1c34:	ldr	r3, [sp, #4]
    1c36:	adds	r6, #4
    1c38:	cmp	r7, r3
    1c3a:	bne.n	1c10 <regular_setup()+0xb18>
    1c3c:	b.n	1948 <regular_setup()+0x850>
    1c3e:	nop
    1c40:	.word	0x200097f4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c44:	movs	r0, #8
    1c46:	bl	cb48 <random(unsigned long)>
    1c4a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c4e:	movs	r0, #8
    1c50:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1c54:	cmp	r6, #0
    1c56:	ble.w	1948 <regular_setup()+0x850>
    1c5a:	add.w	r3, r0, #15
    1c5e:	add.w	r4, r4, r4, lsl #1
    1c62:	mov	r8, r6
    1c64:	mov	r6, fp
    1c66:	add.w	r4, r3, r4, lsl #3
    1c6a:	movs	r7, #0
    1c6c:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1c70:	cbnz	r6, 1c84 <regular_setup()+0xb8c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1c72:	ldr	r3, [r5, #0]
    1c74:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1c76:	adds	r7, #1
    1c78:	adds	r4, #4
    1c7a:	cmp	r7, r8
    1c7c:	beq.w	1948 <regular_setup()+0x850>
      if (rand){
    1c80:	cmp	r6, #0
    1c82:	beq.n	1c72 <regular_setup()+0xb7a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c84:	ldr	r3, [r5, #20]
    1c86:	ldr	r2, [r5, #16]
    1c88:	subs	r0, r3, r2
    1c8a:	adds	r0, #2
    1c8c:	bl	cb48 <random(unsigned long)>
    1c90:	ldr	r3, [r5, #16]
    1c92:	subs	r3, #1
    1c94:	add	r0, r3
    1c96:	str	r0, [r4, #0]
    1c98:	b.n	1c76 <regular_setup()+0xb7e>
    1c9a:	add.w	r7, r5, #2304	; 0x900
    1c9e:	add.w	r6, r5, #28
    1ca2:	mov	r4, r5
    1ca4:	mov	r8, r7
    1ca6:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ca8:	cmp	r7, #0
    1caa:	bne.w	28ea <regular_setup()+0x17f2>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1cae:	ldr	r3, [r5, #0]
    1cb0:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1cb2:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1cb6:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1cb8:	str	r3, [r4, #120]	; 0x78
    1cba:	adds	r4, #96	; 0x60
    1cbc:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1cbe:	cmp	r4, r8
    1cc0:	bne.n	1ca8 <regular_setup()+0xbb0>
    1cc2:	ldr	r3, [pc, #788]	; (1fd8 <regular_setup()+0xee0>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1cc4:	ldr	r2, [pc, #784]	; (1fd8 <regular_setup()+0xee0>)
    1cc6:	ldrb.w	sl, [r3, #320]	; 0x140
    1cca:	ldr.w	r4, [r3, #316]	; 0x13c
    1cce:	ldr.w	r3, [r3, #312]	; 0x138
    1cd2:	ldr.w	r5, [r2, #384]	; 0x180
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1cd6:	subs	r3, #1
    1cd8:	cmp	r3, #4
    1cda:	bhi.w	2a0e <regular_setup()+0x1916>
    1cde:	tbh	[pc, r3, lsl #1]
    1ce2:	.short	0x01b9
    1ce4:	.word	0x0126017d
    1ce8:	.word	0x00f401e4
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1cec:	cmp	r4, #0
    1cee:	ble.w	1ef2 <regular_setup()+0xdfa>
    1cf2:	mov	r9, r5
    1cf4:	movs	r7, #0
    1cf6:	mov	r5, sl
    1cf8:	b.n	1d0e <regular_setup()+0xc16>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1cfa:	add.w	r3, r6, r3, lsl #3
    1cfe:	ldr.w	r2, [r9]
    1d02:	add.w	r3, r9, r3, lsl #2
    1d06:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1d08:	adds	r7, #1
    1d0a:	cmp	r7, r4
    1d0c:	beq.n	1cc2 <regular_setup()+0xbca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d0e:	movs	r0, #8
    1d10:	bl	cb48 <random(unsigned long)>
    1d14:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d18:	movs	r0, #8
    1d1a:	bl	cb48 <random(unsigned long)>
    1d1e:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1d22:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1d26:	cmp	r5, #0
    1d28:	beq.n	1cfa <regular_setup()+0xc02>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1d2a:	ldr.w	r3, [r9, #20]
    1d2e:	add.w	r8, r8, r8, lsl #1
    1d32:	ldr.w	r2, [r9, #16]
    1d36:	add.w	r6, r6, r8, lsl #3
    1d3a:	subs	r0, r3, r2
    1d3c:	add.w	r6, r9, r6, lsl #2
    1d40:	adds	r0, #2
    1d42:	bl	cb48 <random(unsigned long)>
    1d46:	ldr.w	r3, [r9, #16]
    1d4a:	subs	r3, #1
    1d4c:	add	r0, r3
    1d4e:	str	r0, [r6, #28]
    1d50:	b.n	1d08 <regular_setup()+0xc10>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d52:	movs	r0, #8
    1d54:	mov	r7, r5
    1d56:	bl	cb48 <random(unsigned long)>
    1d5a:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d5c:	movs	r0, #8
    1d5e:	add.w	fp, r5, #96	; 0x60
    1d62:	bl	cb48 <random(unsigned long)>
    1d66:	vmov	s15, r4
    1d6a:	adds	r6, #8
    1d6c:	add.w	r3, r0, #8
    1d70:	vcvt.f64.s32	d9, s15
    1d74:	rsb	r9, r0, #16
    1d78:	negs	r3, r3
    1d7a:	rsb	r8, r6, #0
    1d7e:	str	r3, [sp, #4]
    1d80:	vmov	s15, r8
    1d84:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1d86:	mov	r6, r7
    1d88:	vcvt.f64.s32	d8, s15
    1d8c:	vmul.f64	d8, d8, d8
    1d90:	b.n	1d9e <regular_setup()+0xca6>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1d92:	ldr	r3, [r5, #0]
    1d94:	str	r3, [r6, #28]
    1d96:	adds	r4, #1
    1d98:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d9a:	cmp	r4, r9
    1d9c:	beq.n	1dee <regular_setup()+0xcf6>
      double xx = x-midPoint_y;
    1d9e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1da2:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1da6:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1daa:	vfma.f64	d0, d7, d7
    1dae:	vsqrt.f64	d7, d0
    1db2:	vcmp.f64	d7, d7
    1db6:	vmrs	APSR_nzcv, fpscr
    1dba:	bne.w	2cb6 <regular_setup()+0x1bbe>
    1dbe:	vcmpe.f64	d7, d9
    1dc2:	vmrs	APSR_nzcv, fpscr
    1dc6:	bhi.n	1d96 <regular_setup()+0xc9e>
        if (rand){
    1dc8:	cmp.w	sl, #0
    1dcc:	beq.n	1d92 <regular_setup()+0xc9a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1dce:	ldr	r3, [r5, #20]
    1dd0:	adds	r4, #1
    1dd2:	ldr	r0, [r5, #16]
    1dd4:	adds	r6, #96	; 0x60
    1dd6:	subs	r0, r3, r0
    1dd8:	adds	r0, #2
    1dda:	bl	cb48 <random(unsigned long)>
    1dde:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1de0:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1de2:	add.w	r3, r3, #4294967295
    1de6:	add	r0, r3
    1de8:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1dec:	bne.n	1d9e <regular_setup()+0xca6>
    1dee:	adds	r7, #4
    1df0:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1df4:	cmp	r7, fp
    1df6:	bne.n	1d80 <regular_setup()+0xc88>
    1df8:	b.n	1cc2 <regular_setup()+0xbca>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1dfa:	movs	r0, #8
    1dfc:	bl	cb48 <random(unsigned long)>
    1e00:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e04:	movs	r0, #8
    1e06:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e0a:	cmp	r4, #0
    1e0c:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e0e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e12:	it	lt
    1e14:	addlt	r3, r4, #1
    1e16:	cmp	r4, #0
    1e18:	mov.w	fp, r3, asr #1
    1e1c:	it	lt
    1e1e:	addlt	r4, #1
    1e20:	rsb	fp, fp, #0
    1e24:	asrs	r4, r4, #1
    1e26:	add.w	r7, r0, fp
    1e2a:	adds	r3, r4, r0
    1e2c:	cmp	r3, r7
    1e2e:	str	r3, [sp, #4]
    1e30:	ble.w	1cc2 <regular_setup()+0xbca>
    1e34:	add	fp, r6
    1e36:	add.w	r9, r4, r6
    1e3a:	add.w	r6, fp, fp, lsl #1
    1e3e:	add.w	r6, r7, r6, lsl #3
    1e42:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e46:	cmp	r9, fp
    1e48:	ble.n	1e66 <regular_setup()+0xd6e>
    1e4a:	mov	r8, r6
    1e4c:	mov	r4, fp
        if (rand){
    1e4e:	cmp.w	sl, #0
    1e52:	bne.w	263e <regular_setup()+0x1546>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1e56:	ldr	r3, [r5, #0]
    1e58:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e5c:	adds	r4, #1
    1e5e:	add.w	r8, r8, #96	; 0x60
    1e62:	cmp	r4, r9
    1e64:	bne.n	1e4e <regular_setup()+0xd56>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e66:	adds	r7, #1
    1e68:	ldr	r3, [sp, #4]
    1e6a:	adds	r6, #4
    1e6c:	cmp	r3, r7
    1e6e:	bne.n	1e46 <regular_setup()+0xd4e>
    1e70:	b.n	1cc2 <regular_setup()+0xbca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e72:	movs	r0, #8
    1e74:	bl	cb48 <random(unsigned long)>
    1e78:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e7c:	movs	r0, #8
    1e7e:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1e82:	cmp	r4, #0
    1e84:	ble.w	1cc2 <regular_setup()+0xbca>
    1e88:	add.w	r3, r0, #15
    1e8c:	add.w	r6, r6, r6, lsl #1
    1e90:	movs	r7, #0
    1e92:	add.w	r6, r3, r6, lsl #3
    1e96:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1e9a:	cmp.w	sl, #0
    1e9e:	bne.n	1eb4 <regular_setup()+0xdbc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1ea0:	ldr	r3, [r5, #0]
    1ea2:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1ea4:	adds	r7, #1
    1ea6:	adds	r6, #4
    1ea8:	cmp	r7, r4
    1eaa:	beq.w	1cc2 <regular_setup()+0xbca>
      if (rand){
    1eae:	cmp.w	sl, #0
    1eb2:	beq.n	1ea0 <regular_setup()+0xda8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1eb4:	ldr	r3, [r5, #20]
    1eb6:	ldr	r2, [r5, #16]
    1eb8:	subs	r0, r3, r2
    1eba:	adds	r0, #2
    1ebc:	bl	cb48 <random(unsigned long)>
    1ec0:	ldr	r3, [r5, #16]
    1ec2:	subs	r3, #1
    1ec4:	add	r0, r3
    1ec6:	str	r0, [r6, #0]
    1ec8:	b.n	1ea4 <regular_setup()+0xdac>
    1eca:	add.w	r7, r5, #2304	; 0x900
    1ece:	add.w	r6, r5, #28
    1ed2:	mov	r4, r5
    1ed4:	mov	r8, r7
    1ed6:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ed8:	cmp	r7, #0
    1eda:	bne.w	284a <regular_setup()+0x1752>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ede:	ldr	r3, [r5, #0]
    1ee0:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1ee2:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1ee6:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1ee8:	str	r3, [r4, #120]	; 0x78
    1eea:	adds	r4, #96	; 0x60
    1eec:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1eee:	cmp	r4, r8
    1ef0:	bne.n	1ed8 <regular_setup()+0xde0>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    1ef2:	ldr	r3, [pc, #228]	; (1fd8 <regular_setup()+0xee0>)
    1ef4:	movs	r1, #4
    1ef6:	movs	r0, #0
    1ef8:	ldr.w	r5, [r3, #392]	; 0x188
    1efc:	bl	cb50 <random(long, long)>
    1f00:	ldr	r3, [pc, #212]	; (1fd8 <regular_setup()+0xee0>)
    1f02:	add.w	r0, r0, r0, lsl #1
    1f06:	add.w	r3, r3, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1f0a:	ldr.w	r2, [r3, #324]	; 0x144
    1f0e:	add.w	r3, r3, #324	; 0x144
    1f12:	subs	r2, #1
    1f14:	ldr	r4, [r3, #4]
    1f16:	ldrb.w	sl, [r3, #8]
    1f1a:	cmp	r2, #4
    1f1c:	bhi.w	2b4a <regular_setup()+0x1a52>
    1f20:	tbh	[pc, r2, lsl #1]
    1f24:	.word	0x01ab01e7
    1f28:	.word	0x01250157
    1f2c:	.short	0x00f3
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f2e:	movs	r0, #8
    1f30:	mov	r7, r5
    1f32:	bl	cb48 <random(unsigned long)>
    1f36:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f38:	movs	r0, #8
    1f3a:	add.w	fp, r5, #96	; 0x60
    1f3e:	bl	cb48 <random(unsigned long)>
    1f42:	vmov	s15, r4
    1f46:	adds	r6, #8
    1f48:	add.w	r3, r0, #8
    1f4c:	vcvt.f64.s32	d9, s15
    1f50:	rsb	r9, r0, #16
    1f54:	negs	r3, r3
    1f56:	rsb	r8, r6, #0
    1f5a:	str	r3, [sp, #4]
    1f5c:	vmov	s15, r8
    1f60:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1f62:	mov	r6, r7
    1f64:	vcvt.f64.s32	d8, s15
    1f68:	vmul.f64	d8, d8, d8
    1f6c:	b.n	1f7a <regular_setup()+0xe82>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1f6e:	ldr	r3, [r5, #0]
    1f70:	str	r3, [r6, #28]
    1f72:	adds	r4, #1
    1f74:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f76:	cmp	r4, r9
    1f78:	beq.n	1fca <regular_setup()+0xed2>
      double xx = x-midPoint_y;
    1f7a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1f7e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1f82:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1f86:	vfma.f64	d0, d7, d7
    1f8a:	vsqrt.f64	d7, d0
    1f8e:	vcmp.f64	d7, d7
    1f92:	vmrs	APSR_nzcv, fpscr
    1f96:	bne.w	2caa <regular_setup()+0x1bb2>
    1f9a:	vcmpe.f64	d7, d9
    1f9e:	vmrs	APSR_nzcv, fpscr
    1fa2:	bhi.n	1f72 <regular_setup()+0xe7a>
        if (rand){
    1fa4:	cmp.w	sl, #0
    1fa8:	beq.n	1f6e <regular_setup()+0xe76>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1faa:	ldr	r3, [r5, #20]
    1fac:	adds	r4, #1
    1fae:	ldr	r0, [r5, #16]
    1fb0:	adds	r6, #96	; 0x60
    1fb2:	subs	r0, r3, r0
    1fb4:	adds	r0, #2
    1fb6:	bl	cb48 <random(unsigned long)>
    1fba:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fbc:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fbe:	add.w	r3, r3, #4294967295
    1fc2:	add	r0, r3
    1fc4:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fc8:	bne.n	1f7a <regular_setup()+0xe82>
    1fca:	adds	r7, #4
    1fcc:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1fd0:	cmp	r7, fp
    1fd2:	bne.n	1f5c <regular_setup()+0xe64>
    1fd4:	b.n	1ef2 <regular_setup()+0xdfa>
    1fd6:	nop
    1fd8:	.word	0x200097f4
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fdc:	movs	r0, #8
    1fde:	bl	cb48 <random(unsigned long)>
    1fe2:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fe6:	movs	r0, #8
    1fe8:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fec:	cmp	r4, #0
    1fee:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ff0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ff4:	it	lt
    1ff6:	addlt	r3, r4, #1
    1ff8:	cmp	r4, #0
    1ffa:	mov.w	fp, r3, asr #1
    1ffe:	it	lt
    2000:	addlt	r4, #1
    2002:	rsb	fp, fp, #0
    2006:	asrs	r4, r4, #1
    2008:	add.w	r7, r0, fp
    200c:	adds	r3, r4, r0
    200e:	cmp	r7, r3
    2010:	str	r3, [sp, #4]
    2012:	bge.w	1ef2 <regular_setup()+0xdfa>
    2016:	add	fp, r6
    2018:	add.w	r9, r4, r6
    201c:	add.w	r6, fp, fp, lsl #1
    2020:	add.w	r6, r7, r6, lsl #3
    2024:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2028:	cmp	fp, r9
    202a:	bge.n	2048 <regular_setup()+0xf50>
    202c:	mov	r8, r6
    202e:	mov	r4, fp
        if (rand){
    2030:	cmp.w	sl, #0
    2034:	bne.w	2626 <regular_setup()+0x152e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2038:	ldr	r3, [r5, #0]
    203a:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    203e:	adds	r4, #1
    2040:	add.w	r8, r8, #96	; 0x60
    2044:	cmp	r4, r9
    2046:	bne.n	2030 <regular_setup()+0xf38>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2048:	adds	r7, #1
    204a:	ldr	r3, [sp, #4]
    204c:	adds	r6, #4
    204e:	cmp	r7, r3
    2050:	bne.n	2028 <regular_setup()+0xf30>
    2052:	b.n	1ef2 <regular_setup()+0xdfa>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2054:	movs	r0, #8
    2056:	bl	cb48 <random(unsigned long)>
    205a:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    205e:	movs	r0, #8
    2060:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2064:	cmp	r4, #0
    2066:	ble.w	1ef2 <regular_setup()+0xdfa>
    206a:	add.w	r6, r6, r6, lsl #1
    206e:	add.w	r3, r0, #15
    2072:	mov	r8, r4
    2074:	mov	r4, sl
    2076:	add.w	r6, r3, r6, lsl #3
    207a:	movs	r7, #0
    207c:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2080:	cbnz	r4, 2094 <regular_setup()+0xf9c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2082:	ldr	r3, [r5, #0]
    2084:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2086:	adds	r7, #1
    2088:	adds	r6, #4
    208a:	cmp	r7, r8
    208c:	beq.w	1ef2 <regular_setup()+0xdfa>
      if (rand){
    2090:	cmp	r4, #0
    2092:	beq.n	2082 <regular_setup()+0xf8a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2094:	ldr	r3, [r5, #20]
    2096:	ldr	r2, [r5, #16]
    2098:	subs	r0, r3, r2
    209a:	adds	r0, #2
    209c:	bl	cb48 <random(unsigned long)>
    20a0:	ldr	r3, [r5, #16]
    20a2:	subs	r3, #1
    20a4:	add	r0, r3
    20a6:	str	r0, [r6, #0]
    20a8:	b.n	2086 <regular_setup()+0xf8e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20aa:	cmp	r4, #0
    20ac:	ble.w	1ef2 <regular_setup()+0xdfa>
    20b0:	mov	r9, r4
    20b2:	movs	r7, #0
    20b4:	mov	r4, sl
    20b6:	b.n	20cc <regular_setup()+0xfd4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20b8:	add.w	r3, r6, r3, lsl #3
    20bc:	ldr	r2, [r5, #0]
    20be:	add.w	r3, r5, r3, lsl #2
    20c2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20c4:	adds	r7, #1
    20c6:	cmp	r7, r9
    20c8:	beq.w	1ef2 <regular_setup()+0xdfa>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20cc:	movs	r0, #8
    20ce:	bl	cb48 <random(unsigned long)>
    20d2:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20d6:	movs	r0, #8
    20d8:	bl	cb48 <random(unsigned long)>
    20dc:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20e0:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    20e4:	cmp	r4, #0
    20e6:	beq.n	20b8 <regular_setup()+0xfc0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20e8:	ldr	r3, [r5, #20]
    20ea:	add.w	r8, r8, r8, lsl #1
    20ee:	ldr	r2, [r5, #16]
    20f0:	add.w	r6, r6, r8, lsl #3
    20f4:	subs	r0, r3, r2
    20f6:	add.w	r6, r5, r6, lsl #2
    20fa:	adds	r0, #2
    20fc:	bl	cb48 <random(unsigned long)>
    2100:	ldr	r3, [r5, #16]
    2102:	subs	r3, #1
    2104:	add	r0, r3
    2106:	str	r0, [r6, #28]
    2108:	b.n	20c4 <regular_setup()+0xfcc>
    210a:	add.w	r7, r5, #2304	; 0x900
    210e:	add.w	r6, r5, #28
    2112:	mov	r4, r5
    2114:	mov	r8, r7
    2116:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2118:	cmp	r7, #0
    211a:	bne.w	27ae <regular_setup()+0x16b6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    211e:	ldr	r3, [r5, #0]
    2120:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2122:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2126:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2128:	str	r3, [r4, #120]	; 0x78
    212a:	adds	r4, #96	; 0x60
    212c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    212e:	cmp	r4, r8
    2130:	bne.n	2118 <regular_setup()+0x1020>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    2132:	ldr	r3, [pc, #828]	; (2470 <regular_setup()+0x1378>)
    2134:	movs	r1, #4
    2136:	movs	r0, #0
    2138:	ldr.w	r5, [r3, #396]	; 0x18c
    213c:	bl	cb50 <random(long, long)>
    2140:	ldr	r3, [pc, #812]	; (2470 <regular_setup()+0x1378>)
    2142:	add.w	r0, r0, r0, lsl #1
    2146:	add.w	r3, r3, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    214a:	ldr.w	r2, [r3, #324]	; 0x144
    214e:	add.w	r3, r3, #324	; 0x144
    2152:	subs	r2, #1
    2154:	ldr	r6, [r3, #4]
    2156:	ldrb.w	fp, [r3, #8]
    215a:	cmp	r2, #4
    215c:	bhi.w	2ae2 <regular_setup()+0x19ea>
    2160:	tbh	[pc, r2, lsl #1]
    2164:	.word	0x01e2021d
    2168:	.word	0x014c018e
    216c:	.short	0x00f3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    216e:	cmp	r4, #0
    2170:	ble.n	2132 <regular_setup()+0x103a>
    2172:	mov	r9, r5
    2174:	movs	r7, #0
    2176:	mov	r5, sl
    2178:	b.n	218e <regular_setup()+0x1096>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    217a:	add.w	r3, r6, r3, lsl #3
    217e:	ldr.w	r2, [r9]
    2182:	add.w	r3, r9, r3, lsl #2
    2186:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2188:	adds	r7, #1
    218a:	cmp	r4, r7
    218c:	beq.n	2132 <regular_setup()+0x103a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    218e:	movs	r0, #8
    2190:	bl	cb48 <random(unsigned long)>
    2194:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2198:	movs	r0, #8
    219a:	bl	cb48 <random(unsigned long)>
    219e:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    21a2:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    21a6:	cmp	r5, #0
    21a8:	beq.n	217a <regular_setup()+0x1082>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21aa:	ldr.w	r3, [r9, #20]
    21ae:	add.w	r8, r8, r8, lsl #1
    21b2:	ldr.w	r2, [r9, #16]
    21b6:	add.w	r6, r6, r8, lsl #3
    21ba:	subs	r0, r3, r2
    21bc:	add.w	r6, r9, r6, lsl #2
    21c0:	adds	r0, #2
    21c2:	bl	cb48 <random(unsigned long)>
    21c6:	ldr.w	r3, [r9, #16]
    21ca:	subs	r3, #1
    21cc:	add	r0, r3
    21ce:	str	r0, [r6, #28]
    21d0:	b.n	2188 <regular_setup()+0x1090>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21d2:	movs	r0, #8
    21d4:	mov	r7, r5
    21d6:	bl	cb48 <random(unsigned long)>
    21da:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21dc:	movs	r0, #8
    21de:	add.w	fp, r5, #96	; 0x60
    21e2:	bl	cb48 <random(unsigned long)>
    21e6:	vmov	s15, r4
    21ea:	adds	r6, #8
    21ec:	add.w	r3, r0, #8
    21f0:	vcvt.f64.s32	d9, s15
    21f4:	rsb	r9, r0, #16
    21f8:	negs	r3, r3
    21fa:	rsb	r8, r6, #0
    21fe:	str	r3, [sp, #4]
    2200:	vmov	s15, r8
    2204:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    2206:	mov	r6, r7
    2208:	vcvt.f64.s32	d8, s15
    220c:	vmul.f64	d8, d8, d8
    2210:	b.n	221e <regular_setup()+0x1126>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2212:	ldr	r3, [r5, #0]
    2214:	str	r3, [r6, #28]
    2216:	adds	r4, #1
    2218:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    221a:	cmp	r9, r4
    221c:	beq.n	226e <regular_setup()+0x1176>
      double xx = x-midPoint_y;
    221e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2222:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2226:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    222a:	vfma.f64	d0, d7, d7
    222e:	vsqrt.f64	d7, d0
    2232:	vcmp.f64	d7, d7
    2236:	vmrs	APSR_nzcv, fpscr
    223a:	bne.w	2c9e <regular_setup()+0x1ba6>
    223e:	vcmpe.f64	d7, d9
    2242:	vmrs	APSR_nzcv, fpscr
    2246:	bhi.n	2216 <regular_setup()+0x111e>
        if (rand){
    2248:	cmp.w	sl, #0
    224c:	beq.n	2212 <regular_setup()+0x111a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    224e:	ldr	r3, [r5, #20]
    2250:	adds	r4, #1
    2252:	ldr	r0, [r5, #16]
    2254:	adds	r6, #96	; 0x60
    2256:	subs	r0, r3, r0
    2258:	adds	r0, #2
    225a:	bl	cb48 <random(unsigned long)>
    225e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2260:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2262:	add.w	r3, r3, #4294967295
    2266:	add	r0, r3
    2268:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    226c:	bne.n	221e <regular_setup()+0x1126>
    226e:	adds	r7, #4
    2270:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2274:	cmp	fp, r7
    2276:	bne.n	2200 <regular_setup()+0x1108>
    2278:	b.n	2132 <regular_setup()+0x103a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    227a:	movs	r0, #8
    227c:	bl	cb48 <random(unsigned long)>
    2280:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2284:	movs	r0, #8
    2286:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    228a:	cmp	r4, #0
    228c:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    228e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2292:	it	lt
    2294:	addlt	r3, r4, #1
    2296:	cmp	r4, #0
    2298:	mov.w	fp, r3, asr #1
    229c:	it	lt
    229e:	addlt	r4, #1
    22a0:	rsb	fp, fp, #0
    22a4:	asrs	r4, r4, #1
    22a6:	add.w	r7, r0, fp
    22aa:	adds	r3, r4, r0
    22ac:	cmp	r7, r3
    22ae:	str	r3, [sp, #4]
    22b0:	bge.w	2132 <regular_setup()+0x103a>
    22b4:	add	fp, r6
    22b6:	add.w	r9, r4, r6
    22ba:	add.w	r6, fp, fp, lsl #1
    22be:	add.w	r6, r7, r6, lsl #3
    22c2:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22c6:	cmp	r9, fp
    22c8:	ble.n	22e6 <regular_setup()+0x11ee>
    22ca:	mov	r8, r6
    22cc:	mov	r4, fp
        if (rand){
    22ce:	cmp.w	sl, #0
    22d2:	bne.w	260e <regular_setup()+0x1516>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    22d6:	ldr	r3, [r5, #0]
    22d8:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22dc:	adds	r4, #1
    22de:	add.w	r8, r8, #96	; 0x60
    22e2:	cmp	r4, r9
    22e4:	bne.n	22ce <regular_setup()+0x11d6>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    22e6:	adds	r7, #1
    22e8:	ldr	r3, [sp, #4]
    22ea:	adds	r6, #4
    22ec:	cmp	r7, r3
    22ee:	bne.n	22c6 <regular_setup()+0x11ce>
    22f0:	b.n	2132 <regular_setup()+0x103a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22f2:	movs	r0, #8
    22f4:	bl	cb48 <random(unsigned long)>
    22f8:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22fc:	movs	r0, #8
    22fe:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2302:	cmp	r4, #0
    2304:	ble.w	2132 <regular_setup()+0x103a>
    2308:	add.w	r3, r0, #15
    230c:	add.w	r6, r6, r6, lsl #1
    2310:	movs	r7, #0
    2312:	add.w	r6, r3, r6, lsl #3
    2316:	add.w	r6, r5, r6, lsl #2
      if (rand){
    231a:	cmp.w	sl, #0
    231e:	bne.n	2334 <regular_setup()+0x123c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2320:	ldr	r3, [r5, #0]
    2322:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2324:	adds	r7, #1
    2326:	adds	r6, #4
    2328:	cmp	r7, r4
    232a:	beq.w	2132 <regular_setup()+0x103a>
      if (rand){
    232e:	cmp.w	sl, #0
    2332:	beq.n	2320 <regular_setup()+0x1228>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2334:	ldr	r3, [r5, #20]
    2336:	ldr	r2, [r5, #16]
    2338:	subs	r0, r3, r2
    233a:	adds	r0, #2
    233c:	bl	cb48 <random(unsigned long)>
    2340:	ldr	r3, [r5, #16]
    2342:	subs	r3, #1
    2344:	add	r0, r3
    2346:	str	r0, [r6, #0]
    2348:	b.n	2324 <regular_setup()+0x122c>
    234a:	add.w	r7, r5, #2304	; 0x900
    234e:	add.w	r6, r5, #28
    2352:	mov	r4, r5
    2354:	mov	r8, r7
    2356:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2358:	cmp	r7, #0
    235a:	bne.w	27fc <regular_setup()+0x1704>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    235e:	ldr	r3, [r5, #0]
    2360:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2362:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2366:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2368:	str	r3, [r4, #120]	; 0x78
    236a:	adds	r4, #96	; 0x60
    236c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    236e:	cmp	r4, r8
    2370:	bne.n	2358 <regular_setup()+0x1260>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2372:	ldr	r3, [pc, #256]	; (2474 <regular_setup()+0x137c>)
    2374:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2376:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2378:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    237a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    237c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    237e:	ldr	r6, [pc, #244]	; (2474 <regular_setup()+0x137c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2380:	cmp	r3, r1
    2382:	it	eq
    2384:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2386:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2388:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    238a:	ite	eq
    238c:	moveq	r5, #1
    238e:	movne	r5, #0
    2390:	cmp	r5, #0
    2392:	beq.n	237a <regular_setup()+0x1282>
    2394:	lsrs	r1, r3, #5
    2396:	ldr	r3, [pc, #224]	; (2478 <regular_setup()+0x1380>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2398:	mov	r4, r6
    239a:	orr.w	r1, r1, r2, lsl #27
    239e:	vmov	s15, r1
    23a2:	vldr	d5, [pc, #196]	; 2468 <regular_setup()+0x1370>
    23a6:	vcvt.f64.u32	d7, s15
    23aa:	vdiv.f64	d6, d7, d5
    23ae:	vcvt.u32.f64	s12, d6
    23b2:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    23b6:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    23b8:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23ba:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    23bc:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    23be:	cmp	r3, r1
    23c0:	it	eq
    23c2:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    23c4:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    23c6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    23c8:	ite	eq
    23ca:	moveq	r5, #1
    23cc:	movne	r5, #0
    23ce:	cmp	r5, #0
    23d0:	beq.n	23ba <regular_setup()+0x12c2>
    23d2:	lsrs	r1, r3, #5
    23d4:	ldr	r3, [pc, #164]	; (247c <regular_setup()+0x1384>)
    23d6:	orr.w	r1, r1, r2, lsl #27
    23da:	vmov	s15, r1
    23de:	vldr	d5, [pc, #136]	; 2468 <regular_setup()+0x1370>
    23e2:	vcvt.f64.u32	d7, s15
    23e6:	vdiv.f64	d6, d7, d5
    23ea:	vcvt.u32.f64	s12, d6
    23ee:	vstr	s12, [r3]
  screen_A.init_screen();
  screen_B.init_screen();
  sinceAutomatonInit = 0;
  sinceLastPulses = 0;
}
    23f2:	add	sp, #12
    23f4:	vpop	{d8-d9}
    23f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23fc:	cmp	r6, #0
    23fe:	ble.n	2372 <regular_setup()+0x127a>
    2400:	mov	r9, r5
    2402:	mov.w	r8, #0
    2406:	mov	r5, fp
    2408:	b.n	2420 <regular_setup()+0x1328>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    240a:	add.w	r3, r4, r3, lsl #3
    240e:	ldr.w	r2, [r9]
    2412:	add.w	r3, r9, r3, lsl #2
    2416:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2418:	add.w	r8, r8, #1
    241c:	cmp	r6, r8
    241e:	beq.n	2372 <regular_setup()+0x127a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2420:	movs	r0, #8
    2422:	bl	cb48 <random(unsigned long)>
    2426:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    242a:	movs	r0, #8
    242c:	bl	cb48 <random(unsigned long)>
    2430:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2434:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2438:	cmp	r5, #0
    243a:	beq.n	240a <regular_setup()+0x1312>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    243c:	ldr.w	r3, [r9, #20]
    2440:	add.w	r7, r7, r7, lsl #1
    2444:	ldr.w	r2, [r9, #16]
    2448:	add.w	r4, r4, r7, lsl #3
    244c:	subs	r0, r3, r2
    244e:	add.w	r4, r9, r4, lsl #2
    2452:	adds	r0, #2
    2454:	bl	cb48 <random(unsigned long)>
    2458:	ldr.w	r3, [r9, #16]
    245c:	subs	r3, #1
    245e:	add	r0, r3
    2460:	str	r0, [r4, #28]
    2462:	b.n	2418 <regular_setup()+0x1320>
    2464:	nop.w
    2468:	.word	0xd2f1a9fc
    246c:	.word	0x3ff0624d
    2470:	.word	0x200097f4
    2474:	.word	0x400d4000
    2478:	.word	0x2000c094
    247c:	.word	0x2000c0c0
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2480:	movs	r0, #8
    2482:	mov	r7, r5
    2484:	bl	cb48 <random(unsigned long)>
    2488:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    248a:	movs	r0, #8
    248c:	add.w	r9, r5, #96	; 0x60
    2490:	bl	cb48 <random(unsigned long)>
    2494:	vmov	s15, r6
    2498:	adds	r4, #8
    249a:	add.w	r3, r0, #8
    249e:	vcvt.f64.s32	d9, s15
    24a2:	rsb	sl, r0, #16
    24a6:	negs	r3, r3
    24a8:	rsb	r8, r4, #0
    24ac:	str	r3, [sp, #4]
    24ae:	vmov	s15, r8
    24b2:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    24b4:	mov	r6, r7
    24b6:	vcvt.f64.s32	d8, s15
    24ba:	vmul.f64	d8, d8, d8
    24be:	b.n	24cc <regular_setup()+0x13d4>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    24c0:	ldr	r3, [r5, #0]
    24c2:	str	r3, [r6, #28]
    24c4:	adds	r4, #1
    24c6:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24c8:	cmp	sl, r4
    24ca:	beq.n	251c <regular_setup()+0x1424>
      double xx = x-midPoint_y;
    24cc:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    24d0:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    24d4:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    24d8:	vfma.f64	d0, d7, d7
    24dc:	vsqrt.f64	d7, d0
    24e0:	vcmp.f64	d7, d7
    24e4:	vmrs	APSR_nzcv, fpscr
    24e8:	bne.w	2c94 <regular_setup()+0x1b9c>
    24ec:	vcmpe.f64	d7, d9
    24f0:	vmrs	APSR_nzcv, fpscr
    24f4:	bhi.n	24c4 <regular_setup()+0x13cc>
        if (rand){
    24f6:	cmp.w	fp, #0
    24fa:	beq.n	24c0 <regular_setup()+0x13c8>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24fc:	ldr	r3, [r5, #20]
    24fe:	adds	r4, #1
    2500:	ldr	r0, [r5, #16]
    2502:	adds	r6, #96	; 0x60
    2504:	subs	r0, r3, r0
    2506:	adds	r0, #2
    2508:	bl	cb48 <random(unsigned long)>
    250c:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    250e:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2510:	add.w	r3, r3, #4294967295
    2514:	add	r0, r3
    2516:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    251a:	bne.n	24cc <regular_setup()+0x13d4>
    251c:	adds	r7, #4
    251e:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2522:	cmp	r9, r7
    2524:	bne.n	24ae <regular_setup()+0x13b6>
    2526:	b.n	2372 <regular_setup()+0x127a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2528:	movs	r0, #8
    252a:	bl	cb48 <random(unsigned long)>
    252e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2532:	movs	r0, #8
    2534:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2538:	cmp	r6, #0
    253a:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    253c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2540:	it	lt
    2542:	addlt	r3, r6, #1
    2544:	cmp	r6, #0
    2546:	mov.w	r8, r3, asr #1
    254a:	it	lt
    254c:	addlt	r6, #1
    254e:	rsb	r8, r8, #0
    2552:	asrs	r6, r6, #1
    2554:	add.w	r7, r0, r8
    2558:	adds	r3, r0, r6
    255a:	cmp	r3, r7
    255c:	str	r3, [sp, #4]
    255e:	ble.w	2372 <regular_setup()+0x127a>
    2562:	add	r8, r4
    2564:	add	r4, r6
    2566:	add.w	r6, r8, r8, lsl #1
    256a:	add.w	r6, r7, r6, lsl #3
    256e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2572:	cmp	r4, r8
    2574:	ble.n	2592 <regular_setup()+0x149a>
    2576:	mov	sl, r6
    2578:	mov	r9, r8
        if (rand){
    257a:	cmp.w	fp, #0
    257e:	bne.n	25f6 <regular_setup()+0x14fe>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2580:	ldr	r3, [r5, #0]
    2582:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2586:	add.w	r9, r9, #1
    258a:	add.w	sl, sl, #96	; 0x60
    258e:	cmp	r9, r4
    2590:	bne.n	257a <regular_setup()+0x1482>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2592:	adds	r7, #1
    2594:	ldr	r3, [sp, #4]
    2596:	adds	r6, #4
    2598:	cmp	r3, r7
    259a:	bne.n	2572 <regular_setup()+0x147a>
    259c:	b.n	2372 <regular_setup()+0x127a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    259e:	movs	r0, #8
    25a0:	bl	cb48 <random(unsigned long)>
    25a4:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    25a8:	movs	r0, #8
    25aa:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    25ae:	cmp	r6, #0
    25b0:	ble.w	2372 <regular_setup()+0x127a>
    25b4:	add.w	r4, r4, r4, lsl #1
    25b8:	add.w	r3, r0, #15
    25bc:	movs	r7, #0
    25be:	add.w	r4, r3, r4, lsl #3
    25c2:	add.w	r4, r5, r4, lsl #2
      if (rand){
    25c6:	cmp.w	fp, #0
    25ca:	bne.n	25e0 <regular_setup()+0x14e8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    25cc:	ldr	r3, [r5, #0]
    25ce:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    25d0:	adds	r7, #1
    25d2:	adds	r4, #4
    25d4:	cmp	r6, r7
    25d6:	beq.w	2372 <regular_setup()+0x127a>
      if (rand){
    25da:	cmp.w	fp, #0
    25de:	beq.n	25cc <regular_setup()+0x14d4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25e0:	ldr	r3, [r5, #20]
    25e2:	ldr	r2, [r5, #16]
    25e4:	subs	r0, r3, r2
    25e6:	adds	r0, #2
    25e8:	bl	cb48 <random(unsigned long)>
    25ec:	ldr	r3, [r5, #16]
    25ee:	subs	r3, #1
    25f0:	add	r0, r3
    25f2:	str	r0, [r4, #0]
    25f4:	b.n	25d0 <regular_setup()+0x14d8>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25f6:	ldr	r3, [r5, #20]
    25f8:	ldr	r0, [r5, #16]
    25fa:	subs	r0, r3, r0
    25fc:	adds	r0, #2
    25fe:	bl	cb48 <random(unsigned long)>
    2602:	ldr	r3, [r5, #16]
    2604:	subs	r3, #1
    2606:	add	r0, r3
    2608:	str.w	r0, [sl, #28]
    260c:	b.n	2586 <regular_setup()+0x148e>
    260e:	ldr	r3, [r5, #20]
    2610:	ldr	r0, [r5, #16]
    2612:	subs	r0, r3, r0
    2614:	adds	r0, #2
    2616:	bl	cb48 <random(unsigned long)>
    261a:	ldr	r3, [r5, #16]
    261c:	subs	r3, #1
    261e:	add	r0, r3
    2620:	str.w	r0, [r8, #28]
    2624:	b.n	22dc <regular_setup()+0x11e4>
    2626:	ldr	r3, [r5, #20]
    2628:	ldr	r0, [r5, #16]
    262a:	subs	r0, r3, r0
    262c:	adds	r0, #2
    262e:	bl	cb48 <random(unsigned long)>
    2632:	ldr	r3, [r5, #16]
    2634:	subs	r3, #1
    2636:	add	r0, r3
    2638:	str.w	r0, [r8, #28]
    263c:	b.n	203e <regular_setup()+0xf46>
    263e:	ldr	r3, [r5, #20]
    2640:	ldr	r0, [r5, #16]
    2642:	subs	r0, r3, r0
    2644:	adds	r0, #2
    2646:	bl	cb48 <random(unsigned long)>
    264a:	ldr	r3, [r5, #16]
    264c:	subs	r3, #1
    264e:	add	r0, r3
    2650:	str.w	r0, [r8, #28]
    2654:	b.n	1e5c <regular_setup()+0xd64>
    2656:	ldr	r3, [r5, #20]
    2658:	ldr	r0, [r5, #16]
    265a:	subs	r0, r3, r0
    265c:	adds	r0, #2
    265e:	bl	cb48 <random(unsigned long)>
    2662:	ldr	r3, [r5, #16]
    2664:	subs	r3, #1
    2666:	add	r0, r3
    2668:	str.w	r0, [sl, #28]
    266c:	b.w	1c26 <regular_setup()+0xb2e>
    2670:	ldr	r3, [r5, #20]
    2672:	ldr	r0, [r5, #16]
    2674:	subs	r0, r3, r0
    2676:	adds	r0, #2
    2678:	bl	cb48 <random(unsigned long)>
    267c:	ldr	r3, [r5, #16]
    267e:	subs	r3, #1
    2680:	add	r0, r3
    2682:	str.w	r0, [r9, #28]
    2686:	b.w	1606 <regular_setup()+0x50e>
    268a:	ldr	r3, [r5, #20]
    268c:	ldr	r0, [r5, #16]
    268e:	subs	r0, r3, r0
    2690:	adds	r0, #2
    2692:	bl	cb48 <random(unsigned long)>
    2696:	ldr	r3, [r5, #16]
    2698:	subs	r3, #1
    269a:	add	r0, r3
    269c:	str.w	r0, [r8, #28]
    26a0:	b.w	18b2 <regular_setup()+0x7ba>
    26a4:	ldr	r3, [r5, #20]
    26a6:	ldr	r0, [r5, #16]
    26a8:	subs	r0, r3, r0
    26aa:	adds	r0, #2
    26ac:	bl	cb48 <random(unsigned long)>
    26b0:	ldr	r3, [r5, #16]
    26b2:	subs	r3, #1
    26b4:	add	r0, r3
    26b6:	str.w	r0, [r9, #28]
    26ba:	b.w	1370 <regular_setup()+0x278>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26be:	ldr	r3, [r5, #20]
    26c0:	ldr	r2, [r5, #16]
    26c2:	subs	r0, r3, r2
    26c4:	adds	r0, #2
    26c6:	bl	cb48 <random(unsigned long)>
    26ca:	ldr	r1, [r5, #16]
    26cc:	subs	r2, r1, #1
    26ce:	add	r0, r2
    26d0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26d2:	ldr	r3, [r5, #20]
    26d4:	subs	r0, r3, r1
    26d6:	adds	r0, #2
    26d8:	bl	cb48 <random(unsigned long)>
    26dc:	ldr	r1, [r5, #16]
    26de:	subs	r2, r1, #1
    26e0:	add	r0, r2
    26e2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26e6:	ldr	r3, [r5, #20]
    26e8:	subs	r0, r3, r1
    26ea:	adds	r0, #2
    26ec:	bl	cb48 <random(unsigned long)>
    26f0:	ldr	r1, [r5, #16]
    26f2:	subs	r2, r1, #1
    26f4:	add	r0, r2
    26f6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26f8:	ldr	r3, [r5, #20]
    26fa:	subs	r0, r3, r1
    26fc:	adds	r0, #2
    26fe:	bl	cb48 <random(unsigned long)>
    2702:	ldr	r3, [r5, #16]
    2704:	subs	r3, #1
    2706:	add	r0, r3
    2708:	str	r0, [r4, #120]	; 0x78
    270a:	b.w	128c <regular_setup()+0x194>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    270e:	ldr	r3, [r5, #20]
    2710:	ldr	r2, [r5, #16]
    2712:	subs	r0, r3, r2
    2714:	adds	r0, #2
    2716:	bl	cb48 <random(unsigned long)>
    271a:	ldr	r1, [r5, #16]
    271c:	subs	r2, r1, #1
    271e:	add	r0, r2
    2720:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2722:	ldr	r3, [r5, #20]
    2724:	subs	r0, r3, r1
    2726:	adds	r0, #2
    2728:	bl	cb48 <random(unsigned long)>
    272c:	ldr	r1, [r5, #16]
    272e:	subs	r2, r1, #1
    2730:	add	r0, r2
    2732:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2736:	ldr	r3, [r5, #20]
    2738:	subs	r0, r3, r1
    273a:	adds	r0, #2
    273c:	bl	cb48 <random(unsigned long)>
    2740:	ldr	r1, [r5, #16]
    2742:	subs	r2, r1, #1
    2744:	add	r0, r2
    2746:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2748:	ldr	r3, [r5, #20]
    274a:	subs	r0, r3, r1
    274c:	adds	r0, #2
    274e:	bl	cb48 <random(unsigned long)>
    2752:	ldr	r3, [r5, #16]
    2754:	subs	r3, #1
    2756:	add	r0, r3
    2758:	str	r0, [r4, #120]	; 0x78
    275a:	b.w	16fc <regular_setup()+0x604>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    275e:	ldr	r3, [r5, #20]
    2760:	ldr	r2, [r5, #16]
    2762:	subs	r0, r3, r2
    2764:	adds	r0, #2
    2766:	bl	cb48 <random(unsigned long)>
    276a:	ldr	r1, [r5, #16]
    276c:	subs	r2, r1, #1
    276e:	add	r0, r2
    2770:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2772:	ldr	r3, [r5, #20]
    2774:	subs	r0, r3, r1
    2776:	adds	r0, #2
    2778:	bl	cb48 <random(unsigned long)>
    277c:	ldr	r1, [r5, #16]
    277e:	subs	r2, r1, #1
    2780:	add	r0, r2
    2782:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2786:	ldr	r3, [r5, #20]
    2788:	subs	r0, r3, r1
    278a:	adds	r0, #2
    278c:	bl	cb48 <random(unsigned long)>
    2790:	ldr	r1, [r5, #16]
    2792:	subs	r2, r1, #1
    2794:	add	r0, r2
    2796:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2798:	ldr	r3, [r5, #20]
    279a:	subs	r0, r3, r1
    279c:	adds	r0, #2
    279e:	bl	cb48 <random(unsigned long)>
    27a2:	ldr	r3, [r5, #16]
    27a4:	subs	r3, #1
    27a6:	add	r0, r3
    27a8:	str	r0, [r4, #120]	; 0x78
    27aa:	b.w	14ba <regular_setup()+0x3c2>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27ae:	ldr	r3, [r5, #20]
    27b0:	ldr	r2, [r5, #16]
    27b2:	subs	r0, r3, r2
    27b4:	adds	r0, #2
    27b6:	bl	cb48 <random(unsigned long)>
    27ba:	ldr	r1, [r5, #16]
    27bc:	subs	r2, r1, #1
    27be:	add	r0, r2
    27c0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27c2:	ldr	r3, [r5, #20]
    27c4:	subs	r0, r3, r1
    27c6:	adds	r0, #2
    27c8:	bl	cb48 <random(unsigned long)>
    27cc:	ldr	r1, [r5, #16]
    27ce:	subs	r2, r1, #1
    27d0:	add	r0, r2
    27d2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27d6:	ldr	r3, [r5, #20]
    27d8:	subs	r0, r3, r1
    27da:	adds	r0, #2
    27dc:	bl	cb48 <random(unsigned long)>
    27e0:	ldr	r1, [r5, #16]
    27e2:	subs	r2, r1, #1
    27e4:	add	r0, r2
    27e6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27e8:	ldr	r3, [r5, #20]
    27ea:	subs	r0, r3, r1
    27ec:	adds	r0, #2
    27ee:	bl	cb48 <random(unsigned long)>
    27f2:	ldr	r3, [r5, #16]
    27f4:	subs	r3, #1
    27f6:	add	r0, r3
    27f8:	str	r0, [r4, #120]	; 0x78
    27fa:	b.n	212a <regular_setup()+0x1032>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27fc:	ldr	r3, [r5, #20]
    27fe:	ldr	r2, [r5, #16]
    2800:	subs	r0, r3, r2
    2802:	adds	r0, #2
    2804:	bl	cb48 <random(unsigned long)>
    2808:	ldr	r1, [r5, #16]
    280a:	subs	r2, r1, #1
    280c:	add	r0, r2
    280e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2810:	ldr	r3, [r5, #20]
    2812:	subs	r0, r3, r1
    2814:	adds	r0, #2
    2816:	bl	cb48 <random(unsigned long)>
    281a:	ldr	r1, [r5, #16]
    281c:	subs	r2, r1, #1
    281e:	add	r0, r2
    2820:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2824:	ldr	r3, [r5, #20]
    2826:	subs	r0, r3, r1
    2828:	adds	r0, #2
    282a:	bl	cb48 <random(unsigned long)>
    282e:	ldr	r1, [r5, #16]
    2830:	subs	r2, r1, #1
    2832:	add	r0, r2
    2834:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2836:	ldr	r3, [r5, #20]
    2838:	subs	r0, r3, r1
    283a:	adds	r0, #2
    283c:	bl	cb48 <random(unsigned long)>
    2840:	ldr	r3, [r5, #16]
    2842:	subs	r3, #1
    2844:	add	r0, r3
    2846:	str	r0, [r4, #120]	; 0x78
    2848:	b.n	236a <regular_setup()+0x1272>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    284a:	ldr	r3, [r5, #20]
    284c:	ldr	r2, [r5, #16]
    284e:	subs	r0, r3, r2
    2850:	adds	r0, #2
    2852:	bl	cb48 <random(unsigned long)>
    2856:	ldr	r1, [r5, #16]
    2858:	subs	r2, r1, #1
    285a:	add	r0, r2
    285c:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    285e:	ldr	r3, [r5, #20]
    2860:	subs	r0, r3, r1
    2862:	adds	r0, #2
    2864:	bl	cb48 <random(unsigned long)>
    2868:	ldr	r1, [r5, #16]
    286a:	subs	r2, r1, #1
    286c:	add	r0, r2
    286e:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2872:	ldr	r3, [r5, #20]
    2874:	subs	r0, r3, r1
    2876:	adds	r0, #2
    2878:	bl	cb48 <random(unsigned long)>
    287c:	ldr	r1, [r5, #16]
    287e:	subs	r2, r1, #1
    2880:	add	r0, r2
    2882:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2884:	ldr	r3, [r5, #20]
    2886:	subs	r0, r3, r1
    2888:	adds	r0, #2
    288a:	bl	cb48 <random(unsigned long)>
    288e:	ldr	r3, [r5, #16]
    2890:	subs	r3, #1
    2892:	add	r0, r3
    2894:	str	r0, [r4, #120]	; 0x78
    2896:	b.w	1eea <regular_setup()+0xdf2>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    289a:	ldr	r3, [r5, #20]
    289c:	ldr	r2, [r5, #16]
    289e:	subs	r0, r3, r2
    28a0:	adds	r0, #2
    28a2:	bl	cb48 <random(unsigned long)>
    28a6:	ldr	r1, [r5, #16]
    28a8:	subs	r2, r1, #1
    28aa:	add	r0, r2
    28ac:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28ae:	ldr	r3, [r5, #20]
    28b0:	subs	r0, r3, r1
    28b2:	adds	r0, #2
    28b4:	bl	cb48 <random(unsigned long)>
    28b8:	ldr	r1, [r5, #16]
    28ba:	subs	r2, r1, #1
    28bc:	add	r0, r2
    28be:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28c2:	ldr	r3, [r5, #20]
    28c4:	subs	r0, r3, r1
    28c6:	adds	r0, #2
    28c8:	bl	cb48 <random(unsigned long)>
    28cc:	ldr	r1, [r5, #16]
    28ce:	subs	r2, r1, #1
    28d0:	add	r0, r2
    28d2:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28d4:	ldr	r3, [r5, #20]
    28d6:	subs	r0, r3, r1
    28d8:	adds	r0, #2
    28da:	bl	cb48 <random(unsigned long)>
    28de:	ldr	r3, [r5, #16]
    28e0:	subs	r3, #1
    28e2:	add	r0, r3
    28e4:	str	r0, [r4, #120]	; 0x78
    28e6:	b.w	1940 <regular_setup()+0x848>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28ea:	ldr	r3, [r5, #20]
    28ec:	ldr	r2, [r5, #16]
    28ee:	subs	r0, r3, r2
    28f0:	adds	r0, #2
    28f2:	bl	cb48 <random(unsigned long)>
    28f6:	ldr	r1, [r5, #16]
    28f8:	subs	r2, r1, #1
    28fa:	add	r0, r2
    28fc:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28fe:	ldr	r3, [r5, #20]
    2900:	subs	r0, r3, r1
    2902:	adds	r0, #2
    2904:	bl	cb48 <random(unsigned long)>
    2908:	ldr	r1, [r5, #16]
    290a:	subs	r2, r1, #1
    290c:	add	r0, r2
    290e:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2912:	ldr	r3, [r5, #20]
    2914:	subs	r0, r3, r1
    2916:	adds	r0, #2
    2918:	bl	cb48 <random(unsigned long)>
    291c:	ldr	r1, [r5, #16]
    291e:	subs	r2, r1, #1
    2920:	add	r0, r2
    2922:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2924:	ldr	r3, [r5, #20]
    2926:	subs	r0, r3, r1
    2928:	adds	r0, #2
    292a:	bl	cb48 <random(unsigned long)>
    292e:	ldr	r3, [r5, #16]
    2930:	subs	r3, #1
    2932:	add	r0, r3
    2934:	str	r0, [r4, #120]	; 0x78
    2936:	b.w	1cba <regular_setup()+0xbc2>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    293a:	movw	sl, #4636	; 0x121c
    293e:	add.w	r3, r5, #28
    2942:	movs	r7, #0
    2944:	add.w	r9, r5, #4640	; 0x1220
    2948:	add	sl, r5
    294a:	str	r3, [sp, #4]
    294c:	mov.w	r8, r7, lsl #3
    2950:	ldr	r6, [sp, #4]
    2952:	movs	r4, #0
    2954:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2958:	ldrb	r2, [r5, #24]
      return _background[x][y];
    295a:	add	r3, r4
    295c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    295e:	cbnz	r2, 2964 <regular_setup()+0x186c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2960:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2964:	cbnz	r3, 2980 <regular_setup()+0x1888>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2966:	adds	r4, #1
    2968:	adds	r6, #4
    296a:	cmp	r4, #24
    296c:	bne.n	2954 <regular_setup()+0x185c>
    296e:	ldr	r3, [sp, #4]
    2970:	adds	r7, #24
    2972:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2974:	cmp.w	r7, #576	; 0x240
    2978:	str	r3, [sp, #4]
    297a:	bne.n	294c <regular_setup()+0x1854>
    297c:	b.w	1704 <regular_setup()+0x60c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2980:	ldr	r2, [r5, #20]
    2982:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2984:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2988:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    298a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    298c:	adds	r0, #2
    298e:	ldr.w	fp, [r3, r4, lsl #3]
    2992:	bl	cb48 <random(unsigned long)>
    2996:	ldr	r3, [r5, #16]
    2998:	rsb	r3, r3, fp
    299c:	adds	r3, #1
    299e:	subs	r0, r3, r0
    29a0:	str	r0, [r6, #0]
    29a2:	b.n	2966 <regular_setup()+0x186e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29a4:	movw	sl, #4636	; 0x121c
    29a8:	add.w	r3, r5, #28
    29ac:	movs	r7, #0
    29ae:	add.w	r9, r5, #4640	; 0x1220
    29b2:	add	sl, r5
    29b4:	str	r3, [sp, #4]
    29b6:	mov.w	r8, r7, lsl #3
    29ba:	ldr	r6, [sp, #4]
    29bc:	movs	r4, #0
    29be:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29c2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    29c4:	add	r3, r4
    29c6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29c8:	cbnz	r2, 29ce <regular_setup()+0x18d6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    29ca:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    29ce:	cbnz	r3, 29ea <regular_setup()+0x18f2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    29d0:	adds	r4, #1
    29d2:	adds	r6, #4
    29d4:	cmp	r4, #24
    29d6:	bne.n	29be <regular_setup()+0x18c6>
    29d8:	ldr	r3, [sp, #4]
    29da:	adds	r7, #24
    29dc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    29de:	cmp.w	r7, #576	; 0x240
    29e2:	str	r3, [sp, #4]
    29e4:	bne.n	29b6 <regular_setup()+0x18be>
    29e6:	b.w	1294 <regular_setup()+0x19c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29ea:	ldr	r2, [r5, #20]
    29ec:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29ee:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29f2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29f4:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29f6:	adds	r0, #2
    29f8:	ldr.w	fp, [r3, r4, lsl #3]
    29fc:	bl	cb48 <random(unsigned long)>
    2a00:	ldr	r3, [r5, #16]
    2a02:	rsb	r3, r3, fp
    2a06:	adds	r3, #1
    2a08:	subs	r0, r3, r0
    2a0a:	str	r0, [r6, #0]
    2a0c:	b.n	29d0 <regular_setup()+0x18d8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a0e:	movw	sl, #4636	; 0x121c
    2a12:	add.w	r3, r5, #28
    2a16:	movs	r7, #0
    2a18:	add.w	r9, r5, #4640	; 0x1220
    2a1c:	add	sl, r5
    2a1e:	str	r3, [sp, #4]
    2a20:	mov.w	r8, r7, lsl #3
    2a24:	ldr	r6, [sp, #4]
    2a26:	movs	r4, #0
    2a28:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a2c:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2a2e:	add	r3, r4
    2a30:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a32:	cbnz	r2, 2a38 <regular_setup()+0x1940>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2a34:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2a38:	cbnz	r3, 2a54 <regular_setup()+0x195c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2a3a:	adds	r4, #1
    2a3c:	adds	r6, #4
    2a3e:	cmp	r4, #24
    2a40:	bne.n	2a28 <regular_setup()+0x1930>
    2a42:	ldr	r3, [sp, #4]
    2a44:	adds	r7, #24
    2a46:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2a48:	cmp.w	r7, #576	; 0x240
    2a4c:	str	r3, [sp, #4]
    2a4e:	bne.n	2a20 <regular_setup()+0x1928>
    2a50:	b.w	1ef2 <regular_setup()+0xdfa>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a54:	ldr	r2, [r5, #20]
    2a56:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a58:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a5c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a5e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a60:	adds	r0, #2
    2a62:	ldr.w	fp, [r3, r4, lsl #3]
    2a66:	bl	cb48 <random(unsigned long)>
    2a6a:	ldr	r3, [r5, #16]
    2a6c:	rsb	r3, r3, fp
    2a70:	adds	r3, #1
    2a72:	subs	r0, r3, r0
    2a74:	str	r0, [r6, #0]
    2a76:	b.n	2a3a <regular_setup()+0x1942>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a78:	movw	sl, #4636	; 0x121c
    2a7c:	add.w	r3, r5, #28
    2a80:	movs	r7, #0
    2a82:	add.w	r9, r5, #4640	; 0x1220
    2a86:	add	sl, r5
    2a88:	str	r3, [sp, #4]
    2a8a:	mov.w	r8, r7, lsl #3
    2a8e:	ldr	r6, [sp, #4]
    2a90:	movs	r4, #0
    2a92:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a96:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2a98:	add	r3, r4
    2a9a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a9c:	cbnz	r2, 2aa2 <regular_setup()+0x19aa>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2a9e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2aa2:	cbnz	r3, 2abe <regular_setup()+0x19c6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2aa4:	adds	r4, #1
    2aa6:	adds	r6, #4
    2aa8:	cmp	r4, #24
    2aaa:	bne.n	2a92 <regular_setup()+0x199a>
    2aac:	ldr	r3, [sp, #4]
    2aae:	adds	r7, #24
    2ab0:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2ab2:	cmp.w	r7, #576	; 0x240
    2ab6:	str	r3, [sp, #4]
    2ab8:	bne.n	2a8a <regular_setup()+0x1992>
    2aba:	b.w	14c2 <regular_setup()+0x3ca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2abe:	ldr	r2, [r5, #20]
    2ac0:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ac2:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ac6:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ac8:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2aca:	adds	r0, #2
    2acc:	ldr.w	fp, [r3, r4, lsl #3]
    2ad0:	bl	cb48 <random(unsigned long)>
    2ad4:	ldr	r3, [r5, #16]
    2ad6:	rsb	r3, r3, fp
    2ada:	adds	r3, #1
    2adc:	subs	r0, r3, r0
    2ade:	str	r0, [r6, #0]
    2ae0:	b.n	2aa4 <regular_setup()+0x19ac>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ae2:	movw	sl, #4636	; 0x121c
    2ae6:	add.w	r3, r5, #28
    2aea:	movs	r7, #0
    2aec:	add.w	r9, r5, #4640	; 0x1220
    2af0:	add	sl, r5
    2af2:	str	r3, [sp, #4]
    2af4:	mov.w	r8, r7, lsl #3
    2af8:	ldr	r6, [sp, #4]
    2afa:	movs	r4, #0
    2afc:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b00:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b02:	add	r3, r4
    2b04:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b06:	cbnz	r2, 2b0c <regular_setup()+0x1a14>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b08:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b0c:	cbnz	r3, 2b26 <regular_setup()+0x1a2e>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b0e:	adds	r4, #1
    2b10:	adds	r6, #4
    2b12:	cmp	r4, #24
    2b14:	bne.n	2afc <regular_setup()+0x1a04>
    2b16:	ldr	r3, [sp, #4]
    2b18:	adds	r7, #24
    2b1a:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b1c:	cmp.w	r7, #576	; 0x240
    2b20:	str	r3, [sp, #4]
    2b22:	bne.n	2af4 <regular_setup()+0x19fc>
    2b24:	b.n	2372 <regular_setup()+0x127a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b26:	ldr	r2, [r5, #20]
    2b28:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b2a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b2e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b30:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b32:	adds	r0, #2
    2b34:	ldr.w	fp, [r3, r4, lsl #3]
    2b38:	bl	cb48 <random(unsigned long)>
    2b3c:	ldr	r3, [r5, #16]
    2b3e:	rsb	r3, r3, fp
    2b42:	adds	r3, #1
    2b44:	subs	r0, r3, r0
    2b46:	str	r0, [r6, #0]
    2b48:	b.n	2b0e <regular_setup()+0x1a16>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b4a:	movw	sl, #4636	; 0x121c
    2b4e:	add.w	r3, r5, #28
    2b52:	movs	r7, #0
    2b54:	add.w	r9, r5, #4640	; 0x1220
    2b58:	add	sl, r5
    2b5a:	str	r3, [sp, #4]
    2b5c:	mov.w	r8, r7, lsl #3
    2b60:	ldr	r6, [sp, #4]
    2b62:	movs	r4, #0
    2b64:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b68:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b6a:	add	r3, r4
    2b6c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b6e:	cbnz	r2, 2b74 <regular_setup()+0x1a7c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b70:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b74:	cbnz	r3, 2b90 <regular_setup()+0x1a98>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b76:	adds	r4, #1
    2b78:	adds	r6, #4
    2b7a:	cmp	r4, #24
    2b7c:	bne.n	2b64 <regular_setup()+0x1a6c>
    2b7e:	ldr	r3, [sp, #4]
    2b80:	adds	r7, #24
    2b82:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b84:	cmp.w	r7, #576	; 0x240
    2b88:	str	r3, [sp, #4]
    2b8a:	bne.n	2b5c <regular_setup()+0x1a64>
    2b8c:	b.w	2132 <regular_setup()+0x103a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b90:	ldr	r2, [r5, #20]
    2b92:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b94:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b98:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b9a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b9c:	adds	r0, #2
    2b9e:	ldr.w	fp, [r3, r4, lsl #3]
    2ba2:	bl	cb48 <random(unsigned long)>
    2ba6:	ldr	r3, [r5, #16]
    2ba8:	rsb	r3, r3, fp
    2bac:	adds	r3, #1
    2bae:	subs	r0, r3, r0
    2bb0:	str	r0, [r6, #0]
    2bb2:	b.n	2b76 <regular_setup()+0x1a7e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bb4:	movw	sl, #4636	; 0x121c
    2bb8:	add.w	r3, r5, #28
    2bbc:	movs	r7, #0
    2bbe:	add.w	r9, r5, #4640	; 0x1220
    2bc2:	add	sl, r5
    2bc4:	str	r3, [sp, #4]
    2bc6:	mov.w	r8, r7, lsl #3
    2bca:	ldr	r6, [sp, #4]
    2bcc:	movs	r4, #0
    2bce:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2bd2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2bd4:	add	r3, r4
    2bd6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2bd8:	cbnz	r2, 2bde <regular_setup()+0x1ae6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2bda:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2bde:	cbnz	r3, 2bfa <regular_setup()+0x1b02>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2be0:	adds	r4, #1
    2be2:	adds	r6, #4
    2be4:	cmp	r4, #24
    2be6:	bne.n	2bce <regular_setup()+0x1ad6>
    2be8:	ldr	r3, [sp, #4]
    2bea:	adds	r7, #24
    2bec:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2bee:	cmp.w	r7, #576	; 0x240
    2bf2:	str	r3, [sp, #4]
    2bf4:	bne.n	2bc6 <regular_setup()+0x1ace>
    2bf6:	b.w	1cc2 <regular_setup()+0xbca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2bfa:	ldr	r2, [r5, #20]
    2bfc:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bfe:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c02:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c04:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c06:	adds	r0, #2
    2c08:	ldr.w	fp, [r3, r4, lsl #3]
    2c0c:	bl	cb48 <random(unsigned long)>
    2c10:	ldr	r3, [r5, #16]
    2c12:	rsb	r3, r3, fp
    2c16:	adds	r3, #1
    2c18:	subs	r0, r3, r0
    2c1a:	str	r0, [r6, #0]
    2c1c:	b.n	2be0 <regular_setup()+0x1ae8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c1e:	movw	sl, #4636	; 0x121c
    2c22:	add.w	r3, r5, #28
    2c26:	movs	r7, #0
    2c28:	add.w	r9, r5, #4640	; 0x1220
    2c2c:	add	sl, r5
    2c2e:	str	r3, [sp, #4]
    2c30:	mov.w	r8, r7, lsl #3
    2c34:	ldr	r6, [sp, #4]
    2c36:	movs	r4, #0
    2c38:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2c3c:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2c3e:	add	r3, r4
    2c40:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2c42:	cbnz	r2, 2c48 <regular_setup()+0x1b50>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2c44:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2c48:	cbnz	r3, 2c64 <regular_setup()+0x1b6c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2c4a:	adds	r4, #1
    2c4c:	adds	r6, #4
    2c4e:	cmp	r4, #24
    2c50:	bne.n	2c38 <regular_setup()+0x1b40>
    2c52:	ldr	r3, [sp, #4]
    2c54:	adds	r7, #24
    2c56:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2c58:	cmp.w	r7, #576	; 0x240
    2c5c:	str	r3, [sp, #4]
    2c5e:	bne.n	2c30 <regular_setup()+0x1b38>
    2c60:	b.w	1948 <regular_setup()+0x850>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c64:	ldr	r2, [r5, #20]
    2c66:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c68:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c6c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c6e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c70:	adds	r0, #2
    2c72:	ldr.w	fp, [r3, r4, lsl #3]
    2c76:	bl	cb48 <random(unsigned long)>
    2c7a:	ldr	r3, [r5, #16]
    2c7c:	rsb	r3, r3, fp
    2c80:	adds	r3, #1
    2c82:	subs	r0, r3, r0
    2c84:	str	r0, [r6, #0]
    2c86:	b.n	2c4a <regular_setup()+0x1b52>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    2c88:	bl	d2d8 <sqrt>
    2c8c:	vmov.f64	d7, d0
    2c90:	b.w	13f8 <regular_setup()+0x300>
    2c94:	bl	d2d8 <sqrt>
    2c98:	vmov.f64	d7, d0
    2c9c:	b.n	24ec <regular_setup()+0x13f4>
    2c9e:	bl	d2d8 <sqrt>
    2ca2:	vmov.f64	d7, d0
    2ca6:	b.w	223e <regular_setup()+0x1146>
    2caa:	bl	d2d8 <sqrt>
    2cae:	vmov.f64	d7, d0
    2cb2:	b.w	1f9a <regular_setup()+0xea2>
    2cb6:	bl	d2d8 <sqrt>
    2cba:	vmov.f64	d7, d0
    2cbe:	b.w	1dbe <regular_setup()+0xcc6>
    2cc2:	bl	d2d8 <sqrt>
    2cc6:	vmov.f64	d7, d0
    2cca:	b.w	1b8a <regular_setup()+0xa92>
    2cce:	bl	d2d8 <sqrt>
    2cd2:	vmov.f64	d7, d0
    2cd6:	b.w	1814 <regular_setup()+0x71c>
    2cda:	bl	d2d8 <sqrt>
    2cde:	vmov.f64	d7, d0
    2ce2:	b.w	156a <regular_setup()+0x472>
    2ce6:	nop

00002ce8 <updateScreensFade()>:
  renderInterrupt(); 
}


void updateScreensFade() {
  if(screenFadeUpdateSwitcher){
    2ce8:	ldr	r3, [pc, #700]	; (2fa8 <updateScreensFade()+0x2c0>)
    2cea:	ldrb	r3, [r3, #0]
 
  renderInterrupt(); 
}


void updateScreensFade() {
    2cec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cf0:	vpush	{d8}
    2cf4:	sub	sp, #28
  if(screenFadeUpdateSwitcher){
    2cf6:	cmp	r3, #0
    2cf8:	beq.w	2fc4 <updateScreensFade()+0x2dc>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2cfc:	ldr	r3, [pc, #684]	; (2fac <updateScreensFade()+0x2c4>)
    2cfe:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d00:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2d02:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d04:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2d06:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d08:	ldr	r6, [pc, #672]	; (2fac <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2d0a:	cmp	r3, r1
    2d0c:	it	eq
    2d0e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d10:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2d12:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d14:	ite	eq
    2d16:	moveq	r5, #1
    2d18:	movne	r5, #0
    2d1a:	cmp	r5, #0
    2d1c:	beq.n	2d04 <updateScreensFade()+0x1c>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2d1e:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2d20:	ldr.w	r8, [pc, #652]	; 2fb0 <updateScreensFade()+0x2c8>
    2d24:	orr.w	r1, r1, r2, lsl #27
    2d28:	ldr.w	r3, [r8, #428]	; 0x1ac
    2d2c:	vmov	s15, r1
    2d30:	vldr	d5, [pc, #620]	; 2fa0 <updateScreensFade()+0x2b8>
    2d34:	vcvt.f64.u32	d7, s15
    2d38:	vdiv.f64	d6, d7, d5
    2d3c:	vcvt.u32.f64	s12, d6
    2d40:	vmov	r2, s12
    2d44:	subs	r3, r2, r3
    2d46:	cmp	r3, #32
    2d48:	bls.w	2f90 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2d4c:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d4e:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2d50:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d52:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2d54:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d56:	ldr	r4, [pc, #596]	; (2fac <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2d58:	cmp	r3, r1
    2d5a:	it	eq
    2d5c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d5e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2d60:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d62:	ite	eq
    2d64:	moveq	r6, #1
    2d66:	movne	r6, #0
    2d68:	cmp	r6, #0
    2d6a:	beq.n	2d52 <updateScreensFade()+0x6a>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2d6c:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2d6e:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2d72:	vldr	s10, [r8, #420]	; 0x1a4
    2d76:	orr.w	r1, r1, r2, lsl #27
    2d7a:	ldr	r7, [pc, #564]	; (2fb0 <updateScreensFade()+0x2c8>)
    2d7c:	vcmpe.f32	s10, s11
    2d80:	vmov	s15, r1
    2d84:	vldr	d4, [pc, #536]	; 2fa0 <updateScreensFade()+0x2b8>
    2d88:	vcvt.f64.u32	d7, s15
    2d8c:	vmrs	APSR_nzcv, fpscr
    2d90:	vdiv.f64	d6, d7, d4
    2d94:	vcvt.u32.f64	s12, d6
    2d98:	vstr	s12, [r8, #428]	; 0x1ac
    2d9c:	blt.w	324c <updateScreensFade()+0x564>
      		
			if (newFrameReady) {
    2da0:	ldrb.w	r1, [r7, #412]	; 0x19c
    2da4:	cmp	r1, #0
    2da6:	beq.w	2f70 <updateScreensFade()+0x288>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2daa:	movs	r1, #0
    2dac:	ldr	r0, [pc, #516]	; (2fb4 <updateScreensFade()+0x2cc>)
    2dae:	bl	cee0 <Print::print(long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2db2:	movs	r1, #15
    2db4:	ldr	r0, [pc, #512]	; (2fb8 <updateScreensFade()+0x2d0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2db6:	mov	r6, r4
    2db8:	bl	b134 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2dbc:	ldr	r0, [pc, #500]	; (2fb4 <updateScreensFade()+0x2cc>)
    2dbe:	bl	ce40 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    2dc2:	ldr.w	r3, [r7, #440]	; 0x1b8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2dc6:	ldr.w	r0, [r7, #448]	; 0x1c0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2dca:	ldr.w	r2, [r7, #444]	; 0x1bc
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2dce:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    2dd0:	str.w	r3, [r7, #448]	; 0x1c0
  uint32_t lo1 = SNVS_HPRTCLR;
    2dd4:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2dd6:	str.w	r0, [r7, #444]	; 0x1bc
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2dda:	str.w	r2, [r7, #440]	; 0x1b8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dde:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2de0:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2de2:	cmp	r3, r4
    2de4:	it	eq
    2de6:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2de8:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2dea:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2dec:	ite	eq
    2dee:	moveq	r7, #1
    2df0:	movne	r7, #0
    2df2:	cmp	r7, #0
    2df4:	beq.n	2dde <updateScreensFade()+0xf6>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    2df6:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    2df8:	movs	r3, #0
    2dfa:	orr.w	r4, r4, r1, lsl #27
    2dfe:	strb.w	r3, [r8, #412]	; 0x19c
    2e02:	vmov	s15, r4
    2e06:	vldr	d5, [pc, #408]	; 2fa0 <updateScreensFade()+0x2b8>
    2e0a:	vcvt.f64.u32	d7, s15
    2e0e:	vdiv.f64	d6, d7, d5
    2e12:	vcvt.u32.f64	s15, d6
    2e16:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    2e1a:	vstr	s15, [r8, #424]	; 0x1a8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2e1e:	ldr	r3, [pc, #396]	; (2fac <updateScreensFade()+0x2c4>)
    2e20:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2e22:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2e24:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2e26:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2e28:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2e2a:	cmp	r3, r4
    2e2c:	it	eq
    2e2e:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2e30:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2e32:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2e34:	ite	eq
    2e36:	moveq	r6, #1
    2e38:	movne	r6, #0
    2e3a:	cmp	r6, #0
    2e3c:	beq.n	2e26 <updateScreensFade()+0x13e>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2e3e:	lsrs	r4, r3, #5
    2e40:	vldr	s10, [pc, #376]	; 2fbc <updateScreensFade()+0x2d4>
    2e44:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    2e48:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2e4a:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e4e:	ldr	r5, [pc, #352]	; (2fb0 <updateScreensFade()+0x2c8>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2e50:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2e52:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2e56:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e5a:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2e5c:	vcvt.f64.u32	d7, s15
    2e60:	vldr	d4, [pc, #316]	; 2fa0 <updateScreensFade()+0x2b8>
    2e64:	vdiv.f64	d6, d7, d4
    2e68:	vcvt.u32.f64	s14, d6
    2e6c:	vmov	r3, s14
    2e70:	rsb	r6, lr, r3
    2e74:	vmov	s15, r6
    2e78:	vcvt.f32.u32	s14, s15
    2e7c:	vdiv.f32	s15, s14, s10
    2e80:	vcmpe.f32	s15, s11
    2e84:	vmrs	APSR_nzcv, fpscr
    2e88:	it	pl
    2e8a:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    2e8e:	vstr	s15, [r8, #420]	; 0x1a4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e92:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2e96:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e98:	lsls	r6, r6, #3
    2e9a:	b.n	2ea8 <updateScreensFade()+0x1c0>
    2e9c:	ldr.w	r2, [r5, #440]	; 0x1b8
    2ea0:	vldr	s15, [r5, #420]	; 0x1a4
    2ea4:	ldr.w	r0, [r5, #444]	; 0x1bc
    2ea8:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2eac:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2eb0:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2eb2:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2eb4:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2eb6:	ldr.w	r9, [pc, #248]	; 2fb0 <updateScreensFade()+0x2c8>
    2eba:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2ebc:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2ec0:	ldrb	r0, [r0, r3]
    2ec2:	vmov	s14, r0
    2ec6:	ldrb.w	r0, [lr, #2]
    2eca:	ldrb.w	lr, [lr, #1]
    2ece:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2ed2:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2ed4:	vmov	s13, lr
    2ed8:	ldrb	r3, [r2, r3]
    2eda:	ldrb.w	lr, [r0, #2]
    2ede:	vcvt.f32.s32	s12, s12
    2ee2:	vcvt.f32.s32	s13, s13
    2ee6:	vmov	s10, r3
    2eea:	vmov	s8, lr
    2eee:	ldrb	r3, [r0, #1]
    2ef0:	vcvt.f32.s32	s14, s14
    2ef4:	ldr.w	r0, [r8, #400]	; 0x190
    2ef8:	vmul.f32	s13, s13, s15
    2efc:	vmov	s9, r3
    2f00:	vcvt.f32.s32	s8, s8
    2f04:	vmul.f32	s12, s12, s15
    2f08:	vcvt.f32.s32	s9, s9
    2f0c:	vmul.f32	s15, s14, s15
    2f10:	vcvt.f32.s32	s10, s10
    2f14:	vmov.f32	s14, s13
    2f18:	vfma.f32	s12, s11, s8
    2f1c:	vfma.f32	s15, s10, s11
    2f20:	vfma.f32	s14, s11, s9
    2f24:	vcvt.s32.f32	s13, s12
    2f28:	vcvt.s32.f32	s15, s15
    2f2c:	vcvt.s32.f32	s14, s14
    2f30:	vstr	s13, [sp, #20]
    2f34:	ldrb.w	r2, [sp, #20]
    2f38:	vstr	s14, [sp, #12]
    2f3c:	vstr	s15, [sp, #16]
    2f40:	str	r2, [sp, #0]
    2f42:	ldrb.w	r3, [sp, #12]
    2f46:	ldrb.w	r2, [sp, #16]
    2f4a:	bl	aa94 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2f4e:	cmp	r4, #24
    2f50:	bne.n	2e9c <updateScreensFade()+0x1b4>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2f52:	add.w	sl, sl, #1
    2f56:	adds	r7, #24
    2f58:	cmp.w	sl, #24
    2f5c:	uxth	r7, r7
    2f5e:	beq.w	3234 <updateScreensFade()+0x54c>
    2f62:	ldr.w	r2, [fp, #440]	; 0x1b8
    2f66:	vldr	s15, [fp, #420]	; 0x1a4
    2f6a:	ldr.w	r0, [fp, #444]	; 0x1bc
    2f6e:	b.n	2e92 <updateScreensFade()+0x1aa>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f70:	ldr	r0, [pc, #64]	; (2fb4 <updateScreensFade()+0x2cc>)
    2f72:	bl	cee0 <Print::print(long)>
    2f76:	movs	r1, #22
    2f78:	ldr	r0, [pc, #68]	; (2fc0 <updateScreensFade()+0x2d8>)
    2f7a:	bl	b134 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f7e:	ldr	r0, [pc, #52]	; (2fb4 <updateScreensFade()+0x2cc>)
    2f80:	bl	ce40 <Print::println()>
    if(screen_A.updateFade(0)) screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }else{
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
    2f84:	ldr	r3, [pc, #32]	; (2fa8 <updateScreensFade()+0x2c0>)
    2f86:	ldr	r2, [pc, #32]	; (2fa8 <updateScreensFade()+0x2c0>)
    2f88:	ldrb	r3, [r3, #0]
    2f8a:	eor.w	r3, r3, #1
    2f8e:	strb	r3, [r2, #0]
  }
}
    2f90:	add	sp, #28
    2f92:	vpop	{d8}
    2f96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f9a:	nop
    2f9c:	nop.w
    2fa0:	.word	0xd2f1a9fc
    2fa4:	.word	0x3ff0624d
    2fa8:	.word	0x2000961c
    2fac:	.word	0x400d4000
    2fb0:	.word	0x20009630
    2fb4:	.word	0x20000edc
    2fb8:	.word	0x20000544
    2fbc:	.word	0x457a0000
    2fc0:	.word	0x20000554
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2fc4:	ldr	r3, [pc, #672]	; (3268 <updateScreensFade()+0x580>)
    2fc6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fc8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2fca:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fcc:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2fce:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fd0:	ldr	r6, [pc, #660]	; (3268 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2fd2:	cmp	r3, r1
    2fd4:	it	eq
    2fd6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fd8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2fda:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2fdc:	ite	eq
    2fde:	moveq	r5, #1
    2fe0:	movne	r5, #0
    2fe2:	cmp	r5, #0
    2fe4:	beq.n	2fcc <updateScreensFade()+0x2e4>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2fe6:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2fe8:	ldr.w	r8, [pc, #640]	; 326c <updateScreensFade()+0x584>
    2fec:	orr.w	r1, r1, r2, lsl #27
    2ff0:	ldr.w	r3, [r8, #428]	; 0x1ac
    2ff4:	vmov	s15, r1
    2ff8:	vldr	d5, [pc, #612]	; 3260 <updateScreensFade()+0x578>
    2ffc:	vcvt.f64.u32	d7, s15
    3000:	vdiv.f64	d6, d7, d5
    3004:	vcvt.u32.f64	s12, d6
    3008:	vmov	r2, s12
    300c:	subs	r3, r2, r3
    300e:	cmp	r3, #32
    3010:	bls.n	2f90 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3012:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3014:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3016:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3018:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    301a:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    301c:	ldr	r4, [pc, #584]	; (3268 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    301e:	cmp	r3, r1
    3020:	it	eq
    3022:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3024:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3026:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3028:	ite	eq
    302a:	moveq	r6, #1
    302c:	movne	r6, #0
    302e:	cmp	r6, #0
    3030:	beq.n	3018 <updateScreensFade()+0x330>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    3032:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    3034:	vmov.f32	s11, #112	; 0x3f800000  1.0
    3038:	vldr	s10, [r8, #420]	; 0x1a4
    303c:	orr.w	r1, r1, r2, lsl #27
    3040:	ldr	r7, [pc, #552]	; (326c <updateScreensFade()+0x584>)
    3042:	vcmpe.f32	s10, s11
    3046:	vmov	s15, r1
    304a:	vldr	d4, [pc, #532]	; 3260 <updateScreensFade()+0x578>
    304e:	vcvt.f64.u32	d7, s15
    3052:	vmrs	APSR_nzcv, fpscr
    3056:	vdiv.f64	d6, d7, d4
    305a:	vcvt.u32.f64	s12, d6
    305e:	vstr	s12, [r8, #428]	; 0x1ac
    3062:	blt.w	323e <updateScreensFade()+0x556>
      		
			if (newFrameReady) {
    3066:	ldrb.w	r3, [r7, #412]	; 0x19c
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    306a:	movs	r1, #1
    306c:	ldr	r0, [pc, #512]	; (3270 <updateScreensFade()+0x588>)
    306e:	cmp	r3, #0
    3070:	beq.w	2f72 <updateScreensFade()+0x28a>
    3074:	bl	cee0 <Print::print(long)>
    3078:	movs	r1, #15
    307a:	ldr	r0, [pc, #504]	; (3274 <updateScreensFade()+0x58c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    307c:	mov	r6, r4
    307e:	bl	b134 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3082:	ldr	r0, [pc, #492]	; (3270 <updateScreensFade()+0x588>)
    3084:	bl	ce40 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    3088:	ldr.w	r3, [r7, #440]	; 0x1b8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    308c:	ldr.w	r0, [r7, #448]	; 0x1c0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    3090:	ldr.w	r2, [r7, #444]	; 0x1bc
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3094:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    3096:	str.w	r3, [r7, #448]	; 0x1c0
  uint32_t lo1 = SNVS_HPRTCLR;
    309a:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    309c:	str.w	r0, [r7, #444]	; 0x1bc
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    30a0:	str.w	r2, [r7, #440]	; 0x1b8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    30a4:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    30a6:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    30a8:	cmp	r3, r4
    30aa:	it	eq
    30ac:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    30ae:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    30b0:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    30b2:	ite	eq
    30b4:	moveq	r7, #1
    30b6:	movne	r7, #0
    30b8:	cmp	r7, #0
    30ba:	beq.n	30a4 <updateScreensFade()+0x3bc>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    30bc:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    30be:	movs	r3, #0
    30c0:	orr.w	r4, r4, r1, lsl #27
    30c4:	strb.w	r3, [r8, #412]	; 0x19c
    30c8:	vmov	s15, r4
    30cc:	vldr	d5, [pc, #400]	; 3260 <updateScreensFade()+0x578>
    30d0:	vcvt.f64.u32	d7, s15
    30d4:	vdiv.f64	d6, d7, d5
    30d8:	vcvt.u32.f64	s15, d6
    30dc:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    30e0:	vstr	s15, [r8, #424]	; 0x1a8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    30e4:	ldr	r3, [pc, #384]	; (3268 <updateScreensFade()+0x580>)
    30e6:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    30e8:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    30ea:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    30ec:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    30ee:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    30f0:	cmp	r3, r4
    30f2:	it	eq
    30f4:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    30f6:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    30f8:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    30fa:	ite	eq
    30fc:	moveq	r6, #1
    30fe:	movne	r6, #0
    3100:	cmp	r6, #0
    3102:	beq.n	30ec <updateScreensFade()+0x404>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    3104:	lsrs	r4, r3, #5
    3106:	vldr	s10, [pc, #368]	; 3278 <updateScreensFade()+0x590>
    310a:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    310e:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    3110:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3114:	ldr	r5, [pc, #340]	; (326c <updateScreensFade()+0x584>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    3116:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    3118:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    311c:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3120:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    3122:	vcvt.f64.u32	d7, s15
    3126:	vldr	d4, [pc, #312]	; 3260 <updateScreensFade()+0x578>
    312a:	vdiv.f64	d6, d7, d4
    312e:	vcvt.u32.f64	s14, d6
    3132:	vmov	r3, s14
    3136:	rsb	r6, lr, r3
    313a:	vmov	s15, r6
    313e:	vcvt.f32.u32	s14, s15
    3142:	vdiv.f32	s15, s14, s10
    3146:	vcmpe.f32	s15, s11
    314a:	vmrs	APSR_nzcv, fpscr
    314e:	it	pl
    3150:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    3154:	vstr	s15, [r8, #420]	; 0x1a4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3158:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    315c:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    315e:	lsls	r6, r6, #3
    3160:	b.n	316e <updateScreensFade()+0x486>
    3162:	ldr.w	r2, [r5, #440]	; 0x1b8
    3166:	vldr	s15, [r5, #420]	; 0x1a4
    316a:	ldr.w	r0, [r5, #444]	; 0x1bc
    316e:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    3172:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3176:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    3178:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    317a:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    317c:	ldr.w	r9, [pc, #236]	; 326c <updateScreensFade()+0x584>
    3180:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3182:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3186:	ldrb	r0, [r0, r3]
    3188:	vmov	s14, r0
    318c:	ldrb.w	r0, [lr, #2]
    3190:	ldrb.w	lr, [lr, #1]
    3194:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3198:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    319a:	vmov	s13, lr
    319e:	ldrb	r3, [r2, r3]
    31a0:	ldrb.w	lr, [r0, #2]
    31a4:	vcvt.f32.s32	s12, s12
    31a8:	vcvt.f32.s32	s13, s13
    31ac:	vmov	s10, r3
    31b0:	vmov	s8, lr
    31b4:	ldrb	r3, [r0, #1]
    31b6:	vcvt.f32.s32	s14, s14
    31ba:	ldr.w	r0, [r8, #400]	; 0x190
    31be:	vmul.f32	s13, s13, s15
    31c2:	vmov	s9, r3
    31c6:	vcvt.f32.s32	s8, s8
    31ca:	vmul.f32	s12, s12, s15
    31ce:	vcvt.f32.s32	s9, s9
    31d2:	vmul.f32	s15, s14, s15
    31d6:	vcvt.f32.s32	s10, s10
    31da:	vmov.f32	s14, s13
    31de:	vfma.f32	s12, s11, s8
    31e2:	vfma.f32	s15, s10, s11
    31e6:	vfma.f32	s14, s11, s9
    31ea:	vcvt.s32.f32	s13, s12
    31ee:	vcvt.s32.f32	s15, s15
    31f2:	vcvt.s32.f32	s14, s14
    31f6:	vstr	s13, [sp, #20]
    31fa:	ldrb.w	r2, [sp, #20]
    31fe:	vstr	s14, [sp, #12]
    3202:	vstr	s15, [sp, #16]
    3206:	str	r2, [sp, #0]
    3208:	ldrb.w	r3, [sp, #12]
    320c:	ldrb.w	r2, [sp, #16]
    3210:	bl	aa94 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    3214:	cmp	r4, #24
    3216:	bne.n	3162 <updateScreensFade()+0x47a>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    3218:	add.w	sl, sl, #1
    321c:	adds	r7, #24
    321e:	cmp.w	sl, #24
    3222:	uxth	r7, r7
    3224:	beq.n	3234 <updateScreensFade()+0x54c>
    3226:	ldr.w	r2, [fp, #440]	; 0x1b8
    322a:	vldr	s15, [fp, #420]	; 0x1a4
    322e:	ldr.w	r0, [fp, #444]	; 0x1bc
    3232:	b.n	3158 <updateScreensFade()+0x470>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    3234:	ldr.w	r0, [r9, #400]	; 0x190
    3238:	bl	a84c <Adafruit_NeoPixel::show()>
    323c:	b.n	2f84 <updateScreensFade()+0x29c>
    323e:	ldr.w	lr, [r7, #424]	; 0x1a8
    3242:	ldr.w	r2, [r7, #440]	; 0x1b8
    3246:	ldr.w	r0, [r7, #444]	; 0x1bc
    324a:	b.n	30e4 <updateScreensFade()+0x3fc>
    324c:	ldr.w	lr, [r7, #424]	; 0x1a8
    3250:	ldr.w	r2, [r7, #440]	; 0x1b8
    3254:	ldr.w	r0, [r7, #444]	; 0x1bc
    3258:	b.n	2e1e <updateScreensFade()+0x136>
    325a:	nop
    325c:	nop.w
    3260:	.word	0xd2f1a9fc
    3264:	.word	0x3ff0624d
    3268:	.word	0x400d4000
    326c:	.word	0x200097f4
    3270:	.word	0x20000edc
    3274:	.word	0x20000544
    3278:	.word	0x457a0000

0000327c <Screen::iterate_animation() [clone .part.20]>:
		return true;
	}


	void iterate_animation(){
    327c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3280:	movs	r3, #2
    3282:	sub	sp, #68	; 0x44
			initialize_seed(_fg_automaton, hue_seeds[0]);
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}
		
		(*_fg_automaton).iterate();
    3284:	ldr.w	r9, [r0, #388]	; 0x184
    3288:	movs	r2, #32
    328a:	str	r3, [sp, #4]
		_screen->show();
		return true;
	}


	void iterate_animation(){
    328c:	mov	fp, r0
    328e:	addw	r3, r9, #2428	; 0x97c
    3292:	movs	r1, #0
    3294:	ldr.w	sl, [pc, #1608]	; 38e0 <Screen::iterate_animation() [clone .part.20]+0x664>
    3298:	add.w	r0, sp, r2
    329c:	str	r3, [sp, #12]
    329e:	add.w	r3, r9, #4640	; 0x1220
    32a2:	str	r1, [sp, #20]
    32a4:	str	r3, [sp, #24]
    32a6:	bl	dc44 <memset>
    32aa:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
    32ae:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    32b2:	movs	r7, #2
  updateScreensFade();
    32b4:	bl	2ce8 <updateScreensFade()>
    32b8:	ldrb.w	r2, [r9, #24]
    32bc:	ldr	r3, [sp, #24]
    32be:	str	r2, [sp, #16]
    32c0:	ldr	r3, [r3, #0]
    32c2:	ldr	r2, [sp, #20]
    32c4:	ldr	r1, [sp, #12]
    32c6:	add.w	r8, r3, r2
    32ca:	sub.w	ip, r1, #96	; 0x60
    32ce:	sub.w	r3, r1, #2400	; 0x960
    32d2:	mov	fp, r8
    32d4:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    32d6:	ldr	r3, [sp, #16]
    32d8:	cmp	r3, #0
    32da:	beq.w	3718 <Screen::iterate_animation() [clone .part.20]+0x49c>
      return _background[x][y];
    32de:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    32e2:	cmp	r3, #0
    32e4:	beq.n	33ba <Screen::iterate_animation() [clone .part.20]+0x13e>
    32e6:	ldr	r3, [sp, #4]
    32e8:	add.w	lr, sp, #32
    32ec:	subs	r6, r3, #3
    32ee:	subs	r3, r7, #3
    32f0:	str	r3, [sp, #8]
    32f2:	smull	r3, r2, sl, r6
    32f6:	asrs	r3, r6, #31
    32f8:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    32fa:	mov	r5, lr
    32fc:	rsb	r3, r3, r2, asr #2
    3300:	add.w	r3, r3, r3, lsl #1
    3304:	sub.w	r3, r6, r3, lsl #3
    3308:	adds	r3, #24
    330a:	smull	r2, r1, sl, r3
    330e:	asrs	r2, r3, #31
    3310:	rsb	r2, r2, r1, asr #2
    3314:	add.w	r2, r2, r2, lsl #1
    3318:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    331c:	add.w	r2, r2, r2, lsl #1
    3320:	lsls	r4, r2, #3
    3322:	smull	r3, r2, sl, r0
    3326:	asrs	r3, r0, #31
    3328:	rsb	r3, r3, r2, asr #2
    332c:	add.w	r3, r3, r3, lsl #1
    3330:	sub.w	r3, r0, r3, lsl #3
    3334:	adds	r0, #1
    3336:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    3338:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    333a:	smull	r2, r1, sl, r3
    333e:	mov.w	r2, r3, asr #31
    3342:	rsb	r2, r2, r1, asr #2
    3346:	add.w	r2, r2, r2, lsl #1
    334a:	sub.w	r3, r3, r2, lsl #3
    334e:	add	r3, r4
    3350:	add.w	r3, r9, r3, lsl #2
    3354:	ldr	r3, [r3, #28]
    3356:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    335a:	bne.n	3322 <Screen::iterate_animation() [clone .part.20]+0xa6>
    335c:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    335e:	ldr	r3, [sp, #4]
    3360:	add.w	lr, lr, #12
    3364:	cmp	r3, r6
    3366:	bne.n	32f2 <Screen::iterate_animation() [clone .part.20]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3368:	ldr	r3, [sp, #0]
    336a:	movs	r0, #1
    336c:	ldr	r1, [r3, #0]
    336e:	ldr.w	r3, [r9]
    3372:	adds	r5, r1, r3
    3374:	movs	r4, #0
    3376:	mov	r3, r4
    3378:	b.n	3380 <Screen::iterate_animation() [clone .part.20]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    337a:	adds	r3, #1
    337c:	cmp	r3, #8
    337e:	beq.n	3396 <Screen::iterate_animation() [clone .part.20]+0x11a>
          if ((i >> j) % 2 == 1){
    3380:	asr.w	r2, r0, r3
    3384:	lsls	r6, r2, #31
    3386:	bpl.n	337a <Screen::iterate_animation() [clone .part.20]+0xfe>
            sum += neighbours[j];
    3388:	add	r2, sp, #32
    338a:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    338e:	adds	r3, #1
    3390:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3392:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3394:	bne.n	3380 <Screen::iterate_animation() [clone .part.20]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3396:	cmp	r5, r4
    3398:	beq.w	3722 <Screen::iterate_animation() [clone .part.20]+0x4a6>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    339c:	adds	r0, #1
    339e:	cmp.w	r0, #256	; 0x100
    33a2:	bne.n	3374 <Screen::iterate_animation() [clone .part.20]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    33a4:	ldr.w	r3, [r9, #8]
    33a8:	subs	r1, r1, r3
    33aa:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    33ae:	ldr.w	r3, [r9, #12]
    33b2:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    33b4:	it	gt
    33b6:	strgt.w	r3, [ip]
    33ba:	ldr	r3, [sp, #0]
    33bc:	add.w	ip, ip, #4
    33c0:	adds	r7, #1
    33c2:	add.w	r8, r8, #1
    33c6:	adds	r3, #4
    33c8:	add.w	fp, fp, #1
    33cc:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    33ce:	ldr	r3, [sp, #12]
    33d0:	cmp	r3, ip
    33d2:	bne.n	32d6 <Screen::iterate_animation() [clone .part.20]+0x5a>
    33d4:	ldr	r2, [sp, #12]
    33d6:	ldr	r3, [sp, #20]
    33d8:	adds	r2, #96	; 0x60
    33da:	adds	r3, #24
    33dc:	str	r2, [sp, #12]
    33de:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    33e0:	cmp.w	r3, #576	; 0x240
    33e4:	str	r3, [sp, #20]
    33e6:	add.w	r2, r2, #1
    33ea:	str	r2, [sp, #4]
    33ec:	bne.w	32ae <Screen::iterate_animation() [clone .part.20]+0x32>
    33f0:	movw	r5, #4632	; 0x1218
    33f4:	ldr.w	fp, [sp, #28]
    33f8:	addw	r4, r9, #2328	; 0x918
    33fc:	add	r5, r9
    33fe:	sub.w	r3, r4, #2304	; 0x900
    3402:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3406:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3408:	ldr.w	r1, [r2, #4]!
    340c:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3410:	cmp	r0, r3
    3412:	bne.n	3408 <Screen::iterate_animation() [clone .part.20]+0x18c>
    3414:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3416:	cmp	r5, r4
    3418:	bne.n	33fe <Screen::iterate_animation() [clone .part.20]+0x182>
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    341a:	ldr.w	r9, [fp, #384]	; 0x180
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    341e:	movs	r3, #2
    3420:	movs	r2, #32
    3422:	movs	r1, #0
    3424:	str	r3, [sp, #4]
    3426:	addw	r3, r9, #2428	; 0x97c
    342a:	ldr.w	sl, [pc, #1204]	; 38e0 <Screen::iterate_animation() [clone .part.20]+0x664>
    342e:	add.w	r0, sp, r2
    3432:	str	r3, [sp, #12]
    3434:	add.w	r3, r9, #4640	; 0x1220
    3438:	str	r1, [sp, #20]
    343a:	str	r3, [sp, #24]
    343c:	bl	dc44 <memset>
    3440:	str.w	fp, [sp, #28]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3444:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3448:	movs	r7, #2
  updateScreensFade();
    344a:	bl	2ce8 <updateScreensFade()>
    344e:	ldrb.w	r2, [r9, #24]
    3452:	ldr	r3, [sp, #24]
    3454:	str	r2, [sp, #16]
    3456:	ldr	r3, [r3, #0]
    3458:	ldr	r2, [sp, #20]
    345a:	ldr	r1, [sp, #12]
    345c:	add.w	r8, r3, r2
    3460:	sub.w	ip, r1, #96	; 0x60
    3464:	sub.w	r3, r1, #2400	; 0x960
    3468:	mov	fp, r8
    346a:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    346c:	ldr	r3, [sp, #16]
    346e:	cmp	r3, #0
    3470:	beq.w	372e <Screen::iterate_animation() [clone .part.20]+0x4b2>
      return _background[x][y];
    3474:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    3478:	cmp	r3, #0
    347a:	beq.n	3550 <Screen::iterate_animation() [clone .part.20]+0x2d4>
    347c:	ldr	r3, [sp, #4]
    347e:	add.w	lr, sp, #32
    3482:	subs	r6, r3, #3
    3484:	subs	r3, r7, #3
    3486:	str	r3, [sp, #8]
    3488:	smull	r3, r2, sl, r6
    348c:	asrs	r3, r6, #31
    348e:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3490:	mov	r5, lr
    3492:	rsb	r3, r3, r2, asr #2
    3496:	add.w	r3, r3, r3, lsl #1
    349a:	sub.w	r3, r6, r3, lsl #3
    349e:	adds	r3, #24
    34a0:	smull	r2, r1, sl, r3
    34a4:	asrs	r2, r3, #31
    34a6:	rsb	r2, r2, r1, asr #2
    34aa:	add.w	r2, r2, r2, lsl #1
    34ae:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    34b2:	add.w	r2, r2, r2, lsl #1
    34b6:	lsls	r4, r2, #3
    34b8:	smull	r3, r2, sl, r0
    34bc:	asrs	r3, r0, #31
    34be:	rsb	r3, r3, r2, asr #2
    34c2:	add.w	r3, r3, r3, lsl #1
    34c6:	sub.w	r3, r0, r3, lsl #3
    34ca:	adds	r0, #1
    34cc:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    34ce:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    34d0:	smull	r2, r1, sl, r3
    34d4:	mov.w	r2, r3, asr #31
    34d8:	rsb	r2, r2, r1, asr #2
    34dc:	add.w	r2, r2, r2, lsl #1
    34e0:	sub.w	r3, r3, r2, lsl #3
    34e4:	add	r3, r4
    34e6:	add.w	r3, r9, r3, lsl #2
    34ea:	ldr	r3, [r3, #28]
    34ec:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    34f0:	bne.n	34b8 <Screen::iterate_animation() [clone .part.20]+0x23c>
    34f2:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    34f4:	ldr	r3, [sp, #4]
    34f6:	add.w	lr, lr, #12
    34fa:	cmp	r3, r6
    34fc:	bne.n	3488 <Screen::iterate_animation() [clone .part.20]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    34fe:	ldr	r3, [sp, #0]
    3500:	movs	r0, #1
    3502:	ldr	r1, [r3, #0]
    3504:	ldr.w	r3, [r9]
    3508:	adds	r5, r1, r3
    350a:	movs	r4, #0
    350c:	mov	r3, r4
    350e:	b.n	3516 <Screen::iterate_animation() [clone .part.20]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3510:	adds	r3, #1
    3512:	cmp	r3, #8
    3514:	beq.n	352c <Screen::iterate_animation() [clone .part.20]+0x2b0>
          if ((i >> j) % 2 == 1){
    3516:	asr.w	r2, r0, r3
    351a:	lsls	r2, r2, #31
    351c:	bpl.n	3510 <Screen::iterate_animation() [clone .part.20]+0x294>
            sum += neighbours[j];
    351e:	add	r2, sp, #32
    3520:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3524:	adds	r3, #1
    3526:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3528:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    352a:	bne.n	3516 <Screen::iterate_animation() [clone .part.20]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    352c:	cmp	r5, r4
    352e:	beq.w	3738 <Screen::iterate_animation() [clone .part.20]+0x4bc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3532:	adds	r0, #1
    3534:	cmp.w	r0, #256	; 0x100
    3538:	bne.n	350a <Screen::iterate_animation() [clone .part.20]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    353a:	ldr.w	r3, [r9, #8]
    353e:	subs	r1, r1, r3
    3540:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    3544:	ldr.w	r3, [r9, #12]
    3548:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    354a:	it	gt
    354c:	strgt.w	r3, [ip]
    3550:	ldr	r3, [sp, #0]
    3552:	add.w	ip, ip, #4
    3556:	adds	r7, #1
    3558:	add.w	r8, r8, #1
    355c:	adds	r3, #4
    355e:	add.w	fp, fp, #1
    3562:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3564:	ldr	r3, [sp, #12]
    3566:	cmp	r3, ip
    3568:	bne.n	346c <Screen::iterate_animation() [clone .part.20]+0x1f0>
    356a:	ldr	r2, [sp, #12]
    356c:	ldr	r3, [sp, #20]
    356e:	adds	r2, #96	; 0x60
    3570:	adds	r3, #24
    3572:	str	r2, [sp, #12]
    3574:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3576:	cmp.w	r3, #576	; 0x240
    357a:	str	r3, [sp, #20]
    357c:	add.w	r2, r2, #1
    3580:	str	r2, [sp, #4]
    3582:	bne.w	3444 <Screen::iterate_animation() [clone .part.20]+0x1c8>
    3586:	movw	r5, #4632	; 0x1218
    358a:	ldr.w	fp, [sp, #28]
    358e:	addw	r4, r9, #2328	; 0x918
    3592:	add	r5, r9
    3594:	sub.w	r3, r4, #2304	; 0x900
    3598:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    359c:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    359e:	ldr.w	r1, [r2, #4]!
    35a2:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    35a6:	cmp	r0, r3
    35a8:	bne.n	359e <Screen::iterate_animation() [clone .part.20]+0x322>
    35aa:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    35ac:	cmp	r5, r4
    35ae:	bne.n	3594 <Screen::iterate_animation() [clone .part.20]+0x318>
		ratio++;
    35b0:	ldr.w	r3, [fp, #416]	; 0x1a0
    35b4:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    35b6:	cmp	r3, #1
			hue_difference = random(80, 300);
		}
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    35b8:	str.w	r3, [fp, #416]	; 0x1a0
		if (ratio == RATIO_GROWTH){
    35bc:	beq.w	38e8 <Screen::iterate_animation() [clone .part.20]+0x66c>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    35c0:	movs	r3, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    35c2:	ldr.w	ip, [pc, #800]	; 38e4 <Screen::iterate_animation() [clone .part.20]+0x668>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    35c6:	str	r3, [sp, #0]
    35c8:	str	r3, [sp, #8]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35ca:	ldr	r2, [sp, #8]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    35cc:	mov.w	lr, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    35d0:	mov.w	r8, #360	; 0x168
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35d4:	add.w	r9, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    35d8:	add.w	r3, r2, r2, lsl #3
    35dc:	mov.w	r9, r9, lsl #3
    35e0:	lsls	r3, r3, #3
    35e2:	str	r3, [sp, #4]
    35e4:	add.w	r3, r9, lr
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35e8:	ldr.w	r2, [fp, #396]	; 0x18c
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35ec:	ldr.w	r1, [fp, #392]	; 0x188
    35f0:	adds	r3, #6
    35f2:	lsls	r3, r3, #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35f4:	add	r2, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35f6:	add	r3, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35f8:	ldr	r4, [r2, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35fa:	ldr	r0, [r3, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35fc:	adds	r4, #50	; 0x32
    35fe:	ldr	r3, [pc, #720]	; (38d0 <Screen::iterate_animation() [clone .part.20]+0x654>)
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3600:	add.w	r0, r0, r0, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3604:	smull	r2, r3, r4, r3
    3608:	asrs	r1, r4, #31
    360a:	adds	r5, r4, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    360c:	ldr	r3, [pc, #704]	; (38d0 <Screen::iterate_animation() [clone .part.20]+0x654>)
    360e:	smull	r2, r3, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3612:	rsb	r2, r1, r5, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3616:	adds	r1, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3618:	rsb	r2, r2, r2, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    361c:	asrs	r3, r0, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    361e:	subs	r2, r4, r2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3620:	rsb	r1, r3, r1, asr #7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    3624:	cmp	r2, #219	; 0xdb
    3626:	rsb	r1, r1, r1, lsl #8
    362a:	sub.w	r1, r0, r1
    362e:	ble.w	38b8 <Screen::iterate_animation() [clone .part.20]+0x63c>
    3632:	rsb	r2, r2, #255	; 0xff
    3636:	ldr	r3, [pc, #668]	; (38d4 <Screen::iterate_animation() [clone .part.20]+0x658>)
    3638:	ldr.w	r0, [r3, r2, lsl #2]
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				bri = (*_grow_automaton).brightnessMap(x, y);
				sat = (*_sat_automaton).saturationMap(x, y);	
				if ((*_fg_automaton).can_color(x, y)) {
    363c:	ldr.w	r3, [fp, #388]	; 0x184
    3640:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3644:	ldrb	r4, [r3, #24]
    3646:	ldr	r2, [r2, #0]
      return _background[x][y];
    3648:	add	r2, lr
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    364a:	cmp	r4, #0
    364c:	beq.w	38bc <Screen::iterate_animation() [clone .part.20]+0x640>
      return _background[x][y];
    3650:	ldr	r4, [sp, #0]
    3652:	ldrb	r2, [r2, r4]
    3654:	cbnz	r2, 365a <Screen::iterate_animation() [clone .part.20]+0x3de>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3656:	ldr.w	r3, [fp, #384]	; 0x180
    365a:	add.w	r2, r9, lr
    365e:	ldr.w	r6, [fp, #432]	; 0x1b0
    3662:	add.w	r3, r3, r2, lsl #2
    3666:	ldr	r4, [r3, #28]
    3668:	add.w	r4, r4, r4, lsl #2
    366c:	smull	r2, r3, r4, ip
    3670:	asrs	r2, r4, #31
    3672:	adds	r5, r4, r3
    3674:	ldr.w	r3, [fp, #436]	; 0x1b4
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    3678:	cmp	r3, #0
    367a:	rsb	r5, r2, r5, asr #8
    367e:	mov	r2, r3
    3680:	it	lt
    3682:	addlt	r2, r3, #1
    3684:	mls	r5, r8, r5, r4
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3688:	add	r3, r6
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    368a:	asrs	r2, r2, #1
    368c:	adds	r4, r6, r2
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    368e:	negs	r2, r2
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3690:	subs	r3, r3, r4
    3692:	smull	r6, r7, r2, ip
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    3696:	subs	r6, r5, r4
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3698:	smull	r4, r5, r3, ip
    369c:	add	r7, r2
    369e:	asrs	r4, r2, #31
    36a0:	add.w	sl, r3, r5
    36a4:	asrs	r5, r3, #31
    36a6:	rsb	r7, r4, r7, asr #8
    36aa:	rsb	sl, r5, sl, asr #8
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    36ae:	smull	r4, r5, r6, ip
    36b2:	mls	r2, r8, r7, r2
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    36b6:	mls	sl, r8, sl, r3
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    36ba:	adds	r4, r6, r5
    36bc:	asrs	r3, r6, #31
    36be:	rsb	r2, sl, r2
    36c2:	rsb	r3, r3, r4, asr #8
    36c6:	cmp.w	r2, #360	; 0x168
    36ca:	mls	r3, r8, r3, r6
    36ce:	bge.w	388e <Screen::iterate_animation() [clone .part.20]+0x612>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    36d2:	mla	r3, r2, r3, r3
    36d6:	ldr	r2, [pc, #512]	; (38d8 <Screen::iterate_animation() [clone .part.20]+0x65c>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    36d8:	cmp	r1, #120	; 0x78
    36da:	smull	r4, r2, r2, r3
    36de:	mov.w	r3, r3, asr #31
    36e2:	rsb	r3, r3, r2, asr #7
    36e6:	add	sl, r3
    36e8:	bgt.w	38a8 <Screen::iterate_animation() [clone .part.20]+0x62c>
    36ec:	movs	r2, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    36ee:	cmp	r0, #255	; 0xff
    36f0:	beq.n	378e <Screen::iterate_animation() [clone .part.20]+0x512>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    36f2:	ldr	r3, [pc, #488]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    36f4:	mul.w	r0, r2, r0
    switch(hue/60) {
    36f8:	smull	r1, r3, r3, sl
    36fc:	mov.w	r1, sl, asr #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    3700:	asrs	r0, r0, #8
    switch(hue/60) {
    3702:	add	r3, sl
    3704:	rsb	r3, r1, r3, asr #5
    3708:	cmp	r3, #5
    370a:	bhi.w	38c6 <Screen::iterate_animation() [clone .part.20]+0x64a>
    370e:	tbb	[pc, r3]
    3712:	.short	0xab53
    3714:	.word	0x19647e9a

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    3718:	ldrb.w	r3, [fp]
    371c:	eor.w	r3, r3, #1
    3720:	b.n	32e2 <Screen::iterate_animation() [clone .part.20]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3722:	ldr.w	r2, [r9, #4]
    3726:	add	r1, r2
    3728:	str.w	r1, [ip]
    372c:	b.n	33ae <Screen::iterate_animation() [clone .part.20]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    372e:	ldrb.w	r3, [fp]
    3732:	eor.w	r3, r3, #1
    3736:	b.n	3478 <Screen::iterate_animation() [clone .part.20]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3738:	ldr.w	r2, [r9, #4]
    373c:	add	r1, r2
    373e:	str.w	r1, [ip]
    3742:	b.n	3544 <Screen::iterate_animation() [clone .part.20]+0x2c8>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    3744:	ldr	r3, [pc, #404]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    3746:	uxtb	r6, r2
    3748:	uxtb	r5, r0
    374a:	smull	r3, r4, r3, sl
    374e:	subs	r3, r2, r0
    3750:	add.w	r2, r4, sl
    3754:	rsb	r1, r1, r2, asr #5
    3758:	rsb	r1, r1, r1, lsl #4
    375c:	sub.w	sl, sl, r1, lsl #2
    3760:	rsb	r2, sl, #60	; 0x3c
    3764:	mul.w	r3, r3, r2
    3768:	ldr	r2, [pc, #368]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    376a:	smull	r2, r1, r2, r3
    376e:	asrs	r2, r3, #31
    3770:	add	r3, r1
    3772:	rsb	r3, r2, r3, asr #5
    3776:	adds	r2, r0, r3
    3778:	uxtb	r4, r2
    break;
    }
    *r = colors[0];
    377a:	ldr	r1, [sp, #4]
    377c:	add.w	r3, lr, lr, lsl #1
				}
				
				hue = filter_hue(hue);
				bri = shift_bri(bri);
				
				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    3780:	ldr.w	r2, [fp, #448]	; 0x1c0
    3784:	add	r3, r1
    3786:	adds	r1, r2, r3
    3788:	strb	r6, [r2, r3]
    *g = colors[1];
    378a:	strb	r5, [r1, #1]
    *b = colors[2]; 
    378c:	strb	r4, [r1, #2]
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    378e:	add.w	lr, lr, #1
    3792:	cmp.w	lr, #24
    3796:	bne.w	35e4 <Screen::iterate_animation() [clone .part.20]+0x368>
		return result;
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    379a:	ldr	r3, [sp, #8]
    379c:	ldr	r2, [sp, #0]
    379e:	adds	r3, #1
    37a0:	adds	r2, #24
    37a2:	cmp	r3, #24
    37a4:	str	r3, [sp, #8]
    37a6:	str	r2, [sp, #0]
    37a8:	bne.w	35ca <Screen::iterate_animation() [clone .part.20]+0x34e>
			(*_sat_automaton).iterate_growth();
			ratio = 0;
		}

		gen_color_matrix();
		newFrameReady = true;
    37ac:	movs	r3, #1
    37ae:	strb.w	r3, [fp, #412]	; 0x19c
	}
    37b2:	add	sp, #68	; 0x44
    37b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    37b8:	subs	r3, r2, r0
    37ba:	uxtb	r6, r2
    37bc:	uxtb	r4, r0
    37be:	mul.w	sl, sl, r3
    37c2:	ldr	r3, [pc, #280]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    37c4:	smull	r2, r3, r3, sl
    37c8:	mov.w	r2, sl, asr #31
    37cc:	add	sl, r3
    37ce:	rsb	sl, r2, sl, asr #5
    37d2:	add.w	r2, r0, sl
    37d6:	uxtb	r5, r2
    37d8:	b.n	377a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    37da:	ldr	r3, [pc, #256]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    37dc:	uxtb	r4, r2
    37de:	smull	r3, r5, r3, sl
    37e2:	subs	r3, r2, r0
    37e4:	add.w	r2, r5, sl
    37e8:	uxtb	r5, r0
    37ea:	rsb	r1, r1, r2, asr #5
    37ee:	rsb	r1, r1, r1, lsl #4
    37f2:	sub.w	sl, sl, r1, lsl #2
    37f6:	mul.w	r3, sl, r3
    37fa:	ldr	r2, [pc, #224]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    37fc:	smull	r2, r1, r2, r3
    3800:	asrs	r2, r3, #31
    3802:	add	r3, r1
    3804:	rsb	r3, r2, r3, asr #5
    3808:	adds	r2, r0, r3
    380a:	uxtb	r6, r2
    380c:	b.n	377a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    380e:	ldr	r3, [pc, #204]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    3810:	uxtb	r4, r2
    3812:	uxtb	r6, r0
    3814:	smull	r3, r5, r3, sl
    3818:	subs	r3, r2, r0
    381a:	add.w	r2, r5, sl
    381e:	rsb	r1, r1, r2, asr #5
    3822:	rsb	r1, r1, r1, lsl #4
    3826:	sub.w	sl, sl, r1, lsl #2
    382a:	rsb	r2, sl, #60	; 0x3c
    382e:	mul.w	r3, r3, r2
    3832:	ldr	r2, [pc, #168]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    3834:	smull	r2, r1, r2, r3
    3838:	asrs	r2, r3, #31
    383a:	add	r3, r1
    383c:	rsb	r3, r2, r3, asr #5
    3840:	adds	r2, r0, r3
    3842:	uxtb	r5, r2
    3844:	b.n	377a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    3846:	ldr	r3, [pc, #148]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    3848:	uxtb	r5, r2
    384a:	uxtb	r6, r0
    384c:	smull	r3, r4, r3, sl
    3850:	subs	r3, r2, r0
    3852:	add.w	r2, r4, sl
    3856:	rsb	r1, r1, r2, asr #5
    385a:	rsb	r1, r1, r1, lsl #4
    385e:	sub.w	sl, sl, r1, lsl #2
    3862:	mul.w	r3, sl, r3
    3866:	b.n	3768 <Screen::iterate_animation() [clone .part.20]+0x4ec>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    3868:	ldr	r3, [pc, #112]	; (38dc <Screen::iterate_animation() [clone .part.20]+0x660>)
    386a:	uxtb	r5, r2
    386c:	smull	r3, r4, r3, sl
    3870:	subs	r3, r2, r0
    3872:	add.w	r2, r4, sl
    3876:	uxtb	r4, r0
    3878:	rsb	r1, r1, r2, asr #5
    387c:	rsb	r1, r1, r1, lsl #4
    3880:	sub.w	sl, sl, r1, lsl #2
    3884:	rsb	r2, sl, #60	; 0x3c
    3888:	mul.w	r3, r3, r2
    388c:	b.n	37fa <Screen::iterate_animation() [clone .part.20]+0x57e>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    388e:	mul.w	r3, r2, r3
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3892:	cmp	r1, #120	; 0x78
    3894:	smull	r2, r4, ip, r3
    3898:	mov.w	r2, r3, asr #31
    389c:	add	r3, r4
    389e:	rsb	r3, r2, r3, asr #8
    38a2:	add	sl, r3
    38a4:	ble.w	36ec <Screen::iterate_animation() [clone .part.20]+0x470>
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    38a8:	adds	r1, #70	; 0x46
    38aa:	ldr	r3, [pc, #40]	; (38d4 <Screen::iterate_animation() [clone .part.20]+0x658>)
    38ac:	cmp	r1, #255	; 0xff
    38ae:	it	ge
    38b0:	movge	r1, #255	; 0xff
    38b2:	ldr.w	r2, [r3, r1, lsl #2]
    38b6:	b.n	36ee <Screen::iterate_animation() [clone .part.20]+0x472>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    38b8:	movs	r0, #5
    38ba:	b.n	363c <Screen::iterate_animation() [clone .part.20]+0x3c0>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    38bc:	ldr	r4, [sp, #0]
    38be:	ldrb	r2, [r2, r4]
    38c0:	eor.w	r2, r2, #1
    38c4:	b.n	3654 <Screen::iterate_animation() [clone .part.20]+0x3d8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    38c6:	movs	r4, #0
    38c8:	mov	r5, r4
    38ca:	mov	r6, r4
    38cc:	b.n	377a <Screen::iterate_animation() [clone .part.20]+0x4fe>
    38ce:	nop
    38d0:	.word	0x80808081
    38d4:	.word	0x20000144
    38d8:	.word	0x5ac5242b
    38dc:	.word	0x88888889
    38e0:	.word	0x2aaaaaab
    38e4:	.word	0xb60b60b7
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    38e8:	ldr.w	sl, [fp, #392]	; 0x188
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38ec:	movs	r2, #32
    38ee:	mov.w	r8, #2
    38f2:	ldr.w	r9, [pc, #732]	; 3bd0 <Screen::iterate_animation() [clone .part.20]+0x954>
    38f6:	addw	r3, sl, #2332	; 0x91c
    38fa:	movs	r1, #0
    38fc:	add.w	r0, sp, r2
    3900:	str	r3, [sp, #4]
    3902:	bl	dc44 <memset>
    3906:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    390a:	bl	5d0 <updateBeams()>
  updateScreensFade();
    390e:	bl	2ce8 <updateScreensFade()>
    3912:	ldr.w	r3, [sl]
    3916:	ldr	r2, [sp, #4]
    3918:	mov.w	ip, #4294967295
    391c:	str	r3, [sp, #8]
    391e:	ldr.w	r3, [sl, #12]
    3922:	mov	fp, r2
    3924:	str	r3, [sp, #12]
    3926:	subw	r3, r2, #2308	; 0x904
    392a:	str	r3, [sp, #0]
    392c:	sub.w	r3, r8, #3
    3930:	str	r3, [sp, #16]
    3932:	ldr	r6, [sp, #16]
    3934:	add.w	lr, sp, #32
    3938:	add.w	r7, ip, #3
    393c:	smull	r3, r2, r9, r6
    3940:	asrs	r3, r6, #31
    3942:	mov	r4, lr
    3944:	mov	r1, ip
    3946:	rsb	r3, r3, r2, asr #2
    394a:	add.w	r3, r3, r3, lsl #1
    394e:	sub.w	r3, r6, r3, lsl #3
    3952:	adds	r3, #24
    3954:	smull	r2, r0, r9, r3
    3958:	asrs	r2, r3, #31
    395a:	rsb	r0, r2, r0, asr #2
    395e:	add.w	r0, r0, r0, lsl #1
    3962:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3966:	add.w	r0, r0, r0, lsl #1
    396a:	lsls	r0, r0, #3
    396c:	smull	r3, r2, r9, r1
    3970:	asrs	r3, r1, #31
    3972:	rsb	r3, r3, r2, asr #2
    3976:	add.w	r3, r3, r3, lsl #1
    397a:	sub.w	r3, r1, r3, lsl #3
    397e:	adds	r1, #1
    3980:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3982:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3984:	smull	r2, r5, r9, r3
    3988:	mov.w	r2, r3, asr #31
    398c:	rsb	r2, r2, r5, asr #2
    3990:	add.w	r2, r2, r2, lsl #1
    3994:	sub.w	r3, r3, r2, lsl #3
    3998:	add	r3, r0
    399a:	add.w	r3, sl, r3, lsl #2
    399e:	ldr	r3, [r3, #28]
    39a0:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    39a4:	bne.n	396c <Screen::iterate_animation() [clone .part.20]+0x6f0>
    39a6:	adds	r6, #1
    39a8:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    39ac:	cmp	r8, r6
    39ae:	bne.n	393c <Screen::iterate_animation() [clone .part.20]+0x6c0>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    39b0:	ldr	r3, [sp, #0]
    39b2:	movs	r1, #1
    39b4:	ldr.w	r0, [r3, #4]!
    39b8:	str	r3, [sp, #0]
    39ba:	ldr	r3, [sp, #8]
    39bc:	adds	r5, r0, r3
    39be:	movs	r4, #0
    39c0:	mov	r3, r4
    39c2:	b.n	39ca <Screen::iterate_animation() [clone .part.20]+0x74e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    39c4:	adds	r3, #1
    39c6:	cmp	r3, #8
    39c8:	beq.n	39e0 <Screen::iterate_animation() [clone .part.20]+0x764>
          if ((i >> j) % 2 == 1){
    39ca:	asr.w	r2, r1, r3
    39ce:	lsls	r6, r2, #31
    39d0:	bpl.n	39c4 <Screen::iterate_animation() [clone .part.20]+0x748>
            sum += neighbours[j];
    39d2:	add	r2, sp, #32
    39d4:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    39d8:	adds	r3, #1
    39da:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    39dc:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    39de:	bne.n	39ca <Screen::iterate_animation() [clone .part.20]+0x74e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    39e0:	cmp	r5, r4
    39e2:	beq.w	3bb6 <Screen::iterate_animation() [clone .part.20]+0x93a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    39e6:	adds	r1, #1
    39e8:	cmp.w	r1, #256	; 0x100
    39ec:	bne.n	39be <Screen::iterate_animation() [clone .part.20]+0x742>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    39ee:	ldr.w	r3, [sl, #8]
    39f2:	subs	r0, r0, r3
    39f4:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    39f8:	ldr	r2, [sp, #12]
    39fa:	add.w	ip, ip, #1
    39fe:	add.w	fp, fp, #4
    3a02:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    3a04:	it	gt
    3a06:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3a0a:	cmp.w	ip, #23
    3a0e:	bne.n	3932 <Screen::iterate_animation() [clone .part.20]+0x6b6>
    3a10:	ldr	r3, [sp, #4]
    3a12:	add.w	r8, r8, #1
    3a16:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3a18:	cmp.w	r8, #26
    3a1c:	str	r3, [sp, #4]
    3a1e:	bne.w	390a <Screen::iterate_animation() [clone .part.20]+0x68e>
    3a22:	movw	r0, #4632	; 0x1218
    3a26:	ldr.w	fp, [sp, #20]
    3a2a:	addw	r3, sl, #2328	; 0x918
    3a2e:	add	r0, sl
    3a30:	sub.w	r2, r3, #2304	; 0x900
    3a34:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3a38:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3a3a:	ldr.w	r4, [r1, #4]!
    3a3e:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3a42:	cmp	r5, r2
    3a44:	bne.n	3a3a <Screen::iterate_animation() [clone .part.20]+0x7be>
    3a46:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3a48:	cmp	r0, r3
    3a4a:	bne.n	3a30 <Screen::iterate_animation() [clone .part.20]+0x7b4>
			(*_sat_automaton).iterate_growth();
    3a4c:	ldr.w	sl, [fp, #396]	; 0x18c
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3a50:	movs	r2, #32
    3a52:	mov.w	r8, #2
    3a56:	ldr.w	r9, [pc, #376]	; 3bd0 <Screen::iterate_animation() [clone .part.20]+0x954>
    3a5a:	addw	r3, sl, #2332	; 0x91c
    3a5e:	movs	r1, #0
    3a60:	add.w	r0, sp, r2
    3a64:	str	r3, [sp, #4]
    3a66:	bl	dc44 <memset>
    3a6a:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3a6e:	bl	5d0 <updateBeams()>
  updateScreensFade();
    3a72:	bl	2ce8 <updateScreensFade()>
    3a76:	ldr.w	r3, [sl]
    3a7a:	ldr	r2, [sp, #4]
    3a7c:	mov.w	ip, #4294967295
    3a80:	str	r3, [sp, #8]
    3a82:	ldr.w	r3, [sl, #12]
    3a86:	mov	fp, r2
    3a88:	str	r3, [sp, #12]
    3a8a:	subw	r3, r2, #2308	; 0x904
    3a8e:	str	r3, [sp, #0]
    3a90:	sub.w	r3, r8, #3
    3a94:	str	r3, [sp, #16]
    3a96:	ldr	r6, [sp, #16]
    3a98:	add.w	lr, sp, #32
    3a9c:	add.w	r7, ip, #3
    3aa0:	smull	r3, r2, r9, r6
    3aa4:	asrs	r3, r6, #31
    3aa6:	mov	r4, lr
    3aa8:	mov	r1, ip
    3aaa:	rsb	r3, r3, r2, asr #2
    3aae:	add.w	r3, r3, r3, lsl #1
    3ab2:	sub.w	r3, r6, r3, lsl #3
    3ab6:	adds	r3, #24
    3ab8:	smull	r2, r0, r9, r3
    3abc:	asrs	r2, r3, #31
    3abe:	rsb	r0, r2, r0, asr #2
    3ac2:	add.w	r0, r0, r0, lsl #1
    3ac6:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3aca:	add.w	r0, r0, r0, lsl #1
    3ace:	lsls	r0, r0, #3
    3ad0:	smull	r3, r2, r9, r1
    3ad4:	asrs	r3, r1, #31
    3ad6:	rsb	r3, r3, r2, asr #2
    3ada:	add.w	r3, r3, r3, lsl #1
    3ade:	sub.w	r3, r1, r3, lsl #3
    3ae2:	adds	r1, #1
    3ae4:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3ae6:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3ae8:	smull	r2, r5, r9, r3
    3aec:	mov.w	r2, r3, asr #31
    3af0:	rsb	r2, r2, r5, asr #2
    3af4:	add.w	r2, r2, r2, lsl #1
    3af8:	sub.w	r3, r3, r2, lsl #3
    3afc:	add	r3, r0
    3afe:	add.w	r3, sl, r3, lsl #2
    3b02:	ldr	r3, [r3, #28]
    3b04:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3b08:	bne.n	3ad0 <Screen::iterate_animation() [clone .part.20]+0x854>
    3b0a:	adds	r6, #1
    3b0c:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3b10:	cmp	r6, r8
    3b12:	bne.n	3aa0 <Screen::iterate_animation() [clone .part.20]+0x824>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3b14:	ldr	r3, [sp, #0]
    3b16:	movs	r1, #1
    3b18:	ldr.w	r0, [r3, #4]!
    3b1c:	str	r3, [sp, #0]
    3b1e:	ldr	r3, [sp, #8]
    3b20:	adds	r5, r0, r3
    3b22:	movs	r4, #0
    3b24:	mov	r3, r4
    3b26:	b.n	3b2e <Screen::iterate_animation() [clone .part.20]+0x8b2>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3b28:	adds	r3, #1
    3b2a:	cmp	r3, #8
    3b2c:	beq.n	3b44 <Screen::iterate_animation() [clone .part.20]+0x8c8>
          if ((i >> j) % 2 == 1){
    3b2e:	asr.w	r2, r1, r3
    3b32:	lsls	r2, r2, #31
    3b34:	bpl.n	3b28 <Screen::iterate_animation() [clone .part.20]+0x8ac>
            sum += neighbours[j];
    3b36:	add	r2, sp, #32
    3b38:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3b3c:	adds	r3, #1
    3b3e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3b40:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3b42:	bne.n	3b2e <Screen::iterate_animation() [clone .part.20]+0x8b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3b44:	cmp	r5, r4
    3b46:	beq.n	3bc2 <Screen::iterate_animation() [clone .part.20]+0x946>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3b48:	adds	r1, #1
    3b4a:	cmp.w	r1, #256	; 0x100
    3b4e:	bne.n	3b22 <Screen::iterate_animation() [clone .part.20]+0x8a6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3b50:	ldr.w	r3, [sl, #8]
    3b54:	subs	r0, r0, r3
    3b56:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3b5a:	ldr	r2, [sp, #12]
    3b5c:	add.w	ip, ip, #1
    3b60:	add.w	fp, fp, #4
    3b64:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    3b66:	it	gt
    3b68:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3b6c:	cmp.w	ip, #23
    3b70:	bne.n	3a96 <Screen::iterate_animation() [clone .part.20]+0x81a>
    3b72:	ldr	r3, [sp, #4]
    3b74:	add.w	r8, r8, #1
    3b78:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3b7a:	cmp.w	r8, #26
    3b7e:	str	r3, [sp, #4]
    3b80:	bne.w	3a6e <Screen::iterate_animation() [clone .part.20]+0x7f2>
    3b84:	movw	r0, #4632	; 0x1218
    3b88:	ldr.w	fp, [sp, #20]
    3b8c:	addw	r3, sl, #2328	; 0x918
    3b90:	add	r0, sl
    3b92:	sub.w	r2, r3, #2304	; 0x900
    3b96:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3b9a:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3b9c:	ldr.w	r4, [r1, #4]!
    3ba0:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3ba4:	cmp	r5, r2
    3ba6:	bne.n	3b9c <Screen::iterate_animation() [clone .part.20]+0x920>
    3ba8:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3baa:	cmp	r0, r3
    3bac:	bne.n	3b92 <Screen::iterate_animation() [clone .part.20]+0x916>
			ratio = 0;
    3bae:	movs	r3, #0
    3bb0:	str.w	r3, [fp, #416]	; 0x1a0
    3bb4:	b.n	35c0 <Screen::iterate_animation() [clone .part.20]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3bb6:	ldr.w	r2, [sl, #4]
    3bba:	add	r0, r2
    3bbc:	str.w	r0, [fp]
    3bc0:	b.n	39f8 <Screen::iterate_animation() [clone .part.20]+0x77c>
    3bc2:	ldr.w	r2, [sl, #4]
    3bc6:	add	r0, r2
    3bc8:	str.w	r0, [fp]
    3bcc:	b.n	3b5a <Screen::iterate_animation() [clone .part.20]+0x8de>
    3bce:	nop
    3bd0:	.word	0x2aaaaaab
    3bd4:	.word	0x00000000

00003bd8 <regular_animation()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3bd8:	ldr	r3, [pc, #748]	; (3ec8 <regular_animation()+0x2f0>)
  sinceLastPulses = 0;
}

int numPulses = 0;

void regular_animation(){
    3bda:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bde:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3be0:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3be2:	ldr	r1, [r3, #40]	; 0x28
    3be4:	vpush	{d8-d9}
    3be8:	sub	sp, #52	; 0x34
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bea:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3bec:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bee:	ldr	r6, [pc, #728]	; (3ec8 <regular_animation()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3bf0:	cmp	r3, r1
    3bf2:	it	eq
    3bf4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bf6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3bf8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3bfa:	ite	eq
    3bfc:	moveq	r5, #1
    3bfe:	movne	r5, #0
    3c00:	cmp	r5, #0
    3c02:	beq.n	3bea <regular_animation()+0x12>
  if(sinceLastPulses > 14000  && sinceAutomatonInit > 2000 ){
    3c04:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    3c06:	ldr	r7, [pc, #708]	; (3ecc <regular_animation()+0x2f4>)
    3c08:	movw	r2, #14000	; 0x36b0
    3c0c:	orr.w	r1, r1, r0, lsl #27
    3c10:	ldr	r3, [r7, #0]
    3c12:	vmov	s15, r1
    3c16:	vldr	d5, [pc, #680]	; 3ec0 <regular_animation()+0x2e8>
    3c1a:	vcvt.f64.u32	d7, s15
    3c1e:	vdiv.f64	d6, d7, d5
    3c22:	vcvt.u32.f64	s12, d6
    3c26:	vmov	r1, s12
    3c2a:	subs	r3, r1, r3
    3c2c:	cmp	r3, r2
    3c2e:	bls.n	3c7a <regular_animation()+0xa2>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3c30:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3c32:	mov	r4, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3c34:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3c36:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3c38:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3c3a:	ldr	r6, [pc, #652]	; (3ec8 <regular_animation()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3c3c:	cmp	r3, r1
    3c3e:	it	eq
    3c40:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3c42:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3c44:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3c46:	ite	eq
    3c48:	moveq	r5, #1
    3c4a:	movne	r5, #0
    3c4c:	cmp	r5, #0
    3c4e:	beq.n	3c36 <regular_animation()+0x5e>
    3c50:	lsrs	r1, r3, #5
    3c52:	ldr	r3, [pc, #636]	; (3ed0 <regular_animation()+0x2f8>)
    3c54:	orr.w	r1, r1, r2, lsl #27
    3c58:	ldr	r3, [r3, #0]
    3c5a:	vmov	s15, r1
    3c5e:	vldr	d5, [pc, #608]	; 3ec0 <regular_animation()+0x2e8>
    3c62:	vcvt.f64.u32	d7, s15
    3c66:	vdiv.f64	d6, d7, d5
    3c6a:	vcvt.u32.f64	s12, d6
    3c6e:	vmov	r2, s12
    3c72:	subs	r3, r2, r3
    3c74:	cmp.w	r3, #2000	; 0x7d0
    3c78:	bhi.n	3d34 <regular_animation()+0x15c>
    3c7a:	ldr	r3, [pc, #600]	; (3ed4 <regular_animation()+0x2fc>)
    3c7c:	ldr.w	r8, [pc, #600]	; 3ed8 <regular_animation()+0x300>
    3c80:	str	r3, [sp, #24]
	}


	void iterate_animation(){
		
		if (newFrameReady) return;
    3c82:	ldrb.w	r3, [r8, #412]	; 0x19c
    3c86:	ldr	r2, [pc, #592]	; (3ed8 <regular_animation()+0x300>)
    3c88:	cbnz	r3, 3cd0 <regular_animation()+0xf8>

		if (allZero(_grow_automaton)){
    3c8a:	ldr.w	r7, [r2, #392]	; 0x188
    3c8e:	add.w	r2, r7, #120	; 0x78
    3c92:	addw	r1, r7, #2424	; 0x978
    3c96:	sub.w	r3, r2, #96	; 0x60
    3c9a:	b.n	3ca2 <regular_animation()+0xca>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c9c:	cmp	r2, r3
    3c9e:	beq.w	3f74 <regular_animation()+0x39c>
				if ((*automaton).cells[i][j] != 0){
    3ca2:	ldr.w	r4, [r3, #4]!
    3ca6:	cmp	r4, #0
    3ca8:	beq.n	3c9c <regular_animation()+0xc4>
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
    3caa:	ldr.w	r7, [r8, #388]	; 0x184
    3cae:	add.w	r2, r7, #120	; 0x78
    3cb2:	addw	r1, r7, #2424	; 0x978
    3cb6:	sub.w	r3, r2, #96	; 0x60
    3cba:	b.n	3cc2 <regular_animation()+0xea>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3cbc:	cmp	r3, r2
    3cbe:	beq.w	4006 <regular_animation()+0x42e>
				if ((*automaton).cells[i][j] != 0){
    3cc2:	ldr.w	r6, [r3, #4]!
    3cc6:	cmp	r6, #0
    3cc8:	beq.n	3cbc <regular_animation()+0xe4>
    3cca:	ldr	r0, [pc, #524]	; (3ed8 <regular_animation()+0x300>)
    3ccc:	bl	327c <Screen::iterate_animation() [clone .part.20]>
	}


	void iterate_animation(){
		
		if (newFrameReady) return;
    3cd0:	ldr	r3, [sp, #24]
    3cd2:	ldr	r2, [pc, #512]	; (3ed4 <regular_animation()+0x2fc>)
    3cd4:	ldrb.w	r3, [r3, #412]	; 0x19c
    3cd8:	cbnz	r3, 3d22 <regular_animation()+0x14a>

		if (allZero(_grow_automaton)){
    3cda:	ldr.w	r7, [r2, #392]	; 0x188
    3cde:	add.w	r2, r7, #120	; 0x78
    3ce2:	addw	r1, r7, #2424	; 0x978
    3ce6:	sub.w	r3, r2, #96	; 0x60
    3cea:	b.n	3cf2 <regular_animation()+0x11a>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3cec:	cmp	r2, r3
    3cee:	beq.w	4090 <regular_animation()+0x4b8>
				if ((*automaton).cells[i][j] != 0){
    3cf2:	ldr.w	r4, [r3, #4]!
    3cf6:	cmp	r4, #0
    3cf8:	beq.n	3cec <regular_animation()+0x114>
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
    3cfa:	ldr	r3, [sp, #24]
    3cfc:	ldr.w	r7, [r3, #388]	; 0x184
    3d00:	add.w	r2, r7, #120	; 0x78
    3d04:	addw	r1, r7, #2424	; 0x978
    3d08:	sub.w	r3, r2, #96	; 0x60
    3d0c:	b.n	3d14 <regular_animation()+0x13c>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3d0e:	cmp	r3, r2
    3d10:	beq.w	3ef0 <regular_animation()+0x318>
				if ((*automaton).cells[i][j] != 0){
    3d14:	ldr.w	r4, [r3, #4]!
    3d18:	cmp	r4, #0
    3d1a:	beq.n	3d0e <regular_animation()+0x136>
    3d1c:	ldr	r0, [pc, #436]	; (3ed4 <regular_animation()+0x2fc>)
    3d1e:	bl	327c <Screen::iterate_animation() [clone .part.20]>
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3d22:	bl	5d0 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt(); 
}
    3d26:	add	sp, #52	; 0x34
    3d28:	vpop	{d8-d9}
    3d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    3d30:	b.w	2ce8 <updateScreensFade()>

int numPulses = 0;

void regular_animation(){
  if(sinceLastPulses > 14000  && sinceAutomatonInit > 2000 ){
    if (numPulses == 20){
    3d34:	ldr.w	lr, [pc, #436]	; 3eec <regular_animation()+0x314>
    3d38:	ldr.w	r3, [lr]
    3d3c:	cmp	r3, #20
    3d3e:	beq.w	4260 <regular_animation()+0x688>
      sinceLastPulses = 0;
      numPulses = 0;
    } else {
      numPulses++;
    3d42:	adds	r3, #1
    3d44:	str.w	r3, [lr]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3d48:	ldr	r3, [pc, #380]	; (3ec8 <regular_animation()+0x2f0>)
    3d4a:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3d4c:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3d4e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3d50:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3d52:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3d54:	ldr	r6, [pc, #368]	; (3ec8 <regular_animation()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3d56:	cmp	r3, r1
    3d58:	it	eq
    3d5a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3d5c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3d5e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3d60:	ite	eq
    3d62:	moveq	r5, #1
    3d64:	movne	r5, #0
    3d66:	cmp	r5, #0
    3d68:	beq.n	3d50 <regular_animation()+0x178>
    }

    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1){
    3d6a:	lsrs	r1, r3, #5
    3d6c:	ldr	r5, [pc, #364]	; (3edc <regular_animation()+0x304>)
    3d6e:	orr.w	r1, r1, r2, lsl #27
    3d72:	ldr	r3, [r5, #0]
    3d74:	vmov	s15, r1
    3d78:	vldr	d5, [pc, #324]	; 3ec0 <regular_animation()+0x2e8>
    3d7c:	vcvt.f64.u32	d7, s15
    3d80:	vdiv.f64	d6, d7, d5
    3d84:	vcvt.u32.f64	s12, d6
    3d88:	vmov	r2, s12
    3d8c:	subs	r3, r2, r3
    3d8e:	cmp.w	r3, #900	; 0x384
    3d92:	bhi.w	412a <regular_animation()+0x552>
    3d96:	ldr	r3, [pc, #316]	; (3ed4 <regular_animation()+0x2fc>)
    3d98:	str	r3, [sp, #24]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3d9a:	ldr	r3, [pc, #300]	; (3ec8 <regular_animation()+0x2f0>)
    3d9c:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3d9e:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3da0:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3da2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3da4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3da6:	ldr	r6, [pc, #288]	; (3ec8 <regular_animation()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3da8:	cmp	r3, r1
    3daa:	it	eq
    3dac:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3dae:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3db0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3db2:	ite	eq
    3db4:	moveq	r5, #1
    3db6:	movne	r5, #0
    3db8:	cmp	r5, #0
    3dba:	beq.n	3da2 <regular_animation()+0x1ca>
      }
      newBeam(&synapse_A, rand1, color1, random(3, 30),random(1000,6000));
      
    }

    if (sinceBeam2 > BEAM_FREQUENCY_INTERVAL_2 ){
    3dbc:	lsrs	r1, r3, #5
    3dbe:	ldr	r5, [pc, #288]	; (3ee0 <regular_animation()+0x308>)
    3dc0:	orr.w	r1, r1, r2, lsl #27
    3dc4:	ldr	r3, [r5, #0]
    3dc6:	vmov	s15, r1
    3dca:	vldr	d5, [pc, #244]	; 3ec0 <regular_animation()+0x2e8>
    3dce:	vcvt.f64.u32	d7, s15
    3dd2:	vdiv.f64	d6, d7, d5
    3dd6:	vcvt.u32.f64	s12, d6
    3dda:	vmov	r2, s12
    3dde:	subs	r3, r2, r3
    3de0:	cmp.w	r3, #800	; 0x320
    3de4:	bls.w	4206 <regular_animation()+0x62e>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3de8:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3dea:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3dec:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3dee:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3df0:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3df2:	cmp	r3, r1
    3df4:	it	eq
    3df6:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3df8:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3dfa:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3dfc:	ite	eq
    3dfe:	moveq	r6, #1
    3e00:	movne	r6, #0
    3e02:	cmp	r6, #0
    3e04:	beq.n	3dee <regular_animation()+0x216>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    3e06:	lsrs	r3, r3, #5
      sinceBeam2 = 0;
      int rand2 = random(0, 2);
    3e08:	movs	r0, #0
    3e0a:	movs	r1, #2
    3e0c:	orr.w	r3, r3, r2, lsl #27

	public:
		

Color(){
	RGB_updated = false;
    3e10:	mov	r6, r0
    3e12:	vmov	s15, r3
    3e16:	vldr	d5, [pc, #168]	; 3ec0 <regular_animation()+0x2e8>
    3e1a:	vcvt.f64.u32	d7, s15
    3e1e:	vdiv.f64	d6, d7, d5
    3e22:	vcvt.u32.f64	s12, d6
    3e26:	vstr	s12, [r5]
    3e2a:	bl	cb50 <random(long, long)>
      Color color2;
      if (rand2 == 0){
    3e2e:	mov	r4, r0
    3e30:	cmp	r0, #0
    3e32:	beq.w	420c <regular_animation()+0x634>
        color2 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
      } else {
        color2 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    3e36:	mov.w	r1, #260	; 0x104
    3e3a:	mov	r0, r6
    3e3c:	bl	cb50 <random(long, long)>
    3e40:	movs	r1, #75	; 0x4b
    3e42:	mov	r5, r0
    3e44:	movs	r0, #50	; 0x32
    3e46:	bl	cb50 <random(long, long)>
    3e4a:	movs	r1, #80	; 0x50
    3e4c:	mov	r7, r0
    3e4e:	movs	r0, #55	; 0x37
    3e50:	bl	cb50 <random(long, long)>
    3e54:	add.w	r1, r5, #720	; 0x2d0
    3e58:	ldr	r2, [pc, #136]	; (3ee4 <regular_animation()+0x30c>)
    3e5a:	mov.w	r5, #360	; 0x168
    3e5e:	lsrs	r3, r1, #3
    3e60:	strb.w	r0, [sp, #41]	; 0x29
    3e64:	ldr.w	r8, [pc, #112]	; 3ed8 <regular_animation()+0x300>
    3e68:	movs	r0, #1
    3e6a:	umull	r3, r2, r2, r3
    3e6e:	strb.w	r7, [sp, #40]	; 0x28
    3e72:	lsrs	r2, r2, #2
    3e74:	strb.w	r6, [sp, #44]	; 0x2c
    3e78:	strb.w	r0, [sp, #45]	; 0x2d
    3e7c:	mls	r3, r5, r2, r1
    3e80:	str	r3, [sp, #36]	; 0x24
      }
      newBeam(&synapse_B, rand2, color2, random(3, 30),random(1000,6000));
    3e82:	movs	r1, #30
    3e84:	movs	r0, #3
    3e86:	bl	cb50 <random(long, long)>
    3e8a:	movw	r1, #6000	; 0x1770
    3e8e:	vmov	s16, r0
    3e92:	mov.w	r0, #1000	; 0x3e8
    3e96:	bl	cb50 <random(long, long)>
    3e9a:	add	r2, sp, #48	; 0x30
    3e9c:	str	r0, [sp, #8]
    3e9e:	add	r3, sp, #32
    3ea0:	vcvt.f32.s32	s0, s16
    3ea4:	ldmdb	r2, {r0, r1}
    3ea8:	ldmia	r3, {r2, r3}
    3eaa:	stmia.w	sp, {r0, r1}
    3eae:	adds	r1, r4, #0
    3eb0:	ldr	r0, [pc, #52]	; (3ee8 <regular_animation()+0x310>)
    3eb2:	it	ne
    3eb4:	movne	r1, #1
    3eb6:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    3eba:	b.n	3c82 <regular_animation()+0xaa>
    3ebc:	nop.w
    3ec0:	.word	0xd2f1a9fc
    3ec4:	.word	0x3ff0624d
    3ec8:	.word	0x400d4000
    3ecc:	.word	0x2000c0c0
    3ed0:	.word	0x2000c094
    3ed4:	.word	0x200097f4
    3ed8:	.word	0x20009630
    3edc:	.word	0x2000c08c
    3ee0:	.word	0x2000c090
    3ee4:	.word	0x16c16c17
    3ee8:	.word	0x2000c098
    3eec:	.word	0x20002980
    3ef0:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3ef4:	cmp	r2, r1
    3ef6:	bne.w	3d08 <regular_animation()+0x130>
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3efa:	movs	r1, #8
    3efc:	mov	r0, r4
    3efe:	bl	cb50 <random(long, long)>
    3f02:	ldr	r5, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f04:	movw	r3, #4636	; 0x121c
    3f08:	adds	r1, r0, #1
    3f0a:	ldr.w	r2, [r5, #404]	; 0x194
    3f0e:	add.w	r0, r0, r0, lsl #1
    3f12:	add.w	r1, r1, r1, lsl #1
    3f16:	ldr.w	r6, [r5, #408]	; 0x198
    3f1a:	str	r2, [r7, r3]
    3f1c:	add.w	r3, r5, r0, lsl #3
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3f20:	ldr.w	r2, [r5, #312]	; 0x138
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f24:	lsls	r1, r1, #3
    3f26:	ldr	r0, [r3, #32]
    3f28:	add.w	ip, r7, #4640	; 0x1220
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3f2c:	add.w	lr, r2, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f30:	mov	r2, r5
    3f32:	ldr	r5, [r5, r1]
    3f34:	add	r2, r1
    3f36:	ldr	r1, [r3, #36]	; 0x24
    3f38:	ldr	r2, [r2, #4]
    3f3a:	str	r2, [r7, #4]
    3f3c:	ldr	r2, [r3, #40]	; 0x28
    3f3e:	ldr	r3, [r3, #44]	; 0x2c
    3f40:	str	r2, [r7, #16]
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3f42:	ldr	r2, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f44:	str	r5, [r7, #0]
    3f46:	str	r0, [r7, #8]
    3f48:	str	r1, [r7, #12]
    3f4a:	str	r3, [r7, #20]
    3f4c:	strb	r4, [r7, #24]
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3f4e:	ldr.w	r5, [r2, #388]	; 0x184
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f52:	str.w	r6, [ip]
    3f56:	ldrb.w	sl, [r2, #320]	; 0x140
    3f5a:	ldr.w	r6, [r2, #316]	; 0x13c
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3f5e:	cmp.w	lr, #4
    3f62:	bhi.w	4e5a <regular_animation()+0x1282>
    3f66:	tbh	[pc, lr, lsl #1]
    3f6a:	.short	0x0615
    3f6c:	.word	0x05c00633
    3f70:	.word	0x05540591
    3f74:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3f76:	cmp	r2, r1
    3f78:	bne.w	3c96 <regular_animation()+0xbe>
	void iterate_animation(){
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    3f7c:	movs	r1, #8
    3f7e:	mov	r0, r4
    3f80:	bl	cb50 <random(long, long)>
    3f84:	ldr.w	r1, [r8, #404]	; 0x194
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f88:	add.w	r5, r0, r0, lsl #1
    3f8c:	movw	r2, #4636	; 0x121c
    3f90:	ldr.w	r3, [r8, #408]	; 0x198
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f94:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f96:	add.w	r5, r8, r5, lsl #3
    3f9a:	str	r1, [r7, r2]
    3f9c:	add.w	lr, r7, #4640	; 0x1220
    3fa0:	mov.w	r9, #1
    3fa4:	ldr.w	r6, [r5, #208]	; 0xd0
    3fa8:	ldr.w	r1, [r5, #196]	; 0xc4
    3fac:	ldr.w	r4, [r5, #200]	; 0xc8
    3fb0:	ldr.w	r2, [r5, #204]	; 0xcc
    3fb4:	str	r6, [r7, #16]
    3fb6:	ldr.w	r6, [r5, #212]	; 0xd4
    3fba:	ldr.w	r5, [r5, #192]	; 0xc0
    3fbe:	str	r1, [r7, #4]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3fc0:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fc2:	str	r5, [r7, #0]
    3fc4:	str	r4, [r7, #8]
    3fc6:	str	r2, [r7, #12]
    3fc8:	str	r6, [r7, #20]
    3fca:	strb.w	r9, [r7, #24]
    3fce:	str.w	r3, [lr]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3fd2:	ldr.w	r5, [r8, #392]	; 0x188
    3fd6:	bl	cb50 <random(long, long)>
    3fda:	add.w	r0, r0, r0, lsl #1
    3fde:	add.w	r3, r8, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3fe2:	ldr.w	r2, [r3, #324]	; 0x144
    3fe6:	add.w	r3, r3, #324	; 0x144
    3fea:	subs	r2, #1
    3fec:	ldr	r4, [r3, #4]
    3fee:	ldrb.w	sl, [r3, #8]
    3ff2:	cmp	r2, #4
    3ff4:	bhi.w	4df0 <regular_animation()+0x1218>
    3ff8:	tbh	[pc, r2, lsl #1]
    3ffc:	.word	0x04a00482
    4000:	.word	0x02f10320
    4004:	.short	0x02b4
    4006:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    400a:	cmp	r2, r1
    400c:	bne.w	3cb6 <regular_animation()+0xde>
			bottom_hue_threshold = random(0, 360);
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    4010:	movs	r1, #8
    4012:	mov	r0, r6
    4014:	bl	cb50 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4018:	adds	r2, r0, #1
    401a:	ldr.w	r3, [r8, #404]	; 0x194
    401e:	movw	r1, #4636	; 0x121c
    4022:	add.w	r2, r2, r2, lsl #1
    4026:	ldr.w	r4, [r8, #408]	; 0x198
    402a:	str	r3, [r7, r1]
    402c:	add.w	r0, r0, r0, lsl #1
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4030:	ldr.w	r3, [r8, #312]	; 0x138
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4034:	lsls	r2, r2, #3
    4036:	add.w	sl, r8, r0, lsl #3
    403a:	add.w	ip, r7, #4640	; 0x1220
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    403e:	add.w	lr, r3, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4042:	add.w	r3, r8, r2
    4046:	ldr.w	r2, [r8, r2]
    404a:	ldr.w	r0, [sl, #32]
    404e:	ldr	r5, [r3, #4]
    4050:	ldr.w	r1, [sl, #36]	; 0x24
    4054:	ldr.w	r3, [sl, #44]	; 0x2c
    4058:	str	r2, [r7, #0]
    405a:	ldr.w	r2, [sl, #40]	; 0x28
    405e:	str	r5, [r7, #4]
    4060:	str	r0, [r7, #8]
    4062:	str	r1, [r7, #12]
    4064:	str	r2, [r7, #16]
    4066:	str	r3, [r7, #20]
    4068:	strb	r6, [r7, #24]
			hue_difference = random(80, 300);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    406a:	ldr.w	r5, [r8, #388]	; 0x184
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    406e:	str.w	r4, [ip]
    4072:	ldrb.w	sl, [r8, #320]	; 0x140
    4076:	ldr.w	r4, [r8, #316]	; 0x13c
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    407a:	cmp.w	lr, #4
    407e:	bhi.w	4d84 <regular_animation()+0x11ac>
    4082:	tbh	[pc, lr, lsl #1]
    4086:	.short	0x0205
    4088:	.word	0x01a20223
    408c:	.word	0x01360173
    4090:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    4092:	cmp	r2, r1
    4094:	bne.w	3ce6 <regular_animation()+0x10e>
	void iterate_animation(){
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    4098:	movs	r1, #8
    409a:	mov	r0, r4
    409c:	bl	cb50 <random(long, long)>
    40a0:	ldr	r5, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    40a2:	add.w	r6, r0, r0, lsl #1
    40a6:	movw	r2, #4636	; 0x121c
    40aa:	ldr.w	r1, [r5, #404]	; 0x194
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    40ae:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    40b0:	add.w	r6, r5, r6, lsl #3
    40b4:	ldr.w	r3, [r5, #408]	; 0x198
    40b8:	str	r1, [r7, r2]
    40ba:	mov.w	ip, #1
    40be:	ldr.w	r2, [r6, #208]	; 0xd0
    40c2:	add.w	r8, r7, #4640	; 0x1220
    40c6:	ldr.w	r4, [r6, #204]	; 0xcc
    40ca:	str	r2, [sp, #20]
    40cc:	ldr.w	r2, [r6, #212]	; 0xd4
    40d0:	ldr.w	r1, [r6, #196]	; 0xc4
    40d4:	ldr.w	r5, [r6, #200]	; 0xc8
    40d8:	ldr.w	r6, [r6, #192]	; 0xc0
    40dc:	str	r2, [r7, #20]
    40de:	ldr	r2, [sp, #20]
    40e0:	str	r4, [r7, #12]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    40e2:	ldr	r4, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    40e4:	str	r1, [r7, #4]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    40e6:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    40e8:	str	r6, [r7, #0]
    40ea:	str	r5, [r7, #8]
    40ec:	str	r2, [r7, #16]
    40ee:	strb.w	ip, [r7, #24]
    40f2:	str.w	r3, [r8]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    40f6:	ldr.w	r5, [r4, #392]	; 0x188
    40fa:	bl	cb50 <random(long, long)>
    40fe:	add.w	r0, r0, r0, lsl #1
    4102:	add.w	r3, r4, r0, lsl #2
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4106:	ldr.w	r2, [r3, #324]	; 0x144
    410a:	add.w	r3, r3, #324	; 0x144
    410e:	subs	r2, #1
    4110:	ldr	r6, [r3, #4]
    4112:	ldrb.w	sl, [r3, #8]
    4116:	cmp	r2, #4
    4118:	bhi.w	4d1c <regular_animation()+0x1144>
    411c:	tbh	[pc, r2, lsl #1]
    4120:	.word	0x03a6045a
    4124:	.word	0x03220351
    4128:	.short	0x02e5
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    412a:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    412c:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    412e:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4130:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4132:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4134:	cmp	r3, r1
    4136:	it	eq
    4138:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    413a:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    413c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    413e:	ite	eq
    4140:	moveq	r6, #1
    4142:	movne	r6, #0
    4144:	cmp	r6, #0
    4146:	beq.n	4130 <regular_animation()+0x558>
    4148:	lsrs	r3, r3, #5
      numPulses++;
    }

    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1){
      sinceBeam1 = 0;
      int rand1 = random(0, 2);
    414a:	movs	r0, #0
    414c:	movs	r1, #2
    414e:	orr.w	r3, r3, r2, lsl #27
    4152:	mov	r6, r0
    4154:	vmov	s15, r3
    4158:	vldr	d5, [pc, #796]	; 4478 <regular_animation()+0x8a0>
    415c:	vcvt.f64.u32	d7, s15
    4160:	vdiv.f64	d6, d7, d5
    4164:	vcvt.u32.f64	s12, d6
    4168:	vstr	s12, [r5]
    416c:	bl	cb50 <random(long, long)>
      Color color1;
      if (rand1 == 0){
    4170:	mov	r4, r0
    4172:	cmp	r0, #0
    4174:	bne.w	42a4 <regular_animation()+0x6cc>
        color1 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    4178:	ldr	r3, [pc, #772]	; (4480 <regular_animation()+0x8a8>)
    417a:	mov	r1, r3
    417c:	str	r3, [sp, #24]
    417e:	ldr.w	r3, [r3, #432]	; 0x1b0
    4182:	ldr.w	r1, [r1, #436]	; 0x1b4
    4186:	mov	r0, r3
    4188:	add	r1, r3
    418a:	bl	cb50 <random(long, long)>
    418e:	movs	r1, #75	; 0x4b
    4190:	mov	r5, r0
    4192:	movs	r0, #50	; 0x32
    4194:	bl	cb50 <random(long, long)>
    4198:	movs	r1, #80	; 0x50
    419a:	mov	r6, r0
    419c:	movs	r0, #55	; 0x37
    419e:	bl	cb50 <random(long, long)>
    41a2:	add.w	r1, r5, #720	; 0x2d0
    41a6:	ldr	r2, [pc, #732]	; (4484 <regular_animation()+0x8ac>)
    41a8:	mov.w	r5, #360	; 0x168
    41ac:	lsrs	r3, r1, #3
    41ae:	strb.w	r0, [sp, #41]	; 0x29
    41b2:	movs	r0, #1
    41b4:	strb.w	r6, [sp, #40]	; 0x28
    41b8:	umull	r3, r2, r2, r3
    41bc:	strb.w	r4, [sp, #44]	; 0x2c
    41c0:	lsrs	r2, r2, #2
    41c2:	strb.w	r0, [sp, #45]	; 0x2d
    41c6:	mls	r3, r5, r2, r1
    41ca:	str	r3, [sp, #36]	; 0x24
      } else {
        color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
      }
      newBeam(&synapse_A, rand1, color1, random(3, 30),random(1000,6000));
    41cc:	movs	r1, #30
    41ce:	movs	r0, #3
    41d0:	bl	cb50 <random(long, long)>
    41d4:	movw	r1, #6000	; 0x1770
    41d8:	vmov	s16, r0
    41dc:	mov.w	r0, #1000	; 0x3e8
    41e0:	bl	cb50 <random(long, long)>
    41e4:	add	r2, sp, #48	; 0x30
    41e6:	str	r0, [sp, #8]
    41e8:	add	r3, sp, #32
    41ea:	vcvt.f32.s32	s0, s16
    41ee:	ldmdb	r2, {r0, r1}
    41f2:	ldmia	r3, {r2, r3}
    41f4:	stmia.w	sp, {r0, r1}
    41f8:	adds	r1, r4, #0
    41fa:	ldr	r0, [pc, #652]	; (4488 <regular_animation()+0x8b0>)
    41fc:	it	ne
    41fe:	movne	r1, #1
    4200:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    4204:	b.n	3d9a <regular_animation()+0x1c2>
    4206:	ldr.w	r8, [pc, #644]	; 448c <regular_animation()+0x8b4>
    420a:	b.n	3c82 <regular_animation()+0xaa>
    if (sinceBeam2 > BEAM_FREQUENCY_INTERVAL_2 ){
      sinceBeam2 = 0;
      int rand2 = random(0, 2);
      Color color2;
      if (rand2 == 0){
        color2 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    420c:	ldr.w	r8, [pc, #636]	; 448c <regular_animation()+0x8b4>
    4210:	ldr.w	r3, [r8, #432]	; 0x1b0
    4214:	ldr.w	r1, [r8, #436]	; 0x1b4
    4218:	mov	r0, r3
    421a:	add	r1, r3
    421c:	bl	cb50 <random(long, long)>
    4220:	movs	r1, #75	; 0x4b
    4222:	mov	r5, r0
    4224:	movs	r0, #50	; 0x32
    4226:	bl	cb50 <random(long, long)>
    422a:	movs	r1, #80	; 0x50
    422c:	mov	r6, r0
    422e:	movs	r0, #55	; 0x37
    4230:	bl	cb50 <random(long, long)>
    4234:	add.w	r1, r5, #720	; 0x2d0
    4238:	ldr	r2, [pc, #584]	; (4484 <regular_animation()+0x8ac>)
    423a:	mov.w	r5, #360	; 0x168
    423e:	lsrs	r3, r1, #3
    4240:	strb.w	r0, [sp, #41]	; 0x29
    4244:	movs	r0, #1
    4246:	strb.w	r6, [sp, #40]	; 0x28
    424a:	umull	r3, r2, r2, r3
    424e:	strb.w	r4, [sp, #44]	; 0x2c
    4252:	lsrs	r2, r2, #2
    4254:	strb.w	r0, [sp, #45]	; 0x2d
    4258:	mls	r3, r5, r2, r1
    425c:	str	r3, [sp, #36]	; 0x24
    425e:	b.n	3e82 <regular_animation()+0x2aa>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4260:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4262:	mov	r4, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4264:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4266:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4268:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    426a:	cmp	r3, r1
    426c:	it	eq
    426e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4270:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4272:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4274:	ite	eq
    4276:	moveq	r5, #1
    4278:	movne	r5, #0
    427a:	cmp	r5, #0
    427c:	beq.n	4266 <regular_animation()+0x68e>
    427e:	lsrs	r1, r3, #5

void regular_animation(){
  if(sinceLastPulses > 14000  && sinceAutomatonInit > 2000 ){
    if (numPulses == 20){
      sinceLastPulses = 0;
      numPulses = 0;
    4280:	movs	r3, #0
    4282:	orr.w	r1, r1, r2, lsl #27
    4286:	str.w	r3, [lr]
    428a:	vmov	s15, r1
    428e:	vldr	d5, [pc, #488]	; 4478 <regular_animation()+0x8a0>
    4292:	vcvt.f64.u32	d7, s15
    4296:	vdiv.f64	d6, d7, d5
    429a:	vcvt.u32.f64	s12, d6
    429e:	vstr	s12, [r7]
    42a2:	b.n	3d48 <regular_animation()+0x170>
      int rand1 = random(0, 2);
      Color color1;
      if (rand1 == 0){
        color1 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
      } else {
        color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    42a4:	mov.w	r1, #260	; 0x104
    42a8:	mov	r0, r6
    42aa:	bl	cb50 <random(long, long)>
    42ae:	movs	r1, #75	; 0x4b
    42b0:	mov	r5, r0
    42b2:	movs	r0, #50	; 0x32
    42b4:	bl	cb50 <random(long, long)>
    42b8:	movs	r1, #80	; 0x50
    42ba:	mov	r7, r0
    42bc:	movs	r0, #55	; 0x37
    42be:	bl	cb50 <random(long, long)>
    42c2:	add.w	r1, r5, #720	; 0x2d0
    42c6:	ldr	r2, [pc, #444]	; (4484 <regular_animation()+0x8ac>)
    42c8:	mov.w	r5, #360	; 0x168
    42cc:	lsrs	r3, r1, #3
    42ce:	strb.w	r0, [sp, #41]	; 0x29
    42d2:	movs	r0, #1
    42d4:	strb.w	r7, [sp, #40]	; 0x28
    42d8:	umull	r3, r2, r2, r3
    42dc:	ldr	r3, [pc, #416]	; (4480 <regular_animation()+0x8a8>)
    42de:	strb.w	r6, [sp, #44]	; 0x2c
    42e2:	lsrs	r2, r2, #2
    42e4:	str	r3, [sp, #24]
    42e6:	strb.w	r0, [sp, #45]	; 0x2d
    42ea:	mls	r3, r5, r2, r1
    42ee:	str	r3, [sp, #36]	; 0x24
    42f0:	b.n	41cc <regular_animation()+0x5f4>
    42f2:	add.w	r6, r5, #28
    42f6:	mov	r4, r5
    42f8:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    42fc:	cmp.w	sl, #0
    4300:	bne.n	431e <regular_animation()+0x746>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4302:	ldr	r3, [r5, #0]
    4304:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4306:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    430a:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    430c:	str	r3, [r4, #120]	; 0x78
    430e:	adds	r4, #96	; 0x60
    4310:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4312:	cmp	r4, r7
    4314:	beq.w	4544 <regular_animation()+0x96c>
    if (rand){
    4318:	cmp.w	sl, #0
    431c:	beq.n	4302 <regular_animation()+0x72a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    431e:	ldr	r3, [r5, #20]
    4320:	ldr	r2, [r5, #16]
    4322:	subs	r0, r3, r2
    4324:	adds	r0, #2
    4326:	bl	cb48 <random(unsigned long)>
    432a:	ldr	r1, [r5, #16]
    432c:	subs	r2, r1, #1
    432e:	add	r0, r2
    4330:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4332:	ldr	r3, [r5, #20]
    4334:	subs	r0, r3, r1
    4336:	adds	r0, #2
    4338:	bl	cb48 <random(unsigned long)>
    433c:	ldr	r1, [r5, #16]
    433e:	subs	r2, r1, #1
    4340:	add	r0, r2
    4342:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4346:	ldr	r3, [r5, #20]
    4348:	subs	r0, r3, r1
    434a:	adds	r0, #2
    434c:	bl	cb48 <random(unsigned long)>
    4350:	ldr	r1, [r5, #16]
    4352:	subs	r2, r1, #1
    4354:	add	r0, r2
    4356:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4358:	ldr	r3, [r5, #20]
    435a:	subs	r0, r3, r1
    435c:	adds	r0, #2
    435e:	bl	cb48 <random(unsigned long)>
    4362:	ldr	r3, [r5, #16]
    4364:	subs	r3, #1
    4366:	add	r0, r3
    4368:	str	r0, [r4, #120]	; 0x78
    436a:	b.n	430e <regular_animation()+0x736>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    436c:	cmp	r4, #0
    436e:	ble.w	4544 <regular_animation()+0x96c>
    4372:	movs	r7, #0
    4374:	b.n	438a <regular_animation()+0x7b2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4376:	add.w	r3, r6, r3, lsl #3
    437a:	ldr	r2, [r5, #0]
    437c:	add.w	r3, r5, r3, lsl #2
    4380:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4382:	adds	r7, #1
    4384:	cmp	r7, r4
    4386:	beq.w	4544 <regular_animation()+0x96c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    438a:	movs	r0, #8
    438c:	bl	cb48 <random(unsigned long)>
    4390:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4394:	movs	r0, #8
    4396:	bl	cb48 <random(unsigned long)>
    439a:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    439e:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    43a2:	cmp.w	sl, #0
    43a6:	beq.n	4376 <regular_animation()+0x79e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    43a8:	ldr	r3, [r5, #20]
    43aa:	add.w	r9, r9, r9, lsl #1
    43ae:	ldr	r2, [r5, #16]
    43b0:	add.w	r6, r6, r9, lsl #3
    43b4:	subs	r0, r3, r2
    43b6:	add.w	r6, r5, r6, lsl #2
    43ba:	adds	r0, #2
    43bc:	bl	cb48 <random(unsigned long)>
    43c0:	ldr	r3, [r5, #16]
    43c2:	subs	r3, #1
    43c4:	add	r0, r3
    43c6:	str	r0, [r6, #28]
    43c8:	b.n	4382 <regular_animation()+0x7aa>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    43ca:	movs	r0, #8
    43cc:	mov	r7, r5
    43ce:	bl	cb48 <random(unsigned long)>
    43d2:	mov	r6, r0
    43d4:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    43d8:	movs	r0, #8
    43da:	adds	r6, #8
    43dc:	str	r3, [sp, #20]
    43de:	bl	cb48 <random(unsigned long)>
    43e2:	vmov	s15, r4
    43e6:	add.w	r3, r0, #8
    43ea:	negs	r2, r6
    43ec:	rsb	r9, r0, #16
    43f0:	vcvt.f64.s32	d9, s15
    43f4:	negs	r3, r3
    43f6:	mov	fp, r2
    43f8:	str	r3, [sp, #28]
    43fa:	vmov	s15, fp
    43fe:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4400:	mov	r6, r7
    4402:	vcvt.f64.s32	d8, s15
    4406:	vmul.f64	d8, d8, d8
    440a:	b.n	4418 <regular_animation()+0x840>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    440c:	ldr	r3, [r5, #0]
    440e:	str	r3, [r6, #28]
    4410:	adds	r4, #1
    4412:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4414:	cmp	r4, r9
    4416:	beq.n	4468 <regular_animation()+0x890>
      double xx = x-midPoint_y;
    4418:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    441c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4420:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4424:	vfma.f64	d0, d7, d7
    4428:	vsqrt.f64	d7, d0
    442c:	vcmp.f64	d7, d7
    4430:	vmrs	APSR_nzcv, fpscr
    4434:	bne.w	4ecc <regular_animation()+0x12f4>
    4438:	vcmpe.f64	d7, d9
    443c:	vmrs	APSR_nzcv, fpscr
    4440:	bhi.n	4410 <regular_animation()+0x838>
        if (rand){
    4442:	cmp.w	sl, #0
    4446:	beq.n	440c <regular_animation()+0x834>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4448:	ldr	r3, [r5, #20]
    444a:	adds	r4, #1
    444c:	ldr	r0, [r5, #16]
    444e:	adds	r6, #96	; 0x60
    4450:	subs	r0, r3, r0
    4452:	adds	r0, #2
    4454:	bl	cb48 <random(unsigned long)>
    4458:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    445a:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    445c:	add.w	r3, r3, #4294967295
    4460:	add	r0, r3
    4462:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4466:	bne.n	4418 <regular_animation()+0x840>
    4468:	mov	r3, fp
    446a:	adds	r7, #4
    446c:	adds	r3, #1
    446e:	mov	fp, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4470:	ldr	r3, [sp, #20]
    4472:	cmp	r7, r3
    4474:	bne.n	43fa <regular_animation()+0x822>
    4476:	b.n	4544 <regular_animation()+0x96c>
    4478:	.word	0xd2f1a9fc
    447c:	.word	0x3ff0624d
    4480:	.word	0x200097f4
    4484:	.word	0x16c16c17
    4488:	.word	0x2000c0ac
    448c:	.word	0x20009630
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4490:	movs	r0, #8
    4492:	bl	cb48 <random(unsigned long)>
    4496:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    449a:	movs	r0, #8
    449c:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    44a0:	cmp	r4, #0
    44a2:	ble.n	4544 <regular_animation()+0x96c>
    44a4:	add.w	r3, r0, #15
    44a8:	add.w	r6, r6, r6, lsl #1
    44ac:	movs	r7, #0
    44ae:	add.w	r6, r3, r6, lsl #3
    44b2:	add.w	r6, r5, r6, lsl #2
      if (rand){
    44b6:	cmp.w	sl, #0
    44ba:	bne.w	4d04 <regular_animation()+0x112c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    44be:	ldr	r3, [r5, #0]
    44c0:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    44c2:	adds	r7, #1
    44c4:	adds	r6, #4
    44c6:	cmp	r7, r4
    44c8:	bne.n	44b6 <regular_animation()+0x8de>
    44ca:	b.n	4544 <regular_animation()+0x96c>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    44cc:	movs	r0, #8
    44ce:	bl	cb48 <random(unsigned long)>
    44d2:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    44d6:	movs	r0, #8
    44d8:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    44dc:	cmp	r4, #0
    44de:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    44e0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    44e4:	it	lt
    44e6:	addlt	r3, r4, #1
    44e8:	cmp	r4, #0
    44ea:	mov.w	r3, r3, asr #1
    44ee:	it	lt
    44f0:	addlt	r4, #1
    44f2:	negs	r3, r3
    44f4:	asrs	r4, r4, #1
    44f6:	adds	r6, r0, r3
    44f8:	adds	r2, r0, r4
    44fa:	cmp	r6, r2
    44fc:	str	r2, [sp, #28]
    44fe:	bge.n	4544 <regular_animation()+0x96c>
    4500:	adds	r3, r7, r3
    4502:	add	r4, r7
    4504:	str	r3, [sp, #20]
    4506:	add.w	r3, r3, r3, lsl #1
    450a:	add.w	r3, r6, r3, lsl #3
    450e:	add.w	r3, r5, r3, lsl #2
    4512:	mov	fp, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4514:	ldr	r3, [sp, #20]
    4516:	cmp	r4, r3
    4518:	ble.n	4536 <regular_animation()+0x95e>
    451a:	mov	r9, fp
    451c:	ldr	r7, [sp, #20]
        if (rand){
    451e:	cmp.w	sl, #0
    4522:	bne.w	4caa <regular_animation()+0x10d2>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4526:	ldr	r3, [r5, #0]
    4528:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    452c:	adds	r7, #1
    452e:	add.w	r9, r9, #96	; 0x60
    4532:	cmp	r7, r4
    4534:	bne.n	451e <regular_animation()+0x946>
    4536:	mov	r3, fp

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4538:	adds	r6, #1
    453a:	adds	r3, #4
    453c:	mov	fp, r3
    453e:	ldr	r3, [sp, #28]
    4540:	cmp	r6, r3
    4542:	bne.n	4514 <regular_animation()+0x93c>
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
			bottom_hue_threshold = random(0, 360);
    4544:	mov.w	r1, #360	; 0x168
    4548:	movs	r0, #0
    454a:	bl	cb50 <random(long, long)>
			hue_difference = random(80, 300);
    454e:	mov.w	r1, #300	; 0x12c
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
			bottom_hue_threshold = random(0, 360);
    4552:	str.w	r0, [r8, #432]	; 0x1b0
			hue_difference = random(80, 300);
    4556:	movs	r0, #80	; 0x50
    4558:	bl	cb50 <random(long, long)>
    455c:	str.w	r0, [r8, #436]	; 0x1b4
    4560:	b.w	3cca <regular_animation()+0xf2>
    4564:	add.w	r6, r5, #28
    4568:	mov	r4, r5
    456a:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    456e:	cmp.w	sl, #0
    4572:	bne.n	4590 <regular_animation()+0x9b8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4574:	ldr	r3, [r5, #0]
    4576:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4578:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    457c:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    457e:	str	r3, [r4, #120]	; 0x78
    4580:	adds	r4, #96	; 0x60
    4582:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4584:	cmp	r4, r7
    4586:	beq.w	49b4 <regular_animation()+0xddc>
    if (rand){
    458a:	cmp.w	sl, #0
    458e:	beq.n	4574 <regular_animation()+0x99c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4590:	ldr	r3, [r5, #20]
    4592:	ldr	r2, [r5, #16]
    4594:	subs	r0, r3, r2
    4596:	adds	r0, #2
    4598:	bl	cb48 <random(unsigned long)>
    459c:	ldr	r1, [r5, #16]
    459e:	subs	r2, r1, #1
    45a0:	add	r0, r2
    45a2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    45a4:	ldr	r3, [r5, #20]
    45a6:	subs	r0, r3, r1
    45a8:	adds	r0, #2
    45aa:	bl	cb48 <random(unsigned long)>
    45ae:	ldr	r1, [r5, #16]
    45b0:	subs	r2, r1, #1
    45b2:	add	r0, r2
    45b4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    45b8:	ldr	r3, [r5, #20]
    45ba:	subs	r0, r3, r1
    45bc:	adds	r0, #2
    45be:	bl	cb48 <random(unsigned long)>
    45c2:	ldr	r1, [r5, #16]
    45c4:	subs	r2, r1, #1
    45c6:	add	r0, r2
    45c8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    45ca:	ldr	r3, [r5, #20]
    45cc:	subs	r0, r3, r1
    45ce:	adds	r0, #2
    45d0:	bl	cb48 <random(unsigned long)>
    45d4:	ldr	r3, [r5, #16]
    45d6:	subs	r3, #1
    45d8:	add	r0, r3
    45da:	str	r0, [r4, #120]	; 0x78
    45dc:	b.n	4580 <regular_animation()+0x9a8>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    45de:	cmp	r4, #0
    45e0:	ble.w	49b4 <regular_animation()+0xddc>
    45e4:	movs	r7, #0
    45e6:	b.n	45fc <regular_animation()+0xa24>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    45e8:	add.w	r3, r6, r3, lsl #3
    45ec:	ldr	r2, [r5, #0]
    45ee:	add.w	r3, r5, r3, lsl #2
    45f2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    45f4:	adds	r7, #1
    45f6:	cmp	r7, r4
    45f8:	beq.w	49b4 <regular_animation()+0xddc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    45fc:	movs	r0, #8
    45fe:	bl	cb48 <random(unsigned long)>
    4602:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4606:	movs	r0, #8
    4608:	bl	cb48 <random(unsigned long)>
    460c:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4610:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4614:	cmp.w	sl, #0
    4618:	beq.n	45e8 <regular_animation()+0xa10>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    461a:	ldr	r3, [r5, #20]
    461c:	add.w	r9, r9, r9, lsl #1
    4620:	ldr	r2, [r5, #16]
    4622:	add.w	r6, r6, r9, lsl #3
    4626:	subs	r0, r3, r2
    4628:	add.w	r6, r5, r6, lsl #2
    462c:	adds	r0, #2
    462e:	bl	cb48 <random(unsigned long)>
    4632:	ldr	r3, [r5, #16]
    4634:	subs	r3, #1
    4636:	add	r0, r3
    4638:	str	r0, [r6, #28]
    463a:	b.n	45f4 <regular_animation()+0xa1c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    463c:	movs	r0, #8
    463e:	mov	r7, r5
    4640:	bl	cb48 <random(unsigned long)>
    4644:	mov	r6, r0
    4646:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    464a:	movs	r0, #8
    464c:	adds	r6, #8
    464e:	str	r3, [sp, #20]
    4650:	bl	cb48 <random(unsigned long)>
    4654:	vmov	s15, r4
    4658:	add.w	r3, r0, #8
    465c:	negs	r2, r6
    465e:	rsb	r9, r0, #16
    4662:	vcvt.f64.s32	d9, s15
    4666:	negs	r3, r3
    4668:	mov	fp, r2
    466a:	str	r3, [sp, #28]
    466c:	vmov	s15, fp
    4670:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4672:	mov	r6, r7
    4674:	vcvt.f64.s32	d8, s15
    4678:	vmul.f64	d8, d8, d8
    467c:	b.n	468a <regular_animation()+0xab2>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    467e:	ldr	r3, [r5, #0]
    4680:	str	r3, [r6, #28]
    4682:	adds	r4, #1
    4684:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4686:	cmp	r4, r9
    4688:	beq.n	46da <regular_animation()+0xb02>
      double xx = x-midPoint_y;
    468a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    468e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4692:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4696:	vfma.f64	d0, d7, d7
    469a:	vsqrt.f64	d7, d0
    469e:	vcmp.f64	d7, d7
    46a2:	vmrs	APSR_nzcv, fpscr
    46a6:	bne.w	4ed8 <regular_animation()+0x1300>
    46aa:	vcmpe.f64	d7, d9
    46ae:	vmrs	APSR_nzcv, fpscr
    46b2:	bhi.n	4682 <regular_animation()+0xaaa>
        if (rand){
    46b4:	cmp.w	sl, #0
    46b8:	beq.n	467e <regular_animation()+0xaa6>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    46ba:	ldr	r3, [r5, #20]
    46bc:	adds	r4, #1
    46be:	ldr	r0, [r5, #16]
    46c0:	adds	r6, #96	; 0x60
    46c2:	subs	r0, r3, r0
    46c4:	adds	r0, #2
    46c6:	bl	cb48 <random(unsigned long)>
    46ca:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    46cc:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    46ce:	add.w	r3, r3, #4294967295
    46d2:	add	r0, r3
    46d4:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    46d8:	bne.n	468a <regular_animation()+0xab2>
    46da:	mov	r3, fp
    46dc:	adds	r7, #4
    46de:	adds	r3, #1
    46e0:	mov	fp, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    46e2:	ldr	r3, [sp, #20]
    46e4:	cmp	r7, r3
    46e6:	bne.n	466c <regular_animation()+0xa94>
    46e8:	b.n	49b4 <regular_animation()+0xddc>
    46ea:	add.w	r6, r5, #28
    46ee:	mov	r4, r5
    46f0:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    46f4:	cmp.w	sl, #0
    46f8:	bne.n	4716 <regular_animation()+0xb3e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    46fa:	ldr	r3, [r5, #0]
    46fc:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    46fe:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4702:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4704:	str	r3, [r4, #120]	; 0x78
    4706:	adds	r4, #96	; 0x60
    4708:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    470a:	cmp	r4, r7
    470c:	beq.w	48de <regular_animation()+0xd06>
    if (rand){
    4710:	cmp.w	sl, #0
    4714:	beq.n	46fa <regular_animation()+0xb22>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4716:	ldr	r3, [r5, #20]
    4718:	ldr	r2, [r5, #16]
    471a:	subs	r0, r3, r2
    471c:	adds	r0, #2
    471e:	bl	cb48 <random(unsigned long)>
    4722:	ldr	r1, [r5, #16]
    4724:	subs	r2, r1, #1
    4726:	add	r0, r2
    4728:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    472a:	ldr	r3, [r5, #20]
    472c:	subs	r0, r3, r1
    472e:	adds	r0, #2
    4730:	bl	cb48 <random(unsigned long)>
    4734:	ldr	r1, [r5, #16]
    4736:	subs	r2, r1, #1
    4738:	add	r0, r2
    473a:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    473e:	ldr	r3, [r5, #20]
    4740:	subs	r0, r3, r1
    4742:	adds	r0, #2
    4744:	bl	cb48 <random(unsigned long)>
    4748:	ldr	r1, [r5, #16]
    474a:	subs	r2, r1, #1
    474c:	add	r0, r2
    474e:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4750:	ldr	r3, [r5, #20]
    4752:	subs	r0, r3, r1
    4754:	adds	r0, #2
    4756:	bl	cb48 <random(unsigned long)>
    475a:	ldr	r3, [r5, #16]
    475c:	subs	r3, #1
    475e:	add	r0, r3
    4760:	str	r0, [r4, #120]	; 0x78
    4762:	b.n	4706 <regular_animation()+0xb2e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4764:	cmp	r6, #0
    4766:	ble.w	48de <regular_animation()+0xd06>
    476a:	movs	r7, #0
    476c:	b.n	4782 <regular_animation()+0xbaa>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    476e:	add.w	r3, r4, r3, lsl #3
    4772:	ldr	r2, [r5, #0]
    4774:	add.w	r3, r5, r3, lsl #2
    4778:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    477a:	adds	r7, #1
    477c:	cmp	r7, r6
    477e:	beq.w	48de <regular_animation()+0xd06>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4782:	movs	r0, #8
    4784:	bl	cb48 <random(unsigned long)>
    4788:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    478c:	movs	r0, #8
    478e:	bl	cb48 <random(unsigned long)>
    4792:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4796:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    479a:	cmp.w	sl, #0
    479e:	beq.n	476e <regular_animation()+0xb96>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    47a0:	ldr	r3, [r5, #20]
    47a2:	add.w	r8, r8, r8, lsl #1
    47a6:	ldr	r2, [r5, #16]
    47a8:	add.w	r4, r4, r8, lsl #3
    47ac:	subs	r0, r3, r2
    47ae:	add.w	r4, r5, r4, lsl #2
    47b2:	adds	r0, #2
    47b4:	bl	cb48 <random(unsigned long)>
    47b8:	ldr	r3, [r5, #16]
    47ba:	subs	r3, #1
    47bc:	add	r0, r3
    47be:	str	r0, [r4, #28]
    47c0:	b.n	477a <regular_animation()+0xba2>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    47c2:	movs	r0, #8
    47c4:	mov	r7, r5
    47c6:	bl	cb48 <random(unsigned long)>
    47ca:	add.w	r3, r5, #96	; 0x60
    47ce:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    47d0:	movs	r0, #8
    47d2:	mov	fp, r3
    47d4:	bl	cb48 <random(unsigned long)>
    47d8:	vmov	s15, r6
    47dc:	adds	r4, #8
    47de:	add.w	r3, r0, #8
    47e2:	rsb	r9, r0, #16
    47e6:	vcvt.f64.s32	d9, s15
    47ea:	rsb	r8, r4, #0
    47ee:	negs	r3, r3
    47f0:	str	r3, [sp, #20]
    47f2:	vmov	s15, r8
    47f6:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    47f8:	mov	r6, r7
    47fa:	vcvt.f64.s32	d8, s15
    47fe:	vmul.f64	d8, d8, d8
    4802:	b.n	4810 <regular_animation()+0xc38>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4804:	ldr	r3, [r5, #0]
    4806:	str	r3, [r6, #28]
    4808:	adds	r4, #1
    480a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    480c:	cmp	r4, r9
    480e:	beq.n	4860 <regular_animation()+0xc88>
      double xx = x-midPoint_y;
    4810:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4814:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4818:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    481c:	vfma.f64	d0, d7, d7
    4820:	vsqrt.f64	d7, d0
    4824:	vcmp.f64	d7, d7
    4828:	vmrs	APSR_nzcv, fpscr
    482c:	bne.w	4ee4 <regular_animation()+0x130c>
    4830:	vcmpe.f64	d7, d9
    4834:	vmrs	APSR_nzcv, fpscr
    4838:	bhi.n	4808 <regular_animation()+0xc30>
        if (rand){
    483a:	cmp.w	sl, #0
    483e:	beq.n	4804 <regular_animation()+0xc2c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4840:	ldr	r3, [r5, #20]
    4842:	adds	r4, #1
    4844:	ldr	r0, [r5, #16]
    4846:	adds	r6, #96	; 0x60
    4848:	subs	r0, r3, r0
    484a:	adds	r0, #2
    484c:	bl	cb48 <random(unsigned long)>
    4850:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4852:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4854:	add.w	r3, r3, #4294967295
    4858:	add	r0, r3
    485a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    485e:	bne.n	4810 <regular_animation()+0xc38>
    4860:	adds	r7, #4
    4862:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4866:	cmp	r7, fp
    4868:	bne.n	47f2 <regular_animation()+0xc1a>
    486a:	b.n	48de <regular_animation()+0xd06>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    486c:	movs	r0, #8
    486e:	bl	cb48 <random(unsigned long)>
    4872:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4876:	movs	r0, #8
    4878:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    487c:	cmp	r6, #0
    487e:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4880:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4884:	it	lt
    4886:	addlt	r3, r6, #1
    4888:	cmp	r6, #0
    488a:	mov.w	r3, r3, asr #1
    488e:	it	lt
    4890:	addlt	r6, #1
    4892:	negs	r3, r3
    4894:	asrs	r6, r6, #1
    4896:	adds	r7, r0, r3
    4898:	adds	r2, r0, r6
    489a:	cmp	r7, r2
    489c:	str	r2, [sp, #20]
    489e:	bge.n	48de <regular_animation()+0xd06>
    48a0:	adds	r3, r4, r3
    48a2:	add	r4, r6
    48a4:	add.w	r6, r3, r3, lsl #1
    48a8:	mov	fp, r3
    48aa:	add.w	r6, r7, r6, lsl #3
    48ae:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    48b2:	cmp	fp, r4
    48b4:	bge.n	48d4 <regular_animation()+0xcfc>
    48b6:	mov	r9, r6
    48b8:	mov	r8, fp
        if (rand){
    48ba:	cmp.w	sl, #0
    48be:	bne.w	4c7a <regular_animation()+0x10a2>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    48c2:	ldr	r3, [r5, #0]
    48c4:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    48c8:	add.w	r8, r8, #1
    48cc:	add.w	r9, r9, #96	; 0x60
    48d0:	cmp	r8, r4
    48d2:	bne.n	48ba <regular_animation()+0xce2>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    48d4:	adds	r7, #1
    48d6:	ldr	r3, [sp, #20]
    48d8:	adds	r6, #4
    48da:	cmp	r7, r3
    48dc:	bne.n	48b2 <regular_animation()+0xcda>
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
    48de:	mov.w	r1, #360	; 0x168
    48e2:	movs	r0, #0
    48e4:	bl	cb50 <random(long, long)>
    48e8:	ldr	r4, [sp, #24]
			hue_difference = random(80, 300);
    48ea:	mov.w	r1, #300	; 0x12c
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
    48ee:	str.w	r0, [r4, #432]	; 0x1b0
			hue_difference = random(80, 300);
    48f2:	movs	r0, #80	; 0x50
    48f4:	bl	cb50 <random(long, long)>
    48f8:	str.w	r0, [r4, #436]	; 0x1b4
    48fc:	b.w	3cfa <regular_animation()+0x122>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4900:	movs	r0, #8
    4902:	bl	cb48 <random(unsigned long)>
    4906:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    490a:	movs	r0, #8
    490c:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4910:	cmp	r4, #0
    4912:	ble.n	49b4 <regular_animation()+0xddc>
    4914:	add.w	r3, r0, #15
    4918:	add.w	r6, r6, r6, lsl #1
    491c:	movs	r7, #0
    491e:	add.w	r6, r3, r6, lsl #3
    4922:	add.w	r6, r5, r6, lsl #2
      if (rand){
    4926:	cmp.w	sl, #0
    492a:	bne.w	4cc2 <regular_animation()+0x10ea>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    492e:	ldr	r3, [r5, #0]
    4930:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4932:	adds	r7, #1
    4934:	adds	r6, #4
    4936:	cmp	r7, r4
    4938:	bne.n	4926 <regular_animation()+0xd4e>
    493a:	b.n	49b4 <regular_animation()+0xddc>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    493c:	movs	r0, #8
    493e:	bl	cb48 <random(unsigned long)>
    4942:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4946:	movs	r0, #8
    4948:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    494c:	cmp	r4, #0
    494e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4950:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4954:	it	lt
    4956:	addlt	r3, r4, #1
    4958:	cmp	r4, #0
    495a:	mov.w	r3, r3, asr #1
    495e:	it	lt
    4960:	addlt	r4, #1
    4962:	negs	r3, r3
    4964:	asrs	r4, r4, #1
    4966:	adds	r6, r0, r3
    4968:	adds	r2, r0, r4
    496a:	cmp	r6, r2
    496c:	str	r2, [sp, #28]
    496e:	bge.n	49b4 <regular_animation()+0xddc>
    4970:	adds	r3, r7, r3
    4972:	add	r4, r7
    4974:	str	r3, [sp, #20]
    4976:	add.w	r3, r3, r3, lsl #1
    497a:	add.w	r3, r6, r3, lsl #3
    497e:	add.w	r3, r5, r3, lsl #2
    4982:	mov	fp, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4984:	ldr	r3, [sp, #20]
    4986:	cmp	r4, r3
    4988:	ble.n	49a6 <regular_animation()+0xdce>
    498a:	mov	r9, fp
    498c:	ldr	r7, [sp, #20]
        if (rand){
    498e:	cmp.w	sl, #0
    4992:	bne.w	4c92 <regular_animation()+0x10ba>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4996:	ldr	r3, [r5, #0]
    4998:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    499c:	adds	r7, #1
    499e:	add.w	r9, r9, #96	; 0x60
    49a2:	cmp	r7, r4
    49a4:	bne.n	498e <regular_animation()+0xdb6>
    49a6:	mov	r3, fp

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    49a8:	adds	r6, #1
    49aa:	adds	r3, #4
    49ac:	mov	fp, r3
    49ae:	ldr	r3, [sp, #28]
    49b0:	cmp	r6, r3
    49b2:	bne.n	4984 <regular_animation()+0xdac>
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
    49b4:	mov.w	r1, #360	; 0x168
    49b8:	movs	r0, #0
    49ba:	bl	cb50 <random(long, long)>
			hue_difference = random(80, 300);
    49be:	mov.w	r1, #300	; 0x12c
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			bottom_hue_threshold = random(0, 360);
    49c2:	str.w	r0, [r8, #432]	; 0x1b0
			hue_difference = random(80, 300);
    49c6:	movs	r0, #80	; 0x50
    49c8:	bl	cb50 <random(long, long)>
    49cc:	str.w	r0, [r8, #436]	; 0x1b4
    49d0:	b.w	3caa <regular_animation()+0xd2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49d4:	movs	r0, #8
    49d6:	bl	cb48 <random(unsigned long)>
    49da:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49de:	movs	r0, #8
    49e0:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    49e4:	cmp	r6, #0
    49e6:	ble.w	48de <regular_animation()+0xd06>
    49ea:	add.w	r3, r0, #15
    49ee:	add.w	r4, r4, r4, lsl #1
    49f2:	movs	r7, #0
    49f4:	add.w	r4, r3, r4, lsl #3
    49f8:	add.w	r4, r5, r4, lsl #2
      if (rand){
    49fc:	cmp.w	sl, #0
    4a00:	bne.w	4cee <regular_animation()+0x1116>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4a04:	ldr	r3, [r5, #0]
    4a06:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4a08:	adds	r7, #1
    4a0a:	adds	r4, #4
    4a0c:	cmp	r7, r6
    4a0e:	bne.n	49fc <regular_animation()+0xe24>
    4a10:	b.n	48de <regular_animation()+0xd06>
    4a12:	add.w	r6, r5, #28
    4a16:	mov	r4, r5
    4a18:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4a1c:	cmp.w	sl, #0
    4a20:	bne.n	4a3e <regular_animation()+0xe66>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4a22:	ldr	r3, [r5, #0]
    4a24:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4a26:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4a2a:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4a2c:	str	r3, [r4, #120]	; 0x78
    4a2e:	adds	r4, #96	; 0x60
    4a30:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4a32:	cmp	r4, r7
    4a34:	beq.w	4c40 <regular_animation()+0x1068>
    if (rand){
    4a38:	cmp.w	sl, #0
    4a3c:	beq.n	4a22 <regular_animation()+0xe4a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4a3e:	ldr	r3, [r5, #20]
    4a40:	ldr	r2, [r5, #16]
    4a42:	subs	r0, r3, r2
    4a44:	adds	r0, #2
    4a46:	bl	cb48 <random(unsigned long)>
    4a4a:	ldr	r1, [r5, #16]
    4a4c:	subs	r2, r1, #1
    4a4e:	add	r0, r2
    4a50:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4a52:	ldr	r3, [r5, #20]
    4a54:	subs	r0, r3, r1
    4a56:	adds	r0, #2
    4a58:	bl	cb48 <random(unsigned long)>
    4a5c:	ldr	r1, [r5, #16]
    4a5e:	subs	r2, r1, #1
    4a60:	add	r0, r2
    4a62:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4a66:	ldr	r3, [r5, #20]
    4a68:	subs	r0, r3, r1
    4a6a:	adds	r0, #2
    4a6c:	bl	cb48 <random(unsigned long)>
    4a70:	ldr	r1, [r5, #16]
    4a72:	subs	r2, r1, #1
    4a74:	add	r0, r2
    4a76:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4a78:	ldr	r3, [r5, #20]
    4a7a:	subs	r0, r3, r1
    4a7c:	adds	r0, #2
    4a7e:	bl	cb48 <random(unsigned long)>
    4a82:	ldr	r3, [r5, #16]
    4a84:	subs	r3, #1
    4a86:	add	r0, r3
    4a88:	str	r0, [r4, #120]	; 0x78
    4a8a:	b.n	4a2e <regular_animation()+0xe56>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4a8c:	cmp	r6, #0
    4a8e:	ble.w	4c40 <regular_animation()+0x1068>
    4a92:	movs	r7, #0
    4a94:	b.n	4aaa <regular_animation()+0xed2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4a96:	add.w	r3, r4, r3, lsl #3
    4a9a:	ldr	r2, [r5, #0]
    4a9c:	add.w	r3, r5, r3, lsl #2
    4aa0:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4aa2:	adds	r7, #1
    4aa4:	cmp	r7, r6
    4aa6:	beq.w	4c40 <regular_animation()+0x1068>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4aaa:	movs	r0, #8
    4aac:	bl	cb48 <random(unsigned long)>
    4ab0:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4ab4:	movs	r0, #8
    4ab6:	bl	cb48 <random(unsigned long)>
    4aba:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4abe:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4ac2:	cmp.w	sl, #0
    4ac6:	beq.n	4a96 <regular_animation()+0xebe>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4ac8:	ldr	r3, [r5, #20]
    4aca:	add.w	r8, r8, r8, lsl #1
    4ace:	ldr	r2, [r5, #16]
    4ad0:	add.w	r4, r4, r8, lsl #3
    4ad4:	subs	r0, r3, r2
    4ad6:	add.w	r4, r5, r4, lsl #2
    4ada:	adds	r0, #2
    4adc:	bl	cb48 <random(unsigned long)>
    4ae0:	ldr	r3, [r5, #16]
    4ae2:	subs	r3, #1
    4ae4:	add	r0, r3
    4ae6:	str	r0, [r4, #28]
    4ae8:	b.n	4aa2 <regular_animation()+0xeca>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4aea:	movs	r0, #8
    4aec:	mov	r7, r5
    4aee:	bl	cb48 <random(unsigned long)>
    4af2:	add.w	r3, r5, #96	; 0x60
    4af6:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4af8:	movs	r0, #8
    4afa:	mov	fp, r3
    4afc:	bl	cb48 <random(unsigned long)>
    4b00:	vmov	s15, r6
    4b04:	adds	r4, #8
    4b06:	add.w	r3, r0, #8
    4b0a:	rsb	r9, r0, #16
    4b0e:	vcvt.f64.s32	d9, s15
    4b12:	rsb	r8, r4, #0
    4b16:	negs	r3, r3
    4b18:	str	r3, [sp, #20]
    4b1a:	vmov	s15, r8
    4b1e:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4b20:	mov	r6, r7
    4b22:	vcvt.f64.s32	d8, s15
    4b26:	vmul.f64	d8, d8, d8
    4b2a:	b.n	4b38 <regular_animation()+0xf60>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4b2c:	ldr	r3, [r5, #0]
    4b2e:	str	r3, [r6, #28]
    4b30:	adds	r4, #1
    4b32:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4b34:	cmp	r4, r9
    4b36:	beq.n	4b88 <regular_animation()+0xfb0>
      double xx = x-midPoint_y;
    4b38:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4b3c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4b40:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4b44:	vfma.f64	d0, d7, d7
    4b48:	vsqrt.f64	d7, d0
    4b4c:	vcmp.f64	d7, d7
    4b50:	vmrs	APSR_nzcv, fpscr
    4b54:	bne.w	4ec2 <regular_animation()+0x12ea>
    4b58:	vcmpe.f64	d7, d9
    4b5c:	vmrs	APSR_nzcv, fpscr
    4b60:	bhi.n	4b30 <regular_animation()+0xf58>
        if (rand){
    4b62:	cmp.w	sl, #0
    4b66:	beq.n	4b2c <regular_animation()+0xf54>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4b68:	ldr	r3, [r5, #20]
    4b6a:	adds	r4, #1
    4b6c:	ldr	r0, [r5, #16]
    4b6e:	adds	r6, #96	; 0x60
    4b70:	subs	r0, r3, r0
    4b72:	adds	r0, #2
    4b74:	bl	cb48 <random(unsigned long)>
    4b78:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4b7a:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4b7c:	add.w	r3, r3, #4294967295
    4b80:	add	r0, r3
    4b82:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4b86:	bne.n	4b38 <regular_animation()+0xf60>
    4b88:	adds	r7, #4
    4b8a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4b8e:	cmp	fp, r7
    4b90:	bne.n	4b1a <regular_animation()+0xf42>
    4b92:	b.n	4c40 <regular_animation()+0x1068>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b94:	movs	r0, #8
    4b96:	bl	cb48 <random(unsigned long)>
    4b9a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b9e:	movs	r0, #8
    4ba0:	bl	cb48 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4ba4:	cmp	r6, #0
    4ba6:	ble.n	4c40 <regular_animation()+0x1068>
    4ba8:	add.w	r4, r4, r4, lsl #1
    4bac:	add.w	r3, r0, #15
    4bb0:	movs	r7, #0
    4bb2:	add.w	r4, r3, r4, lsl #3
    4bb6:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4bba:	cmp.w	sl, #0
    4bbe:	bne.w	4cd8 <regular_animation()+0x1100>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4bc2:	ldr	r3, [r5, #0]
    4bc4:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4bc6:	adds	r7, #1
    4bc8:	adds	r4, #4
    4bca:	cmp	r7, r6
    4bcc:	bne.n	4bba <regular_animation()+0xfe2>
    4bce:	b.n	4c40 <regular_animation()+0x1068>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4bd0:	movs	r0, #8
    4bd2:	bl	cb48 <random(unsigned long)>
    4bd6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4bda:	movs	r0, #8
    4bdc:	bl	cb48 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4be0:	cmp	r6, #0
    4be2:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4be4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4be8:	it	lt
    4bea:	addlt	r3, r6, #1
    4bec:	cmp	r6, #0
    4bee:	mov.w	r3, r3, asr #1
    4bf2:	it	lt
    4bf4:	addlt	r6, #1
    4bf6:	negs	r3, r3
    4bf8:	asrs	r6, r6, #1
    4bfa:	adds	r7, r0, r3
    4bfc:	adds	r2, r0, r6
    4bfe:	cmp	r7, r2
    4c00:	str	r2, [sp, #20]
    4c02:	bge.n	4c40 <regular_animation()+0x1068>
    4c04:	adds	r3, r4, r3
    4c06:	add	r4, r6
    4c08:	add.w	r6, r3, r3, lsl #1
    4c0c:	mov	fp, r3
    4c0e:	add.w	r6, r7, r6, lsl #3
    4c12:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4c16:	cmp	r4, fp
    4c18:	ble.n	4c36 <regular_animation()+0x105e>
    4c1a:	mov	r9, r6
    4c1c:	mov	r8, fp
        if (rand){
    4c1e:	cmp.w	sl, #0
    4c22:	bne.n	4c62 <regular_animation()+0x108a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4c24:	ldr	r3, [r5, #0]
    4c26:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4c2a:	add.w	r8, r8, #1
    4c2e:	add.w	r9, r9, #96	; 0x60
    4c32:	cmp	r8, r4
    4c34:	bne.n	4c1e <regular_animation()+0x1046>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4c36:	adds	r7, #1
    4c38:	ldr	r3, [sp, #20]
    4c3a:	adds	r6, #4
    4c3c:	cmp	r7, r3
    4c3e:	bne.n	4c16 <regular_animation()+0x103e>
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
			bottom_hue_threshold = random(0, 360);
    4c40:	mov.w	r1, #360	; 0x168
    4c44:	movs	r0, #0
    4c46:	bl	cb50 <random(long, long)>
    4c4a:	ldr	r4, [sp, #24]
			hue_difference = random(80, 300);
    4c4c:	mov.w	r1, #300	; 0x12c
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
			bottom_hue_threshold = random(0, 360);
    4c50:	str.w	r0, [r4, #432]	; 0x1b0
			hue_difference = random(80, 300);
    4c54:	movs	r0, #80	; 0x50
    4c56:	bl	cb50 <random(long, long)>
    4c5a:	str.w	r0, [r4, #436]	; 0x1b4
    4c5e:	b.w	3d1c <regular_animation()+0x144>
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4c62:	ldr	r3, [r5, #20]
    4c64:	ldr	r0, [r5, #16]
    4c66:	subs	r0, r3, r0
    4c68:	adds	r0, #2
    4c6a:	bl	cb48 <random(unsigned long)>
    4c6e:	ldr	r3, [r5, #16]
    4c70:	subs	r3, #1
    4c72:	add	r0, r3
    4c74:	str.w	r0, [r9, #28]
    4c78:	b.n	4c2a <regular_animation()+0x1052>
    4c7a:	ldr	r3, [r5, #20]
    4c7c:	ldr	r0, [r5, #16]
    4c7e:	subs	r0, r3, r0
    4c80:	adds	r0, #2
    4c82:	bl	cb48 <random(unsigned long)>
    4c86:	ldr	r3, [r5, #16]
    4c88:	subs	r3, #1
    4c8a:	add	r0, r3
    4c8c:	str.w	r0, [r9, #28]
    4c90:	b.n	48c8 <regular_animation()+0xcf0>
    4c92:	ldr	r3, [r5, #20]
    4c94:	ldr	r0, [r5, #16]
    4c96:	subs	r0, r3, r0
    4c98:	adds	r0, #2
    4c9a:	bl	cb48 <random(unsigned long)>
    4c9e:	ldr	r3, [r5, #16]
    4ca0:	subs	r3, #1
    4ca2:	add	r0, r3
    4ca4:	str.w	r0, [r9, #28]
    4ca8:	b.n	499c <regular_animation()+0xdc4>
    4caa:	ldr	r3, [r5, #20]
    4cac:	ldr	r0, [r5, #16]
    4cae:	subs	r0, r3, r0
    4cb0:	adds	r0, #2
    4cb2:	bl	cb48 <random(unsigned long)>
    4cb6:	ldr	r3, [r5, #16]
    4cb8:	subs	r3, #1
    4cba:	add	r0, r3
    4cbc:	str.w	r0, [r9, #28]
    4cc0:	b.n	452c <regular_animation()+0x954>
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
      if (rand){
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4cc2:	ldr	r3, [r5, #20]
    4cc4:	ldr	r2, [r5, #16]
    4cc6:	subs	r0, r3, r2
    4cc8:	adds	r0, #2
    4cca:	bl	cb48 <random(unsigned long)>
    4cce:	ldr	r3, [r5, #16]
    4cd0:	subs	r3, #1
    4cd2:	add	r0, r3
    4cd4:	str	r0, [r6, #0]
    4cd6:	b.n	4932 <regular_animation()+0xd5a>
    4cd8:	ldr	r3, [r5, #20]
    4cda:	ldr	r2, [r5, #16]
    4cdc:	subs	r0, r3, r2
    4cde:	adds	r0, #2
    4ce0:	bl	cb48 <random(unsigned long)>
    4ce4:	ldr	r3, [r5, #16]
    4ce6:	subs	r3, #1
    4ce8:	add	r0, r3
    4cea:	str	r0, [r4, #0]
    4cec:	b.n	4bc6 <regular_animation()+0xfee>
    4cee:	ldr	r3, [r5, #20]
    4cf0:	ldr	r2, [r5, #16]
    4cf2:	subs	r0, r3, r2
    4cf4:	adds	r0, #2
    4cf6:	bl	cb48 <random(unsigned long)>
    4cfa:	ldr	r3, [r5, #16]
    4cfc:	subs	r3, #1
    4cfe:	add	r0, r3
    4d00:	str	r0, [r4, #0]
    4d02:	b.n	4a08 <regular_animation()+0xe30>
    4d04:	ldr	r3, [r5, #20]
    4d06:	ldr	r2, [r5, #16]
    4d08:	subs	r0, r3, r2
    4d0a:	adds	r0, #2
    4d0c:	bl	cb48 <random(unsigned long)>
    4d10:	ldr	r3, [r5, #16]
    4d12:	subs	r3, #1
    4d14:	add	r0, r3
    4d16:	str	r0, [r6, #0]
    4d18:	b.w	44c2 <regular_animation()+0x8ea>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4d1c:	movw	r9, #4636	; 0x121c
    4d20:	add.w	r3, r5, #28
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
		
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4d24:	movs	r7, #0
    4d26:	add.w	r8, r5, #4640	; 0x1220
    4d2a:	add	r9, r5
    4d2c:	str	r3, [sp, #20]
    4d2e:	mov.w	fp, r7, lsl #3
    4d32:	ldr	r6, [sp, #20]
    4d34:	movs	r4, #0
    4d36:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4d3a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4d3c:	add	r3, r7
    4d3e:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4d40:	cbnz	r2, 4d46 <regular_animation()+0x116e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4d42:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4d46:	cbnz	r3, 4d60 <regular_animation()+0x1188>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4d48:	adds	r4, #1
    4d4a:	adds	r6, #4
    4d4c:	cmp	r4, #24
    4d4e:	bne.n	4d36 <regular_animation()+0x115e>
    4d50:	ldr	r3, [sp, #20]
    4d52:	adds	r7, #24
    4d54:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4d56:	cmp.w	r7, #576	; 0x240
    4d5a:	str	r3, [sp, #20]
    4d5c:	bne.n	4d2e <regular_animation()+0x1156>
    4d5e:	b.n	48de <regular_animation()+0xd06>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4d60:	ldr	r2, [r5, #20]
    4d62:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4d64:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4d68:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4d6a:	add	r3, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4d6c:	adds	r0, #2
    4d6e:	ldr.w	sl, [r3, r4, lsl #3]
    4d72:	bl	cb48 <random(unsigned long)>
    4d76:	ldr	r3, [r5, #16]
    4d78:	rsb	r3, r3, sl
    4d7c:	adds	r3, #1
    4d7e:	subs	r0, r3, r0
    4d80:	str	r0, [r6, #0]
    4d82:	b.n	4d48 <regular_animation()+0x1170>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4d84:	movw	sl, #4636	; 0x121c
    4d88:	add.w	r3, r5, #28
    4d8c:	movs	r7, #0
    4d8e:	add.w	r9, r5, #4640	; 0x1220
    4d92:	add	sl, r5
    4d94:	str	r3, [sp, #28]
    4d96:	lsls	r3, r7, #3
    4d98:	ldr	r6, [sp, #28]
    4d9a:	movs	r4, #0
    4d9c:	str	r3, [sp, #20]
    4d9e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4da2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4da4:	add	r3, r7
    4da6:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4da8:	cbnz	r2, 4dae <regular_animation()+0x11d6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4daa:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4dae:	cbnz	r3, 4dca <regular_animation()+0x11f2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4db0:	adds	r4, #1
    4db2:	adds	r6, #4
    4db4:	cmp	r4, #24
    4db6:	bne.n	4d9e <regular_animation()+0x11c6>
    4db8:	ldr	r3, [sp, #28]
    4dba:	adds	r7, #24
    4dbc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4dbe:	cmp.w	r7, #576	; 0x240
    4dc2:	str	r3, [sp, #28]
    4dc4:	bne.n	4d96 <regular_animation()+0x11be>
    4dc6:	b.w	4544 <regular_animation()+0x96c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4dca:	ldr	r2, [r5, #20]
    4dcc:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4dce:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4dd2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4dd4:	ldr	r2, [sp, #20]
    4dd6:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4dd8:	adds	r0, #2
    4dda:	ldr.w	fp, [r3, r4, lsl #3]
    4dde:	bl	cb48 <random(unsigned long)>
    4de2:	ldr	r3, [r5, #16]
    4de4:	rsb	r3, r3, fp
    4de8:	adds	r3, #1
    4dea:	subs	r0, r3, r0
    4dec:	str	r0, [r6, #0]
    4dee:	b.n	4db0 <regular_animation()+0x11d8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4df0:	movw	sl, #4636	; 0x121c
    4df4:	add.w	r3, r5, #28
    4df8:	movs	r7, #0
    4dfa:	add.w	r9, r5, #4640	; 0x1220
    4dfe:	add	sl, r5
    4e00:	str	r3, [sp, #28]
    4e02:	lsls	r3, r7, #3
    4e04:	ldr	r6, [sp, #28]
    4e06:	movs	r4, #0
    4e08:	str	r3, [sp, #20]
    4e0a:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4e0e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4e10:	add	r3, r7
    4e12:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4e14:	cbnz	r2, 4e1a <regular_animation()+0x1242>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4e16:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4e1a:	cbnz	r3, 4e34 <regular_animation()+0x125c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4e1c:	adds	r4, #1
    4e1e:	adds	r6, #4
    4e20:	cmp	r4, #24
    4e22:	bne.n	4e0a <regular_animation()+0x1232>
    4e24:	ldr	r3, [sp, #28]
    4e26:	adds	r7, #24
    4e28:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4e2a:	cmp.w	r7, #576	; 0x240
    4e2e:	str	r3, [sp, #28]
    4e30:	bne.n	4e02 <regular_animation()+0x122a>
    4e32:	b.n	49b4 <regular_animation()+0xddc>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4e34:	ldr	r2, [r5, #20]
    4e36:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4e38:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4e3c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4e3e:	ldr	r2, [sp, #20]
    4e40:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4e42:	adds	r0, #2
    4e44:	ldr.w	fp, [r3, r4, lsl #3]
    4e48:	bl	cb48 <random(unsigned long)>
    4e4c:	ldr	r3, [r5, #16]
    4e4e:	rsb	r3, r3, fp
    4e52:	adds	r3, #1
    4e54:	subs	r0, r3, r0
    4e56:	str	r0, [r6, #0]
    4e58:	b.n	4e1c <regular_animation()+0x1244>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4e5a:	movw	r9, #4636	; 0x121c
    4e5e:	add.w	r3, r5, #28
    4e62:	movs	r7, #0
    4e64:	add.w	r8, r5, #4640	; 0x1220
    4e68:	add	r9, r5
    4e6a:	str	r3, [sp, #20]
    4e6c:	mov.w	fp, r7, lsl #3
    4e70:	ldr	r6, [sp, #20]
    4e72:	movs	r4, #0
    4e74:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4e78:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4e7a:	add	r3, r4
    4e7c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4e7e:	cbnz	r2, 4e84 <regular_animation()+0x12ac>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4e80:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4e84:	cbnz	r3, 4e9e <regular_animation()+0x12c6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4e86:	adds	r4, #1
    4e88:	adds	r6, #4
    4e8a:	cmp	r4, #24
    4e8c:	bne.n	4e74 <regular_animation()+0x129c>
    4e8e:	ldr	r3, [sp, #20]
    4e90:	adds	r7, #24
    4e92:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4e94:	cmp.w	r7, #576	; 0x240
    4e98:	str	r3, [sp, #20]
    4e9a:	bne.n	4e6c <regular_animation()+0x1294>
    4e9c:	b.n	4c40 <regular_animation()+0x1068>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4e9e:	ldr	r2, [r5, #20]
    4ea0:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4ea2:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4ea6:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4ea8:	add	r3, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4eaa:	adds	r0, #2
    4eac:	ldr.w	sl, [r3, r4, lsl #3]
    4eb0:	bl	cb48 <random(unsigned long)>
    4eb4:	ldr	r3, [r5, #16]
    4eb6:	rsb	r3, r3, sl
    4eba:	adds	r3, #1
    4ebc:	subs	r0, r3, r0
    4ebe:	str	r0, [r6, #0]
    4ec0:	b.n	4e86 <regular_animation()+0x12ae>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    4ec2:	bl	d2d8 <sqrt>
    4ec6:	vmov.f64	d7, d0
    4eca:	b.n	4b58 <regular_animation()+0xf80>
    4ecc:	bl	d2d8 <sqrt>
    4ed0:	vmov.f64	d7, d0
    4ed4:	b.w	4438 <regular_animation()+0x860>
    4ed8:	bl	d2d8 <sqrt>
    4edc:	vmov.f64	d7, d0
    4ee0:	b.w	46aa <regular_animation()+0xad2>
    4ee4:	bl	d2d8 <sqrt>
    4ee8:	vmov.f64	d7, d0
    4eec:	b.n	4830 <regular_animation()+0xc58>
    4eee:	nop

00004ef0 <ceremony_animation()>:
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4ef0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  	if (!didPulse && !didIntro) {
    4ef4:	ldr	r5, [pc, #664]	; (5190 <ceremony_animation()+0x2a0>)
    4ef6:	ldrb	r3, [r5, #0]
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4ef8:	vpush	{d8}
    4efc:	sub	sp, #36	; 0x24

  	if (!didPulse && !didIntro) {
    4efe:	cbnz	r3, 4f0a <ceremony_animation()+0x1a>
    4f00:	ldr	r3, [pc, #656]	; (5194 <ceremony_animation()+0x2a4>)
    4f02:	ldrb	r4, [r3, #0]
    4f04:	cmp	r4, #0
    4f06:	beq.w	52a4 <ceremony_animation()+0x3b4>
    4f0a:	ldr	r3, [pc, #652]	; (5198 <ceremony_animation()+0x2a8>)
    4f0c:	ldr.w	lr, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4f10:	ldr	r2, [pc, #648]	; (519c <ceremony_animation()+0x2ac>)
    4f12:	ldr	r0, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f14:	mov	r6, r2

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4f16:	ldr	r1, [r2, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f18:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4f1a:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f1c:	ldr	r4, [pc, #636]	; (519c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4f1e:	cmp	r3, r1
    4f20:	it	eq
    4f22:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f24:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4f26:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4f28:	ite	eq
    4f2a:	moveq	r7, #1
    4f2c:	movne	r7, #0
    4f2e:	cmp	r7, #0
    4f30:	beq.n	4f18 <ceremony_animation()+0x28>

    didPulse = true;
	}

  
	if (sinceCircle > 6000 && didPulse && !didIntro) {
    4f32:	lsrs	r1, r3, #5
    4f34:	movw	r2, #6000	; 0x1770
    4f38:	orr.w	r1, r1, r0, lsl #27
    4f3c:	vmov	s15, r1
    4f40:	vldr	d5, [pc, #580]	; 5188 <ceremony_animation()+0x298>
    4f44:	vcvt.f64.u32	d7, s15
    4f48:	vdiv.f64	d6, d7, d5
    4f4c:	vcvt.u32.f64	s12, d6
    4f50:	vmov	r3, s12
    4f54:	rsb	r3, lr, r3
    4f58:	cmp	r3, r2
    4f5a:	bls.n	4f64 <ceremony_animation()+0x74>
    4f5c:	ldrb	r3, [r5, #0]
    4f5e:	cmp	r3, #0
    4f60:	bne.w	51bc <ceremony_animation()+0x2cc>
    4f64:	ldr	r5, [pc, #568]	; (51a0 <ceremony_animation()+0x2b0>)
    sinceIntro = 0;
	}



  updateBeams();
    4f66:	bl	5d0 <updateBeams()>
	updateCircles();
    4f6a:	bl	b88 <updateCircles()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4f6e:	ldr	r3, [pc, #556]	; (519c <ceremony_animation()+0x2ac>)
    4f70:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f72:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4f74:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f76:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4f78:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f7a:	ldr	r7, [pc, #544]	; (519c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4f7c:	cmp	r3, r1
    4f7e:	it	eq
    4f80:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4f82:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4f84:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4f86:	ite	eq
    4f88:	moveq	r6, #1
    4f8a:	movne	r6, #0
    4f8c:	cmp	r6, #0
    4f8e:	beq.n	4f76 <ceremony_animation()+0x86>

  if (sinceIntro > 0 && didIntro){
    4f90:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    4f92:	ldr.w	lr, [r5]
    4f96:	orr.w	r1, r1, r2, lsl #27
    4f9a:	vmov	s15, r1
    4f9e:	vldr	d5, [pc, #488]	; 5188 <ceremony_animation()+0x298>
    4fa2:	vcvt.f64.u32	d7, s15
    4fa6:	vdiv.f64	d6, d7, d5
    4faa:	vcvt.u32.f64	s15, d6
    4fae:	vmov	r3, s15
    4fb2:	cmp	r3, lr
    4fb4:	beq.w	5180 <ceremony_animation()+0x290>
    4fb8:	ldr	r3, [pc, #472]	; (5194 <ceremony_animation()+0x2a4>)
    4fba:	ldrb	r3, [r3, #0]
    4fbc:	cmp	r3, #0
    4fbe:	bne.n	5026 <ceremony_animation()+0x136>
    4fc0:	mov	r6, lr
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4fc2:	ldr	r3, [pc, #472]	; (519c <ceremony_animation()+0x2ac>)
    4fc4:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4fc6:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4fc8:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4fca:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4fcc:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4fce:	cmp	r3, r1
    4fd0:	it	eq
    4fd2:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4fd4:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4fd6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4fd8:	ite	eq
    4fda:	moveq	r5, #1
    4fdc:	movne	r5, #0
    4fde:	cmp	r5, #0
    4fe0:	beq.n	4fca <ceremony_animation()+0xda>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    }
  }

  if (sinceIntro > 3500 && didIntro){
    4fe2:	lsrs	r1, r3, #5
    4fe4:	movw	r3, #3500	; 0xdac
    4fe8:	orr.w	r1, r1, r2, lsl #27
    4fec:	vmov	s15, r1
    4ff0:	vldr	d5, [pc, #404]	; 5188 <ceremony_animation()+0x298>
    4ff4:	vcvt.f64.u32	d7, s15
    4ff8:	vdiv.f64	d6, d7, d5
    4ffc:	vcvt.u32.f64	s12, d6
    5000:	vmov	r2, s12
    5004:	rsb	lr, r6, r2
    5008:	cmp	lr, r3
    500a:	bls.n	501c <ceremony_animation()+0x12c>
    500c:	ldr	r3, [pc, #388]	; (5194 <ceremony_animation()+0x2a4>)
    500e:	ldrb	r3, [r3, #0]
    5010:	cbz	r3, 501c <ceremony_animation()+0x12c>
    regular_setup();
    5012:	bl	10f8 <regular_setup()>
    isRegularAnimation = true;
    5016:	ldr	r3, [pc, #396]	; (51a4 <ceremony_animation()+0x2b4>)
    5018:	movs	r2, #1
    501a:	strb	r2, [r3, #0]
  }
}
    501c:	add	sp, #36	; 0x24
    501e:	vpop	{d8}
    5022:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    5026:	movs	r4, #57	; 0x39
	HSB_color.b = b;
    5028:	movs	r0, #90	; 0x5a
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    502a:	movs	r1, #204	; 0xcc
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    502c:	movs	r2, #0
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    502e:	strb.w	r4, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    5032:	movs	r3, #1
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5034:	mov	r4, r7
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
    5036:	strb.w	r0, [sp, #25]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    503a:	ldr	r0, [r7, #36]	; 0x24
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    503c:	str	r1, [sp, #20]
  uint32_t lo1 = SNVS_HPRTCLR;
    503e:	ldr	r1, [r7, #40]	; 0x28
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    5040:	strb.w	r2, [sp, #28]
	HSB_updated = true;
    5044:	strb.w	r3, [sp, #29]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5048:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    504a:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    504c:	ldr	r7, [pc, #332]	; (519c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    504e:	cmp	r3, r1
    5050:	it	eq
    5052:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5054:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    5056:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    5058:	ite	eq
    505a:	moveq	r6, #1
    505c:	movne	r6, #0
    505e:	cmp	r6, #0
    5060:	beq.n	5048 <ceremony_animation()+0x158>
  updateBeams();
	updateCircles();

  if (sinceIntro > 0 && didIntro){
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1-freq_offset){
    5062:	lsrs	r1, r3, #5
    5064:	ldr	r6, [pc, #320]	; (51a8 <ceremony_animation()+0x2b8>)
    5066:	ldr	r4, [pc, #324]	; (51ac <ceremony_animation()+0x2bc>)
    5068:	orr.w	r1, r1, r2, lsl #27
    506c:	ldr	r3, [r6, #0]
    506e:	ldr	r2, [r4, #0]
    5070:	vmov	s15, r1
    5074:	rsb	r2, r2, #900	; 0x384
    5078:	vcvt.f64.u32	d7, s15
    507c:	vldr	d5, [pc, #264]	; 5188 <ceremony_animation()+0x298>
    5080:	vdiv.f64	d6, d7, d5
    5084:	vcvt.u32.f64	s12, d6
    5088:	vmov	r1, s12
    508c:	subs	r3, r1, r3
    508e:	cmp	r2, r3
    5090:	bcs.n	4fc0 <ceremony_animation()+0xd0>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5092:	ldr.w	lr, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5096:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    5098:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    509a:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    509c:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    509e:	cmp	r3, r1
    50a0:	it	eq
    50a2:	cmpeq	r2, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    50a4:	mov	lr, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    50a6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    50a8:	ite	eq
    50aa:	moveq	r7, #1
    50ac:	movne	r7, #0
    50ae:	cmp	r7, #0
    50b0:	beq.n	509a <ceremony_animation()+0x1aa>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    50b2:	lsrs	r3, r3, #5
      sinceBeam1 = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    50b4:	ldr	r7, [pc, #248]	; (51b0 <ceremony_animation()+0x2c0>)
    50b6:	movs	r1, #2
    50b8:	movs	r0, #0
    50ba:	orr.w	r3, r3, r2, lsl #27
    50be:	add.w	r9, sp, #24
    50c2:	add.w	r8, sp, #16
    50c6:	vmov	s15, r3
    50ca:	vldr	d5, [pc, #188]	; 5188 <ceremony_animation()+0x298>
    50ce:	vcvt.f64.u32	d7, s15
    50d2:	vdiv.f64	d6, d7, d5
    50d6:	vcvt.u32.f64	s12, d6
    50da:	vstr	s12, [r6]
    50de:	bl	cb50 <random(long, long)>
    50e2:	movs	r1, #10
    50e4:	mov	r6, r0
    50e6:	movs	r0, #2
    50e8:	bl	cb50 <random(long, long)>
    50ec:	vmov	s16, r0
    50f0:	ldr	r0, [r7, #0]
    50f2:	add.w	r1, r0, #900	; 0x384
    50f6:	add.w	r0, r0, #400	; 0x190
    50fa:	bl	cb50 <random(long, long)>
    50fe:	str	r0, [sp, #8]
    5100:	vcvt.f32.s32	s0, s16
    5104:	ldmia.w	r9, {r0, r1}
    5108:	ldmia.w	r8, {r2, r3}
    510c:	stmia.w	sp, {r0, r1}
    5110:	adds	r1, r6, #0
    5112:	ldr	r0, [pc, #160]	; (51b4 <ceremony_animation()+0x2c4>)
    5114:	it	ne
    5116:	movne	r1, #1
    5118:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    511c:	movs	r1, #2
    511e:	movs	r0, #0
    5120:	bl	cb50 <random(long, long)>
    5124:	movs	r1, #10
    5126:	mov	r6, r0
    5128:	movs	r0, #2
    512a:	bl	cb50 <random(long, long)>
    512e:	vmov	s16, r0
    5132:	ldr	r0, [r7, #0]
    5134:	add.w	r1, r0, #900	; 0x384
    5138:	add.w	r0, r0, #400	; 0x190
    513c:	bl	cb50 <random(long, long)>
    5140:	str	r0, [sp, #8]
    5142:	vcvt.f32.s32	s0, s16
    5146:	ldmia.w	r9, {r0, r1}
    514a:	ldmia.w	r8, {r2, r3}
    514e:	stmia.w	sp, {r0, r1}
    5152:	adds	r1, r6, #0
    5154:	ldr	r0, [pc, #96]	; (51b8 <ceremony_animation()+0x2c8>)
    5156:	it	ne
    5158:	movne	r1, #1
    515a:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    515e:	ldr	r3, [r7, #0]
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1-freq_offset){
      sinceBeam1 = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    5160:	ldr	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    5162:	adds	r3, #200	; 0xc8
    5164:	ldr	r6, [r5, #0]
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1-freq_offset){
      sinceBeam1 = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    5166:	subs	r2, #50	; 0x32
      speed_offset = constrain(speed_offset + 200, 0, 800);
    5168:	cmp.w	r3, #800	; 0x320
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1-freq_offset){
      sinceBeam1 = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    516c:	bic.w	r2, r2, r2, asr #31
      speed_offset = constrain(speed_offset + 200, 0, 800);
    5170:	it	ge
    5172:	movge.w	r3, #800	; 0x320
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam1 > BEAM_FREQUENCY_INTERVAL_1-freq_offset){
      sinceBeam1 = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    5176:	str	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    5178:	bic.w	r3, r3, r3, asr #31
    517c:	str	r3, [r7, #0]
    517e:	b.n	4fc2 <ceremony_animation()+0xd2>
    5180:	vmov	r6, s15
    5184:	b.n	4fc2 <ceremony_animation()+0xd2>
    5186:	nop
    5188:	.word	0xd2f1a9fc
    518c:	.word	0x3ff0624d
    5190:	.word	0x2000c0cc
    5194:	.word	0x2000c288
    5198:	.word	0x20004dd0
    519c:	.word	0x400d4000
    51a0:	.word	0x2000d4b0
    51a4:	.word	0x20002984
    51a8:	.word	0x2000c08c
    51ac:	.word	0x20000b78
    51b0:	.word	0x2000be28
    51b4:	.word	0x2000c0ac
    51b8:	.word	0x2000c098

    didPulse = true;
	}

  
	if (sinceCircle > 6000 && didPulse && !didIntro) {
    51bc:	ldr	r3, [pc, #464]	; (5390 <ceremony_animation()+0x4a0>)
    51be:	ldrb	r6, [r3, #0]
    51c0:	cmp	r6, #0
    51c2:	bne.w	4f64 <ceremony_animation()+0x74>
    newCircle(&matrix_A, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_A);
    51c6:	mov.w	r1, #360	; 0x168
    51ca:	mov	r0, r6
    51cc:	bl	cb50 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    51d0:	add.w	r0, r0, #720	; 0x2d0
    51d4:	ldr.w	fp, [pc, #488]	; 53c0 <ceremony_animation()+0x4d0>
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    51d8:	mov.w	r8, #1
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    51dc:	lsrs	r3, r0, #3
    51de:	mov.w	r9, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    51e2:	strb.w	r6, [sp, #28]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    51e6:	movs	r7, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    51e8:	umull	r2, r3, fp, r3
    51ec:	add	r5, sp, #16
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    51ee:	strb.w	r8, [sp, #29]
    51f2:	mov.w	sl, #1000	; 0x3e8
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    51f6:	lsrs	r3, r3, #2
    51f8:	ldr	r2, [sp, #28]
    51fa:	ldr	r1, [pc, #408]	; (5394 <ceremony_animation()+0x4a4>)
    51fc:	mls	r3, r9, r3, r0
    5200:	ldr	r0, [pc, #404]	; (5398 <ceremony_animation()+0x4a8>)
	HSB_color.s = s;
    5202:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5206:	str	r3, [sp, #20]
	HSB_color.s = s;
	HSB_color.b = b;
    5208:	strb.w	r7, [sp, #25]
    520c:	str	r2, [sp, #0]
    520e:	str	r1, [sp, #8]
    5210:	str.w	sl, [sp, #4]
    5214:	ldmia.w	r5, {r1, r2, r3}
    5218:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
		newCircle(&matrix_B, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_B);
    521c:	mov	r1, r9
    521e:	mov	r0, r6
    5220:	bl	cb50 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5224:	add.w	r0, r0, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    5228:	strb.w	r8, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    522c:	lsrs	r1, r0, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    522e:	strb.w	r6, [sp, #28]
    5232:	ldr	r2, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5234:	umull	r3, fp, fp, r1
    5238:	ldr	r1, [pc, #352]	; (539c <ceremony_animation()+0x4ac>)
	HSB_color.s = s;
    523a:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    523e:	mov.w	fp, fp, lsr #2
	HSB_color.s = s;
	HSB_color.b = b;
    5242:	strb.w	r7, [sp, #25]
    5246:	str.w	sl, [sp, #4]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    524a:	mls	r3, r9, fp, r0
    524e:	ldr	r0, [pc, #336]	; (53a0 <ceremony_animation()+0x4b0>)
    5250:	str	r2, [sp, #0]
    5252:	str	r3, [sp, #20]
    5254:	str	r1, [sp, #8]
    5256:	ldmia.w	r5, {r1, r2, r3}
    525a:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    525e:	mov	r5, r4
    didIntro = true;
    5260:	ldr	r3, [pc, #300]	; (5390 <ceremony_animation()+0x4a0>)
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5262:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    5264:	ldr	r1, [r4, #40]	; 0x28
    5266:	strb.w	r8, [r3]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    526a:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    526c:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    526e:	cmp	r3, r1
    5270:	it	eq
    5272:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5274:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    5276:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    5278:	ite	eq
    527a:	moveq	r4, #1
    527c:	movne	r4, #0
    527e:	cmp	r4, #0
    5280:	beq.n	526a <ceremony_animation()+0x37a>
    5282:	lsrs	r1, r3, #5
    5284:	ldr	r5, [pc, #284]	; (53a4 <ceremony_animation()+0x4b4>)
    5286:	orr.w	r1, r1, r2, lsl #27
    528a:	vmov	s15, r1
    528e:	vldr	d5, [pc, #248]	; 5388 <ceremony_animation()+0x498>
    5292:	vcvt.f64.u32	d7, s15
    5296:	vdiv.f64	d6, d7, d5
    529a:	vcvt.u32.f64	s12, d6
    529e:	vstr	s12, [r5]
    52a2:	b.n	4f66 <ceremony_animation()+0x76>
int speed_offset = 0;
void ceremony_animation(){

  	if (!didPulse && !didIntro) {
    Color c = Color(204, 57, 90, HSB_MODE);
		newBeam(&synapse_A, true, c, NUM_LEDS_SYNAPSE_A*1.5, 7 *1000);
    52a4:	add	r7, sp, #24
    52a6:	movw	r8, #7000	; 0x1b58
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    52aa:	mov.w	r9, #1
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    52ae:	movs	r1, #57	; 0x39
	HSB_color.b = b;
    52b0:	movs	r2, #90	; 0x5a
    52b2:	add	r6, sp, #16
	RGB_updated = false;
    52b4:	strb.w	r4, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    52b8:	movs	r3, #204	; 0xcc
	HSB_color.s = s;
	HSB_color.b = b;
    52ba:	strb.w	r2, [sp, #25]
    52be:	str.w	r8, [sp, #8]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    52c2:	strb.w	r1, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    52c6:	strb.w	r9, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    52ca:	str	r3, [sp, #20]
    52cc:	vldr	s0, [pc, #216]	; 53a8 <ceremony_animation()+0x4b8>
    52d0:	ldmia.w	r7, {r0, r1}
    52d4:	ldmia.w	r6, {r2, r3}
    52d8:	stmia.w	sp, {r0, r1}
    52dc:	mov	r1, r9
    52de:	ldr	r0, [pc, #204]	; (53ac <ceremony_animation()+0x4bc>)
    52e0:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_A, false, c, NUM_LEDS_SYNAPSE_A*1.5, 7* 1000);
    52e4:	str.w	r8, [sp, #8]
    52e8:	vldr	s0, [pc, #188]	; 53a8 <ceremony_animation()+0x4b8>
    52ec:	ldmia.w	r7, {r0, r1}
    52f0:	ldmia.w	r6, {r2, r3}
    52f4:	stmia.w	sp, {r0, r1}
    52f8:	mov	r1, r4
    52fa:	ldr	r0, [pc, #176]	; (53ac <ceremony_animation()+0x4bc>)
    52fc:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, true, c, NUM_LEDS_SYNAPSE_B*1.5, 7 * 1000);
    5300:	str.w	r8, [sp, #8]
    5304:	vldr	s0, [pc, #168]	; 53b0 <ceremony_animation()+0x4c0>
    5308:	ldmia.w	r7, {r0, r1}
    530c:	ldmia.w	r6, {r2, r3}
    5310:	stmia.w	sp, {r0, r1}
    5314:	mov	r1, r9
    5316:	ldr	r0, [pc, #156]	; (53b4 <ceremony_animation()+0x4c4>)
    5318:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, false, c, NUM_LEDS_SYNAPSE_B*1.5, 7 * 1000);
    531c:	str.w	r8, [sp, #8]
    5320:	vldr	s0, [pc, #140]	; 53b0 <ceremony_animation()+0x4c0>
    5324:	ldmia.w	r7, {r0, r1}
    5328:	ldmia.w	r6, {r2, r3}
    532c:	stmia.w	sp, {r0, r1}
    5330:	mov	r1, r4
    5332:	ldr	r0, [pc, #128]	; (53b4 <ceremony_animation()+0x4c4>)
    5334:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5338:	ldr	r3, [pc, #124]	; (53b8 <ceremony_animation()+0x4c8>)
    533a:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    533c:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    533e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5340:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    5342:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    5344:	cmp	r3, r1
    5346:	it	eq
    5348:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    534a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    534c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    534e:	ite	eq
    5350:	moveq	r6, #1
    5352:	movne	r6, #0
    5354:	cmp	r6, #0
    5356:	beq.n	5340 <ceremony_animation()+0x450>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    5358:	lsrs	r1, r3, #5
    535a:	ldr	r2, [pc, #96]	; (53bc <ceremony_animation()+0x4cc>)
		sinceCircle = 0;

    didPulse = true;
    535c:	movs	r3, #1
    535e:	orr.w	r1, r1, r0, lsl #27
    5362:	strb	r3, [r5, #0]
    5364:	vmov	s15, r1
    5368:	vldr	d5, [pc, #28]	; 5388 <ceremony_animation()+0x498>
    536c:	vcvt.f64.u32	d7, s15
    5370:	vdiv.f64	d6, d7, d5
    5374:	vcvt.u32.f64	s15, d6
    5378:	vmov	lr, s15
    537c:	vstr	s15, [r2]
    5380:	b.n	4f10 <ceremony_animation()+0x20>
    5382:	nop
    5384:	nop.w
    5388:	.word	0xd2f1a9fc
    538c:	.word	0x3ff0624d
    5390:	.word	0x2000c288
    5394:	.word	0x20004dd4
    5398:	.word	0x200099b8
    539c:	.word	0x20005fd4
    53a0:	.word	0x200099cc
    53a4:	.word	0x2000d4b0
    53a8:	.word	0x43280000
    53ac:	.word	0x2000c0ac
    53b0:	.word	0x43148000
    53b4:	.word	0x2000c098
    53b8:	.word	0x400d4000
    53bc:	.word	0x20004dd0
    53c0:	.word	0x16c16c17
    53c4:	.word	0x00000000

000053c8 <_GLOBAL__sub_I_bri_level>:
void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
}
    53c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    53cc:	bl	bdcc <eeprom_initialize>

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
      _b = b;
    53d0:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53d4:	ldr	r3, [pc, #1000]	; (57c0 <_GLOBAL__sub_I_bri_level+0x3f8>)
      _s = s;
    53d6:	movs	r5, #255	; 0xff
      _b = b;
    53d8:	movs	r2, #240	; 0xf0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53da:	movs	r1, #212	; 0xd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53dc:	movw	r8, #277	; 0x115
      _s = s;
    53e0:	mov.w	lr, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53e4:	mov.w	fp, #244	; 0xf4
      _s = s;
      _b = b;
    53e8:	mov.w	r9, #186	; 0xba
    53ec:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53f0:	mov.w	ip, #120	; 0x78
      _s = s;
      _b = b;
    53f4:	strb	r6, [r3, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53f6:	movw	r6, #265	; 0x109
    53fa:	str.w	ip, [r3]
    53fe:	add.w	r0, r3, #4096	; 0x1000
    5402:	mov	r7, r6
    5404:	str.w	r8, [r3, #8]
    5408:	str.w	r8, [r3, #16]
    540c:	str.w	r8, [r3, #24]
      _s = s;
    5410:	strb.w	lr, [r3, #12]
    5414:	strb.w	lr, [r3, #20]
    5418:	strb.w	lr, [r3, #28]
      _b = b;
    541c:	strb	r2, [r3, #13]
    541e:	strb	r2, [r3, #21]
    5420:	strb	r2, [r3, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5422:	strb.w	r2, [r3, #60]	; 0x3c
    5426:	strb.w	r2, [r3, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    542a:	str.w	fp, [r3, #32]
    542e:	str.w	fp, [r3, #40]	; 0x28
    5432:	str.w	fp, [r3, #48]	; 0x30
    5436:	str.w	fp, [r3, #64]	; 0x40
    543a:	str.w	fp, [r3, #80]	; 0x50
      _s = s;
    543e:	strb.w	r1, [r3, #36]	; 0x24
    5442:	strb.w	r1, [r3, #44]	; 0x2c
    5446:	strb.w	r1, [r3, #52]	; 0x34
    544a:	strb.w	r1, [r3, #68]	; 0x44
    544e:	strb.w	r1, [r3, #84]	; 0x54
      _b = b;
    5452:	strb.w	r9, [r3, #37]	; 0x25
    5456:	strb.w	r9, [r3, #45]	; 0x2d
    545a:	strb.w	r9, [r3, #53]	; 0x35
    545e:	strb.w	r9, [r3, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5462:	str	r6, [r3, #56]	; 0x38
    5464:	str	r6, [r3, #72]	; 0x48
      _s = s;
      _b = b;
    5466:	strb.w	sl, [r3, #61]	; 0x3d
    546a:	strb.w	sl, [r3, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    546e:	strb	r5, [r3, #4]
      _b = b;
    5470:	strb.w	r9, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5474:	str	r6, [r3, #112]	; 0x70
      _s = s;
      _b = b;
    5476:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    547a:	str.w	fp, [r3, #88]	; 0x58
      _s = s;
    547e:	strb.w	r1, [r3, #92]	; 0x5c
      _b = b;
    5482:	strb.w	r9, [r3, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5486:	str.w	fp, [r3, #96]	; 0x60
      _s = s;
    548a:	strb.w	r1, [r3, #100]	; 0x64
      _b = b;
    548e:	strb.w	r9, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5492:	str.w	fp, [r3, #104]	; 0x68
      _s = s;
    5496:	strb.w	r1, [r3, #108]	; 0x6c
      _b = b;
    549a:	strb.w	r9, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    549e:	strb.w	r2, [r3, #116]	; 0x74
      _b = b;
    54a2:	strb.w	sl, [r3, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54a6:	str.w	ip, [r3, #120]	; 0x78
      _s = s;
      _b = b;
    54aa:	strb.w	r6, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54ae:	str.w	ip, [r3, #128]	; 0x80
      _s = s;
      _b = b;
    54b2:	strb.w	r6, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54b6:	str.w	ip, [r3, #136]	; 0x88
      _s = s;
      _b = b;
    54ba:	strb.w	r6, [r3, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54be:	str.w	ip, [r3, #144]	; 0x90
      _s = s;
      _b = b;
    54c2:	strb.w	r6, [r3, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54c6:	str.w	ip, [r3, #152]	; 0x98
      _s = s;
      _b = b;
    54ca:	strb.w	r6, [r3, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54ce:	str.w	ip, [r3, #160]	; 0xa0
      _s = s;
      _b = b;
    54d2:	strb.w	r6, [r3, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54d6:	str.w	ip, [r3, #168]	; 0xa8
      _s = s;
    54da:	strb.w	r5, [r3, #124]	; 0x7c
    54de:	strb.w	r5, [r3, #132]	; 0x84
    54e2:	strb.w	r5, [r3, #140]	; 0x8c
    54e6:	strb.w	r5, [r3, #148]	; 0x94
    54ea:	strb.w	r5, [r3, #156]	; 0x9c
    54ee:	strb.w	r5, [r3, #164]	; 0xa4
    54f2:	strb.w	r5, [r3, #172]	; 0xac
      _b = b;
    54f6:	strb.w	r6, [r3, #173]	; 0xad
    54fa:	strb.w	r6, [r3, #181]	; 0xb5
    54fe:	strb.w	r6, [r3, #189]	; 0xbd
    5502:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5506:	str.w	ip, [r3, #176]	; 0xb0
    550a:	str.w	ip, [r3, #184]	; 0xb8
    550e:	str.w	r7, [r3, #192]	; 0xc0
      _s = s;
    5512:	strb.w	r2, [r3, #196]	; 0xc4
      _b = b;
    5516:	strb.w	sl, [r3, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    551a:	str.w	r8, [r3, #200]	; 0xc8
      _s = s;
    551e:	strb.w	lr, [r3, #204]	; 0xcc
      _b = b;
    5522:	strb.w	r2, [r3, #205]	; 0xcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5526:	str.w	r8, [r3, #208]	; 0xd0
      _s = s;
    552a:	strb.w	lr, [r3, #212]	; 0xd4
      _b = b;
    552e:	strb.w	r2, [r3, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5532:	str.w	r8, [r3, #216]	; 0xd8
      _s = s;
    5536:	strb.w	lr, [r3, #220]	; 0xdc
      _b = b;
    553a:	strb.w	r2, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    553e:	str.w	fp, [r3, #224]	; 0xe0
      _s = s;
    5542:	strb.w	r1, [r3, #228]	; 0xe4
      _b = b;
    5546:	strb.w	r9, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    554a:	str.w	fp, [r3, #232]	; 0xe8
      _s = s;
    554e:	strb.w	r1, [r3, #236]	; 0xec
      _b = b;
    5552:	strb.w	r9, [r3, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5556:	str.w	fp, [r3, #240]	; 0xf0
      _s = s;
    555a:	strb.w	r1, [r3, #244]	; 0xf4
      _b = b;
    555e:	strb.w	r9, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5562:	str.w	fp, [r3, #248]	; 0xf8
      _s = s;
    5566:	strb.w	r1, [r3, #252]	; 0xfc
      _b = b;
    556a:	strb.w	r9, [r3, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    556e:	str.w	fp, [r3, #256]	; 0x100
      _s = s;
    5572:	strb.w	r1, [r3, #260]	; 0x104
    5576:	strb.w	r5, [r3, #180]	; 0xb4
    557a:	strb.w	r5, [r3, #188]	; 0xbc
      _b = b;
    557e:	strb.w	r9, [r3, #261]	; 0x105
    5582:	strb.w	r6, [r3, #301]	; 0x12d
    5586:	strb.w	r6, [r3, #309]	; 0x135
    558a:	strb.w	r6, [r3, #317]	; 0x13d
    558e:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5592:	str.w	r8, [r3, #264]	; 0x108
      _s = s;
      _b = b;
    5596:	strb.w	r6, [r3, #333]	; 0x14d
    559a:	strb.w	r6, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    559e:	mov.w	r6, #270	; 0x10e
      _s = s;
    55a2:	strb.w	lr, [r3, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55a6:	str.w	r6, [r3, #296]	; 0x128
    55aa:	str.w	r6, [r3, #304]	; 0x130
    55ae:	str.w	r6, [r3, #312]	; 0x138
      _s = s;
    55b2:	mvn.w	r6, #118	; 0x76
      _b = b;
    55b6:	strb.w	r2, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55ba:	strb.w	r6, [r3, #300]	; 0x12c
    55be:	strb.w	r6, [r3, #308]	; 0x134
    55c2:	strb.w	r6, [r3, #316]	; 0x13c
      _b = b;
    55c6:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55ca:	str.w	fp, [r3, #272]	; 0x110
      _s = s;
    55ce:	strb.w	r1, [r3, #276]	; 0x114
      _b = b;
    55d2:	strb.w	r9, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55d6:	str.w	r8, [r3, #280]	; 0x118
      _s = s;
    55da:	strb.w	lr, [r3, #284]	; 0x11c
      _b = b;
    55de:	strb.w	r2, [r3, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55e2:	str.w	fp, [r3, #288]	; 0x120
      _s = s;
    55e6:	strb.w	r1, [r3, #292]	; 0x124
      _b = b;
    55ea:	strb.w	r9, [r3, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55ee:	str.w	r7, [r3, #320]	; 0x140
      _s = s;
    55f2:	strb.w	r2, [r3, #324]	; 0x144
      _b = b;
    55f6:	strb.w	sl, [r3, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55fa:	str.w	ip, [r3, #328]	; 0x148
    55fe:	str.w	ip, [r3, #336]	; 0x150
    5602:	str.w	ip, [r3, #344]	; 0x158
      _s = s;
    5606:	strb.w	r5, [r3, #332]	; 0x14c
    560a:	strb.w	r5, [r3, #340]	; 0x154
    560e:	strb.w	r5, [r3, #348]	; 0x15c
      _b = b;
    5612:	strb.w	r6, [r3, #349]	; 0x15d
    5616:	strb.w	r6, [r3, #357]	; 0x165
    561a:	strb.w	r6, [r3, #365]	; 0x16d
    561e:	strb.w	r6, [r3, #373]	; 0x175
    5622:	strb.w	r6, [r3, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5626:	movw	r6, #265	; 0x109
    562a:	str.w	ip, [r3, #352]	; 0x160
    562e:	str.w	r6, [r3, #384]	; 0x180
    5632:	str.w	r6, [r3, #416]	; 0x1a0
    5636:	mov.w	r6, #270	; 0x10e
    563a:	str.w	ip, [r3, #360]	; 0x168
    563e:	mov	r7, r6
    5640:	str.w	ip, [r3, #368]	; 0x170
    5644:	str.w	ip, [r3, #376]	; 0x178
      _s = s;
    5648:	strb.w	r2, [r3, #388]	; 0x184
      _b = b;
    564c:	strb.w	sl, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5650:	str.w	r8, [r3, #392]	; 0x188
      _s = s;
    5654:	strb.w	lr, [r3, #396]	; 0x18c
      _b = b;
    5658:	strb.w	r2, [r3, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    565c:	str.w	r8, [r3, #400]	; 0x190
      _s = s;
    5660:	strb.w	lr, [r3, #404]	; 0x194
      _b = b;
    5664:	strb.w	r2, [r3, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5668:	str.w	r8, [r3, #408]	; 0x198
      _s = s;
    566c:	strb.w	lr, [r3, #412]	; 0x19c
      _b = b;
    5670:	strb.w	r2, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5674:	strb.w	r2, [r3, #420]	; 0x1a4
      _b = b;
    5678:	strb.w	sl, [r3, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    567c:	str.w	fp, [r3, #424]	; 0x1a8
      _s = s;
    5680:	strb.w	r1, [r3, #428]	; 0x1ac
      _b = b;
    5684:	strb.w	r9, [r3, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5688:	str.w	fp, [r3, #432]	; 0x1b0
      _s = s;
    568c:	strb.w	r1, [r3, #436]	; 0x1b4
    5690:	strb.w	r5, [r3, #356]	; 0x164
    5694:	strb.w	r5, [r3, #364]	; 0x16c
    5698:	strb.w	r5, [r3, #372]	; 0x174
    569c:	strb.w	r5, [r3, #380]	; 0x17c
      _b = b;
    56a0:	strb.w	r9, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56a4:	str.w	r6, [r3, #496]	; 0x1f0
      _s = s;
    56a8:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ac:	str.w	fp, [r3, #440]	; 0x1b8
      _s = s;
    56b0:	strb.w	r6, [r3, #500]	; 0x1f4
      _b = b;
    56b4:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56b8:	strb.w	r1, [r3, #444]	; 0x1bc
      _b = b;
    56bc:	strb.w	r6, [r3, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56c0:	mvn.w	r6, #118	; 0x76
      _b = b;
    56c4:	strb.w	r9, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56c8:	strb.w	r6, [r3, #508]	; 0x1fc
      _b = b;
    56cc:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56d0:	str.w	fp, [r3, #448]	; 0x1c0
      _s = s;
      _b = b;
    56d4:	strb.w	r6, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56d8:	mvn.w	r6, #118	; 0x76
    56dc:	strb.w	r1, [r3, #452]	; 0x1c4
    56e0:	strb.w	r6, [r3, #516]	; 0x204
      _b = b;
    56e4:	mvn.w	r6, #4
    56e8:	strb.w	r9, [r3, #453]	; 0x1c5
    56ec:	strb.w	r6, [r3, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56f0:	movs	r6, #141	; 0x8d
    56f2:	str.w	fp, [r3, #456]	; 0x1c8
    56f6:	str.w	r6, [r3, #520]	; 0x208
      _s = s;
      _b = b;
    56fa:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56fe:	strb.w	r1, [r3, #460]	; 0x1cc
      _b = b;
    5702:	strb.w	r9, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5706:	str.w	r8, [r3, #464]	; 0x1d0
      _s = s;
    570a:	strb.w	lr, [r3, #468]	; 0x1d4
      _b = b;
    570e:	strb.w	r2, [r3, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5712:	str.w	r8, [r3, #472]	; 0x1d8
      _s = s;
    5716:	strb.w	lr, [r3, #476]	; 0x1dc
      _b = b;
    571a:	strb.w	r2, [r3, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    571e:	str.w	fp, [r3, #480]	; 0x1e0
      _s = s;
    5722:	strb.w	r1, [r3, #484]	; 0x1e4
      _b = b;
    5726:	strb.w	r9, [r3, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    572a:	str.w	r8, [r3, #488]	; 0x1e8
      _s = s;
    572e:	strb.w	lr, [r3, #492]	; 0x1ec
      _b = b;
    5732:	strb.w	r2, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5736:	str.w	r7, [r3, #504]	; 0x1f8
    573a:	str.w	r7, [r3, #512]	; 0x200
      _s = s;
    573e:	strb.w	r1, [r3, #524]	; 0x20c
      _b = b;
    5742:	strb.w	sl, [r3, #525]	; 0x20d
    5746:	strb.w	r6, [r3, #533]	; 0x215
    574a:	strb.w	r6, [r3, #541]	; 0x21d
    574e:	strb.w	r6, [r3, #549]	; 0x225
    5752:	strb.w	r6, [r3, #557]	; 0x22d
    5756:	strb.w	r6, [r3, #565]	; 0x235
    575a:	strb.w	r6, [r3, #573]	; 0x23d
    575e:	strb.w	r6, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5762:	movw	r6, #265	; 0x109
    5766:	str.w	ip, [r3, #528]	; 0x210
    576a:	str.w	ip, [r3, #536]	; 0x218
    576e:	str.w	ip, [r3, #544]	; 0x220
    5772:	str.w	ip, [r3, #552]	; 0x228
    5776:	str.w	ip, [r3, #560]	; 0x230
    577a:	str.w	ip, [r3, #568]	; 0x238
    577e:	str.w	ip, [r3, #576]	; 0x240
    5782:	str.w	r8, [r3, #584]	; 0x248
      _s = s;
    5786:	strb.w	lr, [r3, #588]	; 0x24c
      _b = b;
    578a:	strb.w	r2, [r3, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    578e:	str.w	r8, [r3, #592]	; 0x250
      _s = s;
    5792:	strb.w	lr, [r3, #596]	; 0x254
      _b = b;
    5796:	strb.w	r2, [r3, #597]	; 0x255
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    579a:	str.w	r8, [r3, #600]	; 0x258
      _s = s;
    579e:	strb.w	lr, [r3, #604]	; 0x25c
      _b = b;
    57a2:	strb.w	r2, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57a6:	str.w	fp, [r3, #608]	; 0x260
      _s = s;
    57aa:	strb.w	r1, [r3, #612]	; 0x264
    57ae:	strb.w	r5, [r3, #532]	; 0x214
    57b2:	strb.w	r5, [r3, #540]	; 0x21c
    57b6:	strb.w	r5, [r3, #548]	; 0x224
    57ba:	strb.w	r5, [r3, #556]	; 0x22c
    57be:	b.n	57c4 <_GLOBAL__sub_I_bri_level+0x3fc>
    57c0:	.word	0x20004dd4
    57c4:	strb.w	r5, [r3, #564]	; 0x234
    57c8:	strb.w	r5, [r3, #572]	; 0x23c
    57cc:	strb.w	r5, [r3, #580]	; 0x244
      _b = b;
    57d0:	strb.w	r9, [r3, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57d4:	str.w	r6, [r3, #632]	; 0x278
    57d8:	str.w	r6, [r3, #648]	; 0x288
    57dc:	mov.w	r6, #270	; 0x10e
    57e0:	str.w	fp, [r3, #616]	; 0x268
    57e4:	str.w	r6, [r3, #696]	; 0x2b8
      _s = s;
    57e8:	mvn.w	r6, #118	; 0x76
    57ec:	strb.w	r1, [r3, #620]	; 0x26c
    57f0:	strb.w	r6, [r3, #700]	; 0x2bc
      _b = b;
    57f4:	mvn.w	r6, #4
    57f8:	strb.w	r9, [r3, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57fc:	str.w	fp, [r3, #624]	; 0x270
      _s = s;
    5800:	strb.w	r1, [r3, #628]	; 0x274
      _b = b;
    5804:	strb.w	r9, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5808:	strb.w	r2, [r3, #636]	; 0x27c
      _b = b;
    580c:	strb.w	sl, [r3, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5810:	str.w	fp, [r3, #640]	; 0x280
      _s = s;
    5814:	strb.w	r1, [r3, #644]	; 0x284
      _b = b;
    5818:	strb.w	r9, [r3, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    581c:	strb.w	r2, [r3, #652]	; 0x28c
      _b = b;
    5820:	strb.w	sl, [r3, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5824:	str.w	r8, [r3, #656]	; 0x290
      _s = s;
    5828:	strb.w	lr, [r3, #660]	; 0x294
      _b = b;
    582c:	strb.w	r2, [r3, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5830:	str.w	r8, [r3, #664]	; 0x298
      _s = s;
    5834:	strb.w	lr, [r3, #668]	; 0x29c
      _b = b;
    5838:	strb.w	r2, [r3, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    583c:	str.w	r8, [r3, #672]	; 0x2a0
      _s = s;
    5840:	strb.w	lr, [r3, #676]	; 0x2a4
      _b = b;
    5844:	strb.w	r2, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5848:	str.w	r8, [r3, #680]	; 0x2a8
      _s = s;
    584c:	strb.w	lr, [r3, #684]	; 0x2ac
      _b = b;
    5850:	strb.w	r2, [r3, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5854:	str.w	r8, [r3, #688]	; 0x2b0
      _s = s;
    5858:	strb.w	lr, [r3, #692]	; 0x2b4
      _b = b;
    585c:	strb.w	r2, [r3, #693]	; 0x2b5
    5860:	strb.w	r6, [r3, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5864:	movs	r6, #213	; 0xd5
    5866:	str.w	fp, [r3, #704]	; 0x2c0
    586a:	str.w	r6, [r3, #712]	; 0x2c8
      _s = s;
      _b = b;
    586e:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5872:	strb.w	r1, [r3, #708]	; 0x2c4
      _b = b;
    5876:	strb.w	r6, [r3, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    587a:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    587c:	strb.w	r9, [r3, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5880:	str.w	r6, [r3, #720]	; 0x2d0
    5884:	str.w	r6, [r3, #728]	; 0x2d8
      _s = s;
      _b = b;
    5888:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    588c:	strb.w	r1, [r3, #724]	; 0x2d4
      _b = b;
    5890:	strb.w	r6, [r3, #741]	; 0x2e5
    5894:	strb.w	r6, [r3, #749]	; 0x2ed
    5898:	strb.w	r6, [r3, #757]	; 0x2f5
    589c:	strb.w	r6, [r3, #765]	; 0x2fd
    58a0:	strb.w	r6, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58a4:	mvn.w	r6, #32
      _b = b;
    58a8:	strb.w	sl, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58ac:	strb.w	r6, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58b0:	movw	r6, #265	; 0x109
      _s = s;
    58b4:	strb.w	r1, [r3, #732]	; 0x2dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58b8:	mov	r7, r6
      _s = s;
      _b = b;
    58ba:	strb.w	sl, [r3, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58be:	str.w	ip, [r3, #736]	; 0x2e0
    58c2:	str.w	ip, [r3, #744]	; 0x2e8
    58c6:	str.w	ip, [r3, #752]	; 0x2f0
    58ca:	str.w	ip, [r3, #760]	; 0x2f8
    58ce:	str.w	ip, [r3, #768]	; 0x300
    58d2:	str.w	r8, [r3, #776]	; 0x308
      _s = s;
    58d6:	strb.w	lr, [r3, #780]	; 0x30c
      _b = b;
    58da:	strb.w	r2, [r3, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58de:	str.w	r8, [r3, #784]	; 0x310
      _s = s;
    58e2:	strb.w	lr, [r3, #788]	; 0x314
    58e6:	strb.w	r5, [r3, #740]	; 0x2e4
    58ea:	strb.w	r5, [r3, #748]	; 0x2ec
    58ee:	strb.w	r5, [r3, #756]	; 0x2f4
    58f2:	strb.w	r5, [r3, #764]	; 0x2fc
    58f6:	strb.w	r5, [r3, #772]	; 0x304
      _b = b;
    58fa:	strb.w	r2, [r3, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58fe:	str.w	r6, [r3, #808]	; 0x328
    5902:	movs	r6, #213	; 0xd5
    5904:	str.w	fp, [r3, #792]	; 0x318
    5908:	str.w	r6, [r3, #816]	; 0x330
      _s = s;
    590c:	mvn.w	r6, #32
    5910:	strb.w	r1, [r3, #796]	; 0x31c
    5914:	strb.w	r6, [r3, #820]	; 0x334
      _b = b;
    5918:	mov.w	r6, #89	; 0x59
    591c:	strb.w	r9, [r3, #797]	; 0x31d
    5920:	strb.w	r6, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5924:	movs	r6, #213	; 0xd5
    5926:	str.w	fp, [r3, #800]	; 0x320
    592a:	str.w	r6, [r3, #840]	; 0x348
      _s = s;
    592e:	mvn.w	r6, #32
    5932:	strb.w	r1, [r3, #804]	; 0x324
    5936:	strb.w	r6, [r3, #844]	; 0x34c
      _b = b;
    593a:	mov.w	r6, #89	; 0x59
    593e:	strb.w	r9, [r3, #805]	; 0x325
    5942:	strb.w	r6, [r3, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5946:	movs	r6, #213	; 0xd5
      _s = s;
    5948:	strb.w	r2, [r3, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    594c:	str.w	r6, [r3, #848]	; 0x350
      _s = s;
    5950:	mvn.w	r6, #32
      _b = b;
    5954:	strb.w	sl, [r3, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5958:	strb.w	r6, [r3, #852]	; 0x354
      _b = b;
    595c:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5960:	str.w	r7, [r3, #824]	; 0x338
      _s = s;
      _b = b;
    5964:	strb.w	r6, [r3, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5968:	movs	r6, #213	; 0xd5
      _s = s;
    596a:	strb.w	r2, [r3, #828]	; 0x33c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    596e:	str.w	r6, [r3, #856]	; 0x358
      _s = s;
    5972:	mvn.w	r6, #32
      _b = b;
    5976:	strb.w	sl, [r3, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    597a:	strb.w	r6, [r3, #860]	; 0x35c
      _b = b;
    597e:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5982:	str.w	fp, [r3, #832]	; 0x340
      _s = s;
      _b = b;
    5986:	strb.w	r6, [r3, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    598a:	movs	r6, #155	; 0x9b
      _s = s;
    598c:	strb.w	r1, [r3, #836]	; 0x344
      _b = b;
    5990:	strb.w	r9, [r3, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5994:	str.w	r7, [r3, #864]	; 0x360
      _s = s;
    5998:	strb.w	r2, [r3, #868]	; 0x364
      _b = b;
    599c:	strb.w	sl, [r3, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59a0:	str.w	r7, [r3, #872]	; 0x368
      _s = s;
    59a4:	strb.w	r2, [r3, #876]	; 0x36c
      _b = b;
    59a8:	strb.w	sl, [r3, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ac:	str.w	r7, [r3, #880]	; 0x370
    59b0:	str.w	r7, [r3, #896]	; 0x380
    59b4:	mov	r7, r6
    59b6:	str.w	r6, [r3, #904]	; 0x388
      _s = s;
      _b = b;
    59ba:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59be:	strb.w	r2, [r3, #884]	; 0x374
      _b = b;
    59c2:	strb.w	r6, [r3, #909]	; 0x38d
    59c6:	mvn.w	r6, #56	; 0x38
    59ca:	strb.w	sl, [r3, #885]	; 0x375
    59ce:	strb.w	r6, [r3, #917]	; 0x395
    59d2:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59d6:	str.w	fp, [r3, #888]	; 0x378
      _s = s;
      _b = b;
    59da:	strb.w	r6, [r3, #925]	; 0x39d
    59de:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59e2:	strb.w	r1, [r3, #892]	; 0x37c
      _b = b;
    59e6:	strb.w	r6, [r3, #933]	; 0x3a5
    59ea:	mov.w	r6, #0
    59ee:	strb.w	r9, [r3, #893]	; 0x37d
    59f2:	strb.w	r6, [r3, #941]	; 0x3ad
    59f6:	strb.w	r6, [r3, #949]	; 0x3b5
    59fa:	strb.w	r6, [r3, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59fe:	mvn.w	r6, #76	; 0x4c
    5a02:	strb.w	r2, [r3, #900]	; 0x384
    5a06:	strb.w	r6, [r3, #908]	; 0x38c
    5a0a:	strb.w	r6, [r3, #916]	; 0x394
    5a0e:	strb.w	r6, [r3, #924]	; 0x39c
    5a12:	strb.w	r6, [r3, #932]	; 0x3a4
      _b = b;
    5a16:	mov.w	r6, #0
    5a1a:	strb.w	sl, [r3, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a1e:	str.w	r7, [r3, #912]	; 0x390
    5a22:	str.w	r7, [r3, #920]	; 0x398
    5a26:	str.w	r7, [r3, #928]	; 0x3a0
    5a2a:	str.w	ip, [r3, #936]	; 0x3a8
    5a2e:	str.w	ip, [r3, #944]	; 0x3b0
    5a32:	str.w	ip, [r3, #952]	; 0x3b8
    5a36:	str.w	ip, [r3, #960]	; 0x3c0
      _s = s;
    5a3a:	strb.w	r5, [r3, #940]	; 0x3ac
    5a3e:	strb.w	r5, [r3, #948]	; 0x3b4
    5a42:	strb.w	r5, [r3, #956]	; 0x3bc
    5a46:	strb.w	r5, [r3, #964]	; 0x3c4
      _b = b;
    5a4a:	strb.w	r6, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a4e:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a52:	str.w	r8, [r3, #968]	; 0x3c8
      _s = s;
    5a56:	strb.w	r6, [r3, #1012]	; 0x3f4
      _b = b;
    5a5a:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a5e:	strb.w	lr, [r3, #972]	; 0x3cc
      _b = b;
    5a62:	strb.w	r6, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a66:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    5a68:	strb.w	r2, [r3, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a6c:	str.w	r6, [r3, #1016]	; 0x3f8
      _s = s;
    5a70:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a74:	str.w	r8, [r3, #976]	; 0x3d0
      _s = s;
    5a78:	strb.w	r6, [r3, #1020]	; 0x3fc
      _b = b;
    5a7c:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a80:	strb.w	lr, [r3, #980]	; 0x3d4
      _b = b;
    5a84:	strb.w	r6, [r3, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a88:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    5a8a:	strb.w	r2, [r3, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a8e:	str.w	r6, [r3, #1032]	; 0x408
      _s = s;
    5a92:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a96:	str.w	r8, [r3, #984]	; 0x3d8
      _s = s;
    5a9a:	strb.w	r6, [r3, #1036]	; 0x40c
      _b = b;
    5a9e:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5aa2:	strb.w	lr, [r3, #988]	; 0x3dc
      _b = b;
    5aa6:	strb.w	r6, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aaa:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    5aac:	strb.w	r2, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ab0:	str.w	r6, [r3, #1040]	; 0x410
      _s = s;
    5ab4:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ab8:	str.w	r8, [r3, #992]	; 0x3e0
      _s = s;
    5abc:	strb.w	r6, [r3, #1044]	; 0x414
      _b = b;
    5ac0:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ac4:	strb.w	lr, [r3, #996]	; 0x3e4
      _b = b;
    5ac8:	strb.w	r6, [r3, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5acc:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    5ad0:	strb.w	r2, [r3, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ad4:	str.w	r6, [r3, #1048]	; 0x418
    5ad8:	movs	r6, #141	; 0x8d
    5ada:	str.w	r8, [r3, #1000]	; 0x3e8
      _s = s;
    5ade:	strb.w	lr, [r3, #1004]	; 0x3ec
      _b = b;
    5ae2:	strb.w	r2, [r3, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ae6:	str.w	r7, [r3, #1008]	; 0x3f0
    5aea:	str.w	fp, [r3, #1024]	; 0x400
      _s = s;
    5aee:	strb.w	r1, [r3, #1028]	; 0x404
      _b = b;
    5af2:	strb.w	r9, [r3, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5af6:	strb.w	r2, [r3, #1052]	; 0x41c
      _b = b;
    5afa:	strb.w	sl, [r3, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5afe:	str.w	r6, [r3, #1096]	; 0x448
    5b02:	movs	r6, #155	; 0x9b
    5b04:	str.w	fp, [r3, #1056]	; 0x420
    5b08:	mov	r7, r6
    5b0a:	str.w	r6, [r3, #1104]	; 0x450
      _s = s;
    5b0e:	mvn.w	r6, #76	; 0x4c
    5b12:	strb.w	r1, [r3, #1060]	; 0x424
      _b = b;
    5b16:	strb.w	r9, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b1a:	strb.w	r6, [r3, #1108]	; 0x454
      _b = b;
    5b1e:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b22:	str.w	fp, [r3, #1064]	; 0x428
      _s = s;
      _b = b;
    5b26:	strb.w	r6, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b2a:	mvn.w	r6, #76	; 0x4c
    5b2e:	strb.w	r1, [r3, #1068]	; 0x42c
    5b32:	strb.w	r6, [r3, #1116]	; 0x45c
      _b = b;
    5b36:	mvn.w	r6, #56	; 0x38
    5b3a:	strb.w	r9, [r3, #1069]	; 0x42d
    5b3e:	strb.w	r6, [r3, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b42:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b46:	str.w	r8, [r3, #1072]	; 0x430
      _s = s;
    5b4a:	strb.w	r6, [r3, #1124]	; 0x464
      _b = b;
    5b4e:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b52:	strb.w	lr, [r3, #1076]	; 0x434
      _b = b;
    5b56:	strb.w	r6, [r3, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b5a:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    5b5c:	strb.w	r2, [r3, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b60:	str.w	r6, [r3, #1128]	; 0x468
      _s = s;
      _b = b;
    5b64:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b68:	str.w	fp, [r3, #1080]	; 0x438
      _s = s;
    5b6c:	strb.w	r1, [r3, #1084]	; 0x43c
      _b = b;
    5b70:	strb.w	r9, [r3, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b74:	str.w	fp, [r3, #1088]	; 0x440
      _s = s;
    5b78:	strb.w	r1, [r3, #1092]	; 0x444
      _b = b;
    5b7c:	strb.w	r9, [r3, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b80:	strb.w	r1, [r3, #1100]	; 0x44c
      _b = b;
    5b84:	strb.w	sl, [r3, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b88:	str.w	r7, [r3, #1112]	; 0x458
    5b8c:	str.w	r7, [r3, #1120]	; 0x460
      _s = s;
    5b90:	strb.w	r1, [r3, #1132]	; 0x46c
      _b = b;
    5b94:	strb.w	sl, [r3, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b98:	str.w	ip, [r3, #1136]	; 0x470
      _s = s;
    5b9c:	strb.w	r5, [r3, #1140]	; 0x474
      _b = b;
    5ba0:	strb.w	r6, [r3, #1141]	; 0x475
    5ba4:	strb.w	r6, [r3, #1149]	; 0x47d
    5ba8:	strb.w	r6, [r3, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bac:	movw	r6, #265	; 0x109
    5bb0:	str.w	ip, [r3, #1144]	; 0x478
    5bb4:	str.w	r6, [r3, #1160]	; 0x488
    5bb8:	mov.w	r6, #270	; 0x10e
    5bbc:	str.w	ip, [r3, #1152]	; 0x480
    5bc0:	str.w	r6, [r3, #1184]	; 0x4a0
      _s = s;
    5bc4:	mvn.w	r6, #118	; 0x76
    5bc8:	strb.w	r2, [r3, #1164]	; 0x48c
    5bcc:	strb.w	r6, [r3, #1188]	; 0x4a4
      _b = b;
    5bd0:	mvn.w	r6, #4
    5bd4:	strb.w	sl, [r3, #1165]	; 0x48d
    5bd8:	strb.w	r6, [r3, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bdc:	movs	r6, #155	; 0x9b
    5bde:	str.w	r8, [r3, #1168]	; 0x490
    5be2:	mov	r7, r6
    5be4:	str.w	r6, [r3, #1192]	; 0x4a8
      _s = s;
    5be8:	mvn.w	r6, #76	; 0x4c
    5bec:	strb.w	lr, [r3, #1172]	; 0x494
      _b = b;
    5bf0:	strb.w	r2, [r3, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bf4:	strb.w	r6, [r3, #1196]	; 0x4ac
      _b = b;
    5bf8:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bfc:	str.w	r7, [r3, #1200]	; 0x4b0
      _s = s;
      _b = b;
    5c00:	strb.w	r6, [r3, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c04:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c08:	str.w	r7, [r3, #1208]	; 0x4b8
      _s = s;
    5c0c:	strb.w	r6, [r3, #1204]	; 0x4b4
      _b = b;
    5c10:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c14:	str.w	fp, [r3, #1216]	; 0x4c0
      _s = s;
      _b = b;
    5c18:	strb.w	r6, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c1c:	mvn.w	r6, #76	; 0x4c
    5c20:	strb.w	r1, [r3, #1220]	; 0x4c4
    5c24:	strb.w	r6, [r3, #1212]	; 0x4bc
      _b = b;
    5c28:	mvn.w	r6, #56	; 0x38
    5c2c:	strb.w	r9, [r3, #1221]	; 0x4c5
    5c30:	strb.w	r6, [r3, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c34:	movs	r6, #213	; 0xd5
      _s = s;
    5c36:	strb.w	r5, [r3, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c3a:	str.w	r6, [r3, #1224]	; 0x4c8
      _s = s;
    5c3e:	mvn.w	r6, #32
    5c42:	strb.w	r5, [r3, #1156]	; 0x484
    5c46:	strb.w	r6, [r3, #1228]	; 0x4cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c4a:	movw	r6, #303	; 0x12f
    5c4e:	ldr	r4, [pc, #1008]	; (6040 <_GLOBAL__sub_I_bri_level+0xc78>)
    5c50:	str.w	r6, [r3, #1176]	; 0x498
      _s = s;
    5c54:	mvn.w	r6, #62	; 0x3e
    5c58:	strb.w	r6, [r3, #1180]	; 0x49c
      _b = b;
    5c5c:	mvn.w	r6, #36	; 0x24
    5c60:	strb.w	r6, [r3, #1181]	; 0x49d
    5c64:	mov.w	r6, #89	; 0x59
    5c68:	strb.w	r6, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c6c:	mov.w	r6, #270	; 0x10e
    5c70:	str.w	fp, [r3, #1232]	; 0x4d0
    5c74:	str.w	r6, [r3, #1288]	; 0x508
      _s = s;
    5c78:	mvn.w	r6, #118	; 0x76
    5c7c:	strb.w	r1, [r3, #1236]	; 0x4d4
    5c80:	strb.w	r6, [r3, #1292]	; 0x50c
      _b = b;
    5c84:	mvn.w	r6, #4
    5c88:	strb.w	r9, [r3, #1237]	; 0x4d5
    5c8c:	strb.w	r6, [r3, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c90:	movs	r6, #155	; 0x9b
    5c92:	str.w	fp, [r3, #1240]	; 0x4d8
    5c96:	mov	r7, r6
    5c98:	str.w	r6, [r3, #1296]	; 0x510
      _s = s;
    5c9c:	mvn.w	r6, #76	; 0x4c
    5ca0:	strb.w	r1, [r3, #1244]	; 0x4dc
      _b = b;
    5ca4:	strb.w	r9, [r3, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ca8:	strb.w	r6, [r3, #1300]	; 0x514
      _b = b;
    5cac:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cb0:	str.w	fp, [r3, #1248]	; 0x4e0
      _s = s;
      _b = b;
    5cb4:	strb.w	r6, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5cb8:	mvn.w	r6, #76	; 0x4c
    5cbc:	strb.w	r1, [r3, #1252]	; 0x4e4
    5cc0:	strb.w	r6, [r3, #1308]	; 0x51c
      _b = b;
    5cc4:	mvn.w	r6, #56	; 0x38
    5cc8:	strb.w	r9, [r3, #1253]	; 0x4e5
    5ccc:	strb.w	r6, [r3, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5cd0:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cd4:	str.w	fp, [r3, #1256]	; 0x4e8
      _s = s;
    5cd8:	strb.w	r6, [r3, #1316]	; 0x524
      _b = b;
    5cdc:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ce0:	strb.w	r1, [r3, #1260]	; 0x4ec
      _b = b;
    5ce4:	strb.w	r9, [r3, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ce8:	str.w	r8, [r3, #1264]	; 0x4f0
      _s = s;
    5cec:	strb.w	lr, [r3, #1268]	; 0x4f4
      _b = b;
    5cf0:	strb.w	r2, [r3, #1269]	; 0x4f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cf4:	str.w	r8, [r3, #1272]	; 0x4f8
      _s = s;
    5cf8:	strb.w	lr, [r3, #1276]	; 0x4fc
      _b = b;
    5cfc:	strb.w	r2, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d00:	str.w	fp, [r3, #1280]	; 0x500
      _s = s;
    5d04:	strb.w	r1, [r3, #1284]	; 0x504
      _b = b;
    5d08:	strb.w	r9, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d0c:	str.w	r7, [r3, #1304]	; 0x518
    5d10:	str.w	r7, [r3, #1312]	; 0x520
      _s = s;
      _b = b;
    5d14:	strb.w	r6, [r3, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d18:	movs	r6, #73	; 0x49
      _s = s;
    5d1a:	strb.w	r1, [r3, #1332]	; 0x534
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d1e:	str.w	r6, [r3, #1320]	; 0x528
    5d22:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    5d24:	strb.w	sl, [r3, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d28:	str.w	r6, [r3, #1328]	; 0x530
      _s = s;
      _b = b;
    5d2c:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d30:	str.w	ip, [r3, #1336]	; 0x538
      _s = s;
      _b = b;
    5d34:	strb.w	r6, [r3, #1341]	; 0x53d
    5d38:	strb.w	r6, [r3, #1349]	; 0x545
    5d3c:	strb.w	r6, [r3, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d40:	mov.w	r6, #270	; 0x10e
    5d44:	str.w	ip, [r3, #1344]	; 0x540
    5d48:	str.w	r6, [r3, #1368]	; 0x558
      _s = s;
    5d4c:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d50:	str.w	ip, [r3, #1352]	; 0x548
      _s = s;
    5d54:	strb.w	r6, [r3, #1372]	; 0x55c
      _b = b;
    5d58:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d5c:	str.w	fp, [r3, #1360]	; 0x550
      _s = s;
      _b = b;
    5d60:	strb.w	r6, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d64:	movs	r6, #73	; 0x49
      _s = s;
    5d66:	strb.w	r1, [r3, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d6a:	str.w	r6, [r3, #1376]	; 0x560
    5d6e:	str.w	r6, [r3, #1384]	; 0x568
    5d72:	movs	r6, #155	; 0x9b
      _s = s;
      _b = b;
    5d74:	strb.w	r9, [r3, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d78:	str.w	r6, [r3, #1392]	; 0x570
      _s = s;
    5d7c:	mvn.w	r6, #76	; 0x4c
    5d80:	strb.w	r5, [r3, #1340]	; 0x53c
    5d84:	strb.w	r6, [r3, #1396]	; 0x574
      _b = b;
    5d88:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d8c:	strb.w	r5, [r3, #1348]	; 0x544
      _b = b;
    5d90:	strb.w	r6, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d94:	movs	r6, #213	; 0xd5
      _s = s;
    5d96:	strb.w	r5, [r3, #1356]	; 0x54c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d9a:	str.w	r6, [r3, #1400]	; 0x578
      _s = s;
    5d9e:	mvn.w	r6, #32
    5da2:	strb.w	r6, [r3, #1404]	; 0x57c
    5da6:	mov.w	r6, #9
    5daa:	strb.w	r6, [r3, #1324]	; 0x52c
    5dae:	strb.w	r6, [r3, #1380]	; 0x564
    5db2:	strb.w	r6, [r3, #1388]	; 0x56c
      _b = b;
    5db6:	mvn.w	r6, #3
    5dba:	strb.w	r6, [r3, #1325]	; 0x52d
    5dbe:	strb.w	r6, [r3, #1381]	; 0x565
    5dc2:	strb.w	r6, [r3, #1389]	; 0x56d
    5dc6:	mov.w	r6, #89	; 0x59
    5dca:	strb.w	r6, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dce:	movw	r6, #265	; 0x109
      _s = s;
    5dd2:	strb.w	r2, [r3, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dd6:	str.w	r6, [r3, #1408]	; 0x580
    5dda:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    5dde:	strb.w	sl, [r3, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5de2:	mov	r7, r6
    5de4:	str.w	r6, [r3, #1424]	; 0x590
      _s = s;
    5de8:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dec:	str.w	r8, [r3, #1416]	; 0x588
    5df0:	str.w	r7, [r3, #1480]	; 0x5c8
      _s = s;
    5df4:	strb.w	r6, [r3, #1428]	; 0x594
      _b = b;
    5df8:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dfc:	strb.w	lr, [r3, #1420]	; 0x58c
      _b = b;
    5e00:	strb.w	r6, [r3, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e04:	mvn.w	r6, #118	; 0x76
      _b = b;
    5e08:	strb.w	r2, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e0c:	strb.w	r6, [r3, #1484]	; 0x5cc
      _b = b;
    5e10:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e14:	str.w	r8, [r3, #1432]	; 0x598
      _s = s;
      _b = b;
    5e18:	strb.w	r6, [r3, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e1c:	movs	r6, #155	; 0x9b
      _s = s;
    5e1e:	strb.w	lr, [r3, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e22:	mov	r7, r6
    5e24:	str.w	r6, [r3, #1488]	; 0x5d0
      _s = s;
    5e28:	mvn.w	r6, #76	; 0x4c
      _b = b;
    5e2c:	strb.w	r2, [r3, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e30:	str.w	fp, [r3, #1440]	; 0x5a0
      _s = s;
    5e34:	strb.w	r6, [r3, #1492]	; 0x5d4
      _b = b;
    5e38:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e3c:	strb.w	r1, [r3, #1444]	; 0x5a4
      _b = b;
    5e40:	strb.w	r9, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e44:	str.w	fp, [r3, #1448]	; 0x5a8
      _s = s;
    5e48:	strb.w	r1, [r3, #1452]	; 0x5ac
      _b = b;
    5e4c:	strb.w	r9, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e50:	str.w	fp, [r3, #1456]	; 0x5b0
      _s = s;
    5e54:	strb.w	r1, [r3, #1460]	; 0x5b4
      _b = b;
    5e58:	strb.w	r9, [r3, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e5c:	str.w	fp, [r3, #1464]	; 0x5b8
      _s = s;
    5e60:	strb.w	r1, [r3, #1468]	; 0x5bc
      _b = b;
    5e64:	strb.w	r9, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e68:	str.w	r8, [r3, #1472]	; 0x5c0
      _s = s;
    5e6c:	strb.w	lr, [r3, #1476]	; 0x5c4
      _b = b;
    5e70:	strb.w	r2, [r3, #1477]	; 0x5c5
    5e74:	strb.w	r6, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e78:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e7c:	str.w	r7, [r3, #1496]	; 0x5d8
      _s = s;
    5e80:	strb.w	r6, [r3, #1500]	; 0x5dc
      _b = b;
    5e84:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e88:	strb.w	r1, [r3, #1508]	; 0x5e4
      _b = b;
    5e8c:	strb.w	r6, [r3, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e90:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    5e92:	strb.w	sl, [r3, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e96:	str.w	r6, [r3, #1504]	; 0x5e0
    5e9a:	movs	r6, #155	; 0x9b
    5e9c:	str.w	ip, [r3, #1528]	; 0x5f8
    5ea0:	str.w	r6, [r3, #1512]	; 0x5e8
      _s = s;
    5ea4:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ea8:	str.w	ip, [r3, #1536]	; 0x600
      _s = s;
    5eac:	strb.w	r6, [r3, #1516]	; 0x5ec
      _b = b;
    5eb0:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eb4:	str.w	ip, [r3, #1544]	; 0x608
      _s = s;
      _b = b;
    5eb8:	strb.w	r6, [r3, #1517]	; 0x5ed
    5ebc:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ec0:	str.w	fp, [r3, #1552]	; 0x610
      _s = s;
      _b = b;
    5ec4:	strb.w	r6, [r3, #1525]	; 0x5f5
    5ec8:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ecc:	strb.w	r1, [r3, #1556]	; 0x614
      _b = b;
    5ed0:	strb.w	r6, [r3, #1533]	; 0x5fd
    5ed4:	strb.w	r6, [r3, #1541]	; 0x605
    5ed8:	strb.w	r6, [r3, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5edc:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    5ee0:	strb.w	r9, [r3, #1557]	; 0x615
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ee4:	str.w	r6, [r3, #1560]	; 0x618
      _s = s;
    5ee8:	mvn.w	r6, #118	; 0x76
    5eec:	strb.w	r5, [r3, #1532]	; 0x5fc
    5ef0:	strb.w	r6, [r3, #1564]	; 0x61c
      _b = b;
    5ef4:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ef8:	strb.w	r5, [r3, #1540]	; 0x604
      _b = b;
    5efc:	strb.w	r6, [r3, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f00:	movs	r6, #73	; 0x49
      _s = s;
    5f02:	strb.w	r5, [r3, #1548]	; 0x60c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f06:	str.w	r6, [r3, #1568]	; 0x620
      _s = s;
    5f0a:	mov.w	r6, #9
    5f0e:	strb.w	r6, [r3, #1572]	; 0x624
      _b = b;
    5f12:	mvn.w	r6, #3
    5f16:	strb.w	r6, [r3, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f1a:	mov.w	r6, #270	; 0x10e
    5f1e:	str.w	r6, [r3, #1576]	; 0x628
      _s = s;
    5f22:	mvn.w	r6, #118	; 0x76
    5f26:	strb.w	r6, [r3, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f2a:	movs	r6, #65	; 0x41
    5f2c:	str.w	r6, [r3, #1520]	; 0x5f0
      _s = s;
    5f30:	mvn.w	r6, #48	; 0x30
    5f34:	strb.w	r6, [r3, #1524]	; 0x5f4
      _b = b;
    5f38:	mvn.w	r6, #4
    5f3c:	strb.w	r6, [r3, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f40:	movs	r6, #155	; 0x9b
      _s = s;
    5f42:	strb.w	r1, [r3, #1596]	; 0x63c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f46:	str.w	r6, [r3, #1584]	; 0x630
      _s = s;
    5f4a:	mvn.w	r6, #76	; 0x4c
      _b = b;
    5f4e:	strb.w	sl, [r3, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f52:	strb.w	r6, [r3, #1588]	; 0x634
      _b = b;
    5f56:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f5a:	str.w	r8, [r3, #1608]	; 0x648
      _s = s;
      _b = b;
    5f5e:	strb.w	r6, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f62:	movs	r6, #141	; 0x8d
      _s = s;
    5f64:	strb.w	lr, [r3, #1612]	; 0x64c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f68:	str.w	r6, [r3, #1592]	; 0x638
    5f6c:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    5f6e:	strb.w	r2, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f72:	str.w	r6, [r3, #1600]	; 0x640
      _s = s;
    5f76:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f7a:	str.w	r8, [r3, #1616]	; 0x650
      _s = s;
    5f7e:	strb.w	r6, [r3, #1604]	; 0x644
      _b = b;
    5f82:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f86:	strb.w	lr, [r3, #1620]	; 0x654
      _b = b;
    5f8a:	strb.w	r6, [r3, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f8e:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    5f92:	strb.w	r2, [r3, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f96:	str.w	r8, [r3, #1624]	; 0x658
      _s = s;
    5f9a:	strb.w	lr, [r3, #1628]	; 0x65c
      _b = b;
    5f9e:	strb.w	r2, [r3, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fa2:	str.w	fp, [r3, #1632]	; 0x660
      _s = s;
    5fa6:	strb.w	r1, [r3, #1636]	; 0x664
      _b = b;
    5faa:	strb.w	r9, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fae:	str.w	fp, [r3, #1640]	; 0x668
      _s = s;
    5fb2:	strb.w	r1, [r3, #1644]	; 0x66c
      _b = b;
    5fb6:	strb.w	r9, [r3, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fba:	str.w	fp, [r3, #1648]	; 0x670
      _s = s;
    5fbe:	strb.w	r1, [r3, #1652]	; 0x674
      _b = b;
    5fc2:	strb.w	r9, [r3, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fc6:	str.w	r8, [r3, #1656]	; 0x678
      _s = s;
    5fca:	strb.w	lr, [r3, #1660]	; 0x67c
      _b = b;
    5fce:	strb.w	r2, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fd2:	str.w	fp, [r3, #1664]	; 0x680
      _s = s;
    5fd6:	strb.w	r1, [r3, #1668]	; 0x684
      _b = b;
    5fda:	strb.w	r9, [r3, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fde:	str.w	r6, [r3, #1672]	; 0x688
      _s = s;
    5fe2:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fe6:	str.w	fp, [r3, #1680]	; 0x690
      _s = s;
    5fea:	strb.w	r6, [r3, #1676]	; 0x68c
      _b = b;
    5fee:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ff2:	strb.w	r1, [r3, #1684]	; 0x694
      _b = b;
    5ff6:	strb.w	r6, [r3, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ffa:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    5ffc:	strb.w	r9, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6000:	str.w	r6, [r3, #1688]	; 0x698
      _s = s;
      _b = b;
    6004:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6008:	strb.w	r1, [r3, #1692]	; 0x69c
      _b = b;
    600c:	strb.w	r6, [r3, #1701]	; 0x6a5
    6010:	strb.w	r6, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6014:	movs	r6, #73	; 0x49
      _s = s;
      _b = b;
    6016:	strb.w	sl, [r3, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    601a:	str.w	r6, [r3, #1712]	; 0x6b0
      _s = s;
    601e:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6022:	str.w	ip, [r3, #1728]	; 0x6c0
      _s = s;
    6026:	strb.w	r6, [r3, #1716]	; 0x6b4
      _b = b;
    602a:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    602e:	str.w	ip, [r3, #1736]	; 0x6c8
      _s = s;
      _b = b;
    6032:	strb.w	r6, [r3, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6036:	mov.w	r6, #270	; 0x10e
      _s = s;
    603a:	strb.w	r2, [r3, #1748]	; 0x6d4
    603e:	b.n	6044 <_GLOBAL__sub_I_bri_level+0xc7c>
    6040:	.word	0x20005fd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6044:	str.w	r6, [r3, #1720]	; 0x6b8
      _s = s;
    6048:	mvn.w	r6, #118	; 0x76
      _b = b;
    604c:	strb.w	sl, [r3, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6050:	strb.w	r6, [r3, #1724]	; 0x6bc
      _b = b;
    6054:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6058:	str.w	r8, [r3, #1752]	; 0x6d8
      _s = s;
      _b = b;
    605c:	strb.w	r6, [r3, #1725]	; 0x6bd
    6060:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6064:	strb.w	lr, [r3, #1756]	; 0x6dc
      _b = b;
    6068:	strb.w	r6, [r3, #1733]	; 0x6c5
    606c:	strb.w	r6, [r3, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6070:	movw	r6, #265	; 0x109
      _s = s;
    6074:	strb.w	r5, [r3, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6078:	str.w	r6, [r3, #1744]	; 0x6d0
    607c:	movs	r6, #192	; 0xc0
      _s = s;
    607e:	strb.w	r5, [r3, #1740]	; 0x6cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6082:	str.w	r6, [r3, #1696]	; 0x6a0
    6086:	str.w	r6, [r3, #1704]	; 0x6a8
      _s = s;
    608a:	mvn.w	r6, #71	; 0x47
    608e:	strb.w	r6, [r3, #1700]	; 0x6a4
    6092:	strb.w	r6, [r3, #1708]	; 0x6ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6096:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    609a:	strb.w	r2, [r3, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    609e:	str.w	r6, [r3, #1760]	; 0x6e0
    60a2:	movs	r6, #141	; 0x8d
      _s = s;
    60a4:	strb.w	r2, [r3, #1764]	; 0x6e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60a8:	str.w	r6, [r3, #1776]	; 0x6f0
    60ac:	str.w	r6, [r3, #1784]	; 0x6f8
      _s = s;
      _b = b;
    60b0:	mov.w	r6, #0
    60b4:	strb.w	sl, [r3, #1765]	; 0x6e5
    60b8:	strb.w	r6, [r3, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60bc:	mov.w	r6, #270	; 0x10e
    60c0:	str.w	fp, [r3, #1768]	; 0x6e8
    60c4:	mov	r7, r6
    60c6:	str.w	r6, [r3, #1808]	; 0x710
      _s = s;
    60ca:	mvn.w	r6, #118	; 0x76
    60ce:	strb.w	r1, [r3, #1772]	; 0x6ec
      _b = b;
    60d2:	strb.w	r9, [r3, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60d6:	strb.w	r6, [r3, #1812]	; 0x714
      _b = b;
    60da:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60de:	strb.w	r1, [r3, #1780]	; 0x6f4
      _b = b;
    60e2:	strb.w	r6, [r3, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60e6:	mvn.w	r6, #118	; 0x76
      _b = b;
    60ea:	strb.w	sl, [r3, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60ee:	strb.w	r1, [r3, #1788]	; 0x6fc
      _b = b;
    60f2:	strb.w	sl, [r3, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f6:	str.w	ip, [r3, #1792]	; 0x700
    60fa:	str.w	fp, [r3, #1800]	; 0x708
      _s = s;
    60fe:	strb.w	r1, [r3, #1804]	; 0x70c
      _b = b;
    6102:	strb.w	r9, [r3, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6106:	str.w	fp, [r3, #1816]	; 0x718
      _s = s;
    610a:	strb.w	r1, [r3, #1820]	; 0x71c
      _b = b;
    610e:	strb.w	r9, [r3, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6112:	str.w	r8, [r3, #1824]	; 0x720
      _s = s;
    6116:	strb.w	lr, [r3, #1828]	; 0x724
      _b = b;
    611a:	strb.w	r2, [r3, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    611e:	str.w	r8, [r3, #1832]	; 0x728
      _s = s;
    6122:	strb.w	lr, [r3, #1836]	; 0x72c
      _b = b;
    6126:	strb.w	r2, [r3, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    612a:	str.w	r8, [r3, #1840]	; 0x730
      _s = s;
    612e:	strb.w	lr, [r3, #1844]	; 0x734
    6132:	strb.w	r5, [r3, #1796]	; 0x704
      _b = b;
    6136:	strb.w	r2, [r3, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    613a:	strb.w	r6, [r3, #1860]	; 0x744
      _b = b;
    613e:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6142:	str.w	r7, [r3, #1856]	; 0x740
      _s = s;
      _b = b;
    6146:	strb.w	r6, [r3, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    614a:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    614e:	str.w	r7, [r3, #1864]	; 0x748
      _s = s;
    6152:	strb.w	r6, [r3, #1868]	; 0x74c
      _b = b;
    6156:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    615a:	str.w	r7, [r3, #1880]	; 0x758
      _s = s;
      _b = b;
    615e:	strb.w	r6, [r3, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6162:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6166:	str.w	r8, [r3, #1848]	; 0x738
      _s = s;
    616a:	strb.w	r6, [r3, #1884]	; 0x75c
      _b = b;
    616e:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6172:	strb.w	lr, [r3, #1852]	; 0x73c
      _b = b;
    6176:	strb.w	r6, [r3, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    617a:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    617c:	strb.w	r2, [r3, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6180:	mov	r7, r6
    6182:	str.w	r6, [r3, #1888]	; 0x760
      _s = s;
    6186:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    618a:	str.w	fp, [r3, #1872]	; 0x750
      _s = s;
    618e:	strb.w	r1, [r3, #1876]	; 0x754
    6192:	strb.w	r6, [r3, #1892]	; 0x764
      _b = b;
    6196:	mvn.w	r6, #39	; 0x27
    619a:	strb.w	r9, [r3, #1877]	; 0x755
    619e:	strb.w	r6, [r3, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61a2:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61a6:	str.w	r7, [r3, #1896]	; 0x768
      _s = s;
    61aa:	strb.w	r6, [r3, #1900]	; 0x76c
      _b = b;
    61ae:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61b2:	str.w	r7, [r3, #1904]	; 0x770
      _s = s;
      _b = b;
    61b6:	strb.w	r6, [r3, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61ba:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61be:	str.w	ip, [r3, #1920]	; 0x780
      _s = s;
    61c2:	strb.w	r6, [r3, #1908]	; 0x774
      _b = b;
    61c6:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61ca:	str.w	ip, [r3, #1928]	; 0x788
      _s = s;
      _b = b;
    61ce:	strb.w	r6, [r3, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61d2:	movs	r6, #73	; 0x49
      _s = s;
    61d4:	strb.w	r5, [r3, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61d8:	str.w	r6, [r3, #1912]	; 0x778
      _s = s;
    61dc:	mov.w	r6, #9
    61e0:	strb.w	r5, [r3, #1932]	; 0x78c
    61e4:	strb.w	r6, [r3, #1916]	; 0x77c
      _b = b;
    61e8:	mvn.w	r6, #3
    61ec:	strb.w	r6, [r3, #1917]	; 0x77d
    61f0:	mov.w	r6, #0
    61f4:	strb.w	r6, [r3, #1925]	; 0x785
    61f8:	strb.w	r6, [r3, #1933]	; 0x78d
    61fc:	strb.w	r6, [r3, #1941]	; 0x795
    6200:	strb.w	r6, [r3, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6204:	movw	r6, #265	; 0x109
    6208:	str.w	ip, [r3, #1936]	; 0x790
    620c:	str.w	r6, [r3, #1984]	; 0x7c0
    6210:	mov.w	r6, #270	; 0x10e
    6214:	str.w	fp, [r3, #1944]	; 0x798
      _s = s;
    6218:	strb.w	r1, [r3, #1948]	; 0x79c
      _b = b;
    621c:	strb.w	r9, [r3, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6220:	str.w	r8, [r3, #1952]	; 0x7a0
      _s = s;
    6224:	strb.w	lr, [r3, #1956]	; 0x7a4
      _b = b;
    6228:	strb.w	r2, [r3, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    622c:	str.w	r8, [r3, #1960]	; 0x7a8
      _s = s;
    6230:	strb.w	lr, [r3, #1964]	; 0x7ac
      _b = b;
    6234:	strb.w	r2, [r3, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6238:	str.w	fp, [r3, #1968]	; 0x7b0
      _s = s;
    623c:	strb.w	r1, [r3, #1972]	; 0x7b4
      _b = b;
    6240:	strb.w	r9, [r3, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6244:	str.w	ip, [r3, #1976]	; 0x7b8
      _s = s;
    6248:	strb.w	r2, [r3, #1988]	; 0x7c4
      _b = b;
    624c:	strb.w	sl, [r3, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6250:	str.w	r8, [r3, #1992]	; 0x7c8
      _s = s;
    6254:	strb.w	lr, [r3, #1996]	; 0x7cc
      _b = b;
    6258:	strb.w	r2, [r3, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    625c:	str.w	r8, [r3, #2000]	; 0x7d0
      _s = s;
    6260:	strb.w	lr, [r3, #2004]	; 0x7d4
      _b = b;
    6264:	strb.w	r2, [r3, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6268:	str.w	r8, [r3, #2008]	; 0x7d8
      _s = s;
    626c:	strb.w	lr, [r3, #2012]	; 0x7dc
      _b = b;
    6270:	strb.w	r2, [r3, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6274:	str.w	r8, [r3, #2016]	; 0x7e0
      _s = s;
    6278:	strb.w	lr, [r3, #2020]	; 0x7e4
    627c:	strb.w	r5, [r3, #1940]	; 0x794
    6280:	strb.w	r5, [r3, #1980]	; 0x7bc
      _b = b;
    6284:	strb.w	r2, [r3, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6288:	str.w	r6, [r3, #2048]	; 0x800
      _s = s;
    628c:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6290:	str.w	r8, [r3, #2024]	; 0x7e8
      _s = s;
    6294:	strb.w	r6, [r3, #2052]	; 0x804
      _b = b;
    6298:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    629c:	strb.w	lr, [r3, #2028]	; 0x7ec
      _b = b;
    62a0:	strb.w	r6, [r3, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62a4:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    62a6:	strb.w	r2, [r3, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62aa:	str.w	r6, [r3, #2096]	; 0x830
      _s = s;
    62ae:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62b2:	str.w	r8, [r3, #2032]	; 0x7f0
      _s = s;
    62b6:	strb.w	r6, [r3, #2100]	; 0x834
      _b = b;
    62ba:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62be:	strb.w	lr, [r3, #2036]	; 0x7f4
      _b = b;
    62c2:	strb.w	r6, [r3, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62c6:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    62ca:	strb.w	r2, [r3, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ce:	str.w	r6, [r3, #2104]	; 0x838
      _s = s;
    62d2:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62d6:	str.w	r8, [r3, #2040]	; 0x7f8
      _s = s;
    62da:	strb.w	r6, [r3, #2108]	; 0x83c
      _b = b;
    62de:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62e2:	strb.w	lr, [r3, #2044]	; 0x7fc
      _b = b;
    62e6:	strb.w	r2, [r3, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ea:	str.w	fp, [r3, #2056]	; 0x808
      _s = s;
    62ee:	strb.w	r1, [r3, #2060]	; 0x80c
      _b = b;
    62f2:	strb.w	r9, [r3, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62f6:	str.w	r8, [r3, #2064]	; 0x810
      _s = s;
    62fa:	strb.w	lr, [r3, #2068]	; 0x814
      _b = b;
    62fe:	strb.w	r2, [r3, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6302:	str.w	r8, [r3, #2072]	; 0x818
      _s = s;
    6306:	strb.w	lr, [r3, #2076]	; 0x81c
      _b = b;
    630a:	strb.w	r2, [r3, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    630e:	str.w	r8, [r3, #2080]	; 0x820
      _s = s;
    6312:	strb.w	lr, [r3, #2084]	; 0x824
      _b = b;
    6316:	strb.w	r2, [r3, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    631a:	str.w	r8, [r3, #2088]	; 0x828
      _s = s;
    631e:	strb.w	lr, [r3, #2092]	; 0x82c
      _b = b;
    6322:	strb.w	r2, [r3, #2093]	; 0x82d
    6326:	strb.w	r6, [r3, #2109]	; 0x83d
    632a:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    632e:	str.w	ip, [r3, #2112]	; 0x840
      _s = s;
      _b = b;
    6332:	strb.w	r6, [r3, #2117]	; 0x845
    6336:	strb.w	r6, [r3, #2125]	; 0x84d
    633a:	strb.w	r6, [r3, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    633e:	movw	r6, #265	; 0x109
    6342:	str.w	ip, [r3, #2120]	; 0x848
    6346:	str.w	r6, [r3, #2144]	; 0x860
    634a:	mov.w	r6, #270	; 0x10e
    634e:	str.w	ip, [r3, #2128]	; 0x850
    6352:	str.w	r6, [r3, #2184]	; 0x888
      _s = s;
    6356:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    635a:	str.w	fp, [r3, #2136]	; 0x858
      _s = s;
    635e:	strb.w	r6, [r3, #2188]	; 0x88c
      _b = b;
    6362:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6366:	strb.w	r1, [r3, #2140]	; 0x85c
      _b = b;
    636a:	strb.w	r6, [r3, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    636e:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    6370:	strb.w	r9, [r3, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6374:	strb.w	r2, [r3, #2148]	; 0x864
      _b = b;
    6378:	strb.w	sl, [r3, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    637c:	str.w	fp, [r3, #2152]	; 0x868
      _s = s;
    6380:	strb.w	r1, [r3, #2156]	; 0x86c
      _b = b;
    6384:	strb.w	r9, [r3, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6388:	str.w	r8, [r3, #2160]	; 0x870
      _s = s;
    638c:	strb.w	lr, [r3, #2164]	; 0x874
      _b = b;
    6390:	strb.w	r2, [r3, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6394:	str.w	fp, [r3, #2168]	; 0x878
      _s = s;
    6398:	strb.w	r1, [r3, #2172]	; 0x87c
      _b = b;
    639c:	strb.w	r9, [r3, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63a0:	str.w	r8, [r3, #2176]	; 0x880
      _s = s;
    63a4:	strb.w	lr, [r3, #2180]	; 0x884
      _b = b;
    63a8:	strb.w	r2, [r3, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63ac:	str.w	fp, [r3, #2192]	; 0x890
      _s = s;
    63b0:	strb.w	r1, [r3, #2196]	; 0x894
    63b4:	strb.w	r5, [r3, #2116]	; 0x844
    63b8:	strb.w	r5, [r3, #2124]	; 0x84c
    63bc:	strb.w	r5, [r3, #2132]	; 0x854
      _b = b;
    63c0:	strb.w	r9, [r3, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63c4:	str.w	r8, [r3, #2200]	; 0x898
      _s = s;
    63c8:	strb.w	lr, [r3, #2204]	; 0x89c
      _b = b;
    63cc:	strb.w	r2, [r3, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63d0:	str.w	r8, [r3, #2208]	; 0x8a0
      _s = s;
    63d4:	strb.w	lr, [r3, #2212]	; 0x8a4
      _b = b;
    63d8:	strb.w	r2, [r3, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63dc:	str.w	r8, [r3, #2216]	; 0x8a8
      _s = s;
    63e0:	strb.w	lr, [r3, #2220]	; 0x8ac
      _b = b;
    63e4:	strb.w	r2, [r3, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63e8:	str.w	r8, [r3, #2224]	; 0x8b0
      _s = s;
    63ec:	strb.w	lr, [r3, #2228]	; 0x8b4
      _b = b;
    63f0:	strb.w	r2, [r3, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63f4:	str.w	r8, [r3, #2232]	; 0x8b8
      _s = s;
    63f8:	strb.w	lr, [r3, #2236]	; 0x8bc
      _b = b;
    63fc:	strb.w	r2, [r3, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6400:	str.w	fp, [r3, #2240]	; 0x8c0
      _s = s;
    6404:	strb.w	r1, [r3, #2244]	; 0x8c4
      _b = b;
    6408:	strb.w	r9, [r3, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    640c:	str.w	r8, [r3, #2248]	; 0x8c8
      _s = s;
    6410:	strb.w	lr, [r3, #2252]	; 0x8cc
      _b = b;
    6414:	strb.w	r2, [r3, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6418:	str.w	fp, [r3, #2256]	; 0x8d0
      _s = s;
    641c:	strb.w	r1, [r3, #2260]	; 0x8d4
      _b = b;
    6420:	strb.w	r9, [r3, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6424:	str.w	r8, [r3, #2264]	; 0x8d8
      _s = s;
    6428:	strb.w	lr, [r3, #2268]	; 0x8dc
      _b = b;
    642c:	strb.w	r2, [r3, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6430:	str.w	r8, [r3, #2272]	; 0x8e0
      _s = s;
    6434:	strb.w	lr, [r3, #2276]	; 0x8e4
      _b = b;
    6438:	strb.w	r2, [r3, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    643c:	str.w	r8, [r3, #2280]	; 0x8e8
      _s = s;
    6440:	strb.w	lr, [r3, #2284]	; 0x8ec
      _b = b;
    6444:	strb.w	r2, [r3, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6448:	str.w	r6, [r3, #2288]	; 0x8f0
      _s = s;
    644c:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6450:	str.w	ip, [r3, #2304]	; 0x900
      _s = s;
    6454:	strb.w	r6, [r3, #2292]	; 0x8f4
      _b = b;
    6458:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    645c:	str.w	ip, [r3, #2312]	; 0x908
      _s = s;
      _b = b;
    6460:	strb.w	r6, [r3, #2293]	; 0x8f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6464:	mov.w	r6, #270	; 0x10e
    6468:	str.w	fp, [r3, #2328]	; 0x918
    646c:	str.w	r6, [r3, #2296]	; 0x8f8
      _s = s;
    6470:	mvn.w	r6, #118	; 0x76
    6474:	strb.w	r1, [r3, #2332]	; 0x91c
    6478:	strb.w	r6, [r3, #2300]	; 0x8fc
      _b = b;
    647c:	mvn.w	r6, #4
    6480:	strb.w	r9, [r3, #2333]	; 0x91d
    6484:	strb.w	r6, [r3, #2301]	; 0x8fd
    6488:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    648c:	str.w	fp, [r3, #2336]	; 0x920
      _s = s;
      _b = b;
    6490:	strb.w	r6, [r3, #2309]	; 0x905
    6494:	strb.w	r6, [r3, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6498:	movs	r6, #213	; 0xd5
      _s = s;
    649a:	strb.w	r1, [r3, #2340]	; 0x924
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    649e:	str.w	r6, [r3, #2320]	; 0x910
      _s = s;
    64a2:	mvn.w	r6, #32
      _b = b;
    64a6:	strb.w	r9, [r3, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64aa:	strb.w	r6, [r3, #2324]	; 0x914
      _b = b;
    64ae:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64b2:	strb.w	r2, [r3, #2348]	; 0x92c
      _b = b;
    64b6:	strb.w	r6, [r3, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ba:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    64be:	strb.w	sl, [r3, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64c2:	str.w	r6, [r3, #2344]	; 0x928
    64c6:	movw	r6, #303	; 0x12f
    64ca:	str.w	r8, [r3, #2352]	; 0x930
      _s = s;
    64ce:	strb.w	lr, [r3, #2356]	; 0x934
      _b = b;
    64d2:	strb.w	r2, [r3, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64d6:	str.w	r8, [r3, #2360]	; 0x938
      _s = s;
    64da:	strb.w	lr, [r3, #2364]	; 0x93c
      _b = b;
    64de:	strb.w	r2, [r3, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64e2:	str.w	r8, [r3, #2368]	; 0x940
      _s = s;
    64e6:	strb.w	lr, [r3, #2372]	; 0x944
    64ea:	strb.w	r5, [r3, #2308]	; 0x904
    64ee:	strb.w	r5, [r3, #2316]	; 0x90c
      _b = b;
    64f2:	strb.w	r2, [r3, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64f6:	str.w	r6, [r3, #2376]	; 0x948
      _s = s;
    64fa:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64fe:	str.w	r8, [r3, #2392]	; 0x958
      _s = s;
    6502:	strb.w	r6, [r3, #2380]	; 0x94c
      _b = b;
    6506:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    650a:	strb.w	lr, [r3, #2396]	; 0x95c
      _b = b;
    650e:	strb.w	r6, [r3, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6512:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    6514:	strb.w	r2, [r3, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6518:	str.w	r6, [r3, #2384]	; 0x950
      _s = s;
    651c:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6520:	str.w	r8, [r3, #2416]	; 0x970
      _s = s;
    6524:	strb.w	r6, [r3, #2388]	; 0x954
      _b = b;
    6528:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    652c:	strb.w	lr, [r3, #2420]	; 0x974
      _b = b;
    6530:	strb.w	r6, [r3, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6534:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    6538:	strb.w	r2, [r3, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    653c:	mov	r7, r6
    653e:	str.w	r6, [r3, #2400]	; 0x960
      _s = s;
    6542:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6546:	str.w	fp, [r3, #2424]	; 0x978
    654a:	str.w	r7, [r3, #2408]	; 0x968
      _s = s;
    654e:	strb.w	r6, [r3, #2404]	; 0x964
      _b = b;
    6552:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6556:	strb.w	r1, [r3, #2428]	; 0x97c
      _b = b;
    655a:	strb.w	r6, [r3, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    655e:	mvn.w	r6, #118	; 0x76
      _b = b;
    6562:	strb.w	r9, [r3, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6566:	strb.w	r6, [r3, #2412]	; 0x96c
      _b = b;
    656a:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    656e:	strb.w	r2, [r3, #2436]	; 0x984
      _b = b;
    6572:	strb.w	r6, [r3, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6576:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    657a:	strb.w	sl, [r3, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    657e:	str.w	r6, [r3, #2432]	; 0x980
    6582:	mov.w	r6, #270	; 0x10e
    6586:	str.w	r8, [r3, #2440]	; 0x988
      _s = s;
    658a:	strb.w	lr, [r3, #2444]	; 0x98c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    658e:	mov	r7, r6
      _s = s;
      _b = b;
    6590:	strb.w	r2, [r3, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6594:	str.w	fp, [r3, #2448]	; 0x990
      _s = s;
    6598:	strb.w	r1, [r3, #2452]	; 0x994
      _b = b;
    659c:	strb.w	r9, [r3, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65a0:	str.w	r8, [r3, #2456]	; 0x998
      _s = s;
    65a4:	strb.w	lr, [r3, #2460]	; 0x99c
      _b = b;
    65a8:	strb.w	r2, [r3, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65ac:	str.w	r6, [r3, #2480]	; 0x9b0
      _s = s;
    65b0:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65b4:	str.w	r8, [r3, #2464]	; 0x9a0
      _s = s;
    65b8:	strb.w	r6, [r3, #2484]	; 0x9b4
      _b = b;
    65bc:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65c0:	strb.w	lr, [r3, #2468]	; 0x9a4
      _b = b;
    65c4:	strb.w	r6, [r3, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65c8:	mvn.w	r6, #118	; 0x76
      _b = b;
    65cc:	strb.w	r2, [r3, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65d0:	strb.w	r6, [r3, #2492]	; 0x9bc
      _b = b;
    65d4:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65d8:	str.w	r8, [r3, #2472]	; 0x9a8
      _s = s;
      _b = b;
    65dc:	strb.w	r6, [r3, #2493]	; 0x9bd
    65e0:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65e4:	strb.w	lr, [r3, #2476]	; 0x9ac
      _b = b;
    65e8:	strb.w	r6, [r3, #2501]	; 0x9c5
    65ec:	strb.w	r6, [r3, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65f0:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    65f4:	strb.w	r2, [r3, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65f8:	str.w	r6, [r3, #2512]	; 0x9d0
    65fc:	movw	r6, #303	; 0x12f
    6600:	str.w	r7, [r3, #2488]	; 0x9b8
    6604:	str.w	ip, [r3, #2496]	; 0x9c0
    6608:	str.w	ip, [r3, #2504]	; 0x9c8
      _s = s;
    660c:	strb.w	r2, [r3, #2516]	; 0x9d4
      _b = b;
    6610:	strb.w	sl, [r3, #2517]	; 0x9d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6614:	str.w	r8, [r3, #2520]	; 0x9d8
      _s = s;
    6618:	strb.w	lr, [r3, #2524]	; 0x9dc
      _b = b;
    661c:	strb.w	r2, [r3, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6620:	str.w	r8, [r3, #2528]	; 0x9e0
      _s = s;
    6624:	strb.w	lr, [r3, #2532]	; 0x9e4
      _b = b;
    6628:	strb.w	r2, [r3, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    662c:	str.w	fp, [r3, #2536]	; 0x9e8
      _s = s;
    6630:	strb.w	r1, [r3, #2540]	; 0x9ec
      _b = b;
    6634:	strb.w	r9, [r3, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6638:	str.w	r8, [r3, #2544]	; 0x9f0
      _s = s;
    663c:	strb.w	lr, [r3, #2548]	; 0x9f4
    6640:	strb.w	r5, [r3, #2500]	; 0x9c4
    6644:	strb.w	r5, [r3, #2508]	; 0x9cc
      _b = b;
    6648:	strb.w	r2, [r3, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    664c:	str.w	r6, [r3, #2560]	; 0xa00
      _s = s;
    6650:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6654:	str.w	r8, [r3, #2552]	; 0x9f8
      _s = s;
    6658:	strb.w	r6, [r3, #2564]	; 0xa04
      _b = b;
    665c:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6660:	strb.w	lr, [r3, #2556]	; 0x9fc
      _b = b;
    6664:	strb.w	r6, [r3, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6668:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    666c:	strb.w	r2, [r3, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6670:	mov	r7, r6
    6672:	str.w	r6, [r3, #2576]	; 0xa10
      _s = s;
    6676:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    667a:	str.w	r8, [r3, #2568]	; 0xa08
      _s = s;
    667e:	strb.w	lr, [r3, #2572]	; 0xa0c
    6682:	strb.w	r6, [r3, #2580]	; 0xa14
      _b = b;
    6686:	mvn.w	r6, #4
    668a:	strb.w	r2, [r3, #2573]	; 0xa0d
    668e:	strb.w	r6, [r3, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6692:	movs	r6, #213	; 0xd5
    6694:	str.w	fp, [r3, #2592]	; 0xa20
    6698:	str.w	r6, [r3, #2584]	; 0xa18
      _s = s;
    669c:	mvn.w	r6, #32
    66a0:	strb.w	r1, [r3, #2596]	; 0xa24
    66a4:	strb.w	r6, [r3, #2588]	; 0xa1c
      _b = b;
    66a8:	mov.w	r6, #89	; 0x59
    66ac:	strb.w	r9, [r3, #2597]	; 0xa25
    66b0:	strb.w	r6, [r3, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66b4:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66b8:	str.w	r7, [r3, #2600]	; 0xa28
      _s = s;
    66bc:	strb.w	r6, [r3, #2604]	; 0xa2c
      _b = b;
    66c0:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66c4:	str.w	r8, [r3, #2608]	; 0xa30
      _s = s;
      _b = b;
    66c8:	strb.w	r6, [r3, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66cc:	movs	r6, #141	; 0x8d
      _s = s;
    66ce:	strb.w	lr, [r3, #2612]	; 0xa34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66d2:	str.w	r6, [r3, #2616]	; 0xa38
    66d6:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    66da:	strb.w	r2, [r3, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66de:	str.w	r6, [r3, #2624]	; 0xa40
    66e2:	mov.w	r6, #270	; 0x10e
      _s = s;
    66e6:	strb.w	r1, [r3, #2620]	; 0xa3c
      _b = b;
    66ea:	strb.w	sl, [r3, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ee:	mov	r7, r6
      _s = s;
    66f0:	strb.w	r2, [r3, #2628]	; 0xa44
      _b = b;
    66f4:	strb.w	sl, [r3, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66f8:	str.w	r8, [r3, #2632]	; 0xa48
      _s = s;
    66fc:	strb.w	lr, [r3, #2636]	; 0xa4c
      _b = b;
    6700:	strb.w	r2, [r3, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6704:	str.w	r6, [r3, #2672]	; 0xa70
      _s = s;
    6708:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    670c:	str.w	fp, [r3, #2640]	; 0xa50
      _s = s;
    6710:	strb.w	r6, [r3, #2676]	; 0xa74
      _b = b;
    6714:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6718:	strb.w	r1, [r3, #2644]	; 0xa54
      _b = b;
    671c:	strb.w	r6, [r3, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6720:	mvn.w	r6, #118	; 0x76
      _b = b;
    6724:	strb.w	r9, [r3, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6728:	strb.w	r6, [r3, #2684]	; 0xa7c
      _b = b;
    672c:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6730:	str.w	fp, [r3, #2648]	; 0xa58
      _s = s;
      _b = b;
    6734:	strb.w	r6, [r3, #2685]	; 0xa7d
    6738:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    673c:	strb.w	r1, [r3, #2652]	; 0xa5c
      _b = b;
    6740:	strb.w	r6, [r3, #2693]	; 0xa85
    6744:	strb.w	r6, [r3, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6748:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    674c:	strb.w	r9, [r3, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6750:	str.w	fp, [r3, #2656]	; 0xa60
      _s = s;
    6754:	strb.w	r1, [r3, #2660]	; 0xa64
      _b = b;
    6758:	strb.w	r9, [r3, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    675c:	str.w	r8, [r3, #2664]	; 0xa68
      _s = s;
    6760:	strb.w	lr, [r3, #2668]	; 0xa6c
      _b = b;
    6764:	strb.w	r2, [r3, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6768:	str.w	r7, [r3, #2680]	; 0xa78
    676c:	str.w	ip, [r3, #2688]	; 0xa80
    6770:	str.w	ip, [r3, #2696]	; 0xa88
    6774:	str.w	r6, [r3, #2704]	; 0xa90
      _s = s;
    6778:	strb.w	r2, [r3, #2708]	; 0xa94
      _b = b;
    677c:	strb.w	sl, [r3, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6780:	str.w	r8, [r3, #2712]	; 0xa98
      _s = s;
    6784:	strb.w	lr, [r3, #2716]	; 0xa9c
      _b = b;
    6788:	strb.w	r2, [r3, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    678c:	str.w	fp, [r3, #2720]	; 0xaa0
      _s = s;
    6790:	strb.w	r1, [r3, #2724]	; 0xaa4
    6794:	strb.w	r5, [r3, #2692]	; 0xa84
    6798:	strb.w	r5, [r3, #2700]	; 0xa8c
      _b = b;
    679c:	strb.w	r9, [r3, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67a0:	str.w	r6, [r3, #2744]	; 0xab8
    67a4:	mov.w	r6, #270	; 0x10e
    67a8:	str.w	r8, [r3, #2728]	; 0xaa8
    67ac:	str.w	r6, [r3, #2768]	; 0xad0
      _s = s;
    67b0:	mvn.w	r6, #118	; 0x76
    67b4:	strb.w	lr, [r3, #2732]	; 0xaac
    67b8:	strb.w	r6, [r3, #2772]	; 0xad4
      _b = b;
    67bc:	mvn.w	r6, #4
    67c0:	strb.w	r2, [r3, #2733]	; 0xaad
    67c4:	strb.w	r6, [r3, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67c8:	movs	r6, #141	; 0x8d
    67ca:	str.w	fp, [r3, #2736]	; 0xab0
    67ce:	str.w	r6, [r3, #2776]	; 0xad8
      _s = s;
      _b = b;
    67d2:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67d6:	strb.w	r1, [r3, #2740]	; 0xab4
      _b = b;
    67da:	strb.w	r6, [r3, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67de:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    67e0:	strb.w	r9, [r3, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67e4:	str.w	r6, [r3, #2792]	; 0xae8
      _s = s;
    67e8:	mvn.w	r6, #32
    67ec:	strb.w	r2, [r3, #2748]	; 0xabc
    67f0:	strb.w	r6, [r3, #2796]	; 0xaec
      _b = b;
    67f4:	mov.w	r6, #89	; 0x59
    67f8:	strb.w	sl, [r3, #2749]	; 0xabd
    67fc:	strb.w	r6, [r3, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6800:	movs	r6, #155	; 0x9b
    6802:	str.w	r8, [r3, #2752]	; 0xac0
    6806:	str.w	r6, [r3, #2800]	; 0xaf0
      _s = s;
    680a:	mvn.w	r6, #76	; 0x4c
    680e:	strb.w	lr, [r3, #2756]	; 0xac4
    6812:	strb.w	r6, [r3, #2804]	; 0xaf4
      _b = b;
    6816:	mvn.w	r6, #56	; 0x38
    681a:	strb.w	r2, [r3, #2757]	; 0xac5
    681e:	strb.w	r6, [r3, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6822:	movs	r6, #192	; 0xc0
    6824:	str.w	fp, [r3, #2760]	; 0xac8
    6828:	str.w	r6, [r3, #2808]	; 0xaf8
      _s = s;
    682c:	mvn.w	r6, #71	; 0x47
    6830:	strb.w	r1, [r3, #2764]	; 0xacc
    6834:	strb.w	r6, [r3, #2812]	; 0xafc
      _b = b;
    6838:	mvn.w	r6, #39	; 0x27
    683c:	strb.w	r9, [r3, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6840:	strb.w	r1, [r3, #2780]	; 0xadc
      _b = b;
    6844:	strb.w	sl, [r3, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6848:	str.w	ip, [r3, #2784]	; 0xae0
      _s = s;
    684c:	strb.w	r5, [r3, #2788]	; 0xae4
      _b = b;
    6850:	strb.w	r6, [r3, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6854:	mov.w	r6, #270	; 0x10e
    6858:	str.w	fp, [r3, #2816]	; 0xb00
    685c:	mov	r7, r6
    685e:	str.w	r6, [r3, #2864]	; 0xb30
      _s = s;
    6862:	mvn.w	r6, #118	; 0x76
    6866:	strb.w	r1, [r3, #2820]	; 0xb04
      _b = b;
    686a:	strb.w	r9, [r3, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    686e:	strb.w	r6, [r3, #2868]	; 0xb34
      _b = b;
    6872:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6876:	str.w	fp, [r3, #2824]	; 0xb08
      _s = s;
      _b = b;
    687a:	strb.w	r6, [r3, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    687e:	mvn.w	r6, #118	; 0x76
    6882:	strb.w	r1, [r3, #2828]	; 0xb0c
    6886:	strb.w	r6, [r3, #2876]	; 0xb3c
      _b = b;
    688a:	mvn.w	r6, #4
    688e:	strb.w	r9, [r3, #2829]	; 0xb0d
    6892:	strb.w	r6, [r3, #2877]	; 0xb3d
    6896:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    689a:	str.w	fp, [r3, #2832]	; 0xb10
      _s = s;
      _b = b;
    689e:	strb.w	r6, [r3, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68a2:	movw	r6, #265	; 0x109
      _s = s;
    68a6:	strb.w	r1, [r3, #2836]	; 0xb14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68aa:	str.w	r6, [r3, #2888]	; 0xb48
    68ae:	str.w	r6, [r3, #2896]	; 0xb50
    68b2:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    68b6:	strb.w	r9, [r3, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68ba:	str.w	fp, [r3, #2840]	; 0xb18
      _s = s;
    68be:	strb.w	r1, [r3, #2844]	; 0xb1c
      _b = b;
    68c2:	strb.w	r9, [r3, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68c6:	str.w	fp, [r3, #2848]	; 0xb20
      _s = s;
    68ca:	strb.w	r1, [r3, #2852]	; 0xb24
      _b = b;
    68ce:	strb.w	r9, [r3, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68d2:	str.w	r8, [r3, #2856]	; 0xb28
      _s = s;
    68d6:	strb.w	lr, [r3, #2860]	; 0xb2c
      _b = b;
    68da:	strb.w	r2, [r3, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68de:	str.w	r7, [r3, #2872]	; 0xb38
    68e2:	str.w	ip, [r3, #2880]	; 0xb40
      _s = s;
    68e6:	strb.w	r2, [r3, #2892]	; 0xb4c
      _b = b;
    68ea:	strb.w	sl, [r3, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68ee:	strb.w	r2, [r3, #2900]	; 0xb54
    68f2:	strb.w	r5, [r3, #2884]	; 0xb44
      _b = b;
    68f6:	strb.w	sl, [r3, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68fa:	str.w	r6, [r3, #2960]	; 0xb90
      _s = s;
    68fe:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6902:	str.w	r8, [r3, #2904]	; 0xb58
      _s = s;
    6906:	strb.w	r6, [r3, #2964]	; 0xb94
      _b = b;
    690a:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    690e:	strb.w	lr, [r3, #2908]	; 0xb5c
      _b = b;
    6912:	strb.w	r6, [r3, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6916:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    6918:	strb.w	r2, [r3, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    691c:	str.w	r6, [r3, #2968]	; 0xb98
    6920:	movs	r6, #155	; 0x9b
    6922:	str.w	fp, [r3, #2912]	; 0xb60
    6926:	str.w	r6, [r3, #2976]	; 0xba0
      _s = s;
    692a:	mvn.w	r6, #76	; 0x4c
    692e:	strb.w	r1, [r3, #2916]	; 0xb64
    6932:	strb.w	r6, [r3, #2980]	; 0xba4
      _b = b;
    6936:	mvn.w	r6, #56	; 0x38
    693a:	strb.w	r9, [r3, #2917]	; 0xb65
    693e:	strb.w	r6, [r3, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6942:	movs	r6, #192	; 0xc0
    6944:	str.w	r8, [r3, #2920]	; 0xb68
    6948:	mov	r7, r6
    694a:	str.w	r6, [r3, #2984]	; 0xba8
      _s = s;
    694e:	mvn.w	r6, #71	; 0x47
    6952:	strb.w	lr, [r3, #2924]	; 0xb6c
      _b = b;
    6956:	strb.w	r2, [r3, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    695a:	strb.w	r6, [r3, #2988]	; 0xbac
      _b = b;
    695e:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6962:	str.w	r8, [r3, #2928]	; 0xb70
      _s = s;
    6966:	strb.w	lr, [r3, #2932]	; 0xb74
      _b = b;
    696a:	strb.w	r2, [r3, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    696e:	str.w	fp, [r3, #2936]	; 0xb78
      _s = s;
    6972:	strb.w	r1, [r3, #2940]	; 0xb7c
      _b = b;
    6976:	strb.w	r9, [r3, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    697a:	str.w	r8, [r3, #2944]	; 0xb80
      _s = s;
    697e:	strb.w	lr, [r3, #2948]	; 0xb84
      _b = b;
    6982:	strb.w	r2, [r3, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6986:	str.w	fp, [r3, #2952]	; 0xb88
      _s = s;
    698a:	strb.w	r1, [r3, #2956]	; 0xb8c
      _b = b;
    698e:	strb.w	r9, [r3, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6992:	strb.w	r1, [r3, #2972]	; 0xb9c
      _b = b;
    6996:	strb.w	sl, [r3, #2973]	; 0xb9d
    699a:	strb.w	r6, [r3, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    699e:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69a2:	str.w	r7, [r3, #2992]	; 0xbb0
      _s = s;
    69a6:	strb.w	r6, [r3, #2996]	; 0xbb4
      _b = b;
    69aa:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ae:	str.w	r7, [r3, #3000]	; 0xbb8
      _s = s;
      _b = b;
    69b2:	strb.w	r6, [r3, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69b6:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ba:	str.w	fp, [r3, #3016]	; 0xbc8
      _s = s;
    69be:	strb.w	r6, [r3, #3004]	; 0xbbc
      _b = b;
    69c2:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69c6:	strb.w	r1, [r3, #3020]	; 0xbcc
      _b = b;
    69ca:	strb.w	r6, [r3, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ce:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    69d2:	strb.w	r9, [r3, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69d6:	mov	r7, r6
    69d8:	str.w	r6, [r3, #3008]	; 0xbc0
      _s = s;
    69dc:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69e0:	str.w	fp, [r3, #3024]	; 0xbd0
      _s = s;
    69e4:	strb.w	r1, [r3, #3028]	; 0xbd4
    69e8:	strb.w	r6, [r3, #3012]	; 0xbc4
      _b = b;
    69ec:	mvn.w	r6, #4
    69f0:	strb.w	r9, [r3, #3029]	; 0xbd5
    69f4:	strb.w	r6, [r3, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69f8:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69fc:	str.w	fp, [r3, #3032]	; 0xbd8
      _s = s;
    6a00:	strb.w	r6, [r3, #3052]	; 0xbec
      _b = b;
    6a04:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a08:	strb.w	r1, [r3, #3036]	; 0xbdc
      _b = b;
    6a0c:	strb.w	r6, [r3, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a10:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    6a12:	strb.w	r9, [r3, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a16:	str.w	r6, [r3, #3056]	; 0xbf0
      _s = s;
    6a1a:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a1e:	str.w	fp, [r3, #3040]	; 0xbe0
      _s = s;
    6a22:	strb.w	r6, [r3, #3060]	; 0xbf4
      _b = b;
    6a26:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a2a:	strb.w	r1, [r3, #3044]	; 0xbe4
      _b = b;
    6a2e:	strb.w	r6, [r3, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a32:	movs	r6, #65	; 0x41
      _s = s;
      _b = b;
    6a34:	strb.w	r9, [r3, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a38:	str.w	r6, [r3, #3064]	; 0xbf8
      _s = s;
    6a3c:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a40:	str.w	r7, [r3, #3048]	; 0xbe8
      _s = s;
    6a44:	strb.w	r6, [r3, #3068]	; 0xbfc
      _b = b;
    6a48:	mvn.w	r6, #42	; 0x2a
    6a4c:	strb.w	r6, [r3, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a50:	movs	r6, #213	; 0xd5
    6a52:	str.w	r6, [r3, #3072]	; 0xc00
      _s = s;
    6a56:	mvn.w	r6, #32
    6a5a:	strb.w	r6, [r3, #3076]	; 0xc04
      _b = b;
    6a5e:	mov.w	r6, #89	; 0x59
    6a62:	strb.w	r6, [r3, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a66:	mov.w	r6, #270	; 0x10e
    6a6a:	str.w	fp, [r3, #3080]	; 0xc08
    6a6e:	str.w	r6, [r3, #3152]	; 0xc50
      _s = s;
    6a72:	mvn.w	r6, #118	; 0x76
    6a76:	strb.w	r1, [r3, #3084]	; 0xc0c
    6a7a:	strb.w	r6, [r3, #3156]	; 0xc54
      _b = b;
    6a7e:	mvn.w	r6, #4
    6a82:	strb.w	r9, [r3, #3085]	; 0xc0d
    6a86:	strb.w	r6, [r3, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a8a:	movs	r6, #141	; 0x8d
    6a8c:	str.w	r8, [r3, #3088]	; 0xc10
    6a90:	str.w	r6, [r3, #3160]	; 0xc58
    6a94:	movs	r6, #192	; 0xc0
      _s = s;
    6a96:	strb.w	lr, [r3, #3092]	; 0xc14
      _b = b;
    6a9a:	strb.w	r2, [r3, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a9e:	str.w	r8, [r3, #3096]	; 0xc18
      _s = s;
    6aa2:	strb.w	lr, [r3, #3100]	; 0xc1c
      _b = b;
    6aa6:	strb.w	r2, [r3, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aaa:	str.w	r8, [r3, #3104]	; 0xc20
      _s = s;
    6aae:	strb.w	lr, [r3, #3108]	; 0xc24
      _b = b;
    6ab2:	strb.w	r2, [r3, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ab6:	str.w	r8, [r3, #3112]	; 0xc28
      _s = s;
    6aba:	strb.w	lr, [r3, #3116]	; 0xc2c
      _b = b;
    6abe:	strb.w	r2, [r3, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ac2:	str.w	r8, [r3, #3120]	; 0xc30
      _s = s;
    6ac6:	strb.w	lr, [r3, #3124]	; 0xc34
      _b = b;
    6aca:	strb.w	r2, [r3, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ace:	str.w	r8, [r3, #3128]	; 0xc38
      _s = s;
    6ad2:	strb.w	lr, [r3, #3132]	; 0xc3c
      _b = b;
    6ad6:	strb.w	r2, [r3, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ada:	str.w	fp, [r3, #3136]	; 0xc40
      _s = s;
    6ade:	strb.w	r1, [r3, #3140]	; 0xc44
      _b = b;
    6ae2:	strb.w	r9, [r3, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ae6:	str.w	r8, [r3, #3144]	; 0xc48
      _s = s;
    6aea:	strb.w	lr, [r3, #3148]	; 0xc4c
      _b = b;
    6aee:	strb.w	r2, [r3, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6af2:	strb.w	r1, [r3, #3164]	; 0xc5c
      _b = b;
    6af6:	strb.w	sl, [r3, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6afa:	str.w	r6, [r3, #3168]	; 0xc60
      _s = s;
    6afe:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b02:	str.w	fp, [r3, #3176]	; 0xc68
      _s = s;
    6b06:	strb.w	r6, [r3, #3172]	; 0xc64
      _b = b;
    6b0a:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b0e:	strb.w	r1, [r3, #3180]	; 0xc6c
      _b = b;
    6b12:	strb.w	r6, [r3, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b16:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    6b1a:	strb.w	r9, [r3, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b1e:	str.w	r6, [r3, #3208]	; 0xc88
      _s = s;
    6b22:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b26:	str.w	r8, [r3, #3184]	; 0xc70
      _s = s;
    6b2a:	strb.w	r6, [r3, #3212]	; 0xc8c
      _b = b;
    6b2e:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b32:	strb.w	lr, [r3, #3188]	; 0xc74
      _b = b;
    6b36:	strb.w	r6, [r3, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b3a:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    6b3c:	strb.w	r2, [r3, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b40:	str.w	r6, [r3, #3240]	; 0xca8
      _s = s;
    6b44:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b48:	str.w	r8, [r3, #3192]	; 0xc78
      _s = s;
    6b4c:	strb.w	r6, [r3, #3244]	; 0xcac
      _b = b;
    6b50:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b54:	strb.w	lr, [r3, #3196]	; 0xc7c
      _b = b;
    6b58:	strb.w	r6, [r3, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b5c:	movs	r6, #65	; 0x41
      _s = s;
      _b = b;
    6b5e:	strb.w	r2, [r3, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b62:	mov	r7, r6
    6b64:	str.w	r6, [r3, #3248]	; 0xcb0
      _s = s;
    6b68:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b6c:	str.w	r8, [r3, #3200]	; 0xc80
      _s = s;
    6b70:	strb.w	lr, [r3, #3204]	; 0xc84
    6b74:	strb.w	r6, [r3, #3252]	; 0xcb4
      _b = b;
    6b78:	mvn.w	r6, #42	; 0x2a
    6b7c:	strb.w	r2, [r3, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b80:	str.w	fp, [r3, #3216]	; 0xc90
      _s = s;
    6b84:	strb.w	r1, [r3, #3220]	; 0xc94
      _b = b;
    6b88:	strb.w	r9, [r3, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b8c:	str.w	fp, [r3, #3224]	; 0xc98
      _s = s;
    6b90:	strb.w	r1, [r3, #3228]	; 0xc9c
      _b = b;
    6b94:	strb.w	r9, [r3, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b98:	str.w	fp, [r3, #3232]	; 0xca0
      _s = s;
    6b9c:	strb.w	r1, [r3, #3236]	; 0xca4
      _b = b;
    6ba0:	strb.w	r9, [r3, #3237]	; 0xca5
    6ba4:	strb.w	r6, [r3, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ba8:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bac:	str.w	r7, [r3, #3256]	; 0xcb8
      _s = s;
    6bb0:	strb.w	r6, [r3, #3260]	; 0xcbc
      _b = b;
    6bb4:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bb8:	strb.w	r2, [r3, #3276]	; 0xccc
      _b = b;
    6bbc:	strb.w	r6, [r3, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bc0:	movs	r6, #213	; 0xd5
      _s = s;
      _b = b;
    6bc2:	strb.w	sl, [r3, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bc6:	str.w	r6, [r3, #3264]	; 0xcc0
      _s = s;
    6bca:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bce:	str.w	fp, [r3, #3280]	; 0xcd0
      _s = s;
    6bd2:	strb.w	r6, [r3, #3268]	; 0xcc4
      _b = b;
    6bd6:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bda:	strb.w	r1, [r3, #3284]	; 0xcd4
      _b = b;
    6bde:	strb.w	r6, [r3, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6be2:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    6be6:	strb.w	r9, [r3, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bea:	str.w	r6, [r3, #3272]	; 0xcc8
    6bee:	str.w	r6, [r3, #3320]	; 0xcf8
    6bf2:	movs	r6, #192	; 0xc0
    6bf4:	str.w	fp, [r3, #3288]	; 0xcd8
      _s = s;
    6bf8:	strb.w	r1, [r3, #3292]	; 0xcdc
      _b = b;
    6bfc:	strb.w	r9, [r3, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c00:	str.w	fp, [r3, #3296]	; 0xce0
      _s = s;
    6c04:	strb.w	r1, [r3, #3300]	; 0xce4
      _b = b;
    6c08:	strb.w	r9, [r3, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c0c:	str.w	fp, [r3, #3304]	; 0xce8
      _s = s;
    6c10:	strb.w	r1, [r3, #3308]	; 0xcec
      _b = b;
    6c14:	strb.w	r9, [r3, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c18:	str.w	r8, [r3, #3312]	; 0xcf0
      _s = s;
    6c1c:	strb.w	lr, [r3, #3316]	; 0xcf4
      _b = b;
    6c20:	strb.w	r2, [r3, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c24:	strb.w	r2, [r3, #3324]	; 0xcfc
      _b = b;
    6c28:	strb.w	sl, [r3, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c2c:	str.w	r8, [r3, #3328]	; 0xd00
      _s = s;
    6c30:	strb.w	lr, [r3, #3332]	; 0xd04
      _b = b;
    6c34:	strb.w	r2, [r3, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c38:	str.w	r8, [r3, #3336]	; 0xd08
      _s = s;
    6c3c:	strb.w	lr, [r3, #3340]	; 0xd0c
      _b = b;
    6c40:	strb.w	r2, [r3, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c44:	str.w	r6, [r3, #3344]	; 0xd10
      _s = s;
    6c48:	mvn.w	r6, #71	; 0x47
    6c4c:	strb.w	r1, [r3, #3356]	; 0xd1c
    6c50:	strb.w	r6, [r3, #3348]	; 0xd14
      _b = b;
    6c54:	mvn.w	r6, #39	; 0x27
    6c58:	strb.w	sl, [r3, #3357]	; 0xd1d
    6c5c:	strb.w	r6, [r3, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c60:	movs	r6, #141	; 0x8d
    6c62:	str.w	fp, [r3, #3368]	; 0xd28
    6c66:	str.w	r6, [r3, #3352]	; 0xd18
    6c6a:	movs	r6, #192	; 0xc0
      _s = s;
    6c6c:	strb.w	r1, [r3, #3372]	; 0xd2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c70:	str.w	r6, [r3, #3360]	; 0xd20
      _s = s;
    6c74:	mvn.w	r6, #71	; 0x47
      _b = b;
    6c78:	strb.w	r9, [r3, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c7c:	strb.w	r6, [r3, #3364]	; 0xd24
      _b = b;
    6c80:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c84:	strb.w	r2, [r3, #3380]	; 0xd34
      _b = b;
    6c88:	strb.w	r6, [r3, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c8c:	movw	r6, #265	; 0x109
      _s = s;
      _b = b;
    6c90:	strb.w	sl, [r3, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c94:	str.w	r6, [r3, #3376]	; 0xd30
    6c98:	str.w	r6, [r3, #3384]	; 0xd38
    6c9c:	movs	r6, #192	; 0xc0
      _s = s;
    6c9e:	strb.w	r2, [r3, #3388]	; 0xd3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ca2:	str.w	r6, [r3, #3408]	; 0xd50
      _s = s;
    6ca6:	mvn.w	r6, #71	; 0x47
      _b = b;
    6caa:	strb.w	sl, [r3, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cae:	strb.w	r6, [r3, #3412]	; 0xd54
      _b = b;
    6cb2:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cb6:	str.w	fp, [r3, #3392]	; 0xd40
      _s = s;
      _b = b;
    6cba:	strb.w	r6, [r3, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cbe:	movs	r6, #155	; 0x9b
      _s = s;
    6cc0:	strb.w	r1, [r3, #3396]	; 0xd44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cc4:	str.w	r6, [r3, #3416]	; 0xd58
      _s = s;
    6cc8:	mvn.w	r6, #76	; 0x4c
      _b = b;
    6ccc:	strb.w	r9, [r3, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cd0:	strb.w	r6, [r3, #3420]	; 0xd5c
      _b = b;
    6cd4:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cd8:	str.w	r8, [r3, #3400]	; 0xd48
      _s = s;
      _b = b;
    6cdc:	strb.w	r6, [r3, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ce0:	movs	r6, #141	; 0x8d
      _s = s;
    6ce2:	strb.w	lr, [r3, #3404]	; 0xd4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ce6:	str.w	r6, [r3, #3424]	; 0xd60
    6cea:	movs	r6, #73	; 0x49
      _s = s;
      _b = b;
    6cec:	strb.w	r2, [r3, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cf0:	strb.w	r1, [r3, #3428]	; 0xd64
      _b = b;
    6cf4:	strb.w	sl, [r3, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cf8:	str.w	r6, [r3, #3432]	; 0xd68
      _s = s;
    6cfc:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d00:	str.w	fp, [r3, #3472]	; 0xd90
      _s = s;
    6d04:	strb.w	r6, [r3, #3436]	; 0xd6c
      _b = b;
    6d08:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d0c:	strb.w	r1, [r3, #3476]	; 0xd94
      _b = b;
    6d10:	strb.w	r6, [r3, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d14:	movs	r6, #65	; 0x41
      _s = s;
      _b = b;
    6d16:	strb.w	r9, [r3, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d1a:	mov	r7, r6
    6d1c:	str.w	r6, [r3, #3440]	; 0xd70
      _s = s;
    6d20:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d24:	str.w	fp, [r3, #3480]	; 0xd98
    6d28:	str.w	r7, [r3, #3448]	; 0xd78
      _s = s;
    6d2c:	strb.w	r6, [r3, #3444]	; 0xd74
      _b = b;
    6d30:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d34:	strb.w	r1, [r3, #3484]	; 0xd9c
      _b = b;
    6d38:	strb.w	r6, [r3, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d3c:	mvn.w	r6, #48	; 0x30
      _b = b;
    6d40:	strb.w	r9, [r3, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d44:	strb.w	r6, [r3, #3452]	; 0xd7c
      _b = b;
    6d48:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d4c:	str.w	fp, [r3, #3488]	; 0xda0
      _s = s;
      _b = b;
    6d50:	strb.w	r6, [r3, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d54:	movs	r6, #155	; 0x9b
      _s = s;
    6d56:	strb.w	r1, [r3, #3492]	; 0xda4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d5a:	str.w	r6, [r3, #3456]	; 0xd80
      _s = s;
    6d5e:	mvn.w	r6, #76	; 0x4c
      _b = b;
    6d62:	strb.w	r9, [r3, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d66:	strb.w	r6, [r3, #3460]	; 0xd84
      _b = b;
    6d6a:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d6e:	str.w	fp, [r3, #3496]	; 0xda8
      _s = s;
      _b = b;
    6d72:	strb.w	r6, [r3, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d76:	movs	r6, #213	; 0xd5
      _s = s;
    6d78:	strb.w	r1, [r3, #3500]	; 0xdac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d7c:	str.w	r6, [r3, #3464]	; 0xd88
      _s = s;
    6d80:	mvn.w	r6, #32
      _b = b;
    6d84:	strb.w	r9, [r3, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d88:	strb.w	r6, [r3, #3468]	; 0xd8c
      _b = b;
    6d8c:	mov.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d90:	str.w	fp, [r3, #3504]	; 0xdb0
      _s = s;
      _b = b;
    6d94:	strb.w	r6, [r3, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d98:	mov.w	r6, #270	; 0x10e
      _s = s;
    6d9c:	strb.w	r1, [r3, #3508]	; 0xdb4
      _b = b;
    6da0:	strb.w	r9, [r3, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6da4:	str.w	r8, [r3, #3512]	; 0xdb8
      _s = s;
    6da8:	strb.w	lr, [r3, #3516]	; 0xdbc
      _b = b;
    6dac:	strb.w	r2, [r3, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6db0:	str.w	r6, [r3, #3528]	; 0xdc8
      _s = s;
    6db4:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6db8:	str.w	r8, [r3, #3520]	; 0xdc0
      _s = s;
    6dbc:	strb.w	r6, [r3, #3532]	; 0xdcc
      _b = b;
    6dc0:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dc4:	strb.w	lr, [r3, #3524]	; 0xdc4
      _b = b;
    6dc8:	strb.w	r6, [r3, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dcc:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    6dce:	strb.w	r2, [r3, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dd2:	str.w	r6, [r3, #3536]	; 0xdd0
    6dd6:	str.w	r6, [r3, #3544]	; 0xdd8
    6dda:	mov.w	r6, #270	; 0x10e
      _s = s;
    6dde:	strb.w	r1, [r3, #3540]	; 0xdd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6de2:	str.w	r6, [r3, #3552]	; 0xde0
      _s = s;
    6de6:	mvn.w	r6, #118	; 0x76
      _b = b;
    6dea:	strb.w	sl, [r3, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dee:	strb.w	r6, [r3, #3556]	; 0xde4
      _b = b;
    6df2:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6df6:	strb.w	r1, [r3, #3548]	; 0xddc
      _b = b;
    6dfa:	strb.w	r6, [r3, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dfe:	movw	r6, #303	; 0x12f
      _s = s;
      _b = b;
    6e02:	strb.w	sl, [r3, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e06:	str.w	r6, [r3, #3560]	; 0xde8
      _s = s;
    6e0a:	mvn.w	r6, #62	; 0x3e
    6e0e:	strb.w	r2, [r3, #3572]	; 0xdf4
    6e12:	strb.w	r6, [r3, #3564]	; 0xdec
      _b = b;
    6e16:	mvn.w	r6, #36	; 0x24
    6e1a:	strb.w	sl, [r3, #3573]	; 0xdf5
    6e1e:	strb.w	r6, [r3, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e22:	movw	r6, #265	; 0x109
      _s = s;
    6e26:	strb.w	r2, [r3, #3580]	; 0xdfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e2a:	str.w	r6, [r3, #3568]	; 0xdf0
    6e2e:	str.w	r6, [r3, #3576]	; 0xdf8
    6e32:	str.w	r6, [r3, #3584]	; 0xe00
    6e36:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    6e38:	strb.w	sl, [r3, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e3c:	str.w	r6, [r3, #3600]	; 0xe10
      _s = s;
    6e40:	mvn.w	r6, #71	; 0x47
    6e44:	strb.w	r2, [r3, #3588]	; 0xe04
    6e48:	strb.w	r6, [r3, #3604]	; 0xe14
      _b = b;
    6e4c:	mvn.w	r6, #39	; 0x27
    6e50:	strb.w	sl, [r3, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e54:	str.w	r8, [r3, #3592]	; 0xe08
      _s = s;
    6e58:	strb.w	lr, [r3, #3596]	; 0xe0c
      _b = b;
    6e5c:	strb.w	r2, [r3, #3597]	; 0xe0d
    6e60:	strb.w	r6, [r3, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e64:	movs	r6, #155	; 0x9b
    6e66:	str.w	fp, [r3, #3672]	; 0xe58
    6e6a:	mov	r7, r6
    6e6c:	str.w	r6, [r3, #3608]	; 0xe18
      _s = s;
    6e70:	mvn.w	r6, #76	; 0x4c
    6e74:	strb.w	r1, [r3, #3676]	; 0xe5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e78:	str.w	r7, [r3, #3616]	; 0xe20
      _s = s;
    6e7c:	strb.w	r6, [r3, #3612]	; 0xe1c
      _b = b;
    6e80:	mvn.w	r6, #56	; 0x38
    6e84:	strb.w	r9, [r3, #3677]	; 0xe5d
    6e88:	strb.w	r6, [r3, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e8c:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e90:	str.w	fp, [r3, #3680]	; 0xe60
      _s = s;
    6e94:	strb.w	r6, [r3, #3620]	; 0xe24
      _b = b;
    6e98:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e9c:	strb.w	r1, [r3, #3684]	; 0xe64
      _b = b;
    6ea0:	strb.w	r6, [r3, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ea4:	movs	r6, #73	; 0x49
      _s = s;
      _b = b;
    6ea6:	strb.w	r9, [r3, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eaa:	str.w	r6, [r3, #3624]	; 0xe28
      _s = s;
    6eae:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eb2:	str.w	r8, [r3, #3688]	; 0xe68
      _s = s;
    6eb6:	strb.w	r6, [r3, #3628]	; 0xe2c
      _b = b;
    6eba:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ebe:	strb.w	lr, [r3, #3692]	; 0xe6c
      _b = b;
    6ec2:	strb.w	r6, [r3, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ec6:	movs	r6, #65	; 0x41
    6ec8:	mov	r7, r6
    6eca:	str.w	r6, [r3, #3632]	; 0xe30
      _s = s;
    6ece:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ed2:	str.w	r7, [r3, #3640]	; 0xe38
      _s = s;
    6ed6:	strb.w	r6, [r3, #3636]	; 0xe34
      _b = b;
    6eda:	mvn.w	r6, #42	; 0x2a
    6ede:	strb.w	r6, [r3, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ee2:	mvn.w	r6, #48	; 0x30
    6ee6:	strb.w	r6, [r3, #3644]	; 0xe3c
      _b = b;
    6eea:	mvn.w	r6, #42	; 0x2a
    6eee:	strb.w	r6, [r3, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ef2:	movs	r6, #192	; 0xc0
    6ef4:	str.w	r6, [r3, #3648]	; 0xe40
      _s = s;
    6ef8:	mvn.w	r6, #71	; 0x47
    6efc:	strb.w	r6, [r3, #3652]	; 0xe44
      _b = b;
    6f00:	mvn.w	r6, #39	; 0x27
    6f04:	strb.w	r6, [r3, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f08:	movs	r6, #213	; 0xd5
    6f0a:	str.w	r6, [r3, #3656]	; 0xe48
      _s = s;
    6f0e:	mvn.w	r6, #32
    6f12:	strb.w	r6, [r3, #3660]	; 0xe4c
      _b = b;
    6f16:	mov.w	r6, #89	; 0x59
    6f1a:	strb.w	r6, [r3, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f1e:	movs	r6, #213	; 0xd5
    6f20:	str.w	r6, [r3, #3664]	; 0xe50
      _s = s;
    6f24:	mvn.w	r6, #32
    6f28:	strb.w	r6, [r3, #3668]	; 0xe54
      _b = b;
    6f2c:	mov.w	r6, #89	; 0x59
    6f30:	strb.w	r6, [r3, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f34:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    6f36:	strb.w	r2, [r3, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f3a:	str.w	r6, [r3, #3720]	; 0xe88
    6f3e:	str.w	r6, [r3, #3728]	; 0xe90
    6f42:	movw	r6, #265	; 0x109
    6f46:	str.w	r8, [r3, #3696]	; 0xe70
    6f4a:	str.w	r6, [r3, #3736]	; 0xe98
    6f4e:	movw	r6, #303	; 0x12f
      _s = s;
    6f52:	strb.w	lr, [r3, #3700]	; 0xe74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f56:	str.w	r6, [r3, #3752]	; 0xea8
      _s = s;
    6f5a:	mvn.w	r6, #62	; 0x3e
      _b = b;
    6f5e:	strb.w	r2, [r3, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f62:	strb.w	r6, [r3, #3756]	; 0xeac
      _b = b;
    6f66:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f6a:	str.w	r8, [r3, #3704]	; 0xe78
      _s = s;
      _b = b;
    6f6e:	strb.w	r6, [r3, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f72:	movw	r6, #265	; 0x109
      _s = s;
    6f76:	strb.w	lr, [r3, #3708]	; 0xe7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f7a:	str.w	r6, [r3, #3768]	; 0xeb8
    6f7e:	str.w	r6, [r3, #3776]	; 0xec0
    6f82:	mov.w	r6, #270	; 0x10e
      _s = s;
      _b = b;
    6f86:	strb.w	r2, [r3, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f8a:	str.w	fp, [r3, #3712]	; 0xe80
      _s = s;
    6f8e:	strb.w	r1, [r3, #3716]	; 0xe84
      _b = b;
    6f92:	strb.w	r9, [r3, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f96:	strb.w	r1, [r3, #3724]	; 0xe8c
      _b = b;
    6f9a:	strb.w	sl, [r3, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f9e:	strb.w	r1, [r3, #3732]	; 0xe94
      _b = b;
    6fa2:	strb.w	sl, [r3, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fa6:	strb.w	r2, [r3, #3740]	; 0xe9c
      _b = b;
    6faa:	strb.w	sl, [r3, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fae:	str.w	r8, [r3, #3744]	; 0xea0
      _s = s;
    6fb2:	strb.w	lr, [r3, #3748]	; 0xea4
      _b = b;
    6fb6:	strb.w	r2, [r3, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fba:	str.w	r8, [r3, #3760]	; 0xeb0
      _s = s;
    6fbe:	strb.w	lr, [r3, #3764]	; 0xeb4
      _b = b;
    6fc2:	strb.w	r2, [r3, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fc6:	strb.w	r2, [r3, #3772]	; 0xebc
      _b = b;
    6fca:	strb.w	sl, [r3, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fce:	strb.w	r2, [r3, #3780]	; 0xec4
      _b = b;
    6fd2:	strb.w	sl, [r3, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fd6:	str.w	r6, [r3, #3784]	; 0xec8
      _s = s;
    6fda:	mvn.w	r6, #118	; 0x76
    6fde:	strb.w	r1, [r3, #3836]	; 0xefc
    6fe2:	strb.w	r6, [r3, #3788]	; 0xecc
      _b = b;
    6fe6:	mvn.w	r6, #4
    6fea:	strb.w	sl, [r3, #3837]	; 0xefd
    6fee:	strb.w	r6, [r3, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ff2:	movs	r6, #192	; 0xc0
      _s = s;
    6ff4:	strb.w	r1, [r3, #3852]	; 0xf0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ff8:	mov	r7, r6
    6ffa:	str.w	r6, [r3, #3792]	; 0xed0
      _s = s;
    6ffe:	mvn.w	r6, #71	; 0x47
      _b = b;
    7002:	strb.w	sl, [r3, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7006:	str.w	r7, [r3, #3800]	; 0xed8
      _s = s;
    700a:	strb.w	r6, [r3, #3796]	; 0xed4
      _b = b;
    700e:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7012:	strb.w	r1, [r3, #3860]	; 0xf14
      _b = b;
    7016:	strb.w	r6, [r3, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    701a:	mvn.w	r6, #71	; 0x47
      _b = b;
    701e:	strb.w	sl, [r3, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7022:	strb.w	r6, [r3, #3804]	; 0xedc
      _b = b;
    7026:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    702a:	strb.w	r1, [r3, #3868]	; 0xf1c
      _b = b;
    702e:	strb.w	r6, [r3, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7032:	movs	r6, #155	; 0x9b
    7034:	str.w	r6, [r3, #3808]	; 0xee0
      _s = s;
    7038:	mvn.w	r6, #76	; 0x4c
    703c:	strb.w	r6, [r3, #3812]	; 0xee4
      _b = b;
    7040:	mvn.w	r6, #56	; 0x38
    7044:	strb.w	r6, [r3, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7048:	movs	r6, #73	; 0x49
    704a:	str.w	r6, [r3, #3816]	; 0xee8
      _s = s;
    704e:	mov.w	r6, #9
    7052:	strb.w	r6, [r3, #3820]	; 0xeec
      _b = b;
    7056:	mvn.w	r6, #3
    705a:	strb.w	r6, [r3, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    705e:	movs	r6, #65	; 0x41
    7060:	str.w	r6, [r3, #3824]	; 0xef0
      _s = s;
    7064:	mvn.w	r6, #48	; 0x30
    7068:	strb.w	r6, [r3, #3828]	; 0xef4
      _b = b;
    706c:	mvn.w	r6, #42	; 0x2a
    7070:	strb.w	r6, [r3, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7074:	movs	r6, #141	; 0x8d
    7076:	str.w	r6, [r3, #3832]	; 0xef8
    707a:	movs	r6, #73	; 0x49
    707c:	str.w	r6, [r3, #3840]	; 0xf00
      _s = s;
    7080:	mov.w	r6, #9
    7084:	strb.w	r6, [r3, #3844]	; 0xf04
      _b = b;
    7088:	mvn.w	r6, #3
    708c:	strb.w	r6, [r3, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7090:	movs	r6, #141	; 0x8d
    7092:	str.w	r6, [r3, #3848]	; 0xf08
    7096:	str.w	r6, [r3, #3856]	; 0xf10
    709a:	str.w	r6, [r3, #3864]	; 0xf18
      _s = s;
      _b = b;
    709e:	strb.w	sl, [r3, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70a2:	str.w	r6, [r3, #3872]	; 0xf20
    70a6:	movs	r6, #155	; 0x9b
      _s = s;
    70a8:	strb.w	r1, [r3, #3876]	; 0xf24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ac:	str.w	r6, [r3, #3880]	; 0xf28
      _s = s;
    70b0:	mvn.w	r6, #76	; 0x4c
      _b = b;
    70b4:	strb.w	sl, [r3, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70b8:	strb.w	r6, [r3, #3884]	; 0xf2c
      _b = b;
    70bc:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70c0:	strb.w	r1, [r3, #3892]	; 0xf34
      _b = b;
    70c4:	strb.w	r6, [r3, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70c8:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    70ca:	strb.w	sl, [r3, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ce:	str.w	r6, [r3, #3888]	; 0xf30
    70d2:	movs	r6, #155	; 0x9b
      _s = s;
    70d4:	strb.w	r1, [r3, #3932]	; 0xf5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70d8:	mov	r7, r6
    70da:	str.w	r6, [r3, #3896]	; 0xf38
      _s = s;
    70de:	mvn.w	r6, #76	; 0x4c
      _b = b;
    70e2:	strb.w	sl, [r3, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70e6:	str.w	r7, [r3, #3904]	; 0xf40
      _s = s;
    70ea:	strb.w	r6, [r3, #3900]	; 0xf3c
      _b = b;
    70ee:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70f2:	str.w	r7, [r3, #3912]	; 0xf48
      _s = s;
      _b = b;
    70f6:	strb.w	r6, [r3, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70fa:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70fe:	str.w	r7, [r3, #3920]	; 0xf50
      _s = s;
    7102:	strb.w	r6, [r3, #3908]	; 0xf44
      _b = b;
    7106:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    710a:	str.w	r8, [r3, #3936]	; 0xf60
      _s = s;
    710e:	mov.w	r8, #130	; 0x82
      _b = b;
    7112:	strb.w	r6, [r3, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7116:	mvn.w	r6, #76	; 0x4c
    711a:	strb.w	lr, [r3, #3940]	; 0xf64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    711e:	mov.w	lr, #10
      _s = s;
    7122:	strb.w	r6, [r3, #3916]	; 0xf4c
      _b = b;
    7126:	mvn.w	r6, #56	; 0x38
    712a:	strb.w	r2, [r3, #3941]	; 0xf65
    712e:	strb.w	r6, [r3, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7132:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7136:	str.w	fp, [r3, #3952]	; 0xf70
      _s = s;
    713a:	strb.w	r6, [r3, #3924]	; 0xf54
      _b = b;
    713e:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7142:	strb.w	r1, [r3, #3956]	; 0xf74
      _b = b;
    7146:	strb.w	r6, [r3, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    714a:	movs	r6, #141	; 0x8d
    714c:	str.w	r6, [r3, #3928]	; 0xf58
    7150:	mov.w	r6, #270	; 0x10e
    7154:	str.w	r6, [r3, #3944]	; 0xf68
      _s = s;
    7158:	mvn.w	r6, #118	; 0x76
    715c:	strb.w	r6, [r3, #3948]	; 0xf6c
      _b = b;
    7160:	mvn.w	r6, #4
    7164:	strb.w	r6, [r3, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7168:	movw	r6, #303	; 0x12f
      _s = s;
      _b = b;
    716c:	strb.w	r9, [r3, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7170:	mov	r7, r6
    7172:	str.w	r6, [r3, #3960]	; 0xf78
      _s = s;
    7176:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    717a:	str.w	ip, [r3, #4024]	; 0xfb8
    717e:	str.w	r7, [r3, #3968]	; 0xf80
      _s = s;
    7182:	strb.w	r6, [r3, #3964]	; 0xf7c
      _b = b;
    7186:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    718a:	strb.w	r1, [r3, #4044]	; 0xfcc
      _b = b;
    718e:	strb.w	r6, [r3, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7192:	mvn.w	r6, #62	; 0x3e
    7196:	strb.w	r5, [r3, #4028]	; 0xfbc
    719a:	strb.w	r6, [r3, #3972]	; 0xf84
      _b = b;
    719e:	mvn.w	r6, #36	; 0x24
    71a2:	strb.w	r6, [r3, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71a6:	mov.w	r6, #270	; 0x10e
    71aa:	str.w	r6, [r3, #3976]	; 0xf88
      _s = s;
    71ae:	mvn.w	r6, #118	; 0x76
    71b2:	strb.w	r6, [r3, #3980]	; 0xf8c
      _b = b;
    71b6:	mvn.w	r6, #4
    71ba:	strb.w	r6, [r3, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71be:	movs	r6, #192	; 0xc0
    71c0:	str.w	r6, [r3, #3984]	; 0xf90
      _s = s;
    71c4:	mvn.w	r6, #71	; 0x47
    71c8:	strb.w	r6, [r3, #3988]	; 0xf94
      _b = b;
    71cc:	mvn.w	r6, #39	; 0x27
    71d0:	strb.w	r6, [r3, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71d4:	movs	r6, #155	; 0x9b
    71d6:	mov	r7, r6
    71d8:	str.w	r6, [r3, #3992]	; 0xf98
      _s = s;
    71dc:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71e0:	str.w	r7, [r3, #4000]	; 0xfa0
    71e4:	movs	r7, #73	; 0x49
      _s = s;
    71e6:	strb.w	r6, [r3, #3996]	; 0xf9c
      _b = b;
    71ea:	mvn.w	r6, #56	; 0x38
    71ee:	strb.w	r6, [r3, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71f2:	mvn.w	r6, #76	; 0x4c
    71f6:	strb.w	r6, [r3, #4004]	; 0xfa4
      _b = b;
    71fa:	mvn.w	r6, #56	; 0x38
    71fe:	strb.w	r6, [r3, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7202:	movs	r6, #73	; 0x49
    7204:	str.w	r6, [r3, #4008]	; 0xfa8
      _s = s;
    7208:	mov.w	r6, #9
    720c:	strb.w	r6, [r3, #4012]	; 0xfac
      _b = b;
    7210:	mvn.w	r6, #3
    7214:	strb.w	r6, [r3, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7218:	movs	r6, #65	; 0x41
    721a:	str.w	r6, [r3, #4016]	; 0xfb0
      _s = s;
    721e:	mvn.w	r6, #48	; 0x30
    7222:	strb.w	r6, [r3, #4020]	; 0xfb4
      _b = b;
    7226:	mvn.w	r6, #42	; 0x2a
    722a:	strb.w	r6, [r3, #4021]	; 0xfb5
    722e:	mov.w	r6, #0
    7232:	strb.w	r6, [r3, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7236:	movs	r6, #155	; 0x9b
    7238:	str.w	r6, [r3, #4032]	; 0xfc0
      _s = s;
    723c:	mvn.w	r6, #76	; 0x4c
    7240:	strb.w	r6, [r3, #4036]	; 0xfc4
      _b = b;
    7244:	mvn.w	r6, #56	; 0x38
    7248:	strb.w	r6, [r3, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    724c:	movs	r6, #141	; 0x8d
    724e:	str.w	r6, [r3, #4040]	; 0xfc8
      _s = s;
      _b = b;
    7252:	strb.w	sl, [r3, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7256:	str.w	r7, [r0], #32
    725a:	movs	r7, #155	; 0x9b
    725c:	str.w	r6, [r3, #4048]	; 0xfd0
    7260:	str	r7, [r0, #0]
      _s = s;
    7262:	mvn.w	r0, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7266:	str.w	r7, [r3, #4056]	; 0xfd8
    726a:	movs	r7, #155	; 0x9b
      _s = s;
    726c:	strb.w	r0, [r3, #4060]	; 0xfdc
      _b = b;
    7270:	mvn.w	r0, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7274:	str.w	r6, [r3, #4064]	; 0xfe0
      _s = s;
      _b = b;
    7278:	strb.w	r0, [r3, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    727c:	mvn.w	r0, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7280:	str.w	r6, [r3, #4072]	; 0xfe8
      _s = s;
    7284:	mov.w	r6, #9
    7288:	strb.w	r0, [r3, #4084]	; 0xff4
      _b = b;
    728c:	mvn.w	r0, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7290:	str.w	r7, [r3, #4080]	; 0xff0
    7294:	movs	r7, #65	; 0x41
      _s = s;
      _b = b;
    7296:	strb.w	r0, [r3, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    729a:	mvn.w	r0, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    729e:	str.w	r7, [r3, #4088]	; 0xff8
    72a2:	movs	r7, #73	; 0x49
      _s = s;
    72a4:	strb.w	r0, [r3, #4092]	; 0xffc
      _b = b;
    72a8:	mvn.w	r0, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72ac:	strb.w	r1, [r3, #4052]	; 0xfd4
      _b = b;
    72b0:	strb.w	r0, [r3, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72b4:	movw	r0, #4100	; 0x1004
      _b = b;
    72b8:	strb.w	sl, [r3, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72bc:	strb	r6, [r3, r0]
      _b = b;
    72be:	movw	r0, #4101	; 0x1005
    72c2:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72c6:	strb.w	r1, [r3, #4068]	; 0xfe4
      _b = b;
    72ca:	strb.w	sl, [r3, #4069]	; 0xfe5
    72ce:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72d0:	movw	r0, #4104	; 0x1008
      _s = s;
    72d4:	mov.w	r6, #9
    72d8:	strb.w	r1, [r3, #4076]	; 0xfec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72dc:	str	r7, [r3, r0]
      _s = s;
    72de:	movw	r0, #4108	; 0x100c
      _b = b;
    72e2:	strb.w	sl, [r3, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72e6:	strb	r6, [r3, r0]
      _b = b;
    72e8:	movw	r0, #4109	; 0x100d
    72ec:	mvn.w	r6, #3
    72f0:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72f2:	movw	r0, #4112	; 0x1010
      _s = s;
    72f6:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72fa:	str	r7, [r3, r0]
      _s = s;
    72fc:	movw	r0, #4116	; 0x1014
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7300:	movs	r7, #155	; 0x9b
      _s = s;
    7302:	strb	r6, [r3, r0]
      _b = b;
    7304:	movw	r0, #4117	; 0x1015
    7308:	mvn.w	r6, #3
    730c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    730e:	movw	r0, #4120	; 0x1018
      _s = s;
    7312:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7316:	str	r7, [r3, r0]
      _s = s;
    7318:	movw	r0, #4124	; 0x101c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    731c:	add.w	r7, r3, #4096	; 0x1000
      _s = s;
    7320:	strb	r6, [r3, r0]
      _b = b;
    7322:	movw	r0, #4125	; 0x101d
    7326:	mvn.w	r6, #56	; 0x38
    732a:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    732c:	movw	r0, #4132	; 0x1024
    7330:	mvn.w	r6, #76	; 0x4c
    7334:	strb	r6, [r3, r0]
      _b = b;
    7336:	movw	r0, #4133	; 0x1025
    733a:	mvn.w	r6, #56	; 0x38
    733e:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7340:	mov.w	r0, #270	; 0x10e
    7344:	movw	r6, #4136	; 0x1028
    7348:	str	r0, [r7, #64]	; 0x40
    734a:	mov	r0, r7
    734c:	movs	r7, #192	; 0xc0
    734e:	str	r7, [r3, r6]
      _s = s;
    7350:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7354:	str	r7, [r0, #96]	; 0x60
      _s = s;
    7356:	movw	r0, #4140	; 0x102c
    735a:	strb	r6, [r3, r0]
      _b = b;
    735c:	movw	r0, #4141	; 0x102d
    7360:	mvn.w	r6, #39	; 0x27
    7364:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7366:	movw	r6, #4144	; 0x1030
      _s = s;
    736a:	movw	r0, #4148	; 0x1034
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    736e:	str	r7, [r3, r6]
      _s = s;
    7370:	mvn.w	r6, #71	; 0x47
    7374:	strb	r6, [r3, r0]
      _b = b;
    7376:	movw	r0, #4149	; 0x1035
    737a:	mvn.w	r6, #39	; 0x27
    737e:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7380:	movw	r6, #4152	; 0x1038
    7384:	mov.w	r0, #270	; 0x10e
    7388:	str	r0, [r3, r6]
      _s = s;
    738a:	movw	r0, #4156	; 0x103c
    738e:	mvn.w	r6, #118	; 0x76
    7392:	strb	r6, [r3, r0]
      _b = b;
    7394:	movw	r0, #4157	; 0x103d
    7398:	mvn.w	r6, #4
    739c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    739e:	movw	r0, #4164	; 0x1044
    73a2:	mvn.w	r6, #118	; 0x76
    73a6:	strb	r6, [r3, r0]
      _b = b;
    73a8:	movw	r0, #4165	; 0x1045
    73ac:	mvn.w	r6, #4
    73b0:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73b2:	movw	r6, #4168	; 0x1048
    73b6:	mov.w	r0, #270	; 0x10e
    73ba:	str	r0, [r3, r6]
      _s = s;
    73bc:	movw	r0, #4172	; 0x104c
    73c0:	mvn.w	r6, #118	; 0x76
    73c4:	strb	r6, [r3, r0]
      _b = b;
    73c6:	movw	r0, #4173	; 0x104d
    73ca:	mvn.w	r6, #4
    73ce:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d0:	movw	r6, #4176	; 0x1050
      _s = s;
    73d4:	movw	r0, #4180	; 0x1054
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d8:	str	r7, [r3, r6]
      _s = s;
    73da:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73de:	movs	r7, #155	; 0x9b
      _s = s;
    73e0:	strb	r6, [r3, r0]
      _b = b;
    73e2:	movw	r0, #4181	; 0x1055
    73e6:	mvn.w	r6, #39	; 0x27
    73ea:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73ec:	movw	r6, #4184	; 0x1058
    73f0:	movs	r0, #141	; 0x8d
    73f2:	str	r0, [r3, r6]
      _s = s;
    73f4:	movw	r0, #4188	; 0x105c
    73f8:	mvn.w	r6, #71	; 0x47
    73fc:	strb	r1, [r3, r0]
      _b = b;
    73fe:	movw	r0, #4189	; 0x105d
    7402:	strb.w	sl, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7406:	movw	r0, #4196	; 0x1064
    740a:	strb	r6, [r3, r0]
      _b = b;
    740c:	movw	r0, #4197	; 0x1065
    7410:	mvn.w	r6, #39	; 0x27
    7414:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7416:	movw	r6, #4200	; 0x1068
    741a:	movs	r0, #155	; 0x9b
    741c:	str	r0, [r3, r6]
      _s = s;
    741e:	movw	r0, #4204	; 0x106c
    7422:	mvn.w	r6, #76	; 0x4c
    7426:	strb	r6, [r3, r0]
      _b = b;
    7428:	movw	r0, #4205	; 0x106d
    742c:	mvn.w	r6, #56	; 0x38
    7430:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7432:	movw	r0, #4208	; 0x1070
      _s = s;
      _b = b;
    7436:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    743a:	str.w	ip, [r3, r0]
      _s = s;
    743e:	movw	r0, #4212	; 0x1074
    7442:	strb	r5, [r3, r0]
      _b = b;
    7444:	movw	r0, #4213	; 0x1075
    7448:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    744a:	movw	r0, #4216	; 0x1078
    744e:	str.w	ip, [r3, r0]
      _s = s;
    7452:	movw	r0, #4220	; 0x107c
    7456:	strb	r5, [r3, r0]
      _b = b;
    7458:	movw	r0, #4221	; 0x107d
    745c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    745e:	add.w	r0, r3, #4096	; 0x1000
    7462:	movw	r6, #4280	; 0x10b8
    7466:	str.w	r7, [r0, #160]	; 0xa0
    746a:	movs	r7, #73	; 0x49
    746c:	str.w	ip, [r0, #128]	; 0x80
    7470:	str.w	r7, [r0, #192]	; 0xc0
    7474:	movw	r0, #265	; 0x109
    7478:	str	r0, [r3, r6]
      _s = s;
    747a:	movw	r0, #4284	; 0x10bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    747e:	movw	r6, #4464	; 0x1170
      _s = s;
    7482:	strb	r2, [r3, r0]
    7484:	movw	r2, #4228	; 0x1084
      _b = b;
    7488:	mov.w	r0, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    748c:	strb	r5, [r3, r2]
      _b = b;
    748e:	movw	r2, #4229	; 0x1085
    7492:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7494:	movw	r0, #4232	; 0x1088
    7498:	mov.w	r2, #270	; 0x10e
    749c:	str	r2, [r3, r0]
      _s = s;
    749e:	movw	r2, #4236	; 0x108c
    74a2:	mvn.w	r0, #118	; 0x76
    74a6:	strb	r0, [r3, r2]
      _b = b;
    74a8:	movw	r2, #4237	; 0x108d
    74ac:	mvn.w	r0, #4
    74b0:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74b2:	movw	r0, #4240	; 0x1090
    74b6:	movs	r2, #155	; 0x9b
    74b8:	str	r2, [r3, r0]
      _s = s;
    74ba:	movw	r2, #4244	; 0x1094
    74be:	mvn.w	r0, #76	; 0x4c
    74c2:	strb	r0, [r3, r2]
      _b = b;
    74c4:	movw	r2, #4245	; 0x1095
    74c8:	mvn.w	r0, #56	; 0x38
    74cc:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74ce:	movw	r0, #4248	; 0x1098
    74d2:	movs	r2, #192	; 0xc0
    74d4:	str	r2, [r3, r0]
      _s = s;
    74d6:	movw	r2, #4252	; 0x109c
    74da:	mvn.w	r0, #71	; 0x47
    74de:	strb	r0, [r3, r2]
      _b = b;
    74e0:	movw	r2, #4253	; 0x109d
    74e4:	mvn.w	r0, #39	; 0x27
    74e8:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74ea:	movw	r2, #4260	; 0x10a4
    74ee:	mvn.w	r0, #76	; 0x4c
    74f2:	strb	r0, [r3, r2]
      _b = b;
    74f4:	movw	r2, #4261	; 0x10a5
    74f8:	mvn.w	r0, #56	; 0x38
    74fc:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74fe:	movw	r0, #4264	; 0x10a8
    7502:	movs	r2, #155	; 0x9b
    7504:	str	r2, [r3, r0]
      _s = s;
    7506:	movw	r2, #4268	; 0x10ac
    750a:	mvn.w	r0, #76	; 0x4c
    750e:	strb	r0, [r3, r2]
      _b = b;
    7510:	movw	r2, #4269	; 0x10ad
    7514:	mvn.w	r0, #56	; 0x38
    7518:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    751a:	movw	r0, #4272	; 0x10b0
    751e:	movw	r2, #303	; 0x12f
    7522:	str	r2, [r3, r0]
      _s = s;
    7524:	movw	r2, #4276	; 0x10b4
    7528:	mvn.w	r0, #62	; 0x3e
    752c:	strb	r0, [r3, r2]
      _b = b;
    752e:	movw	r2, #4277	; 0x10b5
    7532:	mvn.w	r0, #36	; 0x24
    7536:	strb	r0, [r3, r2]
    7538:	movw	r2, #4285	; 0x10bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    753c:	mov.w	r0, #9
      _b = b;
    7540:	strb.w	sl, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7544:	movw	r2, #4292	; 0x10c4
    7548:	strb	r0, [r3, r2]
      _b = b;
    754a:	movw	r2, #4293	; 0x10c5
    754e:	mvn.w	r0, #3
    7552:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7554:	movw	r0, #4296	; 0x10c8
      _s = s;
    7558:	movw	r2, #4300	; 0x10cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    755c:	str	r7, [r3, r0]
      _s = s;
    755e:	mov.w	r0, #9
    7562:	strb	r0, [r3, r2]
      _b = b;
    7564:	movw	r2, #4301	; 0x10cd
    7568:	mvn.w	r0, #3
    756c:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    756e:	movw	r0, #4304	; 0x10d0
      _s = s;
    7572:	movw	r2, #4308	; 0x10d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7576:	str	r7, [r3, r0]
      _s = s;
    7578:	mov.w	r0, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    757c:	movs	r7, #192	; 0xc0
      _s = s;
    757e:	strb	r0, [r3, r2]
      _b = b;
    7580:	movw	r2, #4309	; 0x10d5
    7584:	mvn.w	r0, #3
    7588:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    758a:	add.w	r2, r3, #4096	; 0x1000
    758e:	movs	r0, #141	; 0x8d
    7590:	str.w	ip, [r2, #288]	; 0x120
    7594:	str.w	r0, [r2, #224]	; 0xe0
    7598:	movs	r0, #192	; 0xc0
    759a:	str.w	r0, [r2, #256]	; 0x100
    759e:	movw	r0, #4312	; 0x10d8
    75a2:	movs	r2, #192	; 0xc0
    75a4:	str	r2, [r3, r0]
      _s = s;
    75a6:	movw	r2, #4316	; 0x10dc
    75aa:	mvn.w	r0, #71	; 0x47
    75ae:	strb	r0, [r3, r2]
      _b = b;
    75b0:	movw	r2, #4317	; 0x10dd
    75b4:	mvn.w	r0, #39	; 0x27
    75b8:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75ba:	movw	r2, #4324	; 0x10e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75be:	movw	r0, #4328	; 0x10e8
      _s = s;
    75c2:	strb	r1, [r3, r2]
      _b = b;
    75c4:	movw	r2, #4325	; 0x10e5
    75c8:	strb.w	sl, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75cc:	movs	r2, #155	; 0x9b
    75ce:	str	r2, [r3, r0]
      _s = s;
    75d0:	movw	r2, #4332	; 0x10ec
    75d4:	mvn.w	r0, #76	; 0x4c
    75d8:	strb	r0, [r3, r2]
      _b = b;
    75da:	movw	r2, #4333	; 0x10ed
    75de:	mvn.w	r0, #56	; 0x38
    75e2:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75e4:	movw	r0, #4336	; 0x10f0
    75e8:	movs	r2, #192	; 0xc0
    75ea:	str	r2, [r3, r0]
      _s = s;
    75ec:	movw	r2, #4340	; 0x10f4
    75f0:	mvn.w	r0, #71	; 0x47
    75f4:	strb	r0, [r3, r2]
      _b = b;
    75f6:	movw	r2, #4341	; 0x10f5
    75fa:	mvn.w	r0, #39	; 0x27
    75fe:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7600:	movw	r0, #4344	; 0x10f8
    7604:	movs	r2, #192	; 0xc0
    7606:	str	r2, [r3, r0]
      _s = s;
    7608:	movw	r2, #4348	; 0x10fc
    760c:	mvn.w	r0, #71	; 0x47
    7610:	strb	r0, [r3, r2]
      _b = b;
    7612:	movw	r2, #4349	; 0x10fd
    7616:	mvn.w	r0, #39	; 0x27
    761a:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    761c:	movw	r2, #4356	; 0x1104
    7620:	mvn.w	r0, #71	; 0x47
    7624:	strb	r0, [r3, r2]
      _b = b;
    7626:	movw	r2, #4357	; 0x1105
    762a:	mvn.w	r0, #39	; 0x27
    762e:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7630:	movw	r0, #4360	; 0x1108
    7634:	movs	r2, #192	; 0xc0
    7636:	str	r2, [r3, r0]
      _s = s;
    7638:	movw	r2, #4364	; 0x110c
    763c:	mvn.w	r0, #71	; 0x47
    7640:	strb	r0, [r3, r2]
      _b = b;
    7642:	movw	r2, #4365	; 0x110d
    7646:	mvn.w	r0, #39	; 0x27
    764a:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    764c:	movs	r2, #155	; 0x9b
    764e:	movw	r0, #4368	; 0x1110
    7652:	str	r2, [r3, r0]
    7654:	movw	r0, #4376	; 0x1118
    7658:	str	r2, [r3, r0]
      _s = s;
    765a:	mvn.w	r0, #76	; 0x4c
    765e:	movw	r2, #4372	; 0x1114
    7662:	strb	r0, [r3, r2]
    7664:	movw	r2, #4380	; 0x111c
    7668:	strb	r0, [r3, r2]
      _b = b;
    766a:	mvn.w	r0, #56	; 0x38
    766e:	movw	r2, #4373	; 0x1115
    7672:	strb	r0, [r3, r2]
    7674:	movw	r2, #4381	; 0x111d
    7678:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    767a:	movw	r2, #4388	; 0x1124
      _b = b;
    767e:	mov.w	r0, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7682:	strb	r5, [r3, r2]
      _b = b;
    7684:	movw	r2, #4389	; 0x1125
    7688:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    768a:	movw	r2, #4392	; 0x1128
    768e:	str.w	ip, [r3, r2]
      _s = s;
    7692:	movw	r2, #4396	; 0x112c
    7696:	strb	r5, [r3, r2]
      _b = b;
    7698:	movw	r2, #4397	; 0x112d
    769c:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    769e:	add.w	r2, r3, #4096	; 0x1000
    76a2:	movs	r0, #65	; 0x41
    76a4:	str.w	ip, [r2, #320]	; 0x140
    76a8:	str.w	r0, [r2, #384]	; 0x180
    76ac:	movw	r0, #303	; 0x12f
    76b0:	str.w	fp, [r2, #352]	; 0x160
      _s = s;
      _b = b;
    76b4:	movw	r2, #4453	; 0x1165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76b8:	str	r0, [r3, r6]
      _s = s;
    76ba:	movw	r0, #4468	; 0x1174
    76be:	mvn.w	r6, #62	; 0x3e
      _b = b;
    76c2:	strb.w	r9, [r3, r2]
    76c6:	movs	r2, #115	; 0x73
    76c8:	mov.w	fp, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76cc:	strb	r6, [r3, r0]
      _b = b;
    76ce:	movw	r0, #4469	; 0x1175
    76d2:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76d6:	mov.w	r9, #81	; 0x51
      _s = s;
      _b = b;
    76da:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76dc:	movw	r6, #4472	; 0x1178
    76e0:	mov.w	r0, #270	; 0x10e
    76e4:	str	r0, [r3, r6]
      _s = s;
    76e6:	movw	r0, #4476	; 0x117c
    76ea:	mvn.w	r6, #118	; 0x76
    76ee:	strb	r6, [r3, r0]
    76f0:	movw	r0, #4484	; 0x1184
    76f4:	mvn.w	r6, #48	; 0x30
    76f8:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76fa:	movw	r0, #4400	; 0x1130
      _s = s;
      _b = b;
    76fe:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7702:	str.w	ip, [r3, r0]
      _s = s;
    7706:	movw	r0, #4404	; 0x1134
    770a:	strb	r5, [r3, r0]
      _b = b;
    770c:	movw	r0, #4405	; 0x1135
    7710:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7712:	movw	r0, #4408	; 0x1138
    7716:	str.w	ip, [r3, r0]
      _s = s;
    771a:	movw	r0, #4412	; 0x113c
    771e:	strb	r5, [r3, r0]
      _b = b;
    7720:	movw	r0, #4413	; 0x113d
    7724:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7726:	movw	r0, #4420	; 0x1144
    772a:	strb	r5, [r3, r0]
      _b = b;
    772c:	movw	r0, #4421	; 0x1145
    7730:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7732:	movw	r6, #4424	; 0x1148
    7736:	movs	r0, #141	; 0x8d
    7738:	str	r0, [r3, r6]
      _s = s;
    773a:	movw	r0, #4428	; 0x114c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    773e:	movw	r6, #4432	; 0x1150
      _s = s;
    7742:	strb	r1, [r3, r0]
      _b = b;
    7744:	movw	r0, #4429	; 0x114d
    7748:	strb.w	sl, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    774c:	movs	r0, #192	; 0xc0
    774e:	str	r0, [r3, r6]
      _s = s;
    7750:	movw	r0, #4436	; 0x1154
    7754:	mvn.w	r6, #71	; 0x47
    7758:	strb	r6, [r3, r0]
      _b = b;
    775a:	movw	r0, #4437	; 0x1155
    775e:	mvn.w	r6, #39	; 0x27
    7762:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7764:	movw	r6, #4440	; 0x1158
    7768:	movs	r0, #192	; 0xc0
    776a:	str	r0, [r3, r6]
      _s = s;
    776c:	movw	r0, #4444	; 0x115c
    7770:	mvn.w	r6, #71	; 0x47
    7774:	strb	r6, [r3, r0]
      _b = b;
    7776:	movw	r0, #4445	; 0x115d
    777a:	mvn.w	r6, #39	; 0x27
    777e:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7780:	movw	r0, #4452	; 0x1164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7784:	movw	r6, #4456	; 0x1168
      _s = s;
    7788:	strb	r1, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    778a:	movs	r0, #192	; 0xc0
    778c:	str	r0, [r3, r6]
      _s = s;
    778e:	movw	r0, #4460	; 0x116c
    7792:	mvn.w	r6, #71	; 0x47
    7796:	strb	r6, [r3, r0]
      _b = b;
    7798:	movw	r0, #4461	; 0x116d
    779c:	mvn.w	r6, #39	; 0x27
    77a0:	strb	r6, [r3, r0]
    77a2:	movw	r0, #4477	; 0x117d
    77a6:	mvn.w	r6, #4
    77aa:	strb	r6, [r3, r0]
    77ac:	movw	r0, #4485	; 0x1185
    77b0:	mvn.w	r6, #42	; 0x2a
    77b4:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77b6:	add.w	r0, r3, #4096	; 0x1000
    77ba:	movs	r6, #213	; 0xd5
    77bc:	str.w	r7, [r0, #416]	; 0x1a0
    77c0:	str.w	r6, [r0, #448]	; 0x1c0
      _s = s;
    77c4:	movw	r0, #4548	; 0x11c4
    77c8:	mvn.w	r6, #32
    77cc:	strb	r6, [r3, r0]
      _b = b;
    77ce:	movw	r0, #4549	; 0x11c5
    77d2:	mov.w	r6, #89	; 0x59
    77d6:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77d8:	movw	r6, #4488	; 0x1188
    77dc:	movs	r0, #73	; 0x49
    77de:	str	r0, [r3, r6]
      _s = s;
    77e0:	movw	r0, #4492	; 0x118c
    77e4:	mov.w	r6, #9
    77e8:	strb	r6, [r3, r0]
      _b = b;
    77ea:	movw	r0, #4493	; 0x118d
    77ee:	mvn.w	r6, #3
    77f2:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77f4:	movs	r0, #73	; 0x49
    77f6:	movw	r6, #4496	; 0x1190
    77fa:	str	r0, [r3, r6]
    77fc:	movw	r6, #4504	; 0x1198
    7800:	str	r0, [r3, r6]
      _s = s;
    7802:	movw	r0, #4500	; 0x1194
    7806:	mov.w	r6, #9
    780a:	strb	r6, [r3, r0]
      _b = b;
    780c:	mvn.w	r6, #3
    7810:	movw	r0, #4501	; 0x1195
    7814:	strb	r6, [r3, r0]
    7816:	movw	r0, #4509	; 0x119d
    781a:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    781c:	movw	r0, #4508	; 0x119c
    7820:	mov.w	r6, #9
    7824:	strb	r6, [r3, r0]
    7826:	movw	r0, #4516	; 0x11a4
    782a:	mvn.w	r6, #71	; 0x47
    782e:	strb	r6, [r3, r0]
      _b = b;
    7830:	movw	r0, #4517	; 0x11a5
    7834:	mvn.w	r6, #39	; 0x27
    7838:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    783a:	movs	r0, #141	; 0x8d
    783c:	movw	r6, #4520	; 0x11a8
    7840:	str	r0, [r3, r6]
    7842:	movw	r6, #4552	; 0x11c8
    7846:	str	r0, [r3, r6]
      _s = s;
    7848:	movw	r0, #4524	; 0x11ac
    784c:	mvn.w	r6, #71	; 0x47
    7850:	strb	r1, [r3, r0]
    7852:	movw	r0, #4556	; 0x11cc
    7856:	strb	r1, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7858:	movw	r0, #4528	; 0x11b0
      _s = s;
      _b = b;
    785c:	movw	r1, #4525	; 0x11ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7860:	str	r7, [r3, r0]
    7862:	movw	r0, #4536	; 0x11b8
      _s = s;
      _b = b;
    7866:	strb.w	sl, [r3, r1]
    786a:	movw	r1, #4557	; 0x11cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    786e:	str	r7, [r3, r0]
      _s = s;
    7870:	movw	r0, #4532	; 0x11b4
      _b = b;
    7874:	strb.w	sl, [r3, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7878:	movs	r1, #28
      _s = s;
    787a:	strb	r6, [r3, r0]
    787c:	movw	r0, #4540	; 0x11bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7880:	mov.w	sl, #64	; 0x40
      _s = s;
      _b = b;
    7884:	mvn.w	r7, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7888:	strb	r6, [r3, r0]
      _b = b;
    788a:	mvn.w	r6, #39	; 0x27
    788e:	movw	r0, #4533	; 0x11b5
    7892:	strb	r6, [r3, r0]
    7894:	movw	r0, #4541	; 0x11bd
    7898:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    789a:	movw	r0, #4560	; 0x11d0
      _s = s;
      _b = b;
    789e:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78a2:	str.w	ip, [r3, r0]
      _s = s;
    78a6:	movw	r0, #4564	; 0x11d4
    78aa:	strb	r5, [r3, r0]
      _b = b;
    78ac:	movw	r0, #4565	; 0x11d5
    78b0:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78b2:	movw	r0, #4568	; 0x11d8
    78b6:	str.w	ip, [r3, r0]
      _s = s;
    78ba:	movw	r0, #4572	; 0x11dc
    78be:	strb	r5, [r3, r0]
      _b = b;
    78c0:	movw	r0, #4573	; 0x11dd
    78c4:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78c6:	add.w	r0, r3, #4096	; 0x1000
      _s = s;
    78ca:	strb	r6, [r4, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78cc:	str.w	ip, [r0, #480]	; 0x1e0
    78d0:	movs	r0, #0
      _s = s;
      _b = b;
    78d2:	strb	r6, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78d4:	str	r0, [r4, #0]
    78d6:	movs	r0, #0
      _s = s;
    78d8:	strb	r6, [r4, #12]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78da:	str	r0, [r4, #8]
    78dc:	movs	r0, #0
      _s = s;
      _b = b;
    78de:	strb	r6, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78e0:	str	r0, [r4, #16]
    78e2:	movs	r0, #0
      _s = s;
    78e4:	strb	r6, [r4, #20]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78e6:	str	r0, [r4, #24]
    78e8:	movs	r0, #0
      _s = s;
      _b = b;
    78ea:	strb	r6, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78ec:	str	r0, [r4, #32]
    78ee:	movs	r0, #0
      _s = s;
    78f0:	strb	r6, [r4, #28]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f2:	str	r0, [r4, #40]	; 0x28
    78f4:	movs	r0, #0
      _s = s;
      _b = b;
    78f6:	strb	r6, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f8:	str	r0, [r4, #48]	; 0x30
      _s = s;
    78fa:	movw	r0, #4580	; 0x11e4
    78fe:	strb.w	r6, [r4, #36]	; 0x24
    7902:	strb	r5, [r3, r0]
      _b = b;
    7904:	movw	r0, #4581	; 0x11e5
    7908:	strb.w	r6, [r4, #37]	; 0x25
    790c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    790e:	movw	r0, #4584	; 0x11e8
      _s = s;
    7912:	strb.w	r6, [r4, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7916:	str.w	ip, [r3, r0]
      _s = s;
    791a:	movw	r0, #4588	; 0x11ec
      _b = b;
    791e:	strb.w	r6, [r4, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7922:	strb	r5, [r3, r0]
      _b = b;
    7924:	movw	r0, #4589	; 0x11ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7928:	strb.w	r6, [r4, #52]	; 0x34
      _b = b;
    792c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    792e:	movw	r0, #4592	; 0x11f0
    7932:	str.w	ip, [r3, r0]
    7936:	movw	r0, #4600	; 0x11f8
    793a:	str.w	ip, [r3, r0]
      _s = s;
    793e:	movw	r0, #4596	; 0x11f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7942:	mov.w	ip, #62	; 0x3e
      _s = s;
    7946:	strb	r5, [r3, r0]
      _b = b;
    7948:	movw	r0, #4597	; 0x11f5
    794c:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    794e:	movw	r0, #4604	; 0x11fc
    7952:	strb	r5, [r3, r0]
      _b = b;
    7954:	movw	r0, #4605	; 0x11fd
    7958:	strb	r6, [r3, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    795a:	movs	r3, #0
      _s = s;
      _b = b;
    795c:	strb.w	r6, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7960:	str	r3, [r4, #56]	; 0x38
    7962:	movs	r3, #0
      _s = s;
    7964:	strb.w	r6, [r4, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7968:	str	r3, [r4, #64]	; 0x40
    796a:	movw	r3, #261	; 0x105
      _s = s;
      _b = b;
    796e:	strb.w	r6, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7972:	str	r3, [r4, #80]	; 0x50
    7974:	str	r3, [r4, #88]	; 0x58
      _s = s;
    7976:	mvn.w	r3, #49	; 0x31
    797a:	strb.w	r6, [r4, #68]	; 0x44
    797e:	strb.w	r3, [r4, #84]	; 0x54
    7982:	strb.w	r3, [r4, #92]	; 0x5c
      _b = b;
    7986:	mov.w	r3, #95	; 0x5f
    798a:	strb.w	r6, [r4, #69]	; 0x45
    798e:	strb.w	r3, [r4, #85]	; 0x55
    7992:	strb.w	r3, [r4, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7996:	movs	r3, #239	; 0xef
    7998:	str.w	lr, [r4, #72]	; 0x48
    799c:	str	r3, [r4, #96]	; 0x60
    799e:	str	r3, [r4, #104]	; 0x68
    79a0:	str.w	r3, [r4, #136]	; 0x88
      _s = s;
    79a4:	mvn.w	r3, #123	; 0x7b
      _b = b;
    79a8:	strb.w	r2, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79ac:	strb.w	r3, [r4, #100]	; 0x64
    79b0:	strb.w	r3, [r4, #108]	; 0x6c
    79b4:	strb.w	r3, [r4, #140]	; 0x8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79b8:	movs	r3, #245	; 0xf5
      _s = s;
    79ba:	strb.w	r5, [r4, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79be:	str	r3, [r4, #112]	; 0x70
    79c0:	str	r3, [r4, #120]	; 0x78
    79c2:	str.w	r3, [r4, #128]	; 0x80
      _s = s;
    79c6:	mvn.w	r3, #28
      _b = b;
    79ca:	strb.w	r5, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79ce:	strb.w	r3, [r4, #116]	; 0x74
    79d2:	strb.w	r3, [r4, #124]	; 0x7c
    79d6:	strb.w	r3, [r4, #132]	; 0x84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79da:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    79dc:	strb.w	r5, [r4, #109]	; 0x6d
    79e0:	strb.w	r5, [r4, #117]	; 0x75
    79e4:	strb.w	r5, [r4, #125]	; 0x7d
    79e8:	strb.w	r5, [r4, #133]	; 0x85
    79ec:	strb.w	r5, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79f0:	str.w	r3, [r4, #144]	; 0x90
      _s = s;
    79f4:	mvn.w	r3, #123	; 0x7b
    79f8:	strb.w	r6, [r4, #196]	; 0xc4
    79fc:	strb.w	r3, [r4, #148]	; 0x94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a00:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7a02:	strb.w	r6, [r4, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a06:	str.w	r3, [r4, #152]	; 0x98
      _s = s;
    7a0a:	mvn.w	r3, #123	; 0x7b
    7a0e:	strb.w	r6, [r4, #204]	; 0xcc
    7a12:	strb.w	r3, [r4, #156]	; 0x9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a16:	movs	r3, #206	; 0xce
      _s = s;
      _b = b;
    7a18:	strb.w	r6, [r4, #205]	; 0xcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a1c:	str.w	r3, [r4, #160]	; 0xa0
    7a20:	str.w	r3, [r4, #168]	; 0xa8
    7a24:	movw	r3, #261	; 0x105
      _s = s;
    7a28:	strb.w	r6, [r4, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a2c:	str.w	r3, [r4, #176]	; 0xb0
      _s = s;
    7a30:	mvn.w	r3, #49	; 0x31
      _b = b;
    7a34:	strb.w	r6, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a38:	strb.w	r3, [r4, #180]	; 0xb4
      _b = b;
    7a3c:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a40:	strb.w	r6, [r4, #220]	; 0xdc
      _b = b;
    7a44:	strb.w	r3, [r4, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a48:	movs	r3, #0
      _s = s;
      _b = b;
    7a4a:	strb.w	r6, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a4e:	str.w	r3, [r4, #192]	; 0xc0
    7a52:	movs	r3, #0
      _s = s;
    7a54:	strb.w	r6, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a58:	str.w	r3, [r4, #200]	; 0xc8
    7a5c:	movs	r3, #0
      _s = s;
      _b = b;
    7a5e:	strb.w	r5, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a62:	str.w	r3, [r4, #208]	; 0xd0
    7a66:	movs	r3, #0
      _s = s;
      _b = b;
    7a68:	strb.w	r5, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a6c:	str.w	r3, [r4, #216]	; 0xd8
    7a70:	movs	r3, #0
    7a72:	str.w	r3, [r4, #224]	; 0xe0
      _s = s;
    7a76:	mov.w	r3, #39	; 0x27
    7a7a:	strb.w	r3, [r4, #164]	; 0xa4
    7a7e:	strb.w	r3, [r4, #172]	; 0xac
      _b = b;
    7a82:	mvn.w	r3, #7
    7a86:	strb.w	r3, [r4, #165]	; 0xa5
    7a8a:	strb.w	r3, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a8e:	movs	r3, #37	; 0x25
    7a90:	str.w	r3, [r4, #184]	; 0xb8
      _s = s;
    7a94:	mvn.w	r3, #70	; 0x46
    7a98:	strb.w	r3, [r4, #188]	; 0xbc
      _b = b;
    7a9c:	mov.w	r3, #11
    7aa0:	strb.w	r3, [r4, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aa4:	movs	r3, #9
      _s = s;
      _b = b;
    7aa6:	strb.w	r6, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aaa:	str.w	r3, [r4, #256]	; 0x100
    7aae:	str.w	r3, [r4, #264]	; 0x108
    7ab2:	movw	r3, #261	; 0x105
    7ab6:	str.w	lr, [r4, #240]	; 0xf0
    7aba:	str.w	r3, [r4, #280]	; 0x118
      _s = s;
    7abe:	mvn.w	r3, #49	; 0x31
      _b = b;
    7ac2:	strb.w	r2, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ac6:	strb.w	r3, [r4, #284]	; 0x11c
      _b = b;
    7aca:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ace:	str.w	lr, [r4, #248]	; 0xf8
      _s = s;
      _b = b;
    7ad2:	strb.w	r3, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ad6:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7ad8:	strb.w	r2, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7adc:	str.w	r3, [r4, #288]	; 0x120
      _s = s;
    7ae0:	mvn.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ae4:	str.w	lr, [r4, #272]	; 0x110
      _s = s;
    7ae8:	strb.w	r3, [r4, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aec:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7aee:	strb.w	r2, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7af2:	str.w	r3, [r4, #296]	; 0x128
      _s = s;
    7af6:	mvn.w	r3, #123	; 0x7b
    7afa:	strb.w	r6, [r4, #236]	; 0xec
    7afe:	strb.w	r3, [r4, #300]	; 0x12c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b02:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7b04:	strb.w	r6, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b08:	str.w	r3, [r4, #304]	; 0x130
      _s = s;
    7b0c:	mvn.w	r3, #28
    7b10:	strb.w	r5, [r4, #244]	; 0xf4
    7b14:	strb.w	r3, [r4, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b18:	movs	r3, #245	; 0xf5
      _s = s;
    7b1a:	strb.w	r5, [r4, #252]	; 0xfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b1e:	str.w	r3, [r4, #312]	; 0x138
      _s = s;
    7b22:	mvn.w	r3, #28
    7b26:	strb.w	r5, [r4, #260]	; 0x104
    7b2a:	strb.w	r3, [r4, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b2e:	movs	r3, #0
      _s = s;
      _b = b;
    7b30:	strb.w	r5, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b34:	str.w	r3, [r4, #232]	; 0xe8
    7b38:	movs	r3, #245	; 0xf5
      _s = s;
    7b3a:	strb.w	r5, [r4, #268]	; 0x10c
      _b = b;
    7b3e:	strb.w	r5, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b42:	strb.w	r5, [r4, #276]	; 0x114
      _b = b;
    7b46:	strb.w	r5, [r4, #293]	; 0x125
    7b4a:	strb.w	r5, [r4, #301]	; 0x12d
    7b4e:	strb.w	r5, [r4, #309]	; 0x135
    7b52:	strb.w	r5, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b56:	str.w	r3, [r4, #320]	; 0x140
      _s = s;
    7b5a:	mvn.w	r3, #28
    7b5e:	strb.w	r6, [r4, #388]	; 0x184
    7b62:	strb.w	r3, [r4, #324]	; 0x144
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b66:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7b68:	strb.w	r6, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b6c:	str.w	r3, [r4, #328]	; 0x148
      _s = s;
    7b70:	mvn.w	r3, #123	; 0x7b
    7b74:	strb.w	r6, [r4, #396]	; 0x18c
    7b78:	strb.w	r3, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b7c:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7b7e:	strb.w	r6, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b82:	str.w	r3, [r4, #336]	; 0x150
      _s = s;
    7b86:	mvn.w	r3, #123	; 0x7b
    7b8a:	strb.w	r6, [r4, #404]	; 0x194
    7b8e:	strb.w	r3, [r4, #340]	; 0x154
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b92:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7b94:	strb.w	r5, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b98:	str.w	r3, [r4, #344]	; 0x158
      _s = s;
    7b9c:	mvn.w	r3, #123	; 0x7b
      _b = b;
    7ba0:	strb.w	r5, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ba4:	strb.w	r3, [r4, #348]	; 0x15c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ba8:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7baa:	strb.w	r5, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bae:	str.w	r3, [r4, #352]	; 0x160
      _s = s;
    7bb2:	mvn.w	r3, #123	; 0x7b
      _b = b;
    7bb6:	strb.w	r5, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bba:	strb.w	r3, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bbe:	movs	r3, #206	; 0xce
      _s = s;
      _b = b;
    7bc0:	strb.w	r5, [r4, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bc4:	str.w	r3, [r4, #360]	; 0x168
      _s = s;
    7bc8:	mov.w	r3, #39	; 0x27
      _b = b;
    7bcc:	strb.w	r5, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bd0:	strb.w	r3, [r4, #364]	; 0x16c
      _b = b;
    7bd4:	mvn.w	r3, #7
    7bd8:	strb.w	r5, [r4, #381]	; 0x17d
    7bdc:	strb.w	r3, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7be0:	movs	r3, #239	; 0xef
    7be2:	str.w	r3, [r4, #368]	; 0x170
      _s = s;
    7be6:	mvn.w	r3, #123	; 0x7b
    7bea:	strb.w	r3, [r4, #372]	; 0x174
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bee:	movs	r3, #245	; 0xf5
    7bf0:	str.w	r3, [r4, #376]	; 0x178
      _s = s;
    7bf4:	mvn.w	r3, #28
    7bf8:	strb.w	r3, [r4, #380]	; 0x17c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bfc:	movs	r3, #0
    7bfe:	str.w	r3, [r4, #384]	; 0x180
    7c02:	movs	r3, #0
    7c04:	str.w	r3, [r4, #392]	; 0x188
    7c08:	movs	r3, #0
    7c0a:	str.w	r3, [r4, #400]	; 0x190
    7c0e:	movs	r3, #9
      _s = s;
      _b = b;
    7c10:	strb.w	r6, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c14:	str.w	r3, [r4, #440]	; 0x1b8
    7c18:	str.w	r3, [r4, #448]	; 0x1c0
    7c1c:	str.w	r3, [r4, #456]	; 0x1c8
    7c20:	movw	r3, #261	; 0x105
    7c24:	str.w	lr, [r4, #424]	; 0x1a8
    7c28:	str.w	r3, [r4, #472]	; 0x1d8
      _s = s;
    7c2c:	mvn.w	r3, #49	; 0x31
      _b = b;
    7c30:	strb.w	r2, [r4, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c34:	strb.w	r3, [r4, #476]	; 0x1dc
      _b = b;
    7c38:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c3c:	str.w	lr, [r4, #432]	; 0x1b0
      _s = s;
      _b = b;
    7c40:	strb.w	r3, [r4, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c44:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7c46:	strb.w	r2, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c4a:	str.w	r3, [r4, #480]	; 0x1e0
      _s = s;
    7c4e:	mvn.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c52:	str.w	lr, [r4, #464]	; 0x1d0
      _s = s;
    7c56:	strb.w	r3, [r4, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c5a:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7c5c:	strb.w	r2, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c60:	str.w	r3, [r4, #488]	; 0x1e8
      _s = s;
    7c64:	mvn.w	r3, #123	; 0x7b
    7c68:	strb.w	r6, [r4, #412]	; 0x19c
    7c6c:	strb.w	r3, [r4, #492]	; 0x1ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c70:	movs	r3, #0
      _s = s;
      _b = b;
    7c72:	strb.w	r6, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c76:	str.w	r3, [r4, #408]	; 0x198
    7c7a:	movs	r3, #0
      _s = s;
    7c7c:	strb.w	r6, [r4, #420]	; 0x1a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c80:	str.w	r3, [r4, #416]	; 0x1a0
    7c84:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7c86:	strb.w	r6, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c8a:	strb.w	r5, [r4, #428]	; 0x1ac
    7c8e:	strb.w	r5, [r4, #436]	; 0x1b4
    7c92:	strb.w	r5, [r4, #444]	; 0x1bc
      _b = b;
    7c96:	strb.w	r5, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c9a:	strb.w	r5, [r4, #452]	; 0x1c4
      _b = b;
    7c9e:	strb.w	r5, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ca2:	strb.w	r5, [r4, #460]	; 0x1cc
      _b = b;
    7ca6:	strb.w	r5, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7caa:	strb.w	r5, [r4, #468]	; 0x1d4
      _b = b;
    7cae:	strb.w	r5, [r4, #485]	; 0x1e5
    7cb2:	strb.w	r5, [r4, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cb6:	str.w	r3, [r4, #496]	; 0x1f0
      _s = s;
    7cba:	mvn.w	r3, #28
    7cbe:	strb.w	r6, [r4, #580]	; 0x244
    7cc2:	strb.w	r3, [r4, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cc6:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7cc8:	strb.w	r5, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ccc:	str.w	r3, [r4, #504]	; 0x1f8
      _s = s;
    7cd0:	mvn.w	r3, #28
      _b = b;
    7cd4:	strb.w	r5, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cd8:	strb.w	r3, [r4, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cdc:	movw	r3, #261	; 0x105
      _s = s;
      _b = b;
    7ce0:	strb.w	r5, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce4:	str.w	r3, [r4, #512]	; 0x200
      _s = s;
    7ce8:	mvn.w	r3, #49	; 0x31
      _b = b;
    7cec:	strb.w	r5, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cf0:	strb.w	r3, [r4, #516]	; 0x204
      _b = b;
    7cf4:	mov.w	r3, #95	; 0x5f
    7cf8:	strb.w	r5, [r4, #549]	; 0x225
    7cfc:	strb.w	r3, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d00:	movw	r3, #261	; 0x105
      _s = s;
      _b = b;
    7d04:	strb.w	r5, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d08:	str.w	r3, [r4, #520]	; 0x208
      _s = s;
    7d0c:	mvn.w	r3, #49	; 0x31
      _b = b;
    7d10:	strb.w	r5, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d14:	strb.w	r3, [r4, #524]	; 0x20c
      _b = b;
    7d18:	mov.w	r3, #95	; 0x5f
    7d1c:	strb.w	r5, [r4, #573]	; 0x23d
    7d20:	strb.w	r3, [r4, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d24:	movs	r3, #239	; 0xef
    7d26:	str.w	r3, [r4, #528]	; 0x210
      _s = s;
    7d2a:	mvn.w	r3, #123	; 0x7b
    7d2e:	strb.w	r3, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d32:	movs	r3, #239	; 0xef
    7d34:	str.w	r3, [r4, #536]	; 0x218
      _s = s;
    7d38:	mvn.w	r3, #123	; 0x7b
    7d3c:	strb.w	r3, [r4, #540]	; 0x21c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d40:	movs	r3, #239	; 0xef
    7d42:	str.w	r3, [r4, #544]	; 0x220
      _s = s;
    7d46:	mvn.w	r3, #123	; 0x7b
    7d4a:	strb.w	r3, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d4e:	movs	r3, #239	; 0xef
    7d50:	str.w	r3, [r4, #552]	; 0x228
      _s = s;
    7d54:	mvn.w	r3, #123	; 0x7b
    7d58:	strb.w	r3, [r4, #556]	; 0x22c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d5c:	movs	r3, #239	; 0xef
    7d5e:	str.w	r3, [r4, #560]	; 0x230
      _s = s;
    7d62:	mvn.w	r3, #123	; 0x7b
    7d66:	strb.w	r3, [r4, #564]	; 0x234
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d6a:	movs	r3, #239	; 0xef
    7d6c:	str.w	r3, [r4, #568]	; 0x238
      _s = s;
    7d70:	mvn.w	r3, #123	; 0x7b
    7d74:	strb.w	r3, [r4, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d78:	movs	r3, #0
    7d7a:	str.w	r3, [r4, #576]	; 0x240
    7d7e:	movs	r3, #0
      _s = s;
      _b = b;
    7d80:	strb.w	r6, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d84:	str.w	r3, [r4, #584]	; 0x248
    7d88:	movs	r3, #0
      _s = s;
    7d8a:	strb.w	r6, [r4, #588]	; 0x24c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d8e:	str.w	r3, [r4, #592]	; 0x250
    7d92:	movs	r3, #9
      _s = s;
      _b = b;
    7d94:	strb.w	r6, [r4, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d98:	str.w	r3, [r4, #608]	; 0x260
    7d9c:	str.w	r3, [r4, #616]	; 0x268
    7da0:	str.w	r3, [r4, #640]	; 0x280
      _s = s;
      _b = b;
    7da4:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7da8:	strb.w	r6, [r4, #596]	; 0x254
      _b = b;
    7dac:	strb.w	r3, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7db0:	movs	r3, #9
      _s = s;
      _b = b;
    7db2:	strb.w	r6, [r4, #597]	; 0x255
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7db6:	str.w	r3, [r4, #656]	; 0x290
    7dba:	movw	r3, #261	; 0x105
    7dbe:	str.w	lr, [r4, #600]	; 0x258
    7dc2:	str.w	r3, [r4, #664]	; 0x298
      _s = s;
    7dc6:	mvn.w	r3, #49	; 0x31
      _b = b;
    7dca:	strb.w	r2, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dce:	strb.w	r3, [r4, #668]	; 0x29c
      _b = b;
    7dd2:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dd6:	str.w	lr, [r4, #624]	; 0x270
      _s = s;
      _b = b;
    7dda:	strb.w	r2, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dde:	str.w	lr, [r4, #632]	; 0x278
      _s = s;
      _b = b;
    7de2:	strb.w	r2, [r4, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7de6:	str.w	r1, [r4, #648]	; 0x288
      _s = s;
    7dea:	strb.w	r5, [r4, #604]	; 0x25c
    7dee:	strb.w	r5, [r4, #612]	; 0x264
      _b = b;
    7df2:	strb.w	r5, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7df6:	strb.w	r5, [r4, #620]	; 0x26c
      _b = b;
    7dfa:	strb.w	r5, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dfe:	strb.w	r5, [r4, #628]	; 0x274
    7e02:	strb.w	r5, [r4, #636]	; 0x27c
    7e06:	strb.w	r5, [r4, #644]	; 0x284
      _b = b;
    7e0a:	strb.w	r5, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e0e:	strb.w	r5, [r4, #652]	; 0x28c
    7e12:	strb.w	r5, [r4, #660]	; 0x294
      _b = b;
    7e16:	strb.w	r5, [r4, #661]	; 0x295
    7e1a:	strb.w	r3, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e1e:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7e20:	strb.w	r5, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e24:	str.w	r3, [r4, #672]	; 0x2a0
      _s = s;
    7e28:	mvn.w	r3, #123	; 0x7b
      _b = b;
    7e2c:	strb.w	r5, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e30:	strb.w	r3, [r4, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e34:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7e36:	strb.w	r5, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e3a:	str.w	r3, [r4, #680]	; 0x2a8
      _s = s;
    7e3e:	mvn.w	r3, #123	; 0x7b
    7e42:	strb.w	r5, [r4, #708]	; 0x2c4
    7e46:	strb.w	r3, [r4, #684]	; 0x2ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e4a:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7e4c:	strb.w	r5, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e50:	str.w	r3, [r4, #688]	; 0x2b0
      _s = s;
    7e54:	mvn.w	r3, #28
    7e58:	strb.w	r5, [r4, #716]	; 0x2cc
    7e5c:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e60:	movw	r3, #261	; 0x105
      _s = s;
      _b = b;
    7e64:	strb.w	r5, [r4, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e68:	str.w	r3, [r4, #696]	; 0x2b8
      _s = s;
    7e6c:	mvn.w	r3, #49	; 0x31
      _b = b;
    7e70:	strb.w	r5, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e74:	strb.w	r3, [r4, #700]	; 0x2bc
      _b = b;
    7e78:	mov.w	r3, #95	; 0x5f
    7e7c:	strb.w	r5, [r4, #749]	; 0x2ed
    7e80:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e84:	movs	r3, #9
    7e86:	str.w	r3, [r4, #704]	; 0x2c0
    7e8a:	str.w	r3, [r4, #712]	; 0x2c8
    7e8e:	movw	r3, #261	; 0x105
    7e92:	str.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    7e96:	mvn.w	r3, #49	; 0x31
    7e9a:	strb.w	r3, [r4, #724]	; 0x2d4
      _b = b;
    7e9e:	mov.w	r3, #95	; 0x5f
    7ea2:	strb.w	r3, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ea6:	movw	r3, #261	; 0x105
    7eaa:	str.w	r3, [r4, #728]	; 0x2d8
      _s = s;
    7eae:	mvn.w	r3, #49	; 0x31
    7eb2:	strb.w	r3, [r4, #732]	; 0x2dc
      _b = b;
    7eb6:	mov.w	r3, #95	; 0x5f
    7eba:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ebe:	movs	r3, #245	; 0xf5
    7ec0:	str.w	r3, [r4, #736]	; 0x2e0
      _s = s;
    7ec4:	mvn.w	r3, #28
    7ec8:	strb.w	r3, [r4, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ecc:	movs	r3, #239	; 0xef
    7ece:	str.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    7ed2:	mvn.w	r3, #123	; 0x7b
    7ed6:	strb.w	r3, [r4, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eda:	movs	r3, #239	; 0xef
    7edc:	str.w	r3, [r4, #752]	; 0x2f0
      _s = s;
    7ee0:	mvn.w	r3, #123	; 0x7b
    7ee4:	strb.w	r3, [r4, #756]	; 0x2f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ee8:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    7eea:	strb.w	r5, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eee:	str.w	r3, [r4, #760]	; 0x2f8
      _s = s;
    7ef2:	mvn.w	r3, #123	; 0x7b
    7ef6:	strb.w	r6, [r4, #772]	; 0x304
    7efa:	strb.w	r3, [r4, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7efe:	movs	r3, #0
      _s = s;
      _b = b;
    7f00:	strb.w	r6, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f04:	str.w	r3, [r4, #768]	; 0x300
    7f08:	movs	r3, #0
      _s = s;
    7f0a:	strb.w	r6, [r4, #780]	; 0x30c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f0e:	str.w	r3, [r4, #776]	; 0x308
    7f12:	movs	r3, #0
      _s = s;
      _b = b;
    7f14:	strb.w	r6, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f18:	str.w	r3, [r4, #784]	; 0x310
    7f1c:	movs	r3, #9
      _s = s;
    7f1e:	strb.w	r6, [r4, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f22:	str.w	r3, [r4, #792]	; 0x318
    7f26:	str.w	r3, [r4, #800]	; 0x320
      _s = s;
      _b = b;
    7f2a:	mvn.w	r3, #4
    7f2e:	strb.w	r6, [r4, #789]	; 0x315
    7f32:	strb.w	r3, [r4, #821]	; 0x335
    7f36:	strb.w	r3, [r4, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f3a:	movs	r3, #9
    7f3c:	str.w	lr, [r4, #808]	; 0x328
      _s = s;
      _b = b;
    7f40:	strb.w	r2, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f44:	str.w	r1, [r4, #816]	; 0x330
    7f48:	str.w	r1, [r4, #824]	; 0x338
    7f4c:	str.w	lr, [r4, #832]	; 0x340
      _s = s;
      _b = b;
    7f50:	strb.w	r2, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f54:	str.w	lr, [r4, #840]	; 0x348
      _s = s;
      _b = b;
    7f58:	strb.w	r5, [r4, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f5c:	strb.w	r5, [r4, #796]	; 0x31c
      _b = b;
    7f60:	strb.w	r5, [r4, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f64:	strb.w	r5, [r4, #804]	; 0x324
      _b = b;
    7f68:	strb.w	r5, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f6c:	strb.w	r5, [r4, #812]	; 0x32c
    7f70:	strb.w	r5, [r4, #820]	; 0x334
    7f74:	strb.w	r5, [r4, #828]	; 0x33c
    7f78:	strb.w	r5, [r4, #836]	; 0x344
    7f7c:	strb.w	r5, [r4, #844]	; 0x34c
      _b = b;
    7f80:	strb.w	r2, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f84:	str.w	r3, [r4, #848]	; 0x350
    7f88:	movw	r3, #261	; 0x105
    7f8c:	str.w	r1, [r4, #928]	; 0x3a0
    7f90:	str.w	r3, [r4, #856]	; 0x358
      _s = s;
    7f94:	mvn.w	r3, #49	; 0x31
    7f98:	strb.w	r5, [r4, #852]	; 0x354
    7f9c:	strb.w	r3, [r4, #860]	; 0x35c
      _b = b;
    7fa0:	mov.w	r3, #95	; 0x5f
    7fa4:	strb.w	r5, [r4, #853]	; 0x355
    7fa8:	strb.w	r3, [r4, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fac:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7fae:	strb.w	r5, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fb2:	str.w	r3, [r4, #864]	; 0x360
      _s = s;
    7fb6:	mvn.w	r3, #28
      _b = b;
    7fba:	strb.w	r5, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fbe:	strb.w	r3, [r4, #868]	; 0x364
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fc2:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7fc4:	strb.w	r5, [r4, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fc8:	str.w	r3, [r4, #872]	; 0x368
      _s = s;
    7fcc:	mvn.w	r3, #28
    7fd0:	strb.w	r5, [r4, #892]	; 0x37c
    7fd4:	strb.w	r3, [r4, #876]	; 0x36c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fd8:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    7fda:	strb.w	r5, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fde:	str.w	r3, [r4, #880]	; 0x370
      _s = s;
    7fe2:	mvn.w	r3, #28
    7fe6:	strb.w	r5, [r4, #908]	; 0x38c
    7fea:	strb.w	r3, [r4, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fee:	movs	r3, #9
      _s = s;
      _b = b;
    7ff0:	strb.w	r5, [r4, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ff4:	str.w	r3, [r4, #888]	; 0x378
    7ff8:	movs	r3, #37	; 0x25
      _s = s;
    7ffa:	strb.w	r5, [r4, #916]	; 0x394
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ffe:	str.w	r3, [r4, #896]	; 0x380
      _s = s;
    8002:	mvn.w	r3, #70	; 0x46
      _b = b;
    8006:	strb.w	r5, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    800a:	strb.w	r3, [r4, #900]	; 0x384
      _b = b;
    800e:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8012:	strb.w	r5, [r4, #924]	; 0x39c
      _b = b;
    8016:	strb.w	r3, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    801a:	movs	r3, #9
      _s = s;
      _b = b;
    801c:	strb.w	r5, [r4, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8020:	str.w	r3, [r4, #904]	; 0x388
    8024:	str.w	r3, [r4, #912]	; 0x390
    8028:	str.w	r3, [r4, #920]	; 0x398
      _s = s;
      _b = b;
    802c:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8030:	strb.w	r5, [r4, #932]	; 0x3a4
      _b = b;
    8034:	strb.w	r3, [r4, #933]	; 0x3a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8038:	movw	r3, #261	; 0x105
      _s = s;
    803c:	strb.w	r6, [r4, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8040:	str.w	r3, [r4, #936]	; 0x3a8
      _s = s;
    8044:	mvn.w	r3, #49	; 0x31
      _b = b;
    8048:	strb.w	r6, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    804c:	strb.w	r3, [r4, #940]	; 0x3ac
      _b = b;
    8050:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8054:	strb.w	r6, [r4, #972]	; 0x3cc
      _b = b;
    8058:	strb.w	r3, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    805c:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    805e:	strb.w	r6, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8062:	str.w	r3, [r4, #944]	; 0x3b0
      _s = s;
    8066:	mvn.w	r3, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    806a:	str.w	lr, [r4, #976]	; 0x3d0
      _s = s;
    806e:	strb.w	r3, [r4, #948]	; 0x3b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8072:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    8074:	strb.w	r2, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8078:	str.w	r3, [r4, #952]	; 0x3b8
      _s = s;
    807c:	mvn.w	r3, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8080:	str.w	lr, [r4, #1000]	; 0x3e8
      _s = s;
    8084:	strb.w	r3, [r4, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8088:	movs	r3, #0
      _s = s;
      _b = b;
    808a:	strb.w	r2, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    808e:	str.w	r3, [r4, #960]	; 0x3c0
    8092:	movs	r3, #0
      _s = s;
      _b = b;
    8094:	strb.w	r5, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8098:	str.w	r3, [r4, #968]	; 0x3c8
    809c:	movs	r3, #9
      _s = s;
      _b = b;
    809e:	strb.w	r5, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80a2:	str.w	r3, [r4, #984]	; 0x3d8
    80a6:	str.w	r3, [r4, #992]	; 0x3e0
    80aa:	str.w	r3, [r4, #1008]	; 0x3f0
    80ae:	movs	r3, #37	; 0x25
      _s = s;
    80b0:	strb.w	r5, [r4, #980]	; 0x3d4
    80b4:	strb.w	r5, [r4, #988]	; 0x3dc
      _b = b;
    80b8:	strb.w	r5, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80bc:	strb.w	r5, [r4, #996]	; 0x3e4
      _b = b;
    80c0:	strb.w	r5, [r4, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80c4:	strb.w	r5, [r4, #1004]	; 0x3ec
    80c8:	strb.w	r5, [r4, #1012]	; 0x3f4
      _b = b;
    80cc:	strb.w	r5, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80d0:	strb.w	r5, [r4, #1020]	; 0x3fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80d4:	str.w	sl, [r4, #1016]	; 0x3f8
      _s = s;
      _b = b;
    80d8:	strb.w	fp, [r4, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80dc:	str.w	r3, [r4, #1024]	; 0x400
      _s = s;
    80e0:	mvn.w	r3, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80e4:	str.w	r1, [r4, #1032]	; 0x408
      _s = s;
    80e8:	strb.w	r3, [r4, #1028]	; 0x404
      _b = b;
    80ec:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f0:	str.w	lr, [r4, #1040]	; 0x410
      _s = s;
      _b = b;
    80f4:	strb.w	r3, [r4, #1029]	; 0x405
    80f8:	mvn.w	r3, #4
    80fc:	strb.w	r2, [r4, #1045]	; 0x415
    8100:	strb.w	r3, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8104:	movw	r3, #261	; 0x105
    8108:	str.w	lr, [r4, #1080]	; 0x438
    810c:	str.w	r3, [r4, #1048]	; 0x418
      _s = s;
    8110:	mvn.w	r3, #49	; 0x31
      _b = b;
    8114:	strb.w	r2, [r4, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8118:	strb.w	r3, [r4, #1052]	; 0x41c
      _b = b;
    811c:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8120:	str.w	lr, [r4, #1088]	; 0x440
      _s = s;
      _b = b;
    8124:	strb.w	r3, [r4, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8128:	movs	r3, #245	; 0xf5
      _s = s;
      _b = b;
    812a:	strb.w	r2, [r4, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    812e:	str.w	r3, [r4, #1056]	; 0x420
      _s = s;
    8132:	mvn.w	r3, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8136:	str.w	lr, [r4, #1096]	; 0x448
      _s = s;
    813a:	strb.w	r3, [r4, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    813e:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    8140:	strb.w	r2, [r4, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8144:	str.w	r3, [r4, #1064]	; 0x428
      _s = s;
    8148:	mvn.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    814c:	str.w	lr, [r4, #1104]	; 0x450
      _s = s;
    8150:	strb.w	r3, [r4, #1068]	; 0x42c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8154:	movs	r3, #9
      _s = s;
    8156:	strb.w	r5, [r4, #1036]	; 0x40c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    815a:	str.w	r3, [r4, #1072]	; 0x430
      _s = s;
    815e:	strb.w	r5, [r4, #1044]	; 0x414
      _b = b;
    8162:	strb.w	r5, [r4, #1061]	; 0x425
    8166:	strb.w	r5, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    816a:	strb.w	r5, [r4, #1076]	; 0x434
      _b = b;
    816e:	strb.w	r5, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8172:	strb.w	r5, [r4, #1084]	; 0x43c
    8176:	strb.w	r5, [r4, #1092]	; 0x444
    817a:	strb.w	r5, [r4, #1100]	; 0x44c
    817e:	strb.w	r5, [r4, #1108]	; 0x454
      _b = b;
    8182:	strb.w	r2, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8186:	str.w	r3, [r4, #1112]	; 0x458
      _s = s;
      _b = b;
    818a:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    818e:	str.w	r1, [r4, #1120]	; 0x460
      _s = s;
      _b = b;
    8192:	strb.w	r3, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8196:	movs	r3, #245	; 0xf5
    8198:	str.w	lr, [r4, #1128]	; 0x468
    819c:	str.w	r3, [r4, #1136]	; 0x470
      _s = s;
    81a0:	mvn.w	r3, #28
      _b = b;
    81a4:	strb.w	r2, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81a8:	strb.w	r3, [r4, #1140]	; 0x474
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81ac:	movs	r3, #245	; 0xf5
      _s = s;
    81ae:	strb.w	r6, [r4, #1156]	; 0x484
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81b2:	str.w	r3, [r4, #1144]	; 0x478
      _s = s;
    81b6:	mvn.w	r3, #28
      _b = b;
    81ba:	strb.w	r6, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81be:	strb.w	r3, [r4, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81c2:	add.w	r3, r4, #4096	; 0x1000
    81c6:	str.w	lr, [r4, #1160]	; 0x488
    81ca:	mov	r0, r3
    81cc:	movs	r3, #0
      _s = s;
      _b = b;
    81ce:	strb.w	r2, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81d2:	str.w	r3, [r4, #1152]	; 0x480
    81d6:	movs	r3, #9
    81d8:	str.w	lr, [r4, #1192]	; 0x4a8
    81dc:	str.w	r3, [r4, #1168]	; 0x490
    81e0:	str.w	r3, [r4, #1176]	; 0x498
    81e4:	str.w	r3, [r4, #1184]	; 0x4a0
      _s = s;
      _b = b;
    81e8:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81ec:	strb.w	r5, [r4, #1116]	; 0x45c
      _b = b;
    81f0:	strb.w	r5, [r4, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81f4:	strb.w	r5, [r4, #1124]	; 0x464
    81f8:	strb.w	r5, [r4, #1132]	; 0x46c
      _b = b;
    81fc:	strb.w	r5, [r4, #1141]	; 0x475
    8200:	strb.w	r5, [r4, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8204:	strb.w	r5, [r4, #1164]	; 0x48c
    8208:	strb.w	r5, [r4, #1172]	; 0x494
      _b = b;
    820c:	strb.w	r5, [r4, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8210:	strb.w	r5, [r4, #1180]	; 0x49c
      _b = b;
    8214:	strb.w	r5, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8218:	strb.w	r5, [r4, #1188]	; 0x4a4
      _b = b;
    821c:	strb.w	r5, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8220:	strb.w	r5, [r4, #1196]	; 0x4ac
      _b = b;
    8224:	strb.w	r2, [r4, #1197]	; 0x4ad
    8228:	strb.w	r3, [r4, #1229]	; 0x4cd
    822c:	strb.w	r3, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8230:	movw	r3, #261	; 0x105
    8234:	str.w	lr, [r4, #1200]	; 0x4b0
    8238:	str.w	r3, [r4, #1248]	; 0x4e0
      _s = s;
    823c:	mvn.w	r3, #49	; 0x31
      _b = b;
    8240:	strb.w	r2, [r4, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8244:	strb.w	r3, [r4, #1252]	; 0x4e4
      _b = b;
    8248:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    824c:	str.w	r1, [r4, #1224]	; 0x4c8
      _s = s;
      _b = b;
    8250:	strb.w	r3, [r4, #1253]	; 0x4e5
    8254:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8258:	str.w	r1, [r4, #1240]	; 0x4d8
    825c:	str.w	lr, [r4, #1256]	; 0x4e8
      _s = s;
      _b = b;
    8260:	strb.w	r2, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8264:	str.w	r1, [r4, #1264]	; 0x4f0
      _s = s;
      _b = b;
    8268:	strb.w	r3, [r4, #1269]	; 0x4f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    826c:	str.w	lr, [r4, #1272]	; 0x4f8
      _s = s;
      _b = b;
    8270:	strb.w	r2, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8274:	str.w	r1, [r4, #1280]	; 0x500
      _s = s;
    8278:	strb.w	r5, [r4, #1204]	; 0x4b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    827c:	str.w	sl, [r4, #1208]	; 0x4b8
      _s = s;
    8280:	strb.w	r5, [r4, #1212]	; 0x4bc
      _b = b;
    8284:	strb.w	fp, [r4, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8288:	str.w	sl, [r4, #1216]	; 0x4c0
      _s = s;
    828c:	strb.w	r5, [r4, #1220]	; 0x4c4
      _b = b;
    8290:	strb.w	fp, [r4, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8294:	strb.w	r5, [r4, #1228]	; 0x4cc
      _b = b;
    8298:	strb.w	r5, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    829c:	strb.w	r5, [r4, #1244]	; 0x4dc
    82a0:	strb.w	r5, [r4, #1260]	; 0x4ec
    82a4:	strb.w	r5, [r4, #1268]	; 0x4f4
    82a8:	strb.w	r5, [r4, #1276]	; 0x4fc
    82ac:	strb.w	r5, [r4, #1284]	; 0x504
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82b0:	str.w	r9, [r4, #1232]	; 0x4d0
      _s = s;
    82b4:	strb.w	r8, [r4, #1236]	; 0x4d4
      _b = b;
    82b8:	strb.w	r3, [r4, #1285]	; 0x505
    82bc:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82c0:	str.w	lr, [r4, #1304]	; 0x518
      _s = s;
      _b = b;
    82c4:	strb.w	r3, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82c8:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    82ca:	strb.w	r2, [r4, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82ce:	str.w	r3, [r4, #1328]	; 0x530
      _s = s;
    82d2:	mvn.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82d6:	str.w	lr, [r4, #1312]	; 0x520
      _s = s;
    82da:	strb.w	r3, [r4, #1332]	; 0x534
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82de:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    82e0:	strb.w	r2, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82e4:	str.w	r3, [r4, #1336]	; 0x538
      _s = s;
    82e8:	mvn.w	r3, #123	; 0x7b
    82ec:	strb.w	r6, [r4, #1348]	; 0x544
    82f0:	strb.w	r3, [r4, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82f4:	movs	r3, #0
      _s = s;
      _b = b;
    82f6:	strb.w	r6, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82fa:	str.w	r3, [r4, #1344]	; 0x540
    82fe:	movs	r3, #9
    8300:	str.w	lr, [r4, #1352]	; 0x548
      _s = s;
      _b = b;
    8304:	strb.w	r2, [r4, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8308:	str.w	r3, [r4, #1360]	; 0x550
    830c:	str.w	r3, [r4, #1368]	; 0x558
    8310:	str.w	ip, [r4, #1288]	; 0x508
      _s = s;
    8314:	strb.w	r5, [r4, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8318:	str.w	sl, [r4, #1296]	; 0x510
      _s = s;
    831c:	strb.w	r5, [r4, #1300]	; 0x514
      _b = b;
    8320:	strb.w	fp, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8324:	strb.w	r5, [r4, #1308]	; 0x51c
    8328:	strb.w	r5, [r4, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    832c:	str.w	r9, [r4, #1320]	; 0x528
      _s = s;
    8330:	strb.w	r8, [r4, #1324]	; 0x52c
      _b = b;
    8334:	strb.w	r5, [r4, #1325]	; 0x52d
    8338:	strb.w	r5, [r4, #1333]	; 0x535
    833c:	strb.w	r5, [r4, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8340:	strb.w	r5, [r4, #1356]	; 0x54c
    8344:	strb.w	r5, [r4, #1364]	; 0x554
      _b = b;
    8348:	strb.w	r5, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    834c:	strb.w	r5, [r4, #1372]	; 0x55c
      _b = b;
    8350:	strb.w	r5, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8354:	str.w	r3, [r4, #1376]	; 0x560
    8358:	movs	r3, #37	; 0x25
    835a:	str.w	lr, [r4, #1384]	; 0x568
    835e:	str.w	r3, [r4, #1392]	; 0x570
      _s = s;
    8362:	mvn.w	r3, #70	; 0x46
      _b = b;
    8366:	strb.w	r2, [r4, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    836a:	strb.w	r3, [r4, #1396]	; 0x574
      _b = b;
    836e:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8372:	str.w	r1, [r4, #1408]	; 0x580
      _s = s;
      _b = b;
    8376:	strb.w	r3, [r4, #1397]	; 0x575
    837a:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    837e:	str.w	lr, [r4, #1416]	; 0x588
      _s = s;
      _b = b;
    8382:	strb.w	r3, [r4, #1413]	; 0x585
    8386:	strb.w	r3, [r4, #1429]	; 0x595
    838a:	strb.w	r3, [r4, #1437]	; 0x59d
    838e:	strb.w	r3, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8392:	movs	r3, #37	; 0x25
      _s = s;
      _b = b;
    8394:	strb.w	r2, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8398:	str.w	r1, [r4, #1424]	; 0x590
    839c:	str.w	r1, [r4, #1432]	; 0x598
    83a0:	str.w	r1, [r4, #1440]	; 0x5a0
    83a4:	str.w	lr, [r4, #1448]	; 0x5a8
      _s = s;
      _b = b;
    83a8:	strb.w	r2, [r4, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83ac:	str.w	lr, [r4, #1456]	; 0x5b0
      _s = s;
    83b0:	strb.w	r5, [r4, #1380]	; 0x564
      _b = b;
    83b4:	strb.w	r5, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83b8:	strb.w	r5, [r4, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83bc:	str.w	sl, [r4, #1400]	; 0x578
      _s = s;
    83c0:	strb.w	r5, [r4, #1404]	; 0x57c
      _b = b;
    83c4:	strb.w	fp, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83c8:	strb.w	r5, [r4, #1412]	; 0x584
    83cc:	strb.w	r5, [r4, #1420]	; 0x58c
    83d0:	strb.w	r5, [r4, #1428]	; 0x594
    83d4:	strb.w	r5, [r4, #1436]	; 0x59c
    83d8:	strb.w	r5, [r4, #1444]	; 0x5a4
    83dc:	strb.w	r5, [r4, #1452]	; 0x5ac
    83e0:	strb.w	r5, [r4, #1460]	; 0x5b4
      _b = b;
    83e4:	strb.w	r2, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83e8:	str.w	r3, [r4, #1488]	; 0x5d0
      _s = s;
    83ec:	mvn.w	r3, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83f0:	str.w	lr, [r4, #1464]	; 0x5b8
      _s = s;
    83f4:	strb.w	r3, [r4, #1492]	; 0x5d4
      _b = b;
    83f8:	mov.w	r3, #11
    83fc:	strb.w	r2, [r4, #1469]	; 0x5bd
    8400:	strb.w	r3, [r4, #1493]	; 0x5d5
    8404:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8408:	str.w	lr, [r4, #1480]	; 0x5c8
      _s = s;
      _b = b;
    840c:	strb.w	r3, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8410:	movs	r3, #206	; 0xce
      _s = s;
      _b = b;
    8412:	strb.w	r2, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8416:	str.w	r3, [r4, #1512]	; 0x5e8
      _s = s;
    841a:	mov.w	r3, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    841e:	str.w	ip, [r4, #1504]	; 0x5e0
      _s = s;
    8422:	strb.w	r3, [r4, #1516]	; 0x5ec
      _b = b;
    8426:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    842a:	strb.w	r6, [r4, #1532]	; 0x5fc
      _b = b;
    842e:	strb.w	r3, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8432:	movs	r3, #206	; 0xce
      _s = s;
      _b = b;
    8434:	strb.w	r6, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8438:	str.w	r3, [r4, #1520]	; 0x5f0
      _s = s;
    843c:	mov.w	r3, #39	; 0x27
    8440:	strb.w	r6, [r4, #1540]	; 0x604
    8444:	strb.w	r3, [r4, #1524]	; 0x5f4
      _b = b;
    8448:	mvn.w	r3, #7
    844c:	strb.w	r6, [r4, #1541]	; 0x605
    8450:	strb.w	r3, [r4, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8454:	movs	r3, #0
    8456:	str.w	lr, [r4, #1544]	; 0x608
    845a:	str.w	r3, [r4, #1528]	; 0x5f8
    845e:	movs	r3, #0
      _s = s;
    8460:	strb.w	r5, [r4, #1468]	; 0x5bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8464:	str.w	r3, [r4, #1536]	; 0x600
      _s = s;
      _b = b;
    8468:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    846c:	str.w	sl, [r4, #1472]	; 0x5c0
      _s = s;
    8470:	strb.w	r5, [r4, #1476]	; 0x5c4
      _b = b;
    8474:	strb.w	fp, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8478:	strb.w	r5, [r4, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    847c:	str.w	sl, [r4, #1496]	; 0x5d8
      _s = s;
    8480:	strb.w	r5, [r4, #1500]	; 0x5dc
      _b = b;
    8484:	strb.w	fp, [r4, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8488:	strb.w	r5, [r4, #1508]	; 0x5e4
    848c:	strb.w	r5, [r4, #1548]	; 0x60c
      _b = b;
    8490:	strb.w	r2, [r4, #1549]	; 0x60d
    8494:	strb.w	r3, [r4, #1573]	; 0x625
    8498:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    849c:	str.w	lr, [r4, #1552]	; 0x610
      _s = s;
      _b = b;
    84a0:	strb.w	r3, [r4, #1581]	; 0x62d
    84a4:	mvn.w	r3, #45	; 0x2d
    84a8:	strb.w	r2, [r4, #1557]	; 0x615
    84ac:	strb.w	r3, [r4, #1589]	; 0x635
    84b0:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84b4:	str.w	ip, [r4, #1576]	; 0x628
      _s = s;
      _b = b;
    84b8:	strb.w	r3, [r4, #1597]	; 0x63d
    84bc:	strb.w	r3, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84c0:	movs	r3, #112	; 0x70
    84c2:	str.w	r1, [r4, #1592]	; 0x638
    84c6:	str.w	r3, [r4, #1568]	; 0x620
    84ca:	str.w	r3, [r4, #1584]	; 0x630
      _s = s;
      _b = b;
    84ce:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84d2:	str.w	lr, [r4, #1600]	; 0x640
      _s = s;
      _b = b;
    84d6:	strb.w	r2, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84da:	str.w	lr, [r4, #1608]	; 0x648
      _s = s;
      _b = b;
    84de:	strb.w	r2, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84e2:	str.w	r1, [r4, #1616]	; 0x650
    84e6:	str.w	r1, [r4, #1632]	; 0x660
      _s = s;
    84ea:	strb.w	r5, [r4, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84ee:	str.w	sl, [r4, #1560]	; 0x618
      _s = s;
    84f2:	strb.w	r5, [r4, #1564]	; 0x61c
      _b = b;
    84f6:	strb.w	fp, [r4, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84fa:	strb.w	r5, [r4, #1572]	; 0x624
    84fe:	strb.w	r5, [r4, #1580]	; 0x62c
    8502:	strb.w	r5, [r4, #1588]	; 0x634
    8506:	strb.w	r5, [r4, #1596]	; 0x63c
    850a:	strb.w	r5, [r4, #1604]	; 0x644
    850e:	strb.w	r5, [r4, #1612]	; 0x64c
    8512:	strb.w	r5, [r4, #1620]	; 0x654
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8516:	str.w	sl, [r4, #1624]	; 0x658
      _s = s;
    851a:	strb.w	r5, [r4, #1628]	; 0x65c
      _b = b;
    851e:	strb.w	fp, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8522:	strb.w	r5, [r4, #1636]	; 0x664
      _b = b;
    8526:	strb.w	r3, [r4, #1637]	; 0x665
    852a:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    852e:	str.w	ip, [r4, #1640]	; 0x668
      _s = s;
      _b = b;
    8532:	strb.w	r3, [r4, #1645]	; 0x66d
    8536:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    853a:	str.w	r1, [r4, #1648]	; 0x670
      _s = s;
      _b = b;
    853e:	strb.w	r3, [r4, #1653]	; 0x675
    8542:	strb.w	r3, [r4, #1685]	; 0x695
    8546:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    854a:	str.w	lr, [r4, #1656]	; 0x678
      _s = s;
      _b = b;
    854e:	strb.w	r3, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8552:	movs	r3, #239	; 0xef
      _s = s;
      _b = b;
    8554:	strb.w	r2, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8558:	str.w	r3, [r4, #1712]	; 0x6b0
      _s = s;
    855c:	mvn.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8560:	str.w	lr, [r4, #1664]	; 0x680
      _s = s;
    8564:	strb.w	r3, [r4, #1716]	; 0x6b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8568:	movs	r3, #0
      _s = s;
      _b = b;
    856a:	strb.w	r2, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    856e:	str.w	r3, [r4, #1720]	; 0x6b8
      _s = s;
      _b = b;
    8572:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8576:	str.w	lr, [r4, #1672]	; 0x688
      _s = s;
      _b = b;
    857a:	strb.w	r2, [r4, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    857e:	str.w	r1, [r4, #1680]	; 0x690
    8582:	str.w	lr, [r4, #1688]	; 0x698
      _s = s;
      _b = b;
    8586:	strb.w	r2, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    858a:	str.w	ip, [r4, #1696]	; 0x6a0
      _s = s;
    858e:	strb.w	r6, [r4, #1724]	; 0x6bc
    8592:	strb.w	r5, [r4, #1644]	; 0x66c
    8596:	strb.w	r5, [r4, #1652]	; 0x674
    859a:	strb.w	r5, [r4, #1660]	; 0x67c
    859e:	strb.w	r5, [r4, #1668]	; 0x684
    85a2:	strb.w	r5, [r4, #1676]	; 0x68c
    85a6:	strb.w	r5, [r4, #1684]	; 0x694
    85aa:	strb.w	r5, [r4, #1692]	; 0x69c
    85ae:	strb.w	r5, [r4, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85b2:	str.w	r9, [r4, #1704]	; 0x6a8
      _s = s;
    85b6:	strb.w	r8, [r4, #1708]	; 0x6ac
      _b = b;
    85ba:	strb.w	r5, [r4, #1709]	; 0x6ad
    85be:	strb.w	r5, [r4, #1717]	; 0x6b5
    85c2:	strb.w	r6, [r4, #1725]	; 0x6bd
    85c6:	strb.w	r3, [r4, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85ca:	movs	r3, #112	; 0x70
    85cc:	str.w	lr, [r4, #1728]	; 0x6c0
    85d0:	str.w	r3, [r4, #1744]	; 0x6d0
      _s = s;
      _b = b;
    85d4:	mvn.w	r3, #45	; 0x2d
    85d8:	strb.w	r2, [r4, #1733]	; 0x6c5
    85dc:	strb.w	r3, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85e0:	movs	r3, #112	; 0x70
    85e2:	str.w	r1, [r4, #1736]	; 0x6c8
    85e6:	str.w	r3, [r4, #1752]	; 0x6d8
      _s = s;
      _b = b;
    85ea:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85ee:	str.w	ip, [r4, #1776]	; 0x6f0
      _s = s;
      _b = b;
    85f2:	strb.w	r3, [r4, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85f6:	movs	r3, #112	; 0x70
    85f8:	str.w	lr, [r4, #1784]	; 0x6f8
    85fc:	str.w	r3, [r4, #1760]	; 0x6e0
      _s = s;
      _b = b;
    8600:	mvn.w	r3, #45	; 0x2d
    8604:	strb.w	r2, [r4, #1789]	; 0x6fd
    8608:	strb.w	r3, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    860c:	movs	r3, #112	; 0x70
    860e:	str.w	lr, [r4, #1792]	; 0x700
    8612:	str.w	r3, [r4, #1768]	; 0x6e8
      _s = s;
      _b = b;
    8616:	mvn.w	r3, #45	; 0x2d
    861a:	strb.w	r2, [r4, #1797]	; 0x705
    861e:	strb.w	r3, [r4, #1773]	; 0x6ed
    8622:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8626:	strb.w	r6, [r4, #1804]	; 0x70c
      _b = b;
    862a:	strb.w	r3, [r4, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    862e:	movs	r3, #0
      _s = s;
      _b = b;
    8630:	strb.w	r6, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8634:	str.w	r3, [r4, #1800]	; 0x708
    8638:	movs	r3, #0
      _s = s;
    863a:	strb.w	r6, [r4, #1812]	; 0x714
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    863e:	str.w	r3, [r4, #1808]	; 0x710
      _s = s;
      _b = b;
    8642:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8646:	strb.w	r5, [r4, #1732]	; 0x6c4
    864a:	strb.w	r5, [r4, #1740]	; 0x6cc
    864e:	strb.w	r5, [r4, #1748]	; 0x6d4
    8652:	strb.w	r5, [r4, #1756]	; 0x6dc
    8656:	strb.w	r5, [r4, #1764]	; 0x6e4
    865a:	strb.w	r5, [r4, #1772]	; 0x6ec
    865e:	strb.w	r5, [r4, #1780]	; 0x6f4
    8662:	strb.w	r5, [r4, #1788]	; 0x6fc
    8666:	strb.w	r5, [r4, #1796]	; 0x704
      _b = b;
    866a:	strb.w	r6, [r4, #1813]	; 0x715
    866e:	strb.w	r3, [r4, #1829]	; 0x725
    8672:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8676:	str.w	r1, [r4, #1824]	; 0x720
      _s = s;
      _b = b;
    867a:	strb.w	r3, [r4, #1837]	; 0x72d
    867e:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8682:	str.w	ip, [r4, #1832]	; 0x728
      _s = s;
      _b = b;
    8686:	strb.w	r3, [r4, #1853]	; 0x73d
    868a:	strb.w	r3, [r4, #1861]	; 0x745
    868e:	strb.w	r3, [r4, #1869]	; 0x74d
    8692:	strb.w	r3, [r4, #1877]	; 0x755
    8696:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    869a:	str.w	r1, [r4, #1848]	; 0x738
      _s = s;
      _b = b;
    869e:	strb.w	r3, [r4, #1885]	; 0x75d
    86a2:	strb.w	r3, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86a6:	movs	r3, #112	; 0x70
    86a8:	str.w	r1, [r4, #1856]	; 0x740
    86ac:	str.w	r3, [r4, #1896]	; 0x768
      _s = s;
      _b = b;
    86b0:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86b4:	str.w	r1, [r4, #1864]	; 0x748
    86b8:	str.w	r1, [r4, #1872]	; 0x750
    86bc:	str.w	ip, [r4, #1880]	; 0x758
    86c0:	str.w	ip, [r4, #1888]	; 0x760
    86c4:	str.w	sl, [r4, #1816]	; 0x718
      _s = s;
    86c8:	strb.w	r5, [r4, #1820]	; 0x71c
      _b = b;
    86cc:	strb.w	fp, [r4, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86d0:	strb.w	r5, [r4, #1828]	; 0x724
    86d4:	strb.w	r5, [r4, #1836]	; 0x72c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86d8:	str.w	r9, [r4, #1840]	; 0x730
      _s = s;
    86dc:	strb.w	r8, [r4, #1844]	; 0x734
      _b = b;
    86e0:	strb.w	r5, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86e4:	strb.w	r5, [r4, #1852]	; 0x73c
    86e8:	strb.w	r5, [r4, #1860]	; 0x744
    86ec:	strb.w	r5, [r4, #1868]	; 0x74c
    86f0:	strb.w	r5, [r4, #1876]	; 0x754
    86f4:	strb.w	r5, [r4, #1884]	; 0x75c
    86f8:	strb.w	r5, [r4, #1892]	; 0x764
    86fc:	strb.w	r5, [r4, #1900]	; 0x76c
      _b = b;
    8700:	strb.w	r3, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8704:	movs	r3, #0
      _s = s;
    8706:	strb.w	r6, [r4, #1908]	; 0x774
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    870a:	str.w	r3, [r4, #1904]	; 0x770
    870e:	movs	r3, #0
      _s = s;
      _b = b;
    8710:	strb.w	r6, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8714:	str.w	r3, [r4, #1912]	; 0x778
    8718:	movs	r3, #37	; 0x25
      _s = s;
    871a:	strb.w	r6, [r4, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    871e:	str.w	r3, [r4, #1928]	; 0x788
      _s = s;
    8722:	mvn.w	r3, #70	; 0x46
      _b = b;
    8726:	strb.w	r6, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    872a:	strb.w	r3, [r4, #1932]	; 0x78c
      _b = b;
    872e:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8732:	str.w	lr, [r4, #1920]	; 0x780
      _s = s;
      _b = b;
    8736:	strb.w	r3, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    873a:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    873c:	strb.w	r2, [r4, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8740:	str.w	r3, [r4, #1944]	; 0x798
      _s = s;
      _b = b;
    8744:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8748:	str.w	r1, [r4, #1952]	; 0x7a0
      _s = s;
      _b = b;
    874c:	strb.w	r3, [r4, #1949]	; 0x79d
    8750:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8754:	str.w	ip, [r4, #1968]	; 0x7b0
      _s = s;
      _b = b;
    8758:	strb.w	r3, [r4, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    875c:	movs	r3, #112	; 0x70
    875e:	str.w	r1, [r4, #1976]	; 0x7b8
    8762:	str.w	r3, [r4, #1960]	; 0x7a8
      _s = s;
      _b = b;
    8766:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    876a:	str.w	r1, [r4, #1984]	; 0x7c0
      _s = s;
      _b = b;
    876e:	strb.w	r3, [r4, #1965]	; 0x7ad
    8772:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8776:	strb.w	r5, [r4, #1924]	; 0x784
      _b = b;
    877a:	strb.w	r3, [r4, #1973]	; 0x7b5
    877e:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8782:	str.w	sl, [r4, #1936]	; 0x790
      _s = s;
      _b = b;
    8786:	strb.w	r3, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    878a:	strb.w	r5, [r4, #1940]	; 0x794
      _b = b;
    878e:	strb.w	fp, [r4, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8792:	strb.w	r5, [r4, #1948]	; 0x79c
    8796:	strb.w	r5, [r4, #1956]	; 0x7a4
    879a:	strb.w	r5, [r4, #1964]	; 0x7ac
    879e:	strb.w	r5, [r4, #1972]	; 0x7b4
    87a2:	strb.w	r5, [r4, #1980]	; 0x7bc
    87a6:	strb.w	r5, [r4, #1988]	; 0x7c4
      _b = b;
    87aa:	strb.w	r3, [r4, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87ae:	movs	r3, #0
      _s = s;
    87b0:	strb.w	r6, [r4, #1996]	; 0x7cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87b4:	str.w	r3, [r4, #1992]	; 0x7c8
    87b8:	movs	r3, #37	; 0x25
      _s = s;
      _b = b;
    87ba:	strb.w	r6, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87be:	str.w	r3, [r4, #2008]	; 0x7d8
      _s = s;
    87c2:	mvn.w	r3, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87c6:	str.w	lr, [r4, #2000]	; 0x7d0
      _s = s;
    87ca:	strb.w	r3, [r4, #2012]	; 0x7dc
      _b = b;
    87ce:	mov.w	r3, #11
    87d2:	strb.w	r2, [r4, #2005]	; 0x7d5
    87d6:	strb.w	r3, [r4, #2013]	; 0x7dd
    87da:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87de:	str.w	r1, [r4, #2024]	; 0x7e8
      _s = s;
      _b = b;
    87e2:	strb.w	r3, [r4, #2029]	; 0x7ed
    87e6:	strb.w	r3, [r4, #2045]	; 0x7fd
    87ea:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87ee:	str.w	r1, [r4, #2040]	; 0x7f8
      _s = s;
      _b = b;
    87f2:	strb.w	r3, [r4, #2053]	; 0x805
    87f6:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87fa:	str.w	ip, [r4, #2048]	; 0x800
      _s = s;
      _b = b;
    87fe:	strb.w	r3, [r4, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8802:	movs	r3, #112	; 0x70
    8804:	str.w	lr, [r4, #2056]	; 0x808
    8808:	str.w	r3, [r4, #2072]	; 0x818
      _s = s;
      _b = b;
    880c:	mvn.w	r3, #45	; 0x2d
    8810:	strb.w	r2, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8814:	str.w	r1, [r4, #2064]	; 0x810
      _s = s;
    8818:	strb.w	r5, [r4, #2004]	; 0x7d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    881c:	str.w	sl, [r4, #2016]	; 0x7e0
      _s = s;
    8820:	strb.w	r5, [r4, #2020]	; 0x7e4
      _b = b;
    8824:	strb.w	fp, [r4, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8828:	strb.w	r5, [r4, #2028]	; 0x7ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    882c:	str.w	r9, [r4, #2032]	; 0x7f0
      _s = s;
    8830:	strb.w	r8, [r4, #2036]	; 0x7f4
      _b = b;
    8834:	strb.w	r5, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8838:	strb.w	r5, [r4, #2044]	; 0x7fc
    883c:	strb.w	r5, [r4, #2052]	; 0x804
    8840:	strb.w	r5, [r4, #2060]	; 0x80c
    8844:	strb.w	r5, [r4, #2068]	; 0x814
    8848:	strb.w	r5, [r4, #2076]	; 0x81c
      _b = b;
    884c:	strb.w	r3, [r4, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8850:	movs	r3, #112	; 0x70
      _s = s;
    8852:	strb.w	r6, [r4, #2100]	; 0x834
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8856:	str.w	r3, [r4, #2080]	; 0x820
      _s = s;
      _b = b;
    885a:	mvn.w	r3, #45	; 0x2d
    885e:	strb.w	r6, [r4, #2101]	; 0x835
    8862:	strb.w	r3, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8866:	movs	r3, #112	; 0x70
      _s = s;
    8868:	strb.w	r6, [r4, #2108]	; 0x83c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    886c:	str.w	r3, [r4, #2088]	; 0x828
      _s = s;
      _b = b;
    8870:	mvn.w	r3, #45	; 0x2d
    8874:	strb.w	r6, [r4, #2109]	; 0x83d
    8878:	strb.w	r3, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    887c:	movs	r3, #0
    887e:	str.w	r1, [r4, #2120]	; 0x848
    8882:	str.w	r3, [r4, #2096]	; 0x830
    8886:	movs	r3, #0
    8888:	str.w	ip, [r4, #2128]	; 0x850
    888c:	str.w	r3, [r4, #2104]	; 0x838
      _s = s;
      _b = b;
    8890:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8894:	str.w	ip, [r4, #2144]	; 0x860
      _s = s;
      _b = b;
    8898:	strb.w	r3, [r4, #2125]	; 0x84d
    889c:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88a0:	strb.w	r5, [r4, #2084]	; 0x824
      _b = b;
    88a4:	strb.w	r3, [r4, #2133]	; 0x855
    88a8:	strb.w	r3, [r4, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88ac:	movs	r3, #112	; 0x70
      _s = s;
    88ae:	strb.w	r5, [r4, #2092]	; 0x82c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88b2:	str.w	r3, [r4, #2152]	; 0x868
      _s = s;
      _b = b;
    88b6:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88ba:	str.w	sl, [r4, #2112]	; 0x840
      _s = s;
      _b = b;
    88be:	strb.w	r3, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88c2:	movs	r3, #112	; 0x70
      _s = s;
    88c4:	strb.w	r5, [r4, #2116]	; 0x844
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88c8:	str.w	r3, [r4, #2160]	; 0x870
      _s = s;
      _b = b;
    88cc:	mvn.w	r3, #45	; 0x2d
    88d0:	strb.w	fp, [r4, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88d4:	strb.w	r5, [r4, #2124]	; 0x84c
    88d8:	strb.w	r5, [r4, #2132]	; 0x854
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88dc:	str.w	sl, [r4, #2136]	; 0x858
      _s = s;
    88e0:	strb.w	r5, [r4, #2140]	; 0x85c
      _b = b;
    88e4:	strb.w	fp, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88e8:	strb.w	r5, [r4, #2148]	; 0x864
    88ec:	strb.w	r5, [r4, #2156]	; 0x86c
    88f0:	strb.w	r5, [r4, #2164]	; 0x874
      _b = b;
    88f4:	strb.w	r3, [r4, #2165]	; 0x875
    88f8:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88fc:	str.w	r1, [r4, #2168]	; 0x878
      _s = s;
      _b = b;
    8900:	strb.w	r3, [r4, #2173]	; 0x87d
    8904:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8908:	str.w	ip, [r4, #2176]	; 0x880
      _s = s;
      _b = b;
    890c:	strb.w	r3, [r4, #2181]	; 0x885
    8910:	strb.w	r3, [r4, #2197]	; 0x895
    8914:	strb.w	r3, [r4, #2229]	; 0x8b5
    8918:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    891c:	str.w	lr, [r4, #2184]	; 0x888
      _s = s;
      _b = b;
    8920:	strb.w	r3, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8924:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    8926:	strb.w	r2, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    892a:	str.w	ip, [r4, #2192]	; 0x890
    892e:	str.w	lr, [r4, #2208]	; 0x8a0
      _s = s;
      _b = b;
    8932:	strb.w	r2, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8936:	str.w	lr, [r4, #2216]	; 0x8a8
      _s = s;
      _b = b;
    893a:	strb.w	r2, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    893e:	str.w	ip, [r4, #2224]	; 0x8b0
    8942:	str.w	r1, [r4, #2232]	; 0x8b8
    8946:	str.w	lr, [r4, #2240]	; 0x8c0
      _s = s;
      _b = b;
    894a:	strb.w	r2, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    894e:	str.w	lr, [r4, #2248]	; 0x8c8
      _s = s;
    8952:	strb.w	r5, [r4, #2172]	; 0x87c
    8956:	strb.w	r5, [r4, #2180]	; 0x884
    895a:	strb.w	r5, [r4, #2188]	; 0x88c
    895e:	strb.w	r5, [r4, #2196]	; 0x894
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8962:	str.w	sl, [r4, #2200]	; 0x898
      _s = s;
    8966:	strb.w	r5, [r4, #2204]	; 0x89c
      _b = b;
    896a:	strb.w	fp, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    896e:	strb.w	r5, [r4, #2212]	; 0x8a4
    8972:	strb.w	r5, [r4, #2220]	; 0x8ac
    8976:	strb.w	r5, [r4, #2228]	; 0x8b4
    897a:	strb.w	r5, [r4, #2236]	; 0x8bc
    897e:	strb.w	r5, [r4, #2244]	; 0x8c4
    8982:	strb.w	r5, [r4, #2252]	; 0x8cc
      _b = b;
    8986:	strb.w	r2, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    898a:	str.w	r3, [r4, #2272]	; 0x8e0
      _s = s;
      _b = b;
    898e:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8992:	str.w	lr, [r4, #2256]	; 0x8d0
      _s = s;
      _b = b;
    8996:	strb.w	r3, [r4, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    899a:	movs	r3, #0
      _s = s;
      _b = b;
    899c:	strb.w	r2, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89a0:	str.w	r3, [r4, #2288]	; 0x8f0
    89a4:	movs	r3, #0
      _s = s;
    89a6:	strb.w	r6, [r4, #2292]	; 0x8f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89aa:	str.w	r3, [r4, #2296]	; 0x8f8
      _s = s;
      _b = b;
    89ae:	mvn.w	r3, #4
    89b2:	strb.w	r6, [r4, #2293]	; 0x8f5
    89b6:	strb.w	r3, [r4, #2317]	; 0x90d
    89ba:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89be:	strb.w	r6, [r4, #2300]	; 0x8fc
      _b = b;
    89c2:	strb.w	r3, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89c6:	movs	r3, #37	; 0x25
      _s = s;
      _b = b;
    89c8:	strb.w	r6, [r4, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89cc:	str.w	r3, [r4, #2328]	; 0x918
      _s = s;
    89d0:	mvn.w	r3, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89d4:	str.w	r1, [r4, #2312]	; 0x908
      _s = s;
    89d8:	strb.w	r3, [r4, #2332]	; 0x91c
      _b = b;
    89dc:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89e0:	str.w	ip, [r4, #2320]	; 0x910
      _s = s;
      _b = b;
    89e4:	strb.w	r3, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89e8:	movs	r3, #112	; 0x70
      _s = s;
    89ea:	strb.w	r5, [r4, #2260]	; 0x8d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89ee:	str.w	r3, [r4, #2336]	; 0x920
      _s = s;
      _b = b;
    89f2:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89f6:	str.w	sl, [r4, #2264]	; 0x8d8
      _s = s;
    89fa:	strb.w	r5, [r4, #2268]	; 0x8dc
      _b = b;
    89fe:	strb.w	fp, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a02:	strb.w	r5, [r4, #2276]	; 0x8e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a06:	str.w	sl, [r4, #2280]	; 0x8e8
      _s = s;
    8a0a:	strb.w	r5, [r4, #2284]	; 0x8ec
      _b = b;
    8a0e:	strb.w	fp, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a12:	str.w	sl, [r4, #2304]	; 0x900
      _s = s;
    8a16:	strb.w	r5, [r4, #2308]	; 0x904
      _b = b;
    8a1a:	strb.w	fp, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a1e:	strb.w	r5, [r4, #2316]	; 0x90c
    8a22:	strb.w	r5, [r4, #2324]	; 0x914
    8a26:	strb.w	r5, [r4, #2340]	; 0x924
      _b = b;
    8a2a:	strb.w	r3, [r4, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a2e:	movs	r3, #112	; 0x70
    8a30:	str.w	ip, [r4, #2368]	; 0x940
    8a34:	str.w	r3, [r4, #2344]	; 0x928
      _s = s;
      _b = b;
    8a38:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a3c:	str.w	lr, [r4, #2384]	; 0x950
      _s = s;
      _b = b;
    8a40:	strb.w	r3, [r4, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a44:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    8a46:	strb.w	r2, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a4a:	str.w	r3, [r4, #2352]	; 0x930
      _s = s;
      _b = b;
    8a4e:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a52:	str.w	lr, [r4, #2400]	; 0x960
      _s = s;
      _b = b;
    8a56:	strb.w	r3, [r4, #2357]	; 0x935
    8a5a:	mvn.w	r3, #42	; 0x2a
    8a5e:	strb.w	r2, [r4, #2405]	; 0x965
    8a62:	strb.w	r3, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a66:	movs	r3, #112	; 0x70
    8a68:	str.w	ip, [r4, #2416]	; 0x970
    8a6c:	str.w	r3, [r4, #2408]	; 0x968
      _s = s;
      _b = b;
    8a70:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a74:	str.w	lr, [r4, #2424]	; 0x978
      _s = s;
      _b = b;
    8a78:	strb.w	r3, [r4, #2413]	; 0x96d
    8a7c:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a80:	strb.w	r5, [r4, #2348]	; 0x92c
      _b = b;
    8a84:	strb.w	r3, [r4, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a88:	movs	r3, #37	; 0x25
      _s = s;
    8a8a:	strb.w	r5, [r4, #2356]	; 0x934
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a8e:	str.w	r9, [r4, #2360]	; 0x938
      _s = s;
    8a92:	strb.w	r8, [r4, #2364]	; 0x93c
      _b = b;
    8a96:	strb.w	r5, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a9a:	strb.w	r5, [r4, #2372]	; 0x944
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a9e:	str.w	sl, [r4, #2376]	; 0x948
      _s = s;
    8aa2:	strb.w	r5, [r4, #2380]	; 0x94c
      _b = b;
    8aa6:	strb.w	fp, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8aaa:	strb.w	r5, [r4, #2388]	; 0x954
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aae:	str.w	sl, [r4, #2392]	; 0x958
      _s = s;
    8ab2:	strb.w	r5, [r4, #2396]	; 0x95c
      _b = b;
    8ab6:	strb.w	fp, [r4, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8aba:	strb.w	r5, [r4, #2404]	; 0x964
    8abe:	strb.w	r5, [r4, #2412]	; 0x96c
    8ac2:	strb.w	r5, [r4, #2420]	; 0x974
    8ac6:	strb.w	r5, [r4, #2428]	; 0x97c
      _b = b;
    8aca:	strb.w	r2, [r4, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ace:	str.w	r3, [r4, #2456]	; 0x998
      _s = s;
    8ad2:	mvn.w	r3, #70	; 0x46
    8ad6:	strb.w	r6, [r4, #2476]	; 0x9ac
    8ada:	strb.w	r3, [r4, #2460]	; 0x99c
      _b = b;
    8ade:	mov.w	r3, #11
    8ae2:	strb.w	r6, [r4, #2477]	; 0x9ad
    8ae6:	strb.w	r3, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aea:	movs	r3, #0
      _s = s;
    8aec:	strb.w	r6, [r4, #2484]	; 0x9b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8af0:	str.w	r3, [r4, #2472]	; 0x9a8
    8af4:	movs	r3, #0
      _s = s;
      _b = b;
    8af6:	strb.w	r6, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8afa:	str.w	r3, [r4, #2480]	; 0x9b0
    8afe:	movs	r3, #0
      _s = s;
    8b00:	strb.w	r6, [r4, #2492]	; 0x9bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b04:	str.w	r3, [r4, #2488]	; 0x9b8
      _s = s;
      _b = b;
    8b08:	mvn.w	r3, #4
    8b0c:	strb.w	r6, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b10:	str.w	sl, [r4, #2432]	; 0x980
      _s = s;
    8b14:	strb.w	r5, [r4, #2436]	; 0x984
      _b = b;
    8b18:	strb.w	fp, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b1c:	str.w	sl, [r4, #2440]	; 0x988
      _s = s;
    8b20:	strb.w	r5, [r4, #2444]	; 0x98c
      _b = b;
    8b24:	strb.w	fp, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b28:	str.w	sl, [r4, #2448]	; 0x990
      _s = s;
    8b2c:	strb.w	r5, [r4, #2452]	; 0x994
      _b = b;
    8b30:	strb.w	fp, [r4, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b34:	str.w	sl, [r4, #2464]	; 0x9a0
      _s = s;
    8b38:	strb.w	r5, [r4, #2468]	; 0x9a4
      _b = b;
    8b3c:	strb.w	fp, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b40:	str.w	sl, [r4, #2496]	; 0x9c0
      _s = s;
    8b44:	strb.w	r5, [r4, #2500]	; 0x9c4
      _b = b;
    8b48:	strb.w	fp, [r4, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b4c:	str.w	sl, [r4, #2504]	; 0x9c8
      _s = s;
    8b50:	strb.w	r5, [r4, #2508]	; 0x9cc
      _b = b;
    8b54:	strb.w	fp, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b58:	str.w	sl, [r4, #2512]	; 0x9d0
      _s = s;
    8b5c:	strb.w	r5, [r4, #2516]	; 0x9d4
      _b = b;
    8b60:	strb.w	fp, [r4, #2517]	; 0x9d5
    8b64:	strb.w	r3, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b68:	movs	r3, #112	; 0x70
    8b6a:	str.w	lr, [r4, #2520]	; 0x9d8
    8b6e:	str.w	r3, [r4, #2536]	; 0x9e8
      _s = s;
      _b = b;
    8b72:	mvn.w	r3, #45	; 0x2d
    8b76:	strb.w	r2, [r4, #2525]	; 0x9dd
    8b7a:	strb.w	r3, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b7e:	movs	r3, #112	; 0x70
    8b80:	str.w	r1, [r4, #2528]	; 0x9e0
    8b84:	str.w	r3, [r4, #2544]	; 0x9f0
      _s = s;
      _b = b;
    8b88:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b8c:	str.w	r1, [r4, #2552]	; 0x9f8
      _s = s;
      _b = b;
    8b90:	strb.w	r3, [r4, #2549]	; 0x9f5
    8b94:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b98:	str.w	r1, [r4, #2560]	; 0xa00
      _s = s;
      _b = b;
    8b9c:	strb.w	r3, [r4, #2557]	; 0x9fd
    8ba0:	strb.w	r3, [r4, #2565]	; 0xa05
    8ba4:	strb.w	r3, [r4, #2573]	; 0xa0d
    8ba8:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bac:	str.w	r1, [r4, #2568]	; 0xa08
    8bb0:	str.w	lr, [r4, #2592]	; 0xa20
      _s = s;
      _b = b;
    8bb4:	strb.w	r2, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bb8:	str.w	ip, [r4, #2600]	; 0xa28
      _s = s;
    8bbc:	strb.w	r5, [r4, #2524]	; 0x9dc
    8bc0:	strb.w	r5, [r4, #2532]	; 0x9e4
    8bc4:	strb.w	r5, [r4, #2540]	; 0x9ec
    8bc8:	strb.w	r5, [r4, #2548]	; 0x9f4
    8bcc:	strb.w	r5, [r4, #2556]	; 0x9fc
    8bd0:	strb.w	r5, [r4, #2564]	; 0xa04
    8bd4:	strb.w	r5, [r4, #2572]	; 0xa0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bd8:	str.w	sl, [r4, #2576]	; 0xa10
      _s = s;
    8bdc:	strb.w	r5, [r4, #2580]	; 0xa14
      _b = b;
    8be0:	strb.w	fp, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8be4:	str.w	sl, [r4, #2584]	; 0xa18
      _s = s;
    8be8:	strb.w	r5, [r4, #2588]	; 0xa1c
      _b = b;
    8bec:	strb.w	fp, [r4, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bf0:	strb.w	r5, [r4, #2596]	; 0xa24
    8bf4:	strb.w	r5, [r4, #2604]	; 0xa2c
      _b = b;
    8bf8:	strb.w	r3, [r4, #2605]	; 0xa2d
    8bfc:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c00:	str.w	r1, [r4, #2616]	; 0xa38
      _s = s;
      _b = b;
    8c04:	strb.w	r3, [r4, #2621]	; 0xa3d
    8c08:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c0c:	str.w	ip, [r4, #2632]	; 0xa48
      _s = s;
      _b = b;
    8c10:	strb.w	r3, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c14:	movs	r3, #0
      _s = s;
    8c16:	strb.w	r6, [r4, #2668]	; 0xa6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c1a:	str.w	r3, [r4, #2664]	; 0xa68
    8c1e:	movs	r3, #0
      _s = s;
      _b = b;
    8c20:	strb.w	r6, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c24:	str.w	r3, [r4, #2672]	; 0xa70
    8c28:	movs	r3, #0
      _s = s;
    8c2a:	strb.w	r6, [r4, #2676]	; 0xa74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c2e:	str.w	r3, [r4, #2680]	; 0xa78
      _s = s;
      _b = b;
    8c32:	mvn.w	r3, #4
    8c36:	strb.w	r6, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c3a:	strb.w	r6, [r4, #2684]	; 0xa7c
      _b = b;
    8c3e:	strb.w	r6, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c42:	str.w	r1, [r4, #2688]	; 0xa80
    8c46:	str.w	r9, [r4, #2608]	; 0xa30
      _s = s;
    8c4a:	strb.w	r8, [r4, #2612]	; 0xa34
      _b = b;
    8c4e:	strb.w	r5, [r4, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c52:	strb.w	r5, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c56:	str.w	sl, [r4, #2624]	; 0xa40
      _s = s;
    8c5a:	strb.w	r5, [r4, #2628]	; 0xa44
      _b = b;
    8c5e:	strb.w	fp, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c62:	strb.w	r5, [r4, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c66:	str.w	r9, [r4, #2640]	; 0xa50
      _s = s;
    8c6a:	strb.w	r8, [r4, #2644]	; 0xa54
      _b = b;
    8c6e:	strb.w	r5, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c72:	str.w	sl, [r4, #2648]	; 0xa58
      _s = s;
    8c76:	strb.w	r5, [r4, #2652]	; 0xa5c
      _b = b;
    8c7a:	strb.w	fp, [r4, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c7e:	str.w	sl, [r4, #2656]	; 0xa60
      _s = s;
    8c82:	strb.w	r5, [r4, #2660]	; 0xa64
      _b = b;
    8c86:	strb.w	fp, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c8a:	strb.w	r5, [r4, #2692]	; 0xa84
      _b = b;
    8c8e:	strb.w	r3, [r4, #2693]	; 0xa85
    8c92:	strb.w	r3, [r4, #2701]	; 0xa8d
    8c96:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c9a:	str.w	r1, [r4, #2696]	; 0xa88
      _s = s;
      _b = b;
    8c9e:	strb.w	r3, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ca2:	movs	r3, #112	; 0x70
    8ca4:	str.w	lr, [r4, #2704]	; 0xa90
    8ca8:	str.w	r3, [r4, #2736]	; 0xab0
      _s = s;
      _b = b;
    8cac:	mvn.w	r3, #45	; 0x2d
    8cb0:	strb.w	r2, [r4, #2709]	; 0xa95
    8cb4:	strb.w	r3, [r4, #2741]	; 0xab5
    8cb8:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cbc:	str.w	ip, [r4, #2720]	; 0xaa0
      _s = s;
      _b = b;
    8cc0:	strb.w	r3, [r4, #2749]	; 0xabd
    8cc4:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cc8:	str.w	ip, [r4, #2744]	; 0xab8
      _s = s;
      _b = b;
    8ccc:	strb.w	r3, [r4, #2757]	; 0xac5
    8cd0:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cd4:	str.w	r1, [r4, #2752]	; 0xac0
    8cd8:	str.w	ip, [r4, #2760]	; 0xac8
      _s = s;
      _b = b;
    8cdc:	strb.w	r3, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ce0:	str.w	ip, [r4, #2768]	; 0xad0
      _s = s;
      _b = b;
    8ce4:	strb.w	r3, [r4, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ce8:	strb.w	r5, [r4, #2700]	; 0xa8c
    8cec:	strb.w	r5, [r4, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cf0:	str.w	sl, [r4, #2712]	; 0xa98
      _s = s;
    8cf4:	strb.w	r5, [r4, #2716]	; 0xa9c
      _b = b;
    8cf8:	strb.w	fp, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cfc:	strb.w	r5, [r4, #2724]	; 0xaa4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d00:	str.w	r9, [r4, #2728]	; 0xaa8
      _s = s;
    8d04:	strb.w	r8, [r4, #2732]	; 0xaac
      _b = b;
    8d08:	strb.w	r5, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d0c:	strb.w	r5, [r4, #2740]	; 0xab4
    8d10:	strb.w	r5, [r4, #2748]	; 0xabc
    8d14:	strb.w	r5, [r4, #2756]	; 0xac4
    8d18:	strb.w	r5, [r4, #2764]	; 0xacc
    8d1c:	strb.w	r5, [r4, #2772]	; 0xad4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d20:	str.w	sl, [r4, #2776]	; 0xad8
      _s = s;
    8d24:	strb.w	r5, [r4, #2780]	; 0xadc
      _b = b;
    8d28:	strb.w	fp, [r4, #2781]	; 0xadd
    8d2c:	strb.w	r3, [r4, #2797]	; 0xaed
    8d30:	strb.w	r3, [r4, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d34:	movs	r3, #37	; 0x25
    8d36:	str.w	lr, [r4, #2784]	; 0xae0
    8d3a:	str.w	r3, [r4, #2840]	; 0xb18
      _s = s;
    8d3e:	mvn.w	r3, #70	; 0x46
      _b = b;
    8d42:	strb.w	r2, [r4, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d46:	strb.w	r3, [r4, #2844]	; 0xb1c
      _b = b;
    8d4a:	mov.w	r3, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d4e:	str.w	ip, [r4, #2792]	; 0xae8
      _s = s;
      _b = b;
    8d52:	strb.w	r3, [r4, #2845]	; 0xb1d
    8d56:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d5a:	str.w	ip, [r4, #2800]	; 0xaf0
      _s = s;
      _b = b;
    8d5e:	strb.w	r3, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d62:	movs	r3, #0
    8d64:	str.w	lr, [r4, #2824]	; 0xb08
    8d68:	str.w	r3, [r4, #2856]	; 0xb28
    8d6c:	movs	r3, #0
      _s = s;
      _b = b;
    8d6e:	strb.w	r2, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d72:	str.w	r3, [r4, #2864]	; 0xb30
    8d76:	movs	r3, #0
    8d78:	str.w	lr, [r4, #2832]	; 0xb10
      _s = s;
      _b = b;
    8d7c:	strb.w	r2, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d80:	str.w	r1, [r4, #2848]	; 0xb20
      _s = s;
    8d84:	strb.w	r6, [r4, #2860]	; 0xb2c
      _b = b;
    8d88:	strb.w	r6, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d8c:	strb.w	r6, [r4, #2868]	; 0xb34
    8d90:	strb.w	r5, [r4, #2788]	; 0xae4
    8d94:	strb.w	r5, [r4, #2796]	; 0xaec
    8d98:	strb.w	r5, [r4, #2804]	; 0xaf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d9c:	str.w	sl, [r4, #2808]	; 0xaf8
      _s = s;
    8da0:	strb.w	r5, [r4, #2812]	; 0xafc
      _b = b;
    8da4:	strb.w	fp, [r4, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8da8:	str.w	sl, [r4, #2816]	; 0xb00
      _s = s;
    8dac:	strb.w	r5, [r4, #2820]	; 0xb04
      _b = b;
    8db0:	strb.w	fp, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8db4:	strb.w	r5, [r4, #2828]	; 0xb0c
    8db8:	strb.w	r5, [r4, #2836]	; 0xb14
    8dbc:	strb.w	r5, [r4, #2852]	; 0xb24
      _b = b;
    8dc0:	strb.w	r6, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dc4:	str.w	r3, [r4, #2872]	; 0xb38
      _s = s;
      _b = b;
    8dc8:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8dcc:	strb.w	r6, [r4, #2876]	; 0xb3c
      _b = b;
    8dd0:	strb.w	r3, [r4, #2885]	; 0xb45
    8dd4:	mvn.w	r3, #42	; 0x2a
    8dd8:	strb.w	r6, [r4, #2877]	; 0xb3d
    8ddc:	strb.w	r3, [r4, #2893]	; 0xb4d
    8de0:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8de4:	str.w	r1, [r4, #2880]	; 0xb40
      _s = s;
      _b = b;
    8de8:	strb.w	r3, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dec:	movs	r3, #112	; 0x70
    8dee:	str.w	ip, [r4, #2888]	; 0xb48
    8df2:	str.w	r3, [r4, #2904]	; 0xb58
      _s = s;
      _b = b;
    8df6:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dfa:	str.w	r1, [r4, #2896]	; 0xb50
      _s = s;
      _b = b;
    8dfe:	strb.w	r3, [r4, #2909]	; 0xb5d
    8e02:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e06:	str.w	ip, [r4, #2912]	; 0xb60
      _s = s;
      _b = b;
    8e0a:	strb.w	r3, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e0e:	movs	r3, #112	; 0x70
    8e10:	str.w	ip, [r4, #2936]	; 0xb78
    8e14:	str.w	r3, [r4, #2920]	; 0xb68
      _s = s;
      _b = b;
    8e18:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e1c:	str.w	ip, [r4, #2944]	; 0xb80
      _s = s;
      _b = b;
    8e20:	strb.w	r3, [r4, #2925]	; 0xb6d
    8e24:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e28:	str.w	ip, [r4, #2952]	; 0xb88
      _s = s;
      _b = b;
    8e2c:	strb.w	r3, [r4, #2941]	; 0xb7d
    8e30:	strb.w	r3, [r4, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e34:	strb.w	r5, [r4, #2884]	; 0xb44
    8e38:	strb.w	r5, [r4, #2892]	; 0xb4c
    8e3c:	strb.w	r5, [r4, #2900]	; 0xb54
    8e40:	strb.w	r5, [r4, #2908]	; 0xb5c
    8e44:	strb.w	r5, [r4, #2916]	; 0xb64
    8e48:	strb.w	r5, [r4, #2924]	; 0xb6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e4c:	str.w	r9, [r4, #2928]	; 0xb70
      _s = s;
    8e50:	strb.w	r8, [r4, #2932]	; 0xb74
      _b = b;
    8e54:	strb.w	r5, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e58:	strb.w	r5, [r4, #2940]	; 0xb7c
    8e5c:	strb.w	r5, [r4, #2948]	; 0xb84
    8e60:	strb.w	r5, [r4, #2956]	; 0xb8c
      _b = b;
    8e64:	strb.w	r3, [r4, #2957]	; 0xb8d
    8e68:	strb.w	r3, [r4, #2965]	; 0xb95
    8e6c:	strb.w	r3, [r4, #2973]	; 0xb9d
    8e70:	strb.w	r3, [r4, #2981]	; 0xba5
    8e74:	strb.w	r3, [r4, #2997]	; 0xbb5
    8e78:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e7c:	str.w	ip, [r4, #2960]	; 0xb90
      _s = s;
      _b = b;
    8e80:	strb.w	r3, [r4, #3005]	; 0xbbd
    8e84:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e88:	str.w	ip, [r4, #2968]	; 0xb98
    8e8c:	str.w	ip, [r4, #2976]	; 0xba0
    8e90:	str.w	ip, [r4, #2992]	; 0xbb0
    8e94:	str.w	r1, [r4, #3000]	; 0xbb8
    8e98:	str.w	lr, [r4, #3008]	; 0xbc0
      _s = s;
      _b = b;
    8e9c:	strb.w	r2, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea0:	str.w	lr, [r4, #3032]	; 0xbd8
      _s = s;
      _b = b;
    8ea4:	strb.w	r2, [r4, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea8:	str.w	ip, [r4, #3040]	; 0xbe0
      _s = s;
    8eac:	strb.w	r5, [r4, #2964]	; 0xb94
    8eb0:	strb.w	r5, [r4, #2972]	; 0xb9c
    8eb4:	strb.w	r5, [r4, #2980]	; 0xba4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eb8:	str.w	r9, [r4, #2984]	; 0xba8
      _s = s;
    8ebc:	strb.w	r8, [r4, #2988]	; 0xbac
      _b = b;
    8ec0:	strb.w	r5, [r4, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ec4:	strb.w	r5, [r4, #2996]	; 0xbb4
    8ec8:	strb.w	r5, [r4, #3004]	; 0xbbc
    8ecc:	strb.w	r5, [r4, #3012]	; 0xbc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ed0:	str.w	sl, [r4, #3016]	; 0xbc8
      _s = s;
    8ed4:	strb.w	r5, [r4, #3020]	; 0xbcc
      _b = b;
    8ed8:	strb.w	fp, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8edc:	str.w	sl, [r4, #3024]	; 0xbd0
      _s = s;
    8ee0:	strb.w	r5, [r4, #3028]	; 0xbd4
      _b = b;
    8ee4:	strb.w	fp, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ee8:	strb.w	r5, [r4, #3036]	; 0xbdc
    8eec:	strb.w	r5, [r4, #3044]	; 0xbe4
      _b = b;
    8ef0:	strb.w	r3, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ef4:	movs	r3, #112	; 0x70
      _s = s;
    8ef6:	strb.w	r6, [r4, #3060]	; 0xbf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8efa:	str.w	r3, [r4, #3048]	; 0xbe8
      _s = s;
      _b = b;
    8efe:	mvn.w	r3, #45	; 0x2d
    8f02:	strb.w	r6, [r4, #3061]	; 0xbf5
    8f06:	strb.w	r3, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f0a:	movs	r3, #0
      _s = s;
    8f0c:	strb.w	r6, [r4, #3068]	; 0xbfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f10:	str.w	r3, [r4, #3056]	; 0xbf0
    8f14:	movs	r3, #0
      _s = s;
      _b = b;
    8f16:	strb.w	r6, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f1a:	str.w	r3, [r4, #3064]	; 0xbf8
      _s = s;
      _b = b;
    8f1e:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f22:	str.w	ip, [r4, #3080]	; 0xc08
      _s = s;
      _b = b;
    8f26:	strb.w	r3, [r4, #3085]	; 0xc0d
    8f2a:	strb.w	r3, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f2e:	movs	r3, #112	; 0x70
    8f30:	str.w	ip, [r4, #3088]	; 0xc10
    8f34:	str.w	r3, [r4, #3096]	; 0xc18
      _s = s;
      _b = b;
    8f38:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f3c:	str.w	r1, [r4, #3120]	; 0xc30
      _s = s;
      _b = b;
    8f40:	strb.w	r3, [r4, #3101]	; 0xc1d
    8f44:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f48:	str.w	lr, [r4, #3128]	; 0xc38
      _s = s;
      _b = b;
    8f4c:	strb.w	r3, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f50:	strb.w	r5, [r4, #3052]	; 0xbec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f54:	str.w	sl, [r4, #3072]	; 0xc00
      _s = s;
    8f58:	strb.w	r5, [r4, #3076]	; 0xc04
      _b = b;
    8f5c:	strb.w	fp, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f60:	strb.w	r5, [r4, #3084]	; 0xc0c
    8f64:	strb.w	r5, [r4, #3092]	; 0xc14
    8f68:	strb.w	r5, [r4, #3100]	; 0xc1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f6c:	str.w	r9, [r4, #3104]	; 0xc20
      _s = s;
    8f70:	strb.w	r8, [r4, #3108]	; 0xc24
      _b = b;
    8f74:	strb.w	r5, [r4, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f78:	str.w	r9, [r4, #3112]	; 0xc28
      _s = s;
    8f7c:	strb.w	r8, [r4, #3116]	; 0xc2c
      _b = b;
    8f80:	strb.w	r5, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f84:	strb.w	r5, [r4, #3124]	; 0xc34
    8f88:	strb.w	r5, [r4, #3132]	; 0xc3c
      _b = b;
    8f8c:	strb.w	r2, [r4, #3133]	; 0xc3d
    8f90:	strb.w	r3, [r4, #3149]	; 0xc4d
    8f94:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f98:	str.w	lr, [r4, #3136]	; 0xc40
      _s = s;
      _b = b;
    8f9c:	strb.w	r3, [r4, #3157]	; 0xc55
    8fa0:	strb.w	r3, [r4, #3165]	; 0xc5d
    8fa4:	mvn.w	r3, #4
    8fa8:	strb.w	r2, [r4, #3141]	; 0xc45
    8fac:	strb.w	r3, [r4, #3205]	; 0xc85
    8fb0:	strb.w	r3, [r4, #3213]	; 0xc8d
    8fb4:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fb8:	str.w	r1, [r4, #3144]	; 0xc48
    8fbc:	str.w	ip, [r4, #3152]	; 0xc50
    8fc0:	str.w	ip, [r4, #3160]	; 0xc58
    8fc4:	str.w	r1, [r4, #3200]	; 0xc80
    8fc8:	str.w	r1, [r4, #3208]	; 0xc88
      _s = s;
    8fcc:	strb.w	r5, [r4, #3140]	; 0xc44
    8fd0:	strb.w	r5, [r4, #3148]	; 0xc4c
    8fd4:	strb.w	r5, [r4, #3156]	; 0xc54
    8fd8:	strb.w	r5, [r4, #3164]	; 0xc5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fdc:	str.w	r9, [r4, #3168]	; 0xc60
      _s = s;
    8fe0:	strb.w	r8, [r4, #3172]	; 0xc64
      _b = b;
    8fe4:	strb.w	r5, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fe8:	str.w	r9, [r4, #3176]	; 0xc68
      _s = s;
    8fec:	strb.w	r8, [r4, #3180]	; 0xc6c
      _b = b;
    8ff0:	strb.w	r5, [r4, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ff4:	str.w	r9, [r4, #3184]	; 0xc70
      _s = s;
    8ff8:	strb.w	r8, [r4, #3188]	; 0xc74
      _b = b;
    8ffc:	strb.w	r5, [r4, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9000:	str.w	r9, [r4, #3192]	; 0xc78
      _s = s;
    9004:	strb.w	r8, [r4, #3196]	; 0xc7c
      _b = b;
    9008:	strb.w	r5, [r4, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    900c:	strb.w	r5, [r4, #3204]	; 0xc84
    9010:	strb.w	r5, [r4, #3212]	; 0xc8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9014:	str.w	sl, [r4, #3216]	; 0xc90
      _s = s;
    9018:	strb.w	r5, [r4, #3220]	; 0xc94
      _b = b;
    901c:	strb.w	fp, [r4, #3221]	; 0xc95
    9020:	strb.w	r3, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9024:	movs	r3, #112	; 0x70
    9026:	str.w	ip, [r4, #3224]	; 0xc98
    902a:	str.w	r3, [r4, #3240]	; 0xca8
      _s = s;
      _b = b;
    902e:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9032:	strb.w	r6, [r4, #3252]	; 0xcb4
      _b = b;
    9036:	strb.w	r3, [r4, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    903a:	movs	r3, #0
      _s = s;
      _b = b;
    903c:	strb.w	r6, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9040:	str.w	r3, [r4, #3248]	; 0xcb0
    9044:	movs	r3, #0
      _s = s;
    9046:	strb.w	r6, [r4, #3260]	; 0xcbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    904a:	str.w	r3, [r4, #3256]	; 0xcb8
    904e:	movs	r3, #0
      _s = s;
      _b = b;
    9050:	strb.w	r6, [r4, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9054:	str.w	r3, [r4, #3264]	; 0xcc0
    9058:	movs	r3, #112	; 0x70
      _s = s;
    905a:	strb.w	r6, [r4, #3268]	; 0xcc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    905e:	str.w	r3, [r4, #3272]	; 0xcc8
      _s = s;
      _b = b;
    9062:	mvn.w	r3, #45	; 0x2d
    9066:	strb.w	r6, [r4, #3269]	; 0xcc5
    906a:	strb.w	r3, [r4, #3277]	; 0xccd
    906e:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9072:	str.w	r1, [r4, #3304]	; 0xce8
      _s = s;
    9076:	strb.w	r5, [r4, #3228]	; 0xc9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    907a:	str.w	sl, [r4, #3232]	; 0xca0
      _s = s;
    907e:	strb.w	r5, [r4, #3236]	; 0xca4
      _b = b;
    9082:	strb.w	fp, [r4, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9086:	strb.w	r5, [r4, #3244]	; 0xcac
    908a:	strb.w	r5, [r4, #3276]	; 0xccc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    908e:	str.w	r9, [r4, #3280]	; 0xcd0
      _s = s;
    9092:	strb.w	r8, [r4, #3284]	; 0xcd4
      _b = b;
    9096:	strb.w	r5, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    909a:	str.w	r9, [r4, #3288]	; 0xcd8
      _s = s;
    909e:	strb.w	r8, [r4, #3292]	; 0xcdc
      _b = b;
    90a2:	strb.w	r5, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a6:	str.w	r9, [r4, #3296]	; 0xce0
      _s = s;
    90aa:	strb.w	r8, [r4, #3300]	; 0xce4
      _b = b;
    90ae:	strb.w	r5, [r4, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90b2:	strb.w	r5, [r4, #3308]	; 0xcec
      _b = b;
    90b6:	strb.w	r3, [r4, #3309]	; 0xced
    90ba:	strb.w	r3, [r4, #3357]	; 0xd1d
    90be:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90c2:	str.w	lr, [r4, #3312]	; 0xcf0
      _s = s;
      _b = b;
    90c6:	strb.w	r2, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90ca:	str.w	lr, [r4, #3320]	; 0xcf8
      _s = s;
      _b = b;
    90ce:	strb.w	r2, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90d2:	str.w	lr, [r4, #3336]	; 0xd08
      _s = s;
      _b = b;
    90d6:	strb.w	r2, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90da:	str.w	lr, [r4, #3344]	; 0xd10
      _s = s;
      _b = b;
    90de:	strb.w	r2, [r4, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90e2:	str.w	r1, [r4, #3352]	; 0xd18
    90e6:	str.w	ip, [r4, #3360]	; 0xd20
      _s = s;
      _b = b;
    90ea:	strb.w	r3, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90ee:	str.w	ip, [r4, #3392]	; 0xd40
      _s = s;
    90f2:	strb.w	r5, [r4, #3316]	; 0xcf4
    90f6:	strb.w	r5, [r4, #3324]	; 0xcfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90fa:	str.w	sl, [r4, #3328]	; 0xd00
      _s = s;
    90fe:	strb.w	r5, [r4, #3332]	; 0xd04
      _b = b;
    9102:	strb.w	fp, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9106:	strb.w	r5, [r4, #3340]	; 0xd0c
    910a:	strb.w	r5, [r4, #3348]	; 0xd14
    910e:	strb.w	r5, [r4, #3356]	; 0xd1c
    9112:	strb.w	r5, [r4, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9116:	str.w	r9, [r4, #3368]	; 0xd28
      _s = s;
    911a:	strb.w	r8, [r4, #3372]	; 0xd2c
      _b = b;
    911e:	strb.w	r5, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9122:	str.w	r9, [r4, #3376]	; 0xd30
      _s = s;
    9126:	strb.w	r8, [r4, #3380]	; 0xd34
      _b = b;
    912a:	strb.w	r5, [r4, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    912e:	str.w	r9, [r4, #3384]	; 0xd38
      _s = s;
    9132:	strb.w	r8, [r4, #3388]	; 0xd3c
      _b = b;
    9136:	strb.w	r5, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    913a:	strb.w	r5, [r4, #3396]	; 0xd44
      _b = b;
    913e:	strb.w	r3, [r4, #3397]	; 0xd45
    9142:	strb.w	r3, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9146:	movs	r3, #112	; 0x70
    9148:	str.w	ip, [r4, #3400]	; 0xd48
    914c:	str.w	r3, [r4, #3408]	; 0xd50
      _s = s;
      _b = b;
    9150:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9154:	strb.w	r6, [r4, #3444]	; 0xd74
      _b = b;
    9158:	strb.w	r3, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    915c:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    915e:	strb.w	r6, [r4, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9162:	str.w	r3, [r4, #3432]	; 0xd68
      _s = s;
      _b = b;
    9166:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    916a:	strb.w	r6, [r4, #3452]	; 0xd7c
      _b = b;
    916e:	strb.w	r3, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9172:	movs	r3, #0
      _s = s;
      _b = b;
    9174:	strb.w	r6, [r4, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9178:	str.w	r3, [r4, #3440]	; 0xd70
    917c:	movs	r3, #0
      _s = s;
    917e:	strb.w	r6, [r4, #3460]	; 0xd84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9182:	str.w	r3, [r4, #3448]	; 0xd78
    9186:	movs	r3, #0
      _s = s;
      _b = b;
    9188:	strb.w	r6, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    918c:	str.w	r3, [r4, #3456]	; 0xd80
    9190:	movs	r3, #0
      _s = s;
    9192:	strb.w	r6, [r4, #3468]	; 0xd8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9196:	str.w	r3, [r4, #3464]	; 0xd88
      _s = s;
      _b = b;
    919a:	mvn.w	r3, #4
    919e:	strb.w	r6, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a2:	str.w	r1, [r4, #3472]	; 0xd90
      _s = s;
      _b = b;
    91a6:	strb.w	r3, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91aa:	strb.w	r5, [r4, #3404]	; 0xd4c
    91ae:	strb.w	r5, [r4, #3412]	; 0xd54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91b2:	str.w	r9, [r4, #3416]	; 0xd58
      _s = s;
    91b6:	strb.w	r8, [r4, #3420]	; 0xd5c
      _b = b;
    91ba:	strb.w	r5, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91be:	str.w	r9, [r4, #3424]	; 0xd60
      _s = s;
    91c2:	strb.w	r8, [r4, #3428]	; 0xd64
      _b = b;
    91c6:	strb.w	r5, [r4, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91ca:	strb.w	r5, [r4, #3436]	; 0xd6c
    91ce:	strb.w	r5, [r4, #3476]	; 0xd94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91d2:	str.w	r9, [r4, #3480]	; 0xd98
      _s = s;
    91d6:	strb.w	r8, [r4, #3484]	; 0xd9c
      _b = b;
    91da:	strb.w	r5, [r4, #3485]	; 0xd9d
    91de:	strb.w	r3, [r4, #3501]	; 0xdad
    91e2:	strb.w	r3, [r4, #3509]	; 0xdb5
    91e6:	strb.w	r3, [r4, #3525]	; 0xdc5
    91ea:	mvn.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91ee:	str.w	r1, [r4, #3496]	; 0xda8
      _s = s;
      _b = b;
    91f2:	strb.w	r3, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91f6:	movs	r3, #206	; 0xce
    91f8:	str.w	r1, [r4, #3504]	; 0xdb0
    91fc:	str.w	r3, [r4, #3568]	; 0xdf0
      _s = s;
    9200:	mov.w	r3, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9204:	str.w	lr, [r4, #3512]	; 0xdb8
      _s = s;
    9208:	strb.w	r3, [r4, #3572]	; 0xdf4
      _b = b;
    920c:	mvn.w	r3, #7
    9210:	strb.w	r2, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9214:	str.w	r1, [r4, #3520]	; 0xdc0
    9218:	str.w	lr, [r4, #3528]	; 0xdc8
      _s = s;
      _b = b;
    921c:	strb.w	r2, [r4, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9220:	str.w	lr, [r4, #3544]	; 0xdd8
      _s = s;
      _b = b;
    9224:	strb.w	r2, [r4, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9228:	str.w	ip, [r4, #3552]	; 0xde0
    922c:	str.w	r9, [r4, #3488]	; 0xda0
      _s = s;
    9230:	strb.w	r8, [r4, #3492]	; 0xda4
      _b = b;
    9234:	strb.w	r5, [r4, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9238:	strb.w	r5, [r4, #3500]	; 0xdac
    923c:	strb.w	r5, [r4, #3508]	; 0xdb4
    9240:	strb.w	r5, [r4, #3516]	; 0xdbc
    9244:	strb.w	r5, [r4, #3524]	; 0xdc4
    9248:	strb.w	r5, [r4, #3532]	; 0xdcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    924c:	str.w	sl, [r4, #3536]	; 0xdd0
      _s = s;
    9250:	strb.w	r5, [r4, #3540]	; 0xdd4
      _b = b;
    9254:	strb.w	fp, [r4, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9258:	strb.w	r5, [r4, #3548]	; 0xddc
    925c:	strb.w	r5, [r4, #3556]	; 0xde4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9260:	str.w	r9, [r4, #3560]	; 0xde8
      _s = s;
    9264:	strb.w	r8, [r4, #3564]	; 0xdec
      _b = b;
    9268:	strb.w	r5, [r4, #3565]	; 0xded
    926c:	strb.w	r3, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9270:	movs	r3, #206	; 0xce
      _s = s;
    9272:	strb.w	r6, [r4, #3644]	; 0xe3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9276:	str.w	r3, [r4, #3624]	; 0xe28
      _s = s;
    927a:	mov.w	r3, #39	; 0x27
      _b = b;
    927e:	strb.w	r6, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9282:	strb.w	r3, [r4, #3628]	; 0xe2c
      _b = b;
    9286:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    928a:	strb.w	r6, [r4, #3652]	; 0xe44
      _b = b;
    928e:	strb.w	r3, [r4, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9292:	movw	r3, #261	; 0x105
      _s = s;
      _b = b;
    9296:	strb.w	r6, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    929a:	str.w	r3, [r4, #3632]	; 0xe30
      _s = s;
    929e:	mvn.w	r3, #49	; 0x31
    92a2:	strb.w	r6, [r4, #3660]	; 0xe4c
    92a6:	strb.w	r3, [r4, #3636]	; 0xe34
      _b = b;
    92aa:	mov.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92ae:	str.w	r9, [r4, #3576]	; 0xdf8
      _s = s;
      _b = b;
    92b2:	strb.w	r3, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92b6:	movs	r3, #0
      _s = s;
    92b8:	strb.w	r8, [r4, #3580]	; 0xdfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92bc:	str.w	r3, [r4, #3640]	; 0xe38
    92c0:	movs	r3, #0
      _s = s;
      _b = b;
    92c2:	strb.w	r5, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92c6:	str.w	r3, [r4, #3648]	; 0xe40
    92ca:	movs	r3, #0
    92cc:	str.w	r9, [r4, #3584]	; 0xe00
    92d0:	str.w	r3, [r4, #3656]	; 0xe48
    92d4:	movs	r3, #0
      _s = s;
    92d6:	strb.w	r8, [r4, #3588]	; 0xe04
      _b = b;
    92da:	strb.w	r5, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92de:	str.w	r9, [r4, #3592]	; 0xe08
      _s = s;
    92e2:	strb.w	r8, [r4, #3596]	; 0xe0c
      _b = b;
    92e6:	strb.w	r5, [r4, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92ea:	str.w	r9, [r4, #3600]	; 0xe10
      _s = s;
    92ee:	strb.w	r8, [r4, #3604]	; 0xe14
      _b = b;
    92f2:	strb.w	r5, [r4, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92f6:	str.w	r9, [r4, #3608]	; 0xe18
      _s = s;
    92fa:	strb.w	r8, [r4, #3612]	; 0xe1c
      _b = b;
    92fe:	strb.w	r5, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9302:	str.w	r9, [r4, #3616]	; 0xe20
      _s = s;
    9306:	strb.w	r8, [r4, #3620]	; 0xe24
      _b = b;
    930a:	strb.w	r5, [r4, #3621]	; 0xe25
    930e:	strb.w	r6, [r4, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9312:	str.w	r3, [r4, #3664]	; 0xe50
      _s = s;
      _b = b;
    9316:	mvn.w	r3, #42	; 0x2a
    931a:	strb.w	r2, [r4, #3709]	; 0xe7d
    931e:	mvn.w	r2, #4
    9322:	strb.w	r3, [r4, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9326:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    9328:	strb.w	r2, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    932c:	str.w	r3, [r4, #3688]	; 0xe68
      _s = s;
      _b = b;
    9330:	mvn.w	r3, #45	; 0x2d
    9334:	strb.w	r2, [r4, #3725]	; 0xe8d
    9338:	strb.w	r3, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    933c:	movs	r3, #112	; 0x70
      _s = s;
      _b = b;
    933e:	strb.w	r2, [r4, #3741]	; 0xe9d
    9342:	mvn.w	r2, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9346:	str.w	r3, [r4, #3696]	; 0xe70
      _s = s;
      _b = b;
    934a:	mvn.w	r3, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    934e:	strb.w	r6, [r4, #3668]	; 0xe54
      _b = b;
    9352:	strb.w	r6, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9356:	str.w	ip, [r4, #3672]	; 0xe58
      _s = s;
      _b = b;
    935a:	strb.w	r3, [r4, #3701]	; 0xe75
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 2
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 3
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    935e:	movs	r3, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9360:	str.w	lr, [r4, #3704]	; 0xe78
    9364:	str.w	r1, [r4, #3712]	; 0xe80
    9368:	str.w	r1, [r4, #3720]	; 0xe88
    936c:	str.w	r1, [r4, #3736]	; 0xe98
    9370:	str.w	ip, [r4, #3744]	; 0xea0
      _s = s;
    9374:	strb.w	r5, [r4, #3676]	; 0xe5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9378:	str.w	r9, [r4, #3680]	; 0xe60
      _s = s;
    937c:	strb.w	r8, [r4, #3684]	; 0xe64
      _b = b;
    9380:	strb.w	r5, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9384:	strb.w	r5, [r4, #3692]	; 0xe6c
    9388:	strb.w	r5, [r4, #3700]	; 0xe74
    938c:	strb.w	r5, [r4, #3708]	; 0xe7c
    9390:	strb.w	r5, [r4, #3716]	; 0xe84
    9394:	strb.w	r5, [r4, #3724]	; 0xe8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9398:	str.w	sl, [r4, #3728]	; 0xe90
      _s = s;
    939c:	strb.w	r5, [r4, #3732]	; 0xe94
      _b = b;
    93a0:	strb.w	fp, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93a4:	strb.w	r5, [r4, #3740]	; 0xe9c
    93a8:	strb.w	r5, [r4, #3748]	; 0xea4
      _b = b;
    93ac:	strb.w	r2, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93b0:	movs	r2, #206	; 0xce
      _s = s;
    93b2:	strb.w	r6, [r4, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93b6:	str.w	r2, [r4, #3768]	; 0xeb8
      _s = s;
    93ba:	mov.w	r2, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93be:	str.w	r9, [r4, #3752]	; 0xea8
      _s = s;
    93c2:	strb.w	r2, [r4, #3772]	; 0xebc
      _b = b;
    93c6:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93ca:	strb.w	r8, [r4, #3756]	; 0xeac
      _b = b;
    93ce:	strb.w	r2, [r4, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93d2:	movs	r2, #206	; 0xce
      _s = s;
      _b = b;
    93d4:	strb.w	r5, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93d8:	str.w	r2, [r4, #3808]	; 0xee0
      _s = s;
    93dc:	mov.w	r2, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93e0:	str.w	r9, [r4, #3760]	; 0xeb0
      _s = s;
    93e4:	strb.w	r2, [r4, #3812]	; 0xee4
      _b = b;
    93e8:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93ec:	strb.w	r8, [r4, #3764]	; 0xeb4
      _b = b;
    93f0:	strb.w	r2, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93f4:	movs	r2, #206	; 0xce
      _s = s;
      _b = b;
    93f6:	strb.w	r5, [r4, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93fa:	str.w	r2, [r4, #3816]	; 0xee8
      _s = s;
    93fe:	mov.w	r2, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9402:	str.w	r9, [r4, #3776]	; 0xec0
      _s = s;
    9406:	strb.w	r2, [r4, #3820]	; 0xeec
      _b = b;
    940a:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    940e:	strb.w	r8, [r4, #3780]	; 0xec4
      _b = b;
    9412:	strb.w	r2, [r4, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9416:	movw	r2, #261	; 0x105
      _s = s;
      _b = b;
    941a:	strb.w	r5, [r4, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    941e:	str.w	r2, [r4, #3824]	; 0xef0
      _s = s;
    9422:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9426:	str.w	r9, [r4, #3784]	; 0xec8
      _s = s;
    942a:	strb.w	r2, [r4, #3828]	; 0xef4
      _b = b;
    942e:	mov.w	r2, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9432:	strb.w	r8, [r4, #3788]	; 0xecc
      _b = b;
    9436:	strb.w	r2, [r4, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    943a:	movs	r2, #0
      _s = s;
      _b = b;
    943c:	strb.w	r5, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9440:	str.w	r2, [r4, #3832]	; 0xef8
    9444:	movs	r2, #0
    9446:	str.w	r9, [r4, #3792]	; 0xed0
      _s = s;
    944a:	strb.w	r8, [r4, #3796]	; 0xed4
      _b = b;
    944e:	strb.w	r5, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9452:	str.w	r9, [r4, #3800]	; 0xed8
      _s = s;
    9456:	strb.w	r8, [r4, #3804]	; 0xedc
      _b = b;
    945a:	strb.w	r5, [r4, #3805]	; 0xedd
    945e:	strb.w	r6, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9462:	str.w	r2, [r4, #3840]	; 0xf00
    9466:	movs	r2, #0
      _s = s;
    9468:	strb.w	r6, [r4, #3844]	; 0xf04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    946c:	str.w	r2, [r4, #3848]	; 0xf08
    9470:	movs	r2, #0
      _s = s;
      _b = b;
    9472:	strb.w	r6, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9476:	str.w	r2, [r4, #3856]	; 0xf10
    947a:	movs	r2, #0
      _s = s;
    947c:	strb.w	r6, [r4, #3852]	; 0xf0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9480:	str.w	r2, [r4, #3864]	; 0xf18
    9484:	movs	r2, #112	; 0x70
      _s = s;
      _b = b;
    9486:	strb.w	r6, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    948a:	str.w	r2, [r4, #3872]	; 0xf20
      _s = s;
      _b = b;
    948e:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9492:	strb.w	r6, [r4, #3860]	; 0xf14
      _b = b;
    9496:	strb.w	r2, [r4, #3877]	; 0xf25
    949a:	mvn.w	r2, #42	; 0x2a
    949e:	strb.w	r6, [r4, #3861]	; 0xf15
    94a2:	strb.w	r2, [r4, #3885]	; 0xf2d
    94a6:	strb.w	r2, [r4, #3893]	; 0xf35
    94aa:	mvn.w	r2, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94ae:	strb.w	r6, [r4, #3868]	; 0xf1c
      _b = b;
    94b2:	strb.w	r6, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94b6:	str.w	ip, [r4, #3880]	; 0xf28
    94ba:	str.w	ip, [r4, #3888]	; 0xf30
    94be:	str.w	r1, [r4, #3896]	; 0xf38
      _s = s;
      _b = b;
    94c2:	strb.w	r2, [r4, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94c6:	str.w	r1, [r4, #3920]	; 0xf50
      _s = s;
    94ca:	strb.w	r5, [r4, #3876]	; 0xf24
    94ce:	strb.w	r5, [r4, #3884]	; 0xf2c
    94d2:	strb.w	r5, [r4, #3892]	; 0xf34
    94d6:	strb.w	r5, [r4, #3900]	; 0xf3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94da:	str.w	sl, [r4, #3904]	; 0xf40
      _s = s;
    94de:	strb.w	r5, [r4, #3908]	; 0xf44
      _b = b;
    94e2:	strb.w	fp, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94e6:	str.w	sl, [r4, #3912]	; 0xf48
      _s = s;
    94ea:	strb.w	r5, [r4, #3916]	; 0xf4c
      _b = b;
    94ee:	strb.w	fp, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94f2:	strb.w	r5, [r4, #3924]	; 0xf54
      _b = b;
    94f6:	strb.w	r2, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94fa:	movs	r2, #112	; 0x70
    94fc:	str.w	ip, [r4, #3936]	; 0xf60
    9500:	str.w	r2, [r4, #3928]	; 0xf58
      _s = s;
      _b = b;
    9504:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9508:	str.w	ip, [r4, #3944]	; 0xf68
      _s = s;
      _b = b;
    950c:	strb.w	r2, [r4, #3933]	; 0xf5d
    9510:	mvn.w	r2, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9514:	str.w	ip, [r4, #3952]	; 0xf70
      _s = s;
      _b = b;
    9518:	strb.w	r2, [r4, #3941]	; 0xf65
    951c:	strb.w	r2, [r4, #3949]	; 0xf6d
    9520:	strb.w	r2, [r4, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9524:	movs	r2, #206	; 0xce
      _s = s;
    9526:	strb.w	r5, [r4, #3932]	; 0xf5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    952a:	str.w	r2, [r4, #3976]	; 0xf88
      _s = s;
    952e:	mov.w	r2, #39	; 0x27
    9532:	strb.w	r5, [r4, #3940]	; 0xf64
    9536:	strb.w	r2, [r4, #3980]	; 0xf8c
      _b = b;
    953a:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    953e:	strb.w	r5, [r4, #3948]	; 0xf6c
      _b = b;
    9542:	strb.w	r2, [r4, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9546:	movs	r2, #206	; 0xce
      _s = s;
    9548:	strb.w	r5, [r4, #3956]	; 0xf74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    954c:	str.w	r2, [r4, #3984]	; 0xf90
      _s = s;
    9550:	mov.w	r2, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9554:	str.w	r9, [r4, #3960]	; 0xf78
      _s = s;
    9558:	strb.w	r2, [r4, #3988]	; 0xf94
      _b = b;
    955c:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9560:	strb.w	r8, [r4, #3964]	; 0xf7c
      _b = b;
    9564:	strb.w	r2, [r4, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9568:	movs	r2, #206	; 0xce
      _s = s;
      _b = b;
    956a:	strb.w	r5, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    956e:	str.w	r2, [r4, #3992]	; 0xf98
      _s = s;
    9572:	mov.w	r2, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9576:	str.w	r9, [r4, #3968]	; 0xf80
      _s = s;
    957a:	strb.w	r2, [r4, #3996]	; 0xf9c
      _b = b;
    957e:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9582:	strb.w	r8, [r4, #3972]	; 0xf84
      _b = b;
    9586:	strb.w	r2, [r4, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    958a:	movs	r2, #206	; 0xce
      _s = s;
      _b = b;
    958c:	strb.w	r5, [r4, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9590:	str.w	r2, [r4, #4000]	; 0xfa0
      _s = s;
    9594:	mov.w	r2, #39	; 0x27
    9598:	strb.w	r2, [r4, #4004]	; 0xfa4
      _b = b;
    959c:	mvn.w	r2, #7
    95a0:	strb.w	r2, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95a4:	movs	r2, #206	; 0xce
    95a6:	str.w	r2, [r4, #4008]	; 0xfa8
      _s = s;
    95aa:	mov.w	r2, #39	; 0x27
    95ae:	strb.w	r2, [r4, #4012]	; 0xfac
      _b = b;
    95b2:	mvn.w	r2, #7
    95b6:	strb.w	r2, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95ba:	movw	r2, #4100	; 0x1004
    95be:	strb.w	r6, [r4, #4028]	; 0xfbc
    95c2:	strb	r5, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95c4:	movw	r2, #261	; 0x105
      _s = s;
      _b = b;
    95c8:	strb.w	r6, [r4, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95cc:	str.w	r2, [r4, #4016]	; 0xfb0
      _s = s;
    95d0:	mvn.w	r2, #49	; 0x31
    95d4:	strb.w	r6, [r4, #4036]	; 0xfc4
    95d8:	strb.w	r2, [r4, #4020]	; 0xfb4
      _b = b;
    95dc:	mov.w	r2, #95	; 0x5f
    95e0:	strb.w	r6, [r4, #4037]	; 0xfc5
    95e4:	strb.w	r2, [r4, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95e8:	movs	r2, #0
      _s = s;
    95ea:	strb.w	r6, [r4, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95ee:	str.w	r2, [r4, #4024]	; 0xfb8
    95f2:	movs	r2, #0
      _s = s;
      _b = b;
    95f4:	strb.w	r6, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95f8:	str.w	r2, [r4, #4032]	; 0xfc0
    95fc:	movs	r2, #0
      _s = s;
    95fe:	strb.w	r6, [r4, #4052]	; 0xfd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9602:	str.w	r2, [r4, #4040]	; 0xfc8
    9606:	movs	r2, #0
      _s = s;
      _b = b;
    9608:	strb.w	r6, [r4, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    960c:	str.w	r2, [r4, #4048]	; 0xfd0
    9610:	movs	r2, #0
      _s = s;
    9612:	strb.w	r6, [r4, #4060]	; 0xfdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9616:	str.w	r2, [r4, #4056]	; 0xfd8
    961a:	movs	r2, #0
      _s = s;
      _b = b;
    961c:	strb.w	r6, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9620:	str.w	r2, [r4, #4064]	; 0xfe0
    9624:	movs	r2, #0
      _s = s;
    9626:	strb.w	r6, [r4, #4068]	; 0xfe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    962a:	str.w	r2, [r4, #4072]	; 0xfe8
    962e:	movs	r2, #112	; 0x70
      _s = s;
      _b = b;
    9630:	strb.w	r6, [r4, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9634:	strb.w	r6, [r4, #4076]	; 0xfec
      _b = b;
    9638:	strb.w	r6, [r4, #4077]	; 0xfed
    963c:	movw	r6, #4101	; 0x1005
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9640:	str.w	r2, [r4, #4080]	; 0xff0
      _s = s;
      _b = b;
    9644:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9648:	str.w	r1, [r4, #4088]	; 0xff8
      _s = s;
      _b = b;
    964c:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9650:	str.w	ip, [r0], #32
      _s = s;
      _b = b;
    9654:	strb.w	r2, [r4, #4085]	; 0xff5
    9658:	movs	r2, #8
    965a:	strb.w	r1, [r4, #4093]	; 0xffd
    965e:	mov.w	r1, #576	; 0x240
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9662:	strb.w	r5, [r4, #4084]	; 0xff4
    9666:	strb.w	r5, [r4, #4092]	; 0xffc
      _b = b;
    966a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    966c:	movw	r6, #4104	; 0x1008
    9670:	str.w	ip, [r0]
    9674:	str.w	ip, [r4, r6]
      _s = s;
    9678:	movw	r6, #4108	; 0x100c
    967c:	ldr	r0, [pc, #956]	; (9a3c <_GLOBAL__sub_I_bri_level+0x4674>)
    967e:	strb	r5, [r4, r6]
      _b = b;
    9680:	movw	r6, #4109	; 0x100d
    9684:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9686:	movw	r6, #4112	; 0x1010
    968a:	str.w	ip, [r4, r6]
      _s = s;
    968e:	movw	r6, #4116	; 0x1014
    9692:	strb	r5, [r4, r6]
      _b = b;
    9694:	movw	r6, #4117	; 0x1015
    9698:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    969a:	movw	r6, #4120	; 0x1018
    969e:	str.w	ip, [r4, r6]
      _s = s;
    96a2:	movw	r6, #4124	; 0x101c
    96a6:	strb	r5, [r4, r6]
      _b = b;
    96a8:	movw	r6, #4125	; 0x101d
    96ac:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96ae:	movw	r6, #4132	; 0x1024
    96b2:	strb	r5, [r4, r6]
      _b = b;
    96b4:	movw	r6, #4133	; 0x1025
    96b8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96ba:	movw	r6, #4136	; 0x1028
    96be:	str.w	ip, [r4, r6]
      _s = s;
    96c2:	movw	r6, #4140	; 0x102c
    96c6:	strb	r5, [r4, r6]
      _b = b;
    96c8:	movw	r6, #4141	; 0x102d
    96cc:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96ce:	movw	r6, #4144	; 0x1030
    96d2:	str.w	ip, [r4, r6]
      _s = s;
    96d6:	movw	r6, #4148	; 0x1034
    96da:	strb	r5, [r4, r6]
      _b = b;
    96dc:	movw	r6, #4149	; 0x1035
    96e0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96e2:	movw	r6, #4152	; 0x1038
    96e6:	str.w	ip, [r4, r6]
      _s = s;
    96ea:	movw	r6, #4156	; 0x103c
    96ee:	strb	r5, [r4, r6]
      _b = b;
    96f0:	movw	r6, #4157	; 0x103d
    96f4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96f6:	movw	r6, #4164	; 0x1044
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96fa:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
    96fe:	strb.w	r8, [r4, r6]
      _b = b;
    9702:	movw	r6, #4165	; 0x1045
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9706:	str.w	r9, [r7, #64]	; 0x40
    970a:	movs	r7, #206	; 0xce
      _s = s;
      _b = b;
    970c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    970e:	movw	r6, #4168	; 0x1048
    9712:	str	r7, [r4, r6]
      _s = s;
    9714:	movw	r6, #4172	; 0x104c
    9718:	mov.w	r7, #39	; 0x27
    971c:	strb	r7, [r4, r6]
      _b = b;
    971e:	movw	r6, #4173	; 0x104d
    9722:	mvn.w	r7, #7
    9726:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9728:	movw	r6, #4176	; 0x1050
    972c:	movs	r7, #206	; 0xce
    972e:	str	r7, [r4, r6]
      _s = s;
    9730:	movw	r6, #4180	; 0x1054
    9734:	mov.w	r7, #39	; 0x27
    9738:	strb	r7, [r4, r6]
      _b = b;
    973a:	movw	r6, #4181	; 0x1055
    973e:	mvn.w	r7, #7
    9742:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9744:	movw	r6, #4184	; 0x1058
    9748:	movs	r7, #206	; 0xce
    974a:	str	r7, [r4, r6]
      _s = s;
    974c:	movw	r6, #4188	; 0x105c
    9750:	mov.w	r7, #39	; 0x27
    9754:	strb	r7, [r4, r6]
      _b = b;
    9756:	movw	r6, #4189	; 0x105d
    975a:	mvn.w	r7, #7
    975e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9760:	movw	r6, #4196	; 0x1064
    9764:	mov.w	r7, #39	; 0x27
    9768:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    976a:	add.w	r7, r4, #4096	; 0x1000
    976e:	movs	r6, #206	; 0xce
    9770:	str	r6, [r7, #96]	; 0x60
      _s = s;
      _b = b;
    9772:	movw	r6, #4197	; 0x1065
    9776:	mvn.w	r7, #7
    977a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    977c:	movw	r7, #4200	; 0x1068
    9780:	movs	r6, #239	; 0xef
    9782:	str	r6, [r4, r7]
      _s = s;
    9784:	movw	r6, #4204	; 0x106c
    9788:	mvn.w	r7, #123	; 0x7b
    978c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    978e:	movs	r7, #0
    9790:	movw	r6, #4208	; 0x1070
    9794:	str	r7, [r4, r6]
      _s = s;
    9796:	movw	r6, #4212	; 0x1074
    979a:	strb	r7, [r4, r6]
      _b = b;
    979c:	movw	r6, #4213	; 0x1075
    97a0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97a2:	movs	r7, #0
    97a4:	movw	r6, #4216	; 0x1078
    97a8:	str	r7, [r4, r6]
      _s = s;
    97aa:	movw	r6, #4220	; 0x107c
    97ae:	strb	r7, [r4, r6]
      _b = b;
    97b0:	movw	r6, #4221	; 0x107d
    97b4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    97b6:	movw	r6, #4228	; 0x1084
    97ba:	strb	r7, [r4, r6]
      _b = b;
    97bc:	movw	r6, #4229	; 0x1085
    97c0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97c2:	movs	r7, #0
    97c4:	movw	r6, #4232	; 0x1088
    97c8:	str	r7, [r4, r6]
      _s = s;
    97ca:	movw	r6, #4236	; 0x108c
    97ce:	strb	r7, [r4, r6]
      _b = b;
    97d0:	movw	r6, #4237	; 0x108d
    97d4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97d6:	movs	r7, #0
    97d8:	movw	r6, #4240	; 0x1090
    97dc:	str	r7, [r4, r6]
      _s = s;
    97de:	movw	r6, #4244	; 0x1094
    97e2:	strb	r7, [r4, r6]
      _b = b;
    97e4:	movw	r6, #4245	; 0x1095
    97e8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97ea:	movs	r7, #0
    97ec:	movw	r6, #4248	; 0x1098
    97f0:	str	r7, [r4, r6]
      _s = s;
    97f2:	movw	r6, #4252	; 0x109c
    97f6:	strb	r7, [r4, r6]
      _b = b;
    97f8:	movw	r6, #4253	; 0x109d
    97fc:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    97fe:	movw	r6, #4260	; 0x10a4
    9802:	strb	r7, [r4, r6]
      _b = b;
    9804:	movw	r6, #4261	; 0x10a5
    9808:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    980a:	movs	r7, #0
    980c:	movw	r6, #4264	; 0x10a8
    9810:	str	r7, [r4, r6]
      _s = s;
    9812:	movw	r6, #4268	; 0x10ac
    9816:	strb	r7, [r4, r6]
      _b = b;
    9818:	movw	r6, #4269	; 0x10ad
    981c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    981e:	movs	r7, #0
    9820:	movw	r6, #4272	; 0x10b0
    9824:	str	r7, [r4, r6]
      _s = s;
    9826:	movw	r6, #4276	; 0x10b4
    982a:	strb	r7, [r4, r6]
      _b = b;
    982c:	movw	r6, #4205	; 0x106d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9830:	movs	r7, #0
      _s = s;
      _b = b;
    9832:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9834:	add.w	r6, r4, #4224	; 0x1080
    9838:	str	r7, [r6, #0]
    983a:	str	r7, [r6, #32]
      _s = s;
      _b = b;
    983c:	movw	r6, #4277	; 0x10b5
    9840:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9842:	movw	r6, #4280	; 0x10b8
    9846:	movs	r7, #112	; 0x70
    9848:	str.w	sl, [r4, r6]
    984c:	add.w	r6, r4, #4096	; 0x1000
    9850:	str.w	r7, [r6, #192]	; 0xc0
      _s = s;
      _b = b;
    9854:	mvn.w	r7, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9858:	str.w	ip, [r6, #224]	; 0xe0
    985c:	str.w	ip, [r6, #256]	; 0x100
      _s = s;
      _b = b;
    9860:	movw	r6, #4285	; 0x10bd
    9864:	strb.w	fp, [r4, r6]
    9868:	movw	r6, #4293	; 0x10c5
    986c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    986e:	movw	r6, #4296	; 0x10c8
    9872:	movw	r7, #4304	; 0x10d0
    9876:	str.w	ip, [r4, r6]
    987a:	movs	r6, #112	; 0x70
    987c:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    987e:	movw	r6, #4309	; 0x10d5
    9882:	mvn.w	r7, #45	; 0x2d
    9886:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9888:	movw	r6, #4312	; 0x10d8
      _s = s;
      _b = b;
    988c:	mvn.w	r7, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9890:	str.w	ip, [r4, r6]
    9894:	movw	r6, #4328	; 0x10e8
    9898:	str.w	ip, [r4, r6]
    989c:	movw	r6, #4336	; 0x10f0
    98a0:	str.w	ip, [r4, r6]
    98a4:	movw	r6, #4344	; 0x10f8
    98a8:	str.w	ip, [r4, r6]
    98ac:	movw	r6, #4360	; 0x1108
    98b0:	str.w	r9, [r4, r6]
      _s = s;
    98b4:	movw	r6, #4364	; 0x110c
    98b8:	strb.w	r8, [r4, r6]
      _b = b;
    98bc:	movw	r6, #4301	; 0x10cd
    98c0:	strb	r7, [r4, r6]
    98c2:	movw	r6, #4317	; 0x10dd
    98c6:	strb	r7, [r4, r6]
    98c8:	movw	r6, #4325	; 0x10e5
    98cc:	strb	r7, [r4, r6]
    98ce:	movw	r6, #4333	; 0x10ed
    98d2:	strb	r7, [r4, r6]
    98d4:	movw	r6, #4341	; 0x10f5
    98d8:	strb	r7, [r4, r6]
    98da:	movw	r6, #4349	; 0x10fd
    98de:	strb	r7, [r4, r6]
    98e0:	movw	r6, #4357	; 0x1105
    98e4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    98e6:	movw	r6, #4284	; 0x10bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98ea:	movs	r7, #206	; 0xce
      _s = s;
    98ec:	strb	r5, [r4, r6]
    98ee:	movw	r6, #4292	; 0x10c4
    98f2:	strb	r5, [r4, r6]
    98f4:	movw	r6, #4300	; 0x10cc
    98f8:	strb	r5, [r4, r6]
    98fa:	movw	r6, #4308	; 0x10d4
    98fe:	strb	r5, [r4, r6]
    9900:	movw	r6, #4316	; 0x10dc
    9904:	strb	r5, [r4, r6]
    9906:	movw	r6, #4324	; 0x10e4
    990a:	strb	r5, [r4, r6]
    990c:	movw	r6, #4332	; 0x10ec
    9910:	strb	r5, [r4, r6]
    9912:	movw	r6, #4340	; 0x10f4
    9916:	strb	r5, [r4, r6]
    9918:	movw	r6, #4348	; 0x10fc
    991c:	strb	r5, [r4, r6]
    991e:	movw	r6, #4356	; 0x1104
    9922:	strb	r5, [r4, r6]
      _b = b;
    9924:	movw	r6, #4365	; 0x110d
    9928:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    992a:	add.w	r6, r4, #4096	; 0x1000
    992e:	str.w	r7, [r6, #288]	; 0x120
    9932:	movw	r6, #4368	; 0x1110
    9936:	movw	r7, #4376	; 0x1118
    993a:	str.w	r9, [r4, r6]
      _s = s;
    993e:	movw	r6, #4372	; 0x1114
    9942:	strb.w	r8, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9946:	movs	r6, #206	; 0xce
    9948:	str	r6, [r4, r7]
      _s = s;
    994a:	movw	r6, #4380	; 0x111c
    994e:	mov.w	r7, #39	; 0x27
    9952:	strb	r7, [r4, r6]
      _b = b;
    9954:	movw	r6, #4381	; 0x111d
    9958:	mvn.w	r7, #7
    995c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    995e:	movw	r6, #4388	; 0x1124
    9962:	mov.w	r7, #39	; 0x27
    9966:	strb	r7, [r4, r6]
      _b = b;
    9968:	movw	r6, #4389	; 0x1125
    996c:	mvn.w	r7, #7
    9970:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9972:	movw	r7, #4392	; 0x1128
    9976:	movw	r6, #261	; 0x105
    997a:	str	r6, [r4, r7]
      _s = s;
    997c:	movw	r6, #4396	; 0x112c
    9980:	mvn.w	r7, #49	; 0x31
    9984:	strb	r7, [r4, r6]
      _b = b;
    9986:	movw	r6, #4397	; 0x112d
    998a:	mov.w	r7, #95	; 0x5f
    998e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9990:	movs	r7, #0
    9992:	movw	r6, #4400	; 0x1130
    9996:	str	r7, [r4, r6]
      _s = s;
    9998:	movw	r6, #4404	; 0x1134
    999c:	strb	r7, [r4, r6]
      _b = b;
    999e:	movw	r6, #4405	; 0x1135
    99a2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99a4:	movs	r7, #0
    99a6:	movw	r6, #4408	; 0x1138
    99aa:	str	r7, [r4, r6]
      _s = s;
    99ac:	movw	r6, #4412	; 0x113c
    99b0:	strb	r7, [r4, r6]
      _b = b;
    99b2:	movw	r6, #4413	; 0x113d
    99b6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99b8:	movw	r6, #4420	; 0x1144
    99bc:	strb	r7, [r4, r6]
      _b = b;
    99be:	movw	r6, #4421	; 0x1145
    99c2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99c4:	movs	r7, #0
    99c6:	movw	r6, #4424	; 0x1148
    99ca:	str	r7, [r4, r6]
      _s = s;
    99cc:	movw	r6, #4428	; 0x114c
    99d0:	strb	r7, [r4, r6]
      _b = b;
    99d2:	movw	r6, #4429	; 0x114d
    99d6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99d8:	movs	r7, #0
    99da:	movw	r6, #4432	; 0x1150
    99de:	str	r7, [r4, r6]
      _s = s;
    99e0:	movw	r6, #4436	; 0x1154
    99e4:	strb	r7, [r4, r6]
      _b = b;
    99e6:	movw	r6, #4437	; 0x1155
    99ea:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99ec:	movs	r7, #0
    99ee:	movw	r6, #4440	; 0x1158
    99f2:	str	r7, [r4, r6]
      _s = s;
    99f4:	movw	r6, #4444	; 0x115c
    99f8:	strb	r7, [r4, r6]
      _b = b;
    99fa:	movw	r6, #4445	; 0x115d
    99fe:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a00:	movw	r6, #4452	; 0x1164
    9a04:	strb	r7, [r4, r6]
      _b = b;
    9a06:	movw	r6, #4373	; 0x1115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a0a:	movs	r7, #0
      _s = s;
      _b = b;
    9a0c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a0e:	add.w	r6, r4, #4416	; 0x1140
    9a12:	str	r7, [r6, #0]
    9a14:	str	r7, [r6, #32]
      _s = s;
      _b = b;
    9a16:	movw	r6, #4453	; 0x1165
    9a1a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a1c:	movs	r7, #0
    9a1e:	movw	r6, #4456	; 0x1168
    9a22:	str	r7, [r4, r6]
      _s = s;
    9a24:	movw	r6, #4460	; 0x116c
    9a28:	strb	r7, [r4, r6]
      _b = b;
    9a2a:	movw	r6, #4461	; 0x116d
    9a2e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a30:	movs	r7, #0
    9a32:	movw	r6, #4464	; 0x1170
    9a36:	str	r7, [r4, r6]
    9a38:	b.n	9a40 <_GLOBAL__sub_I_bri_level+0x4678>
    9a3a:	nop
    9a3c:	.word	0x200099b8
      _s = s;
    9a40:	movw	r6, #4468	; 0x1174
    9a44:	strb	r7, [r4, r6]
      _b = b;
    9a46:	movw	r6, #4469	; 0x1175
    9a4a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a4c:	movs	r7, #0
    9a4e:	movw	r6, #4472	; 0x1178
    9a52:	str	r7, [r4, r6]
      _s = s;
    9a54:	movw	r6, #4476	; 0x117c
    9a58:	strb	r7, [r4, r6]
      _b = b;
    9a5a:	movw	r6, #4477	; 0x117d
    9a5e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a60:	movw	r6, #4484	; 0x1184
    9a64:	strb	r7, [r4, r6]
      _b = b;
    9a66:	movw	r6, #4485	; 0x1185
    9a6a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a6c:	movs	r7, #0
    9a6e:	movw	r6, #4488	; 0x1188
    9a72:	str	r7, [r4, r6]
      _s = s;
    9a74:	movw	r6, #4492	; 0x118c
    9a78:	strb	r7, [r4, r6]
      _b = b;
    9a7a:	movw	r6, #4493	; 0x118d
    9a7e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a80:	movw	r6, #4496	; 0x1190
      _s = s;
      _b = b;
    9a84:	mvn.w	r7, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a88:	str.w	sl, [r4, r6]
      _s = s;
    9a8c:	movw	r6, #4500	; 0x1194
    9a90:	strb	r5, [r4, r6]
      _b = b;
    9a92:	movw	r6, #4501	; 0x1195
    9a96:	strb.w	fp, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a9a:	movw	r6, #4504	; 0x1198
    9a9e:	str.w	ip, [r4, r6]
      _s = s;
    9aa2:	movw	r6, #4508	; 0x119c
    9aa6:	strb	r5, [r4, r6]
      _b = b;
    9aa8:	movw	r6, #4509	; 0x119d
    9aac:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aae:	add.w	r6, r4, #4096	; 0x1000
    9ab2:	str.w	ip, [r6, #416]	; 0x1a0
      _s = s;
    9ab6:	movw	r6, #4516	; 0x11a4
    9aba:	strb	r5, [r4, r6]
      _b = b;
    9abc:	movw	r6, #4517	; 0x11a5
    9ac0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ac2:	movw	r6, #4520	; 0x11a8
    9ac6:	str.w	ip, [r4, r6]
      _s = s;
    9aca:	movw	r6, #4524	; 0x11ac
    9ace:	strb	r5, [r4, r6]
      _b = b;
    9ad0:	movw	r6, #4525	; 0x11ad
    9ad4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ad6:	movw	r6, #4528	; 0x11b0
    9ada:	str.w	ip, [r4, r6]
      _s = s;
    9ade:	movw	r6, #4532	; 0x11b4
    9ae2:	strb	r5, [r4, r6]
      _b = b;
    9ae4:	movw	r6, #4533	; 0x11b5
    9ae8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aea:	movw	r6, #4536	; 0x11b8
    9aee:	movs	r7, #0
    9af0:	str.w	ip, [r4, r6]
      _s = s;
    9af4:	movw	r6, #4540	; 0x11bc
    9af8:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9afa:	add.w	r6, r4, #4480	; 0x1180
    9afe:	str	r7, [r6, #0]
      _s = s;
      _b = b;
    9b00:	movw	r6, #4541	; 0x11bd
    9b04:	mvn.w	r7, #42	; 0x2a
    9b08:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b0a:	add.w	r6, r4, #4096	; 0x1000
    9b0e:	movw	r7, #261	; 0x105
    9b12:	str.w	ip, [r6, #448]	; 0x1c0
    9b16:	str.w	r7, [r6, #480]	; 0x1e0
    9b1a:	movw	r6, #4552	; 0x11c8
      _s = s;
    9b1e:	mvn.w	r7, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b22:	str.w	ip, [r4, r6]
    9b26:	movw	r6, #4560	; 0x11d0
    9b2a:	str.w	r9, [r4, r6]
      _s = s;
    9b2e:	movw	r6, #4564	; 0x11d4
    9b32:	strb.w	r8, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b36:	movw	r6, #4568	; 0x11d8
    9b3a:	str.w	r9, [r4, r6]
      _s = s;
    9b3e:	movw	r6, #4572	; 0x11dc
    9b42:	strb.w	r8, [r4, r6]
    9b46:	movw	r6, #4580	; 0x11e4
    9b4a:	strb	r7, [r4, r6]
      _b = b;
    9b4c:	movw	r6, #4581	; 0x11e5
    9b50:	mov.w	r7, #95	; 0x5f
    9b54:	strb	r7, [r4, r6]
    9b56:	mvn.w	r7, #42	; 0x2a
    9b5a:	movw	r6, #4549	; 0x11c5
    9b5e:	strb	r7, [r4, r6]
    9b60:	movw	r6, #4557	; 0x11cd
    9b64:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b66:	movs	r7, #0
    9b68:	movw	r6, #4584	; 0x11e8
    9b6c:	str	r7, [r4, r6]
      _s = s;
    9b6e:	movw	r6, #4588	; 0x11ec
    9b72:	strb	r7, [r4, r6]
      _b = b;
    9b74:	movw	r6, #4589	; 0x11ed
    9b78:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b7a:	movs	r7, #0
    9b7c:	movw	r6, #4592	; 0x11f0
    9b80:	str	r7, [r4, r6]
      _s = s;
    9b82:	movw	r6, #4596	; 0x11f4
    9b86:	strb	r7, [r4, r6]
      _b = b;
    9b88:	movw	r6, #4597	; 0x11f5
    9b8c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b8e:	movs	r7, #0
    9b90:	movw	r6, #4600	; 0x11f8
    9b94:	str	r7, [r4, r6]
      _s = s;
    9b96:	movw	r6, #4604	; 0x11fc
    9b9a:	strb	r7, [r4, r6]
      _b = b;
    9b9c:	movw	r6, #4605	; 0x11fd
    9ba0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ba2:	movw	r6, #4548	; 0x11c4
    9ba6:	strb	r5, [r4, r6]
    9ba8:	movw	r6, #4556	; 0x11cc
    9bac:	strb	r5, [r4, r6]
      _b = b;
    9bae:	movw	r6, #4565	; 0x11d5
    9bb2:	strb	r5, [r4, r6]
    9bb4:	movw	r6, #4573	; 0x11dd
    9bb8:	strb	r5, [r4, r6]
    9bba:	bl	aa68 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9bbe:	ldr	r2, [pc, #752]	; (9eb0 <_GLOBAL__sub_I_bri_level+0x4ae8>)
    9bc0:	ldr	r1, [pc, #752]	; (9eb4 <_GLOBAL__sub_I_bri_level+0x4aec>)
    9bc2:	ldr	r0, [pc, #756]	; (9eb8 <_GLOBAL__sub_I_bri_level+0x4af0>)
    9bc4:	bl	d508 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    9bc8:	movs	r3, #82	; 0x52
    9bca:	movs	r2, #7
    9bcc:	mov.w	r1, #576	; 0x240
    9bd0:	ldr	r0, [pc, #744]	; (9ebc <_GLOBAL__sub_I_bri_level+0x4af4>)
    9bd2:	bl	aa68 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9bd6:	ldr	r2, [pc, #728]	; (9eb0 <_GLOBAL__sub_I_bri_level+0x4ae8>)
    9bd8:	ldr	r1, [pc, #728]	; (9eb4 <_GLOBAL__sub_I_bri_level+0x4aec>)
    9bda:	ldr	r0, [pc, #736]	; (9ebc <_GLOBAL__sub_I_bri_level+0x4af4>)
    9bdc:	bl	d508 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#endif

//--------------------------------------------Screens

Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_A, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    9be0:	movs	r3, #82	; 0x52
    9be2:	movs	r2, #2
    9be4:	movs	r1, #112	; 0x70
    9be6:	ldr	r0, [pc, #728]	; (9ec0 <_GLOBAL__sub_I_bri_level+0x4af8>)
    9be8:	bl	aa68 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9bec:	ldr	r2, [pc, #704]	; (9eb0 <_GLOBAL__sub_I_bri_level+0x4ae8>)
    9bee:	ldr	r1, [pc, #708]	; (9eb4 <_GLOBAL__sub_I_bri_level+0x4aec>)
    9bf0:	ldr	r0, [pc, #716]	; (9ec0 <_GLOBAL__sub_I_bri_level+0x4af8>)
    9bf2:	bl	d508 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_B, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    9bf6:	movs	r3, #82	; 0x52
    9bf8:	movs	r2, #14
    9bfa:	movs	r1, #99	; 0x63
    9bfc:	ldr	r0, [pc, #708]	; (9ec4 <_GLOBAL__sub_I_bri_level+0x4afc>)
    9bfe:	bl	aa68 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9c02:	ldr	r2, [pc, #684]	; (9eb0 <_GLOBAL__sub_I_bri_level+0x4ae8>)
    9c04:	ldr	r1, [pc, #684]	; (9eb4 <_GLOBAL__sub_I_bri_level+0x4aec>)
    9c06:	ldr	r0, [pc, #700]	; (9ec4 <_GLOBAL__sub_I_bri_level+0x4afc>)
    9c08:	bl	d508 <__aeabi_atexit>
    9c0c:	ldr	r3, [pc, #696]	; (9ec8 <_GLOBAL__sub_I_bri_level+0x4b00>)

	public:
		

Color(){
	RGB_updated = false;
    9c0e:	movs	r2, #0
    9c10:	add.w	r1, r3, #440	; 0x1b8
    9c14:	strb.w	r2, [r3, #-20]
    9c18:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    9c1a:	strb.w	r2, [r3, #-63]
		unsigned long startTime;
		float position;


Beam() {
	active = false;
    9c1e:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    9c22:	cmp	r1, r3
    9c24:	bne.n	9c14 <_GLOBAL__sub_I_bri_level+0x484c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9c26:	ldr	r3, [pc, #676]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    9c28:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c2a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    9c2c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c2e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9c30:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    9c32:	cmp	r3, r1
    9c34:	it	eq
    9c36:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c38:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9c3a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9c3c:	ite	eq
    9c3e:	moveq	r5, #1
    9c40:	movne	r5, #0
    9c42:	cmp	r5, #0
    9c44:	beq.n	9c2e <_GLOBAL__sub_I_bri_level+0x4866>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    9c46:	lsrs	r1, r3, #5
    9c48:	ldr	r3, [pc, #644]	; (9ed0 <_GLOBAL__sub_I_bri_level+0x4b08>)
    9c4a:	ldr	r4, [pc, #648]	; (9ed4 <_GLOBAL__sub_I_bri_level+0x4b0c>)

	public:
		

Color(){
	RGB_updated = false;
    9c4c:	movs	r2, #0
    9c4e:	orr.w	r1, r1, r0, lsl #27
    9c52:	add.w	r0, r3, #600	; 0x258
    9c56:	vmov	s15, r1
    9c5a:	vldr	d5, [pc, #588]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9c5e:	vcvt.f64.u32	d7, s15
    9c62:	vdiv.f64	d6, d7, d5
    9c66:	vcvt.u32.f64	s12, d6
    9c6a:	vstr	s12, [r4]
    9c6e:	strb.w	r2, [r3, #-16]
    9c72:	adds	r3, #60	; 0x3c
	HSB_updated = false;
    9c74:	strb.w	r2, [r3, #-75]
	int duration;
	unsigned long startTime;
	float borderSize;

	
	Circle() { active = false; };
    9c78:	strb.w	r2, [r3, #-120]
#define CIRCLE_AM 10


Circle circles[CIRCLE_AM];
    9c7c:	cmp	r3, r0
    9c7e:	bne.n	9c6e <_GLOBAL__sub_I_bri_level+0x48a6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9c80:	ldr	r3, [pc, #584]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    9c82:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c84:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    9c86:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c88:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9c8a:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c8c:	ldr	r6, [pc, #572]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9c8e:	cmp	r3, r1
    9c90:	it	eq
    9c92:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9c94:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9c96:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9c98:	ite	eq
    9c9a:	moveq	r5, #1
    9c9c:	movne	r5, #0
    9c9e:	cmp	r5, #0
    9ca0:	beq.n	9c88 <_GLOBAL__sub_I_bri_level+0x48c0>
    9ca2:	lsrs	r1, r3, #5
    9ca4:	ldr	r3, [pc, #560]	; (9ed8 <_GLOBAL__sub_I_bri_level+0x4b10>)
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A; //= Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    9ca6:	ldr	r0, [pc, #564]	; (9edc <_GLOBAL__sub_I_bri_level+0x4b14>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9ca8:	mov	r4, r6
    9caa:	orr.w	r1, r1, r2, lsl #27
    9cae:	vmov	s15, r1
    9cb2:	vldr	d5, [pc, #500]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9cb6:	vcvt.f64.u32	d7, s15
    9cba:	vdiv.f64	d6, d7, d5
    9cbe:	vcvt.u32.f64	s12, d6
    9cc2:	vstr	s12, [r3]
    9cc6:	bl	80 <Screen::Screen()>
Screen screen_B; //= Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    9cca:	ldr	r0, [pc, #532]	; (9ee0 <_GLOBAL__sub_I_bri_level+0x4b18>)
    9ccc:	bl	80 <Screen::Screen()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9cd0:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9cd2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9cd4:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9cd6:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9cd8:	ldr	r6, [pc, #496]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9cda:	cmp	r3, r1
    9cdc:	it	eq
    9cde:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9ce0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9ce2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9ce4:	ite	eq
    9ce6:	moveq	r5, #1
    9ce8:	movne	r5, #0
    9cea:	cmp	r5, #0
    9cec:	beq.n	9cd4 <_GLOBAL__sub_I_bri_level+0x490c>
    9cee:	lsrs	r1, r3, #5
    9cf0:	ldr	r3, [pc, #496]	; (9ee4 <_GLOBAL__sub_I_bri_level+0x4b1c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9cf2:	mov	r4, r6
    9cf4:	orr.w	r1, r1, r2, lsl #27
    9cf8:	vmov	s15, r1
    9cfc:	vldr	d5, [pc, #424]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9d00:	vcvt.f64.u32	d7, s15
    9d04:	vdiv.f64	d6, d7, d5
    9d08:	vcvt.u32.f64	s12, d6
    9d0c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9d10:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9d12:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d14:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9d16:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d18:	ldr	r6, [pc, #432]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9d1a:	cmp	r3, r1
    9d1c:	it	eq
    9d1e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d20:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9d22:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9d24:	ite	eq
    9d26:	moveq	r5, #1
    9d28:	movne	r5, #0
    9d2a:	cmp	r5, #0
    9d2c:	beq.n	9d14 <_GLOBAL__sub_I_bri_level+0x494c>
    9d2e:	lsrs	r1, r3, #5
    9d30:	ldr	r3, [pc, #436]	; (9ee8 <_GLOBAL__sub_I_bri_level+0x4b20>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d32:	mov	r4, r6
    9d34:	orr.w	r1, r1, r2, lsl #27
    9d38:	vmov	s15, r1
    9d3c:	vldr	d5, [pc, #360]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9d40:	vcvt.f64.u32	d7, s15
    9d44:	vdiv.f64	d6, d7, d5
    9d48:	vcvt.u32.f64	s12, d6
    9d4c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9d50:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9d52:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d54:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9d56:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d58:	ldr	r7, [pc, #368]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9d5a:	cmp	r3, r1
    9d5c:	it	eq
    9d5e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d60:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9d62:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9d64:	ite	eq
    9d66:	moveq	r5, #1
    9d68:	movne	r5, #0
    9d6a:	cmp	r5, #0
    9d6c:	beq.n	9d54 <_GLOBAL__sub_I_bri_level+0x498c>
    9d6e:	lsrs	r1, r3, #5
    9d70:	ldr	r3, [pc, #376]	; (9eec <_GLOBAL__sub_I_bri_level+0x4b24>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d72:	mov	r6, r7
    9d74:	orr.w	r1, r1, r2, lsl #27
    9d78:	vmov	s15, r1
    9d7c:	vldr	d5, [pc, #296]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9d80:	vcvt.f64.u32	d7, s15
    9d84:	vdiv.f64	d6, d7, d5
    9d88:	vcvt.u32.f64	s12, d6
    9d8c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9d90:	ldr	r4, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9d92:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d94:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9d96:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9d98:	ldr	r5, [pc, #304]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9d9a:	cmp	r3, r1
    9d9c:	it	eq
    9d9e:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9da0:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9da2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9da4:	ite	eq
    9da6:	moveq	r0, #1
    9da8:	movne	r0, #0
    9daa:	cmp	r0, #0
    9dac:	beq.n	9d94 <_GLOBAL__sub_I_bri_level+0x49cc>
    9dae:	lsrs	r3, r3, #5
    9db0:	ldr	r2, [pc, #316]	; (9ef0 <_GLOBAL__sub_I_bri_level+0x4b28>)
elapsedMillis implosionTimer;



byte incomingByte;
String readBuffer;  
    9db2:	movs	r1, #0
    9db4:	ldr	r0, [pc, #316]	; (9ef4 <_GLOBAL__sub_I_bri_level+0x4b2c>)
    9db6:	orr.w	r3, r3, r4, lsl #27
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9dba:	mov	r4, r5
    9dbc:	vmov	s15, r3
    9dc0:	vldr	d5, [pc, #228]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9dc4:	vcvt.f64.u32	d7, s15
    9dc8:	vdiv.f64	d6, d7, d5
    9dcc:	vcvt.u32.f64	s12, d6
    9dd0:	vstr	s12, [r2]
    9dd4:	bl	c8d8 <String::String(char const*)>
    9dd8:	ldr	r1, [pc, #284]	; (9ef8 <_GLOBAL__sub_I_bri_level+0x4b30>)
    9dda:	ldr	r2, [pc, #212]	; (9eb0 <_GLOBAL__sub_I_bri_level+0x4ae8>)
    9ddc:	ldr	r0, [pc, #276]	; (9ef4 <_GLOBAL__sub_I_bri_level+0x4b2c>)
    9dde:	bl	d508 <__aeabi_atexit>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9de2:	ldr	r0, [r5, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9de4:	ldr	r1, [r5, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9de6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9de8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9dea:	ldr	r6, [pc, #224]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9dec:	cmp	r3, r1
    9dee:	it	eq
    9df0:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9df2:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9df4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9df6:	ite	eq
    9df8:	moveq	r5, #1
    9dfa:	movne	r5, #0
    9dfc:	cmp	r5, #0
    9dfe:	beq.n	9de6 <_GLOBAL__sub_I_bri_level+0x4a1e>
    9e00:	lsrs	r1, r3, #5
    9e02:	ldr	r3, [pc, #248]	; (9efc <_GLOBAL__sub_I_bri_level+0x4b34>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e04:	mov	r4, r6
    9e06:	orr.w	r1, r1, r2, lsl #27
    9e0a:	vmov	s15, r1
    9e0e:	vldr	d5, [pc, #152]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9e12:	vcvt.f64.u32	d7, s15
    9e16:	vdiv.f64	d6, d7, d5
    9e1a:	vcvt.u32.f64	s12, d6
    9e1e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9e22:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9e24:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e26:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9e28:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e2a:	ldr	r6, [pc, #160]	; (9ecc <_GLOBAL__sub_I_bri_level+0x4b04>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9e2c:	cmp	r3, r1
    9e2e:	it	eq
    9e30:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e32:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9e34:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9e36:	ite	eq
    9e38:	moveq	r5, #1
    9e3a:	movne	r5, #0
    9e3c:	cmp	r5, #0
    9e3e:	beq.n	9e26 <_GLOBAL__sub_I_bri_level+0x4a5e>
    9e40:	lsrs	r1, r3, #5
    9e42:	ldr	r3, [pc, #188]	; (9f00 <_GLOBAL__sub_I_bri_level+0x4b38>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e44:	mov	r4, r6
    9e46:	orr.w	r1, r1, r2, lsl #27
    9e4a:	vmov	s15, r1
    9e4e:	vldr	d5, [pc, #88]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9e52:	vcvt.f64.u32	d7, s15
    9e56:	vdiv.f64	d6, d7, d5
    9e5a:	vcvt.u32.f64	s12, d6
    9e5e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9e62:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    9e64:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e66:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    9e68:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    9e6a:	cmp	r3, r1
    9e6c:	it	eq
    9e6e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9e70:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9e72:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    9e74:	ite	eq
    9e76:	moveq	r5, #1
    9e78:	movne	r5, #0
    9e7a:	cmp	r5, #0
    9e7c:	beq.n	9e66 <_GLOBAL__sub_I_bri_level+0x4a9e>
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
    9e7e:	lsrs	r1, r3, #5
    9e80:	ldr	r3, [pc, #128]	; (9f04 <_GLOBAL__sub_I_bri_level+0x4b3c>)
    9e82:	orr.w	r1, r1, r2, lsl #27
    9e86:	vmov	s15, r1
    9e8a:	vldr	d5, [pc, #28]	; 9ea8 <_GLOBAL__sub_I_bri_level+0x4ae0>
    9e8e:	vcvt.f64.u32	d7, s15
    9e92:	vdiv.f64	d6, d7, d5
    9e96:	vcvt.u32.f64	s12, d6
    9e9a:	vstr	s12, [r3]
    9e9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ea2:	nop
    9ea4:	nop.w
    9ea8:	.word	0xd2f1a9fc
    9eac:	.word	0x3ff0624d
    9eb0:	.word	0x20000934
    9eb4:	.word	0x0000a781
    9eb8:	.word	0x200099b8
    9ebc:	.word	0x200099cc
    9ec0:	.word	0x2000c0ac
    9ec4:	.word	0x2000c098
    9ec8:	.word	0x2000c0fc
    9ecc:	.word	0x400d4000
    9ed0:	.word	0x2000be68
    9ed4:	.word	0x2000c088
    9ed8:	.word	0x2000c084
    9edc:	.word	0x20009630
    9ee0:	.word	0x200097f4
    9ee4:	.word	0x2000c08c
    9ee8:	.word	0x2000c090
    9eec:	.word	0x20004dd0
    9ef0:	.word	0x2000c0c8
    9ef4:	.word	0x20009620
    9ef8:	.word	0x0000c859
    9efc:	.word	0x2000c094
    9f00:	.word	0x2000c0c0
    9f04:	.word	0x2000d4b0

00009f08 <readMessages()>:

void readMessages(){
    9f08:	push	{r4, lr}
  if(Serial1.available()){
    9f0a:	ldr	r0, [pc, #196]	; (9fd0 <readMessages()+0xc8>)
    9f0c:	bl	c290 <HardwareSerial::available()>
    9f10:	cmp	r0, #0
    9f12:	beq.n	9f6e <readMessages()+0x66>
    while (Serial1.available()){
      incomingByte = Serial1.read();
    9f14:	ldr	r4, [pc, #188]	; (9fd4 <readMessages()+0xcc>)
    9f16:	b.n	9f2a <readMessages()+0x22>
    9f18:	ldr	r0, [pc, #180]	; (9fd0 <readMessages()+0xc8>)
    9f1a:	bl	c2e4 <HardwareSerial::read()>
    9f1e:	uxtb	r3, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    9f20:	ldr	r0, [pc, #180]	; (9fd8 <readMessages()+0xd0>)
    9f22:	mov	r1, r3
    9f24:	strb	r3, [r4, #0]
    9f26:	bl	c9a0 <String::append(char)>
byte incomingByte;
String readBuffer;  

void readMessages(){
  if(Serial1.available()){
    while (Serial1.available()){
    9f2a:	ldr	r0, [pc, #164]	; (9fd0 <readMessages()+0xc8>)
    9f2c:	bl	c290 <HardwareSerial::available()>
    9f30:	cmp	r0, #0
    9f32:	bne.n	9f18 <readMessages()+0x10>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    9f34:	ldr	r1, [pc, #160]	; (9fd8 <readMessages()+0xd0>)
    9f36:	ldr	r0, [pc, #164]	; (9fdc <readMessages()+0xd4>)
    9f38:	bl	cdf4 <Print::print(String const&)>
    9f3c:	ldr	r0, [pc, #156]	; (9fdc <readMessages()+0xd4>)
    9f3e:	bl	ce40 <Print::println()>
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
    9f42:	ldr	r1, [pc, #156]	; (9fe0 <readMessages()+0xd8>)
    9f44:	ldr	r0, [pc, #144]	; (9fd8 <readMessages()+0xd0>)
    9f46:	bl	c9c0 <String::equals(char const*) const>
    9f4a:	cbz	r0, 9f7a <readMessages()+0x72>
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    9f4c:	ldr	r4, [pc, #148]	; (9fe4 <readMessages()+0xdc>)
    9f4e:	ldr	r3, [r4, #0]
    9f50:	adds	r3, #50	; 0x32
    9f52:	cmp	r3, #119	; 0x77
    9f54:	ble.n	9fc2 <readMessages()+0xba>
    9f56:	cmp	r3, #255	; 0xff
    9f58:	it	ge
    9f5a:	movge	r3, #255	; 0xff
    9f5c:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    9f5e:	ldr	r0, [pc, #136]	; (9fe8 <readMessages()+0xe0>)
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    9f60:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    9f62:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    9f66:	ldrb	r1, [r4, #0]
    9f68:	ldr	r0, [pc, #128]	; (9fec <readMessages()+0xe4>)
    9f6a:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    9f6e:	ldr	r1, [pc, #128]	; (9ff0 <readMessages()+0xe8>)
    9f70:	ldr	r0, [pc, #100]	; (9fd8 <readMessages()+0xd0>)
}
    9f72:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    9f76:	b.w	c91c <String::operator=(char const*)>
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
    9f7a:	ldr	r1, [pc, #120]	; (9ff4 <readMessages()+0xec>)
    9f7c:	ldr	r0, [pc, #88]	; (9fd8 <readMessages()+0xd0>)
    9f7e:	bl	c9c0 <String::equals(char const*) const>
    9f82:	cmp	r0, #0
    9f84:	beq.n	9f6e <readMessages()+0x66>
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    9f86:	ldr	r4, [pc, #92]	; (9fe4 <readMessages()+0xdc>)
    9f88:	ldr	r3, [r4, #0]
    9f8a:	subs	r3, #50	; 0x32
    9f8c:	cmp	r3, #119	; 0x77
    9f8e:	ble.n	9fc8 <readMessages()+0xc0>
    9f90:	cmp	r3, #255	; 0xff
    9f92:	it	ge
    9f94:	movge	r3, #255	; 0xff
    9f96:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    9f98:	ldr	r0, [pc, #76]	; (9fe8 <readMessages()+0xe0>)
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    9f9a:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    9f9c:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    9fa0:	ldrb	r1, [r4, #0]
    9fa2:	ldr	r0, [pc, #72]	; (9fec <readMessages()+0xe4>)
    9fa4:	bl	aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>
    9fa8:	movs	r1, #4
    9faa:	ldr	r0, [pc, #76]	; (9ff8 <readMessages()+0xf0>)
    9fac:	bl	b134 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    9fb0:	ldr	r0, [pc, #40]	; (9fdc <readMessages()+0xd4>)
    9fb2:	bl	ce40 <Print::println()>
      Serial.println("down");
    }
  }
  readBuffer = "";
    9fb6:	ldr	r1, [pc, #56]	; (9ff0 <readMessages()+0xe8>)
    9fb8:	ldr	r0, [pc, #28]	; (9fd8 <readMessages()+0xd0>)
}
    9fba:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    9fbe:	b.w	c91c <String::operator=(char const*)>
    9fc2:	movs	r1, #120	; 0x78
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    9fc4:	mov	r3, r1
    9fc6:	b.n	9f5e <readMessages()+0x56>
    9fc8:	movs	r1, #120	; 0x78
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    9fca:	mov	r3, r1
    9fcc:	b.n	9f98 <readMessages()+0x90>
    9fce:	nop
    9fd0:	.word	0x20000e78
    9fd4:	.word	0x20002985
    9fd8:	.word	0x20009620
    9fdc:	.word	0x20000edc
    9fe0:	.word	0x2000056c
    9fe4:	.word	0x20000dbc
    9fe8:	.word	0x200099b8
    9fec:	.word	0x200099cc
    9ff0:	.word	0x20000578
    9ff4:	.word	0x20000574
    9ff8:	.word	0x2000057c

00009ffc <loop>:
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}


void loop() {
    9ffc:	push	{r3, lr}
  readMessages();
    9ffe:	bl	9f08 <readMessages()>

  if (isRegularAnimation) regular_animation();
    a002:	ldr	r3, [pc, #20]	; (a018 <loop+0x1c>)
    a004:	ldrb	r3, [r3, #0]
    a006:	cbnz	r3, a010 <loop+0x14>
  else ceremony_animation();
}
    a008:	ldmia.w	sp!, {r3, lr}

void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
    a00c:	b.w	4ef0 <ceremony_animation()>
}
    a010:	ldmia.w	sp!, {r3, lr}


void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
    a014:	b.w	3bd8 <regular_animation()>
    a018:	.word	0x20002984
    a01c:	.word	0x00000000

0000a020 <readAnimationType()>:
    }
  }
  readBuffer = "";
}

void readAnimationType(){
    a020:	push	{r4, r5, r6, r7, lr}
    a022:	vpush	{d8}
    a026:	sub	sp, #20
  String animReadBuffer = "";
    a028:	ldr	r1, [pc, #252]	; (a128 <readAnimationType()+0x108>)
    a02a:	mov	r0, sp
    a02c:	bl	c8d8 <String::String(char const*)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a030:	ldr	r3, [pc, #248]	; (a12c <readAnimationType()+0x10c>)
    a032:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a034:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    a036:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a038:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a03a:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    a03c:	cmp	r3, r1
    a03e:	it	eq
    a040:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a042:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a044:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a046:	ite	eq
    a048:	moveq	r5, #1
    a04a:	movne	r5, #0
    a04c:	cmp	r5, #0
    a04e:	beq.n	a038 <readAnimationType()+0x18>
    a050:	lsrs	r1, r3, #5
  unsigned int readStartTime = rtcMillis();
  isRegularAnimation = true;
    a052:	ldr	r6, [pc, #220]	; (a130 <readAnimationType()+0x110>)
    a054:	movs	r3, #1
    a056:	movw	r5, #5000	; 0x1388
    a05a:	orr.w	r1, r1, r2, lsl #27
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a05e:	ldr	r4, [pc, #204]	; (a12c <readAnimationType()+0x10c>)
    a060:	strb	r3, [r6, #0]
    a062:	vmov	s15, r1
    a066:	vldr	d8, [pc, #184]	; a120 <readAnimationType()+0x100>
    a06a:	vcvt.f64.u32	d7, s15
    a06e:	vdiv.f64	d6, d7, d8
    a072:	vcvt.u32.f64	s12, d6
    a076:	vmov	r3, s12
    a07a:	add	r3, r5
    a07c:	mov	r5, r3
    a07e:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    a080:	ldr	r1, [r4, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a082:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a084:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    a086:	cmp	r3, r1
    a088:	it	eq
    a08a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a08c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a08e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a090:	ite	eq
    a092:	moveq	r7, #1
    a094:	movne	r7, #0
    a096:	cmp	r7, #0
    a098:	beq.n	a082 <readAnimationType()+0x62>
  while(rtcMillis()<readStartTime+5000){
    a09a:	lsrs	r1, r3, #5
    a09c:	orr.w	r1, r1, r2, lsl #27
    a0a0:	vmov	s15, r1
    a0a4:	vcvt.f64.u32	d7, s15
    a0a8:	vdiv.f64	d6, d7, d8
    a0ac:	vcvt.u32.f64	s12, d6
    a0b0:	vmov	r3, s12
    a0b4:	cmp	r5, r3
    a0b6:	bhi.n	a0c2 <readAnimationType()+0xa2>
    a0b8:	b.n	a10c <readAnimationType()+0xec>
    a0ba:	mov	r1, r7
    a0bc:	mov	r0, sp
    a0be:	bl	c9a0 <String::append(char)>
      while (Serial1.available()){
    a0c2:	ldr	r0, [pc, #112]	; (a134 <readAnimationType()+0x114>)
    a0c4:	bl	c290 <HardwareSerial::available()>
    a0c8:	cbz	r0, a0e4 <readAnimationType()+0xc4>
        char inChar = Serial1.read();
    a0ca:	ldr	r0, [pc, #104]	; (a134 <readAnimationType()+0x114>)
    a0cc:	bl	c2e4 <HardwareSerial::read()>
    a0d0:	uxtb	r7, r0
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
    a0d2:	sub.w	r3, r7, #114	; 0x72
    a0d6:	cmp	r3, #1
    a0d8:	bhi.n	a0ba <readAnimationType()+0x9a>
    a0da:	ldr	r1, [pc, #76]	; (a128 <readAnimationType()+0x108>)
    a0dc:	mov	r0, sp
    a0de:	bl	c91c <String::operator=(char const*)>
    a0e2:	b.n	a0ba <readAnimationType()+0x9a>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    a0e4:	mov	r1, sp
    a0e6:	ldr	r0, [pc, #80]	; (a138 <readAnimationType()+0x118>)
    a0e8:	bl	cdf4 <Print::print(String const&)>
    a0ec:	ldr	r0, [pc, #72]	; (a138 <readAnimationType()+0x118>)
    a0ee:	bl	ce40 <Print::println()>
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
    a0f2:	ldr	r1, [pc, #72]	; (a13c <readAnimationType()+0x11c>)
    a0f4:	mov	r0, sp
    a0f6:	bl	c9c0 <String::equals(char const*) const>
    a0fa:	mov	r7, r0
    a0fc:	cbnz	r0, a11a <readAnimationType()+0xfa>
        isRegularAnimation = true;
        break;
      } else if (animReadBuffer.equals("spec")){
    a0fe:	ldr	r1, [pc, #64]	; (a140 <readAnimationType()+0x120>)
    a100:	mov	r0, sp
    a102:	bl	c9c0 <String::equals(char const*) const>
    a106:	cmp	r0, #0
    a108:	beq.n	a07e <readAnimationType()+0x5e>
        isRegularAnimation = false;
    a10a:	strb	r7, [r6, #0]
  }
  readBuffer = "";
}

void readAnimationType(){
  String animReadBuffer = "";
    a10c:	mov	r0, sp
    a10e:	bl	c858 <String::~String()>
      } else if (animReadBuffer.equals("spec")){
        isRegularAnimation = false;
        break;
      }
  }
}
    a112:	add	sp, #20
    a114:	vpop	{d8}
    a118:	pop	{r4, r5, r6, r7, pc}
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
        isRegularAnimation = true;
    a11a:	movs	r3, #1
    a11c:	strb	r3, [r6, #0]
        break;
    a11e:	b.n	a10c <readAnimationType()+0xec>
    a120:	.word	0xd2f1a9fc
    a124:	.word	0x3ff0624d
    a128:	.word	0x20000578
    a12c:	.word	0x400d4000
    a130:	.word	0x20002984
    a134:	.word	0x20000e78
    a138:	.word	0x20000edc
    a13c:	.word	0x20000584
    a140:	.word	0x20000588
    a144:	.word	0x00000000

0000a148 <setup>:
}




void setup() {
    a148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.begin(9600);
  Serial1.begin(9600);
    a14c:	movs	r2, #0
}




void setup() {
    a14e:	sub	sp, #484	; 0x1e4
  Serial.begin(9600);
  Serial1.begin(9600);
    a150:	mov.w	r1, #9600	; 0x2580
    a154:	ldr	r0, [pc, #824]	; (a490 <setup+0x348>)
    a156:	bl	c3ac <HardwareSerial::begin(unsigned long, unsigned short)>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a15a:	ldr	r4, [pc, #824]	; (a494 <setup+0x34c>)
  delay(SETUP_DELAY);
    a15c:	movw	r0, #4500	; 0x1194
    a160:	add	r5, sp, #28
    a162:	bl	c054 <delay>

  updateRandomSeed();
    a166:	bl	10bc <updateRandomSeed()>

  rtc_set(0);
    a16a:	movs	r0, #0
    a16c:	bl	bc68 <rtc_set>
  
  readAnimationType();
    a170:	bl	a020 <readAnimationType()>
    a174:	ldmia	r4!, {r0, r1, r2, r3}
    a176:	stmia	r5!, {r0, r1, r2, r3}
    a178:	ldmia.w	r4, {r0, r1}
    a17c:	movs	r2, #168	; 0xa8
    a17e:	stmia.w	r5, {r0, r1}
    a182:	add.w	r1, r4, #8
    a186:	add	r0, sp, #52	; 0x34
    a188:	bl	ac68 <memcpy>
    a18c:	add.w	r1, r4, #176	; 0xb0
    a190:	movs	r2, #120	; 0x78
    a192:	add	r0, sp, #220	; 0xdc
    a194:	bl	ac68 <memcpy>
    a198:	add.w	r3, r4, #296	; 0x128
    a19c:	ldmia.w	r3, {r0, r1, r2}
    a1a0:	add	r3, sp, #340	; 0x154
    a1a2:	stmia.w	r3, {r0, r1, r2}
    a1a6:	movs	r2, #60	; 0x3c
    a1a8:	movs	r1, #0
    a1aa:	add	r0, sp, #352	; 0x160
    a1ac:	bl	dc44 <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
    a1b0:	movs	r1, #5
    a1b2:	movs	r0, #3
    a1b4:	bl	cb50 <random(long, long)>
		{CIRCLE, random(3, 5), false},
    a1b8:	movs	r1, #5
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
    a1ba:	str	r0, [sp, #0]
		{CIRCLE, random(3, 5), false},
    a1bc:	movs	r0, #3
    a1be:	bl	cb50 <random(long, long)>
		{LINE, random(6, 10), false}
    a1c2:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
    a1c4:	mov	r9, r0
		{LINE, random(6, 10), false}
    a1c6:	movs	r0, #6
    a1c8:	bl	cb50 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a1cc:	ldr	r3, [pc, #712]	; (a498 <setup+0x350>)
    a1ce:	mov	r8, r0
    a1d0:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a1d2:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    a1d4:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a1d6:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a1d8:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a1da:	ldr	r4, [pc, #700]	; (a498 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a1dc:	cmp	r3, r1
    a1de:	it	eq
    a1e0:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a1e2:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a1e4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a1e6:	ite	eq
    a1e8:	moveq	r6, #1
    a1ea:	movne	r6, #0
    a1ec:	cmp	r6, #0
    a1ee:	beq.n	a1d6 <setup+0x8e>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a1f0:	mov.w	r0, #1728	; 0x6c0
    a1f4:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a1f8:	mov.w	r2, #1728	; 0x6c0
    a1fc:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a1fe:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a200:	bl	dc44 <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a204:	mov.w	r0, #1728	; 0x6c0
    a208:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a20c:	mov.w	r2, #1728	; 0x6c0
    a210:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a212:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a214:	bl	dc44 <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a218:	mov.w	r0, #1728	; 0x6c0
    a21c:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a220:	mov.w	r2, #1728	; 0x6c0
    a224:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a226:	str	r0, [sp, #12]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a228:	bl	dc44 <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    a22c:	mov.w	r1, #360	; 0x168
    a230:	movs	r0, #0
    a232:	bl	cb50 <random(long, long)>
		hue_difference = random(80, 300);
    a236:	mov.w	r1, #300	; 0x12c
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    a23a:	str	r0, [sp, #16]
		hue_difference = random(80, 300);
    a23c:	movs	r0, #80	; 0x50
    a23e:	bl	cb50 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a242:	ldr	r6, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a244:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    a246:	ldr	r5, [r4, #40]	; 0x28
    a248:	str	r0, [sp, #20]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a24a:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a24c:	ldr	r3, [r1, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a24e:	ldr	r7, [pc, #584]	; (a498 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a250:	cmp	r3, r5
    a252:	it	eq
    a254:	cmpeq	r2, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a256:	mov	r6, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a258:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a25a:	ite	eq
    a25c:	moveq	r0, #1
    a25e:	movne	r0, #0
    a260:	cmp	r0, #0
    a262:	beq.n	a24a <setup+0x102>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    a264:	ldr	r4, [pc, #564]	; (a49c <setup+0x354>)
    a266:	add.w	sl, sp, #28
    a26a:	mov.w	fp, #5
    a26e:	mov	lr, r4
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
    a270:	lsr.w	r5, r5, fp
    a274:	ldmia.w	sl!, {r0, r1, r2, r3}
    a278:	stmia.w	lr!, {r0, r1, r2, r3}
    a27c:	ldmia.w	sl, {r0, r1}
    a280:	movs	r2, #168	; 0xa8
    a282:	stmia.w	lr, {r0, r1}
    a286:	add	r1, sp, #52	; 0x34
    a288:	add.w	r0, r4, #24
    a28c:	bl	ac68 <memcpy>
    a290:	movs	r2, #120	; 0x78
    a292:	add	r1, sp, #220	; 0xdc
    a294:	add.w	r0, r4, #192	; 0xc0
    a298:	bl	ac68 <memcpy>
    a29c:	ldr	r0, [sp, #0]
    a29e:	movs	r2, #1
    a2a0:	movs	r1, #2
    a2a2:	str	r0, [sp, #368]	; 0x170
    a2a4:	orr.w	r0, r5, r6, lsl #27
    a2a8:	str	r2, [sp, #356]	; 0x164
    a2aa:	add.w	r3, r4, #312	; 0x138
    a2ae:	vmov	s14, r0
    a2b2:	str	r2, [sp, #388]	; 0x184
    a2b4:	movs	r2, #3
    a2b6:	str.w	fp, [sp, #352]	; 0x160
    a2ba:	vcvt.f64.u32	d7, s14
    a2be:	str	r1, [sp, #364]	; 0x16c
    a2c0:	str	r2, [sp, #376]	; 0x178
    a2c2:	add	r2, sp, #340	; 0x154
    a2c4:	add	r6, sp, #352	; 0x160
    a2c6:	str.w	r9, [sp, #380]	; 0x17c
    a2ca:	str.w	r8, [sp, #392]	; 0x188
    a2ce:	add.w	r5, r4, #324	; 0x144
    a2d2:	ldr.w	ip, [pc, #492]	; a4c0 <setup+0x378>
    a2d6:	mov.w	r9, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a2da:	ldr.w	r8, [pc, #440]	; a494 <setup+0x34c>
    a2de:	add.w	lr, sp, #28
    a2e2:	vldr	d5, [pc, #420]	; a488 <setup+0x340>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    a2e6:	ldmia	r2, {r0, r1, r2}
    a2e8:	vdiv.f64	d6, d7, d5
    a2ec:	vldr	s15, [pc, #432]	; a4a0 <setup+0x358>
    a2f0:	stmia.w	r3, {r0, r1, r2}
    a2f4:	ldmia	r6!, {r0, r1, r2, r3}
    a2f6:	stmia	r5!, {r0, r1, r2, r3}
    a2f8:	ldmia	r6!, {r0, r1, r2, r3}
    a2fa:	stmia	r5!, {r0, r1, r2, r3}
    a2fc:	ldmia	r6!, {r0, r1, r2, r3}
    a2fe:	stmia	r5!, {r0, r1, r2, r3}
    a300:	ldr	r3, [sp, #16]
    a302:	ldr	r0, [pc, #416]	; (a4a4 <setup+0x35c>)
    a304:	str.w	r3, [r4, #432]	; 0x1b0
    a308:	ldr	r3, [sp, #20]
    a30a:	ldr	r1, [pc, #412]	; (a4a8 <setup+0x360>)
    a30c:	str.w	r3, [r4, #436]	; 0x1b4
    a310:	ldr	r3, [sp, #4]
    a312:	ldr	r2, [pc, #408]	; (a4ac <setup+0x364>)
    a314:	str.w	r3, [r4, #440]	; 0x1b8
    a318:	ldr	r3, [sp, #8]
    a31a:	str.w	r0, [r4, #396]	; 0x18c
    a31e:	str.w	r3, [r4, #444]	; 0x1bc
    a322:	ldr	r3, [sp, #12]
    a324:	vcvt.u32.f64	s12, d6
    a328:	str.w	r1, [r4, #400]	; 0x190
    a32c:	str.w	r3, [r4, #448]	; 0x1c0
    a330:	ldr	r3, [pc, #380]	; (a4b0 <setup+0x368>)
    a332:	str.w	r2, [r4, #404]	; 0x194
    a336:	str.w	r3, [r4, #384]	; 0x180
    a33a:	ldr	r3, [pc, #376]	; (a4b4 <setup+0x36c>)
    a33c:	str.w	ip, [r4, #392]	; 0x188
    a340:	str.w	r3, [r4, #388]	; 0x184
    a344:	ldr	r3, [pc, #368]	; (a4b8 <setup+0x370>)
    a346:	vstr	s15, [r4, #420]	; 0x1a4
    a34a:	str.w	r3, [r4, #408]	; 0x198
    a34e:	strb.w	r9, [r4, #412]	; 0x19c
    a352:	str.w	r9, [r4, #416]	; 0x1a0
    a356:	str.w	r9, [r4, #424]	; 0x1a8
    a35a:	ldmia.w	r6, {r0, r1, r2}
    a35e:	stmia.w	r5, {r0, r1, r2}


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a362:	ldmia.w	r8!, {r0, r1, r2, r3}
    a366:	stmia.w	lr!, {r0, r1, r2, r3}
    a36a:	ldmia.w	r8, {r0, r1}
    a36e:	vstr	s12, [r4, #428]	; 0x1ac
    a372:	movs	r2, #168	; 0xa8
    a374:	stmia.w	sl, {r0, r1}
    a378:	add.w	r1, r8, #8
    a37c:	add	r0, sp, #52	; 0x34
    a37e:	bl	ac68 <memcpy>
    a382:	add.w	r1, r8, #176	; 0xb0
    a386:	movs	r2, #120	; 0x78
    a388:	add	r0, sp, #220	; 0xdc
    a38a:	bl	ac68 <memcpy>
    a38e:	add.w	r3, r8, #296	; 0x128
    a392:	ldmia.w	r3, {r0, r1, r2}
    a396:	add	r3, sp, #340	; 0x154
    a398:	stmia.w	r3, {r0, r1, r2}
    a39c:	movs	r2, #60	; 0x3c
    a39e:	mov	r1, r9
    a3a0:	add	r0, sp, #352	; 0x160
    a3a2:	bl	dc44 <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
    a3a6:	mov	r1, fp
    a3a8:	movs	r0, #3
    a3aa:	bl	cb50 <random(long, long)>
		{CIRCLE, random(3, 5), false},
    a3ae:	mov	r1, fp
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
    a3b0:	mov	r8, r0
		{CIRCLE, random(3, 5), false},
    a3b2:	movs	r0, #3
    a3b4:	bl	cb50 <random(long, long)>
		{LINE, random(6, 10), false}
    a3b8:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(3, 5), false},
		{CIRCLE, random(3, 5), false},
    a3ba:	mov	sl, r0
		{LINE, random(6, 10), false}
    a3bc:	movs	r0, #6
    a3be:	bl	cb50 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a3c2:	ldr	r5, [r7, #36]	; 0x24
    a3c4:	mov	r9, r0
  uint32_t lo1 = SNVS_HPRTCLR;
    a3c6:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a3c8:	mov	r0, r7
    a3ca:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a3cc:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a3ce:	ldr	r4, [pc, #200]	; (a498 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a3d0:	cmp	r3, r1
    a3d2:	it	eq
    a3d4:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a3d6:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a3d8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a3da:	ite	eq
    a3dc:	moveq	r6, #1
    a3de:	movne	r6, #0
    a3e0:	cmp	r6, #0
    a3e2:	beq.n	a3ca <setup+0x282>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a3e4:	mov.w	r0, #1728	; 0x6c0
    a3e8:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a3ec:	mov.w	r2, #1728	; 0x6c0
    a3f0:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a3f2:	str	r0, [sp, #0]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a3f4:	bl	dc44 <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a3f8:	mov.w	r0, #1728	; 0x6c0
    a3fc:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a400:	mov.w	r2, #1728	; 0x6c0
    a404:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a406:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a408:	bl	dc44 <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a40c:	mov.w	r0, #1728	; 0x6c0
    a410:	bl	cef8 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a414:	mov.w	r2, #1728	; 0x6c0
    a418:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    a41a:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    a41c:	bl	dc44 <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    a420:	mov.w	r1, #360	; 0x168
    a424:	movs	r0, #0
    a426:	bl	cb50 <random(long, long)>
		hue_difference = random(80, 300);
    a42a:	mov.w	r1, #300	; 0x12c
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    a42e:	str	r0, [sp, #12]
		hue_difference = random(80, 300);
    a430:	movs	r0, #80	; 0x50
    a432:	bl	cb50 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a436:	ldr	r7, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a438:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    a43a:	ldr	r6, [r4, #40]	; 0x28
    a43c:	str	r0, [sp, #16]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a43e:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a440:	ldr	r3, [r1, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    a442:	cmp	r3, r6
    a444:	it	eq
    a446:	cmpeq	r2, r7
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a448:	mov	r7, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a44a:	mov	r6, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a44c:	ite	eq
    a44e:	moveq	r0, #1
    a450:	movne	r0, #0
    a452:	cmp	r0, #0
    a454:	beq.n	a43e <setup+0x2f6>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    a456:	ldr	r5, [pc, #100]	; (a4bc <setup+0x374>)
    a458:	add.w	lr, sp, #28
    a45c:	lsrs	r6, r6, #5
    a45e:	ldr.w	fp, [pc, #100]	; a4c4 <setup+0x37c>
    a462:	mov	r4, r5
    a464:	orr.w	r6, r6, r7, lsl #27
    a468:	movs	r7, #0
    a46a:	ldmia.w	lr!, {r0, r1, r2, r3}
    a46e:	stmia	r4!, {r0, r1, r2, r3}
    a470:	ldmia.w	lr, {r0, r1}
    a474:	movs	r2, #168	; 0xa8
    a476:	stmia.w	r4, {r0, r1}
    a47a:	add	r1, sp, #52	; 0x34
    a47c:	add.w	r0, r5, #24
    a480:	b.n	a4c8 <setup+0x380>
    a482:	nop
    a484:	nop.w
    a488:	.word	0xd2f1a9fc
    a48c:	.word	0x3ff0624d
    a490:	.word	0x20000e78
    a494:	.word	0x20000000
    a498:	.word	0x400d4000
    a49c:	.word	0x20009630
    a4a0:	.word	0x00000000
    a4a4:	.word	0x20002988
    a4a8:	.word	0x200099b8
    a4ac:	.word	0x20004dd4
    a4b0:	.word	0x200071d4
    a4b4:	.word	0x200099e0
    a4b8:	.word	0x20000b7c
    a4bc:	.word	0x200097f4
    a4c0:	.word	0x2000175c
    a4c4:	.word	0x200099cc
    a4c8:	bl	ac68 <memcpy>
    a4cc:	add	r1, sp, #220	; 0xdc
    a4ce:	movs	r2, #120	; 0x78
    a4d0:	add.w	r0, r5, #192	; 0xc0
    a4d4:	bl	ac68 <memcpy>
    a4d8:	vmov	s15, r6
    a4dc:	movs	r2, #1
    a4de:	mov.w	lr, #5
    a4e2:	vcvt.f64.u32	d7, s15
    a4e6:	movs	r0, #2
    a4e8:	str	r2, [sp, #356]	; 0x164
    a4ea:	movs	r1, #3
    a4ec:	str	r2, [sp, #388]	; 0x184
    a4ee:	add	r2, sp, #340	; 0x154
    a4f0:	str.w	lr, [sp, #352]	; 0x160
    a4f4:	add.w	r3, r5, #312	; 0x138
    a4f8:	str	r1, [sp, #376]	; 0x178
    a4fa:	add	r4, sp, #352	; 0x160
    a4fc:	str	r0, [sp, #364]	; 0x16c
    a4fe:	add.w	r6, r5, #324	; 0x144
    a502:	str.w	r8, [sp, #368]	; 0x170
    a506:	str.w	sl, [sp, #380]	; 0x17c
    a50a:	str.w	r9, [sp, #392]	; 0x188
    a50e:	ldr.w	ip, [pc, #500]	; a704 <setup+0x5bc>
    a512:	ldr.w	lr, [pc, #500]	; a708 <setup+0x5c0>
    a516:	vldr	s11, [pc, #448]	; a6d8 <setup+0x590>
    a51a:	ldr.w	sl, [pc, #496]	; a70c <setup+0x5c4>
    a51e:	ldr.w	r9, [pc, #496]	; a710 <setup+0x5c8>
    a522:	ldr.w	r8, [pc, #496]	; a714 <setup+0x5cc>
    a526:	vldr	d4, [pc, #424]	; a6d0 <setup+0x588>
    a52a:	ldmia	r2, {r0, r1, r2}
    a52c:	vdiv.f64	d6, d7, d4
    a530:	stmia.w	r3, {r0, r1, r2}
    a534:	ldmia	r4!, {r0, r1, r2, r3}
    a536:	stmia	r6!, {r0, r1, r2, r3}
    a538:	ldmia	r4!, {r0, r1, r2, r3}
    a53a:	stmia	r6!, {r0, r1, r2, r3}
    a53c:	ldmia	r4!, {r0, r1, r2, r3}
    a53e:	stmia	r6!, {r0, r1, r2, r3}
    a540:	ldr	r3, [sp, #12]
    a542:	str.w	ip, [r5, #404]	; 0x194
    a546:	str.w	r3, [r5, #432]	; 0x1b0
    a54a:	ldr	r3, [sp, #16]
    a54c:	str.w	lr, [r5, #408]	; 0x198
    a550:	str.w	r3, [r5, #436]	; 0x1b4
    a554:	ldr	r3, [sp, #0]
    a556:	vstr	s11, [r5, #420]	; 0x1a4
    a55a:	str.w	r3, [r5, #440]	; 0x1b8
    a55e:	ldr	r3, [sp, #4]
    a560:	str.w	sl, [r5, #388]	; 0x184
    a564:	str.w	r3, [r5, #444]	; 0x1bc
    a568:	ldr	r3, [sp, #8]
    a56a:	vcvt.u32.f64	s12, d6
    a56e:	str.w	r9, [r5, #392]	; 0x188
    a572:	str.w	r3, [r5, #448]	; 0x1c0
    a576:	ldr	r3, [pc, #356]	; (a6dc <setup+0x594>)
    a578:	str.w	r8, [r5, #396]	; 0x18c
    a57c:	str.w	r3, [r5, #384]	; 0x180
    a580:	str.w	fp, [r5, #400]	; 0x190
    a584:	strb.w	r7, [r5, #412]	; 0x19c
    a588:	ldmia.w	r4, {r0, r1, r2}
    a58c:	stmia.w	r6, {r0, r1, r2}
  screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
  screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);

  

  synapse_A.begin();
    a590:	ldr	r0, [pc, #332]	; (a6e0 <setup+0x598>)
    a592:	vstr	s12, [r5, #428]	; 0x1ac
    a596:	str.w	r7, [r5, #416]	; 0x1a0
    a59a:	str.w	r7, [r5, #424]	; 0x1a8
    a59e:	bl	a7a0 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    a5a2:	ldr	r0, [pc, #320]	; (a6e4 <setup+0x59c>)
    a5a4:	bl	a7a0 <Adafruit_NeoPixel::begin()>

  matrix_A.begin();
    a5a8:	ldr	r0, [pc, #316]	; (a6e8 <setup+0x5a0>)
    a5aa:	bl	a7a0 <Adafruit_NeoPixel::begin()>
  matrix_B.begin();
    a5ae:	mov	r0, fp
    a5b0:	bl	a7a0 <Adafruit_NeoPixel::begin()>
  
 
  if(isRegularAnimation){
    a5b4:	ldr	r3, [pc, #308]	; (a6ec <setup+0x5a4>)
    a5b6:	ldrb	r3, [r3, #0]
    a5b8:	cmp	r3, #0
    a5ba:	bne.w	a6c4 <setup+0x57c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a5be:	ldr	r3, [pc, #304]	; (a6f0 <setup+0x5a8>)
    a5c0:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a5c2:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    a5c4:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a5c6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a5c8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a5ca:	ldr	r6, [pc, #292]	; (a6f0 <setup+0x5a8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a5cc:	cmp	r3, r1
    a5ce:	it	eq
    a5d0:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a5d2:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a5d4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a5d6:	ite	eq
    a5d8:	moveq	r5, #1
    a5da:	movne	r5, #0
    a5dc:	cmp	r5, #0
    a5de:	beq.n	a5c6 <setup+0x47e>
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    a5e0:	lsrs	r1, r3, #5
    a5e2:	ldr	r3, [pc, #272]	; (a6f4 <setup+0x5ac>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a5e4:	mov	r4, r6
    a5e6:	orr.w	r1, r1, r2, lsl #27
    a5ea:	vmov	s15, r1
    a5ee:	vldr	d5, [pc, #224]	; a6d0 <setup+0x588>
    a5f2:	vcvt.f64.u32	d7, s15
    a5f6:	vdiv.f64	d6, d7, d5
    a5fa:	vcvt.u32.f64	s12, d6
    a5fe:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a602:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    a604:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a606:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a608:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a60a:	ldr	r6, [pc, #228]	; (a6f0 <setup+0x5a8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a60c:	cmp	r3, r1
    a60e:	it	eq
    a610:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a612:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a614:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a616:	ite	eq
    a618:	moveq	r5, #1
    a61a:	movne	r5, #0
    a61c:	cmp	r5, #0
    a61e:	beq.n	a606 <setup+0x4be>
    a620:	lsrs	r1, r3, #5
    a622:	ldr	r3, [pc, #212]	; (a6f8 <setup+0x5b0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a624:	mov	r4, r6
    a626:	orr.w	r1, r1, r2, lsl #27
    a62a:	vmov	s15, r1
    a62e:	vldr	d5, [pc, #160]	; a6d0 <setup+0x588>
    a632:	vcvt.f64.u32	d7, s15
    a636:	vdiv.f64	d6, d7, d5
    a63a:	vcvt.u32.f64	s12, d6
    a63e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a642:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    a644:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a646:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a648:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a64a:	ldr	r6, [pc, #164]	; (a6f0 <setup+0x5a8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    a64c:	cmp	r3, r1
    a64e:	it	eq
    a650:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a652:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a654:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a656:	ite	eq
    a658:	moveq	r5, #1
    a65a:	movne	r5, #0
    a65c:	cmp	r5, #0
    a65e:	beq.n	a646 <setup+0x4fe>
    a660:	lsrs	r1, r3, #5
    a662:	ldr	r3, [pc, #152]	; (a6fc <setup+0x5b4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a664:	mov	r4, r6
    a666:	orr.w	r1, r1, r2, lsl #27
    a66a:	vmov	s15, r1
    a66e:	vldr	d5, [pc, #96]	; a6d0 <setup+0x588>
    a672:	vcvt.f64.u32	d7, s15
    a676:	vdiv.f64	d6, d7, d5
    a67a:	vcvt.u32.f64	s12, d6
    a67e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    a682:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    a684:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a686:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    a688:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    a68a:	cmp	r3, r1
    a68c:	it	eq
    a68e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    a690:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    a692:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    a694:	ite	eq
    a696:	moveq	r5, #1
    a698:	movne	r5, #0
    a69a:	cmp	r5, #0
    a69c:	beq.n	a686 <setup+0x53e>
    a69e:	lsrs	r1, r3, #5
    a6a0:	ldr	r3, [pc, #92]	; (a700 <setup+0x5b8>)
    a6a2:	orr.w	r1, r1, r2, lsl #27
    a6a6:	vmov	s15, r1
    a6aa:	vldr	d5, [pc, #36]	; a6d0 <setup+0x588>
    a6ae:	vcvt.f64.u32	d7, s15
    a6b2:	vdiv.f64	d6, d7, d5
    a6b6:	vcvt.u32.f64	s12, d6
    a6ba:	vstr	s12, [r3]

  sinceBeam1 = 0;
  sinceBeam2 = 0;
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}
    a6be:	add	sp, #484	; 0x1e4
    a6c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  matrix_A.begin();
  matrix_B.begin();
  
 
  if(isRegularAnimation){
    regular_setup();
    a6c4:	bl	10f8 <regular_setup()>
    a6c8:	b.n	a5be <setup+0x476>
    a6ca:	nop
    a6cc:	nop.w
    a6d0:	.word	0xd2f1a9fc
    a6d4:	.word	0x3ff0624d
    a6d8:	.word	0x00000000
    a6dc:	.word	0x200083f8
    a6e0:	.word	0x2000c0ac
    a6e4:	.word	0x2000c098
    a6e8:	.word	0x200099b8
    a6ec:	.word	0x20002984
    a6f0:	.word	0x400d4000
    a6f4:	.word	0x2000c08c
    a6f8:	.word	0x2000c090
    a6fc:	.word	0x2000c088
    a700:	.word	0x2000c084
    a704:	.word	0x20005fd4
    a708:	.word	0x20000938
    a70c:	.word	0x2000ac04
    a710:	.word	0x2000c28c
    a714:	.word	0x20003bac

0000a718 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    a718:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    a71a:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    a71c:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    a71e:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    a720:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    a722:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    a724:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    a728:	cbz	r3, a742 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    a72a:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    a72e:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    a732:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    a736:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    a73a:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    a73e:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    a742:	ldrb	r7, [r0, #15]
    a744:	ldrb	r4, [r0, #12]
    a746:	cmp	r4, r7
    a748:	beq.n	a774 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    a74a:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    a74c:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    a74e:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    a752:	add	r7, r1
    a754:	cbnz	r3, a76a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    a756:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    a758:	strb	r3, [r7, #0]
    a75a:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    a75c:	strb	r6, [r1, r7]
    p[gOffset] = g;
    a75e:	ldrb	r3, [r0, #13]
    a760:	strb	r5, [r1, r3]
    p[bOffset] = b;
    a762:	ldrb	r3, [r0, #14]
    a764:	strb.w	lr, [r1, r3]
    a768:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    a76a:	mul.w	r3, r3, r2
    a76e:	ubfx	r3, r3, #8, #8
    a772:	b.n	a758 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    a774:	add.w	r1, r1, r1, lsl #1
    a778:	ldr	r3, [r0, #8]
    a77a:	add	r1, r3
    a77c:	b.n	a75c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    a77e:	nop

0000a780 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    a780:	push	{r4, lr}
    a782:	mov	r4, r0
  if(pixels)   free(pixels);
    a784:	ldr	r0, [r0, #8]
    a786:	cbz	r0, a78c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    a788:	bl	d5fc <free>
  if(pin >= 0) pinMode(pin, INPUT);
    a78c:	ldrsb.w	r0, [r4, #6]
    a790:	cmp	r0, #0
    a792:	blt.n	a79c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    a794:	uxtb	r0, r0
    a796:	movs	r1, #0
    a798:	bl	c198 <pinMode>
}
    a79c:	mov	r0, r4
    a79e:	pop	{r4, pc}

0000a7a0 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    a7a0:	push	{r4, lr}
    a7a2:	mov	r4, r0
  if(pin >= 0) {
    a7a4:	ldrsb.w	r0, [r0, #6]
    a7a8:	cmp	r0, #0
    a7aa:	blt.n	a7bc <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    a7ac:	uxtb	r0, r0
    a7ae:	movs	r1, #1
    a7b0:	bl	c198 <pinMode>
    digitalWrite(pin, LOW);
    a7b4:	movs	r1, #0
    a7b6:	ldrb	r0, [r4, #6]
    a7b8:	bl	c18c <digitalWrite>
  }
  begun = true;
    a7bc:	movs	r3, #1
    a7be:	strb	r3, [r4, #1]
    a7c0:	pop	{r4, pc}
    a7c2:	nop

0000a7c4 <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    a7c4:	push	{r3, r4, r5, lr}
    a7c6:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    a7c8:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    a7ca:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    a7cc:	cbz	r0, a7d2 <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    a7ce:	bl	d5fc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    a7d2:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    a7d4:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    a7d6:	ldrb	r0, [r4, #12]
    a7d8:	cmp	r3, r0
    a7da:	ite	eq
    a7dc:	moveq	r0, #3
    a7de:	movne	r0, #4
    a7e0:	smulbb	r0, r0, r5
    a7e4:	uxth	r0, r0
    a7e6:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    a7e8:	bl	d514 <calloc>
    a7ec:	str	r0, [r4, #8]
    a7ee:	cbz	r0, a7f4 <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    a7f0:	strh	r5, [r4, #2]
    a7f2:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    a7f4:	strh	r0, [r4, #4]
    a7f6:	strh	r0, [r4, #2]
    a7f8:	pop	{r3, r4, r5, pc}
    a7fa:	nop

0000a7fc <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    a7fc:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a7fe:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    a800:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a804:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a808:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    a80a:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    a80e:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a812:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a816:	ite	hi
    a818:	movhi	r6, #0
    a81a:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    a81c:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a820:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    a824:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    a826:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    a828:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a82a:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    a82c:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a82e:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    a830:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    a832:	cbz	r5, a84a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    a834:	subs	r1, r2, r1
    a836:	clz	r1, r1
    a83a:	lsrs	r1, r1, #5
    a83c:	cmp	r1, r4
    a83e:	beq.n	a84a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    a840:	ldrh	r1, [r0, #2]
  }
}
    a842:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    a846:	b.w	a7c4 <Adafruit_NeoPixel::updateLength(unsigned short)>
    a84a:	pop	{r4, r5, r6, r7, pc}

0000a84c <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    a84c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    a850:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    a852:	sub	sp, #20
    a854:	str	r0, [sp, #12]

  if(!pixels) return;
    a856:	cmp	r3, #0
    a858:	beq.n	a93e <Adafruit_NeoPixel::show()+0xf2>
    a85a:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    a85c:	bl	c114 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    a860:	ldr	r3, [r4, #16]
    a862:	subs	r0, r0, r3
    a864:	cmp.w	r0, #300	; 0x12c
    a868:	bcc.n	a85c <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    a86a:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a86c:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a86e:	ldr	r0, [pc, #408]	; (aa08 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a870:	ldrsb.w	r3, [r6, #6]
    a874:	ldr	r4, [pc, #404]	; (aa0c <Adafruit_NeoPixel::show()+0x1c0>)
    a876:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a878:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a87a:	ldr	r1, [pc, #404]	; (aa10 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a87c:	ldr.w	ip, [r4, r3]
    a880:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    a882:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a884:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    a888:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    a88c:	mov	r5, r6
    a88e:	mov	r6, r3
    a890:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    a892:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a894:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a896:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a898:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a89a:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a89c:	ldr	r4, [pc, #372]	; (aa14 <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a89e:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a8a2:	str	r2, [sp, #8]
    a8a4:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    a8a6:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a8a8:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a8aa:	ldr	r1, [pc, #364]	; (aa18 <Adafruit_NeoPixel::show()+0x1cc>)
    a8ac:	ldr	r0, [r4, #0]
    a8ae:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    a8b0:	cmp	r2, #0
    a8b2:	beq.n	a944 <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a8b4:	ldr	r5, [pc, #356]	; (aa1c <Adafruit_NeoPixel::show()+0x1d0>)
    a8b6:	lsrs	r3, r3, #8
    while(p < end) {
    a8b8:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a8ba:	umull	r2, r3, r5, r3
    a8be:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    a8c2:	bcs.n	a91e <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    a8c4:	ldr	r7, [pc, #344]	; (aa20 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    a8c6:	ldr	r6, [pc, #348]	; (aa24 <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    a8c8:	ldr	r3, [sp, #4]
    a8ca:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    a8ce:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    a8d2:	ldrb.w	sl, [r3], #1
    a8d6:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    a8d8:	ldr	r2, [r4, #0]
    a8da:	ldr	r3, [r1, #0]
    a8dc:	subs	r2, r2, r0
    a8de:	lsrs	r3, r3, #8
    a8e0:	umull	fp, r3, r5, r3
    a8e4:	cmp.w	r2, r3, lsr #4
    a8e8:	bcc.n	a8d8 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    a8ea:	ldr	r3, [pc, #296]	; (aa14 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    a8ec:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    a8f0:	ldr	r0, [r3, #0]
        *set = msk;
    a8f2:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    a8f6:	beq.n	a9f6 <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    a8f8:	ldr	r3, [r4, #0]
    a8fa:	ldr	r2, [r1, #0]
    a8fc:	subs	r3, r3, r0
    a8fe:	umull	fp, r2, r7, r2
    a902:	cmp.w	r3, r2, lsr #19
    a906:	bcc.n	a8f8 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a908:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    a90c:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a910:	mov.w	lr, lr, lsr #1
    a914:	bne.n	a8d8 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    a916:	ldr	r3, [sp, #8]
    a918:	ldr	r2, [sp, #4]
    a91a:	cmp	r3, r2
    a91c:	bne.n	a8c8 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    a91e:	ldr	r5, [pc, #244]	; (aa14 <Adafruit_NeoPixel::show()+0x1c8>)
    a920:	ldr	r4, [pc, #248]	; (aa1c <Adafruit_NeoPixel::show()+0x1d0>)
    a922:	ldr	r2, [r5, #0]
    a924:	ldr	r3, [r1, #0]
    a926:	subs	r2, r2, r0
    a928:	lsrs	r3, r3, #8
    a92a:	umull	r6, r3, r4, r3
    a92e:	cmp.w	r2, r3, lsr #4
    a932:	bcc.n	a922 <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    a934:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    a936:	bl	c114 <micros>
    a93a:	ldr	r3, [sp, #12]
    a93c:	str	r0, [r3, #16]
}
    a93e:	add	sp, #20
    a940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    a944:	ldr	r6, [pc, #212]	; (aa1c <Adafruit_NeoPixel::show()+0x1d0>)
    a946:	lsrs	r3, r3, #7
    a948:	umull	r2, r3, r6, r3
    while(p < end) {
    a94c:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    a94e:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    a952:	ldr	r3, [sp, #4]
    a954:	cmp	r3, r2
    a956:	bcs.n	a9c2 <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    a958:	ldr.w	lr, [pc, #204]	; aa28 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    a95c:	ldr	r7, [pc, #196]	; (aa24 <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    a95e:	ldr	r3, [sp, #4]
    a960:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    a964:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    a968:	ldrb.w	fp, [r3], #1
    a96c:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    a96e:	ldr	r2, [r4, #0]
    a970:	ldr	r3, [r1, #0]
    a972:	subs	r2, r2, r0
    a974:	lsrs	r3, r3, #7
    a976:	umull	r5, r3, r6, r3
    a97a:	cmp.w	r2, r3, lsr #4
    a97e:	bcc.n	a96e <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    a980:	ldr	r3, [pc, #144]	; (aa14 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    a982:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    a986:	ldr	r0, [r3, #0]
        *set = msk;
    a988:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    a98c:	beq.n	a9e4 <Adafruit_NeoPixel::show()+0x198>
    a98e:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    a992:	ldr	r2, [r4, #0]
    a994:	ldr	r5, [r1, #0]
    a996:	subs	r2, r2, r0
    a998:	umull	ip, r3, lr, r5
    a99c:	subs	r5, r5, r3
    a99e:	add.w	r3, r3, r5, lsr #1
    a9a2:	cmp.w	r2, r3, lsr #19
    a9a6:	bcc.n	a992 <Adafruit_NeoPixel::show()+0x146>
    a9a8:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a9ac:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    a9b0:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a9b4:	mov.w	r9, r9, lsr #1
    a9b8:	bne.n	a96e <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    a9ba:	ldr	r3, [sp, #8]
    a9bc:	ldr	r2, [sp, #4]
    a9be:	cmp	r3, r2
    a9c0:	bne.n	a95e <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    a9c2:	ldr	r5, [pc, #80]	; (aa14 <Adafruit_NeoPixel::show()+0x1c8>)
    a9c4:	ldr	r4, [pc, #84]	; (aa1c <Adafruit_NeoPixel::show()+0x1d0>)
    a9c6:	ldr	r2, [r5, #0]
    a9c8:	ldr	r3, [r1, #0]
    a9ca:	subs	r2, r2, r0
    a9cc:	lsrs	r3, r3, #7
    a9ce:	umull	r6, r3, r4, r3
    a9d2:	cmp.w	r2, r3, lsr #4
    a9d6:	bcc.n	a9c6 <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    a9d8:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    a9da:	bl	c114 <micros>
    a9de:	ldr	r3, [sp, #12]
    a9e0:	str	r0, [r3, #16]
    a9e2:	b.n	a93e <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    a9e4:	ldr	r3, [r4, #0]
    a9e6:	ldr	r2, [r1, #0]
    a9e8:	subs	r3, r3, r0
    a9ea:	umull	r5, r2, r7, r2
    a9ee:	cmp.w	r3, r2, lsr #19
    a9f2:	bcc.n	a9e4 <Adafruit_NeoPixel::show()+0x198>
    a9f4:	b.n	a9ac <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    a9f6:	ldr	r3, [r4, #0]
    a9f8:	ldr	r2, [r1, #0]
    a9fa:	subs	r3, r3, r0
    a9fc:	umull	fp, r2, r6, r2
    aa00:	cmp.w	r3, r2, lsr #20
    aa04:	bcc.n	a9f6 <Adafruit_NeoPixel::show()+0x1aa>
    aa06:	b.n	a908 <Adafruit_NeoPixel::show()+0xbc>
    aa08:	.word	0xe000edfc
    aa0c:	.word	0x20000590
    aa10:	.word	0xe0001000
    aa14:	.word	0xe0001004
    aa18:	.word	0x20000dc4
    aa1c:	.word	0x014f8b59
    aa20:	.word	0x6b5fca6b
    aa24:	.word	0x431bde83
    aa28:	.word	0x421f67b3

0000aa2c <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    aa2c:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    aa2e:	ldrb	r3, [r0, #1]
    aa30:	cbz	r3, aa4e <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    aa32:	mov	r4, r0
    aa34:	ldrsb.w	r0, [r0, #6]
    aa38:	mov	r5, r1
    aa3a:	cmp	r0, #0
    aa3c:	blt.n	aa52 <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    aa3e:	uxtb	r0, r0
    aa40:	movs	r1, #0
    aa42:	bl	c198 <pinMode>
    aa46:	ldrb	r3, [r4, #1]
    pin = p;
    aa48:	strb	r5, [r4, #6]
    if(begun) {
    aa4a:	cbnz	r3, aa54 <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    aa4c:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    aa4e:	strb	r1, [r0, #6]
    aa50:	pop	{r3, r4, r5, pc}
    aa52:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    aa54:	mov	r0, r5
    aa56:	movs	r1, #1
    aa58:	bl	c198 <pinMode>
      digitalWrite(p, LOW);
    aa5c:	mov	r0, r5
    aa5e:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    aa60:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    aa64:	b.w	c18c <digitalWrite>

0000aa68 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    aa68:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    aa6a:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    aa6c:	mov	r4, r0
    aa6e:	mov	r7, r1
    aa70:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    aa72:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    aa74:	strb	r5, [r0, #1]
    aa76:	strb	r5, [r0, #7]
    aa78:	str	r5, [r0, #8]
    aa7a:	str	r5, [r0, #16]
{
  updateType(t);
    aa7c:	bl	a7fc <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    aa80:	mov	r1, r7
    aa82:	mov	r0, r4
    aa84:	bl	a7c4 <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    aa88:	mov	r0, r4
    aa8a:	mov	r1, r6
    aa8c:	bl	aa2c <Adafruit_NeoPixel::setPin(unsigned char)>
}
    aa90:	mov	r0, r4
    aa92:	pop	{r3, r4, r5, r6, r7, pc}

0000aa94 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    aa94:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    aa96:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    aa98:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    aa9c:	cmp	r4, r1
    aa9e:	bls.n	aad4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    aaa0:	ldrb	r4, [r0, #7]
    aaa2:	cbz	r4, aab6 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    aaa4:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    aaa8:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    aaac:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    aab0:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    aab2:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    aab4:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    aab6:	ldrb	r5, [r0, #15]
    aab8:	ldrb	r4, [r0, #12]
    aaba:	cmp	r4, r5
    aabc:	beq.n	aad8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    aabe:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    aac0:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    aac2:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    aac6:	strb	r7, [r1, r5]
    aac8:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    aaca:	strb	r2, [r1, r5]
    p[gOffset] = g;
    aacc:	ldrb	r2, [r0, #13]
    aace:	strb	r3, [r1, r2]
    p[bOffset] = b;
    aad0:	ldrb	r3, [r0, #14]
    aad2:	strb	r6, [r1, r3]
  }
}
    aad4:	pop	{r4, r5, r6, r7}
    aad6:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    aad8:	add.w	r1, r1, r1, lsl #1
    aadc:	ldr	r4, [r0, #8]
    aade:	add	r1, r4
    aae0:	b.n	aaca <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    aae2:	nop

0000aae4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    aae4:	ldrh	r3, [r0, #2]
    aae6:	cmp	r3, r1
    aae8:	bls.n	aaee <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    aaea:	b.w	a718 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    aaee:	bx	lr

0000aaf0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    aaf0:	ldrh	r3, [r0, #2]
    aaf2:	cmp	r3, r1
    aaf4:	bls.n	ab26 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    aaf6:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    aaf8:	ldrb	r2, [r0, #15]
    aafa:	ldrb	r3, [r0, #12]
    aafc:	cmp	r2, r3
    aafe:	beq.n	ab2a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ab00:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    ab02:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ab04:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab08:	ldrb	r3, [r1, r3]
    ab0a:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    ab0c:	cbnz	r4, ab5c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    ab0e:	lsls	r3, r3, #16
    ab10:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    ab12:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    ab14:	orr.w	r0, r3, r5, lsl #24
    ab18:	ldrb	r3, [r1, r4]
    ab1a:	ldrb	r2, [r1, r2]
    ab1c:	orrs	r3, r0
    ab1e:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    ab22:	pop	{r4, r5}
    ab24:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    ab26:	movs	r0, #0
    ab28:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    ab2a:	add.w	r1, r1, r1, lsl #1
    ab2e:	ldr	r3, [r0, #8]
    if(brightness) {
    ab30:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    ab32:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab34:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    ab36:	cbz	r4, ab8c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    ab38:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab3a:	lsls	r2, r2, #8
    ab3c:	ldrb	r3, [r0, #14]
    ab3e:	ldrb	r0, [r1, r5]
    ab40:	ldrb	r3, [r1, r3]
    ab42:	lsls	r0, r0, #8
    ab44:	lsls	r3, r3, #8
    ab46:	udiv	r2, r2, r4
    ab4a:	udiv	r0, r0, r4
    ab4e:	lsls	r2, r2, #16
    ab50:	udiv	r3, r3, r4
    ab54:	orr.w	r0, r2, r0, lsl #8
    ab58:	orrs	r0, r3
    ab5a:	b.n	ab22 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab5c:	lsls	r3, r3, #8
    ab5e:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    ab60:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab62:	lsls	r5, r5, #8
    ab64:	ldrb	r2, [r1, r2]
    ab66:	ldrb	r0, [r1, r0]
    ab68:	lsls	r2, r2, #8
    ab6a:	lsls	r0, r0, #8
    ab6c:	udiv	r1, r3, r4
    ab70:	udiv	r5, r5, r4
    ab74:	udiv	r2, r2, r4
    ab78:	lsls	r3, r1, #16
    ab7a:	udiv	r0, r0, r4
    ab7e:	orr.w	r3, r3, r5, lsl #24
    ab82:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    ab84:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ab86:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    ab8a:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    ab8c:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    ab8e:	lsls	r2, r2, #16
    ab90:	ldrb	r3, [r0, #14]
    ab92:	ldrb	r0, [r1, r4]
    ab94:	ldrb	r3, [r1, r3]
    ab96:	orr.w	r0, r2, r0, lsl #8
    ab9a:	orrs	r0, r3
    ab9c:	b.n	ab22 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    ab9e:	nop

0000aba0 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    aba0:	ldrh	r0, [r0, #2]
    aba2:	bx	lr

0000aba4 <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    aba4:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    aba6:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    aba8:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    abaa:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    abac:	cmp	r6, r4
    abae:	beq.n	abd8 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    abb0:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    abb2:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    abb4:	ands.w	r4, r4, #255	; 0xff
    abb8:	bne.n	abdc <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    abba:	ldrh	r3, [r0, #4]
    abbc:	cbz	r3, abd6 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    abbe:	mov	r2, r5
      c      = *ptr;
    abc0:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    abc2:	mul.w	r3, r4, r3
    abc6:	asrs	r3, r3, #8
    abc8:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    abcc:	subs	r3, r2, r5
    abce:	ldrh	r1, [r0, #4]
    abd0:	uxth	r3, r3
    abd2:	cmp	r1, r3
    abd4:	bhi.n	abc0 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    abd6:	strb	r6, [r0, #7]
  }
}
    abd8:	pop	{r4, r5, r6}
    abda:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    abdc:	cmp	r1, #255	; 0xff
    abde:	beq.n	abec <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    abe0:	lsls	r3, r6, #8
    abe2:	subs	r3, #1
    abe4:	sdiv	r4, r3, r4
    abe8:	uxth	r4, r4
    abea:	b.n	abba <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    abec:	movw	r3, #65535	; 0xffff
    abf0:	sdiv	r4, r3, r4
    abf4:	b.n	abba <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    abf6:	nop

0000abf8 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    abf8:	ldrh	r2, [r0, #4]
    abfa:	movs	r1, #0
    abfc:	ldr	r0, [r0, #8]
    abfe:	b.w	dc44 <memset>
    ac02:	nop

0000ac04 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    ac04:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    ac06:	movs	r1, #0
    ac08:	mov	r3, r0
    ac0a:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    ac0e:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    ac10:	movs	r4, #0
    ac12:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    ac14:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    ac18:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    ac1a:	bfc	r2, #0, #4
    ac1e:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    ac20:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    ac24:	cmp	r3, r5
    ac26:	bne.n	ac0e <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    ac28:	mov	r2, r4
    ac2a:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    ac2c:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    ac2e:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    ac32:	add.w	r3, r0, r2, lsl #4
    ac36:	adds	r3, #8
    ac38:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    ac3a:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    ac3e:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    ac42:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    ac46:	beq.n	ac50 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    ac48:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    ac4a:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    ac4c:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    ac4e:	str	r6, [r1, #8]
    ac50:	adds	r2, #1
    ac52:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    ac54:	cmp	r2, #12
    ac56:	bne.n	ac32 <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    ac58:	pop	{r4, r5, r6}
    ac5a:	bx	lr

0000ac5c <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    ac5c:	ldr	r0, [pc, #4]	; (ac64 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    ac5e:	b.w	ac04 <TimeAlarmsClass::TimeAlarmsClass()>
    ac62:	nop
    ac64:	.word	0x2000d4b4

0000ac68 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    ac68:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    ac6a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    ac6e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    ac72:	bne.n	ad50 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    ac74:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    ac76:	bcc.n	acfc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    ac78:	ldr.w	r3, [r1], #4
    ac7c:	str.w	r3, [r0], #4
    ac80:	ldr.w	r3, [r1], #4
    ac84:	str.w	r3, [r0], #4
    ac88:	ldr.w	r3, [r1], #4
    ac8c:	str.w	r3, [r0], #4
    ac90:	ldr.w	r3, [r1], #4
    ac94:	str.w	r3, [r0], #4
    ac98:	ldr.w	r3, [r1], #4
    ac9c:	str.w	r3, [r0], #4
    aca0:	ldr.w	r3, [r1], #4
    aca4:	str.w	r3, [r0], #4
    aca8:	ldr.w	r3, [r1], #4
    acac:	str.w	r3, [r0], #4
    acb0:	ldr.w	r3, [r1], #4
    acb4:	str.w	r3, [r0], #4
    acb8:	ldr.w	r3, [r1], #4
    acbc:	str.w	r3, [r0], #4
    acc0:	ldr.w	r3, [r1], #4
    acc4:	str.w	r3, [r0], #4
    acc8:	ldr.w	r3, [r1], #4
    accc:	str.w	r3, [r0], #4
    acd0:	ldr.w	r3, [r1], #4
    acd4:	str.w	r3, [r0], #4
    acd8:	ldr.w	r3, [r1], #4
    acdc:	str.w	r3, [r0], #4
    ace0:	ldr.w	r3, [r1], #4
    ace4:	str.w	r3, [r0], #4
    ace8:	ldr.w	r3, [r1], #4
    acec:	str.w	r3, [r0], #4
    acf0:	ldr.w	r3, [r1], #4
    acf4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    acf8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    acfa:	bcs.n	ac78 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    acfc:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    acfe:	bcc.n	ad24 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    ad00:	ldr.w	r3, [r1], #4
    ad04:	str.w	r3, [r0], #4
    ad08:	ldr.w	r3, [r1], #4
    ad0c:	str.w	r3, [r0], #4
    ad10:	ldr.w	r3, [r1], #4
    ad14:	str.w	r3, [r0], #4
    ad18:	ldr.w	r3, [r1], #4
    ad1c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    ad20:	subs	r2, #16
	bhs	.Lmid_block_loop
    ad22:	bcs.n	ad00 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    ad24:	adds	r2, #12
	blo	.Lcopy_less_than_4
    ad26:	bcc.n	ad34 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    ad28:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    ad2c:	str.w	r3, [r0], #4
	subs	r2, #4
    ad30:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    ad32:	bcs.n	ad28 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    ad34:	adds	r2, #4
	beq	.Ldone
    ad36:	beq.n	ad4a <memcpy+0xe2>

	lsls	r2, r2, #31
    ad38:	lsls	r2, r2, #31
	itt ne
    ad3a:	itt	ne
	ldrbne  r3, [r1], #1
    ad3c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    ad40:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    ad44:	bcc.n	ad4a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    ad46:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    ad48:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ad4a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ad4c:	bx	lr
    ad4e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    ad50:	cmp	r2, #8
	blo	.Lbyte_copy
    ad52:	bcc.n	ad7c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    ad54:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    ad56:	beq.n	ac74 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    ad58:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    ad5c:	beq.n	ac74 <memcpy+0xc>

	rsb	r3, #4
    ad5e:	rsb	r3, r3, #4
	subs	r2, r3
    ad62:	subs	r2, r2, r3

	lsls    r3, r3, #31
    ad64:	lsls	r3, r3, #31
	itt ne
    ad66:	itt	ne
	ldrbne  r3, [r1], #1
    ad68:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    ad6c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    ad70:	bcc.n	ac74 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    ad72:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    ad76:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    ad7a:	b.n	ac74 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    ad7c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    ad7e:	bcc.n	ad34 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    ad80:	subs	r2, #1
	ldrb    r3, [r1], #1
    ad82:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    ad86:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    ad8a:	bcs.n	ad80 <memcpy+0x118>

	ldrb	r3, [r1]
    ad8c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    ad8e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    ad90:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    ad92:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    ad94:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    ad96:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    ad98:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    ad9a:	bx	lr

0000ad9c <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    ad9c:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    ad9e:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    ada0:	ubfx	r3, r3, #16, #15
    ada4:	ldr	r1, [pc, #20]	; (adbc <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    ada6:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    ada8:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    adac:	ldr	r4, [pc, #16]	; (adc0 <rx_event+0x24>)
    adae:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    adb0:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    adb4:	strh.w	r5, [r4, r2, lsl #1]
}
    adb8:	pop	{r4, r5}
    adba:	bx	lr
    adbc:	.word	0x2000dd44
    adc0:	.word	0x2000dd3c

0000adc4 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    adc4:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    adc6:	ldr	r3, [pc, #84]	; (ae1c <usb_serial_flush_callback+0x58>)
    adc8:	ldrb	r3, [r3, #0]
    adca:	cbnz	r3, addc <usb_serial_flush_callback+0x18>
    adcc:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    add0:	ldr	r3, [pc, #76]	; (ae20 <usb_serial_flush_callback+0x5c>)
    add2:	ldrb	r3, [r3, #0]
    add4:	cbz	r3, addc <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    add6:	ldr	r5, [pc, #76]	; (ae24 <usb_serial_flush_callback+0x60>)
    add8:	ldrh	r2, [r5, #0]
    adda:	cbnz	r2, adde <usb_serial_flush_callback+0x1a>
    addc:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    adde:	ldr	r7, [pc, #72]	; (ae28 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    ade0:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ade2:	ldr	r6, [pc, #72]	; (ae2c <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    ade4:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ade8:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    adea:	ldr	r0, [pc, #68]	; (ae30 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    adec:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    adf0:	add.w	r1, r0, r1, lsl #8
    adf4:	mov	r0, r6
    adf6:	bl	bbc4 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    adfa:	mov	r1, r6
    adfc:	movs	r0, #4
    adfe:	bl	bbf4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ae02:	ldrb	r3, [r7, #0]
    ae04:	adds	r3, #1
    ae06:	uxtb	r3, r3
    ae08:	cmp	r3, #6
    ae0a:	it	ls
    ae0c:	strbls	r3, [r7, #0]
	tx_available = 0;
    ae0e:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    ae12:	it	hi
    ae14:	strbhi	r4, [r7, #0]
	tx_available = 0;
    ae16:	strh	r3, [r5, #0]
    ae18:	pop	{r3, r4, r5, r6, r7, pc}
    ae1a:	nop
    ae1c:	.word	0x2000dc78
    ae20:	.word	0x2000def0
    ae24:	.word	0x2000ddc0
    ae28:	.word	0x2000dc79
    ae2c:	.word	0x2000dde0
    ae30:	.word	0x2000d578

0000ae34 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    ae34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae38:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    ae3a:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    ae3c:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    ae3e:	cmp	r1, #0
    ae40:	beq.w	af6c <usb_serial_write.part.1+0x138>
    ae44:	movs	r3, #0
    ae46:	ldr.w	r8, [pc, #320]	; af88 <usb_serial_write.part.1+0x154>
    ae4a:	ldr.w	r9, [pc, #304]	; af7c <usb_serial_write.part.1+0x148>
    ae4e:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    ae50:	ldr	r6, [pc, #284]	; (af70 <usb_serial_write.part.1+0x13c>)
    ae52:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    ae56:	ldr.w	sl, [pc, #308]	; af8c <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    ae5a:	ldr	r2, [pc, #280]	; (af74 <usb_serial_write.part.1+0x140>)
    ae5c:	ldrb	r4, [r2, #0]
    ae5e:	ldr	r2, [pc, #280]	; (af78 <usb_serial_write.part.1+0x144>)
    ae60:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    ae64:	cmp	r3, #0
    ae66:	bne.n	af24 <usb_serial_write.part.1+0xf0>
    ae68:	mov	r5, r3
    ae6a:	mov	r4, r3
    ae6c:	b.n	ae98 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    ae6e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    ae72:	cbnz	r4, ae76 <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    ae74:	ldr	r5, [r6, #0]
    ae76:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    ae78:	cmp	r3, #0
    ae7a:	bne.n	af18 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ae7c:	ldr	r3, [r6, #0]
    ae7e:	subs	r3, r3, r5
    ae80:	cmp	r3, #120	; 0x78
    ae82:	bhi.n	af60 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    ae84:	ldrb.w	r3, [sl]
    ae88:	cmp	r3, #0
    ae8a:	beq.n	af18 <usb_serial_write.part.1+0xe4>
			yield();
    ae8c:	bl	ca20 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    ae90:	ldrh.w	r3, [r8]
    ae94:	cmp	r3, #0
    ae96:	bne.n	af20 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    ae98:	mov	r0, r7
    ae9a:	bl	bc40 <usb_transfer_status>
			if (!(status & 0x80)) {
    ae9e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    aea2:	ldr	r2, [pc, #216]	; (af7c <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    aea4:	bne.n	ae6e <usb_serial_write.part.1+0x3a>
    aea6:	ldr	r2, [pc, #204]	; (af74 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    aea8:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    aeac:	strb.w	r0, [r9]
    aeb0:	ldrb	r4, [r2, #0]
    aeb2:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aeb4:	ldr	r1, [pc, #200]	; (af80 <usb_serial_write.part.1+0x14c>)
    aeb6:	lsls	r4, r4, #8
		if (size >= tx_available) {
    aeb8:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    aeba:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aebe:	add	r0, r4
    aec0:	add	r0, r1
		if (size >= tx_available) {
    aec2:	bcc.n	af36 <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    aec4:	ldr	r1, [sp, #8]
    aec6:	bl	ac68 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    aeca:	ldr	r3, [pc, #180]	; (af80 <usb_serial_write.part.1+0x14c>)
    aecc:	mov.w	r2, #256	; 0x100
    aed0:	mov	r0, r7
    aed2:	adds	r1, r3, r4
    aed4:	movs	r3, #0
    aed6:	bl	bbc4 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    aeda:	mov	r1, r7
    aedc:	movs	r0, #4
    aede:	bl	bbf4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    aee2:	ldr	r3, [pc, #144]	; (af74 <usb_serial_write.part.1+0x140>)
    aee4:	ldr	r2, [pc, #140]	; (af74 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    aee6:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    aee8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    aeea:	ldr	r0, [pc, #152]	; (af84 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    aeec:	adds	r3, #1
    aeee:	uxtb	r3, r3
    aef0:	cmp	r3, #6
    aef2:	it	hi
    aef4:	movhi	r3, #0
    aef6:	strb	r3, [r2, #0]
			size -= tx_available;
    aef8:	ldrh.w	r2, [r8]
			sent += tx_available;
    aefc:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    aefe:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    af02:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    af06:	add	r3, r2
    af08:	str	r3, [sp, #4]
			data += tx_available;
    af0a:	ldr	r3, [sp, #8]
    af0c:	add	r3, r2
    af0e:	str	r3, [sp, #8]
    af10:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    af12:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    af16:	bne.n	ae5a <usb_serial_write.part.1+0x26>
    af18:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    af1a:	add	sp, #20
    af1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af20:	ldr	r2, [pc, #80]	; (af74 <usb_serial_write.part.1+0x140>)
    af22:	ldrb	r4, [r2, #0]
    af24:	mov	r2, r3
    af26:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    af2a:	lsls	r4, r4, #8
    af2c:	ldr	r1, [pc, #80]	; (af80 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    af2e:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    af30:	add	r0, r4
    af32:	add	r0, r1
		if (size >= tx_available) {
    af34:	bcs.n	aec4 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    af36:	ldr	r1, [sp, #8]
    af38:	mov	r2, fp
    af3a:	str	r3, [sp, #12]
    af3c:	bl	ac68 <memcpy>
			tx_available -= size;
    af40:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    af42:	mov.w	r1, #3221225472	; 0xc0000000
    af46:	ldr	r2, [pc, #60]	; (af84 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    af48:	rsb	r3, fp, r3
    af4c:	strh.w	r3, [r8]
    af50:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    af52:	str.w	r1, [r2, #132]	; 0x84
    af56:	add	r3, fp
    af58:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    af5a:	add	sp, #20
    af5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    af60:	movs	r3, #1
				return sent;
    af62:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    af64:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    af66:	add	sp, #20
    af68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    af6c:	mov	r0, r1
    af6e:	b.n	af1a <usb_serial_write.part.1+0xe6>
    af70:	.word	0x2000df18
    af74:	.word	0x2000dc79
    af78:	.word	0x2000dde0
    af7c:	.word	0x2000dec0
    af80:	.word	0x2000d578
    af84:	.word	0x402e0000
    af88:	.word	0x2000ddc0
    af8c:	.word	0x2000def0

0000af90 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    af90:	bx	lr
    af92:	nop

0000af94 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    af94:	movs	r1, #0
    af96:	movs	r2, #224	; 0xe0
    af98:	ldr	r0, [pc, #128]	; (b01c <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    af9a:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    af9c:	mov	r4, r1
    af9e:	ldr	r6, [pc, #128]	; (b020 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afa0:	ldr	r5, [pc, #128]	; (b024 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    afa2:	bl	dc44 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    afa6:	ldr	r7, [pc, #128]	; (b028 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afa8:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    afaa:	ldr	r3, [pc, #128]	; (b02c <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afac:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    afae:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afb0:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    afb2:	ldr	r6, [pc, #124]	; (b030 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    afb4:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afb6:	bl	dc44 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    afba:	mov	r3, r4
    afbc:	mov	r2, r4
    afbe:	movs	r1, #16
    afc0:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    afc2:	str	r4, [r7, #0]
    afc4:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    afc6:	str	r4, [r6, #0]
    afc8:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    afca:	bl	bb5c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    afce:	mov	r2, r4
    afd0:	ldr	r3, [pc, #96]	; (b034 <usb_serial_configure+0xa0>)
    afd2:	movs	r1, #64	; 0x40
    afd4:	movs	r0, #3
    afd6:	bl	baf8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    afda:	mov	r3, r4
    afdc:	mov	r2, r4
    afde:	movs	r1, #64	; 0x40
    afe0:	movs	r0, #4
    afe2:	bl	bb5c <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    afe6:	mov	r3, r4
    afe8:	movs	r2, #64	; 0x40
    afea:	mov	r0, r5
    afec:	ldr	r1, [pc, #72]	; (b038 <usb_serial_configure+0xa4>)
    afee:	bl	bbc4 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    aff2:	mov	r1, r5
    aff4:	movs	r0, #3
    aff6:	bl	bc1c <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    affa:	ldr	r3, [pc, #64]	; (b03c <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    affc:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    affe:	ldr	r1, [pc, #64]	; (b040 <usb_serial_configure+0xac>)
    b000:	ldr	r0, [pc, #64]	; (b044 <usb_serial_configure+0xb0>)
    b002:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    b004:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    b008:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    b00c:	ldr.w	r2, [r3, #328]	; 0x148
    b010:	orr.w	r2, r2, #16777216	; 0x1000000
    b014:	str.w	r2, [r3, #328]	; 0x148
    b018:	pop	{r3, r4, r5, r6, r7, pc}
    b01a:	nop
    b01c:	.word	0x2000dde0
    b020:	.word	0x2000dc79
    b024:	.word	0x2000dd60
    b028:	.word	0x2000dd44
    b02c:	.word	0x2000ddc0
    b030:	.word	0x2000dd3c
    b034:	.word	0x0000ad9d
    b038:	.word	0x2000dc7c
    b03c:	.word	0x402e0000
    b040:	.word	0x2000dec4
    b044:	.word	0x0000adc5

0000b048 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    b048:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    b04a:	ldr	r5, [pc, #56]	; (b084 <usb_serial_getchar+0x3c>)
    b04c:	ldr	r3, [pc, #56]	; (b088 <usb_serial_getchar+0x40>)
    b04e:	ldrh	r2, [r5, #0]
    b050:	ldrh	r0, [r3, #0]
    b052:	cmp	r2, r0
    b054:	bcs.n	b07e <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    b056:	adds	r3, r2, #1
    b058:	ldr	r1, [pc, #48]	; (b08c <usb_serial_getchar+0x44>)
    b05a:	uxth	r3, r3
    b05c:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    b05e:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    b060:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    b062:	bls.n	b068 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    b064:	mov	r0, r4
	}
	return -1;
}
    b066:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    b068:	movs	r3, #0
    b06a:	movs	r2, #64	; 0x40
    b06c:	ldr	r0, [pc, #32]	; (b090 <usb_serial_getchar+0x48>)
    b06e:	bl	bbc4 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    b072:	ldr	r1, [pc, #28]	; (b090 <usb_serial_getchar+0x48>)
    b074:	movs	r0, #3
    b076:	bl	bc1c <usb_receive>
		}
		return c;
    b07a:	mov	r0, r4
    b07c:	pop	{r3, r4, r5, pc}
	}
	return -1;
    b07e:	mov.w	r0, #4294967295
    b082:	pop	{r3, r4, r5, pc}
    b084:	.word	0x2000dd3c
    b088:	.word	0x2000dd44
    b08c:	.word	0x2000dc7c
    b090:	.word	0x2000dd60

0000b094 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    b094:	ldr	r3, [pc, #20]	; (b0ac <usb_serial_peekchar+0x18>)
    b096:	ldr	r2, [pc, #24]	; (b0b0 <usb_serial_peekchar+0x1c>)
    b098:	ldrh	r3, [r3, #0]
    b09a:	ldrh	r2, [r2, #0]
    b09c:	cmp	r2, r3
    b09e:	bls.n	b0a6 <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    b0a0:	ldr	r2, [pc, #16]	; (b0b4 <usb_serial_peekchar+0x20>)
    b0a2:	ldrb	r0, [r2, r3]
    b0a4:	bx	lr
	}

	return -1;
    b0a6:	mov.w	r0, #4294967295
}
    b0aa:	bx	lr
    b0ac:	.word	0x2000dd3c
    b0b0:	.word	0x2000dd44
    b0b4:	.word	0x2000dc7c

0000b0b8 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    b0b8:	ldr	r2, [pc, #8]	; (b0c4 <usb_serial_available+0xc>)
    b0ba:	ldr	r3, [pc, #12]	; (b0c8 <usb_serial_available+0x10>)
    b0bc:	ldrh	r0, [r2, #0]
    b0be:	ldrh	r3, [r3, #0]
}
    b0c0:	subs	r0, r0, r3
    b0c2:	bx	lr
    b0c4:	.word	0x2000dd44
    b0c8:	.word	0x2000dd3c

0000b0cc <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    b0cc:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    b0ce:	ldr	r3, [pc, #40]	; (b0f8 <usb_serial_flush_input+0x2c>)
    b0d0:	ldr	r4, [pc, #40]	; (b0fc <usb_serial_flush_input+0x30>)
    b0d2:	ldrh	r5, [r3, #0]
    b0d4:	ldrh	r3, [r4, #0]
    b0d6:	cmp	r3, r5
    b0d8:	bcc.n	b0dc <usb_serial_flush_input+0x10>
    b0da:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    b0dc:	movs	r3, #0
    b0de:	ldr	r1, [pc, #32]	; (b100 <usb_serial_flush_input+0x34>)
    b0e0:	ldr	r0, [pc, #32]	; (b104 <usb_serial_flush_input+0x38>)
    b0e2:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    b0e4:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    b0e6:	bl	bbc4 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    b0ea:	ldr	r1, [pc, #24]	; (b104 <usb_serial_flush_input+0x38>)
    b0ec:	movs	r0, #3
	}
}
    b0ee:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    b0f2:	b.w	bc1c <usb_receive>
    b0f6:	nop
    b0f8:	.word	0x2000dd44
    b0fc:	.word	0x2000dd3c
    b100:	.word	0x2000dc7c
    b104:	.word	0x2000dd60

0000b108 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    b108:	ldr	r3, [pc, #36]	; (b130 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    b10a:	push	{lr}
    b10c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    b10e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    b110:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    b114:	cbnz	r3, b120 <usb_serial_putchar+0x18>
    b116:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    b11a:	add	sp, #12
    b11c:	ldr.w	pc, [sp], #4
    b120:	movs	r1, #1
    b122:	add.w	r0, sp, #7
    b126:	bl	ae34 <usb_serial_write.part.1>
    b12a:	add	sp, #12
    b12c:	ldr.w	pc, [sp], #4
    b130:	.word	0x2000def0

0000b134 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    b134:	ldr	r3, [pc, #16]	; (b148 <usb_serial_write+0x14>)
    b136:	ldrb	r3, [r3, #0]
    b138:	and.w	r2, r3, #255	; 0xff
    b13c:	cbz	r3, b142 <usb_serial_write+0xe>
    b13e:	b.w	ae34 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    b142:	mov	r0, r2
    b144:	bx	lr
    b146:	nop
    b148:	.word	0x2000def0

0000b14c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    b14c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    b150:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    b152:	ldr.w	r8, [pc, #64]	; b194 <usb_serial_write_buffer_free+0x48>
    b156:	movs	r3, #1
    b158:	ldr	r5, [pc, #48]	; (b18c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    b15a:	mov	r7, r4
    b15c:	ldr	r6, [pc, #48]	; (b190 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    b15e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    b162:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b164:	mov	r0, r5
    b166:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    b168:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    b16a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    b16e:	beq.n	b17c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b170:	bl	bc40 <usb_transfer_status>
    b174:	lsls	r3, r0, #24
    b176:	it	pl
    b178:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    b17c:	cmp	r4, #7
    b17e:	bne.n	b162 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    b180:	movs	r3, #0
	return sum;
}
    b182:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    b184:	strb.w	r3, [r8]
	return sum;
}
    b188:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b18c:	.word	0x2000dde0
    b190:	.word	0x2000dc79
    b194:	.word	0x2000dc78

0000b198 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    b198:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    b19a:	ldr	r3, [pc, #80]	; (b1ec <usb_serial_flush_output+0x54>)
    b19c:	ldrb	r3, [r3, #0]
    b19e:	cbz	r3, b1a6 <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    b1a0:	ldr	r4, [pc, #76]	; (b1f0 <usb_serial_flush_output+0x58>)
    b1a2:	ldrh	r2, [r4, #0]
    b1a4:	cbnz	r2, b1a8 <usb_serial_flush_output+0x10>
    b1a6:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    b1a8:	ldr	r6, [pc, #72]	; (b1f4 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    b1aa:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    b1ae:	ldr	r5, [pc, #72]	; (b1f8 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    b1b0:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    b1b2:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    b1b4:	rsb	r2, r2, #256	; 0x100
    b1b8:	ldr	r0, [pc, #64]	; (b1fc <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    b1ba:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    b1be:	ldr	r7, [pc, #64]	; (b200 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    b1c0:	add.w	r1, r0, r1, lsl #8
    b1c4:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    b1c6:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    b1ca:	bl	bbc4 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b1ce:	mov	r1, r5
    b1d0:	movs	r0, #4
    b1d2:	bl	bbf4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b1d6:	ldrb	r3, [r6, #0]
    b1d8:	adds	r3, #1
    b1da:	uxtb	r3, r3
    b1dc:	cmp	r3, #6
    b1de:	it	hi
    b1e0:	movhi	r3, #0
    b1e2:	strb	r3, [r6, #0]
	tx_available = 0;
    b1e4:	movs	r3, #0
    b1e6:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    b1e8:	strb	r3, [r7, #0]
    b1ea:	pop	{r3, r4, r5, r6, r7, pc}
    b1ec:	.word	0x2000def0
    b1f0:	.word	0x2000ddc0
    b1f4:	.word	0x2000dc79
    b1f8:	.word	0x2000dde0
    b1fc:	.word	0x2000d578
    b200:	.word	0x2000dc78

0000b204 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b204:	ldr	r2, [pc, #556]	; (b434 <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b206:	ldr	r3, [pc, #560]	; (b438 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b208:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    b20a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    b20e:	ldr	r5, [pc, #556]	; (b43c <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b210:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b212:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b214:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b216:	bls.n	b254 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b218:	ldr	r3, [pc, #548]	; (b440 <set_arm_clock+0x23c>)
    b21a:	cmp	r0, r3
    b21c:	bls.w	b420 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b220:	ldr	r3, [pc, #544]	; (b444 <set_arm_clock+0x240>)
    b222:	movw	r6, #1300	; 0x514
    b226:	ldr.w	lr, [pc, #600]	; b480 <set_arm_clock+0x27c>
    b22a:	add	r3, r0
    b22c:	ldr	r5, [pc, #536]	; (b448 <set_arm_clock+0x244>)
    b22e:	lsrs	r2, r3, #8
    b230:	umull	r3, r2, lr, r2
    b234:	lsrs	r3, r2, #7
    b236:	add.w	r3, r3, r3, lsl #2
    b23a:	add.w	r2, r3, r3, lsl #2
    b23e:	addw	r3, r2, #1250	; 0x4e2
    b242:	cmp	r3, r6
    b244:	it	cs
    b246:	movcs	r3, r6
    b248:	sub.w	r3, r3, #800	; 0x320
    b24c:	umull	r3, r6, r5, r3
    b250:	lsrs	r6, r6, #3
    b252:	b.n	b25c <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    b254:	cmp	r0, #25
    b256:	ite	cc
    b258:	movcc	r6, #6
    b25a:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b25c:	ldr	r2, [pc, #472]	; (b438 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b25e:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b262:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b266:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b268:	orr.w	r3, r3, #192	; 0xc0
    b26c:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b270:	bcs.n	b288 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b272:	ldr	r3, [pc, #456]	; (b43c <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b274:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b278:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b27a:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    b27c:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b27e:	ldr	r3, [r2, #0]
    b280:	cmp	r3, #0
    b282:	bge.n	b27e <set_arm_clock+0x7a>
    b284:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b288:	ands.w	r3, r4, #33554432	; 0x2000000
    b28c:	bne.n	b2ec <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b28e:	ldr	r5, [pc, #444]	; (b44c <set_arm_clock+0x248>)
    b290:	ldr	r2, [pc, #444]	; (b450 <set_arm_clock+0x24c>)
    b292:	ldr.w	ip, [r5, #16]
    b296:	mov	r5, r2
    b298:	and.w	r2, ip, r2
    b29c:	cmp	r2, r5
    b29e:	itet	eq
    b2a0:	moveq.w	r3, #402653184	; 0x18000000
    b2a4:	movne.w	r2, #4096	; 0x1000
    b2a8:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b2aa:	eor.w	r5, r4, r3
    b2ae:	tst.w	r5, #939524096	; 0x38000000
    b2b2:	beq.n	b2c2 <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b2b4:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b2b8:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    b2bc:	ldr	r5, [pc, #376]	; (b438 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b2be:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    b2c0:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b2c2:	eor.w	r3, r1, r2
    b2c6:	tst.w	r3, #12288	; 0x3000
    b2ca:	beq.n	b2de <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b2cc:	ldr	r3, [pc, #360]	; (b438 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b2ce:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b2d2:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b2d4:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b2d6:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b2d8:	ldr	r3, [r2, #72]	; 0x48
    b2da:	lsls	r5, r3, #28
    b2dc:	bmi.n	b2d8 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b2de:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b2e2:	ldr	r2, [pc, #340]	; (b438 <set_arm_clock+0x234>)
    b2e4:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b2e6:	ldr	r3, [r2, #72]	; 0x48
    b2e8:	lsls	r1, r3, #26
    b2ea:	bmi.n	b2e6 <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    b2ec:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b2ee:	ldr	r5, [pc, #356]	; (b454 <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    b2f0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b2f2:	mul.w	r3, r1, r2
    b2f6:	mul.w	r3, r0, r3
    b2fa:	cmp	r3, r5
    b2fc:	bhi.n	b312 <set_arm_clock+0x10e>
		if (div_arm < 8) {
    b2fe:	cmp	r2, #7
    b300:	bhi.w	b40c <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    b304:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b306:	mul.w	r3, r1, r2
    b30a:	mul.w	r3, r0, r3
    b30e:	cmp	r3, r5
    b310:	bls.n	b2fe <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b312:	ldr	r0, [pc, #324]	; (b458 <set_arm_clock+0x254>)
    b314:	ldr	r5, [pc, #324]	; (b45c <set_arm_clock+0x258>)
    b316:	add	r0, r3
    b318:	umull	r3, r0, r5, r0
    b31c:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    b31e:	cmp	r3, #108	; 0x6c
    b320:	bhi.n	b416 <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    b322:	cmp	r3, #53	; 0x35
    b324:	bhi.n	b424 <set_arm_clock+0x220>
    b326:	ldr.w	r8, [pc, #348]	; b484 <set_arm_clock+0x280>
    b32a:	movs	r3, #54	; 0x36
    b32c:	ldr	r0, [pc, #304]	; (b460 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b32e:	ldr.w	ip, [pc, #284]	; b44c <set_arm_clock+0x248>
    b332:	ldr	r5, [pc, #304]	; (b464 <set_arm_clock+0x260>)
    b334:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b338:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b33c:	and.w	r5, r9, r5
    b340:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b342:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b346:	beq.n	b360 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b348:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b34c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b350:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b352:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b356:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b35a:	ldr	r3, [r5, #0]
    b35c:	cmp	r3, #0
    b35e:	bge.n	b35a <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b360:	ldr.w	ip, [pc, #212]	; b438 <set_arm_clock+0x234>
    b364:	subs	r2, #1
    b366:	ldr.w	r3, [ip, #16]
    b36a:	and.w	r3, r3, #7
    b36e:	cmp	r3, r2
    b370:	beq.n	b382 <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b372:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b376:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b378:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b37c:	ldr	r3, [r5, #72]	; 0x48
    b37e:	lsls	r3, r3, #15
    b380:	bmi.n	b37c <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b382:	subs	r1, #1
    b384:	lsls	r1, r1, #10
    b386:	eor.w	r3, r4, r1
    b38a:	tst.w	r3, #7168	; 0x1c00
    b38e:	beq.n	b3a6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    b390:	ldr	r3, [pc, #164]	; (b438 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b392:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b396:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b39a:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b39c:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    b39e:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b3a0:	ldr	r3, [r2, #72]	; 0x48
    b3a2:	lsls	r1, r3, #30
    b3a4:	bmi.n	b3a0 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b3a6:	ldr	r3, [pc, #192]	; (b468 <set_arm_clock+0x264>)
    b3a8:	ldr	r1, [pc, #192]	; (b46c <set_arm_clock+0x268>)
    b3aa:	add	r3, r0
    b3ac:	lsrs	r3, r3, #7
    b3ae:	umull	r3, r1, r1, r3
    b3b2:	lsrs	r1, r1, #12
    b3b4:	cmp	r1, #4
    b3b6:	it	cs
    b3b8:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b3ba:	subs	r3, r1, #1
    b3bc:	lsls	r3, r3, #8
    b3be:	eor.w	r2, r4, r3
    b3c2:	tst.w	r2, #768	; 0x300
    b3c6:	beq.n	b3d6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b3c8:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b3cc:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b3d0:	ldr	r2, [pc, #100]	; (b438 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b3d2:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b3d4:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    b3d6:	ldr	r3, [pc, #96]	; (b438 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b3d8:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b3dc:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    b3de:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b3e0:	ldr	r3, [r2, #72]	; 0x48
    b3e2:	lsls	r3, r3, #26
    b3e4:	bmi.n	b3e0 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    b3e6:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    b3ea:	ldr	r2, [pc, #132]	; (b470 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b3ec:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    b3ee:	ldr	r3, [pc, #132]	; (b474 <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    b3f0:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b3f2:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b3f4:	bcs.n	b408 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b3f6:	ldr	r3, [pc, #68]	; (b43c <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b3f8:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b3fc:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b3fe:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    b400:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b402:	ldr	r3, [r2, #0]
    b404:	cmp	r3, #0
    b406:	bge.n	b402 <set_arm_clock+0x1fe>
	}

	return frequency;
}
    b408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    b40c:	cmp	r1, #4
    b40e:	bhi.n	b312 <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    b410:	adds	r1, #1
				div_arm = 1;
    b412:	movs	r2, #1
    b414:	b.n	b2f2 <set_arm_clock+0xee>
    b416:	ldr.w	r8, [pc, #112]	; b488 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    b41a:	movs	r3, #108	; 0x6c
    b41c:	ldr	r0, [pc, #88]	; (b478 <set_arm_clock+0x274>)
    b41e:	b.n	b32e <set_arm_clock+0x12a>
    b420:	movs	r6, #18
    b422:	b.n	b25c <set_arm_clock+0x58>
    b424:	ldr	r0, [pc, #84]	; (b47c <set_arm_clock+0x278>)
    b426:	ldr.w	r8, [pc, #100]	; b48c <set_arm_clock+0x288>
    b42a:	mul.w	r0, r0, r3
    b42e:	orr.w	r8, r3, r8
    b432:	b.n	b32e <set_arm_clock+0x12a>
    b434:	.word	0x1f78a400
    b438:	.word	0x400fc000
    b43c:	.word	0x40080000
    b440:	.word	0x23c34600
    b444:	.word	0xdc3cba00
    b448:	.word	0x51eb851f
    b44c:	.word	0x400d8000
    b450:	.word	0x80003040
    b454:	.word	0x269fb1ff
    b458:	.word	0x005b8d80
    b45c:	.word	0x165e9f81
    b460:	.word	0x269fb200
    b464:	.word	0x8001307f
    b468:	.word	0x08f0d17f
    b46c:	.word	0x00e5109f
    b470:	.word	0x20000dc4
    b474:	.word	0x20000dc0
    b478:	.word	0x4d3f6400
    b47c:	.word	0x00b71b00
    b480:	.word	0x004cb223
    b484:	.word	0x80002036
    b488:	.word	0x8000206c
    b48c:	.word	0x80002000

0000b490 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b490:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    b492:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b494:	cbz	r3, b49e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    b496:	ldr	r3, [r2, #4]
    b498:	orr.w	r3, r3, #32768	; 0x8000
    b49c:	str	r3, [r2, #4]
	}
	__disable_irq();
    b49e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    b4a0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    b4a2:	cbz	r4, b4cc <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    b4a4:	ldr	r3, [pc, #64]	; (b4e8 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    b4a6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    b4a8:	ldr.w	r4, [r3, #432]	; 0x1b0
    b4ac:	tst	r4, r1
    b4ae:	bne.n	b4e0 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    b4b0:	ldr.w	r4, [r3, #320]	; 0x140
    b4b4:	orr.w	r4, r4, #16384	; 0x4000
    b4b8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    b4bc:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    b4c0:	ldr.w	r4, [r3, #320]	; 0x140
    b4c4:	lsls	r4, r4, #17
    b4c6:	bpl.n	b4b0 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    b4c8:	tst	r1, r5
    b4ca:	bne.n	b4e0 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    b4cc:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    b4ce:	ldr	r4, [pc, #24]	; (b4e8 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    b4d0:	str	r2, [r0, #8]
	endpoint->status = 0;
    b4d2:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    b4d4:	ldr.w	r3, [r4, #432]	; 0x1b0
    b4d8:	orrs	r1, r3
    b4da:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b4de:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    b4e0:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b4e2:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b4e4:	pop	{r4, r5}
    b4e6:	bx	lr
    b4e8:	.word	0x402e0000

0000b4ec <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b4ec:	push	{r3, r4, r5, lr}
    b4ee:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    b4f0:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    b4f2:	b.n	b502 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    b4f4:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    b4f6:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    b4f8:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    b4fa:	ldr	r2, [r5, #52]	; 0x34
    b4fc:	mov	r3, r4
    b4fe:	cmp	r4, r2
    b500:	beq.n	b514 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    b502:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    b504:	cbz	r3, b514 <run_callbacks+0x28>
    b506:	cmp	r3, #1
    b508:	beq.n	b514 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    b50a:	ldr	r2, [r3, #4]
    b50c:	lsls	r2, r2, #24
    b50e:	bpl.n	b4f4 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    b510:	str	r3, [r5, #48]	; 0x30
			return;
    b512:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    b514:	movs	r3, #0
    b516:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    b518:	str	r3, [r5, #52]	; 0x34
    b51a:	pop	{r3, r4, r5, pc}

0000b51c <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b51c:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    b51e:	cbnz	r1, b552 <endpoint0_transmit.constprop.0+0x36>
    b520:	ldr	r4, [pc, #124]	; (b5a0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b522:	ldr	r3, [pc, #128]	; (b5a4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b524:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b526:	ldr	r0, [pc, #128]	; (b5a8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b528:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b52a:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    b52c:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b52e:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    b530:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b532:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    b534:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    b536:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b53a:	ldr	r5, [pc, #112]	; (b5ac <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b53c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b540:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b542:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b546:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    b548:	ldr.w	r3, [r2, #432]	; 0x1b0
    b54c:	cmp	r3, #0
    b54e:	bne.n	b548 <endpoint0_transmit.constprop.0+0x2c>
}
    b550:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b552:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b554:	ldr	r3, [pc, #88]	; (b5b0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b556:	ldr	r5, [pc, #80]	; (b5a8 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b558:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b55a:	ldr	r4, [pc, #68]	; (b5a0 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b55c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    b560:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b562:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b564:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b566:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    b56a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b56c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b570:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b572:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b576:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b57a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    b57e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b580:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b582:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b586:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b58a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b58e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b590:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b592:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b596:	ldr.w	r3, [r2, #432]	; 0x1b0
    b59a:	cmp	r3, #0
    b59c:	bne.n	b596 <endpoint0_transmit.constprop.0+0x7a>
    b59e:	b.n	b522 <endpoint0_transmit.constprop.0+0x6>
    b5a0:	.word	0x20010000
    b5a4:	.word	0x2000f020
    b5a8:	.word	0x402e0000
    b5ac:	.word	0x2000ded0
    b5b0:	.word	0x2000f000

0000b5b4 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    b5b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    b5b8:	ldr	r4, [pc, #696]	; (b874 <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    b5ba:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    b5bc:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b5c0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    b5c4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b5c8:	beq.n	b688 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b5ca:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b5ce:	cmp	r3, #0
    b5d0:	beq.n	b67e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b5d2:	mov.w	r9, #65537	; 0x10001
    b5d6:	ldr.w	fp, [pc, #700]	; b894 <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b5da:	mov	r6, r4
    b5dc:	ldr	r7, [pc, #664]	; (b878 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b5de:	mov	sl, r9
    b5e0:	ldr	r1, [r7, #40]	; 0x28
    b5e2:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    b5e4:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b5e8:	ldr.w	r3, [r4, #320]	; 0x140
    b5ec:	orr.w	r3, r3, #8192	; 0x2000
    b5f0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b5f4:	ldr.w	r3, [r4, #320]	; 0x140
    b5f8:	lsls	r5, r3, #18
    b5fa:	bpl.n	b5e8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b5fc:	ldr.w	r3, [r6, #320]	; 0x140
    b600:	bic.w	r3, r3, #8192	; 0x2000
    b604:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b608:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b60c:	ldr.w	r3, [r4, #436]	; 0x1b4
    b610:	ands.w	r3, r3, #65537	; 0x10001
    b614:	bne.n	b60c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b616:	uxth	r0, r1
    b618:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    b61c:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b620:	cmp	r0, r5
    b622:	bhi.w	b746 <isr+0x192>
    b626:	cmp.w	r0, #1664	; 0x680
    b62a:	bcs.w	b990 <isr+0x3dc>
    b62e:	cmp.w	r0, #258	; 0x102
    b632:	beq.w	b8b0 <isr+0x2fc>
    b636:	bhi.w	b7cc <isr+0x218>
    b63a:	cmp	r0, #128	; 0x80
    b63c:	beq.w	b85a <isr+0x2a6>
    b640:	cmp	r0, #130	; 0x82
    b642:	bne.w	b7bc <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b646:	uxth	r2, r2
    b648:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b64c:	cmp	r1, #7
    b64e:	bhi.w	b7bc <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b652:	lsls	r1, r1, #2
    b654:	ldr	r0, [pc, #548]	; (b87c <isr+0x2c8>)
		reply_buffer[0] = 0;
    b656:	ldr	r5, [pc, #552]	; (b880 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b658:	add	r0, r1
    b65a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b65c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    b65e:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    b660:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b662:	bpl.w	b9e2 <isr+0x42e>
    b666:	lsls	r2, r1, #15
    b668:	bpl.n	b66e <isr+0xba>
			reply_buffer[0] = 1;
    b66a:	movs	r3, #1
    b66c:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    b66e:	movs	r1, #2
    b670:	ldr	r0, [pc, #524]	; (b880 <isr+0x2cc>)
    b672:	bl	b51c <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b676:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b67a:	cmp	r3, #0
    b67c:	bne.n	b5e0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b67e:	ldr	r2, [pc, #500]	; (b874 <isr+0x2c0>)
    b680:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    b684:	cmp	r3, #0
    b686:	bne.n	b712 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    b688:	tst.w	r8, #64	; 0x40
    b68c:	beq.n	b6c0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b68e:	ldr	r3, [pc, #484]	; (b874 <isr+0x2c0>)
    b690:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b694:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b696:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b69a:	ldr.w	r1, [r3, #444]	; 0x1bc
    b69e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b6a2:	ldr.w	r4, [r2, #432]	; 0x1b0
    b6a6:	ldr	r3, [pc, #460]	; (b874 <isr+0x2c0>)
    b6a8:	cmp	r4, #0
    b6aa:	bne.n	b6a2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b6ac:	mov.w	r2, #4294967295
    b6b0:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b6b4:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    b6b8:	bl	af90 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    b6bc:	ldr	r3, [pc, #452]	; (b884 <isr+0x2d0>)
    b6be:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    b6c0:	tst.w	r8, #16777216	; 0x1000000
    b6c4:	beq.n	b6ce <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b6c6:	ldr	r3, [pc, #448]	; (b888 <isr+0x2d4>)
    b6c8:	ldr	r3, [r3, #0]
    b6ca:	cbz	r3, b6ce <isr+0x11a>
    b6cc:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    b6ce:	tst.w	r8, #33554432	; 0x2000000
    b6d2:	beq.n	b6dc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b6d4:	ldr	r3, [pc, #436]	; (b88c <isr+0x2d8>)
    b6d6:	ldr	r3, [r3, #0]
    b6d8:	cbz	r3, b6dc <isr+0x128>
    b6da:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    b6dc:	tst.w	r8, #4
    b6e0:	beq.n	b6e8 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b6e2:	ldr	r3, [pc, #400]	; (b874 <isr+0x2c0>)
    b6e4:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b6e8:	ldr	r3, [pc, #392]	; (b874 <isr+0x2c0>)
    b6ea:	ldr.w	r2, [r3, #328]	; 0x148
    b6ee:	lsls	r2, r2, #24
    b6f0:	bpl.n	b70c <isr+0x158>
    b6f2:	tst.w	r8, #128	; 0x80
    b6f6:	beq.n	b70c <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    b6f8:	ldr	r1, [pc, #404]	; (b890 <isr+0x2dc>)
    b6fa:	ldrb	r2, [r1, #0]
    b6fc:	cmp	r2, #0
    b6fe:	beq.w	b9d0 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    b702:	subs	r3, r2, #1
    b704:	uxtb	r3, r3
    b706:	strb	r3, [r1, #0]
    b708:	cbnz	r3, b70c <isr+0x158>
				asm("bkpt #251"); // run bootloader
    b70a:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    b70c:	add	sp, #12
    b70e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b712:	ldr	r1, [pc, #384]	; (b894 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    b714:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b718:	ldr	r0, [r1, #0]
    b71a:	tst	r3, r0
    b71c:	bne.w	ba5e <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    b720:	ldr	r2, [pc, #352]	; (b884 <isr+0x2d0>)
    b722:	ldr	r4, [r2, #0]
			if (completestatus) {
    b724:	ands	r4, r3
    b726:	beq.n	b688 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b728:	lsls	r6, r4, #29
    b72a:	bmi.w	ba98 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b72e:	lsls	r5, r4, #13
    b730:	bmi.w	baa8 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b734:	lsls	r0, r4, #28
    b736:	bmi.w	baa0 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b73a:	lsls	r1, r4, #12
    b73c:	bpl.n	b688 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b73e:	ldr	r0, [pc, #344]	; (b898 <isr+0x2e4>)
    b740:	bl	b4ec <run_callbacks>
    b744:	b.n	b688 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b746:	movw	r5, #8225	; 0x2021
    b74a:	cmp	r0, r5
    b74c:	beq.n	b7b4 <isr+0x200>
    b74e:	bhi.n	b818 <isr+0x264>
    b750:	cmp.w	r0, #2176	; 0x880
    b754:	beq.w	b974 <isr+0x3c0>
    b758:	cmp.w	r0, #2304	; 0x900
    b75c:	bne.n	b7bc <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b75e:	ubfx	r1, r1, #16, #8
    b762:	ldr	r2, [pc, #312]	; (b89c <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b764:	ldr	r0, [pc, #312]	; (b8a0 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b766:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b768:	ldr	r1, [pc, #312]	; (b8a4 <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b76a:	ldr	r2, [pc, #316]	; (b8a8 <isr+0x2f4>)
    b76c:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b76e:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b772:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b776:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    b77a:	bl	af94 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b77e:	ldr	r2, [pc, #300]	; (b8ac <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b780:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b782:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b784:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    b786:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b788:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b78a:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b78c:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b790:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b792:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b794:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b798:	ldr	r2, [pc, #248]	; (b894 <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b79a:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b79e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b7a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b7a4:	cmp	r3, #0
    b7a6:	bne.n	b7a0 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b7a8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b7ac:	cmp	r3, #0
    b7ae:	bne.w	b5e0 <isr+0x2c>
    b7b2:	b.n	b67e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    b7b4:	lsrs	r0, r2, #16
    b7b6:	cmp	r0, #7
    b7b8:	beq.w	b9ea <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b7bc:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b7c0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b7c4:	cmp	r3, #0
    b7c6:	bne.w	b5e0 <isr+0x2c>
    b7ca:	b.n	b67e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b7cc:	movw	r5, #770	; 0x302
    b7d0:	cmp	r0, r5
    b7d2:	beq.w	b91a <isr+0x366>
    b7d6:	cmp.w	r0, #1280	; 0x500
    b7da:	bne.n	b7bc <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b7dc:	ldr	r2, [pc, #204]	; (b8ac <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    b7de:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b7e0:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b7e2:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b7e4:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b7e6:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b7e8:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b7ec:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b7ee:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b7f2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b7f4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b7f8:	ldr.w	r3, [r4, #432]	; 0x1b0
    b7fc:	cmp	r3, #0
    b7fe:	bne.n	b7f8 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b800:	lsrs	r3, r1, #16
    b802:	lsls	r3, r3, #25
    b804:	orr.w	r3, r3, #16777216	; 0x1000000
    b808:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b80c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b810:	cmp	r3, #0
    b812:	bne.w	b5e0 <isr+0x2c>
    b816:	b.n	b67e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b818:	movw	r3, #8737	; 0x2221
    b81c:	cmp	r0, r3
    b81e:	beq.n	b908 <isr+0x354>
    b820:	movw	r3, #8993	; 0x2321
    b824:	cmp	r0, r3
    b826:	bne.n	b7bc <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b828:	ldr	r3, [pc, #128]	; (b8ac <isr+0x2f8>)
    b82a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    b82c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b82e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b830:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b832:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b834:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b838:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b83a:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b83e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b840:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b842:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b846:	ldr.w	r3, [r4, #432]	; 0x1b0
    b84a:	cmp	r3, #0
    b84c:	bne.n	b846 <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b84e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b852:	cmp	r3, #0
    b854:	bne.w	b5e0 <isr+0x2c>
    b858:	b.n	b67e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b85a:	ldr	r2, [pc, #36]	; (b880 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    b85c:	movs	r1, #2
    b85e:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b860:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b862:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b864:	bl	b51c <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b868:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b86c:	cmp	r3, #0
    b86e:	bne.w	b5e0 <isr+0x2c>
    b872:	b.n	b67e <isr+0xca>
    b874:	.word	0x402e0000
    b878:	.word	0x20010000
    b87c:	.word	0x402e01c0
    b880:	.word	0x2000dee0
    b884:	.word	0x2000dec8
    b888:	.word	0x2000dec4
    b88c:	.word	0x2000decc
    b890:	.word	0x2000ded4
    b894:	.word	0x2000ded0
    b898:	.word	0x200101c0
    b89c:	.word	0x2000def0
    b8a0:	.word	0x00cc0002
    b8a4:	.word	0x000200c8
    b8a8:	.word	0x00c80002
    b8ac:	.word	0x2000f020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b8b0:	uxth	r2, r2
    b8b2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b8b6:	cmp	r3, #7
    b8b8:	bhi.n	b7bc <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b8ba:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b8be:	mov.w	r3, r3, lsl #2
    b8c2:	ldr	r2, [pc, #492]	; (bab0 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b8c4:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b8c8:	add	r2, r3
    b8ca:	ldr	r3, [r2, #0]
    b8cc:	ite	ne
    b8ce:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b8d2:	biceq.w	r3, r3, #1
    b8d6:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b8d8:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b8da:	ldr	r3, [pc, #472]	; (bab4 <isr+0x500>)
    b8dc:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b8de:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b8e0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b8e2:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b8e6:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b8e8:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b8ec:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b8ee:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b8f0:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b8f4:	ldr.w	r3, [r4, #432]	; 0x1b0
    b8f8:	cmp	r3, #0
    b8fa:	bne.n	b8f4 <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b8fc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b900:	cmp	r3, #0
    b902:	bne.w	b5e0 <isr+0x2c>
    b906:	b.n	b67e <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b908:	ldr	r3, [pc, #428]	; (bab8 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    b90a:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b90e:	ldr	r2, [pc, #428]	; (babc <isr+0x508>)
    b910:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b912:	ldr	r3, [pc, #428]	; (bac0 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b914:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b916:	strb	r1, [r3, #0]
    b918:	b.n	b828 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b91a:	uxth	r2, r2
    b91c:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b920:	cmp	r3, #7
    b922:	bhi.w	b7bc <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b926:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b92a:	mov.w	r3, r3, lsl #2
    b92e:	ldr	r2, [pc, #384]	; (bab0 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b930:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b934:	add	r2, r3
    b936:	ldr	r3, [r2, #0]
    b938:	ite	ne
    b93a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b93e:	orreq.w	r3, r3, #1
    b942:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b944:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b946:	ldr	r3, [pc, #364]	; (bab4 <isr+0x500>)
    b948:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b94a:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b94c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b94e:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b952:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b954:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b958:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b95a:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b95c:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b960:	ldr.w	r3, [r4, #432]	; 0x1b0
    b964:	cmp	r3, #0
    b966:	bne.n	b960 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b968:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b96c:	cmp	r3, #0
    b96e:	bne.w	b5e0 <isr+0x2c>
    b972:	b.n	b67e <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b974:	ldr	r2, [pc, #332]	; (bac4 <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b976:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b978:	ldr	r3, [pc, #332]	; (bac8 <isr+0x514>)
    b97a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b97c:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b97e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b980:	bl	b51c <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b984:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b988:	cmp	r3, #0
    b98a:	bne.w	b5e0 <isr+0x2c>
    b98e:	b.n	b67e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b990:	ldr	r3, [pc, #312]	; (bacc <isr+0x518>)
    b992:	ldr	r0, [r3, #4]
    b994:	cmp	r0, #0
    b996:	beq.w	b7bc <isr+0x208>
    b99a:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b99c:	uxth.w	lr, r2
    b9a0:	b.n	b9ac <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b9a2:	adds	r3, #12
    b9a4:	ldr	r0, [r3, #4]
    b9a6:	cmp	r0, #0
    b9a8:	beq.w	b7bc <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b9ac:	ldrh	r5, [r3, #0]
    b9ae:	cmp	r5, r1
    b9b0:	bne.n	b9a2 <isr+0x3ee>
    b9b2:	ldrh	r5, [r3, #2]
    b9b4:	cmp	r5, lr
    b9b6:	bne.n	b9a2 <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    b9b8:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b9ba:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    b9bc:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    b9be:	ite	eq
    b9c0:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    b9c2:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    b9c4:	cmp	r1, r2
    b9c6:	it	cs
    b9c8:	movcs	r1, r2
    b9ca:	bl	b51c <endpoint0_transmit.constprop.0>
    b9ce:	b.n	b676 <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    b9d0:	ldr.w	r2, [r3, #328]	; 0x148
    b9d4:	bic.w	r2, r2, #128	; 0x80
    b9d8:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    b9dc:	add	sp, #12
    b9de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b9e2:	lsls	r3, r1, #31
    b9e4:	bpl.w	b66e <isr+0xba>
    b9e8:	b.n	b66a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b9ea:	ldr	r5, [pc, #228]	; (bad0 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b9ec:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    b9ee:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b9f0:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b9f2:	ldr	r3, [pc, #224]	; (bad4 <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    b9f4:	ldr	r1, [pc, #224]	; (bad8 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b9f6:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    b9f8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b9fa:	ldr	r1, [pc, #224]	; (badc <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b9fc:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ba00:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ba02:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ba06:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ba0a:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ba0e:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ba12:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ba14:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ba16:	sub.w	r0, r1, #4096	; 0x1000
    ba1a:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ba1c:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ba20:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ba22:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ba24:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    ba28:	ldr.w	r3, [r4, #432]	; 0x1b0
    ba2c:	cmp	r3, #0
    ba2e:	bne.n	ba28 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    ba30:	ldr	r2, [pc, #128]	; (bab4 <isr+0x500>)
    ba32:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    ba34:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ba36:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ba38:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ba3a:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ba3e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ba40:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ba44:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ba46:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ba4a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ba4c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ba50:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    ba54:	ldr.w	r3, [r4, #432]	; 0x1b0
    ba58:	cmp	r3, #0
    ba5a:	bne.n	ba54 <isr+0x4a0>
    ba5c:	b.n	b676 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ba5e:	ldr	r4, [pc, #112]	; (bad0 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ba60:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ba64:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ba66:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ba68:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ba6a:	cmp	r4, r0
    ba6c:	bne.w	b720 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ba70:	ldr	r1, [pc, #108]	; (bae0 <isr+0x52c>)
    ba72:	ldr	r4, [pc, #112]	; (bae4 <isr+0x530>)
    ba74:	ldmia	r1, {r0, r1}
    ba76:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ba78:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ba7a:	str	r0, [r4, #0]
    ba7c:	strh	r1, [r4, #4]
    ba7e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ba80:	bne.w	b720 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    ba84:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ba88:	movs	r4, #80	; 0x50
    ba8a:	ldr	r0, [pc, #92]	; (bae8 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    ba8c:	orr.w	r1, r1, #128	; 0x80
    ba90:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ba94:	strb	r4, [r0, #0]
    ba96:	b.n	b720 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    ba98:	ldr	r0, [pc, #80]	; (baec <isr+0x538>)
    ba9a:	bl	b4ec <run_callbacks>
    ba9e:	b.n	b72e <isr+0x17a>
    baa0:	ldr	r0, [pc, #76]	; (baf0 <isr+0x53c>)
    baa2:	bl	b4ec <run_callbacks>
    baa6:	b.n	b73a <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    baa8:	ldr	r0, [pc, #72]	; (baf4 <isr+0x540>)
    baaa:	bl	b4ec <run_callbacks>
    baae:	b.n	b734 <isr+0x180>
    bab0:	.word	0x402e01c0
    bab4:	.word	0x2000f020
    bab8:	.word	0x2000df18
    babc:	.word	0x2000e7ac
    bac0:	.word	0x2000dec1
    bac4:	.word	0x2000def0
    bac8:	.word	0x2000dee0
    bacc:	.word	0x20000810
    bad0:	.word	0x2000ded8
    bad4:	.word	0x2000f000
    bad8:	.word	0x00078080
    badc:	.word	0x2000fee8
    bae0:	.word	0x2000dee8
    bae4:	.word	0x2000e7a4
    bae8:	.word	0x2000ded4
    baec:	.word	0x20010100
    baf0:	.word	0x20010180
    baf4:	.word	0x20010140

0000baf8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    baf8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bafa:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    bafe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bb02:	ite	ne
    bb04:	movne	r7, #0
    bb06:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bb0a:	cmp	r2, #2
    bb0c:	bls.n	bb12 <usb_config_rx+0x1a>
    bb0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    bb12:	mov.w	sl, r0, lsl #7
    bb16:	ldr.w	r9, [pc, #64]	; bb58 <usb_config_rx+0x60>
    bb1a:	mov	r5, r1
    bb1c:	mov	r4, r0
    bb1e:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    bb22:	movs	r1, #0
    bb24:	movs	r2, #64	; 0x40
    bb26:	mov	r8, r3
    bb28:	mov	r0, r6
    bb2a:	bl	dc44 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    bb2e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    bb30:	orr.w	r1, r7, r5, lsl #16
    bb34:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    bb38:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    bb3c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    bb3e:	cmp.w	r8, #0
    bb42:	beq.n	bb0e <usb_config_rx+0x16>
    bb44:	ldr	r3, [pc, #12]	; (bb54 <usb_config_rx+0x5c>)
    bb46:	lsls	r0, r4
    bb48:	ldr	r4, [r3, #0]
    bb4a:	orrs	r0, r4
    bb4c:	str	r0, [r3, #0]
    bb4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb52:	nop
    bb54:	.word	0x2000dec8
    bb58:	.word	0x20010000

0000bb5c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bb5c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bb5e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    bb62:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    bb66:	ite	ne
    bb68:	movne	r7, #0
    bb6a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    bb6e:	cmp	r2, #2
    bb70:	bls.n	bb76 <usb_config_tx+0x1a>
    bb72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    bb76:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    bb78:	lsls	r5, r0, #7
    bb7a:	ldr.w	r9, [pc, #68]	; bbc0 <usb_config_tx+0x64>
    bb7e:	mov	r8, r1
    bb80:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    bb82:	movs	r1, #0
    bb84:	mov	r4, r0
    bb86:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    bb88:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    bb8c:	mov	r0, sl
    bb8e:	bl	dc44 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    bb92:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    bb94:	orr.w	r1, r7, r8, lsl #16
    bb98:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    bb9c:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    bba0:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    bba4:	cmp	r6, #0
    bba6:	beq.n	bb72 <usb_config_tx+0x16>
    bba8:	add.w	r0, r4, #16
    bbac:	ldr	r3, [pc, #12]	; (bbbc <usb_config_tx+0x60>)
    bbae:	lsls	r2, r0
    bbb0:	ldr	r0, [r3, #0]
    bbb2:	orrs	r2, r0
    bbb4:	str	r2, [r3, #0]
    bbb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbba:	nop
    bbbc:	.word	0x2000dec8
    bbc0:	.word	0x20010000

0000bbc4 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    bbc4:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    bbc6:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    bbc8:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    bbca:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    bbce:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    bbd0:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    bbd2:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    bbd4:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    bbd8:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    bbdc:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    bbe0:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    bbe4:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    bbe6:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    bbe8:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    bbea:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    bbec:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    bbee:	pop	{r4, r5, r6, r7}
    bbf0:	bx	lr
    bbf2:	nop

0000bbf4 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bbf4:	subs	r3, r0, #2
    bbf6:	cmp	r3, #2
    bbf8:	bls.n	bbfc <usb_transmit+0x8>
    bbfa:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    bbfc:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    bbfe:	ldr	r3, [pc, #24]	; (bc18 <usb_transmit+0x24>)
    bc00:	add.w	r4, r0, #16
    bc04:	movs	r5, #1
    bc06:	mov	r2, r1
    bc08:	add.w	r0, r3, r0, lsl #7
    bc0c:	lsl.w	r1, r5, r4
}
    bc10:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    bc12:	b.w	b490 <schedule_transfer>
    bc16:	nop
    bc18:	.word	0x20010040

0000bc1c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bc1c:	subs	r3, r0, #2
    bc1e:	cmp	r3, #2
    bc20:	bls.n	bc24 <usb_receive+0x8>
    bc22:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    bc24:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    bc26:	ldr	r3, [pc, #20]	; (bc3c <usb_receive+0x20>)
    bc28:	movs	r4, #1
    bc2a:	mov	r2, r1
    bc2c:	lsl.w	r1, r4, r0
    bc30:	add.w	r0, r3, r0, lsl #7
}
    bc34:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    bc38:	b.w	b490 <schedule_transfer>
    bc3c:	.word	0x20010000

0000bc40 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    bc40:	ldr	r2, [pc, #32]	; (bc64 <usb_transfer_status+0x24>)
    bc42:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    bc46:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    bc48:	orr.w	r3, r3, #16384	; 0x4000
    bc4c:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    bc50:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    bc52:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    bc56:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    bc58:	tst.w	r3, #16384	; 0x4000
    bc5c:	beq.n	bc46 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    bc5e:	mov	r0, r1
    bc60:	bx	lr
    bc62:	nop
    bc64:	.word	0x402e0000

0000bc68 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    bc68:	ldr	r3, [pc, #36]	; (bc90 <rtc_set+0x28>)
    bc6a:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    bc6c:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    bc6e:	bic.w	r2, r2, #1
    bc72:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    bc74:	ldr	r3, [r1, #8]
    bc76:	ldr	r2, [pc, #24]	; (bc90 <rtc_set+0x28>)
    bc78:	lsls	r3, r3, #31
    bc7a:	bmi.n	bc74 <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    bc7c:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    bc7e:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    bc80:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    bc82:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    bc84:	ldr	r3, [r2, #8]
    bc86:	orr.w	r3, r3, #1
    bc8a:	str	r3, [r2, #8]
    bc8c:	bx	lr
    bc8e:	nop
    bc90:	.word	0x400d4000

0000bc94 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bc94:	ldr	r3, [pc, #84]	; (bcec <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    bc96:	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bc98:	movs	r1, #1
    bc9a:	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    bc9c:	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bc9e:	ldr	r7, [pc, #80]	; (bcf0 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    bca0:	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bca2:	ldr	r5, [pc, #80]	; (bcf4 <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    bca4:	ldr	r4, [pc, #80]	; (bcf8 <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bca6:	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    bcaa:	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bcae:	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    bcb2:	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bcb6:	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bcba:	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    bcbe:	ldr	r3, [r2, #20]
    bcc0:	lsls	r0, r3, #31
    bcc2:	bmi.n	bccc <flash_wait+0x38>
			asm("nop");
    bcc4:	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    bcc6:	ldr	r3, [r2, #20]
    bcc8:	lsls	r3, r3, #31
    bcca:	bpl.n	bcc4 <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    bccc:	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bcce:	ldr	r0, [pc, #28]	; (bcec <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    bcd0:	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bcd2:	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    bcd4:	bmi.n	bcae <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    bcd6:	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    bcd8:	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    bcda:	orr.w	r3, r3, #1
    bcde:	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    bce0:	ldr	r3, [r2, #0]
    bce2:	lsls	r3, r3, #31
    bce4:	bmi.n	bce0 <flash_wait+0x4c>
	__enable_irq();
    bce6:	cpsie	i
}
    bce8:	pop	{r4, r5, r6, r7}
    bcea:	bx	lr
    bcec:	.word	0x402a8000
    bcf0:	.word	0x24010405
    bcf4:	.word	0x000f0001
    bcf8:	.word	0x402a8100

0000bcfc <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    bcfc:	push	{r3, r4, r5, r6, r7, lr}
    bcfe:	mov	r5, r1
{
	__disable_irq();
    bd00:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bd02:	ldr	r2, [pc, #176]	; (bdb4 <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    bd04:	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bd06:	ldr	r6, [pc, #176]	; (bdb8 <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bd08:	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bd0a:	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bd0e:	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bd12:	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd14:	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bd16:	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bd18:	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    bd1c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bd20:	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    bd24:	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    bd26:	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bd2a:	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bd2e:	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bd32:	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd36:	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    bd3a:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    bd3e:	ldr	r2, [pc, #124]	; (bdbc <flash_write.constprop.0+0xc0>)
    bd40:	str	r3, [r2, #0]
		location += 32;
    bd42:	adds	r3, #32
	} while (location < end_addr);
    bd44:	cmp	r1, r3
    bd46:	bhi.n	bd40 <flash_write.constprop.0+0x44>
	asm("dsb");
    bd48:	dsb	sy
	asm("isb");
    bd4c:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bd50:	ldr	r2, [pc, #96]	; (bdb4 <flash_write.constprop.0+0xb8>)
    bd52:	ldr	r3, [r2, #20]
    bd54:	ldr	r1, [pc, #92]	; (bdb4 <flash_write.constprop.0+0xb8>)
    bd56:	lsls	r7, r3, #31
    bd58:	bpl.n	bd52 <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd5a:	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bd5c:	ldr	r2, [pc, #96]	; (bdc0 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    bd5e:	ubfx	r0, r0, #0, #21
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bd62:	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bd66:	ldr	r6, [pc, #92]	; (bdc4 <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bd68:	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd6a:	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bd6c:	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd70:	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bd72:	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    bd76:	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    bd7a:	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bd7e:	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd82:	str.w	r3, [r1, #176]	; 0xb0
    bd86:	b.n	bd8c <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    bd88:	lsls	r6, r3, #25
    bd8a:	bmi.n	bda0 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bd8c:	ldr	r3, [r4, #20]
    bd8e:	ldr	r1, [pc, #36]	; (bdb4 <flash_write.constprop.0+0xb8>)
    bd90:	lsls	r0, r3, #31
    bd92:	bpl.n	bd88 <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    bd94:	movs	r3, #65	; 0x41
    bd96:	str	r3, [r1, #20]
	flash_wait();
}
    bd98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    bd9c:	b.w	bc94 <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    bda0:	cbz	r2, bdac <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bda2:	mov	r1, r5
    bda4:	ldr	r0, [pc, #32]	; (bdc8 <flash_write.constprop.0+0xcc>)
				src += wrlen;
    bda6:	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bda8:	bl	ac68 <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    bdac:	movs	r3, #64	; 0x40
    bdae:	movs	r2, #0
    bdb0:	str	r3, [r4, #20]
    bdb2:	b.n	bd8c <flash_write.constprop.0+0x90>
    bdb4:	.word	0x402a8000
    bdb8:	.word	0x5af05af0
    bdbc:	.word	0xe000ef5c
    bdc0:	.word	0x08180432
    bdc4:	.word	0x000f0002
    bdc8:	.word	0x402a8180

0000bdcc <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    bdcc:	push	{r4, r5, r6, r7}
    bdce:	ldr	r6, [pc, #56]	; (be08 <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    bdd0:	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    bdd4:	ldr	r4, [pc, #52]	; (be0c <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bdd6:	ldr	r7, [pc, #56]	; (be10 <eeprom_initialize+0x44>)
    bdd8:	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    bddc:	movs	r2, #0
    bdde:	b.n	bde6 <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    bde0:	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    bde2:	uxth	r2, r0
		} while (p < end);
    bde4:	bls.n	bdf0 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    bde6:	ldrh.w	r1, [r3], #2
			index++;
    bdea:	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    bdec:	cmp	r1, r5
    bdee:	bne.n	bde0 <eeprom_initialize+0x14>
    bdf0:	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    bdf4:	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bdf8:	cmp	r4, r7
    bdfa:	bne.n	bdd8 <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    bdfc:	ldr	r3, [pc, #20]	; (be14 <eeprom_initialize+0x48>)
    bdfe:	movs	r2, #1
    be00:	strb	r2, [r3, #0]
}
    be02:	pop	{r4, r5, r6, r7}
    be04:	bx	lr
    be06:	nop
    be08:	.word	0x2000def2
    be0c:	.word	0x601f1000
    be10:	.word	0x60200000
    be14:	.word	0x2000df12

0000be18 <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    be18:	cmp.w	r0, #1080	; 0x438
    be1c:	bcc.n	be22 <eeprom_read_byte+0xa>
    be1e:	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    be20:	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    be22:	ldr	r3, [pc, #84]	; (be78 <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    be24:	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    be26:	ldrb	r3, [r3, #0]
    be28:	mov	r4, r0
    be2a:	cbz	r3, be6e <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    be2c:	lsrs	r5, r4, #2
    be2e:	ldr	r1, [pc, #76]	; (be7c <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    be30:	ldr	r3, [pc, #76]	; (be80 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    be32:	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    be36:	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    be3a:	ldr	r4, [pc, #72]	; (be84 <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    be3c:	lsrs	r1, r1, #3
    be3e:	rsb	r6, r1, r1, lsl #4
    be42:	mov	r2, r1
    be44:	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    be46:	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    be4a:	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    be4c:	add	r3, r1
	end = p + sector_index[sector];
    be4e:	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    be52:	lsls	r3, r3, #12
	end = p + sector_index[sector];
    be54:	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    be58:	cmp	r3, r5
    be5a:	bcs.n	be74 <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    be5c:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    be60:	uxtb	r4, r1
    be62:	cmp	r2, r4
    be64:	it	eq
    be66:	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    be68:	cmp	r5, r3
    be6a:	bhi.n	be5c <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    be6c:	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    be6e:	bl	bdcc <eeprom_initialize>
    be72:	b.n	be2c <eeprom_read_byte+0x14>
    be74:	pop	{r4, r5, r6, pc}
    be76:	nop
    be78:	.word	0x2000df12
    be7c:	.word	0x88888889
    be80:	.word	0x000601f0
    be84:	.word	0x2000def4

0000be88 <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    be88:	cmp.w	r0, #1080	; 0x438
    be8c:	bcs.w	bfe8 <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    be90:	ldr	r3, [pc, #380]	; (c010 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    be92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    be96:	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    be98:	sub	sp, #268	; 0x10c
    be9a:	mov	r9, r1
    be9c:	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    be9e:	cmp	r3, #0
    bea0:	beq.w	c004 <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    bea4:	mov.w	r3, r8, lsr #2
    bea8:	ldr	r5, [pc, #360]	; (c014 <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    beaa:	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    beae:	ldr	r7, [pc, #360]	; (c018 <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    beb0:	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    beb4:	ldr	r6, [pc, #356]	; (c01c <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    beb6:	lsrs	r5, r5, #3
    beb8:	rsb	r2, r5, r5, lsl #4
    bebc:	mov	r8, r5
    bebe:	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bec0:	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bec4:	add	r7, r5
	end = p + sector_index[sector];
    bec6:	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    beca:	lsls	r7, r7, #12
	end = p + sector_index[sector];
    becc:	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    bed0:	cmp	r7, r0
    bed2:	bcs.w	c00a <eeprom_write_byte+0x182>
    bed6:	mov	r3, r7
    bed8:	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    bedc:	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    bee0:	uxtb	r1, r2
    bee2:	cmp	r8, r1
    bee4:	it	eq
    bee6:	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    beea:	cmp	r0, r3
    beec:	bhi.n	bedc <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    beee:	cmp	r9, lr
    bef0:	beq.n	bfe2 <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    bef2:	cmp.w	r4, #2048	; 0x800
    bef6:	bcc.n	bfea <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    bef8:	add	r4, sp, #8
    befa:	mov.w	r2, #256	; 0x100
    befe:	movs	r1, #255	; 0xff
    bf00:	mov	r0, r4
    bf02:	bl	dc44 <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    bf06:	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bf0a:	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    bf0c:	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    bf10:	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    bf12:	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    bf14:	mov.w	r3, r3, lsr #8
    bf18:	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    bf1a:	bhi.n	bf0c <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    bf1c:	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    bf20:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bf22:	ldr	r3, [pc, #252]	; (c020 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    bf24:	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bf26:	ldr	r0, [pc, #252]	; (c024 <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bf28:	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bf2c:	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf30:	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bf34:	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf36:	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bf38:	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bf3c:	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    bf40:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bf44:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bf48:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    bf4c:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf50:	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf54:	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    bf58:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    bf5c:	ldr	r2, [pc, #200]	; (c028 <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bf5e:	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    bf60:	str	r3, [r2, #0]
		location += 32;
    bf62:	adds	r3, #32
	} while (location < end_addr);
    bf64:	cmp	r1, r3
    bf66:	bhi.n	bf60 <eeprom_write_byte+0xd8>
	asm("dsb");
    bf68:	dsb	sy
	asm("isb");
    bf6c:	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bf70:	ldr	r1, [pc, #172]	; (c020 <eeprom_write_byte+0x198>)
    bf72:	ldr	r3, [r1, #20]
    bf74:	ldr	r2, [pc, #168]	; (c020 <eeprom_write_byte+0x198>)
    bf76:	lsls	r0, r3, #31
    bf78:	bpl.n	bf72 <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    bf7a:	ldr	r3, [pc, #176]	; (c02c <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bf7c:	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bf7e:	ldr.w	lr, [pc, #176]	; c030 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf82:	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    bf86:	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bf88:	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bf8a:	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bf8c:	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    bf90:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bf94:	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf98:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bf9c:	ldr	r3, [r1, #20]
    bf9e:	ldr	r2, [pc, #128]	; (c020 <eeprom_write_byte+0x198>)
    bfa0:	lsls	r3, r3, #31
    bfa2:	bpl.n	bf9c <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bfa4:	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    bfa6:	movs	r4, #0
    bfa8:	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bfac:	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    bfae:	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    bfb0:	bl	bc94 <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    bfb4:	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    bfb8:	add.w	r0, r7, r8, lsl #1
    bfbc:	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    bfc0:	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    bfc2:	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    bfc6:	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    bfca:	beq.n	bfd8 <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    bfcc:	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    bfd0:	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    bfd4:	bl	bcfc <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    bfd8:	cmp.w	r4, #256	; 0x100
    bfdc:	bne.n	bfb4 <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    bfde:	strh.w	r8, [r6, r5, lsl #1]
	}
}
    bfe2:	add	sp, #268	; 0x10c
    bfe4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bfe8:	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    bfea:	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    bfee:	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    bff0:	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    bff2:	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    bff6:	bl	bcfc <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    bffa:	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    bffe:	add	sp, #268	; 0x10c
    c000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    c004:	bl	bdcc <eeprom_initialize>
    c008:	b.n	bea4 <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    c00a:	mov.w	lr, #255	; 0xff
    c00e:	b.n	beee <eeprom_write_byte+0x66>
    c010:	.word	0x2000df12
    c014:	.word	0x88888889
    c018:	.word	0x000601f0
    c01c:	.word	0x2000def4
    c020:	.word	0x402a8000
    c024:	.word	0x5af05af0
    c028:	.word	0xe000ef5c
    c02c:	.word	0x001ff000
    c030:	.word	0x08180420

0000c034 <eeprom_write_block>:

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    c034:	cbz	r2, c050 <eeprom_write_block+0x1c>
	eeprom_write_byte(p++, value >> 16);
	eeprom_write_byte(p, value >> 24);
}

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
    c036:	push	{r4, r5, r6, lr}
    c038:	mov	r5, r0
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    c03a:	mov	r4, r2
    c03c:	mov	r0, r1
		eeprom_write_byte(p++, *src++);
    c03e:	ldrb.w	r1, [r5], #1
    c042:	adds	r6, r0, #1
    c044:	bl	be88 <eeprom_write_byte>

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    c048:	subs	r4, #1
		eeprom_write_byte(p++, *src++);
    c04a:	mov	r0, r6

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    c04c:	bne.n	c03e <eeprom_write_block+0xa>
    c04e:	pop	{r4, r5, r6, pc}
    c050:	bx	lr
    c052:	nop

0000c054 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    c054:	cmp	r0, #0
    c056:	beq.n	c0fe <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    c058:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c05c:	mov	r9, r0
    c05e:	sub	sp, #12
    c060:	ldr	r4, [pc, #156]	; (c100 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c062:	movs	r0, #1
    c064:	ldr	r5, [pc, #156]	; (c104 <delay+0xb0>)
    c066:	ldr	r6, [pc, #160]	; (c108 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c068:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    c06c:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    c06e:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c070:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    c074:	cmp	r3, #0
    c076:	bne.n	c068 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    c078:	ldr	r7, [pc, #144]	; (c10c <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c07a:	mov.w	lr, #1000	; 0x3e8
    c07e:	ldr	r0, [pc, #144]	; (c110 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    c080:	ldr.w	ip, [r7]
    c084:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c086:	add.w	r7, r7, #1660944384	; 0x63000000
    c08a:	ldr	r3, [r0, #0]
    c08c:	rsb	r1, r1, ip
    c090:	add.w	r7, r7, #1818624	; 0x1bc000
    c094:	addw	r7, r7, #3711	; 0xe7f
    c098:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    c09c:	mov	sl, r7
    c09e:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c0a0:	lsrs	r3, r3, #18
    c0a2:	udiv	r3, r1, r3
    c0a6:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c0aa:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    c0ae:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    c0b0:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c0b2:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    c0b6:	cmp	r3, #0
    c0b8:	bne.n	c0aa <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    c0ba:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    c0be:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c0c2:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    c0c4:	mul.w	r2, lr, r2
    c0c8:	rsb	r1, r1, ip
    c0cc:	umull	r3, lr, sl, r3
    c0d0:	rsb	r3, r8, r2
    c0d4:	mov.w	r2, lr, lsr #18
    c0d8:	udiv	r1, r1, r2
    c0dc:	adds	r2, r1, r3
    c0de:	cmp.w	r2, #1000	; 0x3e8
    c0e2:	bcc.n	c0f4 <delay+0xa0>
			if (--msec == 0) return;
    c0e4:	subs.w	r9, r9, #1
			start += 1000;
    c0e8:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    c0ec:	bne.n	c0aa <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    c0ee:	add	sp, #12
    c0f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0f4:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    c0f6:	bl	ca20 <yield>
	}
    c0fa:	ldr	r0, [sp, #4]
    c0fc:	b.n	c0aa <delay+0x56>
    c0fe:	bx	lr
    c100:	.word	0x20010280
    c104:	.word	0x2000df18
    c108:	.word	0x2000df14
    c10c:	.word	0xe0001004
    c110:	.word	0x20000dc4

0000c114 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    c114:	push	{r4, r5, r6}
    c116:	ldr	r3, [pc, #56]	; (c150 <micros+0x3c>)
    c118:	movs	r6, #1
    c11a:	ldr	r5, [pc, #56]	; (c154 <micros+0x40>)
    c11c:	ldr	r0, [pc, #56]	; (c158 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c11e:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    c122:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    c124:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c126:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    c12a:	cmp	r2, #0
    c12c:	bne.n	c11e <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    c12e:	ldr	r3, [pc, #44]	; (c15c <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    c130:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c134:	ldr	r2, [pc, #40]	; (c160 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    c136:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    c138:	ldr	r5, [pc, #40]	; (c164 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    c13a:	ldr	r2, [r2, #0]
	return usec;
    c13c:	subs	r4, r3, r4
    c13e:	umull	r2, r3, r5, r2
    c142:	lsrs	r3, r3, #18
    c144:	udiv	r4, r4, r3
}
    c148:	mla	r0, r0, r1, r4
    c14c:	pop	{r4, r5, r6}
    c14e:	bx	lr
    c150:	.word	0x20010280
    c154:	.word	0x2000df18
    c158:	.word	0x2000df14
    c15c:	.word	0xe0001004
    c160:	.word	0x20000dc4
    c164:	.word	0x431bde83

0000c168 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    c168:	lsls	r0, r0, #4
    c16a:	ldr	r3, [pc, #28]	; (c188 <digitalWrite.part.0+0x20>)
    c16c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    c16e:	ldr	r3, [r3, r0]
	mask = p->mask;
    c170:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    c172:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    c174:	tst	r0, r2
    c176:	beq.n	c17e <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    c178:	cbnz	r1, c180 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    c17a:	str.w	r2, [r3, #136]	; 0x88
    c17e:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    c180:	str.w	r2, [r3, #132]	; 0x84
    c184:	bx	lr
    c186:	nop
    c188:	.word	0x20000590

0000c18c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    c18c:	cmp	r0, #39	; 0x27
    c18e:	bhi.n	c194 <digitalWrite+0x8>
    c190:	b.w	c168 <digitalWrite.part.0>
    c194:	bx	lr
    c196:	nop

0000c198 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    c198:	cmp	r0, #39	; 0x27
    c19a:	bhi.n	c1d6 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    c19c:	lsls	r0, r0, #4
    c19e:	ldr	r2, [pc, #104]	; (c208 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c1a0:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    c1a2:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c1a6:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    c1a8:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c1aa:	beq.n	c1d8 <pinMode+0x40>
    c1ac:	cmp	r1, #4
    c1ae:	beq.n	c1d8 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c1b0:	ldr	r4, [r3, #12]
    c1b2:	ldr	r2, [r0, #4]
    c1b4:	bic.w	r2, r2, r4
    c1b8:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c1ba:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    c1bc:	cbz	r1, c1fa <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    c1be:	cmp	r1, #2
    c1c0:	beq.n	c200 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    c1c2:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    c1c4:	ldr	r3, [r3, #4]
}
    c1c6:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c1ca:	ite	eq
    c1cc:	ldreq	r1, [pc, #60]	; (c20c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c1ce:	ldrne	r1, [pc, #64]	; (c210 <pinMode+0x78>)
    c1d0:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    c1d2:	movs	r2, #21
    c1d4:	str	r2, [r3, #0]
}
    c1d6:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c1d8:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    c1da:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c1dc:	ldr	r4, [r0, #4]
    c1de:	orr.w	r2, r2, r4
    c1e2:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c1e4:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    c1e6:	beq.n	c1fa <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    c1e8:	movw	r1, #2104	; 0x838
    c1ec:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    c1ee:	ldr	r3, [r3, #4]
    c1f0:	movs	r2, #21
}
    c1f2:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    c1f6:	str	r2, [r3, #0]
}
    c1f8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c1fa:	movs	r1, #56	; 0x38
    c1fc:	str	r1, [r2, #0]
    c1fe:	b.n	c1ee <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c200:	ldr	r1, [pc, #16]	; (c214 <pinMode+0x7c>)
    c202:	str	r1, [r2, #0]
    c204:	b.n	c1ee <pinMode+0x56>
    c206:	nop
    c208:	.word	0x20000590
    c20c:	.word	0x00013038
    c210:	.word	0x00010038
    c214:	.word	0x0001f038

0000c218 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c218:	ldr	r2, [pc, #72]	; (c264 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c21a:	ldr	r3, [pc, #76]	; (c268 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c21c:	ldr.w	r0, [r2, #544]	; 0x220
    c220:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c224:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c226:	push	{r4, lr}
    c228:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c22a:	bhi.n	c232 <usb_init_serialnumber+0x1a>
    c22c:	add.w	r0, r0, r0, lsl #2
    c230:	lsls	r0, r0, #1
    c232:	ldr	r4, [pc, #56]	; (c26c <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    c234:	add	r1, sp, #4
    c236:	movs	r2, #10
    c238:	bl	cfd0 <ultoa>
    c23c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    c23e:	movs	r3, #0
    c240:	mov	r0, r4
		char c = buf[i];
    c242:	ldrb.w	r2, [r1], #1
    c246:	adds	r3, #1
		if (!c) break;
    c248:	cbz	r2, c25a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    c24a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    c24c:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    c250:	bne.n	c242 <usb_init_serialnumber+0x2a>
    c252:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c254:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    c256:	add	sp, #16
    c258:	pop	{r4, pc}
    c25a:	lsls	r3, r3, #1
    c25c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c25e:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    c260:	add	sp, #16
    c262:	pop	{r4, pc}
    c264:	.word	0x401f4400
    c268:	.word	0x0098967f
    c26c:	.word	0x20000e60

0000c270 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    c270:	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    c274:	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    c278:	uxth	r3, r3
	tail = tx_buffer_tail_;
    c27a:	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c27c:	cmp	r3, r2
    c27e:	bcs.n	c286 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    c280:	subs	r0, r2, #1
    c282:	subs	r0, r0, r3
}
    c284:	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c286:	ldr	r0, [r0, #52]	; 0x34
    c288:	subs	r0, #1
    c28a:	add	r0, r2
    c28c:	subs	r0, r0, r3
    c28e:	bx	lr

0000c290 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    c290:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    c294:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    c298:	uxth	r2, r2
	tail = rx_buffer_tail_;
    c29a:	uxth	r3, r3
	if (head >= tail) return head - tail;
    c29c:	cmp	r2, r3
    c29e:	bcs.n	c2a8 <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    c2a0:	ldr	r0, [r0, #56]	; 0x38
    c2a2:	add	r0, r2
    c2a4:	subs	r0, r0, r3
}
    c2a6:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    c2a8:	subs	r0, r2, r3
    c2aa:	bx	lr

0000c2ac <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    c2ac:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    c2b0:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    c2b4:	uxth	r2, r2
	tail = rx_buffer_tail_;
    c2b6:	uxth	r3, r3
	if (head == tail) return -1;
    c2b8:	cmp	r2, r3
    c2ba:	beq.n	c2de <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c2bc:	adds	r3, #1
    c2be:	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    c2c0:	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c2c2:	cmp	r3, r1
    c2c4:	it	cs
    c2c6:	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    c2c8:	cmp	r3, r2
    c2ca:	bcc.n	c2d6 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    c2cc:	subs	r3, r3, r2
    c2ce:	ldr	r2, [r0, #36]	; 0x24
    c2d0:	ldrb	r0, [r2, r3]
    c2d2:	uxtb	r0, r0
    c2d4:	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    c2d6:	ldr	r2, [r0, #32]
    c2d8:	ldrb	r0, [r2, r3]
    c2da:	uxtb	r0, r0
    c2dc:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    c2de:	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    c2e2:	bx	lr

0000c2e4 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    c2e4:	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    c2e8:	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    c2ec:	uxth	r1, r1
	tail = rx_buffer_tail_;
    c2ee:	uxth	r3, r3
	if (head == tail) return -1;
    c2f0:	cmp	r1, r3
    c2f2:	beq.n	c348 <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c2f4:	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    c2f6:	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c2f8:	ldr	r4, [r0, #56]	; 0x38
    c2fa:	cmp	r3, r4
    c2fc:	bcs.n	c32e <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    c2fe:	ldr	r2, [r0, #48]	; 0x30
    c300:	uxth	r6, r3
    c302:	cmp	r3, r2
    c304:	bcs.n	c338 <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    c306:	ldr	r2, [r0, #32]
    c308:	ldrb	r2, [r2, r3]
    c30a:	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    c30c:	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    c30e:	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    c312:	cbz	r5, c342 <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    c314:	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    c316:	it	hi
    c318:	addhi	r1, r1, r4
    c31a:	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    c31c:	ldr	r1, [r0, #60]	; 0x3c
    c31e:	cmp	r3, r1
    c320:	bhi.n	c342 <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    c322:	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    c324:	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    c326:	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    c32a:	pop	{r4, r5, r6}
    c32c:	bx	lr
    c32e:	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    c330:	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c332:	mov	r3, r6
	if (tail < rx_buffer_size_) {
    c334:	cmp	r3, r2
    c336:	bcc.n	c306 <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    c338:	subs	r2, r3, r2
    c33a:	ldr	r5, [r0, #36]	; 0x24
    c33c:	ldrb	r2, [r5, r2]
    c33e:	uxtb	r2, r2
    c340:	b.n	c30c <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    c342:	mov	r0, r2
}	
    c344:	pop	{r4, r5, r6}
    c346:	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    c348:	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    c34c:	bx	lr
    c34e:	nop

0000c350 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    c350:	ldrb.w	r3, [r0, #68]	; 0x44
    c354:	cbz	r3, c368 <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    c356:	push	{r4, lr}
    c358:	mov	r4, r0
	while (transmitting_) yield(); // wait
    c35a:	bl	ca20 <yield>
    c35e:	ldrb.w	r3, [r4, #68]	; 0x44
    c362:	cmp	r3, #0
    c364:	bne.n	c35a <HardwareSerial::flush()+0xa>
    c366:	pop	{r4, pc}
    c368:	bx	lr
    c36a:	nop

0000c36c <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    c36c:	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    c370:	cbnz	r0, c3a2 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c372:	mrs	r3, PRIMASK
	if (primask) return 0;
    c376:	cbnz	r3, c38c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c378:	mrs	r2, IPSR
	if (ipsr) {
    c37c:	cbnz	r2, c38e <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    c37e:	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    c382:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    c386:	cbz	r0, c39e <nvic_execution_priority()+0x32>
    c388:	cmp	r0, r3
    c38a:	bcs.n	c39e <nvic_execution_priority()+0x32>
	return priority;
}
    c38c:	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    c38e:	cmp	r2, #15
    c390:	bls.n	c382 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    c392:	ldr	r3, [pc, #20]	; (c3a8 <nvic_execution_priority()+0x3c>)
    c394:	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    c396:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    c39a:	cmp	r0, #0
    c39c:	bne.n	c388 <nvic_execution_priority()+0x1c>
    c39e:	mov	r0, r3
    c3a0:	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    c3a2:	mov.w	r0, #4294967295
    c3a6:	b.n	c38c <nvic_execution_priority()+0x20>
    c3a8:	.word	0xe000e3f0

0000c3ac <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    c3ac:	vmov	s15, r1
    c3b0:	vldr	s14, [pc, #528]	; c5c4 <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    c3b4:	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    c3b6:	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    c3ba:	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    c3be:	vldr	s12, [pc, #520]	; c5c8 <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    c3c2:	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    c3c4:	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    c3c8:	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    c3ca:	movs	r6, #1
    c3cc:	movw	r5, #8191	; 0x1fff
    c3d0:	b.n	c40e <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    c3d2:	cmp	r3, r5
    c3d4:	it	ge
    c3d6:	movge	r3, r5
    c3d8:	vmov	s15, r3
    c3dc:	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    c3e0:	vsub.f32	s13, s13, s14
    c3e4:	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c3e8:	vcmpe.f32	s15, #0.0
    c3ec:	vmrs	APSR_nzcv, fpscr
    c3f0:	it	mi
    c3f2:	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c3f6:	vcmpe.f32	s15, s12
    c3fa:	vmrs	APSR_nzcv, fpscr
    c3fe:	bhi.n	c408 <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    c400:	vmov.f32	s12, s15
    c404:	mov	r4, r1
			bestdiv = divint;
    c406:	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    c408:	adds	r1, #1
    c40a:	cmp	r1, #33	; 0x21
    c40c:	beq.n	c432 <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    c40e:	vmov	s15, r1
    c412:	vcvt.f32.s32	s15, s15
    c416:	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    c41a:	vadd.f32	s15, s14, s10
    c41e:	vcvt.s32.f32	s15, s15
    c422:	vmov	r3, s15
		if (divint < 1) divint = 1;
    c426:	cmp	r3, #0
    c428:	bgt.n	c3d2 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    c42a:	vmov.f32	s13, #112	; 0x3f800000  1.0
    c42e:	movs	r3, #1
    c430:	b.n	c3e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c432:	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    c434:	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c436:	ldr	r5, [r0, #56]	; 0x38
    c438:	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c43c:	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    c440:	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c444:	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    c446:	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c44a:	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    c44e:	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c452:	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    c456:	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    c45a:	ldr.w	lr, [r1, #12]
    c45e:	ldr	r3, [r1, #16]
    c460:	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c464:	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    c466:	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c46a:	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c46c:	ldr	r5, [pc, #348]	; (c5cc <HardwareSerial::begin(unsigned long, unsigned short)+0x220>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    c46e:	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c472:	ldrb	r3, [r0, #24]
    c474:	ldr	r7, [pc, #344]	; (c5d0 <HardwareSerial::begin(unsigned long, unsigned short)+0x224>)
    c476:	add.w	r3, r1, r3, lsl #4
    c47a:	ldrb	r3, [r3, #20]
    c47c:	add.w	r3, r5, r3, lsl #4
    c480:	ldr	r3, [r3, #8]
    c482:	str	r7, [r3, #0]
    c484:	ldrb	r3, [r0, #24]
    c486:	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c48a:	ldrb	r7, [r3, #20]
    c48c:	ldr.w	lr, [r3, #24]
    c490:	add.w	r3, r5, r7, lsl #4
    c494:	ldr	r3, [r3, #4]
    c496:	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c49a:	ldrb	r3, [r0, #24]
    c49c:	add.w	r3, r1, r3, lsl #4
    c4a0:	ldr	r7, [r3, #28]
    c4a2:	cbz	r7, c4a8 <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c4a4:	ldr	r3, [r3, #32]
    c4a6:	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c4a8:	ldrb.w	lr, [r0, #25]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4ac:	subs	r3, r4, #1
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c4ae:	movs	r7, #217	; 0xd9
    c4b0:	add.w	r4, r1, lr, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;
    c4b4:	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4b8:	lsls	r3, r3, #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c4ba:	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4be:	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c4c2:	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4c6:	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c4c8:	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c4ca:	ldr	r4, [r4, #8]
    c4cc:	adds	r6, #16
    c4ce:	str	r7, [r4, #0]
    c4d0:	ldrb	r4, [r0, #25]

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c4d2:	ldr	r7, [r1, #4]
    c4d4:	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c4d8:	ldrb.w	r1, [r4, #52]	; 0x34
    c4dc:	ldr.w	ip, [r4, #56]	; 0x38
    c4e0:	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4e4:	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c4e6:	ldr	r4, [r5, #4]
    c4e8:	str.w	ip, [r4]
    c4ec:	ldr	r4, [pc, #228]	; (c5d4 <HardwareSerial::begin(unsigned long, unsigned short)+0x228>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    c4ee:	str	r3, [r1, #16]
	port->PINCFG = 0;
    c4f0:	str.w	lr, [r1, #12]
    c4f4:	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c4f8:	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    c4fa:	movs	r5, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c4fc:	ldr	r1, [pc, #216]	; (c5d8 <HardwareSerial::begin(unsigned long, unsigned short)+0x22c>)
    c4fe:	ldrb	r4, [r3, #1]
    c500:	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    c504:	ldr	r6, [pc, #212]	; (c5dc <HardwareSerial::begin(unsigned long, unsigned short)+0x230>)
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c506:	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    c508:	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    c50a:	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    c50c:	ldrb	r3, [r4, #1]
    c50e:	and.w	r0, r3, #31
    c512:	asrs	r3, r3, #5
    c514:	lsl.w	r0, r5, r0
    c518:	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    c51c:	ldr	r3, [r1, #40]	; 0x28
    c51e:	lsrs	r3, r3, #2
    c520:	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    c524:	cmp	r3, #15
    c526:	bhi.n	c5aa <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
    c528:	asrs	r3, r5
    c52a:	and.w	r3, r3, #3
    c52e:	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    c530:	ldr	r3, [r1, #40]	; 0x28
    c532:	lsls	r3, r3, #2
    c534:	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    c538:	cmp	r3, #15
    c53a:	bhi.n	c5a4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    c53c:	lsls	r3, r3, #15
    c53e:	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c542:	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c544:	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c546:	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c54a:	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c54c:	ldr	r3, [r1, #40]	; 0x28
    c54e:	orr.w	r3, r3, #136	; 0x88
    c552:	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c554:	bmi.n	c5ae <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c556:	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c55a:	and.w	r0, r2, #15
    c55e:	cmp	r0, #4
    c560:	it	eq
    c562:	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c566:	lsls	r6, r2, #26
    c568:	it	mi
    c56a:	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c56e:	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    c570:	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c572:	bpl.n	c57c <HardwareSerial::begin(unsigned long, unsigned short)+0x1d0>
    c574:	ldr	r3, [r1, #16]
    c576:	orr.w	r3, r3, #536870912	; 0x20000000
    c57a:	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c57c:	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c57e:	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c580:	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c584:	it	mi
    c586:	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c58a:	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c58c:	lsls	r3, r2, #23
    c58e:	bpl.n	c598 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ec>
    c590:	ldr	r3, [r1, #16]
    c592:	orr.w	r3, r3, #8192	; 0x2000
    c596:	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    c598:	ldrb	r2, [r4, #0]
    c59a:	ldr	r3, [pc, #68]	; (c5e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>)
    c59c:	ldr.w	r1, [r3, r2, lsl #2]
    c5a0:	cbz	r1, c5b4 <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
    c5a2:	pop	{r4, r5, r6, r7, pc}
    c5a4:	mov.w	r3, #196608	; 0x30000
    c5a8:	b.n	c542 <HardwareSerial::begin(unsigned long, unsigned short)+0x196>
    c5aa:	movs	r0, #3
    c5ac:	b.n	c530 <HardwareSerial::begin(unsigned long, unsigned short)+0x184>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c5ae:	ldr	r3, [pc, #52]	; (c5e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
    c5b0:	orrs	r3, r0
    c5b2:	b.n	c55a <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    c5b4:	ldr	r0, [pc, #48]	; (c5e8 <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    c5b6:	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    c5b8:	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    c5ba:	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    c5be:	adds	r3, r1, #1
    c5c0:	strb	r3, [r0, #0]
    c5c2:	pop	{r4, r5, r6, r7, pc}
    c5c4:	.word	0x4bb71b00
    c5c8:	.word	0x60ad78ec
    c5cc:	.word	0x20000590
    c5d0:	.word	0x0001f038
    c5d4:	.word	0x20010400
    c5d8:	.word	0xe000e400
    c5dc:	.word	0xe000e100
    c5e0:	.word	0x2000df1c
    c5e4:	.word	0x003c0010
    c5e8:	.word	0x2000df38

0000c5ec <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    c5ec:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c5ee:	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    c5f0:	mov	r4, r0
    c5f2:	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c5f4:	cbz	r3, c5fc <HardwareSerial::write9bit(unsigned long)+0x10>
    c5f6:	ldr	r2, [r0, #84]	; 0x54
    c5f8:	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    c5fc:	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    c600:	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    c602:	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    c604:	adds	r5, #1
    c606:	cmp	r5, r3
    c608:	bcs.n	c69e <HardwareSerial::write9bit(unsigned long)+0xb2>
    c60a:	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    c60c:	ldrh.w	r3, [r4, #72]	; 0x48
    c610:	uxth	r3, r3
    c612:	cmp	r3, r5
    c614:	bne.n	c658 <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    c616:	bl	c36c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    c61a:	ldr	r3, [r4, #20]
    c61c:	ldrh.w	r3, [r3, #86]	; 0x56
    c620:	cmp	r0, r3
    c622:	bgt.n	c680 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    c624:	ldr	r1, [r4, #16]
    c626:	ldr	r3, [r1, #20]
    c628:	lsls	r3, r3, #8
    c62a:	bpl.n	c60c <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    c62c:	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c630:	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    c632:	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c634:	adds	r3, #1
    c636:	cmp	r3, r2
    c638:	bcs.n	c68a <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    c63a:	ldr	r2, [r4, #44]	; 0x2c
    c63c:	uxth	r0, r3
    c63e:	cmp	r3, r2
    c640:	bcs.n	c694 <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    c642:	ldr	r2, [r4, #28]
    c644:	ldrb	r3, [r2, r3]
    c646:	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    c648:	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    c64a:	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    c64e:	ldrh.w	r3, [r4, #72]	; 0x48
    c652:	uxth	r3, r3
    c654:	cmp	r3, r5
    c656:	beq.n	c616 <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    c658:	ldr	r3, [r4, #44]	; 0x2c
    c65a:	cmp	r5, r3
    c65c:	bcc.n	c6a4 <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    c65e:	subs	r5, r5, r3
    c660:	uxtb	r6, r6
    c662:	ldr	r3, [r4, #40]	; 0x28
    c664:	strb	r6, [r3, r5]
	}
	__disable_irq();
    c666:	cpsid	i
	transmitting_ = 1;
    c668:	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    c66a:	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    c66c:	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    c670:	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    c674:	ldr	r3, [r2, #24]
    c676:	orr.w	r3, r3, #8388608	; 0x800000
    c67a:	str	r3, [r2, #24]
	__enable_irq();
    c67c:	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    c67e:	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    c680:	cmp	r0, #255	; 0xff
    c682:	ble.n	c60c <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    c684:	bl	ca20 <yield>
    c688:	b.n	c60c <HardwareSerial::write9bit(unsigned long)+0x20>
    c68a:	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    c68c:	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c68e:	mov	r3, r0
				if (tail < tx_buffer_size_) {
    c690:	cmp	r3, r2
    c692:	bcc.n	c642 <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    c694:	subs	r3, r3, r2
    c696:	ldr	r2, [r4, #40]	; 0x28
    c698:	ldrb	r3, [r2, r3]
    c69a:	uxtb	r3, r3
    c69c:	b.n	c648 <HardwareSerial::write9bit(unsigned long)+0x5c>
    c69e:	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    c6a0:	mov	r5, r7
    c6a2:	b.n	c60c <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    c6a4:	uxtb	r6, r6
    c6a6:	ldr	r3, [r4, #28]
    c6a8:	strb	r6, [r3, r5]
    c6aa:	b.n	c666 <HardwareSerial::write9bit(unsigned long)+0x7a>

0000c6ac <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    c6ac:	b.w	c5ec <HardwareSerial::write9bit(unsigned long)>

0000c6b0 <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c6b0:	ldr	r2, [r0, #16]
    c6b2:	ldr	r3, [r2, #20]
    c6b4:	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    c6b8:	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c6ba:	beq.n	c742 <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    c6bc:	ldr	r3, [r2, #44]	; 0x2c
    c6be:	ubfx	r5, r3, #24, #3
		if (avail) {
    c6c2:	cmp	r5, #0
    c6c4:	beq.n	c73c <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    c6c6:	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    c6ca:	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    c6ce:	uxth	r7, r7
			tail = rx_buffer_tail_;
    c6d0:	uxth.w	lr, lr
    c6d4:	b.n	c6e4 <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    c6d6:	ldr	r2, [r0, #32]
    c6d8:	strb	r6, [r2, r3]
    c6da:	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    c6dc:	subs	r3, r5, #1
    c6de:	ands.w	r5, r3, #255	; 0xff
    c6e2:	beq.n	c71a <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c6e4:	ldr	r1, [r2, #28]
				newhead = head + 1;
    c6e6:	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c6e8:	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    c6ea:	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c6ee:	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c6f2:	cmp	r3, r6
    c6f4:	it	cs
    c6f6:	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    c6f8:	uxth	r4, r4
    c6fa:	cmp	r3, r4
    c6fc:	beq.n	c6dc <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    c6fe:	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c700:	uxtb	r6, r1
    c702:	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    c704:	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c706:	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    c70a:	bcc.n	c6d6 <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c70c:	ldr	r3, [r0, #36]	; 0x24
    c70e:	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    c710:	subs	r3, r5, #1
    c712:	ldr	r2, [r0, #16]
    c714:	ands.w	r5, r3, #255	; 0xff
    c718:	bne.n	c6e4 <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    c71a:	uxth	r3, r7
			if (rts_pin_baseReg_) {
    c71c:	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    c71e:	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    c722:	cbz	r1, c73c <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c724:	cmp	r7, lr
    c726:	bcs.n	c7fc <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    c728:	ldr	r3, [r0, #56]	; 0x38
    c72a:	rsb	r3, lr, r3
    c72e:	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    c730:	ldr	r3, [r0, #64]	; 0x40
    c732:	cmp	r7, r3
    c734:	bcc.n	c73c <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    c736:	ldr	r3, [r0, #92]	; 0x5c
    c738:	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    c73c:	ldr	r3, [r2, #20]
    c73e:	lsls	r4, r3, #11
    c740:	bmi.n	c7da <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    c742:	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    c746:	tst.w	lr, #8388608	; 0x800000
    c74a:	beq.n	c752 <HardwareSerial::IRQHandler()+0xa2>
    c74c:	ldr	r3, [r2, #20]
    c74e:	lsls	r1, r3, #8
    c750:	bmi.n	c778 <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c752:	tst.w	lr, #4194304	; 0x400000
    c756:	beq.n	c7d6 <HardwareSerial::IRQHandler()+0x126>
    c758:	ldr	r3, [r2, #20]
    c75a:	lsls	r3, r3, #9
    c75c:	bpl.n	c7d8 <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    c75e:	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c760:	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    c762:	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c766:	cbz	r3, c76e <HardwareSerial::IRQHandler()+0xbe>
    c768:	ldr	r1, [r0, #84]	; 0x54
    c76a:	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c76e:	ldr	r3, [r2, #24]
    c770:	bic.w	r3, r3, #4194304	; 0x400000
    c774:	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c776:	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c778:	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    c77c:	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c780:	uxth	r5, r5
		tail = tx_buffer_tail_;
    c782:	uxth	r3, r3
		do {
			if (head == tail) break;
    c784:	cmp	r5, r3
    c786:	beq.n	c7e4 <HardwareSerial::IRQHandler()+0x134>
    c788:	ldr	r6, [r0, #52]	; 0x34
    c78a:	ldr	r4, [r0, #44]	; 0x2c
    c78c:	b.n	c7a4 <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    c78e:	ldr	r1, [r0, #28]
    c790:	ldrb	r1, [r1, r3]
    c792:	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    c794:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c796:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    c798:	ubfx	r1, r1, #8, #3
    c79c:	cmp	r1, #3
    c79e:	bhi.n	c7c6 <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    c7a0:	cmp	r3, r5
    c7a2:	beq.n	c7e4 <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c7a4:	adds	r3, #1
    c7a6:	cmp	r6, r3
    c7a8:	it	ls
    c7aa:	movls	r3, #0
			if (tail < tx_buffer_size_) {
    c7ac:	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c7ae:	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    c7b2:	bcc.n	c78e <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c7b4:	ldr	r7, [r0, #40]	; 0x28
    c7b6:	ldrb	r1, [r7, r1]
    c7b8:	uxtb	r1, r1
			}
			port->DATA = n;
    c7ba:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c7bc:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    c7be:	ubfx	r1, r1, #8, #3
    c7c2:	cmp	r1, #3
    c7c4:	bls.n	c7a0 <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    c7c6:	uxth	r1, r3
		if (head == tail) {
    c7c8:	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    c7ca:	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    c7ce:	beq.n	c7ea <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c7d0:	tst.w	lr, #4194304	; 0x400000
    c7d4:	bne.n	c758 <HardwareSerial::IRQHandler()+0xa8>
    c7d6:	pop	{r4, r5, r6, r7, pc}
    c7d8:	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    c7da:	ldr	r3, [r2, #20]
    c7dc:	orr.w	r3, r3, #1048576	; 0x100000
    c7e0:	str	r3, [r2, #20]
    c7e2:	b.n	c742 <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    c7e4:	uxth	r5, r5
    c7e6:	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c7ea:	ldr	r3, [r2, #24]
    c7ec:	bic.w	r3, r3, #8388608	; 0x800000
    c7f0:	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c7f2:	ldr	r3, [r2, #24]
    c7f4:	orr.w	r3, r3, #4194304	; 0x400000
    c7f8:	str	r3, [r2, #24]
    c7fa:	b.n	c752 <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c7fc:	rsb	r7, lr, r7
    c800:	b.n	c730 <HardwareSerial::IRQHandler()+0x80>
    c802:	nop

0000c804 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    c804:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    c806:	ldr	r3, [pc, #28]	; (c824 <HardwareSerial::processSerialEvents()+0x20>)
    c808:	ldrb	r4, [r3, #0]
    c80a:	cbz	r4, c820 <HardwareSerial::processSerialEvents()+0x1c>
    c80c:	ldr	r5, [pc, #24]	; (c828 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    c80e:	ldr.w	r3, [r5, #4]!
    c812:	cmp	r3, #0
    c814:	beq.n	c80e <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    c816:	blx	r3
			if (--handlers_still_to_process == 0) return;
    c818:	subs	r3, r4, #1
    c81a:	ands.w	r4, r3, #255	; 0xff
    c81e:	bne.n	c80e <HardwareSerial::processSerialEvents()+0xa>
    c820:	pop	{r3, r4, r5, pc}
    c822:	nop
    c824:	.word	0x2000df38
    c828:	.word	0x2000df18

0000c82c <HardwareSerial::disableSerialEvents()>:
	}
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
    c82c:	ldr	r3, [r0, #20]
    c82e:	ldr	r2, [pc, #32]	; (c850 <HardwareSerial::disableSerialEvents()+0x24>)
    c830:	ldrb	r1, [r3, #0]
    c832:	ldr.w	r3, [r2, r1, lsl #2]
    c836:	cbz	r3, c84c <HardwareSerial::disableSerialEvents()+0x20>
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    c838:	ldr	r0, [pc, #24]	; (c854 <HardwareSerial::disableSerialEvents()+0x28>)
		serial_event_handlers_active++;
	}
}

void HardwareSerial::disableSerialEvents() 
{
    c83a:	push	{r4}
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    c83c:	ldrb	r3, [r0, #0]
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    c83e:	movs	r4, #0
		serial_event_handlers_active--;
    c840:	subs	r3, #1
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    c842:	str.w	r4, [r2, r1, lsl #2]
		serial_event_handlers_active--;
    c846:	strb	r3, [r0, #0]
	}
}
    c848:	ldr.w	r4, [sp], #4
    c84c:	bx	lr
    c84e:	nop
    c850:	.word	0x2000df1c
    c854:	.word	0x2000df38

0000c858 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    c858:	push	{r4, lr}
    c85a:	mov	r4, r0
{
	free(buffer);
    c85c:	ldr	r0, [r0, #0]
    c85e:	bl	d5fc <free>
}
    c862:	mov	r0, r4
    c864:	pop	{r4, pc}
    c866:	nop

0000c868 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    c868:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    c86a:	ldr	r3, [r0, #4]
    c86c:	cmp	r3, r1
    c86e:	bcc.n	c874 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c870:	movs	r0, #1
		return 1;
	}
	return 0;
}
    c872:	pop	{r3, r4, r5, pc}
    c874:	mov	r5, r1
    c876:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    c878:	adds	r1, #1
    c87a:	ldr	r0, [r0, #0]
    c87c:	bl	dce8 <realloc>
	if (newbuffer) {
    c880:	cmp	r0, #0
    c882:	beq.n	c872 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c884:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    c886:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    c88a:	cmp	r3, #0
    c88c:	bne.n	c870 <String::reserve(unsigned int)+0x8>
    c88e:	strb	r3, [r0, #0]
    c890:	b.n	c870 <String::reserve(unsigned int)+0x8>
    c892:	nop

0000c894 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    c894:	push	{r3, r4, r5, r6, r7, lr}
    c896:	mov	r4, r0
	if (length == 0) {
    c898:	mov	r5, r2
    c89a:	cbnz	r2, c8aa <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    c89c:	ldr	r3, [r0, #0]
    c89e:	cbz	r3, c8a2 <String::copy(char const*, unsigned int)+0xe>
    c8a0:	strb	r2, [r3, #0]
		len = 0;
    c8a2:	movs	r3, #0
    c8a4:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c8a6:	mov	r0, r4
    c8a8:	pop	{r3, r4, r5, r6, r7, pc}
    c8aa:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    c8ac:	mov	r1, r2
    c8ae:	bl	c868 <String::reserve(unsigned int)>
    c8b2:	mov	r7, r0
    c8b4:	cbnz	r0, c8ca <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    c8b6:	ldr	r0, [r4, #0]
    c8b8:	cbz	r0, c8c0 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    c8ba:	bl	d5fc <free>
			buffer = NULL;
    c8be:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    c8c0:	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c8c2:	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    c8c4:	str	r3, [r4, #4]
    c8c6:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c8c8:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    c8ca:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    c8cc:	mov	r1, r6
    c8ce:	ldr	r0, [r4, #0]
    c8d0:	bl	e3dc <strcpy>
	return *this;
    c8d4:	b.n	c8a6 <String::copy(char const*, unsigned int)+0x12>
    c8d6:	nop

0000c8d8 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c8d8:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c8da:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    c8dc:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    c8de:	str	r3, [r0, #0]
	capacity = 0;
    c8e0:	str	r3, [r0, #4]
	len = 0;
    c8e2:	str	r3, [r0, #8]
	flags = 0;
    c8e4:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    c8e6:	cbz	r1, c8fa <String::String(char const*)+0x22>
    c8e8:	mov	r5, r1
    c8ea:	mov	r0, r1
    c8ec:	bl	e4c0 <strlen>
    c8f0:	mov	r2, r0
    c8f2:	mov	r1, r5
    c8f4:	mov	r0, r4
    c8f6:	bl	c894 <String::copy(char const*, unsigned int)>
}
    c8fa:	mov	r0, r4
    c8fc:	pop	{r3, r4, r5, pc}
    c8fe:	nop

0000c900 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    c900:	push	{r3, r4, r5, lr}
    c902:	mov	r4, r1
    c904:	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c906:	mov	r0, r1
    c908:	bl	e4c0 <strlen>
    c90c:	mov	r1, r4
    c90e:	mov	r2, r0
    c910:	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    c912:	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    c916:	b.w	c894 <String::copy(char const*, unsigned int)>
    c91a:	nop

0000c91c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    c91c:	push	{r4, lr}
    c91e:	mov	r4, r0
	if (cstr) {
    c920:	cbz	r1, c92a <String::operator=(char const*)+0xe>
    c922:	bl	c900 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    c926:	mov	r0, r4
    c928:	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    c92a:	str	r1, [r4, #8]
	}
	return *this;
}
    c92c:	mov	r0, r4
    c92e:	pop	{r4, pc}

0000c930 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c930:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c934:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c936:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c938:	mov	r4, r0
    c93a:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c93c:	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c93e:	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c940:	bhi.n	c958 <String::append(char const*, unsigned int)+0x28>
    c942:	adds	r2, r3, r1
    c944:	cmp	r7, r2
    c946:	bcs.n	c958 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    c948:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    c94c:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c950:	cbnz	r5, c960 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    c952:	mov	r0, r4
    c954:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    c958:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c95c:	cmp	r5, #0
    c95e:	beq.n	c952 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    c960:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c962:	mov	r0, r4
    c964:	mov	r1, r6
    c966:	bl	c868 <String::reserve(unsigned int)>
    c96a:	cmp	r0, #0
    c96c:	beq.n	c952 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    c96e:	cmp.w	r8, #0
    c972:	beq.n	c992 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    c974:	ldr	r3, [r4, #0]
    c976:	mov	r2, r5
    c978:	ldr	r0, [r4, #8]
    c97a:	add.w	r1, r3, r9
    c97e:	add	r0, r3
    c980:	bl	ac68 <memcpy>
		buffer[newlen] = 0;
    c984:	ldr	r3, [r4, #0]
    c986:	movs	r2, #0
    c988:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    c98a:	str	r6, [r4, #8]
	return *this;
}
    c98c:	mov	r0, r4
    c98e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    c992:	ldr	r0, [r4, #0]
    c994:	mov	r1, r7
    c996:	ldr	r3, [r4, #8]
    c998:	add	r0, r3
    c99a:	bl	e3dc <strcpy>
    c99e:	b.n	c98a <String::append(char const*, unsigned int)+0x5a>

0000c9a0 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    c9a0:	push	{r4, lr}
    c9a2:	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c9a4:	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    c9a6:	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    c9a8:	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    c9aa:	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    c9ae:	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    c9b0:	strb.w	r3, [sp, #5]
	append(buf, 1);
    c9b4:	bl	c930 <String::append(char const*, unsigned int)>
	return *this;
}
    c9b8:	mov	r0, r4
    c9ba:	add	sp, #8
    c9bc:	pop	{r4, pc}
    c9be:	nop

0000c9c0 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c9c0:	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    c9c2:	push	{r3, lr}
    c9c4:	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c9c6:	cbnz	r2, c9d4 <String::equals(char const*) const+0x14>
    c9c8:	cbz	r1, c9e8 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    c9ca:	ldrb	r0, [r3, #0]
    c9cc:	clz	r0, r0
    c9d0:	lsrs	r0, r0, #5
    c9d2:	pop	{r3, pc}
    c9d4:	cbz	r1, c9e4 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    c9d6:	ldr	r0, [r0, #0]
    c9d8:	bl	e108 <strcmp>
    c9dc:	clz	r0, r0
    c9e0:	lsrs	r0, r0, #5
}
    c9e2:	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    c9e4:	ldr	r3, [r0, #0]
    c9e6:	b.n	c9ca <String::equals(char const*) const+0xa>
    c9e8:	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    c9ea:	pop	{r3, pc}

0000c9ec <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    c9ec:	cbz	r2, ca1e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    c9ee:	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    c9f0:	clz	r4, r1
    c9f4:	lsrs	r4, r4, #5
    c9f6:	cbnz	r4, ca18 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    c9f8:	ldr	r6, [r0, #8]
    c9fa:	cmp	r6, r3
    c9fc:	bls.n	ca1a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    c9fe:	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    ca00:	subs	r2, #1
    ca02:	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    ca04:	ldr	r1, [r0, #0]
    ca06:	cmp	r6, r2
    ca08:	mov	r0, r5
    ca0a:	add	r1, r3
    ca0c:	it	cs
    ca0e:	movcs	r6, r2
    ca10:	mov	r2, r6
    ca12:	bl	e59c <strncpy>
	buf[n] = 0;
    ca16:	strb	r4, [r5, r6]
    ca18:	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    ca1a:	strb	r4, [r1, #0]
		return;
    ca1c:	pop	{r4, r5, r6, pc}
    ca1e:	bx	lr

0000ca20 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ca20:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    ca22:	ldr	r4, [pc, #132]	; (caa8 <yield+0x88>)
    ca24:	ldrb	r3, [r4, #0]
    ca26:	cbnz	r3, ca4a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ca28:	ldr	r3, [pc, #128]	; (caac <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    ca2a:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ca2c:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    ca2e:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ca30:	cbnz	r3, ca7a <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    ca32:	ldr	r3, [pc, #124]	; (cab0 <yield+0x90>)
    ca34:	ldrb	r3, [r3, #0]
    ca36:	cmp	r3, #0
    ca38:	bne.n	ca8e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    ca3a:	ldr	r3, [pc, #120]	; (cab4 <yield+0x94>)

	running = 0;
    ca3c:	movs	r1, #0
    ca3e:	ldr	r2, [r3, #0]
    ca40:	strb	r1, [r4, #0]
    ca42:	cbz	r2, ca4a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ca44:	mrs	r2, IPSR
		if (ipsr != 0) return;
    ca48:	cbz	r2, ca4c <yield+0x2c>
    ca4a:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ca4c:	mrs	r0, PRIMASK
		__disable_irq();
    ca50:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    ca52:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    ca54:	cbz	r2, ca94 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    ca56:	ldr	r4, [pc, #96]	; (cab8 <yield+0x98>)
    ca58:	ldrb	r1, [r4, #0]
    ca5a:	cbnz	r1, ca94 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    ca5c:	movs	r6, #1
		firstYield = first->_next;
    ca5e:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    ca60:	strb	r6, [r4, #0]
		firstYield = first->_next;
    ca62:	str	r5, [r3, #0]
		if (firstYield) {
    ca64:	cbz	r5, ca9c <yield+0x7c>
			firstYield->_prev = nullptr;
    ca66:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ca68:	cbnz	r0, ca6c <yield+0x4c>
    ca6a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    ca6c:	movs	r5, #0
		(*(first->_function))(*first);
    ca6e:	ldr	r3, [r2, #8]
    ca70:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    ca72:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    ca74:	blx	r3
		runningFromYield = false;
    ca76:	strb	r5, [r4, #0]
    ca78:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ca7a:	bl	b0b8 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ca7e:	cmp	r0, #0
    ca80:	beq.n	ca32 <yield+0x12>
    ca82:	bl	cdbc <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    ca86:	ldr	r3, [pc, #40]	; (cab0 <yield+0x90>)
    ca88:	ldrb	r3, [r3, #0]
    ca8a:	cmp	r3, #0
    ca8c:	beq.n	ca3a <yield+0x1a>
    ca8e:	bl	c804 <HardwareSerial::processSerialEvents()>
    ca92:	b.n	ca3a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ca94:	cmp	r0, #0
    ca96:	bne.n	ca4a <yield+0x2a>
    ca98:	cpsie	i
    ca9a:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    ca9c:	ldr	r3, [pc, #28]	; (cabc <yield+0x9c>)
    ca9e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    caa0:	cmp	r0, #0
    caa2:	bne.n	ca6c <yield+0x4c>
    caa4:	b.n	ca6a <yield+0x4a>
    caa6:	nop
    caa8:	.word	0x2000df39
    caac:	.word	0x20000ed8
    cab0:	.word	0x2000df38
    cab4:	.word	0x2000e750
    cab8:	.word	0x2000e754
    cabc:	.word	0x2000e74c

0000cac0 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    cac0:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    cac2:	ldr	r4, [pc, #100]	; (cb28 <random(unsigned long) [clone .part.0]+0x68>)
    cac4:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    cac6:	cbz	r3, cb0c <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    cac8:	ldr	r1, [pc, #96]	; (cb2c <random(unsigned long) [clone .part.0]+0x6c>)
    caca:	asrs	r5, r3, #31
    cacc:	ldr.w	lr, [pc, #104]	; cb38 <random(unsigned long) [clone .part.0]+0x78>
    cad0:	smull	r6, r7, r3, r1
    cad4:	ldr	r6, [pc, #88]	; (cb30 <random(unsigned long) [clone .part.0]+0x70>)
    cad6:	smull	r2, r1, r1, r3
    cada:	adds	r2, r3, r7
    cadc:	add	r1, r3
    cade:	rsb	r2, r5, r2, asr #16
    cae2:	rsb	r1, r5, r1, asr #16
    cae6:	movw	r5, #16807	; 0x41a7
    caea:	mls	r2, lr, r2, r3
    caee:	mul.w	r1, r6, r1
    caf2:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    caf6:	cmp	r3, #0
    caf8:	bge.n	cb1a <random(unsigned long) [clone .part.0]+0x5a>
    cafa:	mvn.w	r2, #2147483648	; 0x80000000
    cafe:	add	r2, r3
    cb00:	udiv	r3, r2, r0
	seed = x;
    cb04:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    cb06:	mls	r0, r0, r3, r2
    cb0a:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    cb0c:	ldr	r2, [pc, #36]	; (cb34 <random(unsigned long) [clone .part.0]+0x74>)
    cb0e:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    cb12:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    cb14:	mls	r0, r0, r3, r2
    cb18:	pop	{r4, r5, r6, r7, pc}
    cb1a:	mov	r2, r3
    cb1c:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    cb20:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    cb22:	mls	r0, r0, r3, r2
    cb26:	pop	{r4, r5, r6, r7, pc}
    cb28:	.word	0x2000df3c
    cb2c:	.word	0x834e0b5f
    cb30:	.word	0xfffff4ec
    cb34:	.word	0x1f0cce42
    cb38:	.word	0x0001f31d

0000cb3c <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    cb3c:	cbz	r0, cb42 <randomSeed(unsigned long)+0x6>
    cb3e:	ldr	r3, [pc, #4]	; (cb44 <randomSeed(unsigned long)+0x8>)
    cb40:	str	r0, [r3, #0]
    cb42:	bx	lr
    cb44:	.word	0x2000df3c

0000cb48 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    cb48:	cbz	r0, cb4e <random(unsigned long)+0x6>
    cb4a:	b.w	cac0 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    cb4e:	bx	lr

0000cb50 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    cb50:	cmp	r0, r1
    cb52:	bge.n	cb62 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    cb54:	push	{r4, lr}
    cb56:	mov	r4, r0
    cb58:	subs	r0, r1, r0
    cb5a:	bl	cac0 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    cb5e:	add	r0, r4
}
    cb60:	pop	{r4, pc}
    cb62:	bx	lr

0000cb64 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    cb64:	ldr	r0, [pc, #4]	; (cb6c <IRQHandler_Serial1+0x8>)
    cb66:	b.w	c6b0 <HardwareSerial::IRQHandler()>
    cb6a:	nop
    cb6c:	.word	0x20000e78

0000cb70 <serialEvent1()>:
};
HardwareSerial Serial1(&IMXRT_LPUART6, &UART6_Hardware, tx_buffer1, SERIAL1_TX_BUFFER_SIZE,
	rx_buffer1,  SERIAL1_RX_BUFFER_SIZE);

void serialEvent1() __attribute__((weak));
void serialEvent1() {Serial1.disableSerialEvents(); }		// No use calling this so disable if called...
    cb70:	ldr	r0, [pc, #4]	; (cb78 <serialEvent1()+0x8>)
    cb72:	b.w	c82c <HardwareSerial::disableSerialEvents()>
    cb76:	nop
    cb78:	.word	0x20000e78

0000cb7c <serial_event_check_serial1()>:
{
	Serial1.IRQHandler();
}

void serial_event_check_serial1()
{
    cb7c:	push	{r3, lr}
	if (Serial1.available()) serialEvent1();
    cb7e:	ldr	r0, [pc, #12]	; (cb8c <serial_event_check_serial1()+0x10>)
    cb80:	bl	c290 <HardwareSerial::available()>
    cb84:	cbz	r0, cb8a <serial_event_check_serial1()+0xe>
    cb86:	bl	cb70 <serialEvent1()>
    cb8a:	pop	{r3, pc}
    cb8c:	.word	0x20000e78

0000cb90 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    cb90:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cb92:	mrs	r2, PRIMASK
		__disable_irq();
    cb96:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    cb98:	ldrb	r3, [r0, #29]
    cb9a:	cbnz	r3, cbaa <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    cb9c:	ldrb	r1, [r0, #28]
    cb9e:	cmp	r1, #1
    cba0:	beq.n	cbb4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    cba2:	cmp	r1, #3
    cba4:	beq.n	cbc8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    cba6:	movs	r3, #1
    cba8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cbaa:	cbnz	r2, cbae <EventResponder::triggerEventNotImmediate()+0x1e>
    cbac:	cpsie	i
	}
	enableInterrupts(irq);
}
    cbae:	ldr.w	r4, [sp], #4
    cbb2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    cbb4:	ldr	r4, [pc, #68]	; (cbfc <EventResponder::triggerEventNotImmediate()+0x6c>)
    cbb6:	ldr	r1, [r4, #0]
    cbb8:	cbz	r1, cbe4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    cbba:	ldr	r1, [pc, #68]	; (cc00 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    cbbc:	str	r3, [r0, #20]
				_prev = lastYield;
    cbbe:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    cbc0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    cbc2:	str	r3, [r0, #24]
				_prev->_next = this;
    cbc4:	str	r0, [r3, #20]
    cbc6:	b.n	cba6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    cbc8:	ldr	r4, [pc, #56]	; (cc04 <EventResponder::triggerEventNotImmediate()+0x74>)
    cbca:	ldr	r1, [r4, #0]
    cbcc:	cbz	r1, cbf0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    cbce:	ldr	r1, [pc, #56]	; (cc08 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    cbd0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    cbd2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    cbd4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    cbd6:	str	r3, [r0, #24]
				_prev->_next = this;
    cbd8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    cbda:	ldr	r3, [pc, #48]	; (cc0c <EventResponder::triggerEventNotImmediate()+0x7c>)
    cbdc:	mov.w	r1, #268435456	; 0x10000000
    cbe0:	str	r1, [r3, #0]
    cbe2:	b.n	cba6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    cbe4:	ldr	r3, [pc, #24]	; (cc00 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    cbe6:	str	r1, [r0, #20]
				_prev = nullptr;
    cbe8:	str	r1, [r0, #24]
				firstYield = this;
    cbea:	str	r0, [r4, #0]
				lastYield = this;
    cbec:	str	r0, [r3, #0]
    cbee:	b.n	cba6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    cbf0:	ldr	r3, [pc, #20]	; (cc08 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    cbf2:	str	r1, [r0, #20]
				_prev = nullptr;
    cbf4:	str	r1, [r0, #24]
				firstInterrupt = this;
    cbf6:	str	r0, [r4, #0]
				lastInterrupt = this;
    cbf8:	str	r0, [r3, #0]
    cbfa:	b.n	cbda <EventResponder::triggerEventNotImmediate()+0x4a>
    cbfc:	.word	0x2000e750
    cc00:	.word	0x2000e74c
    cc04:	.word	0x2000e740
    cc08:	.word	0x2000e744
    cc0c:	.word	0xe000ed04

0000cc10 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    cc10:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    cc12:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    cc14:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    cc16:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    cc18:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    cc1a:	beq.n	cc24 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    cc1c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    cc20:	b.w	cb90 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cc24:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    cc26:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cc2a:	bx	r3

0000cc2c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    cc2c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cc2e:	mrs	r1, PRIMASK
		__disable_irq();
    cc32:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    cc34:	ldr	r4, [pc, #48]	; (cc68 <EventResponder::runFromInterrupt()+0x3c>)
    cc36:	ldr	r3, [r4, #0]
		if (first) {
    cc38:	cbz	r3, cc5e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    cc3a:	ldr	r6, [pc, #48]	; (cc6c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    cc3c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    cc3e:	ldr	r2, [r3, #20]
    cc40:	str	r2, [r4, #0]
			if (firstInterrupt) {
    cc42:	cbz	r2, cc64 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    cc44:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cc46:	cbnz	r1, cc4a <EventResponder::runFromInterrupt()+0x1e>
    cc48:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    cc4a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    cc4c:	mov	r0, r3
    cc4e:	ldr	r3, [r3, #8]
    cc50:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cc52:	mrs	r1, PRIMASK
		__disable_irq();
    cc56:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    cc58:	ldr	r3, [r4, #0]
		if (first) {
    cc5a:	cmp	r3, #0
    cc5c:	bne.n	cc3e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cc5e:	cbnz	r1, cc62 <EventResponder::runFromInterrupt()+0x36>
    cc60:	cpsie	i
    cc62:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    cc64:	str	r2, [r6, #0]
    cc66:	b.n	cc46 <EventResponder::runFromInterrupt()+0x1a>
    cc68:	.word	0x2000e740
    cc6c:	.word	0x2000e744

0000cc70 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    cc70:	b.w	cc2c <EventResponder::runFromInterrupt()>

0000cc74 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    cc74:	ldr	r2, [pc, #96]	; (ccd8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    cc76:	push	{r4, r5}
	if (listActive == nullptr) {
    cc78:	ldr	r4, [r2, #0]
    cc7a:	cmp	r4, #0
    cc7c:	beq.n	ccd0 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    cc7e:	ldr	r3, [r0, #0]
    cc80:	ldr	r1, [r4, #0]
    cc82:	cmp	r3, r1
    cc84:	bcs.n	cca6 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    cc86:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    cc88:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    cc8a:	str	r4, [r0, #8]
		_prev = nullptr;
    cc8c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    cc8e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    cc90:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    cc92:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    cc94:	movs	r3, #2
}
    cc96:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    cc98:	strb	r3, [r0, #20]
}
    cc9a:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    cc9c:	str	r3, [r0, #0]
    cc9e:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    cca0:	ldr	r1, [r2, #0]
    cca2:	cmp	r3, r1
    cca4:	bcc.n	ccb8 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    cca6:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    cca8:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ccaa:	cmp	r2, #0
    ccac:	bne.n	cc9c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ccae:	str	r2, [r0, #8]
		_prev = timer;
    ccb0:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ccb2:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    ccb4:	str	r0, [r4, #8]
    ccb6:	b.n	cc94 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ccb8:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    ccba:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    ccbc:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    ccbe:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ccc0:	str	r5, [r0, #12]
				timer->_prev = this;
    ccc2:	str	r0, [r4, #12]
				_prev->_next = this;
    ccc4:	ldr	r1, [r0, #12]
    ccc6:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    ccc8:	str	r3, [r4, #0]
				_state = TimerActive;
    ccca:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    cccc:	pop	{r4, r5}
    ccce:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    ccd0:	str	r4, [r0, #8]
		_prev = nullptr;
    ccd2:	str	r4, [r0, #12]
		listActive = this;
    ccd4:	str	r0, [r2, #0]
    ccd6:	b.n	cc94 <MillisTimer::addToActiveList()+0x20>
    ccd8:	.word	0x2000e748

0000ccdc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    ccdc:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    ccde:	ldr	r6, [pc, #136]	; (cd68 <MillisTimer::runFromTimer()+0x8c>)
    cce0:	ldr	r4, [r6, #0]
	while (timer) {
    cce2:	cbz	r4, cd30 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    cce4:	ldr	r3, [r4, #0]
    cce6:	cmp	r3, #0
    cce8:	bne.n	cd60 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    ccea:	mov	r5, r3
    ccec:	ldr	r7, [pc, #124]	; (cd6c <MillisTimer::runFromTimer()+0x90>)
    ccee:	b.n	ccfa <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    ccf0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    ccf2:	cbz	r4, cd30 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    ccf4:	ldr	r3, [r4, #0]
    ccf6:	cmp	r3, #0
    ccf8:	bne.n	cd60 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    ccfa:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    ccfc:	cbz	r3, cd00 <MillisTimer::runFromTimer()+0x24>
    ccfe:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    cd00:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    cd02:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cd04:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    cd06:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cd08:	ldr	r3, [r3, #0]
    cd0a:	cmp	r3, r7
    cd0c:	bne.n	cd52 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    cd0e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    cd10:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    cd12:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    cd14:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    cd16:	beq.n	cd5a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    cd18:	bl	cb90 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    cd1c:	ldr	r3, [r4, #4]
    cd1e:	cmp	r3, #0
    cd20:	beq.n	ccf0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    cd22:	str	r3, [r4, #0]
				timer->addToActiveList();
    cd24:	mov	r0, r4
    cd26:	bl	cc74 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    cd2a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    cd2c:	cmp	r4, #0
    cd2e:	bne.n	ccf4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cd30:	mrs	r3, PRIMASK
		__disable_irq();
    cd34:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    cd36:	ldr	r2, [pc, #56]	; (cd70 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    cd38:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    cd3a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    cd3c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    cd3e:	cbnz	r3, cd42 <MillisTimer::runFromTimer()+0x66>
    cd40:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    cd42:	cbz	r0, cd50 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    cd44:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    cd46:	bl	cc74 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    cd4a:	mov	r0, r4
    cd4c:	cmp	r0, #0
    cd4e:	bne.n	cd44 <MillisTimer::runFromTimer()+0x68>
    cd50:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cd52:	mov	r2, r4
    cd54:	movs	r1, #0
    cd56:	blx	r3
    cd58:	b.n	cd1c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cd5a:	ldr	r3, [r0, #8]
    cd5c:	blx	r3
    cd5e:	b.n	cd1c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    cd60:	subs	r3, #1
    cd62:	str	r3, [r4, #0]
			break;
    cd64:	b.n	cd30 <MillisTimer::runFromTimer()+0x54>
    cd66:	nop
    cd68:	.word	0x2000e748
    cd6c:	.word	0x0000cc11
    cd70:	.word	0x2000e758

0000cd74 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    cd74:	ldr	r2, [pc, #16]	; (cd88 <systick_isr+0x14>)
    cd76:	ldr	r3, [pc, #20]	; (cd8c <systick_isr+0x18>)
    cd78:	ldr	r1, [r2, #0]
	systick_millis_count++;
    cd7a:	ldr	r2, [pc, #20]	; (cd90 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    cd7c:	str	r1, [r3, #0]
	systick_millis_count++;
    cd7e:	ldr	r3, [r2, #0]
    cd80:	adds	r3, #1
    cd82:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    cd84:	b.w	ccdc <MillisTimer::runFromTimer()>
    cd88:	.word	0xe0001004
    cd8c:	.word	0x2000df14
    cd90:	.word	0x2000df18

0000cd94 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    cd94:	b.w	b0cc <usb_serial_flush_input>

0000cd98 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    cd98:	b.w	b094 <usb_serial_peekchar>

0000cd9c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    cd9c:	b.w	b048 <usb_serial_getchar>

0000cda0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    cda0:	b.w	b0b8 <usb_serial_available>

0000cda4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    cda4:	b.w	b198 <usb_serial_flush_output>

0000cda8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    cda8:	b.w	b14c <usb_serial_write_buffer_free>

0000cdac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cdac:	mov	r0, r1
    cdae:	mov	r1, r2
    cdb0:	b.w	b134 <usb_serial_write>

0000cdb4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cdb4:	mov	r0, r1
    cdb6:	b.w	b108 <usb_serial_putchar>
    cdba:	nop

0000cdbc <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    cdbc:	ldr	r3, [pc, #4]	; (cdc4 <serialEvent()+0x8>)
    cdbe:	movs	r2, #0
    cdc0:	strb	r2, [r3, #0]
    cdc2:	bx	lr
    cdc4:	.word	0x20000ed8

0000cdc8 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    cdc8:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    cdca:	mov	r6, r1
    cdcc:	cbz	r1, cdec <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    cdce:	cbz	r2, cdf0 <Print::write(unsigned char const*, unsigned int)+0x28>
    cdd0:	mov	r7, r0
    cdd2:	mov	r4, r2
    cdd4:	movs	r5, #0
    cdd6:	ldr	r3, [r7, #0]
    cdd8:	mov	r0, r7
    cdda:	ldrb.w	r1, [r6], #1
    cdde:	ldr	r3, [r3, #0]
    cde0:	blx	r3
    cde2:	subs	r4, #1
    cde4:	add	r5, r0
    cde6:	bne.n	cdd6 <Print::write(unsigned char const*, unsigned int)+0xe>
    cde8:	mov	r0, r5
    cdea:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    cdec:	mov	r0, r1
    cdee:	pop	{r3, r4, r5, r6, r7, pc}
    cdf0:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    cdf2:	pop	{r3, r4, r5, r6, r7, pc}

0000cdf4 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    cdf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cdf8:	ldr	r4, [r1, #8]
    cdfa:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    cdfc:	cbz	r4, ce3a <Print::print(String const&)+0x46>
    cdfe:	movs	r5, #0
    ce00:	mov	r6, r0
    ce02:	mov	r9, r1
    ce04:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    ce06:	mov	r3, r5
    ce08:	movs	r2, #33	; 0x21
    ce0a:	add	r1, sp, #4
    ce0c:	mov	r0, r9
    ce0e:	bl	c9ec <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    ce12:	cmp	r4, #32
    ce14:	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    ce16:	ldr	r0, [r6, #0]
    ce18:	it	cs
    ce1a:	movcs	r3, #32
    ce1c:	add	r1, sp, #4
    ce1e:	ldr.w	r8, [r0, #4]
    ce22:	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    ce24:	subs	r4, r4, r3
		count += write(buffer, nbytes);
    ce26:	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    ce28:	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    ce2a:	blx	r8
    ce2c:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    ce2e:	cmp	r4, #0
    ce30:	bne.n	ce06 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    ce32:	mov	r0, r7
    ce34:	add	sp, #44	; 0x2c
    ce36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    ce3a:	mov	r7, r4
    ce3c:	b.n	ce32 <Print::print(String const&)+0x3e>
    ce3e:	nop

0000ce40 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ce40:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    ce42:	ldr	r4, [pc, #24]	; (ce5c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ce44:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ce46:	ldr	r3, [r0, #0]
    ce48:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ce4a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    ce4c:	add	r1, sp, #4
    ce4e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ce50:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    ce54:	blx	r3
}
    ce56:	add	sp, #8
    ce58:	pop	{r4, pc}
    ce5a:	nop
    ce5c:	.word	0x20000924

0000ce60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ce60:	push	{r4, r5, r6, r7, lr}
    ce62:	mov	r6, r0
    ce64:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ce66:	cmp	r2, #0
    ce68:	beq.n	ced2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    ce6a:	cmp	r2, #1
    ce6c:	it	eq
    ce6e:	moveq	r2, #10
	}


	if (n == 0) {
    ce70:	cbz	r1, cec8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ce72:	movs	r5, #33	; 0x21
    ce74:	b.n	ce78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ce76:	uxtb	r5, r7
    ce78:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ce7a:	udiv	r4, r1, r2
    ce7e:	mls	r1, r2, r4, r1
    ce82:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ce84:	cmp	r1, #9
    ce86:	add.w	r1, r0, #55	; 0x37
    ce8a:	add.w	r0, r0, #48	; 0x30
    ce8e:	it	hi
    ce90:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    ce92:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ce94:	add	r4, sp, #40	; 0x28
    ce96:	it	ls
    ce98:	uxtbls	r0, r0
    ce9a:	add	r4, r5
    ce9c:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    cea0:	cmp	r1, #0
    cea2:	bne.n	ce76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    cea4:	cbz	r3, ceb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    cea6:	subs	r5, #1
		buf[i] = '-';
    cea8:	add	r3, sp, #40	; 0x28
    ceaa:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    ceac:	uxtb	r5, r5
		buf[i] = '-';
    ceae:	add	r3, r5
    ceb0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    ceb4:	ldr	r3, [r6, #0]
    ceb6:	add	r1, sp, #4
    ceb8:	rsb	r2, r5, #34	; 0x22
    cebc:	mov	r0, r6
    cebe:	add	r1, r5
    cec0:	ldr	r3, [r3, #4]
    cec2:	blx	r3
}
    cec4:	add	sp, #44	; 0x2c
    cec6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    cec8:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    ceca:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    cecc:	strb.w	r2, [sp, #37]	; 0x25
    ced0:	b.n	cea4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    ced2:	ldr	r3, [r0, #0]
    ced4:	uxtb	r1, r1
    ced6:	ldr	r3, [r3, #0]
    ced8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    ceda:	add	sp, #44	; 0x2c
    cedc:	pop	{r4, r5, r6, r7, pc}
    cede:	nop

0000cee0 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    cee0:	cmp	r1, #0
    cee2:	blt.n	ceec <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    cee4:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    cee6:	movs	r2, #10
    cee8:	b.w	ce60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    ceec:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    ceee:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    cef0:	movs	r2, #10
    cef2:	b.w	ce60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    cef6:	nop

0000cef8 <operator new(unsigned int)>:
    cef8:	b.w	d5ec <malloc>

0000cefc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    cefc:	movs	r0, #4
    cefe:	mov	r1, lr
    cf00:	tst	r0, r1
    cf02:	beq.n	cf0c <_MSP>
    cf04:	mrs	r0, PSP
    cf08:	b.w	cf14 <HardFault_HandlerC>

0000cf0c <_MSP>:
    cf0c:	mrs	r0, MSP
    cf10:	b.w	cf14 <HardFault_HandlerC>

0000cf14 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    cf14:	ldr	r3, [pc, #108]	; (cf84 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    cf16:	movs	r1, #5
    cf18:	ldr	r2, [pc, #108]	; (cf88 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    cf1a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    cf1c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    cf1e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    cf22:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    cf24:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    cf28:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    cf2a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    cf2c:	ldr	r4, [pc, #92]	; (cf8c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    cf2e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    cf30:	ldr	r0, [pc, #92]	; (cf90 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    cf32:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    cf34:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    cf38:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    cf3c:	ldr	r3, [r4, #0]
    cf3e:	cmp	r3, r0
    cf40:	bls.n	cf48 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    cf42:	ldr	r0, [pc, #80]	; (cf94 <HardFault_HandlerC+0x80>)
    cf44:	bl	b204 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    cf48:	ldr	r5, [pc, #56]	; (cf84 <HardFault_HandlerC+0x70>)
    cf4a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    cf4c:	movs	r0, #0
    cf4e:	ldr	r2, [pc, #72]	; (cf98 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    cf50:	ldr	r1, [pc, #72]	; (cf9c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    cf52:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    cf56:	str	r0, [sp, #4]
    cf58:	ldr	r3, [sp, #4]
    cf5a:	cmp	r3, r2
    cf5c:	bhi.n	cf6a <HardFault_HandlerC+0x56>
    cf5e:	ldr	r3, [sp, #4]
    cf60:	adds	r3, #1
    cf62:	str	r3, [sp, #4]
    cf64:	ldr	r3, [sp, #4]
    cf66:	cmp	r3, r2
    cf68:	bls.n	cf5e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    cf6a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    cf6e:	str	r0, [sp, #4]
    cf70:	ldr	r3, [sp, #4]
    cf72:	cmp	r3, r1
    cf74:	bhi.n	cf52 <HardFault_HandlerC+0x3e>
    cf76:	ldr	r3, [sp, #4]
    cf78:	adds	r3, #1
    cf7a:	str	r3, [sp, #4]
    cf7c:	ldr	r3, [sp, #4]
    cf7e:	cmp	r3, r1
    cf80:	bls.n	cf76 <HardFault_HandlerC+0x62>
    cf82:	b.n	cf52 <HardFault_HandlerC+0x3e>
    cf84:	.word	0x401bc000
    cf88:	.word	0x401f8000
    cf8c:	.word	0x20000dc4
    cf90:	.word	0x23c345ff
    cf94:	.word	0x11e1a300
    cf98:	.word	0x000f423f
    cf9c:	.word	0x0089543f

0000cfa0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    cfa0:	ldr	r2, [pc, #36]	; (cfc8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    cfa2:	push	{r3, lr}
        char *prev = __brkval;
    cfa4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    cfa6:	cbz	r0, cfb2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    cfa8:	add	r0, r3
    cfaa:	ldr	r1, [pc, #32]	; (cfcc <_sbrk+0x2c>)
    cfac:	cmp	r0, r1
    cfae:	bhi.n	cfb6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    cfb0:	str	r0, [r2, #0]
        }
        return prev;
}
    cfb2:	mov	r0, r3
    cfb4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    cfb6:	bl	d590 <__errno>
    cfba:	movs	r2, #12
                        return (void *)-1;
    cfbc:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    cfc0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    cfc2:	mov	r0, r3
    cfc4:	pop	{r3, pc}
    cfc6:	nop
    cfc8:	.word	0x20000eec
    cfcc:	.word	0x20280000

0000cfd0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    cfd0:	push	{r4, r5, r6, r7}
    cfd2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    cfd4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    cfd6:	mov	r7, r6
    cfd8:	b.n	cfdc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    cfda:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    cfdc:	udiv	r3, r0, r2
    cfe0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cfe4:	add.w	r4, r0, #55	; 0x37
    cfe8:	cmp	r0, #9
    cfea:	add.w	r0, r0, #48	; 0x30
    cfee:	uxtb	r4, r4
    cff0:	it	ls
    cff2:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    cff4:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cff6:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    cffa:	cmp	r3, #0
    cffc:	bne.n	cfda <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    cffe:	adds	r2, r1, r5
    d000:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    d002:	cbz	r5, d018 <ultoa+0x48>
    d004:	adds	r3, #1
		t = buf[j];
    d006:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    d00a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d00c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    d00e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d010:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    d012:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d016:	blt.n	d004 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    d018:	mov	r0, r1
    d01a:	pop	{r4, r5, r6, r7}
    d01c:	bx	lr
    d01e:	nop

0000d020 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d020:	ldr	r0, [pc, #656]	; (d2b4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d022:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d026:	ldr	r3, [pc, #656]	; (d2b8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d028:	ldr	r2, [r0, #120]	; 0x78
    d02a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    d02e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d030:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    d032:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d034:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d038:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d03c:	ldr	r4, [pc, #636]	; (d2bc <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d03e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d042:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d044:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d048:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d04a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d04c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d050:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    d054:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d058:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    d05c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d060:	ldrh.w	r0, [r3, #392]	; 0x188
    d064:	uxth	r0, r0
    d066:	orr.w	r0, r0, #240	; 0xf0
    d06a:	strh.w	r0, [r3, #392]	; 0x188
    d06e:	add.w	r0, r1, r1, lsl #1
    d072:	ldr	r3, [pc, #580]	; (d2b8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    d074:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d076:	movs	r5, #0
    d078:	lsls	r0, r0, #5
    d07a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d07c:	cmp	r1, #4
    d07e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d080:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d084:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    d086:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d088:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d08a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d08c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d08e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    d090:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d092:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d094:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d096:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d098:	bne.n	d06e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d09a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d09e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d0a2:	ldr	r3, [pc, #540]	; (d2c0 <pwm_init+0x2a0>)
    d0a4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d0a8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d0aa:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d0ac:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d0b0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d0b2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d0b6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d0ba:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d0be:	ldrh.w	r0, [r4, #392]	; 0x188
    d0c2:	uxth	r0, r0
    d0c4:	orr.w	r0, r0, #3840	; 0xf00
    d0c8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d0cc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    d0d0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d0d4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    d0d8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d0dc:	ldrh.w	r0, [r3, #392]	; 0x188
    d0e0:	uxth	r0, r0
    d0e2:	orr.w	r0, r0, #240	; 0xf0
    d0e6:	strh.w	r0, [r3, #392]	; 0x188
    d0ea:	add.w	r0, r1, r1, lsl #1
    d0ee:	ldr	r3, [pc, #464]	; (d2c0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    d0f0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d0f2:	movs	r5, #0
    d0f4:	lsls	r0, r0, #5
    d0f6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d0f8:	cmp	r1, #4
    d0fa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d0fc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d0fe:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d102:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d104:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d106:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d108:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d10a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    d10c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d10e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d110:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d112:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d114:	bne.n	d0ea <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d116:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d11a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d11e:	ldr	r3, [pc, #420]	; (d2c4 <pwm_init+0x2a4>)
    d120:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d124:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d126:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d128:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d12c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d12e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d132:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d136:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d13a:	ldrh.w	r0, [r4, #392]	; 0x188
    d13e:	uxth	r0, r0
    d140:	orr.w	r0, r0, #3840	; 0xf00
    d144:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d148:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    d14c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d150:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    d154:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d158:	ldrh.w	r0, [r3, #392]	; 0x188
    d15c:	uxth	r0, r0
    d15e:	orr.w	r0, r0, #240	; 0xf0
    d162:	strh.w	r0, [r3, #392]	; 0x188
    d166:	add.w	r0, r1, r1, lsl #1
    d16a:	ldr	r3, [pc, #344]	; (d2c4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    d16c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d16e:	movs	r5, #0
    d170:	lsls	r0, r0, #5
    d172:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d174:	cmp	r1, #4
    d176:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d178:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d17a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d17e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d180:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d182:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d184:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d186:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    d188:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d18a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d18c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d18e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d190:	bne.n	d166 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d192:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d196:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d19a:	ldr	r3, [pc, #300]	; (d2c8 <pwm_init+0x2a8>)
    d19c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d1a0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d1a2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d1a4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    d1a8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d1aa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d1ae:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d1b2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d1b6:	ldrh.w	r0, [r4, #392]	; 0x188
    d1ba:	uxth	r0, r0
    d1bc:	orr.w	r0, r0, #3840	; 0xf00
    d1c0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d1c4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    d1c8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    d1cc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    d1d0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d1d4:	ldrh.w	r0, [r3, #392]	; 0x188
    d1d8:	uxth	r0, r0
    d1da:	orr.w	r0, r0, #240	; 0xf0
    d1de:	strh.w	r0, [r3, #392]	; 0x188
    d1e2:	add.w	r0, r1, r1, lsl #1
    d1e6:	ldr	r3, [pc, #224]	; (d2c8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    d1e8:	adds	r1, #1
    d1ea:	lsls	r0, r0, #5
    d1ec:	mov	r4, r3
    d1ee:	cmp	r1, #4
    d1f0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d1f2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d1f4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d1f8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d1fa:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d1fc:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d1fe:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d200:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    d202:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d204:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d206:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d208:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    d20a:	bne.n	d1e2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d20c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d210:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d212:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d214:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d218:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d21a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d21e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d220:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d224:	orrs	r3, r7
    d226:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d22a:	ldrh.w	r3, [r4, #392]	; 0x188
    d22e:	uxth	r3, r3
    d230:	orr.w	r3, r3, #3840	; 0xf00
    d234:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d238:	lsls	r0, r2, #5
    d23a:	ldr	r3, [pc, #144]	; (d2cc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d23c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d23e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d240:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    d242:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    d244:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d246:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d248:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d24a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d24e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    d250:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d252:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d254:	bne.n	d238 <pwm_init+0x218>
    d256:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d258:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d25a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d25e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d262:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d264:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d268:	lsls	r0, r2, #5
    d26a:	ldr	r3, [pc, #100]	; (d2d0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d26c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d26e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d270:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    d272:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    d274:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d276:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d278:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d27a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d27c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    d27e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d280:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d282:	bne.n	d268 <pwm_init+0x248>
    d284:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d286:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d288:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d28c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d290:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d292:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    d296:	lsls	r0, r2, #5
    d298:	ldr	r3, [pc, #56]	; (d2d4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d29a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    d29c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d29e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    d2a0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    d2a2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d2a4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d2a6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d2a8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d2aa:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    d2ac:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d2ae:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    d2b0:	bne.n	d296 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    d2b2:	pop	{r4, r5, r6, r7, pc}
    d2b4:	.word	0x400fc000
    d2b8:	.word	0x403dc000
    d2bc:	.word	0xfc030000
    d2c0:	.word	0x403e0000
    d2c4:	.word	0x403e4000
    d2c8:	.word	0x403e8000
    d2cc:	.word	0x401dc000
    d2d0:	.word	0x401e0000
    d2d4:	.word	0x401e4000

0000d2d8 <sqrt>:
    d2d8:	push	{lr}
    d2da:	vpush	{d8}
    d2de:	vmov.f64	d8, d0
    d2e2:	sub	sp, #44	; 0x2c
    d2e4:	bl	d380 <__ieee754_sqrt>
    d2e8:	ldr	r3, [pc, #140]	; (d378 <sqrt+0xa0>)
    d2ea:	ldrsb.w	r3, [r3]
    d2ee:	adds	r2, r3, #1
    d2f0:	beq.n	d30a <sqrt+0x32>
    d2f2:	vcmp.f64	d8, d8
    d2f6:	vmrs	APSR_nzcv, fpscr
    d2fa:	bvs.n	d30a <sqrt+0x32>
    d2fc:	vldr	d7, [pc, #112]	; d370 <sqrt+0x98>
    d300:	vcmpe.f64	d8, d7
    d304:	vmrs	APSR_nzcv, fpscr
    d308:	bmi.n	d314 <sqrt+0x3c>
    d30a:	add	sp, #44	; 0x2c
    d30c:	vpop	{d8}
    d310:	ldr.w	pc, [sp], #4
    d314:	movs	r2, #1
    d316:	ldr	r1, [pc, #100]	; (d37c <sqrt+0xa4>)
    d318:	str	r2, [sp, #0]
    d31a:	movs	r2, #0
    d31c:	vstr	d8, [sp, #16]
    d320:	vstr	d8, [sp, #8]
    d324:	str	r1, [sp, #4]
    d326:	str	r2, [sp, #32]
    d328:	cbz	r3, d350 <sqrt+0x78>
    d32a:	vdiv.f64	d6, d7, d7
    d32e:	cmp	r3, #2
    d330:	vstr	d6, [sp, #24]
    d334:	bne.n	d354 <sqrt+0x7c>
    d336:	bl	d590 <__errno>
    d33a:	movs	r3, #33	; 0x21
    d33c:	str	r3, [r0, #0]
    d33e:	ldr	r3, [sp, #32]
    d340:	cbnz	r3, d360 <sqrt+0x88>
    d342:	vldr	d0, [sp, #24]
    d346:	add	sp, #44	; 0x2c
    d348:	vpop	{d8}
    d34c:	ldr.w	pc, [sp], #4
    d350:	vstr	d7, [sp, #24]
    d354:	mov	r0, sp
    d356:	bl	d504 <matherr>
    d35a:	cmp	r0, #0
    d35c:	bne.n	d33e <sqrt+0x66>
    d35e:	b.n	d336 <sqrt+0x5e>
    d360:	bl	d590 <__errno>
    d364:	ldr	r3, [sp, #32]
    d366:	str	r3, [r0, #0]
    d368:	b.n	d342 <sqrt+0x6a>
    d36a:	nop
    d36c:	nop.w
	...
    d378:	.word	0x20000ef0
    d37c:	.word	0x20000928

0000d380 <__ieee754_sqrt>:
    d380:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d384:	sub	sp, #8
    d386:	vstr	d0, [sp]
    d38a:	ldr	r1, [pc, #372]	; (d500 <__ieee754_sqrt+0x180>)
    d38c:	ldr	r3, [sp, #4]
    d38e:	ldr	r0, [sp, #0]
    d390:	mov	r4, r1
    d392:	ands	r1, r3
    d394:	cmp	r1, r4
    d396:	beq.w	d4ca <__ieee754_sqrt+0x14a>
    d39a:	cmp	r3, #0
    d39c:	mov	r2, r0
    d39e:	ble.n	d490 <__ieee754_sqrt+0x110>
    d3a0:	asrs	r7, r3, #20
    d3a2:	beq.w	d4aa <__ieee754_sqrt+0x12a>
    d3a6:	subw	r7, r7, #1023	; 0x3ff
    d3aa:	ubfx	r3, r3, #0, #20
    d3ae:	lsls	r1, r7, #31
    d3b0:	orr.w	r3, r3, #1048576	; 0x100000
    d3b4:	bmi.n	d486 <__ieee754_sqrt+0x106>
    d3b6:	add.w	r1, r3, r2, lsr #31
    d3ba:	movs	r6, #0
    d3bc:	add	r3, r1
    d3be:	asrs	r7, r7, #1
    d3c0:	lsls	r2, r2, #1
    d3c2:	mov	lr, r6
    d3c4:	movs	r0, #22
    d3c6:	mov.w	r1, #2097152	; 0x200000
    d3ca:	add.w	r4, lr, r1
    d3ce:	cmp	r4, r3
    d3d0:	mov.w	r5, r2, lsr #31
    d3d4:	mov.w	r2, r2, lsl #1
    d3d8:	bgt.n	d3e2 <__ieee754_sqrt+0x62>
    d3da:	subs	r3, r3, r4
    d3dc:	add.w	lr, r4, r1
    d3e0:	add	r6, r1
    d3e2:	subs	r0, #1
    d3e4:	add.w	r3, r5, r3, lsl #1
    d3e8:	mov.w	r1, r1, lsr #1
    d3ec:	bne.n	d3ca <__ieee754_sqrt+0x4a>
    d3ee:	mov	ip, r0
    d3f0:	movs	r4, #32
    d3f2:	mov.w	r1, #2147483648	; 0x80000000
    d3f6:	b.n	d40c <__ieee754_sqrt+0x8c>
    d3f8:	beq.n	d43c <__ieee754_sqrt+0xbc>
    d3fa:	add.w	r5, r3, r2, lsr #31
    d3fe:	subs	r4, #1
    d400:	mov.w	r1, r1, lsr #1
    d404:	add	r3, r5
    d406:	mov.w	r2, r2, lsl #1
    d40a:	beq.n	d44e <__ieee754_sqrt+0xce>
    d40c:	cmp	lr, r3
    d40e:	add.w	r5, r1, ip
    d412:	bge.n	d3f8 <__ieee754_sqrt+0x78>
    d414:	cmp	r5, #0
    d416:	add.w	ip, r5, r1
    d41a:	blt.n	d430 <__ieee754_sqrt+0xb0>
    d41c:	mov	r8, lr
    d41e:	cmp	r5, r2
    d420:	rsb	r3, lr, r3
    d424:	bls.n	d428 <__ieee754_sqrt+0xa8>
    d426:	subs	r3, #1
    d428:	subs	r2, r2, r5
    d42a:	add	r0, r1
    d42c:	mov	lr, r8
    d42e:	b.n	d3fa <__ieee754_sqrt+0x7a>
    d430:	cmp.w	ip, #0
    d434:	blt.n	d41c <__ieee754_sqrt+0x9c>
    d436:	add.w	r8, lr, #1
    d43a:	b.n	d41e <__ieee754_sqrt+0x9e>
    d43c:	cmp	r5, r2
    d43e:	bhi.n	d476 <__ieee754_sqrt+0xf6>
    d440:	cmp	r5, #0
    d442:	add.w	ip, r5, r1
    d446:	blt.n	d4da <__ieee754_sqrt+0x15a>
    d448:	mov	r8, r3
    d44a:	movs	r3, #0
    d44c:	b.n	d428 <__ieee754_sqrt+0xa8>
    d44e:	orrs	r3, r2
    d450:	bne.n	d47a <__ieee754_sqrt+0xfa>
    d452:	lsrs	r0, r0, #1
    d454:	asrs	r1, r6, #1
    d456:	lsls	r3, r6, #31
    d458:	add.w	r1, r1, #1069547520	; 0x3fc00000
    d45c:	add.w	r1, r1, #2097152	; 0x200000
    d460:	it	mi
    d462:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    d466:	add.w	r3, r1, r7, lsl #20
    d46a:	mov	r2, r0
    d46c:	vmov	d0, r2, r3
    d470:	add	sp, #8
    d472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d476:	mov	r3, lr
    d478:	b.n	d3fa <__ieee754_sqrt+0x7a>
    d47a:	adds	r2, r0, #1
    d47c:	beq.n	d4e2 <__ieee754_sqrt+0x162>
    d47e:	and.w	r3, r0, #1
    d482:	add	r0, r3
    d484:	b.n	d452 <__ieee754_sqrt+0xd2>
    d486:	lsls	r3, r3, #1
    d488:	add.w	r3, r3, r2, lsr #31
    d48c:	lsls	r2, r2, #1
    d48e:	b.n	d3b6 <__ieee754_sqrt+0x36>
    d490:	bic.w	r1, r3, #2147483648	; 0x80000000
    d494:	orrs	r1, r0
    d496:	beq.n	d4d4 <__ieee754_sqrt+0x154>
    d498:	cbnz	r3, d4f2 <__ieee754_sqrt+0x172>
    d49a:	mov	r7, r3
    d49c:	lsrs	r3, r2, #11
    d49e:	subs	r7, #21
    d4a0:	lsls	r2, r2, #21
    d4a2:	cmp	r3, #0
    d4a4:	beq.n	d49c <__ieee754_sqrt+0x11c>
    d4a6:	lsls	r5, r3, #11
    d4a8:	bmi.n	d4e8 <__ieee754_sqrt+0x168>
    d4aa:	movs	r1, #0
    d4ac:	b.n	d4b0 <__ieee754_sqrt+0x130>
    d4ae:	mov	r1, r0
    d4b0:	lsls	r3, r3, #1
    d4b2:	lsls	r4, r3, #11
    d4b4:	add.w	r0, r1, #1
    d4b8:	bpl.n	d4ae <__ieee754_sqrt+0x12e>
    d4ba:	rsb	r4, r0, #32
    d4be:	lsr.w	r4, r2, r4
    d4c2:	orrs	r3, r4
    d4c4:	subs	r7, r7, r1
    d4c6:	lsls	r2, r0
    d4c8:	b.n	d3a6 <__ieee754_sqrt+0x26>
    d4ca:	vfma.f64	d0, d0, d0
    d4ce:	add	sp, #8
    d4d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4d4:	vldr	d0, [sp]
    d4d8:	b.n	d470 <__ieee754_sqrt+0xf0>
    d4da:	cmp.w	ip, #0
    d4de:	bge.n	d436 <__ieee754_sqrt+0xb6>
    d4e0:	b.n	d448 <__ieee754_sqrt+0xc8>
    d4e2:	adds	r6, #1
    d4e4:	mov	r0, r4
    d4e6:	b.n	d454 <__ieee754_sqrt+0xd4>
    d4e8:	movs	r4, #32
    d4ea:	mov.w	r1, #4294967295
    d4ee:	movs	r0, #0
    d4f0:	b.n	d4be <__ieee754_sqrt+0x13e>
    d4f2:	vldr	d7, [sp]
    d4f6:	vsub.f64	d7, d7, d7
    d4fa:	vdiv.f64	d0, d7, d7
    d4fe:	b.n	d470 <__ieee754_sqrt+0xf0>
    d500:	.word	0x7ff00000

0000d504 <matherr>:
    d504:	movs	r0, #0
    d506:	bx	lr

0000d508 <__aeabi_atexit>:
    d508:	mov	r3, r1
    d50a:	mov	r1, r0
    d50c:	mov	r0, r3
    d50e:	b.w	d584 <__cxa_atexit>
    d512:	nop

0000d514 <calloc>:
    d514:	ldr	r3, [pc, #8]	; (d520 <calloc+0xc>)
    d516:	mov	r2, r1
    d518:	mov	r1, r0
    d51a:	ldr	r0, [r3, #0]
    d51c:	b.w	d524 <_calloc_r>
    d520:	.word	0x20001320

0000d524 <_calloc_r>:
    d524:	push	{r4, lr}
    d526:	mul.w	r1, r2, r1
    d52a:	bl	d60c <_malloc_r>
    d52e:	mov	r4, r0
    d530:	cbz	r0, d56a <_calloc_r+0x46>
    d532:	ldr.w	r2, [r0, #-4]
    d536:	bic.w	r2, r2, #3
    d53a:	subs	r2, #4
    d53c:	cmp	r2, #36	; 0x24
    d53e:	bhi.n	d572 <_calloc_r+0x4e>
    d540:	cmp	r2, #19
    d542:	bls.n	d56e <_calloc_r+0x4a>
    d544:	movs	r3, #0
    d546:	cmp	r2, #27
    d548:	str	r3, [r0, #0]
    d54a:	str	r3, [r0, #4]
    d54c:	bls.n	d57c <_calloc_r+0x58>
    d54e:	cmp	r2, #36	; 0x24
    d550:	str	r3, [r0, #8]
    d552:	str	r3, [r0, #12]
    d554:	iteee	ne
    d556:	addne.w	r2, r0, #16
    d55a:	streq	r3, [r0, #16]
    d55c:	streq	r3, [r0, #20]
    d55e:	addeq.w	r2, r0, #24
    d562:	movs	r3, #0
    d564:	str	r3, [r2, #0]
    d566:	str	r3, [r2, #4]
    d568:	str	r3, [r2, #8]
    d56a:	mov	r0, r4
    d56c:	pop	{r4, pc}
    d56e:	mov	r2, r0
    d570:	b.n	d562 <_calloc_r+0x3e>
    d572:	movs	r1, #0
    d574:	bl	dc44 <memset>
    d578:	mov	r0, r4
    d57a:	pop	{r4, pc}
    d57c:	add.w	r2, r0, #8
    d580:	b.n	d562 <_calloc_r+0x3e>
    d582:	nop

0000d584 <__cxa_atexit>:
    d584:	mov	r3, r2
    d586:	mov	r2, r1
    d588:	mov	r1, r0
    d58a:	movs	r0, #2
    d58c:	b.w	e604 <__register_exitproc>

0000d590 <__errno>:
    d590:	ldr	r3, [pc, #4]	; (d598 <__errno+0x8>)
    d592:	ldr	r0, [r3, #0]
    d594:	bx	lr
    d596:	nop
    d598:	.word	0x20001320

0000d59c <__libc_init_array>:
    d59c:	push	{r4, r5, r6, lr}
    d59e:	ldr	r6, [pc, #60]	; (d5dc <__libc_init_array+0x40>)
    d5a0:	ldr	r5, [pc, #60]	; (d5e0 <__libc_init_array+0x44>)
    d5a2:	subs	r6, r6, r5
    d5a4:	asrs	r6, r6, #2
    d5a6:	it	ne
    d5a8:	movne	r4, #0
    d5aa:	beq.n	d5b8 <__libc_init_array+0x1c>
    d5ac:	adds	r4, #1
    d5ae:	ldr.w	r3, [r5], #4
    d5b2:	blx	r3
    d5b4:	cmp	r6, r4
    d5b6:	bne.n	d5ac <__libc_init_array+0x10>
    d5b8:	ldr	r6, [pc, #40]	; (d5e4 <__libc_init_array+0x48>)
    d5ba:	ldr	r5, [pc, #44]	; (d5e8 <__libc_init_array+0x4c>)
    d5bc:	subs	r6, r6, r5
    d5be:	bl	e918 <___init_veneer>
    d5c2:	asrs	r6, r6, #2
    d5c4:	it	ne
    d5c6:	movne	r4, #0
    d5c8:	beq.n	d5d8 <__libc_init_array+0x3c>
    d5ca:	adds	r4, #1
    d5cc:	ldr.w	r3, [r5], #4
    d5d0:	blx	r3
    d5d2:	cmp	r6, r4
    d5d4:	bne.n	d5ca <__libc_init_array+0x2e>
    d5d6:	pop	{r4, r5, r6, pc}
    d5d8:	pop	{r4, r5, r6, pc}
    d5da:	nop
    d5dc:	.word	0x60001600
    d5e0:	.word	0x60001600
    d5e4:	.word	0x6000160c
    d5e8:	.word	0x60001600

0000d5ec <malloc>:
    d5ec:	ldr	r3, [pc, #8]	; (d5f8 <malloc+0xc>)
    d5ee:	mov	r1, r0
    d5f0:	ldr	r0, [r3, #0]
    d5f2:	b.w	d60c <_malloc_r>
    d5f6:	nop
    d5f8:	.word	0x20001320

0000d5fc <free>:
    d5fc:	ldr	r3, [pc, #8]	; (d608 <free+0xc>)
    d5fe:	mov	r1, r0
    d600:	ldr	r0, [r3, #0]
    d602:	b.w	e744 <_free_r>
    d606:	nop
    d608:	.word	0x20001320

0000d60c <_malloc_r>:
    d60c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d610:	add.w	r5, r1, #11
    d614:	cmp	r5, #22
    d616:	sub	sp, #12
    d618:	mov	r6, r0
    d61a:	bls.w	d75c <_malloc_r+0x150>
    d61e:	bics.w	r5, r5, #7
    d622:	bmi.w	d7a4 <_malloc_r+0x198>
    d626:	cmp	r1, r5
    d628:	bhi.w	d7a4 <_malloc_r+0x198>
    d62c:	bl	dce0 <__malloc_lock>
    d630:	cmp.w	r5, #504	; 0x1f8
    d634:	bcc.w	db70 <_malloc_r+0x564>
    d638:	lsrs	r3, r5, #9
    d63a:	beq.w	d7b2 <_malloc_r+0x1a6>
    d63e:	cmp	r3, #4
    d640:	bhi.w	d94a <_malloc_r+0x33e>
    d644:	lsrs	r0, r5, #6
    d646:	add.w	lr, r0, #57	; 0x39
    d64a:	mov.w	r3, lr, lsl #1
    d64e:	adds	r0, #56	; 0x38
    d650:	ldr	r7, [pc, #784]	; (d964 <_malloc_r+0x358>)
    d652:	add.w	r3, r7, r3, lsl #2
    d656:	sub.w	r1, r3, #8
    d65a:	ldr	r4, [r3, #4]
    d65c:	cmp	r1, r4
    d65e:	bne.n	d670 <_malloc_r+0x64>
    d660:	b.n	d7bc <_malloc_r+0x1b0>
    d662:	cmp	r2, #0
    d664:	bge.w	d7c0 <_malloc_r+0x1b4>
    d668:	ldr	r4, [r4, #12]
    d66a:	cmp	r1, r4
    d66c:	beq.w	d7bc <_malloc_r+0x1b0>
    d670:	ldr	r3, [r4, #4]
    d672:	bic.w	r3, r3, #3
    d676:	subs	r2, r3, r5
    d678:	cmp	r2, #15
    d67a:	ble.n	d662 <_malloc_r+0x56>
    d67c:	ldr	r1, [pc, #740]	; (d964 <_malloc_r+0x358>)
    d67e:	ldr	r4, [r7, #16]
    d680:	add.w	lr, r1, #8
    d684:	cmp	r4, lr
    d686:	beq.w	d9f0 <_malloc_r+0x3e4>
    d68a:	ldr	r3, [r4, #4]
    d68c:	bic.w	r3, r3, #3
    d690:	subs	r2, r3, r5
    d692:	cmp	r2, #15
    d694:	bgt.w	d9ca <_malloc_r+0x3be>
    d698:	cmp	r2, #0
    d69a:	str.w	lr, [r1, #20]
    d69e:	str.w	lr, [r1, #16]
    d6a2:	bge.w	d7e2 <_malloc_r+0x1d6>
    d6a6:	cmp.w	r3, #512	; 0x200
    d6aa:	bcs.w	d97c <_malloc_r+0x370>
    d6ae:	lsrs	r3, r3, #3
    d6b0:	add.w	ip, r3, #1
    d6b4:	movs	r2, #1
    d6b6:	asrs	r3, r3, #2
    d6b8:	lsl.w	r3, r2, r3
    d6bc:	ldr	r2, [r1, #4]
    d6be:	ldr.w	r8, [r1, ip, lsl #3]
    d6c2:	str.w	r8, [r4, #8]
    d6c6:	add.w	r9, r1, ip, lsl #3
    d6ca:	orrs	r2, r3
    d6cc:	sub.w	r3, r9, #8
    d6d0:	str	r3, [r4, #12]
    d6d2:	str	r2, [r1, #4]
    d6d4:	str.w	r4, [r1, ip, lsl #3]
    d6d8:	str.w	r4, [r8, #12]
    d6dc:	asrs	r3, r0, #2
    d6de:	movs	r4, #1
    d6e0:	lsls	r4, r3
    d6e2:	cmp	r4, r2
    d6e4:	bhi.w	d7fc <_malloc_r+0x1f0>
    d6e8:	tst	r4, r2
    d6ea:	bne.n	d6fa <_malloc_r+0xee>
    d6ec:	bic.w	r0, r0, #3
    d6f0:	lsls	r4, r4, #1
    d6f2:	tst	r4, r2
    d6f4:	add.w	r0, r0, #4
    d6f8:	beq.n	d6f0 <_malloc_r+0xe4>
    d6fa:	add.w	r9, r7, r0, lsl #3
    d6fe:	mov	ip, r9
    d700:	mov	r8, r0
    d702:	ldr.w	r1, [ip, #12]
    d706:	cmp	ip, r1
    d708:	bne.n	d71a <_malloc_r+0x10e>
    d70a:	b.n	d9f4 <_malloc_r+0x3e8>
    d70c:	cmp	r2, #0
    d70e:	bge.w	da14 <_malloc_r+0x408>
    d712:	ldr	r1, [r1, #12]
    d714:	cmp	ip, r1
    d716:	beq.w	d9f4 <_malloc_r+0x3e8>
    d71a:	ldr	r3, [r1, #4]
    d71c:	bic.w	r3, r3, #3
    d720:	subs	r2, r3, r5
    d722:	cmp	r2, #15
    d724:	ble.n	d70c <_malloc_r+0x100>
    d726:	mov	r4, r1
    d728:	ldr.w	ip, [r1, #12]
    d72c:	ldr.w	r8, [r4, #8]!
    d730:	adds	r3, r1, r5
    d732:	orr.w	r5, r5, #1
    d736:	str	r5, [r1, #4]
    d738:	orr.w	r1, r2, #1
    d73c:	str.w	ip, [r8, #12]
    d740:	mov	r0, r6
    d742:	str.w	r8, [ip, #8]
    d746:	str	r3, [r7, #20]
    d748:	str	r3, [r7, #16]
    d74a:	str.w	lr, [r3, #12]
    d74e:	str.w	lr, [r3, #8]
    d752:	str	r1, [r3, #4]
    d754:	str	r2, [r3, r2]
    d756:	bl	dce4 <__malloc_unlock>
    d75a:	b.n	d79c <_malloc_r+0x190>
    d75c:	cmp	r1, #16
    d75e:	bhi.n	d7a4 <_malloc_r+0x198>
    d760:	bl	dce0 <__malloc_lock>
    d764:	movs	r5, #16
    d766:	movs	r3, #6
    d768:	movs	r0, #2
    d76a:	ldr	r7, [pc, #504]	; (d964 <_malloc_r+0x358>)
    d76c:	add.w	r3, r7, r3, lsl #2
    d770:	sub.w	r2, r3, #8
    d774:	ldr	r4, [r3, #4]
    d776:	cmp	r4, r2
    d778:	beq.w	da06 <_malloc_r+0x3fa>
    d77c:	ldr	r3, [r4, #4]
    d77e:	ldr	r1, [r4, #12]
    d780:	ldr	r5, [r4, #8]
    d782:	bic.w	r3, r3, #3
    d786:	add	r3, r4
    d788:	mov	r0, r6
    d78a:	ldr	r2, [r3, #4]
    d78c:	str	r1, [r5, #12]
    d78e:	orr.w	r2, r2, #1
    d792:	str	r5, [r1, #8]
    d794:	str	r2, [r3, #4]
    d796:	bl	dce4 <__malloc_unlock>
    d79a:	adds	r4, #8
    d79c:	mov	r0, r4
    d79e:	add	sp, #12
    d7a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7a4:	movs	r4, #0
    d7a6:	movs	r3, #12
    d7a8:	mov	r0, r4
    d7aa:	str	r3, [r6, #0]
    d7ac:	add	sp, #12
    d7ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7b2:	movs	r3, #128	; 0x80
    d7b4:	mov.w	lr, #64	; 0x40
    d7b8:	movs	r0, #63	; 0x3f
    d7ba:	b.n	d650 <_malloc_r+0x44>
    d7bc:	mov	r0, lr
    d7be:	b.n	d67c <_malloc_r+0x70>
    d7c0:	add	r3, r4
    d7c2:	ldr	r1, [r4, #12]
    d7c4:	ldr	r2, [r3, #4]
    d7c6:	ldr	r5, [r4, #8]
    d7c8:	orr.w	r2, r2, #1
    d7cc:	str	r1, [r5, #12]
    d7ce:	mov	r0, r6
    d7d0:	str	r5, [r1, #8]
    d7d2:	str	r2, [r3, #4]
    d7d4:	bl	dce4 <__malloc_unlock>
    d7d8:	adds	r4, #8
    d7da:	mov	r0, r4
    d7dc:	add	sp, #12
    d7de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7e2:	add	r3, r4
    d7e4:	mov	r0, r6
    d7e6:	ldr	r2, [r3, #4]
    d7e8:	orr.w	r2, r2, #1
    d7ec:	str	r2, [r3, #4]
    d7ee:	bl	dce4 <__malloc_unlock>
    d7f2:	adds	r4, #8
    d7f4:	mov	r0, r4
    d7f6:	add	sp, #12
    d7f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7fc:	ldr	r4, [r7, #8]
    d7fe:	ldr	r3, [r4, #4]
    d800:	bic.w	r8, r3, #3
    d804:	cmp	r8, r5
    d806:	bcc.n	d812 <_malloc_r+0x206>
    d808:	rsb	r3, r5, r8
    d80c:	cmp	r3, #15
    d80e:	bgt.w	d92a <_malloc_r+0x31e>
    d812:	ldr	r3, [pc, #340]	; (d968 <_malloc_r+0x35c>)
    d814:	ldr.w	r9, [pc, #352]	; d978 <_malloc_r+0x36c>
    d818:	ldr	r2, [r3, #0]
    d81a:	ldr.w	r3, [r9]
    d81e:	adds	r3, #1
    d820:	add	r2, r5
    d822:	add.w	sl, r4, r8
    d826:	beq.w	daea <_malloc_r+0x4de>
    d82a:	add.w	r2, r2, #4096	; 0x1000
    d82e:	adds	r2, #15
    d830:	bic.w	r2, r2, #4080	; 0xff0
    d834:	bic.w	r2, r2, #15
    d838:	mov	r1, r2
    d83a:	mov	r0, r6
    d83c:	str	r2, [sp, #4]
    d83e:	bl	e0d8 <_sbrk_r>
    d842:	cmp.w	r0, #4294967295
    d846:	mov	fp, r0
    d848:	ldr	r2, [sp, #4]
    d84a:	beq.w	dafe <_malloc_r+0x4f2>
    d84e:	cmp	sl, r0
    d850:	bhi.w	da4c <_malloc_r+0x440>
    d854:	ldr	r3, [pc, #276]	; (d96c <_malloc_r+0x360>)
    d856:	ldr	r1, [r3, #0]
    d858:	cmp	sl, fp
    d85a:	add	r1, r2
    d85c:	str	r1, [r3, #0]
    d85e:	beq.w	db08 <_malloc_r+0x4fc>
    d862:	ldr.w	r0, [r9]
    d866:	ldr.w	lr, [pc, #272]	; d978 <_malloc_r+0x36c>
    d86a:	adds	r0, #1
    d86c:	ittet	ne
    d86e:	rsbne	sl, sl, fp
    d872:	addne	r1, sl
    d874:	streq.w	fp, [lr]
    d878:	strne	r1, [r3, #0]
    d87a:	ands.w	r1, fp, #7
    d87e:	beq.w	dab0 <_malloc_r+0x4a4>
    d882:	rsb	r0, r1, #8
    d886:	rsb	r1, r1, #4096	; 0x1000
    d88a:	add	fp, r0
    d88c:	adds	r1, #8
    d88e:	add	r2, fp
    d890:	ubfx	r2, r2, #0, #12
    d894:	rsb	r9, r2, r1
    d898:	mov	r1, r9
    d89a:	mov	r0, r6
    d89c:	str	r3, [sp, #4]
    d89e:	bl	e0d8 <_sbrk_r>
    d8a2:	adds	r3, r0, #1
    d8a4:	ldr	r3, [sp, #4]
    d8a6:	beq.w	db28 <_malloc_r+0x51c>
    d8aa:	rsb	r2, fp, r0
    d8ae:	add	r2, r9
    d8b0:	orr.w	r2, r2, #1
    d8b4:	ldr	r1, [r3, #0]
    d8b6:	str.w	fp, [r7, #8]
    d8ba:	add	r1, r9
    d8bc:	cmp	r4, r7
    d8be:	str.w	r2, [fp, #4]
    d8c2:	str	r1, [r3, #0]
    d8c4:	ldr.w	r9, [pc, #164]	; d96c <_malloc_r+0x360>
    d8c8:	beq.n	d8f8 <_malloc_r+0x2ec>
    d8ca:	cmp.w	r8, #15
    d8ce:	bls.w	dacc <_malloc_r+0x4c0>
    d8d2:	ldr	r2, [r4, #4]
    d8d4:	sub.w	r3, r8, #12
    d8d8:	bic.w	r3, r3, #7
    d8dc:	adds	r0, r4, r3
    d8de:	and.w	r2, r2, #1
    d8e2:	mov.w	lr, #5
    d8e6:	orrs	r2, r3
    d8e8:	cmp	r3, #15
    d8ea:	str	r2, [r4, #4]
    d8ec:	str.w	lr, [r0, #4]
    d8f0:	str.w	lr, [r0, #8]
    d8f4:	bhi.w	db30 <_malloc_r+0x524>
    d8f8:	ldr	r3, [pc, #116]	; (d970 <_malloc_r+0x364>)
    d8fa:	ldr	r4, [r7, #8]
    d8fc:	ldr	r2, [r3, #0]
    d8fe:	cmp	r1, r2
    d900:	it	hi
    d902:	strhi	r1, [r3, #0]
    d904:	ldr	r3, [pc, #108]	; (d974 <_malloc_r+0x368>)
    d906:	ldr	r2, [r3, #0]
    d908:	cmp	r1, r2
    d90a:	ldr	r2, [r4, #4]
    d90c:	it	hi
    d90e:	strhi	r1, [r3, #0]
    d910:	bic.w	r2, r2, #3
    d914:	cmp	r5, r2
    d916:	sub.w	r3, r2, r5
    d91a:	bhi.n	d920 <_malloc_r+0x314>
    d91c:	cmp	r3, #15
    d91e:	bgt.n	d92a <_malloc_r+0x31e>
    d920:	mov	r0, r6
    d922:	bl	dce4 <__malloc_unlock>
    d926:	movs	r4, #0
    d928:	b.n	d79c <_malloc_r+0x190>
    d92a:	adds	r2, r4, r5
    d92c:	orr.w	r3, r3, #1
    d930:	orr.w	r5, r5, #1
    d934:	str	r5, [r4, #4]
    d936:	mov	r0, r6
    d938:	str	r2, [r7, #8]
    d93a:	str	r3, [r2, #4]
    d93c:	bl	dce4 <__malloc_unlock>
    d940:	adds	r4, #8
    d942:	mov	r0, r4
    d944:	add	sp, #12
    d946:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d94a:	cmp	r3, #20
    d94c:	bls.n	da32 <_malloc_r+0x426>
    d94e:	cmp	r3, #84	; 0x54
    d950:	bhi.w	da9c <_malloc_r+0x490>
    d954:	lsrs	r0, r5, #12
    d956:	add.w	lr, r0, #111	; 0x6f
    d95a:	mov.w	r3, lr, lsl #1
    d95e:	adds	r0, #110	; 0x6e
    d960:	b.n	d650 <_malloc_r+0x44>
    d962:	nop
    d964:	.word	0x20001324
    d968:	.word	0x2000e778
    d96c:	.word	0x2000e77c
    d970:	.word	0x2000e774
    d974:	.word	0x2000e770
    d978:	.word	0x20001730
    d97c:	lsrs	r2, r3, #9
    d97e:	cmp	r2, #4
    d980:	bls.n	da40 <_malloc_r+0x434>
    d982:	cmp	r2, #20
    d984:	bhi.w	daee <_malloc_r+0x4e2>
    d988:	add.w	r1, r2, #92	; 0x5c
    d98c:	lsls	r1, r1, #1
    d98e:	adds	r2, #91	; 0x5b
    d990:	add.w	ip, r7, r1, lsl #2
    d994:	ldr.w	r1, [r7, r1, lsl #2]
    d998:	ldr.w	r8, [pc, #476]	; db78 <_malloc_r+0x56c>
    d99c:	sub.w	ip, ip, #8
    d9a0:	cmp	ip, r1
    d9a2:	beq.w	dab6 <_malloc_r+0x4aa>
    d9a6:	ldr	r2, [r1, #4]
    d9a8:	bic.w	r2, r2, #3
    d9ac:	cmp	r3, r2
    d9ae:	bcs.n	d9b6 <_malloc_r+0x3aa>
    d9b0:	ldr	r1, [r1, #8]
    d9b2:	cmp	ip, r1
    d9b4:	bne.n	d9a6 <_malloc_r+0x39a>
    d9b6:	ldr.w	ip, [r1, #12]
    d9ba:	ldr	r2, [r7, #4]
    d9bc:	str.w	ip, [r4, #12]
    d9c0:	str	r1, [r4, #8]
    d9c2:	str.w	r4, [ip, #8]
    d9c6:	str	r4, [r1, #12]
    d9c8:	b.n	d6dc <_malloc_r+0xd0>
    d9ca:	adds	r3, r4, r5
    d9cc:	orr.w	r7, r2, #1
    d9d0:	orr.w	r5, r5, #1
    d9d4:	str	r5, [r4, #4]
    d9d6:	mov	r0, r6
    d9d8:	str	r3, [r1, #20]
    d9da:	str	r3, [r1, #16]
    d9dc:	str.w	lr, [r3, #12]
    d9e0:	str.w	lr, [r3, #8]
    d9e4:	str	r7, [r3, #4]
    d9e6:	str	r2, [r3, r2]
    d9e8:	adds	r4, #8
    d9ea:	bl	dce4 <__malloc_unlock>
    d9ee:	b.n	d79c <_malloc_r+0x190>
    d9f0:	ldr	r2, [r1, #4]
    d9f2:	b.n	d6dc <_malloc_r+0xd0>
    d9f4:	add.w	r8, r8, #1
    d9f8:	tst.w	r8, #3
    d9fc:	add.w	ip, ip, #8
    da00:	bne.w	d702 <_malloc_r+0xf6>
    da04:	b.n	da68 <_malloc_r+0x45c>
    da06:	ldr	r4, [r3, #12]
    da08:	cmp	r3, r4
    da0a:	it	eq
    da0c:	addeq	r0, #2
    da0e:	beq.w	d67c <_malloc_r+0x70>
    da12:	b.n	d77c <_malloc_r+0x170>
    da14:	add	r3, r1
    da16:	mov	r4, r1
    da18:	ldr	r2, [r3, #4]
    da1a:	ldr	r1, [r1, #12]
    da1c:	ldr.w	r5, [r4, #8]!
    da20:	orr.w	r2, r2, #1
    da24:	str	r2, [r3, #4]
    da26:	mov	r0, r6
    da28:	str	r1, [r5, #12]
    da2a:	str	r5, [r1, #8]
    da2c:	bl	dce4 <__malloc_unlock>
    da30:	b.n	d79c <_malloc_r+0x190>
    da32:	add.w	lr, r3, #92	; 0x5c
    da36:	add.w	r0, r3, #91	; 0x5b
    da3a:	mov.w	r3, lr, lsl #1
    da3e:	b.n	d650 <_malloc_r+0x44>
    da40:	lsrs	r2, r3, #6
    da42:	add.w	r1, r2, #57	; 0x39
    da46:	lsls	r1, r1, #1
    da48:	adds	r2, #56	; 0x38
    da4a:	b.n	d990 <_malloc_r+0x384>
    da4c:	cmp	r4, r7
    da4e:	ldr	r3, [pc, #296]	; (db78 <_malloc_r+0x56c>)
    da50:	beq.w	d854 <_malloc_r+0x248>
    da54:	ldr	r4, [r3, #8]
    da56:	ldr	r2, [r4, #4]
    da58:	bic.w	r2, r2, #3
    da5c:	b.n	d914 <_malloc_r+0x308>
    da5e:	ldr.w	r3, [r9], #-8
    da62:	cmp	r9, r3
    da64:	bne.w	db6c <_malloc_r+0x560>
    da68:	tst.w	r0, #3
    da6c:	add.w	r0, r0, #4294967295
    da70:	bne.n	da5e <_malloc_r+0x452>
    da72:	ldr	r3, [r7, #4]
    da74:	bic.w	r3, r3, r4
    da78:	str	r3, [r7, #4]
    da7a:	lsls	r4, r4, #1
    da7c:	cmp	r4, r3
    da7e:	bhi.w	d7fc <_malloc_r+0x1f0>
    da82:	cmp	r4, #0
    da84:	beq.w	d7fc <_malloc_r+0x1f0>
    da88:	tst	r4, r3
    da8a:	mov	r0, r8
    da8c:	bne.w	d6fa <_malloc_r+0xee>
    da90:	lsls	r4, r4, #1
    da92:	tst	r4, r3
    da94:	add.w	r0, r0, #4
    da98:	beq.n	da90 <_malloc_r+0x484>
    da9a:	b.n	d6fa <_malloc_r+0xee>
    da9c:	cmp.w	r3, #340	; 0x154
    daa0:	bhi.n	dad4 <_malloc_r+0x4c8>
    daa2:	lsrs	r0, r5, #15
    daa4:	add.w	lr, r0, #120	; 0x78
    daa8:	mov.w	r3, lr, lsl #1
    daac:	adds	r0, #119	; 0x77
    daae:	b.n	d650 <_malloc_r+0x44>
    dab0:	mov.w	r1, #4096	; 0x1000
    dab4:	b.n	d88e <_malloc_r+0x282>
    dab6:	movs	r1, #1
    dab8:	ldr.w	r3, [r8, #4]
    dabc:	asrs	r2, r2, #2
    dabe:	lsl.w	r2, r1, r2
    dac2:	orrs	r2, r3
    dac4:	str.w	r2, [r8, #4]
    dac8:	mov	r1, ip
    daca:	b.n	d9bc <_malloc_r+0x3b0>
    dacc:	movs	r3, #1
    dace:	str.w	r3, [fp, #4]
    dad2:	b.n	d920 <_malloc_r+0x314>
    dad4:	movw	r2, #1364	; 0x554
    dad8:	cmp	r3, r2
    dada:	bhi.n	db1e <_malloc_r+0x512>
    dadc:	lsrs	r0, r5, #18
    dade:	add.w	lr, r0, #125	; 0x7d
    dae2:	mov.w	r3, lr, lsl #1
    dae6:	adds	r0, #124	; 0x7c
    dae8:	b.n	d650 <_malloc_r+0x44>
    daea:	adds	r2, #16
    daec:	b.n	d838 <_malloc_r+0x22c>
    daee:	cmp	r2, #84	; 0x54
    daf0:	bhi.n	db40 <_malloc_r+0x534>
    daf2:	lsrs	r2, r3, #12
    daf4:	add.w	r1, r2, #111	; 0x6f
    daf8:	lsls	r1, r1, #1
    dafa:	adds	r2, #110	; 0x6e
    dafc:	b.n	d990 <_malloc_r+0x384>
    dafe:	ldr	r4, [r7, #8]
    db00:	ldr	r2, [r4, #4]
    db02:	bic.w	r2, r2, #3
    db06:	b.n	d914 <_malloc_r+0x308>
    db08:	ubfx	r0, sl, #0, #12
    db0c:	cmp	r0, #0
    db0e:	bne.w	d862 <_malloc_r+0x256>
    db12:	add	r2, r8
    db14:	ldr	r3, [r7, #8]
    db16:	orr.w	r2, r2, #1
    db1a:	str	r2, [r3, #4]
    db1c:	b.n	d8f8 <_malloc_r+0x2ec>
    db1e:	movs	r3, #254	; 0xfe
    db20:	mov.w	lr, #127	; 0x7f
    db24:	movs	r0, #126	; 0x7e
    db26:	b.n	d650 <_malloc_r+0x44>
    db28:	movs	r2, #1
    db2a:	mov.w	r9, #0
    db2e:	b.n	d8b4 <_malloc_r+0x2a8>
    db30:	add.w	r1, r4, #8
    db34:	mov	r0, r6
    db36:	bl	e744 <_free_r>
    db3a:	ldr.w	r1, [r9]
    db3e:	b.n	d8f8 <_malloc_r+0x2ec>
    db40:	cmp.w	r2, #340	; 0x154
    db44:	bhi.n	db52 <_malloc_r+0x546>
    db46:	lsrs	r2, r3, #15
    db48:	add.w	r1, r2, #120	; 0x78
    db4c:	lsls	r1, r1, #1
    db4e:	adds	r2, #119	; 0x77
    db50:	b.n	d990 <_malloc_r+0x384>
    db52:	movw	r1, #1364	; 0x554
    db56:	cmp	r2, r1
    db58:	bhi.n	db66 <_malloc_r+0x55a>
    db5a:	lsrs	r2, r3, #18
    db5c:	add.w	r1, r2, #125	; 0x7d
    db60:	lsls	r1, r1, #1
    db62:	adds	r2, #124	; 0x7c
    db64:	b.n	d990 <_malloc_r+0x384>
    db66:	movs	r1, #254	; 0xfe
    db68:	movs	r2, #126	; 0x7e
    db6a:	b.n	d990 <_malloc_r+0x384>
    db6c:	ldr	r3, [r7, #4]
    db6e:	b.n	da7a <_malloc_r+0x46e>
    db70:	lsrs	r0, r5, #3
    db72:	adds	r3, r0, #1
    db74:	lsls	r3, r3, #1
    db76:	b.n	d76a <_malloc_r+0x15e>
    db78:	.word	0x20001324

0000db7c <memmove>:
    db7c:	cmp	r0, r1
    db7e:	push	{r4, r5, r6, r7, lr}
    db80:	bls.n	db9e <memmove+0x22>
    db82:	adds	r3, r1, r2
    db84:	cmp	r0, r3
    db86:	bcs.n	db9e <memmove+0x22>
    db88:	adds	r1, r0, r2
    db8a:	cmp	r2, #0
    db8c:	beq.n	dc32 <memmove+0xb6>
    db8e:	subs	r2, r3, r2
    db90:	ldrb.w	r4, [r3, #-1]!
    db94:	strb.w	r4, [r1, #-1]!
    db98:	cmp	r3, r2
    db9a:	bne.n	db90 <memmove+0x14>
    db9c:	pop	{r4, r5, r6, r7, pc}
    db9e:	cmp	r2, #15
    dba0:	bls.n	dc34 <memmove+0xb8>
    dba2:	orr.w	r3, r1, r0
    dba6:	lsls	r3, r3, #30
    dba8:	bne.n	dc38 <memmove+0xbc>
    dbaa:	add.w	r4, r0, #16
    dbae:	add.w	r3, r1, #16
    dbb2:	mov	r5, r2
    dbb4:	ldr.w	r6, [r3, #-16]
    dbb8:	str.w	r6, [r4, #-16]
    dbbc:	ldr.w	r6, [r3, #-12]
    dbc0:	str.w	r6, [r4, #-12]
    dbc4:	ldr.w	r6, [r3, #-8]
    dbc8:	str.w	r6, [r4, #-8]
    dbcc:	subs	r5, #16
    dbce:	ldr.w	r6, [r3, #-4]
    dbd2:	str.w	r6, [r4, #-4]
    dbd6:	cmp	r5, #15
    dbd8:	add.w	r3, r3, #16
    dbdc:	add.w	r4, r4, #16
    dbe0:	bhi.n	dbb4 <memmove+0x38>
    dbe2:	sub.w	r3, r2, #16
    dbe6:	bic.w	r3, r3, #15
    dbea:	and.w	lr, r2, #15
    dbee:	adds	r3, #16
    dbf0:	cmp.w	lr, #3
    dbf4:	add	r1, r3
    dbf6:	add	r3, r0
    dbf8:	bls.n	dc3e <memmove+0xc2>
    dbfa:	subs	r6, r3, #4
    dbfc:	mov	r5, r1
    dbfe:	mov	r4, lr
    dc00:	subs	r4, #4
    dc02:	ldr.w	r7, [r5], #4
    dc06:	str.w	r7, [r6, #4]!
    dc0a:	cmp	r4, #3
    dc0c:	bhi.n	dc00 <memmove+0x84>
    dc0e:	sub.w	r4, lr, #4
    dc12:	bic.w	r4, r4, #3
    dc16:	adds	r4, #4
    dc18:	add	r3, r4
    dc1a:	add	r1, r4
    dc1c:	and.w	r2, r2, #3
    dc20:	cbz	r2, dc3c <memmove+0xc0>
    dc22:	subs	r3, #1
    dc24:	add	r2, r1
    dc26:	ldrb.w	r4, [r1], #1
    dc2a:	strb.w	r4, [r3, #1]!
    dc2e:	cmp	r2, r1
    dc30:	bne.n	dc26 <memmove+0xaa>
    dc32:	pop	{r4, r5, r6, r7, pc}
    dc34:	mov	r3, r0
    dc36:	b.n	dc20 <memmove+0xa4>
    dc38:	mov	r3, r0
    dc3a:	b.n	dc22 <memmove+0xa6>
    dc3c:	pop	{r4, r5, r6, r7, pc}
    dc3e:	mov	r2, lr
    dc40:	b.n	dc20 <memmove+0xa4>
    dc42:	nop

0000dc44 <memset>:
    dc44:	push	{r4, r5, r6}
    dc46:	lsls	r4, r0, #30
    dc48:	beq.n	dcd8 <memset+0x94>
    dc4a:	subs	r4, r2, #1
    dc4c:	cmp	r2, #0
    dc4e:	beq.n	dcd4 <memset+0x90>
    dc50:	uxtb	r5, r1
    dc52:	mov	r3, r0
    dc54:	b.n	dc5c <memset+0x18>
    dc56:	subs	r2, r4, #1
    dc58:	cbz	r4, dcd4 <memset+0x90>
    dc5a:	mov	r4, r2
    dc5c:	strb.w	r5, [r3], #1
    dc60:	lsls	r2, r3, #30
    dc62:	bne.n	dc56 <memset+0x12>
    dc64:	cmp	r4, #3
    dc66:	bls.n	dcc6 <memset+0x82>
    dc68:	uxtb	r5, r1
    dc6a:	orr.w	r5, r5, r5, lsl #8
    dc6e:	cmp	r4, #15
    dc70:	orr.w	r5, r5, r5, lsl #16
    dc74:	bls.n	dcaa <memset+0x66>
    dc76:	add.w	r2, r3, #16
    dc7a:	mov	r6, r4
    dc7c:	subs	r6, #16
    dc7e:	cmp	r6, #15
    dc80:	str.w	r5, [r2, #-16]
    dc84:	str.w	r5, [r2, #-12]
    dc88:	str.w	r5, [r2, #-8]
    dc8c:	str.w	r5, [r2, #-4]
    dc90:	add.w	r2, r2, #16
    dc94:	bhi.n	dc7c <memset+0x38>
    dc96:	sub.w	r2, r4, #16
    dc9a:	bic.w	r2, r2, #15
    dc9e:	and.w	r4, r4, #15
    dca2:	adds	r2, #16
    dca4:	cmp	r4, #3
    dca6:	add	r3, r2
    dca8:	bls.n	dcc6 <memset+0x82>
    dcaa:	mov	r6, r3
    dcac:	mov	r2, r4
    dcae:	subs	r2, #4
    dcb0:	cmp	r2, #3
    dcb2:	str.w	r5, [r6], #4
    dcb6:	bhi.n	dcae <memset+0x6a>
    dcb8:	subs	r2, r4, #4
    dcba:	bic.w	r2, r2, #3
    dcbe:	adds	r2, #4
    dcc0:	add	r3, r2
    dcc2:	and.w	r4, r4, #3
    dcc6:	cbz	r4, dcd4 <memset+0x90>
    dcc8:	uxtb	r1, r1
    dcca:	add	r4, r3
    dccc:	strb.w	r1, [r3], #1
    dcd0:	cmp	r3, r4
    dcd2:	bne.n	dccc <memset+0x88>
    dcd4:	pop	{r4, r5, r6}
    dcd6:	bx	lr
    dcd8:	mov	r4, r2
    dcda:	mov	r3, r0
    dcdc:	b.n	dc64 <memset+0x20>
    dcde:	nop

0000dce0 <__malloc_lock>:
    dce0:	bx	lr
    dce2:	nop

0000dce4 <__malloc_unlock>:
    dce4:	bx	lr
    dce6:	nop

0000dce8 <realloc>:
    dce8:	ldr	r3, [pc, #8]	; (dcf4 <realloc+0xc>)
    dcea:	mov	r2, r1
    dcec:	mov	r1, r0
    dcee:	ldr	r0, [r3, #0]
    dcf0:	b.w	dcf8 <_realloc_r>
    dcf4:	.word	0x20001320

0000dcf8 <_realloc_r>:
    dcf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcfc:	mov	r7, r2
    dcfe:	sub	sp, #12
    dd00:	cmp	r1, #0
    dd02:	beq.w	de88 <_realloc_r+0x190>
    dd06:	mov	r6, r1
    dd08:	mov	r9, r0
    dd0a:	add.w	r5, r7, #11
    dd0e:	bl	dce0 <__malloc_lock>
    dd12:	ldr.w	lr, [r6, #-4]
    dd16:	cmp	r5, #22
    dd18:	bic.w	r4, lr, #3
    dd1c:	sub.w	r8, r6, #8
    dd20:	bhi.n	dda4 <_realloc_r+0xac>
    dd22:	movs	r2, #16
    dd24:	mov	r5, r2
    dd26:	cmp	r7, r5
    dd28:	bhi.n	ddae <_realloc_r+0xb6>
    dd2a:	cmp	r4, r2
    dd2c:	bge.n	de1a <_realloc_r+0x122>
    dd2e:	ldr	r3, [pc, #804]	; (e054 <_realloc_r+0x35c>)
    dd30:	ldr	r1, [r3, #8]
    dd32:	add.w	r0, r8, r4
    dd36:	cmp	r0, r1
    dd38:	ldr	r1, [r0, #4]
    dd3a:	beq.w	def0 <_realloc_r+0x1f8>
    dd3e:	bic.w	r3, r1, #1
    dd42:	add	r3, r0
    dd44:	ldr	r3, [r3, #4]
    dd46:	lsls	r3, r3, #31
    dd48:	bpl.n	de46 <_realloc_r+0x14e>
    dd4a:	tst.w	lr, #1
    dd4e:	beq.n	ddbc <_realloc_r+0xc4>
    dd50:	mov	r1, r7
    dd52:	mov	r0, r9
    dd54:	bl	d60c <_malloc_r>
    dd58:	mov	r7, r0
    dd5a:	cbz	r0, dd96 <_realloc_r+0x9e>
    dd5c:	ldr.w	r3, [r6, #-4]
    dd60:	bic.w	r3, r3, #1
    dd64:	add	r3, r8
    dd66:	sub.w	r2, r0, #8
    dd6a:	cmp	r2, r3
    dd6c:	beq.w	dff8 <_realloc_r+0x300>
    dd70:	subs	r2, r4, #4
    dd72:	cmp	r2, #36	; 0x24
    dd74:	bhi.w	dfda <_realloc_r+0x2e2>
    dd78:	cmp	r2, #19
    dd7a:	bhi.w	df86 <_realloc_r+0x28e>
    dd7e:	mov	r3, r0
    dd80:	mov	r2, r6
    dd82:	ldr	r1, [r2, #0]
    dd84:	str	r1, [r3, #0]
    dd86:	ldr	r1, [r2, #4]
    dd88:	str	r1, [r3, #4]
    dd8a:	ldr	r2, [r2, #8]
    dd8c:	str	r2, [r3, #8]
    dd8e:	mov	r1, r6
    dd90:	mov	r0, r9
    dd92:	bl	e744 <_free_r>
    dd96:	mov	r0, r9
    dd98:	bl	dce4 <__malloc_unlock>
    dd9c:	mov	r0, r7
    dd9e:	add	sp, #12
    dda0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dda4:	bic.w	r5, r5, #7
    dda8:	cmp	r5, #0
    ddaa:	mov	r2, r5
    ddac:	bge.n	dd26 <_realloc_r+0x2e>
    ddae:	movs	r3, #12
    ddb0:	movs	r0, #0
    ddb2:	str.w	r3, [r9]
    ddb6:	add	sp, #12
    ddb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddbc:	ldr.w	r3, [r6, #-8]
    ddc0:	rsb	sl, r3, r8
    ddc4:	ldr.w	r3, [sl, #4]
    ddc8:	bic.w	ip, r3, #3
    ddcc:	add.w	r3, r4, ip
    ddd0:	cmp	r3, r2
    ddd2:	blt.n	dd50 <_realloc_r+0x58>
    ddd4:	mov	r7, sl
    ddd6:	ldr.w	r1, [sl, #12]
    ddda:	ldr.w	r0, [r7, #8]!
    ddde:	subs	r2, r4, #4
    dde0:	cmp	r2, #36	; 0x24
    dde2:	str	r1, [r0, #12]
    dde4:	str	r0, [r1, #8]
    dde6:	bhi.w	e018 <_realloc_r+0x320>
    ddea:	cmp	r2, #19
    ddec:	bls.w	e014 <_realloc_r+0x31c>
    ddf0:	ldr	r1, [r6, #0]
    ddf2:	str.w	r1, [sl, #8]
    ddf6:	ldr	r1, [r6, #4]
    ddf8:	str.w	r1, [sl, #12]
    ddfc:	cmp	r2, #27
    ddfe:	bhi.w	e058 <_realloc_r+0x360>
    de02:	adds	r6, #8
    de04:	add.w	r2, sl, #16
    de08:	ldr	r1, [r6, #0]
    de0a:	str	r1, [r2, #0]
    de0c:	ldr	r1, [r6, #4]
    de0e:	str	r1, [r2, #4]
    de10:	ldr	r1, [r6, #8]
    de12:	str	r1, [r2, #8]
    de14:	mov	r6, r7
    de16:	mov	r4, r3
    de18:	mov	r8, sl
    de1a:	subs	r3, r4, r5
    de1c:	cmp	r3, #15
    de1e:	bhi.n	de5c <_realloc_r+0x164>
    de20:	ldr.w	r3, [r8, #4]
    de24:	and.w	r3, r3, #1
    de28:	orrs	r3, r4
    de2a:	add	r4, r8
    de2c:	str.w	r3, [r8, #4]
    de30:	ldr	r3, [r4, #4]
    de32:	orr.w	r3, r3, #1
    de36:	str	r3, [r4, #4]
    de38:	mov	r0, r9
    de3a:	bl	dce4 <__malloc_unlock>
    de3e:	mov	r0, r6
    de40:	add	sp, #12
    de42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de46:	bic.w	r1, r1, #3
    de4a:	add	r1, r4
    de4c:	cmp	r1, r2
    de4e:	blt.n	de94 <_realloc_r+0x19c>
    de50:	ldr	r3, [r0, #12]
    de52:	ldr	r2, [r0, #8]
    de54:	mov	r4, r1
    de56:	str	r3, [r2, #12]
    de58:	str	r2, [r3, #8]
    de5a:	b.n	de1a <_realloc_r+0x122>
    de5c:	ldr.w	r2, [r8, #4]
    de60:	add.w	r1, r8, r5
    de64:	and.w	r2, r2, #1
    de68:	orrs	r5, r2
    de6a:	orr.w	r2, r3, #1
    de6e:	add	r3, r1
    de70:	str.w	r5, [r8, #4]
    de74:	str	r2, [r1, #4]
    de76:	ldr	r2, [r3, #4]
    de78:	orr.w	r2, r2, #1
    de7c:	adds	r1, #8
    de7e:	str	r2, [r3, #4]
    de80:	mov	r0, r9
    de82:	bl	e744 <_free_r>
    de86:	b.n	de38 <_realloc_r+0x140>
    de88:	mov	r1, r2
    de8a:	add	sp, #12
    de8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de90:	b.w	d60c <_malloc_r>
    de94:	tst.w	lr, #1
    de98:	bne.w	dd50 <_realloc_r+0x58>
    de9c:	ldr.w	r3, [r6, #-8]
    dea0:	rsb	sl, r3, r8
    dea4:	ldr.w	r3, [sl, #4]
    dea8:	bic.w	ip, r3, #3
    deac:	add.w	lr, r1, ip
    deb0:	cmp	lr, r2
    deb2:	blt.n	ddcc <_realloc_r+0xd4>
    deb4:	ldr	r3, [r0, #12]
    deb6:	ldr	r2, [r0, #8]
    deb8:	mov	r7, sl
    deba:	str	r3, [r2, #12]
    debc:	str	r2, [r3, #8]
    debe:	ldr.w	r1, [r7, #8]!
    dec2:	ldr.w	r3, [sl, #12]
    dec6:	str	r3, [r1, #12]
    dec8:	subs	r2, r4, #4
    deca:	cmp	r2, #36	; 0x24
    decc:	str	r1, [r3, #8]
    dece:	bhi.w	e004 <_realloc_r+0x30c>
    ded2:	cmp	r2, #19
    ded4:	bls.n	df9c <_realloc_r+0x2a4>
    ded6:	ldr	r3, [r6, #0]
    ded8:	str.w	r3, [sl, #8]
    dedc:	ldr	r3, [r6, #4]
    dede:	str.w	r3, [sl, #12]
    dee2:	cmp	r2, #27
    dee4:	bhi.w	e028 <_realloc_r+0x330>
    dee8:	adds	r6, #8
    deea:	add.w	r3, sl, #16
    deee:	b.n	df9e <_realloc_r+0x2a6>
    def0:	bic.w	fp, r1, #3
    def4:	add	fp, r4
    def6:	add.w	r0, r5, #16
    defa:	cmp	fp, r0
    defc:	bge.n	dfb2 <_realloc_r+0x2ba>
    defe:	tst.w	lr, #1
    df02:	bne.w	dd50 <_realloc_r+0x58>
    df06:	ldr.w	r1, [r6, #-8]
    df0a:	rsb	sl, r1, r8
    df0e:	ldr.w	r1, [sl, #4]
    df12:	bic.w	ip, r1, #3
    df16:	add	fp, ip
    df18:	cmp	r0, fp
    df1a:	bgt.w	ddcc <_realloc_r+0xd4>
    df1e:	mov	r7, sl
    df20:	ldr.w	r1, [sl, #12]
    df24:	ldr.w	r0, [r7, #8]!
    df28:	subs	r2, r4, #4
    df2a:	cmp	r2, #36	; 0x24
    df2c:	str	r1, [r0, #12]
    df2e:	str	r0, [r1, #8]
    df30:	bhi.w	e09c <_realloc_r+0x3a4>
    df34:	cmp	r2, #19
    df36:	bls.w	e084 <_realloc_r+0x38c>
    df3a:	ldr	r1, [r6, #0]
    df3c:	str.w	r1, [sl, #8]
    df40:	ldr	r1, [r6, #4]
    df42:	str.w	r1, [sl, #12]
    df46:	cmp	r2, #27
    df48:	bhi.w	e0aa <_realloc_r+0x3b2>
    df4c:	adds	r6, #8
    df4e:	add.w	r2, sl, #16
    df52:	ldr	r1, [r6, #0]
    df54:	str	r1, [r2, #0]
    df56:	ldr	r1, [r6, #4]
    df58:	str	r1, [r2, #4]
    df5a:	ldr	r1, [r6, #8]
    df5c:	str	r1, [r2, #8]
    df5e:	add.w	r1, sl, r5
    df62:	rsb	r2, r5, fp
    df66:	orr.w	r2, r2, #1
    df6a:	str	r1, [r3, #8]
    df6c:	str	r2, [r1, #4]
    df6e:	ldr.w	r3, [sl, #4]
    df72:	and.w	r3, r3, #1
    df76:	orrs	r5, r3
    df78:	mov	r0, r9
    df7a:	str.w	r5, [sl, #4]
    df7e:	bl	dce4 <__malloc_unlock>
    df82:	mov	r0, r7
    df84:	b.n	de40 <_realloc_r+0x148>
    df86:	ldr	r3, [r6, #0]
    df88:	str	r3, [r0, #0]
    df8a:	ldr	r3, [r6, #4]
    df8c:	str	r3, [r0, #4]
    df8e:	cmp	r2, #27
    df90:	bhi.n	dfe2 <_realloc_r+0x2ea>
    df92:	add.w	r3, r0, #8
    df96:	add.w	r2, r6, #8
    df9a:	b.n	dd82 <_realloc_r+0x8a>
    df9c:	mov	r3, r7
    df9e:	ldr	r2, [r6, #0]
    dfa0:	str	r2, [r3, #0]
    dfa2:	ldr	r2, [r6, #4]
    dfa4:	str	r2, [r3, #4]
    dfa6:	ldr	r2, [r6, #8]
    dfa8:	str	r2, [r3, #8]
    dfaa:	mov	r6, r7
    dfac:	mov	r4, lr
    dfae:	mov	r8, sl
    dfb0:	b.n	de1a <_realloc_r+0x122>
    dfb2:	add.w	r1, r8, r5
    dfb6:	rsb	fp, r5, fp
    dfba:	orr.w	r2, fp, #1
    dfbe:	str	r1, [r3, #8]
    dfc0:	str	r2, [r1, #4]
    dfc2:	ldr.w	r3, [r6, #-4]
    dfc6:	and.w	r3, r3, #1
    dfca:	orrs	r5, r3
    dfcc:	mov	r0, r9
    dfce:	str.w	r5, [r6, #-4]
    dfd2:	bl	dce4 <__malloc_unlock>
    dfd6:	mov	r0, r6
    dfd8:	b.n	de40 <_realloc_r+0x148>
    dfda:	mov	r1, r6
    dfdc:	bl	db7c <memmove>
    dfe0:	b.n	dd8e <_realloc_r+0x96>
    dfe2:	ldr	r3, [r6, #8]
    dfe4:	str	r3, [r0, #8]
    dfe6:	ldr	r3, [r6, #12]
    dfe8:	str	r3, [r0, #12]
    dfea:	cmp	r2, #36	; 0x24
    dfec:	beq.n	e040 <_realloc_r+0x348>
    dfee:	add.w	r3, r0, #16
    dff2:	add.w	r2, r6, #16
    dff6:	b.n	dd82 <_realloc_r+0x8a>
    dff8:	ldr.w	r3, [r0, #-4]
    dffc:	bic.w	r3, r3, #3
    e000:	add	r4, r3
    e002:	b.n	de1a <_realloc_r+0x122>
    e004:	mov	r1, r6
    e006:	mov	r0, r7
    e008:	mov	r4, lr
    e00a:	mov	r8, sl
    e00c:	bl	db7c <memmove>
    e010:	mov	r6, r7
    e012:	b.n	de1a <_realloc_r+0x122>
    e014:	mov	r2, r7
    e016:	b.n	de08 <_realloc_r+0x110>
    e018:	mov	r1, r6
    e01a:	mov	r0, r7
    e01c:	mov	r4, r3
    e01e:	mov	r8, sl
    e020:	bl	db7c <memmove>
    e024:	mov	r6, r7
    e026:	b.n	de1a <_realloc_r+0x122>
    e028:	ldr	r3, [r6, #8]
    e02a:	str.w	r3, [sl, #16]
    e02e:	ldr	r3, [r6, #12]
    e030:	str.w	r3, [sl, #20]
    e034:	cmp	r2, #36	; 0x24
    e036:	beq.n	e070 <_realloc_r+0x378>
    e038:	adds	r6, #16
    e03a:	add.w	r3, sl, #24
    e03e:	b.n	df9e <_realloc_r+0x2a6>
    e040:	ldr	r3, [r6, #16]
    e042:	str	r3, [r0, #16]
    e044:	ldr	r3, [r6, #20]
    e046:	str	r3, [r0, #20]
    e048:	add.w	r2, r6, #24
    e04c:	add.w	r3, r0, #24
    e050:	b.n	dd82 <_realloc_r+0x8a>
    e052:	nop
    e054:	.word	0x20001324
    e058:	ldr	r1, [r6, #8]
    e05a:	str.w	r1, [sl, #16]
    e05e:	ldr	r1, [r6, #12]
    e060:	str.w	r1, [sl, #20]
    e064:	cmp	r2, #36	; 0x24
    e066:	beq.n	e088 <_realloc_r+0x390>
    e068:	adds	r6, #16
    e06a:	add.w	r2, sl, #24
    e06e:	b.n	de08 <_realloc_r+0x110>
    e070:	ldr	r3, [r6, #16]
    e072:	str.w	r3, [sl, #24]
    e076:	ldr	r3, [r6, #20]
    e078:	str.w	r3, [sl, #28]
    e07c:	adds	r6, #24
    e07e:	add.w	r3, sl, #32
    e082:	b.n	df9e <_realloc_r+0x2a6>
    e084:	mov	r2, r7
    e086:	b.n	df52 <_realloc_r+0x25a>
    e088:	ldr	r2, [r6, #16]
    e08a:	str.w	r2, [sl, #24]
    e08e:	ldr	r2, [r6, #20]
    e090:	str.w	r2, [sl, #28]
    e094:	adds	r6, #24
    e096:	add.w	r2, sl, #32
    e09a:	b.n	de08 <_realloc_r+0x110>
    e09c:	mov	r1, r6
    e09e:	mov	r0, r7
    e0a0:	str	r3, [sp, #4]
    e0a2:	bl	db7c <memmove>
    e0a6:	ldr	r3, [sp, #4]
    e0a8:	b.n	df5e <_realloc_r+0x266>
    e0aa:	ldr	r1, [r6, #8]
    e0ac:	str.w	r1, [sl, #16]
    e0b0:	ldr	r1, [r6, #12]
    e0b2:	str.w	r1, [sl, #20]
    e0b6:	cmp	r2, #36	; 0x24
    e0b8:	beq.n	e0c2 <_realloc_r+0x3ca>
    e0ba:	adds	r6, #16
    e0bc:	add.w	r2, sl, #24
    e0c0:	b.n	df52 <_realloc_r+0x25a>
    e0c2:	ldr	r2, [r6, #16]
    e0c4:	str.w	r2, [sl, #24]
    e0c8:	ldr	r2, [r6, #20]
    e0ca:	str.w	r2, [sl, #28]
    e0ce:	adds	r6, #24
    e0d0:	add.w	r2, sl, #32
    e0d4:	b.n	df52 <_realloc_r+0x25a>
    e0d6:	nop

0000e0d8 <_sbrk_r>:
    e0d8:	push	{r3, r4, r5, lr}
    e0da:	ldr	r4, [pc, #28]	; (e0f8 <_sbrk_r+0x20>)
    e0dc:	movs	r3, #0
    e0de:	mov	r5, r0
    e0e0:	mov	r0, r1
    e0e2:	str	r3, [r4, #0]
    e0e4:	bl	cfa0 <_sbrk>
    e0e8:	adds	r3, r0, #1
    e0ea:	beq.n	e0ee <_sbrk_r+0x16>
    e0ec:	pop	{r3, r4, r5, pc}
    e0ee:	ldr	r3, [r4, #0]
    e0f0:	cmp	r3, #0
    e0f2:	beq.n	e0ec <_sbrk_r+0x14>
    e0f4:	str	r3, [r5, #0]
    e0f6:	pop	{r3, r4, r5, pc}
    e0f8:	.word	0x200106c0
    e0fc:	.word	0x00000000
    e100:	sub.w	r0, r2, r3
    e104:	bx	lr
    e106:	nop

0000e108 <strcmp>:
    e108:	ldrb	r2, [r0, #0]
    e10a:	ldrb	r3, [r1, #0]
    e10c:	cmp	r2, #1
    e10e:	it	cs
    e110:	cmpcs	r2, r3
    e112:	bne.n	e100 <_sbrk_r+0x28>
    e114:	strd	r4, r5, [sp, #-16]!
    e118:	orr.w	r4, r0, r1
    e11c:	strd	r6, r7, [sp, #8]
    e120:	mvn.w	ip, #0
    e124:	mov.w	r2, r4, lsl #29
    e128:	cbz	r2, e170 <strcmp+0x68>
    e12a:	eor.w	r4, r0, r1
    e12e:	tst.w	r4, #7
    e132:	bne.n	e20a <strcmp+0x102>
    e134:	and.w	r4, r0, #7
    e138:	bic.w	r0, r0, #7
    e13c:	and.w	r5, r4, #3
    e140:	bic.w	r1, r1, #7
    e144:	mov.w	r5, r5, lsl #3
    e148:	ldrd	r2, r3, [r0], #16
    e14c:	tst.w	r4, #4
    e150:	ldrd	r6, r7, [r1], #16
    e154:	lsl.w	r4, ip, r5
    e158:	orn	r2, r2, r4
    e15c:	orn	r6, r6, r4
    e160:	beq.n	e178 <strcmp+0x70>
    e162:	orn	r3, r3, r4
    e166:	mov	r2, ip
    e168:	orn	r7, r7, r4
    e16c:	mov	r6, ip
    e16e:	b.n	e178 <strcmp+0x70>
    e170:	ldrd	r2, r3, [r0], #16
    e174:	ldrd	r6, r7, [r1], #16
    e178:	uadd8	r5, r2, ip
    e17c:	eor.w	r4, r2, r6
    e180:	sel	r4, r4, ip
    e184:	cbnz	r4, e1e2 <strcmp+0xda>
    e186:	uadd8	r5, r3, ip
    e18a:	eor.w	r5, r3, r7
    e18e:	sel	r5, r5, ip
    e192:	cbnz	r5, e1ba <strcmp+0xb2>
    e194:	ldrd	r2, r3, [r0, #-8]
    e198:	ldrd	r6, r7, [r1, #-8]
    e19c:	uadd8	r5, r2, ip
    e1a0:	eor.w	r4, r2, r6
    e1a4:	sel	r4, r4, ip
    e1a8:	uadd8	r5, r3, ip
    e1ac:	eor.w	r5, r3, r7
    e1b0:	sel	r5, r5, ip
    e1b4:	orrs	r5, r4
    e1b6:	beq.n	e170 <strcmp+0x68>
    e1b8:	cbnz	r4, e1e2 <strcmp+0xda>
    e1ba:	rev	r5, r5
    e1bc:	clz	r4, r5
    e1c0:	bic.w	r4, r4, #7
    e1c4:	lsr.w	r1, r7, r4
    e1c8:	ldrd	r6, r7, [sp, #8]
    e1cc:	lsr.w	r3, r3, r4
    e1d0:	and.w	r0, r3, #255	; 0xff
    e1d4:	and.w	r1, r1, #255	; 0xff
    e1d8:	ldrd	r4, r5, [sp], #16
    e1dc:	sub.w	r0, r0, r1
    e1e0:	bx	lr
    e1e2:	rev	r4, r4
    e1e4:	clz	r4, r4
    e1e8:	bic.w	r4, r4, #7
    e1ec:	lsr.w	r1, r6, r4
    e1f0:	ldrd	r6, r7, [sp, #8]
    e1f4:	lsr.w	r2, r2, r4
    e1f8:	and.w	r0, r2, #255	; 0xff
    e1fc:	and.w	r1, r1, #255	; 0xff
    e200:	ldrd	r4, r5, [sp], #16
    e204:	sub.w	r0, r0, r1
    e208:	bx	lr
    e20a:	tst.w	r4, #3
    e20e:	bne.n	e28a <strcmp+0x182>
    e210:	ands.w	r4, r0, #3
    e214:	bne.n	e268 <strcmp+0x160>
    e216:	ldr.w	r2, [r0], #8
    e21a:	ldr.w	r3, [r1], #8
    e21e:	uadd8	r5, r2, ip
    e222:	eor.w	r5, r2, r3
    e226:	sel	r5, r5, ip
    e22a:	cbnz	r5, e244 <strcmp+0x13c>
    e22c:	ldr.w	r2, [r0, #-4]
    e230:	ldr.w	r3, [r1, #-4]
    e234:	uadd8	r5, r2, ip
    e238:	eor.w	r5, r2, r3
    e23c:	sel	r5, r5, ip
    e240:	cmp	r5, #0
    e242:	beq.n	e216 <strcmp+0x10e>
    e244:	rev	r5, r5
    e246:	clz	r4, r5
    e24a:	bic.w	r4, r4, #7
    e24e:	lsr.w	r1, r3, r4
    e252:	lsr.w	r2, r2, r4
    e256:	and.w	r0, r2, #255	; 0xff
    e25a:	and.w	r1, r1, #255	; 0xff
    e25e:	ldrd	r4, r5, [sp], #16
    e262:	sub.w	r0, r0, r1
    e266:	bx	lr
    e268:	mov.w	r4, r4, lsl #3
    e26c:	bic.w	r0, r0, #3
    e270:	ldr.w	r2, [r0], #8
    e274:	bic.w	r1, r1, #3
    e278:	ldr.w	r3, [r1], #8
    e27c:	lsl.w	r4, ip, r4
    e280:	orn	r2, r2, r4
    e284:	orn	r3, r3, r4
    e288:	b.n	e21e <strcmp+0x116>
    e28a:	ands.w	r4, r0, #3
    e28e:	beq.n	e2c6 <strcmp+0x1be>
    e290:	sub.w	r1, r1, r4
    e294:	bic.w	r0, r0, #3
    e298:	lsls	r4, r4, #31
    e29a:	ldr.w	r2, [r0], #4
    e29e:	beq.n	e2ae <strcmp+0x1a6>
    e2a0:	bcs.n	e2c2 <strcmp+0x1ba>
    e2a2:	ldrb	r3, [r1, #2]
    e2a4:	uxtb.w	r4, r2, ror #16
    e2a8:	subs	r4, r4, r3
    e2aa:	bne.n	e2ba <strcmp+0x1b2>
    e2ac:	cbz	r3, e2ba <strcmp+0x1b2>
    e2ae:	ldrb	r3, [r1, #3]
    e2b0:	uxtb.w	r4, r2, ror #24
    e2b4:	subs	r4, r4, r3
    e2b6:	bne.n	e2ba <strcmp+0x1b2>
    e2b8:	cbnz	r3, e2c2 <strcmp+0x1ba>
    e2ba:	mov	r0, r4
    e2bc:	ldr.w	r4, [sp], #16
    e2c0:	bx	lr
    e2c2:	add.w	r1, r1, #4
    e2c6:	ldr.w	r2, [r0], #4
    e2ca:	lsls	r4, r1, #31
    e2cc:	bic.w	r1, r1, #3
    e2d0:	ldr.w	r3, [r1], #4
    e2d4:	bhi.n	e368 <strcmp+0x260>
    e2d6:	bcs.n	e322 <strcmp+0x21a>
    e2d8:	bic.w	r4, r2, #4278190080	; 0xff000000
    e2dc:	uadd8	r5, r2, ip
    e2e0:	eors.w	r5, r4, r3, lsr #8
    e2e4:	sel	r5, r5, ip
    e2e8:	bne.n	e300 <strcmp+0x1f8>
    e2ea:	cbnz	r5, e306 <strcmp+0x1fe>
    e2ec:	ldr.w	r3, [r1], #4
    e2f0:	eor.w	r4, r4, r2
    e2f4:	cmp.w	r4, r3, lsl #24
    e2f8:	bne.n	e318 <strcmp+0x210>
    e2fa:	ldr.w	r2, [r0], #4
    e2fe:	b.n	e2d8 <strcmp+0x1d0>
    e300:	mov.w	r3, r3, lsr #8
    e304:	b.n	e3b2 <strcmp+0x2aa>
    e306:	bics.w	r5, r5, #4278190080	; 0xff000000
    e30a:	bne.n	e3a8 <strcmp+0x2a0>
    e30c:	ldrb	r0, [r1, #0]
    e30e:	ldrd	r4, r5, [sp], #16
    e312:	rsb	r0, r0, #0
    e316:	bx	lr
    e318:	mov.w	r2, r2, lsr #24
    e31c:	and.w	r3, r3, #255	; 0xff
    e320:	b.n	e3b2 <strcmp+0x2aa>
    e322:	and.w	r4, r2, ip, lsr #16
    e326:	uadd8	r5, r2, ip
    e32a:	eors.w	r5, r4, r3, lsr #16
    e32e:	sel	r5, r5, ip
    e332:	bne.n	e34a <strcmp+0x242>
    e334:	cbnz	r5, e350 <strcmp+0x248>
    e336:	ldr.w	r3, [r1], #4
    e33a:	eor.w	r4, r4, r2
    e33e:	cmp.w	r4, r3, lsl #16
    e342:	bne.n	e35e <strcmp+0x256>
    e344:	ldr.w	r2, [r0], #4
    e348:	b.n	e322 <strcmp+0x21a>
    e34a:	mov.w	r3, r3, lsr #16
    e34e:	b.n	e3b2 <strcmp+0x2aa>
    e350:	ands.w	r5, r5, ip, lsr #16
    e354:	bne.n	e3a8 <strcmp+0x2a0>
    e356:	ldrh	r3, [r1, #0]
    e358:	mov.w	r2, r2, lsr #16
    e35c:	b.n	e3b2 <strcmp+0x2aa>
    e35e:	mov.w	r2, r2, lsr #16
    e362:	and.w	r3, r3, ip, lsr #16
    e366:	b.n	e3b2 <strcmp+0x2aa>
    e368:	and.w	r4, r2, #255	; 0xff
    e36c:	uadd8	r5, r2, ip
    e370:	eors.w	r5, r4, r3, lsr #24
    e374:	sel	r5, r5, ip
    e378:	bne.n	e390 <strcmp+0x288>
    e37a:	cbnz	r5, e396 <strcmp+0x28e>
    e37c:	ldr.w	r3, [r1], #4
    e380:	eor.w	r4, r4, r2
    e384:	cmp.w	r4, r3, lsl #8
    e388:	bne.n	e39e <strcmp+0x296>
    e38a:	ldr.w	r2, [r0], #4
    e38e:	b.n	e368 <strcmp+0x260>
    e390:	mov.w	r3, r3, lsr #24
    e394:	b.n	e3b2 <strcmp+0x2aa>
    e396:	tst.w	r5, #255	; 0xff
    e39a:	bne.n	e3a8 <strcmp+0x2a0>
    e39c:	ldr	r3, [r1, #0]
    e39e:	mov.w	r2, r2, lsr #8
    e3a2:	bic.w	r3, r3, #4278190080	; 0xff000000
    e3a6:	b.n	e3b2 <strcmp+0x2aa>
    e3a8:	mov.w	r0, #0
    e3ac:	ldrd	r4, r5, [sp], #16
    e3b0:	bx	lr
    e3b2:	rev	r2, r2
    e3b4:	rev	r3, r3
    e3b6:	uadd8	r4, r2, ip
    e3ba:	eor.w	r4, r2, r3
    e3be:	sel	r5, r4, ip
    e3c2:	clz	r4, r5
    e3c6:	lsl.w	r2, r2, r4
    e3ca:	lsl.w	r3, r3, r4
    e3ce:	mov.w	r0, r2, lsr #24
    e3d2:	ldrd	r4, r5, [sp], #16
    e3d6:	sub.w	r0, r0, r3, lsr #24
    e3da:	bx	lr

0000e3dc <strcpy>:
    e3dc:	eor.w	r2, r0, r1
    e3e0:	mov	ip, r0
    e3e2:	tst.w	r2, #3
    e3e6:	bne.n	e488 <strcpy+0xac>
    e3e8:	tst.w	r1, #3
    e3ec:	bne.n	e454 <strcpy+0x78>
    e3ee:	str.w	r4, [sp, #-4]!
    e3f2:	tst.w	r1, #4
    e3f6:	ldr.w	r3, [r1], #4
    e3fa:	beq.n	e414 <strcpy+0x38>
    e3fc:	sub.w	r2, r3, #16843009	; 0x1010101
    e400:	bics	r2, r3
    e402:	tst.w	r2, #2155905152	; 0x80808080
    e406:	itt	eq
    e408:	streq.w	r3, [ip], #4
    e40c:	ldreq.w	r3, [r1], #4
    e410:	bne.n	e440 <strcpy+0x64>
    e412:	nop
    e414:	ldr.w	r4, [r1], #4
    e418:	sub.w	r2, r3, #16843009	; 0x1010101
    e41c:	bics	r2, r3
    e41e:	tst.w	r2, #2155905152	; 0x80808080
    e422:	sub.w	r2, r4, #16843009	; 0x1010101
    e426:	bne.n	e440 <strcpy+0x64>
    e428:	str.w	r3, [ip], #4
    e42c:	bics	r2, r4
    e42e:	tst.w	r2, #2155905152	; 0x80808080
    e432:	itt	eq
    e434:	ldreq.w	r3, [r1], #4
    e438:	streq.w	r4, [ip], #4
    e43c:	beq.n	e414 <strcpy+0x38>
    e43e:	mov	r3, r4
    e440:	strb.w	r3, [ip], #1
    e444:	tst.w	r3, #255	; 0xff
    e448:	mov.w	r3, r3, ror #8
    e44c:	bne.n	e440 <strcpy+0x64>
    e44e:	ldr.w	r4, [sp], #4
    e452:	bx	lr
    e454:	tst.w	r1, #1
    e458:	beq.n	e468 <strcpy+0x8c>
    e45a:	ldrb.w	r2, [r1], #1
    e45e:	strb.w	r2, [ip], #1
    e462:	cmp	r2, #0
    e464:	it	eq
    e466:	bxeq	lr
    e468:	tst.w	r1, #2
    e46c:	beq.n	e3ee <strcpy+0x12>
    e46e:	ldrh.w	r2, [r1], #2
    e472:	tst.w	r2, #255	; 0xff
    e476:	itet	ne
    e478:	strhne.w	r2, [ip], #2
    e47c:	strbeq.w	r2, [ip]
    e480:	tstne.w	r2, #65280	; 0xff00
    e484:	bne.n	e3ee <strcpy+0x12>
    e486:	bx	lr
    e488:	ldrb.w	r2, [r1], #1
    e48c:	strb.w	r2, [ip], #1
    e490:	cmp	r2, #0
    e492:	bne.n	e488 <strcpy+0xac>
    e494:	bx	lr
    e496:	nop
	...

0000e4c0 <strlen>:
    e4c0:	pld	[r0]
    e4c4:	strd	r4, r5, [sp, #-8]!
    e4c8:	bic.w	r1, r0, #7
    e4cc:	mvn.w	ip, #0
    e4d0:	ands.w	r4, r0, #7
    e4d4:	pld	[r1, #32]
    e4d8:	bne.w	e56e <strlen+0xae>
    e4dc:	mov.w	r4, #0
    e4e0:	mvn.w	r0, #7
    e4e4:	ldrd	r2, r3, [r1]
    e4e8:	pld	[r1, #64]	; 0x40
    e4ec:	add.w	r0, r0, #8
    e4f0:	uadd8	r2, r2, ip
    e4f4:	sel	r2, r4, ip
    e4f8:	uadd8	r3, r3, ip
    e4fc:	sel	r3, r2, ip
    e500:	cbnz	r3, e556 <strlen+0x96>
    e502:	ldrd	r2, r3, [r1, #8]
    e506:	uadd8	r2, r2, ip
    e50a:	add.w	r0, r0, #8
    e50e:	sel	r2, r4, ip
    e512:	uadd8	r3, r3, ip
    e516:	sel	r3, r2, ip
    e51a:	cbnz	r3, e556 <strlen+0x96>
    e51c:	ldrd	r2, r3, [r1, #16]
    e520:	uadd8	r2, r2, ip
    e524:	add.w	r0, r0, #8
    e528:	sel	r2, r4, ip
    e52c:	uadd8	r3, r3, ip
    e530:	sel	r3, r2, ip
    e534:	cbnz	r3, e556 <strlen+0x96>
    e536:	ldrd	r2, r3, [r1, #24]
    e53a:	add.w	r1, r1, #32
    e53e:	uadd8	r2, r2, ip
    e542:	add.w	r0, r0, #8
    e546:	sel	r2, r4, ip
    e54a:	uadd8	r3, r3, ip
    e54e:	sel	r3, r2, ip
    e552:	cmp	r3, #0
    e554:	beq.n	e4e4 <strlen+0x24>
    e556:	cmp	r2, #0
    e558:	itt	eq
    e55a:	addeq	r0, #4
    e55c:	moveq	r2, r3
    e55e:	rev	r2, r2
    e560:	clz	r2, r2
    e564:	ldrd	r4, r5, [sp], #8
    e568:	add.w	r0, r0, r2, lsr #3
    e56c:	bx	lr
    e56e:	ldrd	r2, r3, [r1]
    e572:	and.w	r5, r4, #3
    e576:	rsb	r0, r4, #0
    e57a:	mov.w	r5, r5, lsl #3
    e57e:	tst.w	r4, #4
    e582:	pld	[r1, #64]	; 0x40
    e586:	lsl.w	r5, ip, r5
    e58a:	orn	r2, r2, r5
    e58e:	itt	ne
    e590:	ornne	r3, r3, r5
    e594:	movne	r2, ip
    e596:	mov.w	r4, #0
    e59a:	b.n	e4f0 <strlen+0x30>

0000e59c <strncpy>:
    e59c:	orr.w	r3, r0, r1
    e5a0:	lsls	r3, r3, #30
    e5a2:	push	{r4, r5, r6}
    e5a4:	bne.n	e5fe <strncpy+0x62>
    e5a6:	cmp	r2, #3
    e5a8:	bls.n	e5fe <strncpy+0x62>
    e5aa:	mov	r4, r1
    e5ac:	mov	r3, r0
    e5ae:	mov	r1, r4
    e5b0:	ldr.w	r6, [r4], #4
    e5b4:	sub.w	r5, r6, #16843009	; 0x1010101
    e5b8:	bic.w	r5, r5, r6
    e5bc:	tst.w	r5, #2155905152	; 0x80808080
    e5c0:	bne.n	e5d0 <strncpy+0x34>
    e5c2:	subs	r2, #4
    e5c4:	cmp	r2, #3
    e5c6:	str.w	r6, [r3], #4
    e5ca:	mov	r1, r4
    e5cc:	bhi.n	e5ae <strncpy+0x12>
    e5ce:	cbz	r2, e5fa <strncpy+0x5e>
    e5d0:	ldrb	r4, [r1, #0]
    e5d2:	strb	r4, [r3, #0]
    e5d4:	subs	r2, #1
    e5d6:	adds	r3, #1
    e5d8:	adds	r1, #1
    e5da:	cbz	r4, e5ec <strncpy+0x50>
    e5dc:	cbz	r2, e5fa <strncpy+0x5e>
    e5de:	ldrb.w	r4, [r1], #1
    e5e2:	strb.w	r4, [r3], #1
    e5e6:	subs	r2, #1
    e5e8:	cmp	r4, #0
    e5ea:	bne.n	e5dc <strncpy+0x40>
    e5ec:	cbz	r2, e5fa <strncpy+0x5e>
    e5ee:	add	r2, r3
    e5f0:	movs	r1, #0
    e5f2:	strb.w	r1, [r3], #1
    e5f6:	cmp	r2, r3
    e5f8:	bne.n	e5f2 <strncpy+0x56>
    e5fa:	pop	{r4, r5, r6}
    e5fc:	bx	lr
    e5fe:	mov	r3, r0
    e600:	b.n	e5ce <strncpy+0x32>
    e602:	nop

0000e604 <__register_exitproc>:
    e604:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e608:	ldr	r4, [pc, #148]	; (e6a0 <__register_exitproc+0x9c>)
    e60a:	ldr	r5, [r4, #0]
    e60c:	ldr.w	r4, [r5, #328]	; 0x148
    e610:	mov	r6, r0
    e612:	mov	r8, r1
    e614:	mov	sl, r2
    e616:	mov	r9, r3
    e618:	cbz	r4, e68c <__register_exitproc+0x88>
    e61a:	ldr	r0, [r4, #4]
    e61c:	cmp	r0, #31
    e61e:	bgt.n	e650 <__register_exitproc+0x4c>
    e620:	adds	r3, r0, #1
    e622:	cbz	r6, e642 <__register_exitproc+0x3e>
    e624:	add.w	r5, r4, r0, lsl #2
    e628:	movs	r2, #1
    e62a:	str.w	sl, [r5, #136]	; 0x88
    e62e:	ldr.w	r1, [r4, #392]	; 0x188
    e632:	lsls	r2, r0
    e634:	orrs	r1, r2
    e636:	cmp	r6, #2
    e638:	str.w	r1, [r4, #392]	; 0x188
    e63c:	str.w	r9, [r5, #264]	; 0x108
    e640:	beq.n	e680 <__register_exitproc+0x7c>
    e642:	adds	r0, #2
    e644:	str	r3, [r4, #4]
    e646:	str.w	r8, [r4, r0, lsl #2]
    e64a:	movs	r0, #0
    e64c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e650:	ldr	r3, [pc, #80]	; (e6a4 <__register_exitproc+0xa0>)
    e652:	cbz	r3, e696 <__register_exitproc+0x92>
    e654:	mov.w	r0, #400	; 0x190
    e658:	bl	d5ec <malloc>
    e65c:	mov	r4, r0
    e65e:	cbz	r0, e696 <__register_exitproc+0x92>
    e660:	ldr.w	r3, [r5, #328]	; 0x148
    e664:	movs	r7, #0
    e666:	stmia.w	r0, {r3, r7}
    e66a:	str.w	r4, [r5, #328]	; 0x148
    e66e:	mov	r0, r7
    e670:	movs	r3, #1
    e672:	str.w	r7, [r4, #392]	; 0x188
    e676:	str.w	r7, [r4, #396]	; 0x18c
    e67a:	cmp	r6, #0
    e67c:	beq.n	e642 <__register_exitproc+0x3e>
    e67e:	b.n	e624 <__register_exitproc+0x20>
    e680:	ldr.w	r1, [r4, #396]	; 0x18c
    e684:	orrs	r2, r1
    e686:	str.w	r2, [r4, #396]	; 0x18c
    e68a:	b.n	e642 <__register_exitproc+0x3e>
    e68c:	add.w	r4, r5, #332	; 0x14c
    e690:	str.w	r4, [r5, #328]	; 0x148
    e694:	b.n	e61a <__register_exitproc+0x16>
    e696:	mov.w	r0, #4294967295
    e69a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e69e:	nop
    e6a0:	.word	0x20000930
    e6a4:	.word	0x0000d5ed

0000e6a8 <_malloc_trim_r>:
    e6a8:	push	{r3, r4, r5, r6, r7, lr}
    e6aa:	ldr	r7, [pc, #140]	; (e738 <_malloc_trim_r+0x90>)
    e6ac:	mov	r4, r1
    e6ae:	mov	r6, r0
    e6b0:	bl	dce0 <__malloc_lock>
    e6b4:	ldr	r3, [r7, #8]
    e6b6:	ldr	r5, [r3, #4]
    e6b8:	bic.w	r5, r5, #3
    e6bc:	subs	r1, r5, r4
    e6be:	addw	r1, r1, #4079	; 0xfef
    e6c2:	bic.w	r1, r1, #4080	; 0xff0
    e6c6:	bic.w	r1, r1, #15
    e6ca:	sub.w	r4, r1, #4096	; 0x1000
    e6ce:	cmp.w	r4, #4096	; 0x1000
    e6d2:	blt.n	e6e4 <_malloc_trim_r+0x3c>
    e6d4:	movs	r1, #0
    e6d6:	mov	r0, r6
    e6d8:	bl	e0d8 <_sbrk_r>
    e6dc:	ldr	r3, [r7, #8]
    e6de:	add	r3, r5
    e6e0:	cmp	r0, r3
    e6e2:	beq.n	e6ee <_malloc_trim_r+0x46>
    e6e4:	mov	r0, r6
    e6e6:	bl	dce4 <__malloc_unlock>
    e6ea:	movs	r0, #0
    e6ec:	pop	{r3, r4, r5, r6, r7, pc}
    e6ee:	negs	r1, r4
    e6f0:	mov	r0, r6
    e6f2:	bl	e0d8 <_sbrk_r>
    e6f6:	adds	r0, #1
    e6f8:	beq.n	e716 <_malloc_trim_r+0x6e>
    e6fa:	ldr	r3, [pc, #64]	; (e73c <_malloc_trim_r+0x94>)
    e6fc:	ldr	r2, [r7, #8]
    e6fe:	ldr	r1, [r3, #0]
    e700:	subs	r5, r5, r4
    e702:	orr.w	r5, r5, #1
    e706:	mov	r0, r6
    e708:	subs	r1, r1, r4
    e70a:	str	r5, [r2, #4]
    e70c:	str	r1, [r3, #0]
    e70e:	bl	dce4 <__malloc_unlock>
    e712:	movs	r0, #1
    e714:	pop	{r3, r4, r5, r6, r7, pc}
    e716:	movs	r1, #0
    e718:	mov	r0, r6
    e71a:	bl	e0d8 <_sbrk_r>
    e71e:	ldr	r2, [r7, #8]
    e720:	subs	r3, r0, r2
    e722:	cmp	r3, #15
    e724:	ble.n	e6e4 <_malloc_trim_r+0x3c>
    e726:	ldr	r4, [pc, #24]	; (e740 <_malloc_trim_r+0x98>)
    e728:	ldr	r1, [pc, #16]	; (e73c <_malloc_trim_r+0x94>)
    e72a:	ldr	r4, [r4, #0]
    e72c:	orr.w	r3, r3, #1
    e730:	subs	r0, r0, r4
    e732:	str	r3, [r2, #4]
    e734:	str	r0, [r1, #0]
    e736:	b.n	e6e4 <_malloc_trim_r+0x3c>
    e738:	.word	0x20001324
    e73c:	.word	0x2000e77c
    e740:	.word	0x20001730

0000e744 <_free_r>:
    e744:	cmp	r1, #0
    e746:	beq.n	e7d4 <_free_r+0x90>
    e748:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e74c:	mov	r5, r1
    e74e:	mov	r8, r0
    e750:	bl	dce0 <__malloc_lock>
    e754:	ldr.w	r7, [r5, #-4]
    e758:	ldr	r1, [pc, #424]	; (e904 <_free_r+0x1c0>)
    e75a:	bic.w	r3, r7, #1
    e75e:	sub.w	r4, r5, #8
    e762:	adds	r2, r4, r3
    e764:	ldr	r6, [r1, #8]
    e766:	ldr	r0, [r2, #4]
    e768:	cmp	r2, r6
    e76a:	bic.w	r0, r0, #3
    e76e:	beq.n	e836 <_free_r+0xf2>
    e770:	lsls	r6, r7, #31
    e772:	str	r0, [r2, #4]
    e774:	bmi.n	e78e <_free_r+0x4a>
    e776:	ldr.w	r7, [r5, #-8]
    e77a:	subs	r4, r4, r7
    e77c:	add.w	lr, r1, #8
    e780:	ldr	r5, [r4, #8]
    e782:	cmp	r5, lr
    e784:	add	r3, r7
    e786:	beq.n	e868 <_free_r+0x124>
    e788:	ldr	r7, [r4, #12]
    e78a:	str	r7, [r5, #12]
    e78c:	str	r5, [r7, #8]
    e78e:	adds	r5, r2, r0
    e790:	ldr	r5, [r5, #4]
    e792:	lsls	r5, r5, #31
    e794:	bpl.n	e81c <_free_r+0xd8>
    e796:	orr.w	r2, r3, #1
    e79a:	str	r2, [r4, #4]
    e79c:	str	r3, [r4, r3]
    e79e:	cmp.w	r3, #512	; 0x200
    e7a2:	bcs.n	e7d6 <_free_r+0x92>
    e7a4:	lsrs	r3, r3, #3
    e7a6:	adds	r2, r3, #1
    e7a8:	ldr	r5, [r1, #4]
    e7aa:	ldr.w	r7, [r1, r2, lsl #3]
    e7ae:	str	r7, [r4, #8]
    e7b0:	movs	r0, #1
    e7b2:	asrs	r3, r3, #2
    e7b4:	lsl.w	r3, r0, r3
    e7b8:	add.w	r0, r1, r2, lsl #3
    e7bc:	orrs	r5, r3
    e7be:	subs	r0, #8
    e7c0:	str	r0, [r4, #12]
    e7c2:	str	r5, [r1, #4]
    e7c4:	str.w	r4, [r1, r2, lsl #3]
    e7c8:	str	r4, [r7, #12]
    e7ca:	mov	r0, r8
    e7cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e7d0:	b.w	dce4 <__malloc_unlock>
    e7d4:	bx	lr
    e7d6:	lsrs	r2, r3, #9
    e7d8:	cmp	r2, #4
    e7da:	bhi.n	e884 <_free_r+0x140>
    e7dc:	lsrs	r2, r3, #6
    e7de:	add.w	r7, r2, #57	; 0x39
    e7e2:	lsls	r7, r7, #1
    e7e4:	add.w	r5, r2, #56	; 0x38
    e7e8:	add.w	r0, r1, r7, lsl #2
    e7ec:	ldr.w	r2, [r1, r7, lsl #2]
    e7f0:	ldr	r1, [pc, #272]	; (e904 <_free_r+0x1c0>)
    e7f2:	subs	r0, #8
    e7f4:	cmp	r0, r2
    e7f6:	beq.n	e894 <_free_r+0x150>
    e7f8:	ldr	r1, [r2, #4]
    e7fa:	bic.w	r1, r1, #3
    e7fe:	cmp	r3, r1
    e800:	bcs.n	e808 <_free_r+0xc4>
    e802:	ldr	r2, [r2, #8]
    e804:	cmp	r0, r2
    e806:	bne.n	e7f8 <_free_r+0xb4>
    e808:	ldr	r0, [r2, #12]
    e80a:	str	r0, [r4, #12]
    e80c:	str	r2, [r4, #8]
    e80e:	str	r4, [r0, #8]
    e810:	str	r4, [r2, #12]
    e812:	mov	r0, r8
    e814:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e818:	b.w	dce4 <__malloc_unlock>
    e81c:	ldr	r5, [r2, #8]
    e81e:	ldr	r7, [pc, #232]	; (e908 <_free_r+0x1c4>)
    e820:	cmp	r5, r7
    e822:	add	r3, r0
    e824:	beq.n	e8a6 <_free_r+0x162>
    e826:	ldr	r0, [r2, #12]
    e828:	str	r0, [r5, #12]
    e82a:	orr.w	r2, r3, #1
    e82e:	str	r5, [r0, #8]
    e830:	str	r2, [r4, #4]
    e832:	str	r3, [r4, r3]
    e834:	b.n	e79e <_free_r+0x5a>
    e836:	lsls	r7, r7, #31
    e838:	add	r3, r0
    e83a:	bmi.n	e84c <_free_r+0x108>
    e83c:	ldr.w	r2, [r5, #-8]
    e840:	subs	r4, r4, r2
    e842:	add	r3, r2
    e844:	ldr	r0, [r4, #8]
    e846:	ldr	r2, [r4, #12]
    e848:	str	r2, [r0, #12]
    e84a:	str	r0, [r2, #8]
    e84c:	ldr	r2, [pc, #188]	; (e90c <_free_r+0x1c8>)
    e84e:	ldr	r2, [r2, #0]
    e850:	orr.w	r0, r3, #1
    e854:	cmp	r3, r2
    e856:	str	r0, [r4, #4]
    e858:	str	r4, [r1, #8]
    e85a:	bcc.n	e7ca <_free_r+0x86>
    e85c:	ldr	r3, [pc, #176]	; (e910 <_free_r+0x1cc>)
    e85e:	mov	r0, r8
    e860:	ldr	r1, [r3, #0]
    e862:	bl	e6a8 <_malloc_trim_r>
    e866:	b.n	e7ca <_free_r+0x86>
    e868:	adds	r1, r2, r0
    e86a:	ldr	r1, [r1, #4]
    e86c:	lsls	r1, r1, #31
    e86e:	bmi.n	e8fa <_free_r+0x1b6>
    e870:	ldr	r1, [r2, #8]
    e872:	ldr	r2, [r2, #12]
    e874:	str	r2, [r1, #12]
    e876:	add	r3, r0
    e878:	orr.w	r0, r3, #1
    e87c:	str	r1, [r2, #8]
    e87e:	str	r0, [r4, #4]
    e880:	str	r3, [r4, r3]
    e882:	b.n	e7ca <_free_r+0x86>
    e884:	cmp	r2, #20
    e886:	bhi.n	e8b8 <_free_r+0x174>
    e888:	add.w	r7, r2, #92	; 0x5c
    e88c:	lsls	r7, r7, #1
    e88e:	add.w	r5, r2, #91	; 0x5b
    e892:	b.n	e7e8 <_free_r+0xa4>
    e894:	asrs	r2, r5, #2
    e896:	ldr	r3, [r1, #4]
    e898:	movs	r5, #1
    e89a:	lsl.w	r2, r5, r2
    e89e:	orrs	r3, r2
    e8a0:	str	r3, [r1, #4]
    e8a2:	mov	r2, r0
    e8a4:	b.n	e80a <_free_r+0xc6>
    e8a6:	orr.w	r2, r3, #1
    e8aa:	str	r4, [r1, #20]
    e8ac:	str	r4, [r1, #16]
    e8ae:	str	r5, [r4, #12]
    e8b0:	str	r5, [r4, #8]
    e8b2:	str	r2, [r4, #4]
    e8b4:	str	r3, [r4, r3]
    e8b6:	b.n	e7ca <_free_r+0x86>
    e8b8:	cmp	r2, #84	; 0x54
    e8ba:	bhi.n	e8ca <_free_r+0x186>
    e8bc:	lsrs	r2, r3, #12
    e8be:	add.w	r7, r2, #111	; 0x6f
    e8c2:	lsls	r7, r7, #1
    e8c4:	add.w	r5, r2, #110	; 0x6e
    e8c8:	b.n	e7e8 <_free_r+0xa4>
    e8ca:	cmp.w	r2, #340	; 0x154
    e8ce:	bhi.n	e8de <_free_r+0x19a>
    e8d0:	lsrs	r2, r3, #15
    e8d2:	add.w	r7, r2, #120	; 0x78
    e8d6:	lsls	r7, r7, #1
    e8d8:	add.w	r5, r2, #119	; 0x77
    e8dc:	b.n	e7e8 <_free_r+0xa4>
    e8de:	movw	r0, #1364	; 0x554
    e8e2:	cmp	r2, r0
    e8e4:	bhi.n	e8f4 <_free_r+0x1b0>
    e8e6:	lsrs	r2, r3, #18
    e8e8:	add.w	r7, r2, #125	; 0x7d
    e8ec:	lsls	r7, r7, #1
    e8ee:	add.w	r5, r2, #124	; 0x7c
    e8f2:	b.n	e7e8 <_free_r+0xa4>
    e8f4:	movs	r7, #254	; 0xfe
    e8f6:	movs	r5, #126	; 0x7e
    e8f8:	b.n	e7e8 <_free_r+0xa4>
    e8fa:	orr.w	r2, r3, #1
    e8fe:	str	r2, [r4, #4]
    e900:	str	r3, [r4, r3]
    e902:	b.n	e7ca <_free_r+0x86>
    e904:	.word	0x20001324
    e908:	.word	0x2000132c
    e90c:	.word	0x2000172c
    e910:	.word	0x2000e778
    e914:	.word	0x00000000

0000e918 <___init_veneer>:
    e918:	ldr.w	pc, [pc]	; e91c <___init_veneer+0x4>
    e91c:	.word	0x600015a9

Disassembly of section .fini:

0000e920 <_fini>:
    e920:	push	{r3, r4, r5, r6, r7, lr}
    e922:	nop
