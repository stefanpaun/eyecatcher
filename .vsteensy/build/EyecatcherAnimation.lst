
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00011c60 l    d  .fini	00000000 .fini
00011c64 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001770 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00010240 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000e7c4 l     F .text.itcm	0000005c schedule_transfer
0000e820 l     F .text.itcm	00000030 run_callbacks
0000e850 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000e8e8 l     F .text.itcm	00000544 isr
2000dcc8 l     O .bss	00000004 endpointN_notify_mask
2000dcd0 l     O .bss	00000004 endpoint0_notify_mask
2000dcd4 l     O .bss	00000001 usb_reboot_timer
2000dcd8 l     O .bss	00000008 endpoint0_setupdata
2000dce0 l     O .bss	00000008 reply_buffer
2000dce8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000e55c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000e560 l     O .bss	00000004 s_hotTemp
2000e564 l     O .bss	00000004 s_hot_ROOM
2000e568 l     O .bss	00000004 s_roomC_hotC
2000e56c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001770 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001774 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00002ebc l     F .text.itcm	00000958 Screen::iterate_animation() [clone .part.20]
00003818 l     F .text.itcm	00001130 regular_animation() [clone .part.21]
000076d0 l     F .text.itcm	00005bc4 _GLOBAL__sub_I_bri_level
20003c0c l     O .bss	00001200 mask_B
200001c0 l     O .data	00000400 dim_curve
20000974 l     O .data	00000240 background_B
20009c7c l     O .bss	00001200 mask_A
20000bb4 l     O .data	00000240 background_A
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
0000df90 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
0000da4c l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000e0d0 l     F .text.itcm	00000028 rx_event
0000e0f8 l     F .text.itcm	00000070 usb_serial_flush_callback
0000e168 l     F .text.itcm	0000015c usb_serial_write.part.1
2000d38c l     O .bss	00000700 txbuffer
2000da8c l     O .bss	00000001 tx_noautoflush
2000da8d l     O .bss	00000001 tx_head
2000da90 l     O .bss	000000c0 rx_buffer
2000db50 l     O .bss	00000006 rx_index
2000db58 l     O .bss	00000006 rx_count
2000db60 l     O .bss	00000060 rx_transfer
2000dbc0 l     O .bss	00000002 tx_available
2000dbe0 l     O .bss	000000e0 tx_transfer
2000dcc0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000efc8 l     F .text.itcm	00000068 flash_wait
0000f030 l     F .text.itcm	000000d0 flash_write.constprop.0
2000dcf4 l     O .bss	0000001e sector_index
2000dd12 l     O .bss	00000001 initialized
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000f49c l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000dfc l     O .data	0000000a qualifier_descriptor
20000e20 l     O .data	00000043 config_descriptor
20000e64 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 WString.cpp
0000fc34 l     F .text.itcm	0000001a String::operator=(char const*) [clone .part.3]
00000000 l    df *ABS*	00000000 yield.cpp
2000dd39 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000fdf4 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000dd3c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
2000dd40 l     O .bss	00000400 tx_buffer1
200008d0 l     O .data	0000005c UART6_Hardware
2000e140 l     O .bss	00000400 rx_buffer1
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000f28 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __memset_veneer
600015c0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015c8 l     F .text.progmem	00000008 __pwm_init_veneer
600015d0 l     F .text.progmem	00000008 __delay_veneer
600015d8 l     F .text.progmem	00000008 __loop_veneer
600015e0 l     F .text.progmem	00000008 __yield_veneer
600015e8 l     F .text.progmem	00000008 __setup_veneer
600015f0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015f8 l     F .text.progmem	00000008 __set_arm_clock_veneer
00011c58 l     F .text.itcm	00000008 ___init_veneer
0000e3ec g     F .text.itcm	00000014 usb_serial_available
0001171c g     F .text.itcm	000000ba strcpy
0000fd54  w    F .text.itcm	000000a0 yield
00010610 g     F .text.itcm	000000a8 sqrt
2000dccc g     O .bss	00000004 usb_timer1_callback
20000e08 g     O .data	00000018 usb_string_manufacturer_name_default
2000dd1c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000ded8 g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
20001798 g     O .bss	00000004 sinceBeam
00010174 g     F .text.itcm	00000020 Print::println()
0000fe84 g     F .text.itcm	00000014 random(long, long)
0000df38 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0001101c g     F .text.itcm	00000002 __malloc_unlock
60001458 g     F .text.progmem	00000058 analog_init
0000f100 g     F .text.itcm	0000004c eeprom_initialize
20000df8 g     O .data	00000004 F_CPU_ACTUAL
0000fb38 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00010eb4 g     F .text.itcm	000000c6 memmove
00000dec g     F .text.itcm	00001b3c regular_setup()
00010010 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000f5e0 g     F .text.itcm	00000038 HardwareSerial::peek()
2000e554 g     O .bss	00000001 EventResponder::runningFromYield
2000d2c8 g     O .bss	000000c4 Alarm
000100fc g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
000108c8 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000e540 g     O .bss	00000004 EventResponder::firstInterrupt
0000ef74 g     F .text.itcm	00000028 usb_transfer_status
20000f0c g     O .data	00000001 usb_enable_serial_event_processing
20000eac g     O .data	00000060 Serial1
000100e0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200005c0 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
00011c60 g       .text.itcm	00000000 _etext
0000ddc8 g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001770 g       .bss	00000000 _sbss
0000dad4 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
0000f5c4 g     F .text.itcm	0000001c HardwareSerial::available()
60001610 g       *ABS*	00000000 _stextload
0000d388 g     F .text.itcm	0000001c loop
200065d0 g     O .bss	00001224 sat_automaton_B
20008a30 g     O .bss	00000014 synapse_A
0000ee2c g     F .text.itcm	00000064 usb_config_rx
0000fea4  w    F .text.itcm	0000000c serialEvent1()
0000ffa8 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000db80 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000f9e0 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000e544 g     O .bss	00000004 EventResponder::lastInterrupt
0000df9c g     F .text.itcm	00000134 memcpy
000001d8  w    F .text.itcm	0000030c Screen::initialize_seed(Automaton*, Screen::Seed)
0000fb60 g     F .text.itcm	0000002c HardwareSerial::disableSerialEvents()
2000dd18 g     O .bss	00000004 systick_millis_count
00004948 g     F .text.itcm	00001b24 ceremony_setup()
2000dcf0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00006470 g     F .text.itcm	000005a8 updateScreensFadeCeremony(int)
20000e08  w    O .data	00000018 usb_string_manufacturer_name
00010924 g     F .text.itcm	00000010 malloc
20008a44 g     O .bss	00000014 synapse_B
0000ff44  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
00000800 g     F .text.itcm	000005b4 updateBeams()
2000e578 g     O .bss	00000004 __malloc_top_pad
0000ef9c g     F .text.itcm	0000002c rtc_set
20010280 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
20000964 g     O .data	00000000 .hidden __dso_handle
0000daf8 g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000fb9c g     F .text.itcm	0000002a String::reserve(unsigned int)
00011410 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000e37c g     F .text.itcm	0000004c usb_serial_getchar
2000e5a4 g     O .bss	00000008 usb_cdc_line_coding
0000f4c0 g     F .text.itcm	0000000a digitalWrite
2000e54c g     O .bss	00000004 EventResponder::lastYield
0000d294 g     F .text.itcm	000000f4 readMessages()
00006a18 g     F .text.itcm	00000cb4 ceremony_animation()
2000e574 g     O .bss	00000004 __malloc_max_sbrked_mem
0000f4cc g     F .text.itcm	00000080 pinMode
0000fd20 g     F .text.itcm	00000034 String::getBytes(unsigned char*, unsigned int, unsigned int) const
20008a18 g     O .bss	00000010 readBuffer
20280000 g       .bss	00000000 _heap_end
20008a2c g     O .bss	00000004 implosionTimer
20001794 g     O .bss	00000001 isRegularAnimation
20000f24 g     O .data	00000001 __fdlib_version
2000e550 g     O .bss	00000004 EventResponder::firstYield
20000960 g     O .data	00000004 _global_impure_ptr
00011030 g     F .text.itcm	000003de _realloc_r
000108d4 g     F .text.itcm	00000050 __libc_init_array
00010248  w    F .text.itcm	0000008c HardFault_HandlerC
2000178d g     O .bss	00000001 screenFadeUpdateSwitcher
000100c8  w    F .text.itcm	00000004 usb_serial_class::clear()
000102d4 g     F .text.itcm	00000030 _sbrk
6001327c g       *ABS*	00000000 _sdataload
2000e558 g     O .bss	00000004 MillisTimer::listWaiting
20000f20 g     O .data	00000004 __brkval
2000dcc1 g     O .bss	00000001 usb_cdc_line_rtsdtr
2000ae7c g     O .bss	00000001 implosionDone
600015a8 g     F .text.progmem	00000000 _init
0000e2c4 g     F .text.itcm	00000002 usb_serial_reset
0000fb8c g     F .text.itcm	0000000e String::~String()
0000f1bc g     F .text.itcm	000001ac eeprom_write_byte
20010700 g       .bss	00000000 _ebss
0000f5a4 g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
0000fc64 g     F .text.itcm	00000070 String::append(char const*, unsigned int)
20008a28 g     O .bss	00000004 randomSeedN
0001084c g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000ae80 g     O .bss	00001224 bg_automaton_A
0000fbc8 g     F .text.itcm	00000042 String::copy(char const*, unsigned int)
0000db30 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000003 g       *ABS*	00000000 _itcm_block_count
0000f920 g     F .text.itcm	000000c0 HardwareSerial::write9bit(unsigned long)
2000f000 g     O .bss	00000020 endpoint0_transfer_data
00010354 g     F .text.itcm	000002b8 pwm_init
0000f684 g     F .text.itcm	0000001a HardwareSerial::flush()
0000fb8c g     F .text.itcm	0000000e String::~String()
600013f4 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000de24 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e5ac g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ef28 g     F .text.itcm	00000028 usb_transmit
000100a8 g     F .text.itcm	00000020 systick_isr
20000f10 g     O .data	00000010 Serial
0000fe98 g     F .text.itcm	0000000c IRQHandler_Serial1
2000dd38 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
200008ac g     O .data	00000024 vtable for HardwareSerial
000100e8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
20000968 g     O .data	00000004 automatonRate
0000e3c8 g     F .text.itcm	00000024 usb_serial_peekchar
0000e538 g     F .text.itcm	0000028c set_arm_clock
2000dd14 g     O .bss	00000004 systick_cycle_count
20000e94 g     O .data	00000016 usb_string_serial_number_default
00011a84 g     F .text.itcm	000001d0 _free_r
000100d8  w    F .text.itcm	00000004 usb_serial_class::flush()
20001760 g     O .data	00000004 __malloc_sbrk_base
000100d0  w    F .text.itcm	00000004 usb_serial_class::read()
0000eef8 g     F .text.itcm	0000002e usb_prepare_transfer
00010230 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000dcc4 g     O .bss	00000004 usb_timer0_callback
000100f0  w    F .text.itcm	0000000c serialEvent()
00011944 g     F .text.itcm	000000a4 __register_exitproc
0000df38 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000f14c g     F .text.itcm	00000070 eeprom_read_byte
0000e400 g     F .text.itcm	0000003c usb_serial_flush_input
0000e43c g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
000118dc g     F .text.itcm	00000066 strncpy
2000e57c g     O .bss	00000028 __malloc_current_mallinfo
20008a58 g     O .bss	00001224 grow_automaton_A
00000080  w    F .text.itcm	00000158 Screen::Screen()
00011020 g     F .text.itcm	00000010 realloc
000005b8 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
000108bc g     F .text.itcm	0000000c __cxa_atexit
200053ac g     O .bss	00001224 sat_automaton_A
0000feb0 g     F .text.itcm	00000014 serial_event_check_serial1()
0000fe7c g     F .text.itcm	00000008 random(unsigned long)
2000092c  w    O .data	00000028 vtable for usb_serial_class
0000fc0c g     F .text.itcm	00000026 String::String(char const*)
20003bf8 g     O .bss	00000014 matrix_B
2000e548 g     O .bss	00000004 MillisTimer::listActive
2000178c g     O .bss	00000001 incomingByte
20001354 g     O .data	00000408 __malloc_av_
0000e4cc g     F .text.itcm	0000006c usb_serial_flush_output
00011018 g     F .text.itcm	00000002 __malloc_lock
00000db4 g     F .text.itcm	00000038 updateRandomSeed()
20010400 g     O .bss	000002c0 _VectorsRam
0001085c g     F .text.itcm	0000005e _calloc_r
0000fcf4 g     F .text.itcm	0000002c String::equals(char const*) const
0000ded4 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
2000096c g     O .data	00000004 bri_level
00010f7c g     F .text.itcm	0000009a memset
2000e570 g     O .bss	00000004 __malloc_max_total_mem
000004e8 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
00002928 g     F .text.itcm	00000594 updateScreensFade()
0001083c g     F .text.itcm	00000004 matherr
0000f54c g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
00010944 g     F .text.itcm	00000570 _malloc_r
0000fec4 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20003be4 g     O .bss	00000014 matrix_A
0000f448 g     F .text.itcm	00000054 micros
000119e8 g     F .text.itcm	0000009c _malloc_trim_r
2000179c g     O .bss	00001224 fg_automaton_A
20000e90 g     O .data	00000004 string0
0000e468 g     F .text.itcm	00000018 usb_serial_write
000100d4  w    F .text.itcm	00000004 usb_serial_class::available()
00011448 g     F .text.itcm	000002dc strcmp
0000df2c g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
20010000 g     O .bss	00000280 endpoint_queue_head
20000e78  w    O .data	00000016 usb_string_product_name
0000f388 g     F .text.itcm	000000c0 delay
00011c60 g     F .fini	00000000 _fini
0000fc50 g     F .text.itcm	00000014 String::operator=(char const*)
60001020 g     O .text.progmem	0000000c BootData
00010214 g     F .text.itcm	00000016 Print::print(long)
2000c0a4 g     O .bss	00001224 bg_automaton_B
0000fc0c g     F .text.itcm	00000026 String::String(char const*)
20001350 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
0000dd60 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000fe70 g     F .text.itcm	0000000c randomSeed(unsigned long)
0000f9e4 g     F .text.itcm	00000152 HardwareSerial::IRQHandler()
0000d4d0 g     F .text.itcm	0000057c setup
20000840 g     O .data	0000006c usb_descriptor_list
20005000 g     O .bss	000001f4 screen_B
200077f4 g     O .bss	00001224 grow_automaton_B
000106b8 g     F .text.itcm	00000184 __ieee754_sqrt
20068000 g       .bss	00000000 _estack
0000e480 g     F .text.itcm	0000004c usb_serial_write_buffer_free
200029c0 g     O .bss	00001224 fg_automaton_B
20004e0c g     O .bss	000001f4 screen_A
0000e2c8 g     F .text.itcm	000000b4 usb_serial_configure
20001770 g       .data	00000000 _edata
0000dd9c g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
000100dc  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000f6a0 g     F .text.itcm	00000040 nvic_execution_priority()
0000de18 g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
00010304 g     F .text.itcm	0000004e ultoa
20001790 g     O .bss	00000004 sinceBeamUpdate
200051f4 g     O .bss	000001b8 beams
0001022c g     F .text.itcm	00000004 operator new(unsigned int)
0000ff60 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
2000175c g     O .data	00000004 __malloc_trim_threshold
000100cc  w    F .text.itcm	00000004 usb_serial_class::peek()
0000f618 g     F .text.itcm	0000006a HardwareSerial::read()
60001600 g       .text.progmem	00000000 __init_array_start
20000df4 g     O .data	00000004 F_BUS_ACTUAL
0000dd9c g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
00011800 g     F .text.itcm	000000dc strlen
20000e78 g     O .data	00000016 usb_string_product_name_default
0000d3a8 g     F .text.itcm	00000124 readAnimationType()
00010128 g     F .text.itcm	0000004a Print::print(String const&)
60001354 g     F .text.progmem	000000a0 configure_cache
0000f368 g     F .text.itcm	0000001e eeprom_write_block
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000f6e0 g     F .text.itcm	00000240 HardwareSerial::begin(unsigned long, unsigned short)
60001600 g       .text.progmem	00000000 __preinit_array_start
0000ef50 g     F .text.itcm	00000024 usb_receive
0000dab4 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000fcd4 g     F .text.itcm	0000001e String::append(char)
0000dab4 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
000149e0 g       *ABS*	00000000 _flashimagelen
00010840 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000ffa4 g     F .text.itcm	00000004 pendablesrvreq_isr
00010194 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ee90 g     F .text.itcm	00000068 usb_config_tx
00010934 g     F .text.itcm	00000010 free
20000970 g     O .data	00000001 automatonReinitializeCeremony
20000e94  w    O .data	00000016 usb_string_serial_number
00000080  w    F .text.itcm	00000158 Screen::Screen()



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`.I......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	60001354 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	600013f4 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015f8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001458 <analog_init>
	pwm_init();
600011be:	bl	600015c8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015e8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015d8 <__loop_veneer>
		yield();
600011da:	bl	600015e0 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaabf
600011e8:	.word	0x20068000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x00011c60
600011f8:	.word	0x20000000
600011fc:	.word	0x6001327c
60001200:	.word	0x20001770
60001204:	.word	0x20001770
60001208:	.word	0x20010700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200103fc
60001214:	.word	0x00010231
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000ffa5
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x000100a9
6000124c:	.word	0xe0001004
60001250:	.word	0x2000dd14
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000dd18
60001264:	.word	0x20010400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015c0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015d0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015b8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20010000
60001348:	.word	0x20010400
6000134c:	.word	0x0000e8e9
60001350:	.word	0xe000e10c

60001354 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
60001354:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001356:	ldr	r2, [pc, #100]	; (600013bc <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001358:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000135a:	ldr	r3, [pc, #100]	; (600013c0 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000135c:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001360:	ldr	r0, [pc, #96]	; (600013c4 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001362:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001364:	ldr	r6, [pc, #96]	; (600013c8 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001366:	ldr	r5, [pc, #100]	; (600013cc <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001368:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000136a:	ldr	r7, [pc, #100]	; (600013d0 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000136c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001370:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001372:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001374:	ldr	r6, [pc, #92]	; (600013d4 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001376:	ldr	r5, [pc, #96]	; (600013d8 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001378:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000137a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000137c:	ldr	r7, [pc, #92]	; (600013dc <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000137e:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001380:	ldr	r6, [pc, #92]	; (600013e0 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001382:	ldr	r5, [pc, #96]	; (600013e4 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001384:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001386:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001388:	ldr	r7, [pc, #92]	; (600013e8 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000138a:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000138c:	ldr	r6, [pc, #92]	; (600013ec <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000138e:	ldr	r5, [pc, #96]	; (600013f0 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001390:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001392:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001394:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001398:	dsb	sy
	asm("isb");
6000139c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013a0:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013a4:	dsb	sy
	asm("isb");
600013a8:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013ac:	ldr.w	r3, [r2, #-136]
600013b0:	orr.w	r3, r3, #196608	; 0x30000
600013b4:	str.w	r3, [r2, #-136]
600013b8:	pop	{r4, r5, r6, r7, pc}
600013ba:	nop
600013bc:	.word	0xe000ed9c
600013c0:	.word	0xe000eda0
600013c4:	.word	0xe000ed94
600013c8:	.word	0x03080025
600013cc:	.word	0x00200011
600013d0:	.word	0x07020021
600013d4:	.word	0x20000012
600013d8:	.word	0x13080025
600013dc:	.word	0x20200013
600013e0:	.word	0x130b0027
600013e4:	.word	0x40000014
600013e8:	.word	0x13100033
600013ec:	.word	0x60000015
600013f0:	.word	0x070b002f

600013f4 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
600013f4:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	tst.w	r3, #2
60001414:	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	tst.w	r3, #2
60001422:	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	tst.w	r3, #8192	; 0x2000
60001428:	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	str	r5, [r2, #20]
			continue;
6000142c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	tst.w	r3, #4096	; 0x1000
60001432:	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	str	r6, [r2, #20]
			continue;
60001436:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	cmp	r3, #0
6000143a:	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	tst.w	r3, #65536	; 0x10000
60001440:	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	str	r1, [r2, #24]
			continue;
60001444:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	lsls	r3, r3, #25
60001448:	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	str	r7, [r2, #20]
			continue;
6000144c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	pop	{r4, r5, r6, r7}
60001450:	bx	lr
60001452:	nop
60001454:	.word	0x400d8000

60001458 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001458:	ldr	r3, [pc, #68]	; (600014a0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000145a:	ldr	r1, [pc, #72]	; (600014a4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000145c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000145e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001460:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001464:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001466:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001468:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000146c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000146e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001470:	orr.w	r0, r0, #768	; 0x300
60001474:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001476:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001478:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000147a:	ldr	r3, [r2, #72]	; 0x48
6000147c:	lsls	r3, r3, #24
6000147e:	bmi.n	6000147a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001480:	ldr	r3, [pc, #36]	; (600014a8 <analog_init+0x50>)
60001482:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001486:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001488:	ldr	r2, [pc, #24]	; (600014a4 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000148c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000148e:	ldr	r3, [r2, #72]	; 0x48
60001490:	ands.w	r3, r3, #128	; 0x80
60001494:	bne.n	6000148e <analog_init+0x36>
	calibrating = 0;
60001496:	ldr	r2, [pc, #20]	; (600014ac <analog_init+0x54>)
60001498:	strb	r3, [r2, #0]
}
6000149a:	pop	{r4, r5}
6000149c:	bx	lr
6000149e:	nop
600014a0:	.word	0x400fc000
600014a4:	.word	0x400c4000
600014a8:	.word	0x400c8000
600014ac:	.word	0x2000e55c

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000e568
60001598:	.word	0x2000e564
6000159c:	.word	0x2000e56c
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000e560

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__memset_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__memset_veneer+0x4>
600015bc:	.word	0x00010f7d

600015c0 <__usb_init_serialnumber_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__usb_init_serialnumber_veneer+0x4>
600015c4:	.word	0x0000f54d

600015c8 <__pwm_init_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__pwm_init_veneer+0x4>
600015cc:	.word	0x00010355

600015d0 <__delay_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__delay_veneer+0x4>
600015d4:	.word	0x0000f389

600015d8 <__loop_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__loop_veneer+0x4>
600015dc:	.word	0x0000d389

600015e0 <__yield_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__yield_veneer+0x4>
600015e4:	.word	0x0000fd55

600015e8 <__setup_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__setup_veneer+0x4>
600015ec:	.word	0x0000d4d1

600015f0 <____libc_init_array_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <____libc_init_array_veneer+0x4>
600015f4:	.word	0x000108d5

600015f8 <__set_arm_clock_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__set_arm_clock_veneer+0x4>
600015fc:	.word	0x0000e539

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x000076d1
60001608:	.word	0x0000df91

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r6, #29
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x00011c64

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r6, #29
      6e:	.short	0x2000
      70:	adds	r4, r4, #1
      72:	movs	r1, r0
      74:	asrs	r0, r6, #29
      76:	.short	0x2000
	...

00000080 <Screen::Screen()>:
      80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      84:	ldr	r5, [pc, #328]	; (1d0 <Screen::Screen()+0x150>)
      86:	mov	r4, r0
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	.word	0x27004606
      8c:	mov.w	r9, #5
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	.word	0x0801f04f
      94:	ldmia	r5!, {r0, r1, r2, r3}
      96:	.short	0xc60f
      98:	ldmia.w	r5, {r0, r1}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      9c:	movs	r2, #168	; 0xa8
      9e:	.short	0xe886
      a0:	movs	r3, r0
      a2:	.short	0xf105
      a4:	lsls	r0, r1, #4
      a6:	add.w	r0, r4, #24
      aa:	bl	df9c <memcpy>
      ae:	add.w	r1, r5, #176	; 0xb0
      b2:	add.w	r5, r5, #344	; 0x158
      b6:	.short	0x22a8
      b8:	add.w	r0, r4, #192	; 0xc0
      bc:	movs	r6, #2
      be:	bl	df9c <memcpy>
      c2:	.short	0xf504
      c4:	strb	r4, [r6, #14]
      c6:	ldmia.w	r5, {r0, r1, r2}
      ca:	movs	r5, #3
      cc:	stmia.w	r3, {r0, r1, r2}
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      d0:	mov	r1, r5
      d2:	mov	r0, r6
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      d4:	str.w	r6, [r4, #384]	; 0x180
      d8:	str.w	r9, [r4, #372]	; 0x174
      dc:	str.w	r8, [r4, #376]	; 0x178
      e0:	.word	0x717cf884
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      e4:	bl	fe84 <random(long, long)>
		{CIRCLE, random(2, 4), false},
      e8:	.word	0xf8c42104
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      ec:	lsls	r4, r0, #6
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      ee:	.short	0x4630
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      f0:	str.w	r5, [r4, #396]	; 0x18c
      f4:	strb.w	r7, [r4, #392]	; 0x188
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      f8:	.word	0xfec4f00f
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      fc:	movs	r3, #4
      fe:	str.w	r0, [r4, #400]	; 0x190

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     102:	.short	0x4649
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     104:	str.w	r3, [r4, #408]	; 0x198

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     108:	.word	0xf8844630
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     10c:	strb	r4, [r2, #6]

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     10e:	.short	0xf00f
     110:	cdp2	1, 11, cr2, cr9, cr10, {0}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     114:	.word	0x019cf8c4
	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
		{LINE, random(3, 10), false}
     118:	mov	r0, r5
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     11a:	strb.w	r7, [r4, #416]	; 0x1a0
     11e:	str.w	r8, [r4, #420]	; 0x1a4
	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
		{LINE, random(3, 10), false}
     122:	.short	0xf00f
     124:	cdp2	11, 10, cr4, cr15, cr11, {1}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     128:	.word	0xf8c42200
     12c:	strb	r0, [r3, #7]
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     12e:	.short	0x461e
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     130:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     132:	ldr	r1, [r3, #40]	; 0x28
     134:	str.w	r0, [r4, #424]	; 0x1a8
     138:	strb.w	r7, [r4, #428]	; 0x1ac
     13c:	str.w	r7, [r4, #464]	; 0x1d0
     140:	str.w	r2, [r4, #468]	; 0x1d4
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     144:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     146:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     148:	cmp	r3, r1
     14a:	it	eq
     14c:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     14e:	.short	0x4615
    uint32_t lo2 = SNVS_HPRTCLR;
     150:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     152:	.short	0xbf0c
     154:	moveq	r0, #1
     156:	movne	r0, #0
     158:	cmp	r0, #0
     15a:	beq.n	144 <Screen::Screen()+0xc4>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
     15c:	.word	0xf44f0959
     160:	str	r0, [r3, #12]
     162:	.short	0xea41
     164:	str	r2, [r0, #28]
     166:	vmov	s15, r1
     16a:	vldr	d5, [pc, #92]	; 1c8 <Screen::Screen()+0x148>
     16e:	vcvt.f64.u32	d7, s15
     172:	vdiv.f64	d6, d7, d5
     176:	vcvt.u32.f64	s12, d6
     17a:	.short	0xed84
     17c:	ldr	r7, [r6, #36]	; 0x24
     17e:	.short	0xf010
     180:	ldr.w	r4, [r5, <undefined>]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     184:	mov.w	r2, #1728	; 0x6c0
     188:	.word	0xf0102100
     18c:	cdp2	8, 15, cr15, cr7, cr4, {6}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     190:	.word	0xf44f51e8
     194:	str	r0, [r3, #12]
     196:	.short	0xf010
     198:	str.w	r4, [r9, <undefined>]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     19c:	mov.w	r2, #1728	; 0x6c0
     1a0:	.word	0xf0102100
     1a4:	cdp2	8, 14, cr15, cr11, cr4, {6}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     1a8:	.word	0xf44f51ec
     1ac:	str	r0, [r3, #12]
     1ae:	.short	0xf010
     1b0:	ldrh.w	r4, [sp, <undefined>]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     1b4:	.word	0x62d8f44f
     1b8:	movs	r1, #0
     1ba:	.short	0xf010
     1bc:	cdp2	8, 13, cr15, cr15, cr4, {6}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     1c0:	.word	0x462051f0
     1c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     1c8:	.word	0xd2f1a9fc
     1cc:	str	r5, [r1, #36]	; 0x24
     1ce:	.short	0x3ff0
     1d0:	movs	r0, r0
     1d2:	.short	0x2000
     1d4:	ands	r0, r0
     1d6:	ands	r5, r1

000001d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>:

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
     1d8:	.word	0x1e50b082
     1dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1e0:	.word	0x8b04ed2d
     1e4:	sub	sp, #12
     1e6:	.short	0x460d
     1e8:	add	r1, sp, #64	; 0x40
     1ea:	.short	0xf89d
     1ec:	str	r0, [r1, #4]
     1ee:	.short	0xe881
     1f0:	movs	r4, r1
     1f2:	ldr	r4, [sp, #68]	; 0x44
		switch (init_seed.seed){
     1f4:	.word	0xf2002804
     1f8:	strh	r4, [r7, #8]
     1fa:	.short	0xe8df
     1fc:	and.w	r5, r0, #2617245696	; 0x9c000000
     200:	.word	0x0003d780
     204:	add.w	r7, r5, #28
     208:	.word	0xf505462c
     20c:	ldr	r0, [r2, #0]
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
     20e:	.short	0x2e00
     210:	bne.w	424 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x24c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
     214:	.word	0x603b682b
      cells[SIZE_SCREEN-1][i] = _target;
     218:	str.w	r3, [r7, #2208]	; 0x8a0
      cells[i][0] = _target;
     21c:	.word	0x67a361e3
      cells[i][SIZE_SCREEN-1] = _target;
     220:	adds	r4, #96	; 0x60
     222:	.short	0x3704
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
     224:	cmp	r4, r8
     226:	.short	0xd1f2
				break;
			default:
				(*automaton).init();
			
		}
	}
     228:	add	sp, #12
     22a:	.short	0xecbd
     22c:	ldrh	r4, [r0, #24]
     22e:	.short	0xe8bd
     230:	ldr	r7, [pc, #960]	; (5f4 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x3c>)
     232:	add	sp, #8
     234:	.word	0x20084770
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     238:	bl	fe7c <random(unsigned long)>
     23c:	.word	0x0708f100
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     240:	movs	r0, #8
     242:	.short	0xf00f
     244:	cdp2	12, 1, cr2, cr11, cr0, {0}
    for (int y = 0 ; y < size; y++){
     248:	ble.n	228 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x50>
     24a:	.short	0xf100
     24c:	lsls	r7, r1, #12
     24e:	add.w	r7, r7, r7, lsl #1
     252:	mov.w	r8, #0
     256:	add.w	r7, r3, r7, lsl #3
     25a:	add.w	r7, r5, r7, lsl #2
      if (rand){
     25e:	cbnz	r6, 272 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x9a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
     260:	ldr	r3, [r5, #0]
     262:	str	r3, [r7, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
     264:	add.w	r8, r8, #1
     268:	adds	r7, #4
     26a:	.short	0x4544
     26c:	beq.n	228 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x50>
      if (rand){
     26e:	cmp	r6, #0
     270:	beq.n	260 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x88>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     272:	ldr	r3, [r5, #20]
     274:	ldr	r2, [r5, #16]
     276:	subs	r0, r3, r2
     278:	.word	0xf00f3002
     27c:	ldc2l	9, cr6, [pc, #172]!	; 32c <Screen::initialize_seed(Automaton*, Screen::Seed)+0x154>
     280:	.word	0x44183b01
     284:	str	r0, [r7, #0]
     286:	.short	0xe7ed
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     288:	movs	r0, #8
     28a:	.short	0xf00f
     28c:	ldc2l	1, cr15, [r7]
     290:	.word	0x20080708
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     294:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     298:	.word	0x46232c00
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     29c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     2a0:	.word	0x1c63bfb8
     2a4:	mov.w	r9, r3, asr #1
     2a8:	.word	0xbfb81e23
     2ac:	addlt	r3, #1
     2ae:	.short	0xf1c9
     2b0:	lsrs	r0, r0, #4
     2b2:	.short	0x105c
     2b4:	add.w	r8, r0, r9
     2b8:	.word	0x45981903
     2bc:	str	r3, [sp, #4]
     2be:	.short	0xdab3
     2c0:	add	r9, r7
     2c2:	.short	0x443c
     2c4:	add.w	r7, r9, r9, lsl #1
     2c8:	.word	0x07c7eb08
     2cc:	add.w	r7, r5, r7, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     2d0:	.word	0xda0d45a1
     2d4:	mov	fp, r7
     2d6:	mov	sl, r9
        if (rand){
     2d8:	.word	0xf0402e00
     2dc:	strh	r7, [r2, #4]
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
     2de:	.short	0x682b
     2e0:	str.w	r3, [fp, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     2e4:	.word	0x0a01f10a
     2e8:	add.w	fp, fp, #96	; 0x60
     2ec:	.word	0xd1f345a2

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     2f0:	add.w	r8, r8, #1
     2f4:	.word	0x37049b01
     2f8:	cmp	r8, r3
     2fa:	.short	0xd1e9
     2fc:	b.n	228 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x50>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     2fe:	.short	0x2008
     300:	mov	r7, r5
     302:	.short	0xf00f
     304:	ldc2	6, cr4, [fp, #512]!	; 0x200
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     308:	.word	0xf1052008
     30c:	lsrs	r0, r4, #5
     30e:	.short	0xf00f
     310:	ldc2	14, cr14, [r5, #28]!
     314:	.word	0xf1084a90
     318:	lsrs	r0, r1, #32
     31a:	.short	0xf100
     31c:	lsls	r0, r1, #12
     31e:	.short	0xeeb8
     320:	ldr	r3, [sp, #924]	; 0x39c
     322:	rsb	fp, r0, #16
     326:	.short	0x425b
     328:	rsb	r8, r8, #0
     32c:	.word	0xee079301
     330:	ldrh	r0, [r2, #20]
     332:	.short	0x9c01
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
     334:	.word	0xeeb846ba
     338:	ldrh	r7, [r4, #30]
     33a:	.short	0xee28
     33c:	ldrh	r0, [r1, #24]
     33e:	.short	0xe007
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
     340:	ldr	r3, [r5, #0]
     342:	.short	0xf8ca
     344:	adds	r0, #28
     346:	.short	0x3401
     348:	add.w	sl, sl, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
     34c:	.word	0xd027455c
      double xx = x-midPoint_y;
     350:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
     354:	.word	0x0b48eeb0
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
     358:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
     35c:	.word	0x0b07eea7
     360:	vsqrt.f64	d7, d0
     364:	vcmp.f64	d7, d7
     368:	.word	0xfa10eef1
     36c:	bne.w	4da <Screen::initialize_seed(Automaton*, Screen::Seed)+0x302>
     370:	.word	0x7bc9eeb4
     374:	vmrs	APSR_nzcv, fpscr
     378:	.word	0x2e00d8e5
        if (rand){
     37c:	beq.n	340 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x168>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     37e:	.short	0x696b
     380:	adds	r4, #1
     382:	.short	0x6928
     384:	add.w	sl, sl, #96	; 0x60
     388:	.word	0x30021a18
     38c:	bl	fe7c <random(unsigned long)>
     390:	.word	0x455c692b
     394:	add.w	r3, r3, #4294967295
     398:	.word	0xf84a4418
     39c:	lsrs	r4, r0, #17
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
     39e:	.short	0xd1d7
     3a0:	adds	r7, #4
     3a2:	.short	0xf108
     3a4:	lsrs	r1, r0, #32
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
     3a6:	.short	0x454f
     3a8:	bne.n	32e <Screen::initialize_seed(Automaton*, Screen::Seed)+0x156>
     3aa:	.short	0xe73d
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
     3ac:	cmp	r4, #0
     3ae:	.short	0xf77f
     3b0:	add	r7, sp, #236	; 0xec
     3b2:	.short	0xf04f
     3b4:	lsrs	r0, r0, #4
     3b6:	.short	0xe00a
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
     3b8:	add.w	r3, r7, r3, lsl #3
     3bc:	.word	0xeb05682a
     3c0:	lsls	r3, r0, #14
     3c2:	.short	0x61da
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
     3c4:	add.w	r9, r9, #1
     3c8:	.word	0xf43f454c
     3cc:	add	r7, sp, #180	; 0xb4
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     3ce:	.short	0x2008
     3d0:	bl	fe7c <random(unsigned long)>
     3d4:	.word	0x0808f100
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     3d8:	movs	r0, #8
     3da:	bl	fe7c <random(unsigned long)>
     3de:	add.w	r7, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
     3e2:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
     3e6:	cmp	r6, #0
     3e8:	beq.n	3b8 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x1e0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     3ea:	ldr	r3, [r5, #20]
     3ec:	add.w	r8, r8, r8, lsl #1
     3f0:	ldr	r2, [r5, #16]
     3f2:	add.w	r7, r7, r8, lsl #3
     3f6:	subs	r0, r3, r2
     3f8:	add.w	r7, r5, r7, lsl #2
     3fc:	adds	r0, #2
     3fe:	bl	fe7c <random(unsigned long)>
     402:	ldr	r3, [r5, #16]
     404:	subs	r3, #1
     406:	add	r0, r3
     408:	str	r0, [r7, #28]
     40a:	b.n	3c4 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x1ec>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     40c:	ldr	r3, [r5, #20]
     40e:	ldr	r0, [r5, #16]
     410:	subs	r0, r3, r0
     412:	adds	r0, #2
     414:	bl	fe7c <random(unsigned long)>
     418:	ldr	r3, [r5, #16]
     41a:	subs	r3, #1
     41c:	add	r0, r3
     41e:	str.w	r0, [fp, #28]
     422:	b.n	2e4 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x10c>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     424:	ldr	r3, [r5, #20]
     426:	ldr	r2, [r5, #16]
     428:	subs	r0, r3, r2
     42a:	adds	r0, #2
     42c:	bl	fe7c <random(unsigned long)>
     430:	ldr	r1, [r5, #16]
     432:	subs	r2, r1, #1
     434:	add	r0, r2
     436:	str	r0, [r7, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     438:	ldr	r3, [r5, #20]
     43a:	subs	r0, r3, r1
     43c:	adds	r0, #2
     43e:	bl	fe7c <random(unsigned long)>
     442:	ldr	r1, [r5, #16]
     444:	subs	r2, r1, #1
     446:	add	r0, r2
     448:	str.w	r0, [r7, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     44c:	ldr	r3, [r5, #20]
     44e:	subs	r0, r3, r1
     450:	adds	r0, #2
     452:	bl	fe7c <random(unsigned long)>
     456:	ldr	r1, [r5, #16]
     458:	subs	r2, r1, #1
     45a:	add	r0, r2
     45c:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     45e:	ldr	r3, [r5, #20]
     460:	subs	r0, r3, r1
     462:	adds	r0, #2
     464:	bl	fe7c <random(unsigned long)>
     468:	ldr	r3, [r5, #16]
     46a:	subs	r3, #1
     46c:	add	r0, r3
     46e:	str	r0, [r4, #120]	; 0x78
     470:	b.n	220 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x48>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     472:	movw	sl, #4636	; 0x121c
     476:	add.w	r3, r5, #28
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
     47a:	movs	r7, #0
     47c:	add.w	r9, r5, #4640	; 0x1220
     480:	add	sl, r5
     482:	str	r3, [sp, #4]
     484:	mov.w	r8, r7, lsl #3
     488:	ldr	r6, [sp, #4]
     48a:	movs	r4, #0
     48c:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     490:	ldrb	r2, [r5, #24]
      return _background[x][y];
     492:	add	r3, r4
     494:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     496:	cbnz	r2, 49c <Screen::initialize_seed(Automaton*, Screen::Seed)+0x2c4>
      return _background[x][y];
    } else {
      return !_background[x][y];
     498:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     49c:	cbnz	r3, 4b6 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x2de>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     49e:	adds	r4, #1
     4a0:	adds	r6, #4
     4a2:	cmp	r4, #24
     4a4:	bne.n	48c <Screen::initialize_seed(Automaton*, Screen::Seed)+0x2b4>
     4a6:	ldr	r3, [sp, #4]
     4a8:	adds	r7, #24
     4aa:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     4ac:	cmp.w	r7, #576	; 0x240
     4b0:	str	r3, [sp, #4]
     4b2:	bne.n	484 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x2ac>
     4b4:	b.n	228 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x50>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     4b6:	ldr	r2, [r5, #20]
     4b8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     4ba:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     4be:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     4c0:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     4c2:	adds	r0, #2
     4c4:	ldr.w	fp, [r3, r4, lsl #3]
     4c8:	bl	fe7c <random(unsigned long)>
     4cc:	ldr	r3, [r5, #16]
     4ce:	rsb	r3, r3, fp
     4d2:	adds	r3, #1
     4d4:	subs	r0, r3, r0
     4d6:	str	r0, [r6, #0]
     4d8:	b.n	49e <Screen::initialize_seed(Automaton*, Screen::Seed)+0x2c6>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
     4da:	bl	10610 <sqrt>
     4de:	vmov.f64	d7, d0
     4e2:	b.n	370 <Screen::initialize_seed(Automaton*, Screen::Seed)+0x198>
     4e4:	movs	r0, r0
	...

000004e8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     4e8:	sub	sp, #8
     4ea:	mov	ip, r0
     4ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4f0:	movs	r4, #0
     4f2:	sub	sp, #20
     4f4:	mov	lr, r1
     4f6:	ldr	r6, [pc, #184]	; (5b0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     4f8:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     4fa:	mov	r5, r4

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     4fc:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     500:	ldrb	r3, [r6, r4]
     502:	adds	r4, #44	; 0x2c
     504:	ldr	r2, [pc, #168]	; (5b0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     506:	cbz	r3, 51a <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x32>
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     508:	adds	r5, #1
     50a:	cmp	r5, #10
     50c:	bne.n	500 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     50e:	movs	r0, #0
}
     510:	add	sp, #20
     512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     516:	add	sp, #8
     518:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     51a:	movs	r3, #44	; 0x2c
     51c:	movs	r1, #1
     51e:	mov	r7, sp
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     520:	ldr.w	r8, [pc, #144]	; 5b4 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xcc>
     524:	mul.w	r3, r3, r5
     528:	add.w	r9, r2, r3
     52c:	strb	r1, [r2, r3]
     52e:	add	r3, sp, #48	; 0x30
	strip = _strip;
     530:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     534:	add.w	r4, r9, #12

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     538:	strb.w	lr, [r9, #8]
     53c:	ldmia	r3, {r0, r1, r2, r3}
     53e:	stmia	r7!, {r0, r1, r2}
     540:	strh	r3, [r7, #0]
	color = _color;
     542:	add	r3, sp, #16
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     544:	mov	r7, r8
     546:	ldmdb	r3, {r0, r1, r2, r3}
     54a:	stmia	r4!, {r0, r1, r2}
     54c:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     54e:	ldr	r3, [sp, #64]	; 0x40
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     550:	vstr	s0, [r9, #28]
	duration = _duration;
     554:	str.w	r3, [r9, #32]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     558:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     55c:	ldr.w	r1, [r8, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     560:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     562:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     564:	cmp	r3, r1
     566:	it	eq
     568:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     56a:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     56c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     56e:	ite	eq
     570:	moveq	r0, #1
     572:	movne	r0, #0
     574:	cmp	r0, #0
     576:	beq.n	560 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x78>
	startTime = rtcMillis();
     578:	lsrs	r1, r3, #5
     57a:	movs	r3, #44	; 0x2c
     57c:	orr.w	r1, r1, r2, lsl #27
     580:	mla	r5, r3, r5, r6
     584:	vmov	s15, r1
     588:	vldr	d5, [pc, #28]	; 5a8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc0>
     58c:	vcvt.f64.u32	d7, s15
     590:	vdiv.f64	d6, d7, d5
     594:	vcvt.u32.f64	s12, d6
     598:	vstr	s12, [r5, #36]	; 0x24
     59c:	add	sp, #20
     59e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5a2:	add	sp, #8
     5a4:	bx	lr
     5a6:	nop
     5a8:	.word	0xd2f1a9fc
     5ac:	.word	0x3ff0624d
     5b0:	.word	0x200051f4
     5b4:	.word	0x400d4000

000005b8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     5b8:	sub	sp, #8
     5ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5be:	sub	sp, #20
  int colInt = strip->getPixelColor(pixel);
     5c0:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     5c2:	mov	r8, r0
     5c4:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     5c8:	mov	r1, r6
     5ca:	ldrb.w	r9, [sp, #68]	; 0x44
     5ce:	str	r4, [sp, #4]
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     5d0:	add	r4, sp, #56	; 0x38
     5d2:	ldrb.w	r5, [sp, #64]	; 0x40
     5d6:	stmia.w	r4, {r2, r3}
     5da:	ldrb.w	sl, [sp, #56]	; 0x38
     5de:	ldrb.w	r4, [sp, #57]	; 0x39
     5e2:	ldrb.w	fp, [sp, #58]	; 0x3a
     5e6:	ldr	r7, [sp, #60]	; 0x3c
  int colInt = strip->getPixelColor(pixel);
     5e8:	bl	de24 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     5ec:	str	r0, [sp, #12]
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     5ee:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     5f2:	cmp.w	r9, #0
     5f6:	beq.n	63c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     5f8:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     5fa:	ldrb.w	r2, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     5fe:	ldrb.w	r5, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     602:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     604:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     606:	cmp.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     60a:	add.w	r3, r5, fp

  strip->setPixelColor(pixel, *(int*)getCol);
     60e:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     610:	it	ge
     612:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     616:	cmp	r4, #255	; 0xff
     618:	it	ge
     61a:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     61c:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     61e:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     622:	it	ge
     624:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     626:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     62a:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     62e:	ldr	r2, [sp, #12]
}
     630:	add	sp, #20
     632:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     636:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     638:	b.w	de18 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     63c:	ldr	r3, [sp, #4]
     63e:	cmp	r3, #99	; 0x63
     640:	bgt.n	6be <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     642:	vmov	s15, r3
     646:	vldr	d6, [pc, #424]	; 7f0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     64a:	vcvt.f64.s32	d7, s15
     64e:	vmul.f64	d7, d7, d6
     652:	vcvt.u32.f64	s15, d7
     656:	vstr	s15, [sp, #4]
     65a:	ldrb.w	sl, [sp, #4]
     65e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     660:	cbz	r5, 6c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     662:	cmp	r5, #99	; 0x63
     664:	bgt.n	6cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     666:	vmov	s15, r5
     66a:	vldr	d6, [pc, #388]	; 7f0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     66e:	vcvt.f64.s32	d7, s15
     672:	vmul.f64	d7, d7, d6
     676:	vcvt.s32.f64	s15, d7
     67a:	vmov	r2, s15
     67e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     682:	ldr	r4, [pc, #372]	; (7f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     684:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     686:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     68a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     68e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     692:	adds	r4, r7, r5
     694:	mov.w	r5, #360	; 0x168
     698:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     69c:	ldr	r4, [pc, #348]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     69e:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     6a2:	smull	r3, r4, r4, r1
     6a6:	asrs	r5, r1, #31
     6a8:	add	r4, r1
     6aa:	rsb	r4, r5, r4, asr #5
     6ae:	cmp	r4, #5
     6b0:	bhi.w	7e6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     6b4:	tbb	[pc, r4]
     6b8:	.word	0x415b7588
     6bc:	.short	0x0c27
     6be:	mov.w	sl, #254	; 0xfe
     6c2:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     6c4:	cmp	r5, #0
     6c6:	bne.n	662 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     6c8:	mov	r4, sl
     6ca:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     6cc:	movs	r2, #1
     6ce:	b.n	682 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     6d0:	ldr	r7, [pc, #296]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     6d2:	rsb	r3, r2, sl
     6d6:	smull	r4, lr, r7, r1
     6da:	mov	r4, r2
     6dc:	add	lr, r1
     6de:	rsb	r5, r5, lr, asr #5
     6e2:	rsb	r5, r5, r5, lsl #4
     6e6:	sub.w	r1, r1, r5, lsl #2
     6ea:	rsb	r1, r1, #60	; 0x3c
     6ee:	mul.w	r3, r1, r3
     6f2:	smull	r1, r7, r7, r3
     6f6:	asrs	r1, r3, #31
     6f8:	add	r3, r7
     6fa:	rsb	r3, r1, r3, asr #5
     6fe:	add	r3, r2
     700:	uxtb.w	fp, r3
     704:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     706:	ldr	r7, [pc, #244]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     708:	rsb	sl, r2, sl
     70c:	mov	r4, r2
     70e:	smull	r3, lr, r7, r1
     712:	add	lr, r1
     714:	rsb	r5, r5, lr, asr #5
     718:	rsb	r5, r5, r5, lsl #4
     71c:	sub.w	r1, r1, r5, lsl #2
     720:	mul.w	r1, r1, sl
     724:	smull	r3, r7, r7, r1
     728:	mov.w	sl, r1, asr #31
     72c:	add	r1, r7
     72e:	rsb	r1, sl, r1, asr #5
     732:	add	r2, r1
     734:	uxtb.w	sl, r2
     738:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     73a:	ldr	r7, [pc, #192]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     73c:	rsb	lr, r2, sl
     740:	mov	sl, r2
     742:	smull	r3, r4, r7, r1
     746:	add	r4, r1
     748:	rsb	r5, r5, r4, asr #5
     74c:	rsb	r5, r5, r5, lsl #4
     750:	sub.w	r1, r1, r5, lsl #2
     754:	rsb	r4, r1, #60	; 0x3c
     758:	mul.w	r1, r4, lr
     75c:	smull	r3, r7, r7, r1
     760:	asrs	r4, r1, #31
     762:	add	r1, r7
     764:	rsb	r4, r4, r1, asr #5
     768:	add	r4, r2
     76a:	uxtb	r4, r4
     76c:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     76e:	ldr	r7, [pc, #140]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     770:	rsb	lr, r2, sl
     774:	mov	r4, sl
     776:	mov	sl, r2
     778:	smull	ip, r3, r7, r1
     77c:	add	r3, r1
     77e:	rsb	r5, r5, r3, asr #5
     782:	rsb	r5, r5, r5, lsl #4
     786:	sub.w	r1, r1, r5, lsl #2
     78a:	mul.w	r1, r1, lr
     78e:	smull	r3, r7, r7, r1
     792:	asrs	r3, r1, #31
     794:	add	r1, r7
     796:	rsb	r3, r3, r1, asr #5
     79a:	add	r3, r2
     79c:	uxtb.w	fp, r3
     7a0:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     7a2:	ldr	r7, [pc, #88]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     7a4:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     7a8:	mov	r4, sl
      output.g = bri;
      output.b = base;
     7aa:	mov	fp, r2
     7ac:	smull	r3, ip, r7, r1
     7b0:	add	ip, r1
     7b2:	rsb	r5, r5, ip, asr #5
     7b6:	rsb	r5, r5, r5, lsl #4
     7ba:	sub.w	r5, r1, r5, lsl #2
     7be:	rsb	r5, r5, #60	; 0x3c
     7c2:	mul.w	r1, r5, lr
     7c6:	b.n	724 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     7c8:	rsb	r3, r2, sl
     7cc:	ldr	r5, [pc, #44]	; (7fc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     7ce:	mov	fp, r2
     7d0:	mul.w	r1, r1, r3
     7d4:	smull	r3, r5, r5, r1
     7d8:	asrs	r4, r1, #31
     7da:	add	r1, r5
     7dc:	rsb	r1, r4, r1, asr #5
     7e0:	adds	r4, r2, r1
     7e2:	uxtb	r4, r4
     7e4:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     7e6:	mov.w	sl, #0
     7ea:	mov	r4, sl
     7ec:	b.n	5f8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     7ee:	nop
     7f0:	.word	0x66666666
     7f4:	.word	0x40046666
     7f8:	.word	0xb60b60b7
     7fc:	.word	0x88888889

00000800 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     800:	ldr	r3, [pc, #804]	; (b28 <updateBeams()+0x328>)
    }
  }
  return false;
}

void updateBeams() {
     802:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     806:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     808:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     80a:	ldr	r1, [r3, #40]	; 0x28
     80c:	vpush	{d8-d10}
     810:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     812:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     814:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     816:	ldr	r6, [pc, #784]	; (b28 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     818:	cmp	r3, r1
     81a:	it	eq
     81c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     81e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     820:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     822:	ite	eq
     824:	moveq	r5, #1
     826:	movne	r5, #0
     828:	cmp	r5, #0
     82a:	beq.n	812 <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     82c:	lsrs	r1, r3, #5
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     82e:	ldr	r4, [pc, #764]	; (b2c <updateBeams()+0x32c>)
     830:	orr.w	r1, r1, r2, lsl #27
     834:	ldr	r3, [r4, #0]
     836:	vmov	s15, r1
     83a:	vldr	d5, [pc, #732]	; b18 <updateBeams()+0x318>
     83e:	vcvt.f64.u32	d7, s15
     842:	vdiv.f64	d6, d7, d5
     846:	vcvt.u32.f64	s12, d6
     84a:	vmov	r2, s12
     84e:	subs	r3, r2, r3
     850:	cmp	r3, #24
     852:	ble.w	c12 <updateBeams()+0x412>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     856:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     858:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     85a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     85c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     85e:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     860:	ldr	r7, [pc, #708]	; (b28 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     862:	cmp	r3, r1
     864:	it	eq
     866:	cmpeq	r2, r5
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    }
    hi1 = hi2;
     868:	mov	r5, r2
    lo1 = lo2;
     86a:	mov	r1, r3
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     86c:	ite	eq
     86e:	moveq	r6, #1
     870:	movne	r6, #0
     872:	cmp	r6, #0
     874:	beq.n	85c <updateBeams()+0x5c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     876:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     878:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     87a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     87c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     87e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     880:	cmp	r3, r1
     882:	it	eq
     884:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     886:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     888:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     88a:	ite	eq
     88c:	moveq	r6, #1
     88e:	movne	r6, #0
     890:	cmp	r6, #0
     892:	beq.n	87c <updateBeams()+0x7c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     894:	lsrs	r1, r3, #5
     896:	ldr	r7, [pc, #664]	; (b30 <updateBeams()+0x330>)
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     898:	ldr	r0, [pc, #664]	; (b34 <updateBeams()+0x334>)
     89a:	orr.w	r1, r1, r2, lsl #27
     89e:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     8a2:	ldr.w	fp, [pc, #644]	; b28 <updateBeams()+0x328>
  synapse_B.clear();
     8a6:	mov	sl, r7
     8a8:	vmov	s15, r1
     8ac:	vldr	d8, [pc, #616]	; b18 <updateBeams()+0x318>
     8b0:	vcvt.f64.u32	d7, s15
     8b4:	vldr	d9, [pc, #616]	; b20 <updateBeams()+0x320>
     8b8:	vdiv.f64	d6, d7, d8
     8bc:	vcvt.u32.f64	s12, d6
     8c0:	vstr	s12, [r4]
void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     8c4:	bl	df2c <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     8c8:	ldr	r0, [pc, #620]	; (b38 <updateBeams()+0x338>)
     8ca:	bl	df2c <Adafruit_NeoPixel::clear()>
     8ce:	b.n	8da <updateBeams()+0xda>
     8d0:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     8d4:	cmp	sl, r9
     8d6:	beq.w	bc0 <updateBeams()+0x3c0>
    if (beams[i].active) {
     8da:	ldrb.w	r3, [sl, #-36]
     8de:	cmp	r3, #0
     8e0:	beq.n	8d0 <updateBeams()+0xd0>
     8e2:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     8e6:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     8ea:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     8ee:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     8f2:	ldr	r7, [pc, #564]	; (b28 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     8f4:	cmp	r3, r1
     8f6:	it	eq
     8f8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     8fa:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     8fc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     8fe:	ite	eq
     900:	moveq	r4, #1
     902:	movne	r4, #0
     904:	cmp	r4, #0
     906:	beq.n	8ea <updateBeams()+0xea>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     908:	lsrs	r1, r3, #5
     90a:	ldr.w	r5, [sl]
     90e:	ldr.w	r6, [sl, #-4]
     912:	orr.w	r1, r1, r2, lsl #27
     916:	adds	r3, r6, r5
     918:	vmov	s15, r1
     91c:	vcvt.f64.u32	d7, s15
     920:	vdiv.f64	d6, d7, d8
     924:	vcvt.u32.f64	s12, d6
     928:	vmov	r2, s12
     92c:	cmp	r2, r3
     92e:	bhi.w	c0a <updateBeams()+0x40a>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     932:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     934:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     936:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     93a:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     93e:	cmp	r3, r1
     940:	it	eq
     942:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     944:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     946:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     948:	ite	eq
     94a:	moveq	r4, #1
     94c:	movne	r4, #0
     94e:	cmp	r4, #0
     950:	beq.n	936 <updateBeams()+0x136>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     952:	lsrs	r1, r3, #5
     954:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     958:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     95c:	orr.w	r1, r1, r2, lsl #27
     960:	vcvt.f32.s32	s11, s15
     964:	vmov	s15, r1
     968:	vcvt.f64.u32	d7, s15
     96c:	vdiv.f64	d6, d7, d8
     970:	vcvt.u32.f64	s12, d6
     974:	vmov	r2, s12
     978:	subs	r5, r2, r5
     97a:	vmov	s15, r5
     97e:	vcvt.f32.u32	s15, s15
     982:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     986:	cmp	r3, #0
     988:	bne.w	c00 <updateBeams()+0x400>
	position = (strip->numPixels() + length) * posFac - length / 2;
     98c:	ldr.w	r0, [sl, #-32]
     990:	bl	ded4 <Adafruit_NeoPixel::numPixels() const>
     994:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     998:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     99c:	vmov.f32	s14, #96	; 0x3f000000  0.5
     9a0:	vcvt.f32.s32	s13, s15
     9a4:	vldr	s15, [sl, #-8]
     9a8:	vmul.f32	s14, s15, s14
     9ac:	vadd.f32	s15, s13, s15
     9b0:	vmov.f32	s13, s14
     9b4:	vfnms.f32	s13, s15, s20
     9b8:	vmov.f32	s15, s13
     9bc:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     9c0:	cmp	r3, #0
     9c2:	beq.n	8d0 <updateBeams()+0xd0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     9c4:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     9c8:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     9cc:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     9d0:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     9d4:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     9d8:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     9dc:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     9e0:	cmp	r7, r3
     9e2:	ble.n	ade <updateBeams()+0x2de>
     9e4:	b.n	8d0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     9e6:	vldr	s11, [sl, #-8]
     9ea:	vmov.f32	s14, #112	; 0x3f800000  1.0
     9ee:	vmov.f32	s13, #0	; 0x40000000  2.0
     9f2:	vdiv.f32	s12, s15, s11
     9f6:	vmov.f32	s15, s14
     9fa:	vfms.f32	s15, s12, s13
     9fe:	vcmpe.f32	s15, #0.0
     a02:	vmrs	APSR_nzcv, fpscr
     a06:	bmi.w	b10 <updateBeams()+0x310>
     a0a:	vcmp.f32	s15, s14
     a0e:	vmrs	APSR_nzcv, fpscr
     a12:	it	gt
     a14:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     a18:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     a1c:	sub.w	r3, sl, #24
     a20:	add	r4, sp, #24
     a22:	ldrb.w	ip, [sl, #-24]
     a26:	ldrb.w	lr, [sl, #-23]
     a2a:	vcmp.f32	s15, s14
     a2e:	ldrb.w	r6, [sl, #-22]
     a32:	ldr.w	r8, [sl, #-20]
     a36:	vmrs	APSR_nzcv, fpscr
     a3a:	ldmia	r3, {r0, r1, r2, r3}
     a3c:	stmia.w	r4, {r0, r1, r2, r3}
     a40:	ldrb.w	r3, [sl, #-16]
     a44:	ldrb.w	r2, [sl, #-15]
     a48:	ldrb.w	r1, [sl, #-12]
     a4c:	beq.n	aa2 <updateBeams()+0x2a2>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     a4e:	cmp	r1, #0
     a50:	beq.n	b40 <updateBeams()+0x340>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     a52:	vmov	s14, ip
     a56:	vmov	s13, lr
     a5a:	vcvt.f32.s32	s14, s14
     a5e:	vmul.f32	s14, s14, s15
     a62:	vcvt.u32.f32	s14, s14
     a66:	vstr	s14, [sp, #12]
     a6a:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     a6e:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     a72:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     a76:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     a78:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     a7a:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     a7e:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     a82:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     a86:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     a8a:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     a8e:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     a92:	vstr	s14, [sp, #12]
     a96:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     a9a:	vstr	s15, [sp, #16]
     a9e:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     aa2:	strb.w	r3, [sp, #32]
     aa6:	add	r3, sp, #40	; 0x28
     aa8:	strb.w	r2, [sp, #33]	; 0x21
     aac:	strb.w	r1, [sp, #36]	; 0x24
     ab0:	strb.w	ip, [sp, #24]
     ab4:	strb.w	lr, [sp, #25]
     ab8:	strb.w	r6, [sp, #26]
     abc:	str.w	r8, [sp, #28]
     ac0:	ldmdb	r3, {r0, r1}
     ac4:	ldmia.w	r4, {r2, r3}
     ac8:	stmia.w	sp, {r0, r1}
     acc:	mov	r1, r7
     ace:	ldr.w	r0, [sl, #-32]
     ad2:	bl	5b8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     ad6:	adds	r7, #1
     ad8:	cmp	r5, r7
     ada:	blt.w	8d0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
     ade:	cmp	r7, #0
     ae0:	blt.n	ad6 <updateBeams()+0x2d6>
     ae2:	ldr.w	r0, [sl, #-32]
     ae6:	bl	ded4 <Adafruit_NeoPixel::numPixels() const>
     aea:	cmp	r0, r7
     aec:	ble.n	ad6 <updateBeams()+0x2d6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     aee:	vmov	s14, r7
     af2:	vldr	s15, [sl, #4]
     af6:	vcvt.f32.s32	s14, s14
     afa:	vsub.f32	s15, s14, s15
     afe:	vcmpe.f32	s15, #0.0
     b02:	vmrs	APSR_nzcv, fpscr
     b06:	bgt.w	9e6 <updateBeams()+0x1e6>
     b0a:	vneg.f32	s15, s15
     b0e:	b.n	9e6 <updateBeams()+0x1e6>
     b10:	vldr	s15, [pc, #40]	; b3c <updateBeams()+0x33c>
     b14:	b.n	a18 <updateBeams()+0x218>
     b16:	nop
     b18:	.word	0xd2f1a9fc
     b1c:	.word	0x3ff0624d
     b20:	.word	0x66666666
     b24:	.word	0x40046666
     b28:	.word	0x400d4000
     b2c:	.word	0x20001790
     b30:	.word	0x20005218
     b34:	.word	0x20008a30
     b38:	.word	0x20008a44
     b3c:	.word	0x00000000
     b40:	cmp	r2, #99	; 0x63
     b42:	bgt.n	bd6 <updateBeams()+0x3d6>
     b44:	vmov	s14, r2
     b48:	vcvt.f64.s32	d6, s14
     b4c:	vmul.f64	d6, d6, d9
     b50:	vcvt.u32.f64	s14, d6
     b54:	vstr	s14, [sp, #12]
     b58:	ldrb.w	ip, [sp, #12]
     b5c:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     b5e:	cmp	r3, #0
     b60:	beq.n	be0 <updateBeams()+0x3e0>
     b62:	cmp	r3, #99	; 0x63
     b64:	bgt.n	c1c <updateBeams()+0x41c>
     b66:	vmov	s14, r3
     b6a:	vcvt.f64.s32	d6, s14
     b6e:	vmul.f64	d6, d6, d9
     b72:	vcvt.s32.f64	s14, d6
     b76:	vmov	r6, s14
     b7a:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     b7e:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     b82:	ldr	r1, [pc, #544]	; (da4 <updateBeams()+0x5a4>)
     b84:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     b88:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     b8c:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     b8e:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     b90:	mov.w	r0, r8, asr #31
     b94:	rsb	r1, r0, r1, asr #8
     b98:	mov.w	r0, #360	; 0x168
     b9c:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     ba0:	ldr	r0, [pc, #516]	; (da8 <updateBeams()+0x5a8>)
     ba2:	smull	r6, r0, r0, r1
     ba6:	asrs	r6, r1, #31
     ba8:	add	r0, r1
     baa:	str	r6, [sp, #16]
     bac:	rsb	r0, r6, r0, asr #5
     bb0:	cmp	r0, #5
     bb2:	bhi.w	d9a <updateBeams()+0x59a>
     bb6:	tbb	[pc, r0]
     bba:	.short	0xbadc
     bbc:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     bc0:	ldr	r0, [pc, #488]	; (dac <updateBeams()+0x5ac>)
     bc2:	bl	db80 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     bc6:	ldr	r0, [pc, #488]	; (db0 <updateBeams()+0x5b0>)

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     bc8:	add	sp, #44	; 0x2c
     bca:	vpop	{d8-d10}
     bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     bd2:	b.w	db80 <Adafruit_NeoPixel::show()>
     bd6:	mov.w	ip, #254	; 0xfe
     bda:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     bdc:	cmp	r3, #0
     bde:	bne.n	b62 <updateBeams()+0x362>
     be0:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     be4:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     be8:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     bea:	vcvt.f32.s32	s14, s14
     bee:	vmul.f32	s14, s14, s15
     bf2:	vcvt.u32.f32	s14, s14
     bf6:	vstr	s14, [sp, #12]
     bfa:	ldrb.w	ip, [sp, #12]
     bfe:	b.n	a6e <updateBeams()+0x26e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     c00:	vmov.f32	s15, #112	; 0x3f800000  1.0
     c04:	vsub.f32	s20, s15, s20
     c08:	b.n	98c <updateBeams()+0x18c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     c0a:	movs	r3, #0
     c0c:	strb.w	r3, [sl, #-36]
     c10:	b.n	8d0 <updateBeams()+0xd0>

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     c12:	add	sp, #44	; 0x2c
     c14:	vpop	{d8-d10}
     c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c1c:	movs	r6, #1
     c1e:	b.n	b7e <updateBeams()+0x37e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     c20:	ldr	r0, [pc, #388]	; (da8 <updateBeams()+0x5a8>)
     c22:	smull	r6, r0, r0, r1
     c26:	ldr	r6, [sp, #12]
     c28:	add	r0, r1
     c2a:	vmov	s13, r6
     c2e:	rsb	lr, r6, ip
     c32:	ldr	r6, [sp, #16]
     c34:	rsb	r0, r6, r0, asr #5
     c38:	rsb	r0, r0, r0, lsl #4
     c3c:	sub.w	r1, r1, r0, lsl #2
     c40:	rsb	r1, r1, #60	; 0x3c
     c44:	mul.w	lr, r1, lr
     c48:	ldr	r1, [pc, #348]	; (da8 <updateBeams()+0x5a8>)
     c4a:	smull	r1, r0, r1, lr
     c4e:	mov.w	r1, lr, asr #31
     c52:	add	lr, r0
     c54:	rsb	lr, r1, lr, asr #5
     c58:	vmov	r1, s13
     c5c:	add	r1, lr
     c5e:	uxtb.w	lr, r1
     c62:	b.n	be4 <updateBeams()+0x3e4>
     c64:	ldr	r0, [pc, #320]	; (da8 <updateBeams()+0x5a8>)
     c66:	smull	r6, r0, r0, r1
     c6a:	ldr	r6, [sp, #12]
     c6c:	add	r0, r1
     c6e:	rsb	ip, r6, ip
     c72:	vmov	s13, r6
     c76:	ldr	r6, [sp, #16]
     c78:	rsb	r0, r6, r0, asr #5
     c7c:	vmov	r6, s13
     c80:	rsb	r0, r0, r0, lsl #4
     c84:	sub.w	r1, r1, r0, lsl #2
     c88:	mul.w	ip, r1, ip
     c8c:	ldr	r1, [pc, #280]	; (da8 <updateBeams()+0x5a8>)
     c8e:	smull	r1, r0, r1, ip
     c92:	mov.w	r1, ip, asr #31
     c96:	add	ip, r0
     c98:	rsb	ip, r1, ip, asr #5
     c9c:	add	r6, ip
     c9e:	uxtb.w	ip, r6
     ca2:	b.n	be4 <updateBeams()+0x3e4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     ca4:	ldr	r0, [pc, #256]	; (da8 <updateBeams()+0x5a8>)
     ca6:	smull	r6, r0, r0, r1
     caa:	ldr	r6, [sp, #12]
     cac:	add	r0, r1
     cae:	rsb	r6, r6, ip
     cb2:	ldr.w	ip, [sp, #12]
     cb6:	str	r6, [sp, #20]
     cb8:	mov	r6, r0
     cba:	ldr	r0, [sp, #16]
     cbc:	rsb	r0, r0, r6, asr #5
     cc0:	ldr	r6, [sp, #20]
     cc2:	rsb	r0, r0, r0, lsl #4
     cc6:	sub.w	r1, r1, r0, lsl #2
     cca:	ldr	r0, [pc, #220]	; (da8 <updateBeams()+0x5a8>)
     ccc:	rsb	r1, r1, #60	; 0x3c
     cd0:	mul.w	r1, r1, r6
     cd4:	smull	r6, r0, r0, r1
     cd8:	mov	r6, r0
     cda:	asrs	r0, r1, #31
     cdc:	add	r1, r6
     cde:	mov	r6, ip
     ce0:	rsb	r0, r0, r1, asr #5
     ce4:	add	r6, r0
     ce6:	uxtb	r1, r6
     ce8:	vmov	s13, r1
     cec:	b.n	be4 <updateBeams()+0x3e4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     cee:	ldr	r0, [pc, #184]	; (da8 <updateBeams()+0x5a8>)
     cf0:	vmov	s13, ip
     cf4:	smull	r6, r0, r0, r1
     cf8:	ldr	r6, [sp, #12]
     cfa:	add	r0, r1
     cfc:	rsb	lr, r6, ip
     d00:	mov	ip, r6
     d02:	ldr	r6, [sp, #16]
     d04:	rsb	r0, r6, r0, asr #5
     d08:	mov	r6, ip
     d0a:	rsb	r0, r0, r0, lsl #4
     d0e:	sub.w	r1, r1, r0, lsl #2
     d12:	mul.w	lr, r1, lr
     d16:	ldr	r1, [pc, #144]	; (da8 <updateBeams()+0x5a8>)
     d18:	smull	r1, r0, r1, lr
     d1c:	mov.w	r1, lr, asr #31
     d20:	add	lr, r0
     d22:	rsb	lr, r1, lr, asr #5
     d26:	add	r6, lr
     d28:	uxtb.w	lr, r6
     d2c:	b.n	be4 <updateBeams()+0x3e4>
     d2e:	ldr	r0, [pc, #120]	; (da8 <updateBeams()+0x5a8>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     d30:	vmov	s13, ip
     d34:	smull	r6, r0, r0, r1
     d38:	ldr	r6, [sp, #12]
     d3a:	add	r0, r1
     d3c:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     d40:	mov	lr, r6
     d42:	ldr	r6, [sp, #16]
     d44:	rsb	r0, r6, r0, asr #5
     d48:	mov	r6, lr
     d4a:	rsb	r0, r0, r0, lsl #4
     d4e:	sub.w	r1, r1, r0, lsl #2
     d52:	rsb	r1, r1, #60	; 0x3c
     d56:	mul.w	ip, r1, ip
     d5a:	ldr	r1, [pc, #76]	; (da8 <updateBeams()+0x5a8>)
     d5c:	smull	r1, r0, r1, ip
     d60:	mov.w	r1, ip, asr #31
     d64:	add	ip, r0
     d66:	rsb	ip, r1, ip, asr #5
     d6a:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     d6c:	uxtb.w	ip, r6
     d70:	b.n	be4 <updateBeams()+0x3e4>
     d72:	ldr	r6, [sp, #12]
     d74:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     d78:	mov	lr, r6
     d7a:	mul.w	r1, r1, r0
     d7e:	ldr	r0, [pc, #40]	; (da8 <updateBeams()+0x5a8>)
     d80:	smull	r6, r0, r0, r1
     d84:	mov	r6, r0
     d86:	asrs	r0, r1, #31
     d88:	add	r1, r6
     d8a:	mov	r6, lr
     d8c:	rsb	r0, r0, r1, asr #5
     d90:	add	r6, r0
     d92:	uxtb	r1, r6
     d94:	vmov	s13, r1
     d98:	b.n	be4 <updateBeams()+0x3e4>
     d9a:	mov.w	ip, #0
     d9e:	vmov	s13, ip
     da2:	b.n	be4 <updateBeams()+0x3e4>
     da4:	.word	0xb60b60b7
     da8:	.word	0x88888889
     dac:	.word	0x20008a30
     db0:	.word	0x20008a44

00000db4 <updateRandomSeed()>:
      }
  }
}

unsigned int randomSeedN = 0;
void updateRandomSeed(){
     db4:	push	{r4, r5, r6, lr}
     db6:	ldr	r6, [pc, #48]	; (de8 <updateRandomSeed()+0x34>)
     db8:	movs	r4, #0
     dba:	mov	r5, r6

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     dbc:	mov	r0, r4
     dbe:	adds	r4, #1
     dc0:	bl	f14c <eeprom_read_byte>

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
     dc4:	strb.w	r0, [r5], #1
     dc8:	cmp	r4, #4
     dca:	bne.n	dbc <updateRandomSeed()+0x8>
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
     dcc:	ldr	r3, [r6, #0]
    }

    template< typename T > const T &put( int idx, const T &t ){        
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
     dce:	mov	r2, r4
     dd0:	ldr	r0, [pc, #20]	; (de8 <updateRandomSeed()+0x34>)
     dd2:	movs	r1, #0
     dd4:	adds	r3, #1
     dd6:	str	r3, [r6, #0]
     dd8:	bl	f368 <eeprom_write_block>
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
     ddc:	ldr	r0, [r6, #0]
}
     dde:	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int randomSeedN = 0;
void updateRandomSeed(){
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
     de2:	b.w	fe70 <randomSeed(unsigned long)>
     de6:	nop
     de8:	.word	0x20008a28

00000dec <regular_setup()>:
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
     dec:	ldr	r3, [pc, #692]	; (10a4 <regular_setup()+0x2b8>)
     dee:	movs	r1, #8
     df0:	movs	r0, #0
}

void regular_setup(){
     df2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     df6:	vpush	{d8-d9}
     dfa:	sub	sp, #12
     dfc:	ldr.w	r4, [r3, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e00:	ldr	r6, [pc, #672]	; (10a4 <regular_setup()+0x2b8>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
     e02:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e06:	adds	r1, r0, #1
     e08:	add.w	r0, r0, r0, lsl #1
     e0c:	ldr	r2, [pc, #660]	; (10a4 <regular_setup()+0x2b8>)
     e0e:	movw	fp, #4636	; 0x121c
     e12:	add.w	r6, r6, r0, lsl #3
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
     e16:	ldr	r3, [pc, #652]	; (10a4 <regular_setup()+0x2b8>)
     e18:	ldr.w	r7, [r2, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e1c:	add.w	r1, r1, r1, lsl #1
     e20:	ldr	r0, [r6, #32]
     e22:	mov.w	lr, #0
     e26:	str.w	r7, [r4, fp]
     e2a:	lsls	r1, r1, #3
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
     e2c:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e30:	add.w	r8, r4, #4640	; 0x1220
     e34:	ldr.w	r2, [r2, #456]	; 0x1c8
     e38:	str	r0, [r4, #8]
     e3a:	ldr	r0, [pc, #616]	; (10a4 <regular_setup()+0x2b8>)
     e3c:	ldr	r5, [r6, #40]	; 0x28
     e3e:	add.w	ip, r0, r1
     e42:	ldr	r0, [r0, r1]
     e44:	ldr	r1, [r6, #36]	; 0x24
     e46:	str	r1, [r4, #12]
     e48:	ldr.w	r1, [ip, #4]
     e4c:	add.w	ip, r3, #4640	; 0x1220
     e50:	str	r5, [r4, #16]
     e52:	ldr	r5, [r6, #44]	; 0x2c
     e54:	movs	r6, #1
     e56:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
     e58:	mov	r0, lr
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e5a:	str	r5, [r4, #20]
     e5c:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
     e5e:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e60:	strb.w	lr, [r4, #24]
     e64:	ldr	r4, [pc, #572]	; (10a4 <regular_setup()+0x2b8>)
     e66:	str.w	r2, [r8]
     e6a:	ldr.w	lr, [r4, #12]
     e6e:	ldr.w	r9, [r4, #8]
     e72:	ldr	r4, [r4, #16]
     e74:	ldr	r5, [pc, #556]	; (10a4 <regular_setup()+0x2b8>)
     e76:	str	r4, [r3, #16]
     e78:	ldr	r4, [pc, #552]	; (10a4 <regular_setup()+0x2b8>)
     e7a:	str.w	r7, [r3, fp]
     e7e:	ldr	r5, [r5, #4]
     e80:	ldr	r7, [r4, #20]
     e82:	ldr	r4, [r4, #0]
     e84:	str.w	lr, [r3, #12]
     e88:	strb	r6, [r3, #24]
     e8a:	str	r5, [r3, #4]
     e8c:	str.w	r9, [r3, #8]
     e90:	str	r7, [r3, #20]
     e92:	str	r4, [r3, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
     e94:	ldr	r3, [pc, #524]	; (10a4 <regular_setup()+0x2b8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     e96:	str.w	r2, [ip]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
     e9a:	ldr.w	r8, [r3, #440]	; 0x1b8
     e9e:	bl	fe84 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
     ea2:	ldr	r3, [pc, #512]	; (10a4 <regular_setup()+0x2b8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     ea4:	add.w	r0, r0, r0, lsl #1
     ea8:	add.w	sl, r8, #4640	; 0x1220
     eac:	add.w	r0, r3, r0, lsl #3
     eb0:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
     eb4:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     eb8:	add.w	r1, r0, #200	; 0xc8
     ebc:	ldr.w	r3, [r3, #456]	; 0x1c8
     ec0:	str.w	ip, [r8, fp]
     ec4:	add.w	r9, r7, #4640	; 0x1220
     ec8:	ldr.w	r4, [r0, #196]	; 0xc4
     ecc:	ldmia	r1, {r1, r2, r5}
     ece:	str.w	r5, [r8, #16]
     ed2:	ldr.w	r5, [r0, #212]	; 0xd4
     ed6:	ldr.w	r0, [r0, #192]	; 0xc0
     eda:	str.w	r1, [r8, #8]
     ede:	ldr	r1, [pc, #452]	; (10a4 <regular_setup()+0x2b8>)
     ee0:	str.w	r2, [r8, #12]
     ee4:	ldr	r1, [r1, #4]
     ee6:	ldr	r2, [pc, #444]	; (10a4 <regular_setup()+0x2b8>)
     ee8:	str.w	r5, [r8, #20]
     eec:	mov	r5, r1
     eee:	ldr.w	lr, [r2, #8]
     ef2:	ldr	r1, [r2, #20]
     ef4:	strb.w	r6, [r8, #24]
     ef8:	stmia.w	r8, {r0, r4}
     efc:	ldr	r4, [r2, #16]
     efe:	ldr	r0, [r2, #12]
     f00:	ldr	r2, [r2, #0]
     f02:	str.w	r3, [sl]
     f06:	str.w	ip, [r7, fp]
     f0a:	strb	r6, [r7, #24]
     f0c:	str	r5, [r7, #4]
     f0e:	str	r2, [r7, #0]
     f10:	str.w	lr, [r7, #8]
     f14:	str	r0, [r7, #12]
     f16:	str	r4, [r7, #16]
     f18:	str	r1, [r7, #20]
     f1a:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
     f1e:	ldr	r3, [pc, #388]	; (10a4 <regular_setup()+0x2b8>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
     f20:	ldr	r2, [pc, #384]	; (10a4 <regular_setup()+0x2b8>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
     f22:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
     f26:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
     f2a:	subs	r3, #1
     f2c:	ldr.w	r6, [r2, #364]	; 0x16c
     f30:	ldrb.w	sl, [r2, #368]	; 0x170
     f34:	cmp	r3, #4
     f36:	bhi.w	25de <regular_setup()+0x17f2>
     f3a:	tbh	[pc, r3, lsl #1]
     f3e:	.short	0x002e
     f40:	.word	0x00920057
     f44:	.word	0x000500e9
     f48:	add.w	r7, r5, #2304	; 0x900
     f4c:	add.w	r6, r5, #28
     f50:	mov	r4, r5
     f52:	mov	r8, r7
     f54:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
     f56:	cmp	r7, #0
     f58:	bne.w	22f8 <regular_setup()+0x150c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
     f5c:	ldr	r3, [r5, #0]
     f5e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
     f60:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
     f64:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
     f66:	str	r3, [r4, #120]	; 0x78
     f68:	adds	r4, #96	; 0x60
     f6a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
     f6c:	cmp	r4, r8
     f6e:	bne.n	f56 <regular_setup()+0x16a>
     f70:	ldr	r3, [pc, #304]	; (10a4 <regular_setup()+0x2b8>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
     f72:	ldr	r2, [pc, #304]	; (10a4 <regular_setup()+0x2b8>)
     f74:	ldrb.w	sl, [r3, #368]	; 0x170
     f78:	ldr.w	r6, [r3, #364]	; 0x16c
     f7c:	ldr.w	r3, [r3, #360]	; 0x168
     f80:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
     f84:	subs	r3, #1
     f86:	cmp	r3, #4
     f88:	bhi.w	26b2 <regular_setup()+0x18c6>
     f8c:	tbh	[pc, r3, lsl #1]
     f90:	.word	0x017901b5
     f94:	.word	0x01e00125
     f98:	.short	0x00f3
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     f9a:	movs	r0, #8
     f9c:	bl	fe7c <random(unsigned long)>
     fa0:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     fa4:	movs	r0, #8
     fa6:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
     faa:	cmp	r6, #0
     fac:	ble.n	f70 <regular_setup()+0x184>
     fae:	add.w	r3, r0, #15
     fb2:	add.w	r4, r4, r4, lsl #1
     fb6:	mov	r8, r6
     fb8:	mov	r6, sl
     fba:	add.w	r4, r3, r4, lsl #3
     fbe:	movs	r7, #0
     fc0:	add.w	r4, r5, r4, lsl #2
      if (rand){
     fc4:	cbnz	r6, fd6 <regular_setup()+0x1ea>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
     fc6:	ldr	r3, [r5, #0]
     fc8:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
     fca:	adds	r7, #1
     fcc:	adds	r4, #4
     fce:	cmp	r7, r8
     fd0:	beq.n	f70 <regular_setup()+0x184>
      if (rand){
     fd2:	cmp	r6, #0
     fd4:	beq.n	fc6 <regular_setup()+0x1da>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     fd6:	ldr	r3, [r5, #20]
     fd8:	ldr	r2, [r5, #16]
     fda:	subs	r0, r3, r2
     fdc:	adds	r0, #2
     fde:	bl	fe7c <random(unsigned long)>
     fe2:	ldr	r3, [r5, #16]
     fe4:	subs	r3, #1
     fe6:	add	r0, r3
     fe8:	str	r0, [r4, #0]
     fea:	b.n	fca <regular_setup()+0x1de>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     fec:	movs	r0, #8
     fee:	bl	fe7c <random(unsigned long)>
     ff2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     ff6:	movs	r0, #8
     ff8:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     ffc:	cmp	r6, #0
     ffe:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1000:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1004:	it	lt
    1006:	addlt	r3, r6, #1
    1008:	cmp	r6, #0
    100a:	mov.w	fp, r3, asr #1
    100e:	it	lt
    1010:	addlt	r6, #1
    1012:	rsb	fp, fp, #0
    1016:	asrs	r6, r6, #1
    1018:	add.w	r7, r0, fp
    101c:	adds	r3, r0, r6
    101e:	cmp	r7, r3
    1020:	str	r3, [sp, #4]
    1022:	bge.n	f70 <regular_setup()+0x184>
    1024:	add	fp, r4
    1026:	add	r4, r6
    1028:	add.w	r6, fp, fp, lsl #1
    102c:	add.w	r6, r7, r6, lsl #3
    1030:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1034:	cmp	fp, r4
    1036:	bge.n	1056 <regular_setup()+0x26a>
    1038:	mov	r9, r6
    103a:	mov	r8, fp
        if (rand){
    103c:	cmp.w	sl, #0
    1040:	bne.w	22de <regular_setup()+0x14f2>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1044:	ldr	r3, [r5, #0]
    1046:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    104a:	add.w	r8, r8, #1
    104e:	add.w	r9, r9, #96	; 0x60
    1052:	cmp	r8, r4
    1054:	bne.n	103c <regular_setup()+0x250>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1056:	adds	r7, #1
    1058:	ldr	r3, [sp, #4]
    105a:	adds	r6, #4
    105c:	cmp	r7, r3
    105e:	bne.n	1034 <regular_setup()+0x248>
    1060:	b.n	f70 <regular_setup()+0x184>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1062:	movs	r0, #8
    1064:	mov	r7, r5
    1066:	bl	fe7c <random(unsigned long)>
    106a:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    106c:	movs	r0, #8
    106e:	add.w	fp, r5, #96	; 0x60
    1072:	bl	fe7c <random(unsigned long)>
    1076:	vmov	s15, r6
    107a:	adds	r4, #8
    107c:	add.w	r3, r0, #8
    1080:	vcvt.f64.s32	d9, s15
    1084:	rsb	r9, r0, #16
    1088:	negs	r3, r3
    108a:	rsb	r8, r4, #0
    108e:	str	r3, [sp, #4]
    1090:	vmov	s15, r8
    1094:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1096:	mov	r6, r7
    1098:	vcvt.f64.s32	d8, s15
    109c:	vmul.f64	d8, d8, d8
    10a0:	b.n	10b4 <regular_setup()+0x2c8>
    10a2:	nop
    10a4:	.word	0x20004e0c
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    10a8:	ldr	r3, [r5, #0]
    10aa:	str	r3, [r6, #28]
    10ac:	adds	r4, #1
    10ae:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    10b0:	cmp	r4, r9
    10b2:	beq.n	1104 <regular_setup()+0x318>
      double xx = x-midPoint_y;
    10b4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    10b8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    10bc:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    10c0:	vfma.f64	d0, d7, d7
    10c4:	vsqrt.f64	d7, d0
    10c8:	vcmp.f64	d7, d7
    10cc:	vmrs	APSR_nzcv, fpscr
    10d0:	bne.w	28ca <regular_setup()+0x1ade>
    10d4:	vcmpe.f64	d7, d9
    10d8:	vmrs	APSR_nzcv, fpscr
    10dc:	bhi.n	10ac <regular_setup()+0x2c0>
        if (rand){
    10de:	cmp.w	sl, #0
    10e2:	beq.n	10a8 <regular_setup()+0x2bc>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    10e4:	ldr	r3, [r5, #20]
    10e6:	adds	r4, #1
    10e8:	ldr	r0, [r5, #16]
    10ea:	adds	r6, #96	; 0x60
    10ec:	subs	r0, r3, r0
    10ee:	adds	r0, #2
    10f0:	bl	fe7c <random(unsigned long)>
    10f4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    10f6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    10f8:	add.w	r3, r3, #4294967295
    10fc:	add	r0, r3
    10fe:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1102:	bne.n	10b4 <regular_setup()+0x2c8>
    1104:	adds	r7, #4
    1106:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    110a:	cmp	r7, fp
    110c:	bne.n	1090 <regular_setup()+0x2a4>
    110e:	b.n	f70 <regular_setup()+0x184>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1110:	cmp	r6, #0
    1112:	ble.n	119e <regular_setup()+0x3b2>
    1114:	mov	r9, r5
    1116:	movs	r7, #0
    1118:	mov	r5, sl
    111a:	b.n	1132 <regular_setup()+0x346>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    111c:	add.w	r3, r8, r3, lsl #3
    1120:	ldr.w	r2, [r9]
    1124:	add.w	r3, r9, r3, lsl #2
    1128:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    112a:	adds	r7, #1
    112c:	cmp	r7, r6
    112e:	beq.w	f70 <regular_setup()+0x184>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1132:	movs	r0, #8
    1134:	bl	fe7c <random(unsigned long)>
    1138:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    113c:	movs	r0, #8
    113e:	bl	fe7c <random(unsigned long)>
    1142:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1146:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    114a:	cmp	r5, #0
    114c:	beq.n	111c <regular_setup()+0x330>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    114e:	ldr.w	r3, [r9, #20]
    1152:	add.w	r4, r4, r4, lsl #1
    1156:	ldr.w	r2, [r9, #16]
    115a:	subs	r0, r3, r2
    115c:	adds	r0, #2
    115e:	bl	fe7c <random(unsigned long)>
    1162:	ldr.w	r3, [r9, #16]
    1166:	subs	r2, r3, #1
    1168:	add.w	r3, r8, r4, lsl #3
    116c:	add	r0, r2
    116e:	add.w	r3, r9, r3, lsl #2
    1172:	str	r0, [r3, #28]
    1174:	b.n	112a <regular_setup()+0x33e>
    1176:	add.w	r7, r5, #2304	; 0x900
    117a:	add.w	r6, r5, #28
    117e:	mov	r4, r5
    1180:	mov	r8, r7
    1182:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1184:	cmp	r7, #0
    1186:	bne.w	2398 <regular_setup()+0x15ac>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    118a:	ldr	r3, [r5, #0]
    118c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    118e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1192:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1194:	str	r3, [r4, #120]	; 0x78
    1196:	adds	r4, #96	; 0x60
    1198:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    119a:	cmp	r4, r8
    119c:	bne.n	1184 <regular_setup()+0x398>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    119e:	ldr	r3, [pc, #800]	; (14c0 <regular_setup()+0x6d4>)
    11a0:	movs	r1, #5
    11a2:	movs	r0, #0
    11a4:	ldr.w	r5, [r3, #440]	; 0x1b8
    11a8:	bl	fe84 <random(long, long)>
    11ac:	ldr	r3, [pc, #784]	; (14c0 <regular_setup()+0x6d4>)
    11ae:	add.w	r0, r0, r0, lsl #1
    11b2:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    11b6:	ldr.w	r2, [r3, #372]	; 0x174
    11ba:	add.w	r3, r3, #372	; 0x174
    11be:	subs	r2, #1
    11c0:	ldr	r6, [r3, #4]
    11c2:	ldrb.w	sl, [r3, #8]
    11c6:	cmp	r2, #4
    11c8:	bhi.w	2574 <regular_setup()+0x1788>
    11cc:	tbh	[pc, r2, lsl #1]
    11d0:	.word	0x01ae01ea
    11d4:	.word	0x01260158
    11d8:	.short	0x00f4
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    11da:	movs	r0, #8
    11dc:	mov	r7, r5
    11de:	bl	fe7c <random(unsigned long)>
    11e2:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    11e4:	movs	r0, #8
    11e6:	add.w	fp, r5, #96	; 0x60
    11ea:	bl	fe7c <random(unsigned long)>
    11ee:	vmov	s15, r6
    11f2:	adds	r4, #8
    11f4:	add.w	r3, r0, #8
    11f8:	vcvt.f64.s32	d9, s15
    11fc:	rsb	r9, r0, #16
    1200:	negs	r3, r3
    1202:	rsb	r8, r4, #0
    1206:	str	r3, [sp, #4]
    1208:	vmov	s15, r8
    120c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    120e:	mov	r6, r7
    1210:	vcvt.f64.s32	d8, s15
    1214:	vmul.f64	d8, d8, d8
    1218:	b.n	1226 <regular_setup()+0x43a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    121a:	ldr	r3, [r5, #0]
    121c:	str	r3, [r6, #28]
    121e:	adds	r4, #1
    1220:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1222:	cmp	r4, r9
    1224:	beq.n	1276 <regular_setup()+0x48a>
      double xx = x-midPoint_y;
    1226:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    122a:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    122e:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1232:	vfma.f64	d0, d7, d7
    1236:	vsqrt.f64	d7, d0
    123a:	vcmp.f64	d7, d7
    123e:	vmrs	APSR_nzcv, fpscr
    1242:	bne.w	291c <regular_setup()+0x1b30>
    1246:	vcmpe.f64	d7, d9
    124a:	vmrs	APSR_nzcv, fpscr
    124e:	bhi.n	121e <regular_setup()+0x432>
        if (rand){
    1250:	cmp.w	sl, #0
    1254:	beq.n	121a <regular_setup()+0x42e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1256:	ldr	r3, [r5, #20]
    1258:	adds	r4, #1
    125a:	ldr	r0, [r5, #16]
    125c:	adds	r6, #96	; 0x60
    125e:	subs	r0, r3, r0
    1260:	adds	r0, #2
    1262:	bl	fe7c <random(unsigned long)>
    1266:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1268:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    126a:	add.w	r3, r3, #4294967295
    126e:	add	r0, r3
    1270:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1274:	bne.n	1226 <regular_setup()+0x43a>
    1276:	adds	r7, #4
    1278:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    127c:	cmp	r7, fp
    127e:	bne.n	1208 <regular_setup()+0x41c>
    1280:	b.n	119e <regular_setup()+0x3b2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1282:	movs	r0, #8
    1284:	bl	fe7c <random(unsigned long)>
    1288:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    128c:	movs	r0, #8
    128e:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1292:	cmp	r6, #0
    1294:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1296:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    129a:	it	lt
    129c:	addlt	r3, r6, #1
    129e:	cmp	r6, #0
    12a0:	mov.w	fp, r3, asr #1
    12a4:	it	lt
    12a6:	addlt	r6, #1
    12a8:	rsb	fp, fp, #0
    12ac:	asrs	r6, r6, #1
    12ae:	add.w	r7, r0, fp
    12b2:	adds	r3, r0, r6
    12b4:	cmp	r7, r3
    12b6:	str	r3, [sp, #4]
    12b8:	bge.w	119e <regular_setup()+0x3b2>
    12bc:	add	fp, r4
    12be:	add	r4, r6
    12c0:	add.w	r6, fp, fp, lsl #1
    12c4:	add.w	r6, r7, r6, lsl #3
    12c8:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    12cc:	cmp	fp, r4
    12ce:	bge.n	12ee <regular_setup()+0x502>
    12d0:	mov	r9, r6
    12d2:	mov	r8, fp
        if (rand){
    12d4:	cmp.w	sl, #0
    12d8:	bne.w	22aa <regular_setup()+0x14be>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    12dc:	ldr	r3, [r5, #0]
    12de:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    12e2:	add.w	r8, r8, #1
    12e6:	add.w	r9, r9, #96	; 0x60
    12ea:	cmp	r8, r4
    12ec:	bne.n	12d4 <regular_setup()+0x4e8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    12ee:	adds	r7, #1
    12f0:	ldr	r3, [sp, #4]
    12f2:	adds	r6, #4
    12f4:	cmp	r7, r3
    12f6:	bne.n	12cc <regular_setup()+0x4e0>
    12f8:	b.n	119e <regular_setup()+0x3b2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12fa:	movs	r0, #8
    12fc:	bl	fe7c <random(unsigned long)>
    1300:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1304:	movs	r0, #8
    1306:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    130a:	cmp	r6, #0
    130c:	ble.w	119e <regular_setup()+0x3b2>
    1310:	add.w	r3, r0, #15
    1314:	add.w	r4, r4, r4, lsl #1
    1318:	mov	r8, r6
    131a:	mov	r6, sl
    131c:	add.w	r4, r3, r4, lsl #3
    1320:	movs	r7, #0
    1322:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1326:	cbnz	r6, 133a <regular_setup()+0x54e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1328:	ldr	r3, [r5, #0]
    132a:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    132c:	adds	r7, #1
    132e:	adds	r4, #4
    1330:	cmp	r7, r8
    1332:	beq.w	119e <regular_setup()+0x3b2>
      if (rand){
    1336:	cmp	r6, #0
    1338:	beq.n	1328 <regular_setup()+0x53c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    133a:	ldr	r3, [r5, #20]
    133c:	ldr	r2, [r5, #16]
    133e:	subs	r0, r3, r2
    1340:	adds	r0, #2
    1342:	bl	fe7c <random(unsigned long)>
    1346:	ldr	r3, [r5, #16]
    1348:	subs	r3, #1
    134a:	add	r0, r3
    134c:	str	r0, [r4, #0]
    134e:	b.n	132c <regular_setup()+0x540>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1350:	cmp	r6, #0
    1352:	ble.w	119e <regular_setup()+0x3b2>
    1356:	mov	r9, r5
    1358:	movs	r7, #0
    135a:	mov	r5, sl
    135c:	b.n	1374 <regular_setup()+0x588>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    135e:	add.w	r3, r4, r3, lsl #3
    1362:	ldr.w	r2, [r9]
    1366:	add.w	r3, r9, r3, lsl #2
    136a:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    136c:	adds	r7, #1
    136e:	cmp	r7, r6
    1370:	beq.w	119e <regular_setup()+0x3b2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1374:	movs	r0, #8
    1376:	bl	fe7c <random(unsigned long)>
    137a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    137e:	movs	r0, #8
    1380:	bl	fe7c <random(unsigned long)>
    1384:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1388:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    138c:	cmp	r5, #0
    138e:	beq.n	135e <regular_setup()+0x572>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1390:	ldr.w	r3, [r9, #20]
    1394:	add.w	r8, r8, r8, lsl #1
    1398:	ldr.w	r2, [r9, #16]
    139c:	add.w	r4, r4, r8, lsl #3
    13a0:	subs	r0, r3, r2
    13a2:	add.w	r4, r9, r4, lsl #2
    13a6:	adds	r0, #2
    13a8:	bl	fe7c <random(unsigned long)>
    13ac:	ldr.w	r3, [r9, #16]
    13b0:	subs	r3, #1
    13b2:	add	r0, r3
    13b4:	str	r0, [r4, #28]
    13b6:	b.n	136c <regular_setup()+0x580>
    13b8:	add.w	r7, r5, #2304	; 0x900
    13bc:	add.w	r6, r5, #28
    13c0:	mov	r4, r5
    13c2:	mov	r8, r7
    13c4:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    13c6:	cmp	r7, #0
    13c8:	bne.w	2348 <regular_setup()+0x155c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    13cc:	ldr	r3, [r5, #0]
    13ce:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    13d0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    13d4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    13d6:	str	r3, [r4, #120]	; 0x78
    13d8:	adds	r4, #96	; 0x60
    13da:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    13dc:	cmp	r4, r8
    13de:	bne.n	13c6 <regular_setup()+0x5da>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    13e0:	ldr	r3, [pc, #220]	; (14c0 <regular_setup()+0x6d4>)
    13e2:	movs	r1, #5
    13e4:	movs	r0, #0
    13e6:	ldr.w	r5, [r3, #444]	; 0x1bc
    13ea:	bl	fe84 <random(long, long)>
    13ee:	ldr	r3, [pc, #208]	; (14c0 <regular_setup()+0x6d4>)
    13f0:	add.w	r0, r0, r0, lsl #1
    13f4:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    13f8:	ldr.w	r2, [r3, #372]	; 0x174
    13fc:	add.w	r3, r3, #372	; 0x174
    1400:	subs	r2, #1
    1402:	ldr	r6, [r3, #4]
    1404:	ldrb.w	fp, [r3, #8]
    1408:	cmp	r2, #4
    140a:	bhi.w	2860 <regular_setup()+0x1a74>
    140e:	tbh	[pc, r2, lsl #1]
    1412:	.short	0x0278
    1414:	.word	0x01e8023c
    1418:	.word	0x00f501b2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    141c:	cmp	r6, #0
    141e:	ble.n	13e0 <regular_setup()+0x5f4>
    1420:	mov	r9, r5
    1422:	movs	r7, #0
    1424:	mov	r5, sl
    1426:	b.n	143c <regular_setup()+0x650>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1428:	add.w	r3, r4, r3, lsl #3
    142c:	ldr.w	r2, [r9]
    1430:	add.w	r3, r9, r3, lsl #2
    1434:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1436:	adds	r7, #1
    1438:	cmp	r7, r6
    143a:	beq.n	13e0 <regular_setup()+0x5f4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    143c:	movs	r0, #8
    143e:	bl	fe7c <random(unsigned long)>
    1442:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1446:	movs	r0, #8
    1448:	bl	fe7c <random(unsigned long)>
    144c:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1450:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1454:	cmp	r5, #0
    1456:	beq.n	1428 <regular_setup()+0x63c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1458:	ldr.w	r3, [r9, #20]
    145c:	add.w	r8, r8, r8, lsl #1
    1460:	ldr.w	r2, [r9, #16]
    1464:	add.w	r4, r4, r8, lsl #3
    1468:	subs	r0, r3, r2
    146a:	add.w	r4, r9, r4, lsl #2
    146e:	adds	r0, #2
    1470:	bl	fe7c <random(unsigned long)>
    1474:	ldr.w	r3, [r9, #16]
    1478:	subs	r3, #1
    147a:	add	r0, r3
    147c:	str	r0, [r4, #28]
    147e:	b.n	1436 <regular_setup()+0x64a>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1480:	movs	r0, #8
    1482:	mov	r7, r5
    1484:	bl	fe7c <random(unsigned long)>
    1488:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    148a:	movs	r0, #8
    148c:	add.w	fp, r5, #96	; 0x60
    1490:	bl	fe7c <random(unsigned long)>
    1494:	vmov	s15, r6
    1498:	adds	r4, #8
    149a:	add.w	r3, r0, #8
    149e:	vcvt.f64.s32	d9, s15
    14a2:	rsb	r9, r0, #16
    14a6:	negs	r3, r3
    14a8:	rsb	r8, r4, #0
    14ac:	str	r3, [sp, #4]
    14ae:	vmov	s15, r8
    14b2:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    14b4:	mov	r6, r7
    14b6:	vcvt.f64.s32	d8, s15
    14ba:	vmul.f64	d8, d8, d8
    14be:	b.n	14d0 <regular_setup()+0x6e4>
    14c0:	.word	0x20004e0c
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    14c4:	ldr	r3, [r5, #0]
    14c6:	str	r3, [r6, #28]
    14c8:	adds	r4, #1
    14ca:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    14cc:	cmp	r4, r9
    14ce:	beq.n	1520 <regular_setup()+0x734>
      double xx = x-midPoint_y;
    14d0:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    14d4:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    14d8:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    14dc:	vfma.f64	d0, d7, d7
    14e0:	vsqrt.f64	d7, d0
    14e4:	vcmp.f64	d7, d7
    14e8:	vmrs	APSR_nzcv, fpscr
    14ec:	bne.w	2910 <regular_setup()+0x1b24>
    14f0:	vcmpe.f64	d7, d9
    14f4:	vmrs	APSR_nzcv, fpscr
    14f8:	bhi.n	14c8 <regular_setup()+0x6dc>
        if (rand){
    14fa:	cmp.w	sl, #0
    14fe:	beq.n	14c4 <regular_setup()+0x6d8>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1500:	ldr	r3, [r5, #20]
    1502:	adds	r4, #1
    1504:	ldr	r0, [r5, #16]
    1506:	adds	r6, #96	; 0x60
    1508:	subs	r0, r3, r0
    150a:	adds	r0, #2
    150c:	bl	fe7c <random(unsigned long)>
    1510:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1512:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1514:	add.w	r3, r3, #4294967295
    1518:	add	r0, r3
    151a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    151e:	bne.n	14d0 <regular_setup()+0x6e4>
    1520:	adds	r7, #4
    1522:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1526:	cmp	r7, fp
    1528:	bne.n	14ae <regular_setup()+0x6c2>
    152a:	b.n	13e0 <regular_setup()+0x5f4>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    152c:	movs	r0, #8
    152e:	bl	fe7c <random(unsigned long)>
    1532:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1536:	movs	r0, #8
    1538:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    153c:	cmp	r6, #0
    153e:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1540:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1544:	it	lt
    1546:	addlt	r3, r6, #1
    1548:	cmp	r6, #0
    154a:	mov.w	fp, r3, asr #1
    154e:	it	lt
    1550:	addlt	r6, #1
    1552:	rsb	fp, fp, #0
    1556:	asrs	r6, r6, #1
    1558:	add.w	r7, r0, fp
    155c:	adds	r3, r0, r6
    155e:	cmp	r3, r7
    1560:	str	r3, [sp, #4]
    1562:	ble.w	13e0 <regular_setup()+0x5f4>
    1566:	add	fp, r4
    1568:	add	r4, r6
    156a:	add.w	r6, fp, fp, lsl #1
    156e:	add.w	r6, r7, r6, lsl #3
    1572:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1576:	cmp	fp, r4
    1578:	bge.n	1598 <regular_setup()+0x7ac>
    157a:	mov	r9, r6
    157c:	mov	r8, fp
        if (rand){
    157e:	cmp.w	sl, #0
    1582:	bne.w	22c4 <regular_setup()+0x14d8>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1586:	ldr	r3, [r5, #0]
    1588:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    158c:	add.w	r8, r8, #1
    1590:	add.w	r9, r9, #96	; 0x60
    1594:	cmp	r8, r4
    1596:	bne.n	157e <regular_setup()+0x792>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1598:	adds	r7, #1
    159a:	ldr	r3, [sp, #4]
    159c:	adds	r6, #4
    159e:	cmp	r3, r7
    15a0:	bne.n	1576 <regular_setup()+0x78a>
    15a2:	b.n	13e0 <regular_setup()+0x5f4>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15a4:	movs	r0, #8
    15a6:	bl	fe7c <random(unsigned long)>
    15aa:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15ae:	movs	r0, #8
    15b0:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    15b4:	cmp	r6, #0
    15b6:	ble.w	13e0 <regular_setup()+0x5f4>
    15ba:	add.w	r3, r0, #15
    15be:	add.w	r4, r4, r4, lsl #1
    15c2:	movs	r7, #0
    15c4:	add.w	r4, r3, r4, lsl #3
    15c8:	add.w	r4, r5, r4, lsl #2
      if (rand){
    15cc:	cmp.w	sl, #0
    15d0:	bne.n	15e6 <regular_setup()+0x7fa>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    15d2:	ldr	r3, [r5, #0]
    15d4:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    15d6:	adds	r7, #1
    15d8:	adds	r4, #4
    15da:	cmp	r7, r6
    15dc:	beq.w	13e0 <regular_setup()+0x5f4>
      if (rand){
    15e0:	cmp.w	sl, #0
    15e4:	beq.n	15d2 <regular_setup()+0x7e6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    15e6:	ldr	r3, [r5, #20]
    15e8:	ldr	r2, [r5, #16]
    15ea:	subs	r0, r3, r2
    15ec:	adds	r0, #2
    15ee:	bl	fe7c <random(unsigned long)>
    15f2:	ldr	r3, [r5, #16]
    15f4:	subs	r3, #1
    15f6:	add	r0, r3
    15f8:	str	r0, [r4, #0]
    15fa:	b.n	15d6 <regular_setup()+0x7ea>
    15fc:	add.w	r7, r5, #2304	; 0x900
    1600:	add.w	r6, r5, #28
    1604:	mov	r4, r5
    1606:	mov	r8, r7
    1608:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    160a:	cmp	r7, #0
    160c:	bne.w	24d4 <regular_setup()+0x16e8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1610:	ldr	r3, [r5, #0]
    1612:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1614:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1618:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    161a:	str	r3, [r4, #120]	; 0x78
    161c:	adds	r4, #96	; 0x60
    161e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1620:	cmp	r4, r8
    1622:	bne.n	160a <regular_setup()+0x81e>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    1624:	ldr	r3, [pc, #816]	; (1958 <regular_setup()+0xb6c>)
    1626:	movs	r1, #8
    1628:	movs	r0, #0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    162a:	ldr	r6, [pc, #812]	; (1958 <regular_setup()+0xb6c>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    162c:	ldr.w	r4, [r3, #436]	; 0x1b4
    1630:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1634:	adds	r1, r0, #1
    1636:	add.w	r0, r0, r0, lsl #1
    163a:	ldr	r2, [pc, #796]	; (1958 <regular_setup()+0xb6c>)
    163c:	movw	fp, #4636	; 0x121c
    1640:	add.w	r6, r6, r0, lsl #3
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    1644:	ldr	r3, [pc, #784]	; (1958 <regular_setup()+0xb6c>)
    1646:	ldr.w	r7, [r2, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    164a:	add.w	r1, r1, r1, lsl #1
    164e:	ldr	r0, [r6, #32]
    1650:	mov.w	lr, #0
    1654:	str.w	r7, [r4, fp]
    1658:	lsls	r1, r1, #3
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    165a:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    165e:	add.w	r8, r4, #4640	; 0x1220
    1662:	ldr.w	r2, [r2, #456]	; 0x1c8
    1666:	str	r0, [r4, #8]
    1668:	ldr	r0, [pc, #748]	; (1958 <regular_setup()+0xb6c>)
    166a:	ldr	r5, [r6, #40]	; 0x28
    166c:	add.w	ip, r0, r1
    1670:	ldr	r0, [r0, r1]
    1672:	ldr	r1, [r6, #36]	; 0x24
    1674:	str	r1, [r4, #12]
    1676:	ldr.w	r1, [ip, #4]
    167a:	add.w	ip, r3, #4640	; 0x1220
    167e:	str	r5, [r4, #16]
    1680:	ldr	r5, [r6, #44]	; 0x2c
    1682:	movs	r6, #1
    1684:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    1686:	mov	r0, lr
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1688:	str	r5, [r4, #20]
    168a:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    168c:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    168e:	strb.w	lr, [r4, #24]
    1692:	ldr	r4, [pc, #708]	; (1958 <regular_setup()+0xb6c>)
    1694:	str.w	r2, [r8]
    1698:	ldr.w	lr, [r4, #12]
    169c:	ldr.w	r9, [r4, #8]
    16a0:	ldr	r4, [r4, #16]
    16a2:	ldr	r5, [pc, #692]	; (1958 <regular_setup()+0xb6c>)
    16a4:	str	r4, [r3, #16]
    16a6:	ldr	r4, [pc, #688]	; (1958 <regular_setup()+0xb6c>)
    16a8:	str.w	r7, [r3, fp]
    16ac:	ldr	r5, [r5, #4]
    16ae:	ldr	r7, [r4, #20]
    16b0:	ldr	r4, [r4, #0]
    16b2:	str.w	lr, [r3, #12]
    16b6:	str	r5, [r3, #4]
    16b8:	str.w	r9, [r3, #8]
    16bc:	str	r7, [r3, #20]
    16be:	str	r4, [r3, #0]
    16c0:	strb	r6, [r3, #24]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    16c2:	ldr	r3, [pc, #660]	; (1958 <regular_setup()+0xb6c>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    16c4:	str.w	r2, [ip]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    16c8:	ldr.w	r8, [r3, #440]	; 0x1b8
    16cc:	bl	fe84 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    16d0:	ldr	r3, [pc, #644]	; (1958 <regular_setup()+0xb6c>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    16d2:	add.w	r0, r0, r0, lsl #1
    16d6:	add.w	sl, r8, #4640	; 0x1220
    16da:	add.w	r0, r3, r0, lsl #3
    16de:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    16e2:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    16e6:	add.w	r1, r0, #200	; 0xc8
    16ea:	ldr.w	r3, [r3, #456]	; 0x1c8
    16ee:	str.w	ip, [r8, fp]
    16f2:	add.w	r9, r7, #4640	; 0x1220
    16f6:	ldr.w	r4, [r0, #196]	; 0xc4
    16fa:	ldmia	r1, {r1, r2, r5}
    16fc:	str.w	r5, [r8, #16]
    1700:	ldr.w	r5, [r0, #212]	; 0xd4
    1704:	ldr.w	r0, [r0, #192]	; 0xc0
    1708:	str.w	r1, [r8, #8]
    170c:	ldr	r1, [pc, #584]	; (1958 <regular_setup()+0xb6c>)
    170e:	str.w	r2, [r8, #12]
    1712:	ldr	r1, [r1, #4]
    1714:	ldr	r2, [pc, #576]	; (1958 <regular_setup()+0xb6c>)
    1716:	str.w	r5, [r8, #20]
    171a:	mov	r5, r1
    171c:	ldr.w	lr, [r2, #8]
    1720:	ldr	r1, [r2, #20]
    1722:	strb.w	r6, [r8, #24]
    1726:	stmia.w	r8, {r0, r4}
    172a:	ldr	r4, [r2, #16]
    172c:	ldr	r0, [r2, #12]
    172e:	ldr	r2, [r2, #0]
    1730:	str.w	r3, [sl]
    1734:	str.w	ip, [r7, fp]
    1738:	str	r5, [r7, #4]
    173a:	str	r4, [r7, #16]
    173c:	str	r2, [r7, #0]
    173e:	strb	r6, [r7, #24]
    1740:	str.w	lr, [r7, #8]
    1744:	str	r0, [r7, #12]
    1746:	str	r1, [r7, #20]
    1748:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    174c:	ldr	r3, [pc, #520]	; (1958 <regular_setup()+0xb6c>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    174e:	ldr	r2, [pc, #520]	; (1958 <regular_setup()+0xb6c>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1750:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1754:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1758:	subs	r3, #1
    175a:	ldr.w	r4, [r2, #364]	; 0x16c
    175e:	ldrb.w	sl, [r2, #368]	; 0x170
    1762:	cmp	r3, #4
    1764:	bhi.w	27f6 <regular_setup()+0x1a0a>
    1768:	tbh	[pc, r3, lsl #1]
    176c:	.word	0x01a901e5
    1770:	.word	0x01220155
    1774:	.short	0x00f8
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1776:	cmp	r6, #0
    1778:	ble.w	1624 <regular_setup()+0x838>
    177c:	mov	r9, r5
    177e:	mov.w	r8, #0
    1782:	mov	r5, fp
    1784:	b.n	179e <regular_setup()+0x9b2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1786:	add.w	r3, r4, r3, lsl #3
    178a:	ldr.w	r2, [r9]
    178e:	add.w	r3, r9, r3, lsl #2
    1792:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1794:	add.w	r8, r8, #1
    1798:	cmp	r8, r6
    179a:	beq.w	1624 <regular_setup()+0x838>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    179e:	movs	r0, #8
    17a0:	bl	fe7c <random(unsigned long)>
    17a4:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17a8:	movs	r0, #8
    17aa:	bl	fe7c <random(unsigned long)>
    17ae:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    17b2:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    17b6:	cmp	r5, #0
    17b8:	beq.n	1786 <regular_setup()+0x99a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    17ba:	ldr.w	r3, [r9, #20]
    17be:	add.w	r7, r7, r7, lsl #1
    17c2:	ldr.w	r2, [r9, #16]
    17c6:	add.w	r4, r4, r7, lsl #3
    17ca:	subs	r0, r3, r2
    17cc:	add.w	r4, r9, r4, lsl #2
    17d0:	adds	r0, #2
    17d2:	bl	fe7c <random(unsigned long)>
    17d6:	ldr.w	r3, [r9, #16]
    17da:	subs	r3, #1
    17dc:	add	r0, r3
    17de:	str	r0, [r4, #28]
    17e0:	b.n	1794 <regular_setup()+0x9a8>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17e2:	movs	r0, #8
    17e4:	mov	r7, r5
    17e6:	bl	fe7c <random(unsigned long)>
    17ea:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17ec:	movs	r0, #8
    17ee:	add.w	r9, r5, #96	; 0x60
    17f2:	bl	fe7c <random(unsigned long)>
    17f6:	vmov	s15, r6
    17fa:	adds	r4, #8
    17fc:	add.w	r3, r0, #8
    1800:	vcvt.f64.s32	d9, s15
    1804:	rsb	sl, r0, #16
    1808:	negs	r3, r3
    180a:	rsb	r8, r4, #0
    180e:	str	r3, [sp, #4]
    1810:	vmov	s15, r8
    1814:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1816:	mov	r6, r7
    1818:	vcvt.f64.s32	d8, s15
    181c:	vmul.f64	d8, d8, d8
    1820:	b.n	182e <regular_setup()+0xa42>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1822:	ldr	r3, [r5, #0]
    1824:	str	r3, [r6, #28]
    1826:	adds	r4, #1
    1828:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    182a:	cmp	r4, sl
    182c:	beq.n	187e <regular_setup()+0xa92>
      double xx = x-midPoint_y;
    182e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1832:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1836:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    183a:	vfma.f64	d0, d7, d7
    183e:	vsqrt.f64	d7, d0
    1842:	vcmp.f64	d7, d7
    1846:	vmrs	APSR_nzcv, fpscr
    184a:	bne.w	2904 <regular_setup()+0x1b18>
    184e:	vcmpe.f64	d7, d9
    1852:	vmrs	APSR_nzcv, fpscr
    1856:	bhi.n	1826 <regular_setup()+0xa3a>
        if (rand){
    1858:	cmp.w	fp, #0
    185c:	beq.n	1822 <regular_setup()+0xa36>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    185e:	ldr	r3, [r5, #20]
    1860:	adds	r4, #1
    1862:	ldr	r0, [r5, #16]
    1864:	adds	r6, #96	; 0x60
    1866:	subs	r0, r3, r0
    1868:	adds	r0, #2
    186a:	bl	fe7c <random(unsigned long)>
    186e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1870:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1872:	add.w	r3, r3, #4294967295
    1876:	add	r0, r3
    1878:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    187c:	bne.n	182e <regular_setup()+0xa42>
    187e:	adds	r7, #4
    1880:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1884:	cmp	r7, r9
    1886:	bne.n	1810 <regular_setup()+0xa24>
    1888:	b.n	1624 <regular_setup()+0x838>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    188a:	movs	r0, #8
    188c:	bl	fe7c <random(unsigned long)>
    1890:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1894:	movs	r0, #8
    1896:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    189a:	cmp	r6, #0
    189c:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    189e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    18a2:	it	lt
    18a4:	addlt	r3, r6, #1
    18a6:	cmp	r6, #0
    18a8:	mov.w	r8, r3, asr #1
    18ac:	it	lt
    18ae:	addlt	r6, #1
    18b0:	rsb	r8, r8, #0
    18b4:	asrs	r6, r6, #1
    18b6:	add.w	r7, r0, r8
    18ba:	adds	r3, r0, r6
    18bc:	cmp	r3, r7
    18be:	str	r3, [sp, #4]
    18c0:	ble.w	1624 <regular_setup()+0x838>
    18c4:	add	r8, r4
    18c6:	add	r4, r6
    18c8:	add.w	r6, r8, r8, lsl #1
    18cc:	add.w	r6, r7, r6, lsl #3
    18d0:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    18d4:	cmp	r4, r8
    18d6:	ble.n	18f6 <regular_setup()+0xb0a>
    18d8:	mov	sl, r6
    18da:	mov	r9, r8
        if (rand){
    18dc:	cmp.w	fp, #0
    18e0:	bne.w	2290 <regular_setup()+0x14a4>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    18e4:	ldr	r3, [r5, #0]
    18e6:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    18ea:	add.w	r9, r9, #1
    18ee:	add.w	sl, sl, #96	; 0x60
    18f2:	cmp	r9, r4
    18f4:	bne.n	18dc <regular_setup()+0xaf0>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    18f6:	adds	r7, #1
    18f8:	ldr	r3, [sp, #4]
    18fa:	adds	r6, #4
    18fc:	cmp	r3, r7
    18fe:	bne.n	18d4 <regular_setup()+0xae8>
    1900:	b.n	1624 <regular_setup()+0x838>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1902:	movs	r0, #8
    1904:	bl	fe7c <random(unsigned long)>
    1908:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    190c:	movs	r0, #8
    190e:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1912:	cmp	r6, #0
    1914:	ble.w	1624 <regular_setup()+0x838>
    1918:	add.w	r3, r0, #15
    191c:	add.w	r4, r4, r4, lsl #1
    1920:	mov	r8, r6
    1922:	mov	r6, fp
    1924:	add.w	r4, r3, r4, lsl #3
    1928:	movs	r7, #0
    192a:	add.w	r4, r5, r4, lsl #2
      if (rand){
    192e:	cbnz	r6, 1942 <regular_setup()+0xb56>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1930:	ldr	r3, [r5, #0]
    1932:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1934:	adds	r7, #1
    1936:	adds	r4, #4
    1938:	cmp	r7, r8
    193a:	beq.w	1624 <regular_setup()+0x838>
      if (rand){
    193e:	cmp	r6, #0
    1940:	beq.n	1930 <regular_setup()+0xb44>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1942:	ldr	r3, [r5, #20]
    1944:	ldr	r2, [r5, #16]
    1946:	subs	r0, r3, r2
    1948:	adds	r0, #2
    194a:	bl	fe7c <random(unsigned long)>
    194e:	ldr	r3, [r5, #16]
    1950:	subs	r3, #1
    1952:	add	r0, r3
    1954:	str	r0, [r4, #0]
    1956:	b.n	1934 <regular_setup()+0xb48>
    1958:	.word	0x20005000
    195c:	add.w	r7, r5, #2304	; 0x900
    1960:	add.w	r6, r5, #28
    1964:	mov	r4, r5
    1966:	mov	r8, r7
    1968:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    196a:	cmp	r7, #0
    196c:	bne.w	2524 <regular_setup()+0x1738>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1970:	ldr	r3, [r5, #0]
    1972:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1974:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1978:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    197a:	str	r3, [r4, #120]	; 0x78
    197c:	adds	r4, #96	; 0x60
    197e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1980:	cmp	r4, r8
    1982:	bne.n	196a <regular_setup()+0xb7e>
    1984:	ldr	r3, [pc, #788]	; (1c9c <regular_setup()+0xeb0>)
    1986:	ldr	r2, [pc, #788]	; (1c9c <regular_setup()+0xeb0>)
    1988:	ldr.w	r3, [r3, #360]	; 0x168
    198c:	ldrb.w	sl, [r2, #368]	; 0x170
    1990:	ldr.w	r6, [r2, #364]	; 0x16c
    1994:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1996:	ldr	r2, [pc, #772]	; (1c9c <regular_setup()+0xeb0>)
    1998:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    199c:	cmp	r3, #4
    199e:	bhi.w	2648 <regular_setup()+0x185c>
    19a2:	tbh	[pc, r3, lsl #1]
    19a6:	.short	0x01b9
    19a8:	.word	0x0126017d
    19ac:	.word	0x00f401e4
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    19b0:	cmp	r4, #0
    19b2:	ble.w	1bb6 <regular_setup()+0xdca>
    19b6:	mov	r9, r5
    19b8:	movs	r7, #0
    19ba:	mov	r5, sl
    19bc:	b.n	19d2 <regular_setup()+0xbe6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    19be:	add.w	r3, r6, r3, lsl #3
    19c2:	ldr.w	r2, [r9]
    19c6:	add.w	r3, r9, r3, lsl #2
    19ca:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    19cc:	adds	r7, #1
    19ce:	cmp	r7, r4
    19d0:	beq.n	1984 <regular_setup()+0xb98>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    19d2:	movs	r0, #8
    19d4:	bl	fe7c <random(unsigned long)>
    19d8:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    19dc:	movs	r0, #8
    19de:	bl	fe7c <random(unsigned long)>
    19e2:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    19e6:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    19ea:	cmp	r5, #0
    19ec:	beq.n	19be <regular_setup()+0xbd2>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    19ee:	ldr.w	r3, [r9, #20]
    19f2:	add.w	r8, r8, r8, lsl #1
    19f6:	ldr.w	r2, [r9, #16]
    19fa:	add.w	r6, r6, r8, lsl #3
    19fe:	subs	r0, r3, r2
    1a00:	add.w	r6, r9, r6, lsl #2
    1a04:	adds	r0, #2
    1a06:	bl	fe7c <random(unsigned long)>
    1a0a:	ldr.w	r3, [r9, #16]
    1a0e:	subs	r3, #1
    1a10:	add	r0, r3
    1a12:	str	r0, [r6, #28]
    1a14:	b.n	19cc <regular_setup()+0xbe0>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a16:	movs	r0, #8
    1a18:	mov	r7, r5
    1a1a:	bl	fe7c <random(unsigned long)>
    1a1e:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a20:	movs	r0, #8
    1a22:	add.w	fp, r5, #96	; 0x60
    1a26:	bl	fe7c <random(unsigned long)>
    1a2a:	vmov	s15, r4
    1a2e:	adds	r6, #8
    1a30:	add.w	r3, r0, #8
    1a34:	vcvt.f64.s32	d9, s15
    1a38:	rsb	r9, r0, #16
    1a3c:	negs	r3, r3
    1a3e:	rsb	r8, r6, #0
    1a42:	str	r3, [sp, #4]
    1a44:	vmov	s15, r8
    1a48:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1a4a:	mov	r6, r7
    1a4c:	vcvt.f64.s32	d8, s15
    1a50:	vmul.f64	d8, d8, d8
    1a54:	b.n	1a62 <regular_setup()+0xc76>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1a56:	ldr	r3, [r5, #0]
    1a58:	str	r3, [r6, #28]
    1a5a:	adds	r4, #1
    1a5c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1a5e:	cmp	r4, r9
    1a60:	beq.n	1ab2 <regular_setup()+0xcc6>
      double xx = x-midPoint_y;
    1a62:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1a66:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1a6a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1a6e:	vfma.f64	d0, d7, d7
    1a72:	vsqrt.f64	d7, d0
    1a76:	vcmp.f64	d7, d7
    1a7a:	vmrs	APSR_nzcv, fpscr
    1a7e:	bne.w	28f8 <regular_setup()+0x1b0c>
    1a82:	vcmpe.f64	d7, d9
    1a86:	vmrs	APSR_nzcv, fpscr
    1a8a:	bhi.n	1a5a <regular_setup()+0xc6e>
        if (rand){
    1a8c:	cmp.w	sl, #0
    1a90:	beq.n	1a56 <regular_setup()+0xc6a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1a92:	ldr	r3, [r5, #20]
    1a94:	adds	r4, #1
    1a96:	ldr	r0, [r5, #16]
    1a98:	adds	r6, #96	; 0x60
    1a9a:	subs	r0, r3, r0
    1a9c:	adds	r0, #2
    1a9e:	bl	fe7c <random(unsigned long)>
    1aa2:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1aa4:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1aa6:	add.w	r3, r3, #4294967295
    1aaa:	add	r0, r3
    1aac:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1ab0:	bne.n	1a62 <regular_setup()+0xc76>
    1ab2:	adds	r7, #4
    1ab4:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1ab8:	cmp	r7, fp
    1aba:	bne.n	1a44 <regular_setup()+0xc58>
    1abc:	b.n	1984 <regular_setup()+0xb98>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1abe:	movs	r0, #8
    1ac0:	bl	fe7c <random(unsigned long)>
    1ac4:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ac8:	movs	r0, #8
    1aca:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ace:	cmp	r4, #0
    1ad0:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ad2:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ad6:	it	lt
    1ad8:	addlt	r3, r4, #1
    1ada:	cmp	r4, #0
    1adc:	mov.w	fp, r3, asr #1
    1ae0:	it	lt
    1ae2:	addlt	r4, #1
    1ae4:	rsb	fp, fp, #0
    1ae8:	asrs	r4, r4, #1
    1aea:	add.w	r7, r0, fp
    1aee:	adds	r3, r4, r0
    1af0:	cmp	r3, r7
    1af2:	str	r3, [sp, #4]
    1af4:	ble.w	1984 <regular_setup()+0xb98>
    1af8:	add	fp, r6
    1afa:	add.w	r9, r4, r6
    1afe:	add.w	r6, fp, fp, lsl #1
    1b02:	add.w	r6, r7, r6, lsl #3
    1b06:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1b0a:	cmp	fp, r9
    1b0c:	bge.n	1b2a <regular_setup()+0xd3e>
    1b0e:	mov	r8, r6
    1b10:	mov	r4, fp
        if (rand){
    1b12:	cmp.w	sl, #0
    1b16:	bne.w	2278 <regular_setup()+0x148c>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1b1a:	ldr	r3, [r5, #0]
    1b1c:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1b20:	adds	r4, #1
    1b22:	add.w	r8, r8, #96	; 0x60
    1b26:	cmp	r4, r9
    1b28:	bne.n	1b12 <regular_setup()+0xd26>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1b2a:	adds	r7, #1
    1b2c:	ldr	r3, [sp, #4]
    1b2e:	adds	r6, #4
    1b30:	cmp	r3, r7
    1b32:	bne.n	1b0a <regular_setup()+0xd1e>
    1b34:	b.n	1984 <regular_setup()+0xb98>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b36:	movs	r0, #8
    1b38:	bl	fe7c <random(unsigned long)>
    1b3c:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b40:	movs	r0, #8
    1b42:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1b46:	cmp	r4, #0
    1b48:	ble.w	1984 <regular_setup()+0xb98>
    1b4c:	add.w	r3, r0, #15
    1b50:	add.w	r6, r6, r6, lsl #1
    1b54:	movs	r7, #0
    1b56:	add.w	r6, r3, r6, lsl #3
    1b5a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1b5e:	cmp.w	sl, #0
    1b62:	bne.n	1b78 <regular_setup()+0xd8c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1b64:	ldr	r3, [r5, #0]
    1b66:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1b68:	adds	r7, #1
    1b6a:	adds	r6, #4
    1b6c:	cmp	r7, r4
    1b6e:	beq.w	1984 <regular_setup()+0xb98>
      if (rand){
    1b72:	cmp.w	sl, #0
    1b76:	beq.n	1b64 <regular_setup()+0xd78>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1b78:	ldr	r3, [r5, #20]
    1b7a:	ldr	r2, [r5, #16]
    1b7c:	subs	r0, r3, r2
    1b7e:	adds	r0, #2
    1b80:	bl	fe7c <random(unsigned long)>
    1b84:	ldr	r3, [r5, #16]
    1b86:	subs	r3, #1
    1b88:	add	r0, r3
    1b8a:	str	r0, [r6, #0]
    1b8c:	b.n	1b68 <regular_setup()+0xd7c>
    1b8e:	add.w	r7, r5, #2304	; 0x900
    1b92:	add.w	r6, r5, #28
    1b96:	mov	r4, r5
    1b98:	mov	r8, r7
    1b9a:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1b9c:	cmp	r7, #0
    1b9e:	bne.w	2484 <regular_setup()+0x1698>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ba2:	ldr	r3, [r5, #0]
    1ba4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1ba6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1baa:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1bac:	str	r3, [r4, #120]	; 0x78
    1bae:	adds	r4, #96	; 0x60
    1bb0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1bb2:	cmp	r4, r8
    1bb4:	bne.n	1b9c <regular_setup()+0xdb0>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    1bb6:	ldr	r3, [pc, #228]	; (1c9c <regular_setup()+0xeb0>)
    1bb8:	movs	r1, #5
    1bba:	movs	r0, #0
    1bbc:	ldr.w	r5, [r3, #440]	; 0x1b8
    1bc0:	bl	fe84 <random(long, long)>
    1bc4:	ldr	r3, [pc, #212]	; (1c9c <regular_setup()+0xeb0>)
    1bc6:	add.w	r0, r0, r0, lsl #1
    1bca:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1bce:	ldr.w	r2, [r3, #372]	; 0x174
    1bd2:	add.w	r3, r3, #372	; 0x174
    1bd6:	subs	r2, #1
    1bd8:	ldr	r4, [r3, #4]
    1bda:	ldrb.w	sl, [r3, #8]
    1bde:	cmp	r2, #4
    1be0:	bhi.w	278c <regular_setup()+0x19a0>
    1be4:	tbh	[pc, r2, lsl #1]
    1be8:	.word	0x01af01eb
    1bec:	.word	0x0129015b
    1bf0:	.short	0x00f7
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bf2:	movs	r0, #8
    1bf4:	mov	r7, r5
    1bf6:	bl	fe7c <random(unsigned long)>
    1bfa:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bfc:	movs	r0, #8
    1bfe:	add.w	fp, r5, #96	; 0x60
    1c02:	bl	fe7c <random(unsigned long)>
    1c06:	vmov	s15, r6
    1c0a:	adds	r4, #8
    1c0c:	add.w	r3, r0, #8
    1c10:	vcvt.f64.s32	d9, s15
    1c14:	rsb	r9, r0, #16
    1c18:	negs	r3, r3
    1c1a:	rsb	r8, r4, #0
    1c1e:	str	r3, [sp, #4]
    1c20:	vmov	s15, r8
    1c24:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1c26:	mov	r6, r7
    1c28:	vcvt.f64.s32	d8, s15
    1c2c:	vmul.f64	d8, d8, d8
    1c30:	b.n	1c3e <regular_setup()+0xe52>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1c32:	ldr	r3, [r5, #0]
    1c34:	str	r3, [r6, #28]
    1c36:	adds	r4, #1
    1c38:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c3a:	cmp	r4, r9
    1c3c:	beq.n	1c8e <regular_setup()+0xea2>
      double xx = x-midPoint_y;
    1c3e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1c42:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1c46:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1c4a:	vfma.f64	d0, d7, d7
    1c4e:	vsqrt.f64	d7, d0
    1c52:	vcmp.f64	d7, d7
    1c56:	vmrs	APSR_nzcv, fpscr
    1c5a:	bne.w	28ec <regular_setup()+0x1b00>
    1c5e:	vcmpe.f64	d7, d9
    1c62:	vmrs	APSR_nzcv, fpscr
    1c66:	bhi.n	1c36 <regular_setup()+0xe4a>
        if (rand){
    1c68:	cmp.w	sl, #0
    1c6c:	beq.n	1c32 <regular_setup()+0xe46>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c6e:	ldr	r3, [r5, #20]
    1c70:	adds	r4, #1
    1c72:	ldr	r0, [r5, #16]
    1c74:	adds	r6, #96	; 0x60
    1c76:	subs	r0, r3, r0
    1c78:	adds	r0, #2
    1c7a:	bl	fe7c <random(unsigned long)>
    1c7e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c80:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c82:	add.w	r3, r3, #4294967295
    1c86:	add	r0, r3
    1c88:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c8c:	bne.n	1c3e <regular_setup()+0xe52>
    1c8e:	adds	r7, #4
    1c90:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1c94:	cmp	r7, fp
    1c96:	bne.n	1c20 <regular_setup()+0xe34>
    1c98:	b.n	1bb6 <regular_setup()+0xdca>
    1c9a:	nop
    1c9c:	.word	0x20005000
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ca0:	movs	r0, #8
    1ca2:	bl	fe7c <random(unsigned long)>
    1ca6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1caa:	movs	r0, #8
    1cac:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1cb0:	cmp	r6, #0
    1cb2:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1cb4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1cb8:	it	lt
    1cba:	addlt	r3, r6, #1
    1cbc:	cmp	r6, #0
    1cbe:	mov.w	fp, r3, asr #1
    1cc2:	it	lt
    1cc4:	addlt	r6, #1
    1cc6:	rsb	fp, fp, #0
    1cca:	asrs	r6, r6, #1
    1ccc:	add.w	r7, r0, fp
    1cd0:	adds	r3, r0, r6
    1cd2:	cmp	r7, r3
    1cd4:	str	r3, [sp, #4]
    1cd6:	bge.w	1bb6 <regular_setup()+0xdca>
    1cda:	add	fp, r4
    1cdc:	add	r4, r6
    1cde:	add.w	r6, fp, fp, lsl #1
    1ce2:	add.w	r6, r7, r6, lsl #3
    1ce6:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1cea:	cmp	fp, r4
    1cec:	bge.n	1d0c <regular_setup()+0xf20>
    1cee:	mov	r9, r6
    1cf0:	mov	r8, fp
        if (rand){
    1cf2:	cmp.w	sl, #0
    1cf6:	bne.w	2260 <regular_setup()+0x1474>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1cfa:	ldr	r3, [r5, #0]
    1cfc:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1d00:	add.w	r8, r8, #1
    1d04:	add.w	r9, r9, #96	; 0x60
    1d08:	cmp	r8, r4
    1d0a:	bne.n	1cf2 <regular_setup()+0xf06>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d0c:	adds	r7, #1
    1d0e:	ldr	r3, [sp, #4]
    1d10:	adds	r6, #4
    1d12:	cmp	r7, r3
    1d14:	bne.n	1cea <regular_setup()+0xefe>
    1d16:	b.n	1bb6 <regular_setup()+0xdca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d18:	movs	r0, #8
    1d1a:	bl	fe7c <random(unsigned long)>
    1d1e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d22:	movs	r0, #8
    1d24:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1d28:	cmp	r6, #0
    1d2a:	ble.w	1bb6 <regular_setup()+0xdca>
    1d2e:	add.w	r3, r0, #15
    1d32:	add.w	r4, r4, r4, lsl #1
    1d36:	mov	r8, r6
    1d38:	mov	r6, sl
    1d3a:	add.w	r4, r3, r4, lsl #3
    1d3e:	movs	r7, #0
    1d40:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1d44:	cbnz	r6, 1d58 <regular_setup()+0xf6c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1d46:	ldr	r3, [r5, #0]
    1d48:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1d4a:	adds	r7, #1
    1d4c:	adds	r4, #4
    1d4e:	cmp	r7, r8
    1d50:	beq.w	1bb6 <regular_setup()+0xdca>
      if (rand){
    1d54:	cmp	r6, #0
    1d56:	beq.n	1d46 <regular_setup()+0xf5a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1d58:	ldr	r3, [r5, #20]
    1d5a:	ldr	r2, [r5, #16]
    1d5c:	subs	r0, r3, r2
    1d5e:	adds	r0, #2
    1d60:	bl	fe7c <random(unsigned long)>
    1d64:	ldr	r3, [r5, #16]
    1d66:	subs	r3, #1
    1d68:	add	r0, r3
    1d6a:	str	r0, [r4, #0]
    1d6c:	b.n	1d4a <regular_setup()+0xf5e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1d6e:	cmp	r6, #0
    1d70:	ble.w	1bb6 <regular_setup()+0xdca>
    1d74:	mov	r9, r5
    1d76:	movs	r7, #0
    1d78:	mov	r5, sl
    1d7a:	b.n	1d92 <regular_setup()+0xfa6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1d7c:	add.w	r3, r4, r3, lsl #3
    1d80:	ldr.w	r2, [r9]
    1d84:	add.w	r3, r9, r3, lsl #2
    1d88:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1d8a:	adds	r7, #1
    1d8c:	cmp	r7, r6
    1d8e:	beq.w	1bb6 <regular_setup()+0xdca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d92:	movs	r0, #8
    1d94:	bl	fe7c <random(unsigned long)>
    1d98:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d9c:	movs	r0, #8
    1d9e:	bl	fe7c <random(unsigned long)>
    1da2:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1da6:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1daa:	cmp	r5, #0
    1dac:	beq.n	1d7c <regular_setup()+0xf90>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1dae:	ldr.w	r3, [r9, #20]
    1db2:	add.w	r8, r8, r8, lsl #1
    1db6:	ldr.w	r2, [r9, #16]
    1dba:	add.w	r4, r4, r8, lsl #3
    1dbe:	subs	r0, r3, r2
    1dc0:	add.w	r4, r9, r4, lsl #2
    1dc4:	adds	r0, #2
    1dc6:	bl	fe7c <random(unsigned long)>
    1dca:	ldr.w	r3, [r9, #16]
    1dce:	subs	r3, #1
    1dd0:	add	r0, r3
    1dd2:	str	r0, [r4, #28]
    1dd4:	b.n	1d8a <regular_setup()+0xf9e>
    1dd6:	add.w	r7, r5, #2304	; 0x900
    1dda:	add.w	r6, r5, #28
    1dde:	mov	r4, r5
    1de0:	mov	r8, r7
    1de2:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1de4:	cmp	r7, #0
    1de6:	bne.w	23e8 <regular_setup()+0x15fc>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1dea:	ldr	r3, [r5, #0]
    1dec:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1dee:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1df2:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1df4:	str	r3, [r4, #120]	; 0x78
    1df6:	adds	r4, #96	; 0x60
    1df8:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1dfa:	cmp	r4, r8
    1dfc:	bne.n	1de4 <regular_setup()+0xff8>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    1dfe:	ldr	r3, [pc, #744]	; (20e8 <regular_setup()+0x12fc>)
    1e00:	movs	r1, #5
    1e02:	movs	r0, #0
    1e04:	ldr.w	r5, [r3, #444]	; 0x1bc
    1e08:	bl	fe84 <random(long, long)>
    1e0c:	ldr	r3, [pc, #728]	; (20e8 <regular_setup()+0x12fc>)
    1e0e:	add.w	r0, r0, r0, lsl #1
    1e12:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1e16:	ldr.w	r2, [r3, #372]	; 0x174
    1e1a:	add.w	r3, r3, #372	; 0x174
    1e1e:	subs	r2, #1
    1e20:	ldr	r4, [r3, #4]
    1e22:	ldrb.w	fp, [r3, #8]
    1e26:	cmp	r2, #4
    1e28:	bhi.w	271c <regular_setup()+0x1930>
    1e2c:	tbh	[pc, r2, lsl #1]
    1e30:	.word	0x019601d5
    1e34:	.word	0x010c013c
    1e38:	.short	0x00f3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1e3a:	cmp	r4, #0
    1e3c:	ble.n	1dfe <regular_setup()+0x1012>
    1e3e:	mov	r9, r5
    1e40:	movs	r7, #0
    1e42:	mov	r5, sl
    1e44:	b.n	1e5a <regular_setup()+0x106e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1e46:	add.w	r3, r6, r3, lsl #3
    1e4a:	ldr.w	r2, [r9]
    1e4e:	add.w	r3, r9, r3, lsl #2
    1e52:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1e54:	adds	r7, #1
    1e56:	cmp	r4, r7
    1e58:	beq.n	1dfe <regular_setup()+0x1012>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e5a:	movs	r0, #8
    1e5c:	bl	fe7c <random(unsigned long)>
    1e60:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e64:	movs	r0, #8
    1e66:	bl	fe7c <random(unsigned long)>
    1e6a:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1e6e:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1e72:	cmp	r5, #0
    1e74:	beq.n	1e46 <regular_setup()+0x105a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1e76:	ldr.w	r3, [r9, #20]
    1e7a:	add.w	r8, r8, r8, lsl #1
    1e7e:	ldr.w	r2, [r9, #16]
    1e82:	add.w	r6, r6, r8, lsl #3
    1e86:	subs	r0, r3, r2
    1e88:	add.w	r6, r9, r6, lsl #2
    1e8c:	adds	r0, #2
    1e8e:	bl	fe7c <random(unsigned long)>
    1e92:	ldr.w	r3, [r9, #16]
    1e96:	subs	r3, #1
    1e98:	add	r0, r3
    1e9a:	str	r0, [r6, #28]
    1e9c:	b.n	1e54 <regular_setup()+0x1068>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e9e:	movs	r0, #8
    1ea0:	mov	r7, r5
    1ea2:	bl	fe7c <random(unsigned long)>
    1ea6:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ea8:	movs	r0, #8
    1eaa:	add.w	fp, r5, #96	; 0x60
    1eae:	bl	fe7c <random(unsigned long)>
    1eb2:	vmov	s15, r4
    1eb6:	adds	r6, #8
    1eb8:	add.w	r3, r0, #8
    1ebc:	vcvt.f64.s32	d9, s15
    1ec0:	rsb	r9, r0, #16
    1ec4:	negs	r3, r3
    1ec6:	rsb	r8, r6, #0
    1eca:	str	r3, [sp, #4]
    1ecc:	vmov	s15, r8
    1ed0:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1ed2:	mov	r6, r7
    1ed4:	vcvt.f64.s32	d8, s15
    1ed8:	vmul.f64	d8, d8, d8
    1edc:	b.n	1eea <regular_setup()+0x10fe>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1ede:	ldr	r3, [r5, #0]
    1ee0:	str	r3, [r6, #28]
    1ee2:	adds	r4, #1
    1ee4:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1ee6:	cmp	r9, r4
    1ee8:	beq.n	1f3a <regular_setup()+0x114e>
      double xx = x-midPoint_y;
    1eea:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1eee:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1ef2:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1ef6:	vfma.f64	d0, d7, d7
    1efa:	vsqrt.f64	d7, d0
    1efe:	vcmp.f64	d7, d7
    1f02:	vmrs	APSR_nzcv, fpscr
    1f06:	bne.w	28e0 <regular_setup()+0x1af4>
    1f0a:	vcmpe.f64	d7, d9
    1f0e:	vmrs	APSR_nzcv, fpscr
    1f12:	bhi.n	1ee2 <regular_setup()+0x10f6>
        if (rand){
    1f14:	cmp.w	sl, #0
    1f18:	beq.n	1ede <regular_setup()+0x10f2>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1f1a:	ldr	r3, [r5, #20]
    1f1c:	adds	r4, #1
    1f1e:	ldr	r0, [r5, #16]
    1f20:	adds	r6, #96	; 0x60
    1f22:	subs	r0, r3, r0
    1f24:	adds	r0, #2
    1f26:	bl	fe7c <random(unsigned long)>
    1f2a:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f2c:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1f2e:	add.w	r3, r3, #4294967295
    1f32:	add	r0, r3
    1f34:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f38:	bne.n	1eea <regular_setup()+0x10fe>
    1f3a:	adds	r7, #4
    1f3c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1f40:	cmp	fp, r7
    1f42:	bne.n	1ecc <regular_setup()+0x10e0>
    1f44:	b.n	1dfe <regular_setup()+0x1012>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f46:	movs	r0, #8
    1f48:	bl	fe7c <random(unsigned long)>
    1f4c:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f50:	movs	r0, #8
    1f52:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1f56:	cmp	r4, #0
    1f58:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f5a:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1f5e:	it	lt
    1f60:	addlt	r3, r4, #1
    1f62:	cmp	r4, #0
    1f64:	mov.w	fp, r3, asr #1
    1f68:	it	lt
    1f6a:	addlt	r4, #1
    1f6c:	rsb	fp, fp, #0
    1f70:	asrs	r4, r4, #1
    1f72:	add.w	r7, r0, fp
    1f76:	adds	r3, r4, r0
    1f78:	cmp	r3, r7
    1f7a:	str	r3, [sp, #4]
    1f7c:	ble.w	1dfe <regular_setup()+0x1012>
    1f80:	add	fp, r6
    1f82:	add.w	r9, r4, r6
    1f86:	add.w	r6, fp, fp, lsl #1
    1f8a:	add.w	r6, r7, r6, lsl #3
    1f8e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1f92:	cmp	r9, fp
    1f94:	ble.n	1fb2 <regular_setup()+0x11c6>
    1f96:	mov	r8, r6
    1f98:	mov	r4, fp
        if (rand){
    1f9a:	cmp.w	sl, #0
    1f9e:	bne.w	2248 <regular_setup()+0x145c>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1fa2:	ldr	r3, [r5, #0]
    1fa4:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1fa8:	adds	r4, #1
    1faa:	add.w	r8, r8, #96	; 0x60
    1fae:	cmp	r4, r9
    1fb0:	bne.n	1f9a <regular_setup()+0x11ae>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fb2:	adds	r7, #1
    1fb4:	ldr	r3, [sp, #4]
    1fb6:	adds	r6, #4
    1fb8:	cmp	r3, r7
    1fba:	bne.n	1f92 <regular_setup()+0x11a6>
    1fbc:	b.n	1dfe <regular_setup()+0x1012>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fbe:	movs	r0, #8
    1fc0:	bl	fe7c <random(unsigned long)>
    1fc4:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fc8:	movs	r0, #8
    1fca:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1fce:	cmp	r4, #0
    1fd0:	ble.w	1dfe <regular_setup()+0x1012>
    1fd4:	add.w	r3, r0, #15
    1fd8:	add.w	r6, r6, r6, lsl #1
    1fdc:	movs	r7, #0
    1fde:	add.w	r6, r3, r6, lsl #3
    1fe2:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1fe6:	cmp.w	sl, #0
    1fea:	bne.n	2000 <regular_setup()+0x1214>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1fec:	ldr	r3, [r5, #0]
    1fee:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1ff0:	adds	r7, #1
    1ff2:	adds	r6, #4
    1ff4:	cmp	r4, r7
    1ff6:	beq.w	1dfe <regular_setup()+0x1012>
      if (rand){
    1ffa:	cmp.w	sl, #0
    1ffe:	beq.n	1fec <regular_setup()+0x1200>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2000:	ldr	r3, [r5, #20]
    2002:	ldr	r2, [r5, #16]
    2004:	subs	r0, r3, r2
    2006:	adds	r0, #2
    2008:	bl	fe7c <random(unsigned long)>
    200c:	ldr	r3, [r5, #16]
    200e:	subs	r3, #1
    2010:	add	r0, r3
    2012:	str	r0, [r6, #0]
    2014:	b.n	1ff0 <regular_setup()+0x1204>
    2016:	add.w	r7, r5, #2304	; 0x900
    201a:	add.w	r6, r5, #28
    201e:	mov	r4, r5
    2020:	mov	r8, r7
    2022:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2024:	cmp	r7, #0
    2026:	bne.w	2436 <regular_setup()+0x164a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    202a:	ldr	r3, [r5, #0]
    202c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    202e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2032:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2034:	str	r3, [r4, #120]	; 0x78
    2036:	adds	r4, #96	; 0x60
    2038:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    203a:	cmp	r4, r8
    203c:	bne.n	2024 <regular_setup()+0x1238>
  screen_A.regular_screen_animation();
  screen_B.regular_screen_animation();
}
    203e:	add	sp, #12
    2040:	vpop	{d8-d9}
    2044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2048:	cmp	r4, #0
    204a:	ble.n	203e <regular_setup()+0x1252>
    204c:	mov	r9, r4
    204e:	mov.w	r8, #0
    2052:	mov	r4, fp
    2054:	b.n	206a <regular_setup()+0x127e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2056:	add.w	r3, r6, r3, lsl #3
    205a:	ldr	r2, [r5, #0]
    205c:	add.w	r3, r5, r3, lsl #2
    2060:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2062:	add.w	r8, r8, #1
    2066:	cmp	r8, r9
    2068:	beq.n	203e <regular_setup()+0x1252>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    206a:	movs	r0, #8
    206c:	bl	fe7c <random(unsigned long)>
    2070:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2074:	movs	r0, #8
    2076:	bl	fe7c <random(unsigned long)>
    207a:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    207e:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2082:	cmp	r4, #0
    2084:	beq.n	2056 <regular_setup()+0x126a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2086:	ldr	r3, [r5, #20]
    2088:	add.w	r7, r7, r7, lsl #1
    208c:	ldr	r2, [r5, #16]
    208e:	add.w	r6, r6, r7, lsl #3
    2092:	subs	r0, r3, r2
    2094:	add.w	r6, r5, r6, lsl #2
    2098:	adds	r0, #2
    209a:	bl	fe7c <random(unsigned long)>
    209e:	ldr	r3, [r5, #16]
    20a0:	subs	r3, #1
    20a2:	add	r0, r3
    20a4:	str	r0, [r6, #28]
    20a6:	b.n	2062 <regular_setup()+0x1276>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20a8:	movs	r0, #8
    20aa:	mov	r7, r5
    20ac:	bl	fe7c <random(unsigned long)>
    20b0:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20b2:	movs	r0, #8
    20b4:	add.w	r9, r5, #96	; 0x60
    20b8:	bl	fe7c <random(unsigned long)>
    20bc:	vmov	s15, r4
    20c0:	adds	r6, #8
    20c2:	add.w	r3, r0, #8
    20c6:	vcvt.f64.s32	d9, s15
    20ca:	rsb	sl, r0, #16
    20ce:	negs	r3, r3
    20d0:	rsb	r8, r6, #0
    20d4:	str	r3, [sp, #4]
    20d6:	vmov	s15, r8
    20da:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    20dc:	mov	r6, r7
    20de:	vcvt.f64.s32	d8, s15
    20e2:	vmul.f64	d8, d8, d8
    20e6:	b.n	20f8 <regular_setup()+0x130c>
    20e8:	.word	0x20005000
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    20ec:	ldr	r3, [r5, #0]
    20ee:	str	r3, [r6, #28]
    20f0:	adds	r4, #1
    20f2:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    20f4:	cmp	sl, r4
    20f6:	beq.n	2148 <regular_setup()+0x135c>
      double xx = x-midPoint_y;
    20f8:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    20fc:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2100:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2104:	vfma.f64	d0, d7, d7
    2108:	vsqrt.f64	d7, d0
    210c:	vcmp.f64	d7, d7
    2110:	vmrs	APSR_nzcv, fpscr
    2114:	bne.w	28d6 <regular_setup()+0x1aea>
    2118:	vcmpe.f64	d7, d9
    211c:	vmrs	APSR_nzcv, fpscr
    2120:	bhi.n	20f0 <regular_setup()+0x1304>
        if (rand){
    2122:	cmp.w	fp, #0
    2126:	beq.n	20ec <regular_setup()+0x1300>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2128:	ldr	r3, [r5, #20]
    212a:	adds	r4, #1
    212c:	ldr	r0, [r5, #16]
    212e:	adds	r6, #96	; 0x60
    2130:	subs	r0, r3, r0
    2132:	adds	r0, #2
    2134:	bl	fe7c <random(unsigned long)>
    2138:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    213a:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    213c:	add.w	r3, r3, #4294967295
    2140:	add	r0, r3
    2142:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2146:	bne.n	20f8 <regular_setup()+0x130c>
    2148:	adds	r7, #4
    214a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    214e:	cmp	r9, r7
    2150:	bne.n	20d6 <regular_setup()+0x12ea>
    2152:	add	sp, #12
    2154:	vpop	{d8-d9}
    2158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    215c:	movs	r0, #8
    215e:	bl	fe7c <random(unsigned long)>
    2162:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2166:	movs	r0, #8
    2168:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    216c:	cmp	r4, #0
    216e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2170:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2174:	it	lt
    2176:	addlt	r3, r4, #1
    2178:	cmp	r4, #0
    217a:	mov.w	r8, r3, asr #1
    217e:	it	lt
    2180:	addlt	r4, #1
    2182:	rsb	r8, r8, #0
    2186:	asrs	r4, r4, #1
    2188:	add.w	r7, r0, r8
    218c:	adds	r3, r4, r0
    218e:	cmp	r7, r3
    2190:	str	r3, [sp, #4]
    2192:	bge.w	203e <regular_setup()+0x1252>
    2196:	add	r8, r6
    2198:	add.w	sl, r4, r6
    219c:	add.w	r6, r8, r8, lsl #1
    21a0:	add.w	r6, r7, r6, lsl #3
    21a4:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    21a8:	cmp	r8, sl
    21aa:	bge.n	21c6 <regular_setup()+0x13da>
    21ac:	mov	r9, r6
    21ae:	mov	r4, r8
        if (rand){
    21b0:	cmp.w	fp, #0
    21b4:	bne.n	2230 <regular_setup()+0x1444>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    21b6:	ldr	r3, [r5, #0]
    21b8:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    21bc:	adds	r4, #1
    21be:	add.w	r9, r9, #96	; 0x60
    21c2:	cmp	r4, sl
    21c4:	bne.n	21b0 <regular_setup()+0x13c4>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    21c6:	adds	r7, #1
    21c8:	ldr	r3, [sp, #4]
    21ca:	adds	r6, #4
    21cc:	cmp	r7, r3
    21ce:	bne.n	21a8 <regular_setup()+0x13bc>
    21d0:	add	sp, #12
    21d2:	vpop	{d8-d9}
    21d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21da:	movs	r0, #8
    21dc:	bl	fe7c <random(unsigned long)>
    21e0:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21e4:	movs	r0, #8
    21e6:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    21ea:	cmp	r4, #0
    21ec:	ble.w	203e <regular_setup()+0x1252>
    21f0:	add.w	r6, r6, r6, lsl #1
    21f4:	add.w	r3, r0, #15
    21f8:	mov	r8, r4
    21fa:	mov	r4, fp
    21fc:	add.w	r6, r3, r6, lsl #3
    2200:	movs	r7, #0
    2202:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2206:	cbnz	r4, 221a <regular_setup()+0x142e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2208:	ldr	r3, [r5, #0]
    220a:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    220c:	adds	r7, #1
    220e:	adds	r6, #4
    2210:	cmp	r7, r8
    2212:	beq.w	203e <regular_setup()+0x1252>
      if (rand){
    2216:	cmp	r4, #0
    2218:	beq.n	2208 <regular_setup()+0x141c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    221a:	ldr	r3, [r5, #20]
    221c:	ldr	r2, [r5, #16]
    221e:	subs	r0, r3, r2
    2220:	adds	r0, #2
    2222:	bl	fe7c <random(unsigned long)>
    2226:	ldr	r3, [r5, #16]
    2228:	subs	r3, #1
    222a:	add	r0, r3
    222c:	str	r0, [r6, #0]
    222e:	b.n	220c <regular_setup()+0x1420>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2230:	ldr	r3, [r5, #20]
    2232:	ldr	r0, [r5, #16]
    2234:	subs	r0, r3, r0
    2236:	adds	r0, #2
    2238:	bl	fe7c <random(unsigned long)>
    223c:	ldr	r3, [r5, #16]
    223e:	subs	r3, #1
    2240:	add	r0, r3
    2242:	str.w	r0, [r9, #28]
    2246:	b.n	21bc <regular_setup()+0x13d0>
    2248:	ldr	r3, [r5, #20]
    224a:	ldr	r0, [r5, #16]
    224c:	subs	r0, r3, r0
    224e:	adds	r0, #2
    2250:	bl	fe7c <random(unsigned long)>
    2254:	ldr	r3, [r5, #16]
    2256:	subs	r3, #1
    2258:	add	r0, r3
    225a:	str.w	r0, [r8, #28]
    225e:	b.n	1fa8 <regular_setup()+0x11bc>
    2260:	ldr	r3, [r5, #20]
    2262:	ldr	r0, [r5, #16]
    2264:	subs	r0, r3, r0
    2266:	adds	r0, #2
    2268:	bl	fe7c <random(unsigned long)>
    226c:	ldr	r3, [r5, #16]
    226e:	subs	r3, #1
    2270:	add	r0, r3
    2272:	str.w	r0, [r9, #28]
    2276:	b.n	1d00 <regular_setup()+0xf14>
    2278:	ldr	r3, [r5, #20]
    227a:	ldr	r0, [r5, #16]
    227c:	subs	r0, r3, r0
    227e:	adds	r0, #2
    2280:	bl	fe7c <random(unsigned long)>
    2284:	ldr	r3, [r5, #16]
    2286:	subs	r3, #1
    2288:	add	r0, r3
    228a:	str.w	r0, [r8, #28]
    228e:	b.n	1b20 <regular_setup()+0xd34>
    2290:	ldr	r3, [r5, #20]
    2292:	ldr	r0, [r5, #16]
    2294:	subs	r0, r3, r0
    2296:	adds	r0, #2
    2298:	bl	fe7c <random(unsigned long)>
    229c:	ldr	r3, [r5, #16]
    229e:	subs	r3, #1
    22a0:	add	r0, r3
    22a2:	str.w	r0, [sl, #28]
    22a6:	b.w	18ea <regular_setup()+0xafe>
    22aa:	ldr	r3, [r5, #20]
    22ac:	ldr	r0, [r5, #16]
    22ae:	subs	r0, r3, r0
    22b0:	adds	r0, #2
    22b2:	bl	fe7c <random(unsigned long)>
    22b6:	ldr	r3, [r5, #16]
    22b8:	subs	r3, #1
    22ba:	add	r0, r3
    22bc:	str.w	r0, [r9, #28]
    22c0:	b.w	12e2 <regular_setup()+0x4f6>
    22c4:	ldr	r3, [r5, #20]
    22c6:	ldr	r0, [r5, #16]
    22c8:	subs	r0, r3, r0
    22ca:	adds	r0, #2
    22cc:	bl	fe7c <random(unsigned long)>
    22d0:	ldr	r3, [r5, #16]
    22d2:	subs	r3, #1
    22d4:	add	r0, r3
    22d6:	str.w	r0, [r9, #28]
    22da:	b.w	158c <regular_setup()+0x7a0>
    22de:	ldr	r3, [r5, #20]
    22e0:	ldr	r0, [r5, #16]
    22e2:	subs	r0, r3, r0
    22e4:	adds	r0, #2
    22e6:	bl	fe7c <random(unsigned long)>
    22ea:	ldr	r3, [r5, #16]
    22ec:	subs	r3, #1
    22ee:	add	r0, r3
    22f0:	str.w	r0, [r9, #28]
    22f4:	b.w	104a <regular_setup()+0x25e>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    22f8:	ldr	r3, [r5, #20]
    22fa:	ldr	r2, [r5, #16]
    22fc:	subs	r0, r3, r2
    22fe:	adds	r0, #2
    2300:	bl	fe7c <random(unsigned long)>
    2304:	ldr	r1, [r5, #16]
    2306:	subs	r2, r1, #1
    2308:	add	r0, r2
    230a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    230c:	ldr	r3, [r5, #20]
    230e:	subs	r0, r3, r1
    2310:	adds	r0, #2
    2312:	bl	fe7c <random(unsigned long)>
    2316:	ldr	r1, [r5, #16]
    2318:	subs	r2, r1, #1
    231a:	add	r0, r2
    231c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2320:	ldr	r3, [r5, #20]
    2322:	subs	r0, r3, r1
    2324:	adds	r0, #2
    2326:	bl	fe7c <random(unsigned long)>
    232a:	ldr	r1, [r5, #16]
    232c:	subs	r2, r1, #1
    232e:	add	r0, r2
    2330:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2332:	ldr	r3, [r5, #20]
    2334:	subs	r0, r3, r1
    2336:	adds	r0, #2
    2338:	bl	fe7c <random(unsigned long)>
    233c:	ldr	r3, [r5, #16]
    233e:	subs	r3, #1
    2340:	add	r0, r3
    2342:	str	r0, [r4, #120]	; 0x78
    2344:	b.w	f68 <regular_setup()+0x17c>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2348:	ldr	r3, [r5, #20]
    234a:	ldr	r2, [r5, #16]
    234c:	subs	r0, r3, r2
    234e:	adds	r0, #2
    2350:	bl	fe7c <random(unsigned long)>
    2354:	ldr	r1, [r5, #16]
    2356:	subs	r2, r1, #1
    2358:	add	r0, r2
    235a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    235c:	ldr	r3, [r5, #20]
    235e:	subs	r0, r3, r1
    2360:	adds	r0, #2
    2362:	bl	fe7c <random(unsigned long)>
    2366:	ldr	r1, [r5, #16]
    2368:	subs	r2, r1, #1
    236a:	add	r0, r2
    236c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2370:	ldr	r3, [r5, #20]
    2372:	subs	r0, r3, r1
    2374:	adds	r0, #2
    2376:	bl	fe7c <random(unsigned long)>
    237a:	ldr	r1, [r5, #16]
    237c:	subs	r2, r1, #1
    237e:	add	r0, r2
    2380:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2382:	ldr	r3, [r5, #20]
    2384:	subs	r0, r3, r1
    2386:	adds	r0, #2
    2388:	bl	fe7c <random(unsigned long)>
    238c:	ldr	r3, [r5, #16]
    238e:	subs	r3, #1
    2390:	add	r0, r3
    2392:	str	r0, [r4, #120]	; 0x78
    2394:	b.w	13d8 <regular_setup()+0x5ec>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2398:	ldr	r3, [r5, #20]
    239a:	ldr	r2, [r5, #16]
    239c:	subs	r0, r3, r2
    239e:	adds	r0, #2
    23a0:	bl	fe7c <random(unsigned long)>
    23a4:	ldr	r1, [r5, #16]
    23a6:	subs	r2, r1, #1
    23a8:	add	r0, r2
    23aa:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    23ac:	ldr	r3, [r5, #20]
    23ae:	subs	r0, r3, r1
    23b0:	adds	r0, #2
    23b2:	bl	fe7c <random(unsigned long)>
    23b6:	ldr	r1, [r5, #16]
    23b8:	subs	r2, r1, #1
    23ba:	add	r0, r2
    23bc:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    23c0:	ldr	r3, [r5, #20]
    23c2:	subs	r0, r3, r1
    23c4:	adds	r0, #2
    23c6:	bl	fe7c <random(unsigned long)>
    23ca:	ldr	r1, [r5, #16]
    23cc:	subs	r2, r1, #1
    23ce:	add	r0, r2
    23d0:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    23d2:	ldr	r3, [r5, #20]
    23d4:	subs	r0, r3, r1
    23d6:	adds	r0, #2
    23d8:	bl	fe7c <random(unsigned long)>
    23dc:	ldr	r3, [r5, #16]
    23de:	subs	r3, #1
    23e0:	add	r0, r3
    23e2:	str	r0, [r4, #120]	; 0x78
    23e4:	b.w	1196 <regular_setup()+0x3aa>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    23e8:	ldr	r3, [r5, #20]
    23ea:	ldr	r2, [r5, #16]
    23ec:	subs	r0, r3, r2
    23ee:	adds	r0, #2
    23f0:	bl	fe7c <random(unsigned long)>
    23f4:	ldr	r1, [r5, #16]
    23f6:	subs	r2, r1, #1
    23f8:	add	r0, r2
    23fa:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    23fc:	ldr	r3, [r5, #20]
    23fe:	subs	r0, r3, r1
    2400:	adds	r0, #2
    2402:	bl	fe7c <random(unsigned long)>
    2406:	ldr	r1, [r5, #16]
    2408:	subs	r2, r1, #1
    240a:	add	r0, r2
    240c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2410:	ldr	r3, [r5, #20]
    2412:	subs	r0, r3, r1
    2414:	adds	r0, #2
    2416:	bl	fe7c <random(unsigned long)>
    241a:	ldr	r1, [r5, #16]
    241c:	subs	r2, r1, #1
    241e:	add	r0, r2
    2420:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2422:	ldr	r3, [r5, #20]
    2424:	subs	r0, r3, r1
    2426:	adds	r0, #2
    2428:	bl	fe7c <random(unsigned long)>
    242c:	ldr	r3, [r5, #16]
    242e:	subs	r3, #1
    2430:	add	r0, r3
    2432:	str	r0, [r4, #120]	; 0x78
    2434:	b.n	1df6 <regular_setup()+0x100a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2436:	ldr	r3, [r5, #20]
    2438:	ldr	r2, [r5, #16]
    243a:	subs	r0, r3, r2
    243c:	adds	r0, #2
    243e:	bl	fe7c <random(unsigned long)>
    2442:	ldr	r1, [r5, #16]
    2444:	subs	r2, r1, #1
    2446:	add	r0, r2
    2448:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    244a:	ldr	r3, [r5, #20]
    244c:	subs	r0, r3, r1
    244e:	adds	r0, #2
    2450:	bl	fe7c <random(unsigned long)>
    2454:	ldr	r1, [r5, #16]
    2456:	subs	r2, r1, #1
    2458:	add	r0, r2
    245a:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    245e:	ldr	r3, [r5, #20]
    2460:	subs	r0, r3, r1
    2462:	adds	r0, #2
    2464:	bl	fe7c <random(unsigned long)>
    2468:	ldr	r1, [r5, #16]
    246a:	subs	r2, r1, #1
    246c:	add	r0, r2
    246e:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2470:	ldr	r3, [r5, #20]
    2472:	subs	r0, r3, r1
    2474:	adds	r0, #2
    2476:	bl	fe7c <random(unsigned long)>
    247a:	ldr	r3, [r5, #16]
    247c:	subs	r3, #1
    247e:	add	r0, r3
    2480:	str	r0, [r4, #120]	; 0x78
    2482:	b.n	2036 <regular_setup()+0x124a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2484:	ldr	r3, [r5, #20]
    2486:	ldr	r2, [r5, #16]
    2488:	subs	r0, r3, r2
    248a:	adds	r0, #2
    248c:	bl	fe7c <random(unsigned long)>
    2490:	ldr	r1, [r5, #16]
    2492:	subs	r2, r1, #1
    2494:	add	r0, r2
    2496:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2498:	ldr	r3, [r5, #20]
    249a:	subs	r0, r3, r1
    249c:	adds	r0, #2
    249e:	bl	fe7c <random(unsigned long)>
    24a2:	ldr	r1, [r5, #16]
    24a4:	subs	r2, r1, #1
    24a6:	add	r0, r2
    24a8:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24ac:	ldr	r3, [r5, #20]
    24ae:	subs	r0, r3, r1
    24b0:	adds	r0, #2
    24b2:	bl	fe7c <random(unsigned long)>
    24b6:	ldr	r1, [r5, #16]
    24b8:	subs	r2, r1, #1
    24ba:	add	r0, r2
    24bc:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24be:	ldr	r3, [r5, #20]
    24c0:	subs	r0, r3, r1
    24c2:	adds	r0, #2
    24c4:	bl	fe7c <random(unsigned long)>
    24c8:	ldr	r3, [r5, #16]
    24ca:	subs	r3, #1
    24cc:	add	r0, r3
    24ce:	str	r0, [r4, #120]	; 0x78
    24d0:	b.w	1bae <regular_setup()+0xdc2>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24d4:	ldr	r3, [r5, #20]
    24d6:	ldr	r2, [r5, #16]
    24d8:	subs	r0, r3, r2
    24da:	adds	r0, #2
    24dc:	bl	fe7c <random(unsigned long)>
    24e0:	ldr	r1, [r5, #16]
    24e2:	subs	r2, r1, #1
    24e4:	add	r0, r2
    24e6:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24e8:	ldr	r3, [r5, #20]
    24ea:	subs	r0, r3, r1
    24ec:	adds	r0, #2
    24ee:	bl	fe7c <random(unsigned long)>
    24f2:	ldr	r1, [r5, #16]
    24f4:	subs	r2, r1, #1
    24f6:	add	r0, r2
    24f8:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24fc:	ldr	r3, [r5, #20]
    24fe:	subs	r0, r3, r1
    2500:	adds	r0, #2
    2502:	bl	fe7c <random(unsigned long)>
    2506:	ldr	r1, [r5, #16]
    2508:	subs	r2, r1, #1
    250a:	add	r0, r2
    250c:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    250e:	ldr	r3, [r5, #20]
    2510:	subs	r0, r3, r1
    2512:	adds	r0, #2
    2514:	bl	fe7c <random(unsigned long)>
    2518:	ldr	r3, [r5, #16]
    251a:	subs	r3, #1
    251c:	add	r0, r3
    251e:	str	r0, [r4, #120]	; 0x78
    2520:	b.w	161c <regular_setup()+0x830>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2524:	ldr	r3, [r5, #20]
    2526:	ldr	r2, [r5, #16]
    2528:	subs	r0, r3, r2
    252a:	adds	r0, #2
    252c:	bl	fe7c <random(unsigned long)>
    2530:	ldr	r1, [r5, #16]
    2532:	subs	r2, r1, #1
    2534:	add	r0, r2
    2536:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2538:	ldr	r3, [r5, #20]
    253a:	subs	r0, r3, r1
    253c:	adds	r0, #2
    253e:	bl	fe7c <random(unsigned long)>
    2542:	ldr	r1, [r5, #16]
    2544:	subs	r2, r1, #1
    2546:	add	r0, r2
    2548:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    254c:	ldr	r3, [r5, #20]
    254e:	subs	r0, r3, r1
    2550:	adds	r0, #2
    2552:	bl	fe7c <random(unsigned long)>
    2556:	ldr	r1, [r5, #16]
    2558:	subs	r2, r1, #1
    255a:	add	r0, r2
    255c:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    255e:	ldr	r3, [r5, #20]
    2560:	subs	r0, r3, r1
    2562:	adds	r0, #2
    2564:	bl	fe7c <random(unsigned long)>
    2568:	ldr	r3, [r5, #16]
    256a:	subs	r3, #1
    256c:	add	r0, r3
    256e:	str	r0, [r4, #120]	; 0x78
    2570:	b.w	197c <regular_setup()+0xb90>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2574:	movw	sl, #4636	; 0x121c
    2578:	add.w	r3, r5, #28
    257c:	movs	r7, #0
    257e:	add.w	r9, r5, #4640	; 0x1220
    2582:	add	sl, r5
    2584:	str	r3, [sp, #4]
    2586:	mov.w	r8, r7, lsl #3
    258a:	ldr	r6, [sp, #4]
    258c:	movs	r4, #0
    258e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2592:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2594:	add	r3, r4
    2596:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2598:	cbnz	r2, 259e <regular_setup()+0x17b2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    259a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    259e:	cbnz	r3, 25ba <regular_setup()+0x17ce>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    25a0:	adds	r4, #1
    25a2:	adds	r6, #4
    25a4:	cmp	r4, #24
    25a6:	bne.n	258e <regular_setup()+0x17a2>
    25a8:	ldr	r3, [sp, #4]
    25aa:	adds	r7, #24
    25ac:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    25ae:	cmp.w	r7, #576	; 0x240
    25b2:	str	r3, [sp, #4]
    25b4:	bne.n	2586 <regular_setup()+0x179a>
    25b6:	b.w	13e0 <regular_setup()+0x5f4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    25ba:	ldr	r2, [r5, #20]
    25bc:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    25be:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    25c2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    25c4:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    25c6:	adds	r0, #2
    25c8:	ldr.w	fp, [r3, r4, lsl #3]
    25cc:	bl	fe7c <random(unsigned long)>
    25d0:	ldr	r3, [r5, #16]
    25d2:	rsb	r3, r3, fp
    25d6:	adds	r3, #1
    25d8:	subs	r0, r3, r0
    25da:	str	r0, [r6, #0]
    25dc:	b.n	25a0 <regular_setup()+0x17b4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    25de:	movw	sl, #4636	; 0x121c
    25e2:	add.w	r3, r5, #28
    25e6:	movs	r7, #0
    25e8:	add.w	r9, r5, #4640	; 0x1220
    25ec:	add	sl, r5
    25ee:	str	r3, [sp, #4]
    25f0:	mov.w	r8, r7, lsl #3
    25f4:	ldr	r6, [sp, #4]
    25f6:	movs	r4, #0
    25f8:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    25fc:	ldrb	r2, [r5, #24]
      return _background[x][y];
    25fe:	add	r3, r4
    2600:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2602:	cbnz	r2, 2608 <regular_setup()+0x181c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2604:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2608:	cbnz	r3, 2624 <regular_setup()+0x1838>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    260a:	adds	r4, #1
    260c:	adds	r6, #4
    260e:	cmp	r4, #24
    2610:	bne.n	25f8 <regular_setup()+0x180c>
    2612:	ldr	r3, [sp, #4]
    2614:	adds	r7, #24
    2616:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2618:	cmp.w	r7, #576	; 0x240
    261c:	str	r3, [sp, #4]
    261e:	bne.n	25f0 <regular_setup()+0x1804>
    2620:	b.w	f70 <regular_setup()+0x184>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2624:	ldr	r2, [r5, #20]
    2626:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2628:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    262c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    262e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2630:	adds	r0, #2
    2632:	ldr.w	fp, [r3, r4, lsl #3]
    2636:	bl	fe7c <random(unsigned long)>
    263a:	ldr	r3, [r5, #16]
    263c:	rsb	r3, r3, fp
    2640:	adds	r3, #1
    2642:	subs	r0, r3, r0
    2644:	str	r0, [r6, #0]
    2646:	b.n	260a <regular_setup()+0x181e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2648:	movw	sl, #4636	; 0x121c
    264c:	add.w	r3, r5, #28
    2650:	movs	r7, #0
    2652:	add.w	r9, r5, #4640	; 0x1220
    2656:	add	sl, r5
    2658:	str	r3, [sp, #4]
    265a:	mov.w	r8, r7, lsl #3
    265e:	ldr	r6, [sp, #4]
    2660:	movs	r4, #0
    2662:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2666:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2668:	add	r3, r4
    266a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    266c:	cbnz	r2, 2672 <regular_setup()+0x1886>
      return _background[x][y];
    } else {
      return !_background[x][y];
    266e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2672:	cbnz	r3, 268e <regular_setup()+0x18a2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2674:	adds	r4, #1
    2676:	adds	r6, #4
    2678:	cmp	r4, #24
    267a:	bne.n	2662 <regular_setup()+0x1876>
    267c:	ldr	r3, [sp, #4]
    267e:	adds	r7, #24
    2680:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2682:	cmp.w	r7, #576	; 0x240
    2686:	str	r3, [sp, #4]
    2688:	bne.n	265a <regular_setup()+0x186e>
    268a:	b.w	1bb6 <regular_setup()+0xdca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    268e:	ldr	r2, [r5, #20]
    2690:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2692:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2696:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2698:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    269a:	adds	r0, #2
    269c:	ldr.w	fp, [r3, r4, lsl #3]
    26a0:	bl	fe7c <random(unsigned long)>
    26a4:	ldr	r3, [r5, #16]
    26a6:	rsb	r3, r3, fp
    26aa:	adds	r3, #1
    26ac:	subs	r0, r3, r0
    26ae:	str	r0, [r6, #0]
    26b0:	b.n	2674 <regular_setup()+0x1888>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    26b2:	movw	sl, #4636	; 0x121c
    26b6:	add.w	r3, r5, #28
    26ba:	movs	r7, #0
    26bc:	add.w	r9, r5, #4640	; 0x1220
    26c0:	add	sl, r5
    26c2:	str	r3, [sp, #4]
    26c4:	mov.w	r8, r7, lsl #3
    26c8:	ldr	r6, [sp, #4]
    26ca:	movs	r4, #0
    26cc:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    26d0:	ldrb	r2, [r5, #24]
      return _background[x][y];
    26d2:	add	r3, r4
    26d4:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    26d6:	cbnz	r2, 26dc <regular_setup()+0x18f0>
      return _background[x][y];
    } else {
      return !_background[x][y];
    26d8:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    26dc:	cbnz	r3, 26f8 <regular_setup()+0x190c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    26de:	adds	r4, #1
    26e0:	adds	r6, #4
    26e2:	cmp	r4, #24
    26e4:	bne.n	26cc <regular_setup()+0x18e0>
    26e6:	ldr	r3, [sp, #4]
    26e8:	adds	r7, #24
    26ea:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    26ec:	cmp.w	r7, #576	; 0x240
    26f0:	str	r3, [sp, #4]
    26f2:	bne.n	26c4 <regular_setup()+0x18d8>
    26f4:	b.w	119e <regular_setup()+0x3b2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    26f8:	ldr	r2, [r5, #20]
    26fa:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    26fc:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2700:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2702:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2704:	adds	r0, #2
    2706:	ldr.w	fp, [r3, r4, lsl #3]
    270a:	bl	fe7c <random(unsigned long)>
    270e:	ldr	r3, [r5, #16]
    2710:	rsb	r3, r3, fp
    2714:	adds	r3, #1
    2716:	subs	r0, r3, r0
    2718:	str	r0, [r6, #0]
    271a:	b.n	26de <regular_setup()+0x18f2>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    271c:	movw	sl, #4636	; 0x121c
    2720:	add.w	r3, r5, #28
    2724:	movs	r7, #0
    2726:	add.w	r9, r5, #4640	; 0x1220
    272a:	add	sl, r5
    272c:	str	r3, [sp, #4]
    272e:	mov.w	r8, r7, lsl #3
    2732:	ldr	r6, [sp, #4]
    2734:	movs	r4, #0
    2736:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    273a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    273c:	add	r3, r4
    273e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2740:	cbnz	r2, 2746 <regular_setup()+0x195a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2742:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2746:	cbnz	r3, 2768 <regular_setup()+0x197c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2748:	adds	r4, #1
    274a:	adds	r6, #4
    274c:	cmp	r4, #24
    274e:	bne.n	2736 <regular_setup()+0x194a>
    2750:	ldr	r3, [sp, #4]
    2752:	adds	r7, #24
    2754:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2756:	cmp.w	r7, #576	; 0x240
    275a:	str	r3, [sp, #4]
    275c:	bne.n	272e <regular_setup()+0x1942>
    275e:	add	sp, #12
    2760:	vpop	{d8-d9}
    2764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2768:	ldr	r2, [r5, #20]
    276a:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    276c:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2770:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2772:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2774:	adds	r0, #2
    2776:	ldr.w	fp, [r3, r4, lsl #3]
    277a:	bl	fe7c <random(unsigned long)>
    277e:	ldr	r3, [r5, #16]
    2780:	rsb	r3, r3, fp
    2784:	adds	r3, #1
    2786:	subs	r0, r3, r0
    2788:	str	r0, [r6, #0]
    278a:	b.n	2748 <regular_setup()+0x195c>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    278c:	movw	sl, #4636	; 0x121c
    2790:	add.w	r3, r5, #28
    2794:	movs	r7, #0
    2796:	add.w	r9, r5, #4640	; 0x1220
    279a:	add	sl, r5
    279c:	str	r3, [sp, #4]
    279e:	mov.w	r8, r7, lsl #3
    27a2:	ldr	r6, [sp, #4]
    27a4:	movs	r4, #0
    27a6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    27aa:	ldrb	r2, [r5, #24]
      return _background[x][y];
    27ac:	add	r3, r4
    27ae:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    27b0:	cbnz	r2, 27b6 <regular_setup()+0x19ca>
      return _background[x][y];
    } else {
      return !_background[x][y];
    27b2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    27b6:	cbnz	r3, 27d2 <regular_setup()+0x19e6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    27b8:	adds	r4, #1
    27ba:	adds	r6, #4
    27bc:	cmp	r4, #24
    27be:	bne.n	27a6 <regular_setup()+0x19ba>
    27c0:	ldr	r3, [sp, #4]
    27c2:	adds	r7, #24
    27c4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    27c6:	cmp.w	r7, #576	; 0x240
    27ca:	str	r3, [sp, #4]
    27cc:	bne.n	279e <regular_setup()+0x19b2>
    27ce:	b.w	1dfe <regular_setup()+0x1012>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    27d2:	ldr	r2, [r5, #20]
    27d4:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    27d6:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    27da:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    27dc:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    27de:	adds	r0, #2
    27e0:	ldr.w	fp, [r3, r4, lsl #3]
    27e4:	bl	fe7c <random(unsigned long)>
    27e8:	ldr	r3, [r5, #16]
    27ea:	rsb	r3, r3, fp
    27ee:	adds	r3, #1
    27f0:	subs	r0, r3, r0
    27f2:	str	r0, [r6, #0]
    27f4:	b.n	27b8 <regular_setup()+0x19cc>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    27f6:	movw	sl, #4636	; 0x121c
    27fa:	add.w	r3, r5, #28
    27fe:	movs	r7, #0
    2800:	add.w	r9, r5, #4640	; 0x1220
    2804:	add	sl, r5
    2806:	str	r3, [sp, #4]
    2808:	mov.w	r8, r7, lsl #3
    280c:	ldr	r6, [sp, #4]
    280e:	movs	r4, #0
    2810:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2814:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2816:	add	r3, r4
    2818:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    281a:	cbnz	r2, 2820 <regular_setup()+0x1a34>
      return _background[x][y];
    } else {
      return !_background[x][y];
    281c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2820:	cbnz	r3, 283c <regular_setup()+0x1a50>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2822:	adds	r4, #1
    2824:	adds	r6, #4
    2826:	cmp	r4, #24
    2828:	bne.n	2810 <regular_setup()+0x1a24>
    282a:	ldr	r3, [sp, #4]
    282c:	adds	r7, #24
    282e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2830:	cmp.w	r7, #576	; 0x240
    2834:	str	r3, [sp, #4]
    2836:	bne.n	2808 <regular_setup()+0x1a1c>
    2838:	b.w	1984 <regular_setup()+0xb98>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    283c:	ldr	r2, [r5, #20]
    283e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2840:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2844:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2846:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2848:	adds	r0, #2
    284a:	ldr.w	fp, [r3, r4, lsl #3]
    284e:	bl	fe7c <random(unsigned long)>
    2852:	ldr	r3, [r5, #16]
    2854:	rsb	r3, r3, fp
    2858:	adds	r3, #1
    285a:	subs	r0, r3, r0
    285c:	str	r0, [r6, #0]
    285e:	b.n	2822 <regular_setup()+0x1a36>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2860:	movw	sl, #4636	; 0x121c
    2864:	add.w	r3, r5, #28
    2868:	movs	r7, #0
    286a:	add.w	r9, r5, #4640	; 0x1220
    286e:	add	sl, r5
    2870:	str	r3, [sp, #4]
    2872:	mov.w	r8, r7, lsl #3
    2876:	ldr	r6, [sp, #4]
    2878:	movs	r4, #0
    287a:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    287e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2880:	add	r3, r4
    2882:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2884:	cbnz	r2, 288a <regular_setup()+0x1a9e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2886:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    288a:	cbnz	r3, 28a6 <regular_setup()+0x1aba>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    288c:	adds	r4, #1
    288e:	adds	r6, #4
    2890:	cmp	r4, #24
    2892:	bne.n	287a <regular_setup()+0x1a8e>
    2894:	ldr	r3, [sp, #4]
    2896:	adds	r7, #24
    2898:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    289a:	cmp.w	r7, #576	; 0x240
    289e:	str	r3, [sp, #4]
    28a0:	bne.n	2872 <regular_setup()+0x1a86>
    28a2:	b.w	1624 <regular_setup()+0x838>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    28a6:	ldr	r2, [r5, #20]
    28a8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    28aa:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    28ae:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    28b0:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    28b2:	adds	r0, #2
    28b4:	ldr.w	fp, [r3, r4, lsl #3]
    28b8:	bl	fe7c <random(unsigned long)>
    28bc:	ldr	r3, [r5, #16]
    28be:	rsb	r3, r3, fp
    28c2:	adds	r3, #1
    28c4:	subs	r0, r3, r0
    28c6:	str	r0, [r6, #0]
    28c8:	b.n	288c <regular_setup()+0x1aa0>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    28ca:	bl	10610 <sqrt>
    28ce:	vmov.f64	d7, d0
    28d2:	b.w	10d4 <regular_setup()+0x2e8>
    28d6:	bl	10610 <sqrt>
    28da:	vmov.f64	d7, d0
    28de:	b.n	2118 <regular_setup()+0x132c>
    28e0:	bl	10610 <sqrt>
    28e4:	vmov.f64	d7, d0
    28e8:	b.w	1f0a <regular_setup()+0x111e>
    28ec:	bl	10610 <sqrt>
    28f0:	vmov.f64	d7, d0
    28f4:	b.w	1c5e <regular_setup()+0xe72>
    28f8:	bl	10610 <sqrt>
    28fc:	vmov.f64	d7, d0
    2900:	b.w	1a82 <regular_setup()+0xc96>
    2904:	bl	10610 <sqrt>
    2908:	vmov.f64	d7, d0
    290c:	b.w	184e <regular_setup()+0xa62>
    2910:	bl	10610 <sqrt>
    2914:	vmov.f64	d7, d0
    2918:	b.w	14f0 <regular_setup()+0x704>
    291c:	bl	10610 <sqrt>
    2920:	vmov.f64	d7, d0
    2924:	b.w	1246 <regular_setup()+0x45a>

00002928 <updateScreensFade()>:
  renderInterrupt(); 
}


void updateScreensFade() {
  if(screenFadeUpdateSwitcher){
    2928:	ldr	r3, [pc, #700]	; (2be8 <updateScreensFade()+0x2c0>)
    292a:	ldrb	r3, [r3, #0]
 
  renderInterrupt(); 
}


void updateScreensFade() {
    292c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2930:	vpush	{d8}
    2934:	sub	sp, #28
  if(screenFadeUpdateSwitcher){
    2936:	cmp	r3, #0
    2938:	beq.w	2c04 <updateScreensFade()+0x2dc>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    293c:	ldr	r3, [pc, #684]	; (2bec <updateScreensFade()+0x2c4>)
    293e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2940:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2942:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2944:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2946:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2948:	ldr	r6, [pc, #672]	; (2bec <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    294a:	cmp	r3, r1
    294c:	it	eq
    294e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2950:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2952:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2954:	ite	eq
    2956:	moveq	r5, #1
    2958:	movne	r5, #0
    295a:	cmp	r5, #0
    295c:	beq.n	2944 <updateScreensFade()+0x1c>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    295e:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2960:	ldr.w	r8, [pc, #652]	; 2bf0 <updateScreensFade()+0x2c8>
    2964:	orr.w	r1, r1, r2, lsl #27
    2968:	ldr.w	r3, [r8, #476]	; 0x1dc
    296c:	vmov	s15, r1
    2970:	vldr	d5, [pc, #620]	; 2be0 <updateScreensFade()+0x2b8>
    2974:	vcvt.f64.u32	d7, s15
    2978:	vdiv.f64	d6, d7, d5
    297c:	vcvt.u32.f64	s12, d6
    2980:	vmov	r2, s12
    2984:	subs	r3, r2, r3
    2986:	cmp	r3, #49	; 0x31
    2988:	bls.w	2bd0 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    298c:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    298e:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2990:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2992:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2994:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2996:	ldr	r4, [pc, #596]	; (2bec <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2998:	cmp	r3, r1
    299a:	it	eq
    299c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    299e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    29a0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    29a2:	ite	eq
    29a4:	moveq	r6, #1
    29a6:	movne	r6, #0
    29a8:	cmp	r6, #0
    29aa:	beq.n	2992 <updateScreensFade()+0x6a>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    29ac:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    29ae:	vmov.f32	s11, #112	; 0x3f800000  1.0
    29b2:	vldr	s10, [r8, #468]	; 0x1d4
    29b6:	orr.w	r1, r1, r2, lsl #27
    29ba:	ldr	r7, [pc, #564]	; (2bf0 <updateScreensFade()+0x2c8>)
    29bc:	vcmpe.f32	s10, s11
    29c0:	vmov	s15, r1
    29c4:	vldr	d4, [pc, #536]	; 2be0 <updateScreensFade()+0x2b8>
    29c8:	vcvt.f64.u32	d7, s15
    29cc:	vmrs	APSR_nzcv, fpscr
    29d0:	vdiv.f64	d6, d7, d4
    29d4:	vcvt.u32.f64	s12, d6
    29d8:	vstr	s12, [r8, #476]	; 0x1dc
    29dc:	blt.w	2e8c <updateScreensFade()+0x564>
      		
			if (newFrameReady) {
    29e0:	ldrb.w	r1, [r7, #460]	; 0x1cc
    29e4:	cmp	r1, #0
    29e6:	beq.w	2bb0 <updateScreensFade()+0x288>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29ea:	movs	r1, #0
    29ec:	ldr	r0, [pc, #516]	; (2bf4 <updateScreensFade()+0x2cc>)
    29ee:	bl	10214 <Print::print(long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    29f2:	movs	r1, #15
    29f4:	ldr	r0, [pc, #512]	; (2bf8 <updateScreensFade()+0x2d0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    29f6:	mov	r6, r4
    29f8:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    29fc:	ldr	r0, [pc, #500]	; (2bf4 <updateScreensFade()+0x2cc>)
    29fe:	bl	10174 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    2a02:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2a06:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2a0a:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2a0e:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    2a10:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    2a14:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2a16:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2a1a:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2a1e:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2a20:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2a22:	cmp	r3, r4
    2a24:	it	eq
    2a26:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2a28:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2a2a:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2a2c:	ite	eq
    2a2e:	moveq	r7, #1
    2a30:	movne	r7, #0
    2a32:	cmp	r7, #0
    2a34:	beq.n	2a1e <updateScreensFade()+0xf6>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    2a36:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    2a38:	movs	r3, #0
    2a3a:	orr.w	r4, r4, r1, lsl #27
    2a3e:	strb.w	r3, [r8, #460]	; 0x1cc
    2a42:	vmov	s15, r4
    2a46:	vldr	d5, [pc, #408]	; 2be0 <updateScreensFade()+0x2b8>
    2a4a:	vcvt.f64.u32	d7, s15
    2a4e:	vdiv.f64	d6, d7, d5
    2a52:	vcvt.u32.f64	s15, d6
    2a56:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    2a5a:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2a5e:	ldr	r3, [pc, #396]	; (2bec <updateScreensFade()+0x2c4>)
    2a60:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2a62:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2a64:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2a66:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2a68:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2a6a:	cmp	r3, r4
    2a6c:	it	eq
    2a6e:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2a70:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2a72:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2a74:	ite	eq
    2a76:	moveq	r6, #1
    2a78:	movne	r6, #0
    2a7a:	cmp	r6, #0
    2a7c:	beq.n	2a66 <updateScreensFade()+0x13e>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2a7e:	lsrs	r4, r3, #5
    2a80:	vldr	s10, [pc, #376]	; 2bfc <updateScreensFade()+0x2d4>
    2a84:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    2a88:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2a8a:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2a8e:	ldr	r5, [pc, #352]	; (2bf0 <updateScreensFade()+0x2c8>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2a90:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2a92:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2a96:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2a9a:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2a9c:	vcvt.f64.u32	d7, s15
    2aa0:	vldr	d4, [pc, #316]	; 2be0 <updateScreensFade()+0x2b8>
    2aa4:	vdiv.f64	d6, d7, d4
    2aa8:	vcvt.u32.f64	s14, d6
    2aac:	vmov	r3, s14
    2ab0:	rsb	r6, lr, r3
    2ab4:	vmov	s15, r6
    2ab8:	vcvt.f32.u32	s14, s15
    2abc:	vdiv.f32	s15, s14, s10
    2ac0:	vcmpe.f32	s15, s11
    2ac4:	vmrs	APSR_nzcv, fpscr
    2ac8:	it	pl
    2aca:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    2ace:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2ad2:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2ad6:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2ad8:	lsls	r6, r6, #3
    2ada:	b.n	2ae8 <updateScreensFade()+0x1c0>
    2adc:	ldr.w	r2, [r5, #488]	; 0x1e8
    2ae0:	vldr	s15, [r5, #468]	; 0x1d4
    2ae4:	ldr.w	r0, [r5, #492]	; 0x1ec
    2ae8:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2aec:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2af0:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2af2:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2af4:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2af6:	ldr.w	r9, [pc, #248]	; 2bf0 <updateScreensFade()+0x2c8>
    2afa:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2afc:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2b00:	ldrb	r0, [r0, r3]
    2b02:	vmov	s14, r0
    2b06:	ldrb.w	r0, [lr, #2]
    2b0a:	ldrb.w	lr, [lr, #1]
    2b0e:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2b12:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2b14:	vmov	s13, lr
    2b18:	ldrb	r3, [r2, r3]
    2b1a:	ldrb.w	lr, [r0, #2]
    2b1e:	vcvt.f32.s32	s12, s12
    2b22:	vcvt.f32.s32	s13, s13
    2b26:	vmov	s10, r3
    2b2a:	vmov	s8, lr
    2b2e:	ldrb	r3, [r0, #1]
    2b30:	vcvt.f32.s32	s14, s14
    2b34:	ldr.w	r0, [r8, #448]	; 0x1c0
    2b38:	vmul.f32	s13, s13, s15
    2b3c:	vmov	s9, r3
    2b40:	vcvt.f32.s32	s8, s8
    2b44:	vmul.f32	s12, s12, s15
    2b48:	vcvt.f32.s32	s9, s9
    2b4c:	vmul.f32	s15, s14, s15
    2b50:	vcvt.f32.s32	s10, s10
    2b54:	vmov.f32	s14, s13
    2b58:	vfma.f32	s12, s11, s8
    2b5c:	vfma.f32	s15, s10, s11
    2b60:	vfma.f32	s14, s11, s9
    2b64:	vcvt.s32.f32	s13, s12
    2b68:	vcvt.s32.f32	s15, s15
    2b6c:	vcvt.s32.f32	s14, s14
    2b70:	vstr	s13, [sp, #20]
    2b74:	ldrb.w	r2, [sp, #20]
    2b78:	vstr	s14, [sp, #12]
    2b7c:	vstr	s15, [sp, #16]
    2b80:	str	r2, [sp, #0]
    2b82:	ldrb.w	r3, [sp, #12]
    2b86:	ldrb.w	r2, [sp, #16]
    2b8a:	bl	ddc8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2b8e:	cmp	r4, #24
    2b90:	bne.n	2adc <updateScreensFade()+0x1b4>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2b92:	add.w	sl, sl, #1
    2b96:	adds	r7, #24
    2b98:	cmp.w	sl, #24
    2b9c:	uxth	r7, r7
    2b9e:	beq.w	2e74 <updateScreensFade()+0x54c>
    2ba2:	ldr.w	r2, [fp, #488]	; 0x1e8
    2ba6:	vldr	s15, [fp, #468]	; 0x1d4
    2baa:	ldr.w	r0, [fp, #492]	; 0x1ec
    2bae:	b.n	2ad2 <updateScreensFade()+0x1aa>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bb0:	ldr	r0, [pc, #64]	; (2bf4 <updateScreensFade()+0x2cc>)
    2bb2:	bl	10214 <Print::print(long)>
    2bb6:	movs	r1, #22
    2bb8:	ldr	r0, [pc, #68]	; (2c00 <updateScreensFade()+0x2d8>)
    2bba:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2bbe:	ldr	r0, [pc, #52]	; (2bf4 <updateScreensFade()+0x2cc>)
    2bc0:	bl	10174 <Print::println()>
    if(screen_A.updateFade(0)) screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }else{
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
    2bc4:	ldr	r3, [pc, #32]	; (2be8 <updateScreensFade()+0x2c0>)
    2bc6:	ldr	r2, [pc, #32]	; (2be8 <updateScreensFade()+0x2c0>)
    2bc8:	ldrb	r3, [r3, #0]
    2bca:	eor.w	r3, r3, #1
    2bce:	strb	r3, [r2, #0]
  }
}
    2bd0:	add	sp, #28
    2bd2:	vpop	{d8}
    2bd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bda:	nop
    2bdc:	nop.w
    2be0:	.word	0xd2f1a9fc
    2be4:	.word	0x3ff0624d
    2be8:	.word	0x2000178d
    2bec:	.word	0x400d4000
    2bf0:	.word	0x20004e0c
    2bf4:	.word	0x20000f10
    2bf8:	.word	0x20000174
    2bfc:	.word	0x44160000
    2c00:	.word	0x20000184
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2c04:	ldr	r3, [pc, #672]	; (2ea8 <updateScreensFade()+0x580>)
    2c06:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c08:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2c0a:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c0c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2c0e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c10:	ldr	r6, [pc, #660]	; (2ea8 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2c12:	cmp	r3, r1
    2c14:	it	eq
    2c16:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c18:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2c1a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2c1c:	ite	eq
    2c1e:	moveq	r5, #1
    2c20:	movne	r5, #0
    2c22:	cmp	r5, #0
    2c24:	beq.n	2c0c <updateScreensFade()+0x2e4>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2c26:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2c28:	ldr.w	r8, [pc, #640]	; 2eac <updateScreensFade()+0x584>
    2c2c:	orr.w	r1, r1, r2, lsl #27
    2c30:	ldr.w	r3, [r8, #476]	; 0x1dc
    2c34:	vmov	s15, r1
    2c38:	vldr	d5, [pc, #612]	; 2ea0 <updateScreensFade()+0x578>
    2c3c:	vcvt.f64.u32	d7, s15
    2c40:	vdiv.f64	d6, d7, d5
    2c44:	vcvt.u32.f64	s12, d6
    2c48:	vmov	r2, s12
    2c4c:	subs	r3, r2, r3
    2c4e:	cmp	r3, #49	; 0x31
    2c50:	bls.n	2bd0 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2c52:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c54:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2c56:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c58:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2c5a:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c5c:	ldr	r4, [pc, #584]	; (2ea8 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2c5e:	cmp	r3, r1
    2c60:	it	eq
    2c62:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2c64:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2c66:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2c68:	ite	eq
    2c6a:	moveq	r6, #1
    2c6c:	movne	r6, #0
    2c6e:	cmp	r6, #0
    2c70:	beq.n	2c58 <updateScreensFade()+0x330>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2c72:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2c74:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2c78:	vldr	s10, [r8, #468]	; 0x1d4
    2c7c:	orr.w	r1, r1, r2, lsl #27
    2c80:	ldr	r7, [pc, #552]	; (2eac <updateScreensFade()+0x584>)
    2c82:	vcmpe.f32	s10, s11
    2c86:	vmov	s15, r1
    2c8a:	vldr	d4, [pc, #532]	; 2ea0 <updateScreensFade()+0x578>
    2c8e:	vcvt.f64.u32	d7, s15
    2c92:	vmrs	APSR_nzcv, fpscr
    2c96:	vdiv.f64	d6, d7, d4
    2c9a:	vcvt.u32.f64	s12, d6
    2c9e:	vstr	s12, [r8, #476]	; 0x1dc
    2ca2:	blt.w	2e7e <updateScreensFade()+0x556>
      		
			if (newFrameReady) {
    2ca6:	ldrb.w	r3, [r7, #460]	; 0x1cc
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2caa:	movs	r1, #1
    2cac:	ldr	r0, [pc, #512]	; (2eb0 <updateScreensFade()+0x588>)
    2cae:	cmp	r3, #0
    2cb0:	beq.w	2bb2 <updateScreensFade()+0x28a>
    2cb4:	bl	10214 <Print::print(long)>
    2cb8:	movs	r1, #15
    2cba:	ldr	r0, [pc, #504]	; (2eb4 <updateScreensFade()+0x58c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cbc:	mov	r6, r4
    2cbe:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2cc2:	ldr	r0, [pc, #492]	; (2eb0 <updateScreensFade()+0x588>)
    2cc4:	bl	10174 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    2cc8:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2ccc:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2cd0:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2cd4:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    2cd6:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    2cda:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2cdc:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2ce0:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ce4:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2ce6:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2ce8:	cmp	r3, r4
    2cea:	it	eq
    2cec:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cee:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2cf0:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2cf2:	ite	eq
    2cf4:	moveq	r7, #1
    2cf6:	movne	r7, #0
    2cf8:	cmp	r7, #0
    2cfa:	beq.n	2ce4 <updateScreensFade()+0x3bc>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    2cfc:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    2cfe:	movs	r3, #0
    2d00:	orr.w	r4, r4, r1, lsl #27
    2d04:	strb.w	r3, [r8, #460]	; 0x1cc
    2d08:	vmov	s15, r4
    2d0c:	vldr	d5, [pc, #400]	; 2ea0 <updateScreensFade()+0x578>
    2d10:	vcvt.f64.u32	d7, s15
    2d14:	vdiv.f64	d6, d7, d5
    2d18:	vcvt.u32.f64	s15, d6
    2d1c:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    2d20:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2d24:	ldr	r3, [pc, #384]	; (2ea8 <updateScreensFade()+0x580>)
    2d26:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d28:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2d2a:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d2c:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2d2e:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2d30:	cmp	r3, r4
    2d32:	it	eq
    2d34:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d36:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2d38:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d3a:	ite	eq
    2d3c:	moveq	r6, #1
    2d3e:	movne	r6, #0
    2d40:	cmp	r6, #0
    2d42:	beq.n	2d2c <updateScreensFade()+0x404>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2d44:	lsrs	r4, r3, #5
    2d46:	vldr	s10, [pc, #368]	; 2eb8 <updateScreensFade()+0x590>
    2d4a:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    2d4e:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2d50:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2d54:	ldr	r5, [pc, #340]	; (2eac <updateScreensFade()+0x584>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2d56:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2d58:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2d5c:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2d60:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2d62:	vcvt.f64.u32	d7, s15
    2d66:	vldr	d4, [pc, #312]	; 2ea0 <updateScreensFade()+0x578>
    2d6a:	vdiv.f64	d6, d7, d4
    2d6e:	vcvt.u32.f64	s14, d6
    2d72:	vmov	r3, s14
    2d76:	rsb	r6, lr, r3
    2d7a:	vmov	s15, r6
    2d7e:	vcvt.f32.u32	s14, s15
    2d82:	vdiv.f32	s15, s14, s10
    2d86:	vcmpe.f32	s15, s11
    2d8a:	vmrs	APSR_nzcv, fpscr
    2d8e:	it	pl
    2d90:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    2d94:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2d98:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2d9c:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2d9e:	lsls	r6, r6, #3
    2da0:	b.n	2dae <updateScreensFade()+0x486>
    2da2:	ldr.w	r2, [r5, #488]	; 0x1e8
    2da6:	vldr	s15, [r5, #468]	; 0x1d4
    2daa:	ldr.w	r0, [r5, #492]	; 0x1ec
    2dae:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2db2:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2db6:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2db8:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2dba:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dbc:	ldr.w	r9, [pc, #236]	; 2eac <updateScreensFade()+0x584>
    2dc0:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2dc2:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dc6:	ldrb	r0, [r0, r3]
    2dc8:	vmov	s14, r0
    2dcc:	ldrb.w	r0, [lr, #2]
    2dd0:	ldrb.w	lr, [lr, #1]
    2dd4:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2dd8:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dda:	vmov	s13, lr
    2dde:	ldrb	r3, [r2, r3]
    2de0:	ldrb.w	lr, [r0, #2]
    2de4:	vcvt.f32.s32	s12, s12
    2de8:	vcvt.f32.s32	s13, s13
    2dec:	vmov	s10, r3
    2df0:	vmov	s8, lr
    2df4:	ldrb	r3, [r0, #1]
    2df6:	vcvt.f32.s32	s14, s14
    2dfa:	ldr.w	r0, [r8, #448]	; 0x1c0
    2dfe:	vmul.f32	s13, s13, s15
    2e02:	vmov	s9, r3
    2e06:	vcvt.f32.s32	s8, s8
    2e0a:	vmul.f32	s12, s12, s15
    2e0e:	vcvt.f32.s32	s9, s9
    2e12:	vmul.f32	s15, s14, s15
    2e16:	vcvt.f32.s32	s10, s10
    2e1a:	vmov.f32	s14, s13
    2e1e:	vfma.f32	s12, s11, s8
    2e22:	vfma.f32	s15, s10, s11
    2e26:	vfma.f32	s14, s11, s9
    2e2a:	vcvt.s32.f32	s13, s12
    2e2e:	vcvt.s32.f32	s15, s15
    2e32:	vcvt.s32.f32	s14, s14
    2e36:	vstr	s13, [sp, #20]
    2e3a:	ldrb.w	r2, [sp, #20]
    2e3e:	vstr	s14, [sp, #12]
    2e42:	vstr	s15, [sp, #16]
    2e46:	str	r2, [sp, #0]
    2e48:	ldrb.w	r3, [sp, #12]
    2e4c:	ldrb.w	r2, [sp, #16]
    2e50:	bl	ddc8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2e54:	cmp	r4, #24
    2e56:	bne.n	2da2 <updateScreensFade()+0x47a>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2e58:	add.w	sl, sl, #1
    2e5c:	adds	r7, #24
    2e5e:	cmp.w	sl, #24
    2e62:	uxth	r7, r7
    2e64:	beq.n	2e74 <updateScreensFade()+0x54c>
    2e66:	ldr.w	r2, [fp, #488]	; 0x1e8
    2e6a:	vldr	s15, [fp, #468]	; 0x1d4
    2e6e:	ldr.w	r0, [fp, #492]	; 0x1ec
    2e72:	b.n	2d98 <updateScreensFade()+0x470>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    2e74:	ldr.w	r0, [r9, #448]	; 0x1c0
    2e78:	bl	db80 <Adafruit_NeoPixel::show()>
    2e7c:	b.n	2bc4 <updateScreensFade()+0x29c>
    2e7e:	ldr.w	lr, [r7, #472]	; 0x1d8
    2e82:	ldr.w	r2, [r7, #488]	; 0x1e8
    2e86:	ldr.w	r0, [r7, #492]	; 0x1ec
    2e8a:	b.n	2d24 <updateScreensFade()+0x3fc>
    2e8c:	ldr.w	lr, [r7, #472]	; 0x1d8
    2e90:	ldr.w	r2, [r7, #488]	; 0x1e8
    2e94:	ldr.w	r0, [r7, #492]	; 0x1ec
    2e98:	b.n	2a5e <updateScreensFade()+0x136>
    2e9a:	nop
    2e9c:	nop.w
    2ea0:	.word	0xd2f1a9fc
    2ea4:	.word	0x3ff0624d
    2ea8:	.word	0x400d4000
    2eac:	.word	0x20005000
    2eb0:	.word	0x20000f10
    2eb4:	.word	0x20000174
    2eb8:	.word	0x44160000

00002ebc <Screen::iterate_animation() [clone .part.20]>:
		interpolate_colors();
		_screen->show();
		return true;
	}

	void iterate_animation(){
    2ebc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    2ec0:	movs	r3, #2
    2ec2:	sub	sp, #68	; 0x44
		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
    2ec4:	ldr.w	r9, [r0, #436]	; 0x1b4
    2ec8:	movs	r2, #32
    2eca:	str	r3, [sp, #4]
		interpolate_colors();
		_screen->show();
		return true;
	}

	void iterate_animation(){
    2ecc:	mov	fp, r0
    2ece:	addw	r3, r9, #2428	; 0x97c
    2ed2:	movs	r1, #0
    2ed4:	ldr.w	sl, [pc, #1608]	; 3520 <Screen::iterate_animation() [clone .part.20]+0x664>
    2ed8:	add.w	r0, sp, r2
    2edc:	str	r3, [sp, #12]
    2ede:	add.w	r3, r9, #4640	; 0x1220
    2ee2:	str	r1, [sp, #20]
    2ee4:	str	r3, [sp, #24]
    2ee6:	bl	10f7c <memset>
    2eea:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
    2eee:	bl	800 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2ef2:	movs	r7, #2
  updateScreensFade();
    2ef4:	bl	2928 <updateScreensFade()>
    2ef8:	ldrb.w	r2, [r9, #24]
    2efc:	ldr	r3, [sp, #24]
    2efe:	str	r2, [sp, #16]
    2f00:	ldr	r3, [r3, #0]
    2f02:	ldr	r2, [sp, #20]
    2f04:	ldr	r1, [sp, #12]
    2f06:	add.w	r8, r3, r2
    2f0a:	sub.w	ip, r1, #96	; 0x60
    2f0e:	sub.w	r3, r1, #2400	; 0x960
    2f12:	mov	fp, r8
    2f14:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2f16:	ldr	r3, [sp, #16]
    2f18:	cmp	r3, #0
    2f1a:	beq.w	3358 <Screen::iterate_animation() [clone .part.20]+0x49c>
      return _background[x][y];
    2f1e:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    2f22:	cmp	r3, #0
    2f24:	beq.n	2ffa <Screen::iterate_animation() [clone .part.20]+0x13e>
    2f26:	ldr	r3, [sp, #4]
    2f28:	add.w	lr, sp, #32
    2f2c:	subs	r6, r3, #3
    2f2e:	subs	r3, r7, #3
    2f30:	str	r3, [sp, #8]
    2f32:	smull	r3, r2, sl, r6
    2f36:	asrs	r3, r6, #31
    2f38:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2f3a:	mov	r5, lr
    2f3c:	rsb	r3, r3, r2, asr #2
    2f40:	add.w	r3, r3, r3, lsl #1
    2f44:	sub.w	r3, r6, r3, lsl #3
    2f48:	adds	r3, #24
    2f4a:	smull	r2, r1, sl, r3
    2f4e:	asrs	r2, r3, #31
    2f50:	rsb	r2, r2, r1, asr #2
    2f54:	add.w	r2, r2, r2, lsl #1
    2f58:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2f5c:	add.w	r2, r2, r2, lsl #1
    2f60:	lsls	r4, r2, #3
    2f62:	smull	r3, r2, sl, r0
    2f66:	asrs	r3, r0, #31
    2f68:	rsb	r3, r3, r2, asr #2
    2f6c:	add.w	r3, r3, r3, lsl #1
    2f70:	sub.w	r3, r0, r3, lsl #3
    2f74:	adds	r0, #1
    2f76:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2f78:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2f7a:	smull	r2, r1, sl, r3
    2f7e:	mov.w	r2, r3, asr #31
    2f82:	rsb	r2, r2, r1, asr #2
    2f86:	add.w	r2, r2, r2, lsl #1
    2f8a:	sub.w	r3, r3, r2, lsl #3
    2f8e:	add	r3, r4
    2f90:	add.w	r3, r9, r3, lsl #2
    2f94:	ldr	r3, [r3, #28]
    2f96:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2f9a:	bne.n	2f62 <Screen::iterate_animation() [clone .part.20]+0xa6>
    2f9c:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    2f9e:	ldr	r3, [sp, #4]
    2fa0:	add.w	lr, lr, #12
    2fa4:	cmp	r3, r6
    2fa6:	bne.n	2f32 <Screen::iterate_animation() [clone .part.20]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2fa8:	ldr	r3, [sp, #0]
    2faa:	movs	r0, #1
    2fac:	ldr	r1, [r3, #0]
    2fae:	ldr.w	r3, [r9]
    2fb2:	adds	r5, r1, r3
    2fb4:	movs	r4, #0
    2fb6:	mov	r3, r4
    2fb8:	b.n	2fc0 <Screen::iterate_animation() [clone .part.20]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2fba:	adds	r3, #1
    2fbc:	cmp	r3, #8
    2fbe:	beq.n	2fd6 <Screen::iterate_animation() [clone .part.20]+0x11a>
          if ((i >> j) % 2 == 1){
    2fc0:	asr.w	r2, r0, r3
    2fc4:	lsls	r6, r2, #31
    2fc6:	bpl.n	2fba <Screen::iterate_animation() [clone .part.20]+0xfe>
            sum += neighbours[j];
    2fc8:	add	r2, sp, #32
    2fca:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2fce:	adds	r3, #1
    2fd0:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    2fd2:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2fd4:	bne.n	2fc0 <Screen::iterate_animation() [clone .part.20]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    2fd6:	cmp	r5, r4
    2fd8:	beq.w	3362 <Screen::iterate_animation() [clone .part.20]+0x4a6>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    2fdc:	adds	r0, #1
    2fde:	cmp.w	r0, #256	; 0x100
    2fe2:	bne.n	2fb4 <Screen::iterate_animation() [clone .part.20]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    2fe4:	ldr.w	r3, [r9, #8]
    2fe8:	subs	r1, r1, r3
    2fea:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    2fee:	ldr.w	r3, [r9, #12]
    2ff2:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    2ff4:	it	gt
    2ff6:	strgt.w	r3, [ip]
    2ffa:	ldr	r3, [sp, #0]
    2ffc:	add.w	ip, ip, #4
    3000:	adds	r7, #1
    3002:	add.w	r8, r8, #1
    3006:	adds	r3, #4
    3008:	add.w	fp, fp, #1
    300c:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    300e:	ldr	r3, [sp, #12]
    3010:	cmp	r3, ip
    3012:	bne.n	2f16 <Screen::iterate_animation() [clone .part.20]+0x5a>
    3014:	ldr	r2, [sp, #12]
    3016:	ldr	r3, [sp, #20]
    3018:	adds	r2, #96	; 0x60
    301a:	adds	r3, #24
    301c:	str	r2, [sp, #12]
    301e:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3020:	cmp.w	r3, #576	; 0x240
    3024:	str	r3, [sp, #20]
    3026:	add.w	r2, r2, #1
    302a:	str	r2, [sp, #4]
    302c:	bne.w	2eee <Screen::iterate_animation() [clone .part.20]+0x32>
    3030:	movw	r5, #4632	; 0x1218
    3034:	ldr.w	fp, [sp, #28]
    3038:	addw	r4, r9, #2328	; 0x918
    303c:	add	r5, r9
    303e:	sub.w	r3, r4, #2304	; 0x900
    3042:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3046:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3048:	ldr.w	r1, [r2, #4]!
    304c:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3050:	cmp	r0, r3
    3052:	bne.n	3048 <Screen::iterate_animation() [clone .part.20]+0x18c>
    3054:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3056:	cmp	r5, r4
    3058:	bne.n	303e <Screen::iterate_animation() [clone .part.20]+0x182>
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    305a:	ldr.w	r9, [fp, #432]	; 0x1b0
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    305e:	movs	r3, #2
    3060:	movs	r2, #32
    3062:	movs	r1, #0
    3064:	str	r3, [sp, #4]
    3066:	addw	r3, r9, #2428	; 0x97c
    306a:	ldr.w	sl, [pc, #1204]	; 3520 <Screen::iterate_animation() [clone .part.20]+0x664>
    306e:	add.w	r0, sp, r2
    3072:	str	r3, [sp, #12]
    3074:	add.w	r3, r9, #4640	; 0x1220
    3078:	str	r1, [sp, #20]
    307a:	str	r3, [sp, #24]
    307c:	bl	10f7c <memset>
    3080:	str.w	fp, [sp, #28]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3084:	bl	800 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3088:	movs	r7, #2
  updateScreensFade();
    308a:	bl	2928 <updateScreensFade()>
    308e:	ldrb.w	r2, [r9, #24]
    3092:	ldr	r3, [sp, #24]
    3094:	str	r2, [sp, #16]
    3096:	ldr	r3, [r3, #0]
    3098:	ldr	r2, [sp, #20]
    309a:	ldr	r1, [sp, #12]
    309c:	add.w	r8, r3, r2
    30a0:	sub.w	ip, r1, #96	; 0x60
    30a4:	sub.w	r3, r1, #2400	; 0x960
    30a8:	mov	fp, r8
    30aa:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    30ac:	ldr	r3, [sp, #16]
    30ae:	cmp	r3, #0
    30b0:	beq.w	336e <Screen::iterate_animation() [clone .part.20]+0x4b2>
      return _background[x][y];
    30b4:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    30b8:	cmp	r3, #0
    30ba:	beq.n	3190 <Screen::iterate_animation() [clone .part.20]+0x2d4>
    30bc:	ldr	r3, [sp, #4]
    30be:	add.w	lr, sp, #32
    30c2:	subs	r6, r3, #3
    30c4:	subs	r3, r7, #3
    30c6:	str	r3, [sp, #8]
    30c8:	smull	r3, r2, sl, r6
    30cc:	asrs	r3, r6, #31
    30ce:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    30d0:	mov	r5, lr
    30d2:	rsb	r3, r3, r2, asr #2
    30d6:	add.w	r3, r3, r3, lsl #1
    30da:	sub.w	r3, r6, r3, lsl #3
    30de:	adds	r3, #24
    30e0:	smull	r2, r1, sl, r3
    30e4:	asrs	r2, r3, #31
    30e6:	rsb	r2, r2, r1, asr #2
    30ea:	add.w	r2, r2, r2, lsl #1
    30ee:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    30f2:	add.w	r2, r2, r2, lsl #1
    30f6:	lsls	r4, r2, #3
    30f8:	smull	r3, r2, sl, r0
    30fc:	asrs	r3, r0, #31
    30fe:	rsb	r3, r3, r2, asr #2
    3102:	add.w	r3, r3, r3, lsl #1
    3106:	sub.w	r3, r0, r3, lsl #3
    310a:	adds	r0, #1
    310c:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    310e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3110:	smull	r2, r1, sl, r3
    3114:	mov.w	r2, r3, asr #31
    3118:	rsb	r2, r2, r1, asr #2
    311c:	add.w	r2, r2, r2, lsl #1
    3120:	sub.w	r3, r3, r2, lsl #3
    3124:	add	r3, r4
    3126:	add.w	r3, r9, r3, lsl #2
    312a:	ldr	r3, [r3, #28]
    312c:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    3130:	bne.n	30f8 <Screen::iterate_animation() [clone .part.20]+0x23c>
    3132:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    3134:	ldr	r3, [sp, #4]
    3136:	add.w	lr, lr, #12
    313a:	cmp	r3, r6
    313c:	bne.n	30c8 <Screen::iterate_animation() [clone .part.20]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    313e:	ldr	r3, [sp, #0]
    3140:	movs	r0, #1
    3142:	ldr	r1, [r3, #0]
    3144:	ldr.w	r3, [r9]
    3148:	adds	r5, r1, r3
    314a:	movs	r4, #0
    314c:	mov	r3, r4
    314e:	b.n	3156 <Screen::iterate_animation() [clone .part.20]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3150:	adds	r3, #1
    3152:	cmp	r3, #8
    3154:	beq.n	316c <Screen::iterate_animation() [clone .part.20]+0x2b0>
          if ((i >> j) % 2 == 1){
    3156:	asr.w	r2, r0, r3
    315a:	lsls	r2, r2, #31
    315c:	bpl.n	3150 <Screen::iterate_animation() [clone .part.20]+0x294>
            sum += neighbours[j];
    315e:	add	r2, sp, #32
    3160:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3164:	adds	r3, #1
    3166:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3168:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    316a:	bne.n	3156 <Screen::iterate_animation() [clone .part.20]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    316c:	cmp	r5, r4
    316e:	beq.w	3378 <Screen::iterate_animation() [clone .part.20]+0x4bc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3172:	adds	r0, #1
    3174:	cmp.w	r0, #256	; 0x100
    3178:	bne.n	314a <Screen::iterate_animation() [clone .part.20]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    317a:	ldr.w	r3, [r9, #8]
    317e:	subs	r1, r1, r3
    3180:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    3184:	ldr.w	r3, [r9, #12]
    3188:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    318a:	it	gt
    318c:	strgt.w	r3, [ip]
    3190:	ldr	r3, [sp, #0]
    3192:	add.w	ip, ip, #4
    3196:	adds	r7, #1
    3198:	add.w	r8, r8, #1
    319c:	adds	r3, #4
    319e:	add.w	fp, fp, #1
    31a2:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    31a4:	ldr	r3, [sp, #12]
    31a6:	cmp	r3, ip
    31a8:	bne.n	30ac <Screen::iterate_animation() [clone .part.20]+0x1f0>
    31aa:	ldr	r2, [sp, #12]
    31ac:	ldr	r3, [sp, #20]
    31ae:	adds	r2, #96	; 0x60
    31b0:	adds	r3, #24
    31b2:	str	r2, [sp, #12]
    31b4:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    31b6:	cmp.w	r3, #576	; 0x240
    31ba:	str	r3, [sp, #20]
    31bc:	add.w	r2, r2, #1
    31c0:	str	r2, [sp, #4]
    31c2:	bne.w	3084 <Screen::iterate_animation() [clone .part.20]+0x1c8>
    31c6:	movw	r5, #4632	; 0x1218
    31ca:	ldr.w	fp, [sp, #28]
    31ce:	addw	r4, r9, #2328	; 0x918
    31d2:	add	r5, r9
    31d4:	sub.w	r3, r4, #2304	; 0x900
    31d8:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    31dc:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    31de:	ldr.w	r1, [r2, #4]!
    31e2:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    31e6:	cmp	r0, r3
    31e8:	bne.n	31de <Screen::iterate_animation() [clone .part.20]+0x322>
    31ea:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    31ec:	cmp	r5, r4
    31ee:	bne.n	31d4 <Screen::iterate_animation() [clone .part.20]+0x318>
		ratio++;
    31f0:	ldr.w	r3, [fp, #464]	; 0x1d0
    31f4:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    31f6:	cmp	r3, #1
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    31f8:	str.w	r3, [fp, #464]	; 0x1d0
		if (ratio == RATIO_GROWTH){
    31fc:	beq.w	3528 <Screen::iterate_animation() [clone .part.20]+0x66c>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3200:	movs	r3, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3202:	ldr.w	ip, [pc, #800]	; 3524 <Screen::iterate_animation() [clone .part.20]+0x668>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3206:	str	r3, [sp, #0]
    3208:	str	r3, [sp, #8]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    320a:	ldr	r2, [sp, #8]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    320c:	mov.w	lr, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3210:	mov.w	r8, #360	; 0x168
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3214:	add.w	r9, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    3218:	add.w	r3, r2, r2, lsl #3
    321c:	mov.w	r9, r9, lsl #3
    3220:	lsls	r3, r3, #3
    3222:	str	r3, [sp, #4]
    3224:	add.w	r3, r9, lr
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3228:	ldr.w	r2, [fp, #444]	; 0x1bc
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    322c:	ldr.w	r1, [fp, #440]	; 0x1b8
    3230:	adds	r3, #6
    3232:	lsls	r3, r3, #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3234:	add	r2, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3236:	add	r3, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3238:	ldr	r4, [r2, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    323a:	ldr	r0, [r3, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    323c:	adds	r4, #50	; 0x32
    323e:	ldr	r3, [pc, #720]	; (3510 <Screen::iterate_animation() [clone .part.20]+0x654>)
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3240:	add.w	r0, r0, r0, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3244:	smull	r2, r3, r4, r3
    3248:	asrs	r1, r4, #31
    324a:	adds	r5, r4, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    324c:	ldr	r3, [pc, #704]	; (3510 <Screen::iterate_animation() [clone .part.20]+0x654>)
    324e:	smull	r2, r3, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3252:	rsb	r2, r1, r5, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3256:	adds	r1, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3258:	rsb	r2, r2, r2, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    325c:	asrs	r3, r0, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    325e:	subs	r2, r4, r2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3260:	rsb	r1, r3, r1, asr #7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    3264:	cmp	r2, #219	; 0xdb
    3266:	rsb	r1, r1, r1, lsl #8
    326a:	sub.w	r1, r0, r1
    326e:	ble.w	34f8 <Screen::iterate_animation() [clone .part.20]+0x63c>
    3272:	rsb	r2, r2, #255	; 0xff
    3276:	ldr	r3, [pc, #668]	; (3514 <Screen::iterate_animation() [clone .part.20]+0x658>)
    3278:	ldr.w	r0, [r3, r2, lsl #2]
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				bri = (*_grow_automaton).brightnessMap(x, y);
				sat = (*_sat_automaton).saturationMap(x, y);	
				if ((*_fg_automaton).can_color(x, y)) {
    327c:	ldr.w	r3, [fp, #436]	; 0x1b4
    3280:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3284:	ldrb	r4, [r3, #24]
    3286:	ldr	r2, [r2, #0]
      return _background[x][y];
    3288:	add	r2, lr
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    328a:	cmp	r4, #0
    328c:	beq.w	34fc <Screen::iterate_animation() [clone .part.20]+0x640>
      return _background[x][y];
    3290:	ldr	r4, [sp, #0]
    3292:	ldrb	r2, [r2, r4]
    3294:	cbnz	r2, 329a <Screen::iterate_animation() [clone .part.20]+0x3de>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3296:	ldr.w	r3, [fp, #432]	; 0x1b0
    329a:	add.w	r2, r9, lr
    329e:	ldr.w	r6, [fp, #480]	; 0x1e0
    32a2:	add.w	r3, r3, r2, lsl #2
    32a6:	ldr	r4, [r3, #28]
    32a8:	add.w	r4, r4, r4, lsl #2
    32ac:	smull	r2, r3, r4, ip
    32b0:	asrs	r2, r4, #31
    32b2:	adds	r5, r4, r3
    32b4:	ldr.w	r3, [fp, #484]	; 0x1e4
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    32b8:	cmp	r3, #0
    32ba:	rsb	r5, r2, r5, asr #8
    32be:	mov	r2, r3
    32c0:	it	lt
    32c2:	addlt	r2, r3, #1
    32c4:	mls	r5, r8, r5, r4
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    32c8:	add	r3, r6
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    32ca:	asrs	r2, r2, #1
    32cc:	adds	r4, r6, r2
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    32ce:	negs	r2, r2
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    32d0:	subs	r3, r3, r4
    32d2:	smull	r6, r7, r2, ip
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    32d6:	subs	r6, r5, r4
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    32d8:	smull	r4, r5, r3, ip
    32dc:	add	r7, r2
    32de:	asrs	r4, r2, #31
    32e0:	add.w	sl, r3, r5
    32e4:	asrs	r5, r3, #31
    32e6:	rsb	r7, r4, r7, asr #8
    32ea:	rsb	sl, r5, sl, asr #8
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    32ee:	smull	r4, r5, r6, ip
    32f2:	mls	r2, r8, r7, r2
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    32f6:	mls	sl, r8, sl, r3
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    32fa:	adds	r4, r6, r5
    32fc:	asrs	r3, r6, #31
    32fe:	rsb	r2, sl, r2
    3302:	rsb	r3, r3, r4, asr #8
    3306:	cmp.w	r2, #360	; 0x168
    330a:	mls	r3, r8, r3, r6
    330e:	bge.w	34ce <Screen::iterate_animation() [clone .part.20]+0x612>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    3312:	mla	r3, r2, r3, r3
    3316:	ldr	r2, [pc, #512]	; (3518 <Screen::iterate_animation() [clone .part.20]+0x65c>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3318:	cmp	r1, #120	; 0x78
    331a:	smull	r4, r2, r2, r3
    331e:	mov.w	r3, r3, asr #31
    3322:	rsb	r3, r3, r2, asr #7
    3326:	add	sl, r3
    3328:	bgt.w	34e8 <Screen::iterate_animation() [clone .part.20]+0x62c>
    332c:	movs	r2, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    332e:	cmp	r0, #255	; 0xff
    3330:	beq.n	33ce <Screen::iterate_animation() [clone .part.20]+0x512>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3332:	ldr	r3, [pc, #488]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    3334:	mul.w	r0, r2, r0
    switch(hue/60) {
    3338:	smull	r1, r3, r3, sl
    333c:	mov.w	r1, sl, asr #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    3340:	asrs	r0, r0, #8
    switch(hue/60) {
    3342:	add	r3, sl
    3344:	rsb	r3, r1, r3, asr #5
    3348:	cmp	r3, #5
    334a:	bhi.w	3506 <Screen::iterate_animation() [clone .part.20]+0x64a>
    334e:	tbb	[pc, r3]
    3352:	.short	0xab53
    3354:	.word	0x19647e9a

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    3358:	ldrb.w	r3, [fp]
    335c:	eor.w	r3, r3, #1
    3360:	b.n	2f22 <Screen::iterate_animation() [clone .part.20]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3362:	ldr.w	r2, [r9, #4]
    3366:	add	r1, r2
    3368:	str.w	r1, [ip]
    336c:	b.n	2fee <Screen::iterate_animation() [clone .part.20]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    336e:	ldrb.w	r3, [fp]
    3372:	eor.w	r3, r3, #1
    3376:	b.n	30b8 <Screen::iterate_animation() [clone .part.20]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3378:	ldr.w	r2, [r9, #4]
    337c:	add	r1, r2
    337e:	str.w	r1, [ip]
    3382:	b.n	3184 <Screen::iterate_animation() [clone .part.20]+0x2c8>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    3384:	ldr	r3, [pc, #404]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3386:	uxtb	r6, r2
    3388:	uxtb	r5, r0
    338a:	smull	r3, r4, r3, sl
    338e:	subs	r3, r2, r0
    3390:	add.w	r2, r4, sl
    3394:	rsb	r1, r1, r2, asr #5
    3398:	rsb	r1, r1, r1, lsl #4
    339c:	sub.w	sl, sl, r1, lsl #2
    33a0:	rsb	r2, sl, #60	; 0x3c
    33a4:	mul.w	r3, r3, r2
    33a8:	ldr	r2, [pc, #368]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    33aa:	smull	r2, r1, r2, r3
    33ae:	asrs	r2, r3, #31
    33b0:	add	r3, r1
    33b2:	rsb	r3, r2, r3, asr #5
    33b6:	adds	r2, r0, r3
    33b8:	uxtb	r4, r2
    break;
    }
    *r = colors[0];
    33ba:	ldr	r1, [sp, #4]
    33bc:	add.w	r3, lr, lr, lsl #1
				}
				
				hue = filter_hue(hue);
				bri = shift_bri(bri);
				
				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    33c0:	ldr.w	r2, [fp, #496]	; 0x1f0
    33c4:	add	r3, r1
    33c6:	adds	r1, r2, r3
    33c8:	strb	r6, [r2, r3]
    *g = colors[1];
    33ca:	strb	r5, [r1, #1]
    *b = colors[2]; 
    33cc:	strb	r4, [r1, #2]
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    33ce:	add.w	lr, lr, #1
    33d2:	cmp.w	lr, #24
    33d6:	bne.w	3224 <Screen::iterate_animation() [clone .part.20]+0x368>
		return result;
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    33da:	ldr	r3, [sp, #8]
    33dc:	ldr	r2, [sp, #0]
    33de:	adds	r3, #1
    33e0:	adds	r2, #24
    33e2:	cmp	r3, #24
    33e4:	str	r3, [sp, #8]
    33e6:	str	r2, [sp, #0]
    33e8:	bne.w	320a <Screen::iterate_animation() [clone .part.20]+0x34e>
			(*_sat_automaton).iterate_growth();
			ratio = 0;
		}

		gen_color_matrix();
		newFrameReady = true;
    33ec:	movs	r3, #1
    33ee:	strb.w	r3, [fp, #460]	; 0x1cc
	}
    33f2:	add	sp, #68	; 0x44
    33f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    33f8:	subs	r3, r2, r0
    33fa:	uxtb	r6, r2
    33fc:	uxtb	r4, r0
    33fe:	mul.w	sl, sl, r3
    3402:	ldr	r3, [pc, #280]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3404:	smull	r2, r3, r3, sl
    3408:	mov.w	r2, sl, asr #31
    340c:	add	sl, r3
    340e:	rsb	sl, r2, sl, asr #5
    3412:	add.w	r2, r0, sl
    3416:	uxtb	r5, r2
    3418:	b.n	33ba <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    341a:	ldr	r3, [pc, #256]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    341c:	uxtb	r4, r2
    341e:	smull	r3, r5, r3, sl
    3422:	subs	r3, r2, r0
    3424:	add.w	r2, r5, sl
    3428:	uxtb	r5, r0
    342a:	rsb	r1, r1, r2, asr #5
    342e:	rsb	r1, r1, r1, lsl #4
    3432:	sub.w	sl, sl, r1, lsl #2
    3436:	mul.w	r3, sl, r3
    343a:	ldr	r2, [pc, #224]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    343c:	smull	r2, r1, r2, r3
    3440:	asrs	r2, r3, #31
    3442:	add	r3, r1
    3444:	rsb	r3, r2, r3, asr #5
    3448:	adds	r2, r0, r3
    344a:	uxtb	r6, r2
    344c:	b.n	33ba <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    344e:	ldr	r3, [pc, #204]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3450:	uxtb	r4, r2
    3452:	uxtb	r6, r0
    3454:	smull	r3, r5, r3, sl
    3458:	subs	r3, r2, r0
    345a:	add.w	r2, r5, sl
    345e:	rsb	r1, r1, r2, asr #5
    3462:	rsb	r1, r1, r1, lsl #4
    3466:	sub.w	sl, sl, r1, lsl #2
    346a:	rsb	r2, sl, #60	; 0x3c
    346e:	mul.w	r3, r3, r2
    3472:	ldr	r2, [pc, #168]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3474:	smull	r2, r1, r2, r3
    3478:	asrs	r2, r3, #31
    347a:	add	r3, r1
    347c:	rsb	r3, r2, r3, asr #5
    3480:	adds	r2, r0, r3
    3482:	uxtb	r5, r2
    3484:	b.n	33ba <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    3486:	ldr	r3, [pc, #148]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3488:	uxtb	r5, r2
    348a:	uxtb	r6, r0
    348c:	smull	r3, r4, r3, sl
    3490:	subs	r3, r2, r0
    3492:	add.w	r2, r4, sl
    3496:	rsb	r1, r1, r2, asr #5
    349a:	rsb	r1, r1, r1, lsl #4
    349e:	sub.w	sl, sl, r1, lsl #2
    34a2:	mul.w	r3, sl, r3
    34a6:	b.n	33a8 <Screen::iterate_animation() [clone .part.20]+0x4ec>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    34a8:	ldr	r3, [pc, #112]	; (351c <Screen::iterate_animation() [clone .part.20]+0x660>)
    34aa:	uxtb	r5, r2
    34ac:	smull	r3, r4, r3, sl
    34b0:	subs	r3, r2, r0
    34b2:	add.w	r2, r4, sl
    34b6:	uxtb	r4, r0
    34b8:	rsb	r1, r1, r2, asr #5
    34bc:	rsb	r1, r1, r1, lsl #4
    34c0:	sub.w	sl, sl, r1, lsl #2
    34c4:	rsb	r2, sl, #60	; 0x3c
    34c8:	mul.w	r3, r3, r2
    34cc:	b.n	343a <Screen::iterate_animation() [clone .part.20]+0x57e>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    34ce:	mul.w	r3, r2, r3
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    34d2:	cmp	r1, #120	; 0x78
    34d4:	smull	r2, r4, ip, r3
    34d8:	mov.w	r2, r3, asr #31
    34dc:	add	r3, r4
    34de:	rsb	r3, r2, r3, asr #8
    34e2:	add	sl, r3
    34e4:	ble.w	332c <Screen::iterate_animation() [clone .part.20]+0x470>
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    34e8:	adds	r1, #70	; 0x46
    34ea:	ldr	r3, [pc, #40]	; (3514 <Screen::iterate_animation() [clone .part.20]+0x658>)
    34ec:	cmp	r1, #255	; 0xff
    34ee:	it	ge
    34f0:	movge	r1, #255	; 0xff
    34f2:	ldr.w	r2, [r3, r1, lsl #2]
    34f6:	b.n	332e <Screen::iterate_animation() [clone .part.20]+0x472>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    34f8:	movs	r0, #5
    34fa:	b.n	327c <Screen::iterate_animation() [clone .part.20]+0x3c0>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    34fc:	ldr	r4, [sp, #0]
    34fe:	ldrb	r2, [r2, r4]
    3500:	eor.w	r2, r2, #1
    3504:	b.n	3294 <Screen::iterate_animation() [clone .part.20]+0x3d8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3506:	movs	r4, #0
    3508:	mov	r5, r4
    350a:	mov	r6, r4
    350c:	b.n	33ba <Screen::iterate_animation() [clone .part.20]+0x4fe>
    350e:	nop
    3510:	.word	0x80808081
    3514:	.word	0x200001c0
    3518:	.word	0x5ac5242b
    351c:	.word	0x88888889
    3520:	.word	0x2aaaaaab
    3524:	.word	0xb60b60b7
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    3528:	ldr.w	sl, [fp, #440]	; 0x1b8
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    352c:	movs	r2, #32
    352e:	mov.w	r8, #2
    3532:	ldr.w	r9, [pc, #732]	; 3810 <Screen::iterate_animation() [clone .part.20]+0x954>
    3536:	addw	r3, sl, #2332	; 0x91c
    353a:	movs	r1, #0
    353c:	add.w	r0, sp, r2
    3540:	str	r3, [sp, #4]
    3542:	bl	10f7c <memset>
    3546:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    354a:	bl	800 <updateBeams()>
  updateScreensFade();
    354e:	bl	2928 <updateScreensFade()>
    3552:	ldr.w	r3, [sl]
    3556:	ldr	r2, [sp, #4]
    3558:	mov.w	ip, #4294967295
    355c:	str	r3, [sp, #8]
    355e:	ldr.w	r3, [sl, #12]
    3562:	mov	fp, r2
    3564:	str	r3, [sp, #12]
    3566:	subw	r3, r2, #2308	; 0x904
    356a:	str	r3, [sp, #0]
    356c:	sub.w	r3, r8, #3
    3570:	str	r3, [sp, #16]
    3572:	ldr	r6, [sp, #16]
    3574:	add.w	lr, sp, #32
    3578:	add.w	r7, ip, #3
    357c:	smull	r3, r2, r9, r6
    3580:	asrs	r3, r6, #31
    3582:	mov	r4, lr
    3584:	mov	r1, ip
    3586:	rsb	r3, r3, r2, asr #2
    358a:	add.w	r3, r3, r3, lsl #1
    358e:	sub.w	r3, r6, r3, lsl #3
    3592:	adds	r3, #24
    3594:	smull	r2, r0, r9, r3
    3598:	asrs	r2, r3, #31
    359a:	rsb	r0, r2, r0, asr #2
    359e:	add.w	r0, r0, r0, lsl #1
    35a2:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    35a6:	add.w	r0, r0, r0, lsl #1
    35aa:	lsls	r0, r0, #3
    35ac:	smull	r3, r2, r9, r1
    35b0:	asrs	r3, r1, #31
    35b2:	rsb	r3, r3, r2, asr #2
    35b6:	add.w	r3, r3, r3, lsl #1
    35ba:	sub.w	r3, r1, r3, lsl #3
    35be:	adds	r1, #1
    35c0:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    35c2:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    35c4:	smull	r2, r5, r9, r3
    35c8:	mov.w	r2, r3, asr #31
    35cc:	rsb	r2, r2, r5, asr #2
    35d0:	add.w	r2, r2, r2, lsl #1
    35d4:	sub.w	r3, r3, r2, lsl #3
    35d8:	add	r3, r0
    35da:	add.w	r3, sl, r3, lsl #2
    35de:	ldr	r3, [r3, #28]
    35e0:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    35e4:	bne.n	35ac <Screen::iterate_animation() [clone .part.20]+0x6f0>
    35e6:	adds	r6, #1
    35e8:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    35ec:	cmp	r8, r6
    35ee:	bne.n	357c <Screen::iterate_animation() [clone .part.20]+0x6c0>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    35f0:	ldr	r3, [sp, #0]
    35f2:	movs	r1, #1
    35f4:	ldr.w	r0, [r3, #4]!
    35f8:	str	r3, [sp, #0]
    35fa:	ldr	r3, [sp, #8]
    35fc:	adds	r5, r0, r3
    35fe:	movs	r4, #0
    3600:	mov	r3, r4
    3602:	b.n	360a <Screen::iterate_animation() [clone .part.20]+0x74e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3604:	adds	r3, #1
    3606:	cmp	r3, #8
    3608:	beq.n	3620 <Screen::iterate_animation() [clone .part.20]+0x764>
          if ((i >> j) % 2 == 1){
    360a:	asr.w	r2, r1, r3
    360e:	lsls	r6, r2, #31
    3610:	bpl.n	3604 <Screen::iterate_animation() [clone .part.20]+0x748>
            sum += neighbours[j];
    3612:	add	r2, sp, #32
    3614:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3618:	adds	r3, #1
    361a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    361c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    361e:	bne.n	360a <Screen::iterate_animation() [clone .part.20]+0x74e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3620:	cmp	r5, r4
    3622:	beq.w	37f6 <Screen::iterate_animation() [clone .part.20]+0x93a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3626:	adds	r1, #1
    3628:	cmp.w	r1, #256	; 0x100
    362c:	bne.n	35fe <Screen::iterate_animation() [clone .part.20]+0x742>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    362e:	ldr.w	r3, [sl, #8]
    3632:	subs	r0, r0, r3
    3634:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3638:	ldr	r2, [sp, #12]
    363a:	add.w	ip, ip, #1
    363e:	add.w	fp, fp, #4
    3642:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    3644:	it	gt
    3646:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    364a:	cmp.w	ip, #23
    364e:	bne.n	3572 <Screen::iterate_animation() [clone .part.20]+0x6b6>
    3650:	ldr	r3, [sp, #4]
    3652:	add.w	r8, r8, #1
    3656:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3658:	cmp.w	r8, #26
    365c:	str	r3, [sp, #4]
    365e:	bne.w	354a <Screen::iterate_animation() [clone .part.20]+0x68e>
    3662:	movw	r0, #4632	; 0x1218
    3666:	ldr.w	fp, [sp, #20]
    366a:	addw	r3, sl, #2328	; 0x918
    366e:	add	r0, sl
    3670:	sub.w	r2, r3, #2304	; 0x900
    3674:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3678:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    367a:	ldr.w	r4, [r1, #4]!
    367e:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3682:	cmp	r5, r2
    3684:	bne.n	367a <Screen::iterate_animation() [clone .part.20]+0x7be>
    3686:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3688:	cmp	r0, r3
    368a:	bne.n	3670 <Screen::iterate_animation() [clone .part.20]+0x7b4>
			(*_sat_automaton).iterate_growth();
    368c:	ldr.w	sl, [fp, #444]	; 0x1bc
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3690:	movs	r2, #32
    3692:	mov.w	r8, #2
    3696:	ldr.w	r9, [pc, #376]	; 3810 <Screen::iterate_animation() [clone .part.20]+0x954>
    369a:	addw	r3, sl, #2332	; 0x91c
    369e:	movs	r1, #0
    36a0:	add.w	r0, sp, r2
    36a4:	str	r3, [sp, #4]
    36a6:	bl	10f7c <memset>
    36aa:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    36ae:	bl	800 <updateBeams()>
  updateScreensFade();
    36b2:	bl	2928 <updateScreensFade()>
    36b6:	ldr.w	r3, [sl]
    36ba:	ldr	r2, [sp, #4]
    36bc:	mov.w	ip, #4294967295
    36c0:	str	r3, [sp, #8]
    36c2:	ldr.w	r3, [sl, #12]
    36c6:	mov	fp, r2
    36c8:	str	r3, [sp, #12]
    36ca:	subw	r3, r2, #2308	; 0x904
    36ce:	str	r3, [sp, #0]
    36d0:	sub.w	r3, r8, #3
    36d4:	str	r3, [sp, #16]
    36d6:	ldr	r6, [sp, #16]
    36d8:	add.w	lr, sp, #32
    36dc:	add.w	r7, ip, #3
    36e0:	smull	r3, r2, r9, r6
    36e4:	asrs	r3, r6, #31
    36e6:	mov	r4, lr
    36e8:	mov	r1, ip
    36ea:	rsb	r3, r3, r2, asr #2
    36ee:	add.w	r3, r3, r3, lsl #1
    36f2:	sub.w	r3, r6, r3, lsl #3
    36f6:	adds	r3, #24
    36f8:	smull	r2, r0, r9, r3
    36fc:	asrs	r2, r3, #31
    36fe:	rsb	r0, r2, r0, asr #2
    3702:	add.w	r0, r0, r0, lsl #1
    3706:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    370a:	add.w	r0, r0, r0, lsl #1
    370e:	lsls	r0, r0, #3
    3710:	smull	r3, r2, r9, r1
    3714:	asrs	r3, r1, #31
    3716:	rsb	r3, r3, r2, asr #2
    371a:	add.w	r3, r3, r3, lsl #1
    371e:	sub.w	r3, r1, r3, lsl #3
    3722:	adds	r1, #1
    3724:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3726:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3728:	smull	r2, r5, r9, r3
    372c:	mov.w	r2, r3, asr #31
    3730:	rsb	r2, r2, r5, asr #2
    3734:	add.w	r2, r2, r2, lsl #1
    3738:	sub.w	r3, r3, r2, lsl #3
    373c:	add	r3, r0
    373e:	add.w	r3, sl, r3, lsl #2
    3742:	ldr	r3, [r3, #28]
    3744:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3748:	bne.n	3710 <Screen::iterate_animation() [clone .part.20]+0x854>
    374a:	adds	r6, #1
    374c:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3750:	cmp	r6, r8
    3752:	bne.n	36e0 <Screen::iterate_animation() [clone .part.20]+0x824>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3754:	ldr	r3, [sp, #0]
    3756:	movs	r1, #1
    3758:	ldr.w	r0, [r3, #4]!
    375c:	str	r3, [sp, #0]
    375e:	ldr	r3, [sp, #8]
    3760:	adds	r5, r0, r3
    3762:	movs	r4, #0
    3764:	mov	r3, r4
    3766:	b.n	376e <Screen::iterate_animation() [clone .part.20]+0x8b2>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3768:	adds	r3, #1
    376a:	cmp	r3, #8
    376c:	beq.n	3784 <Screen::iterate_animation() [clone .part.20]+0x8c8>
          if ((i >> j) % 2 == 1){
    376e:	asr.w	r2, r1, r3
    3772:	lsls	r2, r2, #31
    3774:	bpl.n	3768 <Screen::iterate_animation() [clone .part.20]+0x8ac>
            sum += neighbours[j];
    3776:	add	r2, sp, #32
    3778:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    377c:	adds	r3, #1
    377e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3780:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3782:	bne.n	376e <Screen::iterate_animation() [clone .part.20]+0x8b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3784:	cmp	r5, r4
    3786:	beq.n	3802 <Screen::iterate_animation() [clone .part.20]+0x946>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3788:	adds	r1, #1
    378a:	cmp.w	r1, #256	; 0x100
    378e:	bne.n	3762 <Screen::iterate_animation() [clone .part.20]+0x8a6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3790:	ldr.w	r3, [sl, #8]
    3794:	subs	r0, r0, r3
    3796:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    379a:	ldr	r2, [sp, #12]
    379c:	add.w	ip, ip, #1
    37a0:	add.w	fp, fp, #4
    37a4:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    37a6:	it	gt
    37a8:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    37ac:	cmp.w	ip, #23
    37b0:	bne.n	36d6 <Screen::iterate_animation() [clone .part.20]+0x81a>
    37b2:	ldr	r3, [sp, #4]
    37b4:	add.w	r8, r8, #1
    37b8:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    37ba:	cmp.w	r8, #26
    37be:	str	r3, [sp, #4]
    37c0:	bne.w	36ae <Screen::iterate_animation() [clone .part.20]+0x7f2>
    37c4:	movw	r0, #4632	; 0x1218
    37c8:	ldr.w	fp, [sp, #20]
    37cc:	addw	r3, sl, #2328	; 0x918
    37d0:	add	r0, sl
    37d2:	sub.w	r2, r3, #2304	; 0x900
    37d6:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    37da:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    37dc:	ldr.w	r4, [r1, #4]!
    37e0:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    37e4:	cmp	r5, r2
    37e6:	bne.n	37dc <Screen::iterate_animation() [clone .part.20]+0x920>
    37e8:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    37ea:	cmp	r0, r3
    37ec:	bne.n	37d2 <Screen::iterate_animation() [clone .part.20]+0x916>
			ratio = 0;
    37ee:	movs	r3, #0
    37f0:	str.w	r3, [fp, #464]	; 0x1d0
    37f4:	b.n	3200 <Screen::iterate_animation() [clone .part.20]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    37f6:	ldr.w	r2, [sl, #4]
    37fa:	add	r0, r2
    37fc:	str.w	r0, [fp]
    3800:	b.n	3638 <Screen::iterate_animation() [clone .part.20]+0x77c>
    3802:	ldr.w	r2, [sl, #4]
    3806:	add	r0, r2
    3808:	str.w	r0, [fp]
    380c:	b.n	379a <Screen::iterate_animation() [clone .part.20]+0x8de>
    380e:	nop
    3810:	.word	0x2aaaaaab
    3814:	.word	0x00000000

00003818 <regular_animation() [clone .part.21]>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3818:	ldr	r3, [pc, #692]	; (3ad0 <regular_animation() [clone .part.21]+0x2b8>)
  screen_A.regular_screen_animation();
  screen_B.regular_screen_animation();
}


void regular_animation(){
    381a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    381e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3820:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3822:	ldr	r1, [r3, #40]	; 0x28
    3824:	vpush	{d8-d9}
    3828:	sub	sp, #68	; 0x44
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    382a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    382c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    382e:	ldr	r6, [pc, #672]	; (3ad0 <regular_animation() [clone .part.21]+0x2b8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3830:	cmp	r3, r1
    3832:	it	eq
    3834:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3836:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3838:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    383a:	ite	eq
    383c:	moveq	r5, #1
    383e:	movne	r5, #0
    3840:	cmp	r5, #0
    3842:	beq.n	382a <regular_animation() [clone .part.21]+0x12>
  if (!isRegularAnimation) return;
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    3844:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    3846:	ldr	r5, [pc, #652]	; (3ad4 <regular_animation() [clone .part.21]+0x2bc>)
    3848:	movw	r2, #1500	; 0x5dc
    384c:	orr.w	r1, r1, r0, lsl #27
    3850:	ldr	r3, [r5, #0]
    3852:	vmov	s15, r1
    3856:	vldr	d5, [pc, #624]	; 3ac8 <regular_animation() [clone .part.21]+0x2b0>
    385a:	vcvt.f64.u32	d7, s15
    385e:	vdiv.f64	d6, d7, d5
    3862:	vcvt.u32.f64	s12, d6
    3866:	vmov	r1, s12
    386a:	subs	r3, r1, r3
    386c:	cmp	r3, r2
    386e:	bhi.w	3b76 <regular_animation() [clone .part.21]+0x35e>
    3872:	ldr	r3, [pc, #612]	; (3ad8 <regular_animation() [clone .part.21]+0x2c0>)
    3874:	ldr.w	fp, [pc, #612]	; 3adc <regular_animation() [clone .part.21]+0x2c4>
    3878:	str	r3, [sp, #24]
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    387a:	ldr	r3, [sp, #24]
    387c:	ldr.w	r7, [r3, #440]	; 0x1b8
    3880:	add.w	r2, r7, #120	; 0x78
    3884:	addw	r1, r7, #2424	; 0x978
    3888:	sub.w	r3, r2, #96	; 0x60
    388c:	b.n	3894 <regular_animation() [clone .part.21]+0x7c>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    388e:	cmp	r2, r3
    3890:	beq.w	39a6 <regular_animation() [clone .part.21]+0x18e>
				if ((*automaton).cells[i][j] != 0){
    3894:	ldr.w	r4, [r3, #4]!
    3898:	cmp	r4, #0
    389a:	beq.n	388e <regular_animation() [clone .part.21]+0x76>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    389c:	ldr	r3, [sp, #24]
    389e:	ldr.w	r7, [r3, #436]	; 0x1b4
    38a2:	add.w	r2, r7, #120	; 0x78
    38a6:	addw	r1, r7, #2424	; 0x978
    38aa:	sub.w	r3, r2, #96	; 0x60
    38ae:	b.n	38b6 <regular_animation() [clone .part.21]+0x9e>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    38b0:	cmp	r3, r2
    38b2:	beq.w	3a3c <regular_animation() [clone .part.21]+0x224>
				if ((*automaton).cells[i][j] != 0){
    38b6:	ldr.w	r6, [r3, #4]!
    38ba:	cmp	r6, #0
    38bc:	beq.n	38b0 <regular_animation() [clone .part.21]+0x98>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    38be:	ldr	r3, [sp, #24]
    38c0:	ldrb.w	r3, [r3, #460]	; 0x1cc
    38c4:	cbnz	r3, 38cc <regular_animation() [clone .part.21]+0xb4>
    38c6:	ldr	r0, [pc, #528]	; (3ad8 <regular_animation() [clone .part.21]+0x2c0>)
    38c8:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    38cc:	ldr.w	r7, [fp, #440]	; 0x1b8
    38d0:	add.w	r2, r7, #120	; 0x78
    38d4:	addw	r1, r7, #2424	; 0x978
    38d8:	sub.w	r3, r2, #96	; 0x60
    38dc:	b.n	38e4 <regular_animation() [clone .part.21]+0xcc>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    38de:	cmp	r2, r3
    38e0:	beq.w	3ae0 <regular_animation() [clone .part.21]+0x2c8>
				if ((*automaton).cells[i][j] != 0){
    38e4:	ldr.w	r4, [r3, #4]!
    38e8:	cmp	r4, #0
    38ea:	beq.n	38de <regular_animation() [clone .part.21]+0xc6>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    38ec:	ldr.w	r7, [fp, #436]	; 0x1b4
    38f0:	add.w	r2, r7, #120	; 0x78
    38f4:	addw	r1, r7, #2424	; 0x978
    38f8:	sub.w	r3, r2, #96	; 0x60
    38fc:	b.n	3902 <regular_animation() [clone .part.21]+0xea>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    38fe:	cmp	r2, r3
    3900:	beq.n	3928 <regular_animation() [clone .part.21]+0x110>
				if ((*automaton).cells[i][j] != 0){
    3902:	ldr.w	r4, [r3, #4]!
    3906:	cmp	r4, #0
    3908:	beq.n	38fe <regular_animation() [clone .part.21]+0xe6>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    390a:	ldrb.w	r3, [fp, #460]	; 0x1cc
    390e:	cbnz	r3, 3916 <regular_animation() [clone .part.21]+0xfe>
    3910:	ldr	r0, [pc, #456]	; (3adc <regular_animation() [clone .part.21]+0x2c4>)
    3912:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3916:	bl	800 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt(); 
}
    391a:	add	sp, #68	; 0x44
    391c:	vpop	{d8-d9}
    3920:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    3924:	b.w	2928 <updateScreensFade()>
    3928:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    392a:	cmp	r2, r1
    392c:	bne.n	38f8 <regular_animation() [clone .part.21]+0xe0>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    392e:	movs	r1, #8
    3930:	mov	r0, r4
    3932:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3936:	adds	r1, r0, #1
    3938:	ldr.w	r2, [fp, #452]	; 0x1c4
    393c:	movw	r3, #4636	; 0x121c
    3940:	add.w	r1, r1, r1, lsl #1
    3944:	ldr.w	r6, [fp, #456]	; 0x1c8
    3948:	str	r2, [r7, r3]
    394a:	add.w	r0, r0, r0, lsl #1
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    394e:	ldr.w	r2, [fp, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3952:	lsls	r1, r1, #3
    3954:	add.w	r3, fp, r0, lsl #3
    3958:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    395c:	add.w	lr, r2, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3960:	add.w	r2, fp, r1
    3964:	ldr.w	r5, [fp, r1]
    3968:	ldr	r2, [r2, #4]
    396a:	ldr	r0, [r3, #32]
    396c:	ldr	r1, [r3, #36]	; 0x24
    396e:	str	r2, [r7, #4]
    3970:	ldr	r2, [r3, #40]	; 0x28
    3972:	ldr	r3, [r3, #44]	; 0x2c
    3974:	ldrb.w	sl, [fp, #368]	; 0x170
    3978:	str	r5, [r7, #0]
    397a:	str	r0, [r7, #8]
    397c:	str	r1, [r7, #12]
    397e:	str	r2, [r7, #16]
    3980:	str	r3, [r7, #20]
    3982:	strb	r4, [r7, #24]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3984:	ldr.w	r5, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3988:	str.w	r6, [ip]
    398c:	ldr.w	r6, [fp, #364]	; 0x16c
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3990:	cmp.w	lr, #4
    3994:	bhi.w	4850 <regular_animation() [clone .part.21]+0x1038>
    3998:	tbh	[pc, lr, lsl #1]
    399c:	.word	0x02c40301
    39a0:	.word	0x022e025d
    39a4:	.short	0x01f1
    39a6:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    39a8:	cmp	r2, r1
    39aa:	bne.w	3888 <regular_animation() [clone .part.21]+0x70>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    39ae:	movs	r1, #8
    39b0:	mov	r0, r4
    39b2:	bl	fe84 <random(long, long)>
    39b6:	ldr	r6, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    39b8:	add.w	r5, r0, r0, lsl #1
    39bc:	movw	r2, #4636	; 0x121c
    39c0:	ldr.w	r1, [r6, #452]	; 0x1c4
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    39c4:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    39c6:	add.w	r5, r6, r5, lsl #3
    39ca:	ldr.w	r3, [r6, #456]	; 0x1c8
    39ce:	str	r1, [r7, r2]
    39d0:	add.w	lr, r7, #4640	; 0x1220
    39d4:	ldr.w	r6, [r5, #208]	; 0xd0
    39d8:	mov.w	r9, #1
    39dc:	ldr.w	r4, [r5, #200]	; 0xc8
    39e0:	ldr.w	r1, [r5, #196]	; 0xc4
    39e4:	ldr.w	r2, [r5, #204]	; 0xcc
    39e8:	str	r6, [r7, #16]
    39ea:	ldr.w	r6, [r5, #212]	; 0xd4
    39ee:	ldr.w	r5, [r5, #192]	; 0xc0
    39f2:	str	r4, [r7, #8]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    39f4:	ldr	r4, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    39f6:	str	r1, [r7, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    39f8:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    39fa:	str	r5, [r7, #0]
    39fc:	str	r2, [r7, #12]
    39fe:	str	r6, [r7, #20]
    3a00:	strb.w	r9, [r7, #24]
    3a04:	str.w	r3, [lr]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3a08:	ldr.w	r5, [r4, #440]	; 0x1b8
    3a0c:	bl	fe84 <random(long, long)>
    3a10:	add.w	r0, r0, r0, lsl #1
    3a14:	add.w	r3, r4, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3a18:	ldr.w	r2, [r3, #372]	; 0x174
    3a1c:	add.w	r3, r3, #372	; 0x174
    3a20:	subs	r2, #1
    3a22:	ldr	r4, [r3, #4]
    3a24:	ldrb.w	sl, [r3, #8]
    3a28:	cmp	r2, #4
    3a2a:	bhi.w	47e4 <regular_animation() [clone .part.21]+0xfcc>
    3a2e:	tbh	[pc, r2, lsl #1]
    3a32:	.short	0x03a6
    3a34:	.word	0x034e03d2
    3a38:	.word	0x02e2031f
    3a3c:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3a40:	cmp	r2, r1
    3a42:	bne.w	38aa <regular_animation() [clone .part.21]+0x92>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3a46:	movs	r1, #8
    3a48:	mov	r0, r6
    3a4a:	bl	fe84 <random(long, long)>
    3a4e:	ldr	r5, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3a50:	movw	r1, #4636	; 0x121c
    3a54:	adds	r2, r0, #1
    3a56:	ldr.w	r3, [r5, #452]	; 0x1c4
    3a5a:	add.w	r0, r0, r0, lsl #1
    3a5e:	add.w	r2, r2, r2, lsl #1
    3a62:	ldr.w	r4, [r5, #456]	; 0x1c8
    3a66:	str	r3, [r7, r1]
    3a68:	add.w	sl, r5, r0, lsl #3
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3a6c:	ldr.w	r3, [r5, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3a70:	lsls	r2, r2, #3
    3a72:	ldr.w	r1, [sl, #36]	; 0x24
    3a76:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3a7a:	add.w	lr, r3, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3a7e:	mov	r3, r5
    3a80:	ldr.w	r0, [sl, #32]
    3a84:	add	r3, r2
    3a86:	ldr	r2, [r5, r2]
    3a88:	ldr	r5, [r3, #4]
    3a8a:	str	r2, [r7, #0]
    3a8c:	ldr.w	r3, [sl, #44]	; 0x2c
    3a90:	ldr.w	r2, [sl, #40]	; 0x28
    3a94:	str	r1, [r7, #12]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3a96:	ldr	r1, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3a98:	str	r5, [r7, #4]
    3a9a:	str	r0, [r7, #8]
    3a9c:	str	r2, [r7, #16]
    3a9e:	str	r3, [r7, #20]
    3aa0:	strb	r6, [r7, #24]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3aa2:	ldr.w	r5, [r1, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3aa6:	str.w	r4, [ip]
    3aaa:	ldrb.w	sl, [r1, #368]	; 0x170
    3aae:	ldr.w	r4, [r1, #364]	; 0x16c
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3ab2:	cmp.w	lr, #4
    3ab6:	bhi.w	470c <regular_animation() [clone .part.21]+0xef4>
    3aba:	tbh	[pc, lr, lsl #1]
    3abe:	.short	0x04ce
    3ac0:	.word	0x0437048f
    3ac4:	.word	0x03cb0408
    3ac8:	.word	0xd2f1a9fc
    3acc:	.word	0x3ff0624d
    3ad0:	.word	0x400d4000
    3ad4:	.word	0x20001798
    3ad8:	.word	0x20004e0c
    3adc:	.word	0x20005000
    3ae0:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3ae2:	cmp	r2, r1
    3ae4:	bne.w	38d8 <regular_animation() [clone .part.21]+0xc0>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    3ae8:	movs	r1, #8
    3aea:	mov	r0, r4
    3aec:	bl	fe84 <random(long, long)>
    3af0:	ldr.w	r1, [fp, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3af4:	add.w	r6, r0, r0, lsl #1
    3af8:	movw	r2, #4636	; 0x121c
    3afc:	ldr.w	r3, [fp, #456]	; 0x1c8
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3b00:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3b02:	add.w	r6, fp, r6, lsl #3
    3b06:	str	r1, [r7, r2]
    3b08:	mov.w	ip, #1
    3b0c:	add.w	r8, r7, #4640	; 0x1220
    3b10:	ldr.w	r2, [r6, #208]	; 0xd0
    3b14:	ldr.w	r1, [r6, #196]	; 0xc4
    3b18:	str	r2, [sp, #20]
    3b1a:	ldr.w	r2, [r6, #212]	; 0xd4
    3b1e:	ldr.w	r5, [r6, #200]	; 0xc8
    3b22:	ldr.w	r4, [r6, #204]	; 0xcc
    3b26:	ldr.w	r6, [r6, #192]	; 0xc0
    3b2a:	str	r2, [r7, #20]
    3b2c:	ldr	r2, [sp, #20]
    3b2e:	str	r1, [r7, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3b30:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3b32:	str	r6, [r7, #0]
    3b34:	str	r5, [r7, #8]
    3b36:	str	r2, [r7, #16]
    3b38:	str	r4, [r7, #12]
    3b3a:	strb.w	ip, [r7, #24]
    3b3e:	str.w	r3, [r8]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3b42:	ldr.w	r5, [fp, #440]	; 0x1b8
    3b46:	bl	fe84 <random(long, long)>
    3b4a:	add.w	r0, r0, r0, lsl #1
    3b4e:	add.w	r3, fp, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3b52:	ldr.w	r2, [r3, #372]	; 0x174
    3b56:	add.w	r3, r3, #372	; 0x174
    3b5a:	subs	r2, #1
    3b5c:	ldr	r6, [r3, #4]
    3b5e:	ldrb.w	sl, [r3, #8]
    3b62:	cmp	r2, #4
    3b64:	bhi.w	4778 <regular_animation() [clone .part.21]+0xf60>
    3b68:	tbh	[pc, r2, lsl #1]
    3b6c:	.word	0x056605a4
    3b70:	.word	0x04e0050f
    3b74:	.short	0x04a3
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3b76:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b78:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3b7a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b7c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3b7e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3b80:	cmp	r3, r1
    3b82:	it	eq
    3b84:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b86:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3b88:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3b8a:	ite	eq
    3b8c:	moveq	r6, #1
    3b8e:	movne	r6, #0
    3b90:	cmp	r6, #0
    3b92:	beq.n	3b7c <regular_animation() [clone .part.21]+0x364>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    3b94:	lsrs	r3, r3, #5

void regular_animation(){
  if (!isRegularAnimation) return;
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    sinceBeam = 0;
    int rand1 = random(0, 2);
    3b96:	movs	r0, #0
    3b98:	movs	r1, #2
    3b9a:	orr.w	r3, r3, r2, lsl #27

	public:
		

Color(){
	RGB_updated = false;
    3b9e:	mov	r6, r0
    3ba0:	vmov	s15, r3
    3ba4:	vldr	d5, [pc, #864]	; 3f08 <regular_animation() [clone .part.21]+0x6f0>
    3ba8:	vcvt.f64.u32	d7, s15
    3bac:	vdiv.f64	d6, d7, d5
    3bb0:	vcvt.u32.f64	s12, d6
    3bb4:	vstr	s12, [r5]
    3bb8:	bl	fe84 <random(long, long)>
    3bbc:	mov	r5, r0
    int rand2 = random(0, 2);
    3bbe:	movs	r1, #2
    3bc0:	mov	r0, r6
    3bc2:	bl	fe84 <random(long, long)>
    3bc6:	mov	r4, r0
    Color color1, color2;
    if (rand1 == 0){
    3bc8:	cmp	r5, #0
    3bca:	bne.w	3cec <regular_animation() [clone .part.21]+0x4d4>
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(75, 101), random(85, 100), HSB_MODE);
    3bce:	ldr	r3, [pc, #832]	; (3f10 <regular_animation() [clone .part.21]+0x6f8>)
    3bd0:	mov	r1, r3
    3bd2:	str	r3, [sp, #24]
    3bd4:	ldr.w	r3, [r3, #480]	; 0x1e0
    3bd8:	ldr.w	r1, [r1, #484]	; 0x1e4
    3bdc:	mov	r0, r3
    3bde:	add	r1, r3
    3be0:	bl	fe84 <random(long, long)>
    3be4:	movs	r1, #101	; 0x65
    3be6:	mov	r6, r0
    3be8:	movs	r0, #75	; 0x4b
    3bea:	bl	fe84 <random(long, long)>
    3bee:	movs	r1, #100	; 0x64
    3bf0:	mov	r7, r0
    3bf2:	movs	r0, #85	; 0x55
    3bf4:	bl	fe84 <random(long, long)>
    3bf8:	add.w	r1, r6, #720	; 0x2d0
    3bfc:	ldr	r2, [pc, #788]	; (3f14 <regular_animation() [clone .part.21]+0x6fc>)
    3bfe:	mov.w	r6, #360	; 0x168
    3c02:	lsrs	r3, r1, #3
    3c04:	strb.w	r0, [sp, #41]	; 0x29
    3c08:	movs	r0, #1
    3c0a:	strb.w	r7, [sp, #40]	; 0x28
    3c0e:	umull	r3, r2, r2, r3
    3c12:	strb.w	r5, [sp, #44]	; 0x2c
    3c16:	lsrs	r2, r2, #2
    3c18:	strb.w	r0, [sp, #45]	; 0x2d
    3c1c:	mls	r3, r6, r2, r1
    3c20:	str	r3, [sp, #36]	; 0x24
    } else {
      color1 = Color(random(0,360), random(75, 101), 100, HSB_MODE);
    }

    if (rand2 == 0){
    3c22:	cmp	r4, #0
    3c24:	bne.w	3d36 <regular_animation() [clone .part.21]+0x51e>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(75, 101), random(85, 100), HSB_MODE);
    3c28:	ldr.w	fp, [pc, #756]	; 3f20 <regular_animation() [clone .part.21]+0x708>
    3c2c:	ldr.w	r3, [fp, #480]	; 0x1e0
    3c30:	ldr.w	r1, [fp, #484]	; 0x1e4
    3c34:	mov	r0, r3
    3c36:	add	r1, r3
    3c38:	bl	fe84 <random(long, long)>
    3c3c:	movs	r1, #101	; 0x65
    3c3e:	mov	r6, r0
    3c40:	movs	r0, #75	; 0x4b
    3c42:	bl	fe84 <random(long, long)>
    3c46:	movs	r1, #100	; 0x64
    3c48:	mov	r7, r0
    3c4a:	movs	r0, #85	; 0x55
    3c4c:	bl	fe84 <random(long, long)>
    3c50:	add.w	r1, r6, #720	; 0x2d0
    3c54:	ldr	r2, [pc, #700]	; (3f14 <regular_animation() [clone .part.21]+0x6fc>)
    3c56:	mov.w	r6, #360	; 0x168
    3c5a:	lsrs	r3, r1, #3
    3c5c:	strb.w	r0, [sp, #57]	; 0x39
    3c60:	movs	r0, #1
    3c62:	strb.w	r7, [sp, #56]	; 0x38
    3c66:	umull	r3, r2, r2, r3
    3c6a:	strb.w	r4, [sp, #60]	; 0x3c
    3c6e:	lsrs	r2, r2, #2
    3c70:	strb.w	r0, [sp, #61]	; 0x3d
    3c74:	mls	r3, r6, r2, r1
    3c78:	str	r3, [sp, #52]	; 0x34
    } else {
      color2 = Color(random(0,360), random(75, 101), 100, HSB_MODE);
    }
    newBeam(&synapse_A, rand1, color1, random(3, 30),random(1000,6000));
    3c7a:	movs	r1, #30
    3c7c:	movs	r0, #3
    3c7e:	bl	fe84 <random(long, long)>
    3c82:	movw	r1, #6000	; 0x1770
    3c86:	vmov	s16, r0
    3c8a:	mov.w	r0, #1000	; 0x3e8
    3c8e:	bl	fe84 <random(long, long)>
    3c92:	add	r2, sp, #40	; 0x28
    3c94:	str	r0, [sp, #8]
    3c96:	add	r3, sp, #32
    3c98:	vcvt.f32.s32	s0, s16
    3c9c:	ldmia.w	r2, {r0, r1}
    3ca0:	ldmia	r3, {r2, r3}
    3ca2:	stmia.w	sp, {r0, r1}
    3ca6:	adds	r1, r5, #0
    3ca8:	ldr	r0, [pc, #620]	; (3f18 <regular_animation() [clone .part.21]+0x700>)
    3caa:	it	ne
    3cac:	movne	r1, #1
    3cae:	bl	4e8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_B, rand2, color2, random(3, 30),random(1000,6000));
    3cb2:	movs	r1, #30
    3cb4:	movs	r0, #3
    3cb6:	bl	fe84 <random(long, long)>
    3cba:	movw	r1, #6000	; 0x1770
    3cbe:	vmov	s16, r0
    3cc2:	mov.w	r0, #1000	; 0x3e8
    3cc6:	bl	fe84 <random(long, long)>
    3cca:	add	r2, sp, #64	; 0x40
    3ccc:	str	r0, [sp, #8]
    3cce:	add	r3, sp, #48	; 0x30
    3cd0:	vcvt.f32.s32	s0, s16
    3cd4:	ldmdb	r2, {r0, r1}
    3cd8:	ldmia	r3, {r2, r3}
    3cda:	stmia.w	sp, {r0, r1}
    3cde:	adds	r1, r4, #0
    3ce0:	ldr	r0, [pc, #568]	; (3f1c <regular_animation() [clone .part.21]+0x704>)
    3ce2:	it	ne
    3ce4:	movne	r1, #1
    3ce6:	bl	4e8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    3cea:	b.n	387a <regular_animation() [clone .part.21]+0x62>
    int rand2 = random(0, 2);
    Color color1, color2;
    if (rand1 == 0){
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(75, 101), random(85, 100), HSB_MODE);
    } else {
      color1 = Color(random(0,360), random(75, 101), 100, HSB_MODE);
    3cec:	mov.w	r1, #360	; 0x168
    3cf0:	mov	r0, r6
    3cf2:	bl	fe84 <random(long, long)>
    3cf6:	mov	r7, r0
    3cf8:	movs	r1, #101	; 0x65
    3cfa:	movs	r0, #75	; 0x4b
    3cfc:	bl	fe84 <random(long, long)>
    3d00:	add.w	r1, r7, #720	; 0x2d0
    3d04:	ldr	r2, [pc, #524]	; (3f14 <regular_animation() [clone .part.21]+0x6fc>)
    3d06:	mov.w	r7, #360	; 0x168
    3d0a:	lsrs	r3, r1, #3
    3d0c:	strb.w	r0, [sp, #40]	; 0x28
    3d10:	movs	r0, #100	; 0x64
    3d12:	strb.w	r6, [sp, #44]	; 0x2c
    3d16:	umull	r3, r2, r2, r3
    3d1a:	movs	r3, #1
    3d1c:	strb.w	r0, [sp, #41]	; 0x29
    3d20:	lsrs	r2, r2, #2
    3d22:	ldr	r0, [pc, #492]	; (3f10 <regular_animation() [clone .part.21]+0x6f8>)
    3d24:	strb.w	r3, [sp, #45]	; 0x2d
    3d28:	mls	r3, r7, r2, r1
    3d2c:	str	r0, [sp, #24]
    3d2e:	str	r3, [sp, #36]	; 0x24
    }

    if (rand2 == 0){
    3d30:	cmp	r4, #0
    3d32:	beq.w	3c28 <regular_animation() [clone .part.21]+0x410>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(75, 101), random(85, 100), HSB_MODE);
    } else {
      color2 = Color(random(0,360), random(75, 101), 100, HSB_MODE);
    3d36:	mov.w	r1, #360	; 0x168
    3d3a:	movs	r0, #0
    3d3c:	bl	fe84 <random(long, long)>
    3d40:	mov	r6, r0
    3d42:	movs	r1, #101	; 0x65
    3d44:	movs	r0, #75	; 0x4b
    3d46:	bl	fe84 <random(long, long)>
    3d4a:	add.w	r1, r6, #720	; 0x2d0
    3d4e:	ldr	r2, [pc, #452]	; (3f14 <regular_animation() [clone .part.21]+0x6fc>)
    3d50:	mov.w	r6, #360	; 0x168
    3d54:	lsrs	r3, r1, #3
    3d56:	strb.w	r0, [sp, #56]	; 0x38
    3d5a:	movs	r0, #100	; 0x64
    3d5c:	ldr.w	fp, [pc, #448]	; 3f20 <regular_animation() [clone .part.21]+0x708>
    3d60:	umull	r3, r2, r2, r3
    3d64:	movs	r3, #0
    3d66:	strb.w	r0, [sp, #57]	; 0x39
    3d6a:	movs	r0, #1
    3d6c:	lsrs	r2, r2, #2
    3d6e:	strb.w	r3, [sp, #60]	; 0x3c
    3d72:	strb.w	r0, [sp, #61]	; 0x3d
    3d76:	mls	r3, r6, r2, r1
    3d7a:	str	r3, [sp, #52]	; 0x34
    3d7c:	b.n	3c7a <regular_animation() [clone .part.21]+0x462>
    3d7e:	add.w	r6, r5, #28
    3d82:	mov	r4, r5
    3d84:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    3d88:	cmp.w	sl, #0
    3d8c:	bne.n	3daa <regular_animation() [clone .part.21]+0x592>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    3d8e:	ldr	r3, [r5, #0]
    3d90:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    3d92:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    3d96:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    3d98:	str	r3, [r4, #120]	; 0x78
    3d9a:	adds	r4, #96	; 0x60
    3d9c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    3d9e:	cmp	r7, r4
    3da0:	beq.w	390a <regular_animation() [clone .part.21]+0xf2>
    if (rand){
    3da4:	cmp.w	sl, #0
    3da8:	beq.n	3d8e <regular_animation() [clone .part.21]+0x576>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3daa:	ldr	r3, [r5, #20]
    3dac:	ldr	r2, [r5, #16]
    3dae:	subs	r0, r3, r2
    3db0:	adds	r0, #2
    3db2:	bl	fe7c <random(unsigned long)>
    3db6:	ldr	r1, [r5, #16]
    3db8:	subs	r2, r1, #1
    3dba:	add	r0, r2
    3dbc:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3dbe:	ldr	r3, [r5, #20]
    3dc0:	subs	r0, r3, r1
    3dc2:	adds	r0, #2
    3dc4:	bl	fe7c <random(unsigned long)>
    3dc8:	ldr	r1, [r5, #16]
    3dca:	subs	r2, r1, #1
    3dcc:	add	r0, r2
    3dce:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3dd2:	ldr	r3, [r5, #20]
    3dd4:	subs	r0, r3, r1
    3dd6:	adds	r0, #2
    3dd8:	bl	fe7c <random(unsigned long)>
    3ddc:	ldr	r1, [r5, #16]
    3dde:	subs	r2, r1, #1
    3de0:	add	r0, r2
    3de2:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3de4:	ldr	r3, [r5, #20]
    3de6:	subs	r0, r3, r1
    3de8:	adds	r0, #2
    3dea:	bl	fe7c <random(unsigned long)>
    3dee:	ldr	r3, [r5, #16]
    3df0:	subs	r3, #1
    3df2:	add	r0, r3
    3df4:	str	r0, [r4, #120]	; 0x78
    3df6:	b.n	3d9a <regular_animation() [clone .part.21]+0x582>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    3df8:	cmp	r6, #0
    3dfa:	ble.w	390a <regular_animation() [clone .part.21]+0xf2>
    3dfe:	movs	r7, #0
    3e00:	b.n	3e16 <regular_animation() [clone .part.21]+0x5fe>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    3e02:	add.w	r3, r4, r3, lsl #3
    3e06:	ldr	r2, [r5, #0]
    3e08:	add.w	r3, r5, r3, lsl #2
    3e0c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    3e0e:	adds	r7, #1
    3e10:	cmp	r7, r6
    3e12:	beq.w	390a <regular_animation() [clone .part.21]+0xf2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3e16:	movs	r0, #8
    3e18:	bl	fe7c <random(unsigned long)>
    3e1c:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3e20:	movs	r0, #8
    3e22:	bl	fe7c <random(unsigned long)>
    3e26:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    3e2a:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    3e2e:	cmp.w	sl, #0
    3e32:	beq.n	3e02 <regular_animation() [clone .part.21]+0x5ea>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3e34:	ldr	r3, [r5, #20]
    3e36:	add.w	r8, r8, r8, lsl #1
    3e3a:	ldr	r2, [r5, #16]
    3e3c:	add.w	r4, r4, r8, lsl #3
    3e40:	subs	r0, r3, r2
    3e42:	add.w	r4, r5, r4, lsl #2
    3e46:	adds	r0, #2
    3e48:	bl	fe7c <random(unsigned long)>
    3e4c:	ldr	r3, [r5, #16]
    3e4e:	subs	r3, #1
    3e50:	add	r0, r3
    3e52:	str	r0, [r4, #28]
    3e54:	b.n	3e0e <regular_animation() [clone .part.21]+0x5f6>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3e56:	movs	r0, #8
    3e58:	mov	r7, r5
    3e5a:	bl	fe7c <random(unsigned long)>
    3e5e:	add.w	r3, r5, #96	; 0x60
    3e62:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3e64:	movs	r0, #8
    3e66:	str	r3, [sp, #20]
    3e68:	bl	fe7c <random(unsigned long)>
    3e6c:	vmov	s15, r6
    3e70:	adds	r4, #8
    3e72:	add.w	r3, r0, #8
    3e76:	rsb	r9, r0, #16
    3e7a:	vcvt.f64.s32	d9, s15
    3e7e:	rsb	r8, r4, #0
    3e82:	negs	r3, r3
    3e84:	str	r3, [sp, #24]
    3e86:	vmov	s15, r8
    3e8a:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    3e8c:	mov	r6, r7
    3e8e:	vcvt.f64.s32	d8, s15
    3e92:	vmul.f64	d8, d8, d8
    3e96:	b.n	3ea4 <regular_animation() [clone .part.21]+0x68c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    3e98:	ldr	r3, [r5, #0]
    3e9a:	str	r3, [r6, #28]
    3e9c:	adds	r4, #1
    3e9e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    3ea0:	cmp	r9, r4
    3ea2:	beq.n	3ef4 <regular_animation() [clone .part.21]+0x6dc>
      double xx = x-midPoint_y;
    3ea4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    3ea8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    3eac:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    3eb0:	vfma.f64	d0, d7, d7
    3eb4:	vsqrt.f64	d7, d0
    3eb8:	vcmp.f64	d7, d7
    3ebc:	vmrs	APSR_nzcv, fpscr
    3ec0:	bne.w	493c <regular_animation() [clone .part.21]+0x1124>
    3ec4:	vcmpe.f64	d7, d9
    3ec8:	vmrs	APSR_nzcv, fpscr
    3ecc:	bhi.n	3e9c <regular_animation() [clone .part.21]+0x684>
        if (rand){
    3ece:	cmp.w	sl, #0
    3ed2:	beq.n	3e98 <regular_animation() [clone .part.21]+0x680>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3ed4:	ldr	r3, [r5, #20]
    3ed6:	adds	r4, #1
    3ed8:	ldr	r0, [r5, #16]
    3eda:	adds	r6, #96	; 0x60
    3edc:	subs	r0, r3, r0
    3ede:	adds	r0, #2
    3ee0:	bl	fe7c <random(unsigned long)>
    3ee4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    3ee6:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3ee8:	add.w	r3, r3, #4294967295
    3eec:	add	r0, r3
    3eee:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    3ef2:	bne.n	3ea4 <regular_animation() [clone .part.21]+0x68c>
    3ef4:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    3ef6:	ldr	r3, [sp, #20]
    3ef8:	add.w	r8, r8, #1
    3efc:	cmp	r3, r7
    3efe:	bne.n	3e86 <regular_animation() [clone .part.21]+0x66e>
    3f00:	b.n	390a <regular_animation() [clone .part.21]+0xf2>
    3f02:	nop
    3f04:	nop.w
    3f08:	.word	0xd2f1a9fc
    3f0c:	.word	0x3ff0624d
    3f10:	.word	0x20004e0c
    3f14:	.word	0x16c16c17
    3f18:	.word	0x20008a30
    3f1c:	.word	0x20008a44
    3f20:	.word	0x20005000
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3f24:	movs	r0, #8
    3f26:	bl	fe7c <random(unsigned long)>
    3f2a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3f2e:	movs	r0, #8
    3f30:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    3f34:	cmp	r6, #0
    3f36:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3f38:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    3f3c:	it	lt
    3f3e:	addlt	r3, r6, #1
    3f40:	cmp	r6, #0
    3f42:	mov.w	r3, r3, asr #1
    3f46:	it	lt
    3f48:	addlt	r6, #1
    3f4a:	negs	r3, r3
    3f4c:	asrs	r6, r6, #1
    3f4e:	adds	r7, r0, r3
    3f50:	adds	r2, r0, r6
    3f52:	cmp	r7, r2
    3f54:	str	r2, [sp, #24]
    3f56:	bge.w	390a <regular_animation() [clone .part.21]+0xf2>
    3f5a:	adds	r3, r4, r3
    3f5c:	add	r4, r6
    3f5e:	add.w	r6, r3, r3, lsl #1
    3f62:	str	r3, [sp, #20]
    3f64:	add.w	r6, r7, r6, lsl #3
    3f68:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    3f6c:	ldr	r3, [sp, #20]
    3f6e:	cmp	r3, r4
    3f70:	bge.n	3f92 <regular_animation() [clone .part.21]+0x77a>
    3f72:	mov	r9, r6
    3f74:	ldr.w	r8, [sp, #20]
        if (rand){
    3f78:	cmp.w	sl, #0
    3f7c:	bne.w	48d4 <regular_animation() [clone .part.21]+0x10bc>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    3f80:	ldr	r3, [r5, #0]
    3f82:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    3f86:	add.w	r8, r8, #1
    3f8a:	add.w	r9, r9, #96	; 0x60
    3f8e:	cmp	r8, r4
    3f90:	bne.n	3f78 <regular_animation() [clone .part.21]+0x760>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    3f92:	adds	r7, #1
    3f94:	ldr	r3, [sp, #24]
    3f96:	adds	r6, #4
    3f98:	cmp	r7, r3
    3f9a:	bne.n	3f6c <regular_animation() [clone .part.21]+0x754>
    3f9c:	b.n	390a <regular_animation() [clone .part.21]+0xf2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3f9e:	movs	r0, #8
    3fa0:	bl	fe7c <random(unsigned long)>
    3fa4:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    3fa8:	movs	r0, #8
    3faa:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    3fae:	cmp	r6, #0
    3fb0:	ble.w	390a <regular_animation() [clone .part.21]+0xf2>
    3fb4:	add.w	r4, r4, r4, lsl #1
    3fb8:	add.w	r3, r0, #15
    3fbc:	movs	r7, #0
    3fbe:	add.w	r4, r3, r4, lsl #3
    3fc2:	add.w	r4, r5, r4, lsl #2
      if (rand){
    3fc6:	cmp.w	sl, #0
    3fca:	bne.n	3fe0 <regular_animation() [clone .part.21]+0x7c8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    3fcc:	ldr	r3, [r5, #0]
    3fce:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    3fd0:	adds	r7, #1
    3fd2:	adds	r4, #4
    3fd4:	cmp	r7, r6
    3fd6:	beq.w	390a <regular_animation() [clone .part.21]+0xf2>
      if (rand){
    3fda:	cmp.w	sl, #0
    3fde:	beq.n	3fcc <regular_animation() [clone .part.21]+0x7b4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3fe0:	ldr	r3, [r5, #20]
    3fe2:	ldr	r2, [r5, #16]
    3fe4:	subs	r0, r3, r2
    3fe6:	adds	r0, #2
    3fe8:	bl	fe7c <random(unsigned long)>
    3fec:	ldr	r3, [r5, #16]
    3fee:	subs	r3, #1
    3ff0:	add	r0, r3
    3ff2:	str	r0, [r4, #0]
    3ff4:	b.n	3fd0 <regular_animation() [clone .part.21]+0x7b8>
    3ff6:	add.w	r6, r5, #28
    3ffa:	mov	r4, r5
    3ffc:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4000:	cmp.w	sl, #0
    4004:	bne.n	4022 <regular_animation() [clone .part.21]+0x80a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4006:	ldr	r3, [r5, #0]
    4008:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    400a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    400e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4010:	str	r3, [r4, #120]	; 0x78
    4012:	adds	r4, #96	; 0x60
    4014:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4016:	cmp	r4, r7
    4018:	beq.w	389c <regular_animation() [clone .part.21]+0x84>
    if (rand){
    401c:	cmp.w	sl, #0
    4020:	beq.n	4006 <regular_animation() [clone .part.21]+0x7ee>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4022:	ldr	r3, [r5, #20]
    4024:	ldr	r2, [r5, #16]
    4026:	subs	r0, r3, r2
    4028:	adds	r0, #2
    402a:	bl	fe7c <random(unsigned long)>
    402e:	ldr	r1, [r5, #16]
    4030:	subs	r2, r1, #1
    4032:	add	r0, r2
    4034:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4036:	ldr	r3, [r5, #20]
    4038:	subs	r0, r3, r1
    403a:	adds	r0, #2
    403c:	bl	fe7c <random(unsigned long)>
    4040:	ldr	r1, [r5, #16]
    4042:	subs	r2, r1, #1
    4044:	add	r0, r2
    4046:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    404a:	ldr	r3, [r5, #20]
    404c:	subs	r0, r3, r1
    404e:	adds	r0, #2
    4050:	bl	fe7c <random(unsigned long)>
    4054:	ldr	r1, [r5, #16]
    4056:	subs	r2, r1, #1
    4058:	add	r0, r2
    405a:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    405c:	ldr	r3, [r5, #20]
    405e:	subs	r0, r3, r1
    4060:	adds	r0, #2
    4062:	bl	fe7c <random(unsigned long)>
    4066:	ldr	r3, [r5, #16]
    4068:	subs	r3, #1
    406a:	add	r0, r3
    406c:	str	r0, [r4, #120]	; 0x78
    406e:	b.n	4012 <regular_animation() [clone .part.21]+0x7fa>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4070:	cmp	r4, #0
    4072:	ble.w	389c <regular_animation() [clone .part.21]+0x84>
    4076:	movs	r7, #0
    4078:	b.n	408e <regular_animation() [clone .part.21]+0x876>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    407a:	add.w	r3, r6, r3, lsl #3
    407e:	ldr	r2, [r5, #0]
    4080:	add.w	r3, r5, r3, lsl #2
    4084:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4086:	adds	r7, #1
    4088:	cmp	r7, r4
    408a:	beq.w	389c <regular_animation() [clone .part.21]+0x84>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    408e:	movs	r0, #8
    4090:	bl	fe7c <random(unsigned long)>
    4094:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4098:	movs	r0, #8
    409a:	bl	fe7c <random(unsigned long)>
    409e:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    40a2:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    40a6:	cmp.w	sl, #0
    40aa:	beq.n	407a <regular_animation() [clone .part.21]+0x862>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    40ac:	ldr	r3, [r5, #20]
    40ae:	add.w	r9, r9, r9, lsl #1
    40b2:	ldr	r2, [r5, #16]
    40b4:	add.w	r6, r6, r9, lsl #3
    40b8:	subs	r0, r3, r2
    40ba:	add.w	r6, r5, r6, lsl #2
    40be:	adds	r0, #2
    40c0:	bl	fe7c <random(unsigned long)>
    40c4:	ldr	r3, [r5, #16]
    40c6:	subs	r3, #1
    40c8:	add	r0, r3
    40ca:	str	r0, [r6, #28]
    40cc:	b.n	4086 <regular_animation() [clone .part.21]+0x86e>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    40ce:	movs	r0, #8
    40d0:	mov	r7, r5
    40d2:	bl	fe7c <random(unsigned long)>
    40d6:	mov	r6, r0
    40d8:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    40dc:	movs	r0, #8
    40de:	adds	r6, #8
    40e0:	str	r3, [sp, #20]
    40e2:	bl	fe7c <random(unsigned long)>
    40e6:	vmov	s15, r4
    40ea:	add.w	r3, r0, #8
    40ee:	negs	r2, r6
    40f0:	rsb	r9, r0, #16
    40f4:	vcvt.f64.s32	d9, s15
    40f8:	negs	r3, r3
    40fa:	mov	r8, r2
    40fc:	str	r3, [sp, #28]
    40fe:	vmov	s15, r8
    4102:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4104:	mov	r6, r7
    4106:	vcvt.f64.s32	d8, s15
    410a:	vmul.f64	d8, d8, d8
    410e:	b.n	411c <regular_animation() [clone .part.21]+0x904>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4110:	ldr	r3, [r5, #0]
    4112:	str	r3, [r6, #28]
    4114:	adds	r4, #1
    4116:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4118:	cmp	r4, r9
    411a:	beq.n	416c <regular_animation() [clone .part.21]+0x954>
      double xx = x-midPoint_y;
    411c:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4120:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4124:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4128:	vfma.f64	d0, d7, d7
    412c:	vsqrt.f64	d7, d0
    4130:	vcmp.f64	d7, d7
    4134:	vmrs	APSR_nzcv, fpscr
    4138:	bne.w	491e <regular_animation() [clone .part.21]+0x1106>
    413c:	vcmpe.f64	d7, d9
    4140:	vmrs	APSR_nzcv, fpscr
    4144:	bhi.n	4114 <regular_animation() [clone .part.21]+0x8fc>
        if (rand){
    4146:	cmp.w	sl, #0
    414a:	beq.n	4110 <regular_animation() [clone .part.21]+0x8f8>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    414c:	ldr	r3, [r5, #20]
    414e:	adds	r4, #1
    4150:	ldr	r0, [r5, #16]
    4152:	adds	r6, #96	; 0x60
    4154:	subs	r0, r3, r0
    4156:	adds	r0, #2
    4158:	bl	fe7c <random(unsigned long)>
    415c:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    415e:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4160:	add.w	r3, r3, #4294967295
    4164:	add	r0, r3
    4166:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    416a:	bne.n	411c <regular_animation() [clone .part.21]+0x904>
    416c:	mov	r3, r8
    416e:	adds	r7, #4
    4170:	adds	r3, #1
    4172:	mov	r8, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4174:	ldr	r3, [sp, #20]
    4176:	cmp	r7, r3
    4178:	bne.n	40fe <regular_animation() [clone .part.21]+0x8e6>
    417a:	b.w	389c <regular_animation() [clone .part.21]+0x84>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    417e:	movs	r0, #8
    4180:	bl	fe7c <random(unsigned long)>
    4184:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4188:	movs	r0, #8
    418a:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    418e:	cmp	r4, #0
    4190:	ble.w	389c <regular_animation() [clone .part.21]+0x84>
    4194:	add.w	r3, r0, #15
    4198:	add.w	r6, r6, r6, lsl #1
    419c:	movs	r7, #0
    419e:	add.w	r6, r3, r6, lsl #3
    41a2:	add.w	r6, r5, r6, lsl #2
      if (rand){
    41a6:	cmp.w	sl, #0
    41aa:	bne.n	41c0 <regular_animation() [clone .part.21]+0x9a8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    41ac:	ldr	r3, [r5, #0]
    41ae:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    41b0:	adds	r7, #1
    41b2:	adds	r6, #4
    41b4:	cmp	r7, r4
    41b6:	beq.w	389c <regular_animation() [clone .part.21]+0x84>
      if (rand){
    41ba:	cmp.w	sl, #0
    41be:	beq.n	41ac <regular_animation() [clone .part.21]+0x994>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    41c0:	ldr	r3, [r5, #20]
    41c2:	ldr	r2, [r5, #16]
    41c4:	subs	r0, r3, r2
    41c6:	adds	r0, #2
    41c8:	bl	fe7c <random(unsigned long)>
    41cc:	ldr	r3, [r5, #16]
    41ce:	subs	r3, #1
    41d0:	add	r0, r3
    41d2:	str	r0, [r6, #0]
    41d4:	b.n	41b0 <regular_animation() [clone .part.21]+0x998>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41d6:	movs	r0, #8
    41d8:	bl	fe7c <random(unsigned long)>
    41dc:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41e0:	movs	r0, #8
    41e2:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    41e6:	cmp	r4, #0
    41e8:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41ea:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    41ee:	it	lt
    41f0:	addlt	r3, r4, #1
    41f2:	cmp	r4, #0
    41f4:	mov.w	r3, r3, asr #1
    41f8:	it	lt
    41fa:	addlt	r4, #1
    41fc:	negs	r3, r3
    41fe:	asrs	r4, r4, #1
    4200:	adds	r6, r0, r3
    4202:	adds	r2, r0, r4
    4204:	cmp	r6, r2
    4206:	str	r2, [sp, #28]
    4208:	bge.w	389c <regular_animation() [clone .part.21]+0x84>
    420c:	adds	r3, r7, r3
    420e:	add	r4, r7
    4210:	str	r3, [sp, #20]
    4212:	add.w	r3, r3, r3, lsl #1
    4216:	add.w	r3, r6, r3, lsl #3
    421a:	add.w	r3, r5, r3, lsl #2
    421e:	mov	r8, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4220:	ldr	r3, [sp, #20]
    4222:	cmp	r3, r4
    4224:	bge.n	4242 <regular_animation() [clone .part.21]+0xa2a>
    4226:	mov	r9, r8
    4228:	ldr	r7, [sp, #20]
        if (rand){
    422a:	cmp.w	sl, #0
    422e:	bne.w	48ee <regular_animation() [clone .part.21]+0x10d6>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4232:	ldr	r3, [r5, #0]
    4234:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4238:	adds	r7, #1
    423a:	add.w	r9, r9, #96	; 0x60
    423e:	cmp	r7, r4
    4240:	bne.n	422a <regular_animation() [clone .part.21]+0xa12>
    4242:	mov	r3, r8

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4244:	adds	r6, #1
    4246:	adds	r3, #4
    4248:	mov	r8, r3
    424a:	ldr	r3, [sp, #28]
    424c:	cmp	r6, r3
    424e:	bne.n	4220 <regular_animation() [clone .part.21]+0xa08>
    4250:	b.w	389c <regular_animation() [clone .part.21]+0x84>
    4254:	add.w	r6, r5, #28
    4258:	mov	r4, r5
    425a:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    425e:	cmp.w	sl, #0
    4262:	bne.n	4280 <regular_animation() [clone .part.21]+0xa68>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4264:	ldr	r3, [r5, #0]
    4266:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4268:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    426c:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    426e:	str	r3, [r4, #120]	; 0x78
    4270:	adds	r4, #96	; 0x60
    4272:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4274:	cmp	r4, r7
    4276:	beq.w	38be <regular_animation() [clone .part.21]+0xa6>
    if (rand){
    427a:	cmp.w	sl, #0
    427e:	beq.n	4264 <regular_animation() [clone .part.21]+0xa4c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4280:	ldr	r3, [r5, #20]
    4282:	ldr	r2, [r5, #16]
    4284:	subs	r0, r3, r2
    4286:	adds	r0, #2
    4288:	bl	fe7c <random(unsigned long)>
    428c:	ldr	r1, [r5, #16]
    428e:	subs	r2, r1, #1
    4290:	add	r0, r2
    4292:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4294:	ldr	r3, [r5, #20]
    4296:	subs	r0, r3, r1
    4298:	adds	r0, #2
    429a:	bl	fe7c <random(unsigned long)>
    429e:	ldr	r1, [r5, #16]
    42a0:	subs	r2, r1, #1
    42a2:	add	r0, r2
    42a4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42a8:	ldr	r3, [r5, #20]
    42aa:	subs	r0, r3, r1
    42ac:	adds	r0, #2
    42ae:	bl	fe7c <random(unsigned long)>
    42b2:	ldr	r1, [r5, #16]
    42b4:	subs	r2, r1, #1
    42b6:	add	r0, r2
    42b8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42ba:	ldr	r3, [r5, #20]
    42bc:	subs	r0, r3, r1
    42be:	adds	r0, #2
    42c0:	bl	fe7c <random(unsigned long)>
    42c4:	ldr	r3, [r5, #16]
    42c6:	subs	r3, #1
    42c8:	add	r0, r3
    42ca:	str	r0, [r4, #120]	; 0x78
    42cc:	b.n	4270 <regular_animation() [clone .part.21]+0xa58>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    42ce:	cmp	r4, #0
    42d0:	ble.w	38be <regular_animation() [clone .part.21]+0xa6>
    42d4:	movs	r7, #0
    42d6:	b.n	42ec <regular_animation() [clone .part.21]+0xad4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    42d8:	add.w	r3, r6, r3, lsl #3
    42dc:	ldr	r2, [r5, #0]
    42de:	add.w	r3, r5, r3, lsl #2
    42e2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    42e4:	adds	r7, #1
    42e6:	cmp	r7, r4
    42e8:	beq.w	38be <regular_animation() [clone .part.21]+0xa6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42ec:	movs	r0, #8
    42ee:	bl	fe7c <random(unsigned long)>
    42f2:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42f6:	movs	r0, #8
    42f8:	bl	fe7c <random(unsigned long)>
    42fc:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4300:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4304:	cmp.w	sl, #0
    4308:	beq.n	42d8 <regular_animation() [clone .part.21]+0xac0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    430a:	ldr	r3, [r5, #20]
    430c:	add.w	r9, r9, r9, lsl #1
    4310:	ldr	r2, [r5, #16]
    4312:	add.w	r6, r6, r9, lsl #3
    4316:	subs	r0, r3, r2
    4318:	add.w	r6, r5, r6, lsl #2
    431c:	adds	r0, #2
    431e:	bl	fe7c <random(unsigned long)>
    4322:	ldr	r3, [r5, #16]
    4324:	subs	r3, #1
    4326:	add	r0, r3
    4328:	str	r0, [r6, #28]
    432a:	b.n	42e4 <regular_animation() [clone .part.21]+0xacc>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    432c:	movs	r0, #8
    432e:	mov	r7, r5
    4330:	bl	fe7c <random(unsigned long)>
    4334:	mov	r6, r0
    4336:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    433a:	movs	r0, #8
    433c:	adds	r6, #8
    433e:	str	r3, [sp, #20]
    4340:	bl	fe7c <random(unsigned long)>
    4344:	vmov	s15, r4
    4348:	add.w	r3, r0, #8
    434c:	negs	r2, r6
    434e:	rsb	r9, r0, #16
    4352:	vcvt.f64.s32	d9, s15
    4356:	negs	r3, r3
    4358:	mov	r8, r2
    435a:	str	r3, [sp, #28]
    435c:	vmov	s15, r8
    4360:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4362:	mov	r6, r7
    4364:	vcvt.f64.s32	d8, s15
    4368:	vmul.f64	d8, d8, d8
    436c:	b.n	437a <regular_animation() [clone .part.21]+0xb62>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    436e:	ldr	r3, [r5, #0]
    4370:	str	r3, [r6, #28]
    4372:	adds	r4, #1
    4374:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4376:	cmp	r4, r9
    4378:	beq.n	43ca <regular_animation() [clone .part.21]+0xbb2>
      double xx = x-midPoint_y;
    437a:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    437e:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4382:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4386:	vfma.f64	d0, d7, d7
    438a:	vsqrt.f64	d7, d0
    438e:	vcmp.f64	d7, d7
    4392:	vmrs	APSR_nzcv, fpscr
    4396:	bne.w	4932 <regular_animation() [clone .part.21]+0x111a>
    439a:	vcmpe.f64	d7, d9
    439e:	vmrs	APSR_nzcv, fpscr
    43a2:	bhi.n	4372 <regular_animation() [clone .part.21]+0xb5a>
        if (rand){
    43a4:	cmp.w	sl, #0
    43a8:	beq.n	436e <regular_animation() [clone .part.21]+0xb56>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43aa:	ldr	r3, [r5, #20]
    43ac:	adds	r4, #1
    43ae:	ldr	r0, [r5, #16]
    43b0:	adds	r6, #96	; 0x60
    43b2:	subs	r0, r3, r0
    43b4:	adds	r0, #2
    43b6:	bl	fe7c <random(unsigned long)>
    43ba:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    43bc:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43be:	add.w	r3, r3, #4294967295
    43c2:	add	r0, r3
    43c4:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    43c8:	bne.n	437a <regular_animation() [clone .part.21]+0xb62>
    43ca:	mov	r3, r8
    43cc:	adds	r7, #4
    43ce:	adds	r3, #1
    43d0:	mov	r8, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    43d2:	ldr	r3, [sp, #20]
    43d4:	cmp	r7, r3
    43d6:	bne.n	435c <regular_animation() [clone .part.21]+0xb44>
    43d8:	b.w	38be <regular_animation() [clone .part.21]+0xa6>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    43dc:	movs	r0, #8
    43de:	bl	fe7c <random(unsigned long)>
    43e2:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    43e6:	movs	r0, #8
    43e8:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    43ec:	cmp	r4, #0
    43ee:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    43f0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    43f4:	it	lt
    43f6:	addlt	r3, r4, #1
    43f8:	cmp	r4, #0
    43fa:	mov.w	r3, r3, asr #1
    43fe:	it	lt
    4400:	addlt	r4, #1
    4402:	negs	r3, r3
    4404:	asrs	r4, r4, #1
    4406:	adds	r6, r0, r3
    4408:	adds	r2, r0, r4
    440a:	cmp	r6, r2
    440c:	str	r2, [sp, #28]
    440e:	bge.w	38be <regular_animation() [clone .part.21]+0xa6>
    4412:	adds	r3, r7, r3
    4414:	add	r4, r7
    4416:	str	r3, [sp, #20]
    4418:	add.w	r3, r3, r3, lsl #1
    441c:	add.w	r3, r6, r3, lsl #3
    4420:	add.w	r3, r5, r3, lsl #2
    4424:	mov	r8, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4426:	ldr	r3, [sp, #20]
    4428:	cmp	r3, r4
    442a:	bge.n	4448 <regular_animation() [clone .part.21]+0xc30>
    442c:	mov	r9, r8
    442e:	ldr	r7, [sp, #20]
        if (rand){
    4430:	cmp.w	sl, #0
    4434:	bne.w	48bc <regular_animation() [clone .part.21]+0x10a4>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4438:	ldr	r3, [r5, #0]
    443a:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    443e:	adds	r7, #1
    4440:	add.w	r9, r9, #96	; 0x60
    4444:	cmp	r7, r4
    4446:	bne.n	4430 <regular_animation() [clone .part.21]+0xc18>
    4448:	mov	r3, r8

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    444a:	adds	r6, #1
    444c:	adds	r3, #4
    444e:	mov	r8, r3
    4450:	ldr	r3, [sp, #28]
    4452:	cmp	r6, r3
    4454:	bne.n	4426 <regular_animation() [clone .part.21]+0xc0e>
    4456:	b.w	38be <regular_animation() [clone .part.21]+0xa6>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    445a:	movs	r0, #8
    445c:	bl	fe7c <random(unsigned long)>
    4460:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4464:	movs	r0, #8
    4466:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    446a:	cmp	r4, #0
    446c:	ble.w	38be <regular_animation() [clone .part.21]+0xa6>
    4470:	add.w	r3, r0, #15
    4474:	add.w	r6, r6, r6, lsl #1
    4478:	movs	r7, #0
    447a:	add.w	r6, r3, r6, lsl #3
    447e:	add.w	r6, r5, r6, lsl #2
      if (rand){
    4482:	cmp.w	sl, #0
    4486:	bne.n	449c <regular_animation() [clone .part.21]+0xc84>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4488:	ldr	r3, [r5, #0]
    448a:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    448c:	adds	r7, #1
    448e:	adds	r6, #4
    4490:	cmp	r7, r4
    4492:	beq.w	38be <regular_animation() [clone .part.21]+0xa6>
      if (rand){
    4496:	cmp.w	sl, #0
    449a:	beq.n	4488 <regular_animation() [clone .part.21]+0xc70>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    449c:	ldr	r3, [r5, #20]
    449e:	ldr	r2, [r5, #16]
    44a0:	subs	r0, r3, r2
    44a2:	adds	r0, #2
    44a4:	bl	fe7c <random(unsigned long)>
    44a8:	ldr	r3, [r5, #16]
    44aa:	subs	r3, #1
    44ac:	add	r0, r3
    44ae:	str	r0, [r6, #0]
    44b0:	b.n	448c <regular_animation() [clone .part.21]+0xc74>
    44b2:	add.w	r6, r5, #28
    44b6:	mov	r4, r5
    44b8:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    44bc:	cmp.w	sl, #0
    44c0:	bne.n	44de <regular_animation() [clone .part.21]+0xcc6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    44c2:	ldr	r3, [r5, #0]
    44c4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    44c6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    44ca:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    44cc:	str	r3, [r4, #120]	; 0x78
    44ce:	adds	r4, #96	; 0x60
    44d0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    44d2:	cmp	r4, r7
    44d4:	beq.w	38ec <regular_animation() [clone .part.21]+0xd4>
    if (rand){
    44d8:	cmp.w	sl, #0
    44dc:	beq.n	44c2 <regular_animation() [clone .part.21]+0xcaa>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    44de:	ldr	r3, [r5, #20]
    44e0:	ldr	r2, [r5, #16]
    44e2:	subs	r0, r3, r2
    44e4:	adds	r0, #2
    44e6:	bl	fe7c <random(unsigned long)>
    44ea:	ldr	r1, [r5, #16]
    44ec:	subs	r2, r1, #1
    44ee:	add	r0, r2
    44f0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    44f2:	ldr	r3, [r5, #20]
    44f4:	subs	r0, r3, r1
    44f6:	adds	r0, #2
    44f8:	bl	fe7c <random(unsigned long)>
    44fc:	ldr	r1, [r5, #16]
    44fe:	subs	r2, r1, #1
    4500:	add	r0, r2
    4502:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4506:	ldr	r3, [r5, #20]
    4508:	subs	r0, r3, r1
    450a:	adds	r0, #2
    450c:	bl	fe7c <random(unsigned long)>
    4510:	ldr	r1, [r5, #16]
    4512:	subs	r2, r1, #1
    4514:	add	r0, r2
    4516:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4518:	ldr	r3, [r5, #20]
    451a:	subs	r0, r3, r1
    451c:	adds	r0, #2
    451e:	bl	fe7c <random(unsigned long)>
    4522:	ldr	r3, [r5, #16]
    4524:	subs	r3, #1
    4526:	add	r0, r3
    4528:	str	r0, [r4, #120]	; 0x78
    452a:	b.n	44ce <regular_animation() [clone .part.21]+0xcb6>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    452c:	cmp	r6, #0
    452e:	ble.w	38ec <regular_animation() [clone .part.21]+0xd4>
    4532:	movs	r7, #0
    4534:	b.n	454a <regular_animation() [clone .part.21]+0xd32>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4536:	add.w	r3, r4, r3, lsl #3
    453a:	ldr	r2, [r5, #0]
    453c:	add.w	r3, r5, r3, lsl #2
    4540:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4542:	adds	r7, #1
    4544:	cmp	r7, r6
    4546:	beq.w	38ec <regular_animation() [clone .part.21]+0xd4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    454a:	movs	r0, #8
    454c:	bl	fe7c <random(unsigned long)>
    4550:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4554:	movs	r0, #8
    4556:	bl	fe7c <random(unsigned long)>
    455a:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    455e:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4562:	cmp.w	sl, #0
    4566:	beq.n	4536 <regular_animation() [clone .part.21]+0xd1e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4568:	ldr	r3, [r5, #20]
    456a:	add.w	r8, r8, r8, lsl #1
    456e:	ldr	r2, [r5, #16]
    4570:	add.w	r4, r4, r8, lsl #3
    4574:	subs	r0, r3, r2
    4576:	add.w	r4, r5, r4, lsl #2
    457a:	adds	r0, #2
    457c:	bl	fe7c <random(unsigned long)>
    4580:	ldr	r3, [r5, #16]
    4582:	subs	r3, #1
    4584:	add	r0, r3
    4586:	str	r0, [r4, #28]
    4588:	b.n	4542 <regular_animation() [clone .part.21]+0xd2a>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    458a:	movs	r0, #8
    458c:	mov	r7, r5
    458e:	bl	fe7c <random(unsigned long)>
    4592:	add.w	r3, r5, #96	; 0x60
    4596:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4598:	movs	r0, #8
    459a:	str	r3, [sp, #20]
    459c:	bl	fe7c <random(unsigned long)>
    45a0:	vmov	s15, r6
    45a4:	adds	r4, #8
    45a6:	add.w	r3, r0, #8
    45aa:	rsb	r9, r0, #16
    45ae:	vcvt.f64.s32	d9, s15
    45b2:	rsb	r8, r4, #0
    45b6:	negs	r3, r3
    45b8:	str	r3, [sp, #24]
    45ba:	vmov	s15, r8
    45be:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    45c0:	mov	r6, r7
    45c2:	vcvt.f64.s32	d8, s15
    45c6:	vmul.f64	d8, d8, d8
    45ca:	b.n	45d8 <regular_animation() [clone .part.21]+0xdc0>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    45cc:	ldr	r3, [r5, #0]
    45ce:	str	r3, [r6, #28]
    45d0:	adds	r4, #1
    45d2:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    45d4:	cmp	r9, r4
    45d6:	beq.n	4628 <regular_animation() [clone .part.21]+0xe10>
      double xx = x-midPoint_y;
    45d8:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    45dc:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    45e0:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    45e4:	vfma.f64	d0, d7, d7
    45e8:	vsqrt.f64	d7, d0
    45ec:	vcmp.f64	d7, d7
    45f0:	vmrs	APSR_nzcv, fpscr
    45f4:	bne.w	4928 <regular_animation() [clone .part.21]+0x1110>
    45f8:	vcmpe.f64	d7, d9
    45fc:	vmrs	APSR_nzcv, fpscr
    4600:	bhi.n	45d0 <regular_animation() [clone .part.21]+0xdb8>
        if (rand){
    4602:	cmp.w	sl, #0
    4606:	beq.n	45cc <regular_animation() [clone .part.21]+0xdb4>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4608:	ldr	r3, [r5, #20]
    460a:	adds	r4, #1
    460c:	ldr	r0, [r5, #16]
    460e:	adds	r6, #96	; 0x60
    4610:	subs	r0, r3, r0
    4612:	adds	r0, #2
    4614:	bl	fe7c <random(unsigned long)>
    4618:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    461a:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    461c:	add.w	r3, r3, #4294967295
    4620:	add	r0, r3
    4622:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4626:	bne.n	45d8 <regular_animation() [clone .part.21]+0xdc0>
    4628:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    462a:	ldr	r3, [sp, #20]
    462c:	add.w	r8, r8, #1
    4630:	cmp	r7, r3
    4632:	bne.n	45ba <regular_animation() [clone .part.21]+0xda2>
    4634:	b.w	38ec <regular_animation() [clone .part.21]+0xd4>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4638:	movs	r0, #8
    463a:	bl	fe7c <random(unsigned long)>
    463e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4642:	movs	r0, #8
    4644:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4648:	cmp	r6, #0
    464a:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    464c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4650:	it	lt
    4652:	addlt	r3, r6, #1
    4654:	cmp	r6, #0
    4656:	mov.w	r3, r3, asr #1
    465a:	it	lt
    465c:	addlt	r6, #1
    465e:	negs	r3, r3
    4660:	asrs	r6, r6, #1
    4662:	adds	r7, r0, r3
    4664:	adds	r2, r0, r6
    4666:	cmp	r7, r2
    4668:	str	r2, [sp, #24]
    466a:	bge.w	38ec <regular_animation() [clone .part.21]+0xd4>
    466e:	adds	r3, r4, r3
    4670:	add	r4, r6
    4672:	add.w	r6, r3, r3, lsl #1
    4676:	str	r3, [sp, #20]
    4678:	add.w	r6, r7, r6, lsl #3
    467c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4680:	ldr	r3, [sp, #20]
    4682:	cmp	r3, r4
    4684:	bge.n	46a6 <regular_animation() [clone .part.21]+0xe8e>
    4686:	mov	r9, r6
    4688:	ldr.w	r8, [sp, #20]
        if (rand){
    468c:	cmp.w	sl, #0
    4690:	bne.w	4906 <regular_animation() [clone .part.21]+0x10ee>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4694:	ldr	r3, [r5, #0]
    4696:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    469a:	add.w	r8, r8, #1
    469e:	add.w	r9, r9, #96	; 0x60
    46a2:	cmp	r8, r4
    46a4:	bne.n	468c <regular_animation() [clone .part.21]+0xe74>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    46a6:	adds	r7, #1
    46a8:	ldr	r3, [sp, #24]
    46aa:	adds	r6, #4
    46ac:	cmp	r7, r3
    46ae:	bne.n	4680 <regular_animation() [clone .part.21]+0xe68>
    46b0:	b.w	38ec <regular_animation() [clone .part.21]+0xd4>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46b4:	movs	r0, #8
    46b6:	bl	fe7c <random(unsigned long)>
    46ba:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46be:	movs	r0, #8
    46c0:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    46c4:	cmp	r6, #0
    46c6:	ble.w	38ec <regular_animation() [clone .part.21]+0xd4>
    46ca:	add.w	r3, r0, #15
    46ce:	add.w	r4, r4, r4, lsl #1
    46d2:	movs	r7, #0
    46d4:	add.w	r4, r3, r4, lsl #3
    46d8:	add.w	r4, r5, r4, lsl #2
      if (rand){
    46dc:	cmp.w	sl, #0
    46e0:	bne.n	46f6 <regular_animation() [clone .part.21]+0xede>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    46e2:	ldr	r3, [r5, #0]
    46e4:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    46e6:	adds	r7, #1
    46e8:	adds	r4, #4
    46ea:	cmp	r7, r6
    46ec:	beq.w	38ec <regular_animation() [clone .part.21]+0xd4>
      if (rand){
    46f0:	cmp.w	sl, #0
    46f4:	beq.n	46e2 <regular_animation() [clone .part.21]+0xeca>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    46f6:	ldr	r3, [r5, #20]
    46f8:	ldr	r2, [r5, #16]
    46fa:	subs	r0, r3, r2
    46fc:	adds	r0, #2
    46fe:	bl	fe7c <random(unsigned long)>
    4702:	ldr	r3, [r5, #16]
    4704:	subs	r3, #1
    4706:	add	r0, r3
    4708:	str	r0, [r4, #0]
    470a:	b.n	46e6 <regular_animation() [clone .part.21]+0xece>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    470c:	movw	sl, #4636	; 0x121c
    4710:	add.w	r3, r5, #28
    4714:	movs	r7, #0
    4716:	add.w	r9, r5, #4640	; 0x1220
    471a:	add	sl, r5
    471c:	str	r3, [sp, #28]
    471e:	lsls	r3, r7, #3
    4720:	ldr	r6, [sp, #28]
    4722:	movs	r4, #0
    4724:	str	r3, [sp, #20]
    4726:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    472a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    472c:	add	r3, r4
    472e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4730:	cbnz	r2, 4736 <regular_animation() [clone .part.21]+0xf1e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4732:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4736:	cbnz	r3, 4752 <regular_animation() [clone .part.21]+0xf3a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4738:	adds	r4, #1
    473a:	adds	r6, #4
    473c:	cmp	r4, #24
    473e:	bne.n	4726 <regular_animation() [clone .part.21]+0xf0e>
    4740:	ldr	r3, [sp, #28]
    4742:	adds	r7, #24
    4744:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4746:	cmp.w	r7, #576	; 0x240
    474a:	str	r3, [sp, #28]
    474c:	bne.n	471e <regular_animation() [clone .part.21]+0xf06>
    474e:	b.w	38be <regular_animation() [clone .part.21]+0xa6>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4752:	ldr	r2, [r5, #20]
    4754:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4756:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    475a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    475c:	ldr	r2, [sp, #20]
    475e:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4760:	adds	r0, #2
    4762:	ldr.w	r8, [r3, r4, lsl #3]
    4766:	bl	fe7c <random(unsigned long)>
    476a:	ldr	r3, [r5, #16]
    476c:	rsb	r3, r3, r8
    4770:	adds	r3, #1
    4772:	subs	r0, r3, r0
    4774:	str	r0, [r6, #0]
    4776:	b.n	4738 <regular_animation() [clone .part.21]+0xf20>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4778:	movw	r9, #4636	; 0x121c
    477c:	add.w	r3, r5, #28
    4780:	movs	r7, #0
    4782:	add.w	r8, r5, #4640	; 0x1220
    4786:	add	r9, r5
    4788:	str	r3, [sp, #24]
    478a:	lsls	r3, r7, #3
    478c:	ldr	r6, [sp, #24]
    478e:	movs	r4, #0
    4790:	str	r3, [sp, #20]
    4792:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4796:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4798:	add	r3, r4
    479a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    479c:	cbnz	r2, 47a2 <regular_animation() [clone .part.21]+0xf8a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    479e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    47a2:	cbnz	r3, 47be <regular_animation() [clone .part.21]+0xfa6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    47a4:	adds	r4, #1
    47a6:	adds	r6, #4
    47a8:	cmp	r4, #24
    47aa:	bne.n	4792 <regular_animation() [clone .part.21]+0xf7a>
    47ac:	ldr	r3, [sp, #24]
    47ae:	adds	r7, #24
    47b0:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    47b2:	cmp.w	r7, #576	; 0x240
    47b6:	str	r3, [sp, #24]
    47b8:	bne.n	478a <regular_animation() [clone .part.21]+0xf72>
    47ba:	b.w	38ec <regular_animation() [clone .part.21]+0xd4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    47be:	ldr	r2, [r5, #20]
    47c0:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    47c2:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    47c6:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    47c8:	ldr	r2, [sp, #20]
    47ca:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    47cc:	adds	r0, #2
    47ce:	ldr.w	sl, [r3, r4, lsl #3]
    47d2:	bl	fe7c <random(unsigned long)>
    47d6:	ldr	r3, [r5, #16]
    47d8:	rsb	r3, r3, sl
    47dc:	adds	r3, #1
    47de:	subs	r0, r3, r0
    47e0:	str	r0, [r6, #0]
    47e2:	b.n	47a4 <regular_animation() [clone .part.21]+0xf8c>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    47e4:	movw	sl, #4636	; 0x121c
    47e8:	add.w	r3, r5, #28
    47ec:	movs	r7, #0
    47ee:	add.w	r9, r5, #4640	; 0x1220
    47f2:	add	sl, r5
    47f4:	str	r3, [sp, #28]
    47f6:	lsls	r3, r7, #3
    47f8:	ldr	r6, [sp, #28]
    47fa:	movs	r4, #0
    47fc:	str	r3, [sp, #20]
    47fe:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4802:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4804:	add	r3, r4
    4806:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4808:	cbnz	r2, 480e <regular_animation() [clone .part.21]+0xff6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    480a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    480e:	cbnz	r3, 482a <regular_animation() [clone .part.21]+0x1012>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4810:	adds	r4, #1
    4812:	adds	r6, #4
    4814:	cmp	r4, #24
    4816:	bne.n	47fe <regular_animation() [clone .part.21]+0xfe6>
    4818:	ldr	r3, [sp, #28]
    481a:	adds	r7, #24
    481c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    481e:	cmp.w	r7, #576	; 0x240
    4822:	str	r3, [sp, #28]
    4824:	bne.n	47f6 <regular_animation() [clone .part.21]+0xfde>
    4826:	b.w	389c <regular_animation() [clone .part.21]+0x84>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    482a:	ldr	r2, [r5, #20]
    482c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    482e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4832:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4834:	ldr	r2, [sp, #20]
    4836:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4838:	adds	r0, #2
    483a:	ldr.w	r8, [r3, r4, lsl #3]
    483e:	bl	fe7c <random(unsigned long)>
    4842:	ldr	r3, [r5, #16]
    4844:	rsb	r3, r3, r8
    4848:	adds	r3, #1
    484a:	subs	r0, r3, r0
    484c:	str	r0, [r6, #0]
    484e:	b.n	4810 <regular_animation() [clone .part.21]+0xff8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4850:	movw	r9, #4636	; 0x121c
    4854:	add.w	r3, r5, #28
    4858:	movs	r7, #0
    485a:	add.w	r8, r5, #4640	; 0x1220
    485e:	add	r9, r5
    4860:	str	r3, [sp, #24]
    4862:	lsls	r3, r7, #3
    4864:	ldr	r6, [sp, #24]
    4866:	movs	r4, #0
    4868:	str	r3, [sp, #20]
    486a:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    486e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4870:	add	r3, r4
    4872:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4874:	cbnz	r2, 487a <regular_animation() [clone .part.21]+0x1062>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4876:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    487a:	cbnz	r3, 4896 <regular_animation() [clone .part.21]+0x107e>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    487c:	adds	r4, #1
    487e:	adds	r6, #4
    4880:	cmp	r4, #24
    4882:	bne.n	486a <regular_animation() [clone .part.21]+0x1052>
    4884:	ldr	r3, [sp, #24]
    4886:	adds	r7, #24
    4888:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    488a:	cmp.w	r7, #576	; 0x240
    488e:	str	r3, [sp, #24]
    4890:	bne.n	4862 <regular_animation() [clone .part.21]+0x104a>
    4892:	b.w	390a <regular_animation() [clone .part.21]+0xf2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4896:	ldr	r2, [r5, #20]
    4898:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    489a:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    489e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    48a0:	ldr	r2, [sp, #20]
    48a2:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    48a4:	adds	r0, #2
    48a6:	ldr.w	sl, [r3, r4, lsl #3]
    48aa:	bl	fe7c <random(unsigned long)>
    48ae:	ldr	r3, [r5, #16]
    48b0:	rsb	r3, r3, sl
    48b4:	adds	r3, #1
    48b6:	subs	r0, r3, r0
    48b8:	str	r0, [r6, #0]
    48ba:	b.n	487c <regular_animation() [clone .part.21]+0x1064>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    48bc:	ldr	r3, [r5, #20]
    48be:	ldr	r0, [r5, #16]
    48c0:	subs	r0, r3, r0
    48c2:	adds	r0, #2
    48c4:	bl	fe7c <random(unsigned long)>
    48c8:	ldr	r3, [r5, #16]
    48ca:	subs	r3, #1
    48cc:	add	r0, r3
    48ce:	str.w	r0, [r9, #28]
    48d2:	b.n	443e <regular_animation() [clone .part.21]+0xc26>
    48d4:	ldr	r3, [r5, #20]
    48d6:	ldr	r0, [r5, #16]
    48d8:	subs	r0, r3, r0
    48da:	adds	r0, #2
    48dc:	bl	fe7c <random(unsigned long)>
    48e0:	ldr	r3, [r5, #16]
    48e2:	subs	r3, #1
    48e4:	add	r0, r3
    48e6:	str.w	r0, [r9, #28]
    48ea:	b.w	3f86 <regular_animation() [clone .part.21]+0x76e>
    48ee:	ldr	r3, [r5, #20]
    48f0:	ldr	r0, [r5, #16]
    48f2:	subs	r0, r3, r0
    48f4:	adds	r0, #2
    48f6:	bl	fe7c <random(unsigned long)>
    48fa:	ldr	r3, [r5, #16]
    48fc:	subs	r3, #1
    48fe:	add	r0, r3
    4900:	str.w	r0, [r9, #28]
    4904:	b.n	4238 <regular_animation() [clone .part.21]+0xa20>
    4906:	ldr	r3, [r5, #20]
    4908:	ldr	r0, [r5, #16]
    490a:	subs	r0, r3, r0
    490c:	adds	r0, #2
    490e:	bl	fe7c <random(unsigned long)>
    4912:	ldr	r3, [r5, #16]
    4914:	subs	r3, #1
    4916:	add	r0, r3
    4918:	str.w	r0, [r9, #28]
    491c:	b.n	469a <regular_animation() [clone .part.21]+0xe82>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    491e:	bl	10610 <sqrt>
    4922:	vmov.f64	d7, d0
    4926:	b.n	413c <regular_animation() [clone .part.21]+0x924>
    4928:	bl	10610 <sqrt>
    492c:	vmov.f64	d7, d0
    4930:	b.n	45f8 <regular_animation() [clone .part.21]+0xde0>
    4932:	bl	10610 <sqrt>
    4936:	vmov.f64	d7, d0
    493a:	b.n	439a <regular_animation() [clone .part.21]+0xb82>
    493c:	bl	10610 <sqrt>
    4940:	vmov.f64	d7, d0
    4944:	b.w	3ec4 <regular_animation() [clone .part.21]+0x6ac>

00004948 <ceremony_setup()>:
	}

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
    4948:	ldr	r3, [pc, #692]	; (4c00 <ceremony_setup()+0x2b8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    494a:	movs	r2, #0
    494c:	ldr	r0, [pc, #688]	; (4c00 <ceremony_setup()+0x2b8>)
    494e:	mov.w	ip, #1
void renderInterrupt() {
  updateBeams();
  updateScreensFade();
}

void ceremony_setup(){
    4952:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4956:	ldr.w	r4, [r3, #452]	; 0x1c4
	}

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
    495a:	ldr.w	r5, [r3, #436]	; 0x1b4
    495e:	ldr.w	r7, [r3, #456]	; 0x1c8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4962:	ldr.w	r3, [r3, #172]	; 0xac
    4966:	add.w	r8, r5, #4640	; 0x1220
    496a:	vpush	{d8-d9}
    496e:	str	r3, [r5, #4]
    4970:	sub	sp, #44	; 0x2c
    4972:	ldr	r3, [pc, #652]	; (4c00 <ceremony_setup()+0x2b8>)
    4974:	str	r7, [sp, #4]
    4976:	ldr.w	r3, [r3, #176]	; 0xb0
    497a:	ldr	r7, [r0, #0]
    497c:	str	r3, [r5, #8]
    497e:	ldr	r3, [pc, #640]	; (4c00 <ceremony_setup()+0x2b8>)
    4980:	str	r7, [sp, #8]
    4982:	ldr.w	r3, [r3, #180]	; 0xb4
    4986:	ldr	r7, [r0, #4]
    4988:	str	r3, [r5, #12]
    498a:	ldr	r3, [pc, #628]	; (4c00 <ceremony_setup()+0x2b8>)
    498c:	mov	r1, r7
    498e:	ldr	r7, [pc, #624]	; (4c00 <ceremony_setup()+0x2b8>)
    4990:	ldr.w	r3, [r3, #184]	; 0xb8
    4994:	ldr.w	lr, [r7, #12]
    4998:	str	r3, [r5, #16]
    499a:	ldr	r3, [pc, #612]	; (4c00 <ceremony_setup()+0x2b8>)
    499c:	ldr.w	sl, [r7, #16]
    49a0:	ldr.w	r3, [r3, #188]	; 0xbc
    49a4:	ldr.w	r9, [r7, #20]
    49a8:	str	r3, [r5, #20]
    49aa:	ldr	r3, [pc, #596]	; (4c00 <ceremony_setup()+0x2b8>)
    49ac:	ldr	r7, [sp, #4]
    49ae:	ldr.w	r6, [r3, #168]	; 0xa8

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    49b2:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    49b6:	strb	r2, [r5, #24]
    49b8:	movw	r2, #4636	; 0x121c
    49bc:	add.w	r0, r3, #4640	; 0x1220
    49c0:	str	r0, [sp, #28]
    49c2:	ldr	r0, [pc, #572]	; (4c00 <ceremony_setup()+0x2b8>)
    49c4:	ldr	r0, [r0, #8]
    49c6:	str	r6, [r5, #0]
    49c8:	str	r4, [r5, r2]
    49ca:	str.w	r7, [r8]
    49ce:	ldr	r2, [sp, #8]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    49d0:	ldr	r7, [pc, #556]	; (4c00 <ceremony_setup()+0x2b8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    49d2:	str	r2, [r3, #0]
    49d4:	movw	r2, #4636	; 0x121c
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    49d8:	ldr.w	r6, [r7, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    49dc:	ldr.w	r7, [r7, #244]	; 0xf4
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    49e0:	subs	r6, #1
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    49e2:	str	r1, [r3, #4]
    49e4:	str	r7, [sp, #36]	; 0x24
    49e6:	ldr	r7, [pc, #536]	; (4c00 <ceremony_setup()+0x2b8>)
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    49e8:	str	r6, [sp, #32]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    49ea:	ldr.w	r7, [r7, #248]	; 0xf8
    49ee:	ldr	r6, [pc, #528]	; (4c00 <ceremony_setup()+0x2b8>)
    49f0:	str	r7, [sp, #16]
    49f2:	ldr	r7, [pc, #524]	; (4c00 <ceremony_setup()+0x2b8>)
    49f4:	ldr.w	r6, [r6, #256]	; 0x100
    49f8:	ldr.w	r7, [r7, #252]	; 0xfc
    49fc:	str	r6, [sp, #24]
    49fe:	str	r7, [sp, #20]
    4a00:	ldr	r7, [pc, #508]	; (4c00 <ceremony_setup()+0x2b8>)
    4a02:	str	r0, [r3, #8]
    4a04:	ldr.w	r6, [r7, #260]	; 0x104
    4a08:	ldr	r7, [sp, #28]
    4a0a:	str.w	lr, [r3, #12]
    4a0e:	str.w	sl, [r3, #16]
    4a12:	str.w	r9, [r3, #20]
    4a16:	strb.w	ip, [r3, #24]
    4a1a:	str	r1, [sp, #12]
    4a1c:	mov	r1, r7
    4a1e:	str	r4, [r3, r2]
    4a20:	ldr	r7, [sp, #4]
	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
    4a22:	ldr	r3, [pc, #476]	; (4c00 <ceremony_setup()+0x2b8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4a24:	str	r7, [r1, #0]
    4a26:	movw	r1, #4636	; 0x121c
	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
    4a2a:	ldr.w	r2, [r3, #440]	; 0x1b8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4a2e:	ldr	r7, [pc, #464]	; (4c00 <ceremony_setup()+0x2b8>)
    4a30:	str	r4, [r2, r1]
    4a32:	add.w	fp, r2, #4640	; 0x1220
    4a36:	ldr	r1, [sp, #36]	; 0x24

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    4a38:	ldr.w	r3, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4a3c:	ldr.w	r7, [r7, #240]	; 0xf0
    4a40:	str	r1, [r2, #4]
    4a42:	ldr	r1, [sp, #16]
    4a44:	str	r7, [r2, #0]
    4a46:	add.w	r7, r3, #4640	; 0x1220
    4a4a:	str	r1, [r2, #8]
    4a4c:	ldr	r1, [sp, #20]
    4a4e:	str	r1, [r2, #12]
    4a50:	ldr	r1, [sp, #24]
    4a52:	str	r6, [r2, #20]
    4a54:	str	r1, [r2, #16]
    4a56:	strb.w	ip, [r2, #24]
    4a5a:	ldr	r2, [sp, #4]
    4a5c:	ldr	r1, [pc, #416]	; (4c00 <ceremony_setup()+0x2b8>)
    4a5e:	str.w	r2, [fp]
    4a62:	ldr	r2, [sp, #8]
    4a64:	ldr.w	r6, [r1, #364]	; 0x16c
    4a68:	ldrb.w	fp, [r1, #368]	; 0x170
    4a6c:	movw	r1, #4636	; 0x121c
    4a70:	str	r2, [r3, #0]
    4a72:	ldr	r2, [sp, #12]
    4a74:	str	r0, [r3, #8]
    4a76:	str	r2, [r3, #4]
    4a78:	str.w	lr, [r3, #12]
    4a7c:	str.w	sl, [r3, #16]
    4a80:	str.w	r9, [r3, #20]
    4a84:	strb.w	ip, [r3, #24]
    4a88:	str	r4, [r3, r1]
    4a8a:	ldr	r3, [sp, #4]
    4a8c:	str	r3, [r7, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4a8e:	ldr	r3, [sp, #32]
    4a90:	cmp	r3, #4
    4a92:	bhi.w	6126 <ceremony_setup()+0x17de>
    4a96:	tbh	[pc, r3, lsl #1]
    4a9a:	.short	0x002e
    4a9c:	.word	0x00930058
    4aa0:	.word	0x000500e9
    4aa4:	add.w	r7, r5, #2304	; 0x900
    4aa8:	add.w	r6, r5, #28
    4aac:	mov	r4, r5
    4aae:	mov	r8, r7
    4ab0:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4ab2:	cmp	r7, #0
    4ab4:	bne.w	5e40 <ceremony_setup()+0x14f8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4ab8:	ldr	r3, [r5, #0]
    4aba:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4abc:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4ac0:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4ac2:	str	r3, [r4, #120]	; 0x78
    4ac4:	adds	r4, #96	; 0x60
    4ac6:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4ac8:	cmp	r4, r8
    4aca:	bne.n	4ab2 <ceremony_setup()+0x16a>
    4acc:	ldr	r3, [pc, #304]	; (4c00 <ceremony_setup()+0x2b8>)
    4ace:	ldr	r2, [pc, #304]	; (4c00 <ceremony_setup()+0x2b8>)
    4ad0:	ldr.w	r5, [r3, #432]	; 0x1b0
    4ad4:	ldr.w	r3, [r3, #360]	; 0x168
    4ad8:	ldrb.w	fp, [r2, #368]	; 0x170
    4adc:	subs	r3, #1
    4ade:	ldr.w	r6, [r2, #364]	; 0x16c
    4ae2:	cmp	r3, #4
    4ae4:	bhi.w	61fc <ceremony_setup()+0x18b4>
    4ae8:	tbh	[pc, r3, lsl #1]
    4aec:	.word	0x017001ac
    4af0:	.word	0x01d7011c
    4af4:	.short	0x00f3
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4af6:	movs	r0, #8
    4af8:	bl	fe7c <random(unsigned long)>
    4afc:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b00:	movs	r0, #8
    4b02:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4b06:	cmp	r6, #0
    4b08:	ble.n	4acc <ceremony_setup()+0x184>
    4b0a:	add.w	r3, r0, #15
    4b0e:	add.w	r4, r4, r4, lsl #1
    4b12:	movs	r7, #0
    4b14:	add.w	r4, r3, r4, lsl #3
    4b18:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4b1c:	cmp.w	fp, #0
    4b20:	bne.n	4b34 <ceremony_setup()+0x1ec>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4b22:	ldr	r3, [r5, #0]
    4b24:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4b26:	adds	r7, #1
    4b28:	adds	r4, #4
    4b2a:	cmp	r7, r6
    4b2c:	beq.n	4acc <ceremony_setup()+0x184>
      if (rand){
    4b2e:	cmp.w	fp, #0
    4b32:	beq.n	4b22 <ceremony_setup()+0x1da>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4b34:	ldr	r3, [r5, #20]
    4b36:	ldr	r2, [r5, #16]
    4b38:	subs	r0, r3, r2
    4b3a:	adds	r0, #2
    4b3c:	bl	fe7c <random(unsigned long)>
    4b40:	ldr	r3, [r5, #16]
    4b42:	subs	r3, #1
    4b44:	add	r0, r3
    4b46:	str	r0, [r4, #0]
    4b48:	b.n	4b26 <ceremony_setup()+0x1de>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b4a:	movs	r0, #8
    4b4c:	bl	fe7c <random(unsigned long)>
    4b50:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b54:	movs	r0, #8
    4b56:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4b5a:	cmp	r6, #0
    4b5c:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4b5e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4b62:	it	lt
    4b64:	addlt	r3, r6, #1
    4b66:	cmp	r6, #0
    4b68:	mov.w	r8, r3, asr #1
    4b6c:	it	lt
    4b6e:	addlt	r6, #1
    4b70:	rsb	r8, r8, #0
    4b74:	asrs	r6, r6, #1
    4b76:	add.w	r7, r0, r8
    4b7a:	adds	r3, r0, r6
    4b7c:	cmp	r7, r3
    4b7e:	str	r3, [sp, #4]
    4b80:	bge.n	4acc <ceremony_setup()+0x184>
    4b82:	add	r8, r4
    4b84:	add	r4, r6
    4b86:	add.w	r6, r8, r8, lsl #1
    4b8a:	add.w	r6, r7, r6, lsl #3
    4b8e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4b92:	cmp	r8, r4
    4b94:	bge.n	4bb4 <ceremony_setup()+0x26c>
    4b96:	mov	sl, r6
    4b98:	mov	r9, r8
        if (rand){
    4b9a:	cmp.w	fp, #0
    4b9e:	bne.w	5e26 <ceremony_setup()+0x14de>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4ba2:	ldr	r3, [r5, #0]
    4ba4:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4ba8:	add.w	r9, r9, #1
    4bac:	add.w	sl, sl, #96	; 0x60
    4bb0:	cmp	r9, r4
    4bb2:	bne.n	4b9a <ceremony_setup()+0x252>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4bb4:	adds	r7, #1
    4bb6:	ldr	r3, [sp, #4]
    4bb8:	adds	r6, #4
    4bba:	cmp	r7, r3
    4bbc:	bne.n	4b92 <ceremony_setup()+0x24a>
    4bbe:	b.n	4acc <ceremony_setup()+0x184>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4bc0:	movs	r0, #8
    4bc2:	mov	r7, r5
    4bc4:	bl	fe7c <random(unsigned long)>
    4bc8:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4bca:	movs	r0, #8
    4bcc:	add.w	r9, r5, #96	; 0x60
    4bd0:	bl	fe7c <random(unsigned long)>
    4bd4:	vmov	s15, r6
    4bd8:	adds	r4, #8
    4bda:	add.w	r3, r0, #8
    4bde:	vcvt.f64.s32	d9, s15
    4be2:	rsb	sl, r0, #16
    4be6:	negs	r3, r3
    4be8:	rsb	r8, r4, #0
    4bec:	str	r3, [sp, #4]
    4bee:	vmov	s15, r8
    4bf2:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4bf4:	mov	r6, r7
    4bf6:	vcvt.f64.s32	d8, s15
    4bfa:	vmul.f64	d8, d8, d8
    4bfe:	b.n	4c10 <ceremony_setup()+0x2c8>
    4c00:	.word	0x20004e0c
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4c04:	ldr	r3, [r5, #0]
    4c06:	str	r3, [r6, #28]
    4c08:	adds	r4, #1
    4c0a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4c0c:	cmp	r4, sl
    4c0e:	beq.n	4c60 <ceremony_setup()+0x318>
      double xx = x-midPoint_y;
    4c10:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4c14:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4c18:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4c1c:	vfma.f64	d0, d7, d7
    4c20:	vsqrt.f64	d7, d0
    4c24:	vcmp.f64	d7, d7
    4c28:	vmrs	APSR_nzcv, fpscr
    4c2c:	bne.w	640e <ceremony_setup()+0x1ac6>
    4c30:	vcmpe.f64	d7, d9
    4c34:	vmrs	APSR_nzcv, fpscr
    4c38:	bhi.n	4c08 <ceremony_setup()+0x2c0>
        if (rand){
    4c3a:	cmp.w	fp, #0
    4c3e:	beq.n	4c04 <ceremony_setup()+0x2bc>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4c40:	ldr	r3, [r5, #20]
    4c42:	adds	r4, #1
    4c44:	ldr	r0, [r5, #16]
    4c46:	adds	r6, #96	; 0x60
    4c48:	subs	r0, r3, r0
    4c4a:	adds	r0, #2
    4c4c:	bl	fe7c <random(unsigned long)>
    4c50:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4c52:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4c54:	add.w	r3, r3, #4294967295
    4c58:	add	r0, r3
    4c5a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4c5e:	bne.n	4c10 <ceremony_setup()+0x2c8>
    4c60:	adds	r7, #4
    4c62:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4c66:	cmp	r7, r9
    4c68:	bne.n	4bee <ceremony_setup()+0x2a6>
    4c6a:	b.n	4acc <ceremony_setup()+0x184>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4c6c:	cmp	r6, #0
    4c6e:	ble.n	4cfa <ceremony_setup()+0x3b2>
    4c70:	mov	r9, r5
    4c72:	movs	r7, #0
    4c74:	mov	r5, fp
    4c76:	b.n	4c8e <ceremony_setup()+0x346>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4c78:	add.w	r3, r8, r3, lsl #3
    4c7c:	ldr.w	r2, [r9]
    4c80:	add.w	r3, r9, r3, lsl #2
    4c84:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4c86:	adds	r7, #1
    4c88:	cmp	r7, r6
    4c8a:	beq.w	4acc <ceremony_setup()+0x184>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4c8e:	movs	r0, #8
    4c90:	bl	fe7c <random(unsigned long)>
    4c94:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4c98:	movs	r0, #8
    4c9a:	bl	fe7c <random(unsigned long)>
    4c9e:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4ca2:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4ca6:	cmp	r5, #0
    4ca8:	beq.n	4c78 <ceremony_setup()+0x330>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4caa:	ldr.w	r3, [r9, #20]
    4cae:	add.w	r4, r4, r4, lsl #1
    4cb2:	ldr.w	r2, [r9, #16]
    4cb6:	subs	r0, r3, r2
    4cb8:	adds	r0, #2
    4cba:	bl	fe7c <random(unsigned long)>
    4cbe:	ldr.w	r3, [r9, #16]
    4cc2:	subs	r2, r3, #1
    4cc4:	add.w	r3, r8, r4, lsl #3
    4cc8:	add	r0, r2
    4cca:	add.w	r3, r9, r3, lsl #2
    4cce:	str	r0, [r3, #28]
    4cd0:	b.n	4c86 <ceremony_setup()+0x33e>
    4cd2:	add.w	r7, r5, #2304	; 0x900
    4cd6:	add.w	r6, r5, #28
    4cda:	mov	r4, r5
    4cdc:	mov	r8, r7
    4cde:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4ce0:	cmp	r7, #0
    4ce2:	bne.w	5ee0 <ceremony_setup()+0x1598>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4ce6:	ldr	r3, [r5, #0]
    4ce8:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4cea:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4cee:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4cf0:	str	r3, [r4, #120]	; 0x78
    4cf2:	adds	r4, #96	; 0x60
    4cf4:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4cf6:	cmp	r4, r8
    4cf8:	bne.n	4ce0 <ceremony_setup()+0x398>
    4cfa:	ldr	r3, [pc, #764]	; (4ff8 <ceremony_setup()+0x6b0>)
	}

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    4cfc:	ldr	r2, [pc, #760]	; (4ff8 <ceremony_setup()+0x6b0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4cfe:	ldr.w	r3, [r3, #384]	; 0x180
	}

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    4d02:	ldr.w	r5, [r2, #440]	; 0x1b8
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4d06:	subs	r3, #1
    4d08:	ldr.w	r6, [r2, #388]	; 0x184
    4d0c:	ldrb.w	fp, [r2, #392]	; 0x188
    4d10:	cmp	r3, #4
    4d12:	bhi.w	60bc <ceremony_setup()+0x1774>
    4d16:	tbh	[pc, r3, lsl #1]
    4d1a:	.short	0x01e1
    4d1c:	.word	0x014f01a5
    4d20:	.word	0x00f4011d
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4d24:	movs	r0, #8
    4d26:	mov	r7, r5
    4d28:	bl	fe7c <random(unsigned long)>
    4d2c:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4d2e:	movs	r0, #8
    4d30:	add.w	r9, r5, #96	; 0x60
    4d34:	bl	fe7c <random(unsigned long)>
    4d38:	vmov	s15, r6
    4d3c:	adds	r4, #8
    4d3e:	add.w	r3, r0, #8
    4d42:	vcvt.f64.s32	d9, s15
    4d46:	rsb	sl, r0, #16
    4d4a:	negs	r3, r3
    4d4c:	rsb	r8, r4, #0
    4d50:	str	r3, [sp, #4]
    4d52:	vmov	s15, r8
    4d56:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4d58:	mov	r6, r7
    4d5a:	vcvt.f64.s32	d8, s15
    4d5e:	vmul.f64	d8, d8, d8
    4d62:	b.n	4d70 <ceremony_setup()+0x428>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4d64:	ldr	r3, [r5, #0]
    4d66:	str	r3, [r6, #28]
    4d68:	adds	r4, #1
    4d6a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4d6c:	cmp	r4, sl
    4d6e:	beq.n	4dc0 <ceremony_setup()+0x478>
      double xx = x-midPoint_y;
    4d70:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4d74:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4d78:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4d7c:	vfma.f64	d0, d7, d7
    4d80:	vsqrt.f64	d7, d0
    4d84:	vcmp.f64	d7, d7
    4d88:	vmrs	APSR_nzcv, fpscr
    4d8c:	bne.w	6460 <ceremony_setup()+0x1b18>
    4d90:	vcmpe.f64	d7, d9
    4d94:	vmrs	APSR_nzcv, fpscr
    4d98:	bhi.n	4d68 <ceremony_setup()+0x420>
        if (rand){
    4d9a:	cmp.w	fp, #0
    4d9e:	beq.n	4d64 <ceremony_setup()+0x41c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4da0:	ldr	r3, [r5, #20]
    4da2:	adds	r4, #1
    4da4:	ldr	r0, [r5, #16]
    4da6:	adds	r6, #96	; 0x60
    4da8:	subs	r0, r3, r0
    4daa:	adds	r0, #2
    4dac:	bl	fe7c <random(unsigned long)>
    4db0:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4db2:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4db4:	add.w	r3, r3, #4294967295
    4db8:	add	r0, r3
    4dba:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4dbe:	bne.n	4d70 <ceremony_setup()+0x428>
    4dc0:	adds	r7, #4
    4dc2:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4dc6:	cmp	r7, r9
    4dc8:	bne.n	4d52 <ceremony_setup()+0x40a>
    4dca:	b.n	4cfa <ceremony_setup()+0x3b2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4dcc:	movs	r0, #8
    4dce:	bl	fe7c <random(unsigned long)>
    4dd2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4dd6:	movs	r0, #8
    4dd8:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4ddc:	cmp	r6, #0
    4dde:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4de0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4de4:	it	lt
    4de6:	addlt	r3, r6, #1
    4de8:	cmp	r6, #0
    4dea:	mov.w	r8, r3, asr #1
    4dee:	it	lt
    4df0:	addlt	r6, #1
    4df2:	rsb	r8, r8, #0
    4df6:	asrs	r6, r6, #1
    4df8:	add.w	r7, r0, r8
    4dfc:	adds	r3, r0, r6
    4dfe:	cmp	r7, r3
    4e00:	str	r3, [sp, #4]
    4e02:	bge.w	4cfa <ceremony_setup()+0x3b2>
    4e06:	add	r8, r4
    4e08:	add	r4, r6
    4e0a:	add.w	r6, r8, r8, lsl #1
    4e0e:	add.w	r6, r7, r6, lsl #3
    4e12:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4e16:	cmp	r8, r4
    4e18:	bge.n	4e38 <ceremony_setup()+0x4f0>
    4e1a:	mov	sl, r6
    4e1c:	mov	r9, r8
        if (rand){
    4e1e:	cmp.w	fp, #0
    4e22:	bne.w	5df2 <ceremony_setup()+0x14aa>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4e26:	ldr	r3, [r5, #0]
    4e28:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4e2c:	add.w	r9, r9, #1
    4e30:	add.w	sl, sl, #96	; 0x60
    4e34:	cmp	r9, r4
    4e36:	bne.n	4e1e <ceremony_setup()+0x4d6>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4e38:	adds	r7, #1
    4e3a:	ldr	r3, [sp, #4]
    4e3c:	adds	r6, #4
    4e3e:	cmp	r7, r3
    4e40:	bne.n	4e16 <ceremony_setup()+0x4ce>
    4e42:	b.n	4cfa <ceremony_setup()+0x3b2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4e44:	movs	r0, #8
    4e46:	bl	fe7c <random(unsigned long)>
    4e4a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4e4e:	movs	r0, #8
    4e50:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4e54:	cmp	r6, #0
    4e56:	ble.w	4cfa <ceremony_setup()+0x3b2>
    4e5a:	add.w	r3, r0, #15
    4e5e:	add.w	r4, r4, r4, lsl #1
    4e62:	mov	r8, r6
    4e64:	mov	r6, fp
    4e66:	add.w	r4, r3, r4, lsl #3
    4e6a:	movs	r7, #0
    4e6c:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4e70:	cbnz	r6, 4e84 <ceremony_setup()+0x53c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4e72:	ldr	r3, [r5, #0]
    4e74:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4e76:	adds	r7, #1
    4e78:	adds	r4, #4
    4e7a:	cmp	r7, r8
    4e7c:	beq.w	4cfa <ceremony_setup()+0x3b2>
      if (rand){
    4e80:	cmp	r6, #0
    4e82:	beq.n	4e72 <ceremony_setup()+0x52a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4e84:	ldr	r3, [r5, #20]
    4e86:	ldr	r2, [r5, #16]
    4e88:	subs	r0, r3, r2
    4e8a:	adds	r0, #2
    4e8c:	bl	fe7c <random(unsigned long)>
    4e90:	ldr	r3, [r5, #16]
    4e92:	subs	r3, #1
    4e94:	add	r0, r3
    4e96:	str	r0, [r4, #0]
    4e98:	b.n	4e76 <ceremony_setup()+0x52e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4e9a:	cmp	r6, #0
    4e9c:	ble.w	4cfa <ceremony_setup()+0x3b2>
    4ea0:	mov	r9, r5
    4ea2:	movs	r7, #0
    4ea4:	mov	r5, fp
    4ea6:	b.n	4ebe <ceremony_setup()+0x576>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4ea8:	add.w	r3, r4, r3, lsl #3
    4eac:	ldr.w	r2, [r9]
    4eb0:	add.w	r3, r9, r3, lsl #2
    4eb4:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4eb6:	adds	r7, #1
    4eb8:	cmp	r7, r6
    4eba:	beq.w	4cfa <ceremony_setup()+0x3b2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4ebe:	movs	r0, #8
    4ec0:	bl	fe7c <random(unsigned long)>
    4ec4:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4ec8:	movs	r0, #8
    4eca:	bl	fe7c <random(unsigned long)>
    4ece:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4ed2:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4ed6:	cmp	r5, #0
    4ed8:	beq.n	4ea8 <ceremony_setup()+0x560>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4eda:	ldr.w	r3, [r9, #20]
    4ede:	add.w	r8, r8, r8, lsl #1
    4ee2:	ldr.w	r2, [r9, #16]
    4ee6:	add.w	r4, r4, r8, lsl #3
    4eea:	subs	r0, r3, r2
    4eec:	add.w	r4, r9, r4, lsl #2
    4ef0:	adds	r0, #2
    4ef2:	bl	fe7c <random(unsigned long)>
    4ef6:	ldr.w	r3, [r9, #16]
    4efa:	subs	r3, #1
    4efc:	add	r0, r3
    4efe:	str	r0, [r4, #28]
    4f00:	b.n	4eb6 <ceremony_setup()+0x56e>
    4f02:	add.w	r7, r5, #2304	; 0x900
    4f06:	add.w	r6, r5, #28
    4f0a:	mov	r4, r5
    4f0c:	mov	r8, r7
    4f0e:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4f10:	cmp	r7, #0
    4f12:	bne.w	5e90 <ceremony_setup()+0x1548>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    4f16:	ldr	r3, [r5, #0]
    4f18:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4f1a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4f1e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4f20:	str	r3, [r4, #120]	; 0x78
    4f22:	adds	r4, #96	; 0x60
    4f24:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    4f26:	cmp	r4, r8
    4f28:	bne.n	4f10 <ceremony_setup()+0x5c8>
    4f2a:	ldr	r3, [pc, #204]	; (4ff8 <ceremony_setup()+0x6b0>)

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
    4f2c:	ldr	r2, [pc, #200]	; (4ff8 <ceremony_setup()+0x6b0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4f2e:	ldr.w	r3, [r3, #360]	; 0x168

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
    4f32:	ldr.w	r5, [r2, #444]	; 0x1bc
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4f36:	subs	r3, #1
    4f38:	ldr.w	r4, [r2, #364]	; 0x16c
    4f3c:	ldrb.w	fp, [r2, #368]	; 0x170
    4f40:	cmp	r3, #4
    4f42:	bhi.w	63a4 <ceremony_setup()+0x1a5c>
    4f46:	tbh	[pc, r3, lsl #1]
    4f4a:	.short	0x027b
    4f4c:	.word	0x01e8023c
    4f50:	.word	0x00f501b2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4f54:	cmp	r6, #0
    4f56:	ble.n	4f2a <ceremony_setup()+0x5e2>
    4f58:	mov	r9, r5
    4f5a:	movs	r7, #0
    4f5c:	mov	r5, fp
    4f5e:	b.n	4f74 <ceremony_setup()+0x62c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4f60:	add.w	r3, r4, r3, lsl #3
    4f64:	ldr.w	r2, [r9]
    4f68:	add.w	r3, r9, r3, lsl #2
    4f6c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4f6e:	adds	r7, #1
    4f70:	cmp	r7, r6
    4f72:	beq.n	4f2a <ceremony_setup()+0x5e2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4f74:	movs	r0, #8
    4f76:	bl	fe7c <random(unsigned long)>
    4f7a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4f7e:	movs	r0, #8
    4f80:	bl	fe7c <random(unsigned long)>
    4f84:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4f88:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4f8c:	cmp	r5, #0
    4f8e:	beq.n	4f60 <ceremony_setup()+0x618>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4f90:	ldr.w	r3, [r9, #20]
    4f94:	add.w	r8, r8, r8, lsl #1
    4f98:	ldr.w	r2, [r9, #16]
    4f9c:	add.w	r4, r4, r8, lsl #3
    4fa0:	subs	r0, r3, r2
    4fa2:	add.w	r4, r9, r4, lsl #2
    4fa6:	adds	r0, #2
    4fa8:	bl	fe7c <random(unsigned long)>
    4fac:	ldr.w	r3, [r9, #16]
    4fb0:	subs	r3, #1
    4fb2:	add	r0, r3
    4fb4:	str	r0, [r4, #28]
    4fb6:	b.n	4f6e <ceremony_setup()+0x626>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4fb8:	movs	r0, #8
    4fba:	mov	r7, r5
    4fbc:	bl	fe7c <random(unsigned long)>
    4fc0:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4fc2:	movs	r0, #8
    4fc4:	add.w	r9, r5, #96	; 0x60
    4fc8:	bl	fe7c <random(unsigned long)>
    4fcc:	vmov	s15, r6
    4fd0:	adds	r4, #8
    4fd2:	add.w	r3, r0, #8
    4fd6:	vcvt.f64.s32	d9, s15
    4fda:	rsb	sl, r0, #16
    4fde:	negs	r3, r3
    4fe0:	rsb	r8, r4, #0
    4fe4:	str	r3, [sp, #4]
    4fe6:	vmov	s15, r8
    4fea:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4fec:	mov	r6, r7
    4fee:	vcvt.f64.s32	d8, s15
    4ff2:	vmul.f64	d8, d8, d8
    4ff6:	b.n	5008 <ceremony_setup()+0x6c0>
    4ff8:	.word	0x20004e0c
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4ffc:	ldr	r3, [r5, #0]
    4ffe:	str	r3, [r6, #28]
    5000:	adds	r4, #1
    5002:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5004:	cmp	r4, sl
    5006:	beq.n	5058 <ceremony_setup()+0x710>
      double xx = x-midPoint_y;
    5008:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    500c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    5010:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    5014:	vfma.f64	d0, d7, d7
    5018:	vsqrt.f64	d7, d0
    501c:	vcmp.f64	d7, d7
    5020:	vmrs	APSR_nzcv, fpscr
    5024:	bne.w	6454 <ceremony_setup()+0x1b0c>
    5028:	vcmpe.f64	d7, d9
    502c:	vmrs	APSR_nzcv, fpscr
    5030:	bhi.n	5000 <ceremony_setup()+0x6b8>
        if (rand){
    5032:	cmp.w	fp, #0
    5036:	beq.n	4ffc <ceremony_setup()+0x6b4>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5038:	ldr	r3, [r5, #20]
    503a:	adds	r4, #1
    503c:	ldr	r0, [r5, #16]
    503e:	adds	r6, #96	; 0x60
    5040:	subs	r0, r3, r0
    5042:	adds	r0, #2
    5044:	bl	fe7c <random(unsigned long)>
    5048:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    504a:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    504c:	add.w	r3, r3, #4294967295
    5050:	add	r0, r3
    5052:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5056:	bne.n	5008 <ceremony_setup()+0x6c0>
    5058:	adds	r7, #4
    505a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    505e:	cmp	r7, r9
    5060:	bne.n	4fe6 <ceremony_setup()+0x69e>
    5062:	b.n	4f2a <ceremony_setup()+0x5e2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5064:	movs	r0, #8
    5066:	bl	fe7c <random(unsigned long)>
    506a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    506e:	movs	r0, #8
    5070:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5074:	cmp	r6, #0
    5076:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5078:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    507c:	it	lt
    507e:	addlt	r3, r6, #1
    5080:	cmp	r6, #0
    5082:	mov.w	r8, r3, asr #1
    5086:	it	lt
    5088:	addlt	r6, #1
    508a:	rsb	r8, r8, #0
    508e:	asrs	r6, r6, #1
    5090:	add.w	r7, r0, r8
    5094:	adds	r3, r0, r6
    5096:	cmp	r3, r7
    5098:	str	r3, [sp, #4]
    509a:	ble.w	4f2a <ceremony_setup()+0x5e2>
    509e:	add	r8, r4
    50a0:	add	r4, r6
    50a2:	add.w	r6, r8, r8, lsl #1
    50a6:	add.w	r6, r7, r6, lsl #3
    50aa:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    50ae:	cmp	r4, r8
    50b0:	ble.n	50d0 <ceremony_setup()+0x788>
    50b2:	mov	sl, r6
    50b4:	mov	r9, r8
        if (rand){
    50b6:	cmp.w	fp, #0
    50ba:	bne.w	5e0c <ceremony_setup()+0x14c4>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    50be:	ldr	r3, [r5, #0]
    50c0:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    50c4:	add.w	r9, r9, #1
    50c8:	add.w	sl, sl, #96	; 0x60
    50cc:	cmp	r9, r4
    50ce:	bne.n	50b6 <ceremony_setup()+0x76e>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    50d0:	adds	r7, #1
    50d2:	ldr	r3, [sp, #4]
    50d4:	adds	r6, #4
    50d6:	cmp	r3, r7
    50d8:	bne.n	50ae <ceremony_setup()+0x766>
    50da:	b.n	4f2a <ceremony_setup()+0x5e2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    50dc:	movs	r0, #8
    50de:	bl	fe7c <random(unsigned long)>
    50e2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    50e6:	movs	r0, #8
    50e8:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    50ec:	cmp	r6, #0
    50ee:	ble.w	4f2a <ceremony_setup()+0x5e2>
    50f2:	add.w	r3, r0, #15
    50f6:	add.w	r4, r4, r4, lsl #1
    50fa:	movs	r7, #0
    50fc:	add.w	r4, r3, r4, lsl #3
    5100:	add.w	r4, r5, r4, lsl #2
      if (rand){
    5104:	cmp.w	fp, #0
    5108:	bne.n	511e <ceremony_setup()+0x7d6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    510a:	ldr	r3, [r5, #0]
    510c:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    510e:	adds	r7, #1
    5110:	adds	r4, #4
    5112:	cmp	r7, r6
    5114:	beq.w	4f2a <ceremony_setup()+0x5e2>
      if (rand){
    5118:	cmp.w	fp, #0
    511c:	beq.n	510a <ceremony_setup()+0x7c2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    511e:	ldr	r3, [r5, #20]
    5120:	ldr	r2, [r5, #16]
    5122:	subs	r0, r3, r2
    5124:	adds	r0, #2
    5126:	bl	fe7c <random(unsigned long)>
    512a:	ldr	r3, [r5, #16]
    512c:	subs	r3, #1
    512e:	add	r0, r3
    5130:	str	r0, [r4, #0]
    5132:	b.n	510e <ceremony_setup()+0x7c6>
    5134:	add.w	r7, r5, #2304	; 0x900
    5138:	add.w	r6, r5, #28
    513c:	mov	r4, r5
    513e:	mov	r8, r7
    5140:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    5142:	cmp	r7, #0
    5144:	bne.w	601c <ceremony_setup()+0x16d4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    5148:	ldr	r3, [r5, #0]
    514a:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    514c:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    5150:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    5152:	str	r3, [r4, #120]	; 0x78
    5154:	adds	r4, #96	; 0x60
    5156:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    5158:	cmp	r4, r8
    515a:	bne.n	5142 <ceremony_setup()+0x7fa>
	}

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
    515c:	ldr	r3, [pc, #732]	; (543c <ceremony_setup()+0xaf4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    515e:	movs	r2, #0
    5160:	ldr	r0, [pc, #728]	; (543c <ceremony_setup()+0xaf4>)
    5162:	mov.w	ip, #1
    5166:	ldr.w	r4, [r3, #452]	; 0x1c4
	}

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
    516a:	ldr.w	r5, [r3, #436]	; 0x1b4
    516e:	ldr.w	r7, [r3, #456]	; 0x1c8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    5172:	ldr.w	r3, [r3, #172]	; 0xac
    5176:	add.w	r8, r5, #4640	; 0x1220
    517a:	str	r7, [sp, #4]
    517c:	str	r3, [r5, #4]
    517e:	ldr	r3, [pc, #700]	; (543c <ceremony_setup()+0xaf4>)
    5180:	ldr	r7, [r0, #0]
    5182:	ldr.w	r3, [r3, #176]	; 0xb0
    5186:	str	r7, [sp, #8]
    5188:	str	r3, [r5, #8]
    518a:	ldr	r3, [pc, #688]	; (543c <ceremony_setup()+0xaf4>)
    518c:	ldr	r7, [r0, #4]
    518e:	ldr.w	r3, [r3, #180]	; 0xb4
    5192:	mov	r1, r7
    5194:	ldr	r7, [pc, #676]	; (543c <ceremony_setup()+0xaf4>)
    5196:	str	r3, [r5, #12]
    5198:	ldr	r3, [pc, #672]	; (543c <ceremony_setup()+0xaf4>)
    519a:	ldr.w	lr, [r7, #12]
    519e:	ldr.w	r3, [r3, #184]	; 0xb8
    51a2:	ldr.w	sl, [r7, #16]
    51a6:	str	r3, [r5, #16]
    51a8:	ldr	r3, [pc, #656]	; (543c <ceremony_setup()+0xaf4>)
    51aa:	ldr.w	r9, [r7, #20]
    51ae:	ldr.w	r3, [r3, #188]	; 0xbc
    51b2:	ldr	r7, [sp, #4]
    51b4:	str	r3, [r5, #20]
    51b6:	ldr	r3, [pc, #644]	; (543c <ceremony_setup()+0xaf4>)
    51b8:	str	r1, [sp, #12]
    51ba:	ldr.w	r6, [r3, #168]	; 0xa8

	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    51be:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    51c2:	strb	r2, [r5, #24]
    51c4:	movw	r2, #4636	; 0x121c
    51c8:	add.w	r0, r3, #4640	; 0x1220
    51cc:	str	r0, [sp, #28]
    51ce:	ldr	r0, [pc, #620]	; (543c <ceremony_setup()+0xaf4>)
    51d0:	ldr	r0, [r0, #8]
    51d2:	str	r6, [r5, #0]
    51d4:	str	r4, [r5, r2]
    51d6:	str.w	r7, [r8]
    51da:	ldr	r2, [sp, #8]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    51dc:	ldr	r7, [pc, #604]	; (543c <ceremony_setup()+0xaf4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    51de:	str	r2, [r3, #0]
    51e0:	movw	r2, #4636	; 0x121c
    51e4:	str	r1, [r3, #4]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    51e6:	ldr.w	r6, [r7, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    51ea:	ldr.w	r7, [r7, #244]	; 0xf4
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    51ee:	subs	r6, #1
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    51f0:	str	r0, [r3, #8]
    51f2:	str	r7, [sp, #36]	; 0x24
    51f4:	ldr	r7, [pc, #580]	; (543c <ceremony_setup()+0xaf4>)
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    51f6:	str	r6, [sp, #32]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    51f8:	ldr.w	r7, [r7, #248]	; 0xf8
    51fc:	ldr	r6, [pc, #572]	; (543c <ceremony_setup()+0xaf4>)
    51fe:	str	r7, [sp, #16]
    5200:	ldr	r7, [pc, #568]	; (543c <ceremony_setup()+0xaf4>)
    5202:	ldr.w	r6, [r6, #256]	; 0x100
    5206:	ldr.w	r7, [r7, #252]	; 0xfc
    520a:	str	r6, [sp, #24]
    520c:	str	r7, [sp, #20]
    520e:	ldr	r7, [pc, #556]	; (543c <ceremony_setup()+0xaf4>)
    5210:	str.w	lr, [r3, #12]
    5214:	ldr.w	r6, [r7, #260]	; 0x104
    5218:	ldr	r7, [sp, #28]
    521a:	str.w	sl, [r3, #16]
    521e:	str.w	r9, [r3, #20]
    5222:	mov	r1, r7
    5224:	strb.w	ip, [r3, #24]
    5228:	ldr	r7, [sp, #4]
    522a:	str	r4, [r3, r2]
	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
    522c:	ldr	r3, [pc, #524]	; (543c <ceremony_setup()+0xaf4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    522e:	str	r7, [r1, #0]
    5230:	movw	r1, #4636	; 0x121c
	Screen(){};

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
    5234:	ldr.w	r2, [r3, #440]	; 0x1b8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    5238:	ldr	r7, [pc, #512]	; (543c <ceremony_setup()+0xaf4>)
    523a:	str	r4, [r2, r1]
    523c:	add.w	fp, r2, #4640	; 0x1220
    5240:	ldr	r1, [sp, #36]	; 0x24

	void define_automaton_ceremony(){
		initialize_automaton(_fg_automaton, &hue_automatons[6], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    5242:	ldr.w	r3, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    5246:	ldr.w	r7, [r7, #240]	; 0xf0
    524a:	str	r1, [r2, #4]
    524c:	ldr	r1, [sp, #16]
    524e:	str	r7, [r2, #0]
    5250:	add.w	r7, r3, #4640	; 0x1220
    5254:	str	r1, [r2, #8]
    5256:	ldr	r1, [sp, #20]
    5258:	str	r1, [r2, #12]
    525a:	ldr	r1, [sp, #24]
    525c:	str	r1, [r2, #16]
    525e:	str	r6, [r2, #20]
    5260:	strb.w	ip, [r2, #24]
    5264:	ldr	r2, [sp, #4]
    5266:	ldr	r1, [pc, #468]	; (543c <ceremony_setup()+0xaf4>)
    5268:	str.w	r2, [fp]
    526c:	ldr	r2, [sp, #8]
    526e:	ldr.w	r6, [r1, #364]	; 0x16c
    5272:	ldrb.w	fp, [r1, #368]	; 0x170
    5276:	movw	r1, #4636	; 0x121c
    527a:	str	r2, [r3, #0]
    527c:	ldr	r2, [sp, #12]
    527e:	str	r0, [r3, #8]
    5280:	str	r2, [r3, #4]
    5282:	str.w	lr, [r3, #12]
    5286:	str.w	sl, [r3, #16]
    528a:	str.w	r9, [r3, #20]
    528e:	strb.w	ip, [r3, #24]
    5292:	str	r4, [r3, r1]
    5294:	ldr	r3, [sp, #4]
    5296:	str	r3, [r7, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    5298:	ldr	r3, [sp, #32]
    529a:	cmp	r3, #4
    529c:	bhi.w	6338 <ceremony_setup()+0x19f0>
    52a0:	tbh	[pc, r3, lsl #1]
    52a4:	.word	0x01aa01e6
    52a8:	.word	0x01230156
    52ac:	.short	0x00fa
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    52ae:	cmp	r4, #0
    52b0:	ble.w	515c <ceremony_setup()+0x814>
    52b4:	mov	r9, r5
    52b6:	mov.w	r8, #0
    52ba:	mov	r5, fp
    52bc:	b.n	52d6 <ceremony_setup()+0x98e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    52be:	add.w	r3, r6, r3, lsl #3
    52c2:	ldr.w	r2, [r9]
    52c6:	add.w	r3, r9, r3, lsl #2
    52ca:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    52cc:	add.w	r8, r8, #1
    52d0:	cmp	r8, r4
    52d2:	beq.w	515c <ceremony_setup()+0x814>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    52d6:	movs	r0, #8
    52d8:	bl	fe7c <random(unsigned long)>
    52dc:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    52e0:	movs	r0, #8
    52e2:	bl	fe7c <random(unsigned long)>
    52e6:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    52ea:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    52ee:	cmp	r5, #0
    52f0:	beq.n	52be <ceremony_setup()+0x976>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    52f2:	ldr.w	r3, [r9, #20]
    52f6:	add.w	r7, r7, r7, lsl #1
    52fa:	ldr.w	r2, [r9, #16]
    52fe:	add.w	r6, r6, r7, lsl #3
    5302:	subs	r0, r3, r2
    5304:	add.w	r6, r9, r6, lsl #2
    5308:	adds	r0, #2
    530a:	bl	fe7c <random(unsigned long)>
    530e:	ldr.w	r3, [r9, #16]
    5312:	subs	r3, #1
    5314:	add	r0, r3
    5316:	str	r0, [r6, #28]
    5318:	b.n	52cc <ceremony_setup()+0x984>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    531a:	movs	r0, #8
    531c:	mov	r7, r5
    531e:	bl	fe7c <random(unsigned long)>
    5322:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5324:	movs	r0, #8
    5326:	add.w	r9, r5, #96	; 0x60
    532a:	bl	fe7c <random(unsigned long)>
    532e:	vmov	s15, r4
    5332:	adds	r6, #8
    5334:	add.w	r3, r0, #8
    5338:	vcvt.f64.s32	d9, s15
    533c:	rsb	sl, r0, #16
    5340:	negs	r3, r3
    5342:	rsb	r8, r6, #0
    5346:	str	r3, [sp, #4]
    5348:	vmov	s15, r8
    534c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    534e:	mov	r6, r7
    5350:	vcvt.f64.s32	d8, s15
    5354:	vmul.f64	d8, d8, d8
    5358:	b.n	5366 <ceremony_setup()+0xa1e>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    535a:	ldr	r3, [r5, #0]
    535c:	str	r3, [r6, #28]
    535e:	adds	r4, #1
    5360:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5362:	cmp	r4, sl
    5364:	beq.n	53b6 <ceremony_setup()+0xa6e>
      double xx = x-midPoint_y;
    5366:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    536a:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    536e:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    5372:	vfma.f64	d0, d7, d7
    5376:	vsqrt.f64	d7, d0
    537a:	vcmp.f64	d7, d7
    537e:	vmrs	APSR_nzcv, fpscr
    5382:	bne.w	6448 <ceremony_setup()+0x1b00>
    5386:	vcmpe.f64	d7, d9
    538a:	vmrs	APSR_nzcv, fpscr
    538e:	bhi.n	535e <ceremony_setup()+0xa16>
        if (rand){
    5390:	cmp.w	fp, #0
    5394:	beq.n	535a <ceremony_setup()+0xa12>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5396:	ldr	r3, [r5, #20]
    5398:	adds	r4, #1
    539a:	ldr	r0, [r5, #16]
    539c:	adds	r6, #96	; 0x60
    539e:	subs	r0, r3, r0
    53a0:	adds	r0, #2
    53a2:	bl	fe7c <random(unsigned long)>
    53a6:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    53a8:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    53aa:	add.w	r3, r3, #4294967295
    53ae:	add	r0, r3
    53b0:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    53b4:	bne.n	5366 <ceremony_setup()+0xa1e>
    53b6:	adds	r7, #4
    53b8:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    53bc:	cmp	r7, r9
    53be:	bne.n	5348 <ceremony_setup()+0xa00>
    53c0:	b.n	515c <ceremony_setup()+0x814>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    53c2:	movs	r0, #8
    53c4:	bl	fe7c <random(unsigned long)>
    53c8:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    53cc:	movs	r0, #8
    53ce:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    53d2:	cmp	r4, #0
    53d4:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    53d6:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    53da:	it	lt
    53dc:	addlt	r3, r4, #1
    53de:	cmp	r4, #0
    53e0:	mov.w	r8, r3, asr #1
    53e4:	it	lt
    53e6:	addlt	r4, #1
    53e8:	rsb	r8, r8, #0
    53ec:	asrs	r4, r4, #1
    53ee:	add.w	r7, r0, r8
    53f2:	adds	r3, r4, r0
    53f4:	cmp	r3, r7
    53f6:	str	r3, [sp, #4]
    53f8:	ble.w	515c <ceremony_setup()+0x814>
    53fc:	add	r8, r6
    53fe:	add.w	sl, r4, r6
    5402:	add.w	r6, r8, r8, lsl #1
    5406:	add.w	r6, r7, r6, lsl #3
    540a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    540e:	cmp	r8, sl
    5410:	bge.n	542e <ceremony_setup()+0xae6>
    5412:	mov	r9, r6
    5414:	mov	r4, r8
        if (rand){
    5416:	cmp.w	fp, #0
    541a:	bne.w	5dd8 <ceremony_setup()+0x1490>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    541e:	ldr	r3, [r5, #0]
    5420:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5424:	adds	r4, #1
    5426:	add.w	r9, r9, #96	; 0x60
    542a:	cmp	r4, sl
    542c:	bne.n	5416 <ceremony_setup()+0xace>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    542e:	adds	r7, #1
    5430:	ldr	r3, [sp, #4]
    5432:	adds	r6, #4
    5434:	cmp	r3, r7
    5436:	bne.n	540e <ceremony_setup()+0xac6>
    5438:	b.n	515c <ceremony_setup()+0x814>
    543a:	nop
    543c:	.word	0x20005000
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5440:	movs	r0, #8
    5442:	bl	fe7c <random(unsigned long)>
    5446:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    544a:	movs	r0, #8
    544c:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    5450:	cmp	r4, #0
    5452:	ble.w	515c <ceremony_setup()+0x814>
    5456:	add.w	r3, r0, #15
    545a:	add.w	r6, r6, r6, lsl #1
    545e:	movs	r7, #0
    5460:	add.w	r6, r3, r6, lsl #3
    5464:	add.w	r6, r5, r6, lsl #2
      if (rand){
    5468:	cmp.w	fp, #0
    546c:	bne.n	5482 <ceremony_setup()+0xb3a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    546e:	ldr	r3, [r5, #0]
    5470:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    5472:	adds	r7, #1
    5474:	adds	r6, #4
    5476:	cmp	r7, r4
    5478:	beq.w	515c <ceremony_setup()+0x814>
      if (rand){
    547c:	cmp.w	fp, #0
    5480:	beq.n	546e <ceremony_setup()+0xb26>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5482:	ldr	r3, [r5, #20]
    5484:	ldr	r2, [r5, #16]
    5486:	subs	r0, r3, r2
    5488:	adds	r0, #2
    548a:	bl	fe7c <random(unsigned long)>
    548e:	ldr	r3, [r5, #16]
    5490:	subs	r3, #1
    5492:	add	r0, r3
    5494:	str	r0, [r6, #0]
    5496:	b.n	5472 <ceremony_setup()+0xb2a>
    5498:	add.w	r7, r5, #2304	; 0x900
    549c:	add.w	r6, r5, #28
    54a0:	mov	r4, r5
    54a2:	mov	r8, r7
    54a4:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    54a6:	cmp	r7, #0
    54a8:	bne.w	606c <ceremony_setup()+0x1724>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    54ac:	ldr	r3, [r5, #0]
    54ae:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    54b0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    54b4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    54b6:	str	r3, [r4, #120]	; 0x78
    54b8:	adds	r4, #96	; 0x60
    54ba:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    54bc:	cmp	r4, r8
    54be:	bne.n	54a6 <ceremony_setup()+0xb5e>
    54c0:	ldr	r3, [pc, #768]	; (57c4 <ceremony_setup()+0xe7c>)
    54c2:	ldr	r2, [pc, #768]	; (57c4 <ceremony_setup()+0xe7c>)
    54c4:	ldr.w	r5, [r3, #432]	; 0x1b0
    54c8:	ldrb.w	fp, [r3, #368]	; 0x170
    54cc:	ldr.w	r3, [r3, #360]	; 0x168
    54d0:	ldr.w	r4, [r2, #364]	; 0x16c
    54d4:	subs	r3, #1
    54d6:	cmp	r3, #4
    54d8:	bhi.w	6192 <ceremony_setup()+0x184a>
    54dc:	tbh	[pc, r3, lsl #1]
    54e0:	.word	0x017401b0
    54e4:	.word	0x01db011d
    54e8:	.short	0x00f4
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    54ea:	cmp	r6, #0
    54ec:	ble.w	56f0 <ceremony_setup()+0xda8>
    54f0:	mov	r9, r5
    54f2:	movs	r7, #0
    54f4:	mov	r5, fp
    54f6:	b.n	550c <ceremony_setup()+0xbc4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    54f8:	add.w	r3, r4, r3, lsl #3
    54fc:	ldr.w	r2, [r9]
    5500:	add.w	r3, r9, r3, lsl #2
    5504:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5506:	adds	r7, #1
    5508:	cmp	r7, r6
    550a:	beq.n	54c0 <ceremony_setup()+0xb78>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    550c:	movs	r0, #8
    550e:	bl	fe7c <random(unsigned long)>
    5512:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5516:	movs	r0, #8
    5518:	bl	fe7c <random(unsigned long)>
    551c:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    5520:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    5524:	cmp	r5, #0
    5526:	beq.n	54f8 <ceremony_setup()+0xbb0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    5528:	ldr.w	r3, [r9, #20]
    552c:	add.w	r8, r8, r8, lsl #1
    5530:	ldr.w	r2, [r9, #16]
    5534:	add.w	r4, r4, r8, lsl #3
    5538:	subs	r0, r3, r2
    553a:	add.w	r4, r9, r4, lsl #2
    553e:	adds	r0, #2
    5540:	bl	fe7c <random(unsigned long)>
    5544:	ldr.w	r3, [r9, #16]
    5548:	subs	r3, #1
    554a:	add	r0, r3
    554c:	str	r0, [r4, #28]
    554e:	b.n	5506 <ceremony_setup()+0xbbe>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5550:	movs	r0, #8
    5552:	mov	r7, r5
    5554:	bl	fe7c <random(unsigned long)>
    5558:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    555a:	movs	r0, #8
    555c:	add.w	r9, r5, #96	; 0x60
    5560:	bl	fe7c <random(unsigned long)>
    5564:	vmov	s15, r6
    5568:	adds	r4, #8
    556a:	add.w	r3, r0, #8
    556e:	vcvt.f64.s32	d9, s15
    5572:	rsb	sl, r0, #16
    5576:	negs	r3, r3
    5578:	rsb	r8, r4, #0
    557c:	str	r3, [sp, #4]
    557e:	vmov	s15, r8
    5582:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    5584:	mov	r6, r7
    5586:	vcvt.f64.s32	d8, s15
    558a:	vmul.f64	d8, d8, d8
    558e:	b.n	559c <ceremony_setup()+0xc54>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    5590:	ldr	r3, [r5, #0]
    5592:	str	r3, [r6, #28]
    5594:	adds	r4, #1
    5596:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5598:	cmp	r4, sl
    559a:	beq.n	55ec <ceremony_setup()+0xca4>
      double xx = x-midPoint_y;
    559c:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    55a0:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    55a4:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    55a8:	vfma.f64	d0, d7, d7
    55ac:	vsqrt.f64	d7, d0
    55b0:	vcmp.f64	d7, d7
    55b4:	vmrs	APSR_nzcv, fpscr
    55b8:	bne.w	643c <ceremony_setup()+0x1af4>
    55bc:	vcmpe.f64	d7, d9
    55c0:	vmrs	APSR_nzcv, fpscr
    55c4:	bhi.n	5594 <ceremony_setup()+0xc4c>
        if (rand){
    55c6:	cmp.w	fp, #0
    55ca:	beq.n	5590 <ceremony_setup()+0xc48>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    55cc:	ldr	r3, [r5, #20]
    55ce:	adds	r4, #1
    55d0:	ldr	r0, [r5, #16]
    55d2:	adds	r6, #96	; 0x60
    55d4:	subs	r0, r3, r0
    55d6:	adds	r0, #2
    55d8:	bl	fe7c <random(unsigned long)>
    55dc:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    55de:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    55e0:	add.w	r3, r3, #4294967295
    55e4:	add	r0, r3
    55e6:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    55ea:	bne.n	559c <ceremony_setup()+0xc54>
    55ec:	adds	r7, #4
    55ee:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    55f2:	cmp	r7, r9
    55f4:	bne.n	557e <ceremony_setup()+0xc36>
    55f6:	b.n	54c0 <ceremony_setup()+0xb78>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    55f8:	movs	r0, #8
    55fa:	bl	fe7c <random(unsigned long)>
    55fe:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5602:	movs	r0, #8
    5604:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5608:	cmp	r6, #0
    560a:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    560c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5610:	it	lt
    5612:	addlt	r3, r6, #1
    5614:	cmp	r6, #0
    5616:	mov.w	r8, r3, asr #1
    561a:	it	lt
    561c:	addlt	r6, #1
    561e:	rsb	r8, r8, #0
    5622:	asrs	r6, r6, #1
    5624:	add.w	r7, r0, r8
    5628:	adds	r3, r0, r6
    562a:	cmp	r7, r3
    562c:	str	r3, [sp, #4]
    562e:	bge.w	54c0 <ceremony_setup()+0xb78>
    5632:	add	r8, r4
    5634:	add	r4, r6
    5636:	add.w	r6, r8, r8, lsl #1
    563a:	add.w	r6, r7, r6, lsl #3
    563e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5642:	cmp	r8, r4
    5644:	bge.n	5664 <ceremony_setup()+0xd1c>
    5646:	mov	sl, r6
    5648:	mov	r9, r8
        if (rand){
    564a:	cmp.w	fp, #0
    564e:	bne.w	5dc0 <ceremony_setup()+0x1478>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    5652:	ldr	r3, [r5, #0]
    5654:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5658:	add.w	r9, r9, #1
    565c:	add.w	sl, sl, #96	; 0x60
    5660:	cmp	r9, r4
    5662:	bne.n	564a <ceremony_setup()+0xd02>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5664:	adds	r7, #1
    5666:	ldr	r3, [sp, #4]
    5668:	adds	r6, #4
    566a:	cmp	r7, r3
    566c:	bne.n	5642 <ceremony_setup()+0xcfa>
    566e:	b.n	54c0 <ceremony_setup()+0xb78>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5670:	movs	r0, #8
    5672:	bl	fe7c <random(unsigned long)>
    5676:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    567a:	movs	r0, #8
    567c:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    5680:	cmp	r6, #0
    5682:	ble.w	54c0 <ceremony_setup()+0xb78>
    5686:	add.w	r3, r0, #15
    568a:	add.w	r4, r4, r4, lsl #1
    568e:	movs	r7, #0
    5690:	add.w	r4, r3, r4, lsl #3
    5694:	add.w	r4, r5, r4, lsl #2
      if (rand){
    5698:	cmp.w	fp, #0
    569c:	bne.n	56b2 <ceremony_setup()+0xd6a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    569e:	ldr	r3, [r5, #0]
    56a0:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    56a2:	adds	r7, #1
    56a4:	adds	r4, #4
    56a6:	cmp	r7, r6
    56a8:	beq.w	54c0 <ceremony_setup()+0xb78>
      if (rand){
    56ac:	cmp.w	fp, #0
    56b0:	beq.n	569e <ceremony_setup()+0xd56>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    56b2:	ldr	r3, [r5, #20]
    56b4:	ldr	r2, [r5, #16]
    56b6:	subs	r0, r3, r2
    56b8:	adds	r0, #2
    56ba:	bl	fe7c <random(unsigned long)>
    56be:	ldr	r3, [r5, #16]
    56c0:	subs	r3, #1
    56c2:	add	r0, r3
    56c4:	str	r0, [r4, #0]
    56c6:	b.n	56a2 <ceremony_setup()+0xd5a>
    56c8:	add.w	r7, r5, #2304	; 0x900
    56cc:	add.w	r6, r5, #28
    56d0:	mov	r4, r5
    56d2:	mov	r8, r7
    56d4:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    56d6:	cmp	r7, #0
    56d8:	bne.w	5fcc <ceremony_setup()+0x1684>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    56dc:	ldr	r3, [r5, #0]
    56de:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    56e0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    56e4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    56e6:	str	r3, [r4, #120]	; 0x78
    56e8:	adds	r4, #96	; 0x60
    56ea:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    56ec:	cmp	r4, r8
    56ee:	bne.n	56d6 <ceremony_setup()+0xd8e>
    56f0:	ldr	r3, [pc, #208]	; (57c4 <ceremony_setup()+0xe7c>)
	}

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    56f2:	ldr	r2, [pc, #208]	; (57c4 <ceremony_setup()+0xe7c>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    56f4:	ldr.w	r3, [r3, #384]	; 0x180
	}

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    56f8:	ldr.w	r5, [r2, #440]	; 0x1b8
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    56fc:	subs	r3, #1
    56fe:	ldr.w	r4, [r2, #388]	; 0x184
    5702:	ldrb.w	fp, [r2, #392]	; 0x188
    5706:	cmp	r3, #4
    5708:	bhi.w	62ce <ceremony_setup()+0x1986>
    570c:	tbh	[pc, r3, lsl #1]
    5710:	.word	0x019e01da
    5714:	.word	0x011c014a
    5718:	.short	0x00f3
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    571a:	movs	r0, #8
    571c:	mov	r7, r5
    571e:	bl	fe7c <random(unsigned long)>
    5722:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5724:	movs	r0, #8
    5726:	add.w	r9, r5, #96	; 0x60
    572a:	bl	fe7c <random(unsigned long)>
    572e:	vmov	s15, r4
    5732:	adds	r6, #8
    5734:	add.w	r3, r0, #8
    5738:	vcvt.f64.s32	d9, s15
    573c:	rsb	sl, r0, #16
    5740:	negs	r3, r3
    5742:	rsb	r8, r6, #0
    5746:	str	r3, [sp, #4]
    5748:	vmov	s15, r8
    574c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    574e:	mov	r6, r7
    5750:	vcvt.f64.s32	d8, s15
    5754:	vmul.f64	d8, d8, d8
    5758:	b.n	5766 <ceremony_setup()+0xe1e>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    575a:	ldr	r3, [r5, #0]
    575c:	str	r3, [r6, #28]
    575e:	adds	r4, #1
    5760:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5762:	cmp	r4, sl
    5764:	beq.n	57b6 <ceremony_setup()+0xe6e>
      double xx = x-midPoint_y;
    5766:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    576a:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    576e:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    5772:	vfma.f64	d0, d7, d7
    5776:	vsqrt.f64	d7, d0
    577a:	vcmp.f64	d7, d7
    577e:	vmrs	APSR_nzcv, fpscr
    5782:	bne.w	6430 <ceremony_setup()+0x1ae8>
    5786:	vcmpe.f64	d7, d9
    578a:	vmrs	APSR_nzcv, fpscr
    578e:	bhi.n	575e <ceremony_setup()+0xe16>
        if (rand){
    5790:	cmp.w	fp, #0
    5794:	beq.n	575a <ceremony_setup()+0xe12>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5796:	ldr	r3, [r5, #20]
    5798:	adds	r4, #1
    579a:	ldr	r0, [r5, #16]
    579c:	adds	r6, #96	; 0x60
    579e:	subs	r0, r3, r0
    57a0:	adds	r0, #2
    57a2:	bl	fe7c <random(unsigned long)>
    57a6:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    57a8:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    57aa:	add.w	r3, r3, #4294967295
    57ae:	add	r0, r3
    57b0:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    57b4:	bne.n	5766 <ceremony_setup()+0xe1e>
    57b6:	adds	r7, #4
    57b8:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    57bc:	cmp	r7, r9
    57be:	bne.n	5748 <ceremony_setup()+0xe00>
    57c0:	b.n	56f0 <ceremony_setup()+0xda8>
    57c2:	nop
    57c4:	.word	0x20005000
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    57c8:	movs	r0, #8
    57ca:	bl	fe7c <random(unsigned long)>
    57ce:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    57d2:	movs	r0, #8
    57d4:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    57d8:	cmp	r4, #0
    57da:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    57dc:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    57e0:	it	lt
    57e2:	addlt	r3, r4, #1
    57e4:	cmp	r4, #0
    57e6:	mov.w	r8, r3, asr #1
    57ea:	it	lt
    57ec:	addlt	r4, #1
    57ee:	rsb	r8, r8, #0
    57f2:	asrs	r4, r4, #1
    57f4:	add.w	r7, r0, r8
    57f8:	adds	r3, r4, r0
    57fa:	cmp	r3, r7
    57fc:	str	r3, [sp, #4]
    57fe:	ble.w	56f0 <ceremony_setup()+0xda8>
    5802:	add	r8, r6
    5804:	add.w	sl, r4, r6
    5808:	add.w	r6, r8, r8, lsl #1
    580c:	add.w	r6, r7, r6, lsl #3
    5810:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5814:	cmp	sl, r8
    5816:	ble.n	5834 <ceremony_setup()+0xeec>
    5818:	mov	r9, r6
    581a:	mov	r4, r8
        if (rand){
    581c:	cmp.w	fp, #0
    5820:	bne.w	5da8 <ceremony_setup()+0x1460>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    5824:	ldr	r3, [r5, #0]
    5826:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    582a:	adds	r4, #1
    582c:	add.w	r9, r9, #96	; 0x60
    5830:	cmp	r4, sl
    5832:	bne.n	581c <ceremony_setup()+0xed4>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5834:	adds	r7, #1
    5836:	ldr	r3, [sp, #4]
    5838:	adds	r6, #4
    583a:	cmp	r3, r7
    583c:	bne.n	5814 <ceremony_setup()+0xecc>
    583e:	b.n	56f0 <ceremony_setup()+0xda8>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5840:	movs	r0, #8
    5842:	bl	fe7c <random(unsigned long)>
    5846:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    584a:	movs	r0, #8
    584c:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    5850:	cmp	r4, #0
    5852:	ble.w	56f0 <ceremony_setup()+0xda8>
    5856:	add.w	r6, r6, r6, lsl #1
    585a:	add.w	r3, r0, #15
    585e:	mov	r8, r4
    5860:	mov	r4, fp
    5862:	add.w	r6, r3, r6, lsl #3
    5866:	movs	r7, #0
    5868:	add.w	r6, r5, r6, lsl #2
      if (rand){
    586c:	cbnz	r4, 5880 <ceremony_setup()+0xf38>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    586e:	ldr	r3, [r5, #0]
    5870:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    5872:	adds	r7, #1
    5874:	adds	r6, #4
    5876:	cmp	r7, r8
    5878:	beq.w	56f0 <ceremony_setup()+0xda8>
      if (rand){
    587c:	cmp	r4, #0
    587e:	beq.n	586e <ceremony_setup()+0xf26>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5880:	ldr	r3, [r5, #20]
    5882:	ldr	r2, [r5, #16]
    5884:	subs	r0, r3, r2
    5886:	adds	r0, #2
    5888:	bl	fe7c <random(unsigned long)>
    588c:	ldr	r3, [r5, #16]
    588e:	subs	r3, #1
    5890:	add	r0, r3
    5892:	str	r0, [r6, #0]
    5894:	b.n	5872 <ceremony_setup()+0xf2a>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5896:	cmp	r4, #0
    5898:	ble.w	56f0 <ceremony_setup()+0xda8>
    589c:	mov	r9, r4
    589e:	movs	r7, #0
    58a0:	mov	r4, fp
    58a2:	b.n	58b8 <ceremony_setup()+0xf70>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    58a4:	add.w	r3, r6, r3, lsl #3
    58a8:	ldr	r2, [r5, #0]
    58aa:	add.w	r3, r5, r3, lsl #2
    58ae:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    58b0:	adds	r7, #1
    58b2:	cmp	r7, r9
    58b4:	beq.w	56f0 <ceremony_setup()+0xda8>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    58b8:	movs	r0, #8
    58ba:	bl	fe7c <random(unsigned long)>
    58be:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    58c2:	movs	r0, #8
    58c4:	bl	fe7c <random(unsigned long)>
    58c8:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    58cc:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    58d0:	cmp	r4, #0
    58d2:	beq.n	58a4 <ceremony_setup()+0xf5c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    58d4:	ldr	r3, [r5, #20]
    58d6:	add.w	r8, r8, r8, lsl #1
    58da:	ldr	r2, [r5, #16]
    58dc:	add.w	r6, r6, r8, lsl #3
    58e0:	subs	r0, r3, r2
    58e2:	add.w	r6, r5, r6, lsl #2
    58e6:	adds	r0, #2
    58e8:	bl	fe7c <random(unsigned long)>
    58ec:	ldr	r3, [r5, #16]
    58ee:	subs	r3, #1
    58f0:	add	r0, r3
    58f2:	str	r0, [r6, #28]
    58f4:	b.n	58b0 <ceremony_setup()+0xf68>
    58f6:	add.w	r7, r5, #2304	; 0x900
    58fa:	add.w	r6, r5, #28
    58fe:	mov	r4, r5
    5900:	mov	r8, r7
    5902:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    5904:	cmp	r7, #0
    5906:	bne.w	5f30 <ceremony_setup()+0x15e8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    590a:	ldr	r3, [r5, #0]
    590c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    590e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    5912:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    5914:	str	r3, [r4, #120]	; 0x78
    5916:	adds	r4, #96	; 0x60
    5918:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    591a:	cmp	r4, r8
    591c:	bne.n	5904 <ceremony_setup()+0xfbc>
    591e:	ldr	r3, [pc, #792]	; (5c38 <ceremony_setup()+0x12f0>)

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
    5920:	ldr	r2, [pc, #788]	; (5c38 <ceremony_setup()+0x12f0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    5922:	ldr.w	r3, [r3, #360]	; 0x168

	void define_seeds_ceremony(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
    5926:	ldr.w	r5, [r2, #444]	; 0x1bc
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    592a:	subs	r3, #1
    592c:	ldr.w	r4, [r2, #364]	; 0x16c
    5930:	ldrb.w	fp, [r2, #368]	; 0x170
    5934:	cmp	r3, #4
    5936:	bhi.w	6266 <ceremony_setup()+0x191e>
    593a:	tbh	[pc, r3, lsl #1]
    593e:	.short	0x01f2
    5940:	.word	0x015701b7
    5944:	.word	0x00ee0127
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5948:	cmp	r4, #0
    594a:	ble.n	591e <ceremony_setup()+0xfd6>
    594c:	mov	r9, r4
    594e:	movs	r7, #0
    5950:	mov	r4, fp
    5952:	b.n	5966 <ceremony_setup()+0x101e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    5954:	add.w	r3, r6, r3, lsl #3
    5958:	ldr	r2, [r5, #0]
    595a:	add.w	r3, r5, r3, lsl #2
    595e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5960:	adds	r7, #1
    5962:	cmp	r7, r9
    5964:	beq.n	591e <ceremony_setup()+0xfd6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5966:	movs	r0, #8
    5968:	bl	fe7c <random(unsigned long)>
    596c:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5970:	movs	r0, #8
    5972:	bl	fe7c <random(unsigned long)>
    5976:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    597a:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    597e:	cmp	r4, #0
    5980:	beq.n	5954 <ceremony_setup()+0x100c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    5982:	ldr	r3, [r5, #20]
    5984:	add.w	r8, r8, r8, lsl #1
    5988:	ldr	r2, [r5, #16]
    598a:	add.w	r6, r6, r8, lsl #3
    598e:	subs	r0, r3, r2
    5990:	add.w	r6, r5, r6, lsl #2
    5994:	adds	r0, #2
    5996:	bl	fe7c <random(unsigned long)>
    599a:	ldr	r3, [r5, #16]
    599c:	subs	r3, #1
    599e:	add	r0, r3
    59a0:	str	r0, [r6, #28]
    59a2:	b.n	5960 <ceremony_setup()+0x1018>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    59a4:	movs	r0, #8
    59a6:	mov	r7, r5
    59a8:	bl	fe7c <random(unsigned long)>
    59ac:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    59ae:	movs	r0, #8
    59b0:	add.w	r9, r5, #96	; 0x60
    59b4:	bl	fe7c <random(unsigned long)>
    59b8:	vmov	s15, r4
    59bc:	adds	r6, #8
    59be:	add.w	r3, r0, #8
    59c2:	vcvt.f64.s32	d9, s15
    59c6:	rsb	sl, r0, #16
    59ca:	negs	r3, r3
    59cc:	rsb	r8, r6, #0
    59d0:	str	r3, [sp, #4]
    59d2:	vmov	s15, r8
    59d6:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    59d8:	mov	r6, r7
    59da:	vcvt.f64.s32	d8, s15
    59de:	vmul.f64	d8, d8, d8
    59e2:	b.n	59f0 <ceremony_setup()+0x10a8>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    59e4:	ldr	r3, [r5, #0]
    59e6:	str	r3, [r6, #28]
    59e8:	adds	r4, #1
    59ea:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    59ec:	cmp	sl, r4
    59ee:	beq.n	5a40 <ceremony_setup()+0x10f8>
      double xx = x-midPoint_y;
    59f0:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    59f4:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    59f8:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    59fc:	vfma.f64	d0, d7, d7
    5a00:	vsqrt.f64	d7, d0
    5a04:	vcmp.f64	d7, d7
    5a08:	vmrs	APSR_nzcv, fpscr
    5a0c:	bne.w	6424 <ceremony_setup()+0x1adc>
    5a10:	vcmpe.f64	d7, d9
    5a14:	vmrs	APSR_nzcv, fpscr
    5a18:	bhi.n	59e8 <ceremony_setup()+0x10a0>
        if (rand){
    5a1a:	cmp.w	fp, #0
    5a1e:	beq.n	59e4 <ceremony_setup()+0x109c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5a20:	ldr	r3, [r5, #20]
    5a22:	adds	r4, #1
    5a24:	ldr	r0, [r5, #16]
    5a26:	adds	r6, #96	; 0x60
    5a28:	subs	r0, r3, r0
    5a2a:	adds	r0, #2
    5a2c:	bl	fe7c <random(unsigned long)>
    5a30:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5a32:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5a34:	add.w	r3, r3, #4294967295
    5a38:	add	r0, r3
    5a3a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5a3e:	bne.n	59f0 <ceremony_setup()+0x10a8>
    5a40:	adds	r7, #4
    5a42:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    5a46:	cmp	r9, r7
    5a48:	bne.n	59d2 <ceremony_setup()+0x108a>
    5a4a:	b.n	591e <ceremony_setup()+0xfd6>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5a4c:	movs	r0, #8
    5a4e:	bl	fe7c <random(unsigned long)>
    5a52:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5a56:	movs	r0, #8
    5a58:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5a5c:	cmp	r4, #0
    5a5e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5a60:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5a64:	it	lt
    5a66:	addlt	r3, r4, #1
    5a68:	cmp	r4, #0
    5a6a:	mov.w	r8, r3, asr #1
    5a6e:	it	lt
    5a70:	addlt	r4, #1
    5a72:	rsb	r8, r8, #0
    5a76:	asrs	r4, r4, #1
    5a78:	add.w	r7, r0, r8
    5a7c:	adds	r3, r4, r0
    5a7e:	cmp	r7, r3
    5a80:	str	r3, [sp, #4]
    5a82:	bge.w	591e <ceremony_setup()+0xfd6>
    5a86:	add	r8, r6
    5a88:	add.w	sl, r4, r6
    5a8c:	add.w	r6, r8, r8, lsl #1
    5a90:	add.w	r6, r7, r6, lsl #3
    5a94:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5a98:	cmp	r8, sl
    5a9a:	bge.n	5ab8 <ceremony_setup()+0x1170>
    5a9c:	mov	r9, r6
    5a9e:	mov	r4, r8
        if (rand){
    5aa0:	cmp.w	fp, #0
    5aa4:	bne.w	5d90 <ceremony_setup()+0x1448>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    5aa8:	ldr	r3, [r5, #0]
    5aaa:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5aae:	adds	r4, #1
    5ab0:	add.w	r9, r9, #96	; 0x60
    5ab4:	cmp	r4, sl
    5ab6:	bne.n	5aa0 <ceremony_setup()+0x1158>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5ab8:	adds	r7, #1
    5aba:	ldr	r3, [sp, #4]
    5abc:	adds	r6, #4
    5abe:	cmp	r7, r3
    5ac0:	bne.n	5a98 <ceremony_setup()+0x1150>
    5ac2:	b.n	591e <ceremony_setup()+0xfd6>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5ac4:	movs	r0, #8
    5ac6:	bl	fe7c <random(unsigned long)>
    5aca:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5ace:	movs	r0, #8
    5ad0:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    5ad4:	cmp	r4, #0
    5ad6:	ble.w	591e <ceremony_setup()+0xfd6>
    5ada:	add.w	r3, r0, #15
    5ade:	add.w	r6, r6, r6, lsl #1
    5ae2:	mov	r8, r4
    5ae4:	mov	r4, fp
    5ae6:	add.w	r6, r3, r6, lsl #3
    5aea:	movs	r7, #0
    5aec:	add.w	r6, r5, r6, lsl #2
      if (rand){
    5af0:	cbnz	r4, 5b04 <ceremony_setup()+0x11bc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    5af2:	ldr	r3, [r5, #0]
    5af4:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    5af6:	adds	r7, #1
    5af8:	adds	r6, #4
    5afa:	cmp	r7, r8
    5afc:	beq.w	591e <ceremony_setup()+0xfd6>
      if (rand){
    5b00:	cmp	r4, #0
    5b02:	beq.n	5af2 <ceremony_setup()+0x11aa>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5b04:	ldr	r3, [r5, #20]
    5b06:	ldr	r2, [r5, #16]
    5b08:	subs	r0, r3, r2
    5b0a:	adds	r0, #2
    5b0c:	bl	fe7c <random(unsigned long)>
    5b10:	ldr	r3, [r5, #16]
    5b12:	subs	r3, #1
    5b14:	add	r0, r3
    5b16:	str	r0, [r6, #0]
    5b18:	b.n	5af6 <ceremony_setup()+0x11ae>
    5b1a:	add.w	r7, r5, #2304	; 0x900
    5b1e:	add.w	r6, r5, #28
    5b22:	mov	r4, r5
    5b24:	mov	r8, r7
    5b26:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    5b28:	cmp	r7, #0
    5b2a:	bne.w	5f7e <ceremony_setup()+0x1636>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    5b2e:	ldr	r3, [r5, #0]
    5b30:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    5b32:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    5b36:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    5b38:	str	r3, [r4, #120]	; 0x78
    5b3a:	adds	r4, #96	; 0x60
    5b3c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    5b3e:	cmp	r4, r8
    5b40:	bne.n	5b28 <ceremony_setup()+0x11e0>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5b42:	ldr	r3, [pc, #248]	; (5c3c <ceremony_setup()+0x12f4>)
    5b44:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5b46:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    5b48:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5b4a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    5b4c:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    5b4e:	cmp	r3, r1
    5b50:	it	eq
    5b52:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5b54:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    5b56:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    5b58:	ite	eq
    5b5a:	moveq	r5, #1
    5b5c:	movne	r5, #0
    5b5e:	cmp	r5, #0
    5b60:	beq.n	5b4a <ceremony_setup()+0x1202>
    5b62:	lsrs	r1, r3, #5
    5b64:	ldr	r3, [pc, #216]	; (5c40 <ceremony_setup()+0x12f8>)
    5b66:	orr.w	r1, r1, r2, lsl #27
    5b6a:	vmov	s15, r1
    5b6e:	vldr	d5, [pc, #192]	; 5c30 <ceremony_setup()+0x12e8>
    5b72:	vcvt.f64.u32	d7, s15
    5b76:	vdiv.f64	d6, d7, d5
    5b7a:	vcvt.u32.f64	s12, d6
    5b7e:	vstr	s12, [r3]
  screen_A.special_screen_animation();
  screen_B.special_screen_animation();
  implosionTimer = 0;
}
    5b82:	add	sp, #44	; 0x2c
    5b84:	vpop	{d8-d9}
    5b88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5b8c:	cmp	r4, #0
    5b8e:	ble.n	5b42 <ceremony_setup()+0x11fa>
    5b90:	mov	r9, r4
    5b92:	mov.w	r8, #0
    5b96:	mov	r4, fp
    5b98:	b.n	5bae <ceremony_setup()+0x1266>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    5b9a:	add.w	r3, r6, r3, lsl #3
    5b9e:	ldr	r2, [r5, #0]
    5ba0:	add.w	r3, r5, r3, lsl #2
    5ba4:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    5ba6:	add.w	r8, r8, #1
    5baa:	cmp	r8, r9
    5bac:	beq.n	5b42 <ceremony_setup()+0x11fa>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5bae:	movs	r0, #8
    5bb0:	bl	fe7c <random(unsigned long)>
    5bb4:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5bb8:	movs	r0, #8
    5bba:	bl	fe7c <random(unsigned long)>
    5bbe:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    5bc2:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    5bc6:	cmp	r4, #0
    5bc8:	beq.n	5b9a <ceremony_setup()+0x1252>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    5bca:	ldr	r3, [r5, #20]
    5bcc:	add.w	r7, r7, r7, lsl #1
    5bd0:	ldr	r2, [r5, #16]
    5bd2:	add.w	r6, r6, r7, lsl #3
    5bd6:	subs	r0, r3, r2
    5bd8:	add.w	r6, r5, r6, lsl #2
    5bdc:	adds	r0, #2
    5bde:	bl	fe7c <random(unsigned long)>
    5be2:	ldr	r3, [r5, #16]
    5be4:	subs	r3, #1
    5be6:	add	r0, r3
    5be8:	str	r0, [r6, #28]
    5bea:	b.n	5ba6 <ceremony_setup()+0x125e>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5bec:	movs	r0, #8
    5bee:	mov	r7, r5
    5bf0:	bl	fe7c <random(unsigned long)>
    5bf4:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5bf6:	movs	r0, #8
    5bf8:	add.w	r9, r5, #96	; 0x60
    5bfc:	bl	fe7c <random(unsigned long)>
    5c00:	vmov	s15, r4
    5c04:	adds	r6, #8
    5c06:	add.w	r3, r0, #8
    5c0a:	vcvt.f64.s32	d9, s15
    5c0e:	rsb	sl, r0, #16
    5c12:	negs	r3, r3
    5c14:	rsb	r8, r6, #0
    5c18:	str	r3, [sp, #4]
    5c1a:	vmov	s15, r8
    5c1e:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    5c20:	mov	r6, r7
    5c22:	vcvt.f64.s32	d8, s15
    5c26:	vmul.f64	d8, d8, d8
    5c2a:	b.n	5c50 <ceremony_setup()+0x1308>
    5c2c:	nop.w
    5c30:	.word	0xd2f1a9fc
    5c34:	.word	0x3ff0624d
    5c38:	.word	0x20005000
    5c3c:	.word	0x400d4000
    5c40:	.word	0x20008a2c
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    5c44:	ldr	r3, [r5, #0]
    5c46:	str	r3, [r6, #28]
    5c48:	adds	r4, #1
    5c4a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5c4c:	cmp	sl, r4
    5c4e:	beq.n	5ca0 <ceremony_setup()+0x1358>
      double xx = x-midPoint_y;
    5c50:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    5c54:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    5c58:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    5c5c:	vfma.f64	d0, d7, d7
    5c60:	vsqrt.f64	d7, d0
    5c64:	vcmp.f64	d7, d7
    5c68:	vmrs	APSR_nzcv, fpscr
    5c6c:	bne.w	641a <ceremony_setup()+0x1ad2>
    5c70:	vcmpe.f64	d7, d9
    5c74:	vmrs	APSR_nzcv, fpscr
    5c78:	bhi.n	5c48 <ceremony_setup()+0x1300>
        if (rand){
    5c7a:	cmp.w	fp, #0
    5c7e:	beq.n	5c44 <ceremony_setup()+0x12fc>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5c80:	ldr	r3, [r5, #20]
    5c82:	adds	r4, #1
    5c84:	ldr	r0, [r5, #16]
    5c86:	adds	r6, #96	; 0x60
    5c88:	subs	r0, r3, r0
    5c8a:	adds	r0, #2
    5c8c:	bl	fe7c <random(unsigned long)>
    5c90:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5c92:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5c94:	add.w	r3, r3, #4294967295
    5c98:	add	r0, r3
    5c9a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    5c9e:	bne.n	5c50 <ceremony_setup()+0x1308>
    5ca0:	adds	r7, #4
    5ca2:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    5ca6:	cmp	r9, r7
    5ca8:	bne.n	5c1a <ceremony_setup()+0x12d2>
    5caa:	b.n	5b42 <ceremony_setup()+0x11fa>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5cac:	movs	r0, #8
    5cae:	bl	fe7c <random(unsigned long)>
    5cb2:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5cb6:	movs	r0, #8
    5cb8:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5cbc:	cmp	r4, #0
    5cbe:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5cc0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5cc4:	it	lt
    5cc6:	addlt	r3, r4, #1
    5cc8:	cmp	r4, #0
    5cca:	mov.w	r8, r3, asr #1
    5cce:	it	lt
    5cd0:	addlt	r4, #1
    5cd2:	rsb	r8, r8, #0
    5cd6:	asrs	r4, r4, #1
    5cd8:	add.w	r7, r0, r8
    5cdc:	adds	r3, r4, r0
    5cde:	cmp	r7, r3
    5ce0:	str	r3, [sp, #4]
    5ce2:	bge.w	5b42 <ceremony_setup()+0x11fa>
    5ce6:	add	r8, r6
    5ce8:	add.w	sl, r4, r6
    5cec:	add.w	r6, r8, r8, lsl #1
    5cf0:	add.w	r6, r7, r6, lsl #3
    5cf4:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5cf8:	cmp	sl, r8
    5cfa:	ble.n	5d16 <ceremony_setup()+0x13ce>
    5cfc:	mov	r9, r6
    5cfe:	mov	r4, r8
        if (rand){
    5d00:	cmp.w	fp, #0
    5d04:	bne.n	5d78 <ceremony_setup()+0x1430>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    5d06:	ldr	r3, [r5, #0]
    5d08:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    5d0c:	adds	r4, #1
    5d0e:	add.w	r9, r9, #96	; 0x60
    5d12:	cmp	r4, sl
    5d14:	bne.n	5d00 <ceremony_setup()+0x13b8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    5d16:	adds	r7, #1
    5d18:	ldr	r3, [sp, #4]
    5d1a:	adds	r6, #4
    5d1c:	cmp	r7, r3
    5d1e:	bne.n	5cf8 <ceremony_setup()+0x13b0>
    5d20:	b.n	5b42 <ceremony_setup()+0x11fa>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5d22:	movs	r0, #8
    5d24:	bl	fe7c <random(unsigned long)>
    5d28:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    5d2c:	movs	r0, #8
    5d2e:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    5d32:	cmp	r4, #0
    5d34:	ble.w	5b42 <ceremony_setup()+0x11fa>
    5d38:	add.w	r6, r6, r6, lsl #1
    5d3c:	add.w	r3, r0, #15
    5d40:	mov	r8, r4
    5d42:	mov	r4, fp
    5d44:	add.w	r6, r3, r6, lsl #3
    5d48:	movs	r7, #0
    5d4a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    5d4e:	cbnz	r4, 5d62 <ceremony_setup()+0x141a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    5d50:	ldr	r3, [r5, #0]
    5d52:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    5d54:	adds	r7, #1
    5d56:	adds	r6, #4
    5d58:	cmp	r7, r8
    5d5a:	beq.w	5b42 <ceremony_setup()+0x11fa>
      if (rand){
    5d5e:	cmp	r4, #0
    5d60:	beq.n	5d50 <ceremony_setup()+0x1408>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5d62:	ldr	r3, [r5, #20]
    5d64:	ldr	r2, [r5, #16]
    5d66:	subs	r0, r3, r2
    5d68:	adds	r0, #2
    5d6a:	bl	fe7c <random(unsigned long)>
    5d6e:	ldr	r3, [r5, #16]
    5d70:	subs	r3, #1
    5d72:	add	r0, r3
    5d74:	str	r0, [r6, #0]
    5d76:	b.n	5d54 <ceremony_setup()+0x140c>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5d78:	ldr	r3, [r5, #20]
    5d7a:	ldr	r0, [r5, #16]
    5d7c:	subs	r0, r3, r0
    5d7e:	adds	r0, #2
    5d80:	bl	fe7c <random(unsigned long)>
    5d84:	ldr	r3, [r5, #16]
    5d86:	subs	r3, #1
    5d88:	add	r0, r3
    5d8a:	str.w	r0, [r9, #28]
    5d8e:	b.n	5d0c <ceremony_setup()+0x13c4>
    5d90:	ldr	r3, [r5, #20]
    5d92:	ldr	r0, [r5, #16]
    5d94:	subs	r0, r3, r0
    5d96:	adds	r0, #2
    5d98:	bl	fe7c <random(unsigned long)>
    5d9c:	ldr	r3, [r5, #16]
    5d9e:	subs	r3, #1
    5da0:	add	r0, r3
    5da2:	str.w	r0, [r9, #28]
    5da6:	b.n	5aae <ceremony_setup()+0x1166>
    5da8:	ldr	r3, [r5, #20]
    5daa:	ldr	r0, [r5, #16]
    5dac:	subs	r0, r3, r0
    5dae:	adds	r0, #2
    5db0:	bl	fe7c <random(unsigned long)>
    5db4:	ldr	r3, [r5, #16]
    5db6:	subs	r3, #1
    5db8:	add	r0, r3
    5dba:	str.w	r0, [r9, #28]
    5dbe:	b.n	582a <ceremony_setup()+0xee2>
    5dc0:	ldr	r3, [r5, #20]
    5dc2:	ldr	r0, [r5, #16]
    5dc4:	subs	r0, r3, r0
    5dc6:	adds	r0, #2
    5dc8:	bl	fe7c <random(unsigned long)>
    5dcc:	ldr	r3, [r5, #16]
    5dce:	subs	r3, #1
    5dd0:	add	r0, r3
    5dd2:	str.w	r0, [sl, #28]
    5dd6:	b.n	5658 <ceremony_setup()+0xd10>
    5dd8:	ldr	r3, [r5, #20]
    5dda:	ldr	r0, [r5, #16]
    5ddc:	subs	r0, r3, r0
    5dde:	adds	r0, #2
    5de0:	bl	fe7c <random(unsigned long)>
    5de4:	ldr	r3, [r5, #16]
    5de6:	subs	r3, #1
    5de8:	add	r0, r3
    5dea:	str.w	r0, [r9, #28]
    5dee:	b.w	5424 <ceremony_setup()+0xadc>
    5df2:	ldr	r3, [r5, #20]
    5df4:	ldr	r0, [r5, #16]
    5df6:	subs	r0, r3, r0
    5df8:	adds	r0, #2
    5dfa:	bl	fe7c <random(unsigned long)>
    5dfe:	ldr	r3, [r5, #16]
    5e00:	subs	r3, #1
    5e02:	add	r0, r3
    5e04:	str.w	r0, [sl, #28]
    5e08:	b.w	4e2c <ceremony_setup()+0x4e4>
    5e0c:	ldr	r3, [r5, #20]
    5e0e:	ldr	r0, [r5, #16]
    5e10:	subs	r0, r3, r0
    5e12:	adds	r0, #2
    5e14:	bl	fe7c <random(unsigned long)>
    5e18:	ldr	r3, [r5, #16]
    5e1a:	subs	r3, #1
    5e1c:	add	r0, r3
    5e1e:	str.w	r0, [sl, #28]
    5e22:	b.w	50c4 <ceremony_setup()+0x77c>
    5e26:	ldr	r3, [r5, #20]
    5e28:	ldr	r0, [r5, #16]
    5e2a:	subs	r0, r3, r0
    5e2c:	adds	r0, #2
    5e2e:	bl	fe7c <random(unsigned long)>
    5e32:	ldr	r3, [r5, #16]
    5e34:	subs	r3, #1
    5e36:	add	r0, r3
    5e38:	str.w	r0, [sl, #28]
    5e3c:	b.w	4ba8 <ceremony_setup()+0x260>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5e40:	ldr	r3, [r5, #20]
    5e42:	ldr	r2, [r5, #16]
    5e44:	subs	r0, r3, r2
    5e46:	adds	r0, #2
    5e48:	bl	fe7c <random(unsigned long)>
    5e4c:	ldr	r1, [r5, #16]
    5e4e:	subs	r2, r1, #1
    5e50:	add	r0, r2
    5e52:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5e54:	ldr	r3, [r5, #20]
    5e56:	subs	r0, r3, r1
    5e58:	adds	r0, #2
    5e5a:	bl	fe7c <random(unsigned long)>
    5e5e:	ldr	r1, [r5, #16]
    5e60:	subs	r2, r1, #1
    5e62:	add	r0, r2
    5e64:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5e68:	ldr	r3, [r5, #20]
    5e6a:	subs	r0, r3, r1
    5e6c:	adds	r0, #2
    5e6e:	bl	fe7c <random(unsigned long)>
    5e72:	ldr	r1, [r5, #16]
    5e74:	subs	r2, r1, #1
    5e76:	add	r0, r2
    5e78:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5e7a:	ldr	r3, [r5, #20]
    5e7c:	subs	r0, r3, r1
    5e7e:	adds	r0, #2
    5e80:	bl	fe7c <random(unsigned long)>
    5e84:	ldr	r3, [r5, #16]
    5e86:	subs	r3, #1
    5e88:	add	r0, r3
    5e8a:	str	r0, [r4, #120]	; 0x78
    5e8c:	b.w	4ac4 <ceremony_setup()+0x17c>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5e90:	ldr	r3, [r5, #20]
    5e92:	ldr	r2, [r5, #16]
    5e94:	subs	r0, r3, r2
    5e96:	adds	r0, #2
    5e98:	bl	fe7c <random(unsigned long)>
    5e9c:	ldr	r1, [r5, #16]
    5e9e:	subs	r2, r1, #1
    5ea0:	add	r0, r2
    5ea2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5ea4:	ldr	r3, [r5, #20]
    5ea6:	subs	r0, r3, r1
    5ea8:	adds	r0, #2
    5eaa:	bl	fe7c <random(unsigned long)>
    5eae:	ldr	r1, [r5, #16]
    5eb0:	subs	r2, r1, #1
    5eb2:	add	r0, r2
    5eb4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5eb8:	ldr	r3, [r5, #20]
    5eba:	subs	r0, r3, r1
    5ebc:	adds	r0, #2
    5ebe:	bl	fe7c <random(unsigned long)>
    5ec2:	ldr	r1, [r5, #16]
    5ec4:	subs	r2, r1, #1
    5ec6:	add	r0, r2
    5ec8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5eca:	ldr	r3, [r5, #20]
    5ecc:	subs	r0, r3, r1
    5ece:	adds	r0, #2
    5ed0:	bl	fe7c <random(unsigned long)>
    5ed4:	ldr	r3, [r5, #16]
    5ed6:	subs	r3, #1
    5ed8:	add	r0, r3
    5eda:	str	r0, [r4, #120]	; 0x78
    5edc:	b.w	4f22 <ceremony_setup()+0x5da>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5ee0:	ldr	r3, [r5, #20]
    5ee2:	ldr	r2, [r5, #16]
    5ee4:	subs	r0, r3, r2
    5ee6:	adds	r0, #2
    5ee8:	bl	fe7c <random(unsigned long)>
    5eec:	ldr	r1, [r5, #16]
    5eee:	subs	r2, r1, #1
    5ef0:	add	r0, r2
    5ef2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5ef4:	ldr	r3, [r5, #20]
    5ef6:	subs	r0, r3, r1
    5ef8:	adds	r0, #2
    5efa:	bl	fe7c <random(unsigned long)>
    5efe:	ldr	r1, [r5, #16]
    5f00:	subs	r2, r1, #1
    5f02:	add	r0, r2
    5f04:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f08:	ldr	r3, [r5, #20]
    5f0a:	subs	r0, r3, r1
    5f0c:	adds	r0, #2
    5f0e:	bl	fe7c <random(unsigned long)>
    5f12:	ldr	r1, [r5, #16]
    5f14:	subs	r2, r1, #1
    5f16:	add	r0, r2
    5f18:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f1a:	ldr	r3, [r5, #20]
    5f1c:	subs	r0, r3, r1
    5f1e:	adds	r0, #2
    5f20:	bl	fe7c <random(unsigned long)>
    5f24:	ldr	r3, [r5, #16]
    5f26:	subs	r3, #1
    5f28:	add	r0, r3
    5f2a:	str	r0, [r4, #120]	; 0x78
    5f2c:	b.w	4cf2 <ceremony_setup()+0x3aa>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f30:	ldr	r3, [r5, #20]
    5f32:	ldr	r2, [r5, #16]
    5f34:	subs	r0, r3, r2
    5f36:	adds	r0, #2
    5f38:	bl	fe7c <random(unsigned long)>
    5f3c:	ldr	r1, [r5, #16]
    5f3e:	subs	r2, r1, #1
    5f40:	add	r0, r2
    5f42:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f44:	ldr	r3, [r5, #20]
    5f46:	subs	r0, r3, r1
    5f48:	adds	r0, #2
    5f4a:	bl	fe7c <random(unsigned long)>
    5f4e:	ldr	r1, [r5, #16]
    5f50:	subs	r2, r1, #1
    5f52:	add	r0, r2
    5f54:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f58:	ldr	r3, [r5, #20]
    5f5a:	subs	r0, r3, r1
    5f5c:	adds	r0, #2
    5f5e:	bl	fe7c <random(unsigned long)>
    5f62:	ldr	r1, [r5, #16]
    5f64:	subs	r2, r1, #1
    5f66:	add	r0, r2
    5f68:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f6a:	ldr	r3, [r5, #20]
    5f6c:	subs	r0, r3, r1
    5f6e:	adds	r0, #2
    5f70:	bl	fe7c <random(unsigned long)>
    5f74:	ldr	r3, [r5, #16]
    5f76:	subs	r3, #1
    5f78:	add	r0, r3
    5f7a:	str	r0, [r4, #120]	; 0x78
    5f7c:	b.n	5916 <ceremony_setup()+0xfce>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f7e:	ldr	r3, [r5, #20]
    5f80:	ldr	r2, [r5, #16]
    5f82:	subs	r0, r3, r2
    5f84:	adds	r0, #2
    5f86:	bl	fe7c <random(unsigned long)>
    5f8a:	ldr	r1, [r5, #16]
    5f8c:	subs	r2, r1, #1
    5f8e:	add	r0, r2
    5f90:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5f92:	ldr	r3, [r5, #20]
    5f94:	subs	r0, r3, r1
    5f96:	adds	r0, #2
    5f98:	bl	fe7c <random(unsigned long)>
    5f9c:	ldr	r1, [r5, #16]
    5f9e:	subs	r2, r1, #1
    5fa0:	add	r0, r2
    5fa2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5fa6:	ldr	r3, [r5, #20]
    5fa8:	subs	r0, r3, r1
    5faa:	adds	r0, #2
    5fac:	bl	fe7c <random(unsigned long)>
    5fb0:	ldr	r1, [r5, #16]
    5fb2:	subs	r2, r1, #1
    5fb4:	add	r0, r2
    5fb6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5fb8:	ldr	r3, [r5, #20]
    5fba:	subs	r0, r3, r1
    5fbc:	adds	r0, #2
    5fbe:	bl	fe7c <random(unsigned long)>
    5fc2:	ldr	r3, [r5, #16]
    5fc4:	subs	r3, #1
    5fc6:	add	r0, r3
    5fc8:	str	r0, [r4, #120]	; 0x78
    5fca:	b.n	5b3a <ceremony_setup()+0x11f2>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5fcc:	ldr	r3, [r5, #20]
    5fce:	ldr	r2, [r5, #16]
    5fd0:	subs	r0, r3, r2
    5fd2:	adds	r0, #2
    5fd4:	bl	fe7c <random(unsigned long)>
    5fd8:	ldr	r1, [r5, #16]
    5fda:	subs	r2, r1, #1
    5fdc:	add	r0, r2
    5fde:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5fe0:	ldr	r3, [r5, #20]
    5fe2:	subs	r0, r3, r1
    5fe4:	adds	r0, #2
    5fe6:	bl	fe7c <random(unsigned long)>
    5fea:	ldr	r1, [r5, #16]
    5fec:	subs	r2, r1, #1
    5fee:	add	r0, r2
    5ff0:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    5ff4:	ldr	r3, [r5, #20]
    5ff6:	subs	r0, r3, r1
    5ff8:	adds	r0, #2
    5ffa:	bl	fe7c <random(unsigned long)>
    5ffe:	ldr	r1, [r5, #16]
    6000:	subs	r2, r1, #1
    6002:	add	r0, r2
    6004:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6006:	ldr	r3, [r5, #20]
    6008:	subs	r0, r3, r1
    600a:	adds	r0, #2
    600c:	bl	fe7c <random(unsigned long)>
    6010:	ldr	r3, [r5, #16]
    6012:	subs	r3, #1
    6014:	add	r0, r3
    6016:	str	r0, [r4, #120]	; 0x78
    6018:	b.w	56e8 <ceremony_setup()+0xda0>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    601c:	ldr	r3, [r5, #20]
    601e:	ldr	r2, [r5, #16]
    6020:	subs	r0, r3, r2
    6022:	adds	r0, #2
    6024:	bl	fe7c <random(unsigned long)>
    6028:	ldr	r1, [r5, #16]
    602a:	subs	r2, r1, #1
    602c:	add	r0, r2
    602e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6030:	ldr	r3, [r5, #20]
    6032:	subs	r0, r3, r1
    6034:	adds	r0, #2
    6036:	bl	fe7c <random(unsigned long)>
    603a:	ldr	r1, [r5, #16]
    603c:	subs	r2, r1, #1
    603e:	add	r0, r2
    6040:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6044:	ldr	r3, [r5, #20]
    6046:	subs	r0, r3, r1
    6048:	adds	r0, #2
    604a:	bl	fe7c <random(unsigned long)>
    604e:	ldr	r1, [r5, #16]
    6050:	subs	r2, r1, #1
    6052:	add	r0, r2
    6054:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6056:	ldr	r3, [r5, #20]
    6058:	subs	r0, r3, r1
    605a:	adds	r0, #2
    605c:	bl	fe7c <random(unsigned long)>
    6060:	ldr	r3, [r5, #16]
    6062:	subs	r3, #1
    6064:	add	r0, r3
    6066:	str	r0, [r4, #120]	; 0x78
    6068:	b.w	5154 <ceremony_setup()+0x80c>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    606c:	ldr	r3, [r5, #20]
    606e:	ldr	r2, [r5, #16]
    6070:	subs	r0, r3, r2
    6072:	adds	r0, #2
    6074:	bl	fe7c <random(unsigned long)>
    6078:	ldr	r1, [r5, #16]
    607a:	subs	r2, r1, #1
    607c:	add	r0, r2
    607e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6080:	ldr	r3, [r5, #20]
    6082:	subs	r0, r3, r1
    6084:	adds	r0, #2
    6086:	bl	fe7c <random(unsigned long)>
    608a:	ldr	r1, [r5, #16]
    608c:	subs	r2, r1, #1
    608e:	add	r0, r2
    6090:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    6094:	ldr	r3, [r5, #20]
    6096:	subs	r0, r3, r1
    6098:	adds	r0, #2
    609a:	bl	fe7c <random(unsigned long)>
    609e:	ldr	r1, [r5, #16]
    60a0:	subs	r2, r1, #1
    60a2:	add	r0, r2
    60a4:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    60a6:	ldr	r3, [r5, #20]
    60a8:	subs	r0, r3, r1
    60aa:	adds	r0, #2
    60ac:	bl	fe7c <random(unsigned long)>
    60b0:	ldr	r3, [r5, #16]
    60b2:	subs	r3, #1
    60b4:	add	r0, r3
    60b6:	str	r0, [r4, #120]	; 0x78
    60b8:	b.w	54b8 <ceremony_setup()+0xb70>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    60bc:	movw	sl, #4636	; 0x121c
    60c0:	add.w	r3, r5, #28
    60c4:	movs	r7, #0
    60c6:	add.w	r9, r5, #4640	; 0x1220
    60ca:	add	sl, r5
    60cc:	str	r3, [sp, #4]
    60ce:	mov.w	r8, r7, lsl #3
    60d2:	ldr	r6, [sp, #4]
    60d4:	movs	r4, #0
    60d6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    60da:	ldrb	r2, [r5, #24]
      return _background[x][y];
    60dc:	add	r3, r4
    60de:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    60e0:	cbnz	r2, 60e6 <ceremony_setup()+0x179e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    60e2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    60e6:	cbnz	r3, 6102 <ceremony_setup()+0x17ba>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    60e8:	adds	r4, #1
    60ea:	adds	r6, #4
    60ec:	cmp	r4, #24
    60ee:	bne.n	60d6 <ceremony_setup()+0x178e>
    60f0:	ldr	r3, [sp, #4]
    60f2:	adds	r7, #24
    60f4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    60f6:	cmp.w	r7, #576	; 0x240
    60fa:	str	r3, [sp, #4]
    60fc:	bne.n	60ce <ceremony_setup()+0x1786>
    60fe:	b.w	4f2a <ceremony_setup()+0x5e2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6102:	ldr	r2, [r5, #20]
    6104:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6106:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    610a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    610c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    610e:	adds	r0, #2
    6110:	ldr.w	fp, [r3, r4, lsl #3]
    6114:	bl	fe7c <random(unsigned long)>
    6118:	ldr	r3, [r5, #16]
    611a:	rsb	r3, r3, fp
    611e:	adds	r3, #1
    6120:	subs	r0, r3, r0
    6122:	str	r0, [r6, #0]
    6124:	b.n	60e8 <ceremony_setup()+0x17a0>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6126:	movw	sl, #4636	; 0x121c
    612a:	add.w	r3, r5, #28
    612e:	mov.w	r9, #0
    6132:	add	sl, r5
    6134:	str	r3, [sp, #4]
    6136:	mov.w	r7, r9, lsl #3
    613a:	ldr	r6, [sp, #4]
    613c:	movs	r4, #0
    613e:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    6142:	ldrb	r2, [r5, #24]
      return _background[x][y];
    6144:	add	r3, r4
    6146:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    614a:	cbnz	r2, 6150 <ceremony_setup()+0x1808>
      return _background[x][y];
    } else {
      return !_background[x][y];
    614c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    6150:	cbnz	r3, 616e <ceremony_setup()+0x1826>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    6152:	adds	r4, #1
    6154:	adds	r6, #4
    6156:	cmp	r4, #24
    6158:	bne.n	613e <ceremony_setup()+0x17f6>
    615a:	ldr	r3, [sp, #4]
    615c:	add.w	r9, r9, #24
    6160:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    6162:	cmp.w	r9, #576	; 0x240
    6166:	str	r3, [sp, #4]
    6168:	bne.n	6136 <ceremony_setup()+0x17ee>
    616a:	b.w	4acc <ceremony_setup()+0x184>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    616e:	ldr	r2, [r5, #20]
    6170:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6172:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6176:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6178:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    617a:	adds	r0, #2
    617c:	ldr.w	fp, [r3, r4, lsl #3]
    6180:	bl	fe7c <random(unsigned long)>
    6184:	ldr	r3, [r5, #16]
    6186:	rsb	r3, r3, fp
    618a:	adds	r3, #1
    618c:	subs	r0, r3, r0
    618e:	str	r0, [r6, #0]
    6190:	b.n	6152 <ceremony_setup()+0x180a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6192:	movw	sl, #4636	; 0x121c
    6196:	add.w	r3, r5, #28
    619a:	movs	r7, #0
    619c:	add.w	r9, r5, #4640	; 0x1220
    61a0:	add	sl, r5
    61a2:	str	r3, [sp, #4]
    61a4:	mov.w	r8, r7, lsl #3
    61a8:	ldr	r6, [sp, #4]
    61aa:	movs	r4, #0
    61ac:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    61b0:	ldrb	r2, [r5, #24]
      return _background[x][y];
    61b2:	add	r3, r4
    61b4:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    61b6:	cbnz	r2, 61bc <ceremony_setup()+0x1874>
      return _background[x][y];
    } else {
      return !_background[x][y];
    61b8:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    61bc:	cbnz	r3, 61d8 <ceremony_setup()+0x1890>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    61be:	adds	r4, #1
    61c0:	adds	r6, #4
    61c2:	cmp	r4, #24
    61c4:	bne.n	61ac <ceremony_setup()+0x1864>
    61c6:	ldr	r3, [sp, #4]
    61c8:	adds	r7, #24
    61ca:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    61cc:	cmp.w	r7, #576	; 0x240
    61d0:	str	r3, [sp, #4]
    61d2:	bne.n	61a4 <ceremony_setup()+0x185c>
    61d4:	b.w	56f0 <ceremony_setup()+0xda8>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    61d8:	ldr	r2, [r5, #20]
    61da:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    61dc:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    61e0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    61e2:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    61e4:	adds	r0, #2
    61e6:	ldr.w	fp, [r3, r4, lsl #3]
    61ea:	bl	fe7c <random(unsigned long)>
    61ee:	ldr	r3, [r5, #16]
    61f0:	rsb	r3, r3, fp
    61f4:	adds	r3, #1
    61f6:	subs	r0, r3, r0
    61f8:	str	r0, [r6, #0]
    61fa:	b.n	61be <ceremony_setup()+0x1876>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    61fc:	movw	sl, #4636	; 0x121c
    6200:	add.w	r3, r5, #28
    6204:	movs	r7, #0
    6206:	add.w	r9, r5, #4640	; 0x1220
    620a:	add	sl, r5
    620c:	str	r3, [sp, #4]
    620e:	mov.w	r8, r7, lsl #3
    6212:	ldr	r6, [sp, #4]
    6214:	movs	r4, #0
    6216:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    621a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    621c:	add	r3, r4
    621e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    6220:	cbnz	r2, 6226 <ceremony_setup()+0x18de>
      return _background[x][y];
    } else {
      return !_background[x][y];
    6222:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    6226:	cbnz	r3, 6242 <ceremony_setup()+0x18fa>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    6228:	adds	r4, #1
    622a:	adds	r6, #4
    622c:	cmp	r4, #24
    622e:	bne.n	6216 <ceremony_setup()+0x18ce>
    6230:	ldr	r3, [sp, #4]
    6232:	adds	r7, #24
    6234:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    6236:	cmp.w	r7, #576	; 0x240
    623a:	str	r3, [sp, #4]
    623c:	bne.n	620e <ceremony_setup()+0x18c6>
    623e:	b.w	4cfa <ceremony_setup()+0x3b2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6242:	ldr	r2, [r5, #20]
    6244:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6246:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    624a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    624c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    624e:	adds	r0, #2
    6250:	ldr.w	fp, [r3, r4, lsl #3]
    6254:	bl	fe7c <random(unsigned long)>
    6258:	ldr	r3, [r5, #16]
    625a:	rsb	r3, r3, fp
    625e:	adds	r3, #1
    6260:	subs	r0, r3, r0
    6262:	str	r0, [r6, #0]
    6264:	b.n	6228 <ceremony_setup()+0x18e0>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6266:	movw	sl, #4636	; 0x121c
    626a:	add.w	r3, r5, #28
    626e:	movs	r7, #0
    6270:	add.w	r9, r5, #4640	; 0x1220
    6274:	add	sl, r5
    6276:	str	r3, [sp, #4]
    6278:	mov.w	r8, r7, lsl #3
    627c:	ldr	r6, [sp, #4]
    627e:	movs	r4, #0
    6280:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    6284:	ldrb	r2, [r5, #24]
      return _background[x][y];
    6286:	add	r3, r4
    6288:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    628a:	cbnz	r2, 6290 <ceremony_setup()+0x1948>
      return _background[x][y];
    } else {
      return !_background[x][y];
    628c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    6290:	cbnz	r3, 62aa <ceremony_setup()+0x1962>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    6292:	adds	r4, #1
    6294:	adds	r6, #4
    6296:	cmp	r4, #24
    6298:	bne.n	6280 <ceremony_setup()+0x1938>
    629a:	ldr	r3, [sp, #4]
    629c:	adds	r7, #24
    629e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    62a0:	cmp.w	r7, #576	; 0x240
    62a4:	str	r3, [sp, #4]
    62a6:	bne.n	6278 <ceremony_setup()+0x1930>
    62a8:	b.n	5b42 <ceremony_setup()+0x11fa>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    62aa:	ldr	r2, [r5, #20]
    62ac:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    62ae:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    62b2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    62b4:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    62b6:	adds	r0, #2
    62b8:	ldr.w	fp, [r3, r4, lsl #3]
    62bc:	bl	fe7c <random(unsigned long)>
    62c0:	ldr	r3, [r5, #16]
    62c2:	rsb	r3, r3, fp
    62c6:	adds	r3, #1
    62c8:	subs	r0, r3, r0
    62ca:	str	r0, [r6, #0]
    62cc:	b.n	6292 <ceremony_setup()+0x194a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    62ce:	movw	sl, #4636	; 0x121c
    62d2:	add.w	r3, r5, #28
    62d6:	movs	r7, #0
    62d8:	add.w	r9, r5, #4640	; 0x1220
    62dc:	add	sl, r5
    62de:	str	r3, [sp, #4]
    62e0:	mov.w	r8, r7, lsl #3
    62e4:	ldr	r6, [sp, #4]
    62e6:	movs	r4, #0
    62e8:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    62ec:	ldrb	r2, [r5, #24]
      return _background[x][y];
    62ee:	add	r3, r4
    62f0:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    62f2:	cbnz	r2, 62f8 <ceremony_setup()+0x19b0>
      return _background[x][y];
    } else {
      return !_background[x][y];
    62f4:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    62f8:	cbnz	r3, 6314 <ceremony_setup()+0x19cc>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    62fa:	adds	r4, #1
    62fc:	adds	r6, #4
    62fe:	cmp	r4, #24
    6300:	bne.n	62e8 <ceremony_setup()+0x19a0>
    6302:	ldr	r3, [sp, #4]
    6304:	adds	r7, #24
    6306:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    6308:	cmp.w	r7, #576	; 0x240
    630c:	str	r3, [sp, #4]
    630e:	bne.n	62e0 <ceremony_setup()+0x1998>
    6310:	b.w	591e <ceremony_setup()+0xfd6>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6314:	ldr	r2, [r5, #20]
    6316:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6318:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    631c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    631e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6320:	adds	r0, #2
    6322:	ldr.w	fp, [r3, r4, lsl #3]
    6326:	bl	fe7c <random(unsigned long)>
    632a:	ldr	r3, [r5, #16]
    632c:	rsb	r3, r3, fp
    6330:	adds	r3, #1
    6332:	subs	r0, r3, r0
    6334:	str	r0, [r6, #0]
    6336:	b.n	62fa <ceremony_setup()+0x19b2>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6338:	movw	sl, #4636	; 0x121c
    633c:	add.w	r3, r5, #28
    6340:	mov.w	r9, #0
    6344:	add	sl, r5
    6346:	str	r3, [sp, #4]
    6348:	mov.w	r7, r9, lsl #3
    634c:	ldr	r6, [sp, #4]
    634e:	movs	r4, #0
    6350:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    6354:	ldrb	r2, [r5, #24]
      return _background[x][y];
    6356:	add	r3, r4
    6358:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    635c:	cbnz	r2, 6362 <ceremony_setup()+0x1a1a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    635e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    6362:	cbnz	r3, 6380 <ceremony_setup()+0x1a38>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    6364:	adds	r4, #1
    6366:	adds	r6, #4
    6368:	cmp	r4, #24
    636a:	bne.n	6350 <ceremony_setup()+0x1a08>
    636c:	ldr	r3, [sp, #4]
    636e:	add.w	r9, r9, #24
    6372:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    6374:	cmp.w	r9, #576	; 0x240
    6378:	str	r3, [sp, #4]
    637a:	bne.n	6348 <ceremony_setup()+0x1a00>
    637c:	b.w	54c0 <ceremony_setup()+0xb78>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6380:	ldr	r2, [r5, #20]
    6382:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    6384:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    6388:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    638a:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    638c:	adds	r0, #2
    638e:	ldr.w	fp, [r3, r4, lsl #3]
    6392:	bl	fe7c <random(unsigned long)>
    6396:	ldr	r3, [r5, #16]
    6398:	rsb	r3, r3, fp
    639c:	adds	r3, #1
    639e:	subs	r0, r3, r0
    63a0:	str	r0, [r6, #0]
    63a2:	b.n	6364 <ceremony_setup()+0x1a1c>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    63a4:	movw	sl, #4636	; 0x121c
    63a8:	add.w	r3, r5, #28
    63ac:	movs	r7, #0
    63ae:	add.w	r9, r5, #4640	; 0x1220
    63b2:	add	sl, r5
    63b4:	str	r3, [sp, #4]
    63b6:	mov.w	r8, r7, lsl #3
    63ba:	ldr	r6, [sp, #4]
    63bc:	movs	r4, #0
    63be:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    63c2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    63c4:	add	r3, r4
    63c6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    63c8:	cbnz	r2, 63ce <ceremony_setup()+0x1a86>
      return _background[x][y];
    } else {
      return !_background[x][y];
    63ca:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    63ce:	cbnz	r3, 63ea <ceremony_setup()+0x1aa2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    63d0:	adds	r4, #1
    63d2:	adds	r6, #4
    63d4:	cmp	r4, #24
    63d6:	bne.n	63be <ceremony_setup()+0x1a76>
    63d8:	ldr	r3, [sp, #4]
    63da:	adds	r7, #24
    63dc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    63de:	cmp.w	r7, #576	; 0x240
    63e2:	str	r3, [sp, #4]
    63e4:	bne.n	63b6 <ceremony_setup()+0x1a6e>
    63e6:	b.w	515c <ceremony_setup()+0x814>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    63ea:	ldr	r2, [r5, #20]
    63ec:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    63ee:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    63f2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    63f4:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    63f6:	adds	r0, #2
    63f8:	ldr.w	fp, [r3, r4, lsl #3]
    63fc:	bl	fe7c <random(unsigned long)>
    6400:	ldr	r3, [r5, #16]
    6402:	rsb	r3, r3, fp
    6406:	adds	r3, #1
    6408:	subs	r0, r3, r0
    640a:	str	r0, [r6, #0]
    640c:	b.n	63d0 <ceremony_setup()+0x1a88>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    640e:	bl	10610 <sqrt>
    6412:	vmov.f64	d7, d0
    6416:	b.w	4c30 <ceremony_setup()+0x2e8>
    641a:	bl	10610 <sqrt>
    641e:	vmov.f64	d7, d0
    6422:	b.n	5c70 <ceremony_setup()+0x1328>
    6424:	bl	10610 <sqrt>
    6428:	vmov.f64	d7, d0
    642c:	b.w	5a10 <ceremony_setup()+0x10c8>
    6430:	bl	10610 <sqrt>
    6434:	vmov.f64	d7, d0
    6438:	b.w	5786 <ceremony_setup()+0xe3e>
    643c:	bl	10610 <sqrt>
    6440:	vmov.f64	d7, d0
    6444:	b.w	55bc <ceremony_setup()+0xc74>
    6448:	bl	10610 <sqrt>
    644c:	vmov.f64	d7, d0
    6450:	b.w	5386 <ceremony_setup()+0xa3e>
    6454:	bl	10610 <sqrt>
    6458:	vmov.f64	d7, d0
    645c:	b.w	5028 <ceremony_setup()+0x6e0>
    6460:	bl	10610 <sqrt>
    6464:	vmov.f64	d7, d0
    6468:	b.w	4d90 <ceremony_setup()+0x448>
    646c:	movs	r0, r0
	...

00006470 <updateScreensFadeCeremony(int)>:

void updateScreensFadeCeremony(int rate) {
  if(screenFadeUpdateSwitcher){
    6470:	ldr	r3, [pc, #716]	; (6740 <updateScreensFadeCeremony(int)+0x2d0>)
    6472:	ldrb	r3, [r3, #0]
  screen_A.special_screen_animation();
  screen_B.special_screen_animation();
  implosionTimer = 0;
}

void updateScreensFadeCeremony(int rate) {
    6474:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6478:	mov	r4, r0
    647a:	vpush	{d8}
    647e:	sub	sp, #28
  if(screenFadeUpdateSwitcher){
    6480:	cmp	r3, #0
    6482:	beq.w	6758 <updateScreensFadeCeremony(int)+0x2e8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    6486:	ldr	r3, [pc, #700]	; (6744 <updateScreensFadeCeremony(int)+0x2d4>)
    6488:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    648a:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    648c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    648e:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    6490:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6492:	ldr	r7, [pc, #688]	; (6744 <updateScreensFadeCeremony(int)+0x2d4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    6494:	cmp	r3, r1
    6496:	it	eq
    6498:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    649a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    649c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    649e:	ite	eq
    64a0:	moveq	r6, #1
    64a2:	movne	r6, #0
    64a4:	cmp	r6, #0
    64a6:	beq.n	648e <updateScreensFadeCeremony(int)+0x1e>
		_screen->show();
		return true;
	}

	bool updateFadeCeremony(int id, int rate) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    64a8:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    64aa:	ldr.w	r8, [pc, #668]	; 6748 <updateScreensFadeCeremony(int)+0x2d8>
    64ae:	orr.w	r1, r1, r2, lsl #27
    64b2:	ldr.w	r3, [r8, #476]	; 0x1dc
    64b6:	vmov	s15, r1
    64ba:	vldr	d5, [pc, #636]	; 6738 <updateScreensFadeCeremony(int)+0x2c8>
    64be:	vcvt.f64.u32	d7, s15
    64c2:	vdiv.f64	d6, d7, d5
    64c6:	vcvt.u32.f64	s12, d6
    64ca:	vmov	r2, s12
    64ce:	subs	r3, r2, r3
    64d0:	cmp	r3, #49	; 0x31
    64d2:	bls.w	6728 <updateScreensFadeCeremony(int)+0x2b8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    64d6:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    64d8:	mov	r6, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    64da:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    64dc:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    64de:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    64e0:	ldr	r5, [pc, #608]	; (6744 <updateScreensFadeCeremony(int)+0x2d4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    64e2:	cmp	r3, r1
    64e4:	it	eq
    64e6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    64e8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    64ea:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    64ec:	ite	eq
    64ee:	moveq	r7, #1
    64f0:	movne	r7, #0
    64f2:	cmp	r7, #0
    64f4:	beq.n	64dc <updateScreensFadeCeremony(int)+0x6c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    64f6:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    64f8:	vmov.f32	s11, #112	; 0x3f800000  1.0
    64fc:	vldr	s10, [r8, #468]	; 0x1d4
    6500:	orr.w	r1, r1, r2, lsl #27
    6504:	ldr	r7, [pc, #576]	; (6748 <updateScreensFadeCeremony(int)+0x2d8>)
    6506:	vcmpe.f32	s10, s11
    650a:	vmov	s15, r1
    650e:	vldr	d4, [pc, #552]	; 6738 <updateScreensFadeCeremony(int)+0x2c8>
    6512:	vcvt.f64.u32	d7, s15
    6516:	vmrs	APSR_nzcv, fpscr
    651a:	vdiv.f64	d6, d7, d4
    651e:	vcvt.u32.f64	s12, d6
    6522:	vstr	s12, [r8, #476]	; 0x1dc
    6526:	blt.w	69ec <updateScreensFadeCeremony(int)+0x57c>
      		
			if (newFrameReady) {
    652a:	ldrb.w	r1, [r7, #460]	; 0x1cc
    652e:	cmp	r1, #0
    6530:	beq.w	6708 <updateScreensFadeCeremony(int)+0x298>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6534:	movs	r1, #0
    6536:	ldr	r0, [pc, #532]	; (674c <updateScreensFadeCeremony(int)+0x2dc>)
    6538:	bl	10214 <Print::print(long)>
    653c:	movs	r1, #15
    653e:	ldr	r0, [pc, #528]	; (6750 <updateScreensFadeCeremony(int)+0x2e0>)
    6540:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6544:	ldr	r0, [pc, #516]	; (674c <updateScreensFadeCeremony(int)+0x2dc>)
    6546:	bl	10174 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    654a:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    654e:	ldr.w	r0, [r7, #496]	; 0x1f0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6552:	mov	lr, r5
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    6554:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    6558:	ldr	r6, [r5, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    655a:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    655e:	ldr	r5, [r5, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    6560:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    6564:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6568:	ldr.w	r1, [lr, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    656c:	ldr.w	r3, [lr, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    6570:	cmp	r3, r5
    6572:	it	eq
    6574:	cmpeq	r1, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6576:	mov	r6, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    6578:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    657a:	ite	eq
    657c:	moveq	r7, #1
    657e:	movne	r7, #0
    6580:	cmp	r7, #0
    6582:	beq.n	6568 <updateScreensFadeCeremony(int)+0xf8>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    6584:	lsrs	r5, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    6586:	movs	r3, #0
    6588:	orr.w	r5, r5, r1, lsl #27
    658c:	strb.w	r3, [r8, #460]	; 0x1cc
    6590:	vmov	s15, r5
    6594:	vldr	d5, [pc, #416]	; 6738 <updateScreensFadeCeremony(int)+0x2c8>
    6598:	vcvt.f64.u32	d7, s15
    659c:	vdiv.f64	d6, d7, d5
    65a0:	vcvt.u32.f64	s15, d6
    65a4:	vmov	ip, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    65a8:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    65ac:	ldr	r3, [pc, #404]	; (6744 <updateScreensFadeCeremony(int)+0x2d4>)
    65ae:	ldr.w	lr, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    65b2:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    65b4:	ldr	r5, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    65b6:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    65b8:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    65ba:	cmp	r3, r5
    65bc:	it	eq
    65be:	cmpeq	r1, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    65c0:	mov	lr, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    65c2:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    65c4:	ite	eq
    65c6:	moveq	r6, #1
    65c8:	movne	r6, #0
    65ca:	cmp	r6, #0
    65cc:	beq.n	65b6 <updateScreensFadeCeremony(int)+0x146>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    65ce:	lsrs	r5, r3, #5
    65d0:	rsb	r4, r4, #600	; 0x258
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    65d4:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    65d8:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    65da:	orr.w	r3, r5, r1, lsl #27
    65de:	vmov	s15, r4
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    65e2:	ldr	r5, [pc, #356]	; (6748 <updateScreensFadeCeremony(int)+0x2d8>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    65e4:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    65e6:	vmov	s14, r3
    65ea:	vcvt.f32.s32	s10, s15

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    65ee:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    65f2:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    65f4:	vcvt.f64.u32	d7, s14
    65f8:	vldr	d4, [pc, #316]	; 6738 <updateScreensFadeCeremony(int)+0x2c8>
    65fc:	vdiv.f64	d6, d7, d4
    6600:	vcvt.u32.f64	s14, d6
    6604:	vmov	r3, s14
    6608:	rsb	r6, ip, r3
    660c:	vmov	s15, r6
    6610:	vcvt.f32.u32	s14, s15
    6614:	vdiv.f32	s15, s14, s10
    6618:	vcmpe.f32	s15, s11
    661c:	vmrs	APSR_nzcv, fpscr
    6620:	it	pl
    6622:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    6626:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    662a:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    662e:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    6630:	lsls	r6, r6, #3
    6632:	b.n	6640 <updateScreensFadeCeremony(int)+0x1d0>
    6634:	ldr.w	r2, [r5, #488]	; 0x1e8
    6638:	vldr	s15, [r5, #468]	; 0x1d4
    663c:	ldr.w	r0, [r5, #492]	; 0x1ec
    6640:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    6644:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    6648:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    664a:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    664c:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    664e:	ldr.w	r9, [pc, #248]	; 6748 <updateScreensFadeCeremony(int)+0x2d8>
    6652:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    6654:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    6658:	ldrb	r0, [r0, r3]
    665a:	vmov	s14, r0
    665e:	ldrb.w	r0, [lr, #2]
    6662:	ldrb.w	lr, [lr, #1]
    6666:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    666a:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    666c:	vmov	s13, lr
    6670:	ldrb	r3, [r2, r3]
    6672:	ldrb.w	lr, [r0, #2]
    6676:	vcvt.f32.s32	s12, s12
    667a:	vcvt.f32.s32	s13, s13
    667e:	vmov	s10, r3
    6682:	vmov	s8, lr
    6686:	ldrb	r3, [r0, #1]
    6688:	vcvt.f32.s32	s14, s14
    668c:	ldr.w	r0, [r8, #448]	; 0x1c0
    6690:	vmul.f32	s13, s13, s15
    6694:	vmov	s9, r3
    6698:	vcvt.f32.s32	s8, s8
    669c:	vmul.f32	s12, s12, s15
    66a0:	vcvt.f32.s32	s9, s9
    66a4:	vmul.f32	s15, s14, s15
    66a8:	vcvt.f32.s32	s10, s10
    66ac:	vmov.f32	s14, s13
    66b0:	vfma.f32	s12, s11, s8
    66b4:	vfma.f32	s15, s10, s11
    66b8:	vfma.f32	s14, s11, s9
    66bc:	vcvt.s32.f32	s13, s12
    66c0:	vcvt.s32.f32	s15, s15
    66c4:	vcvt.s32.f32	s14, s14
    66c8:	vstr	s13, [sp, #20]
    66cc:	ldrb.w	r2, [sp, #20]
    66d0:	vstr	s14, [sp, #12]
    66d4:	vstr	s15, [sp, #16]
    66d8:	str	r2, [sp, #0]
    66da:	ldrb.w	r3, [sp, #12]
    66de:	ldrb.w	r2, [sp, #16]
    66e2:	bl	ddc8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    66e6:	cmp	r4, #24
    66e8:	bne.n	6634 <updateScreensFadeCeremony(int)+0x1c4>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    66ea:	add.w	sl, sl, #1
    66ee:	adds	r7, #24
    66f0:	cmp.w	sl, #24
    66f4:	uxth	r7, r7
    66f6:	beq.w	69d4 <updateScreensFadeCeremony(int)+0x564>
    66fa:	ldr.w	r2, [fp, #488]	; 0x1e8
    66fe:	vldr	s15, [fp, #468]	; 0x1d4
    6702:	ldr.w	r0, [fp, #492]	; 0x1ec
    6706:	b.n	662a <updateScreensFadeCeremony(int)+0x1ba>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6708:	ldr	r0, [pc, #64]	; (674c <updateScreensFadeCeremony(int)+0x2dc>)
    670a:	bl	10214 <Print::print(long)>
    670e:	movs	r1, #22
    6710:	ldr	r0, [pc, #64]	; (6754 <updateScreensFadeCeremony(int)+0x2e4>)
    6712:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6716:	ldr	r0, [pc, #52]	; (674c <updateScreensFadeCeremony(int)+0x2dc>)
    6718:	bl	10174 <Print::println()>
    if(screen_A.updateFadeCeremony(0, rate)) screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }else{
    if(screen_B.updateFadeCeremony(1, rate))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
    671c:	ldr	r3, [pc, #32]	; (6740 <updateScreensFadeCeremony(int)+0x2d0>)
    671e:	ldr	r2, [pc, #32]	; (6740 <updateScreensFadeCeremony(int)+0x2d0>)
    6720:	ldrb	r3, [r3, #0]
    6722:	eor.w	r3, r3, #1
    6726:	strb	r3, [r2, #0]
  }
}
    6728:	add	sp, #28
    672a:	vpop	{d8}
    672e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6732:	nop
    6734:	nop.w
    6738:	.word	0xd2f1a9fc
    673c:	.word	0x3ff0624d
    6740:	.word	0x2000178d
    6744:	.word	0x400d4000
    6748:	.word	0x20004e0c
    674c:	.word	0x20000f10
    6750:	.word	0x20000174
    6754:	.word	0x20000184
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    6758:	ldr	r3, [pc, #684]	; (6a08 <updateScreensFadeCeremony(int)+0x598>)
    675a:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    675c:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    675e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6760:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    6762:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6764:	ldr	r7, [pc, #672]	; (6a08 <updateScreensFadeCeremony(int)+0x598>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    6766:	cmp	r3, r1
    6768:	it	eq
    676a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    676c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    676e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    6770:	ite	eq
    6772:	moveq	r6, #1
    6774:	movne	r6, #0
    6776:	cmp	r6, #0
    6778:	beq.n	6760 <updateScreensFadeCeremony(int)+0x2f0>
		_screen->show();
		return true;
	}

	bool updateFadeCeremony(int id, int rate) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    677a:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    677c:	ldr.w	r8, [pc, #652]	; 6a0c <updateScreensFadeCeremony(int)+0x59c>
    6780:	orr.w	r1, r1, r2, lsl #27
    6784:	ldr.w	r3, [r8, #476]	; 0x1dc
    6788:	vmov	s15, r1
    678c:	vldr	d5, [pc, #624]	; 6a00 <updateScreensFadeCeremony(int)+0x590>
    6790:	vcvt.f64.u32	d7, s15
    6794:	vdiv.f64	d6, d7, d5
    6798:	vcvt.u32.f64	s12, d6
    679c:	vmov	r2, s12
    67a0:	subs	r3, r2, r3
    67a2:	cmp	r3, #49	; 0x31
    67a4:	bls.n	6728 <updateScreensFadeCeremony(int)+0x2b8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    67a6:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    67a8:	mov	r6, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    67aa:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    67ac:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    67ae:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    67b0:	ldr	r5, [pc, #596]	; (6a08 <updateScreensFadeCeremony(int)+0x598>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    67b2:	cmp	r3, r1
    67b4:	it	eq
    67b6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    67b8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    67ba:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    67bc:	ite	eq
    67be:	moveq	r7, #1
    67c0:	movne	r7, #0
    67c2:	cmp	r7, #0
    67c4:	beq.n	67ac <updateScreensFadeCeremony(int)+0x33c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    67c6:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    67c8:	vmov.f32	s11, #112	; 0x3f800000  1.0
    67cc:	vldr	s10, [r8, #468]	; 0x1d4
    67d0:	orr.w	r1, r1, r2, lsl #27
    67d4:	ldr	r7, [pc, #564]	; (6a0c <updateScreensFadeCeremony(int)+0x59c>)
    67d6:	vcmpe.f32	s10, s11
    67da:	vmov	s15, r1
    67de:	vldr	d4, [pc, #544]	; 6a00 <updateScreensFadeCeremony(int)+0x590>
    67e2:	vcvt.f64.u32	d7, s15
    67e6:	vmrs	APSR_nzcv, fpscr
    67ea:	vdiv.f64	d6, d7, d4
    67ee:	vcvt.u32.f64	s12, d6
    67f2:	vstr	s12, [r8, #476]	; 0x1dc
    67f6:	blt.w	69de <updateScreensFadeCeremony(int)+0x56e>
      		
			if (newFrameReady) {
    67fa:	ldrb.w	r3, [r7, #460]	; 0x1cc
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    67fe:	movs	r1, #1
    6800:	ldr	r0, [pc, #524]	; (6a10 <updateScreensFadeCeremony(int)+0x5a0>)
    6802:	cmp	r3, #0
    6804:	beq.n	670a <updateScreensFadeCeremony(int)+0x29a>
    6806:	bl	10214 <Print::print(long)>
    680a:	movs	r1, #15
    680c:	ldr	r0, [pc, #516]	; (6a14 <updateScreensFadeCeremony(int)+0x5a4>)
    680e:	bl	e468 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6812:	ldr	r0, [pc, #508]	; (6a10 <updateScreensFadeCeremony(int)+0x5a0>)
    6814:	bl	10174 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    6818:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    681c:	ldr.w	r0, [r7, #496]	; 0x1f0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6820:	mov	lr, r5
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    6822:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    6826:	ldr	r6, [r5, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    6828:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    682c:	ldr	r5, [r5, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    682e:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    6832:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6836:	ldr.w	r1, [lr, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    683a:	ldr.w	r3, [lr, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    683e:	cmp	r3, r5
    6840:	it	eq
    6842:	cmpeq	r1, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6844:	mov	r6, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    6846:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    6848:	ite	eq
    684a:	moveq	r7, #1
    684c:	movne	r7, #0
    684e:	cmp	r7, #0
    6850:	beq.n	6836 <updateScreensFadeCeremony(int)+0x3c6>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    6852:	lsrs	r5, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    6854:	movs	r3, #0
    6856:	orr.w	r5, r5, r1, lsl #27
    685a:	strb.w	r3, [r8, #460]	; 0x1cc
    685e:	vmov	s15, r5
    6862:	vldr	d5, [pc, #412]	; 6a00 <updateScreensFadeCeremony(int)+0x590>
    6866:	vcvt.f64.u32	d7, s15
    686a:	vdiv.f64	d6, d7, d5
    686e:	vcvt.u32.f64	s15, d6
    6872:	vmov	ip, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    6876:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    687a:	ldr	r3, [pc, #396]	; (6a08 <updateScreensFadeCeremony(int)+0x598>)
    687c:	ldr.w	lr, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6880:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    6882:	ldr	r5, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6884:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    6886:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    6888:	cmp	r3, r5
    688a:	it	eq
    688c:	cmpeq	r1, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    688e:	mov	lr, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    6890:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    6892:	ite	eq
    6894:	moveq	r6, #1
    6896:	movne	r6, #0
    6898:	cmp	r6, #0
    689a:	beq.n	6884 <updateScreensFadeCeremony(int)+0x414>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    689c:	lsrs	r5, r3, #5
    689e:	rsb	r4, r4, #600	; 0x258
    68a2:	vmov.f32	s12, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    68a6:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    68a8:	orr.w	r3, r5, r1, lsl #27
    68ac:	vmov	s15, r4
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    68b0:	ldr	r5, [pc, #344]	; (6a0c <updateScreensFadeCeremony(int)+0x59c>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    68b2:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    68b4:	vmov	s14, r3
    68b8:	vcvt.f32.s32	s13, s15

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    68bc:	vmov.f32	s16, s12
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    68c0:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
    68c2:	vcvt.f64.u32	d7, s14
    68c6:	vldr	d4, [pc, #312]	; 6a00 <updateScreensFadeCeremony(int)+0x590>
    68ca:	vdiv.f64	d5, d7, d4
    68ce:	vcvt.u32.f64	s14, d5
    68d2:	vmov	r3, s14
    68d6:	rsb	r6, ip, r3
    68da:	vmov	s15, r6
    68de:	vcvt.f32.u32	s14, s15
    68e2:	vdiv.f32	s15, s14, s13
    68e6:	vcmpe.f32	s15, s12
    68ea:	vmrs	APSR_nzcv, fpscr
    68ee:	it	pl
    68f0:	vmovpl.f32	s15, s12
		fadeFactor = min(fadeFactor, 1);
    68f4:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    68f8:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    68fc:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    68fe:	lsls	r6, r6, #3
    6900:	b.n	690e <updateScreensFadeCeremony(int)+0x49e>
    6902:	ldr.w	r2, [r5, #488]	; 0x1e8
    6906:	vldr	s15, [r5, #468]	; 0x1d4
    690a:	ldr.w	r0, [r5, #492]	; 0x1ec
    690e:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    6912:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    6916:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    6918:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    691a:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    691c:	ldr.w	r9, [pc, #236]	; 6a0c <updateScreensFadeCeremony(int)+0x59c>
    6920:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    6922:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    6926:	ldrb	r0, [r0, r3]
    6928:	vmov	s14, r0
    692c:	ldrb.w	r0, [lr, #2]
    6930:	ldrb.w	lr, [lr, #1]
    6934:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    6938:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    693a:	vmov	s13, lr
    693e:	ldrb	r3, [r2, r3]
    6940:	ldrb.w	lr, [r0, #2]
    6944:	vcvt.f32.s32	s12, s12
    6948:	vcvt.f32.s32	s13, s13
    694c:	vmov	s10, r3
    6950:	vmov	s8, lr
    6954:	ldrb	r3, [r0, #1]
    6956:	vcvt.f32.s32	s14, s14
    695a:	ldr.w	r0, [r8, #448]	; 0x1c0
    695e:	vmul.f32	s13, s13, s15
    6962:	vmov	s9, r3
    6966:	vcvt.f32.s32	s8, s8
    696a:	vmul.f32	s12, s12, s15
    696e:	vcvt.f32.s32	s9, s9
    6972:	vmul.f32	s15, s14, s15
    6976:	vcvt.f32.s32	s10, s10
    697a:	vmov.f32	s14, s13
    697e:	vfma.f32	s12, s11, s8
    6982:	vfma.f32	s15, s10, s11
    6986:	vfma.f32	s14, s11, s9
    698a:	vcvt.s32.f32	s13, s12
    698e:	vcvt.s32.f32	s15, s15
    6992:	vcvt.s32.f32	s14, s14
    6996:	vstr	s13, [sp, #20]
    699a:	ldrb.w	r2, [sp, #20]
    699e:	vstr	s14, [sp, #12]
    69a2:	vstr	s15, [sp, #16]
    69a6:	str	r2, [sp, #0]
    69a8:	ldrb.w	r3, [sp, #12]
    69ac:	ldrb.w	r2, [sp, #16]
    69b0:	bl	ddc8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    69b4:	cmp	r4, #24
    69b6:	bne.n	6902 <updateScreensFadeCeremony(int)+0x492>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    69b8:	add.w	sl, sl, #1
    69bc:	adds	r7, #24
    69be:	cmp.w	sl, #24
    69c2:	uxth	r7, r7
    69c4:	beq.n	69d4 <updateScreensFadeCeremony(int)+0x564>
    69c6:	ldr.w	r2, [fp, #488]	; 0x1e8
    69ca:	vldr	s15, [fp, #468]	; 0x1d4
    69ce:	ldr.w	r0, [fp, #492]	; 0x1ec
    69d2:	b.n	68f8 <updateScreensFadeCeremony(int)+0x488>

		fadeFactor = (float)(rtcMillis() - fadeStart) / (AUTOMATON_INTERVAL-rate);
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    69d4:	ldr.w	r0, [r9, #448]	; 0x1c0
    69d8:	bl	db80 <Adafruit_NeoPixel::show()>
    69dc:	b.n	671c <updateScreensFadeCeremony(int)+0x2ac>
    69de:	ldr.w	ip, [r7, #472]	; 0x1d8
    69e2:	ldr.w	r2, [r7, #488]	; 0x1e8
    69e6:	ldr.w	r0, [r7, #492]	; 0x1ec
    69ea:	b.n	687a <updateScreensFadeCeremony(int)+0x40a>
    69ec:	ldr.w	ip, [r7, #472]	; 0x1d8
    69f0:	ldr.w	r2, [r7, #488]	; 0x1e8
    69f4:	ldr.w	r0, [r7, #492]	; 0x1ec
    69f8:	b.n	65ac <updateScreensFadeCeremony(int)+0x13c>
    69fa:	nop
    69fc:	nop.w
    6a00:	.word	0xd2f1a9fc
    6a04:	.word	0x3ff0624d
    6a08:	.word	0x400d4000
    6a0c:	.word	0x20005000
    6a10:	.word	0x20000f10
    6a14:	.word	0x20000174

00006a18 <ceremony_animation()>:
}

int automatonRate = 700;
void ceremony_animation(){

  if (isRegularAnimation) return;
    6a18:	ldr	r3, [pc, #772]	; (6d20 <ceremony_animation()+0x308>)
    6a1a:	ldrb	r3, [r3, #0]
    6a1c:	cmp	r3, #0
    6a1e:	bne.w	6e48 <ceremony_animation()+0x430>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    6a22:	ldr	r3, [pc, #768]	; (6d24 <ceremony_animation()+0x30c>)
  updateBeams();
  updateScreensFadeCeremony(400);
}

int automatonRate = 700;
void ceremony_animation(){
    6a24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a28:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6a2a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    6a2c:	ldr	r1, [r3, #40]	; 0x28
    6a2e:	vpush	{d8-d9}
    6a32:	sub	sp, #20
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6a34:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    6a36:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    6a38:	cmp	r3, r1
    6a3a:	it	eq
    6a3c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    6a3e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    6a40:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    6a42:	ite	eq
    6a44:	moveq	r5, #1
    6a46:	movne	r5, #0
    6a48:	cmp	r5, #0
    6a4a:	beq.n	6a34 <ceremony_animation()+0x1c>

  if (isRegularAnimation) return;
    
  if (implosionTimer > 2500){
    6a4c:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    6a4e:	ldr	r3, [pc, #728]	; (6d28 <ceremony_animation()+0x310>)
    6a50:	movw	r2, #2500	; 0x9c4
    6a54:	orr.w	r1, r1, r0, lsl #27
    6a58:	ldr	r3, [r3, #0]
    6a5a:	vmov	s15, r1
    6a5e:	vldr	d5, [pc, #696]	; 6d18 <ceremony_animation()+0x300>
    6a62:	vcvt.f64.u32	d7, s15
    6a66:	vdiv.f64	d6, d7, d5
    6a6a:	vcvt.u32.f64	s12, d6
    6a6e:	vmov	r1, s12
    6a72:	subs	r3, r1, r3
    6a74:	cmp	r3, r2
    implosionDone = true;
    6a76:	ldr	r3, [pc, #692]	; (6d2c <ceremony_animation()+0x314>)
int automatonRate = 700;
void ceremony_animation(){

  if (isRegularAnimation) return;
    
  if (implosionTimer > 2500){
    6a78:	bls.n	6b50 <ceremony_animation()+0x138>
    implosionDone = true;
    6a7a:	movs	r2, #1
    6a7c:	strb	r2, [r3, #0]
  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterruptCeremony(700);
  } else {
    if(automatonReinitializeCeremony){
    6a7e:	ldr	r3, [pc, #688]	; (6d30 <ceremony_animation()+0x318>)
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6a80:	ldr.w	fp, [pc, #688]	; 6d34 <ceremony_animation()+0x31c>
    6a84:	ldrb	r3, [r3, #0]
    6a86:	cmp	r3, #0
    6a88:	bne.w	6e54 <ceremony_animation()+0x43c>
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    6a8c:	ldr.w	r7, [fp, #440]	; 0x1b8
    6a90:	add.w	r2, r7, #120	; 0x78
    6a94:	addw	r1, r7, #2424	; 0x978
    6a98:	sub.w	r3, r2, #96	; 0x60
    6a9c:	b.n	6aa4 <ceremony_animation()+0x8c>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6a9e:	cmp	r2, r3
    6aa0:	beq.w	6c94 <ceremony_animation()+0x27c>
				if ((*automaton).cells[i][j] != 0){
    6aa4:	ldr.w	r4, [r3, #4]!
    6aa8:	cmp	r4, #0
    6aaa:	beq.n	6a9e <ceremony_animation()+0x86>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    6aac:	ldr.w	r7, [fp, #436]	; 0x1b4
    6ab0:	add.w	r2, r7, #120	; 0x78
    6ab4:	addw	r1, r7, #2424	; 0x978
    6ab8:	sub.w	r3, r2, #96	; 0x60
    6abc:	b.n	6ac4 <ceremony_animation()+0xac>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6abe:	cmp	r2, r3
    6ac0:	beq.w	6d44 <ceremony_animation()+0x32c>
				if ((*automaton).cells[i][j] != 0){
    6ac4:	ldr.w	r6, [r3, #4]!
    6ac8:	cmp	r6, #0
    6aca:	beq.n	6abe <ceremony_animation()+0xa6>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    6acc:	ldrb.w	r3, [fp, #460]	; 0x1cc
    6ad0:	cbnz	r3, 6ad8 <ceremony_animation()+0xc0>
    6ad2:	ldr	r0, [pc, #608]	; (6d34 <ceremony_animation()+0x31c>)
    6ad4:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    6ad8:	ldr	r7, [pc, #604]	; (6d38 <ceremony_animation()+0x320>)
    6ada:	ldr.w	r5, [r7, #440]	; 0x1b8
    6ade:	add.w	r2, r5, #120	; 0x78
    6ae2:	addw	r1, r5, #2424	; 0x978
    6ae6:	sub.w	r3, r2, #96	; 0x60
    6aea:	b.n	6af2 <ceremony_animation()+0xda>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6aec:	cmp	r2, r3
    6aee:	beq.w	6dc0 <ceremony_animation()+0x3a8>
				if ((*automaton).cells[i][j] != 0){
    6af2:	ldr.w	r4, [r3, #4]!
    6af6:	cmp	r4, #0
    6af8:	beq.n	6aec <ceremony_animation()+0xd4>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    6afa:	ldr.w	r8, [r7, #436]	; 0x1b4
    6afe:	add.w	r2, r8, #120	; 0x78
    6b02:	addw	r1, r8, #2424	; 0x978
    6b06:	sub.w	r3, r2, #96	; 0x60
    6b0a:	b.n	6b10 <ceremony_animation()+0xf8>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6b0c:	cmp	r3, r2
    6b0e:	beq.n	6c0a <ceremony_animation()+0x1f2>
				if ((*automaton).cells[i][j] != 0){
    6b10:	ldr.w	r6, [r3, #4]!
    6b14:	cmp	r6, #0
    6b16:	beq.n	6b0c <ceremony_animation()+0xf4>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    6b18:	ldrb.w	r3, [r7, #460]	; 0x1cc
    6b1c:	cbnz	r3, 6b24 <ceremony_animation()+0x10c>
    6b1e:	ldr	r0, [pc, #536]	; (6d38 <ceremony_animation()+0x320>)
    6b20:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
        screen_A.regular_screen_animation();
        automatonReinitializeCeremony = false;
      }
    screen_A.iterate_animation();
    screen_B.iterate_animation();
    automatonRate = min((automatonRate - 50), 0);
    6b24:	ldr	r4, [pc, #532]	; (6d3c <ceremony_animation()+0x324>)
    6b26:	ldr	r3, [r4, #0]
    6b28:	subs	r3, #50	; 0x32
    6b2a:	and.w	r3, r3, r3, asr #31
    6b2e:	str	r3, [r4, #0]
  }
}


void renderInterruptCeremony(int rate) {
  updateBeams();
    6b30:	bl	800 <updateBeams()>
  updateScreensFadeCeremony(400);
    6b34:	mov.w	r0, #400	; 0x190
    6b38:	bl	6470 <updateScreensFadeCeremony(int)>
      }
    screen_A.iterate_animation();
    screen_B.iterate_animation();
    automatonRate = min((automatonRate - 50), 0);
    renderInterruptCeremony(automatonRate);
    if (automatonRate == 0){
    6b3c:	ldr	r3, [r4, #0]
    6b3e:	cbnz	r3, 6b46 <ceremony_animation()+0x12e>
      isRegularAnimation = true;
    6b40:	movs	r3, #1
    6b42:	ldr	r2, [pc, #476]	; (6d20 <ceremony_animation()+0x308>)
    6b44:	strb	r3, [r2, #0]
    }  
    }
}
    6b46:	add	sp, #20
    6b48:	vpop	{d8-d9}
    6b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (implosionTimer > 2500){
    implosionDone = true;

  }

  if (!implosionDone){
    6b50:	ldrb	r3, [r3, #0]
    6b52:	cmp	r3, #0
    6b54:	bne.n	6a7e <ceremony_animation()+0x66>
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    6b56:	ldr.w	fp, [pc, #476]	; 6d34 <ceremony_animation()+0x31c>
    6b5a:	ldr.w	r7, [fp, #440]	; 0x1b8
    6b5e:	add.w	r2, r7, #120	; 0x78
    6b62:	addw	r1, r7, #2424	; 0x978
    6b66:	sub.w	r3, r2, #96	; 0x60
    6b6a:	b.n	6b72 <ceremony_animation()+0x15a>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6b6c:	cmp	r2, r3
    6b6e:	beq.w	71d0 <ceremony_animation()+0x7b8>
				if ((*automaton).cells[i][j] != 0){
    6b72:	ldr.w	r4, [r3, #4]!
    6b76:	cmp	r4, #0
    6b78:	beq.n	6b6c <ceremony_animation()+0x154>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    6b7a:	ldr.w	r8, [fp, #436]	; 0x1b4
    6b7e:	add.w	r2, r8, #120	; 0x78
    6b82:	addw	r1, r8, #2424	; 0x978
    6b86:	sub.w	r3, r2, #96	; 0x60
    6b8a:	b.n	6b92 <ceremony_animation()+0x17a>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6b8c:	cmp	r2, r3
    6b8e:	beq.w	7258 <ceremony_animation()+0x840>
				if ((*automaton).cells[i][j] != 0){
    6b92:	ldr.w	r7, [r3, #4]!
    6b96:	cmp	r7, #0
    6b98:	beq.n	6b8c <ceremony_animation()+0x174>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    6b9a:	ldrb.w	r3, [fp, #460]	; 0x1cc
    6b9e:	cbnz	r3, 6ba6 <ceremony_animation()+0x18e>
    6ba0:	ldr	r0, [pc, #400]	; (6d34 <ceremony_animation()+0x31c>)
    6ba2:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
		_screen->show();
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
    6ba6:	ldr	r7, [pc, #400]	; (6d38 <ceremony_animation()+0x320>)
    6ba8:	ldr.w	r5, [r7, #440]	; 0x1b8
    6bac:	add.w	r2, r5, #120	; 0x78
    6bb0:	addw	r1, r5, #2424	; 0x978
    6bb4:	sub.w	r3, r2, #96	; 0x60
    6bb8:	b.n	6bc0 <ceremony_animation()+0x1a8>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6bba:	cmp	r3, r2
    6bbc:	beq.w	72d8 <ceremony_animation()+0x8c0>
				if ((*automaton).cells[i][j] != 0){
    6bc0:	ldr.w	r4, [r3, #4]!
    6bc4:	cmp	r4, #0
    6bc6:	beq.n	6bba <ceremony_animation()+0x1a2>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    6bc8:	ldr.w	r9, [r7, #436]	; 0x1b4
    6bcc:	add.w	r2, r9, #120	; 0x78
    6bd0:	addw	r1, r9, #2424	; 0x978
    6bd4:	sub.w	r3, r2, #96	; 0x60
    6bd8:	b.n	6be0 <ceremony_animation()+0x1c8>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    6bda:	cmp	r2, r3
    6bdc:	beq.w	7154 <ceremony_animation()+0x73c>
				if ((*automaton).cells[i][j] != 0){
    6be0:	ldr.w	r4, [r3, #4]!
    6be4:	cmp	r4, #0
    6be6:	beq.n	6bda <ceremony_animation()+0x1c2>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    6be8:	ldrb.w	r3, [r7, #460]	; 0x1cc
    6bec:	cbnz	r3, 6bf4 <ceremony_animation()+0x1dc>
    6bee:	ldr	r0, [pc, #328]	; (6d38 <ceremony_animation()+0x320>)
    6bf0:	bl	2ebc <Screen::iterate_animation() [clone .part.20]>
  }
}


void renderInterruptCeremony(int rate) {
  updateBeams();
    6bf4:	bl	800 <updateBeams()>
  updateScreensFadeCeremony(400);
    6bf8:	mov.w	r0, #400	; 0x190
    renderInterruptCeremony(automatonRate);
    if (automatonRate == 0){
      isRegularAnimation = true;
    }  
    }
}
    6bfc:	add	sp, #20
    6bfe:	vpop	{d8-d9}
    6c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}


void renderInterruptCeremony(int rate) {
  updateBeams();
  updateScreensFadeCeremony(400);
    6c06:	b.w	6470 <updateScreensFadeCeremony(int)>
    6c0a:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    6c0e:	cmp	r1, r2
    6c10:	bne.w	6b06 <ceremony_animation()+0xee>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6c14:	movs	r1, #8
    6c16:	mov	r0, r6
    6c18:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6c1c:	adds	r3, r0, #1
    6c1e:	add.w	r0, r0, r0, lsl #1
    6c22:	ldr.w	r4, [r7, #452]	; 0x1c4
    6c26:	add.w	r3, r3, r3, lsl #1
    6c2a:	movw	r1, #4636	; 0x121c
    6c2e:	add.w	r9, r7, r0, lsl #3
    6c32:	ldr.w	r2, [r7, #456]	; 0x1c8
    6c36:	lsls	r3, r3, #3
    6c38:	str.w	r4, [r8, r1]
    6c3c:	ldr.w	r0, [r9, #32]
    6c40:	add.w	lr, r8, #4640	; 0x1220
    6c44:	ldr	r4, [r7, r3]
    6c46:	adds	r5, r7, r3
    6c48:	ldr.w	r3, [r9, #36]	; 0x24
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6c4c:	ldr.w	r1, [r7, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6c50:	str.w	r3, [r8, #12]
    6c54:	ldr.w	r3, [r9, #40]	; 0x28
    6c58:	ldr	r5, [r5, #4]
    6c5a:	str	r3, [sp, #8]
    6c5c:	ldr.w	r3, [r9, #44]	; 0x2c
    6c60:	str.w	r5, [r8, #4]
    6c64:	str.w	r3, [r8, #20]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6c68:	ldr.w	r5, [r7, #368]	; 0x170
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6c6c:	ldr	r3, [sp, #8]
    6c6e:	str.w	r4, [r8]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6c72:	ldr	r4, [pc, #204]	; (6d40 <ceremony_animation()+0x328>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6c74:	str.w	r0, [r8, #8]
    6c78:	str.w	r3, [r8, #16]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6c7c:	sub.w	r0, r4, #360	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6c80:	strb.w	r6, [r8, #24]
    6c84:	str.w	r2, [lr]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6c88:	str	r5, [sp, #0]
    6c8a:	ldmia.w	r4, {r2, r3}
    6c8e:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    6c92:	b.n	6b18 <ceremony_animation()+0x100>
    6c94:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    6c96:	cmp	r1, r2
    6c98:	bne.w	6a98 <ceremony_animation()+0x80>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    6c9c:	movs	r1, #8
    6c9e:	mov	r0, r4
    6ca0:	bl	fe84 <random(long, long)>
    6ca4:	ldr.w	r1, [fp, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6ca8:	add.w	r5, r0, r0, lsl #1
    6cac:	movw	r2, #4636	; 0x121c
    6cb0:	ldr.w	r3, [fp, #456]	; 0x1c8
    6cb4:	add.w	lr, r7, #4640	; 0x1220
    6cb8:	add.w	r5, fp, r5, lsl #3
    6cbc:	str	r1, [r7, r2]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6cbe:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6cc0:	mov.w	r8, #1
    6cc4:	ldr.w	r6, [r5, #208]	; 0xd0
    6cc8:	ldr.w	r1, [r5, #196]	; 0xc4
    6ccc:	ldr.w	r4, [r5, #200]	; 0xc8
    6cd0:	ldr.w	r2, [r5, #204]	; 0xcc
    6cd4:	str	r6, [r7, #16]
    6cd6:	ldr.w	r6, [r5, #212]	; 0xd4
    6cda:	ldr.w	r5, [r5, #192]	; 0xc0
    6cde:	str	r1, [r7, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6ce0:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6ce2:	str	r4, [r7, #8]
    6ce4:	str	r2, [r7, #12]
    6ce6:	str	r5, [r7, #0]
    6ce8:	str	r6, [r7, #20]
    6cea:	strb.w	r8, [r7, #24]
    6cee:	str.w	r3, [lr]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6cf2:	ldr.w	r4, [fp, #440]	; 0x1b8
    6cf6:	bl	fe84 <random(long, long)>
    6cfa:	add.w	r3, r0, r0, lsl #1
    6cfe:	ldr	r0, [pc, #52]	; (6d34 <ceremony_animation()+0x31c>)
    6d00:	mov	r1, r4
    6d02:	add.w	r3, fp, r3, lsl #2
    6d06:	ldr.w	r2, [r3, #380]	; 0x17c
    6d0a:	add.w	r3, r3, #372	; 0x174
    6d0e:	str	r2, [sp, #0]
    6d10:	ldmia	r3, {r2, r3}
    6d12:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    6d16:	b.n	6aac <ceremony_animation()+0x94>
    6d18:	.word	0xd2f1a9fc
    6d1c:	.word	0x3ff0624d
    6d20:	.word	0x20001794
    6d24:	.word	0x400d4000
    6d28:	.word	0x20008a2c
    6d2c:	.word	0x2000ae7c
    6d30:	.word	0x20000970
    6d34:	.word	0x20004e0c
    6d38:	.word	0x20005000
    6d3c:	.word	0x20000968
    6d40:	.word	0x20005168
    6d44:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    6d46:	cmp	r2, r1
    6d48:	bne.w	6ab8 <ceremony_animation()+0xa0>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6d4c:	movs	r1, #8
    6d4e:	mov	r0, r6
    6d50:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6d54:	adds	r3, r0, #1
    6d56:	add.w	r0, r0, r0, lsl #1
    6d5a:	ldr.w	r4, [fp, #452]	; 0x1c4
    6d5e:	add.w	r3, r3, r3, lsl #1
    6d62:	movw	r1, #4636	; 0x121c
    6d66:	add.w	r8, fp, r0, lsl #3
    6d6a:	ldr.w	r2, [fp, #456]	; 0x1c8
    6d6e:	lsls	r3, r3, #3
    6d70:	str	r4, [r7, r1]
    6d72:	ldr.w	r0, [r8, #32]
    6d76:	add.w	lr, r7, #4640	; 0x1220
    6d7a:	ldr.w	r4, [fp, r3]
    6d7e:	add.w	r5, fp, r3
    6d82:	ldr.w	r3, [r8, #36]	; 0x24
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6d86:	ldr.w	r1, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6d8a:	str	r3, [r7, #12]
    6d8c:	ldr.w	r3, [r8, #40]	; 0x28
    6d90:	ldr	r5, [r5, #4]
    6d92:	str	r3, [sp, #8]
    6d94:	ldr.w	r3, [r8, #44]	; 0x2c
    6d98:	str	r5, [r7, #4]
    6d9a:	str	r3, [r7, #20]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6d9c:	ldr.w	r5, [fp, #368]	; 0x170
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6da0:	ldr	r3, [sp, #8]
    6da2:	str	r4, [r7, #0]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6da4:	ldr	r4, [pc, #164]	; (6e4c <ceremony_animation()+0x434>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6da6:	str	r0, [r7, #8]
    6da8:	str	r3, [r7, #16]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6daa:	sub.w	r0, r4, #360	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6dae:	strb	r6, [r7, #24]
    6db0:	str.w	r2, [lr]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    6db4:	str	r5, [sp, #0]
    6db6:	ldmia.w	r4, {r2, r3}
    6dba:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    6dbe:	b.n	6acc <ceremony_animation()+0xb4>
    6dc0:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    6dc2:	cmp	r1, r2
    6dc4:	bne.w	6ae6 <ceremony_animation()+0xce>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    6dc8:	movs	r1, #8
    6dca:	mov	r0, r4
    6dcc:	bl	fe84 <random(long, long)>
    6dd0:	ldr.w	r1, [r7, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6dd4:	add.w	r6, r0, r0, lsl #1
    6dd8:	movw	r2, #4636	; 0x121c
    6ddc:	ldr.w	r3, [r7, #456]	; 0x1c8
    6de0:	add.w	lr, r5, #4640	; 0x1220
    6de4:	add.w	r6, r7, r6, lsl #3
    6de8:	str	r1, [r5, r2]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6dea:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6dec:	mov.w	r9, #1
    6df0:	ldr.w	r2, [r6, #200]	; 0xc8
    6df4:	ldr.w	r1, [r6, #196]	; 0xc4
    6df8:	str	r2, [r5, #8]
    6dfa:	ldr.w	r2, [r6, #208]	; 0xd0
    6dfe:	ldr.w	r4, [r6, #204]	; 0xcc
    6e02:	str	r2, [sp, #8]
    6e04:	ldr.w	r2, [r6, #212]	; 0xd4
    6e08:	ldr.w	r6, [r6, #192]	; 0xc0
    6e0c:	str	r2, [r5, #20]
    6e0e:	ldr	r2, [sp, #8]
    6e10:	str	r1, [r5, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6e12:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6e14:	str	r4, [r5, #12]
    6e16:	str	r2, [r5, #16]
    6e18:	str	r6, [r5, #0]
    6e1a:	strb.w	r9, [r5, #24]
    6e1e:	str.w	r3, [lr]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6e22:	ldr.w	r4, [r7, #440]	; 0x1b8
    6e26:	bl	fe84 <random(long, long)>
    6e2a:	add.w	r3, r0, r0, lsl #1
    6e2e:	ldr	r0, [pc, #32]	; (6e50 <ceremony_animation()+0x438>)
    6e30:	mov	r1, r4
    6e32:	add.w	r3, r7, r3, lsl #2
    6e36:	ldr.w	r2, [r3, #380]	; 0x17c
    6e3a:	add.w	r3, r3, #372	; 0x174
    6e3e:	str	r2, [sp, #0]
    6e40:	ldmia	r3, {r2, r3}
    6e42:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    6e46:	b.n	6afa <ceremony_animation()+0xe2>
    6e48:	bx	lr
    6e4a:	nop
    6e4c:	.word	0x20004f74
    6e50:	.word	0x20005000
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6e54:	movs	r0, #0
    6e56:	movs	r1, #8
    6e58:	ldr.w	r4, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6e5c:	movw	r5, #4636	; 0x121c
    6e60:	mov	r6, r0
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6e62:	bl	fe84 <random(long, long)>
    6e66:	mov	r1, r0
    6e68:	ldr.w	r7, [fp, #452]	; 0x1c4
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    6e6c:	ldr.w	r3, [fp, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6e70:	add.w	ip, r4, #4640	; 0x1220
    6e74:	add.w	r8, r1, #1
    6e78:	add.w	r1, r1, r1, lsl #1
    6e7c:	str	r7, [r4, r5]
    6e7e:	mov.w	r9, #1
    6e82:	add.w	r1, fp, r1, lsl #3
    6e86:	ldr.w	r2, [fp, #456]	; 0x1c8
    6e8a:	add.w	r8, r8, r8, lsl #1

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    6e8e:	mov	r0, r6
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6e90:	ldr	r5, [r1, #32]
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    6e92:	add.w	sl, fp, #360	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6e96:	mov.w	r8, r8, lsl #3
    6e9a:	str	r5, [r4, #8]
    6e9c:	ldr.w	r5, [fp, r8]
    6ea0:	add.w	lr, fp, r8
    6ea4:	add.w	r8, r3, #4640	; 0x1220
    6ea8:	str	r5, [r4, #0]
    6eaa:	ldr	r5, [r1, #36]	; 0x24
    6eac:	str	r5, [r4, #12]
    6eae:	ldr.w	r5, [lr, #4]
    6eb2:	ldr.w	lr, [fp, #8]
    6eb6:	str	r5, [r4, #4]
    6eb8:	ldr	r5, [r1, #40]	; 0x28
    6eba:	ldr	r1, [r1, #44]	; 0x2c
    6ebc:	str	r5, [r4, #16]
    6ebe:	ldr.w	r5, [fp, #16]
    6ec2:	str	r1, [r4, #20]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    6ec4:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6ec6:	strb	r6, [r4, #24]
    6ec8:	str.w	r2, [ip]
    6ecc:	ldr.w	r4, [fp, #12]
    6ed0:	str	r5, [r3, #16]
    6ed2:	movw	r5, #4636	; 0x121c
    6ed6:	str	r7, [r3, r5]
    6ed8:	ldr.w	r7, [fp, #20]
    6edc:	ldr.w	r5, [fp, #4]
    6ee0:	str	r4, [r3, #12]
    6ee2:	ldr.w	r4, [fp]
    6ee6:	str	r5, [r3, #4]
    6ee8:	str.w	lr, [r3, #8]
    6eec:	str	r7, [r3, #20]
    6eee:	str	r4, [r3, #0]
    6ef0:	strb.w	r9, [r3, #24]
    6ef4:	str.w	r2, [r8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    6ef8:	ldr.w	r4, [fp, #440]	; 0x1b8
    6efc:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6f00:	add.w	r0, r0, r0, lsl #1
    6f04:	ldr.w	r1, [fp, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    6f08:	ldr.w	r3, [fp, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6f0c:	add.w	r8, r4, #4640	; 0x1220
    6f10:	add.w	r7, fp, r0, lsl #3
    6f14:	movw	r0, #4636	; 0x121c
    6f18:	ldr.w	r2, [fp, #456]	; 0x1c8
    6f1c:	ldr.w	r5, [r7, #200]	; 0xc8
    6f20:	str	r1, [r4, r0]
    6f22:	ldr.w	r0, [r7, #196]	; 0xc4
    6f26:	str	r5, [r4, #8]
    6f28:	ldr.w	r5, [r7, #204]	; 0xcc
    6f2c:	ldr.w	lr, [fp, #12]
    6f30:	str	r5, [r4, #12]
    6f32:	ldr.w	r5, [r7, #208]	; 0xd0
    6f36:	ldr.w	ip, [fp, #8]
    6f3a:	str	r5, [r4, #16]
    6f3c:	ldr.w	r5, [r7, #212]	; 0xd4
    6f40:	str	r5, [r4, #20]
    6f42:	ldr.w	r5, [r7, #192]	; 0xc0
    6f46:	add.w	r7, r3, #4640	; 0x1220
    6f4a:	str	r0, [r4, #4]
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    6f4c:	mov	r0, fp
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    6f4e:	str	r5, [r4, #0]
    6f50:	ldr.w	r5, [fp, #20]
    6f54:	strb.w	r9, [r4, #24]
    6f58:	str.w	r2, [r8]
    6f5c:	str	r5, [r3, #20]
    6f5e:	movw	r5, #4636	; 0x121c
    6f62:	ldr.w	r4, [fp, #16]
    6f66:	str	r1, [r3, r5]
    6f68:	ldr.w	r5, [fp, #4]
    6f6c:	ldr.w	r1, [fp]
    6f70:	str.w	ip, [r3, #8]
    6f74:	str.w	lr, [r3, #12]
    6f78:	str	r5, [r3, #4]
    6f7a:	str	r4, [r3, #16]
    6f7c:	str	r1, [r3, #0]
    6f7e:	strb.w	r9, [r3, #24]
    6f82:	str	r2, [r7, #0]
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    6f84:	ldr.w	r3, [fp, #368]	; 0x170
    6f88:	ldr.w	r1, [fp, #436]	; 0x1b4
    6f8c:	str	r3, [sp, #0]
    6f8e:	ldmia.w	sl, {r2, r3}
    6f92:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
		initialize_seed(_bg_automaton, hue_seeds[0]);
    6f96:	ldr.w	r3, [fp, #368]	; 0x170
    6f9a:	ldr.w	r1, [fp, #432]	; 0x1b0
    6f9e:	mov	r0, fp
    6fa0:	str	r3, [sp, #0]
    6fa2:	ldmia.w	sl, {r2, r3}
    6fa6:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    6faa:	mov	r0, r6
    6fac:	movs	r1, #5
    6fae:	ldr.w	r4, [fp, #440]	; 0x1b8
    6fb2:	bl	fe84 <random(long, long)>
    6fb6:	add.w	r3, r0, r0, lsl #1
    6fba:	mov	r1, r4
    6fbc:	mov	r0, fp
    6fbe:	add.w	r3, fp, r3, lsl #2
    6fc2:	ldr.w	r2, [r3, #380]	; 0x17c
    6fc6:	add.w	r3, r3, #372	; 0x174
    6fca:	str	r2, [sp, #0]
    6fcc:	ldmia	r3, {r2, r3}
    6fce:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    6fd2:	mov	r0, r6
    6fd4:	movs	r1, #5
    6fd6:	ldr.w	r4, [fp, #444]	; 0x1bc
    6fda:	bl	fe84 <random(long, long)>
    6fde:	add.w	r3, r0, r0, lsl #1
    6fe2:	mov	r1, r4
    6fe4:	mov	r0, fp
    6fe6:	add.w	r3, fp, r3, lsl #2
    6fea:	ldr.w	r2, [r3, #380]	; 0x17c
    6fee:	add.w	r3, r3, #372	; 0x174
    6ff2:	str	r2, [sp, #0]
    6ff4:	ldmia	r3, {r2, r3}
    6ff6:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    6ffa:	mov	r0, r6
    6ffc:	movs	r1, #8
    6ffe:	ldr.w	r4, [fp, #436]	; 0x1b4
    7002:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7006:	add.w	r3, r0, r9
    700a:	add.w	r1, r0, r0, lsl #1
    700e:	ldr.w	r7, [fp, #452]	; 0x1c4
    7012:	add.w	r3, r3, r3, lsl #1
    7016:	movw	r0, #4636	; 0x121c
    701a:	add.w	r1, fp, r1, lsl #3
    701e:	ldr.w	r2, [fp, #456]	; 0x1c8
    7022:	str	r7, [r4, r0]
    7024:	lsls	r0, r3, #3
    7026:	ldr	r5, [r1, #32]
    7028:	add.w	r8, r4, #4640	; 0x1220
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    702c:	ldr.w	r3, [fp, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7030:	add.w	lr, fp, r0
    7034:	str	r5, [r4, #8]
    7036:	ldr	r5, [r1, #36]	; 0x24
    7038:	ldr.w	r0, [fp, r0]
    703c:	str	r5, [r4, #12]
    703e:	ldr.w	r5, [lr, #4]
    7042:	add.w	lr, r3, #4640	; 0x1220
    7046:	ldr.w	ip, [fp, #8]
    704a:	str	r5, [r4, #4]
    704c:	ldr	r5, [r1, #40]	; 0x28
    704e:	ldr	r1, [r1, #44]	; 0x2c
    7050:	str	r5, [r4, #16]
    7052:	ldr.w	r5, [fp, #20]
    7056:	str	r1, [r4, #20]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    7058:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    705a:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    705c:	mov	r0, r6
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    705e:	strb	r6, [r4, #24]
    7060:	str.w	r2, [r8]
    7064:	str	r5, [r3, #20]
    7066:	movw	r5, #4636	; 0x121c
    706a:	ldr.w	r4, [fp, #16]
    706e:	str	r7, [r3, r5]
    7070:	ldr.w	r6, [fp, #12]
    7074:	ldr.w	r5, [fp, #4]
    7078:	ldr.w	r7, [fp]
    707c:	str	r5, [r3, #4]
    707e:	str.w	ip, [r3, #8]
    7082:	str	r6, [r3, #12]
    7084:	str	r4, [r3, #16]
    7086:	str	r7, [r3, #0]
    7088:	strb.w	r9, [r3, #24]
    708c:	str.w	r2, [lr]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    7090:	ldr.w	r4, [fp, #440]	; 0x1b8
    7094:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7098:	add.w	r0, r0, r0, lsl #1
    709c:	ldr.w	r1, [fp, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    70a0:	ldr.w	r3, [fp, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    70a4:	add.w	r8, r4, #4640	; 0x1220
    70a8:	add.w	r7, fp, r0, lsl #3
    70ac:	movw	r0, #4636	; 0x121c
    70b0:	ldr.w	r2, [fp, #456]	; 0x1c8
    70b4:	add.w	r6, r3, #4640	; 0x1220
    70b8:	ldr.w	r5, [r7, #200]	; 0xc8
    70bc:	str	r1, [r4, r0]
    70be:	ldr.w	r0, [r7, #196]	; 0xc4
    70c2:	str	r5, [r4, #8]
    70c4:	ldr.w	r5, [r7, #204]	; 0xcc
    70c8:	ldr.w	lr, [fp, #12]
    70cc:	str	r5, [r4, #12]
    70ce:	ldr.w	r5, [r7, #208]	; 0xd0
    70d2:	ldr.w	ip, [fp, #8]
    70d6:	str	r5, [r4, #16]
    70d8:	ldr.w	r5, [r7, #212]	; 0xd4
    70dc:	ldr.w	r7, [r7, #192]	; 0xc0
    70e0:	str	r5, [r4, #20]
    70e2:	movw	r5, #4636	; 0x121c
    70e6:	str	r0, [r4, #4]
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    70e8:	mov	r0, fp
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    70ea:	str	r7, [r4, #0]
    70ec:	strb.w	r9, [r4, #24]
    70f0:	str.w	r2, [r8]
    70f4:	str	r1, [r3, r5]
    70f6:	ldr.w	r1, [fp, #4]
    70fa:	ldr.w	r4, [fp, #20]
    70fe:	ldr.w	r7, [fp, #16]
    7102:	str	r1, [r3, #4]
    7104:	ldr.w	r1, [fp]
    7108:	str.w	ip, [r3, #8]
    710c:	str.w	lr, [r3, #12]
    7110:	str	r1, [r3, #0]
    7112:	strb.w	r9, [r3, #24]
    7116:	str	r7, [r3, #16]
    7118:	str	r4, [r3, #20]
    711a:	str	r2, [r6, #0]
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    711c:	ldr.w	r3, [fp, #368]	; 0x170
    7120:	ldr.w	r1, [fp, #436]	; 0x1b4
    7124:	str	r3, [sp, #0]
    7126:	ldmia.w	sl, {r2, r3}
    712a:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    712e:	ldr.w	r3, [fp, #360]	; 0x168
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    7132:	ldr.w	r5, [fp, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    7136:	subs	r3, #1
    7138:	ldr.w	r6, [fp, #364]	; 0x16c
    713c:	ldrb.w	r8, [fp, #368]	; 0x170
    7140:	cmp	r3, #4
    7142:	bhi.w	764c <ceremony_animation()+0xc34>
    7146:	tbh	[pc, r3, lsl #1]
    714a:	.short	0x024d
    714c:	.word	0x017a01df
    7150:	.word	0x010c0149
    7154:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    7156:	cmp	r2, r1
    7158:	bne.w	6bd4 <ceremony_animation()+0x1bc>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    715c:	movs	r1, #8
    715e:	mov	r0, r4
    7160:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7164:	adds	r2, r0, #1
    7166:	ldr.w	r1, [r7, #452]	; 0x1c4
    716a:	movw	r3, #4636	; 0x121c
    716e:	add.w	r2, r2, r2, lsl #1
    7172:	ldr.w	ip, [r7, #456]	; 0x1c8
    7176:	add.w	r0, r0, r0, lsl #1
    717a:	str.w	r1, [r9, r3]
    717e:	lsls	r2, r2, #3
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    7180:	ldr.w	r1, [r7, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7184:	add.w	r3, r7, r0, lsl #3
    7188:	add.w	lr, r9, #4640	; 0x1220
    718c:	adds	r6, r7, r2
    718e:	ldr	r5, [r7, r2]
    7190:	ldr	r0, [r3, #32]
    7192:	ldr	r6, [r6, #4]
    7194:	ldr	r2, [r3, #40]	; 0x28
    7196:	str.w	r0, [r9, #8]
    719a:	ldr	r0, [r3, #36]	; 0x24
    719c:	ldr	r3, [r3, #44]	; 0x2c
    719e:	str.w	r6, [r9, #4]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    71a2:	ldr.w	r6, [r7, #368]	; 0x170
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    71a6:	str.w	r5, [r9]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    71aa:	ldr	r5, [pc, #844]	; (74f8 <ceremony_animation()+0xae0>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    71ac:	str.w	r0, [r9, #12]
    71b0:	str.w	r2, [r9, #16]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    71b4:	sub.w	r0, r5, #360	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    71b8:	str.w	r3, [r9, #20]
    71bc:	strb.w	r4, [r9, #24]
    71c0:	str.w	ip, [lr]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    71c4:	str	r6, [sp, #0]
    71c6:	ldmia.w	r5, {r2, r3}
    71ca:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    71ce:	b.n	6be8 <ceremony_animation()+0x1d0>
    71d0:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    71d2:	cmp	r2, r1
    71d4:	bne.w	6b66 <ceremony_animation()+0x14e>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    71d8:	movs	r1, #8
    71da:	mov	r0, r4
    71dc:	bl	fe84 <random(long, long)>
    71e0:	ldr.w	r1, [fp, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    71e4:	add.w	r6, r0, r0, lsl #1
    71e8:	movw	r2, #4636	; 0x121c
    71ec:	ldr.w	r3, [fp, #456]	; 0x1c8
    71f0:	mov.w	ip, #1
    71f4:	add.w	r6, fp, r6, lsl #3
    71f8:	str	r1, [r7, r2]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    71fa:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    71fc:	add.w	r8, r7, #4640	; 0x1220
    7200:	ldr.w	r2, [r6, #208]	; 0xd0
    7204:	ldr.w	r1, [r6, #196]	; 0xc4
    7208:	str	r2, [sp, #8]
    720a:	ldr.w	r2, [r6, #212]	; 0xd4
    720e:	ldr.w	r5, [r6, #200]	; 0xc8
    7212:	ldr.w	r4, [r6, #204]	; 0xcc
    7216:	ldr.w	r6, [r6, #192]	; 0xc0
    721a:	str	r2, [r7, #20]
    721c:	ldr	r2, [sp, #8]
    721e:	str	r1, [r7, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    7220:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7222:	str	r4, [r7, #12]
    7224:	str	r2, [r7, #16]
    7226:	str	r6, [r7, #0]
    7228:	str	r5, [r7, #8]
    722a:	strb.w	ip, [r7, #24]
    722e:	str.w	r3, [r8]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    7232:	ldr.w	r4, [fp, #440]	; 0x1b8
    7236:	bl	fe84 <random(long, long)>
    723a:	add.w	r3, r0, r0, lsl #1
    723e:	ldr	r0, [pc, #700]	; (74fc <ceremony_animation()+0xae4>)
    7240:	mov	r1, r4
    7242:	add.w	r3, fp, r3, lsl #2
    7246:	ldr.w	r2, [r3, #380]	; 0x17c
    724a:	add.w	r3, r3, #372	; 0x174
    724e:	str	r2, [sp, #0]
    7250:	ldmia	r3, {r2, r3}
    7252:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    7256:	b.n	6b7a <ceremony_animation()+0x162>
    7258:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    725a:	cmp	r2, r1
    725c:	bne.w	6b86 <ceremony_animation()+0x16e>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    7260:	movs	r1, #8
    7262:	mov	r0, r7
    7264:	bl	fe84 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7268:	adds	r2, r0, #1
    726a:	ldr.w	r1, [fp, #452]	; 0x1c4
    726e:	movw	r3, #4636	; 0x121c
    7272:	add.w	r2, r2, r2, lsl #1
    7276:	ldr.w	r4, [fp, #456]	; 0x1c8
    727a:	add.w	r0, r0, r0, lsl #1
    727e:	str.w	r1, [r8, r3]
    7282:	lsls	r2, r2, #3
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    7284:	ldr.w	r1, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7288:	add.w	r3, fp, r0, lsl #3
    728c:	add.w	lr, r8, #4640	; 0x1220
    7290:	add.w	r6, fp, r2
    7294:	ldr.w	r5, [fp, r2]
    7298:	ldr	r0, [r3, #32]
    729a:	ldr	r6, [r6, #4]
    729c:	ldr	r2, [r3, #40]	; 0x28
    729e:	str.w	r0, [r8, #8]
    72a2:	ldr	r0, [r3, #36]	; 0x24
    72a4:	ldr	r3, [r3, #44]	; 0x2c
    72a6:	str.w	r6, [r8, #4]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    72aa:	ldr.w	r6, [fp, #368]	; 0x170
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    72ae:	str.w	r5, [r8]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    72b2:	ldr	r5, [pc, #588]	; (7500 <ceremony_animation()+0xae8>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    72b4:	str.w	r0, [r8, #12]
    72b8:	str.w	r2, [r8, #16]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    72bc:	sub.w	r0, r5, #360	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    72c0:	str.w	r3, [r8, #20]
    72c4:	strb.w	r7, [r8, #24]
    72c8:	str.w	r4, [lr]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    72cc:	str	r6, [sp, #0]
    72ce:	ldmia.w	r5, {r2, r3}
    72d2:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    72d6:	b.n	6b9a <ceremony_animation()+0x182>
    72d8:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    72dc:	cmp	r2, r1
    72de:	bne.w	6bb4 <ceremony_animation()+0x19c>
		return true;
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    72e2:	movs	r1, #8
    72e4:	mov	r0, r4
    72e6:	bl	fe84 <random(long, long)>
    72ea:	ldr.w	r1, [r7, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    72ee:	add.w	r6, r0, r0, lsl #1
    72f2:	movw	r2, #4636	; 0x121c
    72f6:	ldr.w	r3, [r7, #456]	; 0x1c8
    72fa:	mov.w	ip, #1
    72fe:	add.w	r6, r7, r6, lsl #3
    7302:	str	r1, [r5, r2]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    7304:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    7306:	add.w	r9, r5, #4640	; 0x1220
    730a:	ldr.w	r2, [r6, #200]	; 0xc8
    730e:	ldr.w	r1, [r6, #196]	; 0xc4
    7312:	str	r2, [r5, #8]
    7314:	ldr.w	r2, [r6, #208]	; 0xd0
    7318:	ldr.w	r4, [r6, #204]	; 0xcc
    731c:	str	r2, [sp, #8]
    731e:	ldr.w	r2, [r6, #212]	; 0xd4
    7322:	ldr.w	r6, [r6, #192]	; 0xc0
    7326:	str	r2, [r5, #20]
    7328:	ldr	r2, [sp, #8]
    732a:	str	r1, [r5, #4]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    732c:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    732e:	str	r4, [r5, #12]
    7330:	str	r2, [r5, #16]
    7332:	str	r6, [r5, #0]
    7334:	strb.w	ip, [r5, #24]
    7338:	str.w	r3, [r9]
	}

	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    733c:	ldr.w	r4, [r7, #440]	; 0x1b8
    7340:	bl	fe84 <random(long, long)>
    7344:	add.w	r3, r0, r0, lsl #1
    7348:	ldr	r0, [pc, #440]	; (7504 <ceremony_animation()+0xaec>)
    734a:	mov	r1, r4
    734c:	add.w	r3, r7, r3, lsl #2
    7350:	ldr.w	r2, [r3, #380]	; 0x17c
    7354:	add.w	r3, r3, #372	; 0x174
    7358:	str	r2, [sp, #0]
    735a:	ldmia	r3, {r2, r3}
    735c:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
    7360:	b.n	6bc8 <ceremony_animation()+0x1b0>
    7362:	add.w	r7, r5, #2304	; 0x900
    7366:	add.w	r6, r5, #28
    736a:	mov	r4, r5
    736c:	mov	r3, r7
    736e:	mov	r7, r8
    7370:	mov	r8, r3
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    7372:	cbnz	r7, 738e <ceremony_animation()+0x976>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    7374:	ldr	r3, [r5, #0]
    7376:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    7378:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    737c:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    737e:	str	r3, [r4, #120]	; 0x78
    7380:	adds	r4, #96	; 0x60
    7382:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    7384:	cmp	r4, r8
    7386:	beq.w	758a <ceremony_animation()+0xb72>
    if (rand){
    738a:	cmp	r7, #0
    738c:	beq.n	7374 <ceremony_animation()+0x95c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    738e:	ldr	r3, [r5, #20]
    7390:	ldr	r2, [r5, #16]
    7392:	subs	r0, r3, r2
    7394:	adds	r0, #2
    7396:	bl	fe7c <random(unsigned long)>
    739a:	ldr	r1, [r5, #16]
    739c:	subs	r2, r1, #1
    739e:	add	r0, r2
    73a0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    73a2:	ldr	r3, [r5, #20]
    73a4:	subs	r0, r3, r1
    73a6:	adds	r0, #2
    73a8:	bl	fe7c <random(unsigned long)>
    73ac:	ldr	r1, [r5, #16]
    73ae:	subs	r2, r1, #1
    73b0:	add	r0, r2
    73b2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    73b6:	ldr	r3, [r5, #20]
    73b8:	subs	r0, r3, r1
    73ba:	adds	r0, #2
    73bc:	bl	fe7c <random(unsigned long)>
    73c0:	ldr	r1, [r5, #16]
    73c2:	subs	r2, r1, #1
    73c4:	add	r0, r2
    73c6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    73c8:	ldr	r3, [r5, #20]
    73ca:	subs	r0, r3, r1
    73cc:	adds	r0, #2
    73ce:	bl	fe7c <random(unsigned long)>
    73d2:	ldr	r3, [r5, #16]
    73d4:	subs	r3, #1
    73d6:	add	r0, r3
    73d8:	str	r0, [r4, #120]	; 0x78
    73da:	b.n	7380 <ceremony_animation()+0x968>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    73dc:	cmp	r6, #0
    73de:	ble.w	758a <ceremony_animation()+0xb72>
    73e2:	mov.w	r9, #0
    73e6:	mov	r7, r8
    73e8:	b.n	7400 <ceremony_animation()+0x9e8>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    73ea:	add.w	r3, r4, r3, lsl #3
    73ee:	ldr	r2, [r5, #0]
    73f0:	add.w	r3, r5, r3, lsl #2
    73f4:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    73f6:	add.w	r9, r9, #1
    73fa:	cmp	r6, r9
    73fc:	beq.w	758a <ceremony_animation()+0xb72>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    7400:	movs	r0, #8
    7402:	bl	fe7c <random(unsigned long)>
    7406:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    740a:	movs	r0, #8
    740c:	bl	fe7c <random(unsigned long)>
    7410:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    7414:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    7418:	cmp	r7, #0
    741a:	beq.n	73ea <ceremony_animation()+0x9d2>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    741c:	ldr	r3, [r5, #20]
    741e:	add.w	r8, r8, r8, lsl #1
    7422:	ldr	r2, [r5, #16]
    7424:	add.w	r4, r4, r8, lsl #3
    7428:	subs	r0, r3, r2
    742a:	add.w	r4, r5, r4, lsl #2
    742e:	adds	r0, #2
    7430:	bl	fe7c <random(unsigned long)>
    7434:	ldr	r3, [r5, #16]
    7436:	subs	r3, #1
    7438:	add	r0, r3
    743a:	str	r0, [r4, #28]
    743c:	b.n	73f6 <ceremony_animation()+0x9de>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    743e:	movs	r0, #8
    7440:	mov	r7, r5
    7442:	bl	fe7c <random(unsigned long)>
    7446:	add.w	r3, r5, #96	; 0x60
    744a:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    744c:	movs	r0, #8
    744e:	str	r3, [sp, #8]
    7450:	bl	fe7c <random(unsigned long)>
    7454:	add.w	r3, r0, #8
    7458:	vmov	s15, r6
    745c:	adds	r4, #8
    745e:	str.w	fp, [sp, #12]
    7462:	negs	r3, r3
    7464:	vcvt.f64.s32	d9, s15
    7468:	rsb	sl, r0, #16
    746c:	rsb	r9, r4, #0
    7470:	mov	fp, r3
    7472:	vmov	s15, r9
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    7476:	mov	r6, r7
    7478:	mov	r4, fp
    747a:	mov	r7, r8
    747c:	vcvt.f64.s32	d8, s15
    7480:	mov	r8, r6
    7482:	vmul.f64	d8, d8, d8
    7486:	b.n	7494 <ceremony_animation()+0xa7c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    7488:	ldr	r3, [r5, #0]
    748a:	str	r3, [r6, #28]
    748c:	adds	r4, #1
    748e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    7490:	cmp	r4, sl
    7492:	beq.n	74e2 <ceremony_animation()+0xaca>
      double xx = x-midPoint_y;
    7494:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    7498:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    749c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    74a0:	vfma.f64	d0, d7, d7
    74a4:	vsqrt.f64	d7, d0
    74a8:	vcmp.f64	d7, d7
    74ac:	vmrs	APSR_nzcv, fpscr
    74b0:	bne.w	76b8 <ceremony_animation()+0xca0>
    74b4:	vcmpe.f64	d7, d9
    74b8:	vmrs	APSR_nzcv, fpscr
    74bc:	bhi.n	748c <ceremony_animation()+0xa74>
        if (rand){
    74be:	cmp	r7, #0
    74c0:	beq.n	7488 <ceremony_animation()+0xa70>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    74c2:	ldr	r3, [r5, #20]
    74c4:	adds	r4, #1
    74c6:	ldr	r0, [r5, #16]
    74c8:	adds	r6, #96	; 0x60
    74ca:	subs	r0, r3, r0
    74cc:	adds	r0, #2
    74ce:	bl	fe7c <random(unsigned long)>
    74d2:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    74d4:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    74d6:	add.w	r3, r3, #4294967295
    74da:	add	r0, r3
    74dc:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    74e0:	bne.n	7494 <ceremony_animation()+0xa7c>
    74e2:	mov	r3, r8
    74e4:	mov	r8, r7
    74e6:	add.w	r9, r9, #1
    74ea:	mov	r7, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    74ec:	ldr	r3, [sp, #8]
    74ee:	adds	r7, #4
    74f0:	cmp	r7, r3
    74f2:	bne.n	7472 <ceremony_animation()+0xa5a>
    74f4:	b.n	7586 <ceremony_animation()+0xb6e>
    74f6:	nop
    74f8:	.word	0x20005168
    74fc:	.word	0x20004e0c
    7500:	.word	0x20004f74
    7504:	.word	0x20005000
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    7508:	movs	r0, #8
    750a:	bl	fe7c <random(unsigned long)>
    750e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    7512:	movs	r0, #8
    7514:	bl	fe7c <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    7518:	cmp	r6, #0
    751a:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    751c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    7520:	it	lt
    7522:	addlt	r3, r6, #1
    7524:	cmp	r6, #0
    7526:	mov.w	r3, r3, asr #1
    752a:	it	lt
    752c:	addlt	r6, #1
    752e:	negs	r3, r3
    7530:	asrs	r6, r6, #1
    7532:	adds	r7, r0, r3
    7534:	adds	r2, r0, r6
    7536:	cmp	r7, r2
    7538:	str	r2, [sp, #8]
    753a:	bge.n	758a <ceremony_animation()+0xb72>
    753c:	adds	r3, r4, r3
    753e:	add	r4, r6
    7540:	str.w	fp, [sp, #12]
    7544:	add.w	r6, r3, r3, lsl #1
    7548:	mov	fp, r3
    754a:	add.w	r6, r7, r6, lsl #3
    754e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    7552:	cmp	r4, fp
    7554:	ble.n	757c <ceremony_animation()+0xb64>
    7556:	mov	r3, r4
    7558:	mov	sl, r6
    755a:	mov	r4, r8
    755c:	mov	r9, fp
    755e:	mov	r8, r3
        if (rand){
    7560:	cmp	r4, #0
    7562:	bne.n	761e <ceremony_animation()+0xc06>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    7564:	ldr	r3, [r5, #0]
    7566:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    756a:	add.w	r9, r9, #1
    756e:	add.w	sl, sl, #96	; 0x60
    7572:	cmp	r9, r8
    7574:	bne.n	7560 <ceremony_animation()+0xb48>
    7576:	mov	r3, r8
    7578:	mov	r8, r4
    757a:	mov	r4, r3

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    757c:	adds	r7, #1
    757e:	ldr	r3, [sp, #8]
    7580:	adds	r6, #4
    7582:	cmp	r7, r3
    7584:	bne.n	7552 <ceremony_animation()+0xb3a>
    7586:	ldr.w	fp, [sp, #12]
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    758a:	movs	r1, #5
    758c:	movs	r0, #0
    758e:	ldr.w	r4, [fp, #440]	; 0x1b8
    7592:	bl	fe84 <random(long, long)>
    7596:	add.w	r3, r0, r0, lsl #1
    759a:	ldr	r0, [pc, #296]	; (76c4 <ceremony_animation()+0xcac>)
    759c:	mov	r1, r4
    759e:	add.w	r3, fp, r3, lsl #2
    75a2:	ldr.w	r2, [r3, #380]	; 0x17c
    75a6:	add.w	r3, r3, #372	; 0x174
    75aa:	str	r2, [sp, #0]
    75ac:	ldmia	r3, {r2, r3}
    75ae:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    75b2:	movs	r1, #5
    75b4:	movs	r0, #0
    75b6:	ldr.w	r4, [fp, #444]	; 0x1bc
    75ba:	bl	fe84 <random(long, long)>
    75be:	add.w	r3, r0, r0, lsl #1
    75c2:	mov	r1, r4
    75c4:	ldr	r0, [pc, #252]	; (76c4 <ceremony_animation()+0xcac>)
    75c6:	add.w	r3, fp, r3, lsl #2
    75ca:	ldr.w	r2, [r3, #380]	; 0x17c
    75ce:	add.w	r3, r3, #372	; 0x174
    75d2:	str	r2, [sp, #0]
    75d4:	ldmia	r3, {r2, r3}
    75d6:	bl	1d8 <Screen::initialize_seed(Automaton*, Screen::Seed)>
  renderInterruptCeremony(700);
  } else {
    if(automatonReinitializeCeremony){
        screen_A.regular_screen_animation();
        screen_A.regular_screen_animation();
        automatonReinitializeCeremony = false;
    75da:	movs	r3, #0
    75dc:	ldr	r2, [pc, #232]	; (76c8 <ceremony_animation()+0xcb0>)
    75de:	strb	r3, [r2, #0]
    75e0:	b.w	6a8c <ceremony_animation()+0x74>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    75e4:	movs	r0, #8
    75e6:	bl	fe7c <random(unsigned long)>
    75ea:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    75ee:	movs	r0, #8
    75f0:	bl	fe7c <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    75f4:	cmp	r6, #0
    75f6:	ble.n	758a <ceremony_animation()+0xb72>
    75f8:	add.w	r4, r4, r4, lsl #1
    75fc:	add.w	r3, r0, #15
    7600:	movs	r7, #0
    7602:	add.w	r4, r3, r4, lsl #3
    7606:	add.w	r4, r5, r4, lsl #2
      if (rand){
    760a:	cmp.w	r8, #0
    760e:	bne.n	7636 <ceremony_animation()+0xc1e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    7610:	ldr	r3, [r5, #0]
    7612:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    7614:	adds	r7, #1
    7616:	adds	r4, #4
    7618:	cmp	r7, r6
    761a:	bne.n	760a <ceremony_animation()+0xbf2>
    761c:	b.n	758a <ceremony_animation()+0xb72>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    761e:	ldr	r3, [r5, #20]
    7620:	ldr	r0, [r5, #16]
    7622:	subs	r0, r3, r0
    7624:	adds	r0, #2
    7626:	bl	fe7c <random(unsigned long)>
    762a:	ldr	r3, [r5, #16]
    762c:	subs	r3, #1
    762e:	add	r0, r3
    7630:	str.w	r0, [sl, #28]
    7634:	b.n	756a <ceremony_animation()+0xb52>
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
      if (rand){
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    7636:	ldr	r3, [r5, #20]
    7638:	ldr	r2, [r5, #16]
    763a:	subs	r0, r3, r2
    763c:	adds	r0, #2
    763e:	bl	fe7c <random(unsigned long)>
    7642:	ldr	r3, [r5, #16]
    7644:	subs	r3, #1
    7646:	add	r0, r3
    7648:	str	r0, [r4, #0]
    764a:	b.n	7614 <ceremony_animation()+0xbfc>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    764c:	movw	sl, #4636	; 0x121c
    7650:	add.w	r3, r5, #28
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    7654:	movs	r7, #0
    7656:	add.w	r9, r5, #4640	; 0x1220
    765a:	add	sl, r5
    765c:	str	r3, [sp, #8]
    765e:	str.w	fp, [sp, #12]
    7662:	mov.w	r8, r7, lsl #3
    7666:	ldr	r6, [sp, #8]
    7668:	movs	r4, #0
    766a:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    766e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    7670:	add	r3, r7
    7672:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    7674:	cbnz	r2, 767a <ceremony_animation()+0xc62>
      return _background[x][y];
    } else {
      return !_background[x][y];
    7676:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    767a:	cbnz	r3, 7694 <ceremony_animation()+0xc7c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    767c:	adds	r4, #1
    767e:	adds	r6, #4
    7680:	cmp	r4, #24
    7682:	bne.n	766a <ceremony_animation()+0xc52>
    7684:	ldr	r3, [sp, #8]
    7686:	adds	r7, #24
    7688:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    768a:	cmp.w	r7, #576	; 0x240
    768e:	str	r3, [sp, #8]
    7690:	bne.n	7662 <ceremony_animation()+0xc4a>
    7692:	b.n	7586 <ceremony_animation()+0xb6e>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    7694:	ldr	r2, [r5, #20]
    7696:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    7698:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    769c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    769e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    76a0:	adds	r0, #2
    76a2:	ldr.w	fp, [r3, r4, lsl #3]
    76a6:	bl	fe7c <random(unsigned long)>
    76aa:	ldr	r3, [r5, #16]
    76ac:	rsb	r3, r3, fp
    76b0:	adds	r3, #1
    76b2:	subs	r0, r3, r0
    76b4:	str	r0, [r6, #0]
    76b6:	b.n	767c <ceremony_animation()+0xc64>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    76b8:	bl	10610 <sqrt>
    76bc:	vmov.f64	d7, d0
    76c0:	b.n	74b4 <ceremony_animation()+0xa9c>
    76c2:	nop
    76c4:	.word	0x20004e0c
    76c8:	.word	0x20000970
    76cc:	.word	0x00000000

000076d0 <_GLOBAL__sub_I_bri_level>:

void loop() {
  readMessages();
  regular_animation();
  ceremony_animation();
}
    76d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    76d4:	bl	f100 <eeprom_initialize>
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76d8:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76dc:	ldr	r3, [pc, #972]	; (7aac <_GLOBAL__sub_I_bri_level+0x3dc>)
      _s = s;
    76de:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76e2:	movs	r5, #0
      _s = s;
    76e4:	mov.w	lr, #252	; 0xfc
    76e8:	strb.w	r6, [r3, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76ec:	movs	r6, #152	; 0x98
      _s = s;
    76ee:	mov.w	fp, #251	; 0xfb
      _b = b;
    76f2:	mov.w	ip, #149	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76f6:	str	r6, [r3, #16]
      _s = s;
    76f8:	mov.w	r6, #22
    76fc:	strb.w	r1, [r3, #36]	; 0x24
    7700:	movs	r7, #121	; 0x79
    7702:	strb	r6, [r3, #20]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7704:	movs	r6, #168	; 0xa8
      _s = s;
    7706:	strb.w	r1, [r3, #84]	; 0x54
    770a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    770e:	str	r6, [r3, #24]
      _s = s;
    7710:	mov.w	sl, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7714:	str	r6, [r3, #80]	; 0x50
      _s = s;
    7716:	mvn.w	r6, #38	; 0x26
      _b = b;
    771a:	strb.w	ip, [r3, #21]
    771e:	mov.w	r8, #175	; 0xaf
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7722:	strb	r6, [r3, #28]
      _b = b;
    7724:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7728:	strb.w	lr, [r3, #44]	; 0x2c
    772c:	movs	r0, #216	; 0xd8
      _b = b;
    772e:	strb	r6, [r3, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7730:	movs	r6, #145	; 0x91
      _s = s;
    7732:	strb.w	r1, [r3, #60]	; 0x3c
    7736:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    773a:	str	r6, [r3, #32]
      _s = s;
      _b = b;
    773c:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7740:	str	r5, [r3, #0]
    7742:	add.w	r2, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    7746:	strb.w	r6, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    774a:	movs	r6, #165	; 0xa5
      _s = s;
    774c:	strb	r5, [r3, #4]
      _b = b;
    774e:	mov.w	r9, #254	; 0xfe
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7752:	str	r6, [r3, #40]	; 0x28
      _s = s;
      _b = b;
    7754:	mov.w	r6, #120	; 0x78
    7758:	strb	r5, [r3, #5]
    775a:	strb.w	r6, [r3, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    775e:	movs	r6, #186	; 0xba
    7760:	str	r5, [r3, #8]
    7762:	str	r6, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    7764:	mov.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7768:	strb	r5, [r3, #12]
      _b = b;
    776a:	strb.w	r6, [r3, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    776e:	movs	r6, #159	; 0x9f
      _s = s;
      _b = b;
    7770:	strb	r5, [r3, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7772:	str	r6, [r3, #56]	; 0x38
      _s = s;
      _b = b;
    7774:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7778:	strb.w	fp, [r3, #52]	; 0x34
      _b = b;
    777c:	strb.w	r6, [r3, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7780:	movs	r6, #92	; 0x5c
    7782:	ldr	r4, [pc, #812]	; (7ab0 <_GLOBAL__sub_I_bri_level+0x3e0>)
    7784:	str	r6, [r3, #64]	; 0x40
      _s = s;
      _b = b;
    7786:	mvn.w	r6, #23
    778a:	strb.w	r6, [r3, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    778e:	movs	r6, #106	; 0x6a
    7790:	str	r6, [r3, #72]	; 0x48
      _s = s;
    7792:	mvn.w	r6, #124	; 0x7c
    7796:	strb.w	r6, [r3, #76]	; 0x4c
      _b = b;
    779a:	mvn.w	r6, #21
    779e:	strb.w	r6, [r3, #77]	; 0x4d
    77a2:	mvn.w	r6, #36	; 0x24
    77a6:	strb.w	r6, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77aa:	movs	r6, #168	; 0xa8
      _s = s;
    77ac:	strb.w	r1, [r3, #92]	; 0x5c
    77b0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77b4:	str	r6, [r3, #88]	; 0x58
    77b6:	movs	r6, #165	; 0xa5
      _s = s;
    77b8:	strb.w	r1, [r3, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77bc:	str	r6, [r3, #96]	; 0x60
      _s = s;
      _b = b;
    77be:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77c2:	str	r5, [r3, #104]	; 0x68
      _s = s;
      _b = b;
    77c4:	strb.w	r6, [r3, #93]	; 0x5d
    77c8:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77cc:	strb.w	r5, [r3, #108]	; 0x6c
      _b = b;
    77d0:	strb.w	r6, [r3, #101]	; 0x65
    77d4:	mvn.w	r6, #46	; 0x2e
    77d8:	strb.w	r5, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77dc:	str	r5, [r3, #112]	; 0x70
      _s = s;
    77de:	strb.w	r5, [r3, #116]	; 0x74
      _b = b;
    77e2:	strb.w	r5, [r3, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77e6:	str	r5, [r3, #120]	; 0x78
      _s = s;
    77e8:	strb.w	r5, [r3, #124]	; 0x7c
      _b = b;
    77ec:	strb.w	r5, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77f0:	str.w	r5, [r3, #128]	; 0x80
      _s = s;
    77f4:	strb.w	r5, [r3, #132]	; 0x84
      _b = b;
    77f8:	strb.w	r5, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77fc:	str.w	r5, [r3, #136]	; 0x88
      _s = s;
    7800:	strb.w	r5, [r3, #140]	; 0x8c
      _b = b;
    7804:	strb.w	r5, [r3, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7808:	str.w	r5, [r3, #144]	; 0x90
      _s = s;
    780c:	strb.w	r5, [r3, #148]	; 0x94
      _b = b;
    7810:	strb.w	r5, [r3, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7814:	str.w	r5, [r3, #152]	; 0x98
      _s = s;
    7818:	strb.w	r5, [r3, #156]	; 0x9c
      _b = b;
    781c:	strb.w	r5, [r3, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7820:	str.w	r5, [r3, #160]	; 0xa0
      _s = s;
    7824:	strb.w	r5, [r3, #164]	; 0xa4
      _b = b;
    7828:	strb.w	r5, [r3, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    782c:	str.w	r5, [r3, #168]	; 0xa8
      _s = s;
    7830:	strb.w	r5, [r3, #172]	; 0xac
      _b = b;
    7834:	strb.w	r5, [r3, #173]	; 0xad
    7838:	strb.w	r6, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    783c:	movs	r6, #188	; 0xbc
      _s = s;
    783e:	strb.w	lr, [r3, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7842:	str.w	r6, [r3, #240]	; 0xf0
    7846:	movs	r6, #131	; 0x83
      _s = s;
    7848:	strb.w	r1, [r3, #236]	; 0xec
    784c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7850:	str.w	r6, [r3, #256]	; 0x100
      _s = s;
    7854:	mvn.w	r6, #124	; 0x7c
    7858:	strb.w	lr, [r3, #252]	; 0xfc
    785c:	strb.w	r6, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7860:	movs	r6, #52	; 0x34
    7862:	str.w	r5, [r3, #176]	; 0xb0
    7866:	str.w	r6, [r3, #208]	; 0xd0
      _s = s;
    786a:	mov.w	r6, #100	; 0x64
    786e:	strb.w	r5, [r3, #180]	; 0xb4
    7872:	strb.w	r6, [r3, #212]	; 0xd4
      _b = b;
    7876:	mvn.w	r6, #25
    787a:	strb.w	r5, [r3, #181]	; 0xb5
    787e:	strb.w	r6, [r3, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7882:	movs	r6, #155	; 0x9b
    7884:	str.w	r5, [r3, #184]	; 0xb8
    7888:	str.w	r6, [r3, #216]	; 0xd8
      _s = s;
    788c:	mvn.w	r6, #118	; 0x76
    7890:	strb.w	r5, [r3, #188]	; 0xbc
    7894:	strb.w	r6, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7898:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    789a:	strb.w	r5, [r3, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    789e:	str.w	r6, [r3, #224]	; 0xe0
      _s = s;
      _b = b;
    78a2:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78a6:	str.w	r5, [r3, #192]	; 0xc0
      _s = s;
      _b = b;
    78aa:	strb.w	r6, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78ae:	movs	r6, #184	; 0xb8
      _s = s;
    78b0:	strb.w	r5, [r3, #196]	; 0xc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78b4:	str.w	r6, [r3, #232]	; 0xe8
      _s = s;
      _b = b;
    78b8:	mov.w	r6, #97	; 0x61
    78bc:	strb.w	r5, [r3, #197]	; 0xc5
    78c0:	strb.w	r6, [r3, #237]	; 0xed
    78c4:	mov.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78c8:	str.w	r5, [r3, #200]	; 0xc8
      _s = s;
      _b = b;
    78cc:	strb.w	r6, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78d0:	movs	r6, #161	; 0xa1
      _s = s;
    78d2:	strb.w	r5, [r3, #204]	; 0xcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78d6:	str.w	r6, [r3, #248]	; 0xf8
      _s = s;
      _b = b;
    78da:	mov.w	r6, #85	; 0x55
    78de:	strb.w	r5, [r3, #205]	; 0xcd
    78e2:	strb.w	r6, [r3, #253]	; 0xfd
    78e6:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78ea:	strb.w	fp, [r3, #244]	; 0xf4
      _b = b;
    78ee:	strb.w	r6, [r3, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f2:	movs	r6, #97	; 0x61
      _s = s;
    78f4:	strb.w	r7, [r3, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f8:	str.w	r6, [r3, #272]	; 0x110
      _s = s;
    78fc:	mov.w	r6, #127	; 0x7f
    7900:	strb.w	r1, [r3, #300]	; 0x12c
      _b = b;
    7904:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7908:	strb.w	r6, [r3, #276]	; 0x114
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    790c:	movs	r6, #116	; 0x74
      _s = s;
      _b = b;
    790e:	strb.w	r7, [r3, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7912:	str.w	r6, [r3, #264]	; 0x108
      _s = s;
      _b = b;
    7916:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    791a:	str.w	r5, [r3, #312]	; 0x138
      _s = s;
      _b = b;
    791e:	strb.w	r6, [r3, #269]	; 0x10d
    7922:	strb.w	r6, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7926:	mvn.w	r6, #46	; 0x2e
    792a:	strb.w	r5, [r3, #316]	; 0x13c
    792e:	strb.w	r6, [r3, #284]	; 0x11c
      _b = b;
    7932:	mvn.w	r6, #22
    7936:	strb.w	r5, [r3, #317]	; 0x13d
    793a:	strb.w	r6, [r3, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    793e:	movs	r6, #92	; 0x5c
    7940:	str.w	r5, [r3, #320]	; 0x140
    7944:	str.w	r6, [r3, #288]	; 0x120
      _s = s;
      _b = b;
    7948:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    794c:	strb.w	r5, [r3, #324]	; 0x144
      _b = b;
    7950:	strb.w	r6, [r3, #293]	; 0x125
    7954:	mvn.w	r6, #100	; 0x64
    7958:	strb.w	r5, [r3, #325]	; 0x145
    795c:	strb.w	r6, [r3, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7960:	movs	r6, #127	; 0x7f
    7962:	str.w	r5, [r3, #328]	; 0x148
    7966:	str.w	r6, [r3, #304]	; 0x130
    796a:	movs	r6, #73	; 0x49
      _s = s;
    796c:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7970:	str.w	r6, [r3, #280]	; 0x118
      _s = s;
    7974:	mvn.w	r6, #49	; 0x31
      _b = b;
    7978:	strb.w	r5, [r3, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    797c:	strb.w	r6, [r3, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7980:	movs	r6, #123	; 0x7b
    7982:	str.w	r5, [r3, #336]	; 0x150
    7986:	str.w	r6, [r3, #296]	; 0x128
      _s = s;
    798a:	mvn.w	r6, #11
    798e:	strb.w	r5, [r3, #340]	; 0x154
    7992:	strb.w	r6, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7996:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    7998:	strb.w	r5, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    799c:	str.w	r5, [r3, #344]	; 0x158
      _s = s;
    79a0:	strb.w	r5, [r3, #348]	; 0x15c
      _b = b;
    79a4:	strb.w	r5, [r3, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79a8:	str.w	r6, [r3, #424]	; 0x1a8
      _s = s;
      _b = b;
    79ac:	mov.w	r6, #61	; 0x3d
    79b0:	strb.w	r1, [r3, #405]	; 0x195
    79b4:	strb.w	r6, [r3, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79b8:	movs	r6, #174	; 0xae
      _s = s;
    79ba:	strb.w	r1, [r3, #420]	; 0x1a4
    79be:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79c2:	str.w	r6, [r3, #432]	; 0x1b0
    79c6:	movs	r6, #48	; 0x30
      _s = s;
    79c8:	strb.w	r1, [r3, #428]	; 0x1ac
    79cc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79d0:	str.w	r6, [r3, #400]	; 0x190
      _s = s;
    79d4:	mvn.w	r6, #66	; 0x42
    79d8:	strb.w	lr, [r3, #436]	; 0x1b4
    79dc:	strb.w	r6, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79e0:	movs	r6, #142	; 0x8e
    79e2:	str.w	r5, [r3, #352]	; 0x160
    79e6:	str.w	r6, [r3, #408]	; 0x198
      _s = s;
    79ea:	mov.w	r6, #104	; 0x68
    79ee:	strb.w	r5, [r3, #356]	; 0x164
    79f2:	strb.w	r6, [r3, #412]	; 0x19c
      _b = b;
    79f6:	mvn.w	r6, #28
    79fa:	strb.w	r5, [r3, #357]	; 0x165
    79fe:	strb.w	r6, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a02:	movs	r6, #180	; 0xb4
    7a04:	str.w	r5, [r3, #360]	; 0x168
    7a08:	str.w	r6, [r3, #416]	; 0x1a0
      _s = s;
      _b = b;
    7a0c:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a10:	strb.w	r5, [r3, #364]	; 0x16c
      _b = b;
    7a14:	strb.w	r6, [r3, #421]	; 0x1a5
    7a18:	mov.w	r6, #108	; 0x6c
    7a1c:	strb.w	r5, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a20:	str.w	r5, [r3, #368]	; 0x170
      _s = s;
    7a24:	strb.w	r5, [r3, #372]	; 0x174
      _b = b;
    7a28:	strb.w	r5, [r3, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a2c:	str.w	r5, [r3, #376]	; 0x178
      _s = s;
    7a30:	strb.w	r5, [r3, #380]	; 0x17c
      _b = b;
    7a34:	strb.w	r5, [r3, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a38:	str.w	r5, [r3, #384]	; 0x180
      _s = s;
    7a3c:	strb.w	r5, [r3, #388]	; 0x184
      _b = b;
    7a40:	strb.w	r5, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a44:	str.w	r5, [r3, #392]	; 0x188
      _s = s;
    7a48:	strb.w	r5, [r3, #396]	; 0x18c
      _b = b;
    7a4c:	strb.w	r5, [r3, #397]	; 0x18d
    7a50:	strb.w	r6, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a54:	mvn.w	r6, #54	; 0x36
    7a58:	strb.w	r1, [r3, #444]	; 0x1bc
    7a5c:	strb.w	r6, [r3, #460]	; 0x1cc
      _b = b;
    7a60:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a64:	strb.w	r1, [r3, #452]	; 0x1c4
      _b = b;
    7a68:	strb.w	r6, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a6c:	mvn.w	r6, #45	; 0x2d
    7a70:	strb.w	r1, [r3, #476]	; 0x1dc
    7a74:	mvn.w	r1, #2
    7a78:	strb.w	r6, [r3, #468]	; 0x1d4
      _b = b;
    7a7c:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a80:	strb.w	r1, [r3, #492]	; 0x1ec
    7a84:	mvn.w	r1, #2
      _b = b;
    7a88:	strb.w	r6, [r3, #469]	; 0x1d5
    7a8c:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a90:	strb.w	lr, [r3, #484]	; 0x1e4
      _b = b;
    7a94:	strb.w	r6, [r3, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a98:	movs	r6, #104	; 0x68
      _s = s;
    7a9a:	strb.w	r1, [r3, #500]	; 0x1f4
    7a9e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aa2:	str.w	r6, [r3, #488]	; 0x1e8
      _s = s;
      _b = b;
    7aa6:	mvn.w	r6, #68	; 0x44
    7aaa:	b.n	7ab4 <_GLOBAL__sub_I_bri_level+0x3e4>
    7aac:	.word	0x20009c7c
    7ab0:	.word	0x20003c0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ab4:	str.w	ip, [r3, #512]	; 0x200
      _s = s;
      _b = b;
    7ab8:	strb.w	r6, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7abc:	movs	r6, #115	; 0x73
    7abe:	str.w	r5, [r3, #520]	; 0x208
    7ac2:	str.w	r6, [r3, #496]	; 0x1f0
      _s = s;
    7ac6:	mvn.w	r6, #67	; 0x43
    7aca:	strb.w	r5, [r3, #524]	; 0x20c
    7ace:	strb.w	r6, [r3, #516]	; 0x204
      _b = b;
    7ad2:	mov.w	r6, #54	; 0x36
    7ad6:	strb.w	r6, [r3, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ada:	movs	r6, #167	; 0xa7
    7adc:	str.w	r6, [r3, #440]	; 0x1b8
      _s = s;
      _b = b;
    7ae0:	mov.w	r6, #102	; 0x66
    7ae4:	strb.w	r6, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ae8:	movs	r6, #162	; 0xa2
    7aea:	str.w	r6, [r3, #448]	; 0x1c0
    7aee:	movs	r6, #74	; 0x4a
    7af0:	str.w	r6, [r3, #456]	; 0x1c8
    7af4:	movs	r6, #75	; 0x4b
    7af6:	str.w	r6, [r3, #464]	; 0x1d0
    7afa:	movs	r6, #128	; 0x80
    7afc:	str.w	r6, [r3, #472]	; 0x1d8
    7b00:	movs	r6, #124	; 0x7c
    7b02:	str.w	r6, [r3, #480]	; 0x1e0
      _s = s;
      _b = b;
    7b06:	mov.w	r6, #112	; 0x70
    7b0a:	strb.w	r6, [r3, #485]	; 0x1e5
    7b0e:	mvn.w	r6, #65	; 0x41
    7b12:	strb.w	r6, [r3, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b16:	movs	r6, #66	; 0x42
    7b18:	str.w	r6, [r3, #504]	; 0x1f8
      _s = s;
    7b1c:	mvn.w	r6, #7
    7b20:	strb.w	r6, [r3, #508]	; 0x1fc
      _b = b;
    7b24:	mvn.w	r6, #33	; 0x21
    7b28:	strb.w	r6, [r3, #509]	; 0x1fd
    7b2c:	mvn.w	r6, #121	; 0x79
    7b30:	strb.w	r6, [r3, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b34:	movs	r6, #47	; 0x2f
      _s = s;
      _b = b;
    7b36:	strb.w	r5, [r3, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b3a:	str.w	r6, [r3, #592]	; 0x250
    7b3e:	movs	r6, #74	; 0x4a
      _s = s;
    7b40:	strb.w	r1, [r3, #612]	; 0x264
    7b44:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b48:	str.w	r6, [r3, #600]	; 0x258
      _s = s;
      _b = b;
    7b4c:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b50:	str.w	r5, [r3, #528]	; 0x210
      _s = s;
      _b = b;
    7b54:	strb.w	r6, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b58:	movs	r6, #171	; 0xab
      _s = s;
    7b5a:	strb.w	r5, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b5e:	str.w	r6, [r3, #608]	; 0x260
      _s = s;
    7b62:	mov.w	r6, #117	; 0x75
      _b = b;
    7b66:	strb.w	r5, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b6a:	strb.w	r6, [r3, #604]	; 0x25c
      _b = b;
    7b6e:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b72:	str.w	r5, [r3, #536]	; 0x218
      _s = s;
      _b = b;
    7b76:	strb.w	r6, [r3, #597]	; 0x255
    7b7a:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b7e:	strb.w	r5, [r3, #540]	; 0x21c
      _b = b;
    7b82:	strb.w	r5, [r3, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b86:	str.w	r5, [r3, #544]	; 0x220
      _s = s;
    7b8a:	strb.w	r5, [r3, #548]	; 0x224
      _b = b;
    7b8e:	strb.w	r5, [r3, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b92:	str.w	r5, [r3, #552]	; 0x228
      _s = s;
    7b96:	strb.w	r5, [r3, #556]	; 0x22c
      _b = b;
    7b9a:	strb.w	r5, [r3, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b9e:	str.w	r5, [r3, #560]	; 0x230
      _s = s;
    7ba2:	strb.w	r5, [r3, #564]	; 0x234
      _b = b;
    7ba6:	strb.w	r5, [r3, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7baa:	str.w	r5, [r3, #568]	; 0x238
      _s = s;
    7bae:	strb.w	r5, [r3, #572]	; 0x23c
      _b = b;
    7bb2:	strb.w	r5, [r3, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bb6:	str.w	r5, [r3, #576]	; 0x240
      _s = s;
    7bba:	strb.w	r5, [r3, #580]	; 0x244
      _b = b;
    7bbe:	strb.w	r5, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bc2:	str.w	r5, [r3, #584]	; 0x248
      _s = s;
    7bc6:	strb.w	r5, [r3, #588]	; 0x24c
      _b = b;
    7bca:	strb.w	r5, [r3, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bce:	strb.w	fp, [r3, #596]	; 0x254
      _b = b;
    7bd2:	strb.w	r6, [r3, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bd6:	movs	r6, #183	; 0xb7
      _s = s;
    7bd8:	strb.w	r1, [r3, #620]	; 0x26c
    7bdc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7be0:	str.w	r6, [r3, #616]	; 0x268
    7be4:	movs	r6, #172	; 0xac
      _s = s;
    7be6:	strb.w	r1, [r3, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bea:	str.w	r6, [r3, #624]	; 0x270
      _s = s;
      _b = b;
    7bee:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bf2:	strb.w	r1, [r3, #644]	; 0x284
    7bf6:	mov.w	r1, #4294967295
      _b = b;
    7bfa:	strb.w	r6, [r3, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bfe:	movs	r6, #144	; 0x90
      _s = s;
    7c00:	strb.w	r1, [r3, #652]	; 0x28c
    7c04:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c08:	str.w	r6, [r3, #648]	; 0x288
    7c0c:	movs	r6, #142	; 0x8e
      _s = s;
    7c0e:	strb.w	r1, [r3, #668]	; 0x29c
    7c12:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c16:	str.w	r6, [r3, #664]	; 0x298
      _s = s;
      _b = b;
    7c1a:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c1e:	strb.w	r1, [r3, #676]	; 0x2a4
    7c22:	mvn.w	r1, #2
      _b = b;
    7c26:	strb.w	r6, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c2a:	movs	r6, #85	; 0x55
      _s = s;
    7c2c:	strb.w	r1, [r3, #684]	; 0x2ac
    7c30:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c34:	str.w	r6, [r3, #680]	; 0x2a8
      _s = s;
      _b = b;
    7c38:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c3c:	strb.w	r1, [r3, #692]	; 0x2b4
    7c40:	mvn.w	r1, #2
      _b = b;
    7c44:	strb.w	r6, [r3, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c48:	movs	r6, #120	; 0x78
      _s = s;
    7c4a:	strb.w	r1, [r3, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c4e:	str.w	r6, [r3, #688]	; 0x2b0
      _s = s;
      _b = b;
    7c52:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c56:	strb.w	lr, [r3, #636]	; 0x27c
      _b = b;
    7c5a:	strb.w	r6, [r3, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c5e:	movs	r6, #66	; 0x42
      _s = s;
      _b = b;
    7c60:	strb.w	r7, [r3, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c64:	str.w	r6, [r3, #696]	; 0x2b8
      _s = s;
      _b = b;
    7c68:	mov.w	r6, #86	; 0x56
    7c6c:	strb.w	r7, [r3, #653]	; 0x28d
    7c70:	strb.w	r6, [r3, #661]	; 0x295
    7c74:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c78:	strb.w	lr, [r3, #660]	; 0x294
      _b = b;
    7c7c:	strb.w	r6, [r3, #621]	; 0x26d
    7c80:	mov.w	r6, #94	; 0x5e
    7c84:	strb.w	r6, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c88:	movs	r6, #160	; 0xa0
    7c8a:	str.w	r6, [r3, #632]	; 0x278
    7c8e:	movs	r6, #148	; 0x94
    7c90:	str.w	r6, [r3, #640]	; 0x280
    7c94:	str.w	r6, [r3, #656]	; 0x290
      _s = s;
      _b = b;
    7c98:	mov.w	r6, #103	; 0x67
    7c9c:	strb.w	r6, [r3, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ca0:	movs	r6, #122	; 0x7a
    7ca2:	mov	r1, r6
    7ca4:	str.w	r6, [r3, #672]	; 0x2a0
      _s = s;
      _b = b;
    7ca8:	mvn.w	r6, #37	; 0x25
    7cac:	strb.w	r6, [r3, #701]	; 0x2bd
    7cb0:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cb4:	str.w	r1, [r3, #704]	; 0x2c0
      _s = s;
    7cb8:	mvn.w	r1, #2
      _b = b;
    7cbc:	strb.w	r6, [r3, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cc0:	movs	r6, #112	; 0x70
    7cc2:	str.w	r5, [r3, #728]	; 0x2d8
    7cc6:	str.w	r6, [r3, #712]	; 0x2c8
      _s = s;
      _b = b;
    7cca:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cce:	strb.w	r5, [r3, #732]	; 0x2dc
      _b = b;
    7cd2:	strb.w	r6, [r3, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cd6:	mov.w	r6, #110	; 0x6e
      _b = b;
    7cda:	strb.w	r5, [r3, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cde:	strb.w	r6, [r3, #708]	; 0x2c4
    7ce2:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce6:	str.w	r5, [r3, #736]	; 0x2e0
      _s = s;
    7cea:	strb.w	r6, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cee:	movs	r6, #56	; 0x38
      _s = s;
    7cf0:	strb.w	r5, [r3, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cf4:	str.w	r6, [r3, #720]	; 0x2d0
      _s = s;
    7cf8:	mvn.w	r6, #26
      _b = b;
    7cfc:	strb.w	r5, [r3, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d00:	strb.w	r6, [r3, #724]	; 0x2d4
      _b = b;
    7d04:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d08:	str.w	r5, [r3, #744]	; 0x2e8
      _s = s;
      _b = b;
    7d0c:	strb.w	r6, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d10:	movs	r6, #40	; 0x28
      _s = s;
    7d12:	strb.w	r5, [r3, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d16:	str.w	r6, [r3, #784]	; 0x310
      _s = s;
    7d1a:	mvn.w	r6, #16
      _b = b;
    7d1e:	strb.w	r5, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d22:	strb.w	r6, [r3, #788]	; 0x314
      _b = b;
    7d26:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d2a:	str.w	r5, [r3, #752]	; 0x2f0
      _s = s;
    7d2e:	strb.w	r5, [r3, #756]	; 0x2f4
      _b = b;
    7d32:	strb.w	r5, [r3, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d36:	str.w	r5, [r3, #760]	; 0x2f8
      _s = s;
    7d3a:	strb.w	r5, [r3, #764]	; 0x2fc
      _b = b;
    7d3e:	strb.w	r5, [r3, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d42:	str.w	r5, [r3, #768]	; 0x300
      _s = s;
    7d46:	strb.w	r5, [r3, #772]	; 0x304
      _b = b;
    7d4a:	strb.w	r5, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d4e:	str.w	r5, [r3, #776]	; 0x308
      _s = s;
    7d52:	strb.w	r5, [r3, #780]	; 0x30c
      _b = b;
    7d56:	strb.w	r5, [r3, #781]	; 0x30d
    7d5a:	strb.w	r6, [r3, #789]	; 0x315
    7d5e:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d62:	strb.w	r1, [r3, #836]	; 0x344
    7d66:	mov.w	r1, #4294967295
      _b = b;
    7d6a:	strb.w	r6, [r3, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d6e:	movs	r6, #174	; 0xae
      _s = s;
    7d70:	strb.w	r1, [r3, #844]	; 0x34c
    7d74:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d78:	str.w	r6, [r3, #808]	; 0x328
    7d7c:	str.w	r6, [r3, #816]	; 0x330
    7d80:	movs	r6, #148	; 0x94
      _s = s;
    7d82:	strb.w	r1, [r3, #852]	; 0x354
    7d86:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d8a:	str.w	r6, [r3, #832]	; 0x340
      _s = s;
      _b = b;
    7d8e:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d92:	strb.w	r1, [r3, #860]	; 0x35c
    7d96:	mov.w	r1, #4294967295
      _b = b;
    7d9a:	strb.w	r6, [r3, #837]	; 0x345
    7d9e:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7da2:	strb.w	r1, [r3, #868]	; 0x364
    7da6:	mvn.w	r1, #2
      _b = b;
    7daa:	strb.w	r6, [r3, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dae:	movs	r6, #144	; 0x90
      _s = s;
    7db0:	strb.w	lr, [r3, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7db4:	str.w	r6, [r3, #848]	; 0x350
      _s = s;
      _b = b;
    7db8:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dbc:	strb.w	lr, [r3, #828]	; 0x33c
      _b = b;
    7dc0:	strb.w	r6, [r3, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dc4:	movs	r6, #139	; 0x8b
      _s = s;
      _b = b;
    7dc6:	strb.w	r7, [r3, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dca:	str.w	r6, [r3, #856]	; 0x358
      _s = s;
      _b = b;
    7dce:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dd2:	strb.w	r1, [r3, #876]	; 0x36c
    7dd6:	mov.w	r1, #4294967295
      _b = b;
    7dda:	strb.w	r6, [r3, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dde:	movs	r6, #122	; 0x7a
    7de0:	str.w	r6, [r3, #864]	; 0x360
      _s = s;
      _b = b;
    7de4:	mvn.w	r6, #121	; 0x79
    7de8:	strb.w	r6, [r3, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dec:	movs	r6, #85	; 0x55
    7dee:	str.w	r6, [r3, #872]	; 0x368
    7df2:	movs	r6, #37	; 0x25
    7df4:	str.w	r6, [r3, #792]	; 0x318
      _s = s;
    7df8:	mvn.w	r6, #5
    7dfc:	strb.w	r6, [r3, #796]	; 0x31c
    7e00:	strb.w	r6, [r3, #820]	; 0x334
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e04:	movs	r6, #136	; 0x88
    7e06:	str.w	r6, [r3, #800]	; 0x320
      _s = s;
    7e0a:	mov.w	r6, #109	; 0x6d
    7e0e:	strb.w	r6, [r3, #804]	; 0x324
      _b = b;
    7e12:	mvn.w	r6, #24
    7e16:	strb.w	r6, [r3, #805]	; 0x325
    7e1a:	mov.w	r6, #88	; 0x58
    7e1e:	strb.w	r6, [r3, #813]	; 0x32d
    7e22:	mov.w	r6, #62	; 0x3e
    7e26:	strb.w	r6, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e2a:	movs	r6, #158	; 0x9e
    7e2c:	str.w	r6, [r3, #824]	; 0x338
    7e30:	movs	r6, #141	; 0x8d
    7e32:	str.w	r6, [r3, #840]	; 0x348
      _s = s;
      _b = b;
    7e36:	mvn.w	r6, #57	; 0x39
    7e3a:	strb.w	r6, [r3, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e3e:	movs	r6, #123	; 0x7b
      _s = s;
    7e40:	strb.w	r1, [r3, #884]	; 0x374
    7e44:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e48:	str.w	r6, [r3, #880]	; 0x370
    7e4c:	movs	r6, #97	; 0x61
      _s = s;
      _b = b;
    7e4e:	strb.w	ip, [r3, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e52:	str.w	r6, [r3, #888]	; 0x378
      _s = s;
    7e56:	mvn.w	r6, #5
    7e5a:	strb.w	r1, [r3, #924]	; 0x39c
    7e5e:	mov.w	r1, #4294967295
    7e62:	strb.w	r6, [r3, #892]	; 0x37c
      _b = b;
    7e66:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e6a:	str.w	r5, [r3, #928]	; 0x3a0
      _s = s;
      _b = b;
    7e6e:	strb.w	r6, [r3, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e72:	movs	r6, #71	; 0x47
      _s = s;
    7e74:	strb.w	r5, [r3, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e78:	str.w	r6, [r3, #896]	; 0x380
      _s = s;
      _b = b;
    7e7c:	mvn.w	r6, #14
    7e80:	strb.w	r5, [r3, #933]	; 0x3a5
    7e84:	strb.w	r6, [r3, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e88:	movs	r6, #120	; 0x78
    7e8a:	str.w	r5, [r3, #936]	; 0x3a8
    7e8e:	str.w	r6, [r3, #904]	; 0x388
      _s = s;
    7e92:	mov.w	r6, #99	; 0x63
    7e96:	strb.w	r5, [r3, #940]	; 0x3ac
    7e9a:	strb.w	r6, [r3, #908]	; 0x38c
      _b = b;
    7e9e:	mvn.w	r6, #11
    7ea2:	strb.w	r5, [r3, #941]	; 0x3ad
    7ea6:	strb.w	r6, [r3, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eaa:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eae:	str.w	r5, [r3, #944]	; 0x3b0
      _s = s;
    7eb2:	strb.w	r6, [r3, #916]	; 0x394
      _b = b;
    7eb6:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eba:	strb.w	r5, [r3, #948]	; 0x3b4
      _b = b;
    7ebe:	strb.w	r6, [r3, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ec2:	movs	r6, #155	; 0x9b
      _s = s;
      _b = b;
    7ec4:	strb.w	r5, [r3, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ec8:	str.w	r6, [r3, #920]	; 0x398
      _s = s;
      _b = b;
    7ecc:	mov.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ed0:	str.w	r5, [r3, #952]	; 0x3b8
      _s = s;
      _b = b;
    7ed4:	strb.w	r6, [r3, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ed8:	mvn.w	r6, #102	; 0x66
    7edc:	strb.w	r5, [r3, #956]	; 0x3bc
    7ee0:	strb.w	r6, [r3, #900]	; 0x384
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ee4:	movs	r6, #90	; 0x5a
      _s = s;
      _b = b;
    7ee6:	strb.w	r5, [r3, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eea:	str.w	r6, [r3, #912]	; 0x390
      _s = s;
    7eee:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ef2:	str.w	r5, [r3, #960]	; 0x3c0
      _s = s;
    7ef6:	strb.w	r5, [r3, #964]	; 0x3c4
      _b = b;
    7efa:	strb.w	r5, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7efe:	strb.w	r6, [r3, #980]	; 0x3d4
      _b = b;
    7f02:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f06:	strb.w	r1, [r3, #1004]	; 0x3ec
      _b = b;
    7f0a:	strb.w	r6, [r3, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f0e:	movs	r6, #40	; 0x28
      _s = s;
    7f10:	strb.w	r1, [r3, #1012]	; 0x3f4
    7f14:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f18:	str.w	r6, [r3, #984]	; 0x3d8
      _s = s;
    7f1c:	mvn.w	r6, #45	; 0x2d
    7f20:	strb.w	lr, [r3, #1020]	; 0x3fc
    7f24:	strb.w	r6, [r3, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f28:	movs	r6, #75	; 0x4b
    7f2a:	str.w	r5, [r3, #968]	; 0x3c8
    7f2e:	str.w	r6, [r3, #992]	; 0x3e0
      _s = s;
    7f32:	mov.w	r6, #92	; 0x5c
    7f36:	strb.w	r5, [r3, #972]	; 0x3cc
    7f3a:	strb.w	r6, [r3, #996]	; 0x3e4
      _b = b;
    7f3e:	mvn.w	r6, #25
    7f42:	strb.w	r5, [r3, #973]	; 0x3cd
    7f46:	strb.w	r6, [r3, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f4a:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    7f4c:	strb.w	fp, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f50:	str.w	r6, [r3, #1000]	; 0x3e8
      _s = s;
      _b = b;
    7f54:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f58:	strb.w	sl, [r3, #1052]	; 0x41c
      _b = b;
    7f5c:	strb.w	r6, [r3, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f60:	movs	r6, #164	; 0xa4
    7f62:	str.w	r6, [r3, #1016]	; 0x3f8
      _s = s;
      _b = b;
    7f66:	mov.w	r6, #92	; 0x5c
    7f6a:	strb.w	r6, [r3, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f6e:	movs	r6, #127	; 0x7f
    7f70:	str.w	r6, [r3, #1024]	; 0x400
      _s = s;
      _b = b;
    7f74:	mvn.w	r6, #77	; 0x4d
    7f78:	strb.w	r6, [r3, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f7c:	movs	r6, #94	; 0x5e
    7f7e:	str.w	r6, [r3, #1032]	; 0x408
      _s = s;
    7f82:	mvn.w	r6, #114	; 0x72
    7f86:	strb.w	r6, [r3, #1036]	; 0x40c
      _b = b;
    7f8a:	mvn.w	r6, #26
    7f8e:	strb.w	r6, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f92:	movs	r6, #128	; 0x80
    7f94:	str.w	r6, [r3, #1048]	; 0x418
      _s = s;
      _b = b;
    7f98:	mov.w	r6, #69	; 0x45
    7f9c:	strb.w	r6, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fa0:	movs	r6, #42	; 0x2a
    7fa2:	str.w	r6, [r3, #976]	; 0x3d0
    7fa6:	movs	r6, #173	; 0xad
    7fa8:	str.w	r6, [r3, #1008]	; 0x3f0
      _s = s;
    7fac:	mvn.w	r6, #125	; 0x7d
    7fb0:	strb.w	r6, [r3, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fb4:	movs	r6, #93	; 0x5d
    7fb6:	str.w	r6, [r3, #1040]	; 0x410
      _s = s;
    7fba:	mvn.w	r6, #85	; 0x55
    7fbe:	strb.w	r6, [r3, #1044]	; 0x414
      _b = b;
    7fc2:	mvn.w	r6, #19
    7fc6:	strb.w	r6, [r3, #1045]	; 0x415
    7fca:	mvn.w	r6, #101	; 0x65
    7fce:	strb.w	r6, [r3, #1053]	; 0x41d
    7fd2:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fd6:	strb.w	r1, [r3, #1068]	; 0x42c
    7fda:	mvn.w	r1, #2
      _b = b;
    7fde:	strb.w	r6, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fe2:	movs	r6, #90	; 0x5a
      _s = s;
    7fe4:	strb.w	r1, [r3, #1084]	; 0x43c
    7fe8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fec:	str.w	r6, [r3, #1064]	; 0x428
      _s = s;
      _b = b;
    7ff0:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ff4:	strb.w	r1, [r3, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ff8:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    7ffa:	strb.w	r6, [r3, #1069]	; 0x42d
    7ffe:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8002:	str.w	r7, [r3, #1056]	; 0x420
      _s = s;
      _b = b;
    8006:	strb.w	r6, [r3, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    800a:	movs	r6, #128	; 0x80
      _s = s;
    800c:	strb.w	lr, [r3, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8010:	str.w	r6, [r3, #1080]	; 0x438
    8014:	movs	r6, #123	; 0x7b
      _s = s;
    8016:	strb.w	lr, [r3, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    801a:	str.w	r6, [r3, #1088]	; 0x440
      _s = s;
      _b = b;
    801e:	mvn.w	r6, #50	; 0x32
    8022:	strb.w	r8, [r3, #1085]	; 0x43d
    8026:	strb.w	r6, [r3, #1093]	; 0x445
    802a:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    802e:	str.w	r1, [r3, #1096]	; 0x448
      _s = s;
    8032:	mov.w	r1, #4294967295
      _b = b;
    8036:	strb.w	r6, [r3, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    803a:	movs	r6, #159	; 0x9f
    803c:	str.w	r5, [r3, #1128]	; 0x468
    8040:	str.w	r6, [r3, #1104]	; 0x450
      _s = s;
    8044:	mvn.w	r6, #95	; 0x5f
    8048:	strb.w	r5, [r3, #1132]	; 0x46c
    804c:	strb.w	r6, [r3, #1108]	; 0x454
      _b = b;
    8050:	mvn.w	r6, #69	; 0x45
    8054:	strb.w	r5, [r3, #1133]	; 0x46d
    8058:	strb.w	r6, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    805c:	movs	r6, #145	; 0x91
    805e:	str.w	r5, [r3, #1136]	; 0x470
    8062:	str.w	r6, [r3, #1112]	; 0x458
      _s = s;
      _b = b;
    8066:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    806a:	strb.w	r5, [r3, #1140]	; 0x474
      _b = b;
    806e:	strb.w	r6, [r3, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8072:	mov.w	r6, #5
    8076:	strb.w	r6, [r3, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    807a:	movs	r6, #65	; 0x41
    807c:	str.w	r6, [r3, #1072]	; 0x430
      _s = s;
    8080:	mvn.w	r6, #76	; 0x4c
    8084:	strb.w	r6, [r3, #1092]	; 0x444
    8088:	mov.w	r6, #68	; 0x44
    808c:	strb.w	r6, [r3, #1116]	; 0x45c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8090:	movs	r6, #150	; 0x96
    8092:	str.w	r6, [r3, #1120]	; 0x460
      _s = s;
      _b = b;
    8096:	mov.w	r6, #96	; 0x60
    809a:	strb.w	r6, [r3, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    809e:	movs	r6, #40	; 0x28
      _s = s;
      _b = b;
    80a0:	strb.w	r5, [r3, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80a4:	str.w	r6, [r3, #1168]	; 0x490
      _s = s;
    80a8:	mvn.w	r6, #104	; 0x68
    80ac:	strb.w	r1, [r3, #1196]	; 0x4ac
    80b0:	strb.w	r6, [r3, #1172]	; 0x494
      _b = b;
    80b4:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80b8:	strb.w	lr, [r3, #1204]	; 0x4b4
      _b = b;
    80bc:	strb.w	r6, [r3, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80c0:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80c4:	str.w	r5, [r3, #1144]	; 0x478
      _s = s;
    80c8:	strb.w	r6, [r3, #1180]	; 0x49c
      _b = b;
    80cc:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80d0:	strb.w	r5, [r3, #1148]	; 0x47c
      _b = b;
    80d4:	strb.w	r6, [r3, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80d8:	movs	r6, #100	; 0x64
      _s = s;
      _b = b;
    80da:	strb.w	r5, [r3, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80de:	str.w	r6, [r3, #1184]	; 0x4a0
      _s = s;
      _b = b;
    80e2:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80e6:	str.w	r5, [r3, #1152]	; 0x480
      _s = s;
      _b = b;
    80ea:	strb.w	r6, [r3, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80ee:	movs	r6, #168	; 0xa8
      _s = s;
    80f0:	strb.w	r5, [r3, #1156]	; 0x484
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f4:	str.w	r6, [r3, #1192]	; 0x4a8
      _s = s;
      _b = b;
    80f8:	mov.w	r6, #123	; 0x7b
    80fc:	strb.w	r5, [r3, #1157]	; 0x485
    8100:	strb.w	r6, [r3, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8104:	movs	r6, #170	; 0xaa
    8106:	str.w	r5, [r3, #1160]	; 0x488
    810a:	str.w	r6, [r3, #1200]	; 0x4b0
      _s = s;
      _b = b;
    810e:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8112:	strb.w	r5, [r3, #1164]	; 0x48c
      _b = b;
    8116:	strb.w	r6, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    811a:	movs	r6, #151	; 0x97
      _s = s;
      _b = b;
    811c:	strb.w	r5, [r3, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8120:	mov	r1, r6
    8122:	str.w	r6, [r3, #1208]	; 0x4b8
      _s = s;
    8126:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    812a:	str.w	r1, [r3, #1224]	; 0x4c8
      _s = s;
    812e:	mov.w	r1, #4294967295
    8132:	strb.w	r6, [r3, #1212]	; 0x4bc
      _b = b;
    8136:	mvn.w	r6, #117	; 0x75
    813a:	strb.w	r6, [r3, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    813e:	mov.w	r6, #106	; 0x6a
    8142:	strb.w	r6, [r3, #1220]	; 0x4c4
      _b = b;
    8146:	mvn.w	r6, #17
    814a:	strb.w	r6, [r3, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    814e:	mov.w	r6, #101	; 0x65
    8152:	strb.w	r6, [r3, #1228]	; 0x4cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8156:	movs	r6, #38	; 0x26
    8158:	str.w	r6, [r3, #1176]	; 0x498
      _s = s;
    815c:	mov.w	r6, #59	; 0x3b
    8160:	strb.w	r6, [r3, #1188]	; 0x4a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8164:	movs	r6, #135	; 0x87
    8166:	str.w	r6, [r3, #1216]	; 0x4c0
      _s = s;
      _b = b;
    816a:	mvn.w	r6, #18
    816e:	strb.w	r6, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8172:	movs	r6, #155	; 0x9b
      _s = s;
    8174:	strb.w	r1, [r3, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8178:	str.w	r6, [r3, #1232]	; 0x4d0
      _s = s;
    817c:	mvn.w	r6, #91	; 0x5b
    8180:	strb.w	r1, [r3, #1260]	; 0x4ec
    8184:	mov.w	r1, #4294967295
    8188:	strb.w	r6, [r3, #1236]	; 0x4d4
      _b = b;
    818c:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8190:	strb.w	r1, [r3, #1284]	; 0x504
    8194:	mvn.w	r1, #2
      _b = b;
    8198:	strb.w	r6, [r3, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    819c:	mvn.w	r6, #40	; 0x28
    81a0:	strb.w	r1, [r3, #1292]	; 0x50c
    81a4:	mov.w	r1, #4294967295
    81a8:	strb.w	r6, [r3, #1244]	; 0x4dc
      _b = b;
    81ac:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81b0:	strb.w	r1, [r3, #1300]	; 0x514
      _b = b;
    81b4:	strb.w	r6, [r3, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81b8:	movs	r6, #127	; 0x7f
    81ba:	str.w	r7, [r3, #1256]	; 0x4e8
    81be:	str.w	r6, [r3, #1248]	; 0x4e0
      _s = s;
      _b = b;
    81c2:	mvn.w	r6, #108	; 0x6c
    81c6:	strb.w	r6, [r3, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81ca:	movs	r6, #100	; 0x64
    81cc:	str.w	r6, [r3, #1264]	; 0x4f0
      _s = s;
    81d0:	mvn.w	r6, #6
    81d4:	strb.w	r6, [r3, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81d8:	movs	r6, #96	; 0x60
    81da:	str.w	r6, [r3, #1272]	; 0x4f8
      _s = s;
    81de:	mvn.w	r6, #26
    81e2:	strb.w	r6, [r3, #1276]	; 0x4fc
      _b = b;
    81e6:	mvn.w	r6, #41	; 0x29
    81ea:	strb.w	r6, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81ee:	movs	r6, #135	; 0x87
    81f0:	str.w	r6, [r3, #1280]	; 0x500
      _s = s;
      _b = b;
    81f4:	mvn.w	r6, #75	; 0x4b
    81f8:	strb.w	r6, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81fc:	movs	r6, #139	; 0x8b
    81fe:	str.w	r6, [r3, #1288]	; 0x508
    8202:	movs	r6, #152	; 0x98
    8204:	str.w	r6, [r3, #1296]	; 0x510
      _s = s;
      _b = b;
    8208:	mvn.w	r6, #88	; 0x58
    820c:	strb.w	r6, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8210:	movs	r6, #165	; 0xa5
    8212:	mov	r1, r6
    8214:	str.w	r6, [r3, #1304]	; 0x518
      _s = s;
    8218:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    821c:	str.w	r1, [r3, #1312]	; 0x520
      _s = s;
      _b = b;
    8220:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8224:	strb.w	r6, [r3, #1308]	; 0x51c
      _b = b;
    8228:	mvn.w	r6, #55	; 0x37
    822c:	strb.w	r6, [r3, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8230:	mov.w	r6, #83	; 0x53
    8234:	strb.w	r6, [r3, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8238:	movs	r6, #143	; 0x8f
    823a:	str.w	r6, [r3, #1240]	; 0x4d8
      _s = s;
      _b = b;
    823e:	mov.w	r6, #91	; 0x5b
    8242:	strb.w	r6, [r3, #1253]	; 0x4e5
    8246:	mvn.w	r6, #53	; 0x35
    824a:	strb.w	r6, [r3, #1269]	; 0x4f5
    824e:	strb.w	r6, [r3, #1293]	; 0x50d
    8252:	mvn.w	r6, #77	; 0x4d
    8256:	strb.w	r6, [r3, #1317]	; 0x525
    825a:	mov.w	r6, #71	; 0x47
    825e:	strb.w	r1, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8262:	mov.w	r1, #4294967295
      _b = b;
    8266:	strb.w	r6, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    826a:	mvn.w	r6, #94	; 0x5e
    826e:	strb.w	r1, [r3, #1396]	; 0x574
    8272:	mvn.w	r1, #2
    8276:	strb.w	r6, [r3, #1372]	; 0x55c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    827a:	movs	r6, #27
      _s = s;
    827c:	strb.w	r1, [r3, #1404]	; 0x57c
    8280:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8284:	str.w	r6, [r3, #1376]	; 0x560
      _s = s;
    8288:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    828c:	str.w	r5, [r3, #1320]	; 0x528
      _s = s;
    8290:	strb.w	r6, [r3, #1380]	; 0x564
      _b = b;
    8294:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8298:	strb.w	r5, [r3, #1324]	; 0x52c
      _b = b;
    829c:	strb.w	r6, [r3, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82a0:	movs	r6, #155	; 0x9b
    82a2:	str.w	r5, [r3, #1328]	; 0x530
    82a6:	str.w	r6, [r3, #1384]	; 0x568
      _s = s;
      _b = b;
    82aa:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82ae:	strb.w	r5, [r3, #1332]	; 0x534
      _b = b;
    82b2:	strb.w	r6, [r3, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82b6:	movs	r6, #170	; 0xaa
      _s = s;
      _b = b;
    82b8:	strb.w	r5, [r3, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82bc:	str.w	r6, [r3, #1392]	; 0x570
      _s = s;
      _b = b;
    82c0:	mov.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82c4:	str.w	r5, [r3, #1336]	; 0x538
      _s = s;
      _b = b;
    82c8:	strb.w	r6, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82cc:	movs	r6, #168	; 0xa8
      _s = s;
    82ce:	strb.w	r5, [r3, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82d2:	str.w	r6, [r3, #1400]	; 0x578
    82d6:	movs	r6, #41	; 0x29
      _s = s;
      _b = b;
    82d8:	strb.w	r5, [r3, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82dc:	str.w	r6, [r3, #1368]	; 0x558
      _s = s;
    82e0:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82e4:	str.w	r5, [r3, #1344]	; 0x540
      _s = s;
    82e8:	strb.w	r6, [r3, #1388]	; 0x56c
      _b = b;
    82ec:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82f0:	strb.w	r5, [r3, #1348]	; 0x544
      _b = b;
    82f4:	strb.w	r5, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82f8:	str.w	r5, [r3, #1352]	; 0x548
      _s = s;
    82fc:	strb.w	r5, [r3, #1356]	; 0x54c
      _b = b;
    8300:	strb.w	r5, [r3, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8304:	str.w	r5, [r3, #1360]	; 0x550
      _s = s;
    8308:	strb.w	r5, [r3, #1364]	; 0x554
      _b = b;
    830c:	strb.w	r5, [r3, #1365]	; 0x555
    8310:	strb.w	r6, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8314:	movs	r6, #164	; 0xa4
      _s = s;
    8316:	strb.w	r1, [r3, #1412]	; 0x584
    831a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    831e:	str.w	r6, [r3, #1408]	; 0x580
      _s = s;
      _b = b;
    8322:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8326:	strb.w	r1, [r3, #1420]	; 0x58c
    832a:	mvn.w	r1, #2
      _b = b;
    832e:	strb.w	r6, [r3, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8332:	movs	r6, #173	; 0xad
      _s = s;
    8334:	strb.w	r1, [r3, #1460]	; 0x5b4
    8338:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    833c:	str.w	r6, [r3, #1416]	; 0x588
      _s = s;
      _b = b;
    8340:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8344:	strb.w	r1, [r3, #1468]	; 0x5bc
      _b = b;
    8348:	strb.w	r6, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    834c:	movs	r6, #165	; 0xa5
      _s = s;
    834e:	strb.w	r1, [r3, #1476]	; 0x5c4
    8352:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8356:	str.w	r6, [r3, #1424]	; 0x590
      _s = s;
    835a:	mvn.w	r6, #27
    835e:	strb.w	r1, [r3, #1484]	; 0x5cc
    8362:	mvn.w	r1, #2
    8366:	strb.w	r6, [r3, #1428]	; 0x594
      _b = b;
    836a:	strb.w	r6, [r3, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    836e:	movs	r6, #167	; 0xa7
    8370:	str.w	r7, [r3, #1456]	; 0x5b0
    8374:	str.w	r6, [r3, #1432]	; 0x598
      _s = s;
      _b = b;
    8378:	mvn.w	r6, #18
    837c:	strb.w	r8, [r3, #1461]	; 0x5b5
    8380:	strb.w	r6, [r3, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8384:	movs	r6, #144	; 0x90
      _s = s;
    8386:	strb.w	r1, [r3, #1492]	; 0x5d4
    838a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    838e:	str.w	r6, [r3, #1440]	; 0x5a0
      _s = s;
    8392:	mvn.w	r6, #75	; 0x4b
    8396:	strb.w	r0, [r3, #1436]	; 0x59c
    839a:	strb.w	r6, [r3, #1444]	; 0x5a4
    839e:	mvn.w	r6, #37	; 0x25
    83a2:	strb.w	r6, [r3, #1452]	; 0x5ac
      _b = b;
    83a6:	mvn.w	r6, #57	; 0x39
    83aa:	strb.w	r6, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83ae:	movs	r6, #127	; 0x7f
    83b0:	str.w	r6, [r3, #1464]	; 0x5b8
      _s = s;
      _b = b;
    83b4:	mvn.w	r6, #112	; 0x70
    83b8:	strb.w	r6, [r3, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83bc:	movs	r6, #133	; 0x85
    83be:	str.w	r6, [r3, #1480]	; 0x5c8
    83c2:	movs	r6, #148	; 0x94
    83c4:	str.w	r6, [r3, #1488]	; 0x5d0
      _s = s;
      _b = b;
    83c8:	mvn.w	r6, #73	; 0x49
    83cc:	strb.w	r6, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83d0:	movs	r6, #119	; 0x77
    83d2:	str.w	r6, [r3, #1448]	; 0x5a8
      _s = s;
      _b = b;
    83d6:	mov.w	r6, #111	; 0x6f
    83da:	strb.w	r6, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83de:	movs	r6, #126	; 0x7e
    83e0:	str.w	r6, [r3, #1472]	; 0x5c0
      _s = s;
      _b = b;
    83e4:	mvn.w	r6, #92	; 0x5c
    83e8:	strb.w	r6, [r3, #1485]	; 0x5cd
    83ec:	mvn.w	r6, #117	; 0x75
    83f0:	strb.w	r6, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83f4:	movs	r6, #162	; 0xa2
      _s = s;
    83f6:	strb.w	r1, [r3, #1500]	; 0x5dc
    83fa:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83fe:	str.w	r6, [r3, #1496]	; 0x5d8
      _s = s;
      _b = b;
    8402:	mov.w	r6, #119	; 0x77
    8406:	strb.w	lr, [r3, #1573]	; 0x625
    840a:	strb.w	r6, [r3, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    840e:	movs	r6, #167	; 0xa7
    8410:	str.w	r5, [r3, #1520]	; 0x5f0
    8414:	str.w	r6, [r3, #1504]	; 0x5e0
      _s = s;
      _b = b;
    8418:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    841c:	strb.w	r5, [r3, #1524]	; 0x5f4
      _b = b;
    8420:	strb.w	r6, [r3, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8424:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    8426:	strb.w	r5, [r3, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    842a:	str.w	r6, [r3, #1512]	; 0x5e8
      _s = s;
      _b = b;
    842e:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8432:	str.w	r5, [r3, #1528]	; 0x5f8
      _s = s;
      _b = b;
    8436:	strb.w	r6, [r3, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    843a:	mvn.w	r6, #50	; 0x32
    843e:	strb.w	r5, [r3, #1532]	; 0x5fc
    8442:	strb.w	r6, [r3, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8446:	movs	r6, #31
      _s = s;
      _b = b;
    8448:	strb.w	r5, [r3, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    844c:	str.w	r6, [r3, #1568]	; 0x620
      _s = s;
    8450:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8454:	str.w	r5, [r3, #1536]	; 0x600
      _s = s;
    8458:	strb.w	r6, [r3, #1572]	; 0x624
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    845c:	movs	r6, #158	; 0x9e
      _s = s;
    845e:	strb.w	r5, [r3, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8462:	str.w	r6, [r3, #1576]	; 0x628
      _s = s;
    8466:	mov.w	r6, #67	; 0x43
      _b = b;
    846a:	strb.w	r5, [r3, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    846e:	strb.w	r6, [r3, #1508]	; 0x5e4
    8472:	mov.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8476:	str.w	r5, [r3, #1544]	; 0x608
      _s = s;
    847a:	strb.w	r6, [r3, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    847e:	movs	r6, #45	; 0x2d
      _s = s;
    8480:	strb.w	r5, [r3, #1548]	; 0x60c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8484:	str.w	r6, [r3, #1560]	; 0x618
      _s = s;
    8488:	mov.w	r6, #70	; 0x46
      _b = b;
    848c:	strb.w	r5, [r3, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8490:	strb.w	r6, [r3, #1580]	; 0x62c
      _b = b;
    8494:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8498:	str.w	r5, [r3, #1552]	; 0x610
      _s = s;
    849c:	strb.w	r5, [r3, #1556]	; 0x614
      _b = b;
    84a0:	strb.w	r5, [r3, #1557]	; 0x615
    84a4:	strb.w	sl, [r3, #1565]	; 0x61d
    84a8:	strb.w	r6, [r3, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84ac:	movs	r6, #174	; 0xae
      _s = s;
    84ae:	strb.w	r1, [r3, #1588]	; 0x634
    84b2:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84b6:	str.w	r6, [r3, #1584]	; 0x630
      _s = s;
      _b = b;
    84ba:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84be:	strb.w	r1, [r3, #1596]	; 0x63c
    84c2:	mov.w	r1, #4294967295
      _b = b;
    84c6:	strb.w	r6, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84ca:	movs	r6, #145	; 0x91
      _s = s;
    84cc:	strb.w	r1, [r3, #1604]	; 0x644
    84d0:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84d4:	str.w	r6, [r3, #1592]	; 0x638
      _s = s;
      _b = b;
    84d8:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84dc:	strb.w	r1, [r3, #1652]	; 0x674
    84e0:	mov.w	r1, #4294967295
      _b = b;
    84e4:	strb.w	r6, [r3, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84e8:	movs	r6, #139	; 0x8b
      _s = s;
    84ea:	strb.w	r1, [r3, #1660]	; 0x67c
    84ee:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84f2:	str.w	r6, [r3, #1608]	; 0x648
      _s = s;
    84f6:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84fa:	str.w	r7, [r3, #1600]	; 0x640
      _s = s;
    84fe:	strb.w	r6, [r3, #1612]	; 0x64c
      _b = b;
    8502:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8506:	str.w	ip, [r3, #1624]	; 0x658
      _s = s;
      _b = b;
    850a:	strb.w	r6, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    850e:	mvn.w	r6, #94	; 0x5e
      _b = b;
    8512:	strb.w	r0, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8516:	strb.w	r6, [r3, #1620]	; 0x654
      _b = b;
    851a:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    851e:	strb.w	r1, [r3, #1668]	; 0x684
    8522:	mvn.w	r1, #2
      _b = b;
    8526:	strb.w	r6, [r3, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    852a:	mvn.w	r6, #103	; 0x67
      _b = b;
    852e:	strb.w	sl, [r3, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8532:	strb.w	r6, [r3, #1628]	; 0x65c
      _b = b;
    8536:	mvn.w	r6, #18
    853a:	strb.w	r6, [r3, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    853e:	movs	r6, #142	; 0x8e
    8540:	str.w	r6, [r3, #1632]	; 0x660
      _s = s;
    8544:	mvn.w	r6, #56	; 0x38
    8548:	strb.w	r6, [r3, #1636]	; 0x664
    854c:	mvn.w	r6, #66	; 0x42
    8550:	strb.w	r6, [r3, #1644]	; 0x66c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8554:	movs	r6, #126	; 0x7e
    8556:	str.w	r6, [r3, #1656]	; 0x678
    855a:	movs	r6, #124	; 0x7c
    855c:	str.w	r6, [r3, #1664]	; 0x680
    8560:	movs	r6, #89	; 0x59
    8562:	str.w	r6, [r3, #1616]	; 0x650
      _s = s;
      _b = b;
    8566:	mov.w	r6, #107	; 0x6b
    856a:	strb.w	r6, [r3, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    856e:	movs	r6, #114	; 0x72
    8570:	str.w	r6, [r3, #1640]	; 0x668
    8574:	movs	r6, #129	; 0x81
    8576:	str.w	r6, [r3, #1648]	; 0x670
      _s = s;
      _b = b;
    857a:	mvn.w	r6, #34	; 0x22
    857e:	strb.w	r6, [r3, #1653]	; 0x675
    8582:	mvn.w	r6, #70	; 0x46
    8586:	strb.w	r6, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    858a:	movs	r6, #142	; 0x8e
      _s = s;
      _b = b;
    858c:	strb.w	r7, [r3, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8590:	str.w	r6, [r3, #1672]	; 0x688
      _s = s;
      _b = b;
    8594:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8598:	strb.w	r1, [r3, #1684]	; 0x694
    859c:	mov.w	r1, #4294967295
      _b = b;
    85a0:	strb.w	r6, [r3, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85a4:	movs	r6, #144	; 0x90
      _s = s;
    85a6:	strb.w	r1, [r3, #1692]	; 0x69c
    85aa:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85ae:	str.w	r6, [r3, #1680]	; 0x690
      _s = s;
      _b = b;
    85b2:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85b6:	strb.w	lr, [r3, #1676]	; 0x68c
      _b = b;
    85ba:	strb.w	r6, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85be:	movs	r6, #150	; 0x96
      _s = s;
    85c0:	strb.w	r1, [r3, #1716]	; 0x6b4
    85c4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85c8:	str.w	r6, [r3, #1688]	; 0x698
      _s = s;
      _b = b;
    85cc:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85d0:	strb.w	fp, [r3, #1700]	; 0x6a4
      _b = b;
    85d4:	strb.w	r6, [r3, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85d8:	movs	r6, #166	; 0xa6
    85da:	str.w	r5, [r3, #1720]	; 0x6b8
    85de:	str.w	r6, [r3, #1696]	; 0x6a0
    85e2:	movs	r6, #168	; 0xa8
      _s = s;
    85e4:	strb.w	r5, [r3, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85e8:	str.w	r6, [r3, #1704]	; 0x6a8
      _s = s;
    85ec:	mvn.w	r6, #119	; 0x77
      _b = b;
    85f0:	strb.w	r5, [r3, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85f4:	strb.w	r6, [r3, #1708]	; 0x6ac
      _b = b;
    85f8:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85fc:	str.w	r5, [r3, #1728]	; 0x6c0
      _s = s;
      _b = b;
    8600:	strb.w	r6, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8604:	movs	r6, #171	; 0xab
      _s = s;
    8606:	strb.w	r5, [r3, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    860a:	str.w	r6, [r3, #1712]	; 0x6b0
      _s = s;
      _b = b;
    860e:	mov.w	r6, #108	; 0x6c
    8612:	strb.w	r5, [r3, #1733]	; 0x6c5
    8616:	strb.w	r6, [r3, #1717]	; 0x6b5
    861a:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    861e:	str.w	r5, [r3, #1736]	; 0x6c8
      _s = s;
      _b = b;
    8622:	strb.w	r6, [r3, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8626:	movs	r6, #46	; 0x2e
      _s = s;
    8628:	strb.w	r5, [r3, #1740]	; 0x6cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    862c:	str.w	r6, [r3, #1752]	; 0x6d8
      _s = s;
    8630:	mvn.w	r6, #20
      _b = b;
    8634:	strb.w	r5, [r3, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8638:	strb.w	r6, [r3, #1756]	; 0x6dc
      _b = b;
    863c:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8640:	str.w	r5, [r3, #1744]	; 0x6d0
      _s = s;
    8644:	strb.w	r5, [r3, #1748]	; 0x6d4
      _b = b;
    8648:	strb.w	r5, [r3, #1749]	; 0x6d5
    864c:	strb.w	r6, [r3, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8650:	movs	r6, #83	; 0x53
      _s = s;
    8652:	strb.w	r1, [r3, #1780]	; 0x6f4
    8656:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    865a:	str.w	r6, [r3, #1760]	; 0x6e0
      _s = s;
    865e:	mov.w	r6, #45	; 0x2d
    8662:	strb.w	r1, [r3, #1788]	; 0x6fc
    8666:	mvn.w	r1, #2
    866a:	strb.w	r6, [r3, #1764]	; 0x6e4
      _b = b;
    866e:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8672:	strb.w	r1, [r3, #1796]	; 0x704
    8676:	mvn.w	r1, #2
      _b = b;
    867a:	strb.w	r6, [r3, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    867e:	movs	r6, #162	; 0xa2
      _s = s;
    8680:	strb.w	r1, [r3, #1804]	; 0x70c
    8684:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8688:	str.w	r6, [r3, #1768]	; 0x6e8
      _s = s;
    868c:	mvn.w	r6, #7
    8690:	strb.w	r6, [r3, #1772]	; 0x6ec
      _b = b;
    8694:	mov.w	r6, #119	; 0x77
    8698:	strb.w	r6, [r3, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    869c:	movs	r6, #159	; 0x9f
    869e:	str.w	r6, [r3, #1776]	; 0x6f0
      _s = s;
      _b = b;
    86a2:	mov.w	r6, #59	; 0x3b
    86a6:	strb.w	r6, [r3, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86aa:	movs	r6, #106	; 0x6a
    86ac:	str.w	r6, [r3, #1784]	; 0x6f8
    86b0:	movs	r6, #100	; 0x64
    86b2:	str.w	r6, [r3, #1792]	; 0x700
      _s = s;
      _b = b;
    86b6:	mvn.w	r6, #71	; 0x47
    86ba:	strb.w	r6, [r3, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86be:	movs	r6, #94	; 0x5e
    86c0:	str.w	r6, [r3, #1800]	; 0x708
      _s = s;
      _b = b;
    86c4:	mvn.w	r6, #45	; 0x2d
    86c8:	strb.w	r6, [r3, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86cc:	movs	r6, #144	; 0x90
    86ce:	str.w	r6, [r3, #1808]	; 0x710
      _s = s;
    86d2:	mvn.w	r6, #122	; 0x7a
    86d6:	strb.w	r6, [r3, #1812]	; 0x714
      _b = b;
    86da:	mvn.w	r6, #37	; 0x25
    86de:	strb.w	r6, [r3, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86e2:	mvn.w	r6, #97	; 0x61
    86e6:	strb.w	r6, [r3, #1820]	; 0x71c
      _b = b;
    86ea:	mvn.w	r6, #11
    86ee:	strb.w	r6, [r3, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86f2:	movs	r6, #92	; 0x5c
    86f4:	str.w	r6, [r3, #1824]	; 0x720
      _s = s;
    86f8:	mvn.w	r6, #49	; 0x31
    86fc:	strb.w	r6, [r3, #1828]	; 0x724
      _b = b;
    8700:	mvn.w	r6, #15
    8704:	strb.w	r6, [r3, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8708:	movs	r6, #93	; 0x5d
    870a:	str.w	r6, [r3, #1832]	; 0x728
      _s = s;
      _b = b;
    870e:	mvn.w	r6, #42	; 0x2a
    8712:	strb.w	r6, [r3, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8716:	movs	r6, #131	; 0x83
    8718:	str.w	r6, [r3, #1840]	; 0x730
      _s = s;
    871c:	mvn.w	r6, #19
    8720:	strb.w	r6, [r3, #1844]	; 0x734
      _b = b;
    8724:	mvn.w	r6, #62	; 0x3e
    8728:	strb.w	r6, [r3, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    872c:	movs	r6, #140	; 0x8c
    872e:	str.w	r6, [r3, #1816]	; 0x718
      _s = s;
    8732:	mvn.w	r6, #52	; 0x34
    8736:	strb.w	r6, [r3, #1836]	; 0x72c
      _b = b;
    873a:	mvn.w	r6, #67	; 0x43
    873e:	strb.w	r6, [r3, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8742:	movs	r6, #128	; 0x80
      _s = s;
    8744:	strb.w	r1, [r3, #1852]	; 0x73c
    8748:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    874c:	str.w	r6, [r3, #1848]	; 0x738
      _s = s;
      _b = b;
    8750:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8754:	strb.w	r1, [r3, #1860]	; 0x744
    8758:	mov.w	r1, #4294967295
      _b = b;
    875c:	strb.w	r6, [r3, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8760:	movs	r6, #138	; 0x8a
      _s = s;
    8762:	strb.w	r1, [r3, #1868]	; 0x74c
    8766:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    876a:	str.w	r6, [r3, #1856]	; 0x740
      _s = s;
      _b = b;
    876e:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8772:	strb.w	r1, [r3, #1876]	; 0x754
    8776:	mov.w	r1, #4294967295
      _b = b;
    877a:	strb.w	r6, [r3, #1861]	; 0x745
    877e:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8782:	strb.w	r1, [r3, #1884]	; 0x75c
    8786:	mov.w	r1, #4294967295
      _b = b;
    878a:	strb.w	r6, [r3, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    878e:	movs	r6, #148	; 0x94
      _s = s;
    8790:	strb.w	r1, [r3, #1892]	; 0x764
    8794:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8798:	str.w	r6, [r3, #1872]	; 0x750
      _s = s;
      _b = b;
    879c:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87a0:	strb.w	r1, [r3, #1900]	; 0x76c
    87a4:	mov.w	r1, #4294967295
      _b = b;
    87a8:	strb.w	r6, [r3, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87ac:	movs	r6, #150	; 0x96
    87ae:	str.w	ip, [r3, #1864]	; 0x748
    87b2:	str.w	r6, [r3, #1880]	; 0x758
    87b6:	movs	r6, #154	; 0x9a
      _s = s;
    87b8:	strb.w	r1, [r3, #1908]	; 0x774
    87bc:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87c0:	str.w	r6, [r3, #1888]	; 0x760
      _s = s;
      _b = b;
    87c4:	mvn.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87c8:	str.w	r5, [r3, #1912]	; 0x778
      _s = s;
      _b = b;
    87cc:	strb.w	r6, [r3, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87d0:	movs	r6, #168	; 0xa8
      _s = s;
    87d2:	strb.w	r5, [r3, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87d6:	str.w	r6, [r3, #1896]	; 0x768
      _s = s;
      _b = b;
    87da:	mov.w	r6, #112	; 0x70
    87de:	strb.w	r5, [r3, #1917]	; 0x77d
    87e2:	strb.w	r6, [r3, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87e6:	movs	r6, #168	; 0xa8
    87e8:	str.w	r5, [r3, #1920]	; 0x780
    87ec:	str.w	r6, [r3, #1904]	; 0x770
      _s = s;
      _b = b;
    87f0:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87f4:	strb.w	r5, [r3, #1924]	; 0x784
      _b = b;
    87f8:	strb.w	r6, [r3, #1909]	; 0x775
    87fc:	mvn.w	r6, #51	; 0x33
    8800:	strb.w	r5, [r3, #1925]	; 0x785
    8804:	strb.w	r6, [r3, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8808:	movs	r6, #50	; 0x32
    880a:	str.w	r5, [r3, #1928]	; 0x788
      _s = s;
    880e:	strb.w	r5, [r3, #1932]	; 0x78c
      _b = b;
    8812:	strb.w	r5, [r3, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8816:	str.w	r6, [r3, #1944]	; 0x798
      _s = s;
      _b = b;
    881a:	mvn.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    881e:	strb.w	r0, [r3, #1948]	; 0x79c
      _b = b;
    8822:	strb.w	r6, [r3, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8826:	movs	r6, #108	; 0x6c
      _s = s;
    8828:	strb.w	r1, [r3, #1980]	; 0x7bc
    882c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8830:	str.w	r6, [r3, #1952]	; 0x7a0
      _s = s;
    8834:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8838:	str.w	r5, [r3, #1936]	; 0x790
      _s = s;
    883c:	strb.w	r6, [r3, #1956]	; 0x7a4
      _b = b;
    8840:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8844:	strb.w	r5, [r3, #1940]	; 0x794
      _b = b;
    8848:	strb.w	r6, [r3, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    884c:	movs	r6, #126	; 0x7e
      _s = s;
      _b = b;
    884e:	strb.w	r5, [r3, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8852:	str.w	r6, [r3, #1960]	; 0x7a8
      _s = s;
    8856:	mvn.w	r6, #5
    885a:	strb.w	r6, [r3, #1964]	; 0x7ac
      _b = b;
    885e:	mov.w	r6, #108	; 0x6c
    8862:	strb.w	r6, [r3, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8866:	movs	r6, #119	; 0x77
    8868:	str.w	r6, [r3, #1968]	; 0x7b0
      _s = s;
    886c:	mvn.w	r6, #5
    8870:	strb.w	r6, [r3, #1972]	; 0x7b4
      _b = b;
    8874:	mvn.w	r6, #96	; 0x60
    8878:	strb.w	r6, [r3, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    887c:	movs	r6, #101	; 0x65
    887e:	str.w	r6, [r3, #1976]	; 0x7b8
      _s = s;
      _b = b;
    8882:	mvn.w	r6, #72	; 0x48
    8886:	strb.w	r6, [r3, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    888a:	mvn.w	r6, #7
    888e:	strb.w	r6, [r3, #1988]	; 0x7c4
      _b = b;
    8892:	mvn.w	r6, #52	; 0x34
    8896:	strb.w	r6, [r3, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    889a:	movs	r6, #97	; 0x61
    889c:	str.w	r6, [r3, #1992]	; 0x7c8
      _s = s;
    88a0:	mvn.w	r6, #41	; 0x29
    88a4:	strb.w	r6, [r3, #1996]	; 0x7cc
      _b = b;
    88a8:	mvn.w	r6, #37	; 0x25
    88ac:	strb.w	r6, [r3, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88b0:	movs	r6, #96	; 0x60
    88b2:	str.w	r6, [r3, #2000]	; 0x7d0
      _s = s;
    88b6:	mvn.w	r6, #23
    88ba:	strb.w	r6, [r3, #2004]	; 0x7d4
      _b = b;
    88be:	mvn.w	r6, #33	; 0x21
    88c2:	strb.w	r6, [r3, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88c6:	movs	r6, #92	; 0x5c
    88c8:	str.w	r6, [r3, #2008]	; 0x7d8
      _s = s;
    88cc:	mvn.w	r6, #25
    88d0:	strb.w	r6, [r3, #2012]	; 0x7dc
      _b = b;
    88d4:	mvn.w	r6, #49	; 0x31
    88d8:	strb.w	r6, [r3, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88dc:	movs	r6, #88	; 0x58
    88de:	str.w	r6, [r3, #2016]	; 0x7e0
      _s = s;
    88e2:	mvn.w	r6, #21
    88e6:	strb.w	r6, [r3, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88ea:	movs	r6, #80	; 0x50
    88ec:	str.w	r6, [r3, #1984]	; 0x7c0
      _s = s;
      _b = b;
    88f0:	mvn.w	r6, #28
    88f4:	strb.w	r6, [r3, #2021]	; 0x7e5
    88f8:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88fc:	strb.w	r1, [r3, #2036]	; 0x7f4
    8900:	mov.w	r1, #4294967295
      _b = b;
    8904:	strb.w	r6, [r3, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8908:	movs	r6, #137	; 0x89
      _s = s;
    890a:	strb.w	r1, [r3, #2044]	; 0x7fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    890e:	str.w	r6, [r3, #2032]	; 0x7f0
      _s = s;
      _b = b;
    8912:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8916:	strb.w	ip, [r3, #2068]	; 0x814
      _b = b;
    891a:	strb.w	r6, [r3, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    891e:	movs	r6, #123	; 0x7b
      _s = s;
    8920:	strb.w	sl, [r3, #2028]	; 0x7ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8924:	str.w	r6, [r3, #2040]	; 0x7f8
      _s = s;
      _b = b;
    8928:	mvn.w	r6, #87	; 0x57
    892c:	strb.w	sl, [r3, #2077]	; 0x81d
    8930:	strb.w	r6, [r3, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8934:	movs	r6, #148	; 0x94
    8936:	mov	r1, r6
    8938:	str.w	r6, [r3, #2048]	; 0x800
      _s = s;
    893c:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8940:	str.w	r1, [r3, #2056]	; 0x808
      _s = s;
    8944:	mov.w	r1, #4294967295
    8948:	strb.w	r6, [r3, #2052]	; 0x804
      _b = b;
    894c:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8950:	strb.w	r1, [r3, #2084]	; 0x824
    8954:	mov.w	r1, #4294967295
      _b = b;
    8958:	strb.w	r6, [r3, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    895c:	mvn.w	r6, #119	; 0x77
    8960:	strb.w	r1, [r3, #2092]	; 0x82c
    8964:	mov.w	r1, #4294967295
    8968:	strb.w	r6, [r3, #2060]	; 0x80c
      _b = b;
    896c:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8970:	strb.w	r1, [r3, #2100]	; 0x834
    8974:	mov.w	r1, #4294967295
      _b = b;
    8978:	strb.w	r6, [r3, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    897c:	movs	r6, #150	; 0x96
      _s = s;
    897e:	strb.w	r1, [r3, #2108]	; 0x83c
    8982:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8986:	str.w	r6, [r3, #2064]	; 0x810
      _s = s;
      _b = b;
    898a:	mvn.w	r6, #13
    898e:	strb.w	r6, [r3, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8992:	movs	r6, #147	; 0x93
    8994:	str.w	r6, [r3, #2072]	; 0x818
      _s = s;
    8998:	mvn.w	r6, #102	; 0x66
    899c:	strb.w	r6, [r3, #2076]	; 0x81c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89a0:	movs	r6, #153	; 0x99
    89a2:	str.w	r6, [r3, #2080]	; 0x820
      _s = s;
      _b = b;
    89a6:	mvn.w	r6, #73	; 0x49
    89aa:	strb.w	r6, [r3, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89ae:	movs	r6, #158	; 0x9e
    89b0:	str.w	r6, [r3, #2088]	; 0x828
      _s = s;
      _b = b;
    89b4:	mvn.w	r6, #111	; 0x6f
    89b8:	strb.w	r6, [r3, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89bc:	movs	r6, #164	; 0xa4
    89be:	str.w	r6, [r3, #2096]	; 0x830
      _s = s;
      _b = b;
    89c2:	mvn.w	r6, #91	; 0x5b
    89c6:	strb.w	r6, [r3, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89ca:	movs	r6, #161	; 0xa1
    89cc:	str.w	r6, [r3, #2104]	; 0x838
    89d0:	movs	r6, #105	; 0x69
    89d2:	str.w	r6, [r3, #2024]	; 0x7e8
      _s = s;
      _b = b;
    89d6:	mov.w	r6, #76	; 0x4c
    89da:	strb.w	r6, [r3, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89de:	movs	r6, #82	; 0x52
      _s = s;
    89e0:	strb.w	r1, [r3, #2156]	; 0x86c
    89e4:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89e8:	str.w	r6, [r3, #2136]	; 0x858
      _s = s;
    89ec:	mov.w	r6, #110	; 0x6e
    89f0:	strb.w	r1, [r3, #2164]	; 0x874
    89f4:	mvn.w	r1, #2
    89f8:	strb.w	r6, [r3, #2140]	; 0x85c
      _b = b;
    89fc:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a00:	strb.w	r1, [r3, #2172]	; 0x87c
    8a04:	mvn.w	r1, #2
      _b = b;
    8a08:	strb.w	r6, [r3, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a0c:	movs	r6, #147	; 0x93
      _s = s;
    8a0e:	strb.w	r1, [r3, #2180]	; 0x884
    8a12:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a16:	str.w	r6, [r3, #2144]	; 0x860
      _s = s;
    8a1a:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a1e:	str.w	r5, [r3, #2112]	; 0x840
      _s = s;
    8a22:	strb.w	r6, [r3, #2148]	; 0x864
      _b = b;
    8a26:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a2a:	strb.w	r5, [r3, #2116]	; 0x844
      _b = b;
    8a2e:	strb.w	r6, [r3, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a32:	movs	r6, #134	; 0x86
      _s = s;
      _b = b;
    8a34:	strb.w	r5, [r3, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a38:	str.w	r6, [r3, #2152]	; 0x868
      _s = s;
      _b = b;
    8a3c:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a40:	str.w	r5, [r3, #2120]	; 0x848
      _s = s;
      _b = b;
    8a44:	strb.w	r6, [r3, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a48:	movs	r6, #110	; 0x6e
      _s = s;
    8a4a:	strb.w	r5, [r3, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a4e:	str.w	r6, [r3, #2160]	; 0x870
      _s = s;
      _b = b;
    8a52:	mvn.w	r6, #77	; 0x4d
    8a56:	strb.w	r5, [r3, #2125]	; 0x84d
    8a5a:	strb.w	r6, [r3, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a5e:	movs	r6, #94	; 0x5e
    8a60:	str.w	r5, [r3, #2128]	; 0x850
    8a64:	str.w	r6, [r3, #2168]	; 0x878
      _s = s;
      _b = b;
    8a68:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a6c:	strb.w	r5, [r3, #2132]	; 0x854
      _b = b;
    8a70:	strb.w	r6, [r3, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a74:	movs	r6, #104	; 0x68
      _s = s;
      _b = b;
    8a76:	strb.w	r5, [r3, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a7a:	str.w	r6, [r3, #2176]	; 0x880
      _s = s;
      _b = b;
    8a7e:	mvn.w	r6, #53	; 0x35
    8a82:	strb.w	r6, [r3, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a86:	movs	r6, #87	; 0x57
    8a88:	str.w	r6, [r3, #2184]	; 0x888
      _s = s;
    8a8c:	mvn.w	r6, #65	; 0x41
    8a90:	strb.w	r6, [r3, #2188]	; 0x88c
      _b = b;
    8a94:	mvn.w	r6, #18
    8a98:	strb.w	r6, [r3, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a9c:	movs	r6, #111	; 0x6f
    8a9e:	str.w	r6, [r3, #2192]	; 0x890
      _s = s;
    8aa2:	mvn.w	r6, #34	; 0x22
    8aa6:	strb.w	r6, [r3, #2196]	; 0x894
      _b = b;
    8aaa:	mvn.w	r6, #32
    8aae:	strb.w	r6, [r3, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ab2:	movs	r6, #101	; 0x65
      _s = s;
    8ab4:	strb.w	r1, [r3, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ab8:	str.w	r6, [r3, #2200]	; 0x898
      _s = s;
    8abc:	mvn.w	r6, #49	; 0x31
    8ac0:	strb.w	r1, [r3, #2236]	; 0x8bc
    8ac4:	mvn.w	r1, #2
    8ac8:	strb.w	r6, [r3, #2204]	; 0x89c
      _b = b;
    8acc:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ad0:	strb.w	r1, [r3, #2244]	; 0x8c4
    8ad4:	mov.w	r1, #4294967295
      _b = b;
    8ad8:	strb.w	r6, [r3, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8adc:	mvn.w	r6, #54	; 0x36
    8ae0:	strb.w	r0, [r3, #2220]	; 0x8ac
    8ae4:	strb.w	r6, [r3, #2212]	; 0x8a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ae8:	movs	r6, #96	; 0x60
    8aea:	str.w	r7, [r3, #2232]	; 0x8b8
    8aee:	str.w	r6, [r3, #2216]	; 0x8a8
      _s = s;
      _b = b;
    8af2:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8af6:	strb.w	r1, [r3, #2284]	; 0x8ec
    8afa:	mov.w	r1, #4294967295
      _b = b;
    8afe:	strb.w	r6, [r3, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b02:	movs	r6, #131	; 0x83
      _s = s;
      _b = b;
    8b04:	strb.w	sl, [r3, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b08:	str.w	r6, [r3, #2224]	; 0x8b0
      _s = s;
      _b = b;
    8b0c:	mvn.w	r6, #75	; 0x4b
    8b10:	strb.w	r6, [r3, #2229]	; 0x8b5
    8b14:	mvn.w	r6, #89	; 0x59
    8b18:	strb.w	r6, [r3, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b1c:	movs	r6, #159	; 0x9f
    8b1e:	str.w	r6, [r3, #2240]	; 0x8c0
      _s = s;
      _b = b;
    8b22:	mvn.w	r6, #44	; 0x2c
    8b26:	strb.w	r6, [r3, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b2a:	movs	r6, #140	; 0x8c
    8b2c:	str.w	r6, [r3, #2248]	; 0x8c8
      _s = s;
    8b30:	mvn.w	r6, #107	; 0x6b
    8b34:	strb.w	r6, [r3, #2252]	; 0x8cc
      _b = b;
    8b38:	mvn.w	r6, #11
    8b3c:	strb.w	r6, [r3, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b40:	movs	r6, #103	; 0x67
    8b42:	str.w	r6, [r3, #2256]	; 0x8d0
      _s = s;
      _b = b;
    8b46:	mvn.w	r6, #14
    8b4a:	strb.w	r6, [r3, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b4e:	movs	r6, #116	; 0x74
    8b50:	str.w	r6, [r3, #2264]	; 0x8d8
      _s = s;
    8b54:	strb.w	r6, [r3, #2268]	; 0x8dc
      _b = b;
    8b58:	mvn.w	r6, #16
    8b5c:	strb.w	r6, [r3, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b60:	movs	r6, #159	; 0x9f
    8b62:	str.w	r6, [r3, #2272]	; 0x8e0
      _s = s;
    8b66:	mvn.w	r6, #65	; 0x41
    8b6a:	strb.w	r6, [r3, #2276]	; 0x8e4
      _b = b;
    8b6e:	mvn.w	r6, #57	; 0x39
    8b72:	strb.w	r6, [r3, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b76:	movs	r6, #158	; 0x9e
    8b78:	str.w	r6, [r3, #2280]	; 0x8e8
    8b7c:	movs	r6, #98	; 0x62
    8b7e:	str.w	r6, [r3, #2208]	; 0x8a0
      _s = s;
    8b82:	strb.w	r6, [r3, #2260]	; 0x8d4
      _b = b;
    8b86:	mvn.w	r6, #50	; 0x32
    8b8a:	strb.w	r6, [r3, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b8e:	movs	r6, #150	; 0x96
      _s = s;
    8b90:	strb.w	r1, [r3, #2292]	; 0x8f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b94:	str.w	r6, [r3, #2288]	; 0x8f0
      _s = s;
      _b = b;
    8b98:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b9c:	strb.w	r1, [r3, #2300]	; 0x8fc
    8ba0:	mov.w	r1, #4294967295
      _b = b;
    8ba4:	strb.w	r6, [r3, #2293]	; 0x8f5
    8ba8:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bac:	strb.w	r1, [r3, #2372]	; 0x944
      _b = b;
    8bb0:	strb.w	r6, [r3, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bb4:	movs	r6, #166	; 0xa6
      _s = s;
    8bb6:	strb.w	lr, [r3, #2348]	; 0x92c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bba:	str.w	r6, [r3, #2328]	; 0x918
      _s = s;
    8bbe:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bc2:	str.w	r5, [r3, #2304]	; 0x900
      _s = s;
    8bc6:	strb.w	r6, [r3, #2332]	; 0x91c
      _b = b;
    8bca:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bce:	strb.w	r5, [r3, #2308]	; 0x904
      _b = b;
    8bd2:	strb.w	r6, [r3, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bd6:	movs	r6, #153	; 0x99
      _s = s;
      _b = b;
    8bd8:	strb.w	r5, [r3, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bdc:	str.w	r6, [r3, #2336]	; 0x920
      _s = s;
      _b = b;
    8be0:	mov.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8be4:	str.w	r5, [r3, #2312]	; 0x908
      _s = s;
      _b = b;
    8be8:	strb.w	r6, [r3, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bec:	movs	r6, #150	; 0x96
      _s = s;
    8bee:	strb.w	r5, [r3, #2316]	; 0x90c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bf2:	str.w	r6, [r3, #2344]	; 0x928
      _s = s;
      _b = b;
    8bf6:	mov.w	r6, #88	; 0x58
    8bfa:	strb.w	r5, [r3, #2317]	; 0x90d
    8bfe:	strb.w	r6, [r3, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c02:	movs	r6, #108	; 0x6c
    8c04:	str.w	r5, [r3, #2320]	; 0x910
    8c08:	str.w	r6, [r3, #2352]	; 0x930
      _s = s;
    8c0c:	mvn.w	r6, #7
    8c10:	strb.w	r5, [r3, #2324]	; 0x914
    8c14:	strb.w	r6, [r3, #2356]	; 0x934
      _b = b;
    8c18:	mvn.w	r6, #46	; 0x2e
    8c1c:	strb.w	r5, [r3, #2325]	; 0x915
    8c20:	strb.w	r6, [r3, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c24:	movs	r6, #99	; 0x63
      _s = s;
    8c26:	strb.w	fp, [r3, #2340]	; 0x924
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c2a:	str.w	r6, [r3, #2360]	; 0x938
      _s = s;
    8c2e:	mvn.w	r6, #6
    8c32:	strb.w	r6, [r3, #2364]	; 0x93c
      _b = b;
    8c36:	mvn.w	r6, #36	; 0x24
    8c3a:	strb.w	r6, [r3, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c3e:	movs	r6, #157	; 0x9d
    8c40:	str.w	r6, [r3, #2296]	; 0x8f8
    8c44:	movs	r6, #125	; 0x7d
    8c46:	mov	r1, r6
    8c48:	str.w	r6, [r3, #2368]	; 0x940
      _s = s;
      _b = b;
    8c4c:	mvn.w	r6, #72	; 0x48
    8c50:	strb.w	r6, [r3, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c54:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c58:	str.w	r1, [r3, #2376]	; 0x948
      _s = s;
    8c5c:	mvn.w	r1, #2
    8c60:	strb.w	r6, [r3, #2380]	; 0x94c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c64:	movs	r6, #122	; 0x7a
      _s = s;
    8c66:	strb.w	r1, [r3, #2396]	; 0x95c
    8c6a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c6e:	str.w	r6, [r3, #2384]	; 0x950
      _s = s;
    8c72:	mvn.w	r6, #64	; 0x40
    8c76:	strb.w	r1, [r3, #2420]	; 0x974
    8c7a:	mvn.w	r1, #2
    8c7e:	strb.w	r6, [r3, #2388]	; 0x954
      _b = b;
    8c82:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c86:	strb.w	r1, [r3, #2428]	; 0x97c
    8c8a:	mov.w	r1, #4294967295
      _b = b;
    8c8e:	strb.w	r6, [r3, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c92:	movs	r6, #138	; 0x8a
      _s = s;
    8c94:	strb.w	r1, [r3, #2460]	; 0x99c
    8c98:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c9c:	str.w	r6, [r3, #2392]	; 0x958
      _s = s;
      _b = b;
    8ca0:	mvn.w	r6, #67	; 0x43
    8ca4:	strb.w	sl, [r3, #2413]	; 0x96d
    8ca8:	strb.w	r6, [r3, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cac:	movs	r6, #108	; 0x6c
    8cae:	str.w	r6, [r3, #2400]	; 0x960
      _s = s;
    8cb2:	mvn.w	r6, #71	; 0x47
    8cb6:	strb.w	r6, [r3, #2404]	; 0x964
      _b = b;
    8cba:	mvn.w	r6, #24
    8cbe:	strb.w	r6, [r3, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cc2:	movs	r6, #102	; 0x66
    8cc4:	str.w	r6, [r3, #2408]	; 0x968
    8cc8:	movs	r6, #125	; 0x7d
    8cca:	str.w	r6, [r3, #2416]	; 0x970
      _s = s;
      _b = b;
    8cce:	mvn.w	r6, #57	; 0x39
    8cd2:	strb.w	r6, [r3, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cd6:	movs	r6, #135	; 0x87
    8cd8:	str.w	r6, [r3, #2424]	; 0x978
      _s = s;
      _b = b;
    8cdc:	mvn.w	r6, #107	; 0x6b
    8ce0:	strb.w	r6, [r3, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ce4:	movs	r6, #155	; 0x9b
    8ce6:	str.w	r6, [r3, #2432]	; 0x980
      _s = s;
    8cea:	mvn.w	r6, #73	; 0x49
    8cee:	strb.w	r6, [r3, #2436]	; 0x984
      _b = b;
    8cf2:	mvn.w	r6, #27
    8cf6:	strb.w	r6, [r3, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cfa:	movs	r6, #105	; 0x69
    8cfc:	str.w	r6, [r3, #2440]	; 0x988
      _s = s;
    8d00:	mvn.w	r6, #95	; 0x5f
    8d04:	strb.w	r6, [r3, #2444]	; 0x98c
      _b = b;
    8d08:	mvn.w	r6, #48	; 0x30
    8d0c:	strb.w	r6, [r3, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d10:	movs	r6, #120	; 0x78
    8d12:	str.w	r6, [r3, #2448]	; 0x990
      _s = s;
    8d16:	mvn.w	r6, #126	; 0x7e
    8d1a:	strb.w	r6, [r3, #2452]	; 0x994
      _b = b;
    8d1e:	mvn.w	r6, #17
    8d22:	strb.w	r6, [r3, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d26:	movs	r6, #75	; 0x4b
    8d28:	str.w	r6, [r3, #2456]	; 0x998
      _s = s;
      _b = b;
    8d2c:	mvn.w	r6, #60	; 0x3c
    8d30:	strb.w	r6, [r3, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d34:	mvn.w	r6, #78	; 0x4e
    8d38:	strb.w	r6, [r3, #2412]	; 0x96c
      _b = b;
    8d3c:	mvn.w	r6, #54	; 0x36
    8d40:	strb.w	r6, [r3, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d44:	movs	r6, #124	; 0x7c
      _s = s;
    8d46:	strb.w	r1, [r3, #2476]	; 0x9ac
    8d4a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d4e:	str.w	r6, [r3, #2464]	; 0x9a0
      _s = s;
    8d52:	mov.w	r6, #122	; 0x7a
    8d56:	strb.w	r1, [r3, #2492]	; 0x9bc
    8d5a:	mov.w	r1, #4294967295
    8d5e:	strb.w	r6, [r3, #2468]	; 0x9a4
      _b = b;
    8d62:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d66:	strb.w	r1, [r3, #2516]	; 0x9d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d6a:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    8d6c:	strb.w	r6, [r3, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d70:	movs	r6, #155	; 0x9b
    8d72:	str.w	r1, [r3, #2520]	; 0x9d8
      _s = s;
    8d76:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d7a:	str.w	r6, [r3, #2472]	; 0x9a8
      _s = s;
      _b = b;
    8d7e:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d82:	strb.w	r1, [r3, #2524]	; 0x9dc
    8d86:	mov.w	r1, #4294967295
      _b = b;
    8d8a:	strb.w	r6, [r3, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d8e:	movs	r6, #140	; 0x8c
      _s = s;
    8d90:	strb.w	r1, [r3, #2532]	; 0x9e4
    8d94:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d98:	str.w	r6, [r3, #2480]	; 0x9b0
      _s = s;
    8d9c:	mvn.w	r6, #25
    8da0:	strb.w	r1, [r3, #2540]	; 0x9ec
    8da4:	mov.w	r1, #4294967295
    8da8:	strb.w	r6, [r3, #2484]	; 0x9b4
      _b = b;
    8dac:	strb.w	r6, [r3, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8db0:	movs	r6, #144	; 0x90
      _s = s;
    8db2:	strb.w	r1, [r3, #2548]	; 0x9f4
    8db6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dba:	str.w	r6, [r3, #2488]	; 0x9b8
      _s = s;
      _b = b;
    8dbe:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dc2:	str.w	r5, [r3, #2496]	; 0x9c0
      _s = s;
      _b = b;
    8dc6:	strb.w	r6, [r3, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dca:	movs	r6, #170	; 0xaa
      _s = s;
    8dcc:	strb.w	r5, [r3, #2500]	; 0x9c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dd0:	str.w	r6, [r3, #2512]	; 0x9d0
      _s = s;
      _b = b;
    8dd4:	mov.w	r6, #119	; 0x77
    8dd8:	strb.w	r5, [r3, #2501]	; 0x9c5
    8ddc:	strb.w	r6, [r3, #2517]	; 0x9d5
    8de0:	mov.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8de4:	str.w	r5, [r3, #2504]	; 0x9c8
      _s = s;
      _b = b;
    8de8:	strb.w	r6, [r3, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dec:	movs	r6, #151	; 0x97
      _s = s;
    8dee:	strb.w	r5, [r3, #2508]	; 0x9cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8df2:	str.w	r6, [r3, #2528]	; 0x9e0
      _s = s;
      _b = b;
    8df6:	mov.w	r6, #91	; 0x5b
    8dfa:	strb.w	r5, [r3, #2509]	; 0x9cd
    8dfe:	strb.w	r6, [r3, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e02:	movs	r6, #160	; 0xa0
    8e04:	str.w	r6, [r3, #2536]	; 0x9e8
      _s = s;
      _b = b;
    8e08:	mov.w	r6, #101	; 0x65
    8e0c:	strb.w	r6, [r3, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e10:	movs	r6, #145	; 0x91
    8e12:	str.w	r6, [r3, #2544]	; 0x9f0
      _s = s;
      _b = b;
    8e16:	mvn.w	r6, #74	; 0x4a
    8e1a:	strb.w	r6, [r3, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e1e:	movs	r6, #150	; 0x96
      _s = s;
    8e20:	strb.w	r1, [r3, #2556]	; 0x9fc
    8e24:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e28:	str.w	r6, [r3, #2552]	; 0x9f8
      _s = s;
      _b = b;
    8e2c:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e30:	strb.w	r1, [r3, #2564]	; 0xa04
    8e34:	mov.w	r1, #4294967295
      _b = b;
    8e38:	strb.w	r6, [r3, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e3c:	movs	r6, #139	; 0x8b
      _s = s;
    8e3e:	strb.w	r1, [r3, #2580]	; 0xa14
    8e42:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e46:	str.w	r6, [r3, #2560]	; 0xa00
      _s = s;
      _b = b;
    8e4a:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e4e:	strb.w	r1, [r3, #2588]	; 0xa1c
    8e52:	mov.w	r1, #4294967295
      _b = b;
    8e56:	strb.w	r6, [r3, #2565]	; 0xa05
    8e5a:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e5e:	strb.w	r1, [r3, #2596]	; 0xa24
    8e62:	mov.w	r1, #4294967295
      _b = b;
    8e66:	strb.w	r6, [r3, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e6a:	movs	r6, #133	; 0x85
      _s = s;
    8e6c:	strb.w	r1, [r3, #2604]	; 0xa2c
    8e70:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e74:	str.w	r6, [r3, #2576]	; 0xa10
      _s = s;
      _b = b;
    8e78:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e7c:	strb.w	r1, [r3, #2612]	; 0xa34
    8e80:	mov.w	r1, #4294967295
      _b = b;
    8e84:	strb.w	r6, [r3, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e88:	movs	r6, #151	; 0x97
      _s = s;
    8e8a:	strb.w	r1, [r3, #2620]	; 0xa3c
    8e8e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e92:	str.w	r6, [r3, #2584]	; 0xa18
      _s = s;
      _b = b;
    8e96:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e9a:	strb.w	lr, [r3, #2572]	; 0xa0c
      _b = b;
    8e9e:	strb.w	r6, [r3, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea2:	movs	r6, #133	; 0x85
      _s = s;
    8ea4:	strb.w	r1, [r3, #2628]	; 0xa44
    8ea8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eac:	str.w	r6, [r3, #2592]	; 0xa20
    8eb0:	movs	r6, #144	; 0x90
    8eb2:	str.w	r6, [r3, #2600]	; 0xa28
      _s = s;
      _b = b;
    8eb6:	mvn.w	r6, #82	; 0x52
    8eba:	strb.w	r6, [r3, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ebe:	movs	r6, #134	; 0x86
    8ec0:	str.w	r6, [r3, #2608]	; 0xa30
      _s = s;
      _b = b;
    8ec4:	mvn.w	r6, #73	; 0x49
    8ec8:	strb.w	r6, [r3, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ecc:	movs	r6, #148	; 0x94
    8ece:	str.w	r6, [r3, #2616]	; 0xa38
      _s = s;
      _b = b;
    8ed2:	mvn.w	r6, #76	; 0x4c
    8ed6:	strb.w	r6, [r3, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eda:	movs	r6, #161	; 0xa1
    8edc:	str.w	r6, [r3, #2624]	; 0xa40
      _s = s;
      _b = b;
    8ee0:	mvn.w	r6, #18
    8ee4:	strb.w	r6, [r3, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ee8:	movs	r6, #153	; 0x99
    8eea:	str.w	r6, [r3, #2632]	; 0xa48
      _s = s;
    8eee:	mvn.w	r6, #108	; 0x6c
    8ef2:	strb.w	r6, [r3, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ef6:	movs	r6, #132	; 0x84
    8ef8:	str.w	r6, [r3, #2568]	; 0xa08
      _s = s;
      _b = b;
    8efc:	mvn.w	r6, #58	; 0x3a
    8f00:	strb.w	r6, [r3, #2597]	; 0xa25
    8f04:	mvn.w	r6, #22
    8f08:	strb.w	r6, [r3, #2637]	; 0xa4d
    8f0c:	mov.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f10:	strb.w	r1, [r3, #2668]	; 0xa6c
    8f14:	mvn.w	r1, #2
      _b = b;
    8f18:	strb.w	r6, [r3, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f1c:	mov.w	r6, #95	; 0x5f
    8f20:	strb.w	r1, [r3, #2676]	; 0xa74
    8f24:	mov.w	r1, #4294967295
    8f28:	strb.w	r6, [r3, #2644]	; 0xa54
      _b = b;
    8f2c:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f30:	strb.w	r1, [r3, #2700]	; 0xa8c
    8f34:	mov.w	r1, #4294967295
      _b = b;
    8f38:	strb.w	r6, [r3, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f3c:	movs	r6, #88	; 0x58
      _s = s;
    8f3e:	strb.w	r1, [r3, #2716]	; 0xa9c
    8f42:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f46:	str.w	r6, [r3, #2648]	; 0xa58
      _s = s;
      _b = b;
    8f4a:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f4e:	strb.w	lr, [r3, #2652]	; 0xa5c
      _b = b;
    8f52:	strb.w	r6, [r3, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f56:	movs	r6, #94	; 0x5e
      _s = s;
    8f58:	strb.w	ip, [r3, #2660]	; 0xa64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f5c:	str.w	r6, [r3, #2656]	; 0xa60
      _s = s;
      _b = b;
    8f60:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f64:	str.w	r8, [r3, #2712]	; 0xa98
      _s = s;
      _b = b;
    8f68:	strb.w	r6, [r3, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f6c:	movs	r6, #144	; 0x90
      _s = s;
    8f6e:	strb.w	r1, [r3, #2724]	; 0xaa4
    8f72:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f76:	str.w	r6, [r3, #2664]	; 0xa68
      _s = s;
      _b = b;
    8f7a:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f7e:	str.w	r5, [r3, #2688]	; 0xa80
      _s = s;
      _b = b;
    8f82:	strb.w	r6, [r3, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f86:	movs	r6, #104	; 0x68
      _s = s;
    8f88:	strb.w	r5, [r3, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f8c:	str.w	r6, [r3, #2672]	; 0xa70
      _s = s;
      _b = b;
    8f90:	mvn.w	r6, #29
    8f94:	strb.w	r5, [r3, #2693]	; 0xa85
    8f98:	strb.w	r6, [r3, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f9c:	movs	r6, #126	; 0x7e
    8f9e:	str.w	r6, [r3, #2680]	; 0xa78
      _s = s;
    8fa2:	mvn.w	r6, #12
    8fa6:	strb.w	r6, [r3, #2684]	; 0xa7c
      _b = b;
    8faa:	mvn.w	r6, #62	; 0x3e
    8fae:	strb.w	r6, [r3, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fb2:	movs	r6, #169	; 0xa9
    8fb4:	str.w	r6, [r3, #2696]	; 0xa88
    8fb8:	movs	r6, #167	; 0xa7
    8fba:	str.w	r6, [r3, #2704]	; 0xa90
      _s = s;
    8fbe:	mvn.w	r6, #88	; 0x58
    8fc2:	strb.w	r6, [r3, #2708]	; 0xa94
      _b = b;
    8fc6:	mvn.w	r6, #83	; 0x53
    8fca:	strb.w	r6, [r3, #2709]	; 0xa95
    8fce:	mov.w	r6, #25
    8fd2:	strb.w	r6, [r3, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fd6:	movs	r6, #166	; 0xa6
    8fd8:	str.w	r6, [r3, #2720]	; 0xaa0
    8fdc:	movs	r6, #118	; 0x76
    8fde:	str.w	r6, [r3, #2640]	; 0xa50
      _s = s;
      _b = b;
    8fe2:	mov.w	r6, #61	; 0x3d
    8fe6:	strb.w	r6, [r3, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fea:	movs	r6, #158	; 0x9e
      _s = s;
    8fec:	strb.w	r1, [r3, #2732]	; 0xaac
    8ff0:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ff4:	str.w	r6, [r3, #2728]	; 0xaa8
      _s = s;
      _b = b;
    8ff8:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ffc:	strb.w	r1, [r3, #2740]	; 0xab4
    9000:	mvn.w	r1, #2
      _b = b;
    9004:	strb.w	r6, [r3, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9008:	movs	r6, #162	; 0xa2
      _s = s;
    900a:	strb.w	r1, [r3, #2748]	; 0xabc
    900e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9012:	str.w	r6, [r3, #2736]	; 0xab0
      _s = s;
      _b = b;
    9016:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    901a:	strb.w	r1, [r3, #2756]	; 0xac4
    901e:	mov.w	r1, #4294967295
      _b = b;
    9022:	strb.w	r6, [r3, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9026:	movs	r6, #151	; 0x97
      _s = s;
    9028:	strb.w	r1, [r3, #2764]	; 0xacc
    902c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9030:	str.w	r6, [r3, #2744]	; 0xab8
      _s = s;
      _b = b;
    9034:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9038:	strb.w	r1, [r3, #2772]	; 0xad4
    903c:	mov.w	r1, #4294967295
      _b = b;
    9040:	strb.w	r6, [r3, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9044:	movs	r6, #154	; 0x9a
      _s = s;
    9046:	strb.w	r1, [r3, #2780]	; 0xadc
    904a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    904e:	str.w	r6, [r3, #2752]	; 0xac0
    9052:	movs	r6, #136	; 0x88
      _s = s;
    9054:	strb.w	r1, [r3, #2788]	; 0xae4
    9058:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    905c:	str.w	r6, [r3, #2760]	; 0xac8
      _s = s;
      _b = b;
    9060:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9064:	strb.w	r1, [r3, #2796]	; 0xaec
    9068:	mov.w	r1, #4294967295
      _b = b;
    906c:	strb.w	r6, [r3, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9070:	movs	r6, #140	; 0x8c
      _s = s;
    9072:	strb.w	r1, [r3, #2812]	; 0xafc
    9076:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    907a:	str.w	r6, [r3, #2768]	; 0xad0
      _s = s;
      _b = b;
    907e:	mvn.w	r6, #55	; 0x37
    9082:	strb.w	sl, [r3, #2757]	; 0xac5
    9086:	strb.w	r6, [r3, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    908a:	movs	r6, #155	; 0x9b
    908c:	str.w	r6, [r3, #2776]	; 0xad8
      _s = s;
      _b = b;
    9090:	mvn.w	r6, #105	; 0x69
    9094:	strb.w	r6, [r3, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9098:	movs	r6, #154	; 0x9a
    909a:	str.w	r6, [r3, #2784]	; 0xae0
      _s = s;
      _b = b;
    909e:	mvn.w	r6, #110	; 0x6e
    90a2:	strb.w	r6, [r3, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a6:	movs	r6, #153	; 0x99
    90a8:	str.w	r6, [r3, #2792]	; 0xae8
      _s = s;
      _b = b;
    90ac:	mvn.w	r6, #79	; 0x4f
    90b0:	strb.w	r6, [r3, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90b4:	movs	r6, #132	; 0x84
    90b6:	str.w	r6, [r3, #2800]	; 0xaf0
      _s = s;
    90ba:	mvn.w	r6, #64	; 0x40
    90be:	strb.w	r6, [r3, #2804]	; 0xaf4
      _b = b;
    90c2:	mvn.w	r6, #49	; 0x31
    90c6:	strb.w	r6, [r3, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90ca:	movs	r6, #146	; 0x92
    90cc:	str.w	r6, [r3, #2808]	; 0xaf8
      _s = s;
      _b = b;
    90d0:	mvn.w	r6, #45	; 0x2d
    90d4:	strb.w	r6, [r3, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90d8:	movs	r6, #164	; 0xa4
      _s = s;
    90da:	strb.w	r1, [r3, #2820]	; 0xb04
    90de:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90e2:	str.w	r6, [r3, #2816]	; 0xb00
      _s = s;
      _b = b;
    90e6:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90ea:	strb.w	r1, [r3, #2868]	; 0xb34
    90ee:	mov.w	r1, #4294967295
      _b = b;
    90f2:	strb.w	r6, [r3, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90f6:	movs	r6, #146	; 0x92
      _s = s;
    90f8:	strb.w	r1, [r3, #2876]	; 0xb3c
    90fc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9100:	str.w	r6, [r3, #2824]	; 0xb08
      _s = s;
    9104:	mvn.w	r6, #109	; 0x6d
    9108:	strb.w	lr, [r3, #2900]	; 0xb54
    910c:	strb.w	r6, [r3, #2828]	; 0xb0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9110:	movs	r6, #102	; 0x66
      _s = s;
      _b = b;
    9112:	strb.w	sl, [r3, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9116:	str.w	r6, [r3, #2832]	; 0xb10
      _s = s;
      _b = b;
    911a:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    911e:	str.w	r5, [r3, #2880]	; 0xb40
      _s = s;
      _b = b;
    9122:	strb.w	r6, [r3, #2837]	; 0xb15
    9126:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    912a:	strb.w	r5, [r3, #2884]	; 0xb44
      _b = b;
    912e:	strb.w	r6, [r3, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9132:	movs	r6, #106	; 0x6a
      _s = s;
      _b = b;
    9134:	strb.w	r5, [r3, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9138:	str.w	r6, [r3, #2848]	; 0xb20
      _s = s;
    913c:	mov.w	r6, #116	; 0x74
    9140:	strb.w	r6, [r3, #2852]	; 0xb24
      _b = b;
    9144:	mvn.w	r6, #11
    9148:	strb.w	r6, [r3, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    914c:	movs	r6, #109	; 0x6d
    914e:	str.w	r6, [r3, #2856]	; 0xb28
      _s = s;
    9152:	mvn.w	r6, #11
    9156:	strb.w	r6, [r3, #2860]	; 0xb2c
      _b = b;
    915a:	mvn.w	r6, #42	; 0x2a
    915e:	strb.w	r6, [r3, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9162:	movs	r6, #119	; 0x77
    9164:	str.w	r6, [r3, #2864]	; 0xb30
      _s = s;
      _b = b;
    9168:	mvn.w	r6, #34	; 0x22
    916c:	strb.w	r6, [r3, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9170:	movs	r6, #105	; 0x69
    9172:	str.w	r6, [r3, #2872]	; 0xb38
      _s = s;
      _b = b;
    9176:	mvn.w	r6, #54	; 0x36
    917a:	strb.w	r6, [r3, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    917e:	movs	r6, #171	; 0xab
    9180:	str.w	r6, [r3, #2888]	; 0xb48
      _s = s;
    9184:	mvn.w	r6, #70	; 0x46
    9188:	strb.w	r6, [r3, #2892]	; 0xb4c
      _b = b;
    918c:	mvn.w	r6, #65	; 0x41
    9190:	strb.w	r6, [r3, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9194:	movs	r6, #172	; 0xac
    9196:	str.w	r6, [r3, #2896]	; 0xb50
      _s = s;
    919a:	mvn.w	r6, #61	; 0x3d
    919e:	strb.w	r6, [r3, #2836]	; 0xb14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a2:	movs	r6, #78	; 0x4e
    91a4:	str.w	r6, [r3, #2840]	; 0xb18
      _s = s;
    91a8:	mvn.w	r6, #47	; 0x2f
    91ac:	strb.w	r6, [r3, #2844]	; 0xb1c
      _b = b;
    91b0:	mov.w	r6, #115	; 0x73
    91b4:	strb.w	r6, [r3, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91b8:	movs	r6, #172	; 0xac
      _s = s;
    91ba:	strb.w	r1, [r3, #2908]	; 0xb5c
    91be:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91c2:	str.w	r6, [r3, #2904]	; 0xb58
      _s = s;
      _b = b;
    91c6:	mov.w	r6, #17
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91ca:	strb.w	r1, [r3, #2916]	; 0xb64
      _b = b;
    91ce:	strb.w	r6, [r3, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91d2:	movs	r6, #176	; 0xb0
      _s = s;
    91d4:	strb.w	r1, [r3, #2924]	; 0xb6c
    91d8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91dc:	str.w	r6, [r3, #2912]	; 0xb60
      _s = s;
      _b = b;
    91e0:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91e4:	strb.w	r1, [r3, #2932]	; 0xb74
    91e8:	mov.w	r1, #4294967295
      _b = b;
    91ec:	strb.w	r6, [r3, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91f0:	movs	r6, #171	; 0xab
      _s = s;
    91f2:	strb.w	r1, [r3, #2940]	; 0xb7c
    91f6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91fa:	str.w	r6, [r3, #2928]	; 0xb70
      _s = s;
      _b = b;
    91fe:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9202:	strb.w	r1, [r3, #2948]	; 0xb84
    9206:	mvn.w	r1, #2
      _b = b;
    920a:	strb.w	r6, [r3, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    920e:	movs	r6, #157	; 0x9d
      _s = s;
    9210:	strb.w	r1, [r3, #2956]	; 0xb8c
    9214:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9218:	str.w	r6, [r3, #2936]	; 0xb78
      _s = s;
      _b = b;
    921c:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9220:	strb.w	r1, [r3, #2964]	; 0xb94
    9224:	mov.w	r1, #4294967295
      _b = b;
    9228:	strb.w	r6, [r3, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    922c:	movs	r6, #162	; 0xa2
      _s = s;
    922e:	strb.w	r1, [r3, #2972]	; 0xb9c
    9232:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9236:	str.w	r6, [r3, #2944]	; 0xb80
      _s = s;
      _b = b;
    923a:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    923e:	strb.w	r1, [r3, #2980]	; 0xba4
    9242:	mov.w	r1, #4294967295
      _b = b;
    9246:	strb.w	r6, [r3, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    924a:	movs	r6, #152	; 0x98
    924c:	str.w	r8, [r3, #2920]	; 0xb68
    9250:	str.w	r6, [r3, #2952]	; 0xb88
    9254:	movs	r6, #151	; 0x97
      _s = s;
    9256:	strb.w	r1, [r3, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    925a:	str.w	r6, [r3, #2960]	; 0xb90
      _s = s;
      _b = b;
    925e:	mvn.w	r6, #96	; 0x60
    9262:	strb.w	r6, [r3, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9266:	movs	r6, #159	; 0x9f
    9268:	str.w	r6, [r3, #2968]	; 0xb98
      _s = s;
      _b = b;
    926c:	mvn.w	r6, #114	; 0x72
    9270:	strb.w	r6, [r3, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9274:	movs	r6, #152	; 0x98
    9276:	str.w	r6, [r3, #2976]	; 0xba0
      _s = s;
      _b = b;
    927a:	mvn.w	r6, #82	; 0x52
    927e:	strb.w	r6, [r3, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9282:	movs	r6, #154	; 0x9a
    9284:	str.w	r6, [r3, #2984]	; 0xba8
      _s = s;
      _b = b;
    9288:	mov.w	r6, #32
    928c:	strb.w	r6, [r3, #2917]	; 0xb65
    9290:	mvn.w	r6, #43	; 0x2b
    9294:	strb.w	r6, [r3, #2957]	; 0xb8d
    9298:	mvn.w	r6, #46	; 0x2e
    929c:	strb.w	r6, [r3, #2989]	; 0xbad
    92a0:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    92a4:	strb.w	r1, [r3, #2996]	; 0xbb4
    92a8:	mov.w	r1, #4294967295
      _b = b;
    92ac:	strb.w	r6, [r3, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92b0:	movs	r6, #145	; 0x91
      _s = s;
    92b2:	strb.w	r1, [r3, #3020]	; 0xbcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92b6:	str.w	r6, [r3, #3000]	; 0xbb8
      _s = s;
    92ba:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92be:	str.w	ip, [r3, #2992]	; 0xbb0
      _s = s;
    92c2:	strb.w	r6, [r3, #3004]	; 0xbbc
      _b = b;
    92c6:	mvn.w	r6, #77	; 0x4d
    92ca:	strb.w	lr, [r3, #3029]	; 0xbd5
    92ce:	strb.w	r6, [r3, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92d2:	movs	r6, #164	; 0xa4
    92d4:	str.w	r6, [r3, #3008]	; 0xbc0
      _s = s;
    92d8:	mvn.w	r6, #6
    92dc:	strb.w	r6, [r3, #3012]	; 0xbc4
      _b = b;
    92e0:	mvn.w	r6, #9
    92e4:	strb.w	r6, [r3, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92e8:	movs	r6, #163	; 0xa3
    92ea:	str.w	r6, [r3, #3016]	; 0xbc8
      _s = s;
      _b = b;
    92ee:	mvn.w	r6, #16
    92f2:	strb.w	r6, [r3, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92f6:	movs	r6, #112	; 0x70
    92f8:	mov	r1, r6
    92fa:	str.w	r6, [r3, #3024]	; 0xbd0
      _s = s;
    92fe:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9302:	str.w	r1, [r3, #3032]	; 0xbd8
      _s = s;
    9306:	mov.w	r1, #4294967295
    930a:	strb.w	r6, [r3, #3028]	; 0xbd4
    930e:	mvn.w	r6, #115	; 0x73
    9312:	strb.w	r1, [r3, #3060]	; 0xbf4
    9316:	mov.w	r1, #4294967295
    931a:	strb.w	r6, [r3, #3036]	; 0xbdc
      _b = b;
    931e:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9322:	strb.w	r1, [r3, #3076]	; 0xc04
    9326:	mov.w	r1, #4294967295
      _b = b;
    932a:	strb.w	r6, [r3, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    932e:	movs	r6, #128	; 0x80
    9330:	str.w	r6, [r3, #3040]	; 0xbe0
      _s = s;
    9334:	mvn.w	r6, #74	; 0x4a
    9338:	strb.w	r6, [r3, #3044]	; 0xbe4
      _b = b;
    933c:	mvn.w	r6, #36	; 0x24
    9340:	strb.w	r6, [r3, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9344:	movs	r6, #129	; 0x81
    9346:	str.w	r6, [r3, #3048]	; 0xbe8
      _s = s;
    934a:	mvn.w	r6, #50	; 0x32
    934e:	strb.w	r6, [r3, #3052]	; 0xbec
      _b = b;
    9352:	mvn.w	r6, #40	; 0x28
    9356:	strb.w	r6, [r3, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    935a:	movs	r6, #127	; 0x7f
    935c:	str.w	r6, [r3, #3056]	; 0xbf0
      _s = s;
      _b = b;
    9360:	mvn.w	r6, #41	; 0x29
    9364:	strb.w	r6, [r3, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9368:	movs	r6, #114	; 0x72
    936a:	str.w	r6, [r3, #3064]	; 0xbf8
      _s = s;
    936e:	mvn.w	r6, #14
    9372:	strb.w	r6, [r3, #3068]	; 0xbfc
      _b = b;
    9376:	mvn.w	r6, #33	; 0x21
    937a:	strb.w	r6, [r3, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    937e:	movs	r6, #165	; 0xa5
    9380:	str.w	r6, [r3, #3072]	; 0xc00
      _s = s;
      _b = b;
    9384:	mov.w	r6, #95	; 0x5f
    9388:	strb.w	r6, [r3, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    938c:	movs	r6, #169	; 0xa9
      _s = s;
    938e:	strb.w	r1, [r3, #3092]	; 0xc14
    9392:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9396:	str.w	r6, [r3, #3080]	; 0xc08
      _s = s;
    939a:	mvn.w	r6, #89	; 0x59
    939e:	strb.w	r1, [r3, #3100]	; 0xc1c
    93a2:	strb.w	r6, [r3, #3084]	; 0xc0c
      _b = b;
    93a6:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93aa:	strb.w	r1, [r3, #3108]	; 0xc24
    93ae:	mov.w	r1, #4294967295
      _b = b;
    93b2:	strb.w	r6, [r3, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93b6:	movs	r6, #177	; 0xb1
      _s = s;
    93b8:	strb.w	r1, [r3, #3140]	; 0xc44
    93bc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93c0:	str.w	r6, [r3, #3088]	; 0xc10
      _s = s;
      _b = b;
    93c4:	mov.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93c8:	strb.w	r1, [r3, #3148]	; 0xc4c
    93cc:	mvn.w	r1, #2
      _b = b;
    93d0:	strb.w	r6, [r3, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93d4:	movs	r6, #178	; 0xb2
      _s = s;
    93d6:	strb.w	r1, [r3, #3156]	; 0xc54
    93da:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93de:	str.w	r6, [r3, #3096]	; 0xc18
      _s = s;
      _b = b;
    93e2:	mov.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93e6:	str.w	r8, [r3, #3104]	; 0xc20
      _s = s;
      _b = b;
    93ea:	strb.w	r6, [r3, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93ee:	movs	r6, #161	; 0xa1
      _s = s;
      _b = b;
    93f0:	strb.w	ip, [r3, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93f4:	str.w	r6, [r3, #3112]	; 0xc28
      _s = s;
    93f8:	mvn.w	r6, #123	; 0x7b
    93fc:	strb.w	r1, [r3, #3164]	; 0xc5c
    9400:	mvn.w	r1, #2
    9404:	strb.w	r6, [r3, #3116]	; 0xc2c
      _b = b;
    9408:	mvn.w	r6, #103	; 0x67
    940c:	strb.w	r6, [r3, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9410:	movs	r6, #111	; 0x6f
    9412:	str.w	r6, [r3, #3120]	; 0xc30
      _s = s;
    9416:	mvn.w	r6, #55	; 0x37
    941a:	strb.w	r6, [r3, #3124]	; 0xc34
      _b = b;
    941e:	mvn.w	r6, #88	; 0x58
    9422:	strb.w	r6, [r3, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9426:	movs	r6, #142	; 0x8e
    9428:	str.w	r6, [r3, #3128]	; 0xc38
      _s = s;
    942c:	mvn.w	r6, #62	; 0x3e
    9430:	strb.w	r6, [r3, #3132]	; 0xc3c
      _b = b;
    9434:	mov.w	r6, #124	; 0x7c
    9438:	strb.w	r6, [r3, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    943c:	movs	r6, #168	; 0xa8
    943e:	str.w	r6, [r3, #3136]	; 0xc40
      _s = s;
      _b = b;
    9442:	mvn.w	r6, #114	; 0x72
    9446:	strb.w	r6, [r3, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    944a:	movs	r6, #164	; 0xa4
    944c:	str.w	r6, [r3, #3144]	; 0xc48
      _s = s;
      _b = b;
    9450:	mvn.w	r6, #75	; 0x4b
    9454:	strb.w	r6, [r3, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9458:	movs	r6, #162	; 0xa2
    945a:	str.w	r6, [r3, #3152]	; 0xc50
    945e:	str.w	r6, [r3, #3160]	; 0xc58
      _s = s;
      _b = b;
    9462:	mov.w	r6, #57	; 0x39
    9466:	strb.w	r6, [r3, #3109]	; 0xc25
    946a:	mov.w	r6, #63	; 0x3f
    946e:	strb.w	r6, [r3, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9472:	movs	r6, #151	; 0x97
      _s = s;
    9474:	strb.w	r1, [r3, #3172]	; 0xc64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9478:	movs	r1, #156	; 0x9c
    947a:	str.w	r6, [r3, #3168]	; 0xc60
      _s = s;
      _b = b;
    947e:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9482:	str.w	r1, [r3, #3176]	; 0xc68
      _s = s;
    9486:	mov.w	r1, #4294967295
      _b = b;
    948a:	strb.w	r6, [r3, #3173]	; 0xc65
    948e:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9492:	strb.w	r1, [r3, #3180]	; 0xc6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9496:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    9498:	strb.w	r6, [r3, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    949c:	movs	r6, #157	; 0x9d
    949e:	str.w	r1, [r3, #3192]	; 0xc78
      _s = s;
    94a2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94a6:	str.w	r6, [r3, #3184]	; 0xc70
      _s = s;
    94aa:	mvn.w	r6, #8
    94ae:	strb.w	r1, [r3, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94b2:	movs	r1, #156	; 0x9c
      _s = s;
    94b4:	strb.w	r6, [r3, #3188]	; 0xc74
      _b = b;
    94b8:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94bc:	str.w	r1, [r3, #3200]	; 0xc80
      _s = s;
    94c0:	mvn.w	r1, #2
      _b = b;
    94c4:	strb.w	r6, [r3, #3189]	; 0xc75
    94c8:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94cc:	strb.w	r1, [r3, #3204]	; 0xc84
    94d0:	mov.w	r1, #4294967295
      _b = b;
    94d4:	strb.w	r6, [r3, #3197]	; 0xc7d
    94d8:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94dc:	strb.w	r1, [r3, #3228]	; 0xc9c
    94e0:	mov.w	r1, #4294967295
      _b = b;
    94e4:	strb.w	r6, [r3, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94e8:	movs	r6, #160	; 0xa0
      _s = s;
    94ea:	strb.w	r1, [r3, #3236]	; 0xca4
    94ee:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94f2:	str.w	r6, [r3, #3208]	; 0xc88
      _s = s;
    94f6:	mvn.w	r6, #54	; 0x36
    94fa:	strb.w	r1, [r3, #3244]	; 0xcac
    94fe:	mvn.w	r1, #2
    9502:	strb.w	r6, [r3, #3212]	; 0xc8c
      _b = b;
    9506:	mvn.w	r6, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    950a:	strb.w	r1, [r3, #3252]	; 0xcb4
    950e:	mvn.w	r1, #2
      _b = b;
    9512:	strb.w	r6, [r3, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9516:	movs	r6, #143	; 0x8f
    9518:	str.w	r6, [r3, #3216]	; 0xc90
      _s = s;
    951c:	mvn.w	r6, #51	; 0x33
    9520:	strb.w	r6, [r3, #3220]	; 0xc94
      _b = b;
    9524:	mvn.w	r6, #48	; 0x30
    9528:	strb.w	r6, [r3, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    952c:	movs	r6, #145	; 0x91
    952e:	str.w	r6, [r3, #3224]	; 0xc98
      _s = s;
      _b = b;
    9532:	mvn.w	r6, #78	; 0x4e
    9536:	strb.w	r6, [r3, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    953a:	movs	r6, #134	; 0x86
    953c:	str.w	r6, [r3, #3232]	; 0xca0
      _s = s;
      _b = b;
    9540:	mvn.w	r6, #102	; 0x66
    9544:	strb.w	r6, [r3, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9548:	movs	r6, #144	; 0x90
    954a:	str.w	r6, [r3, #3240]	; 0xca8
      _s = s;
      _b = b;
    954e:	mvn.w	r6, #49	; 0x31
    9552:	strb.w	r6, [r3, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9556:	movs	r6, #145	; 0x91
    9558:	str.w	r6, [r3, #3248]	; 0xcb0
      _s = s;
      _b = b;
    955c:	mvn.w	r6, #63	; 0x3f
    9560:	strb.w	r6, [r3, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9564:	movs	r6, #139	; 0x8b
      _s = s;
    9566:	strb.w	r1, [r3, #3260]	; 0xcbc
    956a:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    956e:	str.w	r6, [r3, #3256]	; 0xcb8
      _s = s;
      _b = b;
    9572:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9576:	strb.w	r1, [r3, #3316]	; 0xcf4
    957a:	mvn.w	r1, #99	; 0x63
      _b = b;
    957e:	strb.w	r6, [r3, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9582:	movs	r6, #164	; 0xa4
      _s = s;
    9584:	strb.w	r1, [r3, #3324]	; 0xcfc
    9588:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    958c:	str.w	r6, [r3, #3264]	; 0xcc0
      _s = s;
    9590:	mvn.w	r6, #120	; 0x78
    9594:	strb.w	lr, [r3, #3340]	; 0xd0c
    9598:	strb.w	r6, [r3, #3268]	; 0xcc4
      _b = b;
    959c:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95a0:	strb.w	fp, [r3, #3284]	; 0xcd4
      _b = b;
    95a4:	strb.w	r6, [r3, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95a8:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    95aa:	strb.w	sl, [r3, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95ae:	str.w	r6, [r3, #3272]	; 0xcc8
      _s = s;
    95b2:	mvn.w	r6, #89	; 0x59
    95b6:	strb.w	r6, [r3, #3276]	; 0xccc
      _b = b;
    95ba:	mvn.w	r6, #56	; 0x38
    95be:	strb.w	r6, [r3, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95c2:	movs	r6, #183	; 0xb7
    95c4:	str.w	r6, [r3, #3280]	; 0xcd0
      _s = s;
      _b = b;
    95c8:	mov.w	r6, #73	; 0x49
    95cc:	strb.w	r6, [r3, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95d0:	movs	r6, #174	; 0xae
    95d2:	str.w	r6, [r3, #3288]	; 0xcd8
      _s = s;
    95d6:	mvn.w	r6, #17
    95da:	strb.w	r6, [r3, #3292]	; 0xcdc
      _b = b;
    95de:	mov.w	r6, #107	; 0x6b
    95e2:	strb.w	r6, [r3, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95e6:	movs	r6, #151	; 0x97
    95e8:	str.w	r6, [r3, #3296]	; 0xce0
      _s = s;
    95ec:	mov.w	r6, #93	; 0x5d
    95f0:	strb.w	r6, [r3, #3300]	; 0xce4
      _b = b;
    95f4:	mvn.w	r6, #40	; 0x28
    95f8:	strb.w	r6, [r3, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95fc:	movs	r6, #102	; 0x66
    95fe:	str.w	r6, [r3, #3304]	; 0xce8
      _s = s;
    9602:	mvn.w	r6, #71	; 0x47
    9606:	strb.w	r6, [r3, #3308]	; 0xcec
      _b = b;
    960a:	mvn.w	r6, #31
    960e:	strb.w	r6, [r3, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9612:	movs	r6, #126	; 0x7e
    9614:	str.w	r6, [r3, #3312]	; 0xcf0
    9618:	movs	r6, #135	; 0x87
    961a:	str.w	r6, [r3, #3320]	; 0xcf8
      _s = s;
      _b = b;
    961e:	mvn.w	r6, #32
    9622:	strb.w	r6, [r3, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9626:	movs	r6, #118	; 0x76
    9628:	str.w	r6, [r3, #3328]	; 0xd00
      _s = s;
    962c:	mvn.w	r6, #100	; 0x64
    9630:	strb.w	r6, [r3, #3332]	; 0xd04
      _b = b;
    9634:	mvn.w	r6, #89	; 0x59
    9638:	strb.w	r6, [r3, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    963c:	movs	r6, #173	; 0xad
    963e:	str.w	r6, [r3, #3336]	; 0xd08
      _s = s;
      _b = b;
    9642:	mov.w	r6, #127	; 0x7f
    9646:	strb.w	r6, [r3, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    964a:	movs	r6, #176	; 0xb0
      _s = s;
    964c:	strb.w	r1, [r3, #3348]	; 0xd14
    9650:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9654:	str.w	r6, [r3, #3344]	; 0xd10
    9658:	movs	r6, #160	; 0xa0
      _s = s;
    965a:	strb.w	r1, [r3, #3356]	; 0xd1c
    965e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9662:	str.w	r6, [r3, #3352]	; 0xd18
      _s = s;
      _b = b;
    9666:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    966a:	strb.w	r1, [r3, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    966e:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    9670:	strb.w	r6, [r3, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9674:	movs	r6, #153	; 0x99
    9676:	str.w	r1, [r3, #3368]	; 0xd28
      _s = s;
    967a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    967e:	str.w	r6, [r3, #3360]	; 0xd20
      _s = s;
      _b = b;
    9682:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9686:	strb.w	r1, [r3, #3372]	; 0xd2c
    968a:	mov.w	r1, #4294967295
      _b = b;
    968e:	strb.w	r6, [r3, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9692:	movs	r6, #157	; 0x9d
      _s = s;
    9694:	strb.w	r1, [r3, #3380]	; 0xd34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9698:	movs	r1, #156	; 0x9c
    969a:	str.w	r6, [r3, #3376]	; 0xd30
      _s = s;
      _b = b;
    969e:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96a2:	str.w	r1, [r3, #3384]	; 0xd38
      _s = s;
    96a6:	mov.w	r1, #4294967295
      _b = b;
    96aa:	strb.w	r6, [r3, #3381]	; 0xd35
    96ae:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96b2:	strb.w	r1, [r3, #3396]	; 0xd44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96b6:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    96b8:	strb.w	r6, [r3, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96bc:	movs	r6, #165	; 0xa5
    96be:	str.w	r1, [r3, #3400]	; 0xd48
      _s = s;
    96c2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96c6:	str.w	r6, [r3, #3392]	; 0xd40
      _s = s;
      _b = b;
    96ca:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96ce:	strb.w	r1, [r3, #3404]	; 0xd4c
    96d2:	mov.w	r1, #4294967295
      _b = b;
    96d6:	strb.w	r6, [r3, #3397]	; 0xd45
    96da:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96de:	strb.w	lr, [r3, #3388]	; 0xd3c
      _b = b;
    96e2:	strb.w	r6, [r3, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96e6:	movs	r6, #145	; 0x91
      _s = s;
    96e8:	strb.w	r1, [r3, #3412]	; 0xd54
    96ec:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96f0:	str.w	r6, [r3, #3408]	; 0xd50
      _s = s;
      _b = b;
    96f4:	mvn.w	r6, #40	; 0x28
    96f8:	strb.w	r6, [r3, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96fc:	movs	r6, #134	; 0x86
    96fe:	str.w	r6, [r3, #3416]	; 0xd58
      _s = s;
    9702:	mvn.w	r6, #38	; 0x26
    9706:	strb.w	r6, [r3, #3420]	; 0xd5c
      _b = b;
    970a:	mvn.w	r6, #71	; 0x47
    970e:	strb.w	r6, [r3, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9712:	movs	r6, #125	; 0x7d
    9714:	str.w	r6, [r3, #3424]	; 0xd60
      _s = s;
    9718:	mvn.w	r6, #50	; 0x32
    971c:	strb.w	r6, [r3, #3428]	; 0xd64
      _b = b;
    9720:	mov.w	r6, #55	; 0x37
    9724:	strb.w	r6, [r3, #3365]	; 0xd25
    9728:	mov.w	r6, #81	; 0x51
    972c:	strb.w	r6, [r3, #3349]	; 0xd15
    9730:	mvn.w	r6, #90	; 0x5a
    9734:	strb.w	r6, [r3, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9738:	movs	r6, #136	; 0x88
      _s = s;
    973a:	strb.w	r1, [r3, #3436]	; 0xd6c
    973e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9742:	str.w	r6, [r3, #3432]	; 0xd68
      _s = s;
      _b = b;
    9746:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    974a:	strb.w	r1, [r3, #3452]	; 0xd7c
    974e:	mvn.w	r1, #99	; 0x63
      _b = b;
    9752:	strb.w	r6, [r3, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9756:	movs	r6, #136	; 0x88
      _s = s;
    9758:	strb.w	lr, [r3, #3468]	; 0xd8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    975c:	str.w	r6, [r3, #3440]	; 0xd70
      _s = s;
    9760:	mvn.w	r6, #7
    9764:	strb.w	lr, [r3, #3476]	; 0xd94
    9768:	strb.w	r6, [r3, #3444]	; 0xd74
      _b = b;
    976c:	mvn.w	r6, #52	; 0x34
    9770:	strb.w	r8, [r3, #3485]	; 0xd9d
    9774:	strb.w	r6, [r3, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9778:	movs	r6, #141	; 0x8d
    977a:	str.w	r6, [r3, #3448]	; 0xd78
      _s = s;
      _b = b;
    977e:	mvn.w	r6, #69	; 0x45
    9782:	strb.w	r6, [r3, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9786:	movs	r6, #174	; 0xae
    9788:	str.w	r6, [r3, #3456]	; 0xd80
      _s = s;
    978c:	mvn.w	r6, #22
    9790:	strb.w	r6, [r3, #3460]	; 0xd84
      _b = b;
    9794:	mvn.w	r6, #64	; 0x40
    9798:	strb.w	r6, [r3, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    979c:	movs	r6, #178	; 0xb2
    979e:	str.w	r6, [r3, #3464]	; 0xd88
      _s = s;
      _b = b;
    97a2:	mov.w	r6, #126	; 0x7e
    97a6:	strb.w	r6, [r3, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97aa:	movs	r6, #179	; 0xb3
    97ac:	str.w	r6, [r3, #3472]	; 0xd90
      _s = s;
      _b = b;
    97b0:	mov.w	r6, #97	; 0x61
    97b4:	strb.w	r6, [r3, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97b8:	movs	r6, #170	; 0xaa
    97ba:	str.w	r6, [r3, #3480]	; 0xd98
      _s = s;
    97be:	mov.w	r6, #91	; 0x5b
    97c2:	strb.w	r6, [r3, #3484]	; 0xd9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97c6:	movs	r6, #140	; 0x8c
    97c8:	str.w	r6, [r3, #3488]	; 0xda0
      _s = s;
    97cc:	mov.w	r6, #112	; 0x70
    97d0:	strb.w	r6, [r3, #3492]	; 0xda4
      _b = b;
    97d4:	mvn.w	r6, #27
    97d8:	strb.w	r6, [r3, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97dc:	movs	r6, #102	; 0x66
    97de:	str.w	r6, [r3, #3496]	; 0xda8
      _s = s;
    97e2:	mvn.w	r6, #90	; 0x5a
    97e6:	strb.w	r6, [r3, #3500]	; 0xdac
      _b = b;
    97ea:	mvn.w	r6, #21
    97ee:	strb.w	r6, [r3, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97f2:	movs	r6, #166	; 0xa6
    97f4:	str.w	r6, [r3, #3504]	; 0xdb0
      _s = s;
    97f8:	mvn.w	r6, #66	; 0x42
    97fc:	strb.w	r6, [r3, #3508]	; 0xdb4
      _b = b;
    9800:	mvn.w	r6, #25
    9804:	strb.w	r6, [r3, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9808:	movs	r6, #143	; 0x8f
    980a:	str.w	r6, [r3, #3512]	; 0xdb8
      _s = s;
    980e:	mvn.w	r6, #59	; 0x3b
    9812:	strb.w	r6, [r3, #3516]	; 0xdbc
      _b = b;
    9816:	mvn.w	r6, #40	; 0x28
    981a:	strb.w	r6, [r3, #3517]	; 0xdbd
    981e:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9822:	strb.w	r1, [r3, #3524]	; 0xdc4
    9826:	mov.w	r1, #4294967295
      _b = b;
    982a:	strb.w	r6, [r3, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    982e:	movs	r6, #171	; 0xab
      _s = s;
    9830:	strb.w	r1, [r3, #3532]	; 0xdcc
    9834:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9838:	str.w	r6, [r3, #3528]	; 0xdc8
      _s = s;
      _b = b;
    983c:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9840:	strb.w	r1, [r3, #3540]	; 0xdd4
    9844:	mov.w	r1, #4294967295
      _b = b;
    9848:	strb.w	r6, [r3, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    984c:	movs	r6, #168	; 0xa8
      _s = s;
    984e:	strb.w	r1, [r3, #3548]	; 0xddc
    9852:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9856:	str.w	r6, [r3, #3536]	; 0xdd0
    985a:	movs	r6, #135	; 0x87
      _s = s;
    985c:	strb.w	r1, [r3, #3556]	; 0xde4
    9860:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9864:	str.w	r6, [r3, #3544]	; 0xdd8
    9868:	movs	r6, #143	; 0x8f
      _s = s;
    986a:	strb.w	r1, [r3, #3564]	; 0xdec
    986e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9872:	str.w	r6, [r3, #3552]	; 0xde0
    9876:	movs	r6, #150	; 0x96
      _s = s;
    9878:	strb.w	r1, [r3, #3580]	; 0xdfc
    987c:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9880:	str.w	r6, [r3, #3560]	; 0xde8
      _s = s;
      _b = b;
    9884:	mov.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9888:	str.w	r7, [r3, #3520]	; 0xdc0
      _s = s;
      _b = b;
    988c:	strb.w	r6, [r3, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9890:	movs	r6, #155	; 0x9b
      _s = s;
    9892:	strb.w	lr, [r3, #3572]	; 0xdf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9896:	str.w	r6, [r3, #3568]	; 0xdf0
      _s = s;
      _b = b;
    989a:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    989e:	strb.w	r1, [r3, #3588]	; 0xe04
    98a2:	mov.w	r1, #4294967295
      _b = b;
    98a6:	strb.w	r6, [r3, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98aa:	movs	r6, #167	; 0xa7
      _s = s;
      _b = b;
    98ac:	strb.w	r5, [r3, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98b0:	str.w	r6, [r3, #3576]	; 0xdf8
      _s = s;
      _b = b;
    98b4:	mvn.w	r6, #36	; 0x24
    98b8:	strb.w	r5, [r3, #3549]	; 0xddd
    98bc:	strb.w	r6, [r3, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98c0:	movs	r6, #164	; 0xa4
    98c2:	str.w	r6, [r3, #3584]	; 0xe00
      _s = s;
      _b = b;
    98c6:	mvn.w	r6, #49	; 0x31
    98ca:	strb.w	r6, [r3, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    98ce:	mvn.w	r6, #78	; 0x4e
    98d2:	strb.w	r6, [r3, #3596]	; 0xe0c
      _b = b;
    98d6:	mvn.w	r6, #29
    98da:	strb.w	r6, [r3, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98de:	movs	r6, #95	; 0x5f
    98e0:	str.w	r6, [r3, #3600]	; 0xe10
      _s = s;
    98e4:	mvn.w	r6, #31
    98e8:	strb.w	r6, [r3, #3604]	; 0xe14
      _b = b;
    98ec:	mov.w	r6, #13
    98f0:	strb.w	r6, [r3, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98f4:	movs	r6, #113	; 0x71
    98f6:	str.w	r6, [r3, #3592]	; 0xe08
      _s = s;
      _b = b;
    98fa:	mvn.w	r6, #48	; 0x30
    98fe:	strb.w	r6, [r3, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9902:	movs	r6, #94	; 0x5e
      _s = s;
    9904:	strb.w	r1, [r3, #3612]	; 0xe1c
    9908:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    990c:	str.w	r6, [r3, #3608]	; 0xe18
      _s = s;
      _b = b;
    9910:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9914:	strb.w	r1, [r3, #3628]	; 0xe2c
    9918:	mov.w	r1, #4294967295
      _b = b;
    991c:	strb.w	r6, [r3, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9920:	movs	r6, #133	; 0x85
      _s = s;
    9922:	strb.w	r1, [r3, #3652]	; 0xe44
    9926:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    992a:	str.w	r6, [r3, #3616]	; 0xe20
      _s = s;
    992e:	mvn.w	r6, #55	; 0x37
    9932:	strb.w	r1, [r3, #3660]	; 0xe4c
    9936:	mov.w	r1, #4294967295
    993a:	strb.w	r6, [r3, #3620]	; 0xe24
      _b = b;
    993e:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9942:	strb.w	r1, [r3, #3668]	; 0xe54
    9946:	mvn.w	r1, #2
      _b = b;
    994a:	strb.w	r6, [r3, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    994e:	movs	r6, #130	; 0x82
    9950:	str.w	r6, [r3, #3624]	; 0xe28
      _s = s;
      _b = b;
    9954:	mvn.w	r6, #74	; 0x4a
    9958:	strb.w	r6, [r3, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    995c:	movs	r6, #135	; 0x87
    995e:	str.w	r6, [r3, #3632]	; 0xe30
      _s = s;
    9962:	mvn.w	r6, #8
    9966:	strb.w	r6, [r3, #3636]	; 0xe34
      _b = b;
    996a:	mvn.w	r6, #53	; 0x35
    996e:	strb.w	r6, [r3, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9972:	movs	r6, #125	; 0x7d
    9974:	str.w	r6, [r3, #3640]	; 0xe38
      _s = s;
    9978:	mvn.w	r6, #117	; 0x75
    997c:	strb.w	r6, [r3, #3644]	; 0xe3c
      _b = b;
    9980:	mov.w	r6, #127	; 0x7f
    9984:	strb.w	r6, [r3, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9988:	movs	r6, #179	; 0xb3
    998a:	str.w	r6, [r3, #3648]	; 0xe40
      _s = s;
      _b = b;
    998e:	mov.w	r6, #120	; 0x78
    9992:	strb.w	r6, [r3, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9996:	movs	r6, #179	; 0xb3
    9998:	str.w	r6, [r3, #3656]	; 0xe48
      _s = s;
      _b = b;
    999c:	mov.w	r6, #118	; 0x76
    99a0:	strb.w	r6, [r3, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99a4:	movs	r6, #180	; 0xb4
    99a6:	str.w	r6, [r3, #3664]	; 0xe50
      _s = s;
      _b = b;
    99aa:	mov.w	r6, #116	; 0x74
    99ae:	strb.w	r6, [r3, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99b2:	movs	r6, #173	; 0xad
    99b4:	str.w	r6, [r3, #3672]	; 0xe58
      _s = s;
    99b8:	mov.w	r6, #83	; 0x53
    99bc:	strb.w	r6, [r3, #3676]	; 0xe5c
      _b = b;
    99c0:	mvn.w	r6, #65	; 0x41
    99c4:	strb.w	r6, [r3, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99c8:	movs	r6, #163	; 0xa3
    99ca:	str.w	r6, [r3, #3680]	; 0xe60
      _s = s;
    99ce:	mvn.w	r6, #103	; 0x67
    99d2:	strb.w	r6, [r3, #3684]	; 0xe64
      _b = b;
    99d6:	mvn.w	r6, #23
    99da:	strb.w	r6, [r3, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99de:	movs	r6, #158	; 0x9e
    99e0:	str.w	r6, [r3, #3688]	; 0xe68
      _s = s;
    99e4:	mvn.w	r6, #108	; 0x6c
    99e8:	strb.w	r6, [r3, #3692]	; 0xe6c
      _b = b;
    99ec:	mvn.w	r6, #17
    99f0:	strb.w	r6, [r3, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99f4:	movs	r6, #173	; 0xad
      _s = s;
    99f6:	strb.w	r1, [r3, #3700]	; 0xe74
    99fa:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99fe:	str.w	r6, [r3, #3696]	; 0xe70
    9a02:	movs	r6, #167	; 0xa7
      _s = s;
    9a04:	strb.w	r1, [r3, #3708]	; 0xe7c
    9a08:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a0c:	str.w	r6, [r3, #3704]	; 0xe78
      _s = s;
      _b = b;
    9a10:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a14:	strb.w	r1, [r3, #3716]	; 0xe84
    9a18:	mov.w	r1, #4294967295
      _b = b;
    9a1c:	strb.w	r6, [r3, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a20:	movs	r6, #162	; 0xa2
      _s = s;
    9a22:	strb.w	r1, [r3, #3724]	; 0xe8c
    9a26:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a2a:	str.w	r6, [r3, #3712]	; 0xe80
      _s = s;
      _b = b;
    9a2e:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a32:	strb.w	r1, [r3, #3732]	; 0xe94
      _b = b;
    9a36:	strb.w	r6, [r3, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a3a:	movs	r6, #173	; 0xad
      _s = s;
    9a3c:	strb.w	r1, [r3, #3740]	; 0xe9c
    9a40:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a44:	str.w	r6, [r3, #3720]	; 0xe88
      _s = s;
      _b = b;
    9a48:	mov.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a4c:	strb.w	r1, [r3, #3756]	; 0xeac
    9a50:	mov.w	r1, #4294967295
      _b = b;
    9a54:	strb.w	r6, [r3, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a58:	movs	r6, #174	; 0xae
      _s = s;
    9a5a:	strb.w	r1, [r3, #3764]	; 0xeb4
    9a5e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a62:	str.w	r6, [r3, #3728]	; 0xe90
      _s = s;
      _b = b;
    9a66:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a6a:	str.w	r8, [r3, #3736]	; 0xe98
      _s = s;
      _b = b;
    9a6e:	strb.w	r6, [r3, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a72:	movs	r6, #159	; 0x9f
      _s = s;
    9a74:	strb.w	r1, [r3, #3772]	; 0xebc
    9a78:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a7c:	str.w	r6, [r3, #3744]	; 0xea0
      _s = s;
      _b = b;
    9a80:	mov.w	r6, #71	; 0x47
    9a84:	strb.w	sl, [r3, #3701]	; 0xe75
    9a88:	strb.w	r6, [r3, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a8c:	movs	r6, #153	; 0x99
      _s = s;
    9a8e:	strb.w	fp, [r3, #3748]	; 0xea4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a92:	str.w	r6, [r3, #3752]	; 0xea8
      _s = s;
      _b = b;
    9a96:	mov.w	r6, #81	; 0x51
    9a9a:	strb.w	r6, [r3, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a9e:	movs	r6, #164	; 0xa4
    9aa0:	str.w	r6, [r3, #3760]	; 0xeb0
      _s = s;
      _b = b;
    9aa4:	mvn.w	r6, #53	; 0x35
    9aa8:	strb.w	r6, [r3, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aac:	movs	r6, #167	; 0xa7
    9aae:	str.w	r6, [r3, #3768]	; 0xeb8
      _s = s;
      _b = b;
    9ab2:	mvn.w	r6, #32
    9ab6:	strb.w	r6, [r3, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aba:	movs	r6, #161	; 0xa1
    9abc:	str.w	r6, [r3, #3776]	; 0xec0
      _s = s;
    9ac0:	mvn.w	r6, #56	; 0x38
    9ac4:	strb.w	r6, [r3, #3780]	; 0xec4
      _b = b;
    9ac8:	mov.w	r6, #10
    9acc:	strb.w	r6, [r3, #3733]	; 0xe95
    9ad0:	mvn.w	r6, #36	; 0x24
    9ad4:	strb.w	r6, [r3, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ad8:	mov.w	r6, #85	; 0x55
    9adc:	strb.w	r1, [r3, #3804]	; 0xedc
    9ae0:	mov.w	r1, #4294967295
    9ae4:	strb.w	r6, [r3, #3868]	; 0xf1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ae8:	movs	r6, #135	; 0x87
      _s = s;
    9aea:	strb.w	r1, [r3, #3828]	; 0xef4
    9aee:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9af2:	str.w	r6, [r3, #3784]	; 0xec8
      _s = s;
    9af6:	mov.w	r6, #120	; 0x78
    9afa:	strb.w	r1, [r3, #3844]	; 0xf04
    9afe:	mvn.w	r1, #2
    9b02:	strb.w	r6, [r3, #3788]	; 0xecc
      _b = b;
    9b06:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b0a:	strb.w	r1, [r3, #3852]	; 0xf0c
    9b0e:	mvn.w	r1, #2
      _b = b;
    9b12:	strb.w	r6, [r3, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b16:	movs	r6, #73	; 0x49
      _s = s;
    9b18:	strb.w	r1, [r3, #3860]	; 0xf14
    9b1c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b20:	str.w	r6, [r3, #3792]	; 0xed0
      _s = s;
    9b24:	mvn.w	r6, #84	; 0x54
      _b = b;
    9b28:	strb.w	sl, [r3, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b2c:	strb.w	r6, [r3, #3796]	; 0xed4
      _b = b;
    9b30:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b34:	str.w	r5, [r3, #3832]	; 0xef8
      _s = s;
      _b = b;
    9b38:	strb.w	r6, [r3, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b3c:	movs	r6, #76	; 0x4c
      _s = s;
    9b3e:	strb.w	r5, [r3, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b42:	str.w	r6, [r3, #3800]	; 0xed8
      _s = s;
      _b = b;
    9b46:	mvn.w	r6, #42	; 0x2a
    9b4a:	strb.w	r5, [r3, #3837]	; 0xefd
    9b4e:	strb.w	r6, [r3, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b52:	movs	r6, #112	; 0x70
    9b54:	str.w	r6, [r3, #3808]	; 0xee0
      _s = s;
    9b58:	mvn.w	r6, #36	; 0x24
    9b5c:	strb.w	r6, [r3, #3812]	; 0xee4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b60:	movs	r6, #136	; 0x88
    9b62:	str.w	r6, [r3, #3816]	; 0xee8
      _s = s;
    9b66:	mvn.w	r6, #49	; 0x31
    9b6a:	strb.w	r6, [r3, #3820]	; 0xeec
      _b = b;
    9b6e:	mvn.w	r6, #108	; 0x6c
    9b72:	strb.w	r6, [r3, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b76:	movs	r6, #144	; 0x90
    9b78:	str.w	r6, [r3, #3824]	; 0xef0
      _s = s;
      _b = b;
    9b7c:	mvn.w	r6, #95	; 0x5f
    9b80:	strb.w	r6, [r3, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b84:	movs	r6, #185	; 0xb9
    9b86:	str.w	r6, [r3, #3840]	; 0xf00
      _s = s;
      _b = b;
    9b8a:	mov.w	r6, #94	; 0x5e
    9b8e:	strb.w	r6, [r3, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b92:	movs	r6, #182	; 0xb6
    9b94:	str.w	r6, [r3, #3848]	; 0xf08
      _s = s;
      _b = b;
    9b98:	mvn.w	r6, #111	; 0x6f
    9b9c:	strb.w	r6, [r3, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ba0:	movs	r6, #182	; 0xb6
    9ba2:	str.w	r6, [r3, #3856]	; 0xf10
      _s = s;
      _b = b;
    9ba6:	mvn.w	r6, #127	; 0x7f
    9baa:	strb.w	r6, [r3, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bae:	movs	r6, #170	; 0xaa
    9bb0:	str.w	r6, [r3, #3864]	; 0xf18
    9bb4:	movs	r6, #172	; 0xac
      _s = s;
      _b = b;
    9bb6:	strb.w	r8, [r3, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bba:	str.w	r6, [r3, #3872]	; 0xf20
      _s = s;
    9bbe:	mvn.w	r6, #76	; 0x4c
    9bc2:	strb.w	r1, [r3, #3884]	; 0xf2c
    9bc6:	mov.w	r1, #4294967295
    9bca:	strb.w	r6, [r3, #3876]	; 0xf24
      _b = b;
    9bce:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9bd2:	strb.w	r1, [r3, #3892]	; 0xf34
      _b = b;
    9bd6:	strb.w	r6, [r3, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bda:	movs	r6, #173	; 0xad
      _s = s;
    9bdc:	strb.w	r1, [r3, #3900]	; 0xf3c
    9be0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9be4:	str.w	r6, [r3, #3880]	; 0xf28
      _s = s;
      _b = b;
    9be8:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9bec:	strb.w	r1, [r3, #3908]	; 0xf44
    9bf0:	mvn.w	r1, #2
      _b = b;
    9bf4:	strb.w	r6, [r3, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bf8:	movs	r6, #174	; 0xae
      _s = s;
    9bfa:	strb.w	r1, [r3, #3916]	; 0xf4c
    9bfe:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c02:	str.w	r6, [r3, #3888]	; 0xf30
      _s = s;
      _b = b;
    9c06:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c0a:	strb.w	r1, [r3, #3924]	; 0xf54
    9c0e:	mov.w	r1, #4294967295
      _b = b;
    9c12:	strb.w	r6, [r3, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c16:	movs	r6, #174	; 0xae
      _s = s;
    9c18:	strb.w	r1, [r3, #3932]	; 0xf5c
    9c1c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c20:	str.w	r6, [r3, #3904]	; 0xf40
      _s = s;
      _b = b;
    9c24:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c28:	strb.w	r1, [r3, #3940]	; 0xf64
    9c2c:	mov.w	r1, #4294967295
      _b = b;
    9c30:	strb.w	r6, [r3, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c34:	movs	r6, #173	; 0xad
      _s = s;
    9c36:	strb.w	r1, [r3, #3948]	; 0xf6c
    9c3a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c3e:	str.w	r6, [r3, #3912]	; 0xf48
      _s = s;
      _b = b;
    9c42:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c46:	str.w	r8, [r3, #3896]	; 0xf38
      _s = s;
      _b = b;
    9c4a:	strb.w	r6, [r3, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c4e:	movs	r6, #185	; 0xb9
      _s = s;
    9c50:	strb.w	r1, [r3, #3956]	; 0xf74
    9c54:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c58:	str.w	r6, [r3, #3920]	; 0xf50
    9c5c:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    9c5e:	strb.w	sl, [r3, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c62:	str.w	r6, [r3, #3928]	; 0xf58
      _s = s;
      _b = b;
    9c66:	mvn.w	r6, #118	; 0x76
    9c6a:	strb.w	r6, [r3, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c6e:	movs	r6, #171	; 0xab
    9c70:	str.w	r6, [r3, #3936]	; 0xf60
      _s = s;
      _b = b;
    9c74:	mvn.w	r6, #120	; 0x78
    9c78:	strb.w	r6, [r3, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c7c:	movs	r6, #161	; 0xa1
    9c7e:	str.w	r6, [r3, #3944]	; 0xf68
      _s = s;
      _b = b;
    9c82:	mvn.w	r6, #90	; 0x5a
    9c86:	strb.w	r6, [r3, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c8a:	movs	r6, #164	; 0xa4
    9c8c:	str.w	r6, [r3, #3952]	; 0xf70
      _s = s;
      _b = b;
    9c90:	mov.w	r6, #53	; 0x35
    9c94:	strb.w	r6, [r3, #3925]	; 0xf55
    9c98:	mvn.w	r6, #25
    9c9c:	strb.w	r6, [r3, #3957]	; 0xf75
    9ca0:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ca4:	strb.w	r1, [r3, #3964]	; 0xf7c
    9ca8:	mov.w	r1, #4294967295
      _b = b;
    9cac:	strb.w	r6, [r3, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cb0:	movs	r6, #166	; 0xa6
      _s = s;
    9cb2:	strb.w	r1, [r3, #4020]	; 0xfb4
    9cb6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cba:	str.w	r6, [r3, #3960]	; 0xf78
      _s = s;
      _b = b;
    9cbe:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9cc2:	strb.w	r1, [r3, #4036]	; 0xfc4
    9cc6:	mvn.w	r1, #2
      _b = b;
    9cca:	strb.w	r6, [r3, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cce:	movs	r6, #162	; 0xa2
      _s = s;
    9cd0:	strb.w	r1, [r3, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cd4:	movs	r1, #174	; 0xae
    9cd6:	str.w	r6, [r3, #3968]	; 0xf80
      _s = s;
    9cda:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cde:	str.w	r5, [r3, #4024]	; 0xfb8
      _s = s;
    9ce2:	strb.w	r6, [r3, #3972]	; 0xf84
      _b = b;
    9ce6:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9cea:	strb.w	r5, [r3, #4028]	; 0xfbc
      _b = b;
    9cee:	strb.w	r6, [r3, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cf2:	movs	r6, #160	; 0xa0
      _s = s;
      _b = b;
    9cf4:	strb.w	r5, [r3, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cf8:	str.w	r6, [r3, #3976]	; 0xf88
      _s = s;
    9cfc:	mvn.w	r6, #90	; 0x5a
    9d00:	strb.w	r6, [r3, #3980]	; 0xf8c
      _b = b;
    9d04:	mvn.w	r6, #29
    9d08:	strb.w	r6, [r3, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d0c:	movs	r6, #88	; 0x58
    9d0e:	str.w	r6, [r3, #3984]	; 0xf90
      _s = s;
    9d12:	mvn.w	r6, #32
    9d16:	strb.w	r6, [r3, #3988]	; 0xf94
      _b = b;
    9d1a:	mvn.w	r6, #47	; 0x2f
    9d1e:	strb.w	r6, [r3, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d22:	movs	r6, #81	; 0x51
    9d24:	str.w	r6, [r3, #3992]	; 0xf98
      _s = s;
    9d28:	mvn.w	r6, #23
    9d2c:	strb.w	r6, [r3, #3996]	; 0xf9c
      _b = b;
    9d30:	mvn.w	r6, #87	; 0x57
    9d34:	strb.w	r6, [r3, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d38:	movs	r6, #97	; 0x61
    9d3a:	str.w	r6, [r3, #4000]	; 0xfa0
      _s = s;
    9d3e:	mvn.w	r6, #11
    9d42:	strb.w	r6, [r3, #4004]	; 0xfa4
      _b = b;
    9d46:	mvn.w	r6, #40	; 0x28
    9d4a:	strb.w	r6, [r3, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d4e:	movs	r6, #111	; 0x6f
    9d50:	str.w	r6, [r3, #4008]	; 0xfa8
      _s = s;
    9d54:	mvn.w	r6, #51	; 0x33
    9d58:	strb.w	r6, [r3, #4012]	; 0xfac
      _b = b;
    9d5c:	mvn.w	r6, #52	; 0x34
    9d60:	strb.w	r6, [r3, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d64:	movs	r6, #126	; 0x7e
    9d66:	str.w	r6, [r3, #4016]	; 0xfb0
      _s = s;
      _b = b;
    9d6a:	mov.w	r6, #70	; 0x46
    9d6e:	strb.w	r6, [r3, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d72:	movs	r6, #183	; 0xb7
    9d74:	str.w	r6, [r3, #4032]	; 0xfc0
    9d78:	movs	r6, #180	; 0xb4
    9d7a:	str.w	r6, [r3, #4040]	; 0xfc8
      _s = s;
      _b = b;
    9d7e:	mvn.w	r6, #108	; 0x6c
    9d82:	strb.w	r6, [r3, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d86:	movs	r6, #180	; 0xb4
    9d88:	str.w	r1, [r2], #32
    9d8c:	movs	r1, #171	; 0xab
    9d8e:	str.w	r6, [r3, #4048]	; 0xfd0
    9d92:	str	r1, [r2, #0]
      _s = s;
    9d94:	mov.w	r2, #4294967295
    9d98:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d9c:	str.w	r6, [r3, #4056]	; 0xfd8
      _s = s;
    9da0:	strb.w	r2, [r3, #4052]	; 0xfd4
      _b = b;
    9da4:	mvn.w	r2, #105	; 0x69
    9da8:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dac:	str.w	r8, [r3, #4088]	; 0xff8
      _s = s;
      _b = b;
    9db0:	strb.w	r2, [r3, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9db4:	mvn.w	r2, #2
    9db8:	strb.w	r2, [r3, #4060]	; 0xfdc
      _b = b;
    9dbc:	mvn.w	r2, #124	; 0x7c
    9dc0:	strb.w	r2, [r3, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dc4:	movs	r2, #170	; 0xaa
    9dc6:	str.w	r2, [r3, #4064]	; 0xfe0
      _s = s;
    9dca:	mov.w	r2, #124	; 0x7c
    9dce:	strb.w	r2, [r3, #4068]	; 0xfe4
      _b = b;
    9dd2:	mvn.w	r2, #50	; 0x32
    9dd6:	strb.w	r2, [r3, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dda:	movs	r2, #173	; 0xad
    9ddc:	str.w	r2, [r3, #4072]	; 0xfe8
      _s = s;
    9de0:	mvn.w	r2, #2
    9de4:	strb.w	r2, [r3, #4076]	; 0xfec
      _b = b;
    9de8:	mvn.w	r2, #21
    9dec:	strb.w	r2, [r3, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9df0:	movs	r2, #174	; 0xae
    9df2:	str.w	r2, [r3, #4080]	; 0xff0
      _s = s;
    9df6:	mov.w	r2, #4294967295
    9dfa:	strb.w	r2, [r3, #4084]	; 0xff4
      _b = b;
    9dfe:	mvn.w	r2, #33	; 0x21
    9e02:	strb.w	r2, [r3, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e06:	mov.w	r2, #4294967295
    9e0a:	strb.w	r2, [r3, #4092]	; 0xffc
      _b = b;
    9e0e:	mvn.w	r2, #81	; 0x51
    9e12:	strb.w	r2, [r3, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e16:	movw	r2, #4104	; 0x1008
    9e1a:	str.w	r8, [r3, r2]
      _s = s;
    9e1e:	movw	r2, #4100	; 0x1004
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e22:	mov.w	r8, #6
      _s = s;
    9e26:	strb	r1, [r3, r2]
      _b = b;
    9e28:	movw	r2, #4101	; 0x1005
    9e2c:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e2e:	movw	r2, #4108	; 0x100c
      _b = b;
    9e32:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e36:	strb	r1, [r3, r2]
      _b = b;
    9e38:	movw	r2, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e3c:	movs	r1, #177	; 0xb1
      _s = s;
      _b = b;
    9e3e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e40:	movw	r2, #4112	; 0x1010
      _s = s;
      _b = b;
    9e44:	mov.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e48:	str	r1, [r3, r2]
      _s = s;
    9e4a:	movw	r2, #4116	; 0x1014
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e4e:	movs	r1, #172	; 0xac
      _s = s;
    9e50:	strb.w	lr, [r3, r2]
      _b = b;
    9e54:	movw	r2, #4117	; 0x1015
    9e58:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e5a:	movw	r2, #4120	; 0x1018
      _s = s;
      _b = b;
    9e5e:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e62:	str	r1, [r3, r2]
      _s = s;
    9e64:	mvn.w	r1, #2
    9e68:	movw	r2, #4124	; 0x101c
    9e6c:	strb	r1, [r3, r2]
      _b = b;
    9e6e:	movw	r2, #4125	; 0x101d
    9e72:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e76:	movw	r2, #4132	; 0x1024
    9e7a:	strb	r1, [r3, r2]
      _b = b;
    9e7c:	movw	r2, #4133	; 0x1025
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e80:	add.w	r1, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    9e84:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e86:	movs	r2, #165	; 0xa5
    9e88:	movw	r6, #4176	; 0x1050
    9e8c:	str	r2, [r1, #64]	; 0x40
    9e8e:	mov	r2, r1
    9e90:	movs	r1, #110	; 0x6e
    9e92:	str	r1, [r2, #96]	; 0x60
    9e94:	movs	r2, #78	; 0x4e
      _s = s;
    9e96:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e9a:	str	r2, [r3, r6]
    9e9c:	movw	r6, #4200	; 0x1068
    9ea0:	movs	r2, #82	; 0x52
    9ea2:	str	r2, [r3, r6]
    9ea4:	movw	r6, #4136	; 0x1028
    9ea8:	movs	r2, #161	; 0xa1
    9eaa:	str	r2, [r3, r6]
      _s = s;
    9eac:	movw	r2, #4140	; 0x102c
      _b = b;
    9eb0:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9eb4:	strb	r1, [r3, r2]
      _b = b;
    9eb6:	movw	r2, #4141	; 0x102d
    9eba:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ebc:	movw	r6, #4144	; 0x1030
    9ec0:	movs	r2, #153	; 0x99
    9ec2:	str	r2, [r3, r6]
      _s = s;
    9ec4:	movw	r2, #4148	; 0x1034
    9ec8:	mvn.w	r6, #42	; 0x2a
    9ecc:	strb	r6, [r3, r2]
      _b = b;
    9ece:	movw	r2, #4149	; 0x1035
    9ed2:	mvn.w	r6, #21
    9ed6:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ed8:	movw	r6, #4152	; 0x1038
    9edc:	movs	r2, #164	; 0xa4
    9ede:	str	r2, [r3, r6]
      _s = s;
    9ee0:	movw	r2, #4156	; 0x103c
      _b = b;
    9ee4:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ee8:	strb	r1, [r3, r2]
      _b = b;
    9eea:	movw	r2, #4157	; 0x103d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9eee:	mvn.w	r1, #2
      _b = b;
    9ef2:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ef4:	movw	r2, #4164	; 0x1044
    9ef8:	mvn.w	r6, #91	; 0x5b
    9efc:	strb	r1, [r3, r2]
      _b = b;
    9efe:	movw	r2, #4165	; 0x1045
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f02:	movs	r1, #182	; 0xb6
      _s = s;
      _b = b;
    9f04:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f06:	movw	r2, #4168	; 0x1048
    9f0a:	str.w	ip, [r3, r2]
      _s = s;
    9f0e:	movw	r2, #4172	; 0x104c
    9f12:	strb	r6, [r3, r2]
      _b = b;
    9f14:	movw	r2, #4173	; 0x104d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9f18:	mvn.w	r6, #54	; 0x36
      _b = b;
    9f1c:	strb.w	sl, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9f20:	movw	r2, #4180	; 0x1054
    9f24:	strb	r6, [r3, r2]
      _b = b;
    9f26:	movw	r2, #4181	; 0x1055
    9f2a:	mvn.w	r6, #47	; 0x2f
    9f2e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f30:	movw	r6, #4184	; 0x1058
    9f34:	movs	r2, #98	; 0x62
    9f36:	str	r2, [r3, r6]
      _s = s;
    9f38:	movw	r2, #4188	; 0x105c
    9f3c:	mvn.w	r6, #56	; 0x38
    9f40:	strb	r6, [r3, r2]
      _b = b;
    9f42:	movw	r2, #4189	; 0x105d
    9f46:	mvn.w	r6, #53	; 0x35
    9f4a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9f4c:	movw	r2, #4196	; 0x1064
    9f50:	mvn.w	r6, #14
    9f54:	strb	r6, [r3, r2]
      _b = b;
    9f56:	movw	r2, #4197	; 0x1065
    9f5a:	mvn.w	r6, #50	; 0x32
    9f5e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9f60:	movw	r2, #4204	; 0x106c
      _b = b;
    9f64:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9f68:	strb.w	lr, [r3, r2]
      _b = b;
    9f6c:	movw	r2, #4205	; 0x106d
    9f70:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f72:	movw	r2, #4208	; 0x1070
      _s = s;
      _b = b;
    9f76:	mov.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f7a:	str	r5, [r3, r2]
      _s = s;
    9f7c:	movw	r2, #4212	; 0x1074
    9f80:	strb	r5, [r3, r2]
      _b = b;
    9f82:	movw	r2, #4213	; 0x1075
    9f86:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f88:	movw	r2, #4216	; 0x1078
    9f8c:	str	r5, [r3, r2]
      _s = s;
    9f8e:	movw	r2, #4220	; 0x107c
    9f92:	strb	r5, [r3, r2]
      _b = b;
    9f94:	movw	r2, #4221	; 0x107d
    9f98:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f9a:	add.w	r2, r3, #4224	; 0x1080
    9f9e:	str	r1, [r2, #32]
    9fa0:	movs	r1, #170	; 0xaa
    9fa2:	str	r5, [r2, #0]
    9fa4:	add.w	r2, r3, #4096	; 0x1000
    9fa8:	str.w	r1, [r2, #192]	; 0xc0
      _s = s;
      _b = b;
    9fac:	movw	r2, #4237	; 0x108d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9fb0:	mov.w	r1, #4294967295
      _b = b;
    9fb4:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9fb6:	movw	r2, #4228	; 0x1084
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fba:	movw	r6, #4232	; 0x1088
      _s = s;
    9fbe:	strb	r5, [r3, r2]
      _b = b;
    9fc0:	movw	r2, #4229	; 0x1085
    9fc4:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fc6:	movs	r2, #178	; 0xb2
    9fc8:	str	r2, [r3, r6]
      _s = s;
    9fca:	movw	r2, #4236	; 0x108c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fce:	movw	r6, #4240	; 0x1090
      _s = s;
    9fd2:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fd4:	movs	r2, #178	; 0xb2
    9fd6:	str	r2, [r3, r6]
      _s = s;
    9fd8:	movw	r2, #4244	; 0x1094
      _b = b;
    9fdc:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9fe0:	strb	r1, [r3, r2]
      _b = b;
    9fe2:	movw	r2, #4245	; 0x1095
    9fe6:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fe8:	movw	r6, #4248	; 0x1098
    9fec:	movs	r2, #179	; 0xb3
    9fee:	str	r2, [r3, r6]
      _s = s;
    9ff0:	movw	r2, #4252	; 0x109c
      _b = b;
    9ff4:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ff8:	strb	r1, [r3, r2]
      _b = b;
    9ffa:	movw	r2, #4253	; 0x109d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ffe:	mvn.w	r1, #2
      _b = b;
    a002:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a004:	movw	r2, #4260	; 0x10a4
      _b = b;
    a008:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a00c:	strb	r1, [r3, r2]
      _b = b;
    a00e:	movw	r2, #4261	; 0x10a5
    a012:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a014:	movw	r6, #4264	; 0x10a8
    a018:	movs	r2, #176	; 0xb0
    a01a:	str	r2, [r3, r6]
      _s = s;
    a01c:	movw	r2, #4268	; 0x10ac
      _b = b;
    a020:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a024:	strb	r1, [r3, r2]
      _b = b;
    a026:	movw	r2, #4269	; 0x10ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a02a:	mov.w	r1, #4294967295
      _b = b;
    a02e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a030:	movw	r6, #4272	; 0x10b0
    a034:	movs	r2, #176	; 0xb0
    a036:	str	r2, [r3, r6]
      _s = s;
    a038:	movw	r2, #4276	; 0x10b4
      _b = b;
    a03c:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a040:	strb	r1, [r3, r2]
      _b = b;
    a042:	movw	r2, #4277	; 0x10b5
    a046:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a048:	movw	r6, #4280	; 0x10b8
    a04c:	movs	r2, #178	; 0xb2
    a04e:	str	r2, [r3, r6]
      _s = s;
    a050:	movw	r2, #4284	; 0x10bc
      _b = b;
    a054:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a058:	strb	r1, [r3, r2]
      _b = b;
    a05a:	movw	r2, #4285	; 0x10bd
    a05e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a060:	movw	r2, #4292	; 0x10c4
      _b = b;
    a064:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a068:	strb	r1, [r3, r2]
      _b = b;
    a06a:	movw	r2, #4293	; 0x10c5
    a06e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a070:	movw	r6, #4296	; 0x10c8
    a074:	movs	r2, #171	; 0xab
    a076:	str	r2, [r3, r6]
      _s = s;
    a078:	movw	r2, #4300	; 0x10cc
    a07c:	mvn.w	r6, #47	; 0x2f
    a080:	strb	r6, [r3, r2]
      _b = b;
    a082:	movw	r2, #4301	; 0x10cd
    a086:	mvn.w	r6, #29
    a08a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a08c:	movw	r6, #4304	; 0x10d0
    a090:	movs	r2, #173	; 0xad
    a092:	str	r2, [r3, r6]
      _s = s;
    a094:	movw	r2, #4308	; 0x10d4
      _b = b;
    a098:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a09c:	strb	r1, [r3, r2]
      _b = b;
    a09e:	movw	r2, #4309	; 0x10d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0a2:	movs	r1, #161	; 0xa1
      _s = s;
      _b = b;
    a0a4:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0a6:	add.w	r2, r3, #4384	; 0x1120
      _s = s;
      _b = b;
    a0aa:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0ae:	str.w	r1, [r2, #-64]
    a0b2:	movs	r1, #157	; 0x9d
    a0b4:	str	r5, [r2, #0]
    a0b6:	add.w	r2, r3, #4096	; 0x1000
    a0ba:	str.w	r1, [r2, #256]	; 0x100
      _s = s;
      _b = b;
    a0be:	movw	r2, #4317	; 0x10dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0c2:	add.w	r1, r3, #4448	; 0x1160
      _s = s;
      _b = b;
    a0c6:	strb	r6, [r3, r2]
    a0c8:	movw	r2, #4381	; 0x111d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0cc:	movw	r6, #4312	; 0x10d8
      _s = s;
      _b = b;
    a0d0:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0d4:	movs	r2, #171	; 0xab
    a0d6:	mov.w	ip, #356	; 0x164
    a0da:	str	r2, [r3, r6]
      _s = s;
    a0dc:	movw	r2, #4316	; 0x10dc
    a0e0:	mvn.w	r6, #35	; 0x23
    a0e4:	strb.w	lr, [r3, r2]
    a0e8:	movw	r2, #4324	; 0x10e4
    a0ec:	strb	r6, [r3, r2]
      _b = b;
    a0ee:	movw	r2, #4325	; 0x10e5
    a0f2:	mvn.w	r6, #108	; 0x6c
    a0f6:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0f8:	movw	r6, #4328	; 0x10e8
    a0fc:	movs	r2, #150	; 0x96
    a0fe:	str	r2, [r3, r6]
      _s = s;
    a100:	movw	r2, #4332	; 0x10ec
    a104:	mvn.w	r6, #54	; 0x36
    a108:	strb	r6, [r3, r2]
      _b = b;
    a10a:	movw	r2, #4333	; 0x10ed
    a10e:	mvn.w	r6, #64	; 0x40
    a112:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a114:	movw	r6, #4336	; 0x10f0
    a118:	movs	r2, #143	; 0x8f
    a11a:	str	r2, [r3, r6]
      _s = s;
    a11c:	movw	r2, #4340	; 0x10f4
    a120:	mvn.w	r6, #65	; 0x41
    a124:	strb	r6, [r3, r2]
      _b = b;
    a126:	movw	r2, #4341	; 0x10f5
    a12a:	mvn.w	r6, #31
    a12e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a130:	movw	r6, #4344	; 0x10f8
    a134:	movs	r2, #133	; 0x85
    a136:	str	r2, [r3, r6]
      _s = s;
    a138:	movw	r2, #4348	; 0x10fc
    a13c:	mvn.w	r6, #75	; 0x4b
    a140:	strb	r6, [r3, r2]
      _b = b;
    a142:	movw	r2, #4349	; 0x10fd
    a146:	mvn.w	r6, #20
    a14a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a14c:	movw	r2, #4356	; 0x1104
    a150:	mvn.w	r6, #29
    a154:	strb	r6, [r3, r2]
      _b = b;
    a156:	movw	r2, #4357	; 0x1105
    a15a:	mvn.w	r6, #34	; 0x22
    a15e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a160:	movw	r6, #4360	; 0x1108
    a164:	movs	r2, #152	; 0x98
    a166:	str	r2, [r3, r6]
      _s = s;
    a168:	mvn.w	r6, #27
    a16c:	movw	r2, #4364	; 0x110c
    a170:	strb	r6, [r3, r2]
      _b = b;
    a172:	movw	r2, #4365	; 0x110d
    a176:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a178:	movw	r6, #4368	; 0x1110
    a17c:	movs	r2, #93	; 0x5d
    a17e:	str	r2, [r3, r6]
      _s = s;
    a180:	movw	r2, #4372	; 0x1114
    a184:	mvn.w	r6, #52	; 0x34
    a188:	strb	r6, [r3, r2]
      _b = b;
    a18a:	movw	r2, #4373	; 0x1115
    a18e:	mvn.w	r6, #44	; 0x2c
    a192:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a194:	movw	r6, #4376	; 0x1118
    a198:	movs	r2, #112	; 0x70
    a19a:	str	r2, [r3, r6]
      _s = s;
    a19c:	mvn.w	r6, #88	; 0x58
    a1a0:	movw	r2, #4380	; 0x111c
    a1a4:	strb	r6, [r3, r2]
    a1a6:	movw	r2, #4388	; 0x1124
    a1aa:	strb	r5, [r3, r2]
      _b = b;
    a1ac:	movw	r2, #4389	; 0x1125
    a1b0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1b2:	movw	r2, #4392	; 0x1128
    a1b6:	str	r5, [r3, r2]
      _s = s;
    a1b8:	movw	r2, #4396	; 0x112c
    a1bc:	strb	r5, [r3, r2]
      _b = b;
    a1be:	movw	r2, #4397	; 0x112d
    a1c2:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1c4:	add.w	r2, r3, #4416	; 0x1140
    a1c8:	str	r5, [r2, #0]
    a1ca:	movs	r2, #180	; 0xb4
    a1cc:	str.w	r2, [r1], #32
    a1d0:	movw	r2, #4400	; 0x1130
    a1d4:	str	r5, [r3, r2]
    a1d6:	movs	r2, #167	; 0xa7
    a1d8:	str	r2, [r1, #0]
      _s = s;
    a1da:	movw	r2, #4404	; 0x1134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1de:	movw	r1, #4432	; 0x1150
      _s = s;
    a1e2:	strb	r5, [r3, r2]
      _b = b;
    a1e4:	movw	r2, #4405	; 0x1135
    a1e8:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1ea:	movw	r2, #4408	; 0x1138
    a1ee:	str	r5, [r3, r2]
      _s = s;
    a1f0:	movw	r2, #4412	; 0x113c
    a1f4:	strb	r5, [r3, r2]
      _b = b;
    a1f6:	movw	r2, #4413	; 0x113d
    a1fa:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1fc:	movw	r2, #4420	; 0x1144
    a200:	strb	r5, [r3, r2]
      _b = b;
    a202:	movw	r2, #4421	; 0x1145
    a206:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a208:	movw	r2, #4424	; 0x1148
    a20c:	str	r5, [r3, r2]
      _s = s;
    a20e:	movw	r2, #4428	; 0x114c
    a212:	strb	r5, [r3, r2]
      _b = b;
    a214:	movw	r2, #4429	; 0x114d
    a218:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a21a:	movs	r2, #180	; 0xb4
    a21c:	str	r2, [r3, r1]
      _s = s;
    a21e:	movw	r2, #4436	; 0x1154
    a222:	mov.w	r1, #4294967295
    a226:	strb	r1, [r3, r2]
      _b = b;
    a228:	movw	r2, #4437	; 0x1155
    a22c:	mov.w	r1, #48	; 0x30
    a230:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a232:	movw	r1, #4440	; 0x1158
    a236:	movs	r2, #177	; 0xb1
    a238:	str	r2, [r3, r1]
      _s = s;
    a23a:	movw	r2, #4444	; 0x115c
    a23e:	mov.w	r1, #4294967295
    a242:	strb	r1, [r3, r2]
      _b = b;
    a244:	movw	r2, #4445	; 0x115d
    a248:	mvn.w	r1, #120	; 0x78
    a24c:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a24e:	movw	r2, #4452	; 0x1164
    a252:	mov.w	r1, #4294967295
    a256:	strb	r1, [r3, r2]
      _b = b;
    a258:	movw	r2, #4453	; 0x1165
    a25c:	mvn.w	r1, #109	; 0x6d
    a260:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a262:	movw	r1, #4456	; 0x1168
    a266:	movs	r2, #177	; 0xb1
    a268:	str	r2, [r3, r1]
      _s = s;
    a26a:	movw	r2, #4460	; 0x116c
    a26e:	mov.w	r1, #4294967295
    a272:	strb	r1, [r3, r2]
      _b = b;
    a274:	movw	r2, #4461	; 0x116d
    a278:	mvn.w	r1, #101	; 0x65
    a27c:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a27e:	movw	r1, #4464	; 0x1170
    a282:	movs	r2, #174	; 0xae
    a284:	str	r2, [r3, r1]
      _s = s;
    a286:	movw	r2, #4468	; 0x1174
    a28a:	mvn.w	r1, #2
    a28e:	strb	r1, [r3, r2]
      _b = b;
    a290:	movw	r2, #4469	; 0x1175
    a294:	mvn.w	r1, #76	; 0x4c
    a298:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a29a:	movw	r1, #4472	; 0x1178
    a29e:	movs	r2, #178	; 0xb2
    a2a0:	str	r2, [r3, r1]
      _s = s;
    a2a2:	movw	r2, #4476	; 0x117c
    a2a6:	mov.w	r1, #4294967295
    a2aa:	strb	r1, [r3, r2]
      _b = b;
    a2ac:	movw	r2, #4477	; 0x117d
    a2b0:	mvn.w	r1, #82	; 0x52
    a2b4:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2b6:	movw	r2, #4484	; 0x1184
      _b = b;
    a2ba:	mov.w	r1, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2be:	strb.w	lr, [r3, r2]
      _b = b;
    a2c2:	movw	r2, #4485	; 0x1185
    a2c6:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2c8:	add.w	r2, r3, #4448	; 0x1160
    a2cc:	movs	r1, #159	; 0x9f
    a2ce:	str	r1, [r2, #64]	; 0x40
    a2d0:	movs	r1, #137	; 0x89
    a2d2:	str	r1, [r2, #96]	; 0x60
      _s = s;
      _b = b;
    a2d4:	movw	r2, #4517	; 0x11a5
    a2d8:	mov.w	r1, #109	; 0x6d
    a2dc:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2de:	movw	r1, #4528	; 0x11b0
    a2e2:	movs	r2, #143	; 0x8f
    a2e4:	str	r2, [r3, r1]
    a2e6:	movw	r1, #4536	; 0x11b8
    a2ea:	movs	r2, #125	; 0x7d
    a2ec:	str	r2, [r3, r1]
    a2ee:	movw	r1, #4488	; 0x1188
    a2f2:	movs	r2, #152	; 0x98
    a2f4:	str	r2, [r3, r1]
      _s = s;
    a2f6:	movw	r2, #4492	; 0x118c
    a2fa:	mvn.w	r1, #127	; 0x7f
    a2fe:	strb	r1, [r3, r2]
      _b = b;
    a300:	movw	r2, #4493	; 0x118d
    a304:	mvn.w	r1, #78	; 0x4e
    a308:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a30a:	movs	r1, #156	; 0x9c
    a30c:	movw	r2, #4496	; 0x1190
    a310:	str	r1, [r3, r2]
    a312:	movw	r2, #4520	; 0x11a8
    a316:	str	r1, [r3, r2]
      _s = s;
    a318:	movw	r2, #4500	; 0x1194
    a31c:	mvn.w	r1, #103	; 0x67
    a320:	strb	r1, [r3, r2]
      _b = b;
    a322:	movw	r2, #4501	; 0x1195
    a326:	mvn.w	r1, #33	; 0x21
    a32a:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a32c:	movw	r1, #4504	; 0x1198
    a330:	movs	r2, #162	; 0xa2
    a332:	str	r2, [r3, r1]
      _s = s;
    a334:	movw	r2, #4508	; 0x119c
    a338:	mov.w	r1, #4294967295
    a33c:	strb.w	lr, [r3, r2]
      _b = b;
    a340:	movw	r2, #4509	; 0x119d
    a344:	strb	r7, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a346:	movw	r2, #4516	; 0x11a4
    a34a:	strb	r1, [r3, r2]
    a34c:	movw	r2, #4524	; 0x11ac
    a350:	strb	r1, [r3, r2]
      _b = b;
    a352:	movw	r2, #4525	; 0x11ad
    a356:	mov.w	r1, #103	; 0x67
    a35a:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a35c:	movw	r2, #4532	; 0x11b4
    a360:	mov.w	r1, #4294967295
    a364:	strb	r1, [r3, r2]
      _b = b;
    a366:	movw	r2, #4533	; 0x11b5
    a36a:	mvn.w	r1, #69	; 0x45
    a36e:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a370:	movw	r2, #4540	; 0x11bc
    a374:	mvn.w	r1, #94	; 0x5e
    a378:	strb	r1, [r3, r2]
      _b = b;
    a37a:	movw	r2, #4541	; 0x11bd
    a37e:	mvn.w	r1, #73	; 0x49
    a382:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a384:	movw	r2, #4548	; 0x11c4
    a388:	mvn.w	r1, #50	; 0x32
    a38c:	strb	r1, [r3, r2]
      _b = b;
    a38e:	movw	r2, #4549	; 0x11c5
    a392:	mvn.w	r1, #89	; 0x59
    a396:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a398:	movw	r1, #4552	; 0x11c8
    a39c:	movs	r2, #139	; 0x8b
    a39e:	str	r2, [r3, r1]
      _s = s;
    a3a0:	movw	r2, #4556	; 0x11cc
    a3a4:	mov.w	r1, #4294967295
    a3a8:	strb	r1, [r3, r2]
      _b = b;
    a3aa:	movw	r2, #4557	; 0x11cd
    a3ae:	mov.w	r1, #88	; 0x58
    a3b2:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3b4:	movw	r2, #4560	; 0x11d0
      _s = s;
      _b = b;
    a3b8:	movs	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3ba:	str	r5, [r3, r2]
      _s = s;
    a3bc:	movw	r2, #4564	; 0x11d4
    a3c0:	strb	r5, [r3, r2]
      _b = b;
    a3c2:	movw	r2, #4565	; 0x11d5
    a3c6:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3c8:	movw	r2, #4568	; 0x11d8
    a3cc:	str	r5, [r3, r2]
      _s = s;
    a3ce:	movw	r2, #4572	; 0x11dc
    a3d2:	strb	r5, [r3, r2]
      _b = b;
    a3d4:	movw	r2, #4573	; 0x11dd
    a3d8:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3da:	add.w	r2, r3, #4576	; 0x11e0
    a3de:	str	r5, [r4, #0]
    a3e0:	str	r5, [r2, #0]
    a3e2:	movs	r2, #5
      _s = s;
    a3e4:	strb	r5, [r4, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3e6:	str	r2, [r4, #48]	; 0x30
      _s = s;
    a3e8:	mvn.w	r2, #22
      _b = b;
    a3ec:	strb	r5, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3ee:	strb.w	r2, [r4, #52]	; 0x34
    a3f2:	movw	r2, #4580	; 0x11e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3f6:	str	r5, [r4, #8]
      _s = s;
    a3f8:	strb	r5, [r3, r2]
      _b = b;
    a3fa:	movw	r2, #4581	; 0x11e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3fe:	strb	r5, [r4, #12]
      _b = b;
    a400:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a402:	movw	r2, #4584	; 0x11e8
      _s = s;
      _b = b;
    a406:	strb	r5, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a408:	str	r5, [r3, r2]
      _s = s;
    a40a:	movw	r2, #4588	; 0x11ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a40e:	str	r5, [r4, #16]
      _s = s;
    a410:	strb	r5, [r3, r2]
      _b = b;
    a412:	movw	r2, #4589	; 0x11ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a416:	strb	r5, [r4, #20]
      _b = b;
    a418:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a41a:	movw	r2, #4592	; 0x11f0
      _s = s;
      _b = b;
    a41e:	strb	r5, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a420:	str	r5, [r3, r2]
      _s = s;
    a422:	movw	r2, #4596	; 0x11f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a426:	str	r5, [r4, #24]
      _s = s;
    a428:	strb	r5, [r3, r2]
      _b = b;
    a42a:	movw	r2, #4597	; 0x11f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a42e:	strb	r5, [r4, #28]
      _b = b;
    a430:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a432:	movw	r2, #4600	; 0x11f8
      _s = s;
      _b = b;
    a436:	strb	r5, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a438:	str	r5, [r3, r2]
      _s = s;
    a43a:	movw	r2, #4604	; 0x11fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a43e:	str	r5, [r4, #32]
      _s = s;
    a440:	strb	r5, [r3, r2]
      _b = b;
    a442:	movw	r2, #4605	; 0x11fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a446:	strb.w	r5, [r4, #36]	; 0x24
      _b = b;
    a44a:	strb	r5, [r3, r2]
    a44c:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a450:	mvn.w	r2, #46	; 0x2e
      _b = b;
    a454:	strb.w	r5, [r4, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a458:	str	r5, [r4, #40]	; 0x28
      _s = s;
    a45a:	strb.w	r5, [r4, #44]	; 0x2c
      _b = b;
    a45e:	strb.w	r5, [r4, #45]	; 0x2d
    a462:	strb.w	r3, [r4, #53]	; 0x35
    a466:	mvn.w	r3, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a46a:	strb.w	r2, [r4, #84]	; 0x54
      _b = b;
    a46e:	mvn.w	r2, #25
    a472:	strb.w	r3, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a476:	mvn.w	r3, #63	; 0x3f
      _b = b;
    a47a:	strb.w	r2, [r4, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a47e:	mov.w	r2, #4294967295
    a482:	strb.w	r3, [r4, #68]	; 0x44
    a486:	mvn.w	r3, #124	; 0x7c
    a48a:	strb.w	r2, [r4, #92]	; 0x5c
      _b = b;
    a48e:	mvn.w	r2, #83	; 0x53
    a492:	strb.w	r0, [r4, #69]	; 0x45
    a496:	strb.w	r2, [r4, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a49a:	movs	r2, #7
      _s = s;
    a49c:	strb.w	r3, [r4, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4a0:	movs	r3, #35	; 0x23
    a4a2:	str	r2, [r4, #96]	; 0x60
      _s = s;
    a4a4:	mvn.w	r2, #20
      _b = b;
    a4a8:	strb.w	lr, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4ac:	strb.w	r2, [r4, #100]	; 0x64
      _b = b;
    a4b0:	mvn.w	r2, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4b4:	strb.w	r7, [r4, #108]	; 0x6c
      _b = b;
    a4b8:	strb.w	r2, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4bc:	movs	r2, #7
      _s = s;
      _b = b;
    a4be:	strb.w	lr, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4c2:	str	r2, [r4, #112]	; 0x70
      _s = s;
    a4c4:	mvn.w	r2, #103	; 0x67
      _b = b;
    a4c8:	strb.w	r9, [r4, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4cc:	strb.w	r2, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4d0:	movs	r2, #16
      _s = s;
    a4d2:	strb.w	sl, [r4, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4d6:	str	r2, [r4, #120]	; 0x78
      _s = s;
    a4d8:	mvn.w	r2, #36	; 0x24
    a4dc:	strb.w	r2, [r4, #124]	; 0x7c
      _b = b;
    a4e0:	mov.w	r2, #4294967295
    a4e4:	strb.w	r2, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4e8:	movs	r2, #12
    a4ea:	str.w	r2, [r4, #128]	; 0x80
      _s = s;
    a4ee:	mvn.w	r2, #35	; 0x23
    a4f2:	strb.w	r2, [r4, #132]	; 0x84
      _b = b;
    a4f6:	mov.w	r2, #4294967295
    a4fa:	strb.w	r2, [r4, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4fe:	movs	r2, #10
    a500:	str.w	r2, [r4, #136]	; 0x88
      _s = s;
    a504:	mvn.w	r2, #82	; 0x52
    a508:	strb.w	r2, [r4, #140]	; 0x8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a50c:	movs	r2, #2
    a50e:	str	r2, [r4, #56]	; 0x38
    a510:	str	r2, [r4, #104]	; 0x68
    a512:	movs	r2, #4
    a514:	str	r2, [r4, #64]	; 0x40
    a516:	movs	r2, #1
    a518:	str	r2, [r4, #72]	; 0x48
    a51a:	movw	r2, #359	; 0x167
    a51e:	str	r2, [r4, #80]	; 0x50
    a520:	movw	r2, #355	; 0x163
    a524:	str	r2, [r4, #88]	; 0x58
      _s = s;
      _b = b;
    a526:	mov.w	r2, #4294967295
    a52a:	strb.w	r2, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a52e:	movs	r2, #2
      _s = s;
    a530:	strb.w	r0, [r4, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a534:	str.w	r2, [r4, #144]	; 0x90
      _s = s;
    a538:	mvn.w	r2, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a53c:	str.w	r5, [r4, #176]	; 0xb0
      _s = s;
    a540:	strb.w	r2, [r4, #148]	; 0x94
      _b = b;
    a544:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a548:	str.w	r5, [r4, #184]	; 0xb8
      _s = s;
      _b = b;
    a54c:	strb.w	r2, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a550:	mvn.w	r2, #13
    a554:	strb.w	r5, [r4, #188]	; 0xbc
    a558:	strb.w	r2, [r4, #156]	; 0x9c
      _b = b;
    a55c:	mvn.w	r2, #64	; 0x40
    a560:	strb.w	r5, [r4, #189]	; 0xbd
    a564:	strb.w	r2, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a568:	movs	r2, #2
    a56a:	str.w	r5, [r4, #192]	; 0xc0
    a56e:	str.w	r2, [r4, #160]	; 0xa0
      _s = s;
    a572:	mvn.w	r2, #27
    a576:	strb.w	r5, [r4, #196]	; 0xc4
    a57a:	strb.w	r2, [r4, #164]	; 0xa4
      _b = b;
    a57e:	mvn.w	r2, #23
    a582:	strb.w	r5, [r4, #197]	; 0xc5
    a586:	strb.w	r2, [r4, #165]	; 0xa5
    a58a:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a58e:	str.w	r5, [r4, #200]	; 0xc8
      _s = s;
      _b = b;
    a592:	strb.w	r2, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a596:	mov.w	r2, #4294967295
    a59a:	strb.w	r5, [r4, #204]	; 0xcc
    a59e:	strb.w	r2, [r4, #180]	; 0xb4
      _b = b;
    a5a2:	mov.w	r2, #14
    a5a6:	strb.w	r5, [r4, #205]	; 0xcd
    a5aa:	strb.w	r2, [r4, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5ae:	movw	r2, #359	; 0x167
    a5b2:	str.w	r5, [r4, #208]	; 0xd0
    a5b6:	str.w	r2, [r4, #224]	; 0xe0
      _s = s;
    a5ba:	mvn.w	r2, #8
    a5be:	strb.w	r5, [r4, #212]	; 0xd4
    a5c2:	strb.w	r2, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5c6:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    a5ca:	strb.w	r5, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5ce:	str.w	r2, [r4, #152]	; 0x98
    a5d2:	movs	r2, #15
    a5d4:	str.w	r5, [r4, #216]	; 0xd8
    a5d8:	str.w	r2, [r4, #168]	; 0xa8
      _s = s;
      _b = b;
    a5dc:	mov.w	r2, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a5e0:	strb.w	r5, [r4, #220]	; 0xdc
      _b = b;
    a5e4:	strb.w	r5, [r4, #221]	; 0xdd
    a5e8:	strb.w	r2, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5ec:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    a5f0:	strb.w	r9, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5f4:	str.w	r2, [r4, #232]	; 0xe8
      _s = s;
    a5f8:	mvn.w	r2, #54	; 0x36
      _b = b;
    a5fc:	strb.w	r9, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a600:	strb.w	r2, [r4, #236]	; 0xec
      _b = b;
    a604:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a608:	str.w	r8, [r4, #296]	; 0x128
      _s = s;
      _b = b;
    a60c:	strb.w	r2, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a610:	mvn.w	r2, #34	; 0x22
    a614:	strb.w	r2, [r4, #244]	; 0xf4
      _b = b;
    a618:	mvn.w	r2, #13
    a61c:	strb.w	r2, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a620:	movs	r2, #9
    a622:	str.w	r2, [r4, #248]	; 0xf8
      _s = s;
    a626:	mvn.w	r2, #32
    a62a:	strb.w	r2, [r4, #252]	; 0xfc
      _b = b;
    a62e:	mov.w	r2, #4294967295
    a632:	strb.w	r2, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a636:	movs	r2, #11
    a638:	str.w	r2, [r4, #256]	; 0x100
      _s = s;
    a63c:	mvn.w	r2, #32
    a640:	strb.w	r2, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a644:	movs	r2, #10
    a646:	str.w	r2, [r4, #264]	; 0x108
      _s = s;
    a64a:	mvn.w	r2, #76	; 0x4c
    a64e:	strb.w	r2, [r4, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a652:	movs	r2, #2
    a654:	str.w	r2, [r4, #272]	; 0x110
      _s = s;
    a658:	mov.w	r2, #99	; 0x63
    a65c:	strb.w	r2, [r4, #276]	; 0x114
      _b = b;
    a660:	mvn.w	r2, #2
    a664:	strb.w	r2, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a668:	movw	r2, #359	; 0x167
    a66c:	str.w	r2, [r4, #280]	; 0x118
      _s = s;
    a670:	mvn.w	r2, #43	; 0x2b
    a674:	strb.w	r2, [r4, #284]	; 0x11c
      _b = b;
    a678:	mvn.w	r2, #38	; 0x26
    a67c:	strb.w	r2, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a680:	movs	r2, #2
    a682:	str.w	r2, [r4, #288]	; 0x120
      _s = s;
    a686:	mvn.w	r2, #34	; 0x22
    a68a:	strb.w	r2, [r4, #292]	; 0x124
      _b = b;
    a68e:	mvn.w	r2, #52	; 0x34
    a692:	strb.w	r2, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a696:	mvn.w	r2, #121	; 0x79
    a69a:	strb.w	r2, [r4, #300]	; 0x12c
      _b = b;
    a69e:	mov.w	r2, #4294967295
    a6a2:	strb.w	r2, [r4, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6a6:	movs	r2, #15
    a6a8:	str.w	r2, [r4, #304]	; 0x130
      _s = s;
    a6ac:	mvn.w	r2, #32
    a6b0:	strb.w	r2, [r4, #308]	; 0x134
      _b = b;
    a6b4:	mov.w	r2, #4294967295
    a6b8:	strb.w	r2, [r4, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6bc:	movs	r2, #11
    a6be:	str.w	r2, [r4, #312]	; 0x138
      _s = s;
    a6c2:	mvn.w	r2, #19
    a6c6:	strb.w	r2, [r4, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6ca:	movs	r2, #8
    a6cc:	str.w	r2, [r4, #240]	; 0xf0
      _s = s;
      _b = b;
    a6d0:	mvn.w	r2, #57	; 0x39
    a6d4:	strb.w	r2, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6d8:	movs	r2, #9
      _s = s;
      _b = b;
    a6da:	strb.w	lr, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6de:	str.w	r2, [r4, #320]	; 0x140
      _s = s;
    a6e2:	mvn.w	r2, #16
      _b = b;
    a6e6:	strb.w	r9, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a6ea:	strb.w	r2, [r4, #324]	; 0x144
      _b = b;
    a6ee:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6f2:	str.w	r5, [r4, #344]	; 0x158
      _s = s;
      _b = b;
    a6f6:	strb.w	r2, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6fa:	movs	r2, #11
      _s = s;
      _b = b;
    a6fc:	strb.w	sl, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a700:	str.w	r2, [r4, #328]	; 0x148
      _s = s;
    a704:	mvn.w	r2, #32
      _b = b;
    a708:	strb.w	fp, [r4, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a70c:	strb.w	r2, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a710:	movs	r2, #1
    a712:	str.w	r5, [r4, #376]	; 0x178
    a716:	str.w	r2, [r4, #336]	; 0x150
      _s = s;
    a71a:	mvn.w	r2, #121	; 0x79
    a71e:	strb.w	r5, [r4, #380]	; 0x17c
    a722:	strb.w	r2, [r4, #340]	; 0x154
    a726:	mvn.w	r2, #81	; 0x51
      _b = b;
    a72a:	strb.w	r5, [r4, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a72e:	strb.w	r2, [r4, #348]	; 0x15c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a732:	movs	r2, #17
    a734:	str.w	r5, [r4, #384]	; 0x180
    a738:	str.w	r2, [r4, #352]	; 0x160
      _s = s;
    a73c:	mvn.w	r2, #23
    a740:	strb.w	r5, [r4, #388]	; 0x184
    a744:	strb.w	r2, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a748:	movs	r2, #5
      _s = s;
      _b = b;
    a74a:	strb.w	r5, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a74e:	str.w	r2, [r4, #360]	; 0x168
      _s = s;
    a752:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a756:	str.w	r5, [r4, #392]	; 0x188
      _s = s;
    a75a:	strb.w	r2, [r4, #364]	; 0x16c
      _b = b;
    a75e:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a762:	strb.w	r5, [r4, #396]	; 0x18c
      _b = b;
    a766:	strb.w	r2, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a76a:	movs	r2, #2
      _s = s;
      _b = b;
    a76c:	strb.w	r5, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a770:	str.w	r2, [r4, #368]	; 0x170
      _s = s;
    a774:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a778:	str.w	r5, [r4, #400]	; 0x190
      _s = s;
    a77c:	strb.w	r2, [r4, #372]	; 0x174
      _b = b;
    a780:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a784:	strb.w	r5, [r4, #404]	; 0x194
      _b = b;
    a788:	strb.w	r2, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a78c:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    a790:	strb.w	r5, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a794:	str.w	r2, [r4, #408]	; 0x198
      _s = s;
    a798:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a79c:	str.w	ip, [r4, #416]	; 0x1a0
      _s = s;
    a7a0:	strb.w	r2, [r4, #412]	; 0x19c
      _b = b;
    a7a4:	mov.w	r2, #94	; 0x5e
    a7a8:	strb.w	lr, [r4, #429]	; 0x1ad
    a7ac:	strb.w	r2, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a7b0:	mvn.w	r2, #11
      _b = b;
    a7b4:	strb.w	r9, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a7b8:	strb.w	r2, [r4, #420]	; 0x1a4
    a7bc:	mvn.w	r2, #42	; 0x2a
      _b = b;
    a7c0:	strb.w	sl, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a7c4:	strb.w	r2, [r4, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7c8:	movs	r2, #13
    a7ca:	str.w	r8, [r4, #424]	; 0x1a8
    a7ce:	str.w	r2, [r4, #432]	; 0x1b0
      _s = s;
    a7d2:	mvn.w	r2, #32
    a7d6:	strb.w	r2, [r4, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7da:	movs	r2, #13
    a7dc:	str.w	r2, [r4, #440]	; 0x1b8
      _s = s;
    a7e0:	mvn.w	r2, #25
    a7e4:	strb.w	r2, [r4, #444]	; 0x1bc
      _b = b;
    a7e8:	mvn.w	r2, #10
    a7ec:	strb.w	r2, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7f0:	movs	r2, #15
    a7f2:	str.w	r2, [r4, #448]	; 0x1c0
      _s = s;
    a7f6:	mvn.w	r2, #24
    a7fa:	strb.w	r2, [r4, #452]	; 0x1c4
      _b = b;
    a7fe:	mvn.w	r2, #16
    a802:	strb.w	r2, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a806:	movs	r2, #17
    a808:	str.w	r2, [r4, #456]	; 0x1c8
      _s = s;
    a80c:	mvn.w	r2, #34	; 0x22
    a810:	strb.w	r2, [r4, #460]	; 0x1cc
      _b = b;
    a814:	mov.w	r2, #4294967295
    a818:	strb.w	r2, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a81c:	movs	r2, #16
    a81e:	str.w	r2, [r4, #464]	; 0x1d0
      _s = s;
    a822:	mvn.w	r2, #37	; 0x25
    a826:	strb.w	r2, [r4, #468]	; 0x1d4
      _b = b;
    a82a:	mov.w	r2, #4294967295
    a82e:	strb.w	r2, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a832:	movs	r2, #3
    a834:	str.w	r2, [r4, #472]	; 0x1d8
      _s = s;
    a838:	mvn.w	r2, #89	; 0x59
    a83c:	strb.w	r2, [r4, #476]	; 0x1dc
      _b = b;
    a840:	mvn.w	r2, #16
    a844:	strb.w	r2, [r4, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a848:	movs	r2, #2
    a84a:	str.w	r2, [r4, #480]	; 0x1e0
      _s = s;
    a84e:	mvn.w	r2, #116	; 0x74
    a852:	strb.w	r2, [r4, #484]	; 0x1e4
      _b = b;
    a856:	mvn.w	r2, #40	; 0x28
    a85a:	strb.w	r2, [r4, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a85e:	movs	r2, #10
    a860:	str.w	r2, [r4, #488]	; 0x1e8
      _s = s;
    a864:	mvn.w	r2, #73	; 0x49
    a868:	strb.w	r2, [r4, #492]	; 0x1ec
      _b = b;
    a86c:	mov.w	r2, #4294967295
    a870:	strb.w	r2, [r4, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a874:	movs	r2, #13
      _s = s;
    a876:	strb.w	lr, [r4, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a87a:	str.w	r2, [r4, #496]	; 0x1f0
    a87e:	movs	r2, #14
      _s = s;
      _b = b;
    a880:	strb.w	r9, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a884:	str.w	r2, [r4, #504]	; 0x1f8
      _s = s;
      _b = b;
    a888:	mov.w	r2, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a88c:	strb.w	sl, [r4, #500]	; 0x1f4
      _b = b;
    a890:	strb.w	r2, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a894:	movs	r2, #9
      _s = s;
      _b = b;
    a896:	strb.w	fp, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a89a:	str.w	r2, [r4, #512]	; 0x200
      _s = s;
      _b = b;
    a89e:	mov.w	r2, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8a2:	strb.w	fp, [r4, #516]	; 0x204
      _b = b;
    a8a6:	strb.w	r2, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8aa:	movs	r2, #10
      _s = s;
    a8ac:	strb.w	sl, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8b0:	str.w	r2, [r4, #520]	; 0x208
      _s = s;
      _b = b;
    a8b4:	mvn.w	r2, #20
    a8b8:	strb.w	fp, [r4, #549]	; 0x225
    a8bc:	strb.w	r2, [r4, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8c0:	movs	r2, #4
    a8c2:	str.w	r5, [r4, #568]	; 0x238
    a8c6:	str.w	r2, [r4, #528]	; 0x210
      _s = s;
    a8ca:	mvn.w	r2, #104	; 0x68
    a8ce:	strb.w	r5, [r4, #572]	; 0x23c
    a8d2:	strb.w	r2, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8d6:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    a8da:	strb.w	r5, [r4, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8de:	str.w	r2, [r4, #536]	; 0x218
      _s = s;
    a8e2:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8e6:	str.w	r5, [r4, #576]	; 0x240
      _s = s;
    a8ea:	strb.w	r2, [r4, #540]	; 0x21c
      _b = b;
    a8ee:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8f2:	strb.w	r5, [r4, #580]	; 0x244
      _b = b;
    a8f6:	strb.w	r2, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8fa:	movs	r2, #17
    a8fc:	str.w	r2, [r4, #544]	; 0x220
      _s = s;
    a900:	mvn.w	r2, #22
    a904:	strb.w	r2, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a908:	movw	r2, #357	; 0x165
    a90c:	str.w	r2, [r4, #552]	; 0x228
      _s = s;
    a910:	mvn.w	r2, #16
    a914:	strb.w	r2, [r4, #556]	; 0x22c
      _b = b;
    a918:	mvn.w	r2, #56	; 0x38
    a91c:	strb.w	r2, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a920:	mov.w	r2, #4294967295
    a924:	strb.w	r2, [r4, #564]	; 0x234
      _b = b;
    a928:	mvn.w	r2, #78	; 0x4e
    a92c:	strb.w	r2, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a930:	mov.w	r2, #354	; 0x162
    a934:	str.w	r2, [r4, #560]	; 0x230
    a938:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    a93c:	strb.w	r5, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a940:	str.w	r2, [r4, #592]	; 0x250
      _s = s;
    a944:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a948:	str.w	r3, [r4, #640]	; 0x280
      _s = s;
      _b = b;
    a94c:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a950:	strb.w	r2, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a954:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    a958:	strb.w	r9, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a95c:	str.w	r2, [r4, #600]	; 0x258
      _s = s;
    a960:	mov.w	r2, #4294967295
    a964:	strb.w	r0, [r4, #668]	; 0x29c
    a968:	strb.w	r2, [r4, #604]	; 0x25c
      _b = b;
    a96c:	mvn.w	r2, #113	; 0x71
    a970:	strb.w	r1, [r4, #597]	; 0x255
    a974:	mvn.w	r1, #32
    a978:	strb.w	r2, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a97c:	movs	r2, #3
    a97e:	str.w	r5, [r4, #584]	; 0x248
    a982:	str.w	r2, [r4, #608]	; 0x260
      _s = s;
    a986:	mvn.w	r2, #28
    a98a:	strb.w	r5, [r4, #588]	; 0x24c
    a98e:	strb.w	r2, [r4, #612]	; 0x264
      _b = b;
    a992:	mvn.w	r2, #34	; 0x22
    a996:	strb.w	r5, [r4, #589]	; 0x24d
    a99a:	strb.w	r2, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a99e:	movs	r2, #10
      _s = s;
    a9a0:	strb.w	fp, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9a4:	str.w	r2, [r4, #616]	; 0x268
      _s = s;
    a9a8:	mvn.w	r2, #33	; 0x21
    a9ac:	strb.w	r2, [r4, #620]	; 0x26c
      _b = b;
    a9b0:	mvn.w	r2, #7
    a9b4:	strb.w	r2, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9b8:	movs	r2, #15
    a9ba:	str.w	r2, [r4, #624]	; 0x270
      _s = s;
    a9be:	mvn.w	r2, #25
    a9c2:	strb.w	r2, [r4, #628]	; 0x274
      _b = b;
    a9c6:	mov.w	r2, #4294967295
    a9ca:	strb.w	r2, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9ce:	movs	r2, #17
    a9d0:	str.w	r2, [r4, #632]	; 0x278
      _s = s;
    a9d4:	mvn.w	r2, #10
    a9d8:	strb.w	r2, [r4, #636]	; 0x27c
      _b = b;
    a9dc:	mvn.w	r2, #45	; 0x2d
    a9e0:	strb.w	r2, [r4, #637]	; 0x27d
    a9e4:	mvn.w	r2, #102	; 0x66
    a9e8:	strb.w	r2, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9ec:	movs	r2, #20
    a9ee:	str.w	r2, [r4, #648]	; 0x288
      _s = s;
    a9f2:	mvn.w	r2, #35	; 0x23
    a9f6:	strb.w	r2, [r4, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9fa:	movs	r2, #18
    a9fc:	str.w	r2, [r4, #656]	; 0x290
      _s = s;
    aa00:	mvn.w	r2, #37	; 0x25
    aa04:	strb.w	r2, [r4, #660]	; 0x294
      _b = b;
    aa08:	mov.w	r2, #4294967295
    aa0c:	strb.w	r2, [r4, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa10:	movs	r2, #10
    aa12:	str.w	r2, [r4, #664]	; 0x298
      _s = s;
      _b = b;
    aa16:	strb.w	r3, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa1a:	movs	r3, #3
    aa1c:	str.w	r2, [r4, #680]	; 0x2a8
      _s = s;
      _b = b;
    aa20:	mvn.w	r2, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa24:	str.w	r3, [r4, #672]	; 0x2a0
      _s = s;
    aa28:	mvn.w	r3, #73	; 0x49
      _b = b;
    aa2c:	strb.w	r9, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa30:	strb.w	r3, [r4, #676]	; 0x2a4
      _b = b;
    aa34:	mvn.w	r3, #51	; 0x33
    aa38:	strb.w	r9, [r4, #717]	; 0x2cd
    aa3c:	strb.w	r3, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa40:	mvn.w	r3, #81	; 0x51
      _b = b;
    aa44:	strb.w	r6, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa48:	movs	r6, #14
      _s = s;
    aa4a:	strb.w	r3, [r4, #684]	; 0x2ac
      _b = b;
    aa4e:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa52:	strb.w	lr, [r4, #756]	; 0x2f4
      _b = b;
    aa56:	strb.w	r3, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa5a:	movs	r3, #13
      _s = s;
    aa5c:	strb.w	fp, [r4, #708]	; 0x2c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa60:	str.w	r3, [r4, #688]	; 0x2b0
      _s = s;
    aa64:	mvn.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa68:	str.w	r8, [r4, #736]	; 0x2e0
      _s = s;
    aa6c:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa70:	movs	r3, #12
    aa72:	str.w	r3, [r4, #696]	; 0x2b8
      _s = s;
    aa76:	mvn.w	r3, #9
    aa7a:	strb.w	r3, [r4, #700]	; 0x2bc
      _b = b;
    aa7e:	mvn.w	r3, #81	; 0x51
    aa82:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa86:	movs	r3, #12
    aa88:	str.w	r3, [r4, #704]	; 0x2c0
      _s = s;
      _b = b;
    aa8c:	mvn.w	r3, #114	; 0x72
    aa90:	strb.w	r3, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa94:	movs	r3, #12
    aa96:	str.w	r3, [r4, #712]	; 0x2c8
      _s = s;
    aa9a:	mvn.w	r3, #33	; 0x21
    aa9e:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaa2:	movs	r3, #7
    aaa4:	str.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    aaa8:	mvn.w	r3, #110	; 0x6e
    aaac:	strb.w	r3, [r4, #724]	; 0x2d4
      _b = b;
    aab0:	mov.w	r3, #4294967295
    aab4:	strb.w	r3, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aab8:	movs	r3, #1
    aaba:	str.w	r3, [r4, #728]	; 0x2d8
      _s = s;
    aabe:	mvn.w	r3, #28
    aac2:	strb.w	r3, [r4, #732]	; 0x2dc
      _b = b;
    aac6:	mvn.w	r3, #36	; 0x24
    aaca:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aace:	mvn.w	r3, #23
    aad2:	strb.w	r3, [r4, #740]	; 0x2e4
      _b = b;
    aad6:	mvn.w	r3, #26
    aada:	strb.w	r3, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aade:	movw	r3, #357	; 0x165
    aae2:	str.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    aae6:	mvn.w	r3, #11
    aaea:	strb.w	r3, [r4, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaee:	mov.w	r3, #354	; 0x162
    aaf2:	str.w	r3, [r4, #752]	; 0x2f0
      _s = s;
      _b = b;
    aaf6:	mvn.w	r3, #50	; 0x32
    aafa:	strb.w	r3, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aafe:	movs	r3, #1
      _s = s;
      _b = b;
    ab00:	strb.w	r2, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab04:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab08:	str.w	r3, [r4, #776]	; 0x308
      _s = s;
    ab0c:	mvn.w	r3, #10
    ab10:	strb.w	r2, [r4, #844]	; 0x34c
      _b = b;
    ab14:	mvn.w	r2, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab18:	strb.w	r3, [r4, #780]	; 0x30c
      _b = b;
    ab1c:	mov.w	r3, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab20:	str.w	ip, [r4, #792]	; 0x318
      _s = s;
      _b = b;
    ab24:	strb.w	r3, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab28:	movs	r3, #2
    ab2a:	str.w	r5, [r4, #760]	; 0x2f8
    ab2e:	str.w	r3, [r4, #784]	; 0x310
      _s = s;
    ab32:	mvn.w	r3, #16
    ab36:	strb.w	r5, [r4, #764]	; 0x2fc
    ab3a:	strb.w	r3, [r4, #788]	; 0x314
      _b = b;
    ab3e:	mvn.w	r3, #57	; 0x39
    ab42:	strb.w	r5, [r4, #765]	; 0x2fd
    ab46:	strb.w	r3, [r4, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab4a:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab4e:	str.w	r5, [r4, #768]	; 0x300
      _s = s;
    ab52:	strb.w	r3, [r4, #796]	; 0x31c
      _b = b;
    ab56:	mvn.w	r3, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab5a:	strb.w	r5, [r4, #772]	; 0x304
      _b = b;
    ab5e:	strb.w	r3, [r4, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab62:	movs	r3, #8
      _s = s;
      _b = b;
    ab64:	strb.w	r5, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab68:	str.w	r3, [r4, #800]	; 0x320
      _s = s;
    ab6c:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab70:	str.w	r8, [r4, #808]	; 0x328
      _s = s;
    ab74:	strb.w	r3, [r4, #804]	; 0x324
      _b = b;
    ab78:	mvn.w	r3, #18
    ab7c:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab80:	mvn.w	r3, #25
    ab84:	strb.w	r3, [r4, #812]	; 0x32c
      _b = b;
    ab88:	mvn.w	r3, #26
    ab8c:	strb.w	r3, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab90:	mvn.w	r3, #20
    ab94:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    ab98:	mov.w	r3, #4294967295
    ab9c:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aba0:	movs	r3, #22
    aba2:	str.w	r3, [r4, #824]	; 0x338
      _s = s;
    aba6:	mvn.w	r3, #26
    abaa:	strb.w	r3, [r4, #828]	; 0x33c
      _b = b;
    abae:	mvn.w	r3, #31
    abb2:	strb.w	r3, [r4, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abb6:	movs	r3, #32
    abb8:	str.w	r3, [r4, #832]	; 0x340
      _s = s;
    abbc:	mvn.w	r3, #2
    abc0:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abc4:	movs	r3, #17
    abc6:	str.w	r3, [r4, #840]	; 0x348
    abca:	movs	r3, #19
    abcc:	str.w	r3, [r4, #816]	; 0x330
      _s = s;
      _b = b;
    abd0:	strb.w	r2, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    abd4:	mvn.w	r2, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abd8:	str.w	r3, [r4, #848]	; 0x350
      _s = s;
      _b = b;
    abdc:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    abe0:	strb.w	r2, [r4, #916]	; 0x394
    abe4:	mvn.w	r2, #73	; 0x49
      _b = b;
    abe8:	strb.w	r3, [r4, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abec:	movs	r3, #9
      _s = s;
    abee:	strb.w	r2, [r4, #852]	; 0x354
    abf2:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abf6:	str.w	r3, [r4, #856]	; 0x358
    abfa:	movw	r3, #355	; 0x163
      _s = s;
    abfe:	strb.w	r2, [r4, #860]	; 0x35c
      _b = b;
    ac02:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac06:	str.w	r3, [r4, #864]	; 0x360
      _s = s;
    ac0a:	mvn.w	r3, #2
      _b = b;
    ac0e:	strb.w	r2, [r4, #861]	; 0x35d
    ac12:	mvn.w	r2, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ac16:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    ac1a:	strb.w	r3, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac1e:	movs	r3, #15
      _s = s;
      _b = b;
    ac20:	strb.w	r2, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ac24:	mvn.w	r2, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac28:	str.w	r3, [r4, #880]	; 0x370
    ac2c:	movs	r3, #13
      _s = s;
    ac2e:	strb.w	r2, [r4, #876]	; 0x36c
    ac32:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac36:	str.w	r3, [r4, #888]	; 0x378
    ac3a:	str.w	r3, [r4, #896]	; 0x380
      _s = s;
      _b = b;
    ac3e:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ac42:	strb.w	r2, [r4, #892]	; 0x37c
    ac46:	mvn.w	r2, #33	; 0x21
      _b = b;
    ac4a:	strb.w	r3, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac4e:	movs	r3, #15
      _s = s;
    ac50:	strb.w	r2, [r4, #900]	; 0x384
    ac54:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac58:	str.w	r3, [r4, #904]	; 0x388
      _s = s;
      _b = b;
    ac5c:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ac60:	strb.w	r2, [r4, #924]	; 0x39c
    ac64:	mvn.w	r2, #23
      _b = b;
    ac68:	strb.w	r3, [r4, #909]	; 0x38d
    ac6c:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac70:	movs	r3, #3
      _s = s;
    ac72:	strb.w	r2, [r4, #932]	; 0x3a4
      _b = b;
    ac76:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac7a:	str.w	r3, [r4, #920]	; 0x398
    ac7e:	movs	r3, #7
      _s = s;
    ac80:	strb.w	r0, [r4, #884]	; 0x374
      _b = b;
    ac84:	strb.w	r9, [r4, #885]	; 0x375
    ac88:	strb.w	r9, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ac8c:	strb.w	r0, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ac90:	str.w	r3, [r4, #928]	; 0x3a0
    ac94:	movw	r3, #355	; 0x163
    ac98:	str.w	r8, [r4, #872]	; 0x368
    ac9c:	str.w	r8, [r4, #912]	; 0x390
      _s = s;
      _b = b;
    aca0:	strb.w	sl, [r4, #925]	; 0x39d
    aca4:	strb.w	r2, [r4, #933]	; 0x3a5
    aca8:	mov.w	r2, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    acac:	str.w	r3, [r4, #944]	; 0x3b0
    acb0:	movw	r3, #359	; 0x167
      _s = s;
      _b = b;
    acb4:	strb.w	r2, [r4, #965]	; 0x3c5
    acb8:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    acbc:	str.w	r3, [r4, #960]	; 0x3c0
      _s = s;
    acc0:	mov.w	r3, #4294967295
      _b = b;
    acc4:	strb.w	r2, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    acc8:	mvn.w	r2, #10
    accc:	strb.w	r3, [r4, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    acd0:	movs	r3, #5
      _s = s;
    acd2:	strb.w	r2, [r4, #948]	; 0x3b4
      _b = b;
    acd6:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    acda:	str.w	r3, [r4, #968]	; 0x3c8
    acde:	movs	r3, #4
      _s = s;
      _b = b;
    ace0:	strb.w	r2, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ace4:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ace8:	str.w	r3, [r4, #976]	; 0x3d0
      _s = s;
    acec:	strb.w	r2, [r4, #972]	; 0x3cc
      _b = b;
    acf0:	mvn.w	r2, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    acf4:	str.w	r3, [r4, #992]	; 0x3e0
    acf8:	movs	r3, #14
      _s = s;
      _b = b;
    acfa:	strb.w	r2, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    acfe:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad02:	str.w	r3, [r4, #1008]	; 0x3f0
    ad06:	movs	r3, #26
      _s = s;
    ad08:	strb.w	r2, [r4, #980]	; 0x3d4
      _b = b;
    ad0c:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad10:	strb.w	r0, [r4, #940]	; 0x3ac
      _b = b;
    ad14:	strb.w	r2, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad18:	mov.w	r2, #106	; 0x6a
      _b = b;
    ad1c:	strb.w	r9, [r4, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad20:	strb.w	r2, [r4, #988]	; 0x3dc
      _b = b;
    ad24:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad28:	str.w	r3, [r4, #1016]	; 0x3f8
    ad2c:	movs	r3, #25
      _s = s;
      _b = b;
    ad2e:	strb.w	r2, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad32:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad36:	str.w	r5, [r4, #936]	; 0x3a8
      _s = s;
    ad3a:	strb.w	r2, [r4, #996]	; 0x3e4
    ad3e:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad42:	str.w	r5, [r4, #952]	; 0x3b8
      _s = s;
    ad46:	strb.w	r2, [r4, #1004]	; 0x3ec
      _b = b;
    ad4a:	mvn.w	r2, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad4e:	strb.w	r5, [r4, #956]	; 0x3bc
      _b = b;
    ad52:	strb.w	r2, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad56:	mvn.w	r2, #24
      _b = b;
    ad5a:	strb.w	r5, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad5e:	strb.w	r2, [r4, #1012]	; 0x3f4
      _b = b;
    ad62:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad66:	str.w	r8, [r4, #984]	; 0x3d8
      _s = s;
      _b = b;
    ad6a:	strb.w	r2, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad6e:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad72:	str.w	r5, [r4, #1000]	; 0x3e8
      _s = s;
    ad76:	strb.w	r2, [r4, #1020]	; 0x3fc
      _b = b;
    ad7a:	mvn.w	r2, #7
    ad7e:	strb.w	r2, [r4, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad82:	mov.w	r2, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad86:	str.w	r3, [r4, #1024]	; 0x400
    ad8a:	movs	r3, #21
      _s = s;
    ad8c:	strb.w	r2, [r4, #1036]	; 0x40c
      _b = b;
    ad90:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ad94:	str.w	r3, [r4, #1032]	; 0x408
    ad98:	movs	r3, #14
      _s = s;
      _b = b;
    ad9a:	strb.w	r2, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ad9e:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ada2:	str.w	r3, [r4, #1040]	; 0x410
    ada6:	movs	r3, #10
      _s = s;
    ada8:	strb.w	r2, [r4, #1044]	; 0x414
      _b = b;
    adac:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    adb0:	str.w	r3, [r4, #1048]	; 0x418
      _s = s;
    adb4:	mov.w	r3, #4294967295
      _b = b;
    adb8:	strb.w	r2, [r4, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    adbc:	mvn.w	r2, #42	; 0x2a
    adc0:	strb.w	r3, [r4, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    adc4:	movs	r3, #8
      _s = s;
    adc6:	strb.w	r2, [r4, #1052]	; 0x41c
      _b = b;
    adca:	mvn.w	r2, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    adce:	str.w	r3, [r4, #1072]	; 0x430
    add2:	movs	r3, #16
      _s = s;
      _b = b;
    add4:	strb.w	r2, [r4, #1053]	; 0x41d
    add8:	mov.w	r2, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    addc:	str.w	r3, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    ade0:	mov.w	r3, #4294967295
    ade4:	strb.w	r2, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ade8:	mvn.w	r2, #85	; 0x55
      _b = b;
    adec:	strb.w	r3, [r4, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    adf0:	movs	r3, #13
      _s = s;
    adf2:	strb.w	r2, [r4, #1068]	; 0x42c
      _b = b;
    adf6:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    adfa:	str.w	r3, [r4, #1088]	; 0x440
      _s = s;
      _b = b;
    adfe:	mov.w	r3, #4294967295
    ae02:	strb.w	r2, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ae06:	mvn.w	r2, #90	; 0x5a
      _b = b;
    ae0a:	strb.w	r3, [r4, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae0e:	movs	r3, #3
      _s = s;
    ae10:	strb.w	r2, [r4, #1076]	; 0x434
    ae14:	mvn.w	r2, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae18:	str.w	r3, [r4, #1104]	; 0x450
      _s = s;
      _b = b;
    ae1c:	mvn.w	r3, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ae20:	strb.w	r2, [r4, #1084]	; 0x43c
    ae24:	mvn.w	r2, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae28:	str.w	ip, [r4, #1056]	; 0x420
      _s = s;
    ae2c:	strb.w	r2, [r4, #1092]	; 0x444
    ae30:	mov.w	r2, #127	; 0x7f
    ae34:	strb.w	r0, [r4, #1028]	; 0x404
    ae38:	strb.w	r2, [r4, #1100]	; 0x44c
    ae3c:	mvn.w	r2, #57	; 0x39
      _b = b;
    ae40:	strb.w	r9, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ae44:	strb.w	r2, [r4, #1108]	; 0x454
    ae48:	mvn.w	r2, #15
      _b = b;
    ae4c:	strb.w	r9, [r4, #1101]	; 0x44d
    ae50:	strb.w	fp, [r4, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae54:	str.w	r5, [r4, #1064]	; 0x428
    ae58:	str.w	r8, [r4, #1096]	; 0x448
      _s = s;
      _b = b;
    ae5c:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae60:	movw	r3, #357	; 0x165
      _s = s;
    ae64:	strb.w	r2, [r4, #1116]	; 0x45c
      _b = b;
    ae68:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae6c:	str.w	r3, [r4, #1112]	; 0x458
    ae70:	movs	r3, #1
      _s = s;
      _b = b;
    ae72:	strb.w	r2, [r4, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ae76:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae7a:	str.w	r3, [r4, #1120]	; 0x460
      _s = s;
    ae7e:	strb.w	r2, [r4, #1124]	; 0x464
      _b = b;
    ae82:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae86:	str.w	r3, [r4, #1128]	; 0x468
    ae8a:	movs	r3, #4
      _s = s;
      _b = b;
    ae8c:	strb.w	r2, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ae90:	mov.w	r2, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ae94:	str.w	r3, [r4, #1136]	; 0x470
    ae98:	mov.w	r3, #358	; 0x166
      _s = s;
    ae9c:	strb.w	r2, [r4, #1132]	; 0x46c
    aea0:	mov.w	r2, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aea4:	str.w	r3, [r4, #1152]	; 0x480
    aea8:	movs	r3, #8
      _s = s;
    aeaa:	strb.w	r2, [r4, #1140]	; 0x474
      _b = b;
    aeae:	mov.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aeb2:	str.w	r3, [r4, #1160]	; 0x488
      _s = s;
      _b = b;
    aeb6:	strb.w	r2, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aeba:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aebe:	str.w	r3, [r4, #1168]	; 0x490
    aec2:	movs	r3, #10
      _s = s;
    aec4:	strb.w	r2, [r4, #1156]	; 0x484
      _b = b;
    aec8:	mvn.w	r2, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aecc:	str.w	r3, [r4, #1176]	; 0x498
      _s = s;
      _b = b;
    aed0:	mov.w	r3, #4294967295
    aed4:	strb.w	r2, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aed8:	mvn.w	r2, #19
      _b = b;
    aedc:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aee0:	movs	r3, #18
      _s = s;
    aee2:	strb.w	r2, [r4, #1164]	; 0x48c
      _b = b;
    aee6:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aeea:	str.w	r3, [r4, #1184]	; 0x4a0
      _s = s;
      _b = b;
    aeee:	mov.w	r3, #4294967295
    aef2:	strb.w	r2, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aef6:	mov.w	r2, #88	; 0x58
      _b = b;
    aefa:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aefe:	movs	r3, #15
      _s = s;
    af00:	strb.w	r2, [r4, #1172]	; 0x494
    af04:	mvn.w	r2, #113	; 0x71
      _b = b;
    af08:	strb.w	r9, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    af0c:	strb.w	r2, [r4, #1180]	; 0x49c
    af10:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af14:	str.w	r3, [r4, #1192]	; 0x4a8
    af18:	movw	r3, #359	; 0x167
      _s = s;
    af1c:	strb.w	r2, [r4, #1188]	; 0x4a4
    af20:	mvn.w	r2, #23
    af24:	strb.w	r0, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af28:	str.w	r5, [r4, #1144]	; 0x478
      _s = s;
    af2c:	strb.w	r5, [r4, #1148]	; 0x47c
      _b = b;
    af30:	strb.w	r5, [r4, #1149]	; 0x47d
    af34:	strb.w	fp, [r4, #1173]	; 0x495
    af38:	strb.w	lr, [r4, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    af3c:	strb.w	r2, [r4, #1204]	; 0x4b4
      _b = b;
    af40:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af44:	str.w	r3, [r4, #1200]	; 0x4b0
    af48:	movs	r3, #8
      _s = s;
      _b = b;
    af4a:	strb.w	r2, [r4, #1205]	; 0x4b5
    af4e:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af52:	str.w	r3, [r4, #1208]	; 0x4b8
    af56:	movs	r3, #12
      _s = s;
      _b = b;
    af58:	strb.w	r2, [r4, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    af5c:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af60:	str.w	r3, [r4, #1216]	; 0x4c0
    af64:	movs	r3, #5
      _s = s;
    af66:	strb.w	r2, [r4, #1220]	; 0x4c4
      _b = b;
    af6a:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af6e:	str.w	r3, [r4, #1224]	; 0x4c8
    af72:	movw	r3, #357	; 0x165
      _s = s;
      _b = b;
    af76:	strb.w	r2, [r4, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    af7a:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af7e:	str.w	r3, [r4, #1232]	; 0x4d0
      _s = s;
    af82:	mov.w	r3, #4294967295
    af86:	strb.w	r2, [r4, #1228]	; 0x4cc
      _b = b;
    af8a:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    af8e:	strb.w	r3, [r4, #1236]	; 0x4d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af92:	movs	r3, #12
      _s = s;
      _b = b;
    af94:	strb.w	r2, [r4, #1229]	; 0x4cd
    af98:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    af9c:	str.w	r3, [r4, #1240]	; 0x4d8
    afa0:	movs	r3, #11
      _s = s;
      _b = b;
    afa2:	strb.w	r2, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    afa6:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    afaa:	str.w	r3, [r4, #1248]	; 0x4e0
    afae:	movs	r3, #14
      _s = s;
    afb0:	strb.w	r2, [r4, #1244]	; 0x4dc
      _b = b;
    afb4:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    afb8:	str.w	r3, [r4, #1256]	; 0x4e8
    afbc:	movs	r3, #2
      _s = s;
      _b = b;
    afbe:	strb.w	r2, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    afc2:	mvn.w	r2, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    afc6:	str.w	r3, [r4, #1272]	; 0x4f8
    afca:	movw	r3, #359	; 0x167
      _s = s;
    afce:	strb.w	r2, [r4, #1252]	; 0x4e4
      _b = b;
    afd2:	mvn.w	r2, #12
    afd6:	strb.w	r0, [r4, #1269]	; 0x4f5
    afda:	strb.w	r2, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    afde:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    afe2:	str.w	r3, [r4, #1280]	; 0x500
    afe6:	movs	r3, #1
      _s = s;
    afe8:	strb.w	r2, [r4, #1260]	; 0x4ec
      _b = b;
    afec:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aff0:	strb.w	sl, [r4, #1212]	; 0x4bc
      _b = b;
    aff4:	strb.w	r2, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aff8:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    affc:	str.w	r5, [r4, #1264]	; 0x4f0
      _s = s;
    b000:	strb.w	r2, [r4, #1268]	; 0x4f4
    b004:	mvn.w	r2, #79	; 0x4f
    b008:	strb.w	r2, [r4, #1276]	; 0x4fc
      _b = b;
    b00c:	mvn.w	r2, #5
    b010:	strb.w	r2, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b014:	mov.w	r2, #123	; 0x7b
    b018:	strb.w	r2, [r4, #1284]	; 0x504
    b01c:	mov.w	r2, #93	; 0x5d
      _b = b;
    b020:	strb.w	lr, [r4, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b024:	strb.w	r2, [r4, #1316]	; 0x524
    b028:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b02c:	str.w	r3, [r4, #1296]	; 0x510
    b030:	movs	r3, #4
      _s = s;
    b032:	strb.w	r2, [r4, #1292]	; 0x50c
    b036:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b03a:	str.w	r3, [r4, #1312]	; 0x520
    b03e:	movs	r3, #8
      _s = s;
    b040:	strb.w	r2, [r4, #1300]	; 0x514
      _b = b;
    b044:	mvn.w	r2, #13
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b048:	str.w	r3, [r4, #1320]	; 0x528
    b04c:	movs	r3, #2
      _s = s;
      _b = b;
    b04e:	strb.w	r2, [r4, #1301]	; 0x515
    b052:	mvn.w	r2, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b056:	str.w	r3, [r4, #1344]	; 0x540
    b05a:	movs	r3, #11
      _s = s;
      _b = b;
    b05c:	strb.w	r2, [r4, #1309]	; 0x51d
    b060:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b064:	str.w	r3, [r4, #1352]	; 0x548
    b068:	movs	r3, #9
      _s = s;
      _b = b;
    b06a:	strb.w	r2, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b06e:	mvn.w	r2, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b072:	str.w	r3, [r4, #1360]	; 0x550
    b076:	movs	r3, #15
      _s = s;
    b078:	strb.w	r2, [r4, #1324]	; 0x52c
      _b = b;
    b07c:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b080:	str.w	ip, [r4, #1304]	; 0x518
      _s = s;
      _b = b;
    b084:	strb.w	r2, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b088:	mvn.w	r2, #14
      _b = b;
    b08c:	strb.w	r9, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b090:	strb.w	r2, [r4, #1348]	; 0x544
      _b = b;
    b094:	mvn.w	r2, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b098:	strb.w	lr, [r4, #1308]	; 0x51c
      _b = b;
    b09c:	strb.w	r2, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b0a0:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b0a4:	str.w	r3, [r4, #1368]	; 0x558
    b0a8:	movs	r3, #16
      _s = s;
    b0aa:	strb.w	r2, [r4, #1356]	; 0x54c
    b0ae:	mvn.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b0b2:	str.w	r5, [r4, #1288]	; 0x508
      _s = s;
    b0b6:	strb.w	r2, [r4, #1364]	; 0x554
      _b = b;
    b0ba:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b0be:	str.w	r5, [r4, #1328]	; 0x530
      _s = s;
      _b = b;
    b0c2:	strb.w	r2, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b0c6:	mvn.w	r2, #11
    b0ca:	strb.w	r5, [r4, #1332]	; 0x534
    b0ce:	strb.w	r2, [r4, #1372]	; 0x55c
      _b = b;
    b0d2:	mvn.w	r2, #79	; 0x4f
    b0d6:	strb.w	r5, [r4, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b0da:	str.w	r5, [r4, #1336]	; 0x538
      _s = s;
    b0de:	strb.w	r5, [r4, #1340]	; 0x53c
      _b = b;
    b0e2:	strb.w	r5, [r4, #1341]	; 0x53d
    b0e6:	strb.w	fp, [r4, #1357]	; 0x54d
    b0ea:	strb.w	r2, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b0ee:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b0f2:	str.w	r3, [r4, #1376]	; 0x560
    b0f6:	movs	r3, #14
      _s = s;
    b0f8:	strb.w	r2, [r4, #1380]	; 0x564
      _b = b;
    b0fc:	mvn.w	r2, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b100:	str.w	r3, [r4, #1384]	; 0x568
      _s = s;
      _b = b;
    b104:	mov.w	r3, #4294967295
    b108:	strb.w	r2, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b10c:	mvn.w	r2, #41	; 0x29
      _b = b;
    b110:	strb.w	r3, [r4, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b114:	movs	r3, #8
      _s = s;
    b116:	strb.w	r2, [r4, #1388]	; 0x56c
    b11a:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b11e:	str.w	r3, [r4, #1392]	; 0x570
    b122:	mov.w	r3, #354	; 0x162
      _s = s;
    b126:	strb.w	r2, [r4, #1396]	; 0x574
      _b = b;
    b12a:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b12e:	str.w	r3, [r4, #1400]	; 0x578
      _s = s;
    b132:	mov.w	r3, #4294967295
      _b = b;
    b136:	strb.w	r2, [r4, #1405]	; 0x57d
    b13a:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b13e:	strb.w	r3, [r4, #1404]	; 0x57c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b142:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    b146:	strb.w	r2, [r4, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b14a:	mvn.w	r2, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b14e:	str.w	r3, [r4, #1408]	; 0x580
      _s = s;
    b152:	mov.w	r3, #4294967295
    b156:	strb.w	r2, [r4, #1420]	; 0x58c
      _b = b;
    b15a:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b15e:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b162:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    b166:	strb.w	r2, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b16a:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b16e:	str.w	r3, [r4, #1416]	; 0x588
    b172:	movs	r3, #11
      _s = s;
    b174:	strb.w	r2, [r4, #1428]	; 0x594
      _b = b;
    b178:	mvn.w	r2, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b17c:	str.w	r3, [r4, #1424]	; 0x590
    b180:	movs	r3, #21
      _s = s;
      _b = b;
    b182:	strb.w	r2, [r4, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b186:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b18a:	str.w	r3, [r4, #1432]	; 0x598
    b18e:	movs	r3, #26
      _s = s;
    b190:	strb.w	r2, [r4, #1436]	; 0x59c
      _b = b;
    b194:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b198:	str.w	r3, [r4, #1440]	; 0x5a0
    b19c:	movs	r3, #25
      _s = s;
      _b = b;
    b19e:	strb.w	r2, [r4, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b1a2:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b1a6:	str.w	r3, [r4, #1448]	; 0x5a8
    b1aa:	movs	r3, #15
      _s = s;
    b1ac:	strb.w	r2, [r4, #1444]	; 0x5a4
      _b = b;
    b1b0:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b1b4:	str.w	r3, [r4, #1456]	; 0x5b0
    b1b8:	mov.w	r3, #358	; 0x166
      _s = s;
      _b = b;
    b1bc:	strb.w	r2, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b1c0:	mvn.w	r2, #24
      _b = b;
    b1c4:	strb.w	fp, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b1c8:	strb.w	r2, [r4, #1452]	; 0x5ac
      _b = b;
    b1cc:	mvn.w	r2, #13
    b1d0:	strb.w	r2, [r4, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b1d4:	mvn.w	r2, #15
    b1d8:	strb.w	r2, [r4, #1460]	; 0x5b4
      _b = b;
    b1dc:	strb.w	r2, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b1e0:	mvn.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b1e4:	str.w	r3, [r4, #1464]	; 0x5b8
    b1e8:	movw	r3, #359	; 0x167
      _s = s;
    b1ec:	strb.w	r2, [r4, #1508]	; 0x5e4
    b1f0:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b1f4:	str.w	r3, [r4, #1480]	; 0x5c8
    b1f8:	movs	r3, #1
      _s = s;
    b1fa:	strb.w	r2, [r4, #1468]	; 0x5bc
      _b = b;
    b1fe:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b202:	str.w	r3, [r4, #1488]	; 0x5d0
    b206:	movs	r3, #12
      _s = s;
      _b = b;
    b208:	strb.w	r2, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b20c:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b210:	str.w	r3, [r4, #1504]	; 0x5e0
      _s = s;
      _b = b;
    b214:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b218:	strb.w	r2, [r4, #1476]	; 0x5c4
      _b = b;
    b21c:	mvn.w	r2, #43	; 0x2b
    b220:	strb.w	r3, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b224:	movs	r3, #18
      _s = s;
      _b = b;
    b226:	strb.w	r2, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b22a:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b22e:	str.w	r3, [r4, #1512]	; 0x5e8
    b232:	movs	r3, #9
      _s = s;
    b234:	strb.w	r2, [r4, #1484]	; 0x5cc
      _b = b;
    b238:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b23c:	str.w	r3, [r4, #1536]	; 0x600
    b240:	movs	r3, #8
      _s = s;
      _b = b;
    b242:	strb.w	r2, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b246:	mvn.w	r2, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b24a:	str.w	ip, [r4, #1472]	; 0x5c0
      _s = s;
    b24e:	strb.w	r2, [r4, #1492]	; 0x5d4
      _b = b;
    b252:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b256:	str.w	ip, [r4, #1496]	; 0x5d8
      _s = s;
      _b = b;
    b25a:	strb.w	r2, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b25e:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b262:	str.w	r3, [r4, #1544]	; 0x608
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 4
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 5
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    b266:	movs	r3, #82	; 0x52
      _s = s;
    b268:	strb.w	r2, [r4, #1500]	; 0x5dc
      _b = b;
    b26c:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b270:	str.w	r5, [r4, #1520]	; 0x5f0
      _s = s;
      _b = b;
    b274:	strb.w	r2, [r4, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b278:	mvn.w	r2, #28
    b27c:	strb.w	r5, [r4, #1524]	; 0x5f4
    b280:	strb.w	r2, [r4, #1516]	; 0x5ec
      _b = b;
    b284:	mvn.w	r2, #115	; 0x73
    b288:	strb.w	r5, [r4, #1525]	; 0x5f5
    b28c:	strb.w	r2, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b290:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b294:	str.w	r5, [r4, #1528]	; 0x5f8
      _s = s;
    b298:	strb.w	r2, [r4, #1540]	; 0x604
      _b = b;
    b29c:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b2a0:	strb.w	r5, [r4, #1532]	; 0x5fc
      _b = b;
    b2a4:	strb.w	r2, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b2a8:	mvn.w	r2, #74	; 0x4a
      _b = b;
    b2ac:	strb.w	r5, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b2b0:	strb.w	r2, [r4, #1548]	; 0x60c
      _b = b;
    b2b4:	mvn.w	r2, #16
    b2b8:	strb.w	r2, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b2bc:	mvn.w	r2, #53	; 0x35
    b2c0:	strb.w	fp, [r4, #1612]	; 0x64c
    b2c4:	strb.w	r2, [r4, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b2c8:	movs	r2, #12
    b2ca:	str.w	r2, [r4, #1552]	; 0x610
      _s = s;
    b2ce:	mvn.w	r2, #77	; 0x4d
    b2d2:	strb.w	r2, [r4, #1556]	; 0x614
      _b = b;
    b2d6:	mvn.w	r2, #55	; 0x37
    b2da:	strb.w	r2, [r4, #1557]	; 0x615
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b2de:	movs	r2, #18
    b2e0:	str.w	r2, [r4, #1560]	; 0x618
      _s = s;
    b2e4:	mov.w	r2, #4294967295
    b2e8:	strb.w	r2, [r4, #1564]	; 0x61c
      _b = b;
    b2ec:	mov.w	r2, #68	; 0x44
    b2f0:	strb.w	r2, [r4, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b2f4:	movs	r2, #15
    b2f6:	str.w	r2, [r4, #1568]	; 0x620
      _s = s;
    b2fa:	mvn.w	r2, #28
    b2fe:	strb.w	r2, [r4, #1572]	; 0x624
      _b = b;
    b302:	mvn.w	r2, #22
    b306:	strb.w	r2, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b30a:	movs	r2, #12
    b30c:	str.w	r2, [r4, #1576]	; 0x628
      _s = s;
    b310:	mvn.w	r2, #57	; 0x39
    b314:	strb.w	r2, [r4, #1580]	; 0x62c
      _b = b;
    b318:	mov.w	r2, #4294967295
    b31c:	strb.w	r2, [r4, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b320:	movs	r2, #11
    b322:	str.w	r2, [r4, #1584]	; 0x630
      _s = s;
      _b = b;
    b326:	mov.w	r2, #4294967295
    b32a:	strb.w	r2, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b32e:	movw	r2, #355	; 0x163
    b332:	str.w	r2, [r4, #1592]	; 0x638
      _s = s;
    b336:	mvn.w	r2, #8
    b33a:	strb.w	r2, [r4, #1596]	; 0x63c
      _b = b;
    b33e:	mvn.w	r2, #38	; 0x26
    b342:	strb.w	r2, [r4, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b346:	movw	r2, #355	; 0x163
    b34a:	str.w	r2, [r4, #1600]	; 0x640
      _s = s;
    b34e:	mov.w	r2, #4294967295
    b352:	strb.w	r2, [r4, #1604]	; 0x644
      _b = b;
    b356:	mvn.w	r2, #56	; 0x38
    b35a:	strb.w	r2, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b35e:	movw	r2, #355	; 0x163
    b362:	str.w	r2, [r4, #1608]	; 0x648
      _s = s;
      _b = b;
    b366:	mvn.w	r2, #48	; 0x30
    b36a:	strb.w	r2, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b36e:	movs	r2, #9
    b370:	str.w	r2, [r4, #1616]	; 0x650
      _s = s;
    b374:	mvn.w	r2, #61	; 0x3d
    b378:	strb.w	r2, [r4, #1620]	; 0x654
      _b = b;
    b37c:	mvn.w	r2, #24
    b380:	strb.w	r2, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b384:	movs	r2, #20
    b386:	str.w	r2, [r4, #1624]	; 0x658
      _s = s;
    b38a:	mov.w	r2, #4294967295
    b38e:	strb.w	r2, [r4, #1628]	; 0x65c
      _b = b;
    b392:	mvn.w	r2, #71	; 0x47
    b396:	strb.w	r2, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b39a:	movs	r2, #26
    b39c:	str.w	r2, [r4, #1632]	; 0x660
      _s = s;
    b3a0:	mvn.w	r2, #2
    b3a4:	strb.w	r2, [r4, #1636]	; 0x664
      _b = b;
    b3a8:	mvn.w	r2, #25
    b3ac:	strb.w	r2, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3b0:	movs	r2, #19
      _s = s;
      _b = b;
    b3b2:	strb.w	r9, [r4, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3b6:	str.w	r2, [r4, #1640]	; 0x668
      _s = s;
    b3ba:	mvn.w	r2, #2
    b3be:	strb.w	r7, [r4, #1692]	; 0x69c
    b3c2:	strb.w	r2, [r4, #1644]	; 0x66c
      _b = b;
    b3c6:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3ca:	str.w	r5, [r4, #1664]	; 0x680
      _s = s;
      _b = b;
    b3ce:	strb.w	r2, [r4, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3d2:	movs	r2, #22
    b3d4:	str.w	r5, [r4, #1704]	; 0x6a8
    b3d8:	str.w	r2, [r4, #1648]	; 0x670
      _s = s;
    b3dc:	mvn.w	r2, #66	; 0x42
    b3e0:	strb.w	r5, [r4, #1708]	; 0x6ac
    b3e4:	strb.w	r2, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3e8:	movs	r2, #12
      _s = s;
      _b = b;
    b3ea:	strb.w	r5, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3ee:	str.w	r2, [r4, #1656]	; 0x678
      _s = s;
    b3f2:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b3f6:	str.w	r5, [r4, #1712]	; 0x6b0
      _s = s;
    b3fa:	strb.w	r2, [r4, #1660]	; 0x67c
      _b = b;
    b3fe:	strb.w	r2, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b402:	mvn.w	r2, #13
    b406:	strb.w	r5, [r4, #1716]	; 0x6b4
    b40a:	strb.w	r2, [r4, #1668]	; 0x684
      _b = b;
    b40e:	mvn.w	r2, #57	; 0x39
    b412:	strb.w	r5, [r4, #1717]	; 0x6b5
    b416:	strb.w	r2, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b41a:	movs	r2, #4
    b41c:	str.w	r5, [r4, #1720]	; 0x6b8
    b420:	str.w	r2, [r4, #1672]	; 0x688
      _s = s;
    b424:	mvn.w	r2, #21
    b428:	strb.w	r5, [r4, #1724]	; 0x6bc
    b42c:	strb.w	r2, [r4, #1676]	; 0x68c
      _b = b;
    b430:	mvn.w	r2, #35	; 0x23
    b434:	strb.w	r2, [r4, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b438:	movs	r2, #16
    b43a:	str.w	r2, [r4, #1680]	; 0x690
      _s = s;
    b43e:	mvn.w	r2, #35	; 0x23
    b442:	strb.w	r2, [r4, #1684]	; 0x694
      _b = b;
    b446:	mvn.w	r2, #9
    b44a:	strb.w	r2, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b44e:	movs	r2, #3
    b450:	str.w	r2, [r4, #1688]	; 0x698
      _s = s;
      _b = b;
    b454:	mvn.w	r2, #20
    b458:	strb.w	r2, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b45c:	movs	r2, #13
    b45e:	str.w	r2, [r4, #1696]	; 0x6a0
      _s = s;
    b462:	mvn.w	r2, #31
    b466:	strb.w	r2, [r4, #1700]	; 0x6a4
      _b = b;
    b46a:	strb.w	r2, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b46e:	movs	r2, #10
      _s = s;
      _b = b;
    b470:	strb.w	r5, [r4, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b474:	str.w	r2, [r4, #1728]	; 0x6c0
      _s = s;
      _b = b;
    b478:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b47c:	str.w	ip, [r4, #1792]	; 0x700
      _s = s;
      _b = b;
    b480:	strb.w	r2, [r4, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b484:	movs	r2, #1
      _s = s;
    b486:	strb.w	r7, [r4, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b48a:	str.w	r2, [r4, #1736]	; 0x6c8
      _s = s;
    b48e:	mvn.w	r2, #82	; 0x52
    b492:	strb.w	fp, [r4, #1756]	; 0x6dc
    b496:	strb.w	r2, [r4, #1740]	; 0x6cc
      _b = b;
    b49a:	mvn.w	r2, #63	; 0x3f
    b49e:	strb.w	r2, [r4, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b4a2:	movs	r2, #8
    b4a4:	str.w	r2, [r4, #1744]	; 0x6d0
      _s = s;
    b4a8:	mvn.w	r2, #83	; 0x53
    b4ac:	strb.w	r2, [r4, #1748]	; 0x6d4
      _b = b;
    b4b0:	mvn.w	r2, #60	; 0x3c
    b4b4:	strb.w	r2, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b4b8:	movs	r2, #23
    b4ba:	str.w	r2, [r4, #1752]	; 0x6d8
    b4be:	movs	r2, #11
    b4c0:	str.w	r2, [r4, #1760]	; 0x6e0
      _s = s;
    b4c4:	mvn.w	r2, #11
    b4c8:	strb.w	r2, [r4, #1764]	; 0x6e4
      _b = b;
    b4cc:	mvn.w	r2, #79	; 0x4f
    b4d0:	strb.w	r2, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b4d4:	movs	r2, #12
    b4d6:	str.w	r2, [r4, #1768]	; 0x6e8
      _s = s;
    b4da:	mvn.w	r2, #42	; 0x2a
    b4de:	strb.w	r2, [r4, #1772]	; 0x6ec
      _b = b;
    b4e2:	mov.w	r2, #4294967295
    b4e6:	strb.w	r2, [r4, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b4ea:	movs	r2, #10
    b4ec:	str.w	r2, [r4, #1776]	; 0x6f0
      _s = s;
    b4f0:	mvn.w	r2, #36	; 0x24
    b4f4:	strb.w	r2, [r4, #1780]	; 0x6f4
      _b = b;
    b4f8:	mov.w	r2, #4294967295
    b4fc:	strb.w	r2, [r4, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b500:	movw	r2, #355	; 0x163
    b504:	str.w	r2, [r4, #1784]	; 0x6f8
      _s = s;
    b508:	mvn.w	r2, #5
    b50c:	strb.w	r2, [r4, #1788]	; 0x6fc
      _b = b;
    b510:	mvn.w	r2, #40	; 0x28
    b514:	strb.w	r2, [r4, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b518:	mov.w	r2, #4294967295
    b51c:	strb.w	r2, [r4, #1796]	; 0x704
      _b = b;
    b520:	mvn.w	r2, #86	; 0x56
    b524:	strb.w	r2, [r4, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b528:	movs	r2, #2
    b52a:	str.w	r2, [r4, #1800]	; 0x708
      _s = s;
    b52e:	mvn.w	r2, #31
    b532:	strb.w	r2, [r4, #1804]	; 0x70c
      _b = b;
    b536:	mvn.w	r2, #57	; 0x39
    b53a:	strb.w	r2, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b53e:	movs	r2, #12
    b540:	str.w	r2, [r4, #1808]	; 0x710
      _s = s;
    b544:	mvn.w	r2, #21
    b548:	strb.w	r2, [r4, #1812]	; 0x714
      _b = b;
    b54c:	mov.w	r2, #64	; 0x40
    b550:	strb.w	r2, [r4, #1757]	; 0x6dd
    b554:	movs	r2, #8
    b556:	strb.w	r1, [r4, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b55a:	movs	r1, #48	; 0x30
      _s = s;
      _b = b;
    b55c:	strb.w	r0, [r4, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b560:	movs	r0, #2
    b562:	str.w	r6, [r4, #1816]	; 0x718
      _s = s;
    b566:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b56a:	str.w	r0, [r4, #1856]	; 0x740
      _s = s;
    b56e:	mvn.w	r0, #15
    b572:	strb.w	r6, [r4, #1820]	; 0x71c
      _b = b;
    b576:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b57a:	strb.w	r0, [r4, #1860]	; 0x744
      _b = b;
    b57e:	mvn.w	r0, #42	; 0x2a
    b582:	strb.w	r6, [r4, #1821]	; 0x71d
    b586:	mov.w	r6, #127	; 0x7f
    b58a:	strb.w	r0, [r4, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b58e:	mvn.w	r0, #21
      _b = b;
    b592:	strb.w	r6, [r4, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b596:	movs	r6, #17
      _s = s;
    b598:	strb.w	r0, [r4, #1868]	; 0x74c
      _b = b;
    b59c:	mvn.w	r0, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5a0:	mov	r7, r6
    b5a2:	str.w	r6, [r4, #1832]	; 0x728
      _s = s;
      _b = b;
    b5a6:	strb.w	r0, [r4, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5aa:	movs	r0, #16
      _s = s;
    b5ac:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5b0:	str.w	r7, [r4, #1840]	; 0x730
    b5b4:	str.w	r0, [r4, #1872]	; 0x750
      _s = s;
    b5b8:	mvn.w	r0, #18
    b5bc:	strb.w	r6, [r4, #1836]	; 0x72c
      _b = b;
    b5c0:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b5c4:	strb.w	r0, [r4, #1876]	; 0x754
      _b = b;
    b5c8:	mvn.w	r0, #5
    b5cc:	strb.w	r6, [r4, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b5d0:	mvn.w	r6, #111	; 0x6f
      _b = b;
    b5d4:	strb.w	r0, [r4, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5d8:	movs	r0, #13
      _s = s;
    b5da:	strb.w	r6, [r4, #1844]	; 0x734
      _b = b;
    b5de:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5e2:	str.w	r0, [r4, #1880]	; 0x758
      _s = s;
    b5e6:	mvn.w	r0, #34	; 0x22
      _b = b;
    b5ea:	strb.w	r6, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5ee:	movs	r6, #10
      _s = s;
    b5f0:	strb.w	r0, [r4, #1884]	; 0x75c
      _b = b;
    b5f4:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b5f8:	mov	r7, r6
    b5fa:	str.w	r6, [r4, #1848]	; 0x738
      _s = s;
      _b = b;
    b5fe:	strb.w	r0, [r4, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b602:	mvn.w	r6, #25
    b606:	strb.w	r0, [r4, #1892]	; 0x764
      _b = b;
    b60a:	mvn.w	r0, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b60e:	str.w	r1, [r4, #1824]	; 0x720
    b612:	mov.w	r1, #576	; 0x240
      _s = s;
    b616:	strb.w	lr, [r4, #1828]	; 0x724
    b61a:	strb.w	r6, [r4, #1852]	; 0x73c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b61e:	str.w	r7, [r4, #1864]	; 0x748
      _s = s;
      _b = b;
    b622:	strb.w	r0, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b626:	mvn.w	r0, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b62a:	str.w	r5, [r4, #1888]	; 0x760
    b62e:	str.w	r5, [r4, #1896]	; 0x768
      _s = s;
    b632:	strb.w	r5, [r4, #1900]	; 0x76c
      _b = b;
    b636:	strb.w	r5, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b63a:	strb.w	r6, [r4, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b63e:	movs	r6, #14
      _s = s;
    b640:	strb.w	r0, [r4, #1924]	; 0x784
      _b = b;
    b644:	mvn.w	r0, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b648:	str.w	r6, [r4, #1952]	; 0x7a0
      _s = s;
    b64c:	mvn.w	r6, #7
      _b = b;
    b650:	strb.w	r0, [r4, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b654:	movw	r0, #355	; 0x163
      _s = s;
    b658:	strb.w	r6, [r4, #1956]	; 0x7a4
      _b = b;
    b65c:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b660:	str.w	r0, [r4, #1928]	; 0x788
      _s = s;
    b664:	mov.w	r0, #4294967295
      _b = b;
    b668:	strb.w	r6, [r4, #1957]	; 0x7a5
    b66c:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b670:	strb.w	r0, [r4, #1932]	; 0x78c
      _b = b;
    b674:	mvn.w	r0, #76	; 0x4c
    b678:	strb.w	r6, [r4, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b67c:	movs	r6, #3
    b67e:	str.w	r7, [r4, #1920]	; 0x780
    b682:	str.w	r6, [r4, #1968]	; 0x7b0
      _s = s;
      _b = b;
    b686:	mvn.w	r6, #7
    b68a:	strb.w	r0, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b68e:	movs	r0, #5
      _s = s;
      _b = b;
    b690:	strb.w	r6, [r4, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b694:	movs	r6, #1
    b696:	str.w	r0, [r4, #1936]	; 0x790
      _s = s;
      _b = b;
    b69a:	mvn.w	r0, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b69e:	mov	r7, r6
    b6a0:	str.w	r6, [r4, #1976]	; 0x7b8
      _s = s;
    b6a4:	mvn.w	r6, #28
      _b = b;
    b6a8:	strb.w	r0, [r4, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b6ac:	movs	r0, #17
    b6ae:	str.w	ip, [r4, #1984]	; 0x7c0
      _s = s;
    b6b2:	strb.w	r6, [r4, #1980]	; 0x7bc
      _b = b;
    b6b6:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b6ba:	str.w	r0, [r4, #1944]	; 0x798
      _s = s;
      _b = b;
    b6be:	mov.w	r0, #113	; 0x71
    b6c2:	strb.w	r6, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b6c6:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b6ca:	str.w	r2, [r4, #1960]	; 0x7a8
      _s = s;
    b6ce:	strb.w	r6, [r4, #1988]	; 0x7c4
      _b = b;
    b6d2:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b6d6:	strb.w	lr, [r4, #1948]	; 0x79c
      _b = b;
    b6da:	strb.w	r0, [r4, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b6de:	str.w	r5, [r4, #1904]	; 0x770
      _s = s;
    b6e2:	strb.w	r5, [r4, #1908]	; 0x774
      _b = b;
    b6e6:	strb.w	r5, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b6ea:	str.w	r5, [r4, #1912]	; 0x778
      _s = s;
    b6ee:	strb.w	r5, [r4, #1916]	; 0x77c
      _b = b;
    b6f2:	strb.w	r5, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b6f6:	strb.w	sl, [r4, #1964]	; 0x7ac
    b6fa:	strb.w	sl, [r4, #1972]	; 0x7b4
      _b = b;
    b6fe:	strb.w	r6, [r4, #1989]	; 0x7c5
    b702:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b706:	str.w	r7, [r4, #1992]	; 0x7c8
      _s = s;
      _b = b;
    b70a:	strb.w	r6, [r4, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b70e:	mvn.w	r6, #37	; 0x25
    b712:	strb.w	lr, [r4, #2012]	; 0x7dc
    b716:	strb.w	r6, [r4, #1996]	; 0x7cc
      _b = b;
    b71a:	mvn.w	r6, #61	; 0x3d
    b71e:	ldr	r0, [pc, #1012]	; (bb14 <_GLOBAL__sub_I_bri_level+0x4444>)
    b720:	strb.w	r6, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b724:	movs	r6, #11
    b726:	str.w	r6, [r4, #2000]	; 0x7d0
      _s = s;
    b72a:	mvn.w	r6, #15
    b72e:	strb.w	r6, [r4, #2004]	; 0x7d4
      _b = b;
    b732:	mvn.w	r6, #63	; 0x3f
    b736:	strb.w	r6, [r4, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b73a:	movs	r6, #18
    b73c:	str.w	r6, [r4, #2008]	; 0x7d8
    b740:	movs	r6, #42	; 0x2a
    b742:	str.w	r6, [r4, #2016]	; 0x7e0
      _s = s;
    b746:	mvn.w	r6, #2
    b74a:	strb.w	r6, [r4, #2020]	; 0x7e4
      _b = b;
    b74e:	mvn.w	r6, #117	; 0x75
    b752:	strb.w	r6, [r4, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b756:	movs	r6, #16
    b758:	mov	r7, r6
    b75a:	str.w	r6, [r4, #2024]	; 0x7e8
      _s = s;
    b75e:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b762:	str.w	r7, [r4, #2032]	; 0x7f0
      _s = s;
    b766:	strb.w	r6, [r4, #2028]	; 0x7ec
      _b = b;
    b76a:	mvn.w	r6, #98	; 0x62
    b76e:	strb.w	r6, [r4, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b772:	mvn.w	r6, #78	; 0x4e
    b776:	strb.w	r6, [r4, #2036]	; 0x7f4
      _b = b;
    b77a:	mvn.w	r6, #7
    b77e:	strb.w	r6, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b782:	movs	r6, #1
    b784:	str.w	r6, [r4, #2040]	; 0x7f8
      _s = s;
    b788:	mvn.w	r6, #24
    b78c:	strb.w	r6, [r4, #2044]	; 0x7fc
      _b = b;
    b790:	mvn.w	r6, #45	; 0x2d
    b794:	strb.w	r6, [r4, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b798:	movw	r6, #355	; 0x163
    b79c:	str.w	r6, [r4, #2048]	; 0x800
      _s = s;
    b7a0:	mvn.w	r6, #2
    b7a4:	strb.w	r6, [r4, #2052]	; 0x804
      _b = b;
    b7a8:	mvn.w	r6, #62	; 0x3e
    b7ac:	strb.w	r6, [r4, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b7b0:	movs	r6, #11
    b7b2:	str.w	r6, [r4, #2056]	; 0x808
      _s = s;
    b7b6:	mvn.w	r6, #20
    b7ba:	strb.w	r6, [r4, #2060]	; 0x80c
      _b = b;
    b7be:	mvn.w	r6, #16
    b7c2:	strb.w	r6, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b7c6:	movs	r6, #9
    b7c8:	str.w	r6, [r4, #2064]	; 0x810
      _s = s;
    b7cc:	mvn.w	r6, #66	; 0x42
    b7d0:	strb.w	r6, [r4, #2068]	; 0x814
      _b = b;
    b7d4:	mvn.w	r6, #9
    b7d8:	strb.w	r6, [r4, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b7dc:	movs	r6, #22
    b7de:	str.w	r6, [r4, #2072]	; 0x818
      _s = s;
    b7e2:	mvn.w	r6, #16
    b7e6:	strb.w	r6, [r4, #2076]	; 0x81c
      _b = b;
    b7ea:	mvn.w	r6, #18
    b7ee:	strb.w	r6, [r4, #2077]	; 0x81d
    b7f2:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b7f6:	str.w	ip, [r4, #2120]	; 0x848
      _s = s;
      _b = b;
    b7fa:	strb.w	r6, [r4, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b7fe:	movs	r6, #3
    b800:	str.w	r5, [r4, #2080]	; 0x820
    b804:	str.w	r6, [r4, #2112]	; 0x840
      _s = s;
    b808:	mvn.w	r6, #107	; 0x6b
    b80c:	strb.w	r5, [r4, #2084]	; 0x824
    b810:	strb.w	r6, [r4, #2116]	; 0x844
    b814:	mvn.w	r6, #2
      _b = b;
    b818:	strb.w	r5, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b81c:	strb.w	r6, [r4, #2124]	; 0x84c
      _b = b;
    b820:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b824:	str.w	r5, [r4, #2088]	; 0x828
      _s = s;
      _b = b;
    b828:	strb.w	r6, [r4, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b82c:	movw	r6, #357	; 0x165
      _s = s;
    b830:	strb.w	r5, [r4, #2092]	; 0x82c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b834:	str.w	r6, [r4, #2128]	; 0x850
      _s = s;
    b838:	mvn.w	r6, #15
      _b = b;
    b83c:	strb.w	r5, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b840:	strb.w	r6, [r4, #2132]	; 0x854
      _b = b;
    b844:	strb.w	r6, [r4, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b848:	movs	r6, #3
    b84a:	str.w	r5, [r4, #2096]	; 0x830
    b84e:	str.w	r6, [r4, #2136]	; 0x858
      _s = s;
    b852:	mvn.w	r6, #22
    b856:	strb.w	r5, [r4, #2100]	; 0x834
    b85a:	strb.w	r6, [r4, #2140]	; 0x85c
      _b = b;
    b85e:	mvn.w	r6, #34	; 0x22
    b862:	strb.w	r5, [r4, #2101]	; 0x835
    b866:	strb.w	r6, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b86a:	movs	r6, #11
    b86c:	str.w	r5, [r4, #2104]	; 0x838
    b870:	mov	r7, r6
    b872:	str.w	r6, [r4, #2144]	; 0x860
      _s = s;
    b876:	mvn.w	r6, #23
    b87a:	strb.w	r5, [r4, #2108]	; 0x83c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b87e:	str.w	r7, [r4, #2152]	; 0x868
      _s = s;
    b882:	strb.w	r6, [r4, #2148]	; 0x864
      _b = b;
    b886:	mvn.w	r6, #20
    b88a:	strb.w	r5, [r4, #2109]	; 0x83d
    b88e:	strb.w	r6, [r4, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b892:	mvn.w	r6, #20
    b896:	strb.w	r6, [r4, #2156]	; 0x86c
      _b = b;
    b89a:	mvn.w	r6, #6
    b89e:	strb.w	r6, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8a2:	movs	r6, #13
    b8a4:	str.w	r6, [r4, #2160]	; 0x870
      _s = s;
    b8a8:	mvn.w	r6, #21
    b8ac:	strb.w	r6, [r4, #2164]	; 0x874
      _b = b;
    b8b0:	mvn.w	r6, #7
    b8b4:	strb.w	r6, [r4, #2165]	; 0x875
    b8b8:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8bc:	str.w	ip, [r4, #2176]	; 0x880
      _s = s;
      _b = b;
    b8c0:	strb.w	r6, [r4, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b8c4:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8c8:	str.w	r8, [r4, #2168]	; 0x878
      _s = s;
    b8cc:	strb.w	r6, [r4, #2172]	; 0x87c
    b8d0:	mov.w	r6, #4294967295
      _b = b;
    b8d4:	strb.w	sl, [r4, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b8d8:	strb.w	r6, [r4, #2180]	; 0x884
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8dc:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    b8e0:	strb.w	sl, [r4, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8e4:	str.w	r6, [r4, #2184]	; 0x888
      _s = s;
    b8e8:	mov.w	r6, #4294967295
    b8ec:	strb.w	r6, [r4, #2188]	; 0x88c
      _b = b;
    b8f0:	mvn.w	r6, #76	; 0x4c
    b8f4:	strb.w	r6, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b8f8:	movs	r6, #10
    b8fa:	str.w	r6, [r4, #2192]	; 0x890
      _s = s;
    b8fe:	mvn.w	r6, #26
    b902:	strb.w	r6, [r4, #2196]	; 0x894
      _b = b;
    b906:	mvn.w	r6, #31
    b90a:	strb.w	r6, [r4, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b90e:	movs	r6, #19
    b910:	str.w	r6, [r4, #2200]	; 0x898
      _s = s;
    b914:	mvn.w	r6, #28
    b918:	strb.w	r6, [r4, #2204]	; 0x89c
      _b = b;
    b91c:	mvn.w	r6, #61	; 0x3d
    b920:	strb.w	r6, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b924:	movs	r6, #21
    b926:	str.w	r6, [r4, #2208]	; 0x8a0
      _s = s;
    b92a:	mvn.w	r6, #33	; 0x21
    b92e:	strb.w	r6, [r4, #2212]	; 0x8a4
      _b = b;
    b932:	mvn.w	r6, #68	; 0x44
    b936:	strb.w	r6, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b93a:	movs	r6, #16
    b93c:	str.w	r6, [r4, #2216]	; 0x8a8
      _s = s;
    b940:	mvn.w	r6, #28
    b944:	strb.w	r6, [r4, #2220]	; 0x8ac
      _b = b;
    b948:	mvn.w	r6, #22
    b94c:	strb.w	r6, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b950:	movs	r6, #7
    b952:	str.w	r6, [r4, #2224]	; 0x8b0
      _s = s;
    b956:	mvn.w	r6, #28
    b95a:	strb.w	r6, [r4, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b95e:	movs	r6, #10
    b960:	str.w	r6, [r4, #2232]	; 0x8b8
      _s = s;
    b964:	mvn.w	r6, #45	; 0x2d
    b968:	strb.w	r6, [r4, #2236]	; 0x8bc
      _b = b;
    b96c:	mvn.w	r6, #13
    b970:	strb.w	r6, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b974:	movs	r6, #12
    b976:	mov	r7, r6
    b978:	str.w	r6, [r4, #2240]	; 0x8c0
      _s = s;
    b97c:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b980:	str.w	r7, [r4, #2248]	; 0x8c8
      _s = s;
    b984:	strb.w	r6, [r4, #2244]	; 0x8c4
      _b = b;
    b988:	mvn.w	r6, #2
    b98c:	strb.w	r6, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b990:	mvn.w	r6, #52	; 0x34
    b994:	strb.w	r6, [r4, #2252]	; 0x8cc
      _b = b;
    b998:	mvn.w	r6, #12
    b99c:	strb.w	r6, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9a0:	movs	r6, #19
    b9a2:	str.w	ip, [r4, #2312]	; 0x908
    b9a6:	str.w	r6, [r4, #2256]	; 0x8d0
      _s = s;
    b9aa:	mvn.w	r6, #20
      _b = b;
    b9ae:	strb.w	r9, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b9b2:	strb.w	r6, [r4, #2260]	; 0x8d4
      _b = b;
    b9b6:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9ba:	str.w	r5, [r4, #2272]	; 0x8e0
      _s = s;
      _b = b;
    b9be:	strb.w	r6, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9c2:	movs	r6, #10
      _s = s;
    b9c4:	strb.w	r5, [r4, #2276]	; 0x8e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9c8:	str.w	r6, [r4, #2264]	; 0x8d8
      _s = s;
    b9cc:	mvn.w	r6, #9
      _b = b;
    b9d0:	strb.w	r5, [r4, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b9d4:	strb.w	r6, [r4, #2268]	; 0x8dc
      _b = b;
    b9d8:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9dc:	str.w	r5, [r4, #2280]	; 0x8e8
      _s = s;
      _b = b;
    b9e0:	strb.w	r6, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9e4:	movs	r6, #2
      _s = s;
    b9e6:	strb.w	r5, [r4, #2284]	; 0x8ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9ea:	str.w	r6, [r4, #2304]	; 0x900
      _s = s;
    b9ee:	mvn.w	r6, #111	; 0x6f
      _b = b;
    b9f2:	strb.w	r5, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    b9f6:	strb.w	r6, [r4, #2308]	; 0x904
      _b = b;
    b9fa:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    b9fe:	str.w	r5, [r4, #2288]	; 0x8f0
      _s = s;
      _b = b;
    ba02:	strb.w	r6, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ba06:	mov.w	r6, #4294967295
    ba0a:	strb.w	r5, [r4, #2292]	; 0x8f4
    ba0e:	strb.w	r6, [r4, #2316]	; 0x90c
      _b = b;
    ba12:	mvn.w	r6, #84	; 0x54
    ba16:	strb.w	r5, [r4, #2293]	; 0x8f5
    ba1a:	strb.w	r6, [r4, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba1e:	movs	r6, #9
    ba20:	str.w	r5, [r4, #2296]	; 0x8f8
    ba24:	str.w	r6, [r4, #2320]	; 0x910
      _s = s;
    ba28:	mvn.w	r6, #32
    ba2c:	strb.w	r5, [r4, #2300]	; 0x8fc
    ba30:	strb.w	r6, [r4, #2324]	; 0x914
      _b = b;
    ba34:	mvn.w	r6, #6
    ba38:	strb.w	r5, [r4, #2301]	; 0x8fd
    ba3c:	strb.w	r6, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba40:	movs	r6, #16
    ba42:	str.w	r6, [r4, #2328]	; 0x918
      _s = s;
    ba46:	mvn.w	r6, #31
    ba4a:	strb.w	r6, [r4, #2332]	; 0x91c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba4e:	movs	r6, #18
    ba50:	str.w	r6, [r4, #2336]	; 0x920
      _s = s;
    ba54:	mvn.w	r6, #19
    ba58:	strb.w	r6, [r4, #2340]	; 0x924
      _b = b;
    ba5c:	mvn.w	r6, #2
    ba60:	strb.w	r6, [r4, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba64:	movs	r6, #19
    ba66:	str.w	ip, [r4, #2376]	; 0x948
    ba6a:	mov	r7, r6
    ba6c:	str.w	r6, [r4, #2344]	; 0x928
      _s = s;
      _b = b;
    ba70:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba74:	str.w	ip, [r4, #2384]	; 0x950
    ba78:	str.w	r2, [r4, #2416]	; 0x970
      _s = s;
      _b = b;
    ba7c:	strb.w	r6, [r4, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ba80:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba84:	str.w	r7, [r4, #2352]	; 0x930
      _s = s;
    ba88:	strb.w	r6, [r4, #2356]	; 0x934
      _b = b;
    ba8c:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ba90:	strb.w	fp, [r4, #2348]	; 0x92c
      _b = b;
    ba94:	strb.w	r6, [r4, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ba98:	movs	r6, #15
    ba9a:	str.w	r8, [r4, #2392]	; 0x958
    ba9e:	str.w	r6, [r4, #2360]	; 0x938
      _s = s;
    baa2:	mvn.w	r6, #31
    baa6:	strb.w	r6, [r4, #2364]	; 0x93c
      _b = b;
    baaa:	mvn.w	r6, #6
    baae:	strb.w	r6, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bab2:	movs	r6, #1
    bab4:	str.w	r6, [r4, #2368]	; 0x940
      _s = s;
    bab8:	mvn.w	r6, #20
    babc:	strb.w	r6, [r4, #2372]	; 0x944
      _b = b;
    bac0:	mvn.w	r6, #73	; 0x49
    bac4:	strb.w	r6, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bac8:	mov.w	r6, #4294967295
    bacc:	strb.w	r6, [r4, #2380]	; 0x94c
      _b = b;
    bad0:	mvn.w	r6, #91	; 0x5b
    bad4:	strb.w	r6, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bad8:	mov.w	r6, #4294967295
    badc:	strb.w	r6, [r4, #2388]	; 0x954
      _b = b;
    bae0:	mvn.w	r6, #111	; 0x6f
    bae4:	strb.w	r6, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bae8:	mvn.w	r6, #26
    baec:	strb.w	r6, [r4, #2396]	; 0x95c
      _b = b;
    baf0:	mvn.w	r6, #54	; 0x36
    baf4:	strb.w	r6, [r4, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    baf8:	movs	r6, #9
    bafa:	str.w	r6, [r4, #2400]	; 0x960
      _s = s;
    bafe:	mvn.w	r6, #34	; 0x22
    bb02:	strb.w	r6, [r4, #2404]	; 0x964
      _b = b;
    bb06:	mvn.w	r6, #44	; 0x2c
    bb0a:	strb.w	r6, [r4, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb0e:	movs	r6, #1
    bb10:	b.n	bb18 <_GLOBAL__sub_I_bri_level+0x4448>
    bb12:	nop
    bb14:	.word	0x20003be4
    bb18:	str.w	r6, [r4, #2408]	; 0x968
      _s = s;
    bb1c:	mvn.w	r6, #27
    bb20:	strb.w	r6, [r4, #2412]	; 0x96c
      _b = b;
    bb24:	mvn.w	r6, #72	; 0x48
    bb28:	strb.w	r6, [r4, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bb2c:	mvn.w	r6, #28
    bb30:	strb.w	r6, [r4, #2420]	; 0x974
      _b = b;
    bb34:	mvn.w	r6, #45	; 0x2d
    bb38:	strb.w	r6, [r4, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb3c:	movs	r6, #19
    bb3e:	str.w	r6, [r4, #2424]	; 0x978
      _s = s;
    bb42:	mvn.w	r6, #34	; 0x22
    bb46:	strb.w	r6, [r4, #2428]	; 0x97c
      _b = b;
    bb4a:	mov.w	r6, #4294967295
    bb4e:	strb.w	r6, [r4, #2429]	; 0x97d
    bb52:	mov.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb56:	str.w	r5, [r4, #2464]	; 0x9a0
      _s = s;
      _b = b;
    bb5a:	strb.w	r6, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb5e:	movs	r6, #22
      _s = s;
    bb60:	strb.w	r5, [r4, #2468]	; 0x9a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb64:	str.w	r6, [r4, #2432]	; 0x980
      _s = s;
    bb68:	mvn.w	r6, #55	; 0x37
      _b = b;
    bb6c:	strb.w	r5, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bb70:	strb.w	r6, [r4, #2436]	; 0x984
      _b = b;
    bb74:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb78:	str.w	r5, [r4, #2472]	; 0x9a8
      _s = s;
      _b = b;
    bb7c:	strb.w	r6, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb80:	movs	r6, #23
      _s = s;
    bb82:	strb.w	r5, [r4, #2476]	; 0x9ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb86:	str.w	r6, [r4, #2440]	; 0x988
      _s = s;
    bb8a:	mvn.w	r6, #68	; 0x44
      _b = b;
    bb8e:	strb.w	r5, [r4, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bb92:	strb.w	r6, [r4, #2444]	; 0x98c
      _b = b;
    bb96:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bb9a:	str.w	r5, [r4, #2480]	; 0x9b0
      _s = s;
      _b = b;
    bb9e:	strb.w	r6, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bba2:	movs	r6, #13
      _s = s;
    bba4:	strb.w	r5, [r4, #2484]	; 0x9b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bba8:	str.w	r6, [r4, #2448]	; 0x990
      _s = s;
    bbac:	mvn.w	r6, #54	; 0x36
      _b = b;
    bbb0:	strb.w	r5, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bbb4:	strb.w	r6, [r4, #2452]	; 0x994
      _b = b;
    bbb8:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bbbc:	str.w	r5, [r4, #2488]	; 0x9b8
      _s = s;
      _b = b;
    bbc0:	strb.w	r6, [r4, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bbc4:	movw	r6, #357	; 0x165
      _s = s;
    bbc8:	strb.w	r5, [r4, #2492]	; 0x9bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bbcc:	mov	r7, r6
    bbce:	str.w	r6, [r4, #2456]	; 0x998
      _s = s;
    bbd2:	mov.w	r6, #4294967295
      _b = b;
    bbd6:	strb.w	r5, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bbda:	str.w	r7, [r4, #2496]	; 0x9c0
      _s = s;
    bbde:	strb.w	r6, [r4, #2460]	; 0x99c
    bbe2:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bbe6:	str.w	r7, [r4, #2504]	; 0x9c8
      _s = s;
    bbea:	strb.w	r6, [r4, #2500]	; 0x9c4
      _b = b;
    bbee:	mvn.w	r6, #116	; 0x74
    bbf2:	strb.w	r6, [r4, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bbf6:	mov.w	r6, #4294967295
    bbfa:	strb.w	r6, [r4, #2508]	; 0x9cc
      _b = b;
    bbfe:	mvn.w	r6, #82	; 0x52
    bc02:	strb.w	r6, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc06:	movs	r6, #18
    bc08:	str.w	r6, [r4, #2512]	; 0x9d0
      _s = s;
    bc0c:	mvn.w	r6, #46	; 0x2e
    bc10:	strb.w	r6, [r4, #2516]	; 0x9d4
      _b = b;
    bc14:	mvn.w	r6, #2
    bc18:	strb.w	r6, [r4, #2517]	; 0x9d5
    bc1c:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc20:	str.w	ip, [r4, #2568]	; 0xa08
      _s = s;
      _b = b;
    bc24:	strb.w	r6, [r4, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc28:	movs	r6, #21
    bc2a:	str.w	r6, [r4, #2520]	; 0x9d8
      _s = s;
    bc2e:	mvn.w	r6, #29
    bc32:	strb.w	r6, [r4, #2524]	; 0x9dc
      _b = b;
    bc36:	mvn.w	r6, #2
    bc3a:	strb.w	r6, [r4, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc3e:	movs	r6, #19
    bc40:	str.w	r6, [r4, #2528]	; 0x9e0
      _s = s;
    bc44:	mvn.w	r6, #2
    bc48:	strb.w	r6, [r4, #2532]	; 0x9e4
      _b = b;
    bc4c:	mvn.w	r6, #83	; 0x53
    bc50:	strb.w	r6, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc54:	movs	r6, #34	; 0x22
    bc56:	str.w	r6, [r4, #2536]	; 0x9e8
      _s = s;
    bc5a:	mvn.w	r6, #2
    bc5e:	strb.w	r6, [r4, #2540]	; 0x9ec
      _b = b;
    bc62:	mvn.w	r6, #6
    bc66:	strb.w	r6, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc6a:	movs	r6, #20
    bc6c:	str.w	r6, [r4, #2544]	; 0x9f0
      _s = s;
    bc70:	mvn.w	r6, #2
    bc74:	strb.w	r6, [r4, #2548]	; 0x9f4
      _b = b;
    bc78:	mvn.w	r6, #54	; 0x36
    bc7c:	strb.w	r6, [r4, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc80:	movs	r6, #15
    bc82:	str.w	r6, [r4, #2552]	; 0x9f8
      _s = s;
    bc86:	mvn.w	r6, #10
    bc8a:	strb.w	r6, [r4, #2556]	; 0x9fc
      _b = b;
    bc8e:	mvn.w	r6, #36	; 0x24
    bc92:	strb.w	r6, [r4, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bc96:	movs	r6, #11
    bc98:	str.w	r6, [r4, #2560]	; 0xa00
      _s = s;
    bc9c:	mvn.w	r6, #41	; 0x29
    bca0:	strb.w	r6, [r4, #2564]	; 0xa04
      _b = b;
    bca4:	mvn.w	r6, #42	; 0x2a
    bca8:	strb.w	r6, [r4, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bcac:	mov.w	r6, #4294967295
    bcb0:	strb.w	r6, [r4, #2572]	; 0xa0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bcb4:	movs	r6, #5
    bcb6:	str.w	r6, [r4, #2576]	; 0xa10
      _s = s;
    bcba:	mvn.w	r6, #22
    bcbe:	strb.w	r6, [r4, #2580]	; 0xa14
      _b = b;
    bcc2:	mvn.w	r6, #65	; 0x41
    bcc6:	strb.w	r6, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bcca:	movs	r6, #17
    bccc:	str.w	r6, [r4, #2584]	; 0xa18
      _s = s;
    bcd0:	mvn.w	r6, #36	; 0x24
    bcd4:	strb.w	r6, [r4, #2588]	; 0xa1c
      _b = b;
    bcd8:	mvn.w	r6, #18
    bcdc:	strb.w	r6, [r4, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bce0:	movs	r6, #13
    bce2:	str.w	r6, [r4, #2592]	; 0xa20
      _s = s;
    bce6:	mvn.w	r6, #42	; 0x2a
    bcea:	strb.w	r6, [r4, #2596]	; 0xa24
      _b = b;
    bcee:	mvn.w	r6, #21
    bcf2:	strb.w	r6, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bcf6:	movs	r6, #4
    bcf8:	str.w	r6, [r4, #2600]	; 0xa28
      _s = s;
    bcfc:	mvn.w	r6, #29
    bd00:	strb.w	r6, [r4, #2604]	; 0xa2c
      _b = b;
    bd04:	mvn.w	r6, #13
    bd08:	strb.w	r6, [r4, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bd0c:	mov.w	r6, #81	; 0x51
      _b = b;
    bd10:	strb.w	lr, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bd14:	strb.w	r6, [r4, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd18:	movs	r6, #12
      _s = s;
    bd1a:	strb.w	sl, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd1e:	str.w	r6, [r4, #2608]	; 0xa30
      _s = s;
    bd22:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd26:	str.w	r5, [r4, #2656]	; 0xa60
      _s = s;
    bd2a:	strb.w	r6, [r4, #2612]	; 0xa34
      _b = b;
    bd2e:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bd32:	strb.w	r5, [r4, #2660]	; 0xa64
      _b = b;
    bd36:	strb.w	r6, [r4, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd3a:	movs	r6, #13
      _s = s;
      _b = b;
    bd3c:	strb.w	r5, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd40:	str.w	r6, [r4, #2616]	; 0xa38
      _s = s;
      _b = b;
    bd44:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd48:	str.w	r5, [r4, #2664]	; 0xa68
      _s = s;
      _b = b;
    bd4c:	strb.w	r6, [r4, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd50:	movs	r6, #16
      _s = s;
    bd52:	strb.w	r5, [r4, #2668]	; 0xa6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd56:	str.w	r6, [r4, #2624]	; 0xa40
      _s = s;
    bd5a:	mvn.w	r6, #21
      _b = b;
    bd5e:	strb.w	r5, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bd62:	strb.w	r6, [r4, #2628]	; 0xa44
      _b = b;
    bd66:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd6a:	str.w	r5, [r4, #2672]	; 0xa70
      _s = s;
      _b = b;
    bd6e:	strb.w	r6, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd72:	movs	r6, #22
      _s = s;
    bd74:	strb.w	r5, [r4, #2676]	; 0xa74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd78:	str.w	r6, [r4, #2632]	; 0xa48
      _s = s;
    bd7c:	mvn.w	r6, #37	; 0x25
      _b = b;
    bd80:	strb.w	r5, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bd84:	strb.w	r6, [r4, #2636]	; 0xa4c
      _b = b;
    bd88:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd8c:	str.w	r5, [r4, #2680]	; 0xa78
      _s = s;
      _b = b;
    bd90:	strb.w	r6, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd94:	movs	r6, #20
      _s = s;
    bd96:	strb.w	r5, [r4, #2684]	; 0xa7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bd9a:	str.w	r6, [r4, #2640]	; 0xa50
      _s = s;
    bd9e:	mvn.w	r6, #45	; 0x2d
      _b = b;
    bda2:	strb.w	r5, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bda6:	strb.w	r6, [r4, #2644]	; 0xa54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdaa:	movs	r6, #4
    bdac:	str.w	r6, [r4, #2648]	; 0xa58
      _s = s;
    bdb0:	mvn.w	r6, #22
    bdb4:	strb.w	r6, [r4, #2652]	; 0xa5c
      _b = b;
    bdb8:	mvn.w	r6, #114	; 0x72
    bdbc:	strb.w	r6, [r4, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdc0:	movs	r6, #3
    bdc2:	str.w	r6, [r4, #2688]	; 0xa80
      _s = s;
      _b = b;
    bdc6:	mvn.w	r6, #29
    bdca:	strb.w	r6, [r4, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdce:	movs	r6, #4
      _s = s;
      _b = b;
    bdd0:	strb.w	r9, [r4, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdd4:	str.w	r6, [r4, #2696]	; 0xa88
      _s = s;
    bdd8:	mvn.w	r6, #18
      _b = b;
    bddc:	strb.w	lr, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bde0:	strb.w	r6, [r4, #2700]	; 0xa8c
      _b = b;
    bde4:	mvn.w	r6, #38	; 0x26
    bde8:	strb.w	r9, [r4, #2773]	; 0xad5
    bdec:	strb.w	r6, [r4, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdf0:	movs	r6, #20
    bdf2:	str.w	r6, [r4, #2704]	; 0xa90
      _s = s;
    bdf6:	mvn.w	r6, #66	; 0x42
    bdfa:	strb.w	r6, [r4, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bdfe:	movs	r6, #21
    be00:	str.w	r6, [r4, #2712]	; 0xa98
      _s = s;
    be04:	mvn.w	r6, #28
    be08:	strb.w	r6, [r4, #2716]	; 0xa9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be0c:	movs	r6, #25
    be0e:	str.w	r6, [r4, #2720]	; 0xaa0
      _s = s;
    be12:	mvn.w	r6, #2
    be16:	strb.w	r6, [r4, #2724]	; 0xaa4
      _b = b;
    be1a:	mvn.w	r6, #88	; 0x58
    be1e:	strb.w	r6, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be22:	movs	r6, #30
    be24:	str.w	r6, [r4, #2728]	; 0xaa8
      _s = s;
    be28:	mvn.w	r6, #2
    be2c:	strb.w	r6, [r4, #2732]	; 0xaac
      _b = b;
    be30:	mvn.w	r6, #42	; 0x2a
    be34:	strb.w	r6, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be38:	movs	r6, #28
    be3a:	str.w	r6, [r4, #2736]	; 0xab0
      _s = s;
    be3e:	mov.w	r6, #4294967295
    be42:	strb.w	r6, [r4, #2740]	; 0xab4
      _b = b;
    be46:	mvn.w	r6, #40	; 0x28
    be4a:	strb.w	r6, [r4, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be4e:	movs	r6, #19
    be50:	str.w	r6, [r4, #2744]	; 0xab8
      _s = s;
    be54:	mvn.w	r6, #6
    be58:	strb.w	r6, [r4, #2748]	; 0xabc
      _b = b;
    be5c:	mvn.w	r6, #32
    be60:	strb.w	r6, [r4, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be64:	movs	r6, #14
    be66:	str.w	r6, [r4, #2752]	; 0xac0
      _s = s;
    be6a:	mvn.w	r6, #29
    be6e:	strb.w	r6, [r4, #2756]	; 0xac4
      _b = b;
    be72:	mvn.w	r6, #20
    be76:	strb.w	r6, [r4, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be7a:	movs	r6, #11
    be7c:	str.w	r6, [r4, #2760]	; 0xac8
      _s = s;
    be80:	mvn.w	r6, #41	; 0x29
    be84:	strb.w	r6, [r4, #2764]	; 0xacc
      _b = b;
    be88:	mvn.w	r6, #37	; 0x25
    be8c:	strb.w	r6, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be90:	movs	r6, #22
    be92:	str.w	r6, [r4, #2768]	; 0xad0
      _s = s;
    be96:	mvn.w	r6, #79	; 0x4f
    be9a:	strb.w	r6, [r4, #2772]	; 0xad4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    be9e:	movs	r6, #19
    bea0:	str.w	r6, [r4, #2776]	; 0xad8
      _s = s;
    bea4:	mvn.w	r6, #31
    bea8:	strb.w	r6, [r4, #2780]	; 0xadc
      _b = b;
    beac:	mvn.w	r6, #6
    beb0:	strb.w	r6, [r4, #2781]	; 0xadd
    beb4:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    beb8:	str.w	r2, [r4, #2808]	; 0xaf8
      _s = s;
      _b = b;
    bebc:	strb.w	r6, [r4, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bec0:	movs	r6, #10
    bec2:	str.w	r2, [r4, #2816]	; 0xb00
    bec6:	str.w	r6, [r4, #2784]	; 0xae0
      _s = s;
      _b = b;
    beca:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bece:	strb.w	sl, [r4, #2788]	; 0xae4
      _b = b;
    bed2:	strb.w	r6, [r4, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bed6:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    beda:	str.w	r8, [r4, #2792]	; 0xae8
      _s = s;
    bede:	strb.w	r6, [r4, #2796]	; 0xaec
      _b = b;
    bee2:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bee6:	str.w	r8, [r4, #2800]	; 0xaf0
      _s = s;
      _b = b;
    beea:	strb.w	r6, [r4, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    beee:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bef2:	str.w	r5, [r4, #2848]	; 0xb20
      _s = s;
    bef6:	strb.w	r6, [r4, #2804]	; 0xaf4
      _b = b;
    befa:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    befe:	strb.w	r5, [r4, #2852]	; 0xb24
      _b = b;
    bf02:	strb.w	r6, [r4, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf06:	mvn.w	r6, #22
      _b = b;
    bf0a:	strb.w	r5, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf0e:	strb.w	r6, [r4, #2812]	; 0xafc
    bf12:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf16:	str.w	r5, [r4, #2856]	; 0xb28
      _s = s;
    bf1a:	strb.w	r6, [r4, #2820]	; 0xb04
      _b = b;
    bf1e:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf22:	strb.w	r5, [r4, #2860]	; 0xb2c
      _b = b;
    bf26:	strb.w	r6, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf2a:	movs	r6, #12
      _s = s;
      _b = b;
    bf2c:	strb.w	r5, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf30:	str.w	r6, [r4, #2824]	; 0xb08
      _s = s;
    bf34:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf38:	str.w	r5, [r4, #2864]	; 0xb30
      _s = s;
    bf3c:	strb.w	r6, [r4, #2828]	; 0xb0c
      _b = b;
    bf40:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf44:	strb.w	r5, [r4, #2868]	; 0xb34
      _b = b;
    bf48:	strb.w	r6, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf4c:	movs	r6, #17
    bf4e:	str.w	r6, [r4, #2832]	; 0xb10
      _s = s;
    bf52:	mvn.w	r6, #43	; 0x2b
    bf56:	strb.w	r6, [r4, #2836]	; 0xb14
      _b = b;
    bf5a:	mov.w	r6, #4294967295
    bf5e:	strb.w	r6, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bf62:	mov.w	r6, #358	; 0x166
    bf66:	str.w	r6, [r4, #2840]	; 0xb18
      _s = s;
    bf6a:	mvn.w	r6, #15
    bf6e:	strb.w	r6, [r4, #2844]	; 0xb1c
      _b = b;
    bf72:	mvn.w	r6, #102	; 0x66
    bf76:	strb.w	r6, [r4, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf7a:	mvn.w	r6, #113	; 0x71
      _b = b;
    bf7e:	strb.w	r5, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf82:	strb.w	r6, [r4, #2884]	; 0xb44
      _b = b;
    bf86:	mvn.w	r6, #12
    bf8a:	strb.w	r9, [r4, #2909]	; 0xb5d
    bf8e:	strb.w	r6, [r4, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bf92:	mvn.w	r6, #24
    bf96:	strb.w	lr, [r4, #2916]	; 0xb64
    bf9a:	strb.w	r6, [r4, #2892]	; 0xb4c
      _b = b;
    bf9e:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfa2:	str.w	r5, [r4, #2872]	; 0xb38
      _s = s;
      _b = b;
    bfa6:	strb.w	r6, [r4, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfaa:	movs	r6, #15
      _s = s;
    bfac:	strb.w	r5, [r4, #2876]	; 0xb3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfb0:	str.w	r6, [r4, #2896]	; 0xb50
      _s = s;
    bfb4:	mvn.w	r6, #47	; 0x2f
      _b = b;
    bfb8:	strb.w	r5, [r4, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bfbc:	strb.w	r6, [r4, #2900]	; 0xb54
      _b = b;
    bfc0:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfc4:	str.w	r5, [r4, #2880]	; 0xb40
      _s = s;
      _b = b;
    bfc8:	strb.w	r6, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfcc:	movs	r6, #20
    bfce:	str.w	r8, [r4, #2888]	; 0xb48
    bfd2:	str.w	r6, [r4, #2904]	; 0xb58
      _s = s;
    bfd6:	mvn.w	r6, #56	; 0x38
    bfda:	strb.w	r6, [r4, #2908]	; 0xb5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bfde:	movs	r6, #28
    bfe0:	str.w	r6, [r4, #2912]	; 0xb60
      _s = s;
      _b = b;
    bfe4:	mvn.w	r6, #47	; 0x2f
    bfe8:	strb.w	r6, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    bfec:	mvn.w	r6, #2
    bff0:	strb.w	r6, [r4, #2924]	; 0xb6c
      _b = b;
    bff4:	mvn.w	r6, #60	; 0x3c
    bff8:	strb.w	r6, [r4, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    bffc:	movs	r6, #24
    bffe:	mov	r7, r6
    c000:	str.w	r6, [r4, #2928]	; 0xb70
      _s = s;
    c004:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c008:	str.w	r7, [r4, #2936]	; 0xb78
      _s = s;
    c00c:	strb.w	r6, [r4, #2932]	; 0xb74
      _b = b;
    c010:	mvn.w	r6, #49	; 0x31
    c014:	strb.w	r6, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c018:	mvn.w	r6, #12
    c01c:	strb.w	r6, [r4, #2940]	; 0xb7c
      _b = b;
    c020:	mvn.w	r6, #17
    c024:	strb.w	r6, [r4, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c028:	movs	r6, #15
    c02a:	str.w	r6, [r4, #2944]	; 0xb80
      _s = s;
    c02e:	mvn.w	r6, #24
    c032:	strb.w	r6, [r4, #2948]	; 0xb84
      _b = b;
    c036:	mvn.w	r6, #17
    c03a:	strb.w	r6, [r4, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c03e:	movs	r6, #23
    c040:	str.w	r6, [r4, #2952]	; 0xb88
      _s = s;
    c044:	mvn.w	r6, #58	; 0x3a
    c048:	strb.w	r6, [r4, #2956]	; 0xb8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c04c:	movs	r6, #29
    c04e:	str.w	r6, [r4, #2920]	; 0xb68
      _s = s;
      _b = b;
    c052:	mvn.w	r6, #27
    c056:	strb.w	r6, [r4, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c05a:	movs	r6, #24
    c05c:	str.w	ip, [r4, #3032]	; 0xbd8
    c060:	str.w	r6, [r4, #2960]	; 0xb90
      _s = s;
    c064:	mvn.w	r6, #17
    c068:	strb.w	fp, [r4, #2980]	; 0xba4
    c06c:	strb.w	r6, [r4, #2964]	; 0xb94
      _b = b;
    c070:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c074:	str.w	r8, [r4, #2984]	; 0xba8
      _s = s;
      _b = b;
    c078:	strb.w	r6, [r4, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c07c:	movs	r6, #29
      _s = s;
    c07e:	strb.w	fp, [r4, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c082:	str.w	r6, [r4, #2968]	; 0xb98
      _s = s;
    c086:	mvn.w	r6, #7
      _b = b;
    c08a:	strb.w	fp, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c08e:	strb.w	r6, [r4, #2972]	; 0xb9c
      _b = b;
    c092:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c096:	str.w	r5, [r4, #3040]	; 0xbe0
      _s = s;
      _b = b;
    c09a:	strb.w	r6, [r4, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c09e:	movs	r6, #14
      _s = s;
    c0a0:	strb.w	r5, [r4, #3044]	; 0xbe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c0a4:	str.w	r6, [r4, #2976]	; 0xba0
      _s = s;
      _b = b;
    c0a8:	mvn.w	r6, #59	; 0x3b
    c0ac:	strb.w	r6, [r4, #2981]	; 0xba5
    c0b0:	mvn.w	r6, #90	; 0x5a
    c0b4:	strb.w	r6, [r4, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c0b8:	movw	r6, #359	; 0x167
    c0bc:	str.w	r6, [r4, #2992]	; 0xbb0
      _s = s;
    c0c0:	mvn.w	r6, #21
    c0c4:	strb.w	r6, [r4, #2996]	; 0xbb4
      _b = b;
    c0c8:	mvn.w	r6, #45	; 0x2d
    c0cc:	strb.w	r6, [r4, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c0d0:	movs	r6, #9
    c0d2:	str.w	r6, [r4, #3000]	; 0xbb8
      _s = s;
    c0d6:	mvn.w	r6, #27
    c0da:	strb.w	r6, [r4, #3004]	; 0xbbc
      _b = b;
    c0de:	mvn.w	r6, #64	; 0x40
    c0e2:	strb.w	r6, [r4, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c0e6:	movs	r6, #10
    c0e8:	str.w	r6, [r4, #3008]	; 0xbc0
      _s = s;
    c0ec:	mvn.w	r6, #18
    c0f0:	strb.w	r6, [r4, #3012]	; 0xbc4
      _b = b;
    c0f4:	mvn.w	r6, #113	; 0x71
    c0f8:	strb.w	r6, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c0fc:	movs	r6, #17
    c0fe:	str.w	r6, [r4, #3016]	; 0xbc8
      _s = s;
    c102:	mvn.w	r6, #37	; 0x25
    c106:	strb.w	r6, [r4, #3020]	; 0xbcc
      _b = b;
    c10a:	mvn.w	r6, #18
    c10e:	strb.w	r6, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c112:	movs	r6, #14
    c114:	str.w	r6, [r4, #3024]	; 0xbd0
      _s = s;
    c118:	mvn.w	r6, #44	; 0x2c
    c11c:	strb.w	r6, [r4, #3028]	; 0xbd4
    c120:	mov.w	r6, #4294967295
    c124:	strb.w	r6, [r4, #3036]	; 0xbdc
      _b = b;
    c128:	mvn.w	r6, #105	; 0x69
    c12c:	strb.w	r6, [r4, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c130:	mov.w	r6, #87	; 0x57
      _b = b;
    c134:	strb.w	r5, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c138:	strb.w	r6, [r4, #3084]	; 0xc0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c13c:	movs	r6, #25
      _s = s;
      _b = b;
    c13e:	strb.w	r9, [r4, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c142:	str.w	r6, [r4, #3072]	; 0xc00
      _s = s;
    c146:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c14a:	str.w	r5, [r4, #3048]	; 0xbe8
      _s = s;
    c14e:	strb.w	r6, [r4, #3076]	; 0xc04
      _b = b;
    c152:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c156:	strb.w	r5, [r4, #3052]	; 0xbec
      _b = b;
    c15a:	strb.w	r6, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c15e:	movs	r6, #5
      _s = s;
      _b = b;
    c160:	strb.w	r5, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c164:	str.w	r6, [r4, #3080]	; 0xc08
      _s = s;
      _b = b;
    c168:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c16c:	str.w	r5, [r4, #3056]	; 0xbf0
      _s = s;
      _b = b;
    c170:	strb.w	r6, [r4, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c174:	movs	r6, #13
      _s = s;
    c176:	strb.w	r5, [r4, #3060]	; 0xbf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c17a:	str.w	r6, [r4, #3088]	; 0xc10
      _s = s;
    c17e:	mvn.w	r6, #20
      _b = b;
    c182:	strb.w	r5, [r4, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c186:	strb.w	r6, [r4, #3092]	; 0xc14
      _b = b;
    c18a:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c18e:	str.w	r5, [r4, #3064]	; 0xbf8
      _s = s;
      _b = b;
    c192:	strb.w	r6, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c196:	movs	r6, #18
      _s = s;
    c198:	strb.w	r5, [r4, #3068]	; 0xbfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c19c:	str.w	r6, [r4, #3096]	; 0xc18
      _s = s;
    c1a0:	mvn.w	r6, #93	; 0x5d
      _b = b;
    c1a4:	strb.w	r5, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c1a8:	strb.w	r6, [r4, #3100]	; 0xc1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c1ac:	movs	r6, #26
      _s = s;
    c1ae:	strb.w	fp, [r4, #3124]	; 0xc34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c1b2:	str.w	r6, [r4, #3104]	; 0xc20
      _s = s;
    c1b6:	mvn.w	r6, #55	; 0x37
    c1ba:	strb.w	r6, [r4, #3108]	; 0xc24
      _b = b;
    c1be:	mov.w	r6, #4294967295
    c1c2:	strb.w	r6, [r4, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c1c6:	movs	r6, #27
    c1c8:	str.w	r6, [r4, #3112]	; 0xc28
      _s = s;
    c1cc:	mvn.w	r6, #26
    c1d0:	strb.w	r6, [r4, #3116]	; 0xc2c
      _b = b;
    c1d4:	mvn.w	r6, #15
    c1d8:	strb.w	r6, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c1dc:	movs	r6, #28
    c1de:	str.w	r6, [r4, #3120]	; 0xc30
      _s = s;
      _b = b;
    c1e2:	mvn.w	r6, #19
    c1e6:	strb.w	r6, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c1ea:	movs	r6, #24
    c1ec:	str.w	r6, [r4, #3128]	; 0xc38
      _s = s;
    c1f0:	mvn.w	r6, #19
    c1f4:	strb.w	r6, [r4, #3132]	; 0xc3c
      _b = b;
    c1f8:	mov.w	r6, #4294967295
    c1fc:	strb.w	r6, [r4, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c200:	movs	r6, #31
      _s = s;
      _b = b;
    c202:	strb.w	lr, [r4, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c206:	str.w	r6, [r4, #3168]	; 0xc60
    c20a:	movs	r6, #5
      _s = s;
      _b = b;
    c20c:	strb.w	r9, [r4, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c210:	str.w	r6, [r4, #3136]	; 0xc40
      _s = s;
    c214:	mvn.w	r6, #16
    c218:	strb.w	r6, [r4, #3140]	; 0xc44
      _b = b;
    c21c:	mvn.w	r6, #71	; 0x47
    c220:	strb.w	r6, [r4, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c224:	movs	r6, #21
    c226:	str.w	r6, [r4, #3144]	; 0xc48
      _s = s;
    c22a:	mvn.w	r6, #64	; 0x40
    c22e:	strb.w	r6, [r4, #3148]	; 0xc4c
      _b = b;
    c232:	mvn.w	r6, #23
    c236:	strb.w	r6, [r4, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c23a:	movs	r6, #28
    c23c:	str.w	r6, [r4, #3152]	; 0xc50
      _s = s;
    c240:	mvn.w	r6, #16
    c244:	strb.w	r6, [r4, #3156]	; 0xc54
      _b = b;
    c248:	mvn.w	r6, #25
    c24c:	strb.w	r6, [r4, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c250:	movs	r6, #30
    c252:	str.w	r6, [r4, #3160]	; 0xc58
      _s = s;
    c256:	mvn.w	r6, #2
    c25a:	strb.w	r6, [r4, #3164]	; 0xc5c
      _b = b;
    c25e:	mvn.w	r6, #77	; 0x4d
    c262:	strb.w	r6, [r4, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c266:	mvn.w	r6, #2
    c26a:	strb.w	r6, [r4, #3172]	; 0xc64
      _b = b;
    c26e:	mvn.w	r6, #32
    c272:	strb.w	r6, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c276:	movs	r6, #24
    c278:	str.w	r6, [r4, #3176]	; 0xc68
      _s = s;
    c27c:	mvn.w	r6, #18
    c280:	strb.w	r6, [r4, #3180]	; 0xc6c
      _b = b;
    c284:	mvn.w	r6, #11
    c288:	strb.w	r6, [r4, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c28c:	movs	r6, #12
    c28e:	str.w	r6, [r4, #3184]	; 0xc70
      _s = s;
    c292:	mvn.w	r6, #31
    c296:	strb.w	r6, [r4, #3188]	; 0xc74
      _b = b;
    c29a:	mvn.w	r6, #9
    c29e:	strb.w	r6, [r4, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2a2:	movs	r6, #11
    c2a4:	str.w	r6, [r4, #3192]	; 0xc78
      _s = s;
    c2a8:	mvn.w	r6, #35	; 0x23
    c2ac:	strb.w	r6, [r4, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2b0:	movs	r6, #14
    c2b2:	str.w	r6, [r4, #3200]	; 0xc80
      _s = s;
    c2b6:	mvn.w	r6, #37	; 0x25
    c2ba:	strb.w	r6, [r4, #3204]	; 0xc84
      _b = b;
    c2be:	mvn.w	r6, #10
    c2c2:	strb.w	r6, [r4, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2c6:	movs	r6, #16
    c2c8:	str.w	r6, [r4, #3208]	; 0xc88
      _s = s;
    c2cc:	mvn.w	r6, #42	; 0x2a
    c2d0:	strb.w	r6, [r4, #3212]	; 0xc8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2d4:	movs	r6, #7
    c2d6:	str.w	r6, [r4, #3216]	; 0xc90
      _s = s;
    c2da:	mvn.w	r6, #27
    c2de:	strb.w	r6, [r4, #3220]	; 0xc94
      _b = b;
    c2e2:	mvn.w	r6, #18
    c2e6:	strb.w	r6, [r4, #3221]	; 0xc95
    c2ea:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2ee:	str.w	r5, [r4, #3240]	; 0xca8
      _s = s;
      _b = b;
    c2f2:	strb.w	r6, [r4, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2f6:	movs	r6, #20
      _s = s;
    c2f8:	strb.w	r5, [r4, #3244]	; 0xcac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c2fc:	str.w	r6, [r4, #3224]	; 0xc98
      _s = s;
    c300:	mvn.w	r6, #32
      _b = b;
    c304:	strb.w	r5, [r4, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c308:	strb.w	r6, [r4, #3228]	; 0xc9c
      _b = b;
    c30c:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c310:	str.w	r5, [r4, #3248]	; 0xcb0
      _s = s;
      _b = b;
    c314:	strb.w	r6, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c318:	movs	r6, #27
      _s = s;
    c31a:	strb.w	r5, [r4, #3252]	; 0xcb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c31e:	str.w	r6, [r4, #3232]	; 0xca0
      _s = s;
    c322:	mvn.w	r6, #44	; 0x2c
      _b = b;
    c326:	strb.w	r5, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c32a:	strb.w	r6, [r4, #3236]	; 0xca4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c32e:	movs	r6, #36	; 0x24
    c330:	str.w	r5, [r4, #3256]	; 0xcb8
    c334:	str.w	r6, [r4, #3264]	; 0xcc0
      _s = s;
    c338:	mov.w	r6, #17
    c33c:	strb.w	r5, [r4, #3260]	; 0xcbc
    c340:	strb.w	r6, [r4, #3268]	; 0xcc4
      _b = b;
    c344:	mov.w	r6, #71	; 0x47
    c348:	strb.w	r5, [r4, #3261]	; 0xcbd
    c34c:	strb.w	r6, [r4, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c350:	movs	r6, #21
    c352:	str.w	r6, [r4, #3272]	; 0xcc8
      _s = s;
    c356:	mov.w	r6, #18
    c35a:	strb.w	r6, [r4, #3276]	; 0xccc
      _b = b;
    c35e:	mvn.w	r6, #23
    c362:	strb.w	r6, [r4, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c366:	movs	r6, #7
    c368:	str.w	r6, [r4, #3280]	; 0xcd0
      _s = s;
    c36c:	mvn.w	r6, #91	; 0x5b
    c370:	strb.w	r6, [r4, #3284]	; 0xcd4
      _b = b;
    c374:	mvn.w	r6, #6
    c378:	strb.w	r6, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c37c:	movs	r6, #9
    c37e:	str.w	r6, [r4, #3288]	; 0xcd8
      _s = s;
    c382:	mvn.w	r6, #56	; 0x38
    c386:	strb.w	r6, [r4, #3292]	; 0xcdc
      _b = b;
    c38a:	mvn.w	r6, #8
    c38e:	strb.w	r6, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c392:	movs	r6, #20
    c394:	str.w	r6, [r4, #3296]	; 0xce0
      _s = s;
    c398:	mvn.w	r6, #88	; 0x58
    c39c:	strb.w	r6, [r4, #3300]	; 0xce4
      _b = b;
    c3a0:	mvn.w	r6, #2
    c3a4:	strb.w	r6, [r4, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c3a8:	movs	r6, #25
    c3aa:	str.w	r6, [r4, #3304]	; 0xce8
      _s = s;
    c3ae:	mvn.w	r6, #42	; 0x2a
    c3b2:	strb.w	r6, [r4, #3308]	; 0xcec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c3b6:	movs	r6, #27
      _s = s;
      _b = b;
    c3b8:	strb.w	r9, [r4, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c3bc:	str.w	r6, [r4, #3312]	; 0xcf0
      _s = s;
    c3c0:	mvn.w	r6, #24
      _b = b;
    c3c4:	strb.w	sl, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c3c8:	strb.w	r6, [r4, #3316]	; 0xcf4
      _b = b;
    c3cc:	mov.w	r6, #4294967295
    c3d0:	strb.w	r6, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c3d4:	movs	r6, #21
    c3d6:	str.w	r6, [r4, #3320]	; 0xcf8
      _s = s;
    c3da:	mvn.w	r6, #27
    c3de:	strb.w	r6, [r4, #3324]	; 0xcfc
      _b = b;
    c3e2:	mvn.w	r6, #5
    c3e6:	strb.w	r6, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c3ea:	mov.w	r6, #358	; 0x166
    c3ee:	str.w	r6, [r4, #3328]	; 0xd00
      _s = s;
    c3f2:	mvn.w	r6, #2
    c3f6:	strb.w	r6, [r4, #3332]	; 0xd04
      _b = b;
    c3fa:	mvn.w	r6, #117	; 0x75
    c3fe:	strb.w	r6, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c402:	movs	r6, #14
    c404:	str.w	r6, [r4, #3336]	; 0xd08
      _s = s;
    c408:	mvn.w	r6, #44	; 0x2c
    c40c:	strb.w	r6, [r4, #3340]	; 0xd0c
      _b = b;
    c410:	mvn.w	r6, #55	; 0x37
    c414:	strb.w	r6, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c418:	movs	r6, #23
    c41a:	str.w	r6, [r4, #3344]	; 0xd10
      _s = s;
    c41e:	mvn.w	r6, #41	; 0x29
    c422:	strb.w	r6, [r4, #3348]	; 0xd14
      _b = b;
    c426:	mvn.w	r6, #2
    c42a:	strb.w	r6, [r4, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c42e:	movs	r6, #26
    c430:	str.w	r6, [r4, #3352]	; 0xd18
      _s = s;
    c434:	mvn.w	r6, #2
    c438:	strb.w	r6, [r4, #3356]	; 0xd1c
      _b = b;
    c43c:	mvn.w	r6, #68	; 0x44
    c440:	strb.w	r6, [r4, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c444:	movs	r6, #34	; 0x22
    c446:	str.w	r6, [r4, #3360]	; 0xd20
      _s = s;
    c44a:	mvn.w	r6, #2
    c44e:	strb.w	r6, [r4, #3364]	; 0xd24
      _b = b;
    c452:	mvn.w	r6, #44	; 0x2c
    c456:	strb.w	r6, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c45a:	movs	r6, #20
    c45c:	str.w	r6, [r4, #3368]	; 0xd28
      _s = s;
    c460:	mvn.w	r6, #24
    c464:	strb.w	r6, [r4, #3372]	; 0xd2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c468:	movs	r6, #11
    c46a:	str.w	r6, [r4, #3376]	; 0xd30
      _s = s;
    c46e:	mvn.w	r6, #23
    c472:	strb.w	r6, [r4, #3380]	; 0xd34
      _b = b;
    c476:	mvn.w	r6, #11
    c47a:	strb.w	r6, [r4, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c47e:	movs	r6, #3
    c480:	str.w	r6, [r4, #3384]	; 0xd38
      _s = s;
    c484:	mvn.w	r6, #31
    c488:	strb.w	r6, [r4, #3388]	; 0xd3c
      _b = b;
    c48c:	mvn.w	r6, #11
    c490:	strb.w	r6, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c494:	movs	r6, #9
    c496:	str.w	r6, [r4, #3392]	; 0xd40
      _s = s;
    c49a:	mvn.w	r6, #33	; 0x21
    c49e:	strb.w	r6, [r4, #3396]	; 0xd44
      _b = b;
    c4a2:	mvn.w	r6, #14
    c4a6:	strb.w	r6, [r4, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4aa:	movs	r6, #37	; 0x25
      _s = s;
      _b = b;
    c4ac:	strb.w	r9, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4b0:	str.w	r6, [r4, #3464]	; 0xd88
    c4b4:	movs	r6, #4
      _s = s;
      _b = b;
    c4b6:	strb.w	sl, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4ba:	str.w	r6, [r4, #3400]	; 0xd48
      _s = s;
    c4be:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4c2:	str.w	r5, [r4, #3432]	; 0xd68
      _s = s;
    c4c6:	strb.w	r6, [r4, #3404]	; 0xd4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4ca:	movs	r6, #24
      _s = s;
    c4cc:	strb.w	r5, [r4, #3436]	; 0xd6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4d0:	str.w	r6, [r4, #3408]	; 0xd50
      _s = s;
    c4d4:	mvn.w	r6, #46	; 0x2e
      _b = b;
    c4d8:	strb.w	r5, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c4dc:	strb.w	r6, [r4, #3412]	; 0xd54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c4e0:	movs	r6, #29
    c4e2:	str.w	r5, [r4, #3440]	; 0xd70
    c4e6:	str.w	r6, [r4, #3416]	; 0xd58
      _s = s;
    c4ea:	mvn.w	r6, #86	; 0x56
    c4ee:	strb.w	r5, [r4, #3444]	; 0xd74
    c4f2:	strb.w	r6, [r4, #3420]	; 0xd5c
      _b = b;
    c4f6:	mov.w	r6, #4294967295
    c4fa:	strb.w	r5, [r4, #3445]	; 0xd75
    c4fe:	strb.w	r6, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c502:	movs	r6, #30
    c504:	str.w	r5, [r4, #3448]	; 0xd78
    c508:	str.w	r6, [r4, #3424]	; 0xd60
      _s = s;
    c50c:	mvn.w	r6, #127	; 0x7f
    c510:	strb.w	r5, [r4, #3452]	; 0xd7c
    c514:	strb.w	r6, [r4, #3428]	; 0xd64
      _b = b;
    c518:	mvn.w	r6, #83	; 0x53
    c51c:	strb.w	r5, [r4, #3453]	; 0xd7d
    c520:	strb.w	r6, [r4, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c524:	mov.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c528:	str.w	r5, [r4, #3456]	; 0xd80
      _s = s;
    c52c:	strb.w	r6, [r4, #3468]	; 0xd8c
      _b = b;
    c530:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c534:	strb.w	r5, [r4, #3460]	; 0xd84
      _b = b;
    c538:	strb.w	r6, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c53c:	movs	r6, #5
      _s = s;
      _b = b;
    c53e:	strb.w	r5, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c542:	str.w	r6, [r4, #3472]	; 0xd90
      _s = s;
    c546:	mov.w	r6, #68	; 0x44
    c54a:	strb.w	r6, [r4, #3476]	; 0xd94
      _b = b;
    c54e:	mvn.w	r6, #14
    c552:	strb.w	r6, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c556:	movs	r6, #2
    c558:	str.w	r6, [r4, #3480]	; 0xd98
      _s = s;
    c55c:	mvn.w	r6, #15
    c560:	strb.w	r6, [r4, #3484]	; 0xd9c
      _b = b;
    c564:	mvn.w	r6, #48	; 0x30
    c568:	strb.w	r6, [r4, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c56c:	movs	r6, #9
    c56e:	str.w	ip, [r4, #3520]	; 0xdc0
    c572:	str.w	r6, [r4, #3488]	; 0xda0
      _s = s;
    c576:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c57a:	str.w	ip, [r4, #3528]	; 0xdc8
      _s = s;
    c57e:	strb.w	r6, [r4, #3492]	; 0xda4
      _b = b;
    c582:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c586:	strb.w	lr, [r4, #3532]	; 0xdcc
      _b = b;
    c58a:	strb.w	r6, [r4, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c58e:	movs	r6, #14
    c590:	str.w	r6, [r4, #3496]	; 0xda8
      _s = s;
    c594:	mvn.w	r6, #40	; 0x28
    c598:	strb.w	r6, [r4, #3500]	; 0xdac
      _b = b;
    c59c:	strb.w	r6, [r4, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c5a0:	movs	r6, #19
    c5a2:	str.w	r6, [r4, #3504]	; 0xdb0
      _s = s;
    c5a6:	mvn.w	r6, #33	; 0x21
    c5aa:	strb.w	r6, [r4, #3508]	; 0xdb4
      _b = b;
    c5ae:	mvn.w	r6, #7
    c5b2:	strb.w	r6, [r4, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c5b6:	movs	r6, #16
    c5b8:	str.w	r6, [r4, #3512]	; 0xdb8
      _s = s;
    c5bc:	mvn.w	r6, #26
    c5c0:	strb.w	r6, [r4, #3516]	; 0xdbc
      _b = b;
    c5c4:	mvn.w	r6, #48	; 0x30
    c5c8:	strb.w	r6, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c5cc:	mov.w	r6, #4294967295
    c5d0:	strb.w	r6, [r4, #3524]	; 0xdc4
      _b = b;
    c5d4:	mvn.w	r6, #58	; 0x3a
    c5d8:	strb.w	r6, [r4, #3525]	; 0xdc5
    c5dc:	strb.w	r6, [r4, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c5e0:	movs	r6, #20
    c5e2:	str.w	r6, [r4, #3536]	; 0xdd0
      _s = s;
    c5e6:	mvn.w	r6, #44	; 0x2c
    c5ea:	strb.w	r6, [r4, #3540]	; 0xdd4
      _b = b;
    c5ee:	mvn.w	r6, #20
    c5f2:	strb.w	r6, [r4, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c5f6:	movs	r6, #19
    c5f8:	str.w	r6, [r4, #3544]	; 0xdd8
      _s = s;
    c5fc:	mvn.w	r6, #34	; 0x22
    c600:	strb.w	r6, [r4, #3548]	; 0xddc
      _b = b;
    c604:	mvn.w	r6, #22
    c608:	strb.w	r6, [r4, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c60c:	movs	r6, #21
    c60e:	str.w	r6, [r4, #3552]	; 0xde0
      _s = s;
    c612:	mvn.w	r6, #18
    c616:	strb.w	r6, [r4, #3556]	; 0xde4
      _b = b;
    c61a:	mvn.w	r6, #33	; 0x21
    c61e:	strb.w	r6, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c622:	movs	r6, #24
    c624:	str.w	r6, [r4, #3560]	; 0xde8
      _s = s;
    c628:	mvn.w	r6, #23
    c62c:	strb.w	r6, [r4, #3564]	; 0xdec
      _b = b;
    c630:	mvn.w	r6, #28
    c634:	strb.w	r6, [r4, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c638:	movs	r6, #16
    c63a:	str.w	r6, [r4, #3568]	; 0xdf0
      _s = s;
    c63e:	mvn.w	r6, #21
    c642:	strb.w	r6, [r4, #3572]	; 0xdf4
      _b = b;
    c646:	mvn.w	r6, #22
    c64a:	strb.w	r6, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c64e:	movw	r6, #355	; 0x163
    c652:	str.w	r5, [r4, #3624]	; 0xe28
    c656:	mov	r7, r6
    c658:	str.w	r6, [r4, #3576]	; 0xdf8
      _s = s;
    c65c:	mov.w	r6, #4294967295
    c660:	strb.w	r5, [r4, #3628]	; 0xe2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c664:	str.w	r7, [r4, #3584]	; 0xe00
      _s = s;
    c668:	strb.w	r6, [r4, #3580]	; 0xdfc
      _b = b;
    c66c:	mvn.w	r6, #45	; 0x2d
    c670:	strb.w	r5, [r4, #3629]	; 0xe2d
    c674:	strb.w	r6, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c678:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c67c:	str.w	r5, [r4, #3632]	; 0xe30
      _s = s;
    c680:	strb.w	r6, [r4, #3588]	; 0xe04
      _b = b;
    c684:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c688:	strb.w	r5, [r4, #3636]	; 0xe34
      _b = b;
    c68c:	strb.w	r6, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c690:	movs	r6, #13
      _s = s;
      _b = b;
    c692:	strb.w	r5, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c696:	str.w	r6, [r4, #3592]	; 0xe08
      _s = s;
    c69a:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c69e:	str.w	r5, [r4, #3640]	; 0xe38
      _s = s;
    c6a2:	strb.w	r6, [r4, #3596]	; 0xe0c
      _b = b;
    c6a6:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c6aa:	strb.w	r5, [r4, #3644]	; 0xe3c
      _b = b;
    c6ae:	strb.w	r6, [r4, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6b2:	movs	r6, #30
      _s = s;
      _b = b;
    c6b4:	strb.w	r5, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6b8:	str.w	r6, [r4, #3600]	; 0xe10
      _s = s;
    c6bc:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6c0:	str.w	r5, [r4, #3648]	; 0xe40
      _s = s;
    c6c4:	strb.w	r6, [r4, #3604]	; 0xe14
      _b = b;
    c6c8:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c6cc:	strb.w	r5, [r4, #3652]	; 0xe44
      _b = b;
    c6d0:	strb.w	r6, [r4, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6d4:	movs	r6, #25
      _s = s;
      _b = b;
    c6d6:	strb.w	r5, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6da:	str.w	r6, [r4, #3608]	; 0xe18
      _s = s;
    c6de:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6e2:	str.w	r5, [r4, #3656]	; 0xe48
      _s = s;
    c6e6:	strb.w	r6, [r4, #3612]	; 0xe1c
      _b = b;
    c6ea:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c6ee:	strb.w	r5, [r4, #3660]	; 0xe4c
      _b = b;
    c6f2:	strb.w	r6, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c6f6:	movs	r6, #29
    c6f8:	str.w	r6, [r4, #3616]	; 0xe20
      _s = s;
    c6fc:	mvn.w	r6, #96	; 0x60
    c700:	strb.w	r6, [r4, #3620]	; 0xe24
      _b = b;
    c704:	mvn.w	r6, #103	; 0x67
    c708:	strb.w	r6, [r4, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c70c:	mov.w	r6, #104	; 0x68
      _b = b;
    c710:	strb.w	r5, [r4, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c714:	strb.w	r6, [r4, #3668]	; 0xe54
      _b = b;
    c718:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c71c:	str.w	r2, [r4, #3664]	; 0xe50
      _s = s;
      _b = b;
    c720:	strb.w	r6, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c724:	mov.w	r6, #358	; 0x166
    c728:	str.w	r8, [r4, #3712]	; 0xe80
    c72c:	str.w	r6, [r4, #3672]	; 0xe58
      _s = s;
    c730:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c734:	str.w	r8, [r4, #3736]	; 0xe98
      _s = s;
    c738:	strb.w	r6, [r4, #3676]	; 0xe5c
      _b = b;
    c73c:	mvn.w	r6, #42	; 0x2a
    c740:	strb.w	r6, [r4, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c744:	movw	r6, #355	; 0x163
    c748:	str.w	r6, [r4, #3680]	; 0xe60
      _s = s;
    c74c:	mvn.w	r6, #2
    c750:	strb.w	r6, [r4, #3684]	; 0xe64
      _b = b;
    c754:	mvn.w	r6, #31
    c758:	strb.w	r6, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c75c:	movw	r6, #357	; 0x165
    c760:	mov	r7, r6
    c762:	str.w	r6, [r4, #3688]	; 0xe68
      _s = s;
    c766:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c76a:	str.w	r7, [r4, #3696]	; 0xe70
      _s = s;
    c76e:	strb.w	r6, [r4, #3692]	; 0xe6c
      _b = b;
    c772:	mvn.w	r6, #75	; 0x4b
    c776:	strb.w	r6, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c77a:	mov.w	r6, #4294967295
    c77e:	strb.w	r6, [r4, #3700]	; 0xe74
      _b = b;
    c782:	mvn.w	r6, #102	; 0x66
    c786:	strb.w	r6, [r4, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c78a:	movw	r6, #355	; 0x163
    c78e:	str.w	r6, [r4, #3704]	; 0xe78
      _s = s;
    c792:	mov.w	r6, #4294967295
    c796:	strb.w	r6, [r4, #3708]	; 0xe7c
      _b = b;
    c79a:	mvn.w	r6, #76	; 0x4c
    c79e:	strb.w	r6, [r4, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c7a2:	mvn.w	r6, #49	; 0x31
    c7a6:	strb.w	r6, [r4, #3716]	; 0xe84
      _b = b;
    c7aa:	mvn.w	r6, #8
    c7ae:	strb.w	r6, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c7b2:	movs	r6, #9
    c7b4:	str.w	r6, [r4, #3720]	; 0xe88
      _s = s;
    c7b8:	mvn.w	r6, #74	; 0x4a
    c7bc:	strb.w	r6, [r4, #3724]	; 0xe8c
      _b = b;
    c7c0:	mvn.w	r6, #10
    c7c4:	strb.w	r6, [r4, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c7c8:	movw	r6, #355	; 0x163
    c7cc:	str.w	r6, [r4, #3728]	; 0xe90
      _s = s;
    c7d0:	mov.w	r6, #4294967295
    c7d4:	strb.w	r6, [r4, #3732]	; 0xe94
      _b = b;
    c7d8:	mvn.w	r6, #33	; 0x21
    c7dc:	strb.w	r6, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c7e0:	mvn.w	r6, #31
    c7e4:	strb.w	r6, [r4, #3740]	; 0xe9c
      _b = b;
    c7e8:	mvn.w	r6, #6
    c7ec:	strb.w	r6, [r4, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c7f0:	movs	r6, #5
    c7f2:	str.w	r6, [r4, #3744]	; 0xea0
      _s = s;
    c7f6:	mvn.w	r6, #32
    c7fa:	strb.w	r6, [r4, #3748]	; 0xea4
    c7fe:	mvn.w	r6, #67	; 0x43
      _b = b;
    c802:	strb.w	lr, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c806:	strb.w	r6, [r4, #3796]	; 0xed4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c80a:	movs	r6, #2
    c80c:	str.w	ip, [r4, #3760]	; 0xeb0
    c810:	str.w	r6, [r4, #3752]	; 0xea8
      _s = s;
    c814:	mvn.w	r6, #28
    c818:	strb.w	lr, [r4, #3780]	; 0xec4
    c81c:	strb.w	r6, [r4, #3756]	; 0xeac
      _b = b;
    c820:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c824:	str.w	r5, [r4, #3816]	; 0xee8
      _s = s;
      _b = b;
    c828:	strb.w	r6, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c82c:	mvn.w	r6, #11
    c830:	strb.w	r5, [r4, #3820]	; 0xeec
    c834:	strb.w	r6, [r4, #3764]	; 0xeb4
      _b = b;
    c838:	mvn.w	r6, #36	; 0x24
    c83c:	strb.w	r5, [r4, #3821]	; 0xeed
    c840:	strb.w	r6, [r4, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c844:	mov.w	r6, #354	; 0x162
    c848:	str.w	r5, [r4, #3824]	; 0xef0
    c84c:	mov	r7, r6
    c84e:	str.w	r6, [r4, #3768]	; 0xeb8
      _s = s;
    c852:	mov.w	r6, #4294967295
    c856:	strb.w	r5, [r4, #3828]	; 0xef4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c85a:	str.w	r7, [r4, #3776]	; 0xec0
      _s = s;
    c85e:	strb.w	r6, [r4, #3772]	; 0xebc
      _b = b;
    c862:	mvn.w	r6, #37	; 0x25
    c866:	strb.w	r5, [r4, #3829]	; 0xef5
    c86a:	strb.w	r6, [r4, #3773]	; 0xebd
    c86e:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c872:	str.w	r5, [r4, #3832]	; 0xef8
      _s = s;
      _b = b;
    c876:	strb.w	r6, [r4, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c87a:	movs	r6, #7
      _s = s;
    c87c:	strb.w	r5, [r4, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c880:	str.w	r6, [r4, #3784]	; 0xec8
      _s = s;
    c884:	mvn.w	r6, #19
    c888:	strb.w	r6, [r4, #3788]	; 0xecc
      _b = b;
    c88c:	mvn.w	r6, #34	; 0x22
    c890:	strb.w	r6, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c894:	movs	r6, #21
    c896:	str.w	r6, [r4, #3792]	; 0xed0
      _s = s;
      _b = b;
    c89a:	mvn.w	r6, #6
    c89e:	strb.w	r6, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8a2:	movs	r6, #22
    c8a4:	str.w	r6, [r4, #3800]	; 0xed8
      _s = s;
    c8a8:	mvn.w	r6, #11
    c8ac:	strb.w	r6, [r4, #3804]	; 0xedc
      _b = b;
    c8b0:	mvn.w	r6, #60	; 0x3c
    c8b4:	strb.w	r6, [r4, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8b8:	movs	r6, #10
    c8ba:	str.w	r6, [r4, #3808]	; 0xee0
      _s = s;
    c8be:	mov.w	r6, #4294967295
    c8c2:	strb.w	r6, [r4, #3812]	; 0xee4
      _b = b;
    c8c6:	mov.w	r6, #22
    c8ca:	strb.w	r6, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c8ce:	mov.w	r6, #110	; 0x6e
      _b = b;
    c8d2:	strb.w	r5, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c8d6:	strb.w	r6, [r4, #3908]	; 0xf44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8da:	mov.w	r6, #358	; 0x166
    c8de:	str.w	ip, [r4, #3896]	; 0xf38
    c8e2:	str.w	r6, [r4, #3864]	; 0xf18
      _s = s;
      _b = b;
    c8e6:	mov.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8ea:	str.w	r5, [r4, #3840]	; 0xf00
      _s = s;
      _b = b;
    c8ee:	strb.w	r6, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8f2:	movs	r6, #5
      _s = s;
    c8f4:	strb.w	r5, [r4, #3844]	; 0xf04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c8f8:	str.w	r6, [r4, #3872]	; 0xf20
      _s = s;
    c8fc:	mvn.w	r6, #47	; 0x2f
      _b = b;
    c900:	strb.w	r5, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c904:	strb.w	r6, [r4, #3876]	; 0xf24
      _b = b;
    c908:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c90c:	str.w	r5, [r4, #3848]	; 0xf08
      _s = s;
      _b = b;
    c910:	strb.w	r6, [r4, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c914:	movs	r6, #3
      _s = s;
    c916:	strb.w	r5, [r4, #3852]	; 0xf0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c91a:	str.w	r6, [r4, #3880]	; 0xf28
      _s = s;
    c91e:	mvn.w	r6, #102	; 0x66
      _b = b;
    c922:	strb.w	r5, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c926:	strb.w	r6, [r4, #3884]	; 0xf2c
      _b = b;
    c92a:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c92e:	str.w	r5, [r4, #3856]	; 0xf10
      _s = s;
      _b = b;
    c932:	strb.w	r6, [r4, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c936:	movw	r6, #355	; 0x163
      _s = s;
    c93a:	strb.w	r5, [r4, #3860]	; 0xf14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c93e:	str.w	r6, [r4, #3888]	; 0xf30
      _s = s;
    c942:	mov.w	r6, #4294967295
      _b = b;
    c946:	strb.w	r5, [r4, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c94a:	strb.w	r6, [r4, #3892]	; 0xf34
      _b = b;
    c94e:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c952:	strb.w	fp, [r4, #3868]	; 0xf1c
      _b = b;
    c956:	strb.w	r6, [r4, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c95a:	mvn.w	r6, #9
    c95e:	strb.w	r6, [r4, #3900]	; 0xf3c
      _b = b;
    c962:	mvn.w	r6, #27
    c966:	strb.w	r6, [r4, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c96a:	movs	r6, #13
    c96c:	str.w	r6, [r4, #3904]	; 0xf40
      _s = s;
      _b = b;
    c970:	mov.w	r6, #4294967295
    c974:	strb.w	r6, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c978:	movs	r6, #7
    c97a:	str.w	r6, [r4, #3912]	; 0xf48
      _s = s;
    c97e:	mvn.w	r6, #46	; 0x2e
    c982:	strb.w	r6, [r4, #3916]	; 0xf4c
      _b = b;
    c986:	mvn.w	r6, #11
    c98a:	strb.w	r6, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c98e:	mov.w	r6, #354	; 0x162
    c992:	str.w	r6, [r4, #3920]	; 0xf50
      _s = s;
    c996:	mov.w	r6, #4294967295
    c99a:	strb.w	r6, [r4, #3924]	; 0xf54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c99e:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    c9a2:	strb.w	sl, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c9a6:	str.w	r6, [r4, #3928]	; 0xf58
      _s = s;
    c9aa:	mvn.w	r6, #5
      _b = b;
    c9ae:	strb.w	r9, [r4, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c9b2:	strb.w	r6, [r4, #3932]	; 0xf5c
      _b = b;
    c9b6:	mvn.w	r6, #26
    c9ba:	strb.w	r9, [r4, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c9be:	mvn.w	r9, #115	; 0x73
      _b = b;
    c9c2:	strb.w	r6, [r4, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c9c6:	mov.w	r6, #354	; 0x162
      _s = s;
    c9ca:	strb.w	fp, [r4, #4004]	; 0xfa4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c9ce:	mov	r7, r6
    c9d0:	str.w	r6, [r4, #3936]	; 0xf60
      _s = s;
    c9d4:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    c9d8:	str.w	r5, [r4, #4008]	; 0xfa8
    c9dc:	str.w	r7, [r4, #3952]	; 0xf70
    c9e0:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
    c9e4:	strb.w	r6, [r4, #3940]	; 0xf64
      _b = b;
    c9e8:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c9ec:	strb.w	r5, [r4, #4012]	; 0xfac
      _b = b;
    c9f0:	strb.w	r6, [r4, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    c9f4:	mov.w	r6, #4294967295
    c9f8:	strb.w	r6, [r4, #3948]	; 0xf6c
      _b = b;
    c9fc:	mvn.w	r6, #16
    ca00:	strb.w	r6, [r4, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ca04:	mov.w	r6, #4294967295
    ca08:	strb.w	r6, [r4, #3956]	; 0xf74
      _b = b;
    ca0c:	mvn.w	r6, #69	; 0x45
    ca10:	strb.w	r6, [r4, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca14:	movw	r6, #357	; 0x165
    ca18:	str.w	r6, [r4, #3960]	; 0xf78
      _s = s;
    ca1c:	mvn.w	r6, #18
    ca20:	strb.w	r6, [r4, #3964]	; 0xf7c
      _b = b;
    ca24:	mvn.w	r6, #19
    ca28:	strb.w	r6, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca2c:	movs	r6, #1
    ca2e:	str.w	r6, [r4, #3968]	; 0xf80
      _s = s;
    ca32:	mvn.w	r6, #29
    ca36:	strb.w	r6, [r4, #3972]	; 0xf84
      _b = b;
    ca3a:	mvn.w	r6, #10
    ca3e:	strb.w	r6, [r4, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca42:	movs	r6, #13
    ca44:	str.w	r6, [r4, #3976]	; 0xf88
      _s = s;
    ca48:	mvn.w	r6, #35	; 0x23
    ca4c:	strb.w	r6, [r4, #3980]	; 0xf8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca50:	movs	r6, #10
    ca52:	str.w	r6, [r4, #3984]	; 0xf90
      _s = s;
    ca56:	mvn.w	r6, #22
    ca5a:	strb.w	r6, [r4, #3988]	; 0xf94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca5e:	movs	r6, #14
    ca60:	str.w	r6, [r4, #3992]	; 0xf98
      _s = s;
    ca64:	mvn.w	r6, #19
    ca68:	strb.w	r6, [r4, #3996]	; 0xf9c
      _b = b;
    ca6c:	mvn.w	r6, #6
    ca70:	strb.w	r6, [r4, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca74:	movs	r6, #16
    ca76:	str.w	r6, [r4, #4000]	; 0xfa0
      _s = s;
      _b = b;
    ca7a:	mvn.w	r6, #110	; 0x6e
    ca7e:	strb.w	r6, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca82:	movw	r6, #353	; 0x161
    ca86:	str.w	r6, [r4, #3944]	; 0xf68
      _s = s;
    ca8a:	movw	r6, #4100	; 0x1004
      _b = b;
    ca8e:	strb.w	r5, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ca92:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca96:	mov.w	r6, #358	; 0x166
      _s = s;
      _b = b;
    ca9a:	mvn.w	r9, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ca9e:	str.w	r5, [r4, #4016]	; 0xfb0
    caa2:	str.w	r6, [r4, #4072]	; 0xfe8
      _s = s;
    caa6:	mvn.w	r6, #7
    caaa:	strb.w	r5, [r4, #4020]	; 0xfb4
    caae:	strb.w	r6, [r4, #4076]	; 0xfec
      _b = b;
    cab2:	mov.w	r6, #123	; 0x7b
    cab6:	strb.w	r5, [r4, #4021]	; 0xfb5
    caba:	strb.w	r6, [r4, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cabe:	movw	r6, #357	; 0x165
    cac2:	str.w	r5, [r4, #4024]	; 0xfb8
    cac6:	str.w	r6, [r4, #4080]	; 0xff0
      _s = s;
    caca:	mvn.w	r6, #16
    cace:	strb.w	r5, [r4, #4028]	; 0xfbc
    cad2:	strb.w	r6, [r4, #4084]	; 0xff4
      _b = b;
    cad6:	mvn.w	r6, #27
    cada:	strb.w	r5, [r4, #4029]	; 0xfbd
    cade:	strb.w	r6, [r4, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cae2:	movs	r6, #17
    cae4:	str.w	r5, [r4, #4032]	; 0xfc0
    cae8:	str.w	r6, [r4, #4088]	; 0xff8
      _s = s;
    caec:	mvn.w	r6, #23
    caf0:	strb.w	r5, [r4, #4036]	; 0xfc4
    caf4:	strb.w	r6, [r4, #4092]	; 0xffc
      _b = b;
    caf8:	mvn.w	r6, #16
    cafc:	strb.w	r5, [r4, #4037]	; 0xfc5
    cb00:	strb.w	r6, [r4, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb04:	mov	r6, r7
    cb06:	movs	r7, #22
    cb08:	str.w	r5, [r4, #4040]	; 0xfc8
      _s = s;
    cb0c:	strb.w	r5, [r4, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb10:	str.w	r7, [r6], #32
    cb14:	mov	r7, r6
      _s = s;
      _b = b;
    cb16:	movw	r6, #4101	; 0x1005
    cb1a:	strb.w	r5, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb1e:	str.w	r5, [r4, #4048]	; 0xfd0
      _s = s;
    cb22:	strb.w	r5, [r4, #4052]	; 0xfd4
      _b = b;
    cb26:	strb.w	r5, [r4, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb2a:	str.w	r5, [r4, #4056]	; 0xfd8
      _s = s;
    cb2e:	strb.w	r5, [r4, #4060]	; 0xfdc
      _b = b;
    cb32:	strb.w	r5, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb36:	str.w	r5, [r4, #4064]	; 0xfe0
      _s = s;
    cb3a:	strb.w	r5, [r4, #4068]	; 0xfe4
      _b = b;
    cb3e:	strb.w	r5, [r4, #4069]	; 0xfe5
    cb42:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb46:	mov.w	r6, #354	; 0x162
    cb4a:	str.w	ip, [r7]
    cb4e:	add.w	r7, r4, #4096	; 0x1000
    cb52:	str	r6, [r7, #64]	; 0x40
    cb54:	movw	r7, #4104	; 0x1008
    cb58:	movs	r6, #7
    cb5a:	str	r6, [r4, r7]
    cb5c:	movw	r7, #4120	; 0x1018
    cb60:	mov.w	r6, #354	; 0x162
    cb64:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cb66:	movw	r6, #4133	; 0x1025
    cb6a:	mvn.w	r7, #13
    cb6e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb70:	movw	r7, #4136	; 0x1028
    cb74:	movs	r6, #1
    cb76:	str	r6, [r4, r7]
    cb78:	movw	r7, #4144	; 0x1030
    cb7c:	movw	r6, #357	; 0x165
    cb80:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cb82:	movw	r6, #4165	; 0x1045
    cb86:	mvn.w	r7, #20
    cb8a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cb8c:	movw	r7, #4168	; 0x1048
    cb90:	movs	r6, #4
    cb92:	str	r6, [r4, r7]
    cb94:	movw	r7, #4176	; 0x1050
    cb98:	movs	r6, #7
    cb9a:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cb9c:	mvn.w	r7, #20
    cba0:	movw	r6, #4181	; 0x1055
    cba4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cba6:	movw	r6, #4184	; 0x1058
    cbaa:	str.w	r8, [r4, r6]
      _s = s;
    cbae:	movw	r6, #4188	; 0x105c
    cbb2:	strb	r7, [r4, r6]
      _b = b;
    cbb4:	movw	r6, #4125	; 0x101d
    cbb8:	mvn.w	r7, #44	; 0x2c
    cbbc:	strb	r7, [r4, r6]
    cbbe:	movw	r6, #4157	; 0x103d
    cbc2:	mvn.w	r7, #41	; 0x29
    cbc6:	strb	r7, [r4, r6]
    cbc8:	movw	r6, #4141	; 0x102d
    cbcc:	mvn.w	r7, #6
    cbd0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cbd2:	movw	r6, #4116	; 0x1014
    cbd6:	mvn.w	r7, #24
    cbda:	strb	r7, [r4, r6]
    cbdc:	movw	r6, #4180	; 0x1054
    cbe0:	mvn.w	r7, #28
    cbe4:	strb	r7, [r4, r6]
    cbe6:	movw	r6, #4108	; 0x100c
    cbea:	mvn.w	r7, #25
    cbee:	strb	r7, [r4, r6]
    cbf0:	movw	r6, #4148	; 0x1034
    cbf4:	mvn.w	r7, #55	; 0x37
    cbf8:	strb	r7, [r4, r6]
      _b = b;
    cbfa:	movw	r6, #4117	; 0x1015
    cbfe:	mvn.w	r7, #23
    cc02:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cc04:	movw	r6, #4156	; 0x103c
    cc08:	mov.w	r7, #83	; 0x53
    cc0c:	strb	r7, [r4, r6]
      _b = b;
    cc0e:	movw	r6, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cc12:	mvn.w	r7, #90	; 0x5a
      _b = b;
    cc16:	strb.w	fp, [r4, r6]
    cc1a:	movw	r6, #4173	; 0x104d
    cc1e:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cc22:	movw	r6, #4172	; 0x104c
    cc26:	strb	r7, [r4, r6]
    cc28:	movw	r6, #4124	; 0x101c
    cc2c:	mov.w	r7, #4294967295
    cc30:	strb	r7, [r4, r6]
    cc32:	movw	r6, #4164	; 0x1044
    cc36:	mov.w	r7, #115	; 0x73
    cc3a:	strb	r7, [r4, r6]
    cc3c:	movw	r6, #4140	; 0x102c
    cc40:	mvn.w	r7, #46	; 0x2e
    cc44:	strb	r7, [r4, r6]
      _b = b;
    cc46:	movw	r6, #4149	; 0x1035
    cc4a:	mvn.w	r7, #63	; 0x3f
    cc4e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cc50:	movw	r6, #4132	; 0x1024
    cc54:	mvn.w	r7, #17
    cc58:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cc5a:	movw	r6, #4112	; 0x1010
    cc5e:	movw	r7, #4152	; 0x1038
    cc62:	str	r5, [r4, r6]
    cc64:	mov.w	r6, #342	; 0x156
    cc68:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cc6a:	movw	r6, #4189	; 0x105d
    cc6e:	mvn.w	r7, #19
    cc72:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cc74:	add.w	r6, r4, #4096	; 0x1000
      _s = s;
    cc78:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cc7c:	str.w	r8, [r6, #96]	; 0x60
      _s = s;
    cc80:	movw	r6, #4196	; 0x1064
    cc84:	strb	r7, [r4, r6]
      _b = b;
    cc86:	movw	r6, #4197	; 0x1065
    cc8a:	mov.w	r7, #106	; 0x6a
    cc8e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cc90:	movw	r6, #4200	; 0x1068
    cc94:	movw	r7, #4280	; 0x10b8
    cc98:	str	r5, [r4, r6]
      _s = s;
    cc9a:	movw	r6, #4204	; 0x106c
    cc9e:	strb	r5, [r4, r6]
      _b = b;
    cca0:	movw	r6, #4205	; 0x106d
    cca4:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cca6:	movw	r6, #4208	; 0x1070
    ccaa:	str	r5, [r4, r6]
      _s = s;
    ccac:	movw	r6, #4212	; 0x1074
    ccb0:	strb	r5, [r4, r6]
      _b = b;
    ccb2:	movw	r6, #4213	; 0x1075
    ccb6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ccb8:	movw	r6, #4216	; 0x1078
    ccbc:	str	r5, [r4, r6]
      _s = s;
    ccbe:	movw	r6, #4220	; 0x107c
    ccc2:	strb	r5, [r4, r6]
      _b = b;
    ccc4:	movw	r6, #4221	; 0x107d
    ccc8:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ccca:	movw	r6, #4228	; 0x1084
    ccce:	strb	r5, [r4, r6]
      _b = b;
    ccd0:	movw	r6, #4229	; 0x1085
    ccd4:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ccd6:	movw	r6, #4232	; 0x1088
    ccda:	str	r5, [r4, r6]
      _s = s;
    ccdc:	movw	r6, #4236	; 0x108c
    cce0:	strb	r5, [r4, r6]
      _b = b;
    cce2:	movw	r6, #4237	; 0x108d
    cce6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cce8:	movw	r6, #4240	; 0x1090
    ccec:	str	r5, [r4, r6]
      _s = s;
    ccee:	movw	r6, #4244	; 0x1094
    ccf2:	strb	r5, [r4, r6]
      _b = b;
    ccf4:	movw	r6, #4245	; 0x1095
    ccf8:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ccfa:	movw	r6, #4248	; 0x1098
    ccfe:	str	r5, [r4, r6]
      _s = s;
    cd00:	movw	r6, #4252	; 0x109c
    cd04:	strb	r5, [r4, r6]
      _b = b;
    cd06:	movw	r6, #4253	; 0x109d
    cd0a:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cd0c:	movw	r6, #4260	; 0x10a4
    cd10:	strb	r5, [r4, r6]
      _b = b;
    cd12:	movw	r6, #4261	; 0x10a5
    cd16:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cd18:	movw	r6, #4264	; 0x10a8
    cd1c:	str	r5, [r4, r6]
      _s = s;
    cd1e:	movw	r6, #4268	; 0x10ac
    cd22:	strb	r5, [r4, r6]
      _b = b;
    cd24:	movw	r6, #4269	; 0x10ad
    cd28:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cd2a:	movw	r6, #4272	; 0x10b0
    cd2e:	str	r5, [r4, r6]
      _s = s;
    cd30:	movw	r6, #4276	; 0x10b4
    cd34:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cd36:	add.w	r6, r4, #4224	; 0x1080
    cd3a:	str	r5, [r6, #0]
    cd3c:	str	r5, [r6, #32]
      _s = s;
      _b = b;
    cd3e:	movw	r6, #4277	; 0x10b5
    cd42:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cd44:	add.w	r6, r4, #4096	; 0x1000
    cd48:	str.w	r8, [r6, #224]	; 0xe0
    cd4c:	movs	r6, #28
    cd4e:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cd50:	movw	r6, #4293	; 0x10c5
    cd54:	mvn.w	r7, #109	; 0x6d
    cd58:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cd5a:	movw	r6, #4308	; 0x10d4
    cd5e:	mov.w	r7, #70	; 0x46
    cd62:	strb	r7, [r4, r6]
    cd64:	movw	r6, #4316	; 0x10dc
    cd68:	mov.w	r7, #46	; 0x2e
    cd6c:	strb	r7, [r4, r6]
    cd6e:	movw	r6, #4340	; 0x10f4
    cd72:	mov.w	r7, #76	; 0x4c
    cd76:	strb	r7, [r4, r6]
      _b = b;
    cd78:	movw	r6, #4341	; 0x10f5
    cd7c:	mvn.w	r7, #109	; 0x6d
    cd80:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cd82:	movw	r7, #4344	; 0x10f8
    cd86:	movs	r6, #181	; 0xb5
    cd88:	str	r6, [r4, r7]
    cd8a:	add.w	r6, r4, #4096	; 0x1000
    cd8e:	mov.w	r7, #342	; 0x156
    cd92:	str.w	r7, [r6, #256]	; 0x100
    cd96:	movw	r7, #4360	; 0x1108
    cd9a:	mov.w	r6, #342	; 0x156
    cd9e:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    cda0:	movw	r6, #4309	; 0x10d5
    cda4:	mvn.w	r7, #41	; 0x29
    cda8:	strb	r7, [r4, r6]
    cdaa:	movw	r6, #4285	; 0x10bd
    cdae:	mvn.w	r7, #114	; 0x72
    cdb2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cdb4:	movw	r6, #4292	; 0x10c4
    cdb8:	mvn.w	r7, #119	; 0x77
    cdbc:	strb	r7, [r4, r6]
    cdbe:	movw	r6, #4300	; 0x10cc
    cdc2:	mov.w	r7, #103	; 0x67
    cdc6:	strb	r7, [r4, r6]
      _b = b;
    cdc8:	movw	r6, #4325	; 0x10e5
    cdcc:	mvn.w	r7, #116	; 0x74
    cdd0:	strb	r7, [r4, r6]
    cdd2:	movw	r6, #4357	; 0x1105
    cdd6:	mov.w	r7, #71	; 0x47
    cdda:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cddc:	add.w	r6, r4, #4096	; 0x1000
    cde0:	movs	r7, #112	; 0x70
    cde2:	str.w	r7, [r6, #192]	; 0xc0
      _s = s;
      _b = b;
    cde6:	movw	r6, #4317	; 0x10dd
    cdea:	mvn.w	r7, #75	; 0x4b
    cdee:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cdf0:	movw	r6, #4324	; 0x10e4
    cdf4:	mov.w	r7, #102	; 0x66
    cdf8:	strb	r7, [r4, r6]
    cdfa:	movw	r6, #4356	; 0x1104
    cdfe:	mov.w	r7, #75	; 0x4b
    ce02:	strb	r7, [r4, r6]
      _b = b;
    ce04:	movw	r6, #4349	; 0x10fd
    ce08:	mov.w	r7, #73	; 0x49
    ce0c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ce0e:	movw	r6, #4284	; 0x10bc
    ce12:	mvn.w	r7, #71	; 0x47
    ce16:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ce18:	movw	r7, #4296	; 0x10c8
    ce1c:	movs	r6, #100	; 0x64
    ce1e:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    ce20:	movw	r6, #4301	; 0x10cd
    ce24:	mvn.w	r7, #55	; 0x37
    ce28:	strb	r7, [r4, r6]
    ce2a:	movw	r6, #4333	; 0x10ed
    ce2e:	mvn.w	r7, #96	; 0x60
    ce32:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ce34:	movw	r6, #4332	; 0x10ec
    ce38:	mov.w	r7, #83	; 0x53
    ce3c:	strb	r7, [r4, r6]
    ce3e:	movw	r6, #4348	; 0x10fc
    ce42:	mvn.w	r7, #77	; 0x4d
    ce46:	strb.w	fp, [r4, r6]
    ce4a:	movw	r6, #4364	; 0x110c
    ce4e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ce50:	movw	r7, #4304	; 0x10d0
    ce54:	movs	r6, #151	; 0x97
    ce56:	str	r6, [r4, r7]
    ce58:	movw	r7, #4312	; 0x10d8
    ce5c:	movs	r6, #138	; 0x8a
    ce5e:	str	r6, [r4, r7]
    ce60:	movw	r7, #4336	; 0x10f0
    ce64:	movs	r6, #207	; 0xcf
    ce66:	str	r6, [r4, r7]
    ce68:	movw	r7, #4328	; 0x10e8
    ce6c:	mov.w	r6, #268	; 0x10c
    ce70:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    ce72:	movw	r6, #4365	; 0x110d
    ce76:	mov.w	r7, #83	; 0x53
    ce7a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ce7c:	movw	r7, #4368	; 0x1110
    ce80:	movs	r6, #7
    ce82:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    ce84:	movw	r6, #4373	; 0x1115
    ce88:	mvn.w	r7, #60	; 0x3c
    ce8c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ce8e:	movw	r6, #4372	; 0x1114
    ce92:	mvn.w	r7, #44	; 0x2c
    ce96:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ce98:	movw	r7, #4376	; 0x1118
    ce9c:	movs	r6, #5
    ce9e:	str	r6, [r4, r7]
      _s = s;
    cea0:	movw	r6, #4380	; 0x111c
    cea4:	mvn.w	r7, #24
    cea8:	strb	r7, [r4, r6]
      _b = b;
    ceaa:	movw	r6, #4381	; 0x111d
    ceae:	mvn.w	r7, #89	; 0x59
    ceb2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ceb4:	movw	r6, #4388	; 0x1124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ceb8:	movw	r7, #4488	; 0x1188
      _s = s;
    cebc:	strb	r5, [r4, r6]
      _b = b;
    cebe:	movw	r6, #4389	; 0x1125
    cec2:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cec4:	movw	r6, #4392	; 0x1128
    cec8:	str	r5, [r4, r6]
      _s = s;
    ceca:	movw	r6, #4396	; 0x112c
    cece:	strb	r5, [r4, r6]
      _b = b;
    ced0:	movw	r6, #4397	; 0x112d
    ced4:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ced6:	movw	r6, #4400	; 0x1130
    ceda:	str	r5, [r4, r6]
      _s = s;
    cedc:	movw	r6, #4404	; 0x1134
    cee0:	strb	r5, [r4, r6]
      _b = b;
    cee2:	movw	r6, #4405	; 0x1135
    cee6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cee8:	movw	r6, #4408	; 0x1138
    ceec:	str	r5, [r4, r6]
      _s = s;
    ceee:	movw	r6, #4412	; 0x113c
    cef2:	strb	r5, [r4, r6]
      _b = b;
    cef4:	movw	r6, #4413	; 0x113d
    cef8:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cefa:	movw	r6, #4420	; 0x1144
    cefe:	strb	r5, [r4, r6]
      _b = b;
    cf00:	movw	r6, #4421	; 0x1145
    cf04:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cf06:	movw	r6, #4424	; 0x1148
    cf0a:	str	r5, [r4, r6]
      _s = s;
    cf0c:	movw	r6, #4428	; 0x114c
    cf10:	strb	r5, [r4, r6]
      _b = b;
    cf12:	movw	r6, #4429	; 0x114d
    cf16:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cf18:	movw	r6, #4432	; 0x1150
    cf1c:	str	r5, [r4, r6]
      _s = s;
    cf1e:	movw	r6, #4436	; 0x1154
    cf22:	strb	r5, [r4, r6]
      _b = b;
    cf24:	movw	r6, #4437	; 0x1155
    cf28:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cf2a:	movw	r6, #4440	; 0x1158
    cf2e:	str	r5, [r4, r6]
      _s = s;
    cf30:	movw	r6, #4444	; 0x115c
    cf34:	strb	r5, [r4, r6]
      _b = b;
    cf36:	movw	r6, #4445	; 0x115d
    cf3a:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cf3c:	movw	r6, #4452	; 0x1164
    cf40:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cf42:	add.w	r6, r4, #4384	; 0x1120
    cf46:	str	r5, [r6, #0]
    cf48:	str	r5, [r6, #32]
    cf4a:	str	r5, [r6, #64]	; 0x40
      _s = s;
      _b = b;
    cf4c:	movw	r6, #4453	; 0x1165
    cf50:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cf52:	movs	r6, #150	; 0x96
    cf54:	str	r6, [r4, r7]
      _s = s;
    cf56:	movw	r6, #4492	; 0x118c
    cf5a:	mov.w	r7, #91	; 0x5b
    cf5e:	strb	r7, [r4, r6]
      _b = b;
    cf60:	movw	r6, #4517	; 0x11a5
    cf64:	mvn.w	r7, #105	; 0x69
    cf68:	strb	r7, [r4, r6]
    cf6a:	movw	r6, #4525	; 0x11ad
    cf6e:	mvn.w	r7, #120	; 0x78
    cf72:	strb	r7, [r4, r6]
    cf74:	movw	r6, #4533	; 0x11b5
    cf78:	mvn.w	r7, #79	; 0x4f
    cf7c:	strb	r7, [r4, r6]
    cf7e:	movw	r6, #4509	; 0x119d
    cf82:	mvn.w	r7, #27
    cf86:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cf88:	movw	r6, #4540	; 0x11bc
    cf8c:	mvn.w	r7, #16
    cf90:	strb	r7, [r4, r6]
      _b = b;
    cf92:	movw	r6, #4493	; 0x118d
    cf96:	mov.w	r7, #112	; 0x70
    cf9a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    cf9c:	movw	r6, #4500	; 0x1194
    cfa0:	mvn.w	r7, #127	; 0x7f
    cfa4:	strb	r7, [r4, r6]
      _b = b;
    cfa6:	movw	r6, #4501	; 0x1195
    cfaa:	mvn.w	r7, #65	; 0x41
    cfae:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cfb0:	movw	r7, #4520	; 0x11a8
    cfb4:	movs	r6, #180	; 0xb4
    cfb6:	str	r6, [r4, r7]
      _s = s;
    cfb8:	movw	r6, #4508	; 0x119c
    cfbc:	mvn.w	r7, #122	; 0x7a
    cfc0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cfc2:	movw	r7, #4536	; 0x11b8
    cfc6:	movs	r6, #166	; 0xa6
    cfc8:	str	r6, [r4, r7]
      _s = s;
    cfca:	movw	r6, #4532	; 0x11b4
    cfce:	mvn.w	r7, #2
    cfd2:	strb	r7, [r4, r6]
    cfd4:	mov.w	r7, #4294967295
    cfd8:	movw	r6, #4516	; 0x11a4
    cfdc:	strb	r7, [r4, r6]
    cfde:	movw	r6, #4524	; 0x11ac
    cfe2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    cfe4:	add.w	r6, r4, #4096	; 0x1000
    cfe8:	movs	r7, #183	; 0xb7
    cfea:	str.w	r7, [r6, #416]	; 0x1a0
    cfee:	movw	r7, #4528	; 0x11b0
    cff2:	movs	r6, #171	; 0xab
    cff4:	str	r6, [r4, r7]
    cff6:	movs	r6, #174	; 0xae
    cff8:	movw	r7, #4496	; 0x1190
    cffc:	str	r6, [r4, r7]
    cffe:	movw	r7, #4504	; 0x1198
    d002:	str	r6, [r4, r7]
    d004:	movw	r6, #4456	; 0x1168
      _s = s;
      _b = b;
    d008:	mvn.w	r7, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d00c:	str	r5, [r4, r6]
      _s = s;
    d00e:	movw	r6, #4460	; 0x116c
    d012:	strb	r5, [r4, r6]
      _b = b;
    d014:	movw	r6, #4461	; 0x116d
    d018:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d01a:	movw	r6, #4464	; 0x1170
    d01e:	str	r5, [r4, r6]
      _s = s;
    d020:	movw	r6, #4468	; 0x1174
    d024:	strb	r5, [r4, r6]
      _b = b;
    d026:	movw	r6, #4469	; 0x1175
    d02a:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d02c:	movw	r6, #4472	; 0x1178
    d030:	str	r5, [r4, r6]
      _s = s;
    d032:	movw	r6, #4476	; 0x117c
    d036:	strb	r5, [r4, r6]
      _b = b;
    d038:	movw	r6, #4477	; 0x117d
    d03c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    d03e:	movw	r6, #4484	; 0x1184
    d042:	strb	r5, [r4, r6]
      _b = b;
    d044:	movw	r6, #4485	; 0x1185
    d048:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d04a:	add.w	r6, r4, #4480	; 0x1180
    d04e:	str	r5, [r6, #0]
      _s = s;
      _b = b;
    d050:	movw	r6, #4541	; 0x11bd
    d054:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    d056:	movw	r6, #4564	; 0x11d4
    d05a:	mvn.w	r7, #47	; 0x2f
    d05e:	strb	r7, [r4, r6]
      _b = b;
    d060:	movw	r6, #4549	; 0x11c5
    d064:	mvn.w	r7, #44	; 0x2c
    d068:	strb	r7, [r4, r6]
    d06a:	movw	r6, #4557	; 0x11cd
    d06e:	mov.w	r7, #84	; 0x54
    d072:	strb	r7, [r4, r6]
    d074:	movw	r6, #4565	; 0x11d5
    d078:	mov.w	r7, #94	; 0x5e
    d07c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d07e:	add.w	r6, r4, #4096	; 0x1000
    d082:	movs	r7, #166	; 0xa6
    d084:	str.w	r5, [r6, #480]	; 0x1e0
    d088:	str.w	r7, [r6, #448]	; 0x1c0
      _s = s;
    d08c:	movw	r6, #4548	; 0x11c4
    d090:	mvn.w	r7, #25
    d094:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d096:	movw	r7, #4560	; 0x11d0
    d09a:	movs	r6, #187	; 0xbb
    d09c:	str	r6, [r4, r7]
      _s = s;
    d09e:	movw	r6, #4556	; 0x11cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d0a2:	movw	r7, #4552	; 0x11c8
      _s = s;
    d0a6:	strb.w	fp, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d0aa:	movs	r6, #174	; 0xae
    d0ac:	str	r6, [r4, r7]
    d0ae:	movw	r6, #4568	; 0x11d8
    d0b2:	str	r5, [r4, r6]
      _s = s;
    d0b4:	movw	r6, #4572	; 0x11dc
    d0b8:	strb	r5, [r4, r6]
      _b = b;
    d0ba:	movw	r6, #4573	; 0x11dd
    d0be:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    d0c0:	movw	r6, #4580	; 0x11e4
    d0c4:	strb	r5, [r4, r6]
      _b = b;
    d0c6:	movw	r6, #4581	; 0x11e5
    d0ca:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d0cc:	movw	r6, #4584	; 0x11e8
    d0d0:	str	r5, [r4, r6]
      _s = s;
    d0d2:	movw	r6, #4588	; 0x11ec
    d0d6:	strb	r5, [r4, r6]
      _b = b;
    d0d8:	movw	r6, #4589	; 0x11ed
    d0dc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d0de:	movw	r6, #4592	; 0x11f0
    d0e2:	str	r5, [r4, r6]
      _s = s;
    d0e4:	movw	r6, #4596	; 0x11f4
    d0e8:	strb	r5, [r4, r6]
      _b = b;
    d0ea:	movw	r6, #4597	; 0x11f5
    d0ee:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    d0f0:	movw	r6, #4600	; 0x11f8
    d0f4:	str	r5, [r4, r6]
      _s = s;
    d0f6:	movw	r6, #4604	; 0x11fc
    d0fa:	strb	r5, [r4, r6]
      _b = b;
    d0fc:	movw	r6, #4605	; 0x11fd
    d100:	strb	r5, [r4, r6]
    d102:	bl	dd9c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    d106:	ldr	r2, [pc, #336]	; (d258 <_GLOBAL__sub_I_bri_level+0x5b88>)
    d108:	ldr	r1, [pc, #336]	; (d25c <_GLOBAL__sub_I_bri_level+0x5b8c>)
    d10a:	ldr	r0, [pc, #340]	; (d260 <_GLOBAL__sub_I_bri_level+0x5b90>)
    d10c:	bl	10840 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    d110:	movs	r3, #82	; 0x52
    d112:	movs	r2, #7
    d114:	mov.w	r1, #576	; 0x240
    d118:	ldr	r0, [pc, #328]	; (d264 <_GLOBAL__sub_I_bri_level+0x5b94>)
    d11a:	bl	dd9c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    d11e:	ldr	r2, [pc, #312]	; (d258 <_GLOBAL__sub_I_bri_level+0x5b88>)
    d120:	ldr	r1, [pc, #312]	; (d25c <_GLOBAL__sub_I_bri_level+0x5b8c>)
    d122:	ldr	r0, [pc, #320]	; (d264 <_GLOBAL__sub_I_bri_level+0x5b94>)
    d124:	bl	10840 <__aeabi_atexit>
#endif

//--------------------------------------------Screens

Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_A, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    d128:	movs	r3, #82	; 0x52
    d12a:	movs	r2, #2
    d12c:	movs	r1, #156	; 0x9c
    d12e:	ldr	r0, [pc, #312]	; (d268 <_GLOBAL__sub_I_bri_level+0x5b98>)
    d130:	bl	dd9c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    d134:	ldr	r2, [pc, #288]	; (d258 <_GLOBAL__sub_I_bri_level+0x5b88>)
    d136:	ldr	r1, [pc, #292]	; (d25c <_GLOBAL__sub_I_bri_level+0x5b8c>)
    d138:	ldr	r0, [pc, #300]	; (d268 <_GLOBAL__sub_I_bri_level+0x5b98>)
    d13a:	bl	10840 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_B, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    d13e:	movs	r3, #82	; 0x52
    d140:	movs	r2, #14
    d142:	movs	r1, #115	; 0x73
    d144:	ldr	r0, [pc, #292]	; (d26c <_GLOBAL__sub_I_bri_level+0x5b9c>)
    d146:	bl	dd9c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    d14a:	ldr	r2, [pc, #268]	; (d258 <_GLOBAL__sub_I_bri_level+0x5b88>)
    d14c:	ldr	r1, [pc, #268]	; (d25c <_GLOBAL__sub_I_bri_level+0x5b8c>)
    d14e:	ldr	r0, [pc, #284]	; (d26c <_GLOBAL__sub_I_bri_level+0x5b9c>)
    d150:	bl	10840 <__aeabi_atexit>
    d154:	ldr	r3, [pc, #280]	; (d270 <_GLOBAL__sub_I_bri_level+0x5ba0>)
    d156:	mov	r2, r5
    d158:	add.w	r1, r3, #440	; 0x1b8
    d15c:	strb.w	r2, [r3, #-20]
    d160:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    d162:	strb.w	r2, [r3, #-63]
		unsigned long startTime;
		float position;


Beam() {
	active = false;
    d166:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    d16a:	cmp	r3, r1
    d16c:	bne.n	d15c <_GLOBAL__sub_I_bri_level+0x5a8c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d16e:	ldr	r3, [pc, #260]	; (d274 <_GLOBAL__sub_I_bri_level+0x5ba4>)
    d170:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d172:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d174:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d176:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d178:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d17a:	ldr	r6, [pc, #248]	; (d274 <_GLOBAL__sub_I_bri_level+0x5ba4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d17c:	cmp	r3, r1
    d17e:	it	eq
    d180:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d182:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d184:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d186:	ite	eq
    d188:	moveq	r5, #1
    d18a:	movne	r5, #0
    d18c:	cmp	r5, #0
    d18e:	beq.n	d176 <_GLOBAL__sub_I_bri_level+0x5aa6>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    d190:	lsrs	r1, r3, #5
    d192:	ldr	r3, [pc, #228]	; (d278 <_GLOBAL__sub_I_bri_level+0x5ba8>)
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A; //= Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    d194:	ldr	r0, [pc, #228]	; (d27c <_GLOBAL__sub_I_bri_level+0x5bac>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d196:	mov	r4, r6
    d198:	orr.w	r1, r1, r2, lsl #27
    d19c:	vmov	s15, r1
    d1a0:	vldr	d5, [pc, #172]	; d250 <_GLOBAL__sub_I_bri_level+0x5b80>
    d1a4:	vcvt.f64.u32	d7, s15
    d1a8:	vdiv.f64	d6, d7, d5
    d1ac:	vcvt.u32.f64	s12, d6
    d1b0:	vstr	s12, [r3]
    d1b4:	bl	80 <Screen::Screen()>
Screen screen_B; //= Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    d1b8:	ldr	r0, [pc, #196]	; (d280 <_GLOBAL__sub_I_bri_level+0x5bb0>)
    d1ba:	bl	80 <Screen::Screen()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d1be:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    d1c0:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d1c2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d1c4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d1c6:	ldr	r6, [pc, #172]	; (d274 <_GLOBAL__sub_I_bri_level+0x5ba4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d1c8:	cmp	r3, r1
    d1ca:	it	eq
    d1cc:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d1ce:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d1d0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d1d2:	ite	eq
    d1d4:	moveq	r5, #1
    d1d6:	movne	r5, #0
    d1d8:	cmp	r5, #0
    d1da:	beq.n	d1c2 <_GLOBAL__sub_I_bri_level+0x5af2>
    d1dc:	lsrs	r1, r3, #5
    d1de:	ldr	r3, [pc, #164]	; (d284 <_GLOBAL__sub_I_bri_level+0x5bb4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d1e0:	mov	r5, r6
    d1e2:	orr.w	r1, r1, r2, lsl #27
    d1e6:	vmov	s15, r1
    d1ea:	vldr	d5, [pc, #100]	; d250 <_GLOBAL__sub_I_bri_level+0x5b80>
    d1ee:	vcvt.f64.u32	d7, s15
    d1f2:	vdiv.f64	d6, d7, d5
    d1f6:	vcvt.u32.f64	s12, d6
    d1fa:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d1fe:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    d200:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d202:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d204:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    d206:	cmp	r3, r1
    d208:	it	eq
    d20a:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d20c:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d20e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d210:	ite	eq
    d212:	moveq	r0, #1
    d214:	movne	r0, #0
    d216:	cmp	r0, #0
    d218:	beq.n	d202 <_GLOBAL__sub_I_bri_level+0x5b32>
    d21a:	lsrs	r3, r3, #5
    d21c:	ldr	r2, [pc, #104]	; (d288 <_GLOBAL__sub_I_bri_level+0x5bb8>)
elapsedMillis implosionTimer;



byte incomingByte;
String readBuffer;  
    d21e:	movs	r1, #0
    d220:	ldr	r0, [pc, #104]	; (d28c <_GLOBAL__sub_I_bri_level+0x5bbc>)
    d222:	orr.w	r3, r3, r4, lsl #27
    d226:	vmov	s15, r3
    d22a:	vldr	d5, [pc, #36]	; d250 <_GLOBAL__sub_I_bri_level+0x5b80>
    d22e:	vcvt.f64.u32	d7, s15
    d232:	vdiv.f64	d6, d7, d5
    d236:	vcvt.u32.f64	s12, d6
    d23a:	vstr	s12, [r2]
    d23e:	bl	fc0c <String::String(char const*)>
    d242:	ldr	r2, [pc, #20]	; (d258 <_GLOBAL__sub_I_bri_level+0x5b88>)
    d244:	ldr	r1, [pc, #72]	; (d290 <_GLOBAL__sub_I_bri_level+0x5bc0>)
    d246:	ldr	r0, [pc, #68]	; (d28c <_GLOBAL__sub_I_bri_level+0x5bbc>)

void loop() {
  readMessages();
  regular_animation();
  ceremony_animation();
}
    d248:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
elapsedMillis implosionTimer;



byte incomingByte;
String readBuffer;  
    d24c:	b.w	10840 <__aeabi_atexit>
    d250:	.word	0xd2f1a9fc
    d254:	.word	0x3ff0624d
    d258:	.word	0x20000964
    d25c:	.word	0x0000dab5
    d260:	.word	0x20003be4
    d264:	.word	0x20003bf8
    d268:	.word	0x20008a30
    d26c:	.word	0x20008a44
    d270:	.word	0x20005220
    d274:	.word	0x400d4000
    d278:	.word	0x20001790
    d27c:	.word	0x20004e0c
    d280:	.word	0x20005000
    d284:	.word	0x20001798
    d288:	.word	0x20008a2c
    d28c:	.word	0x20008a18
    d290:	.word	0x0000fb8d

0000d294 <readMessages()>:

void readMessages(){
    d294:	push	{r4, lr}
  if(Serial1.available()){
    d296:	ldr	r0, [pc, #196]	; (d35c <readMessages()+0xc8>)
    d298:	bl	f5c4 <HardwareSerial::available()>
    d29c:	cmp	r0, #0
    d29e:	beq.n	d2fa <readMessages()+0x66>
    while (Serial1.available()){
      incomingByte = Serial1.read();
    d2a0:	ldr	r4, [pc, #188]	; (d360 <readMessages()+0xcc>)
    d2a2:	b.n	d2b6 <readMessages()+0x22>
    d2a4:	ldr	r0, [pc, #180]	; (d35c <readMessages()+0xc8>)
    d2a6:	bl	f618 <HardwareSerial::read()>
    d2aa:	uxtb	r3, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    d2ac:	ldr	r0, [pc, #180]	; (d364 <readMessages()+0xd0>)
    d2ae:	mov	r1, r3
    d2b0:	strb	r3, [r4, #0]
    d2b2:	bl	fcd4 <String::append(char)>
byte incomingByte;
String readBuffer;  

void readMessages(){
  if(Serial1.available()){
    while (Serial1.available()){
    d2b6:	ldr	r0, [pc, #164]	; (d35c <readMessages()+0xc8>)
    d2b8:	bl	f5c4 <HardwareSerial::available()>
    d2bc:	cmp	r0, #0
    d2be:	bne.n	d2a4 <readMessages()+0x10>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    d2c0:	ldr	r1, [pc, #160]	; (d364 <readMessages()+0xd0>)
    d2c2:	ldr	r0, [pc, #164]	; (d368 <readMessages()+0xd4>)
    d2c4:	bl	10128 <Print::print(String const&)>
    d2c8:	ldr	r0, [pc, #156]	; (d368 <readMessages()+0xd4>)
    d2ca:	bl	10174 <Print::println()>
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
    d2ce:	ldr	r1, [pc, #156]	; (d36c <readMessages()+0xd8>)
    d2d0:	ldr	r0, [pc, #144]	; (d364 <readMessages()+0xd0>)
    d2d2:	bl	fcf4 <String::equals(char const*) const>
    d2d6:	cbz	r0, d306 <readMessages()+0x72>
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    d2d8:	ldr	r4, [pc, #148]	; (d370 <readMessages()+0xdc>)
    d2da:	ldr	r3, [r4, #0]
    d2dc:	adds	r3, #50	; 0x32
    d2de:	cmp	r3, #119	; 0x77
    d2e0:	ble.n	d34e <readMessages()+0xba>
    d2e2:	cmp	r3, #255	; 0xff
    d2e4:	it	ge
    d2e6:	movge	r3, #255	; 0xff
    d2e8:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    d2ea:	ldr	r0, [pc, #136]	; (d374 <readMessages()+0xe0>)
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    d2ec:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    d2ee:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    d2f2:	ldrb	r1, [r4, #0]
    d2f4:	ldr	r0, [pc, #128]	; (d378 <readMessages()+0xe4>)
    d2f6:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    d2fa:	ldr	r1, [pc, #128]	; (d37c <readMessages()+0xe8>)
    d2fc:	ldr	r0, [pc, #100]	; (d364 <readMessages()+0xd0>)
}
    d2fe:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    d302:	b.w	fc50 <String::operator=(char const*)>
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
    d306:	ldr	r1, [pc, #120]	; (d380 <readMessages()+0xec>)
    d308:	ldr	r0, [pc, #88]	; (d364 <readMessages()+0xd0>)
    d30a:	bl	fcf4 <String::equals(char const*) const>
    d30e:	cmp	r0, #0
    d310:	beq.n	d2fa <readMessages()+0x66>
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    d312:	ldr	r4, [pc, #92]	; (d370 <readMessages()+0xdc>)
    d314:	ldr	r3, [r4, #0]
    d316:	subs	r3, #50	; 0x32
    d318:	cmp	r3, #119	; 0x77
    d31a:	ble.n	d354 <readMessages()+0xc0>
    d31c:	cmp	r3, #255	; 0xff
    d31e:	it	ge
    d320:	movge	r3, #255	; 0xff
    d322:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    d324:	ldr	r0, [pc, #76]	; (d374 <readMessages()+0xe0>)
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    d326:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    d328:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    d32c:	ldrb	r1, [r4, #0]
    d32e:	ldr	r0, [pc, #72]	; (d378 <readMessages()+0xe4>)
    d330:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
    d334:	movs	r1, #4
    d336:	ldr	r0, [pc, #76]	; (d384 <readMessages()+0xf0>)
    d338:	bl	e468 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    d33c:	ldr	r0, [pc, #40]	; (d368 <readMessages()+0xd4>)
    d33e:	bl	10174 <Print::println()>
      Serial.println("down");
    }
  }
  readBuffer = "";
    d342:	ldr	r1, [pc, #56]	; (d37c <readMessages()+0xe8>)
    d344:	ldr	r0, [pc, #28]	; (d364 <readMessages()+0xd0>)
}
    d346:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    d34a:	b.w	fc50 <String::operator=(char const*)>
    d34e:	movs	r1, #120	; 0x78
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    d350:	mov	r3, r1
    d352:	b.n	d2ea <readMessages()+0x56>
    d354:	movs	r1, #120	; 0x78
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    d356:	mov	r3, r1
    d358:	b.n	d324 <readMessages()+0x90>
    d35a:	nop
    d35c:	.word	0x20000eac
    d360:	.word	0x2000178c
    d364:	.word	0x20008a18
    d368:	.word	0x20000f10
    d36c:	.word	0x2000019c
    d370:	.word	0x2000096c
    d374:	.word	0x20003be4
    d378:	.word	0x20003bf8
    d37c:	.word	0x200001a8
    d380:	.word	0x200001a4
    d384:	.word	0x200001ac

0000d388 <loop>:
  sinceBeam = 0;
  sinceBeamUpdate = 0;
}


void loop() {
    d388:	push	{r3, lr}
  readMessages();
    d38a:	bl	d294 <readMessages()>
  screen_B.regular_screen_animation();
}


void regular_animation(){
  if (!isRegularAnimation) return;
    d38e:	ldr	r3, [pc, #16]	; (d3a0 <loop+0x18>)
    d390:	ldrb	r3, [r3, #0]
    d392:	cbz	r3, d398 <loop+0x10>
    d394:	bl	3818 <regular_animation() [clone .part.21]>

void loop() {
  readMessages();
  regular_animation();
  ceremony_animation();
}
    d398:	ldmia.w	sp!, {r3, lr}


void loop() {
  readMessages();
  regular_animation();
  ceremony_animation();
    d39c:	b.w	6a18 <ceremony_animation()>
    d3a0:	.word	0x20001794
    d3a4:	.word	0x00000000

0000d3a8 <readAnimationType()>:
    }
  }
  readBuffer = "";
}

void readAnimationType(){
    d3a8:	push	{r4, r5, r6, r7, lr}
    d3aa:	vpush	{d8}
    d3ae:	sub	sp, #20
  String animReadBuffer = "";
    d3b0:	ldr	r1, [pc, #252]	; (d4b0 <readAnimationType()+0x108>)
    d3b2:	mov	r0, sp
    d3b4:	bl	fc0c <String::String(char const*)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d3b8:	ldr	r3, [pc, #248]	; (d4b4 <readAnimationType()+0x10c>)
    d3ba:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d3bc:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d3be:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d3c0:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d3c2:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    d3c4:	cmp	r3, r1
    d3c6:	it	eq
    d3c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d3ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d3cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d3ce:	ite	eq
    d3d0:	moveq	r5, #1
    d3d2:	movne	r5, #0
    d3d4:	cmp	r5, #0
    d3d6:	beq.n	d3c0 <readAnimationType()+0x18>
    d3d8:	lsrs	r1, r3, #5
  unsigned int readStartTime = rtcMillis();
  isRegularAnimation = true;
    d3da:	ldr	r6, [pc, #220]	; (d4b8 <readAnimationType()+0x110>)
    d3dc:	movs	r3, #1
    d3de:	movw	r5, #5000	; 0x1388
    d3e2:	orr.w	r1, r1, r2, lsl #27
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d3e6:	ldr	r4, [pc, #204]	; (d4b4 <readAnimationType()+0x10c>)
    d3e8:	strb	r3, [r6, #0]
    d3ea:	vmov	s15, r1
    d3ee:	vldr	d8, [pc, #184]	; d4a8 <readAnimationType()+0x100>
    d3f2:	vcvt.f64.u32	d7, s15
    d3f6:	vdiv.f64	d6, d7, d8
    d3fa:	vcvt.u32.f64	s12, d6
    d3fe:	vmov	r3, s12
    d402:	add	r3, r5
    d404:	mov	r5, r3
    d406:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    d408:	ldr	r1, [r4, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d40a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d40c:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    d40e:	cmp	r3, r1
    d410:	it	eq
    d412:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d414:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d416:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d418:	ite	eq
    d41a:	moveq	r7, #1
    d41c:	movne	r7, #0
    d41e:	cmp	r7, #0
    d420:	beq.n	d40a <readAnimationType()+0x62>
  while(rtcMillis()<readStartTime+5000){
    d422:	lsrs	r1, r3, #5
    d424:	orr.w	r1, r1, r2, lsl #27
    d428:	vmov	s15, r1
    d42c:	vcvt.f64.u32	d7, s15
    d430:	vdiv.f64	d6, d7, d8
    d434:	vcvt.u32.f64	s12, d6
    d438:	vmov	r3, s12
    d43c:	cmp	r5, r3
    d43e:	bhi.n	d44a <readAnimationType()+0xa2>
    d440:	b.n	d494 <readAnimationType()+0xec>
    d442:	mov	r1, r7
    d444:	mov	r0, sp
    d446:	bl	fcd4 <String::append(char)>
      while (Serial1.available()){
    d44a:	ldr	r0, [pc, #112]	; (d4bc <readAnimationType()+0x114>)
    d44c:	bl	f5c4 <HardwareSerial::available()>
    d450:	cbz	r0, d46c <readAnimationType()+0xc4>
        char inChar = Serial1.read();
    d452:	ldr	r0, [pc, #104]	; (d4bc <readAnimationType()+0x114>)
    d454:	bl	f618 <HardwareSerial::read()>
    d458:	uxtb	r7, r0
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
    d45a:	sub.w	r3, r7, #114	; 0x72
    d45e:	cmp	r3, #1
    d460:	bhi.n	d442 <readAnimationType()+0x9a>
    d462:	ldr	r1, [pc, #76]	; (d4b0 <readAnimationType()+0x108>)
    d464:	mov	r0, sp
    d466:	bl	fc50 <String::operator=(char const*)>
    d46a:	b.n	d442 <readAnimationType()+0x9a>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    d46c:	mov	r1, sp
    d46e:	ldr	r0, [pc, #80]	; (d4c0 <readAnimationType()+0x118>)
    d470:	bl	10128 <Print::print(String const&)>
    d474:	ldr	r0, [pc, #72]	; (d4c0 <readAnimationType()+0x118>)
    d476:	bl	10174 <Print::println()>
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
    d47a:	ldr	r1, [pc, #72]	; (d4c4 <readAnimationType()+0x11c>)
    d47c:	mov	r0, sp
    d47e:	bl	fcf4 <String::equals(char const*) const>
    d482:	mov	r7, r0
    d484:	cbnz	r0, d4a2 <readAnimationType()+0xfa>
        isRegularAnimation = true;
        break;
      } else if (animReadBuffer.equals("spec")){
    d486:	ldr	r1, [pc, #64]	; (d4c8 <readAnimationType()+0x120>)
    d488:	mov	r0, sp
    d48a:	bl	fcf4 <String::equals(char const*) const>
    d48e:	cmp	r0, #0
    d490:	beq.n	d406 <readAnimationType()+0x5e>
        isRegularAnimation = false;
    d492:	strb	r7, [r6, #0]
  }
  readBuffer = "";
}

void readAnimationType(){
  String animReadBuffer = "";
    d494:	mov	r0, sp
    d496:	bl	fb8c <String::~String()>
      } else if (animReadBuffer.equals("spec")){
        isRegularAnimation = false;
        break;
      }
  }
}
    d49a:	add	sp, #20
    d49c:	vpop	{d8}
    d4a0:	pop	{r4, r5, r6, r7, pc}
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
        isRegularAnimation = true;
    d4a2:	movs	r3, #1
    d4a4:	strb	r3, [r6, #0]
        break;
    d4a6:	b.n	d494 <readAnimationType()+0xec>
    d4a8:	.word	0xd2f1a9fc
    d4ac:	.word	0x3ff0624d
    d4b0:	.word	0x200001a8
    d4b4:	.word	0x400d4000
    d4b8:	.word	0x20001794
    d4bc:	.word	0x20000eac
    d4c0:	.word	0x20000f10
    d4c4:	.word	0x200001b4
    d4c8:	.word	0x200001b8
    d4cc:	.word	0x00000000

0000d4d0 <setup>:
}




void setup() {
    d4d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.begin(9600);
  Serial1.begin(9600);
    d4d4:	movs	r2, #0
}




void setup() {
    d4d6:	sub.w	sp, sp, #540	; 0x21c
  Serial.begin(9600);
  Serial1.begin(9600);
    d4da:	mov.w	r1, #9600	; 0x2580
    d4de:	ldr	r0, [pc, #840]	; (d828 <setup+0x358>)
    d4e0:	bl	f6e0 <HardwareSerial::begin(unsigned long, unsigned short)>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d4e4:	ldr	r4, [pc, #836]	; (d82c <setup+0x35c>)
  delay(SETUP_DELAY);
    d4e6:	movw	r0, #3500	; 0xdac
    d4ea:	add	r5, sp, #36	; 0x24
    d4ec:	bl	f388 <delay>

  updateRandomSeed();
    d4f0:	bl	db4 <updateRandomSeed()>

  rtc_set(0);
    d4f4:	movs	r0, #0
    d4f6:	bl	ef9c <rtc_set>
  
  readAnimationType();
    d4fa:	bl	d3a8 <readAnimationType()>
    d4fe:	ldmia	r4!, {r0, r1, r2, r3}
    d500:	stmia	r5!, {r0, r1, r2, r3}
    d502:	ldmia.w	r4, {r0, r1}
    d506:	movs	r2, #168	; 0xa8
    d508:	stmia.w	r5, {r0, r1}
    d50c:	add.w	r1, r4, #8
    d510:	add	r0, sp, #60	; 0x3c
    d512:	bl	df9c <memcpy>
    d516:	add.w	r1, r4, #176	; 0xb0
    d51a:	movs	r2, #168	; 0xa8
    d51c:	add	r0, sp, #228	; 0xe4
    d51e:	bl	df9c <memcpy>
    d522:	add.w	r3, r4, #344	; 0x158
    d526:	ldmia.w	r3, {r0, r1, r2}
    d52a:	add	r3, sp, #396	; 0x18c
    d52c:	stmia.w	r3, {r0, r1, r2}
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    d530:	movs	r1, #3
    d532:	movs	r0, #2
    d534:	bl	fe84 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    d538:	movs	r1, #4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    d53a:	str	r0, [sp, #0]
		{CIRCLE, random(2, 4), false},
    d53c:	movs	r0, #2
    d53e:	bl	fe84 <random(long, long)>
		{MULTIPLE, random(2, 5), false},
    d542:	movs	r1, #5
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    d544:	mov	sl, r0
		{MULTIPLE, random(2, 5), false},
    d546:	movs	r0, #2
    d548:	bl	fe84 <random(long, long)>
		{LINE, random(3, 10), false}
    d54c:	movs	r1, #10

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
    d54e:	str	r0, [sp, #4]
		{LINE, random(3, 10), false}
    d550:	movs	r0, #3
    d552:	bl	fe84 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d556:	ldr	r3, [pc, #728]	; (d830 <setup+0x360>)
    d558:	str	r0, [sp, #8]
    d55a:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d55c:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d55e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d560:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d562:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d564:	ldr	r4, [pc, #712]	; (d830 <setup+0x360>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d566:	cmp	r3, r1
    d568:	it	eq
    d56a:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d56c:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d56e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d570:	ite	eq
    d572:	moveq	r6, #1
    d574:	movne	r6, #0
    d576:	cmp	r6, #0
    d578:	beq.n	d560 <setup+0x90>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d57a:	mov.w	r0, #1728	; 0x6c0
    d57e:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d582:	mov.w	r2, #1728	; 0x6c0
    d586:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d588:	str	r0, [sp, #12]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d58a:	bl	10f7c <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d58e:	mov.w	r0, #1728	; 0x6c0
    d592:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d596:	mov.w	r2, #1728	; 0x6c0
    d59a:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d59c:	str	r0, [sp, #16]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d59e:	bl	10f7c <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d5a2:	mov.w	r0, #1728	; 0x6c0
    d5a6:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d5aa:	mov.w	r2, #1728	; 0x6c0
    d5ae:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d5b0:	str	r0, [sp, #20]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d5b2:	bl	10f7c <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    d5b6:	mov.w	r1, #360	; 0x168
    d5ba:	movs	r0, #0
    d5bc:	bl	fe84 <random(long, long)>
		hue_difference = random(60, 260);
    d5c0:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    d5c4:	str	r0, [sp, #24]
		hue_difference = random(60, 260);
    d5c6:	movs	r0, #60	; 0x3c
    d5c8:	bl	fe84 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d5cc:	ldr	r6, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d5ce:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d5d0:	ldr	r4, [r4, #40]	; 0x28
    d5d2:	str	r0, [sp, #28]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d5d4:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d5d6:	ldr	r3, [r1, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d5d8:	ldr	r7, [pc, #596]	; (d830 <setup+0x360>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d5da:	cmp	r3, r4
    d5dc:	it	eq
    d5de:	cmpeq	r2, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d5e0:	mov	r6, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d5e2:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d5e4:	ite	eq
    d5e6:	moveq	r0, #1
    d5e8:	movne	r0, #0
    d5ea:	cmp	r0, #0
    d5ec:	beq.n	d5d4 <setup+0x104>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    d5ee:	ldr	r5, [pc, #580]	; (d834 <setup+0x364>)
    d5f0:	add.w	fp, sp, #36	; 0x24
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
    d5f4:	lsrs	r4, r4, #5
    d5f6:	mov.w	r9, #2
    d5fa:	mov	lr, r5
    d5fc:	mov.w	r8, #3
    d600:	orr.w	r4, r4, r6, lsl #27
    d604:	ldmia.w	fp!, {r0, r1, r2, r3}
    d608:	stmia.w	lr!, {r0, r1, r2, r3}
    d60c:	ldmia.w	fp, {r0, r1}
    d610:	movs	r2, #168	; 0xa8
    d612:	stmia.w	lr, {r0, r1}
    d616:	add	r1, sp, #60	; 0x3c
    d618:	add.w	r0, r5, #24
    d61c:	bl	df9c <memcpy>
    d620:	movs	r2, #168	; 0xa8
    d622:	add	r1, sp, #228	; 0xe4
    d624:	add.w	r0, r5, #192	; 0xc0
    d628:	bl	df9c <memcpy>
    d62c:	vmov	s15, r4
    d630:	ldr	r3, [sp, #0]
    d632:	movs	r2, #1
    d634:	vcvt.f64.u32	d7, s15
    d638:	ldr	r1, [pc, #508]	; (d838 <setup+0x368>)
    d63a:	ldr	r0, [pc, #512]	; (d83c <setup+0x36c>)
    d63c:	str.w	r3, [r5, #388]	; 0x184
    d640:	movs	r3, #0
    d642:	str.w	r1, [r5, #440]	; 0x1b8
    d646:	ldr	r1, [pc, #504]	; (d840 <setup+0x370>)
    d648:	ldr	r4, [sp, #4]
    d64a:	ldr.w	lr, [pc, #512]	; d84c <setup+0x37c>
    d64e:	ldr.w	ip, [pc, #512]	; d850 <setup+0x380>
    d652:	str.w	r0, [r5, #436]	; 0x1b4
    d656:	str.w	r1, [r5, #456]	; 0x1c8
    d65a:	movs	r1, #5
    d65c:	ldr	r0, [pc, #484]	; (d844 <setup+0x374>)
    d65e:	strb.w	r3, [r5, #380]	; 0x17c
    d662:	strb.w	r3, [r5, #392]	; 0x188
    d666:	strb.w	r3, [r5, #404]	; 0x194
    d66a:	strb.w	r3, [r5, #416]	; 0x1a0
    d66e:	strb.w	r3, [r5, #428]	; 0x1ac
    d672:	strb.w	r3, [r5, #460]	; 0x1cc
    d676:	str.w	r3, [r5, #464]	; 0x1d0
    d67a:	str.w	r3, [r5, #472]	; 0x1d8
    d67e:	add	r3, sp, #396	; 0x18c
    d680:	ldr	r6, [sp, #8]
    d682:	str.w	r4, [r5, #412]	; 0x19c
    d686:	movs	r4, #4
    d688:	str.w	lr, [r5, #432]	; 0x1b0
    d68c:	str.w	ip, [r5, #444]	; 0x1bc
    d690:	mov.w	ip, #0
    d694:	ldr.w	lr, [pc, #444]	; d854 <setup+0x384>
    d698:	str.w	r0, [r5, #452]	; 0x1c4
    d69c:	str.w	r1, [r5, #372]	; 0x174
    d6a0:	str.w	r2, [r5, #376]	; 0x178
    d6a4:	str.w	r2, [r5, #420]	; 0x1a4
    d6a8:	str.w	lr, [r5, #448]	; 0x1c0
    d6ac:	str.w	ip, [r5, #468]	; 0x1d4
    d6b0:	str.w	sl, [r5, #400]	; 0x190
    d6b4:	str.w	r6, [r5, #424]	; 0x1a8


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d6b8:	add	r6, sp, #36	; 0x24
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    d6ba:	str.w	r9, [r5, #384]	; 0x180
    d6be:	str.w	r8, [r5, #396]	; 0x18c
    d6c2:	str.w	r4, [r5, #408]	; 0x198


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d6c6:	ldr.w	sl, [pc, #356]	; d82c <setup+0x35c>
    d6ca:	vldr	d5, [pc, #340]	; d820 <setup+0x350>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    d6ce:	ldmia.w	r3, {r0, r1, r2}
    d6d2:	vdiv.f64	d6, d7, d5
    d6d6:	add.w	r3, r5, #360	; 0x168
    d6da:	stmia.w	r3, {r0, r1, r2}
    d6de:	ldr	r3, [sp, #24]
    d6e0:	str.w	r3, [r5, #480]	; 0x1e0
    d6e4:	ldr	r3, [sp, #28]
    d6e6:	str.w	r3, [r5, #484]	; 0x1e4
    d6ea:	ldr	r3, [sp, #12]
    d6ec:	str.w	r3, [r5, #488]	; 0x1e8
    d6f0:	ldr	r3, [sp, #16]
    d6f2:	str.w	r3, [r5, #492]	; 0x1ec
    d6f6:	ldr	r3, [sp, #20]
    d6f8:	str.w	r3, [r5, #496]	; 0x1f0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d6fc:	ldmia.w	sl!, {r0, r1, r2, r3}
    d700:	stmia	r6!, {r0, r1, r2, r3}
    d702:	ldmia.w	sl, {r0, r1}
    d706:	movs	r2, #168	; 0xa8
    d708:	stmia.w	fp, {r0, r1}
    d70c:	vcvt.u32.f64	s12, d6
    d710:	add.w	r1, sl, #8
    d714:	add	r0, sp, #60	; 0x3c
    d716:	vstr	s12, [r5, #476]	; 0x1dc
    d71a:	bl	df9c <memcpy>
    d71e:	add.w	r1, sl, #176	; 0xb0
    d722:	movs	r2, #168	; 0xa8
    d724:	add	r0, sp, #228	; 0xe4
    d726:	bl	df9c <memcpy>
    d72a:	add.w	r3, sl, #344	; 0x158
    d72e:	ldmia.w	r3, {r0, r1, r2}
    d732:	add	r3, sp, #396	; 0x18c
    d734:	stmia.w	r3, {r0, r1, r2}
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    d738:	mov	r1, r8
    d73a:	mov	r0, r9
    d73c:	bl	fe84 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    d740:	mov	r1, r4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    d742:	mov	r6, r0
		{CIRCLE, random(2, 4), false},
    d744:	mov	r0, r9
    d746:	bl	fe84 <random(long, long)>
		{MULTIPLE, random(2, 5), false},
    d74a:	movs	r1, #5
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    d74c:	str	r0, [sp, #0]
		{MULTIPLE, random(2, 5), false},
    d74e:	mov	r0, r9
    d750:	bl	fe84 <random(long, long)>
		{LINE, random(3, 10), false}
    d754:	movs	r1, #10

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
    d756:	str	r0, [sp, #4]
		{LINE, random(3, 10), false}
    d758:	mov	r0, r8
    d75a:	bl	fe84 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d75e:	ldr.w	lr, [r7, #36]	; 0x24
    d762:	str	r0, [sp, #8]
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d764:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d766:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d768:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d76a:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d76c:	ldr	r4, [pc, #192]	; (d830 <setup+0x360>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d76e:	cmp	r3, r1
    d770:	it	eq
    d772:	cmpeq	r2, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d774:	mov	lr, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d776:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d778:	ite	eq
    d77a:	moveq	r7, #1
    d77c:	movne	r7, #0
    d77e:	cmp	r7, #0
    d780:	beq.n	d768 <setup+0x298>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d782:	mov.w	r0, #1728	; 0x6c0
    d786:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d78a:	mov.w	r2, #1728	; 0x6c0
    d78e:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d790:	str	r0, [sp, #12]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d792:	bl	10f7c <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d796:	mov.w	r0, #1728	; 0x6c0
    d79a:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d79e:	mov.w	r2, #1728	; 0x6c0
    d7a2:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d7a4:	str	r0, [sp, #16]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d7a6:	bl	10f7c <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d7aa:	mov.w	r0, #1728	; 0x6c0
    d7ae:	bl	1022c <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d7b2:	mov.w	r2, #1728	; 0x6c0
    d7b6:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    d7b8:	str	r0, [sp, #20]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    d7ba:	bl	10f7c <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    d7be:	mov.w	r1, #360	; 0x168
    d7c2:	movs	r0, #0
    d7c4:	bl	fe84 <random(long, long)>
		hue_difference = random(60, 260);
    d7c8:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    d7cc:	str	r0, [sp, #24]
		hue_difference = random(60, 260);
    d7ce:	movs	r0, #60	; 0x3c
    d7d0:	bl	fe84 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d7d4:	ldr	r7, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d7d6:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d7d8:	ldr.w	r8, [r4, #40]	; 0x28
    d7dc:	str	r0, [sp, #28]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d7de:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d7e0:	ldr	r3, [r1, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    d7e2:	cmp	r3, r8
    d7e4:	it	eq
    d7e6:	cmpeq	r2, r7
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d7e8:	mov	r7, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d7ea:	mov	r8, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d7ec:	ite	eq
    d7ee:	moveq	r0, #1
    d7f0:	movne	r0, #0
    d7f2:	cmp	r0, #0
    d7f4:	beq.n	d7de <setup+0x30e>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    d7f6:	ldr	r4, [pc, #80]	; (d848 <setup+0x378>)
    d7f8:	add.w	lr, sp, #36	; 0x24
    d7fc:	mov.w	fp, #5
    d800:	mov.w	sl, #2
    d804:	mov	ip, r4
    d806:	mov.w	r9, #3
    d80a:	lsr.w	r8, r8, fp
    d80e:	ldmia.w	lr!, {r0, r1, r2, r3}
    d812:	stmia.w	ip!, {r0, r1, r2, r3}
    d816:	ldmia.w	lr, {r0, r1}
    d81a:	orr.w	r7, r8, r7, lsl #27
    d81e:	b.n	d858 <setup+0x388>
    d820:	.word	0xd2f1a9fc
    d824:	.word	0x3ff0624d
    d828:	.word	0x20000eac
    d82c:	.word	0x20000000
    d830:	.word	0x400d4000
    d834:	.word	0x20004e0c
    d838:	.word	0x20008a58
    d83c:	.word	0x2000179c
    d840:	.word	0x20000bb4
    d844:	.word	0x20009c7c
    d848:	.word	0x20005000
    d84c:	.word	0x2000ae80
    d850:	.word	0x200053ac
    d854:	.word	0x20003be4
    d858:	movs	r2, #168	; 0xa8
    d85a:	ldr.w	r8, [pc, #492]	; da48 <setup+0x578>
    d85e:	stmia.w	ip, {r0, r1}
    d862:	add	r1, sp, #60	; 0x3c
    d864:	add.w	r0, r4, #24
    d868:	bl	df9c <memcpy>
    d86c:	add	r1, sp, #228	; 0xe4
    d86e:	movs	r2, #168	; 0xa8
    d870:	add.w	r0, r4, #192	; 0xc0
    d874:	bl	df9c <memcpy>
    d878:	vmov	s15, r7
    d87c:	ldr	r1, [sp, #0]
    d87e:	movs	r3, #0
    d880:	vcvt.f64.u32	d7, s15
    d884:	movs	r2, #1
    d886:	str.w	r1, [r4, #400]	; 0x190
    d88a:	mov.w	ip, #4
    d88e:	ldr	r1, [sp, #4]
    d890:	add.w	lr, r4, #360	; 0x168
    d894:	ldr	r0, [pc, #384]	; (da18 <setup+0x548>)
    d896:	str.w	r1, [r4, #412]	; 0x19c
    d89a:	ldr	r1, [sp, #8]
    d89c:	strb.w	r3, [r4, #380]	; 0x17c
    d8a0:	str.w	r1, [r4, #424]	; 0x1a8
    d8a4:	ldr	r1, [pc, #372]	; (da1c <setup+0x54c>)
    d8a6:	strb.w	r3, [r4, #392]	; 0x188
    d8aa:	str.w	r1, [r4, #436]	; 0x1b4
    d8ae:	ldr	r1, [pc, #368]	; (da20 <setup+0x550>)
    d8b0:	strb.w	r3, [r4, #404]	; 0x194
    d8b4:	str.w	r1, [r4, #440]	; 0x1b8
    d8b8:	strb.w	r3, [r4, #416]	; 0x1a0
    d8bc:	ldr	r1, [pc, #356]	; (da24 <setup+0x554>)
    d8be:	strb.w	r3, [r4, #428]	; 0x1ac
    d8c2:	strb.w	r3, [r4, #460]	; 0x1cc
    d8c6:	str.w	r3, [r4, #464]	; 0x1d0
    d8ca:	str.w	r3, [r4, #472]	; 0x1d8
    d8ce:	add	r3, sp, #396	; 0x18c
    d8d0:	str.w	r6, [r4, #388]	; 0x184
    d8d4:	str.w	fp, [r4, #372]	; 0x174
    d8d8:	mov.w	fp, #0
    d8dc:	str.w	r0, [r4, #452]	; 0x1c4
    d8e0:	str.w	r1, [r4, #456]	; 0x1c8
    d8e4:	str.w	r2, [r4, #376]	; 0x178
    d8e8:	str.w	r2, [r4, #420]	; 0x1a4
    d8ec:	ldr	r7, [pc, #312]	; (da28 <setup+0x558>)
    d8ee:	ldr	r6, [pc, #316]	; (da2c <setup+0x55c>)
    d8f0:	str.w	ip, [r4, #408]	; 0x198
    d8f4:	str.w	sl, [r4, #384]	; 0x180
    d8f8:	str.w	r9, [r4, #396]	; 0x18c
    d8fc:	str.w	r8, [r4, #432]	; 0x1b0
    d900:	str.w	r7, [r4, #444]	; 0x1bc
    d904:	str.w	r6, [r4, #448]	; 0x1c0
    d908:	str.w	fp, [r4, #468]	; 0x1d4
    d90c:	vldr	d5, [pc, #256]	; da10 <setup+0x540>
    d910:	ldmia.w	r3, {r0, r1, r2}
    d914:	vdiv.f64	d6, d7, d5
    d918:	stmia.w	lr, {r0, r1, r2}
    d91c:	ldr	r3, [sp, #24]
			
		}
	}

	void init_screen() {	
		_screen->begin();
    d91e:	ldr.w	r0, [r5, #448]	; 0x1c0
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    d922:	str.w	r3, [r4, #480]	; 0x1e0
    d926:	ldr	r3, [sp, #28]
    d928:	str.w	r3, [r4, #484]	; 0x1e4
    d92c:	ldr	r3, [sp, #12]
    d92e:	str.w	r3, [r4, #488]	; 0x1e8
    d932:	ldr	r3, [sp, #16]
    d934:	str.w	r3, [r4, #492]	; 0x1ec
    d938:	ldr	r3, [sp, #20]
    d93a:	str.w	r3, [r4, #496]	; 0x1f0
    d93e:	vcvt.u32.f64	s12, d6
    d942:	vstr	s12, [r4, #476]	; 0x1dc
			
		}
	}

	void init_screen() {	
		_screen->begin();
    d946:	bl	dad4 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    d94a:	movs	r1, #255	; 0xff
    d94c:	ldr.w	r0, [r5, #448]	; 0x1c0
    d950:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    d954:	ldr.w	r0, [r4, #448]	; 0x1c0
    d958:	bl	dad4 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    d95c:	movs	r1, #255	; 0xff
    d95e:	ldr.w	r0, [r4, #448]	; 0x1c0
    d962:	bl	ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>
  screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);

  screen_A.init_screen();
  screen_B.init_screen();

  synapse_A.begin();
    d966:	ldr	r0, [pc, #200]	; (da30 <setup+0x560>)
    d968:	bl	dad4 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    d96c:	ldr	r0, [pc, #196]	; (da34 <setup+0x564>)
    d96e:	bl	dad4 <Adafruit_NeoPixel::begin()>
  

  if(isRegularAnimation){
    d972:	ldr	r3, [pc, #196]	; (da38 <setup+0x568>)
    d974:	ldrb	r3, [r3, #0]
    d976:	cmp	r3, #0
    d978:	beq.n	da06 <setup+0x536>
    regular_setup();
    d97a:	bl	dec <regular_setup()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d97e:	ldr	r3, [pc, #188]	; (da3c <setup+0x56c>)
    d980:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d982:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    d984:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d986:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d988:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d98a:	ldr	r6, [pc, #176]	; (da3c <setup+0x56c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    d98c:	cmp	r3, r1
    d98e:	it	eq
    d990:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d992:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d994:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d996:	ite	eq
    d998:	moveq	r5, #1
    d99a:	movne	r5, #0
    d99c:	cmp	r5, #0
    d99e:	beq.n	d986 <setup+0x4b6>
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    d9a0:	lsrs	r1, r3, #5
    d9a2:	ldr	r3, [pc, #156]	; (da40 <setup+0x570>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d9a4:	mov	r4, r6
    d9a6:	orr.w	r1, r1, r2, lsl #27
    d9aa:	vmov	s15, r1
    d9ae:	vldr	d5, [pc, #96]	; da10 <setup+0x540>
    d9b2:	vcvt.f64.u32	d7, s15
    d9b6:	vdiv.f64	d6, d7, d5
    d9ba:	vcvt.u32.f64	s12, d6
    d9be:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    d9c2:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    d9c4:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d9c6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    d9c8:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    d9ca:	cmp	r3, r1
    d9cc:	it	eq
    d9ce:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    d9d0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    d9d2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    d9d4:	ite	eq
    d9d6:	moveq	r5, #1
    d9d8:	movne	r5, #0
    d9da:	cmp	r5, #0
    d9dc:	beq.n	d9c6 <setup+0x4f6>
    d9de:	lsrs	r1, r3, #5
    d9e0:	ldr	r3, [pc, #96]	; (da44 <setup+0x574>)
    d9e2:	orr.w	r1, r1, r2, lsl #27
    d9e6:	vmov	s15, r1
    d9ea:	vldr	d5, [pc, #36]	; da10 <setup+0x540>
    d9ee:	vcvt.f64.u32	d7, s15
    d9f2:	vdiv.f64	d6, d7, d5
    d9f6:	vcvt.u32.f64	s12, d6
    d9fa:	vstr	s12, [r3]
  }


  sinceBeam = 0;
  sinceBeamUpdate = 0;
}
    d9fe:	add.w	sp, sp, #540	; 0x21c
    da02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  

  if(isRegularAnimation){
    regular_setup();
  } else {
    ceremony_setup();
    da06:	bl	4948 <ceremony_setup()>
    da0a:	b.n	d97e <setup+0x4ae>
    da0c:	nop.w
    da10:	.word	0xd2f1a9fc
    da14:	.word	0x3ff0624d
    da18:	.word	0x20003c0c
    da1c:	.word	0x200029c0
    da20:	.word	0x200077f4
    da24:	.word	0x20000974
    da28:	.word	0x200065d0
    da2c:	.word	0x20003bf8
    da30:	.word	0x20008a30
    da34:	.word	0x20008a44
    da38:	.word	0x20001794
    da3c:	.word	0x400d4000
    da40:	.word	0x20001798
    da44:	.word	0x20001790
    da48:	.word	0x2000c0a4

0000da4c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    da4c:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    da4e:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    da50:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    da52:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    da54:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    da56:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    da58:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    da5c:	cbz	r3, da76 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    da5e:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    da62:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    da66:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    da6a:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    da6e:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    da72:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    da76:	ldrb	r7, [r0, #15]
    da78:	ldrb	r4, [r0, #12]
    da7a:	cmp	r4, r7
    da7c:	beq.n	daa8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    da7e:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    da80:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    da82:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    da86:	add	r7, r1
    da88:	cbnz	r3, da9e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    da8a:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    da8c:	strb	r3, [r7, #0]
    da8e:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    da90:	strb	r6, [r1, r7]
    p[gOffset] = g;
    da92:	ldrb	r3, [r0, #13]
    da94:	strb	r5, [r1, r3]
    p[bOffset] = b;
    da96:	ldrb	r3, [r0, #14]
    da98:	strb.w	lr, [r1, r3]
    da9c:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    da9e:	mul.w	r3, r3, r2
    daa2:	ubfx	r3, r3, #8, #8
    daa6:	b.n	da8c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    daa8:	add.w	r1, r1, r1, lsl #1
    daac:	ldr	r3, [r0, #8]
    daae:	add	r1, r3
    dab0:	b.n	da90 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    dab2:	nop

0000dab4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    dab4:	push	{r4, lr}
    dab6:	mov	r4, r0
  if(pixels)   free(pixels);
    dab8:	ldr	r0, [r0, #8]
    daba:	cbz	r0, dac0 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    dabc:	bl	10934 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    dac0:	ldrsb.w	r0, [r4, #6]
    dac4:	cmp	r0, #0
    dac6:	blt.n	dad0 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    dac8:	uxtb	r0, r0
    daca:	movs	r1, #0
    dacc:	bl	f4cc <pinMode>
}
    dad0:	mov	r0, r4
    dad2:	pop	{r4, pc}

0000dad4 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    dad4:	push	{r4, lr}
    dad6:	mov	r4, r0
  if(pin >= 0) {
    dad8:	ldrsb.w	r0, [r0, #6]
    dadc:	cmp	r0, #0
    dade:	blt.n	daf0 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    dae0:	uxtb	r0, r0
    dae2:	movs	r1, #1
    dae4:	bl	f4cc <pinMode>
    digitalWrite(pin, LOW);
    dae8:	movs	r1, #0
    daea:	ldrb	r0, [r4, #6]
    daec:	bl	f4c0 <digitalWrite>
  }
  begun = true;
    daf0:	movs	r3, #1
    daf2:	strb	r3, [r4, #1]
    daf4:	pop	{r4, pc}
    daf6:	nop

0000daf8 <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    daf8:	push	{r3, r4, r5, lr}
    dafa:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    dafc:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    dafe:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    db00:	cbz	r0, db06 <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    db02:	bl	10934 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    db06:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    db08:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    db0a:	ldrb	r0, [r4, #12]
    db0c:	cmp	r3, r0
    db0e:	ite	eq
    db10:	moveq	r0, #3
    db12:	movne	r0, #4
    db14:	smulbb	r0, r0, r5
    db18:	uxth	r0, r0
    db1a:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    db1c:	bl	1084c <calloc>
    db20:	str	r0, [r4, #8]
    db22:	cbz	r0, db28 <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    db24:	strh	r5, [r4, #2]
    db26:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    db28:	strh	r0, [r4, #4]
    db2a:	strh	r0, [r4, #2]
    db2c:	pop	{r3, r4, r5, pc}
    db2e:	nop

0000db30 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    db30:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    db32:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    db34:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    db38:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    db3c:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    db3e:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    db42:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    db46:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    db4a:	ite	hi
    db4c:	movhi	r6, #0
    db4e:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    db50:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    db54:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    db58:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    db5a:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    db5c:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    db5e:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    db60:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    db62:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    db64:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    db66:	cbz	r5, db7e <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    db68:	subs	r1, r2, r1
    db6a:	clz	r1, r1
    db6e:	lsrs	r1, r1, #5
    db70:	cmp	r1, r4
    db72:	beq.n	db7e <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    db74:	ldrh	r1, [r0, #2]
  }
}
    db76:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    db7a:	b.w	daf8 <Adafruit_NeoPixel::updateLength(unsigned short)>
    db7e:	pop	{r4, r5, r6, r7, pc}

0000db80 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    db80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    db84:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    db86:	sub	sp, #20
    db88:	str	r0, [sp, #12]

  if(!pixels) return;
    db8a:	cmp	r3, #0
    db8c:	beq.n	dc72 <Adafruit_NeoPixel::show()+0xf2>
    db8e:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    db90:	bl	f448 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    db94:	ldr	r3, [r4, #16]
    db96:	subs	r0, r0, r3
    db98:	cmp.w	r0, #300	; 0x12c
    db9c:	bcc.n	db90 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    db9e:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    dba0:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    dba2:	ldr	r0, [pc, #408]	; (dd3c <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    dba4:	ldrsb.w	r3, [r6, #6]
    dba8:	ldr	r4, [pc, #404]	; (dd40 <Adafruit_NeoPixel::show()+0x1c0>)
    dbaa:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    dbac:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    dbae:	ldr	r1, [pc, #404]	; (dd44 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    dbb0:	ldr.w	ip, [r4, r3]
    dbb4:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    dbb6:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    dbb8:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    dbbc:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    dbc0:	mov	r5, r6
    dbc2:	mov	r6, r3
    dbc4:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    dbc6:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    dbc8:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    dbca:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    dbcc:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    dbce:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    dbd0:	ldr	r4, [pc, #372]	; (dd48 <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    dbd2:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    dbd6:	str	r2, [sp, #8]
    dbd8:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    dbda:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    dbdc:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    dbde:	ldr	r1, [pc, #364]	; (dd4c <Adafruit_NeoPixel::show()+0x1cc>)
    dbe0:	ldr	r0, [r4, #0]
    dbe2:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    dbe4:	cmp	r2, #0
    dbe6:	beq.n	dc78 <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    dbe8:	ldr	r5, [pc, #356]	; (dd50 <Adafruit_NeoPixel::show()+0x1d0>)
    dbea:	lsrs	r3, r3, #8
    while(p < end) {
    dbec:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    dbee:	umull	r2, r3, r5, r3
    dbf2:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    dbf6:	bcs.n	dc52 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    dbf8:	ldr	r7, [pc, #344]	; (dd54 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    dbfa:	ldr	r6, [pc, #348]	; (dd58 <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    dbfc:	ldr	r3, [sp, #4]
    dbfe:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    dc02:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    dc06:	ldrb.w	sl, [r3], #1
    dc0a:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    dc0c:	ldr	r2, [r4, #0]
    dc0e:	ldr	r3, [r1, #0]
    dc10:	subs	r2, r2, r0
    dc12:	lsrs	r3, r3, #8
    dc14:	umull	fp, r3, r5, r3
    dc18:	cmp.w	r2, r3, lsr #4
    dc1c:	bcc.n	dc0c <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    dc1e:	ldr	r3, [pc, #296]	; (dd48 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    dc20:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    dc24:	ldr	r0, [r3, #0]
        *set = msk;
    dc26:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    dc2a:	beq.n	dd2a <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    dc2c:	ldr	r3, [r4, #0]
    dc2e:	ldr	r2, [r1, #0]
    dc30:	subs	r3, r3, r0
    dc32:	umull	fp, r2, r7, r2
    dc36:	cmp.w	r3, r2, lsr #19
    dc3a:	bcc.n	dc2c <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    dc3c:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    dc40:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    dc44:	mov.w	lr, lr, lsr #1
    dc48:	bne.n	dc0c <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    dc4a:	ldr	r3, [sp, #8]
    dc4c:	ldr	r2, [sp, #4]
    dc4e:	cmp	r3, r2
    dc50:	bne.n	dbfc <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    dc52:	ldr	r5, [pc, #244]	; (dd48 <Adafruit_NeoPixel::show()+0x1c8>)
    dc54:	ldr	r4, [pc, #248]	; (dd50 <Adafruit_NeoPixel::show()+0x1d0>)
    dc56:	ldr	r2, [r5, #0]
    dc58:	ldr	r3, [r1, #0]
    dc5a:	subs	r2, r2, r0
    dc5c:	lsrs	r3, r3, #8
    dc5e:	umull	r6, r3, r4, r3
    dc62:	cmp.w	r2, r3, lsr #4
    dc66:	bcc.n	dc56 <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    dc68:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    dc6a:	bl	f448 <micros>
    dc6e:	ldr	r3, [sp, #12]
    dc70:	str	r0, [r3, #16]
}
    dc72:	add	sp, #20
    dc74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    dc78:	ldr	r6, [pc, #212]	; (dd50 <Adafruit_NeoPixel::show()+0x1d0>)
    dc7a:	lsrs	r3, r3, #7
    dc7c:	umull	r2, r3, r6, r3
    while(p < end) {
    dc80:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    dc82:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    dc86:	ldr	r3, [sp, #4]
    dc88:	cmp	r3, r2
    dc8a:	bcs.n	dcf6 <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    dc8c:	ldr.w	lr, [pc, #204]	; dd5c <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    dc90:	ldr	r7, [pc, #196]	; (dd58 <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    dc92:	ldr	r3, [sp, #4]
    dc94:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    dc98:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    dc9c:	ldrb.w	fp, [r3], #1
    dca0:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    dca2:	ldr	r2, [r4, #0]
    dca4:	ldr	r3, [r1, #0]
    dca6:	subs	r2, r2, r0
    dca8:	lsrs	r3, r3, #7
    dcaa:	umull	r5, r3, r6, r3
    dcae:	cmp.w	r2, r3, lsr #4
    dcb2:	bcc.n	dca2 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    dcb4:	ldr	r3, [pc, #144]	; (dd48 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    dcb6:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    dcba:	ldr	r0, [r3, #0]
        *set = msk;
    dcbc:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    dcc0:	beq.n	dd18 <Adafruit_NeoPixel::show()+0x198>
    dcc2:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    dcc6:	ldr	r2, [r4, #0]
    dcc8:	ldr	r5, [r1, #0]
    dcca:	subs	r2, r2, r0
    dccc:	umull	ip, r3, lr, r5
    dcd0:	subs	r5, r5, r3
    dcd2:	add.w	r3, r3, r5, lsr #1
    dcd6:	cmp.w	r2, r3, lsr #19
    dcda:	bcc.n	dcc6 <Adafruit_NeoPixel::show()+0x146>
    dcdc:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    dce0:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    dce4:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    dce8:	mov.w	r9, r9, lsr #1
    dcec:	bne.n	dca2 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    dcee:	ldr	r3, [sp, #8]
    dcf0:	ldr	r2, [sp, #4]
    dcf2:	cmp	r3, r2
    dcf4:	bne.n	dc92 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    dcf6:	ldr	r5, [pc, #80]	; (dd48 <Adafruit_NeoPixel::show()+0x1c8>)
    dcf8:	ldr	r4, [pc, #84]	; (dd50 <Adafruit_NeoPixel::show()+0x1d0>)
    dcfa:	ldr	r2, [r5, #0]
    dcfc:	ldr	r3, [r1, #0]
    dcfe:	subs	r2, r2, r0
    dd00:	lsrs	r3, r3, #7
    dd02:	umull	r6, r3, r4, r3
    dd06:	cmp.w	r2, r3, lsr #4
    dd0a:	bcc.n	dcfa <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    dd0c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    dd0e:	bl	f448 <micros>
    dd12:	ldr	r3, [sp, #12]
    dd14:	str	r0, [r3, #16]
    dd16:	b.n	dc72 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    dd18:	ldr	r3, [r4, #0]
    dd1a:	ldr	r2, [r1, #0]
    dd1c:	subs	r3, r3, r0
    dd1e:	umull	r5, r2, r7, r2
    dd22:	cmp.w	r3, r2, lsr #19
    dd26:	bcc.n	dd18 <Adafruit_NeoPixel::show()+0x198>
    dd28:	b.n	dce0 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    dd2a:	ldr	r3, [r4, #0]
    dd2c:	ldr	r2, [r1, #0]
    dd2e:	subs	r3, r3, r0
    dd30:	umull	fp, r2, r6, r2
    dd34:	cmp.w	r3, r2, lsr #20
    dd38:	bcc.n	dd2a <Adafruit_NeoPixel::show()+0x1aa>
    dd3a:	b.n	dc3c <Adafruit_NeoPixel::show()+0xbc>
    dd3c:	.word	0xe000edfc
    dd40:	.word	0x200005c0
    dd44:	.word	0xe0001000
    dd48:	.word	0xe0001004
    dd4c:	.word	0x20000df8
    dd50:	.word	0x014f8b59
    dd54:	.word	0x6b5fca6b
    dd58:	.word	0x431bde83
    dd5c:	.word	0x421f67b3

0000dd60 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    dd60:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    dd62:	ldrb	r3, [r0, #1]
    dd64:	cbz	r3, dd82 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    dd66:	mov	r4, r0
    dd68:	ldrsb.w	r0, [r0, #6]
    dd6c:	mov	r5, r1
    dd6e:	cmp	r0, #0
    dd70:	blt.n	dd86 <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    dd72:	uxtb	r0, r0
    dd74:	movs	r1, #0
    dd76:	bl	f4cc <pinMode>
    dd7a:	ldrb	r3, [r4, #1]
    pin = p;
    dd7c:	strb	r5, [r4, #6]
    if(begun) {
    dd7e:	cbnz	r3, dd88 <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    dd80:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    dd82:	strb	r1, [r0, #6]
    dd84:	pop	{r3, r4, r5, pc}
    dd86:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    dd88:	mov	r0, r5
    dd8a:	movs	r1, #1
    dd8c:	bl	f4cc <pinMode>
      digitalWrite(p, LOW);
    dd90:	mov	r0, r5
    dd92:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    dd94:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    dd98:	b.w	f4c0 <digitalWrite>

0000dd9c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    dd9c:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    dd9e:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    dda0:	mov	r4, r0
    dda2:	mov	r7, r1
    dda4:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    dda6:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    dda8:	strb	r5, [r0, #1]
    ddaa:	strb	r5, [r0, #7]
    ddac:	str	r5, [r0, #8]
    ddae:	str	r5, [r0, #16]
{
  updateType(t);
    ddb0:	bl	db30 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    ddb4:	mov	r1, r7
    ddb6:	mov	r0, r4
    ddb8:	bl	daf8 <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    ddbc:	mov	r0, r4
    ddbe:	mov	r1, r6
    ddc0:	bl	dd60 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    ddc4:	mov	r0, r4
    ddc6:	pop	{r3, r4, r5, r6, r7, pc}

0000ddc8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    ddc8:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    ddca:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    ddcc:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    ddd0:	cmp	r4, r1
    ddd2:	bls.n	de08 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    ddd4:	ldrb	r4, [r0, #7]
    ddd6:	cbz	r4, ddea <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    ddd8:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    dddc:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    dde0:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    dde4:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    dde6:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    dde8:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    ddea:	ldrb	r5, [r0, #15]
    ddec:	ldrb	r4, [r0, #12]
    ddee:	cmp	r4, r5
    ddf0:	beq.n	de0c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ddf2:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ddf4:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ddf6:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ddfa:	strb	r7, [r1, r5]
    ddfc:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    ddfe:	strb	r2, [r1, r5]
    p[gOffset] = g;
    de00:	ldrb	r2, [r0, #13]
    de02:	strb	r3, [r1, r2]
    p[bOffset] = b;
    de04:	ldrb	r3, [r0, #14]
    de06:	strb	r6, [r1, r3]
  }
}
    de08:	pop	{r4, r5, r6, r7}
    de0a:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    de0c:	add.w	r1, r1, r1, lsl #1
    de10:	ldr	r4, [r0, #8]
    de12:	add	r1, r4
    de14:	b.n	ddfe <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    de16:	nop

0000de18 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    de18:	ldrh	r3, [r0, #2]
    de1a:	cmp	r3, r1
    de1c:	bls.n	de22 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    de1e:	b.w	da4c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    de22:	bx	lr

0000de24 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    de24:	ldrh	r3, [r0, #2]
    de26:	cmp	r3, r1
    de28:	bls.n	de5a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    de2a:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    de2c:	ldrb	r2, [r0, #15]
    de2e:	ldrb	r3, [r0, #12]
    de30:	cmp	r2, r3
    de32:	beq.n	de5e <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    de34:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    de36:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    de38:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    de3c:	ldrb	r3, [r1, r3]
    de3e:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    de40:	cbnz	r4, de90 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    de42:	lsls	r3, r3, #16
    de44:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    de46:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    de48:	orr.w	r0, r3, r5, lsl #24
    de4c:	ldrb	r3, [r1, r4]
    de4e:	ldrb	r2, [r1, r2]
    de50:	orrs	r3, r0
    de52:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    de56:	pop	{r4, r5}
    de58:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    de5a:	movs	r0, #0
    de5c:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    de5e:	add.w	r1, r1, r1, lsl #1
    de62:	ldr	r3, [r0, #8]
    if(brightness) {
    de64:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    de66:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    de68:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    de6a:	cbz	r4, dec0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    de6c:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    de6e:	lsls	r2, r2, #8
    de70:	ldrb	r3, [r0, #14]
    de72:	ldrb	r0, [r1, r5]
    de74:	ldrb	r3, [r1, r3]
    de76:	lsls	r0, r0, #8
    de78:	lsls	r3, r3, #8
    de7a:	udiv	r2, r2, r4
    de7e:	udiv	r0, r0, r4
    de82:	lsls	r2, r2, #16
    de84:	udiv	r3, r3, r4
    de88:	orr.w	r0, r2, r0, lsl #8
    de8c:	orrs	r0, r3
    de8e:	b.n	de56 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    de90:	lsls	r3, r3, #8
    de92:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    de94:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    de96:	lsls	r5, r5, #8
    de98:	ldrb	r2, [r1, r2]
    de9a:	ldrb	r0, [r1, r0]
    de9c:	lsls	r2, r2, #8
    de9e:	lsls	r0, r0, #8
    dea0:	udiv	r1, r3, r4
    dea4:	udiv	r5, r5, r4
    dea8:	udiv	r2, r2, r4
    deac:	lsls	r3, r1, #16
    deae:	udiv	r0, r0, r4
    deb2:	orr.w	r3, r3, r5, lsl #24
    deb6:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    deb8:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    deba:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    debe:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    dec0:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    dec2:	lsls	r2, r2, #16
    dec4:	ldrb	r3, [r0, #14]
    dec6:	ldrb	r0, [r1, r4]
    dec8:	ldrb	r3, [r1, r3]
    deca:	orr.w	r0, r2, r0, lsl #8
    dece:	orrs	r0, r3
    ded0:	b.n	de56 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    ded2:	nop

0000ded4 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    ded4:	ldrh	r0, [r0, #2]
    ded6:	bx	lr

0000ded8 <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    ded8:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    deda:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    dedc:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    dede:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    dee0:	cmp	r6, r4
    dee2:	beq.n	df0c <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    dee4:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    dee6:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    dee8:	ands.w	r4, r4, #255	; 0xff
    deec:	bne.n	df10 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    deee:	ldrh	r3, [r0, #4]
    def0:	cbz	r3, df0a <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    def2:	mov	r2, r5
      c      = *ptr;
    def4:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    def6:	mul.w	r3, r4, r3
    defa:	asrs	r3, r3, #8
    defc:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    df00:	subs	r3, r2, r5
    df02:	ldrh	r1, [r0, #4]
    df04:	uxth	r3, r3
    df06:	cmp	r1, r3
    df08:	bhi.n	def4 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    df0a:	strb	r6, [r0, #7]
  }
}
    df0c:	pop	{r4, r5, r6}
    df0e:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    df10:	cmp	r1, #255	; 0xff
    df12:	beq.n	df20 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    df14:	lsls	r3, r6, #8
    df16:	subs	r3, #1
    df18:	sdiv	r4, r3, r4
    df1c:	uxth	r4, r4
    df1e:	b.n	deee <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    df20:	movw	r3, #65535	; 0xffff
    df24:	sdiv	r4, r3, r4
    df28:	b.n	deee <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    df2a:	nop

0000df2c <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    df2c:	ldrh	r2, [r0, #4]
    df2e:	movs	r1, #0
    df30:	ldr	r0, [r0, #8]
    df32:	b.w	10f7c <memset>
    df36:	nop

0000df38 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    df38:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    df3a:	movs	r1, #0
    df3c:	mov	r3, r0
    df3e:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    df42:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    df44:	movs	r4, #0
    df46:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    df48:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    df4c:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    df4e:	bfc	r2, #0, #4
    df52:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    df54:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    df58:	cmp	r3, r5
    df5a:	bne.n	df42 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    df5c:	mov	r2, r4
    df5e:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    df60:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    df62:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    df66:	add.w	r3, r0, r2, lsl #4
    df6a:	adds	r3, #8
    df6c:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    df6e:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    df72:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    df76:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    df7a:	beq.n	df84 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    df7c:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    df7e:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    df80:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    df82:	str	r6, [r1, #8]
    df84:	adds	r2, #1
    df86:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    df88:	cmp	r2, #12
    df8a:	bne.n	df66 <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    df8c:	pop	{r4, r5, r6}
    df8e:	bx	lr

0000df90 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    df90:	ldr	r0, [pc, #4]	; (df98 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    df92:	b.w	df38 <TimeAlarmsClass::TimeAlarmsClass()>
    df96:	nop
    df98:	.word	0x2000d2c8

0000df9c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    df9c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    df9e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    dfa2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    dfa6:	bne.n	e084 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dfa8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    dfaa:	bcc.n	e030 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dfac:	ldr.w	r3, [r1], #4
    dfb0:	str.w	r3, [r0], #4
    dfb4:	ldr.w	r3, [r1], #4
    dfb8:	str.w	r3, [r0], #4
    dfbc:	ldr.w	r3, [r1], #4
    dfc0:	str.w	r3, [r0], #4
    dfc4:	ldr.w	r3, [r1], #4
    dfc8:	str.w	r3, [r0], #4
    dfcc:	ldr.w	r3, [r1], #4
    dfd0:	str.w	r3, [r0], #4
    dfd4:	ldr.w	r3, [r1], #4
    dfd8:	str.w	r3, [r0], #4
    dfdc:	ldr.w	r3, [r1], #4
    dfe0:	str.w	r3, [r0], #4
    dfe4:	ldr.w	r3, [r1], #4
    dfe8:	str.w	r3, [r0], #4
    dfec:	ldr.w	r3, [r1], #4
    dff0:	str.w	r3, [r0], #4
    dff4:	ldr.w	r3, [r1], #4
    dff8:	str.w	r3, [r0], #4
    dffc:	ldr.w	r3, [r1], #4
    e000:	str.w	r3, [r0], #4
    e004:	ldr.w	r3, [r1], #4
    e008:	str.w	r3, [r0], #4
    e00c:	ldr.w	r3, [r1], #4
    e010:	str.w	r3, [r0], #4
    e014:	ldr.w	r3, [r1], #4
    e018:	str.w	r3, [r0], #4
    e01c:	ldr.w	r3, [r1], #4
    e020:	str.w	r3, [r0], #4
    e024:	ldr.w	r3, [r1], #4
    e028:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e02c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e02e:	bcs.n	dfac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e030:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e032:	bcc.n	e058 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e034:	ldr.w	r3, [r1], #4
    e038:	str.w	r3, [r0], #4
    e03c:	ldr.w	r3, [r1], #4
    e040:	str.w	r3, [r0], #4
    e044:	ldr.w	r3, [r1], #4
    e048:	str.w	r3, [r0], #4
    e04c:	ldr.w	r3, [r1], #4
    e050:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e054:	subs	r2, #16
	bhs	.Lmid_block_loop
    e056:	bcs.n	e034 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e058:	adds	r2, #12
	blo	.Lcopy_less_than_4
    e05a:	bcc.n	e068 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e05c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e060:	str.w	r3, [r0], #4
	subs	r2, #4
    e064:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e066:	bcs.n	e05c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e068:	adds	r2, #4
	beq	.Ldone
    e06a:	beq.n	e07e <memcpy+0xe2>

	lsls	r2, r2, #31
    e06c:	lsls	r2, r2, #31
	itt ne
    e06e:	itt	ne
	ldrbne  r3, [r1], #1
    e070:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e074:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e078:	bcc.n	e07e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e07a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e07c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e07e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e080:	bx	lr
    e082:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e084:	cmp	r2, #8
	blo	.Lbyte_copy
    e086:	bcc.n	e0b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e088:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e08a:	beq.n	dfa8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e08c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e090:	beq.n	dfa8 <memcpy+0xc>

	rsb	r3, #4
    e092:	rsb	r3, r3, #4
	subs	r2, r3
    e096:	subs	r2, r2, r3

	lsls    r3, r3, #31
    e098:	lsls	r3, r3, #31
	itt ne
    e09a:	itt	ne
	ldrbne  r3, [r1], #1
    e09c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e0a0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e0a4:	bcc.n	dfa8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e0a6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e0aa:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e0ae:	b.n	dfa8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e0b0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    e0b2:	bcc.n	e068 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e0b4:	subs	r2, #1
	ldrb    r3, [r1], #1
    e0b6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e0ba:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e0be:	bcs.n	e0b4 <memcpy+0x118>

	ldrb	r3, [r1]
    e0c0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e0c2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e0c4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e0c6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e0c8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e0ca:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e0cc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e0ce:	bx	lr

0000e0d0 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    e0d0:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    e0d2:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    e0d4:	ubfx	r3, r3, #16, #15
    e0d8:	ldr	r1, [pc, #20]	; (e0f0 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    e0da:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    e0dc:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    e0e0:	ldr	r4, [pc, #16]	; (e0f4 <rx_event+0x24>)
    e0e2:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    e0e4:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    e0e8:	strh.w	r5, [r4, r2, lsl #1]
}
    e0ec:	pop	{r4, r5}
    e0ee:	bx	lr
    e0f0:	.word	0x2000db58
    e0f4:	.word	0x2000db50

0000e0f8 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    e0f8:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    e0fa:	ldr	r3, [pc, #84]	; (e150 <usb_serial_flush_callback+0x58>)
    e0fc:	ldrb	r3, [r3, #0]
    e0fe:	cbnz	r3, e110 <usb_serial_flush_callback+0x18>
    e100:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    e104:	ldr	r3, [pc, #76]	; (e154 <usb_serial_flush_callback+0x5c>)
    e106:	ldrb	r3, [r3, #0]
    e108:	cbz	r3, e110 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    e10a:	ldr	r5, [pc, #76]	; (e158 <usb_serial_flush_callback+0x60>)
    e10c:	ldrh	r2, [r5, #0]
    e10e:	cbnz	r2, e112 <usb_serial_flush_callback+0x1a>
    e110:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e112:	ldr	r7, [pc, #72]	; (e15c <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e114:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e116:	ldr	r6, [pc, #72]	; (e160 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e118:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e11c:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e11e:	ldr	r0, [pc, #68]	; (e164 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e120:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e124:	add.w	r1, r0, r1, lsl #8
    e128:	mov	r0, r6
    e12a:	bl	eef8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e12e:	mov	r1, r6
    e130:	movs	r0, #4
    e132:	bl	ef28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e136:	ldrb	r3, [r7, #0]
    e138:	adds	r3, #1
    e13a:	uxtb	r3, r3
    e13c:	cmp	r3, #6
    e13e:	it	ls
    e140:	strbls	r3, [r7, #0]
	tx_available = 0;
    e142:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    e146:	it	hi
    e148:	strbhi	r4, [r7, #0]
	tx_available = 0;
    e14a:	strh	r3, [r5, #0]
    e14c:	pop	{r3, r4, r5, r6, r7, pc}
    e14e:	nop
    e150:	.word	0x2000da8c
    e154:	.word	0x2000dcf0
    e158:	.word	0x2000dbc0
    e15c:	.word	0x2000da8d
    e160:	.word	0x2000dbe0
    e164:	.word	0x2000d38c

0000e168 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    e168:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e16c:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    e16e:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    e170:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    e172:	cmp	r1, #0
    e174:	beq.w	e2a0 <usb_serial_write.part.1+0x138>
    e178:	movs	r3, #0
    e17a:	ldr.w	r8, [pc, #320]	; e2bc <usb_serial_write.part.1+0x154>
    e17e:	ldr.w	r9, [pc, #304]	; e2b0 <usb_serial_write.part.1+0x148>
    e182:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    e184:	ldr	r6, [pc, #284]	; (e2a4 <usb_serial_write.part.1+0x13c>)
    e186:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    e18a:	ldr.w	sl, [pc, #308]	; e2c0 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    e18e:	ldr	r2, [pc, #280]	; (e2a8 <usb_serial_write.part.1+0x140>)
    e190:	ldrb	r4, [r2, #0]
    e192:	ldr	r2, [pc, #280]	; (e2ac <usb_serial_write.part.1+0x144>)
    e194:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    e198:	cmp	r3, #0
    e19a:	bne.n	e258 <usb_serial_write.part.1+0xf0>
    e19c:	mov	r5, r3
    e19e:	mov	r4, r3
    e1a0:	b.n	e1cc <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    e1a2:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    e1a6:	cbnz	r4, e1aa <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    e1a8:	ldr	r5, [r6, #0]
    e1aa:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    e1ac:	cmp	r3, #0
    e1ae:	bne.n	e24c <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    e1b0:	ldr	r3, [r6, #0]
    e1b2:	subs	r3, r3, r5
    e1b4:	cmp	r3, #120	; 0x78
    e1b6:	bhi.n	e294 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    e1b8:	ldrb.w	r3, [sl]
    e1bc:	cmp	r3, #0
    e1be:	beq.n	e24c <usb_serial_write.part.1+0xe4>
			yield();
    e1c0:	bl	fd54 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    e1c4:	ldrh.w	r3, [r8]
    e1c8:	cmp	r3, #0
    e1ca:	bne.n	e254 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    e1cc:	mov	r0, r7
    e1ce:	bl	ef74 <usb_transfer_status>
			if (!(status & 0x80)) {
    e1d2:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    e1d6:	ldr	r2, [pc, #216]	; (e2b0 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    e1d8:	bne.n	e1a2 <usb_serial_write.part.1+0x3a>
    e1da:	ldr	r2, [pc, #204]	; (e2a8 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    e1dc:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    e1e0:	strb.w	r0, [r9]
    e1e4:	ldrb	r4, [r2, #0]
    e1e6:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e1e8:	ldr	r1, [pc, #200]	; (e2b4 <usb_serial_write.part.1+0x14c>)
    e1ea:	lsls	r4, r4, #8
		if (size >= tx_available) {
    e1ec:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    e1ee:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e1f2:	add	r0, r4
    e1f4:	add	r0, r1
		if (size >= tx_available) {
    e1f6:	bcc.n	e26a <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    e1f8:	ldr	r1, [sp, #8]
    e1fa:	bl	df9c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    e1fe:	ldr	r3, [pc, #180]	; (e2b4 <usb_serial_write.part.1+0x14c>)
    e200:	mov.w	r2, #256	; 0x100
    e204:	mov	r0, r7
    e206:	adds	r1, r3, r4
    e208:	movs	r3, #0
    e20a:	bl	eef8 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    e20e:	mov	r1, r7
    e210:	movs	r0, #4
    e212:	bl	ef28 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    e216:	ldr	r3, [pc, #144]	; (e2a8 <usb_serial_write.part.1+0x140>)
    e218:	ldr	r2, [pc, #140]	; (e2a8 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    e21a:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    e21c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    e21e:	ldr	r0, [pc, #152]	; (e2b8 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    e220:	adds	r3, #1
    e222:	uxtb	r3, r3
    e224:	cmp	r3, #6
    e226:	it	hi
    e228:	movhi	r3, #0
    e22a:	strb	r3, [r2, #0]
			size -= tx_available;
    e22c:	ldrh.w	r2, [r8]
			sent += tx_available;
    e230:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    e232:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    e236:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    e23a:	add	r3, r2
    e23c:	str	r3, [sp, #4]
			data += tx_available;
    e23e:	ldr	r3, [sp, #8]
    e240:	add	r3, r2
    e242:	str	r3, [sp, #8]
    e244:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    e246:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    e24a:	bne.n	e18e <usb_serial_write.part.1+0x26>
    e24c:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    e24e:	add	sp, #20
    e250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e254:	ldr	r2, [pc, #80]	; (e2a8 <usb_serial_write.part.1+0x140>)
    e256:	ldrb	r4, [r2, #0]
    e258:	mov	r2, r3
    e25a:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e25e:	lsls	r4, r4, #8
    e260:	ldr	r1, [pc, #80]	; (e2b4 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    e262:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e264:	add	r0, r4
    e266:	add	r0, r1
		if (size >= tx_available) {
    e268:	bcs.n	e1f8 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    e26a:	ldr	r1, [sp, #8]
    e26c:	mov	r2, fp
    e26e:	str	r3, [sp, #12]
    e270:	bl	df9c <memcpy>
			tx_available -= size;
    e274:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e276:	mov.w	r1, #3221225472	; 0xc0000000
    e27a:	ldr	r2, [pc, #60]	; (e2b8 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    e27c:	rsb	r3, fp, r3
    e280:	strh.w	r3, [r8]
    e284:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e286:	str.w	r1, [r2, #132]	; 0x84
    e28a:	add	r3, fp
    e28c:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    e28e:	add	sp, #20
    e290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    e294:	movs	r3, #1
				return sent;
    e296:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    e298:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    e29a:	add	sp, #20
    e29c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    e2a0:	mov	r0, r1
    e2a2:	b.n	e24e <usb_serial_write.part.1+0xe6>
    e2a4:	.word	0x2000dd18
    e2a8:	.word	0x2000da8d
    e2ac:	.word	0x2000dbe0
    e2b0:	.word	0x2000dcc0
    e2b4:	.word	0x2000d38c
    e2b8:	.word	0x402e0000
    e2bc:	.word	0x2000dbc0
    e2c0:	.word	0x2000dcf0

0000e2c4 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    e2c4:	bx	lr
    e2c6:	nop

0000e2c8 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e2c8:	movs	r1, #0
    e2ca:	movs	r2, #224	; 0xe0
    e2cc:	ldr	r0, [pc, #128]	; (e350 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    e2ce:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    e2d0:	mov	r4, r1
    e2d2:	ldr	r6, [pc, #128]	; (e354 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e2d4:	ldr	r5, [pc, #128]	; (e358 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e2d6:	bl	10f7c <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    e2da:	ldr	r7, [pc, #128]	; (e35c <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e2dc:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    e2de:	ldr	r3, [pc, #128]	; (e360 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e2e0:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    e2e2:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e2e4:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    e2e6:	ldr	r6, [pc, #124]	; (e364 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    e2e8:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e2ea:	bl	10f7c <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    e2ee:	mov	r3, r4
    e2f0:	mov	r2, r4
    e2f2:	movs	r1, #16
    e2f4:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    e2f6:	str	r4, [r7, #0]
    e2f8:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    e2fa:	str	r4, [r6, #0]
    e2fc:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    e2fe:	bl	ee90 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    e302:	mov	r2, r4
    e304:	ldr	r3, [pc, #96]	; (e368 <usb_serial_configure+0xa0>)
    e306:	movs	r1, #64	; 0x40
    e308:	movs	r0, #3
    e30a:	bl	ee2c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    e30e:	mov	r3, r4
    e310:	mov	r2, r4
    e312:	movs	r1, #64	; 0x40
    e314:	movs	r0, #4
    e316:	bl	ee90 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    e31a:	mov	r3, r4
    e31c:	movs	r2, #64	; 0x40
    e31e:	mov	r0, r5
    e320:	ldr	r1, [pc, #72]	; (e36c <usb_serial_configure+0xa4>)
    e322:	bl	eef8 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    e326:	mov	r1, r5
    e328:	movs	r0, #3
    e32a:	bl	ef50 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    e32e:	ldr	r3, [pc, #64]	; (e370 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    e330:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    e332:	ldr	r1, [pc, #64]	; (e374 <usb_serial_configure+0xac>)
    e334:	ldr	r0, [pc, #64]	; (e378 <usb_serial_configure+0xb0>)
    e336:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    e338:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e33c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e340:	ldr.w	r2, [r3, #328]	; 0x148
    e344:	orr.w	r2, r2, #16777216	; 0x1000000
    e348:	str.w	r2, [r3, #328]	; 0x148
    e34c:	pop	{r3, r4, r5, r6, r7, pc}
    e34e:	nop
    e350:	.word	0x2000dbe0
    e354:	.word	0x2000da8d
    e358:	.word	0x2000db60
    e35c:	.word	0x2000db58
    e360:	.word	0x2000dbc0
    e364:	.word	0x2000db50
    e368:	.word	0x0000e0d1
    e36c:	.word	0x2000da90
    e370:	.word	0x402e0000
    e374:	.word	0x2000dcc4
    e378:	.word	0x0000e0f9

0000e37c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    e37c:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    e37e:	ldr	r5, [pc, #56]	; (e3b8 <usb_serial_getchar+0x3c>)
    e380:	ldr	r3, [pc, #56]	; (e3bc <usb_serial_getchar+0x40>)
    e382:	ldrh	r2, [r5, #0]
    e384:	ldrh	r0, [r3, #0]
    e386:	cmp	r2, r0
    e388:	bcs.n	e3b2 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    e38a:	adds	r3, r2, #1
    e38c:	ldr	r1, [pc, #48]	; (e3c0 <usb_serial_getchar+0x44>)
    e38e:	uxth	r3, r3
    e390:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    e392:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    e394:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    e396:	bls.n	e39c <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    e398:	mov	r0, r4
	}
	return -1;
}
    e39a:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    e39c:	movs	r3, #0
    e39e:	movs	r2, #64	; 0x40
    e3a0:	ldr	r0, [pc, #32]	; (e3c4 <usb_serial_getchar+0x48>)
    e3a2:	bl	eef8 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    e3a6:	ldr	r1, [pc, #28]	; (e3c4 <usb_serial_getchar+0x48>)
    e3a8:	movs	r0, #3
    e3aa:	bl	ef50 <usb_receive>
		}
		return c;
    e3ae:	mov	r0, r4
    e3b0:	pop	{r3, r4, r5, pc}
	}
	return -1;
    e3b2:	mov.w	r0, #4294967295
    e3b6:	pop	{r3, r4, r5, pc}
    e3b8:	.word	0x2000db50
    e3bc:	.word	0x2000db58
    e3c0:	.word	0x2000da90
    e3c4:	.word	0x2000db60

0000e3c8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    e3c8:	ldr	r3, [pc, #20]	; (e3e0 <usb_serial_peekchar+0x18>)
    e3ca:	ldr	r2, [pc, #24]	; (e3e4 <usb_serial_peekchar+0x1c>)
    e3cc:	ldrh	r3, [r3, #0]
    e3ce:	ldrh	r2, [r2, #0]
    e3d0:	cmp	r2, r3
    e3d2:	bls.n	e3da <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    e3d4:	ldr	r2, [pc, #16]	; (e3e8 <usb_serial_peekchar+0x20>)
    e3d6:	ldrb	r0, [r2, r3]
    e3d8:	bx	lr
	}

	return -1;
    e3da:	mov.w	r0, #4294967295
}
    e3de:	bx	lr
    e3e0:	.word	0x2000db50
    e3e4:	.word	0x2000db58
    e3e8:	.word	0x2000da90

0000e3ec <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    e3ec:	ldr	r2, [pc, #8]	; (e3f8 <usb_serial_available+0xc>)
    e3ee:	ldr	r3, [pc, #12]	; (e3fc <usb_serial_available+0x10>)
    e3f0:	ldrh	r0, [r2, #0]
    e3f2:	ldrh	r3, [r3, #0]
}
    e3f4:	subs	r0, r0, r3
    e3f6:	bx	lr
    e3f8:	.word	0x2000db58
    e3fc:	.word	0x2000db50

0000e400 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    e400:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    e402:	ldr	r3, [pc, #40]	; (e42c <usb_serial_flush_input+0x2c>)
    e404:	ldr	r4, [pc, #40]	; (e430 <usb_serial_flush_input+0x30>)
    e406:	ldrh	r5, [r3, #0]
    e408:	ldrh	r3, [r4, #0]
    e40a:	cmp	r3, r5
    e40c:	bcc.n	e410 <usb_serial_flush_input+0x10>
    e40e:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    e410:	movs	r3, #0
    e412:	ldr	r1, [pc, #32]	; (e434 <usb_serial_flush_input+0x34>)
    e414:	ldr	r0, [pc, #32]	; (e438 <usb_serial_flush_input+0x38>)
    e416:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    e418:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    e41a:	bl	eef8 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    e41e:	ldr	r1, [pc, #24]	; (e438 <usb_serial_flush_input+0x38>)
    e420:	movs	r0, #3
	}
}
    e422:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    e426:	b.w	ef50 <usb_receive>
    e42a:	nop
    e42c:	.word	0x2000db58
    e430:	.word	0x2000db50
    e434:	.word	0x2000da90
    e438:	.word	0x2000db60

0000e43c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e43c:	ldr	r3, [pc, #36]	; (e464 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    e43e:	push	{lr}
    e440:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e442:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    e444:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e448:	cbnz	r3, e454 <usb_serial_putchar+0x18>
    e44a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    e44e:	add	sp, #12
    e450:	ldr.w	pc, [sp], #4
    e454:	movs	r1, #1
    e456:	add.w	r0, sp, #7
    e45a:	bl	e168 <usb_serial_write.part.1>
    e45e:	add	sp, #12
    e460:	ldr.w	pc, [sp], #4
    e464:	.word	0x2000dcf0

0000e468 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e468:	ldr	r3, [pc, #16]	; (e47c <usb_serial_write+0x14>)
    e46a:	ldrb	r3, [r3, #0]
    e46c:	and.w	r2, r3, #255	; 0xff
    e470:	cbz	r3, e476 <usb_serial_write+0xe>
    e472:	b.w	e168 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    e476:	mov	r0, r2
    e478:	bx	lr
    e47a:	nop
    e47c:	.word	0x2000dcf0

0000e480 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    e480:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e484:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    e486:	ldr.w	r8, [pc, #64]	; e4c8 <usb_serial_write_buffer_free+0x48>
    e48a:	movs	r3, #1
    e48c:	ldr	r5, [pc, #48]	; (e4c0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    e48e:	mov	r7, r4
    e490:	ldr	r6, [pc, #48]	; (e4c4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    e492:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    e496:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e498:	mov	r0, r5
    e49a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    e49c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e49e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    e4a2:	beq.n	e4b0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e4a4:	bl	ef74 <usb_transfer_status>
    e4a8:	lsls	r3, r0, #24
    e4aa:	it	pl
    e4ac:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e4b0:	cmp	r4, #7
    e4b2:	bne.n	e496 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    e4b4:	movs	r3, #0
	return sum;
}
    e4b6:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    e4b8:	strb.w	r3, [r8]
	return sum;
}
    e4bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4c0:	.word	0x2000dbe0
    e4c4:	.word	0x2000da8d
    e4c8:	.word	0x2000da8c

0000e4cc <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    e4cc:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    e4ce:	ldr	r3, [pc, #80]	; (e520 <usb_serial_flush_output+0x54>)
    e4d0:	ldrb	r3, [r3, #0]
    e4d2:	cbz	r3, e4da <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    e4d4:	ldr	r4, [pc, #76]	; (e524 <usb_serial_flush_output+0x58>)
    e4d6:	ldrh	r2, [r4, #0]
    e4d8:	cbnz	r2, e4dc <usb_serial_flush_output+0x10>
    e4da:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e4dc:	ldr	r6, [pc, #72]	; (e528 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e4de:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    e4e2:	ldr	r5, [pc, #72]	; (e52c <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e4e4:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e4e6:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e4e8:	rsb	r2, r2, #256	; 0x100
    e4ec:	ldr	r0, [pc, #64]	; (e530 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e4ee:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e4f2:	ldr	r7, [pc, #64]	; (e534 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e4f4:	add.w	r1, r0, r1, lsl #8
    e4f8:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e4fa:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    e4fe:	bl	eef8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e502:	mov	r1, r5
    e504:	movs	r0, #4
    e506:	bl	ef28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e50a:	ldrb	r3, [r6, #0]
    e50c:	adds	r3, #1
    e50e:	uxtb	r3, r3
    e510:	cmp	r3, #6
    e512:	it	hi
    e514:	movhi	r3, #0
    e516:	strb	r3, [r6, #0]
	tx_available = 0;
    e518:	movs	r3, #0
    e51a:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    e51c:	strb	r3, [r7, #0]
    e51e:	pop	{r3, r4, r5, r6, r7, pc}
    e520:	.word	0x2000dcf0
    e524:	.word	0x2000dbc0
    e528:	.word	0x2000da8d
    e52c:	.word	0x2000dbe0
    e530:	.word	0x2000d38c
    e534:	.word	0x2000da8c

0000e538 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e538:	ldr	r2, [pc, #556]	; (e768 <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    e53a:	ldr	r3, [pc, #560]	; (e76c <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e53c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    e53e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    e542:	ldr	r5, [pc, #556]	; (e770 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    e544:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    e546:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    e548:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e54a:	bls.n	e588 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    e54c:	ldr	r3, [pc, #548]	; (e774 <set_arm_clock+0x23c>)
    e54e:	cmp	r0, r3
    e550:	bls.w	e754 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    e554:	ldr	r3, [pc, #544]	; (e778 <set_arm_clock+0x240>)
    e556:	movw	r6, #1300	; 0x514
    e55a:	ldr.w	lr, [pc, #600]	; e7b4 <set_arm_clock+0x27c>
    e55e:	add	r3, r0
    e560:	ldr	r5, [pc, #536]	; (e77c <set_arm_clock+0x244>)
    e562:	lsrs	r2, r3, #8
    e564:	umull	r3, r2, lr, r2
    e568:	lsrs	r3, r2, #7
    e56a:	add.w	r3, r3, r3, lsl #2
    e56e:	add.w	r2, r3, r3, lsl #2
    e572:	addw	r3, r2, #1250	; 0x4e2
    e576:	cmp	r3, r6
    e578:	it	cs
    e57a:	movcs	r3, r6
    e57c:	sub.w	r3, r3, #800	; 0x320
    e580:	umull	r3, r6, r5, r3
    e584:	lsrs	r6, r6, #3
    e586:	b.n	e590 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    e588:	cmp	r0, #25
    e58a:	ite	cc
    e58c:	movcc	r6, #6
    e58e:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e590:	ldr	r2, [pc, #472]	; (e76c <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e592:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e596:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e59a:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e59c:	orr.w	r3, r3, #192	; 0xc0
    e5a0:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e5a4:	bcs.n	e5bc <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    e5a6:	ldr	r3, [pc, #456]	; (e770 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    e5a8:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e5ac:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    e5ae:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    e5b0:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e5b2:	ldr	r3, [r2, #0]
    e5b4:	cmp	r3, #0
    e5b6:	bge.n	e5b2 <set_arm_clock+0x7a>
    e5b8:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    e5bc:	ands.w	r3, r4, #33554432	; 0x2000000
    e5c0:	bne.n	e620 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    e5c2:	ldr	r5, [pc, #444]	; (e780 <set_arm_clock+0x248>)
    e5c4:	ldr	r2, [pc, #444]	; (e784 <set_arm_clock+0x24c>)
    e5c6:	ldr.w	ip, [r5, #16]
    e5ca:	mov	r5, r2
    e5cc:	and.w	r2, ip, r2
    e5d0:	cmp	r2, r5
    e5d2:	itet	eq
    e5d4:	moveq.w	r3, #402653184	; 0x18000000
    e5d8:	movne.w	r2, #4096	; 0x1000
    e5dc:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    e5de:	eor.w	r5, r4, r3
    e5e2:	tst.w	r5, #939524096	; 0x38000000
    e5e6:	beq.n	e5f6 <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    e5e8:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    e5ec:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    e5f0:	ldr	r5, [pc, #376]	; (e76c <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    e5f2:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    e5f4:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    e5f6:	eor.w	r3, r1, r2
    e5fa:	tst.w	r3, #12288	; 0x3000
    e5fe:	beq.n	e612 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    e600:	ldr	r3, [pc, #360]	; (e76c <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    e602:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    e606:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    e608:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    e60a:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    e60c:	ldr	r3, [r2, #72]	; 0x48
    e60e:	lsls	r5, r3, #28
    e610:	bmi.n	e60c <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    e612:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    e616:	ldr	r2, [pc, #340]	; (e76c <set_arm_clock+0x234>)
    e618:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e61a:	ldr	r3, [r2, #72]	; 0x48
    e61c:	lsls	r1, r3, #26
    e61e:	bmi.n	e61a <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    e620:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    e622:	ldr	r5, [pc, #356]	; (e788 <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    e624:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    e626:	mul.w	r3, r1, r2
    e62a:	mul.w	r3, r0, r3
    e62e:	cmp	r3, r5
    e630:	bhi.n	e646 <set_arm_clock+0x10e>
		if (div_arm < 8) {
    e632:	cmp	r2, #7
    e634:	bhi.w	e740 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    e638:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    e63a:	mul.w	r3, r1, r2
    e63e:	mul.w	r3, r0, r3
    e642:	cmp	r3, r5
    e644:	bls.n	e632 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e646:	ldr	r0, [pc, #324]	; (e78c <set_arm_clock+0x254>)
    e648:	ldr	r5, [pc, #324]	; (e790 <set_arm_clock+0x258>)
    e64a:	add	r0, r3
    e64c:	umull	r3, r0, r5, r0
    e650:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    e652:	cmp	r3, #108	; 0x6c
    e654:	bhi.n	e74a <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    e656:	cmp	r3, #53	; 0x35
    e658:	bhi.n	e758 <set_arm_clock+0x220>
    e65a:	ldr.w	r8, [pc, #348]	; e7b8 <set_arm_clock+0x280>
    e65e:	movs	r3, #54	; 0x36
    e660:	ldr	r0, [pc, #304]	; (e794 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e662:	ldr.w	ip, [pc, #284]	; e780 <set_arm_clock+0x248>
    e666:	ldr	r5, [pc, #304]	; (e798 <set_arm_clock+0x260>)
    e668:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    e66c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e670:	and.w	r5, r9, r5
    e674:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    e676:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e67a:	beq.n	e694 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    e67c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    e680:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    e684:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    e686:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    e68a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    e68e:	ldr	r3, [r5, #0]
    e690:	cmp	r3, #0
    e692:	bge.n	e68e <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    e694:	ldr.w	ip, [pc, #212]	; e76c <set_arm_clock+0x234>
    e698:	subs	r2, #1
    e69a:	ldr.w	r3, [ip, #16]
    e69e:	and.w	r3, r3, #7
    e6a2:	cmp	r3, r2
    e6a4:	beq.n	e6b6 <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    e6a6:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    e6aa:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    e6ac:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    e6b0:	ldr	r3, [r5, #72]	; 0x48
    e6b2:	lsls	r3, r3, #15
    e6b4:	bmi.n	e6b0 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e6b6:	subs	r1, #1
    e6b8:	lsls	r1, r1, #10
    e6ba:	eor.w	r3, r4, r1
    e6be:	tst.w	r3, #7168	; 0x1c00
    e6c2:	beq.n	e6da <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    e6c4:	ldr	r3, [pc, #164]	; (e76c <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    e6c6:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    e6ca:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    e6ce:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    e6d0:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    e6d2:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    e6d4:	ldr	r3, [r2, #72]	; 0x48
    e6d6:	lsls	r1, r3, #30
    e6d8:	bmi.n	e6d4 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    e6da:	ldr	r3, [pc, #192]	; (e79c <set_arm_clock+0x264>)
    e6dc:	ldr	r1, [pc, #192]	; (e7a0 <set_arm_clock+0x268>)
    e6de:	add	r3, r0
    e6e0:	lsrs	r3, r3, #7
    e6e2:	umull	r3, r1, r1, r3
    e6e6:	lsrs	r1, r1, #12
    e6e8:	cmp	r1, #4
    e6ea:	it	cs
    e6ec:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    e6ee:	subs	r3, r1, #1
    e6f0:	lsls	r3, r3, #8
    e6f2:	eor.w	r2, r4, r3
    e6f6:	tst.w	r2, #768	; 0x300
    e6fa:	beq.n	e70a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    e6fc:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    e700:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    e704:	ldr	r2, [pc, #100]	; (e76c <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    e706:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    e708:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    e70a:	ldr	r3, [pc, #96]	; (e76c <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    e70c:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e710:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    e712:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e714:	ldr	r3, [r2, #72]	; 0x48
    e716:	lsls	r3, r3, #26
    e718:	bmi.n	e714 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    e71a:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    e71e:	ldr	r2, [pc, #132]	; (e7a4 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e720:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    e722:	ldr	r3, [pc, #132]	; (e7a8 <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    e724:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    e726:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e728:	bcs.n	e73c <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    e72a:	ldr	r3, [pc, #68]	; (e770 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    e72c:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e730:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    e732:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    e734:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e736:	ldr	r3, [r2, #0]
    e738:	cmp	r3, #0
    e73a:	bge.n	e736 <set_arm_clock+0x1fe>
	}

	return frequency;
}
    e73c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    e740:	cmp	r1, #4
    e742:	bhi.n	e646 <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    e744:	adds	r1, #1
				div_arm = 1;
    e746:	movs	r2, #1
    e748:	b.n	e626 <set_arm_clock+0xee>
    e74a:	ldr.w	r8, [pc, #112]	; e7bc <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    e74e:	movs	r3, #108	; 0x6c
    e750:	ldr	r0, [pc, #88]	; (e7ac <set_arm_clock+0x274>)
    e752:	b.n	e662 <set_arm_clock+0x12a>
    e754:	movs	r6, #18
    e756:	b.n	e590 <set_arm_clock+0x58>
    e758:	ldr	r0, [pc, #84]	; (e7b0 <set_arm_clock+0x278>)
    e75a:	ldr.w	r8, [pc, #100]	; e7c0 <set_arm_clock+0x288>
    e75e:	mul.w	r0, r0, r3
    e762:	orr.w	r8, r3, r8
    e766:	b.n	e662 <set_arm_clock+0x12a>
    e768:	.word	0x1f78a400
    e76c:	.word	0x400fc000
    e770:	.word	0x40080000
    e774:	.word	0x23c34600
    e778:	.word	0xdc3cba00
    e77c:	.word	0x51eb851f
    e780:	.word	0x400d8000
    e784:	.word	0x80003040
    e788:	.word	0x269fb1ff
    e78c:	.word	0x005b8d80
    e790:	.word	0x165e9f81
    e794:	.word	0x269fb200
    e798:	.word	0x8001307f
    e79c:	.word	0x08f0d17f
    e7a0:	.word	0x00e5109f
    e7a4:	.word	0x20000df8
    e7a8:	.word	0x20000df4
    e7ac:	.word	0x4d3f6400
    e7b0:	.word	0x00b71b00
    e7b4:	.word	0x004cb223
    e7b8:	.word	0x80002036
    e7bc:	.word	0x8000206c
    e7c0:	.word	0x80002000

0000e7c4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e7c4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    e7c6:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e7c8:	cbz	r3, e7d2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e7ca:	ldr	r3, [r2, #4]
    e7cc:	orr.w	r3, r3, #32768	; 0x8000
    e7d0:	str	r3, [r2, #4]
	}
	__disable_irq();
    e7d2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e7d4:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    e7d6:	cbz	r4, e800 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    e7d8:	ldr	r3, [pc, #64]	; (e81c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    e7da:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e7dc:	ldr.w	r4, [r3, #432]	; 0x1b0
    e7e0:	tst	r4, r1
    e7e2:	bne.n	e814 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e7e4:	ldr.w	r4, [r3, #320]	; 0x140
    e7e8:	orr.w	r4, r4, #16384	; 0x4000
    e7ec:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e7f0:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    e7f4:	ldr.w	r4, [r3, #320]	; 0x140
    e7f8:	lsls	r4, r4, #17
    e7fa:	bpl.n	e7e4 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e7fc:	tst	r1, r5
    e7fe:	bne.n	e814 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    e800:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    e802:	ldr	r4, [pc, #24]	; (e81c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    e804:	str	r2, [r0, #8]
	endpoint->status = 0;
    e806:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    e808:	ldr.w	r3, [r4, #432]	; 0x1b0
    e80c:	orrs	r1, r3
    e80e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e812:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    e814:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e816:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e818:	pop	{r4, r5}
    e81a:	bx	lr
    e81c:	.word	0x402e0000

0000e820 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e820:	push	{r3, r4, r5, lr}
    e822:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    e824:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    e826:	b.n	e836 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    e828:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    e82a:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    e82c:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    e82e:	ldr	r2, [r5, #52]	; 0x34
    e830:	mov	r3, r4
    e832:	cmp	r4, r2
    e834:	beq.n	e848 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    e836:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    e838:	cbz	r3, e848 <run_callbacks+0x28>
    e83a:	cmp	r3, #1
    e83c:	beq.n	e848 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    e83e:	ldr	r2, [r3, #4]
    e840:	lsls	r2, r2, #24
    e842:	bpl.n	e828 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    e844:	str	r3, [r5, #48]	; 0x30
			return;
    e846:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    e848:	movs	r3, #0
    e84a:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    e84c:	str	r3, [r5, #52]	; 0x34
    e84e:	pop	{r3, r4, r5, pc}

0000e850 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    e850:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    e852:	cbnz	r1, e886 <endpoint0_transmit.constprop.0+0x36>
    e854:	ldr	r4, [pc, #124]	; (e8d4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e856:	ldr	r3, [pc, #128]	; (e8d8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e858:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    e85a:	ldr	r0, [pc, #128]	; (e8dc <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e85c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e85e:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    e860:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e862:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    e864:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e866:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    e868:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    e86a:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e86e:	ldr	r5, [pc, #112]	; (e8e0 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    e870:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e874:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    e876:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e87a:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    e87c:	ldr.w	r3, [r2, #432]	; 0x1b0
    e880:	cmp	r3, #0
    e882:	bne.n	e87c <endpoint0_transmit.constprop.0+0x2c>
}
    e884:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e886:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e888:	ldr	r3, [pc, #88]	; (e8e4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e88a:	ldr	r5, [pc, #80]	; (e8dc <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e88c:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e88e:	ldr	r4, [pc, #68]	; (e8d4 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e890:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    e894:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e896:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e898:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e89a:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    e89e:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e8a0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e8a4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e8a6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e8aa:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e8ae:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    e8b2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e8b4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e8b6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e8ba:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e8be:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e8c2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e8c4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e8c6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e8ca:	ldr.w	r3, [r2, #432]	; 0x1b0
    e8ce:	cmp	r3, #0
    e8d0:	bne.n	e8ca <endpoint0_transmit.constprop.0+0x7a>
    e8d2:	b.n	e856 <endpoint0_transmit.constprop.0+0x6>
    e8d4:	.word	0x20010000
    e8d8:	.word	0x2000f020
    e8dc:	.word	0x402e0000
    e8e0:	.word	0x2000dcd0
    e8e4:	.word	0x2000f000

0000e8e8 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    e8e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    e8ec:	ldr	r4, [pc, #696]	; (eba8 <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    e8ee:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    e8f0:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    e8f4:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    e8f8:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    e8fc:	beq.n	e9bc <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e8fe:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e902:	cmp	r3, #0
    e904:	beq.n	e9b2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e906:	mov.w	r9, #65537	; 0x10001
    e90a:	ldr.w	fp, [pc, #700]	; ebc8 <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e90e:	mov	r6, r4
    e910:	ldr	r7, [pc, #664]	; (ebac <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e912:	mov	sl, r9
    e914:	ldr	r1, [r7, #40]	; 0x28
    e916:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    e918:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e91c:	ldr.w	r3, [r4, #320]	; 0x140
    e920:	orr.w	r3, r3, #8192	; 0x2000
    e924:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e928:	ldr.w	r3, [r4, #320]	; 0x140
    e92c:	lsls	r5, r3, #18
    e92e:	bpl.n	e91c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e930:	ldr.w	r3, [r6, #320]	; 0x140
    e934:	bic.w	r3, r3, #8192	; 0x2000
    e938:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e93c:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e940:	ldr.w	r3, [r4, #436]	; 0x1b4
    e944:	ands.w	r3, r3, #65537	; 0x10001
    e948:	bne.n	e940 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    e94a:	uxth	r0, r1
    e94c:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    e950:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    e954:	cmp	r0, r5
    e956:	bhi.w	ea7a <isr+0x192>
    e95a:	cmp.w	r0, #1664	; 0x680
    e95e:	bcs.w	ecc4 <isr+0x3dc>
    e962:	cmp.w	r0, #258	; 0x102
    e966:	beq.w	ebe4 <isr+0x2fc>
    e96a:	bhi.w	eb00 <isr+0x218>
    e96e:	cmp	r0, #128	; 0x80
    e970:	beq.w	eb8e <isr+0x2a6>
    e974:	cmp	r0, #130	; 0x82
    e976:	bne.w	eaf0 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    e97a:	uxth	r2, r2
    e97c:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e980:	cmp	r1, #7
    e982:	bhi.w	eaf0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e986:	lsls	r1, r1, #2
    e988:	ldr	r0, [pc, #548]	; (ebb0 <isr+0x2c8>)
		reply_buffer[0] = 0;
    e98a:	ldr	r5, [pc, #552]	; (ebb4 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e98c:	add	r0, r1
    e98e:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e990:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    e992:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    e994:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e996:	bpl.w	ed16 <isr+0x42e>
    e99a:	lsls	r2, r1, #15
    e99c:	bpl.n	e9a2 <isr+0xba>
			reply_buffer[0] = 1;
    e99e:	movs	r3, #1
    e9a0:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    e9a2:	movs	r1, #2
    e9a4:	ldr	r0, [pc, #524]	; (ebb4 <isr+0x2cc>)
    e9a6:	bl	e850 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e9aa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e9ae:	cmp	r3, #0
    e9b0:	bne.n	e914 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e9b2:	ldr	r2, [pc, #500]	; (eba8 <isr+0x2c0>)
    e9b4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    e9b8:	cmp	r3, #0
    e9ba:	bne.n	ea46 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    e9bc:	tst.w	r8, #64	; 0x40
    e9c0:	beq.n	e9f4 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e9c2:	ldr	r3, [pc, #484]	; (eba8 <isr+0x2c0>)
    e9c4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e9c8:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e9ca:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e9ce:	ldr.w	r1, [r3, #444]	; 0x1bc
    e9d2:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e9d6:	ldr.w	r4, [r2, #432]	; 0x1b0
    e9da:	ldr	r3, [pc, #460]	; (eba8 <isr+0x2c0>)
    e9dc:	cmp	r4, #0
    e9de:	bne.n	e9d6 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e9e0:	mov.w	r2, #4294967295
    e9e4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e9e8:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    e9ec:	bl	e2c4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    e9f0:	ldr	r3, [pc, #452]	; (ebb8 <isr+0x2d0>)
    e9f2:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    e9f4:	tst.w	r8, #16777216	; 0x1000000
    e9f8:	beq.n	ea02 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e9fa:	ldr	r3, [pc, #448]	; (ebbc <isr+0x2d4>)
    e9fc:	ldr	r3, [r3, #0]
    e9fe:	cbz	r3, ea02 <isr+0x11a>
    ea00:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    ea02:	tst.w	r8, #33554432	; 0x2000000
    ea06:	beq.n	ea10 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ea08:	ldr	r3, [pc, #436]	; (ebc0 <isr+0x2d8>)
    ea0a:	ldr	r3, [r3, #0]
    ea0c:	cbz	r3, ea10 <isr+0x128>
    ea0e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    ea10:	tst.w	r8, #4
    ea14:	beq.n	ea1c <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ea16:	ldr	r3, [pc, #400]	; (eba8 <isr+0x2c0>)
    ea18:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    ea1c:	ldr	r3, [pc, #392]	; (eba8 <isr+0x2c0>)
    ea1e:	ldr.w	r2, [r3, #328]	; 0x148
    ea22:	lsls	r2, r2, #24
    ea24:	bpl.n	ea40 <isr+0x158>
    ea26:	tst.w	r8, #128	; 0x80
    ea2a:	beq.n	ea40 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    ea2c:	ldr	r1, [pc, #404]	; (ebc4 <isr+0x2dc>)
    ea2e:	ldrb	r2, [r1, #0]
    ea30:	cmp	r2, #0
    ea32:	beq.w	ed04 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    ea36:	subs	r3, r2, #1
    ea38:	uxtb	r3, r3
    ea3a:	strb	r3, [r1, #0]
    ea3c:	cbnz	r3, ea40 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    ea3e:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    ea40:	add	sp, #12
    ea42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    ea46:	ldr	r1, [pc, #384]	; (ebc8 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    ea48:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    ea4c:	ldr	r0, [r1, #0]
    ea4e:	tst	r3, r0
    ea50:	bne.w	ed92 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    ea54:	ldr	r2, [pc, #352]	; (ebb8 <isr+0x2d0>)
    ea56:	ldr	r4, [r2, #0]
			if (completestatus) {
    ea58:	ands	r4, r3
    ea5a:	beq.n	e9bc <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    ea5c:	lsls	r6, r4, #29
    ea5e:	bmi.w	edcc <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    ea62:	lsls	r5, r4, #13
    ea64:	bmi.w	eddc <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    ea68:	lsls	r0, r4, #28
    ea6a:	bmi.w	edd4 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    ea6e:	lsls	r1, r4, #12
    ea70:	bpl.n	e9bc <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    ea72:	ldr	r0, [pc, #344]	; (ebcc <isr+0x2e4>)
    ea74:	bl	e820 <run_callbacks>
    ea78:	b.n	e9bc <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    ea7a:	movw	r5, #8225	; 0x2021
    ea7e:	cmp	r0, r5
    ea80:	beq.n	eae8 <isr+0x200>
    ea82:	bhi.n	eb4c <isr+0x264>
    ea84:	cmp.w	r0, #2176	; 0x880
    ea88:	beq.w	eca8 <isr+0x3c0>
    ea8c:	cmp.w	r0, #2304	; 0x900
    ea90:	bne.n	eaf0 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    ea92:	ubfx	r1, r1, #16, #8
    ea96:	ldr	r2, [pc, #312]	; (ebd0 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ea98:	ldr	r0, [pc, #312]	; (ebd4 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    ea9a:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ea9c:	ldr	r1, [pc, #312]	; (ebd8 <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    ea9e:	ldr	r2, [pc, #316]	; (ebdc <isr+0x2f4>)
    eaa0:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    eaa2:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    eaa6:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    eaaa:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    eaae:	bl	e2c8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eab2:	ldr	r2, [pc, #300]	; (ebe0 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eab4:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    eab6:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eab8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    eaba:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eabc:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eabe:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    eac0:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    eac4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eac6:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eac8:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eacc:	ldr	r2, [pc, #248]	; (ebc8 <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eace:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ead2:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    ead4:	ldr.w	r3, [r4, #432]	; 0x1b0
    ead8:	cmp	r3, #0
    eada:	bne.n	ead4 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eadc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eae0:	cmp	r3, #0
    eae2:	bne.w	e914 <isr+0x2c>
    eae6:	b.n	e9b2 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    eae8:	lsrs	r0, r2, #16
    eaea:	cmp	r0, #7
    eaec:	beq.w	ed1e <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    eaf0:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eaf4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eaf8:	cmp	r3, #0
    eafa:	bne.w	e914 <isr+0x2c>
    eafe:	b.n	e9b2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    eb00:	movw	r5, #770	; 0x302
    eb04:	cmp	r0, r5
    eb06:	beq.w	ec4e <isr+0x366>
    eb0a:	cmp.w	r0, #1280	; 0x500
    eb0e:	bne.n	eaf0 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb10:	ldr	r2, [pc, #204]	; (ebe0 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    eb12:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb14:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eb16:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    eb18:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb1a:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eb1c:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    eb20:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eb22:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eb26:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eb28:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    eb2c:	ldr.w	r3, [r4, #432]	; 0x1b0
    eb30:	cmp	r3, #0
    eb32:	bne.n	eb2c <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    eb34:	lsrs	r3, r1, #16
    eb36:	lsls	r3, r3, #25
    eb38:	orr.w	r3, r3, #16777216	; 0x1000000
    eb3c:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eb40:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eb44:	cmp	r3, #0
    eb46:	bne.w	e914 <isr+0x2c>
    eb4a:	b.n	e9b2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    eb4c:	movw	r3, #8737	; 0x2221
    eb50:	cmp	r0, r3
    eb52:	beq.n	ec3c <isr+0x354>
    eb54:	movw	r3, #8993	; 0x2321
    eb58:	cmp	r0, r3
    eb5a:	bne.n	eaf0 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb5c:	ldr	r3, [pc, #128]	; (ebe0 <isr+0x2f8>)
    eb5e:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    eb60:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb62:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    eb64:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    eb66:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eb68:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eb6c:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    eb6e:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    eb72:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eb74:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    eb76:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    eb7a:	ldr.w	r3, [r4, #432]	; 0x1b0
    eb7e:	cmp	r3, #0
    eb80:	bne.n	eb7a <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eb82:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eb86:	cmp	r3, #0
    eb88:	bne.w	e914 <isr+0x2c>
    eb8c:	b.n	e9b2 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    eb8e:	ldr	r2, [pc, #36]	; (ebb4 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    eb90:	movs	r1, #2
    eb92:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    eb94:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    eb96:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    eb98:	bl	e850 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eb9c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eba0:	cmp	r3, #0
    eba2:	bne.w	e914 <isr+0x2c>
    eba6:	b.n	e9b2 <isr+0xca>
    eba8:	.word	0x402e0000
    ebac:	.word	0x20010000
    ebb0:	.word	0x402e01c0
    ebb4:	.word	0x2000dce0
    ebb8:	.word	0x2000dcc8
    ebbc:	.word	0x2000dcc4
    ebc0:	.word	0x2000dccc
    ebc4:	.word	0x2000dcd4
    ebc8:	.word	0x2000dcd0
    ebcc:	.word	0x200101c0
    ebd0:	.word	0x2000dcf0
    ebd4:	.word	0x00cc0002
    ebd8:	.word	0x000200c8
    ebdc:	.word	0x00c80002
    ebe0:	.word	0x2000f020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    ebe4:	uxth	r2, r2
    ebe6:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    ebea:	cmp	r3, #7
    ebec:	bhi.n	eaf0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    ebee:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    ebf2:	mov.w	r3, r3, lsl #2
    ebf6:	ldr	r2, [pc, #492]	; (ede4 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ebf8:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    ebfc:	add	r2, r3
    ebfe:	ldr	r3, [r2, #0]
    ec00:	ite	ne
    ec02:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    ec06:	biceq.w	r3, r3, #1
    ec0a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ec0c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ec0e:	ldr	r3, [pc, #472]	; (ede8 <isr+0x500>)
    ec10:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ec12:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ec14:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ec16:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ec1a:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ec1c:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ec20:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ec22:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    ec24:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    ec28:	ldr.w	r3, [r4, #432]	; 0x1b0
    ec2c:	cmp	r3, #0
    ec2e:	bne.n	ec28 <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ec30:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ec34:	cmp	r3, #0
    ec36:	bne.w	e914 <isr+0x2c>
    ec3a:	b.n	e9b2 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ec3c:	ldr	r3, [pc, #428]	; (edec <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    ec3e:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ec42:	ldr	r2, [pc, #428]	; (edf0 <isr+0x508>)
    ec44:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    ec46:	ldr	r3, [pc, #428]	; (edf4 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ec48:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    ec4a:	strb	r1, [r3, #0]
    ec4c:	b.n	eb5c <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    ec4e:	uxth	r2, r2
    ec50:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    ec54:	cmp	r3, #7
    ec56:	bhi.w	eaf0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    ec5a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    ec5e:	mov.w	r3, r3, lsl #2
    ec62:	ldr	r2, [pc, #384]	; (ede4 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ec64:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    ec68:	add	r2, r3
    ec6a:	ldr	r3, [r2, #0]
    ec6c:	ite	ne
    ec6e:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ec72:	orreq.w	r3, r3, #1
    ec76:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ec78:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ec7a:	ldr	r3, [pc, #364]	; (ede8 <isr+0x500>)
    ec7c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ec7e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ec80:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ec82:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ec86:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ec88:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ec8c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ec8e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    ec90:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    ec94:	ldr.w	r3, [r4, #432]	; 0x1b0
    ec98:	cmp	r3, #0
    ec9a:	bne.n	ec94 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ec9c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eca0:	cmp	r3, #0
    eca2:	bne.w	e914 <isr+0x2c>
    eca6:	b.n	e9b2 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    eca8:	ldr	r2, [pc, #332]	; (edf8 <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ecaa:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ecac:	ldr	r3, [pc, #332]	; (edfc <isr+0x514>)
    ecae:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ecb0:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ecb2:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ecb4:	bl	e850 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ecb8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ecbc:	cmp	r3, #0
    ecbe:	bne.w	e914 <isr+0x2c>
    ecc2:	b.n	e9b2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ecc4:	ldr	r3, [pc, #312]	; (ee00 <isr+0x518>)
    ecc6:	ldr	r0, [r3, #4]
    ecc8:	cmp	r0, #0
    ecca:	beq.w	eaf0 <isr+0x208>
    ecce:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ecd0:	uxth.w	lr, r2
    ecd4:	b.n	ece0 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ecd6:	adds	r3, #12
    ecd8:	ldr	r0, [r3, #4]
    ecda:	cmp	r0, #0
    ecdc:	beq.w	eaf0 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ece0:	ldrh	r5, [r3, #0]
    ece2:	cmp	r5, r1
    ece4:	bne.n	ecd6 <isr+0x3ee>
    ece6:	ldrh	r5, [r3, #2]
    ece8:	cmp	r5, lr
    ecea:	bne.n	ecd6 <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    ecec:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ecee:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    ecf0:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    ecf2:	ite	eq
    ecf4:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    ecf6:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    ecf8:	cmp	r1, r2
    ecfa:	it	cs
    ecfc:	movcs	r1, r2
    ecfe:	bl	e850 <endpoint0_transmit.constprop.0>
    ed02:	b.n	e9aa <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    ed04:	ldr.w	r2, [r3, #328]	; 0x148
    ed08:	bic.w	r2, r2, #128	; 0x80
    ed0c:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    ed10:	add	sp, #12
    ed12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ed16:	lsls	r3, r1, #31
    ed18:	bpl.w	e9a2 <isr+0xba>
    ed1c:	b.n	e99e <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ed1e:	ldr	r5, [pc, #228]	; (ee04 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ed20:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    ed22:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ed24:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ed26:	ldr	r3, [pc, #224]	; (ee08 <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    ed28:	ldr	r1, [pc, #224]	; (ee0c <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ed2a:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    ed2c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ed2e:	ldr	r1, [pc, #224]	; (ee10 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ed30:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ed34:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ed36:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ed3a:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ed3e:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ed42:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ed46:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ed48:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ed4a:	sub.w	r0, r1, #4096	; 0x1000
    ed4e:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ed50:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ed54:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ed56:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ed58:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    ed5c:	ldr.w	r3, [r4, #432]	; 0x1b0
    ed60:	cmp	r3, #0
    ed62:	bne.n	ed5c <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    ed64:	ldr	r2, [pc, #128]	; (ede8 <isr+0x500>)
    ed66:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    ed68:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ed6a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ed6c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ed6e:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ed72:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ed74:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ed78:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ed7a:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ed7e:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ed80:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ed84:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    ed88:	ldr.w	r3, [r4, #432]	; 0x1b0
    ed8c:	cmp	r3, #0
    ed8e:	bne.n	ed88 <isr+0x4a0>
    ed90:	b.n	e9aa <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ed92:	ldr	r4, [pc, #112]	; (ee04 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ed94:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ed98:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ed9a:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ed9c:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ed9e:	cmp	r4, r0
    eda0:	bne.w	ea54 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    eda4:	ldr	r1, [pc, #108]	; (ee14 <isr+0x52c>)
    eda6:	ldr	r4, [pc, #112]	; (ee18 <isr+0x530>)
    eda8:	ldmia	r1, {r0, r1}
    edaa:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    edac:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    edae:	str	r0, [r4, #0]
    edb0:	strh	r1, [r4, #4]
    edb2:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    edb4:	bne.w	ea54 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    edb8:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    edbc:	movs	r4, #80	; 0x50
    edbe:	ldr	r0, [pc, #92]	; (ee1c <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    edc0:	orr.w	r1, r1, #128	; 0x80
    edc4:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    edc8:	strb	r4, [r0, #0]
    edca:	b.n	ea54 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    edcc:	ldr	r0, [pc, #80]	; (ee20 <isr+0x538>)
    edce:	bl	e820 <run_callbacks>
    edd2:	b.n	ea62 <isr+0x17a>
    edd4:	ldr	r0, [pc, #76]	; (ee24 <isr+0x53c>)
    edd6:	bl	e820 <run_callbacks>
    edda:	b.n	ea6e <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    eddc:	ldr	r0, [pc, #72]	; (ee28 <isr+0x540>)
    edde:	bl	e820 <run_callbacks>
    ede2:	b.n	ea68 <isr+0x180>
    ede4:	.word	0x402e01c0
    ede8:	.word	0x2000f020
    edec:	.word	0x2000dd18
    edf0:	.word	0x2000e5ac
    edf4:	.word	0x2000dcc1
    edf8:	.word	0x2000dcf0
    edfc:	.word	0x2000dce0
    ee00:	.word	0x20000840
    ee04:	.word	0x2000dcd8
    ee08:	.word	0x2000f000
    ee0c:	.word	0x00078080
    ee10:	.word	0x2000fce8
    ee14:	.word	0x2000dce8
    ee18:	.word	0x2000e5a4
    ee1c:	.word	0x2000dcd4
    ee20:	.word	0x20010100
    ee24:	.word	0x20010180
    ee28:	.word	0x20010140

0000ee2c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee2c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee2e:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ee32:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee36:	ite	ne
    ee38:	movne	r7, #0
    ee3a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee3e:	cmp	r2, #2
    ee40:	bls.n	ee46 <usb_config_rx+0x1a>
    ee42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ee46:	mov.w	sl, r0, lsl #7
    ee4a:	ldr.w	r9, [pc, #64]	; ee8c <usb_config_rx+0x60>
    ee4e:	mov	r5, r1
    ee50:	mov	r4, r0
    ee52:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ee56:	movs	r1, #0
    ee58:	movs	r2, #64	; 0x40
    ee5a:	mov	r8, r3
    ee5c:	mov	r0, r6
    ee5e:	bl	10f7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ee62:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ee64:	orr.w	r1, r7, r5, lsl #16
    ee68:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ee6c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ee70:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ee72:	cmp.w	r8, #0
    ee76:	beq.n	ee42 <usb_config_rx+0x16>
    ee78:	ldr	r3, [pc, #12]	; (ee88 <usb_config_rx+0x5c>)
    ee7a:	lsls	r0, r4
    ee7c:	ldr	r4, [r3, #0]
    ee7e:	orrs	r0, r4
    ee80:	str	r0, [r3, #0]
    ee82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee86:	nop
    ee88:	.word	0x2000dcc8
    ee8c:	.word	0x20010000

0000ee90 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee90:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee92:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ee96:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee9a:	ite	ne
    ee9c:	movne	r7, #0
    ee9e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    eea2:	cmp	r2, #2
    eea4:	bls.n	eeaa <usb_config_tx+0x1a>
    eea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    eeaa:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    eeac:	lsls	r5, r0, #7
    eeae:	ldr.w	r9, [pc, #68]	; eef4 <usb_config_tx+0x64>
    eeb2:	mov	r8, r1
    eeb4:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    eeb6:	movs	r1, #0
    eeb8:	mov	r4, r0
    eeba:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    eebc:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    eec0:	mov	r0, sl
    eec2:	bl	10f7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    eec6:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    eec8:	orr.w	r1, r7, r8, lsl #16
    eecc:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    eed0:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    eed4:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    eed8:	cmp	r6, #0
    eeda:	beq.n	eea6 <usb_config_tx+0x16>
    eedc:	add.w	r0, r4, #16
    eee0:	ldr	r3, [pc, #12]	; (eef0 <usb_config_tx+0x60>)
    eee2:	lsls	r2, r0
    eee4:	ldr	r0, [r3, #0]
    eee6:	orrs	r2, r0
    eee8:	str	r2, [r3, #0]
    eeea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eeee:	nop
    eef0:	.word	0x2000dcc8
    eef4:	.word	0x20010000

0000eef8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    eef8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    eefa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    eefc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    eefe:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ef02:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ef04:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ef06:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ef08:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ef0c:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ef10:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ef14:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ef18:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ef1a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ef1c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ef1e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ef20:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    ef22:	pop	{r4, r5, r6, r7}
    ef24:	bx	lr
    ef26:	nop

0000ef28 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ef28:	subs	r3, r0, #2
    ef2a:	cmp	r3, #2
    ef2c:	bls.n	ef30 <usb_transmit+0x8>
    ef2e:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ef30:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ef32:	ldr	r3, [pc, #24]	; (ef4c <usb_transmit+0x24>)
    ef34:	add.w	r4, r0, #16
    ef38:	movs	r5, #1
    ef3a:	mov	r2, r1
    ef3c:	add.w	r0, r3, r0, lsl #7
    ef40:	lsl.w	r1, r5, r4
}
    ef44:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ef46:	b.w	e7c4 <schedule_transfer>
    ef4a:	nop
    ef4c:	.word	0x20010040

0000ef50 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ef50:	subs	r3, r0, #2
    ef52:	cmp	r3, #2
    ef54:	bls.n	ef58 <usb_receive+0x8>
    ef56:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ef58:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ef5a:	ldr	r3, [pc, #20]	; (ef70 <usb_receive+0x20>)
    ef5c:	movs	r4, #1
    ef5e:	mov	r2, r1
    ef60:	lsl.w	r1, r4, r0
    ef64:	add.w	r0, r3, r0, lsl #7
}
    ef68:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ef6c:	b.w	e7c4 <schedule_transfer>
    ef70:	.word	0x20010000

0000ef74 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ef74:	ldr	r2, [pc, #32]	; (ef98 <usb_transfer_status+0x24>)
    ef76:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ef7a:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ef7c:	orr.w	r3, r3, #16384	; 0x4000
    ef80:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ef84:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ef86:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ef8a:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    ef8c:	tst.w	r3, #16384	; 0x4000
    ef90:	beq.n	ef7a <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    ef92:	mov	r0, r1
    ef94:	bx	lr
    ef96:	nop
    ef98:	.word	0x402e0000

0000ef9c <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    ef9c:	ldr	r3, [pc, #36]	; (efc4 <rtc_set+0x28>)
    ef9e:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    efa0:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    efa2:	bic.w	r2, r2, #1
    efa6:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    efa8:	ldr	r3, [r1, #8]
    efaa:	ldr	r2, [pc, #24]	; (efc4 <rtc_set+0x28>)
    efac:	lsls	r3, r3, #31
    efae:	bmi.n	efa8 <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    efb0:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    efb2:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    efb4:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    efb6:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    efb8:	ldr	r3, [r2, #8]
    efba:	orr.w	r3, r3, #1
    efbe:	str	r3, [r2, #8]
    efc0:	bx	lr
    efc2:	nop
    efc4:	.word	0x400d4000

0000efc8 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    efc8:	ldr	r3, [pc, #84]	; (f020 <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    efca:	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    efcc:	movs	r1, #1
    efce:	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    efd0:	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    efd2:	ldr	r7, [pc, #80]	; (f024 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    efd4:	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    efd6:	ldr	r5, [pc, #80]	; (f028 <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    efd8:	ldr	r4, [pc, #80]	; (f02c <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    efda:	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    efde:	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    efe2:	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    efe6:	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    efea:	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    efee:	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    eff2:	ldr	r3, [r2, #20]
    eff4:	lsls	r0, r3, #31
    eff6:	bmi.n	f000 <flash_wait+0x38>
			asm("nop");
    eff8:	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    effa:	ldr	r3, [r2, #20]
    effc:	lsls	r3, r3, #31
    effe:	bpl.n	eff8 <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    f000:	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f002:	ldr	r0, [pc, #28]	; (f020 <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    f004:	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f006:	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    f008:	bmi.n	efe2 <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    f00a:	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    f00c:	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    f00e:	orr.w	r3, r3, #1
    f012:	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    f014:	ldr	r3, [r2, #0]
    f016:	lsls	r3, r3, #31
    f018:	bmi.n	f014 <flash_wait+0x4c>
	__enable_irq();
    f01a:	cpsie	i
}
    f01c:	pop	{r4, r5, r6, r7}
    f01e:	bx	lr
    f020:	.word	0x402a8000
    f024:	.word	0x24010405
    f028:	.word	0x000f0001
    f02c:	.word	0x402a8100

0000f030 <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    f030:	push	{r3, r4, r5, r6, r7, lr}
    f032:	mov	r5, r1
{
	__disable_irq();
    f034:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f036:	ldr	r2, [pc, #176]	; (f0e8 <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    f038:	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f03a:	ldr	r6, [pc, #176]	; (f0ec <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    f03c:	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    f03e:	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f042:	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f046:	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f048:	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    f04a:	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f04c:	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    f050:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    f054:	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    f058:	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    f05a:	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    f05e:	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    f062:	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f066:	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f06a:	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    f06e:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    f072:	ldr	r2, [pc, #124]	; (f0f0 <flash_write.constprop.0+0xc0>)
    f074:	str	r3, [r2, #0]
		location += 32;
    f076:	adds	r3, #32
	} while (location < end_addr);
    f078:	cmp	r1, r3
    f07a:	bhi.n	f074 <flash_write.constprop.0+0x44>
	asm("dsb");
    f07c:	dsb	sy
	asm("isb");
    f080:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    f084:	ldr	r2, [pc, #96]	; (f0e8 <flash_write.constprop.0+0xb8>)
    f086:	ldr	r3, [r2, #20]
    f088:	ldr	r1, [pc, #92]	; (f0e8 <flash_write.constprop.0+0xb8>)
    f08a:	lsls	r7, r3, #31
    f08c:	bpl.n	f086 <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f08e:	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    f090:	ldr	r2, [pc, #96]	; (f0f4 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    f092:	ubfx	r0, r0, #0, #21
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    f096:	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    f09a:	ldr	r6, [pc, #92]	; (f0f8 <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    f09c:	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f09e:	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    f0a0:	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f0a4:	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    f0a6:	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    f0aa:	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    f0ae:	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    f0b2:	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f0b6:	str.w	r3, [r1, #176]	; 0xb0
    f0ba:	b.n	f0c0 <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    f0bc:	lsls	r6, r3, #25
    f0be:	bmi.n	f0d4 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    f0c0:	ldr	r3, [r4, #20]
    f0c2:	ldr	r1, [pc, #36]	; (f0e8 <flash_write.constprop.0+0xb8>)
    f0c4:	lsls	r0, r3, #31
    f0c6:	bpl.n	f0bc <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    f0c8:	movs	r3, #65	; 0x41
    f0ca:	str	r3, [r1, #20]
	flash_wait();
}
    f0cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    f0d0:	b.w	efc8 <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    f0d4:	cbz	r2, f0e0 <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    f0d6:	mov	r1, r5
    f0d8:	ldr	r0, [pc, #32]	; (f0fc <flash_write.constprop.0+0xcc>)
				src += wrlen;
    f0da:	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    f0dc:	bl	df9c <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    f0e0:	movs	r3, #64	; 0x40
    f0e2:	movs	r2, #0
    f0e4:	str	r3, [r4, #20]
    f0e6:	b.n	f0c0 <flash_write.constprop.0+0x90>
    f0e8:	.word	0x402a8000
    f0ec:	.word	0x5af05af0
    f0f0:	.word	0xe000ef5c
    f0f4:	.word	0x08180432
    f0f8:	.word	0x000f0002
    f0fc:	.word	0x402a8180

0000f100 <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    f100:	push	{r4, r5, r6, r7}
    f102:	ldr	r6, [pc, #56]	; (f13c <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    f104:	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    f108:	ldr	r4, [pc, #52]	; (f140 <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    f10a:	ldr	r7, [pc, #56]	; (f144 <eeprom_initialize+0x44>)
    f10c:	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    f110:	movs	r2, #0
    f112:	b.n	f11a <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    f114:	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    f116:	uxth	r2, r0
		} while (p < end);
    f118:	bls.n	f124 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    f11a:	ldrh.w	r1, [r3], #2
			index++;
    f11e:	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    f120:	cmp	r1, r5
    f122:	bne.n	f114 <eeprom_initialize+0x14>
    f124:	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    f128:	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    f12c:	cmp	r4, r7
    f12e:	bne.n	f10c <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    f130:	ldr	r3, [pc, #20]	; (f148 <eeprom_initialize+0x48>)
    f132:	movs	r2, #1
    f134:	strb	r2, [r3, #0]
}
    f136:	pop	{r4, r5, r6, r7}
    f138:	bx	lr
    f13a:	nop
    f13c:	.word	0x2000dcf2
    f140:	.word	0x601f1000
    f144:	.word	0x60200000
    f148:	.word	0x2000dd12

0000f14c <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    f14c:	cmp.w	r0, #1080	; 0x438
    f150:	bcc.n	f156 <eeprom_read_byte+0xa>
    f152:	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    f154:	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    f156:	ldr	r3, [pc, #84]	; (f1ac <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    f158:	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    f15a:	ldrb	r3, [r3, #0]
    f15c:	mov	r4, r0
    f15e:	cbz	r3, f1a2 <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    f160:	lsrs	r5, r4, #2
    f162:	ldr	r1, [pc, #76]	; (f1b0 <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f164:	ldr	r3, [pc, #76]	; (f1b4 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    f166:	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    f16a:	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    f16e:	ldr	r4, [pc, #72]	; (f1b8 <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    f170:	lsrs	r1, r1, #3
    f172:	rsb	r6, r1, r1, lsl #4
    f176:	mov	r2, r1
    f178:	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    f17a:	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    f17e:	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f180:	add	r3, r1
	end = p + sector_index[sector];
    f182:	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f186:	lsls	r3, r3, #12
	end = p + sector_index[sector];
    f188:	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    f18c:	cmp	r3, r5
    f18e:	bcs.n	f1a8 <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    f190:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    f194:	uxtb	r4, r1
    f196:	cmp	r2, r4
    f198:	it	eq
    f19a:	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    f19c:	cmp	r5, r3
    f19e:	bhi.n	f190 <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    f1a0:	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    f1a2:	bl	f100 <eeprom_initialize>
    f1a6:	b.n	f160 <eeprom_read_byte+0x14>
    f1a8:	pop	{r4, r5, r6, pc}
    f1aa:	nop
    f1ac:	.word	0x2000dd12
    f1b0:	.word	0x88888889
    f1b4:	.word	0x000601f0
    f1b8:	.word	0x2000dcf4

0000f1bc <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    f1bc:	cmp.w	r0, #1080	; 0x438
    f1c0:	bcs.w	f31c <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    f1c4:	ldr	r3, [pc, #380]	; (f344 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    f1c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    f1ca:	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    f1cc:	sub	sp, #268	; 0x10c
    f1ce:	mov	r9, r1
    f1d0:	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    f1d2:	cmp	r3, #0
    f1d4:	beq.w	f338 <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    f1d8:	mov.w	r3, r8, lsr #2
    f1dc:	ldr	r5, [pc, #360]	; (f348 <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    f1de:	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f1e2:	ldr	r7, [pc, #360]	; (f34c <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    f1e4:	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    f1e8:	ldr	r6, [pc, #356]	; (f350 <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    f1ea:	lsrs	r5, r5, #3
    f1ec:	rsb	r2, r5, r5, lsl #4
    f1f0:	mov	r8, r5
    f1f2:	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    f1f4:	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f1f8:	add	r7, r5
	end = p + sector_index[sector];
    f1fa:	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f1fe:	lsls	r7, r7, #12
	end = p + sector_index[sector];
    f200:	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    f204:	cmp	r7, r0
    f206:	bcs.w	f33e <eeprom_write_byte+0x182>
    f20a:	mov	r3, r7
    f20c:	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    f210:	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    f214:	uxtb	r1, r2
    f216:	cmp	r8, r1
    f218:	it	eq
    f21a:	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    f21e:	cmp	r0, r3
    f220:	bhi.n	f210 <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    f222:	cmp	r9, lr
    f224:	beq.n	f316 <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    f226:	cmp.w	r4, #2048	; 0x800
    f22a:	bcc.n	f31e <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    f22c:	add	r4, sp, #8
    f22e:	mov.w	r2, #256	; 0x100
    f232:	movs	r1, #255	; 0xff
    f234:	mov	r0, r4
    f236:	bl	10f7c <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    f23a:	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    f23e:	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    f240:	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    f244:	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    f246:	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    f248:	mov.w	r3, r3, lsr #8
    f24c:	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    f24e:	bhi.n	f240 <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    f250:	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    f254:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f256:	ldr	r3, [pc, #252]	; (f354 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    f258:	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f25a:	ldr	r0, [pc, #252]	; (f358 <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    f25c:	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    f260:	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f264:	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    f268:	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f26a:	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    f26c:	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    f270:	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    f274:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    f278:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    f27c:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    f280:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f284:	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f288:	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    f28c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    f290:	ldr	r2, [pc, #200]	; (f35c <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f292:	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    f294:	str	r3, [r2, #0]
		location += 32;
    f296:	adds	r3, #32
	} while (location < end_addr);
    f298:	cmp	r1, r3
    f29a:	bhi.n	f294 <eeprom_write_byte+0xd8>
	asm("dsb");
    f29c:	dsb	sy
	asm("isb");
    f2a0:	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    f2a4:	ldr	r1, [pc, #172]	; (f354 <eeprom_write_byte+0x198>)
    f2a6:	ldr	r3, [r1, #20]
    f2a8:	ldr	r2, [pc, #168]	; (f354 <eeprom_write_byte+0x198>)
    f2aa:	lsls	r0, r3, #31
    f2ac:	bpl.n	f2a6 <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    f2ae:	ldr	r3, [pc, #176]	; (f360 <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f2b0:	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    f2b2:	ldr.w	lr, [pc, #176]	; f364 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f2b6:	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    f2ba:	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    f2bc:	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f2be:	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    f2c0:	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    f2c4:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    f2c8:	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    f2cc:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    f2d0:	ldr	r3, [r1, #20]
    f2d2:	ldr	r2, [pc, #128]	; (f354 <eeprom_write_byte+0x198>)
    f2d4:	lsls	r3, r3, #31
    f2d6:	bpl.n	f2d0 <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f2d8:	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    f2da:	movs	r4, #0
    f2dc:	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    f2e0:	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    f2e2:	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    f2e4:	bl	efc8 <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    f2e8:	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    f2ec:	add.w	r0, r7, r8, lsl #1
    f2f0:	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    f2f4:	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    f2f6:	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    f2fa:	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    f2fe:	beq.n	f30c <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    f300:	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    f304:	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    f308:	bl	f030 <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    f30c:	cmp.w	r4, #256	; 0x100
    f310:	bne.n	f2e8 <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    f312:	strh.w	r8, [r6, r5, lsl #1]
	}
}
    f316:	add	sp, #268	; 0x10c
    f318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f31c:	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    f31e:	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    f322:	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    f324:	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    f326:	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    f32a:	bl	f030 <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    f32e:	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    f332:	add	sp, #268	; 0x10c
    f334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    f338:	bl	f100 <eeprom_initialize>
    f33c:	b.n	f1d8 <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    f33e:	mov.w	lr, #255	; 0xff
    f342:	b.n	f222 <eeprom_write_byte+0x66>
    f344:	.word	0x2000dd12
    f348:	.word	0x88888889
    f34c:	.word	0x000601f0
    f350:	.word	0x2000dcf4
    f354:	.word	0x402a8000
    f358:	.word	0x5af05af0
    f35c:	.word	0xe000ef5c
    f360:	.word	0x001ff000
    f364:	.word	0x08180420

0000f368 <eeprom_write_block>:

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    f368:	cbz	r2, f384 <eeprom_write_block+0x1c>
	eeprom_write_byte(p++, value >> 16);
	eeprom_write_byte(p, value >> 24);
}

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
    f36a:	push	{r4, r5, r6, lr}
    f36c:	mov	r5, r0
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    f36e:	mov	r4, r2
    f370:	mov	r0, r1
		eeprom_write_byte(p++, *src++);
    f372:	ldrb.w	r1, [r5], #1
    f376:	adds	r6, r0, #1
    f378:	bl	f1bc <eeprom_write_byte>

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    f37c:	subs	r4, #1
		eeprom_write_byte(p++, *src++);
    f37e:	mov	r0, r6

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    f380:	bne.n	f372 <eeprom_write_block+0xa>
    f382:	pop	{r4, r5, r6, pc}
    f384:	bx	lr
    f386:	nop

0000f388 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    f388:	cmp	r0, #0
    f38a:	beq.n	f432 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    f38c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f390:	mov	r9, r0
    f392:	sub	sp, #12
    f394:	ldr	r4, [pc, #156]	; (f434 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    f396:	movs	r0, #1
    f398:	ldr	r5, [pc, #156]	; (f438 <delay+0xb0>)
    f39a:	ldr	r6, [pc, #160]	; (f43c <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    f39c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    f3a0:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    f3a2:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    f3a4:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    f3a8:	cmp	r3, #0
    f3aa:	bne.n	f39c <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    f3ac:	ldr	r7, [pc, #144]	; (f440 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f3ae:	mov.w	lr, #1000	; 0x3e8
    f3b2:	ldr	r0, [pc, #144]	; (f444 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    f3b4:	ldr.w	ip, [r7]
    f3b8:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f3ba:	add.w	r7, r7, #1660944384	; 0x63000000
    f3be:	ldr	r3, [r0, #0]
    f3c0:	rsb	r1, r1, ip
    f3c4:	add.w	r7, r7, #1818624	; 0x1bc000
    f3c8:	addw	r7, r7, #3711	; 0xe7f
    f3cc:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    f3d0:	mov	sl, r7
    f3d2:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f3d4:	lsrs	r3, r3, #18
    f3d6:	udiv	r3, r1, r3
    f3da:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    f3de:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    f3e2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    f3e4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    f3e6:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    f3ea:	cmp	r3, #0
    f3ec:	bne.n	f3de <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    f3ee:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    f3f2:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f3f6:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    f3f8:	mul.w	r2, lr, r2
    f3fc:	rsb	r1, r1, ip
    f400:	umull	r3, lr, sl, r3
    f404:	rsb	r3, r8, r2
    f408:	mov.w	r2, lr, lsr #18
    f40c:	udiv	r1, r1, r2
    f410:	adds	r2, r1, r3
    f412:	cmp.w	r2, #1000	; 0x3e8
    f416:	bcc.n	f428 <delay+0xa0>
			if (--msec == 0) return;
    f418:	subs.w	r9, r9, #1
			start += 1000;
    f41c:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    f420:	bne.n	f3de <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    f422:	add	sp, #12
    f424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f428:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    f42a:	bl	fd54 <yield>
	}
    f42e:	ldr	r0, [sp, #4]
    f430:	b.n	f3de <delay+0x56>
    f432:	bx	lr
    f434:	.word	0x20010280
    f438:	.word	0x2000dd18
    f43c:	.word	0x2000dd14
    f440:	.word	0xe0001004
    f444:	.word	0x20000df8

0000f448 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    f448:	push	{r4, r5, r6}
    f44a:	ldr	r3, [pc, #56]	; (f484 <micros+0x3c>)
    f44c:	movs	r6, #1
    f44e:	ldr	r5, [pc, #56]	; (f488 <micros+0x40>)
    f450:	ldr	r0, [pc, #56]	; (f48c <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    f452:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    f456:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    f458:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    f45a:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    f45e:	cmp	r2, #0
    f460:	bne.n	f452 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    f462:	ldr	r3, [pc, #44]	; (f490 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    f464:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f468:	ldr	r2, [pc, #40]	; (f494 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    f46a:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    f46c:	ldr	r5, [pc, #40]	; (f498 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    f46e:	ldr	r2, [r2, #0]
	return usec;
    f470:	subs	r4, r3, r4
    f472:	umull	r2, r3, r5, r2
    f476:	lsrs	r3, r3, #18
    f478:	udiv	r4, r4, r3
}
    f47c:	mla	r0, r0, r1, r4
    f480:	pop	{r4, r5, r6}
    f482:	bx	lr
    f484:	.word	0x20010280
    f488:	.word	0x2000dd18
    f48c:	.word	0x2000dd14
    f490:	.word	0xe0001004
    f494:	.word	0x20000df8
    f498:	.word	0x431bde83

0000f49c <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    f49c:	lsls	r0, r0, #4
    f49e:	ldr	r3, [pc, #28]	; (f4bc <digitalWrite.part.0+0x20>)
    f4a0:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    f4a2:	ldr	r3, [r3, r0]
	mask = p->mask;
    f4a4:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    f4a6:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    f4a8:	tst	r0, r2
    f4aa:	beq.n	f4b2 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    f4ac:	cbnz	r1, f4b4 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    f4ae:	str.w	r2, [r3, #136]	; 0x88
    f4b2:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    f4b4:	str.w	r2, [r3, #132]	; 0x84
    f4b8:	bx	lr
    f4ba:	nop
    f4bc:	.word	0x200005c0

0000f4c0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    f4c0:	cmp	r0, #39	; 0x27
    f4c2:	bhi.n	f4c8 <digitalWrite+0x8>
    f4c4:	b.w	f49c <digitalWrite.part.0>
    f4c8:	bx	lr
    f4ca:	nop

0000f4cc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    f4cc:	cmp	r0, #39	; 0x27
    f4ce:	bhi.n	f50a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    f4d0:	lsls	r0, r0, #4
    f4d2:	ldr	r2, [pc, #104]	; (f53c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    f4d4:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    f4d6:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    f4da:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    f4dc:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    f4de:	beq.n	f50c <pinMode+0x40>
    f4e0:	cmp	r1, #4
    f4e2:	beq.n	f50c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    f4e4:	ldr	r4, [r3, #12]
    f4e6:	ldr	r2, [r0, #4]
    f4e8:	bic.w	r2, r2, r4
    f4ec:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f4ee:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    f4f0:	cbz	r1, f52e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    f4f2:	cmp	r1, #2
    f4f4:	beq.n	f534 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    f4f6:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f4f8:	ldr	r3, [r3, #4]
}
    f4fa:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    f4fe:	ite	eq
    f500:	ldreq	r1, [pc, #60]	; (f540 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    f502:	ldrne	r1, [pc, #64]	; (f544 <pinMode+0x78>)
    f504:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    f506:	movs	r2, #21
    f508:	str	r2, [r3, #0]
}
    f50a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    f50c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    f50e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    f510:	ldr	r4, [r0, #4]
    f512:	orr.w	r2, r2, r4
    f516:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f518:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    f51a:	beq.n	f52e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    f51c:	movw	r1, #2104	; 0x838
    f520:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f522:	ldr	r3, [r3, #4]
    f524:	movs	r2, #21
}
    f526:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f52a:	str	r2, [r3, #0]
}
    f52c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f52e:	movs	r1, #56	; 0x38
    f530:	str	r1, [r2, #0]
    f532:	b.n	f522 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f534:	ldr	r1, [pc, #16]	; (f548 <pinMode+0x7c>)
    f536:	str	r1, [r2, #0]
    f538:	b.n	f522 <pinMode+0x56>
    f53a:	nop
    f53c:	.word	0x200005c0
    f540:	.word	0x00013038
    f544:	.word	0x00010038
    f548:	.word	0x0001f038

0000f54c <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f54c:	ldr	r2, [pc, #72]	; (f598 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f54e:	ldr	r3, [pc, #76]	; (f59c <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f550:	ldr.w	r0, [r2, #544]	; 0x220
    f554:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f558:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    f55a:	push	{r4, lr}
    f55c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f55e:	bhi.n	f566 <usb_init_serialnumber+0x1a>
    f560:	add.w	r0, r0, r0, lsl #2
    f564:	lsls	r0, r0, #1
    f566:	ldr	r4, [pc, #56]	; (f5a0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    f568:	add	r1, sp, #4
    f56a:	movs	r2, #10
    f56c:	bl	10304 <ultoa>
    f570:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    f572:	movs	r3, #0
    f574:	mov	r0, r4
		char c = buf[i];
    f576:	ldrb.w	r2, [r1], #1
    f57a:	adds	r3, #1
		if (!c) break;
    f57c:	cbz	r2, f58e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    f57e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    f580:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    f584:	bne.n	f576 <usb_init_serialnumber+0x2a>
    f586:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f588:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    f58a:	add	sp, #16
    f58c:	pop	{r4, pc}
    f58e:	lsls	r3, r3, #1
    f590:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f592:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    f594:	add	sp, #16
    f596:	pop	{r4, pc}
    f598:	.word	0x401f4400
    f59c:	.word	0x0098967f
    f5a0:	.word	0x20000e94

0000f5a4 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    f5a4:	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    f5a8:	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    f5ac:	uxth	r3, r3
	tail = tx_buffer_tail_;
    f5ae:	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    f5b0:	cmp	r3, r2
    f5b2:	bcs.n	f5ba <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    f5b4:	subs	r0, r2, #1
    f5b6:	subs	r0, r0, r3
}
    f5b8:	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    f5ba:	ldr	r0, [r0, #52]	; 0x34
    f5bc:	subs	r0, #1
    f5be:	add	r0, r2
    f5c0:	subs	r0, r0, r3
    f5c2:	bx	lr

0000f5c4 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    f5c4:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    f5c8:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    f5cc:	uxth	r2, r2
	tail = rx_buffer_tail_;
    f5ce:	uxth	r3, r3
	if (head >= tail) return head - tail;
    f5d0:	cmp	r2, r3
    f5d2:	bcs.n	f5dc <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    f5d4:	ldr	r0, [r0, #56]	; 0x38
    f5d6:	add	r0, r2
    f5d8:	subs	r0, r0, r3
}
    f5da:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    f5dc:	subs	r0, r2, r3
    f5de:	bx	lr

0000f5e0 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    f5e0:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    f5e4:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    f5e8:	uxth	r2, r2
	tail = rx_buffer_tail_;
    f5ea:	uxth	r3, r3
	if (head == tail) return -1;
    f5ec:	cmp	r2, r3
    f5ee:	beq.n	f612 <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f5f0:	adds	r3, #1
    f5f2:	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    f5f4:	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f5f6:	cmp	r3, r1
    f5f8:	it	cs
    f5fa:	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    f5fc:	cmp	r3, r2
    f5fe:	bcc.n	f60a <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    f600:	subs	r3, r3, r2
    f602:	ldr	r2, [r0, #36]	; 0x24
    f604:	ldrb	r0, [r2, r3]
    f606:	uxtb	r0, r0
    f608:	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    f60a:	ldr	r2, [r0, #32]
    f60c:	ldrb	r0, [r2, r3]
    f60e:	uxtb	r0, r0
    f610:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    f612:	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    f616:	bx	lr

0000f618 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    f618:	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    f61c:	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    f620:	uxth	r1, r1
	tail = rx_buffer_tail_;
    f622:	uxth	r3, r3
	if (head == tail) return -1;
    f624:	cmp	r1, r3
    f626:	beq.n	f67c <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f628:	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    f62a:	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f62c:	ldr	r4, [r0, #56]	; 0x38
    f62e:	cmp	r3, r4
    f630:	bcs.n	f662 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    f632:	ldr	r2, [r0, #48]	; 0x30
    f634:	uxth	r6, r3
    f636:	cmp	r3, r2
    f638:	bcs.n	f66c <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    f63a:	ldr	r2, [r0, #32]
    f63c:	ldrb	r2, [r2, r3]
    f63e:	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    f640:	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    f642:	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    f646:	cbz	r5, f676 <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    f648:	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    f64a:	it	hi
    f64c:	addhi	r1, r1, r4
    f64e:	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    f650:	ldr	r1, [r0, #60]	; 0x3c
    f652:	cmp	r3, r1
    f654:	bhi.n	f676 <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    f656:	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    f658:	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    f65a:	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    f65e:	pop	{r4, r5, r6}
    f660:	bx	lr
    f662:	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    f664:	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    f666:	mov	r3, r6
	if (tail < rx_buffer_size_) {
    f668:	cmp	r3, r2
    f66a:	bcc.n	f63a <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    f66c:	subs	r2, r3, r2
    f66e:	ldr	r5, [r0, #36]	; 0x24
    f670:	ldrb	r2, [r5, r2]
    f672:	uxtb	r2, r2
    f674:	b.n	f640 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    f676:	mov	r0, r2
}	
    f678:	pop	{r4, r5, r6}
    f67a:	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    f67c:	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    f680:	bx	lr
    f682:	nop

0000f684 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    f684:	ldrb.w	r3, [r0, #68]	; 0x44
    f688:	cbz	r3, f69c <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    f68a:	push	{r4, lr}
    f68c:	mov	r4, r0
	while (transmitting_) yield(); // wait
    f68e:	bl	fd54 <yield>
    f692:	ldrb.w	r3, [r4, #68]	; 0x44
    f696:	cmp	r3, #0
    f698:	bne.n	f68e <HardwareSerial::flush()+0xa>
    f69a:	pop	{r4, pc}
    f69c:	bx	lr
    f69e:	nop

0000f6a0 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    f6a0:	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    f6a4:	cbnz	r0, f6d6 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f6a6:	mrs	r3, PRIMASK
	if (primask) return 0;
    f6aa:	cbnz	r3, f6c0 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f6ac:	mrs	r2, IPSR
	if (ipsr) {
    f6b0:	cbnz	r2, f6c2 <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    f6b2:	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    f6b6:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    f6ba:	cbz	r0, f6d2 <nvic_execution_priority()+0x32>
    f6bc:	cmp	r0, r3
    f6be:	bcs.n	f6d2 <nvic_execution_priority()+0x32>
	return priority;
}
    f6c0:	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    f6c2:	cmp	r2, #15
    f6c4:	bls.n	f6b6 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    f6c6:	ldr	r3, [pc, #20]	; (f6dc <nvic_execution_priority()+0x3c>)
    f6c8:	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    f6ca:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    f6ce:	cmp	r0, #0
    f6d0:	bne.n	f6bc <nvic_execution_priority()+0x1c>
    f6d2:	mov	r0, r3
    f6d4:	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    f6d6:	mov.w	r0, #4294967295
    f6da:	b.n	f6c0 <nvic_execution_priority()+0x20>
    f6dc:	.word	0xe000e3f0

0000f6e0 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    f6e0:	vmov	s15, r1
    f6e4:	vldr	s14, [pc, #528]	; f8f8 <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    f6e8:	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    f6ea:	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    f6ee:	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    f6f2:	vldr	s12, [pc, #520]	; f8fc <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    f6f6:	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    f6f8:	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    f6fc:	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    f6fe:	movs	r6, #1
    f700:	movw	r5, #8191	; 0x1fff
    f704:	b.n	f742 <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    f706:	cmp	r3, r5
    f708:	it	ge
    f70a:	movge	r3, r5
    f70c:	vmov	s15, r3
    f710:	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    f714:	vsub.f32	s13, s13, s14
    f718:	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    f71c:	vcmpe.f32	s15, #0.0
    f720:	vmrs	APSR_nzcv, fpscr
    f724:	it	mi
    f726:	vnegmi.f32	s15, s15
		if (err <= besterr) {
    f72a:	vcmpe.f32	s15, s12
    f72e:	vmrs	APSR_nzcv, fpscr
    f732:	bhi.n	f73c <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    f734:	vmov.f32	s12, s15
    f738:	mov	r4, r1
			bestdiv = divint;
    f73a:	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    f73c:	adds	r1, #1
    f73e:	cmp	r1, #33	; 0x21
    f740:	beq.n	f766 <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    f742:	vmov	s15, r1
    f746:	vcvt.f32.s32	s15, s15
    f74a:	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    f74e:	vadd.f32	s15, s14, s10
    f752:	vcvt.s32.f32	s15, s15
    f756:	vmov	r3, s15
		if (divint < 1) divint = 1;
    f75a:	cmp	r3, #0
    f75c:	bgt.n	f706 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    f75e:	vmov.f32	s13, #112	; 0x3f800000  1.0
    f762:	movs	r3, #1
    f764:	b.n	f714 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    f766:	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    f768:	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    f76a:	ldr	r5, [r0, #56]	; 0x38
    f76c:	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    f770:	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    f774:	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    f778:	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    f77a:	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    f77e:	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    f782:	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    f786:	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    f78a:	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    f78e:	ldr.w	lr, [r1, #12]
    f792:	ldr	r3, [r1, #16]
    f794:	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    f798:	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    f79a:	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    f79e:	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f7a0:	ldr	r5, [pc, #348]	; (f900 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    f7a2:	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f7a6:	ldrb	r3, [r0, #24]
    f7a8:	ldr	r7, [pc, #344]	; (f904 <HardwareSerial::begin(unsigned long, unsigned short)+0x224>)
    f7aa:	add.w	r3, r1, r3, lsl #4
    f7ae:	ldrb	r3, [r3, #20]
    f7b0:	add.w	r3, r5, r3, lsl #4
    f7b4:	ldr	r3, [r3, #8]
    f7b6:	str	r7, [r3, #0]
    f7b8:	ldrb	r3, [r0, #24]
    f7ba:	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    f7be:	ldrb	r7, [r3, #20]
    f7c0:	ldr.w	lr, [r3, #24]
    f7c4:	add.w	r3, r5, r7, lsl #4
    f7c8:	ldr	r3, [r3, #4]
    f7ca:	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    f7ce:	ldrb	r3, [r0, #24]
    f7d0:	add.w	r3, r1, r3, lsl #4
    f7d4:	ldr	r7, [r3, #28]
    f7d6:	cbz	r7, f7dc <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    f7d8:	ldr	r3, [r3, #32]
    f7da:	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    f7dc:	ldrb.w	lr, [r0, #25]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f7e0:	subs	r3, r4, #1
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    f7e2:	movs	r7, #217	; 0xd9
    f7e4:	add.w	r4, r1, lr, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;
    f7e8:	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f7ec:	lsls	r3, r3, #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    f7ee:	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f7f2:	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    f7f6:	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f7fa:	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    f7fc:	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    f7fe:	ldr	r4, [r4, #8]
    f800:	adds	r6, #16
    f802:	str	r7, [r4, #0]
    f804:	ldrb	r4, [r0, #25]

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    f806:	ldr	r7, [r1, #4]
    f808:	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    f80c:	ldrb.w	r1, [r4, #52]	; 0x34
    f810:	ldr.w	ip, [r4, #56]	; 0x38
    f814:	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f818:	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    f81a:	ldr	r4, [r5, #4]
    f81c:	str.w	ip, [r4]
    f820:	ldr	r4, [pc, #228]	; (f908 <HardwareSerial::begin(unsigned long, unsigned short)+0x228>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    f822:	str	r3, [r1, #16]
	port->PINCFG = 0;
    f824:	str.w	lr, [r1, #12]
    f828:	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    f82c:	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    f82e:	movs	r5, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    f830:	ldr	r1, [pc, #216]	; (f90c <HardwareSerial::begin(unsigned long, unsigned short)+0x22c>)
    f832:	ldrb	r4, [r3, #1]
    f834:	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    f838:	ldr	r6, [pc, #212]	; (f910 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>)
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    f83a:	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    f83c:	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    f83e:	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    f840:	ldrb	r3, [r4, #1]
    f842:	and.w	r0, r3, #31
    f846:	asrs	r3, r3, #5
    f848:	lsl.w	r0, r5, r0
    f84c:	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    f850:	ldr	r3, [r1, #40]	; 0x28
    f852:	lsrs	r3, r3, #2
    f854:	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    f858:	cmp	r3, #15
    f85a:	bhi.n	f8de <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
    f85c:	asrs	r3, r5
    f85e:	and.w	r3, r3, #3
    f862:	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    f864:	ldr	r3, [r1, #40]	; 0x28
    f866:	lsls	r3, r3, #2
    f868:	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    f86c:	cmp	r3, #15
    f86e:	bhi.n	f8d8 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    f870:	lsls	r3, r3, #15
    f872:	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    f876:	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    f878:	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    f87a:	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    f87e:	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    f880:	ldr	r3, [r1, #40]	; 0x28
    f882:	orr.w	r3, r3, #136	; 0x88
    f886:	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    f888:	bmi.n	f8e2 <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    f88a:	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    f88e:	and.w	r0, r2, #15
    f892:	cmp	r0, #4
    f894:	it	eq
    f896:	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    f89a:	lsls	r6, r2, #26
    f89c:	it	mi
    f89e:	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    f8a2:	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    f8a4:	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    f8a6:	bpl.n	f8b0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1d0>
    f8a8:	ldr	r3, [r1, #16]
    f8aa:	orr.w	r3, r3, #536870912	; 0x20000000
    f8ae:	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    f8b0:	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    f8b2:	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    f8b4:	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    f8b8:	it	mi
    f8ba:	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    f8be:	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    f8c0:	lsls	r3, r2, #23
    f8c2:	bpl.n	f8cc <HardwareSerial::begin(unsigned long, unsigned short)+0x1ec>
    f8c4:	ldr	r3, [r1, #16]
    f8c6:	orr.w	r3, r3, #8192	; 0x2000
    f8ca:	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    f8cc:	ldrb	r2, [r4, #0]
    f8ce:	ldr	r3, [pc, #68]	; (f914 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>)
    f8d0:	ldr.w	r1, [r3, r2, lsl #2]
    f8d4:	cbz	r1, f8e8 <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
    f8d6:	pop	{r4, r5, r6, r7, pc}
    f8d8:	mov.w	r3, #196608	; 0x30000
    f8dc:	b.n	f876 <HardwareSerial::begin(unsigned long, unsigned short)+0x196>
    f8de:	movs	r0, #3
    f8e0:	b.n	f864 <HardwareSerial::begin(unsigned long, unsigned short)+0x184>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    f8e2:	ldr	r3, [pc, #52]	; (f918 <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
    f8e4:	orrs	r3, r0
    f8e6:	b.n	f88e <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    f8e8:	ldr	r0, [pc, #48]	; (f91c <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    f8ea:	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    f8ec:	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    f8ee:	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    f8f2:	adds	r3, r1, #1
    f8f4:	strb	r3, [r0, #0]
    f8f6:	pop	{r4, r5, r6, r7, pc}
    f8f8:	.word	0x4bb71b00
    f8fc:	.word	0x60ad78ec
    f900:	.word	0x200005c0
    f904:	.word	0x0001f038
    f908:	.word	0x20010400
    f90c:	.word	0xe000e400
    f910:	.word	0xe000e100
    f914:	.word	0x2000dd1c
    f918:	.word	0x003c0010
    f91c:	.word	0x2000dd38

0000f920 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    f920:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    f922:	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    f924:	mov	r4, r0
    f926:	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    f928:	cbz	r3, f930 <HardwareSerial::write9bit(unsigned long)+0x10>
    f92a:	ldr	r2, [r0, #84]	; 0x54
    f92c:	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    f930:	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    f934:	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    f936:	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    f938:	adds	r5, #1
    f93a:	cmp	r5, r3
    f93c:	bcs.n	f9d2 <HardwareSerial::write9bit(unsigned long)+0xb2>
    f93e:	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    f940:	ldrh.w	r3, [r4, #72]	; 0x48
    f944:	uxth	r3, r3
    f946:	cmp	r3, r5
    f948:	bne.n	f98c <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    f94a:	bl	f6a0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    f94e:	ldr	r3, [r4, #20]
    f950:	ldrh.w	r3, [r3, #86]	; 0x56
    f954:	cmp	r0, r3
    f956:	bgt.n	f9b4 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    f958:	ldr	r1, [r4, #16]
    f95a:	ldr	r3, [r1, #20]
    f95c:	lsls	r3, r3, #8
    f95e:	bpl.n	f940 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    f960:	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f964:	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    f966:	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f968:	adds	r3, #1
    f96a:	cmp	r3, r2
    f96c:	bcs.n	f9be <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    f96e:	ldr	r2, [r4, #44]	; 0x2c
    f970:	uxth	r0, r3
    f972:	cmp	r3, r2
    f974:	bcs.n	f9c8 <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    f976:	ldr	r2, [r4, #28]
    f978:	ldrb	r3, [r2, r3]
    f97a:	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    f97c:	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    f97e:	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    f982:	ldrh.w	r3, [r4, #72]	; 0x48
    f986:	uxth	r3, r3
    f988:	cmp	r3, r5
    f98a:	beq.n	f94a <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    f98c:	ldr	r3, [r4, #44]	; 0x2c
    f98e:	cmp	r5, r3
    f990:	bcc.n	f9d8 <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    f992:	subs	r5, r5, r3
    f994:	uxtb	r6, r6
    f996:	ldr	r3, [r4, #40]	; 0x28
    f998:	strb	r6, [r3, r5]
	}
	__disable_irq();
    f99a:	cpsid	i
	transmitting_ = 1;
    f99c:	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    f99e:	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    f9a0:	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    f9a4:	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    f9a8:	ldr	r3, [r2, #24]
    f9aa:	orr.w	r3, r3, #8388608	; 0x800000
    f9ae:	str	r3, [r2, #24]
	__enable_irq();
    f9b0:	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    f9b2:	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    f9b4:	cmp	r0, #255	; 0xff
    f9b6:	ble.n	f940 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    f9b8:	bl	fd54 <yield>
    f9bc:	b.n	f940 <HardwareSerial::write9bit(unsigned long)+0x20>
    f9be:	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    f9c0:	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    f9c2:	mov	r3, r0
				if (tail < tx_buffer_size_) {
    f9c4:	cmp	r3, r2
    f9c6:	bcc.n	f976 <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    f9c8:	subs	r3, r3, r2
    f9ca:	ldr	r2, [r4, #40]	; 0x28
    f9cc:	ldrb	r3, [r2, r3]
    f9ce:	uxtb	r3, r3
    f9d0:	b.n	f97c <HardwareSerial::write9bit(unsigned long)+0x5c>
    f9d2:	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    f9d4:	mov	r5, r7
    f9d6:	b.n	f940 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    f9d8:	uxtb	r6, r6
    f9da:	ldr	r3, [r4, #28]
    f9dc:	strb	r6, [r3, r5]
    f9de:	b.n	f99a <HardwareSerial::write9bit(unsigned long)+0x7a>

0000f9e0 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    f9e0:	b.w	f920 <HardwareSerial::write9bit(unsigned long)>

0000f9e4 <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    f9e4:	ldr	r2, [r0, #16]
    f9e6:	ldr	r3, [r2, #20]
    f9e8:	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    f9ec:	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    f9ee:	beq.n	fa76 <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    f9f0:	ldr	r3, [r2, #44]	; 0x2c
    f9f2:	ubfx	r5, r3, #24, #3
		if (avail) {
    f9f6:	cmp	r5, #0
    f9f8:	beq.n	fa70 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    f9fa:	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    f9fe:	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    fa02:	uxth	r7, r7
			tail = rx_buffer_tail_;
    fa04:	uxth.w	lr, lr
    fa08:	b.n	fa18 <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    fa0a:	ldr	r2, [r0, #32]
    fa0c:	strb	r6, [r2, r3]
    fa0e:	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    fa10:	subs	r3, r5, #1
    fa12:	ands.w	r5, r3, #255	; 0xff
    fa16:	beq.n	fa4e <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    fa18:	ldr	r1, [r2, #28]
				newhead = head + 1;
    fa1a:	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    fa1c:	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    fa1e:	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    fa22:	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    fa26:	cmp	r3, r6
    fa28:	it	cs
    fa2a:	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    fa2c:	uxth	r4, r4
    fa2e:	cmp	r3, r4
    fa30:	beq.n	fa10 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    fa32:	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    fa34:	uxtb	r6, r1
    fa36:	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    fa38:	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    fa3a:	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    fa3e:	bcc.n	fa0a <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    fa40:	ldr	r3, [r0, #36]	; 0x24
    fa42:	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    fa44:	subs	r3, r5, #1
    fa46:	ldr	r2, [r0, #16]
    fa48:	ands.w	r5, r3, #255	; 0xff
    fa4c:	bne.n	fa18 <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    fa4e:	uxth	r3, r7
			if (rts_pin_baseReg_) {
    fa50:	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    fa52:	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    fa56:	cbz	r1, fa70 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    fa58:	cmp	r7, lr
    fa5a:	bcs.n	fb30 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    fa5c:	ldr	r3, [r0, #56]	; 0x38
    fa5e:	rsb	r3, lr, r3
    fa62:	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    fa64:	ldr	r3, [r0, #64]	; 0x40
    fa66:	cmp	r7, r3
    fa68:	bcc.n	fa70 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    fa6a:	ldr	r3, [r0, #92]	; 0x5c
    fa6c:	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    fa70:	ldr	r3, [r2, #20]
    fa72:	lsls	r4, r3, #11
    fa74:	bmi.n	fb0e <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    fa76:	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    fa7a:	tst.w	lr, #8388608	; 0x800000
    fa7e:	beq.n	fa86 <HardwareSerial::IRQHandler()+0xa2>
    fa80:	ldr	r3, [r2, #20]
    fa82:	lsls	r1, r3, #8
    fa84:	bmi.n	faac <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    fa86:	tst.w	lr, #4194304	; 0x400000
    fa8a:	beq.n	fb0a <HardwareSerial::IRQHandler()+0x126>
    fa8c:	ldr	r3, [r2, #20]
    fa8e:	lsls	r3, r3, #9
    fa90:	bpl.n	fb0c <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    fa92:	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    fa94:	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    fa96:	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    fa9a:	cbz	r3, faa2 <HardwareSerial::IRQHandler()+0xbe>
    fa9c:	ldr	r1, [r0, #84]	; 0x54
    fa9e:	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    faa2:	ldr	r3, [r2, #24]
    faa4:	bic.w	r3, r3, #4194304	; 0x400000
    faa8:	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    faaa:	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    faac:	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    fab0:	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    fab4:	uxth	r5, r5
		tail = tx_buffer_tail_;
    fab6:	uxth	r3, r3
		do {
			if (head == tail) break;
    fab8:	cmp	r5, r3
    faba:	beq.n	fb18 <HardwareSerial::IRQHandler()+0x134>
    fabc:	ldr	r6, [r0, #52]	; 0x34
    fabe:	ldr	r4, [r0, #44]	; 0x2c
    fac0:	b.n	fad8 <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    fac2:	ldr	r1, [r0, #28]
    fac4:	ldrb	r1, [r1, r3]
    fac6:	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    fac8:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    faca:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    facc:	ubfx	r1, r1, #8, #3
    fad0:	cmp	r1, #3
    fad2:	bhi.n	fafa <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    fad4:	cmp	r3, r5
    fad6:	beq.n	fb18 <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    fad8:	adds	r3, #1
    fada:	cmp	r6, r3
    fadc:	it	ls
    fade:	movls	r3, #0
			if (tail < tx_buffer_size_) {
    fae0:	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    fae2:	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    fae6:	bcc.n	fac2 <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    fae8:	ldr	r7, [r0, #40]	; 0x28
    faea:	ldrb	r1, [r7, r1]
    faec:	uxtb	r1, r1
			}
			port->DATA = n;
    faee:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    faf0:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    faf2:	ubfx	r1, r1, #8, #3
    faf6:	cmp	r1, #3
    faf8:	bls.n	fad4 <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    fafa:	uxth	r1, r3
		if (head == tail) {
    fafc:	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    fafe:	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    fb02:	beq.n	fb1e <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    fb04:	tst.w	lr, #4194304	; 0x400000
    fb08:	bne.n	fa8c <HardwareSerial::IRQHandler()+0xa8>
    fb0a:	pop	{r4, r5, r6, r7, pc}
    fb0c:	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    fb0e:	ldr	r3, [r2, #20]
    fb10:	orr.w	r3, r3, #1048576	; 0x100000
    fb14:	str	r3, [r2, #20]
    fb16:	b.n	fa76 <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    fb18:	uxth	r5, r5
    fb1a:	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    fb1e:	ldr	r3, [r2, #24]
    fb20:	bic.w	r3, r3, #8388608	; 0x800000
    fb24:	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    fb26:	ldr	r3, [r2, #24]
    fb28:	orr.w	r3, r3, #4194304	; 0x400000
    fb2c:	str	r3, [r2, #24]
    fb2e:	b.n	fa86 <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    fb30:	rsb	r7, lr, r7
    fb34:	b.n	fa64 <HardwareSerial::IRQHandler()+0x80>
    fb36:	nop

0000fb38 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    fb38:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    fb3a:	ldr	r3, [pc, #28]	; (fb58 <HardwareSerial::processSerialEvents()+0x20>)
    fb3c:	ldrb	r4, [r3, #0]
    fb3e:	cbz	r4, fb54 <HardwareSerial::processSerialEvents()+0x1c>
    fb40:	ldr	r5, [pc, #24]	; (fb5c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    fb42:	ldr.w	r3, [r5, #4]!
    fb46:	cmp	r3, #0
    fb48:	beq.n	fb42 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    fb4a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    fb4c:	subs	r3, r4, #1
    fb4e:	ands.w	r4, r3, #255	; 0xff
    fb52:	bne.n	fb42 <HardwareSerial::processSerialEvents()+0xa>
    fb54:	pop	{r3, r4, r5, pc}
    fb56:	nop
    fb58:	.word	0x2000dd38
    fb5c:	.word	0x2000dd18

0000fb60 <HardwareSerial::disableSerialEvents()>:
	}
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
    fb60:	ldr	r3, [r0, #20]
    fb62:	ldr	r2, [pc, #32]	; (fb84 <HardwareSerial::disableSerialEvents()+0x24>)
    fb64:	ldrb	r1, [r3, #0]
    fb66:	ldr.w	r3, [r2, r1, lsl #2]
    fb6a:	cbz	r3, fb80 <HardwareSerial::disableSerialEvents()+0x20>
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    fb6c:	ldr	r0, [pc, #24]	; (fb88 <HardwareSerial::disableSerialEvents()+0x28>)
		serial_event_handlers_active++;
	}
}

void HardwareSerial::disableSerialEvents() 
{
    fb6e:	push	{r4}
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    fb70:	ldrb	r3, [r0, #0]
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    fb72:	movs	r4, #0
		serial_event_handlers_active--;
    fb74:	subs	r3, #1
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    fb76:	str.w	r4, [r2, r1, lsl #2]
		serial_event_handlers_active--;
    fb7a:	strb	r3, [r0, #0]
	}
}
    fb7c:	ldr.w	r4, [sp], #4
    fb80:	bx	lr
    fb82:	nop
    fb84:	.word	0x2000dd1c
    fb88:	.word	0x2000dd38

0000fb8c <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    fb8c:	push	{r4, lr}
    fb8e:	mov	r4, r0
{
	free(buffer);
    fb90:	ldr	r0, [r0, #0]
    fb92:	bl	10934 <free>
}
    fb96:	mov	r0, r4
    fb98:	pop	{r4, pc}
    fb9a:	nop

0000fb9c <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    fb9c:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    fb9e:	ldr	r3, [r0, #4]
    fba0:	cmp	r3, r1
    fba2:	bcc.n	fba8 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    fba4:	movs	r0, #1
		return 1;
	}
	return 0;
}
    fba6:	pop	{r3, r4, r5, pc}
    fba8:	mov	r5, r1
    fbaa:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    fbac:	adds	r1, #1
    fbae:	ldr	r0, [r0, #0]
    fbb0:	bl	11020 <realloc>
	if (newbuffer) {
    fbb4:	cmp	r0, #0
    fbb6:	beq.n	fba6 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    fbb8:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    fbba:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    fbbe:	cmp	r3, #0
    fbc0:	bne.n	fba4 <String::reserve(unsigned int)+0x8>
    fbc2:	strb	r3, [r0, #0]
    fbc4:	b.n	fba4 <String::reserve(unsigned int)+0x8>
    fbc6:	nop

0000fbc8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    fbc8:	push	{r3, r4, r5, r6, r7, lr}
    fbca:	mov	r4, r0
	if (length == 0) {
    fbcc:	mov	r5, r2
    fbce:	cbnz	r2, fbde <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    fbd0:	ldr	r3, [r0, #0]
    fbd2:	cbz	r3, fbd6 <String::copy(char const*, unsigned int)+0xe>
    fbd4:	strb	r2, [r3, #0]
		len = 0;
    fbd6:	movs	r3, #0
    fbd8:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    fbda:	mov	r0, r4
    fbdc:	pop	{r3, r4, r5, r6, r7, pc}
    fbde:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    fbe0:	mov	r1, r2
    fbe2:	bl	fb9c <String::reserve(unsigned int)>
    fbe6:	mov	r7, r0
    fbe8:	cbnz	r0, fbfe <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    fbea:	ldr	r0, [r4, #0]
    fbec:	cbz	r0, fbf4 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    fbee:	bl	10934 <free>
			buffer = NULL;
    fbf2:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    fbf4:	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    fbf6:	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    fbf8:	str	r3, [r4, #4]
    fbfa:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    fbfc:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    fbfe:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    fc00:	mov	r1, r6
    fc02:	ldr	r0, [r4, #0]
    fc04:	bl	1171c <strcpy>
	return *this;
    fc08:	b.n	fbda <String::copy(char const*, unsigned int)+0x12>
    fc0a:	nop

0000fc0c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    fc0c:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    fc0e:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    fc10:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    fc12:	str	r3, [r0, #0]
	capacity = 0;
    fc14:	str	r3, [r0, #4]
	len = 0;
    fc16:	str	r3, [r0, #8]
	flags = 0;
    fc18:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    fc1a:	cbz	r1, fc2e <String::String(char const*)+0x22>
    fc1c:	mov	r5, r1
    fc1e:	mov	r0, r1
    fc20:	bl	11800 <strlen>
    fc24:	mov	r2, r0
    fc26:	mov	r1, r5
    fc28:	mov	r0, r4
    fc2a:	bl	fbc8 <String::copy(char const*, unsigned int)>
}
    fc2e:	mov	r0, r4
    fc30:	pop	{r3, r4, r5, pc}
    fc32:	nop

0000fc34 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    fc34:	push	{r3, r4, r5, lr}
    fc36:	mov	r4, r1
    fc38:	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    fc3a:	mov	r0, r1
    fc3c:	bl	11800 <strlen>
    fc40:	mov	r1, r4
    fc42:	mov	r2, r0
    fc44:	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    fc46:	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    fc4a:	b.w	fbc8 <String::copy(char const*, unsigned int)>
    fc4e:	nop

0000fc50 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    fc50:	push	{r4, lr}
    fc52:	mov	r4, r0
	if (cstr) {
    fc54:	cbz	r1, fc5e <String::operator=(char const*)+0xe>
    fc56:	bl	fc34 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    fc5a:	mov	r0, r4
    fc5c:	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    fc5e:	str	r1, [r4, #8]
	}
	return *this;
}
    fc60:	mov	r0, r4
    fc62:	pop	{r4, pc}

0000fc64 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    fc64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc68:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    fc6a:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    fc6c:	mov	r4, r0
    fc6e:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    fc70:	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    fc72:	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    fc74:	bhi.n	fc8c <String::append(char const*, unsigned int)+0x28>
    fc76:	adds	r2, r3, r1
    fc78:	cmp	r7, r2
    fc7a:	bcs.n	fc8c <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    fc7c:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    fc80:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    fc84:	cbnz	r5, fc94 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    fc86:	mov	r0, r4
    fc88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    fc8c:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    fc90:	cmp	r5, #0
    fc92:	beq.n	fc86 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    fc94:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    fc96:	mov	r0, r4
    fc98:	mov	r1, r6
    fc9a:	bl	fb9c <String::reserve(unsigned int)>
    fc9e:	cmp	r0, #0
    fca0:	beq.n	fc86 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    fca2:	cmp.w	r8, #0
    fca6:	beq.n	fcc6 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    fca8:	ldr	r3, [r4, #0]
    fcaa:	mov	r2, r5
    fcac:	ldr	r0, [r4, #8]
    fcae:	add.w	r1, r3, r9
    fcb2:	add	r0, r3
    fcb4:	bl	df9c <memcpy>
		buffer[newlen] = 0;
    fcb8:	ldr	r3, [r4, #0]
    fcba:	movs	r2, #0
    fcbc:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    fcbe:	str	r6, [r4, #8]
	return *this;
}
    fcc0:	mov	r0, r4
    fcc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    fcc6:	ldr	r0, [r4, #0]
    fcc8:	mov	r1, r7
    fcca:	ldr	r3, [r4, #8]
    fccc:	add	r0, r3
    fcce:	bl	1171c <strcpy>
    fcd2:	b.n	fcbe <String::append(char const*, unsigned int)+0x5a>

0000fcd4 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    fcd4:	push	{r4, lr}
    fcd6:	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    fcd8:	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    fcda:	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    fcdc:	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    fcde:	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    fce2:	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    fce4:	strb.w	r3, [sp, #5]
	append(buf, 1);
    fce8:	bl	fc64 <String::append(char const*, unsigned int)>
	return *this;
}
    fcec:	mov	r0, r4
    fcee:	add	sp, #8
    fcf0:	pop	{r4, pc}
    fcf2:	nop

0000fcf4 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    fcf4:	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    fcf6:	push	{r3, lr}
    fcf8:	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    fcfa:	cbnz	r2, fd08 <String::equals(char const*) const+0x14>
    fcfc:	cbz	r1, fd1c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    fcfe:	ldrb	r0, [r3, #0]
    fd00:	clz	r0, r0
    fd04:	lsrs	r0, r0, #5
    fd06:	pop	{r3, pc}
    fd08:	cbz	r1, fd18 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    fd0a:	ldr	r0, [r0, #0]
    fd0c:	bl	11448 <strcmp>
    fd10:	clz	r0, r0
    fd14:	lsrs	r0, r0, #5
}
    fd16:	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    fd18:	ldr	r3, [r0, #0]
    fd1a:	b.n	fcfe <String::equals(char const*) const+0xa>
    fd1c:	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    fd1e:	pop	{r3, pc}

0000fd20 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    fd20:	cbz	r2, fd52 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    fd22:	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    fd24:	clz	r4, r1
    fd28:	lsrs	r4, r4, #5
    fd2a:	cbnz	r4, fd4c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    fd2c:	ldr	r6, [r0, #8]
    fd2e:	cmp	r6, r3
    fd30:	bls.n	fd4e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    fd32:	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    fd34:	subs	r2, #1
    fd36:	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    fd38:	ldr	r1, [r0, #0]
    fd3a:	cmp	r6, r2
    fd3c:	mov	r0, r5
    fd3e:	add	r1, r3
    fd40:	it	cs
    fd42:	movcs	r6, r2
    fd44:	mov	r2, r6
    fd46:	bl	118dc <strncpy>
	buf[n] = 0;
    fd4a:	strb	r4, [r5, r6]
    fd4c:	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    fd4e:	strb	r4, [r1, #0]
		return;
    fd50:	pop	{r4, r5, r6, pc}
    fd52:	bx	lr

0000fd54 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    fd54:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    fd56:	ldr	r4, [pc, #132]	; (fddc <yield+0x88>)
    fd58:	ldrb	r3, [r4, #0]
    fd5a:	cbnz	r3, fd7e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    fd5c:	ldr	r3, [pc, #128]	; (fde0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    fd5e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    fd60:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    fd62:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    fd64:	cbnz	r3, fdae <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    fd66:	ldr	r3, [pc, #124]	; (fde4 <yield+0x90>)
    fd68:	ldrb	r3, [r3, #0]
    fd6a:	cmp	r3, #0
    fd6c:	bne.n	fdc2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    fd6e:	ldr	r3, [pc, #120]	; (fde8 <yield+0x94>)

	running = 0;
    fd70:	movs	r1, #0
    fd72:	ldr	r2, [r3, #0]
    fd74:	strb	r1, [r4, #0]
    fd76:	cbz	r2, fd7e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    fd78:	mrs	r2, IPSR
		if (ipsr != 0) return;
    fd7c:	cbz	r2, fd80 <yield+0x2c>
    fd7e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fd80:	mrs	r0, PRIMASK
		__disable_irq();
    fd84:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    fd86:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    fd88:	cbz	r2, fdc8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    fd8a:	ldr	r4, [pc, #96]	; (fdec <yield+0x98>)
    fd8c:	ldrb	r1, [r4, #0]
    fd8e:	cbnz	r1, fdc8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    fd90:	movs	r6, #1
		firstYield = first->_next;
    fd92:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    fd94:	strb	r6, [r4, #0]
		firstYield = first->_next;
    fd96:	str	r5, [r3, #0]
		if (firstYield) {
    fd98:	cbz	r5, fdd0 <yield+0x7c>
			firstYield->_prev = nullptr;
    fd9a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fd9c:	cbnz	r0, fda0 <yield+0x4c>
    fd9e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    fda0:	movs	r5, #0
		(*(first->_function))(*first);
    fda2:	ldr	r3, [r2, #8]
    fda4:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    fda6:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    fda8:	blx	r3
		runningFromYield = false;
    fdaa:	strb	r5, [r4, #0]
    fdac:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    fdae:	bl	e3ec <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    fdb2:	cmp	r0, #0
    fdb4:	beq.n	fd66 <yield+0x12>
    fdb6:	bl	100f0 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    fdba:	ldr	r3, [pc, #40]	; (fde4 <yield+0x90>)
    fdbc:	ldrb	r3, [r3, #0]
    fdbe:	cmp	r3, #0
    fdc0:	beq.n	fd6e <yield+0x1a>
    fdc2:	bl	fb38 <HardwareSerial::processSerialEvents()>
    fdc6:	b.n	fd6e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fdc8:	cmp	r0, #0
    fdca:	bne.n	fd7e <yield+0x2a>
    fdcc:	cpsie	i
    fdce:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    fdd0:	ldr	r3, [pc, #28]	; (fdf0 <yield+0x9c>)
    fdd2:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fdd4:	cmp	r0, #0
    fdd6:	bne.n	fda0 <yield+0x4c>
    fdd8:	b.n	fd9e <yield+0x4a>
    fdda:	nop
    fddc:	.word	0x2000dd39
    fde0:	.word	0x20000f0c
    fde4:	.word	0x2000dd38
    fde8:	.word	0x2000e550
    fdec:	.word	0x2000e554
    fdf0:	.word	0x2000e54c

0000fdf4 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    fdf4:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    fdf6:	ldr	r4, [pc, #100]	; (fe5c <random(unsigned long) [clone .part.0]+0x68>)
    fdf8:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    fdfa:	cbz	r3, fe40 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    fdfc:	ldr	r1, [pc, #96]	; (fe60 <random(unsigned long) [clone .part.0]+0x6c>)
    fdfe:	asrs	r5, r3, #31
    fe00:	ldr.w	lr, [pc, #104]	; fe6c <random(unsigned long) [clone .part.0]+0x78>
    fe04:	smull	r6, r7, r3, r1
    fe08:	ldr	r6, [pc, #88]	; (fe64 <random(unsigned long) [clone .part.0]+0x70>)
    fe0a:	smull	r2, r1, r1, r3
    fe0e:	adds	r2, r3, r7
    fe10:	add	r1, r3
    fe12:	rsb	r2, r5, r2, asr #16
    fe16:	rsb	r1, r5, r1, asr #16
    fe1a:	movw	r5, #16807	; 0x41a7
    fe1e:	mls	r2, lr, r2, r3
    fe22:	mul.w	r1, r6, r1
    fe26:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    fe2a:	cmp	r3, #0
    fe2c:	bge.n	fe4e <random(unsigned long) [clone .part.0]+0x5a>
    fe2e:	mvn.w	r2, #2147483648	; 0x80000000
    fe32:	add	r2, r3
    fe34:	udiv	r3, r2, r0
	seed = x;
    fe38:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    fe3a:	mls	r0, r0, r3, r2
    fe3e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    fe40:	ldr	r2, [pc, #36]	; (fe68 <random(unsigned long) [clone .part.0]+0x74>)
    fe42:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    fe46:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    fe48:	mls	r0, r0, r3, r2
    fe4c:	pop	{r4, r5, r6, r7, pc}
    fe4e:	mov	r2, r3
    fe50:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    fe54:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    fe56:	mls	r0, r0, r3, r2
    fe5a:	pop	{r4, r5, r6, r7, pc}
    fe5c:	.word	0x2000dd3c
    fe60:	.word	0x834e0b5f
    fe64:	.word	0xfffff4ec
    fe68:	.word	0x1f0cce42
    fe6c:	.word	0x0001f31d

0000fe70 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    fe70:	cbz	r0, fe76 <randomSeed(unsigned long)+0x6>
    fe72:	ldr	r3, [pc, #4]	; (fe78 <randomSeed(unsigned long)+0x8>)
    fe74:	str	r0, [r3, #0]
    fe76:	bx	lr
    fe78:	.word	0x2000dd3c

0000fe7c <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    fe7c:	cbz	r0, fe82 <random(unsigned long)+0x6>
    fe7e:	b.w	fdf4 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    fe82:	bx	lr

0000fe84 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    fe84:	cmp	r0, r1
    fe86:	bge.n	fe96 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    fe88:	push	{r4, lr}
    fe8a:	mov	r4, r0
    fe8c:	subs	r0, r1, r0
    fe8e:	bl	fdf4 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    fe92:	add	r0, r4
}
    fe94:	pop	{r4, pc}
    fe96:	bx	lr

0000fe98 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    fe98:	ldr	r0, [pc, #4]	; (fea0 <IRQHandler_Serial1+0x8>)
    fe9a:	b.w	f9e4 <HardwareSerial::IRQHandler()>
    fe9e:	nop
    fea0:	.word	0x20000eac

0000fea4 <serialEvent1()>:
};
HardwareSerial Serial1(&IMXRT_LPUART6, &UART6_Hardware, tx_buffer1, SERIAL1_TX_BUFFER_SIZE,
	rx_buffer1,  SERIAL1_RX_BUFFER_SIZE);

void serialEvent1() __attribute__((weak));
void serialEvent1() {Serial1.disableSerialEvents(); }		// No use calling this so disable if called...
    fea4:	ldr	r0, [pc, #4]	; (feac <serialEvent1()+0x8>)
    fea6:	b.w	fb60 <HardwareSerial::disableSerialEvents()>
    feaa:	nop
    feac:	.word	0x20000eac

0000feb0 <serial_event_check_serial1()>:
{
	Serial1.IRQHandler();
}

void serial_event_check_serial1()
{
    feb0:	push	{r3, lr}
	if (Serial1.available()) serialEvent1();
    feb2:	ldr	r0, [pc, #12]	; (fec0 <serial_event_check_serial1()+0x10>)
    feb4:	bl	f5c4 <HardwareSerial::available()>
    feb8:	cbz	r0, febe <serial_event_check_serial1()+0xe>
    feba:	bl	fea4 <serialEvent1()>
    febe:	pop	{r3, pc}
    fec0:	.word	0x20000eac

0000fec4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    fec4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fec6:	mrs	r2, PRIMASK
		__disable_irq();
    feca:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    fecc:	ldrb	r3, [r0, #29]
    fece:	cbnz	r3, fede <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    fed0:	ldrb	r1, [r0, #28]
    fed2:	cmp	r1, #1
    fed4:	beq.n	fee8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    fed6:	cmp	r1, #3
    fed8:	beq.n	fefc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    feda:	movs	r3, #1
    fedc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fede:	cbnz	r2, fee2 <EventResponder::triggerEventNotImmediate()+0x1e>
    fee0:	cpsie	i
	}
	enableInterrupts(irq);
}
    fee2:	ldr.w	r4, [sp], #4
    fee6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    fee8:	ldr	r4, [pc, #68]	; (ff30 <EventResponder::triggerEventNotImmediate()+0x6c>)
    feea:	ldr	r1, [r4, #0]
    feec:	cbz	r1, ff18 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    feee:	ldr	r1, [pc, #68]	; (ff34 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    fef0:	str	r3, [r0, #20]
				_prev = lastYield;
    fef2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    fef4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    fef6:	str	r3, [r0, #24]
				_prev->_next = this;
    fef8:	str	r0, [r3, #20]
    fefa:	b.n	feda <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    fefc:	ldr	r4, [pc, #56]	; (ff38 <EventResponder::triggerEventNotImmediate()+0x74>)
    fefe:	ldr	r1, [r4, #0]
    ff00:	cbz	r1, ff24 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    ff02:	ldr	r1, [pc, #56]	; (ff3c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    ff04:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    ff06:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    ff08:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    ff0a:	str	r3, [r0, #24]
				_prev->_next = this;
    ff0c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    ff0e:	ldr	r3, [pc, #48]	; (ff40 <EventResponder::triggerEventNotImmediate()+0x7c>)
    ff10:	mov.w	r1, #268435456	; 0x10000000
    ff14:	str	r1, [r3, #0]
    ff16:	b.n	feda <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    ff18:	ldr	r3, [pc, #24]	; (ff34 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    ff1a:	str	r1, [r0, #20]
				_prev = nullptr;
    ff1c:	str	r1, [r0, #24]
				firstYield = this;
    ff1e:	str	r0, [r4, #0]
				lastYield = this;
    ff20:	str	r0, [r3, #0]
    ff22:	b.n	feda <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    ff24:	ldr	r3, [pc, #20]	; (ff3c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    ff26:	str	r1, [r0, #20]
				_prev = nullptr;
    ff28:	str	r1, [r0, #24]
				firstInterrupt = this;
    ff2a:	str	r0, [r4, #0]
				lastInterrupt = this;
    ff2c:	str	r0, [r3, #0]
    ff2e:	b.n	ff0e <EventResponder::triggerEventNotImmediate()+0x4a>
    ff30:	.word	0x2000e550
    ff34:	.word	0x2000e54c
    ff38:	.word	0x2000e540
    ff3c:	.word	0x2000e544
    ff40:	.word	0xe000ed04

0000ff44 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    ff44:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    ff46:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    ff48:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    ff4a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    ff4c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    ff4e:	beq.n	ff58 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    ff50:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    ff54:	b.w	fec4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    ff58:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    ff5a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    ff5e:	bx	r3

0000ff60 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    ff60:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ff62:	mrs	r1, PRIMASK
		__disable_irq();
    ff66:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ff68:	ldr	r4, [pc, #48]	; (ff9c <EventResponder::runFromInterrupt()+0x3c>)
    ff6a:	ldr	r3, [r4, #0]
		if (first) {
    ff6c:	cbz	r3, ff92 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ff6e:	ldr	r6, [pc, #48]	; (ffa0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    ff70:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    ff72:	ldr	r2, [r3, #20]
    ff74:	str	r2, [r4, #0]
			if (firstInterrupt) {
    ff76:	cbz	r2, ff98 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    ff78:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ff7a:	cbnz	r1, ff7e <EventResponder::runFromInterrupt()+0x1e>
    ff7c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ff7e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    ff80:	mov	r0, r3
    ff82:	ldr	r3, [r3, #8]
    ff84:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ff86:	mrs	r1, PRIMASK
		__disable_irq();
    ff8a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ff8c:	ldr	r3, [r4, #0]
		if (first) {
    ff8e:	cmp	r3, #0
    ff90:	bne.n	ff72 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ff92:	cbnz	r1, ff96 <EventResponder::runFromInterrupt()+0x36>
    ff94:	cpsie	i
    ff96:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ff98:	str	r2, [r6, #0]
    ff9a:	b.n	ff7a <EventResponder::runFromInterrupt()+0x1a>
    ff9c:	.word	0x2000e540
    ffa0:	.word	0x2000e544

0000ffa4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    ffa4:	b.w	ff60 <EventResponder::runFromInterrupt()>

0000ffa8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    ffa8:	ldr	r2, [pc, #96]	; (1000c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    ffaa:	push	{r4, r5}
	if (listActive == nullptr) {
    ffac:	ldr	r4, [r2, #0]
    ffae:	cmp	r4, #0
    ffb0:	beq.n	10004 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ffb2:	ldr	r3, [r0, #0]
    ffb4:	ldr	r1, [r4, #0]
    ffb6:	cmp	r3, r1
    ffb8:	bcs.n	ffda <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ffba:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    ffbc:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    ffbe:	str	r4, [r0, #8]
		_prev = nullptr;
    ffc0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ffc2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    ffc4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    ffc6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ffc8:	movs	r3, #2
}
    ffca:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ffcc:	strb	r3, [r0, #20]
}
    ffce:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    ffd0:	str	r3, [r0, #0]
    ffd2:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ffd4:	ldr	r1, [r2, #0]
    ffd6:	cmp	r3, r1
    ffd8:	bcc.n	ffec <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ffda:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ffdc:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ffde:	cmp	r2, #0
    ffe0:	bne.n	ffd0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    ffe2:	str	r2, [r0, #8]
		_prev = timer;
    ffe4:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ffe6:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    ffe8:	str	r0, [r4, #8]
    ffea:	b.n	ffc8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    ffec:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    ffee:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    fff0:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    fff2:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    fff4:	str	r5, [r0, #12]
				timer->_prev = this;
    fff6:	str	r0, [r4, #12]
				_prev->_next = this;
    fff8:	ldr	r1, [r0, #12]
    fffa:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    fffc:	str	r3, [r4, #0]
				_state = TimerActive;
    fffe:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
   10000:	pop	{r4, r5}
   10002:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
   10004:	str	r4, [r0, #8]
		_prev = nullptr;
   10006:	str	r4, [r0, #12]
		listActive = this;
   10008:	str	r0, [r2, #0]
   1000a:	b.n	ffc8 <MillisTimer::addToActiveList()+0x20>
   1000c:	.word	0x2000e548

00010010 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
   10010:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
   10012:	ldr	r6, [pc, #136]	; (1009c <MillisTimer::runFromTimer()+0x8c>)
   10014:	ldr	r4, [r6, #0]
	while (timer) {
   10016:	cbz	r4, 10064 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
   10018:	ldr	r3, [r4, #0]
   1001a:	cmp	r3, #0
   1001c:	bne.n	10094 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
   1001e:	mov	r5, r3
   10020:	ldr	r7, [pc, #124]	; (100a0 <MillisTimer::runFromTimer()+0x90>)
   10022:	b.n	1002e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
   10024:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
   10026:	cbz	r4, 10064 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
   10028:	ldr	r3, [r4, #0]
   1002a:	cmp	r3, #0
   1002c:	bne.n	10094 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
   1002e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
   10030:	cbz	r3, 10034 <MillisTimer::runFromTimer()+0x24>
   10032:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
   10034:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
   10036:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
   10038:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
   1003a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
   1003c:	ldr	r3, [r3, #0]
   1003e:	cmp	r3, r7
   10040:	bne.n	10086 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   10042:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
   10044:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
   10046:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
   10048:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
   1004a:	beq.n	1008e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
   1004c:	bl	fec4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
   10050:	ldr	r3, [r4, #4]
   10052:	cmp	r3, #0
   10054:	beq.n	10024 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
   10056:	str	r3, [r4, #0]
				timer->addToActiveList();
   10058:	mov	r0, r4
   1005a:	bl	ffa8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
   1005e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
   10060:	cmp	r4, #0
   10062:	bne.n	10028 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   10064:	mrs	r3, PRIMASK
		__disable_irq();
   10068:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
   1006a:	ldr	r2, [pc, #56]	; (100a4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
   1006c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
   1006e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
   10070:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
   10072:	cbnz	r3, 10076 <MillisTimer::runFromTimer()+0x66>
   10074:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
   10076:	cbz	r0, 10084 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
   10078:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
   1007a:	bl	ffa8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
   1007e:	mov	r0, r4
   10080:	cmp	r0, #0
   10082:	bne.n	10078 <MillisTimer::runFromTimer()+0x68>
   10084:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
   10086:	mov	r2, r4
   10088:	movs	r1, #0
   1008a:	blx	r3
   1008c:	b.n	10050 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
   1008e:	ldr	r3, [r0, #8]
   10090:	blx	r3
   10092:	b.n	10050 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
   10094:	subs	r3, #1
   10096:	str	r3, [r4, #0]
			break;
   10098:	b.n	10064 <MillisTimer::runFromTimer()+0x54>
   1009a:	nop
   1009c:	.word	0x2000e548
   100a0:	.word	0x0000ff45
   100a4:	.word	0x2000e558

000100a8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   100a8:	ldr	r2, [pc, #16]	; (100bc <systick_isr+0x14>)
   100aa:	ldr	r3, [pc, #20]	; (100c0 <systick_isr+0x18>)
   100ac:	ldr	r1, [r2, #0]
	systick_millis_count++;
   100ae:	ldr	r2, [pc, #20]	; (100c4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   100b0:	str	r1, [r3, #0]
	systick_millis_count++;
   100b2:	ldr	r3, [r2, #0]
   100b4:	adds	r3, #1
   100b6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
   100b8:	b.w	10010 <MillisTimer::runFromTimer()>
   100bc:	.word	0xe0001004
   100c0:	.word	0x2000dd14
   100c4:	.word	0x2000dd18

000100c8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
   100c8:	b.w	e400 <usb_serial_flush_input>

000100cc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
   100cc:	b.w	e3c8 <usb_serial_peekchar>

000100d0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
   100d0:	b.w	e37c <usb_serial_getchar>

000100d4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   100d4:	b.w	e3ec <usb_serial_available>

000100d8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   100d8:	b.w	e4cc <usb_serial_flush_output>

000100dc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   100dc:	b.w	e480 <usb_serial_write_buffer_free>

000100e0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   100e0:	mov	r0, r1
   100e2:	mov	r1, r2
   100e4:	b.w	e468 <usb_serial_write>

000100e8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   100e8:	mov	r0, r1
   100ea:	b.w	e43c <usb_serial_putchar>
   100ee:	nop

000100f0 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
   100f0:	ldr	r3, [pc, #4]	; (100f8 <serialEvent()+0x8>)
   100f2:	movs	r2, #0
   100f4:	strb	r2, [r3, #0]
   100f6:	bx	lr
   100f8:	.word	0x20000f0c

000100fc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
   100fc:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   100fe:	mov	r6, r1
   10100:	cbz	r1, 10120 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   10102:	cbz	r2, 10124 <Print::write(unsigned char const*, unsigned int)+0x28>
   10104:	mov	r7, r0
   10106:	mov	r4, r2
   10108:	movs	r5, #0
   1010a:	ldr	r3, [r7, #0]
   1010c:	mov	r0, r7
   1010e:	ldrb.w	r1, [r6], #1
   10112:	ldr	r3, [r3, #0]
   10114:	blx	r3
   10116:	subs	r4, #1
   10118:	add	r5, r0
   1011a:	bne.n	1010a <Print::write(unsigned char const*, unsigned int)+0xe>
   1011c:	mov	r0, r5
   1011e:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   10120:	mov	r0, r1
   10122:	pop	{r3, r4, r5, r6, r7, pc}
   10124:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   10126:	pop	{r3, r4, r5, r6, r7, pc}

00010128 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
   10128:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1012c:	ldr	r4, [r1, #8]
   1012e:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
   10130:	cbz	r4, 1016e <Print::print(String const&)+0x46>
   10132:	movs	r5, #0
   10134:	mov	r6, r0
   10136:	mov	r9, r1
   10138:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
   1013a:	mov	r3, r5
   1013c:	movs	r2, #33	; 0x21
   1013e:	add	r1, sp, #4
   10140:	mov	r0, r9
   10142:	bl	fd20 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
   10146:	cmp	r4, #32
   10148:	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
   1014a:	ldr	r0, [r6, #0]
   1014c:	it	cs
   1014e:	movcs	r3, #32
   10150:	add	r1, sp, #4
   10152:	ldr.w	r8, [r0, #4]
   10156:	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
   10158:	subs	r4, r4, r3
		count += write(buffer, nbytes);
   1015a:	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
   1015c:	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
   1015e:	blx	r8
   10160:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
   10162:	cmp	r4, #0
   10164:	bne.n	1013a <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
   10166:	mov	r0, r7
   10168:	add	sp, #44	; 0x2c
   1016a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
   1016e:	mov	r7, r4
   10170:	b.n	10166 <Print::print(String const&)+0x3e>
   10172:	nop

00010174 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   10174:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
   10176:	ldr	r4, [pc, #24]	; (10190 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   10178:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   1017a:	ldr	r3, [r0, #0]
   1017c:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   1017e:	ldrh	r4, [r4, #0]
	return write(buf, 2);
   10180:	add	r1, sp, #4
   10182:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   10184:	strh.w	r4, [sp, #4]
	return write(buf, 2);
   10188:	blx	r3
}
   1018a:	add	sp, #8
   1018c:	pop	{r4, pc}
   1018e:	nop
   10190:	.word	0x20000954

00010194 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
   10194:	push	{r4, r5, r6, r7, lr}
   10196:	mov	r6, r0
   10198:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
   1019a:	cmp	r2, #0
   1019c:	beq.n	10206 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
   1019e:	cmp	r2, #1
   101a0:	it	eq
   101a2:	moveq	r2, #10
	}


	if (n == 0) {
   101a4:	cbz	r1, 101fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
   101a6:	movs	r5, #33	; 0x21
   101a8:	b.n	101ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   101aa:	uxtb	r5, r7
   101ac:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   101ae:	udiv	r4, r1, r2
   101b2:	mls	r1, r2, r4, r1
   101b6:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   101b8:	cmp	r1, #9
   101ba:	add.w	r1, r0, #55	; 0x37
   101be:	add.w	r0, r0, #48	; 0x30
   101c2:	it	hi
   101c4:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
   101c6:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   101c8:	add	r4, sp, #40	; 0x28
   101ca:	it	ls
   101cc:	uxtbls	r0, r0
   101ce:	add	r4, r5
   101d0:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
   101d4:	cmp	r1, #0
   101d6:	bne.n	101aa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
   101d8:	cbz	r3, 101e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
   101da:	subs	r5, #1
		buf[i] = '-';
   101dc:	add	r3, sp, #40	; 0x28
   101de:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
   101e0:	uxtb	r5, r5
		buf[i] = '-';
   101e2:	add	r3, r5
   101e4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
   101e8:	ldr	r3, [r6, #0]
   101ea:	add	r1, sp, #4
   101ec:	rsb	r2, r5, #34	; 0x22
   101f0:	mov	r0, r6
   101f2:	add	r1, r5
   101f4:	ldr	r3, [r3, #4]
   101f6:	blx	r3
}
   101f8:	add	sp, #44	; 0x2c
   101fa:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   101fc:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
   101fe:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   10200:	strb.w	r2, [sp, #37]	; 0x25
   10204:	b.n	101d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
   10206:	ldr	r3, [r0, #0]
   10208:	uxtb	r1, r1
   1020a:	ldr	r3, [r3, #0]
   1020c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   1020e:	add	sp, #44	; 0x2c
   10210:	pop	{r4, r5, r6, r7, pc}
   10212:	nop

00010214 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
   10214:	cmp	r1, #0
   10216:	blt.n	10220 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
   10218:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
   1021a:	movs	r2, #10
   1021c:	b.w	10194 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
   10220:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
   10222:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
   10224:	movs	r2, #10
   10226:	b.w	10194 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   1022a:	nop

0001022c <operator new(unsigned int)>:
   1022c:	b.w	10924 <malloc>

00010230 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
   10230:	movs	r0, #4
   10232:	mov	r1, lr
   10234:	tst	r0, r1
   10236:	beq.n	10240 <_MSP>
   10238:	mrs	r0, PSP
   1023c:	b.w	10248 <HardFault_HandlerC>

00010240 <_MSP>:
   10240:	mrs	r0, MSP
   10244:	b.w	10248 <HardFault_HandlerC>

00010248 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   10248:	ldr	r3, [pc, #108]	; (102b8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   1024a:	movs	r1, #5
   1024c:	ldr	r2, [pc, #108]	; (102bc <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   1024e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   10250:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
   10252:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
   10256:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
   10258:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
   1025c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   1025e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   10260:	ldr	r4, [pc, #92]	; (102c0 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   10262:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
   10264:	ldr	r0, [pc, #92]	; (102c4 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
   10266:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
   10268:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   1026c:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
   10270:	ldr	r3, [r4, #0]
   10272:	cmp	r3, r0
   10274:	bls.n	1027c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
   10276:	ldr	r0, [pc, #80]	; (102c8 <HardFault_HandlerC+0x80>)
   10278:	bl	e538 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   1027c:	ldr	r5, [pc, #56]	; (102b8 <HardFault_HandlerC+0x70>)
   1027e:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   10280:	movs	r0, #0
   10282:	ldr	r2, [pc, #72]	; (102cc <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   10284:	ldr	r1, [pc, #72]	; (102d0 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
   10286:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
   1028a:	str	r0, [sp, #4]
   1028c:	ldr	r3, [sp, #4]
   1028e:	cmp	r3, r2
   10290:	bhi.n	1029e <HardFault_HandlerC+0x56>
   10292:	ldr	r3, [sp, #4]
   10294:	adds	r3, #1
   10296:	str	r3, [sp, #4]
   10298:	ldr	r3, [sp, #4]
   1029a:	cmp	r3, r2
   1029c:	bls.n	10292 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
   1029e:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
   102a2:	str	r0, [sp, #4]
   102a4:	ldr	r3, [sp, #4]
   102a6:	cmp	r3, r1
   102a8:	bhi.n	10286 <HardFault_HandlerC+0x3e>
   102aa:	ldr	r3, [sp, #4]
   102ac:	adds	r3, #1
   102ae:	str	r3, [sp, #4]
   102b0:	ldr	r3, [sp, #4]
   102b2:	cmp	r3, r1
   102b4:	bls.n	102aa <HardFault_HandlerC+0x62>
   102b6:	b.n	10286 <HardFault_HandlerC+0x3e>
   102b8:	.word	0x401bc000
   102bc:	.word	0x401f8000
   102c0:	.word	0x20000df8
   102c4:	.word	0x23c345ff
   102c8:	.word	0x11e1a300
   102cc:	.word	0x000f423f
   102d0:	.word	0x0089543f

000102d4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
   102d4:	ldr	r2, [pc, #36]	; (102fc <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
   102d6:	push	{r3, lr}
        char *prev = __brkval;
   102d8:	ldr	r3, [r2, #0]
        if (incr != 0) {
   102da:	cbz	r0, 102e6 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
   102dc:	add	r0, r3
   102de:	ldr	r1, [pc, #32]	; (10300 <_sbrk+0x2c>)
   102e0:	cmp	r0, r1
   102e2:	bhi.n	102ea <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
   102e4:	str	r0, [r2, #0]
        }
        return prev;
}
   102e6:	mov	r0, r3
   102e8:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   102ea:	bl	108c8 <__errno>
   102ee:	movs	r2, #12
                        return (void *)-1;
   102f0:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
   102f4:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   102f6:	mov	r0, r3
   102f8:	pop	{r3, pc}
   102fa:	nop
   102fc:	.word	0x20000f20
   10300:	.word	0x20280000

00010304 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   10304:	push	{r4, r5, r6, r7}
   10306:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
   10308:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   1030a:	mov	r7, r6
   1030c:	b.n	10310 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   1030e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   10310:	udiv	r3, r0, r2
   10314:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   10318:	add.w	r4, r0, #55	; 0x37
   1031c:	cmp	r0, #9
   1031e:	add.w	r0, r0, #48	; 0x30
   10322:	uxtb	r4, r4
   10324:	it	ls
   10326:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
   10328:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1032a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
   1032e:	cmp	r3, #0
   10330:	bne.n	1030e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   10332:	adds	r2, r1, r5
   10334:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   10336:	cbz	r5, 1034c <ultoa+0x48>
   10338:	adds	r3, #1
		t = buf[j];
   1033a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
   1033e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   10340:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
   10342:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   10344:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   10346:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   1034a:	blt.n	10338 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   1034c:	mov	r0, r1
   1034e:	pop	{r4, r5, r6, r7}
   10350:	bx	lr
   10352:	nop

00010354 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10354:	ldr	r0, [pc, #656]	; (105e8 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10356:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1035a:	ldr	r3, [pc, #656]	; (105ec <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1035c:	ldr	r2, [r0, #120]	; 0x78
   1035e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
   10362:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10364:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   10366:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10368:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1036c:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10370:	ldr	r4, [pc, #636]	; (105f0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10372:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10376:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10378:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1037c:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   1037e:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10380:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10384:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   10388:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   1038c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   10390:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10394:	ldrh.w	r0, [r3, #392]	; 0x188
   10398:	uxth	r0, r0
   1039a:	orr.w	r0, r0, #240	; 0xf0
   1039e:	strh.w	r0, [r3, #392]	; 0x188
   103a2:	add.w	r0, r1, r1, lsl #1
   103a6:	ldr	r3, [pc, #580]	; (105ec <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
   103a8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   103aa:	movs	r5, #0
   103ac:	lsls	r0, r0, #5
   103ae:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   103b0:	cmp	r1, #4
   103b2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   103b4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   103b8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
   103ba:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   103bc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   103be:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   103c0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   103c2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   103c4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   103c6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   103c8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   103ca:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   103cc:	bne.n	103a2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   103ce:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   103d2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   103d6:	ldr	r3, [pc, #540]	; (105f4 <pwm_init+0x2a0>)
   103d8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   103dc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   103de:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   103e0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   103e4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   103e6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   103ea:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   103ee:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   103f2:	ldrh.w	r0, [r4, #392]	; 0x188
   103f6:	uxth	r0, r0
   103f8:	orr.w	r0, r0, #3840	; 0xf00
   103fc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10400:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   10404:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10408:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   1040c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10410:	ldrh.w	r0, [r3, #392]	; 0x188
   10414:	uxth	r0, r0
   10416:	orr.w	r0, r0, #240	; 0xf0
   1041a:	strh.w	r0, [r3, #392]	; 0x188
   1041e:	add.w	r0, r1, r1, lsl #1
   10422:	ldr	r3, [pc, #464]	; (105f4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
   10424:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   10426:	movs	r5, #0
   10428:	lsls	r0, r0, #5
   1042a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   1042c:	cmp	r1, #4
   1042e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10430:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10432:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   10436:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10438:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   1043a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   1043c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   1043e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   10440:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   10442:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   10444:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10446:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   10448:	bne.n	1041e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1044a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   1044e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10452:	ldr	r3, [pc, #420]	; (105f8 <pwm_init+0x2a4>)
   10454:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10458:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   1045a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1045c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   10460:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10462:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10466:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1046a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   1046e:	ldrh.w	r0, [r4, #392]	; 0x188
   10472:	uxth	r0, r0
   10474:	orr.w	r0, r0, #3840	; 0xf00
   10478:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1047c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   10480:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10484:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   10488:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1048c:	ldrh.w	r0, [r3, #392]	; 0x188
   10490:	uxth	r0, r0
   10492:	orr.w	r0, r0, #240	; 0xf0
   10496:	strh.w	r0, [r3, #392]	; 0x188
   1049a:	add.w	r0, r1, r1, lsl #1
   1049e:	ldr	r3, [pc, #344]	; (105f8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
   104a0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   104a2:	movs	r5, #0
   104a4:	lsls	r0, r0, #5
   104a6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   104a8:	cmp	r1, #4
   104aa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   104ac:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   104ae:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   104b2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   104b4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   104b6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   104b8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   104ba:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
   104bc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   104be:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   104c0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   104c2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   104c4:	bne.n	1049a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   104c6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   104ca:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   104ce:	ldr	r3, [pc, #300]	; (105fc <pwm_init+0x2a8>)
   104d0:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   104d4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   104d6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   104d8:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
   104dc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   104de:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   104e2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   104e6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   104ea:	ldrh.w	r0, [r4, #392]	; 0x188
   104ee:	uxth	r0, r0
   104f0:	orr.w	r0, r0, #3840	; 0xf00
   104f4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   104f8:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   104fc:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
   10500:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
   10504:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10508:	ldrh.w	r0, [r3, #392]	; 0x188
   1050c:	uxth	r0, r0
   1050e:	orr.w	r0, r0, #240	; 0xf0
   10512:	strh.w	r0, [r3, #392]	; 0x188
   10516:	add.w	r0, r1, r1, lsl #1
   1051a:	ldr	r3, [pc, #224]	; (105fc <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
   1051c:	adds	r1, #1
   1051e:	lsls	r0, r0, #5
   10520:	mov	r4, r3
   10522:	cmp	r1, #4
   10524:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10526:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10528:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1052c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   1052e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   10530:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   10532:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   10534:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
   10536:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   10538:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1053a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   1053c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
   1053e:	bne.n	10516 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10540:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10544:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10546:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10548:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1054c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1054e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10552:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10554:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10558:	orrs	r3, r7
   1055a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   1055e:	ldrh.w	r3, [r4, #392]	; 0x188
   10562:	uxth	r3, r3
   10564:	orr.w	r3, r3, #3840	; 0xf00
   10568:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   1056c:	lsls	r0, r2, #5
   1056e:	ldr	r3, [pc, #144]	; (10600 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10570:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   10572:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10574:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   10576:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   10578:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1057a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1057c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1057e:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10582:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   10584:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10586:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   10588:	bne.n	1056c <pwm_init+0x218>
   1058a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1058c:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1058e:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10592:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   10596:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10598:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   1059c:	lsls	r0, r2, #5
   1059e:	ldr	r3, [pc, #100]	; (10604 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105a0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   105a2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105a4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   105a6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   105a8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   105aa:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   105ac:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   105ae:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   105b0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   105b2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   105b4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105b6:	bne.n	1059c <pwm_init+0x248>
   105b8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   105ba:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   105bc:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   105c0:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   105c4:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   105c6:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
   105ca:	lsls	r0, r2, #5
   105cc:	ldr	r3, [pc, #56]	; (10608 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105ce:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   105d0:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105d2:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
   105d4:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   105d6:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   105d8:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   105da:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   105dc:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   105de:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
   105e0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   105e2:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
   105e4:	bne.n	105ca <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   105e6:	pop	{r4, r5, r6, r7, pc}
   105e8:	.word	0x400fc000
   105ec:	.word	0x403dc000
   105f0:	.word	0xfc030000
   105f4:	.word	0x403e0000
   105f8:	.word	0x403e4000
   105fc:	.word	0x403e8000
   10600:	.word	0x401dc000
   10604:	.word	0x401e0000
   10608:	.word	0x401e4000
   1060c:	.word	0x00000000

00010610 <sqrt>:
   10610:	push	{lr}
   10612:	vpush	{d8}
   10616:	vmov.f64	d8, d0
   1061a:	sub	sp, #44	; 0x2c
   1061c:	bl	106b8 <__ieee754_sqrt>
   10620:	ldr	r3, [pc, #140]	; (106b0 <sqrt+0xa0>)
   10622:	ldrsb.w	r3, [r3]
   10626:	adds	r2, r3, #1
   10628:	beq.n	10642 <sqrt+0x32>
   1062a:	vcmp.f64	d8, d8
   1062e:	vmrs	APSR_nzcv, fpscr
   10632:	bvs.n	10642 <sqrt+0x32>
   10634:	vldr	d7, [pc, #112]	; 106a8 <sqrt+0x98>
   10638:	vcmpe.f64	d8, d7
   1063c:	vmrs	APSR_nzcv, fpscr
   10640:	bmi.n	1064c <sqrt+0x3c>
   10642:	add	sp, #44	; 0x2c
   10644:	vpop	{d8}
   10648:	ldr.w	pc, [sp], #4
   1064c:	movs	r2, #1
   1064e:	ldr	r1, [pc, #100]	; (106b4 <sqrt+0xa4>)
   10650:	str	r2, [sp, #0]
   10652:	movs	r2, #0
   10654:	vstr	d8, [sp, #16]
   10658:	vstr	d8, [sp, #8]
   1065c:	str	r1, [sp, #4]
   1065e:	str	r2, [sp, #32]
   10660:	cbz	r3, 10688 <sqrt+0x78>
   10662:	vdiv.f64	d6, d7, d7
   10666:	cmp	r3, #2
   10668:	vstr	d6, [sp, #24]
   1066c:	bne.n	1068c <sqrt+0x7c>
   1066e:	bl	108c8 <__errno>
   10672:	movs	r3, #33	; 0x21
   10674:	str	r3, [r0, #0]
   10676:	ldr	r3, [sp, #32]
   10678:	cbnz	r3, 10698 <sqrt+0x88>
   1067a:	vldr	d0, [sp, #24]
   1067e:	add	sp, #44	; 0x2c
   10680:	vpop	{d8}
   10684:	ldr.w	pc, [sp], #4
   10688:	vstr	d7, [sp, #24]
   1068c:	mov	r0, sp
   1068e:	bl	1083c <matherr>
   10692:	cmp	r0, #0
   10694:	bne.n	10676 <sqrt+0x66>
   10696:	b.n	1066e <sqrt+0x5e>
   10698:	bl	108c8 <__errno>
   1069c:	ldr	r3, [sp, #32]
   1069e:	str	r3, [r0, #0]
   106a0:	b.n	1067a <sqrt+0x6a>
   106a2:	nop
   106a4:	nop.w
	...
   106b0:	.word	0x20000f24
   106b4:	.word	0x20000958

000106b8 <__ieee754_sqrt>:
   106b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106bc:	sub	sp, #8
   106be:	vstr	d0, [sp]
   106c2:	ldr	r1, [pc, #372]	; (10838 <__ieee754_sqrt+0x180>)
   106c4:	ldr	r3, [sp, #4]
   106c6:	ldr	r0, [sp, #0]
   106c8:	mov	r4, r1
   106ca:	ands	r1, r3
   106cc:	cmp	r1, r4
   106ce:	beq.w	10802 <__ieee754_sqrt+0x14a>
   106d2:	cmp	r3, #0
   106d4:	mov	r2, r0
   106d6:	ble.n	107c8 <__ieee754_sqrt+0x110>
   106d8:	asrs	r7, r3, #20
   106da:	beq.w	107e2 <__ieee754_sqrt+0x12a>
   106de:	subw	r7, r7, #1023	; 0x3ff
   106e2:	ubfx	r3, r3, #0, #20
   106e6:	lsls	r1, r7, #31
   106e8:	orr.w	r3, r3, #1048576	; 0x100000
   106ec:	bmi.n	107be <__ieee754_sqrt+0x106>
   106ee:	add.w	r1, r3, r2, lsr #31
   106f2:	movs	r6, #0
   106f4:	add	r3, r1
   106f6:	asrs	r7, r7, #1
   106f8:	lsls	r2, r2, #1
   106fa:	mov	lr, r6
   106fc:	movs	r0, #22
   106fe:	mov.w	r1, #2097152	; 0x200000
   10702:	add.w	r4, lr, r1
   10706:	cmp	r4, r3
   10708:	mov.w	r5, r2, lsr #31
   1070c:	mov.w	r2, r2, lsl #1
   10710:	bgt.n	1071a <__ieee754_sqrt+0x62>
   10712:	subs	r3, r3, r4
   10714:	add.w	lr, r4, r1
   10718:	add	r6, r1
   1071a:	subs	r0, #1
   1071c:	add.w	r3, r5, r3, lsl #1
   10720:	mov.w	r1, r1, lsr #1
   10724:	bne.n	10702 <__ieee754_sqrt+0x4a>
   10726:	mov	ip, r0
   10728:	movs	r4, #32
   1072a:	mov.w	r1, #2147483648	; 0x80000000
   1072e:	b.n	10744 <__ieee754_sqrt+0x8c>
   10730:	beq.n	10774 <__ieee754_sqrt+0xbc>
   10732:	add.w	r5, r3, r2, lsr #31
   10736:	subs	r4, #1
   10738:	mov.w	r1, r1, lsr #1
   1073c:	add	r3, r5
   1073e:	mov.w	r2, r2, lsl #1
   10742:	beq.n	10786 <__ieee754_sqrt+0xce>
   10744:	cmp	lr, r3
   10746:	add.w	r5, r1, ip
   1074a:	bge.n	10730 <__ieee754_sqrt+0x78>
   1074c:	cmp	r5, #0
   1074e:	add.w	ip, r5, r1
   10752:	blt.n	10768 <__ieee754_sqrt+0xb0>
   10754:	mov	r8, lr
   10756:	cmp	r5, r2
   10758:	rsb	r3, lr, r3
   1075c:	bls.n	10760 <__ieee754_sqrt+0xa8>
   1075e:	subs	r3, #1
   10760:	subs	r2, r2, r5
   10762:	add	r0, r1
   10764:	mov	lr, r8
   10766:	b.n	10732 <__ieee754_sqrt+0x7a>
   10768:	cmp.w	ip, #0
   1076c:	blt.n	10754 <__ieee754_sqrt+0x9c>
   1076e:	add.w	r8, lr, #1
   10772:	b.n	10756 <__ieee754_sqrt+0x9e>
   10774:	cmp	r5, r2
   10776:	bhi.n	107ae <__ieee754_sqrt+0xf6>
   10778:	cmp	r5, #0
   1077a:	add.w	ip, r5, r1
   1077e:	blt.n	10812 <__ieee754_sqrt+0x15a>
   10780:	mov	r8, r3
   10782:	movs	r3, #0
   10784:	b.n	10760 <__ieee754_sqrt+0xa8>
   10786:	orrs	r3, r2
   10788:	bne.n	107b2 <__ieee754_sqrt+0xfa>
   1078a:	lsrs	r0, r0, #1
   1078c:	asrs	r1, r6, #1
   1078e:	lsls	r3, r6, #31
   10790:	add.w	r1, r1, #1069547520	; 0x3fc00000
   10794:	add.w	r1, r1, #2097152	; 0x200000
   10798:	it	mi
   1079a:	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1079e:	add.w	r3, r1, r7, lsl #20
   107a2:	mov	r2, r0
   107a4:	vmov	d0, r2, r3
   107a8:	add	sp, #8
   107aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107ae:	mov	r3, lr
   107b0:	b.n	10732 <__ieee754_sqrt+0x7a>
   107b2:	adds	r2, r0, #1
   107b4:	beq.n	1081a <__ieee754_sqrt+0x162>
   107b6:	and.w	r3, r0, #1
   107ba:	add	r0, r3
   107bc:	b.n	1078a <__ieee754_sqrt+0xd2>
   107be:	lsls	r3, r3, #1
   107c0:	add.w	r3, r3, r2, lsr #31
   107c4:	lsls	r2, r2, #1
   107c6:	b.n	106ee <__ieee754_sqrt+0x36>
   107c8:	bic.w	r1, r3, #2147483648	; 0x80000000
   107cc:	orrs	r1, r0
   107ce:	beq.n	1080c <__ieee754_sqrt+0x154>
   107d0:	cbnz	r3, 1082a <__ieee754_sqrt+0x172>
   107d2:	mov	r7, r3
   107d4:	lsrs	r3, r2, #11
   107d6:	subs	r7, #21
   107d8:	lsls	r2, r2, #21
   107da:	cmp	r3, #0
   107dc:	beq.n	107d4 <__ieee754_sqrt+0x11c>
   107de:	lsls	r5, r3, #11
   107e0:	bmi.n	10820 <__ieee754_sqrt+0x168>
   107e2:	movs	r1, #0
   107e4:	b.n	107e8 <__ieee754_sqrt+0x130>
   107e6:	mov	r1, r0
   107e8:	lsls	r3, r3, #1
   107ea:	lsls	r4, r3, #11
   107ec:	add.w	r0, r1, #1
   107f0:	bpl.n	107e6 <__ieee754_sqrt+0x12e>
   107f2:	rsb	r4, r0, #32
   107f6:	lsr.w	r4, r2, r4
   107fa:	orrs	r3, r4
   107fc:	subs	r7, r7, r1
   107fe:	lsls	r2, r0
   10800:	b.n	106de <__ieee754_sqrt+0x26>
   10802:	vfma.f64	d0, d0, d0
   10806:	add	sp, #8
   10808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1080c:	vldr	d0, [sp]
   10810:	b.n	107a8 <__ieee754_sqrt+0xf0>
   10812:	cmp.w	ip, #0
   10816:	bge.n	1076e <__ieee754_sqrt+0xb6>
   10818:	b.n	10780 <__ieee754_sqrt+0xc8>
   1081a:	adds	r6, #1
   1081c:	mov	r0, r4
   1081e:	b.n	1078c <__ieee754_sqrt+0xd4>
   10820:	movs	r4, #32
   10822:	mov.w	r1, #4294967295
   10826:	movs	r0, #0
   10828:	b.n	107f6 <__ieee754_sqrt+0x13e>
   1082a:	vldr	d7, [sp]
   1082e:	vsub.f64	d7, d7, d7
   10832:	vdiv.f64	d0, d7, d7
   10836:	b.n	107a8 <__ieee754_sqrt+0xf0>
   10838:	.word	0x7ff00000

0001083c <matherr>:
   1083c:	movs	r0, #0
   1083e:	bx	lr

00010840 <__aeabi_atexit>:
   10840:	mov	r3, r1
   10842:	mov	r1, r0
   10844:	mov	r0, r3
   10846:	b.w	108bc <__cxa_atexit>
   1084a:	nop

0001084c <calloc>:
   1084c:	ldr	r3, [pc, #8]	; (10858 <calloc+0xc>)
   1084e:	mov	r2, r1
   10850:	mov	r1, r0
   10852:	ldr	r0, [r3, #0]
   10854:	b.w	1085c <_calloc_r>
   10858:	.word	0x20001350

0001085c <_calloc_r>:
   1085c:	push	{r4, lr}
   1085e:	mul.w	r1, r2, r1
   10862:	bl	10944 <_malloc_r>
   10866:	mov	r4, r0
   10868:	cbz	r0, 108a2 <_calloc_r+0x46>
   1086a:	ldr.w	r2, [r0, #-4]
   1086e:	bic.w	r2, r2, #3
   10872:	subs	r2, #4
   10874:	cmp	r2, #36	; 0x24
   10876:	bhi.n	108aa <_calloc_r+0x4e>
   10878:	cmp	r2, #19
   1087a:	bls.n	108a6 <_calloc_r+0x4a>
   1087c:	movs	r3, #0
   1087e:	cmp	r2, #27
   10880:	str	r3, [r0, #0]
   10882:	str	r3, [r0, #4]
   10884:	bls.n	108b4 <_calloc_r+0x58>
   10886:	cmp	r2, #36	; 0x24
   10888:	str	r3, [r0, #8]
   1088a:	str	r3, [r0, #12]
   1088c:	iteee	ne
   1088e:	addne.w	r2, r0, #16
   10892:	streq	r3, [r0, #16]
   10894:	streq	r3, [r0, #20]
   10896:	addeq.w	r2, r0, #24
   1089a:	movs	r3, #0
   1089c:	str	r3, [r2, #0]
   1089e:	str	r3, [r2, #4]
   108a0:	str	r3, [r2, #8]
   108a2:	mov	r0, r4
   108a4:	pop	{r4, pc}
   108a6:	mov	r2, r0
   108a8:	b.n	1089a <_calloc_r+0x3e>
   108aa:	movs	r1, #0
   108ac:	bl	10f7c <memset>
   108b0:	mov	r0, r4
   108b2:	pop	{r4, pc}
   108b4:	add.w	r2, r0, #8
   108b8:	b.n	1089a <_calloc_r+0x3e>
   108ba:	nop

000108bc <__cxa_atexit>:
   108bc:	mov	r3, r2
   108be:	mov	r2, r1
   108c0:	mov	r1, r0
   108c2:	movs	r0, #2
   108c4:	b.w	11944 <__register_exitproc>

000108c8 <__errno>:
   108c8:	ldr	r3, [pc, #4]	; (108d0 <__errno+0x8>)
   108ca:	ldr	r0, [r3, #0]
   108cc:	bx	lr
   108ce:	nop
   108d0:	.word	0x20001350

000108d4 <__libc_init_array>:
   108d4:	push	{r4, r5, r6, lr}
   108d6:	ldr	r6, [pc, #60]	; (10914 <__libc_init_array+0x40>)
   108d8:	ldr	r5, [pc, #60]	; (10918 <__libc_init_array+0x44>)
   108da:	subs	r6, r6, r5
   108dc:	asrs	r6, r6, #2
   108de:	it	ne
   108e0:	movne	r4, #0
   108e2:	beq.n	108f0 <__libc_init_array+0x1c>
   108e4:	adds	r4, #1
   108e6:	ldr.w	r3, [r5], #4
   108ea:	blx	r3
   108ec:	cmp	r6, r4
   108ee:	bne.n	108e4 <__libc_init_array+0x10>
   108f0:	ldr	r6, [pc, #40]	; (1091c <__libc_init_array+0x48>)
   108f2:	ldr	r5, [pc, #44]	; (10920 <__libc_init_array+0x4c>)
   108f4:	subs	r6, r6, r5
   108f6:	bl	11c58 <___init_veneer>
   108fa:	asrs	r6, r6, #2
   108fc:	it	ne
   108fe:	movne	r4, #0
   10900:	beq.n	10910 <__libc_init_array+0x3c>
   10902:	adds	r4, #1
   10904:	ldr.w	r3, [r5], #4
   10908:	blx	r3
   1090a:	cmp	r6, r4
   1090c:	bne.n	10902 <__libc_init_array+0x2e>
   1090e:	pop	{r4, r5, r6, pc}
   10910:	pop	{r4, r5, r6, pc}
   10912:	nop
   10914:	.word	0x60001600
   10918:	.word	0x60001600
   1091c:	.word	0x6000160c
   10920:	.word	0x60001600

00010924 <malloc>:
   10924:	ldr	r3, [pc, #8]	; (10930 <malloc+0xc>)
   10926:	mov	r1, r0
   10928:	ldr	r0, [r3, #0]
   1092a:	b.w	10944 <_malloc_r>
   1092e:	nop
   10930:	.word	0x20001350

00010934 <free>:
   10934:	ldr	r3, [pc, #8]	; (10940 <free+0xc>)
   10936:	mov	r1, r0
   10938:	ldr	r0, [r3, #0]
   1093a:	b.w	11a84 <_free_r>
   1093e:	nop
   10940:	.word	0x20001350

00010944 <_malloc_r>:
   10944:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10948:	add.w	r5, r1, #11
   1094c:	cmp	r5, #22
   1094e:	sub	sp, #12
   10950:	mov	r6, r0
   10952:	bls.w	10a94 <_malloc_r+0x150>
   10956:	bics.w	r5, r5, #7
   1095a:	bmi.w	10adc <_malloc_r+0x198>
   1095e:	cmp	r1, r5
   10960:	bhi.w	10adc <_malloc_r+0x198>
   10964:	bl	11018 <__malloc_lock>
   10968:	cmp.w	r5, #504	; 0x1f8
   1096c:	bcc.w	10ea8 <_malloc_r+0x564>
   10970:	lsrs	r3, r5, #9
   10972:	beq.w	10aea <_malloc_r+0x1a6>
   10976:	cmp	r3, #4
   10978:	bhi.w	10c82 <_malloc_r+0x33e>
   1097c:	lsrs	r0, r5, #6
   1097e:	add.w	lr, r0, #57	; 0x39
   10982:	mov.w	r3, lr, lsl #1
   10986:	adds	r0, #56	; 0x38
   10988:	ldr	r7, [pc, #784]	; (10c9c <_malloc_r+0x358>)
   1098a:	add.w	r3, r7, r3, lsl #2
   1098e:	sub.w	r1, r3, #8
   10992:	ldr	r4, [r3, #4]
   10994:	cmp	r1, r4
   10996:	bne.n	109a8 <_malloc_r+0x64>
   10998:	b.n	10af4 <_malloc_r+0x1b0>
   1099a:	cmp	r2, #0
   1099c:	bge.w	10af8 <_malloc_r+0x1b4>
   109a0:	ldr	r4, [r4, #12]
   109a2:	cmp	r1, r4
   109a4:	beq.w	10af4 <_malloc_r+0x1b0>
   109a8:	ldr	r3, [r4, #4]
   109aa:	bic.w	r3, r3, #3
   109ae:	subs	r2, r3, r5
   109b0:	cmp	r2, #15
   109b2:	ble.n	1099a <_malloc_r+0x56>
   109b4:	ldr	r1, [pc, #740]	; (10c9c <_malloc_r+0x358>)
   109b6:	ldr	r4, [r7, #16]
   109b8:	add.w	lr, r1, #8
   109bc:	cmp	r4, lr
   109be:	beq.w	10d28 <_malloc_r+0x3e4>
   109c2:	ldr	r3, [r4, #4]
   109c4:	bic.w	r3, r3, #3
   109c8:	subs	r2, r3, r5
   109ca:	cmp	r2, #15
   109cc:	bgt.w	10d02 <_malloc_r+0x3be>
   109d0:	cmp	r2, #0
   109d2:	str.w	lr, [r1, #20]
   109d6:	str.w	lr, [r1, #16]
   109da:	bge.w	10b1a <_malloc_r+0x1d6>
   109de:	cmp.w	r3, #512	; 0x200
   109e2:	bcs.w	10cb4 <_malloc_r+0x370>
   109e6:	lsrs	r3, r3, #3
   109e8:	add.w	ip, r3, #1
   109ec:	movs	r2, #1
   109ee:	asrs	r3, r3, #2
   109f0:	lsl.w	r3, r2, r3
   109f4:	ldr	r2, [r1, #4]
   109f6:	ldr.w	r8, [r1, ip, lsl #3]
   109fa:	str.w	r8, [r4, #8]
   109fe:	add.w	r9, r1, ip, lsl #3
   10a02:	orrs	r2, r3
   10a04:	sub.w	r3, r9, #8
   10a08:	str	r3, [r4, #12]
   10a0a:	str	r2, [r1, #4]
   10a0c:	str.w	r4, [r1, ip, lsl #3]
   10a10:	str.w	r4, [r8, #12]
   10a14:	asrs	r3, r0, #2
   10a16:	movs	r4, #1
   10a18:	lsls	r4, r3
   10a1a:	cmp	r4, r2
   10a1c:	bhi.w	10b34 <_malloc_r+0x1f0>
   10a20:	tst	r4, r2
   10a22:	bne.n	10a32 <_malloc_r+0xee>
   10a24:	bic.w	r0, r0, #3
   10a28:	lsls	r4, r4, #1
   10a2a:	tst	r4, r2
   10a2c:	add.w	r0, r0, #4
   10a30:	beq.n	10a28 <_malloc_r+0xe4>
   10a32:	add.w	r9, r7, r0, lsl #3
   10a36:	mov	ip, r9
   10a38:	mov	r8, r0
   10a3a:	ldr.w	r1, [ip, #12]
   10a3e:	cmp	ip, r1
   10a40:	bne.n	10a52 <_malloc_r+0x10e>
   10a42:	b.n	10d2c <_malloc_r+0x3e8>
   10a44:	cmp	r2, #0
   10a46:	bge.w	10d4c <_malloc_r+0x408>
   10a4a:	ldr	r1, [r1, #12]
   10a4c:	cmp	ip, r1
   10a4e:	beq.w	10d2c <_malloc_r+0x3e8>
   10a52:	ldr	r3, [r1, #4]
   10a54:	bic.w	r3, r3, #3
   10a58:	subs	r2, r3, r5
   10a5a:	cmp	r2, #15
   10a5c:	ble.n	10a44 <_malloc_r+0x100>
   10a5e:	mov	r4, r1
   10a60:	ldr.w	ip, [r1, #12]
   10a64:	ldr.w	r8, [r4, #8]!
   10a68:	adds	r3, r1, r5
   10a6a:	orr.w	r5, r5, #1
   10a6e:	str	r5, [r1, #4]
   10a70:	orr.w	r1, r2, #1
   10a74:	str.w	ip, [r8, #12]
   10a78:	mov	r0, r6
   10a7a:	str.w	r8, [ip, #8]
   10a7e:	str	r3, [r7, #20]
   10a80:	str	r3, [r7, #16]
   10a82:	str.w	lr, [r3, #12]
   10a86:	str.w	lr, [r3, #8]
   10a8a:	str	r1, [r3, #4]
   10a8c:	str	r2, [r3, r2]
   10a8e:	bl	1101c <__malloc_unlock>
   10a92:	b.n	10ad4 <_malloc_r+0x190>
   10a94:	cmp	r1, #16
   10a96:	bhi.n	10adc <_malloc_r+0x198>
   10a98:	bl	11018 <__malloc_lock>
   10a9c:	movs	r5, #16
   10a9e:	movs	r3, #6
   10aa0:	movs	r0, #2
   10aa2:	ldr	r7, [pc, #504]	; (10c9c <_malloc_r+0x358>)
   10aa4:	add.w	r3, r7, r3, lsl #2
   10aa8:	sub.w	r2, r3, #8
   10aac:	ldr	r4, [r3, #4]
   10aae:	cmp	r4, r2
   10ab0:	beq.w	10d3e <_malloc_r+0x3fa>
   10ab4:	ldr	r3, [r4, #4]
   10ab6:	ldr	r1, [r4, #12]
   10ab8:	ldr	r5, [r4, #8]
   10aba:	bic.w	r3, r3, #3
   10abe:	add	r3, r4
   10ac0:	mov	r0, r6
   10ac2:	ldr	r2, [r3, #4]
   10ac4:	str	r1, [r5, #12]
   10ac6:	orr.w	r2, r2, #1
   10aca:	str	r5, [r1, #8]
   10acc:	str	r2, [r3, #4]
   10ace:	bl	1101c <__malloc_unlock>
   10ad2:	adds	r4, #8
   10ad4:	mov	r0, r4
   10ad6:	add	sp, #12
   10ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10adc:	movs	r4, #0
   10ade:	movs	r3, #12
   10ae0:	mov	r0, r4
   10ae2:	str	r3, [r6, #0]
   10ae4:	add	sp, #12
   10ae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10aea:	movs	r3, #128	; 0x80
   10aec:	mov.w	lr, #64	; 0x40
   10af0:	movs	r0, #63	; 0x3f
   10af2:	b.n	10988 <_malloc_r+0x44>
   10af4:	mov	r0, lr
   10af6:	b.n	109b4 <_malloc_r+0x70>
   10af8:	add	r3, r4
   10afa:	ldr	r1, [r4, #12]
   10afc:	ldr	r2, [r3, #4]
   10afe:	ldr	r5, [r4, #8]
   10b00:	orr.w	r2, r2, #1
   10b04:	str	r1, [r5, #12]
   10b06:	mov	r0, r6
   10b08:	str	r5, [r1, #8]
   10b0a:	str	r2, [r3, #4]
   10b0c:	bl	1101c <__malloc_unlock>
   10b10:	adds	r4, #8
   10b12:	mov	r0, r4
   10b14:	add	sp, #12
   10b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b1a:	add	r3, r4
   10b1c:	mov	r0, r6
   10b1e:	ldr	r2, [r3, #4]
   10b20:	orr.w	r2, r2, #1
   10b24:	str	r2, [r3, #4]
   10b26:	bl	1101c <__malloc_unlock>
   10b2a:	adds	r4, #8
   10b2c:	mov	r0, r4
   10b2e:	add	sp, #12
   10b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b34:	ldr	r4, [r7, #8]
   10b36:	ldr	r3, [r4, #4]
   10b38:	bic.w	r8, r3, #3
   10b3c:	cmp	r8, r5
   10b3e:	bcc.n	10b4a <_malloc_r+0x206>
   10b40:	rsb	r3, r5, r8
   10b44:	cmp	r3, #15
   10b46:	bgt.w	10c62 <_malloc_r+0x31e>
   10b4a:	ldr	r3, [pc, #340]	; (10ca0 <_malloc_r+0x35c>)
   10b4c:	ldr.w	r9, [pc, #352]	; 10cb0 <_malloc_r+0x36c>
   10b50:	ldr	r2, [r3, #0]
   10b52:	ldr.w	r3, [r9]
   10b56:	adds	r3, #1
   10b58:	add	r2, r5
   10b5a:	add.w	sl, r4, r8
   10b5e:	beq.w	10e22 <_malloc_r+0x4de>
   10b62:	add.w	r2, r2, #4096	; 0x1000
   10b66:	adds	r2, #15
   10b68:	bic.w	r2, r2, #4080	; 0xff0
   10b6c:	bic.w	r2, r2, #15
   10b70:	mov	r1, r2
   10b72:	mov	r0, r6
   10b74:	str	r2, [sp, #4]
   10b76:	bl	11410 <_sbrk_r>
   10b7a:	cmp.w	r0, #4294967295
   10b7e:	mov	fp, r0
   10b80:	ldr	r2, [sp, #4]
   10b82:	beq.w	10e36 <_malloc_r+0x4f2>
   10b86:	cmp	sl, r0
   10b88:	bhi.w	10d84 <_malloc_r+0x440>
   10b8c:	ldr	r3, [pc, #276]	; (10ca4 <_malloc_r+0x360>)
   10b8e:	ldr	r1, [r3, #0]
   10b90:	cmp	sl, fp
   10b92:	add	r1, r2
   10b94:	str	r1, [r3, #0]
   10b96:	beq.w	10e40 <_malloc_r+0x4fc>
   10b9a:	ldr.w	r0, [r9]
   10b9e:	ldr.w	lr, [pc, #272]	; 10cb0 <_malloc_r+0x36c>
   10ba2:	adds	r0, #1
   10ba4:	ittet	ne
   10ba6:	rsbne	sl, sl, fp
   10baa:	addne	r1, sl
   10bac:	streq.w	fp, [lr]
   10bb0:	strne	r1, [r3, #0]
   10bb2:	ands.w	r1, fp, #7
   10bb6:	beq.w	10de8 <_malloc_r+0x4a4>
   10bba:	rsb	r0, r1, #8
   10bbe:	rsb	r1, r1, #4096	; 0x1000
   10bc2:	add	fp, r0
   10bc4:	adds	r1, #8
   10bc6:	add	r2, fp
   10bc8:	ubfx	r2, r2, #0, #12
   10bcc:	rsb	r9, r2, r1
   10bd0:	mov	r1, r9
   10bd2:	mov	r0, r6
   10bd4:	str	r3, [sp, #4]
   10bd6:	bl	11410 <_sbrk_r>
   10bda:	adds	r3, r0, #1
   10bdc:	ldr	r3, [sp, #4]
   10bde:	beq.w	10e60 <_malloc_r+0x51c>
   10be2:	rsb	r2, fp, r0
   10be6:	add	r2, r9
   10be8:	orr.w	r2, r2, #1
   10bec:	ldr	r1, [r3, #0]
   10bee:	str.w	fp, [r7, #8]
   10bf2:	add	r1, r9
   10bf4:	cmp	r4, r7
   10bf6:	str.w	r2, [fp, #4]
   10bfa:	str	r1, [r3, #0]
   10bfc:	ldr.w	r9, [pc, #164]	; 10ca4 <_malloc_r+0x360>
   10c00:	beq.n	10c30 <_malloc_r+0x2ec>
   10c02:	cmp.w	r8, #15
   10c06:	bls.w	10e04 <_malloc_r+0x4c0>
   10c0a:	ldr	r2, [r4, #4]
   10c0c:	sub.w	r3, r8, #12
   10c10:	bic.w	r3, r3, #7
   10c14:	adds	r0, r4, r3
   10c16:	and.w	r2, r2, #1
   10c1a:	mov.w	lr, #5
   10c1e:	orrs	r2, r3
   10c20:	cmp	r3, #15
   10c22:	str	r2, [r4, #4]
   10c24:	str.w	lr, [r0, #4]
   10c28:	str.w	lr, [r0, #8]
   10c2c:	bhi.w	10e68 <_malloc_r+0x524>
   10c30:	ldr	r3, [pc, #116]	; (10ca8 <_malloc_r+0x364>)
   10c32:	ldr	r4, [r7, #8]
   10c34:	ldr	r2, [r3, #0]
   10c36:	cmp	r1, r2
   10c38:	it	hi
   10c3a:	strhi	r1, [r3, #0]
   10c3c:	ldr	r3, [pc, #108]	; (10cac <_malloc_r+0x368>)
   10c3e:	ldr	r2, [r3, #0]
   10c40:	cmp	r1, r2
   10c42:	ldr	r2, [r4, #4]
   10c44:	it	hi
   10c46:	strhi	r1, [r3, #0]
   10c48:	bic.w	r2, r2, #3
   10c4c:	cmp	r5, r2
   10c4e:	sub.w	r3, r2, r5
   10c52:	bhi.n	10c58 <_malloc_r+0x314>
   10c54:	cmp	r3, #15
   10c56:	bgt.n	10c62 <_malloc_r+0x31e>
   10c58:	mov	r0, r6
   10c5a:	bl	1101c <__malloc_unlock>
   10c5e:	movs	r4, #0
   10c60:	b.n	10ad4 <_malloc_r+0x190>
   10c62:	adds	r2, r4, r5
   10c64:	orr.w	r3, r3, #1
   10c68:	orr.w	r5, r5, #1
   10c6c:	str	r5, [r4, #4]
   10c6e:	mov	r0, r6
   10c70:	str	r2, [r7, #8]
   10c72:	str	r3, [r2, #4]
   10c74:	bl	1101c <__malloc_unlock>
   10c78:	adds	r4, #8
   10c7a:	mov	r0, r4
   10c7c:	add	sp, #12
   10c7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c82:	cmp	r3, #20
   10c84:	bls.n	10d6a <_malloc_r+0x426>
   10c86:	cmp	r3, #84	; 0x54
   10c88:	bhi.w	10dd4 <_malloc_r+0x490>
   10c8c:	lsrs	r0, r5, #12
   10c8e:	add.w	lr, r0, #111	; 0x6f
   10c92:	mov.w	r3, lr, lsl #1
   10c96:	adds	r0, #110	; 0x6e
   10c98:	b.n	10988 <_malloc_r+0x44>
   10c9a:	nop
   10c9c:	.word	0x20001354
   10ca0:	.word	0x2000e578
   10ca4:	.word	0x2000e57c
   10ca8:	.word	0x2000e574
   10cac:	.word	0x2000e570
   10cb0:	.word	0x20001760
   10cb4:	lsrs	r2, r3, #9
   10cb6:	cmp	r2, #4
   10cb8:	bls.n	10d78 <_malloc_r+0x434>
   10cba:	cmp	r2, #20
   10cbc:	bhi.w	10e26 <_malloc_r+0x4e2>
   10cc0:	add.w	r1, r2, #92	; 0x5c
   10cc4:	lsls	r1, r1, #1
   10cc6:	adds	r2, #91	; 0x5b
   10cc8:	add.w	ip, r7, r1, lsl #2
   10ccc:	ldr.w	r1, [r7, r1, lsl #2]
   10cd0:	ldr.w	r8, [pc, #476]	; 10eb0 <_malloc_r+0x56c>
   10cd4:	sub.w	ip, ip, #8
   10cd8:	cmp	ip, r1
   10cda:	beq.w	10dee <_malloc_r+0x4aa>
   10cde:	ldr	r2, [r1, #4]
   10ce0:	bic.w	r2, r2, #3
   10ce4:	cmp	r3, r2
   10ce6:	bcs.n	10cee <_malloc_r+0x3aa>
   10ce8:	ldr	r1, [r1, #8]
   10cea:	cmp	ip, r1
   10cec:	bne.n	10cde <_malloc_r+0x39a>
   10cee:	ldr.w	ip, [r1, #12]
   10cf2:	ldr	r2, [r7, #4]
   10cf4:	str.w	ip, [r4, #12]
   10cf8:	str	r1, [r4, #8]
   10cfa:	str.w	r4, [ip, #8]
   10cfe:	str	r4, [r1, #12]
   10d00:	b.n	10a14 <_malloc_r+0xd0>
   10d02:	adds	r3, r4, r5
   10d04:	orr.w	r7, r2, #1
   10d08:	orr.w	r5, r5, #1
   10d0c:	str	r5, [r4, #4]
   10d0e:	mov	r0, r6
   10d10:	str	r3, [r1, #20]
   10d12:	str	r3, [r1, #16]
   10d14:	str.w	lr, [r3, #12]
   10d18:	str.w	lr, [r3, #8]
   10d1c:	str	r7, [r3, #4]
   10d1e:	str	r2, [r3, r2]
   10d20:	adds	r4, #8
   10d22:	bl	1101c <__malloc_unlock>
   10d26:	b.n	10ad4 <_malloc_r+0x190>
   10d28:	ldr	r2, [r1, #4]
   10d2a:	b.n	10a14 <_malloc_r+0xd0>
   10d2c:	add.w	r8, r8, #1
   10d30:	tst.w	r8, #3
   10d34:	add.w	ip, ip, #8
   10d38:	bne.w	10a3a <_malloc_r+0xf6>
   10d3c:	b.n	10da0 <_malloc_r+0x45c>
   10d3e:	ldr	r4, [r3, #12]
   10d40:	cmp	r3, r4
   10d42:	it	eq
   10d44:	addeq	r0, #2
   10d46:	beq.w	109b4 <_malloc_r+0x70>
   10d4a:	b.n	10ab4 <_malloc_r+0x170>
   10d4c:	add	r3, r1
   10d4e:	mov	r4, r1
   10d50:	ldr	r2, [r3, #4]
   10d52:	ldr	r1, [r1, #12]
   10d54:	ldr.w	r5, [r4, #8]!
   10d58:	orr.w	r2, r2, #1
   10d5c:	str	r2, [r3, #4]
   10d5e:	mov	r0, r6
   10d60:	str	r1, [r5, #12]
   10d62:	str	r5, [r1, #8]
   10d64:	bl	1101c <__malloc_unlock>
   10d68:	b.n	10ad4 <_malloc_r+0x190>
   10d6a:	add.w	lr, r3, #92	; 0x5c
   10d6e:	add.w	r0, r3, #91	; 0x5b
   10d72:	mov.w	r3, lr, lsl #1
   10d76:	b.n	10988 <_malloc_r+0x44>
   10d78:	lsrs	r2, r3, #6
   10d7a:	add.w	r1, r2, #57	; 0x39
   10d7e:	lsls	r1, r1, #1
   10d80:	adds	r2, #56	; 0x38
   10d82:	b.n	10cc8 <_malloc_r+0x384>
   10d84:	cmp	r4, r7
   10d86:	ldr	r3, [pc, #296]	; (10eb0 <_malloc_r+0x56c>)
   10d88:	beq.w	10b8c <_malloc_r+0x248>
   10d8c:	ldr	r4, [r3, #8]
   10d8e:	ldr	r2, [r4, #4]
   10d90:	bic.w	r2, r2, #3
   10d94:	b.n	10c4c <_malloc_r+0x308>
   10d96:	ldr.w	r3, [r9], #-8
   10d9a:	cmp	r9, r3
   10d9c:	bne.w	10ea4 <_malloc_r+0x560>
   10da0:	tst.w	r0, #3
   10da4:	add.w	r0, r0, #4294967295
   10da8:	bne.n	10d96 <_malloc_r+0x452>
   10daa:	ldr	r3, [r7, #4]
   10dac:	bic.w	r3, r3, r4
   10db0:	str	r3, [r7, #4]
   10db2:	lsls	r4, r4, #1
   10db4:	cmp	r4, r3
   10db6:	bhi.w	10b34 <_malloc_r+0x1f0>
   10dba:	cmp	r4, #0
   10dbc:	beq.w	10b34 <_malloc_r+0x1f0>
   10dc0:	tst	r4, r3
   10dc2:	mov	r0, r8
   10dc4:	bne.w	10a32 <_malloc_r+0xee>
   10dc8:	lsls	r4, r4, #1
   10dca:	tst	r4, r3
   10dcc:	add.w	r0, r0, #4
   10dd0:	beq.n	10dc8 <_malloc_r+0x484>
   10dd2:	b.n	10a32 <_malloc_r+0xee>
   10dd4:	cmp.w	r3, #340	; 0x154
   10dd8:	bhi.n	10e0c <_malloc_r+0x4c8>
   10dda:	lsrs	r0, r5, #15
   10ddc:	add.w	lr, r0, #120	; 0x78
   10de0:	mov.w	r3, lr, lsl #1
   10de4:	adds	r0, #119	; 0x77
   10de6:	b.n	10988 <_malloc_r+0x44>
   10de8:	mov.w	r1, #4096	; 0x1000
   10dec:	b.n	10bc6 <_malloc_r+0x282>
   10dee:	movs	r1, #1
   10df0:	ldr.w	r3, [r8, #4]
   10df4:	asrs	r2, r2, #2
   10df6:	lsl.w	r2, r1, r2
   10dfa:	orrs	r2, r3
   10dfc:	str.w	r2, [r8, #4]
   10e00:	mov	r1, ip
   10e02:	b.n	10cf4 <_malloc_r+0x3b0>
   10e04:	movs	r3, #1
   10e06:	str.w	r3, [fp, #4]
   10e0a:	b.n	10c58 <_malloc_r+0x314>
   10e0c:	movw	r2, #1364	; 0x554
   10e10:	cmp	r3, r2
   10e12:	bhi.n	10e56 <_malloc_r+0x512>
   10e14:	lsrs	r0, r5, #18
   10e16:	add.w	lr, r0, #125	; 0x7d
   10e1a:	mov.w	r3, lr, lsl #1
   10e1e:	adds	r0, #124	; 0x7c
   10e20:	b.n	10988 <_malloc_r+0x44>
   10e22:	adds	r2, #16
   10e24:	b.n	10b70 <_malloc_r+0x22c>
   10e26:	cmp	r2, #84	; 0x54
   10e28:	bhi.n	10e78 <_malloc_r+0x534>
   10e2a:	lsrs	r2, r3, #12
   10e2c:	add.w	r1, r2, #111	; 0x6f
   10e30:	lsls	r1, r1, #1
   10e32:	adds	r2, #110	; 0x6e
   10e34:	b.n	10cc8 <_malloc_r+0x384>
   10e36:	ldr	r4, [r7, #8]
   10e38:	ldr	r2, [r4, #4]
   10e3a:	bic.w	r2, r2, #3
   10e3e:	b.n	10c4c <_malloc_r+0x308>
   10e40:	ubfx	r0, sl, #0, #12
   10e44:	cmp	r0, #0
   10e46:	bne.w	10b9a <_malloc_r+0x256>
   10e4a:	add	r2, r8
   10e4c:	ldr	r3, [r7, #8]
   10e4e:	orr.w	r2, r2, #1
   10e52:	str	r2, [r3, #4]
   10e54:	b.n	10c30 <_malloc_r+0x2ec>
   10e56:	movs	r3, #254	; 0xfe
   10e58:	mov.w	lr, #127	; 0x7f
   10e5c:	movs	r0, #126	; 0x7e
   10e5e:	b.n	10988 <_malloc_r+0x44>
   10e60:	movs	r2, #1
   10e62:	mov.w	r9, #0
   10e66:	b.n	10bec <_malloc_r+0x2a8>
   10e68:	add.w	r1, r4, #8
   10e6c:	mov	r0, r6
   10e6e:	bl	11a84 <_free_r>
   10e72:	ldr.w	r1, [r9]
   10e76:	b.n	10c30 <_malloc_r+0x2ec>
   10e78:	cmp.w	r2, #340	; 0x154
   10e7c:	bhi.n	10e8a <_malloc_r+0x546>
   10e7e:	lsrs	r2, r3, #15
   10e80:	add.w	r1, r2, #120	; 0x78
   10e84:	lsls	r1, r1, #1
   10e86:	adds	r2, #119	; 0x77
   10e88:	b.n	10cc8 <_malloc_r+0x384>
   10e8a:	movw	r1, #1364	; 0x554
   10e8e:	cmp	r2, r1
   10e90:	bhi.n	10e9e <_malloc_r+0x55a>
   10e92:	lsrs	r2, r3, #18
   10e94:	add.w	r1, r2, #125	; 0x7d
   10e98:	lsls	r1, r1, #1
   10e9a:	adds	r2, #124	; 0x7c
   10e9c:	b.n	10cc8 <_malloc_r+0x384>
   10e9e:	movs	r1, #254	; 0xfe
   10ea0:	movs	r2, #126	; 0x7e
   10ea2:	b.n	10cc8 <_malloc_r+0x384>
   10ea4:	ldr	r3, [r7, #4]
   10ea6:	b.n	10db2 <_malloc_r+0x46e>
   10ea8:	lsrs	r0, r5, #3
   10eaa:	adds	r3, r0, #1
   10eac:	lsls	r3, r3, #1
   10eae:	b.n	10aa2 <_malloc_r+0x15e>
   10eb0:	.word	0x20001354

00010eb4 <memmove>:
   10eb4:	cmp	r0, r1
   10eb6:	push	{r4, r5, r6, r7, lr}
   10eb8:	bls.n	10ed6 <memmove+0x22>
   10eba:	adds	r3, r1, r2
   10ebc:	cmp	r0, r3
   10ebe:	bcs.n	10ed6 <memmove+0x22>
   10ec0:	adds	r1, r0, r2
   10ec2:	cmp	r2, #0
   10ec4:	beq.n	10f6a <memmove+0xb6>
   10ec6:	subs	r2, r3, r2
   10ec8:	ldrb.w	r4, [r3, #-1]!
   10ecc:	strb.w	r4, [r1, #-1]!
   10ed0:	cmp	r3, r2
   10ed2:	bne.n	10ec8 <memmove+0x14>
   10ed4:	pop	{r4, r5, r6, r7, pc}
   10ed6:	cmp	r2, #15
   10ed8:	bls.n	10f6c <memmove+0xb8>
   10eda:	orr.w	r3, r1, r0
   10ede:	lsls	r3, r3, #30
   10ee0:	bne.n	10f70 <memmove+0xbc>
   10ee2:	add.w	r4, r0, #16
   10ee6:	add.w	r3, r1, #16
   10eea:	mov	r5, r2
   10eec:	ldr.w	r6, [r3, #-16]
   10ef0:	str.w	r6, [r4, #-16]
   10ef4:	ldr.w	r6, [r3, #-12]
   10ef8:	str.w	r6, [r4, #-12]
   10efc:	ldr.w	r6, [r3, #-8]
   10f00:	str.w	r6, [r4, #-8]
   10f04:	subs	r5, #16
   10f06:	ldr.w	r6, [r3, #-4]
   10f0a:	str.w	r6, [r4, #-4]
   10f0e:	cmp	r5, #15
   10f10:	add.w	r3, r3, #16
   10f14:	add.w	r4, r4, #16
   10f18:	bhi.n	10eec <memmove+0x38>
   10f1a:	sub.w	r3, r2, #16
   10f1e:	bic.w	r3, r3, #15
   10f22:	and.w	lr, r2, #15
   10f26:	adds	r3, #16
   10f28:	cmp.w	lr, #3
   10f2c:	add	r1, r3
   10f2e:	add	r3, r0
   10f30:	bls.n	10f76 <memmove+0xc2>
   10f32:	subs	r6, r3, #4
   10f34:	mov	r5, r1
   10f36:	mov	r4, lr
   10f38:	subs	r4, #4
   10f3a:	ldr.w	r7, [r5], #4
   10f3e:	str.w	r7, [r6, #4]!
   10f42:	cmp	r4, #3
   10f44:	bhi.n	10f38 <memmove+0x84>
   10f46:	sub.w	r4, lr, #4
   10f4a:	bic.w	r4, r4, #3
   10f4e:	adds	r4, #4
   10f50:	add	r3, r4
   10f52:	add	r1, r4
   10f54:	and.w	r2, r2, #3
   10f58:	cbz	r2, 10f74 <memmove+0xc0>
   10f5a:	subs	r3, #1
   10f5c:	add	r2, r1
   10f5e:	ldrb.w	r4, [r1], #1
   10f62:	strb.w	r4, [r3, #1]!
   10f66:	cmp	r2, r1
   10f68:	bne.n	10f5e <memmove+0xaa>
   10f6a:	pop	{r4, r5, r6, r7, pc}
   10f6c:	mov	r3, r0
   10f6e:	b.n	10f58 <memmove+0xa4>
   10f70:	mov	r3, r0
   10f72:	b.n	10f5a <memmove+0xa6>
   10f74:	pop	{r4, r5, r6, r7, pc}
   10f76:	mov	r2, lr
   10f78:	b.n	10f58 <memmove+0xa4>
   10f7a:	nop

00010f7c <memset>:
   10f7c:	push	{r4, r5, r6}
   10f7e:	lsls	r4, r0, #30
   10f80:	beq.n	11010 <memset+0x94>
   10f82:	subs	r4, r2, #1
   10f84:	cmp	r2, #0
   10f86:	beq.n	1100c <memset+0x90>
   10f88:	uxtb	r5, r1
   10f8a:	mov	r3, r0
   10f8c:	b.n	10f94 <memset+0x18>
   10f8e:	subs	r2, r4, #1
   10f90:	cbz	r4, 1100c <memset+0x90>
   10f92:	mov	r4, r2
   10f94:	strb.w	r5, [r3], #1
   10f98:	lsls	r2, r3, #30
   10f9a:	bne.n	10f8e <memset+0x12>
   10f9c:	cmp	r4, #3
   10f9e:	bls.n	10ffe <memset+0x82>
   10fa0:	uxtb	r5, r1
   10fa2:	orr.w	r5, r5, r5, lsl #8
   10fa6:	cmp	r4, #15
   10fa8:	orr.w	r5, r5, r5, lsl #16
   10fac:	bls.n	10fe2 <memset+0x66>
   10fae:	add.w	r2, r3, #16
   10fb2:	mov	r6, r4
   10fb4:	subs	r6, #16
   10fb6:	cmp	r6, #15
   10fb8:	str.w	r5, [r2, #-16]
   10fbc:	str.w	r5, [r2, #-12]
   10fc0:	str.w	r5, [r2, #-8]
   10fc4:	str.w	r5, [r2, #-4]
   10fc8:	add.w	r2, r2, #16
   10fcc:	bhi.n	10fb4 <memset+0x38>
   10fce:	sub.w	r2, r4, #16
   10fd2:	bic.w	r2, r2, #15
   10fd6:	and.w	r4, r4, #15
   10fda:	adds	r2, #16
   10fdc:	cmp	r4, #3
   10fde:	add	r3, r2
   10fe0:	bls.n	10ffe <memset+0x82>
   10fe2:	mov	r6, r3
   10fe4:	mov	r2, r4
   10fe6:	subs	r2, #4
   10fe8:	cmp	r2, #3
   10fea:	str.w	r5, [r6], #4
   10fee:	bhi.n	10fe6 <memset+0x6a>
   10ff0:	subs	r2, r4, #4
   10ff2:	bic.w	r2, r2, #3
   10ff6:	adds	r2, #4
   10ff8:	add	r3, r2
   10ffa:	and.w	r4, r4, #3
   10ffe:	cbz	r4, 1100c <memset+0x90>
   11000:	uxtb	r1, r1
   11002:	add	r4, r3
   11004:	strb.w	r1, [r3], #1
   11008:	cmp	r3, r4
   1100a:	bne.n	11004 <memset+0x88>
   1100c:	pop	{r4, r5, r6}
   1100e:	bx	lr
   11010:	mov	r4, r2
   11012:	mov	r3, r0
   11014:	b.n	10f9c <memset+0x20>
   11016:	nop

00011018 <__malloc_lock>:
   11018:	bx	lr
   1101a:	nop

0001101c <__malloc_unlock>:
   1101c:	bx	lr
   1101e:	nop

00011020 <realloc>:
   11020:	ldr	r3, [pc, #8]	; (1102c <realloc+0xc>)
   11022:	mov	r2, r1
   11024:	mov	r1, r0
   11026:	ldr	r0, [r3, #0]
   11028:	b.w	11030 <_realloc_r>
   1102c:	.word	0x20001350

00011030 <_realloc_r>:
   11030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11034:	mov	r7, r2
   11036:	sub	sp, #12
   11038:	cmp	r1, #0
   1103a:	beq.w	111c0 <_realloc_r+0x190>
   1103e:	mov	r6, r1
   11040:	mov	r9, r0
   11042:	add.w	r5, r7, #11
   11046:	bl	11018 <__malloc_lock>
   1104a:	ldr.w	lr, [r6, #-4]
   1104e:	cmp	r5, #22
   11050:	bic.w	r4, lr, #3
   11054:	sub.w	r8, r6, #8
   11058:	bhi.n	110dc <_realloc_r+0xac>
   1105a:	movs	r2, #16
   1105c:	mov	r5, r2
   1105e:	cmp	r7, r5
   11060:	bhi.n	110e6 <_realloc_r+0xb6>
   11062:	cmp	r4, r2
   11064:	bge.n	11152 <_realloc_r+0x122>
   11066:	ldr	r3, [pc, #804]	; (1138c <_realloc_r+0x35c>)
   11068:	ldr	r1, [r3, #8]
   1106a:	add.w	r0, r8, r4
   1106e:	cmp	r0, r1
   11070:	ldr	r1, [r0, #4]
   11072:	beq.w	11228 <_realloc_r+0x1f8>
   11076:	bic.w	r3, r1, #1
   1107a:	add	r3, r0
   1107c:	ldr	r3, [r3, #4]
   1107e:	lsls	r3, r3, #31
   11080:	bpl.n	1117e <_realloc_r+0x14e>
   11082:	tst.w	lr, #1
   11086:	beq.n	110f4 <_realloc_r+0xc4>
   11088:	mov	r1, r7
   1108a:	mov	r0, r9
   1108c:	bl	10944 <_malloc_r>
   11090:	mov	r7, r0
   11092:	cbz	r0, 110ce <_realloc_r+0x9e>
   11094:	ldr.w	r3, [r6, #-4]
   11098:	bic.w	r3, r3, #1
   1109c:	add	r3, r8
   1109e:	sub.w	r2, r0, #8
   110a2:	cmp	r2, r3
   110a4:	beq.w	11330 <_realloc_r+0x300>
   110a8:	subs	r2, r4, #4
   110aa:	cmp	r2, #36	; 0x24
   110ac:	bhi.w	11312 <_realloc_r+0x2e2>
   110b0:	cmp	r2, #19
   110b2:	bhi.w	112be <_realloc_r+0x28e>
   110b6:	mov	r3, r0
   110b8:	mov	r2, r6
   110ba:	ldr	r1, [r2, #0]
   110bc:	str	r1, [r3, #0]
   110be:	ldr	r1, [r2, #4]
   110c0:	str	r1, [r3, #4]
   110c2:	ldr	r2, [r2, #8]
   110c4:	str	r2, [r3, #8]
   110c6:	mov	r1, r6
   110c8:	mov	r0, r9
   110ca:	bl	11a84 <_free_r>
   110ce:	mov	r0, r9
   110d0:	bl	1101c <__malloc_unlock>
   110d4:	mov	r0, r7
   110d6:	add	sp, #12
   110d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110dc:	bic.w	r5, r5, #7
   110e0:	cmp	r5, #0
   110e2:	mov	r2, r5
   110e4:	bge.n	1105e <_realloc_r+0x2e>
   110e6:	movs	r3, #12
   110e8:	movs	r0, #0
   110ea:	str.w	r3, [r9]
   110ee:	add	sp, #12
   110f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110f4:	ldr.w	r3, [r6, #-8]
   110f8:	rsb	sl, r3, r8
   110fc:	ldr.w	r3, [sl, #4]
   11100:	bic.w	ip, r3, #3
   11104:	add.w	r3, r4, ip
   11108:	cmp	r3, r2
   1110a:	blt.n	11088 <_realloc_r+0x58>
   1110c:	mov	r7, sl
   1110e:	ldr.w	r1, [sl, #12]
   11112:	ldr.w	r0, [r7, #8]!
   11116:	subs	r2, r4, #4
   11118:	cmp	r2, #36	; 0x24
   1111a:	str	r1, [r0, #12]
   1111c:	str	r0, [r1, #8]
   1111e:	bhi.w	11350 <_realloc_r+0x320>
   11122:	cmp	r2, #19
   11124:	bls.w	1134c <_realloc_r+0x31c>
   11128:	ldr	r1, [r6, #0]
   1112a:	str.w	r1, [sl, #8]
   1112e:	ldr	r1, [r6, #4]
   11130:	str.w	r1, [sl, #12]
   11134:	cmp	r2, #27
   11136:	bhi.w	11390 <_realloc_r+0x360>
   1113a:	adds	r6, #8
   1113c:	add.w	r2, sl, #16
   11140:	ldr	r1, [r6, #0]
   11142:	str	r1, [r2, #0]
   11144:	ldr	r1, [r6, #4]
   11146:	str	r1, [r2, #4]
   11148:	ldr	r1, [r6, #8]
   1114a:	str	r1, [r2, #8]
   1114c:	mov	r6, r7
   1114e:	mov	r4, r3
   11150:	mov	r8, sl
   11152:	subs	r3, r4, r5
   11154:	cmp	r3, #15
   11156:	bhi.n	11194 <_realloc_r+0x164>
   11158:	ldr.w	r3, [r8, #4]
   1115c:	and.w	r3, r3, #1
   11160:	orrs	r3, r4
   11162:	add	r4, r8
   11164:	str.w	r3, [r8, #4]
   11168:	ldr	r3, [r4, #4]
   1116a:	orr.w	r3, r3, #1
   1116e:	str	r3, [r4, #4]
   11170:	mov	r0, r9
   11172:	bl	1101c <__malloc_unlock>
   11176:	mov	r0, r6
   11178:	add	sp, #12
   1117a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1117e:	bic.w	r1, r1, #3
   11182:	add	r1, r4
   11184:	cmp	r1, r2
   11186:	blt.n	111cc <_realloc_r+0x19c>
   11188:	ldr	r3, [r0, #12]
   1118a:	ldr	r2, [r0, #8]
   1118c:	mov	r4, r1
   1118e:	str	r3, [r2, #12]
   11190:	str	r2, [r3, #8]
   11192:	b.n	11152 <_realloc_r+0x122>
   11194:	ldr.w	r2, [r8, #4]
   11198:	add.w	r1, r8, r5
   1119c:	and.w	r2, r2, #1
   111a0:	orrs	r5, r2
   111a2:	orr.w	r2, r3, #1
   111a6:	add	r3, r1
   111a8:	str.w	r5, [r8, #4]
   111ac:	str	r2, [r1, #4]
   111ae:	ldr	r2, [r3, #4]
   111b0:	orr.w	r2, r2, #1
   111b4:	adds	r1, #8
   111b6:	str	r2, [r3, #4]
   111b8:	mov	r0, r9
   111ba:	bl	11a84 <_free_r>
   111be:	b.n	11170 <_realloc_r+0x140>
   111c0:	mov	r1, r2
   111c2:	add	sp, #12
   111c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111c8:	b.w	10944 <_malloc_r>
   111cc:	tst.w	lr, #1
   111d0:	bne.w	11088 <_realloc_r+0x58>
   111d4:	ldr.w	r3, [r6, #-8]
   111d8:	rsb	sl, r3, r8
   111dc:	ldr.w	r3, [sl, #4]
   111e0:	bic.w	ip, r3, #3
   111e4:	add.w	lr, r1, ip
   111e8:	cmp	lr, r2
   111ea:	blt.n	11104 <_realloc_r+0xd4>
   111ec:	ldr	r3, [r0, #12]
   111ee:	ldr	r2, [r0, #8]
   111f0:	mov	r7, sl
   111f2:	str	r3, [r2, #12]
   111f4:	str	r2, [r3, #8]
   111f6:	ldr.w	r1, [r7, #8]!
   111fa:	ldr.w	r3, [sl, #12]
   111fe:	str	r3, [r1, #12]
   11200:	subs	r2, r4, #4
   11202:	cmp	r2, #36	; 0x24
   11204:	str	r1, [r3, #8]
   11206:	bhi.w	1133c <_realloc_r+0x30c>
   1120a:	cmp	r2, #19
   1120c:	bls.n	112d4 <_realloc_r+0x2a4>
   1120e:	ldr	r3, [r6, #0]
   11210:	str.w	r3, [sl, #8]
   11214:	ldr	r3, [r6, #4]
   11216:	str.w	r3, [sl, #12]
   1121a:	cmp	r2, #27
   1121c:	bhi.w	11360 <_realloc_r+0x330>
   11220:	adds	r6, #8
   11222:	add.w	r3, sl, #16
   11226:	b.n	112d6 <_realloc_r+0x2a6>
   11228:	bic.w	fp, r1, #3
   1122c:	add	fp, r4
   1122e:	add.w	r0, r5, #16
   11232:	cmp	fp, r0
   11234:	bge.n	112ea <_realloc_r+0x2ba>
   11236:	tst.w	lr, #1
   1123a:	bne.w	11088 <_realloc_r+0x58>
   1123e:	ldr.w	r1, [r6, #-8]
   11242:	rsb	sl, r1, r8
   11246:	ldr.w	r1, [sl, #4]
   1124a:	bic.w	ip, r1, #3
   1124e:	add	fp, ip
   11250:	cmp	r0, fp
   11252:	bgt.w	11104 <_realloc_r+0xd4>
   11256:	mov	r7, sl
   11258:	ldr.w	r1, [sl, #12]
   1125c:	ldr.w	r0, [r7, #8]!
   11260:	subs	r2, r4, #4
   11262:	cmp	r2, #36	; 0x24
   11264:	str	r1, [r0, #12]
   11266:	str	r0, [r1, #8]
   11268:	bhi.w	113d4 <_realloc_r+0x3a4>
   1126c:	cmp	r2, #19
   1126e:	bls.w	113bc <_realloc_r+0x38c>
   11272:	ldr	r1, [r6, #0]
   11274:	str.w	r1, [sl, #8]
   11278:	ldr	r1, [r6, #4]
   1127a:	str.w	r1, [sl, #12]
   1127e:	cmp	r2, #27
   11280:	bhi.w	113e2 <_realloc_r+0x3b2>
   11284:	adds	r6, #8
   11286:	add.w	r2, sl, #16
   1128a:	ldr	r1, [r6, #0]
   1128c:	str	r1, [r2, #0]
   1128e:	ldr	r1, [r6, #4]
   11290:	str	r1, [r2, #4]
   11292:	ldr	r1, [r6, #8]
   11294:	str	r1, [r2, #8]
   11296:	add.w	r1, sl, r5
   1129a:	rsb	r2, r5, fp
   1129e:	orr.w	r2, r2, #1
   112a2:	str	r1, [r3, #8]
   112a4:	str	r2, [r1, #4]
   112a6:	ldr.w	r3, [sl, #4]
   112aa:	and.w	r3, r3, #1
   112ae:	orrs	r5, r3
   112b0:	mov	r0, r9
   112b2:	str.w	r5, [sl, #4]
   112b6:	bl	1101c <__malloc_unlock>
   112ba:	mov	r0, r7
   112bc:	b.n	11178 <_realloc_r+0x148>
   112be:	ldr	r3, [r6, #0]
   112c0:	str	r3, [r0, #0]
   112c2:	ldr	r3, [r6, #4]
   112c4:	str	r3, [r0, #4]
   112c6:	cmp	r2, #27
   112c8:	bhi.n	1131a <_realloc_r+0x2ea>
   112ca:	add.w	r3, r0, #8
   112ce:	add.w	r2, r6, #8
   112d2:	b.n	110ba <_realloc_r+0x8a>
   112d4:	mov	r3, r7
   112d6:	ldr	r2, [r6, #0]
   112d8:	str	r2, [r3, #0]
   112da:	ldr	r2, [r6, #4]
   112dc:	str	r2, [r3, #4]
   112de:	ldr	r2, [r6, #8]
   112e0:	str	r2, [r3, #8]
   112e2:	mov	r6, r7
   112e4:	mov	r4, lr
   112e6:	mov	r8, sl
   112e8:	b.n	11152 <_realloc_r+0x122>
   112ea:	add.w	r1, r8, r5
   112ee:	rsb	fp, r5, fp
   112f2:	orr.w	r2, fp, #1
   112f6:	str	r1, [r3, #8]
   112f8:	str	r2, [r1, #4]
   112fa:	ldr.w	r3, [r6, #-4]
   112fe:	and.w	r3, r3, #1
   11302:	orrs	r5, r3
   11304:	mov	r0, r9
   11306:	str.w	r5, [r6, #-4]
   1130a:	bl	1101c <__malloc_unlock>
   1130e:	mov	r0, r6
   11310:	b.n	11178 <_realloc_r+0x148>
   11312:	mov	r1, r6
   11314:	bl	10eb4 <memmove>
   11318:	b.n	110c6 <_realloc_r+0x96>
   1131a:	ldr	r3, [r6, #8]
   1131c:	str	r3, [r0, #8]
   1131e:	ldr	r3, [r6, #12]
   11320:	str	r3, [r0, #12]
   11322:	cmp	r2, #36	; 0x24
   11324:	beq.n	11378 <_realloc_r+0x348>
   11326:	add.w	r3, r0, #16
   1132a:	add.w	r2, r6, #16
   1132e:	b.n	110ba <_realloc_r+0x8a>
   11330:	ldr.w	r3, [r0, #-4]
   11334:	bic.w	r3, r3, #3
   11338:	add	r4, r3
   1133a:	b.n	11152 <_realloc_r+0x122>
   1133c:	mov	r1, r6
   1133e:	mov	r0, r7
   11340:	mov	r4, lr
   11342:	mov	r8, sl
   11344:	bl	10eb4 <memmove>
   11348:	mov	r6, r7
   1134a:	b.n	11152 <_realloc_r+0x122>
   1134c:	mov	r2, r7
   1134e:	b.n	11140 <_realloc_r+0x110>
   11350:	mov	r1, r6
   11352:	mov	r0, r7
   11354:	mov	r4, r3
   11356:	mov	r8, sl
   11358:	bl	10eb4 <memmove>
   1135c:	mov	r6, r7
   1135e:	b.n	11152 <_realloc_r+0x122>
   11360:	ldr	r3, [r6, #8]
   11362:	str.w	r3, [sl, #16]
   11366:	ldr	r3, [r6, #12]
   11368:	str.w	r3, [sl, #20]
   1136c:	cmp	r2, #36	; 0x24
   1136e:	beq.n	113a8 <_realloc_r+0x378>
   11370:	adds	r6, #16
   11372:	add.w	r3, sl, #24
   11376:	b.n	112d6 <_realloc_r+0x2a6>
   11378:	ldr	r3, [r6, #16]
   1137a:	str	r3, [r0, #16]
   1137c:	ldr	r3, [r6, #20]
   1137e:	str	r3, [r0, #20]
   11380:	add.w	r2, r6, #24
   11384:	add.w	r3, r0, #24
   11388:	b.n	110ba <_realloc_r+0x8a>
   1138a:	nop
   1138c:	.word	0x20001354
   11390:	ldr	r1, [r6, #8]
   11392:	str.w	r1, [sl, #16]
   11396:	ldr	r1, [r6, #12]
   11398:	str.w	r1, [sl, #20]
   1139c:	cmp	r2, #36	; 0x24
   1139e:	beq.n	113c0 <_realloc_r+0x390>
   113a0:	adds	r6, #16
   113a2:	add.w	r2, sl, #24
   113a6:	b.n	11140 <_realloc_r+0x110>
   113a8:	ldr	r3, [r6, #16]
   113aa:	str.w	r3, [sl, #24]
   113ae:	ldr	r3, [r6, #20]
   113b0:	str.w	r3, [sl, #28]
   113b4:	adds	r6, #24
   113b6:	add.w	r3, sl, #32
   113ba:	b.n	112d6 <_realloc_r+0x2a6>
   113bc:	mov	r2, r7
   113be:	b.n	1128a <_realloc_r+0x25a>
   113c0:	ldr	r2, [r6, #16]
   113c2:	str.w	r2, [sl, #24]
   113c6:	ldr	r2, [r6, #20]
   113c8:	str.w	r2, [sl, #28]
   113cc:	adds	r6, #24
   113ce:	add.w	r2, sl, #32
   113d2:	b.n	11140 <_realloc_r+0x110>
   113d4:	mov	r1, r6
   113d6:	mov	r0, r7
   113d8:	str	r3, [sp, #4]
   113da:	bl	10eb4 <memmove>
   113de:	ldr	r3, [sp, #4]
   113e0:	b.n	11296 <_realloc_r+0x266>
   113e2:	ldr	r1, [r6, #8]
   113e4:	str.w	r1, [sl, #16]
   113e8:	ldr	r1, [r6, #12]
   113ea:	str.w	r1, [sl, #20]
   113ee:	cmp	r2, #36	; 0x24
   113f0:	beq.n	113fa <_realloc_r+0x3ca>
   113f2:	adds	r6, #16
   113f4:	add.w	r2, sl, #24
   113f8:	b.n	1128a <_realloc_r+0x25a>
   113fa:	ldr	r2, [r6, #16]
   113fc:	str.w	r2, [sl, #24]
   11400:	ldr	r2, [r6, #20]
   11402:	str.w	r2, [sl, #28]
   11406:	adds	r6, #24
   11408:	add.w	r2, sl, #32
   1140c:	b.n	1128a <_realloc_r+0x25a>
   1140e:	nop

00011410 <_sbrk_r>:
   11410:	push	{r3, r4, r5, lr}
   11412:	ldr	r4, [pc, #28]	; (11430 <_sbrk_r+0x20>)
   11414:	movs	r3, #0
   11416:	mov	r5, r0
   11418:	mov	r0, r1
   1141a:	str	r3, [r4, #0]
   1141c:	bl	102d4 <_sbrk>
   11420:	adds	r3, r0, #1
   11422:	beq.n	11426 <_sbrk_r+0x16>
   11424:	pop	{r3, r4, r5, pc}
   11426:	ldr	r3, [r4, #0]
   11428:	cmp	r3, #0
   1142a:	beq.n	11424 <_sbrk_r+0x14>
   1142c:	str	r3, [r5, #0]
   1142e:	pop	{r3, r4, r5, pc}
   11430:	.word	0x200106c0
	...
   11440:	sub.w	r0, r2, r3
   11444:	bx	lr
   11446:	nop

00011448 <strcmp>:
   11448:	ldrb	r2, [r0, #0]
   1144a:	ldrb	r3, [r1, #0]
   1144c:	cmp	r2, #1
   1144e:	it	cs
   11450:	cmpcs	r2, r3
   11452:	bne.n	11440 <_sbrk_r+0x30>
   11454:	strd	r4, r5, [sp, #-16]!
   11458:	orr.w	r4, r0, r1
   1145c:	strd	r6, r7, [sp, #8]
   11460:	mvn.w	ip, #0
   11464:	mov.w	r2, r4, lsl #29
   11468:	cbz	r2, 114b0 <strcmp+0x68>
   1146a:	eor.w	r4, r0, r1
   1146e:	tst.w	r4, #7
   11472:	bne.n	1154a <strcmp+0x102>
   11474:	and.w	r4, r0, #7
   11478:	bic.w	r0, r0, #7
   1147c:	and.w	r5, r4, #3
   11480:	bic.w	r1, r1, #7
   11484:	mov.w	r5, r5, lsl #3
   11488:	ldrd	r2, r3, [r0], #16
   1148c:	tst.w	r4, #4
   11490:	ldrd	r6, r7, [r1], #16
   11494:	lsl.w	r4, ip, r5
   11498:	orn	r2, r2, r4
   1149c:	orn	r6, r6, r4
   114a0:	beq.n	114b8 <strcmp+0x70>
   114a2:	orn	r3, r3, r4
   114a6:	mov	r2, ip
   114a8:	orn	r7, r7, r4
   114ac:	mov	r6, ip
   114ae:	b.n	114b8 <strcmp+0x70>
   114b0:	ldrd	r2, r3, [r0], #16
   114b4:	ldrd	r6, r7, [r1], #16
   114b8:	uadd8	r5, r2, ip
   114bc:	eor.w	r4, r2, r6
   114c0:	sel	r4, r4, ip
   114c4:	cbnz	r4, 11522 <strcmp+0xda>
   114c6:	uadd8	r5, r3, ip
   114ca:	eor.w	r5, r3, r7
   114ce:	sel	r5, r5, ip
   114d2:	cbnz	r5, 114fa <strcmp+0xb2>
   114d4:	ldrd	r2, r3, [r0, #-8]
   114d8:	ldrd	r6, r7, [r1, #-8]
   114dc:	uadd8	r5, r2, ip
   114e0:	eor.w	r4, r2, r6
   114e4:	sel	r4, r4, ip
   114e8:	uadd8	r5, r3, ip
   114ec:	eor.w	r5, r3, r7
   114f0:	sel	r5, r5, ip
   114f4:	orrs	r5, r4
   114f6:	beq.n	114b0 <strcmp+0x68>
   114f8:	cbnz	r4, 11522 <strcmp+0xda>
   114fa:	rev	r5, r5
   114fc:	clz	r4, r5
   11500:	bic.w	r4, r4, #7
   11504:	lsr.w	r1, r7, r4
   11508:	ldrd	r6, r7, [sp, #8]
   1150c:	lsr.w	r3, r3, r4
   11510:	and.w	r0, r3, #255	; 0xff
   11514:	and.w	r1, r1, #255	; 0xff
   11518:	ldrd	r4, r5, [sp], #16
   1151c:	sub.w	r0, r0, r1
   11520:	bx	lr
   11522:	rev	r4, r4
   11524:	clz	r4, r4
   11528:	bic.w	r4, r4, #7
   1152c:	lsr.w	r1, r6, r4
   11530:	ldrd	r6, r7, [sp, #8]
   11534:	lsr.w	r2, r2, r4
   11538:	and.w	r0, r2, #255	; 0xff
   1153c:	and.w	r1, r1, #255	; 0xff
   11540:	ldrd	r4, r5, [sp], #16
   11544:	sub.w	r0, r0, r1
   11548:	bx	lr
   1154a:	tst.w	r4, #3
   1154e:	bne.n	115ca <strcmp+0x182>
   11550:	ands.w	r4, r0, #3
   11554:	bne.n	115a8 <strcmp+0x160>
   11556:	ldr.w	r2, [r0], #8
   1155a:	ldr.w	r3, [r1], #8
   1155e:	uadd8	r5, r2, ip
   11562:	eor.w	r5, r2, r3
   11566:	sel	r5, r5, ip
   1156a:	cbnz	r5, 11584 <strcmp+0x13c>
   1156c:	ldr.w	r2, [r0, #-4]
   11570:	ldr.w	r3, [r1, #-4]
   11574:	uadd8	r5, r2, ip
   11578:	eor.w	r5, r2, r3
   1157c:	sel	r5, r5, ip
   11580:	cmp	r5, #0
   11582:	beq.n	11556 <strcmp+0x10e>
   11584:	rev	r5, r5
   11586:	clz	r4, r5
   1158a:	bic.w	r4, r4, #7
   1158e:	lsr.w	r1, r3, r4
   11592:	lsr.w	r2, r2, r4
   11596:	and.w	r0, r2, #255	; 0xff
   1159a:	and.w	r1, r1, #255	; 0xff
   1159e:	ldrd	r4, r5, [sp], #16
   115a2:	sub.w	r0, r0, r1
   115a6:	bx	lr
   115a8:	mov.w	r4, r4, lsl #3
   115ac:	bic.w	r0, r0, #3
   115b0:	ldr.w	r2, [r0], #8
   115b4:	bic.w	r1, r1, #3
   115b8:	ldr.w	r3, [r1], #8
   115bc:	lsl.w	r4, ip, r4
   115c0:	orn	r2, r2, r4
   115c4:	orn	r3, r3, r4
   115c8:	b.n	1155e <strcmp+0x116>
   115ca:	ands.w	r4, r0, #3
   115ce:	beq.n	11606 <strcmp+0x1be>
   115d0:	sub.w	r1, r1, r4
   115d4:	bic.w	r0, r0, #3
   115d8:	lsls	r4, r4, #31
   115da:	ldr.w	r2, [r0], #4
   115de:	beq.n	115ee <strcmp+0x1a6>
   115e0:	bcs.n	11602 <strcmp+0x1ba>
   115e2:	ldrb	r3, [r1, #2]
   115e4:	uxtb.w	r4, r2, ror #16
   115e8:	subs	r4, r4, r3
   115ea:	bne.n	115fa <strcmp+0x1b2>
   115ec:	cbz	r3, 115fa <strcmp+0x1b2>
   115ee:	ldrb	r3, [r1, #3]
   115f0:	uxtb.w	r4, r2, ror #24
   115f4:	subs	r4, r4, r3
   115f6:	bne.n	115fa <strcmp+0x1b2>
   115f8:	cbnz	r3, 11602 <strcmp+0x1ba>
   115fa:	mov	r0, r4
   115fc:	ldr.w	r4, [sp], #16
   11600:	bx	lr
   11602:	add.w	r1, r1, #4
   11606:	ldr.w	r2, [r0], #4
   1160a:	lsls	r4, r1, #31
   1160c:	bic.w	r1, r1, #3
   11610:	ldr.w	r3, [r1], #4
   11614:	bhi.n	116a8 <strcmp+0x260>
   11616:	bcs.n	11662 <strcmp+0x21a>
   11618:	bic.w	r4, r2, #4278190080	; 0xff000000
   1161c:	uadd8	r5, r2, ip
   11620:	eors.w	r5, r4, r3, lsr #8
   11624:	sel	r5, r5, ip
   11628:	bne.n	11640 <strcmp+0x1f8>
   1162a:	cbnz	r5, 11646 <strcmp+0x1fe>
   1162c:	ldr.w	r3, [r1], #4
   11630:	eor.w	r4, r4, r2
   11634:	cmp.w	r4, r3, lsl #24
   11638:	bne.n	11658 <strcmp+0x210>
   1163a:	ldr.w	r2, [r0], #4
   1163e:	b.n	11618 <strcmp+0x1d0>
   11640:	mov.w	r3, r3, lsr #8
   11644:	b.n	116f2 <strcmp+0x2aa>
   11646:	bics.w	r5, r5, #4278190080	; 0xff000000
   1164a:	bne.n	116e8 <strcmp+0x2a0>
   1164c:	ldrb	r0, [r1, #0]
   1164e:	ldrd	r4, r5, [sp], #16
   11652:	rsb	r0, r0, #0
   11656:	bx	lr
   11658:	mov.w	r2, r2, lsr #24
   1165c:	and.w	r3, r3, #255	; 0xff
   11660:	b.n	116f2 <strcmp+0x2aa>
   11662:	and.w	r4, r2, ip, lsr #16
   11666:	uadd8	r5, r2, ip
   1166a:	eors.w	r5, r4, r3, lsr #16
   1166e:	sel	r5, r5, ip
   11672:	bne.n	1168a <strcmp+0x242>
   11674:	cbnz	r5, 11690 <strcmp+0x248>
   11676:	ldr.w	r3, [r1], #4
   1167a:	eor.w	r4, r4, r2
   1167e:	cmp.w	r4, r3, lsl #16
   11682:	bne.n	1169e <strcmp+0x256>
   11684:	ldr.w	r2, [r0], #4
   11688:	b.n	11662 <strcmp+0x21a>
   1168a:	mov.w	r3, r3, lsr #16
   1168e:	b.n	116f2 <strcmp+0x2aa>
   11690:	ands.w	r5, r5, ip, lsr #16
   11694:	bne.n	116e8 <strcmp+0x2a0>
   11696:	ldrh	r3, [r1, #0]
   11698:	mov.w	r2, r2, lsr #16
   1169c:	b.n	116f2 <strcmp+0x2aa>
   1169e:	mov.w	r2, r2, lsr #16
   116a2:	and.w	r3, r3, ip, lsr #16
   116a6:	b.n	116f2 <strcmp+0x2aa>
   116a8:	and.w	r4, r2, #255	; 0xff
   116ac:	uadd8	r5, r2, ip
   116b0:	eors.w	r5, r4, r3, lsr #24
   116b4:	sel	r5, r5, ip
   116b8:	bne.n	116d0 <strcmp+0x288>
   116ba:	cbnz	r5, 116d6 <strcmp+0x28e>
   116bc:	ldr.w	r3, [r1], #4
   116c0:	eor.w	r4, r4, r2
   116c4:	cmp.w	r4, r3, lsl #8
   116c8:	bne.n	116de <strcmp+0x296>
   116ca:	ldr.w	r2, [r0], #4
   116ce:	b.n	116a8 <strcmp+0x260>
   116d0:	mov.w	r3, r3, lsr #24
   116d4:	b.n	116f2 <strcmp+0x2aa>
   116d6:	tst.w	r5, #255	; 0xff
   116da:	bne.n	116e8 <strcmp+0x2a0>
   116dc:	ldr	r3, [r1, #0]
   116de:	mov.w	r2, r2, lsr #8
   116e2:	bic.w	r3, r3, #4278190080	; 0xff000000
   116e6:	b.n	116f2 <strcmp+0x2aa>
   116e8:	mov.w	r0, #0
   116ec:	ldrd	r4, r5, [sp], #16
   116f0:	bx	lr
   116f2:	rev	r2, r2
   116f4:	rev	r3, r3
   116f6:	uadd8	r4, r2, ip
   116fa:	eor.w	r4, r2, r3
   116fe:	sel	r5, r4, ip
   11702:	clz	r4, r5
   11706:	lsl.w	r2, r2, r4
   1170a:	lsl.w	r3, r3, r4
   1170e:	mov.w	r0, r2, lsr #24
   11712:	ldrd	r4, r5, [sp], #16
   11716:	sub.w	r0, r0, r3, lsr #24
   1171a:	bx	lr

0001171c <strcpy>:
   1171c:	eor.w	r2, r0, r1
   11720:	mov	ip, r0
   11722:	tst.w	r2, #3
   11726:	bne.n	117c8 <strcpy+0xac>
   11728:	tst.w	r1, #3
   1172c:	bne.n	11794 <strcpy+0x78>
   1172e:	str.w	r4, [sp, #-4]!
   11732:	tst.w	r1, #4
   11736:	ldr.w	r3, [r1], #4
   1173a:	beq.n	11754 <strcpy+0x38>
   1173c:	sub.w	r2, r3, #16843009	; 0x1010101
   11740:	bics	r2, r3
   11742:	tst.w	r2, #2155905152	; 0x80808080
   11746:	itt	eq
   11748:	streq.w	r3, [ip], #4
   1174c:	ldreq.w	r3, [r1], #4
   11750:	bne.n	11780 <strcpy+0x64>
   11752:	nop
   11754:	ldr.w	r4, [r1], #4
   11758:	sub.w	r2, r3, #16843009	; 0x1010101
   1175c:	bics	r2, r3
   1175e:	tst.w	r2, #2155905152	; 0x80808080
   11762:	sub.w	r2, r4, #16843009	; 0x1010101
   11766:	bne.n	11780 <strcpy+0x64>
   11768:	str.w	r3, [ip], #4
   1176c:	bics	r2, r4
   1176e:	tst.w	r2, #2155905152	; 0x80808080
   11772:	itt	eq
   11774:	ldreq.w	r3, [r1], #4
   11778:	streq.w	r4, [ip], #4
   1177c:	beq.n	11754 <strcpy+0x38>
   1177e:	mov	r3, r4
   11780:	strb.w	r3, [ip], #1
   11784:	tst.w	r3, #255	; 0xff
   11788:	mov.w	r3, r3, ror #8
   1178c:	bne.n	11780 <strcpy+0x64>
   1178e:	ldr.w	r4, [sp], #4
   11792:	bx	lr
   11794:	tst.w	r1, #1
   11798:	beq.n	117a8 <strcpy+0x8c>
   1179a:	ldrb.w	r2, [r1], #1
   1179e:	strb.w	r2, [ip], #1
   117a2:	cmp	r2, #0
   117a4:	it	eq
   117a6:	bxeq	lr
   117a8:	tst.w	r1, #2
   117ac:	beq.n	1172e <strcpy+0x12>
   117ae:	ldrh.w	r2, [r1], #2
   117b2:	tst.w	r2, #255	; 0xff
   117b6:	itet	ne
   117b8:	strhne.w	r2, [ip], #2
   117bc:	strbeq.w	r2, [ip]
   117c0:	tstne.w	r2, #65280	; 0xff00
   117c4:	bne.n	1172e <strcpy+0x12>
   117c6:	bx	lr
   117c8:	ldrb.w	r2, [r1], #1
   117cc:	strb.w	r2, [ip], #1
   117d0:	cmp	r2, #0
   117d2:	bne.n	117c8 <strcpy+0xac>
   117d4:	bx	lr
   117d6:	nop
	...

00011800 <strlen>:
   11800:	pld	[r0]
   11804:	strd	r4, r5, [sp, #-8]!
   11808:	bic.w	r1, r0, #7
   1180c:	mvn.w	ip, #0
   11810:	ands.w	r4, r0, #7
   11814:	pld	[r1, #32]
   11818:	bne.w	118ae <strlen+0xae>
   1181c:	mov.w	r4, #0
   11820:	mvn.w	r0, #7
   11824:	ldrd	r2, r3, [r1]
   11828:	pld	[r1, #64]	; 0x40
   1182c:	add.w	r0, r0, #8
   11830:	uadd8	r2, r2, ip
   11834:	sel	r2, r4, ip
   11838:	uadd8	r3, r3, ip
   1183c:	sel	r3, r2, ip
   11840:	cbnz	r3, 11896 <strlen+0x96>
   11842:	ldrd	r2, r3, [r1, #8]
   11846:	uadd8	r2, r2, ip
   1184a:	add.w	r0, r0, #8
   1184e:	sel	r2, r4, ip
   11852:	uadd8	r3, r3, ip
   11856:	sel	r3, r2, ip
   1185a:	cbnz	r3, 11896 <strlen+0x96>
   1185c:	ldrd	r2, r3, [r1, #16]
   11860:	uadd8	r2, r2, ip
   11864:	add.w	r0, r0, #8
   11868:	sel	r2, r4, ip
   1186c:	uadd8	r3, r3, ip
   11870:	sel	r3, r2, ip
   11874:	cbnz	r3, 11896 <strlen+0x96>
   11876:	ldrd	r2, r3, [r1, #24]
   1187a:	add.w	r1, r1, #32
   1187e:	uadd8	r2, r2, ip
   11882:	add.w	r0, r0, #8
   11886:	sel	r2, r4, ip
   1188a:	uadd8	r3, r3, ip
   1188e:	sel	r3, r2, ip
   11892:	cmp	r3, #0
   11894:	beq.n	11824 <strlen+0x24>
   11896:	cmp	r2, #0
   11898:	itt	eq
   1189a:	addeq	r0, #4
   1189c:	moveq	r2, r3
   1189e:	rev	r2, r2
   118a0:	clz	r2, r2
   118a4:	ldrd	r4, r5, [sp], #8
   118a8:	add.w	r0, r0, r2, lsr #3
   118ac:	bx	lr
   118ae:	ldrd	r2, r3, [r1]
   118b2:	and.w	r5, r4, #3
   118b6:	rsb	r0, r4, #0
   118ba:	mov.w	r5, r5, lsl #3
   118be:	tst.w	r4, #4
   118c2:	pld	[r1, #64]	; 0x40
   118c6:	lsl.w	r5, ip, r5
   118ca:	orn	r2, r2, r5
   118ce:	itt	ne
   118d0:	ornne	r3, r3, r5
   118d4:	movne	r2, ip
   118d6:	mov.w	r4, #0
   118da:	b.n	11830 <strlen+0x30>

000118dc <strncpy>:
   118dc:	orr.w	r3, r0, r1
   118e0:	lsls	r3, r3, #30
   118e2:	push	{r4, r5, r6}
   118e4:	bne.n	1193e <strncpy+0x62>
   118e6:	cmp	r2, #3
   118e8:	bls.n	1193e <strncpy+0x62>
   118ea:	mov	r4, r1
   118ec:	mov	r3, r0
   118ee:	mov	r1, r4
   118f0:	ldr.w	r6, [r4], #4
   118f4:	sub.w	r5, r6, #16843009	; 0x1010101
   118f8:	bic.w	r5, r5, r6
   118fc:	tst.w	r5, #2155905152	; 0x80808080
   11900:	bne.n	11910 <strncpy+0x34>
   11902:	subs	r2, #4
   11904:	cmp	r2, #3
   11906:	str.w	r6, [r3], #4
   1190a:	mov	r1, r4
   1190c:	bhi.n	118ee <strncpy+0x12>
   1190e:	cbz	r2, 1193a <strncpy+0x5e>
   11910:	ldrb	r4, [r1, #0]
   11912:	strb	r4, [r3, #0]
   11914:	subs	r2, #1
   11916:	adds	r3, #1
   11918:	adds	r1, #1
   1191a:	cbz	r4, 1192c <strncpy+0x50>
   1191c:	cbz	r2, 1193a <strncpy+0x5e>
   1191e:	ldrb.w	r4, [r1], #1
   11922:	strb.w	r4, [r3], #1
   11926:	subs	r2, #1
   11928:	cmp	r4, #0
   1192a:	bne.n	1191c <strncpy+0x40>
   1192c:	cbz	r2, 1193a <strncpy+0x5e>
   1192e:	add	r2, r3
   11930:	movs	r1, #0
   11932:	strb.w	r1, [r3], #1
   11936:	cmp	r2, r3
   11938:	bne.n	11932 <strncpy+0x56>
   1193a:	pop	{r4, r5, r6}
   1193c:	bx	lr
   1193e:	mov	r3, r0
   11940:	b.n	1190e <strncpy+0x32>
   11942:	nop

00011944 <__register_exitproc>:
   11944:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11948:	ldr	r4, [pc, #148]	; (119e0 <__register_exitproc+0x9c>)
   1194a:	ldr	r5, [r4, #0]
   1194c:	ldr.w	r4, [r5, #328]	; 0x148
   11950:	mov	r6, r0
   11952:	mov	r8, r1
   11954:	mov	sl, r2
   11956:	mov	r9, r3
   11958:	cbz	r4, 119cc <__register_exitproc+0x88>
   1195a:	ldr	r0, [r4, #4]
   1195c:	cmp	r0, #31
   1195e:	bgt.n	11990 <__register_exitproc+0x4c>
   11960:	adds	r3, r0, #1
   11962:	cbz	r6, 11982 <__register_exitproc+0x3e>
   11964:	add.w	r5, r4, r0, lsl #2
   11968:	movs	r2, #1
   1196a:	str.w	sl, [r5, #136]	; 0x88
   1196e:	ldr.w	r1, [r4, #392]	; 0x188
   11972:	lsls	r2, r0
   11974:	orrs	r1, r2
   11976:	cmp	r6, #2
   11978:	str.w	r1, [r4, #392]	; 0x188
   1197c:	str.w	r9, [r5, #264]	; 0x108
   11980:	beq.n	119c0 <__register_exitproc+0x7c>
   11982:	adds	r0, #2
   11984:	str	r3, [r4, #4]
   11986:	str.w	r8, [r4, r0, lsl #2]
   1198a:	movs	r0, #0
   1198c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11990:	ldr	r3, [pc, #80]	; (119e4 <__register_exitproc+0xa0>)
   11992:	cbz	r3, 119d6 <__register_exitproc+0x92>
   11994:	mov.w	r0, #400	; 0x190
   11998:	bl	10924 <malloc>
   1199c:	mov	r4, r0
   1199e:	cbz	r0, 119d6 <__register_exitproc+0x92>
   119a0:	ldr.w	r3, [r5, #328]	; 0x148
   119a4:	movs	r7, #0
   119a6:	stmia.w	r0, {r3, r7}
   119aa:	str.w	r4, [r5, #328]	; 0x148
   119ae:	mov	r0, r7
   119b0:	movs	r3, #1
   119b2:	str.w	r7, [r4, #392]	; 0x188
   119b6:	str.w	r7, [r4, #396]	; 0x18c
   119ba:	cmp	r6, #0
   119bc:	beq.n	11982 <__register_exitproc+0x3e>
   119be:	b.n	11964 <__register_exitproc+0x20>
   119c0:	ldr.w	r1, [r4, #396]	; 0x18c
   119c4:	orrs	r2, r1
   119c6:	str.w	r2, [r4, #396]	; 0x18c
   119ca:	b.n	11982 <__register_exitproc+0x3e>
   119cc:	add.w	r4, r5, #332	; 0x14c
   119d0:	str.w	r4, [r5, #328]	; 0x148
   119d4:	b.n	1195a <__register_exitproc+0x16>
   119d6:	mov.w	r0, #4294967295
   119da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119de:	nop
   119e0:	.word	0x20000960
   119e4:	.word	0x00010925

000119e8 <_malloc_trim_r>:
   119e8:	push	{r3, r4, r5, r6, r7, lr}
   119ea:	ldr	r7, [pc, #140]	; (11a78 <_malloc_trim_r+0x90>)
   119ec:	mov	r4, r1
   119ee:	mov	r6, r0
   119f0:	bl	11018 <__malloc_lock>
   119f4:	ldr	r3, [r7, #8]
   119f6:	ldr	r5, [r3, #4]
   119f8:	bic.w	r5, r5, #3
   119fc:	subs	r1, r5, r4
   119fe:	addw	r1, r1, #4079	; 0xfef
   11a02:	bic.w	r1, r1, #4080	; 0xff0
   11a06:	bic.w	r1, r1, #15
   11a0a:	sub.w	r4, r1, #4096	; 0x1000
   11a0e:	cmp.w	r4, #4096	; 0x1000
   11a12:	blt.n	11a24 <_malloc_trim_r+0x3c>
   11a14:	movs	r1, #0
   11a16:	mov	r0, r6
   11a18:	bl	11410 <_sbrk_r>
   11a1c:	ldr	r3, [r7, #8]
   11a1e:	add	r3, r5
   11a20:	cmp	r0, r3
   11a22:	beq.n	11a2e <_malloc_trim_r+0x46>
   11a24:	mov	r0, r6
   11a26:	bl	1101c <__malloc_unlock>
   11a2a:	movs	r0, #0
   11a2c:	pop	{r3, r4, r5, r6, r7, pc}
   11a2e:	negs	r1, r4
   11a30:	mov	r0, r6
   11a32:	bl	11410 <_sbrk_r>
   11a36:	adds	r0, #1
   11a38:	beq.n	11a56 <_malloc_trim_r+0x6e>
   11a3a:	ldr	r3, [pc, #64]	; (11a7c <_malloc_trim_r+0x94>)
   11a3c:	ldr	r2, [r7, #8]
   11a3e:	ldr	r1, [r3, #0]
   11a40:	subs	r5, r5, r4
   11a42:	orr.w	r5, r5, #1
   11a46:	mov	r0, r6
   11a48:	subs	r1, r1, r4
   11a4a:	str	r5, [r2, #4]
   11a4c:	str	r1, [r3, #0]
   11a4e:	bl	1101c <__malloc_unlock>
   11a52:	movs	r0, #1
   11a54:	pop	{r3, r4, r5, r6, r7, pc}
   11a56:	movs	r1, #0
   11a58:	mov	r0, r6
   11a5a:	bl	11410 <_sbrk_r>
   11a5e:	ldr	r2, [r7, #8]
   11a60:	subs	r3, r0, r2
   11a62:	cmp	r3, #15
   11a64:	ble.n	11a24 <_malloc_trim_r+0x3c>
   11a66:	ldr	r4, [pc, #24]	; (11a80 <_malloc_trim_r+0x98>)
   11a68:	ldr	r1, [pc, #16]	; (11a7c <_malloc_trim_r+0x94>)
   11a6a:	ldr	r4, [r4, #0]
   11a6c:	orr.w	r3, r3, #1
   11a70:	subs	r0, r0, r4
   11a72:	str	r3, [r2, #4]
   11a74:	str	r0, [r1, #0]
   11a76:	b.n	11a24 <_malloc_trim_r+0x3c>
   11a78:	.word	0x20001354
   11a7c:	.word	0x2000e57c
   11a80:	.word	0x20001760

00011a84 <_free_r>:
   11a84:	cmp	r1, #0
   11a86:	beq.n	11b14 <_free_r+0x90>
   11a88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a8c:	mov	r5, r1
   11a8e:	mov	r8, r0
   11a90:	bl	11018 <__malloc_lock>
   11a94:	ldr.w	r7, [r5, #-4]
   11a98:	ldr	r1, [pc, #424]	; (11c44 <_free_r+0x1c0>)
   11a9a:	bic.w	r3, r7, #1
   11a9e:	sub.w	r4, r5, #8
   11aa2:	adds	r2, r4, r3
   11aa4:	ldr	r6, [r1, #8]
   11aa6:	ldr	r0, [r2, #4]
   11aa8:	cmp	r2, r6
   11aaa:	bic.w	r0, r0, #3
   11aae:	beq.n	11b76 <_free_r+0xf2>
   11ab0:	lsls	r6, r7, #31
   11ab2:	str	r0, [r2, #4]
   11ab4:	bmi.n	11ace <_free_r+0x4a>
   11ab6:	ldr.w	r7, [r5, #-8]
   11aba:	subs	r4, r4, r7
   11abc:	add.w	lr, r1, #8
   11ac0:	ldr	r5, [r4, #8]
   11ac2:	cmp	r5, lr
   11ac4:	add	r3, r7
   11ac6:	beq.n	11ba8 <_free_r+0x124>
   11ac8:	ldr	r7, [r4, #12]
   11aca:	str	r7, [r5, #12]
   11acc:	str	r5, [r7, #8]
   11ace:	adds	r5, r2, r0
   11ad0:	ldr	r5, [r5, #4]
   11ad2:	lsls	r5, r5, #31
   11ad4:	bpl.n	11b5c <_free_r+0xd8>
   11ad6:	orr.w	r2, r3, #1
   11ada:	str	r2, [r4, #4]
   11adc:	str	r3, [r4, r3]
   11ade:	cmp.w	r3, #512	; 0x200
   11ae2:	bcs.n	11b16 <_free_r+0x92>
   11ae4:	lsrs	r3, r3, #3
   11ae6:	adds	r2, r3, #1
   11ae8:	ldr	r5, [r1, #4]
   11aea:	ldr.w	r7, [r1, r2, lsl #3]
   11aee:	str	r7, [r4, #8]
   11af0:	movs	r0, #1
   11af2:	asrs	r3, r3, #2
   11af4:	lsl.w	r3, r0, r3
   11af8:	add.w	r0, r1, r2, lsl #3
   11afc:	orrs	r5, r3
   11afe:	subs	r0, #8
   11b00:	str	r0, [r4, #12]
   11b02:	str	r5, [r1, #4]
   11b04:	str.w	r4, [r1, r2, lsl #3]
   11b08:	str	r4, [r7, #12]
   11b0a:	mov	r0, r8
   11b0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b10:	b.w	1101c <__malloc_unlock>
   11b14:	bx	lr
   11b16:	lsrs	r2, r3, #9
   11b18:	cmp	r2, #4
   11b1a:	bhi.n	11bc4 <_free_r+0x140>
   11b1c:	lsrs	r2, r3, #6
   11b1e:	add.w	r7, r2, #57	; 0x39
   11b22:	lsls	r7, r7, #1
   11b24:	add.w	r5, r2, #56	; 0x38
   11b28:	add.w	r0, r1, r7, lsl #2
   11b2c:	ldr.w	r2, [r1, r7, lsl #2]
   11b30:	ldr	r1, [pc, #272]	; (11c44 <_free_r+0x1c0>)
   11b32:	subs	r0, #8
   11b34:	cmp	r0, r2
   11b36:	beq.n	11bd4 <_free_r+0x150>
   11b38:	ldr	r1, [r2, #4]
   11b3a:	bic.w	r1, r1, #3
   11b3e:	cmp	r3, r1
   11b40:	bcs.n	11b48 <_free_r+0xc4>
   11b42:	ldr	r2, [r2, #8]
   11b44:	cmp	r0, r2
   11b46:	bne.n	11b38 <_free_r+0xb4>
   11b48:	ldr	r0, [r2, #12]
   11b4a:	str	r0, [r4, #12]
   11b4c:	str	r2, [r4, #8]
   11b4e:	str	r4, [r0, #8]
   11b50:	str	r4, [r2, #12]
   11b52:	mov	r0, r8
   11b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b58:	b.w	1101c <__malloc_unlock>
   11b5c:	ldr	r5, [r2, #8]
   11b5e:	ldr	r7, [pc, #232]	; (11c48 <_free_r+0x1c4>)
   11b60:	cmp	r5, r7
   11b62:	add	r3, r0
   11b64:	beq.n	11be6 <_free_r+0x162>
   11b66:	ldr	r0, [r2, #12]
   11b68:	str	r0, [r5, #12]
   11b6a:	orr.w	r2, r3, #1
   11b6e:	str	r5, [r0, #8]
   11b70:	str	r2, [r4, #4]
   11b72:	str	r3, [r4, r3]
   11b74:	b.n	11ade <_free_r+0x5a>
   11b76:	lsls	r7, r7, #31
   11b78:	add	r3, r0
   11b7a:	bmi.n	11b8c <_free_r+0x108>
   11b7c:	ldr.w	r2, [r5, #-8]
   11b80:	subs	r4, r4, r2
   11b82:	add	r3, r2
   11b84:	ldr	r0, [r4, #8]
   11b86:	ldr	r2, [r4, #12]
   11b88:	str	r2, [r0, #12]
   11b8a:	str	r0, [r2, #8]
   11b8c:	ldr	r2, [pc, #188]	; (11c4c <_free_r+0x1c8>)
   11b8e:	ldr	r2, [r2, #0]
   11b90:	orr.w	r0, r3, #1
   11b94:	cmp	r3, r2
   11b96:	str	r0, [r4, #4]
   11b98:	str	r4, [r1, #8]
   11b9a:	bcc.n	11b0a <_free_r+0x86>
   11b9c:	ldr	r3, [pc, #176]	; (11c50 <_free_r+0x1cc>)
   11b9e:	mov	r0, r8
   11ba0:	ldr	r1, [r3, #0]
   11ba2:	bl	119e8 <_malloc_trim_r>
   11ba6:	b.n	11b0a <_free_r+0x86>
   11ba8:	adds	r1, r2, r0
   11baa:	ldr	r1, [r1, #4]
   11bac:	lsls	r1, r1, #31
   11bae:	bmi.n	11c3a <_free_r+0x1b6>
   11bb0:	ldr	r1, [r2, #8]
   11bb2:	ldr	r2, [r2, #12]
   11bb4:	str	r2, [r1, #12]
   11bb6:	add	r3, r0
   11bb8:	orr.w	r0, r3, #1
   11bbc:	str	r1, [r2, #8]
   11bbe:	str	r0, [r4, #4]
   11bc0:	str	r3, [r4, r3]
   11bc2:	b.n	11b0a <_free_r+0x86>
   11bc4:	cmp	r2, #20
   11bc6:	bhi.n	11bf8 <_free_r+0x174>
   11bc8:	add.w	r7, r2, #92	; 0x5c
   11bcc:	lsls	r7, r7, #1
   11bce:	add.w	r5, r2, #91	; 0x5b
   11bd2:	b.n	11b28 <_free_r+0xa4>
   11bd4:	asrs	r2, r5, #2
   11bd6:	ldr	r3, [r1, #4]
   11bd8:	movs	r5, #1
   11bda:	lsl.w	r2, r5, r2
   11bde:	orrs	r3, r2
   11be0:	str	r3, [r1, #4]
   11be2:	mov	r2, r0
   11be4:	b.n	11b4a <_free_r+0xc6>
   11be6:	orr.w	r2, r3, #1
   11bea:	str	r4, [r1, #20]
   11bec:	str	r4, [r1, #16]
   11bee:	str	r5, [r4, #12]
   11bf0:	str	r5, [r4, #8]
   11bf2:	str	r2, [r4, #4]
   11bf4:	str	r3, [r4, r3]
   11bf6:	b.n	11b0a <_free_r+0x86>
   11bf8:	cmp	r2, #84	; 0x54
   11bfa:	bhi.n	11c0a <_free_r+0x186>
   11bfc:	lsrs	r2, r3, #12
   11bfe:	add.w	r7, r2, #111	; 0x6f
   11c02:	lsls	r7, r7, #1
   11c04:	add.w	r5, r2, #110	; 0x6e
   11c08:	b.n	11b28 <_free_r+0xa4>
   11c0a:	cmp.w	r2, #340	; 0x154
   11c0e:	bhi.n	11c1e <_free_r+0x19a>
   11c10:	lsrs	r2, r3, #15
   11c12:	add.w	r7, r2, #120	; 0x78
   11c16:	lsls	r7, r7, #1
   11c18:	add.w	r5, r2, #119	; 0x77
   11c1c:	b.n	11b28 <_free_r+0xa4>
   11c1e:	movw	r0, #1364	; 0x554
   11c22:	cmp	r2, r0
   11c24:	bhi.n	11c34 <_free_r+0x1b0>
   11c26:	lsrs	r2, r3, #18
   11c28:	add.w	r7, r2, #125	; 0x7d
   11c2c:	lsls	r7, r7, #1
   11c2e:	add.w	r5, r2, #124	; 0x7c
   11c32:	b.n	11b28 <_free_r+0xa4>
   11c34:	movs	r7, #254	; 0xfe
   11c36:	movs	r5, #126	; 0x7e
   11c38:	b.n	11b28 <_free_r+0xa4>
   11c3a:	orr.w	r2, r3, #1
   11c3e:	str	r2, [r4, #4]
   11c40:	str	r3, [r4, r3]
   11c42:	b.n	11b0a <_free_r+0x86>
   11c44:	.word	0x20001354
   11c48:	.word	0x2000135c
   11c4c:	.word	0x2000175c
   11c50:	.word	0x2000e578
   11c54:	.word	0x00000000

00011c58 <___init_veneer>:
   11c58:	ldr.w	pc, [pc]	; 11c5c <___init_veneer+0x4>
   11c5c:	.word	0x600015a9

Disassembly of section .fini:

00011c60 <_fini>:
   11c60:	push	{r3, r4, r5, r6, r7, lr}
   11c62:	nop
