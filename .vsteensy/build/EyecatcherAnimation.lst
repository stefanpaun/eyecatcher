
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000aed0 l    d  .fini	00000000 .fini
0000aed4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001500 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000a080 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00009120 l     F .text.itcm	0000005c schedule_transfer
0000917c l     F .text.itcm	00000030 run_callbacks
000091ac l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
00009244 l     F .text.itcm	00000544 isr
2000c048 l     O .bss	00000004 endpointN_notify_mask
2000c050 l     O .bss	00000004 endpoint0_notify_mask
2000c054 l     O .bss	00000001 usb_reboot_timer
2000c058 l     O .bss	00000008 endpoint0_setupdata
2000c060 l     O .bss	00000008 reply_buffer
2000c068 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000c07c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000c0a0 l     O .bss	00000004 s_hotTemp
2000c0a4 l     O .bss	00000004 s_hot_ROOM
2000c0a8 l     O .bss	00000004 s_roomC_hotC
2000c0ac l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001500 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001504 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001288 l     F .text.itcm	00000924 Screen::iterate_animation() [clone .part.12]
00001f70 l     F .text.itcm	000065c0 _GLOBAL__sub_I_low_threshold
20000768 l     O .data	00000240 background_B
20003980 l     O .bss	000006c0 mask_A
200009a8 l     O .data	00000240 background_A
2000002c l     O .data	00000400 dim_curve
200066b8 l     O .bss	000006c0 mask_B
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
00008a20 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00008530 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 usb_serial.c
00008a2c l     F .text.itcm	00000028 rx_event
00008a54 l     F .text.itcm	00000070 usb_serial_flush_callback
00008ac4 l     F .text.itcm	0000015c usb_serial_write.part.1
2000b6f4 l     O .bss	00000700 txbuffer
2000bdf4 l     O .bss	00000001 tx_noautoflush
2000bdf5 l     O .bss	00000001 tx_head
2000bdf8 l     O .bss	000000c0 rx_buffer
2000beb8 l     O .bss	00000006 rx_index
2000bec0 l     O .bss	00000006 rx_count
2000bee0 l     O .bss	00000060 rx_transfer
2000bf40 l     O .bss	00000002 tx_available
2000bf60 l     O .bss	000000e0 tx_transfer
2000c040 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00009a94 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000bf0 l     O .data	0000000a qualifier_descriptor
20000c14 l     O .data	00000043 config_descriptor
20000c58 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
2000c07d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
00009c3c l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000c080 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000cb8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __delay_veneer
600015c0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015c8 l     F .text.progmem	00000008 __pwm_init_veneer
600015d0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015d8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015e0 l     F .text.progmem	00000008 __yield_veneer
600015e8 l     F .text.progmem	00000008 __memset_veneer
600015f0 l     F .text.progmem	00000008 __loop_veneer
600015f8 l     F .text.progmem	00000008 __setup_veneer
0000aec0 l     F .text.itcm	00000008 ___init_veneer
00008d48 g     F .text.itcm	00000014 usb_serial_available
00009b9c  w    F .text.itcm	000000a0 yield
2000c04c g     O .bss	00000004 usb_timer1_callback
20000bfc g     O .data	00000018 usb_string_manufacturer_name_default
2000c0b0 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
2000151c g     O .bss	00000004 sinceBeam
00009f18 g     F .text.itcm	00000020 Print::println()
00000bbc g     F .text.itcm	000001d0 init_B()
00009ccc g     F .text.itcm	00000014 random(long, long)
000089c8 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000ab88 g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
000009ec g     F .text.itcm	000001d0 init_A()
20000bec g     O .data	00000004 F_CPU_ACTUAL
0000a44c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00009e2c g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20004258 g     O .bss	00000004 sinceFadeUpdate
2000c098 g     O .bss	00000001 EventResponder::runningFromYield
2000b630 g     O .bss	000000c4 Alarm
0000a4fc g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000c084 g     O .bss	00000004 EventResponder::firstInterrupt
000098d0 g     F .text.itcm	00000028 usb_transfer_status
20000c9e g     O .data	00000001 usb_enable_serial_event_processing
00009efc  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000448 g     O .data	00000280 digital_pin_to_info_PGM
2000e6c0 g     O .bss	00000004 errno
0000aed0 g       .text.itcm	00000000 _etext
000088ac g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001500 g       .bss	00000000 _sbss
000085b8 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001610 g       *ABS*	00000000 _stextload
00001d98 g     F .text.itcm	000001d4 loop
2000425c g     O .bss	00001224 sat_automaton_B
0000007c  w    F .text.itcm	0000006e Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)
20006d78 g     O .bss	00000014 synapse_A
00009788 g     F .text.itcm	00000064 usb_config_rx
00009dc4 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00008664 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
2000c088 g     O .bss	00000004 EventResponder::lastInterrupt
00009f3c g     F .text.itcm	00000134 memcpy
2000c078 g     O .bss	00000004 systick_millis_count
2000c070 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000bfc  w    O .data	00000018 usb_string_manufacturer_name
0000a558 g     F .text.itcm	00000010 malloc
20006d8c g     O .bss	00000014 synapse_B
00009d60  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
00000458 g     F .text.itcm	00000594 updateBeams()
2000c0d8 g     O .bss	00000004 __malloc_top_pad
000098f8 g     F .text.itcm	0000002c rtc_set
2000e280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000764 g     O .data	00000000 .hidden __dso_handle
000085dc g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000ab8c g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
00008cd8 g     F .text.itcm	0000004c usb_serial_getchar
2000c104 g     O .bss	00000008 usb_cdc_line_coding
00009ab8 g     F .text.itcm	0000000a digitalWrite
2000c090 g     O .bss	00000004 EventResponder::lastYield
2000c0d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00009ac4 g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
2000c094 g     O .bss	00000004 EventResponder::firstYield
20000760 g     O .data	00000004 _global_impure_ptr
0000a508 g     F .text.itcm	00000050 __libc_init_array
0000a088  w    F .text.itcm	0000008c HardFault_HandlerC
00009ee4  w    F .text.itcm	00000004 usb_serial_class::clear()
0000a114 g     F .text.itcm	00000030 _sbrk
6000c4ec g       *ABS*	00000000 _sdataload
2000c09c g     O .bss	00000004 MillisTimer::listWaiting
20000cb0 g     O .data	00000004 __brkval
2000c041 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015a8 g     F .text.progmem	00000000 _init
00008c20 g     F .text.itcm	00000002 usb_serial_reset
2000e700 g       .bss	00000000 _ebss
0000a480 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
200091e8 g     O .bss	00001224 bg_automaton_A
00008614 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
2000d000 g     O .bss	00000020 endpoint0_transfer_data
0000a194 g     F .text.itcm	000002b8 pwm_init
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00008908 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000d020 g     O .bss	00000020 endpoint0_transfer_ack
2000c10c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009884 g     F .text.itcm	00000028 usb_transmit
00009ec4 g     F .text.itcm	00000020 systick_isr
20000ca0 g     O .data	00000010 Serial
2000c0cc g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00009f04  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008d24 g     F .text.itcm	00000024 usb_serial_peekchar
00008e94 g     F .text.itcm	0000028c set_arm_clock
2000c074 g     O .bss	00000004 systick_cycle_count
20000c88 g     O .data	00000016 usb_string_serial_number_default
0000acf0 g     F .text.itcm	000001d0 _free_r
00009ef4  w    F .text.itcm	00000004 usb_serial_class::flush()
200014f0 g     O .data	00000004 __malloc_sbrk_base
00009eec  w    F .text.itcm	00000004 usb_serial_class::read()
00009854 g     F .text.itcm	0000002e usb_prepare_transfer
0000a070 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000c044 g     O .bss	00000004 usb_timer0_callback
00009f0c  w    F .text.itcm	0000000c serialEvent()
0000abb0 g     F .text.itcm	000000a4 __register_exitproc
000089c8 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
00008d5c g     F .text.itcm	0000003c usb_serial_flush_input
00008d98 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2000c0dc g     O .bss	00000028 __malloc_current_mallinfo
20006da0 g     O .bss	00001224 grow_automaton_A
00000210 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000a4f0 g     F .text.itcm	0000000c __cxa_atexit
20005494 g     O .bss	00001224 sat_automaton_A
00009cc4 g     F .text.itcm	00000008 random(unsigned long)
20000734  w    O .data	00000028 vtable for usb_serial_class
20005480 g     O .bss	00000014 matrix_B
2000c08c g     O .bss	00000004 MillisTimer::listActive
200010e4 g     O .data	00000408 __malloc_av_
00008e28 g     F .text.itcm	0000006c usb_serial_flush_output
0000ab84 g     F .text.itcm	00000002 __malloc_lock
2000e400 g     O .bss	000002c0 _VectorsRam
0000a490 g     F .text.itcm	0000005e _calloc_r
000089b8 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
0000007c  w    F .text.itcm	0000006e Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)
0000aae8 g     F .text.itcm	0000009a memset
2000c0d0 g     O .bss	00000004 __malloc_max_total_mem
000000f0 g     F .text.itcm	0000011c newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
00000d90 g     F .text.itcm	000004f8 updateScreensFade()
00009b44 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000a578 g     F .text.itcm	00000570 _malloc_r
00009ce0 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
2000396c g     O .bss	00000014 matrix_A
000099e4 g     F .text.itcm	00000054 micros
0000ac54 g     F .text.itcm	0000009c _malloc_trim_r
20001524 g     O .bss	00001224 fg_automaton_A
20000c84 g     O .data	00000004 string0
00008dc4 g     F .text.itcm	00000018 usb_serial_write
00009ef0  w    F .text.itcm	00000004 usb_serial_class::available()
000089bc g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
2000e000 g     O .bss	00000280 endpoint_queue_head
20000c6c  w    O .data	00000016 usb_string_product_name
00009924 g     F .text.itcm	000000c0 delay
0000aed0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
2000a40c g     O .bss	00001224 bg_automaton_B
200010e0 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
00008844 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
00009cb8 g     F .text.itcm	0000000c randomSeed(unsigned long)
00001bb0 g     F .text.itcm	000001e8 setup
200006c8 g     O .data	0000006c usb_descriptor_list
20004070 g     O .bss	00000030 screen_B
20007fc4 g     O .bss	00001224 grow_automaton_B
20070000 g       .bss	00000000 _estack
00008ddc g     F .text.itcm	0000004c usb_serial_write_buffer_free
20002748 g     O .bss	00001224 fg_automaton_B
20004040 g     O .bss	00000030 screen_A
00008c24 g     F .text.itcm	000000b4 usb_serial_configure
20001500 g       .data	00000000 _edata
00008880 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00009ef8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000088fc g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000a144 g     F .text.itcm	0000004e ultoa
20001520 g     O .bss	00000004 sinceBeamUpdate
200040a0 g     O .bss	000001b8 beams
00009f38 g     F .text.itcm	00000004 operator new(unsigned int)
00009d7c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200014ec g     O .data	00000004 __malloc_trim_threshold
00009ee8  w    F .text.itcm	00000004 usb_serial_class::peek()
60001600 g       .text.progmem	00000000 __init_array_start
00009a38 g     F .text.itcm	0000005c analogRead
20000be8 g     O .data	00000004 F_BUS_ACTUAL
2000042c g     O .data	0000001c pin_to_channel
00008880 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000c6c g     O .data	00000016 usb_string_product_name_default
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001600 g       .text.progmem	00000000 __preinit_array_start
000098ac g     F .text.itcm	00000024 usb_receive
00008598 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00008598 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000d9e0 g       *ABS*	00000000 _flashimagelen
0000a474 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00009dc0 g     F .text.itcm	00000004 pendablesrvreq_isr
000097ec g     F .text.itcm	00000068 usb_config_tx
0000a568 g     F .text.itcm	00000010 free
20000c88  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015d0 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015c8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015c0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015f8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015f0 <__loop_veneer>
		yield();
600011da:	bl	600015e0 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000aed0
600011f8:	.word	0x20000000
600011fc:	.word	0x6000c4ec
60001200:	.word	0x20001500
60001204:	.word	0x20001500
60001208:	.word	0x2000e700
6000120c:	.word	0xe000ed88
60001210:	.word	0x2000e3fc
60001214:	.word	0x0000a071
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x00009dc1
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x00009ec5
6000124c:	.word	0xe0001004
60001250:	.word	0x2000c074
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000c078
60001264:	.word	0x2000e400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015d8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015b8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x2000e000
60001348:	.word	0x2000e400
6000134c:	.word	0x00009245
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x2000c07c

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000c0a8
60001598:	.word	0x2000c0a4
6000159c:	.word	0x2000c0ac
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000c0a0

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__delay_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__delay_veneer+0x4>
600015bc:	.word	0x00009925

600015c0 <____libc_init_array_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <____libc_init_array_veneer+0x4>
600015c4:	.word	0x0000a509

600015c8 <__pwm_init_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__pwm_init_veneer+0x4>
600015cc:	.word	0x0000a195

600015d0 <__set_arm_clock_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__set_arm_clock_veneer+0x4>
600015d4:	.word	0x00008e95

600015d8 <__usb_init_serialnumber_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__usb_init_serialnumber_veneer+0x4>
600015dc:	.word	0x00009b45

600015e0 <__yield_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__yield_veneer+0x4>
600015e4:	.word	0x00009b9d

600015e8 <__memset_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__memset_veneer+0x4>
600015ec:	.word	0x0000aae9

600015f0 <__loop_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__loop_veneer+0x4>
600015f4:	.word	0x00001d99

600015f8 <__setup_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__setup_veneer+0x4>
600015fc:	.word	0x00001bb1

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x00001f71
60001608:	.word	0x00008a21

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r0, #20
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	add	r6, sp, #848	; 0x350
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r0, #20
      6e:	movs	r0, #0
      70:	.word	0x0000aed4
      74:	asrs	r0, r0, #20
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>:

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      80:	mov	r4, r0
      82:	movs	r5, #0
      84:	.word	0xf44f2600
      88:	str	r0, [r3, #12]
      8a:	.short	0x61e5
      8c:	mov	r7, r1

class Screen {

	typedef struct {
      8e:	mov	r8, r0

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      90:	str	r6, [r4, #24]
      92:	mov	fp, r2
      94:	mov	r6, r3
      96:	bl	9f38 <operator new(unsigned int)>
      9a:	mov	r9, r0

class Screen {

	typedef struct {
      9c:	mov	r1, r5
      9e:	mov	r2, r8
      a0:	.word	0xfd22f00a

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      a4:	str.w	r9, [r4, #32]
      a8:	.word	0xf0094640
      ac:	vmax.u8	d20, d21, d1

class Screen {

	typedef struct {
      b0:	.word	0x46294642
      b4:	bl	aae8 <memset>

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      b8:	str.w	r9, [r4, #36]	; 0x24
      bc:	.word	0xf0094640
      c0:	vmax.u<illegal width 64>	q2, <illegal reg q5.5>, q1

class Screen {

	typedef struct {
      c4:	mov	r1, r5

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      c6:	.short	0x4681

class Screen {

	typedef struct {
      c8:	bl	aae8 <memset>
public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
      cc:	ldr	r3, [sp, #32]

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      ce:	str.w	r9, [r4, #40]	; 0x28
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		newFrameReady = false;
	}
      d2:	.short	0x4620
public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
      d4:	str	r3, [r4, #12]
		_screen = screen;
      d6:	.short	0x9b09

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
      d8:	str	r5, [r4, #44]	; 0x2c
		_bg_automaton = bg_automaton;
      da:	.short	0xf8c4
      dc:	add	sp, #0
		_fg_automaton = fg_automaton;
      de:	.short	0x6067
		_grow_automaton = grow_automaton;
      e0:	str	r6, [r4, #8]
		_sat_automaton = sat_automaton;
		_screen = screen;
      e2:	.short	0x6123
		newFrameReady = false;
      e4:	strb	r5, [r4, #20]
	}
      e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      ea:	.short	0xbf00
      ec:	movs	r0, r0
	...

000000f0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate = 0;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
      f0:	.word	0x4684b082
      f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      f8:	.word	0xb0852400
      fc:	mov	lr, r1
      fe:	.short	0x4e40
     100:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     102:	.short	0x4625

elapsedMillis sinceBeamUpdate = 0;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     104:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     108:	.word	0x342c5d33
     10c:	ldr	r2, [pc, #240]	; (200 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x110>)
     10e:	.short	0xb143
elapsedMillis sinceBeamUpdate = 0;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     110:	adds	r5, #1
     112:	.short	0x2d0a
     114:	bne.n	108 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      sinceBeamUpdate = 0;
      return true;
    }
  }
  return false;
     116:	movs	r0, #0
}
     118:	.word	0xe8bdb005
     11c:	mvns	r0, r6
     11e:	.short	0xb002
     120:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     122:	.short	0x232c
     124:	movs	r1, #1
     126:	.short	0x466c
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     128:	ldr.w	r8, [pc, #220]	; 208 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x118>
     12c:	.word	0xf305fb03
     130:	add.w	r9, r2, r3
     134:	strb	r1, [r2, r3]
     136:	.short	0xab0c
	strip = _strip;
     138:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     13c:	.word	0x070cf109

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     140:	strb.w	lr, [r9, #8]
     144:	.word	0xc407cb0f
     148:	strh	r3, [r4, #0]
	color = _color;
     14a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     14c:	mov	r4, r8
     14e:	.short	0xe913
     150:	movs	r7, r1
     152:	.short	0xc707
     154:	strh	r3, [r7, #0]
	length = _length;
	duration = _duration;
     156:	.short	0x9b10
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     158:	vstr	s0, [r9, #28]
	duration = _duration;
     15c:	.word	0x3020f8c9
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     160:	ldr.w	r0, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     164:	.word	0x1028f8d8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     168:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     16a:	.short	0x6aa3
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     16c:	ldr.w	lr, [pc, #152]	; 208 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x118>
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     170:	.word	0xbf08428b
     174:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     176:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     178:	.word	0xbf0c4619
    if (lo1 == lo2 && hi1 == hi2) {
     17c:	moveq	r7, #1
     17e:	.short	0x2700
     180:	cmp	r7, #0
     182:	.short	0xd0f1
	startTime = rtcMillis();
     184:	lsrs	r1, r3, #5
     186:	.short	0x232c
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     188:	mov	r7, lr
     18a:	orrne.w	r1, r1, r2, lsl #27
     18e:	mla	r5, r3, r5, r6
     192:	vmov	s15, r1
     196:	vldr	d5, [pc, #96]	; 1f8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x108>
     19a:	vcvt.f64.u32	d7, s15
     19e:	vdiv.f64	d6, d7, d5
     1a2:	vcvt.u32.f64	s12, d6
     1a6:	vstr	s12, [r5, #36]	; 0x24
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1aa:	.short	0xf8de
     1ac:	ands	r4, r4
  uint32_t lo1 = SNVS_HPRTCLR;
     1ae:	ldr.w	r1, [lr, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     1b2:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     1b4:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     1b6:	cmp	r3, r1
     1b8:	it	eq
     1ba:	.short	0x42a2
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     1bc:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     1be:	.short	0x4619
    if (lo1 == lo2 && hi1 == hi2) {
     1c0:	ite	eq
     1c2:	.short	0x2001
     1c4:	movne	r0, #0
     1c6:	.short	0x2800
     1c8:	beq.n	1b2 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc2>
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     1ca:	.short	0x0959
     1cc:	ldr	r3, [pc, #52]	; (204 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x114>)
     1ce:	.short	0xea41
     1d0:	str	r2, [r0, #28]
     1d2:	.short	0xee07
     1d4:	subs	r0, r2, r2
     1d6:	.short	0xed9f
     1d8:	ldrh	r0, [r1, r4]
     1da:	.short	0xeeb8
     1dc:	ldrb	r7, [r4, #13]
     1de:	.short	0xee87
     1e0:	ldr	r5, [r0, #48]	; 0x30
     1e2:	.short	0xeebc
     1e4:	ldr	r6, [r0, #60]	; 0x3c
     1e6:	.short	0xed83
     1e8:	ldr	r0, [r0, #32]
     1ea:	.short	0xb005
     1ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     1f0:	.word	0x4770b002
     1f4:	nop.w
     1f8:	.word	0xd2f1a9fc
     1fc:	str	r5, [r1, #36]	; 0x24
     1fe:	.short	0x3ff0
     200:	lsls	r0, r4
     202:	.short	0x2000
     204:	asrs	r0, r4, #20
     206:	.short	0x2000
     208:	.word	0x400d4000
     20c:	.word	0x00000000

00000210 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     210:	sub	sp, #8
     212:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     216:	sub	sp, #20
  int colInt = strip->getPixelColor(pixel);
     218:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     21a:	mov	r8, r0
     21c:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     220:	mov	r1, r6
     222:	ldrb.w	r9, [sp, #68]	; 0x44
     226:	str	r4, [sp, #4]
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     228:	add	r4, sp, #56	; 0x38
     22a:	ldrb.w	r5, [sp, #64]	; 0x40
     22e:	stmia.w	r4, {r2, r3}
     232:	ldrb.w	sl, [sp, #56]	; 0x38
     236:	ldrb.w	r4, [sp, #57]	; 0x39
     23a:	ldrb.w	fp, [sp, #58]	; 0x3a
     23e:	ldr	r7, [sp, #60]	; 0x3c
  int colInt = strip->getPixelColor(pixel);
     240:	bl	8908 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     244:	str	r0, [sp, #12]
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     246:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     24a:	cmp.w	r9, #0
     24e:	beq.n	294 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     250:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     252:	ldrb.w	r2, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     256:	ldrb.w	r5, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     25a:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     25c:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     25e:	cmp.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     262:	add.w	r3, r5, fp

  strip->setPixelColor(pixel, *(int*)getCol);
     266:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     268:	it	ge
     26a:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     26e:	cmp	r4, #255	; 0xff
     270:	it	ge
     272:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     274:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     276:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     27a:	it	ge
     27c:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     27e:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     282:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     286:	ldr	r2, [sp, #12]
}
     288:	add	sp, #20
     28a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     28e:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     290:	b.w	88fc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     294:	ldr	r3, [sp, #4]
     296:	cmp	r3, #99	; 0x63
     298:	bgt.n	316 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     29a:	vmov	s15, r3
     29e:	vldr	d6, [pc, #424]	; 448 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     2a2:	vcvt.f64.s32	d7, s15
     2a6:	vmul.f64	d7, d7, d6
     2aa:	vcvt.u32.f64	s15, d7
     2ae:	vstr	s15, [sp, #4]
     2b2:	ldrb.w	sl, [sp, #4]
     2b6:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     2b8:	cbz	r5, 320 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     2ba:	cmp	r5, #99	; 0x63
     2bc:	bgt.n	324 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     2be:	vmov	s15, r5
     2c2:	vldr	d6, [pc, #388]	; 448 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     2c6:	vcvt.f64.s32	d7, s15
     2ca:	vmul.f64	d7, d7, d6
     2ce:	vcvt.s32.f64	s15, d7
     2d2:	vmov	r2, s15
     2d6:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2da:	ldr	r4, [pc, #372]	; (450 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     2dc:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2de:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2e2:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2e6:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2ea:	adds	r4, r7, r5
     2ec:	mov.w	r5, #360	; 0x168
     2f0:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2f4:	ldr	r4, [pc, #348]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2f6:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2fa:	smull	r3, r4, r4, r1
     2fe:	asrs	r5, r1, #31
     300:	add	r4, r1
     302:	rsb	r4, r5, r4, asr #5
     306:	cmp	r4, #5
     308:	bhi.w	43e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     30c:	tbb	[pc, r4]
     310:	.word	0x415b7588
     314:	.short	0x0c27
     316:	mov.w	sl, #254	; 0xfe
     31a:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     31c:	cmp	r5, #0
     31e:	bne.n	2ba <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     320:	mov	r4, sl
     322:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     324:	movs	r2, #1
     326:	b.n	2da <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     328:	ldr	r7, [pc, #296]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     32a:	rsb	r3, r2, sl
     32e:	smull	r4, lr, r7, r1
     332:	mov	r4, r2
     334:	add	lr, r1
     336:	rsb	r5, r5, lr, asr #5
     33a:	rsb	r5, r5, r5, lsl #4
     33e:	sub.w	r1, r1, r5, lsl #2
     342:	rsb	r1, r1, #60	; 0x3c
     346:	mul.w	r3, r1, r3
     34a:	smull	r1, r7, r7, r3
     34e:	asrs	r1, r3, #31
     350:	add	r3, r7
     352:	rsb	r3, r1, r3, asr #5
     356:	add	r3, r2
     358:	uxtb.w	fp, r3
     35c:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     35e:	ldr	r7, [pc, #244]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     360:	rsb	sl, r2, sl
     364:	mov	r4, r2
     366:	smull	r3, lr, r7, r1
     36a:	add	lr, r1
     36c:	rsb	r5, r5, lr, asr #5
     370:	rsb	r5, r5, r5, lsl #4
     374:	sub.w	r1, r1, r5, lsl #2
     378:	mul.w	r1, r1, sl
     37c:	smull	r3, r7, r7, r1
     380:	mov.w	sl, r1, asr #31
     384:	add	r1, r7
     386:	rsb	r1, sl, r1, asr #5
     38a:	add	r2, r1
     38c:	uxtb.w	sl, r2
     390:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     392:	ldr	r7, [pc, #192]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     394:	rsb	lr, r2, sl
     398:	mov	sl, r2
     39a:	smull	r3, r4, r7, r1
     39e:	add	r4, r1
     3a0:	rsb	r5, r5, r4, asr #5
     3a4:	rsb	r5, r5, r5, lsl #4
     3a8:	sub.w	r1, r1, r5, lsl #2
     3ac:	rsb	r4, r1, #60	; 0x3c
     3b0:	mul.w	r1, r4, lr
     3b4:	smull	r3, r7, r7, r1
     3b8:	asrs	r4, r1, #31
     3ba:	add	r1, r7
     3bc:	rsb	r4, r4, r1, asr #5
     3c0:	add	r4, r2
     3c2:	uxtb	r4, r4
     3c4:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     3c6:	ldr	r7, [pc, #140]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3c8:	rsb	lr, r2, sl
     3cc:	mov	r4, sl
     3ce:	mov	sl, r2
     3d0:	smull	ip, r3, r7, r1
     3d4:	add	r3, r1
     3d6:	rsb	r5, r5, r3, asr #5
     3da:	rsb	r5, r5, r5, lsl #4
     3de:	sub.w	r1, r1, r5, lsl #2
     3e2:	mul.w	r1, r1, lr
     3e6:	smull	r3, r7, r7, r1
     3ea:	asrs	r3, r1, #31
     3ec:	add	r1, r7
     3ee:	rsb	r3, r3, r1, asr #5
     3f2:	add	r3, r2
     3f4:	uxtb.w	fp, r3
     3f8:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     3fa:	ldr	r7, [pc, #88]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3fc:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     400:	mov	r4, sl
      output.g = bri;
      output.b = base;
     402:	mov	fp, r2
     404:	smull	r3, ip, r7, r1
     408:	add	ip, r1
     40a:	rsb	r5, r5, ip, asr #5
     40e:	rsb	r5, r5, r5, lsl #4
     412:	sub.w	r5, r1, r5, lsl #2
     416:	rsb	r5, r5, #60	; 0x3c
     41a:	mul.w	r1, r5, lr
     41e:	b.n	37c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     420:	rsb	r3, r2, sl
     424:	ldr	r5, [pc, #44]	; (454 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     426:	mov	fp, r2
     428:	mul.w	r1, r1, r3
     42c:	smull	r3, r5, r5, r1
     430:	asrs	r4, r1, #31
     432:	add	r1, r5
     434:	rsb	r1, r4, r1, asr #5
     438:	adds	r4, r2, r1
     43a:	uxtb	r4, r4
     43c:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     43e:	mov.w	sl, #0
     442:	mov	r4, sl
     444:	b.n	250 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     446:	nop
     448:	.word	0x66666666
     44c:	.word	0x40046666
     450:	.word	0xb60b60b7
     454:	.word	0x88888889

00000458 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     458:	ldr	r3, [pc, #772]	; (760 <updateBeams()+0x308>)
    }
  }
  return false;
}

void updateBeams() {
     45a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     45e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     460:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     462:	ldr	r1, [r3, #40]	; 0x28
     464:	vpush	{d8-d10}
     468:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     46a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     46c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     46e:	ldr	r6, [pc, #752]	; (760 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     470:	cmp	r3, r1
     472:	it	eq
     474:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     476:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     478:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     47a:	ite	eq
     47c:	moveq	r5, #1
     47e:	movne	r5, #0
     480:	cmp	r5, #0
     482:	beq.n	46a <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     484:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     486:	ldr	r4, [pc, #732]	; (764 <updateBeams()+0x30c>)
     488:	orr.w	r1, r1, r2, lsl #27
     48c:	ldr	r3, [r4, #0]
     48e:	vmov	s15, r1
     492:	vldr	d5, [pc, #700]	; 750 <updateBeams()+0x2f8>
     496:	vcvt.f64.u32	d7, s15
     49a:	vdiv.f64	d6, d7, d5
     49e:	vcvt.u32.f64	s12, d6
     4a2:	vmov	r2, s12
     4a6:	subs	r3, r2, r3
     4a8:	cmp	r3, #9
     4aa:	ble.w	84a <updateBeams()+0x3f2>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     4ae:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4b0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     4b2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4b4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     4b6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     4b8:	cmp	r3, r1
     4ba:	it	eq
     4bc:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4be:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     4c0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     4c2:	ite	eq
     4c4:	moveq	r6, #1
     4c6:	movne	r6, #0
     4c8:	cmp	r6, #0
     4ca:	beq.n	4b4 <updateBeams()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     4cc:	lsrs	r1, r3, #5
     4ce:	ldr	r7, [pc, #664]	; (768 <updateBeams()+0x310>)
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4d0:	ldr	r0, [pc, #664]	; (76c <updateBeams()+0x314>)
     4d2:	orr.w	r1, r1, r2, lsl #27
     4d6:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     4da:	ldr.w	fp, [pc, #644]	; 760 <updateBeams()+0x308>
  synapse_B.clear();
     4de:	mov	sl, r7
     4e0:	vmov	s15, r1
     4e4:	vldr	d8, [pc, #616]	; 750 <updateBeams()+0x2f8>
     4e8:	vcvt.f64.u32	d7, s15
     4ec:	vldr	d9, [pc, #616]	; 758 <updateBeams()+0x300>
     4f0:	vdiv.f64	d6, d7, d8
     4f4:	vcvt.u32.f64	s12, d6
     4f8:	vstr	s12, [r4]

void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4fc:	bl	89bc <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     500:	ldr	r0, [pc, #620]	; (770 <updateBeams()+0x318>)
     502:	bl	89bc <Adafruit_NeoPixel::clear()>
     506:	b.n	512 <updateBeams()+0xba>
     508:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     50c:	cmp	sl, r9
     50e:	beq.w	7f8 <updateBeams()+0x3a0>
    if (beams[i].active) {
     512:	ldrb.w	r3, [sl, #-36]
     516:	cmp	r3, #0
     518:	beq.n	508 <updateBeams()+0xb0>
     51a:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     51e:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     522:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     526:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     52a:	ldr	r7, [pc, #564]	; (760 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     52c:	cmp	r3, r1
     52e:	it	eq
     530:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     532:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     534:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     536:	ite	eq
     538:	moveq	r4, #1
     53a:	movne	r4, #0
     53c:	cmp	r4, #0
     53e:	beq.n	522 <updateBeams()+0xca>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     540:	lsrs	r1, r3, #5
     542:	ldr.w	r5, [sl]
     546:	ldr.w	r6, [sl, #-4]
     54a:	orr.w	r1, r1, r2, lsl #27
     54e:	adds	r3, r6, r5
     550:	vmov	s15, r1
     554:	vcvt.f64.u32	d7, s15
     558:	vdiv.f64	d6, d7, d8
     55c:	vcvt.u32.f64	s12, d6
     560:	vmov	r2, s12
     564:	cmp	r2, r3
     566:	bhi.w	842 <updateBeams()+0x3ea>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     56a:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     56c:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     56e:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     572:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     576:	cmp	r3, r1
     578:	it	eq
     57a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     57c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     57e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     580:	ite	eq
     582:	moveq	r4, #1
     584:	movne	r4, #0
     586:	cmp	r4, #0
     588:	beq.n	56e <updateBeams()+0x116>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     58a:	lsrs	r1, r3, #5
     58c:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     590:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     594:	orr.w	r1, r1, r2, lsl #27
     598:	vcvt.f32.s32	s11, s15
     59c:	vmov	s15, r1
     5a0:	vcvt.f64.u32	d7, s15
     5a4:	vdiv.f64	d6, d7, d8
     5a8:	vcvt.u32.f64	s12, d6
     5ac:	vmov	r2, s12
     5b0:	subs	r5, r2, r5
     5b2:	vmov	s15, r5
     5b6:	vcvt.f32.u32	s15, s15
     5ba:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     5be:	cmp	r3, #0
     5c0:	bne.w	838 <updateBeams()+0x3e0>
	position = (strip->numPixels() + length) * posFac - length / 2;
     5c4:	ldr.w	r0, [sl, #-32]
     5c8:	bl	89b8 <Adafruit_NeoPixel::numPixels() const>
     5cc:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     5d0:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     5d4:	vmov.f32	s14, #96	; 0x3f000000  0.5
     5d8:	vcvt.f32.s32	s13, s15
     5dc:	vldr	s15, [sl, #-8]
     5e0:	vmul.f32	s14, s15, s14
     5e4:	vadd.f32	s15, s13, s15
     5e8:	vmov.f32	s13, s14
     5ec:	vfnms.f32	s13, s15, s20
     5f0:	vmov.f32	s15, s13
     5f4:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     5f8:	cmp	r3, #0
     5fa:	beq.n	508 <updateBeams()+0xb0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     5fc:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     600:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     604:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     608:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     60c:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     610:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     614:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     618:	cmp	r7, r3
     61a:	ble.n	716 <updateBeams()+0x2be>
     61c:	b.n	508 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     61e:	vldr	s11, [sl, #-8]
     622:	vmov.f32	s14, #112	; 0x3f800000  1.0
     626:	vmov.f32	s13, #0	; 0x40000000  2.0
     62a:	vdiv.f32	s12, s15, s11
     62e:	vmov.f32	s15, s14
     632:	vfms.f32	s15, s12, s13
     636:	vcmpe.f32	s15, #0.0
     63a:	vmrs	APSR_nzcv, fpscr
     63e:	bmi.w	748 <updateBeams()+0x2f0>
     642:	vcmp.f32	s15, s14
     646:	vmrs	APSR_nzcv, fpscr
     64a:	it	gt
     64c:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     650:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     654:	sub.w	r3, sl, #24
     658:	add	r4, sp, #24
     65a:	ldrb.w	ip, [sl, #-24]
     65e:	ldrb.w	lr, [sl, #-23]
     662:	vcmp.f32	s15, s14
     666:	ldrb.w	r6, [sl, #-22]
     66a:	ldr.w	r8, [sl, #-20]
     66e:	vmrs	APSR_nzcv, fpscr
     672:	ldmia	r3, {r0, r1, r2, r3}
     674:	stmia.w	r4, {r0, r1, r2, r3}
     678:	ldrb.w	r3, [sl, #-16]
     67c:	ldrb.w	r2, [sl, #-15]
     680:	ldrb.w	r1, [sl, #-12]
     684:	beq.n	6da <updateBeams()+0x282>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     686:	cmp	r1, #0
     688:	beq.n	778 <updateBeams()+0x320>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     68a:	vmov	s14, ip
     68e:	vmov	s13, lr
     692:	vcvt.f32.s32	s14, s14
     696:	vmul.f32	s14, s14, s15
     69a:	vcvt.u32.f32	s14, s14
     69e:	vstr	s14, [sp, #12]
     6a2:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6a6:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6aa:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     6ae:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     6b0:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6b2:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6b6:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     6ba:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6be:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6c2:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     6c6:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6ca:	vstr	s14, [sp, #12]
     6ce:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     6d2:	vstr	s15, [sp, #16]
     6d6:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     6da:	strb.w	r3, [sp, #32]
     6de:	add	r3, sp, #40	; 0x28
     6e0:	strb.w	r2, [sp, #33]	; 0x21
     6e4:	strb.w	r1, [sp, #36]	; 0x24
     6e8:	strb.w	ip, [sp, #24]
     6ec:	strb.w	lr, [sp, #25]
     6f0:	strb.w	r6, [sp, #26]
     6f4:	str.w	r8, [sp, #28]
     6f8:	ldmdb	r3, {r0, r1}
     6fc:	ldmia.w	r4, {r2, r3}
     700:	stmia.w	sp, {r0, r1}
     704:	mov	r1, r7
     706:	ldr.w	r0, [sl, #-32]
     70a:	bl	210 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     70e:	adds	r7, #1
     710:	cmp	r5, r7
     712:	blt.w	508 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
     716:	cmp	r7, #0
     718:	blt.n	70e <updateBeams()+0x2b6>
     71a:	ldr.w	r0, [sl, #-32]
     71e:	bl	89b8 <Adafruit_NeoPixel::numPixels() const>
     722:	cmp	r0, r7
     724:	ble.n	70e <updateBeams()+0x2b6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     726:	vmov	s14, r7
     72a:	vldr	s15, [sl, #4]
     72e:	vcvt.f32.s32	s14, s14
     732:	vsub.f32	s15, s14, s15
     736:	vcmpe.f32	s15, #0.0
     73a:	vmrs	APSR_nzcv, fpscr
     73e:	bgt.w	61e <updateBeams()+0x1c6>
     742:	vneg.f32	s15, s15
     746:	b.n	61e <updateBeams()+0x1c6>
     748:	vldr	s15, [pc, #40]	; 774 <updateBeams()+0x31c>
     74c:	b.n	650 <updateBeams()+0x1f8>
     74e:	nop
     750:	.word	0xd2f1a9fc
     754:	.word	0x3ff0624d
     758:	.word	0x66666666
     75c:	.word	0x40046666
     760:	.word	0x400d4000
     764:	.word	0x20001520
     768:	.word	0x200040c4
     76c:	.word	0x20006d78
     770:	.word	0x20006d8c
     774:	.word	0x00000000
     778:	cmp	r2, #99	; 0x63
     77a:	bgt.n	80e <updateBeams()+0x3b6>
     77c:	vmov	s14, r2
     780:	vcvt.f64.s32	d6, s14
     784:	vmul.f64	d6, d6, d9
     788:	vcvt.u32.f64	s14, d6
     78c:	vstr	s14, [sp, #12]
     790:	ldrb.w	ip, [sp, #12]
     794:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     796:	cmp	r3, #0
     798:	beq.n	818 <updateBeams()+0x3c0>
     79a:	cmp	r3, #99	; 0x63
     79c:	bgt.n	854 <updateBeams()+0x3fc>
     79e:	vmov	s14, r3
     7a2:	vcvt.f64.s32	d6, s14
     7a6:	vmul.f64	d6, d6, d9
     7aa:	vcvt.s32.f64	s14, d6
     7ae:	vmov	r6, s14
     7b2:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7b6:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7ba:	ldr	r1, [pc, #544]	; (9dc <updateBeams()+0x584>)
     7bc:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7c0:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7c4:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7c6:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7c8:	mov.w	r0, r8, asr #31
     7cc:	rsb	r1, r0, r1, asr #8
     7d0:	mov.w	r0, #360	; 0x168
     7d4:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     7d8:	ldr	r0, [pc, #516]	; (9e0 <updateBeams()+0x588>)
     7da:	smull	r6, r0, r0, r1
     7de:	asrs	r6, r1, #31
     7e0:	add	r0, r1
     7e2:	str	r6, [sp, #16]
     7e4:	rsb	r0, r6, r0, asr #5
     7e8:	cmp	r0, #5
     7ea:	bhi.w	9d2 <updateBeams()+0x57a>
     7ee:	tbb	[pc, r0]
     7f2:	.short	0xbadc
     7f4:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     7f8:	ldr	r0, [pc, #488]	; (9e4 <updateBeams()+0x58c>)
     7fa:	bl	8664 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     7fe:	ldr	r0, [pc, #488]	; (9e8 <updateBeams()+0x590>)
}
     800:	add	sp, #44	; 0x2c
     802:	vpop	{d8-d10}
     806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     80a:	b.w	8664 <Adafruit_NeoPixel::show()>
     80e:	mov.w	ip, #254	; 0xfe
     812:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     814:	cmp	r3, #0
     816:	bne.n	79a <updateBeams()+0x342>
     818:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     81c:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     820:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     822:	vcvt.f32.s32	s14, s14
     826:	vmul.f32	s14, s14, s15
     82a:	vcvt.u32.f32	s14, s14
     82e:	vstr	s14, [sp, #12]
     832:	ldrb.w	ip, [sp, #12]
     836:	b.n	6a6 <updateBeams()+0x24e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     838:	vmov.f32	s15, #112	; 0x3f800000  1.0
     83c:	vsub.f32	s20, s15, s20
     840:	b.n	5c4 <updateBeams()+0x16c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     842:	movs	r3, #0
     844:	strb.w	r3, [sl, #-36]
     848:	b.n	508 <updateBeams()+0xb0>
}
     84a:	add	sp, #44	; 0x2c
     84c:	vpop	{d8-d10}
     850:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     854:	movs	r6, #1
     856:	b.n	7b6 <updateBeams()+0x35e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     858:	ldr	r0, [pc, #388]	; (9e0 <updateBeams()+0x588>)
     85a:	smull	r6, r0, r0, r1
     85e:	ldr	r6, [sp, #12]
     860:	add	r0, r1
     862:	vmov	s13, r6
     866:	rsb	lr, r6, ip
     86a:	ldr	r6, [sp, #16]
     86c:	rsb	r0, r6, r0, asr #5
     870:	rsb	r0, r0, r0, lsl #4
     874:	sub.w	r1, r1, r0, lsl #2
     878:	rsb	r1, r1, #60	; 0x3c
     87c:	mul.w	lr, r1, lr
     880:	ldr	r1, [pc, #348]	; (9e0 <updateBeams()+0x588>)
     882:	smull	r1, r0, r1, lr
     886:	mov.w	r1, lr, asr #31
     88a:	add	lr, r0
     88c:	rsb	lr, r1, lr, asr #5
     890:	vmov	r1, s13
     894:	add	r1, lr
     896:	uxtb.w	lr, r1
     89a:	b.n	81c <updateBeams()+0x3c4>
     89c:	ldr	r0, [pc, #320]	; (9e0 <updateBeams()+0x588>)
     89e:	smull	r6, r0, r0, r1
     8a2:	ldr	r6, [sp, #12]
     8a4:	add	r0, r1
     8a6:	rsb	ip, r6, ip
     8aa:	vmov	s13, r6
     8ae:	ldr	r6, [sp, #16]
     8b0:	rsb	r0, r6, r0, asr #5
     8b4:	vmov	r6, s13
     8b8:	rsb	r0, r0, r0, lsl #4
     8bc:	sub.w	r1, r1, r0, lsl #2
     8c0:	mul.w	ip, r1, ip
     8c4:	ldr	r1, [pc, #280]	; (9e0 <updateBeams()+0x588>)
     8c6:	smull	r1, r0, r1, ip
     8ca:	mov.w	r1, ip, asr #31
     8ce:	add	ip, r0
     8d0:	rsb	ip, r1, ip, asr #5
     8d4:	add	r6, ip
     8d6:	uxtb.w	ip, r6
     8da:	b.n	81c <updateBeams()+0x3c4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     8dc:	ldr	r0, [pc, #256]	; (9e0 <updateBeams()+0x588>)
     8de:	smull	r6, r0, r0, r1
     8e2:	ldr	r6, [sp, #12]
     8e4:	add	r0, r1
     8e6:	rsb	r6, r6, ip
     8ea:	ldr.w	ip, [sp, #12]
     8ee:	str	r6, [sp, #20]
     8f0:	mov	r6, r0
     8f2:	ldr	r0, [sp, #16]
     8f4:	rsb	r0, r0, r6, asr #5
     8f8:	ldr	r6, [sp, #20]
     8fa:	rsb	r0, r0, r0, lsl #4
     8fe:	sub.w	r1, r1, r0, lsl #2
     902:	ldr	r0, [pc, #220]	; (9e0 <updateBeams()+0x588>)
     904:	rsb	r1, r1, #60	; 0x3c
     908:	mul.w	r1, r1, r6
     90c:	smull	r6, r0, r0, r1
     910:	mov	r6, r0
     912:	asrs	r0, r1, #31
     914:	add	r1, r6
     916:	mov	r6, ip
     918:	rsb	r0, r0, r1, asr #5
     91c:	add	r6, r0
     91e:	uxtb	r1, r6
     920:	vmov	s13, r1
     924:	b.n	81c <updateBeams()+0x3c4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     926:	ldr	r0, [pc, #184]	; (9e0 <updateBeams()+0x588>)
     928:	vmov	s13, ip
     92c:	smull	r6, r0, r0, r1
     930:	ldr	r6, [sp, #12]
     932:	add	r0, r1
     934:	rsb	lr, r6, ip
     938:	mov	ip, r6
     93a:	ldr	r6, [sp, #16]
     93c:	rsb	r0, r6, r0, asr #5
     940:	mov	r6, ip
     942:	rsb	r0, r0, r0, lsl #4
     946:	sub.w	r1, r1, r0, lsl #2
     94a:	mul.w	lr, r1, lr
     94e:	ldr	r1, [pc, #144]	; (9e0 <updateBeams()+0x588>)
     950:	smull	r1, r0, r1, lr
     954:	mov.w	r1, lr, asr #31
     958:	add	lr, r0
     95a:	rsb	lr, r1, lr, asr #5
     95e:	add	r6, lr
     960:	uxtb.w	lr, r6
     964:	b.n	81c <updateBeams()+0x3c4>
     966:	ldr	r0, [pc, #120]	; (9e0 <updateBeams()+0x588>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     968:	vmov	s13, ip
     96c:	smull	r6, r0, r0, r1
     970:	ldr	r6, [sp, #12]
     972:	add	r0, r1
     974:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     978:	mov	lr, r6
     97a:	ldr	r6, [sp, #16]
     97c:	rsb	r0, r6, r0, asr #5
     980:	mov	r6, lr
     982:	rsb	r0, r0, r0, lsl #4
     986:	sub.w	r1, r1, r0, lsl #2
     98a:	rsb	r1, r1, #60	; 0x3c
     98e:	mul.w	ip, r1, ip
     992:	ldr	r1, [pc, #76]	; (9e0 <updateBeams()+0x588>)
     994:	smull	r1, r0, r1, ip
     998:	mov.w	r1, ip, asr #31
     99c:	add	ip, r0
     99e:	rsb	ip, r1, ip, asr #5
     9a2:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     9a4:	uxtb.w	ip, r6
     9a8:	b.n	81c <updateBeams()+0x3c4>
     9aa:	ldr	r6, [sp, #12]
     9ac:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     9b0:	mov	lr, r6
     9b2:	mul.w	r1, r1, r0
     9b6:	ldr	r0, [pc, #40]	; (9e0 <updateBeams()+0x588>)
     9b8:	smull	r6, r0, r0, r1
     9bc:	mov	r6, r0
     9be:	asrs	r0, r1, #31
     9c0:	add	r1, r6
     9c2:	mov	r6, lr
     9c4:	rsb	r0, r0, r1, asr #5
     9c8:	add	r6, r0
     9ca:	uxtb	r1, r6
     9cc:	vmov	s13, r1
     9d0:	b.n	81c <updateBeams()+0x3c4>
     9d2:	mov.w	ip, #0
     9d6:	vmov	s13, ip
     9da:	b.n	81c <updateBeams()+0x3c4>
     9dc:	.word	0xb60b60b7
     9e0:	.word	0x88888889
     9e4:	.word	0x20006d78
     9e8:	.word	0x20006d8c

000009ec <init_A()>:
  }
  return hue;
}


void init_A() {
     9ec:	ldr	r3, [pc, #440]	; (ba8 <init_A()+0x1bc>)
  matrix_A.begin();
     9ee:	ldr	r0, [pc, #444]	; (bac <init_A()+0x1c0>)
  }
  return hue;
}


void init_A() {
     9f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	sub.w	r6, r3, #28
     9f8:	sub	sp, #12
  matrix_A.begin();
     9fa:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     9fe:	add.w	r8, r3, #4608	; 0x1200
     a02:	add.w	sl, r6, #4640	; 0x1220
     a06:	str	r3, [sp, #4]
     a08:	bl	85b8 <Adafruit_NeoPixel::begin()>
     a0c:	add.w	r7, r9, r9, lsl #1
     a10:	ldr	r5, [sp, #4]
     a12:	movs	r4, #0
     a14:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     a18:	ldrb	r2, [r6, #24]
      return _background[x][y];
     a1a:	add	r3, r4
     a1c:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     a20:	cbnz	r2, a26 <init_A()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     a22:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     a26:	cmp	r3, #0
     a28:	bne.w	b7e <init_A()+0x192>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     a2c:	adds	r4, #1
     a2e:	adds	r5, #4
     a30:	cmp	r4, #24
     a32:	bne.n	a14 <init_A()+0x28>
     a34:	ldr	r3, [sp, #4]
     a36:	add.w	r9, r9, #24
     a3a:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     a3c:	cmp.w	r9, #576	; 0x240
     a40:	str	r3, [sp, #4]
     a42:	bne.n	a0c <init_A()+0x20>
     a44:	ldr	r3, [pc, #360]	; (bb0 <init_A()+0x1c4>)
     a46:	movs	r7, #0
     a48:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     a4c:	add.w	sl, r3, #4608	; 0x1200
     a50:	str	r3, [sp, #4]
     a52:	add.w	r9, r6, #4640	; 0x1220
     a56:	add.w	r8, r7, r7, lsl #1
     a5a:	ldr	r5, [sp, #4]
     a5c:	movs	r4, #0
     a5e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     a62:	ldrb	r2, [r6, #24]
      return _background[x][y];
     a64:	add	r3, r4
     a66:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     a68:	cbnz	r2, a6e <init_A()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     a6a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     a6e:	cmp	r3, #0
     a70:	bne.n	b56 <init_A()+0x16a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     a72:	adds	r4, #1
     a74:	adds	r5, #4
     a76:	cmp	r4, #24
     a78:	bne.n	a5e <init_A()+0x72>
     a7a:	ldr	r3, [sp, #4]
     a7c:	adds	r7, #24
     a7e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     a80:	cmp.w	r7, #576	; 0x240
     a84:	str	r3, [sp, #4]
     a86:	bne.n	a56 <init_A()+0x6a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     a88:	movs	r0, #14
     a8a:	ldr.w	fp, [pc, #300]	; bb8 <init_A()+0x1cc>
     a8e:	bl	9cc4 <random(unsigned long)>
     a92:	mov	r7, r0
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     a94:	movs	r0, #14
     a96:	bl	9cc4 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     a9a:	adds	r6, r0, #4
     a9c:	add.w	r5, r7, r7, lsl #1
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     aa0:	adds	r4, r7, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     aa2:	add.w	r8, r0, #5
     aa6:	adds	r7, #4
     aa8:	add.w	r5, r6, r5, lsl #3
     aac:	ldr.w	r2, [fp, #16]
     ab0:	add.w	r5, fp, r5, lsl #2
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ab4:	mov	sl, r5
     ab6:	mov	r9, r7
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     ab8:	ldr.w	r0, [fp, #20]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     abc:	add.w	r9, r9, #1
     ac0:	add.w	sl, sl, #96	; 0x60
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     ac4:	subs	r0, r0, r2
     ac6:	adds	r0, #2
     ac8:	bl	9cc4 <random(unsigned long)>
     acc:	ldr.w	r2, [fp, #16]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     ad0:	cmp	r4, r9
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     ad2:	add.w	r3, r2, #4294967295
     ad6:	add	r0, r3
     ad8:	str.w	r0, [sl, #316]	; 0x13c
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     adc:	bge.n	ab8 <init_A()+0xcc>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     ade:	adds	r6, #1
     ae0:	adds	r5, #4
     ae2:	cmp	r8, r6
     ae4:	bge.n	ab4 <init_A()+0xc8>
     ae6:	ldr	r3, [pc, #204]	; (bb4 <init_A()+0x1c8>)
     ae8:	movs	r7, #0
     aea:	sub.w	r6, r3, #28
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     aee:	add.w	sl, r3, #4608	; 0x1200
     af2:	str	r3, [sp, #4]
     af4:	add.w	r9, r6, #4640	; 0x1220
     af8:	add.w	r8, r7, r7, lsl #1
     afc:	ldr	r5, [sp, #4]
     afe:	movs	r4, #0
     b00:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b04:	ldrb	r2, [r6, #24]
      return _background[x][y];
     b06:	add	r3, r4
     b08:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b0a:	cbnz	r2, b10 <init_A()+0x124>
      return _background[x][y];
    } else {
      return !_background[x][y];
     b0c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     b10:	cbnz	r3, b2e <init_A()+0x142>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     b12:	adds	r4, #1
     b14:	adds	r5, #4
     b16:	cmp	r4, #24
     b18:	bne.n	b00 <init_A()+0x114>
     b1a:	ldr	r3, [sp, #4]
     b1c:	adds	r7, #24
     b1e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     b20:	cmp.w	r7, #576	; 0x240
     b24:	str	r3, [sp, #4]
     b26:	bne.n	af8 <init_A()+0x10c>
  //matrix_A.setBrightness(255);
  fg_automaton_A.init();
  bg_automaton_A.init();
  grow_automaton_A.init_square(3, true);
  sat_automaton_A.init();
}
     b28:	add	sp, #12
     b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b2e:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b30:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b34:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b36:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b3a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b3c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b3e:	adds	r0, #2
     b40:	ldrb.w	fp, [r3, r1]
     b44:	bl	9cc4 <random(unsigned long)>
     b48:	ldr	r3, [r6, #16]
     b4a:	rsb	r3, r3, fp
     b4e:	adds	r3, #1
     b50:	subs	r0, r3, r0
     b52:	str	r0, [r5, #0]
     b54:	b.n	b12 <init_A()+0x126>
     b56:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b58:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b5c:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b5e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b62:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b64:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b66:	adds	r0, #2
     b68:	ldrb.w	fp, [r3, r1]
     b6c:	bl	9cc4 <random(unsigned long)>
     b70:	ldr	r3, [r6, #16]
     b72:	rsb	r3, r3, fp
     b76:	adds	r3, #1
     b78:	subs	r0, r3, r0
     b7a:	str	r0, [r5, #0]
     b7c:	b.n	a72 <init_A()+0x86>
     b7e:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b80:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b84:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b86:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b8a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b8c:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     b8e:	adds	r0, #2
     b90:	ldrb.w	fp, [r3, r1]
     b94:	bl	9cc4 <random(unsigned long)>
     b98:	ldr	r3, [r6, #16]
     b9a:	rsb	r3, r3, fp
     b9e:	adds	r3, #1
     ba0:	subs	r0, r3, r0
     ba2:	str	r0, [r5, #0]
     ba4:	b.n	a2c <init_A()+0x40>
     ba6:	nop
     ba8:	.word	0x20001540
     bac:	.word	0x2000396c
     bb0:	.word	0x20009204
     bb4:	.word	0x200054b0
     bb8:	.word	0x20006da0

00000bbc <init_B()>:

void init_B() {
     bbc:	ldr	r3, [pc, #440]	; (d78 <init_B()+0x1bc>)
  matrix_B.begin();
     bbe:	ldr	r0, [pc, #444]	; (d7c <init_B()+0x1c0>)
  bg_automaton_A.init();
  grow_automaton_A.init_square(3, true);
  sat_automaton_A.init();
}

void init_B() {
     bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bc4:	sub.w	r6, r3, #28
     bc8:	sub	sp, #12
  matrix_B.begin();
     bca:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     bce:	add.w	r8, r3, #4608	; 0x1200
     bd2:	add.w	sl, r6, #4640	; 0x1220
     bd6:	str	r3, [sp, #4]
     bd8:	bl	85b8 <Adafruit_NeoPixel::begin()>
     bdc:	add.w	r7, r9, r9, lsl #1
     be0:	ldr	r5, [sp, #4]
     be2:	movs	r4, #0
     be4:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     be8:	ldrb	r2, [r6, #24]
      return _background[x][y];
     bea:	add	r3, r4
     bec:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     bf0:	cbnz	r2, bf6 <init_B()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     bf2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     bf6:	cmp	r3, #0
     bf8:	bne.w	d4e <init_B()+0x192>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     bfc:	adds	r4, #1
     bfe:	adds	r5, #4
     c00:	cmp	r4, #24
     c02:	bne.n	be4 <init_B()+0x28>
     c04:	ldr	r3, [sp, #4]
     c06:	add.w	r9, r9, #24
     c0a:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     c0c:	cmp.w	r9, #576	; 0x240
     c10:	str	r3, [sp, #4]
     c12:	bne.n	bdc <init_B()+0x20>
     c14:	ldr	r3, [pc, #360]	; (d80 <init_B()+0x1c4>)
     c16:	movs	r7, #0
     c18:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     c1c:	add.w	sl, r3, #4608	; 0x1200
     c20:	str	r3, [sp, #4]
     c22:	add.w	r9, r6, #4640	; 0x1220
     c26:	add.w	r8, r7, r7, lsl #1
     c2a:	ldr	r5, [sp, #4]
     c2c:	movs	r4, #0
     c2e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     c32:	ldrb	r2, [r6, #24]
      return _background[x][y];
     c34:	add	r3, r4
     c36:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     c38:	cbnz	r2, c3e <init_B()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     c3a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     c3e:	cmp	r3, #0
     c40:	bne.n	d26 <init_B()+0x16a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     c42:	adds	r4, #1
     c44:	adds	r5, #4
     c46:	cmp	r4, #24
     c48:	bne.n	c2e <init_B()+0x72>
     c4a:	ldr	r3, [sp, #4]
     c4c:	adds	r7, #24
     c4e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     c50:	cmp.w	r7, #576	; 0x240
     c54:	str	r3, [sp, #4]
     c56:	bne.n	c26 <init_B()+0x6a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     c58:	movs	r0, #14
     c5a:	ldr.w	fp, [pc, #300]	; d88 <init_B()+0x1cc>
     c5e:	bl	9cc4 <random(unsigned long)>
     c62:	mov	r7, r0
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     c64:	movs	r0, #14
     c66:	bl	9cc4 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     c6a:	adds	r6, r0, #4
     c6c:	add.w	r5, r7, r7, lsl #1
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     c70:	adds	r4, r7, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
     c72:	add.w	r8, r0, #5
     c76:	adds	r7, #4
     c78:	add.w	r5, r6, r5, lsl #3
     c7c:	ldr.w	r2, [fp, #16]
     c80:	add.w	r5, fp, r5, lsl #2
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     c84:	mov	sl, r5
     c86:	mov	r9, r7
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     c88:	ldr.w	r0, [fp, #20]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     c8c:	add.w	r9, r9, #1
     c90:	add.w	sl, sl, #96	; 0x60
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     c94:	subs	r0, r0, r2
     c96:	adds	r0, #2
     c98:	bl	9cc4 <random(unsigned long)>
     c9c:	ldr.w	r2, [fp, #16]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     ca0:	cmp	r4, r9
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
     ca2:	add.w	r3, r2, #4294967295
     ca6:	add	r0, r3
     ca8:	str.w	r0, [sl, #316]	; 0x13c
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
     cac:	bge.n	c88 <init_B()+0xcc>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
     cae:	adds	r6, #1
     cb0:	adds	r5, #4
     cb2:	cmp	r8, r6
     cb4:	bge.n	c84 <init_B()+0xc8>
     cb6:	ldr	r3, [pc, #204]	; (d84 <init_B()+0x1c8>)
     cb8:	movs	r7, #0
     cba:	sub.w	r6, r3, #28
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cbe:	add.w	sl, r3, #4608	; 0x1200
     cc2:	str	r3, [sp, #4]
     cc4:	add.w	r9, r6, #4640	; 0x1220
     cc8:	add.w	r8, r7, r7, lsl #1
     ccc:	ldr	r5, [sp, #4]
     cce:	movs	r4, #0
     cd0:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     cd4:	ldrb	r2, [r6, #24]
      return _background[x][y];
     cd6:	add	r3, r4
     cd8:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     cda:	cbnz	r2, ce0 <init_B()+0x124>
      return _background[x][y];
    } else {
      return !_background[x][y];
     cdc:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     ce0:	cbnz	r3, cfe <init_B()+0x142>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     ce2:	adds	r4, #1
     ce4:	adds	r5, #4
     ce6:	cmp	r4, #24
     ce8:	bne.n	cd0 <init_B()+0x114>
     cea:	ldr	r3, [sp, #4]
     cec:	adds	r7, #24
     cee:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     cf0:	cmp.w	r7, #576	; 0x240
     cf4:	str	r3, [sp, #4]
     cf6:	bne.n	cc8 <init_B()+0x10c>
  //matrix_B.setBrightness(255);
  fg_automaton_B.init();
  bg_automaton_B.init();
  grow_automaton_B.init_square(3, true);
  sat_automaton_B.init();
}
     cf8:	add	sp, #12
     cfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cfe:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d00:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d04:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d06:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d0a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d0c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d0e:	adds	r0, #2
     d10:	ldrb.w	fp, [r3, r1]
     d14:	bl	9cc4 <random(unsigned long)>
     d18:	ldr	r3, [r6, #16]
     d1a:	rsb	r3, r3, fp
     d1e:	adds	r3, #1
     d20:	subs	r0, r3, r0
     d22:	str	r0, [r5, #0]
     d24:	b.n	ce2 <init_B()+0x126>
     d26:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d28:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d2c:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d2e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d32:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d34:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d36:	adds	r0, #2
     d38:	ldrb.w	fp, [r3, r1]
     d3c:	bl	9cc4 <random(unsigned long)>
     d40:	ldr	r3, [r6, #16]
     d42:	rsb	r3, r3, fp
     d46:	adds	r3, #1
     d48:	subs	r0, r3, r0
     d4a:	str	r0, [r5, #0]
     d4c:	b.n	c42 <init_B()+0x86>
     d4e:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d50:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d54:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d56:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d5a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d5c:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     d5e:	adds	r0, #2
     d60:	ldrb.w	fp, [r3, r1]
     d64:	bl	9cc4 <random(unsigned long)>
     d68:	ldr	r3, [r6, #16]
     d6a:	rsb	r3, r3, fp
     d6e:	adds	r3, #1
     d70:	subs	r0, r3, r0
     d72:	str	r0, [r5, #0]
     d74:	b.n	bfc <init_B()+0x40>
     d76:	nop
     d78:	.word	0x20002764
     d7c:	.word	0x20005480
     d80:	.word	0x2000a428
     d84:	.word	0x20004278
     d88:	.word	0x20007fc4
     d8c:	.word	0x00000000

00000d90 <updateScreensFade()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     d90:	ldr	r3, [pc, #748]	; (1080 <updateScreensFade()+0x2f0>)


elapsedMillis sinceFadeUpdate = 0;
void updateScreensFade() {
     d92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d96:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     d98:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     d9a:	ldr	r1, [r3, #40]	; 0x28
     d9c:	vpush	{d8}
     da0:	sub	sp, #28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     da2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     da4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     da6:	ldr	r6, [pc, #728]	; (1080 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     da8:	cmp	r3, r1
     daa:	it	eq
     dac:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     dae:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     db0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     db2:	ite	eq
     db4:	moveq	r5, #1
     db6:	movne	r5, #0
     db8:	cmp	r5, #0
     dba:	beq.n	da2 <updateScreensFade()+0x12>
  if (sinceFadeUpdate < FADE_INTERVAL) return;
     dbc:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     dbe:	ldr	r7, [pc, #708]	; (1084 <updateScreensFade()+0x2f4>)
     dc0:	orr.w	r1, r1, r2, lsl #27
     dc4:	ldr	r3, [r7, #0]
     dc6:	vmov	s15, r1
     dca:	vldr	d5, [pc, #684]	; 1078 <updateScreensFade()+0x2e8>
     dce:	vcvt.f64.u32	d7, s15
     dd2:	vdiv.f64	d6, d7, d5
     dd6:	vcvt.u32.f64	s12, d6
     dda:	vmov	r2, s12
     dde:	subs	r3, r2, r3
     de0:	cmp	r3, #15
     de2:	bls.w	fe4 <updateScreensFade()+0x254>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     de6:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     de8:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     dea:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     dec:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     dee:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     df0:	ldr	r4, [pc, #652]	; (1080 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     df2:	cmp	r3, r1
     df4:	it	eq
     df6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     df8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     dfa:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     dfc:	ite	eq
     dfe:	moveq	r6, #1
     e00:	movne	r6, #0
     e02:	cmp	r6, #0
     e04:	beq.n	dec <updateScreensFade()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     e06:	lsrs	r1, r3, #5
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     e08:	ldr.w	r8, [pc, #652]	; 1098 <updateScreensFade()+0x308>
     e0c:	vmov.f32	s11, #112	; 0x3f800000  1.0
     e10:	orr.w	r1, r1, r2, lsl #27
     e14:	vldr	s10, [r8, #24]
     e18:	vmov	s15, r1
     e1c:	vcmpe.f32	s10, s11
     e20:	vcvt.f64.u32	d7, s15
     e24:	vmrs	APSR_nzcv, fpscr
     e28:	vldr	d4, [pc, #588]	; 1078 <updateScreensFade()+0x2e8>
     e2c:	vdiv.f64	d6, d7, d4
     e30:	vcvt.u32.f64	s12, d6
     e34:	vstr	s12, [r7]
     e38:	blt.w	fee <updateScreensFade()+0x25e>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e3c:	movs	r1, #11
     e3e:	ldr	r0, [pc, #584]	; (1088 <updateScreensFade()+0x2f8>)
     e40:	bl	8dc4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e44:	ldr	r0, [pc, #580]	; (108c <updateScreensFade()+0x2fc>)
     e46:	bl	9f18 <Print::println()>
      Serial.println("end of fade");
			if (newFrameReady) {
     e4a:	ldrb.w	r3, [r8, #20]
     e4e:	cmp	r3, #0
     e50:	bne.w	11fe <updateScreensFade()+0x46e>
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     e54:	ldr.w	r8, [pc, #572]	; 1094 <updateScreensFade()+0x304>
     e58:	vmov.f32	s15, #112	; 0x3f800000  1.0
     e5c:	vldr	s14, [r8, #24]
     e60:	vcmpe.f32	s14, s15
     e64:	vmrs	APSR_nzcv, fpscr
     e68:	bge.w	fcc <updateScreensFade()+0x23c>
     e6c:	ldr.w	r6, [r8, #28]
     e70:	ldr.w	r2, [r8, #32]
     e74:	ldr.w	ip, [r8, #36]	; 0x24
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     e78:	ldr	r3, [pc, #516]	; (1080 <updateScreensFade()+0x2f0>)
     e7a:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e7c:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     e7e:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e80:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     e82:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     e84:	cmp	r3, r0
     e86:	it	eq
     e88:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e8a:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     e8c:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     e8e:	ite	eq
     e90:	moveq	r7, #1
     e92:	movne	r7, #0
     e94:	cmp	r7, #0
     e96:	beq.n	e80 <updateScreensFade()+0xf0>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     e98:	lsrs	r0, r3, #5
     e9a:	vldr	s10, [pc, #500]	; 1090 <updateScreensFade()+0x300>
     e9e:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     ea2:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     ea4:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     ea8:	ldr	r5, [pc, #488]	; (1094 <updateScreensFade()+0x304>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     eaa:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     eac:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     eb0:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     eb4:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     eb6:	vcvt.f64.u32	d7, s15
     eba:	vldr	d4, [pc, #444]	; 1078 <updateScreensFade()+0x2e8>
     ebe:	vdiv.f64	d6, d7, d4
     ec2:	vcvt.u32.f64	s14, d6
     ec6:	vmov	r3, s14
     eca:	subs	r6, r3, r6
     ecc:	vmov	s15, r6
     ed0:	vcvt.f32.u32	s14, s15
     ed4:	vdiv.f32	s15, s14, s10
     ed8:	vcmpe.f32	s15, s11
     edc:	vmrs	APSR_nzcv, fpscr
     ee0:	it	pl
     ee2:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     ee6:	vstr	s15, [r8, #24]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     eea:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     eee:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     ef0:	lsls	r6, r6, #3
     ef2:	b.n	efe <updateScreensFade()+0x16e>
     ef4:	ldr	r2, [r5, #32]
     ef6:	vldr	s15, [r5, #24]
     efa:	ldr.w	ip, [r5, #36]	; 0x24
     efe:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     f02:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     f06:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     f08:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     f0a:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     f0c:	ldr.w	r0, [r8, #16]
     f10:	uxth	r1, r1
     f12:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     f16:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     f1a:	vmov	s14, lr
     f1e:	ldrb.w	ip, [fp, #1]
     f22:	ldrb.w	lr, [fp, #2]
     f26:	vmov	s13, ip
     f2a:	vcvt.f32.s32	s14, s14
     f2e:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     f32:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     f36:	vcvt.f32.s32	s13, s13
     f3a:	ldrb	r3, [r2, r3]
     f3c:	ldrb.w	ip, [lr, #2]
     f40:	vcvt.f32.s32	s12, s12
     f44:	vmov	s10, r3
     f48:	ldrb.w	r3, [lr, #1]
     f4c:	vmov	s8, ip
     f50:	vmul.f32	s13, s13, s15
     f54:	vmov	s9, r3
     f58:	vmul.f32	s12, s12, s15
     f5c:	vcvt.f32.s32	s8, s8
     f60:	ldr.w	fp, [pc, #304]	; 1094 <updateScreensFade()+0x304>
     f64:	vcvt.f32.s32	s9, s9
     f68:	vmul.f32	s15, s14, s15
     f6c:	vcvt.f32.s32	s10, s10
     f70:	vmov.f32	s14, s13
     f74:	vfma.f32	s12, s11, s8
     f78:	vfma.f32	s15, s10, s11
     f7c:	vfma.f32	s14, s11, s9
     f80:	vcvt.s32.f32	s13, s12
     f84:	vcvt.s32.f32	s15, s15
     f88:	vcvt.s32.f32	s14, s14
     f8c:	vstr	s13, [sp, #20]
     f90:	ldrb.w	r2, [sp, #20]
     f94:	vstr	s14, [sp, #12]
     f98:	vstr	s15, [sp, #16]
     f9c:	str	r2, [sp, #0]
     f9e:	ldrb.w	r3, [sp, #12]
     fa2:	ldrb.w	r2, [sp, #16]
     fa6:	bl	88ac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     faa:	cmp	r4, #24
     fac:	bne.n	ef4 <updateScreensFade()+0x164>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     fae:	add.w	r9, r9, #1
     fb2:	adds	r7, #24
     fb4:	cmp.w	r9, #24
     fb8:	uxth	r7, r7
     fba:	beq.w	1172 <updateScreensFade()+0x3e2>
     fbe:	ldr.w	r2, [sl, #32]
     fc2:	vldr	s15, [sl, #24]
     fc6:	ldr.w	ip, [sl, #36]	; 0x24
     fca:	b.n	eea <updateScreensFade()+0x15a>
     fcc:	movs	r1, #11
     fce:	ldr	r0, [pc, #184]	; (1088 <updateScreensFade()+0x2f8>)
     fd0:	bl	8dc4 <usb_serial_write>
     fd4:	ldr	r0, [pc, #180]	; (108c <updateScreensFade()+0x2fc>)
     fd6:	bl	9f18 <Print::println()>
	}

	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
     fda:	ldrb.w	r3, [r8, #20]
     fde:	cmp	r3, #0
     fe0:	bne.w	118e <updateScreensFade()+0x3fe>
  sinceFadeUpdate = 0;

  screen_A.updateFade();
  screen_B.updateFade();
}
     fe4:	add	sp, #28
     fe6:	vpop	{d8}
     fea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fee:	ldr.w	r6, [r8, #28]
     ff2:	ldr.w	r2, [r8, #32]
     ff6:	ldr.w	ip, [r8, #36]	; 0x24
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     ffa:	ldr	r3, [pc, #132]	; (1080 <updateScreensFade()+0x2f0>)
     ffc:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ffe:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    1000:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1002:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1004:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    1006:	cmp	r3, r0
    1008:	it	eq
    100a:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    100c:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    100e:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1010:	ite	eq
    1012:	moveq	r7, #1
    1014:	movne	r7, #0
    1016:	cmp	r7, #0
    1018:	beq.n	1002 <updateScreensFade()+0x272>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    101a:	lsrs	r0, r3, #5
    101c:	vldr	s10, [pc, #112]	; 1090 <updateScreensFade()+0x300>
    1020:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    1024:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    1026:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    102a:	ldr	r5, [pc, #108]	; (1098 <updateScreensFade()+0x308>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    102c:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    102e:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    1032:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    1036:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    1038:	vcvt.f64.u32	d7, s15
    103c:	vldr	d4, [pc, #56]	; 1078 <updateScreensFade()+0x2e8>
    1040:	vdiv.f64	d6, d7, d4
    1044:	vcvt.u32.f64	s14, d6
    1048:	vmov	r3, s14
    104c:	subs	r6, r3, r6
    104e:	vmov	s15, r6
    1052:	vcvt.f32.u32	s14, s15
    1056:	vdiv.f32	s15, s14, s10
    105a:	vcmpe.f32	s15, s11
    105e:	vmrs	APSR_nzcv, fpscr
    1062:	it	pl
    1064:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    1068:	vstr	s15, [r8, #24]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    106c:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    1070:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    1072:	lsls	r6, r6, #3
    1074:	b.n	10a6 <updateScreensFade()+0x316>
    1076:	nop
    1078:	.word	0xd2f1a9fc
    107c:	.word	0x3ff0624d
    1080:	.word	0x400d4000
    1084:	.word	0x20004258
    1088:	.word	0x20000000
    108c:	.word	0x20000ca0
    1090:	.word	0x43c80000
    1094:	.word	0x20004070
    1098:	.word	0x20004040
    109c:	ldr	r2, [r5, #32]
    109e:	vldr	s15, [r5, #24]
    10a2:	ldr.w	ip, [r5, #36]	; 0x24
    10a6:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    10aa:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    10ae:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    10b0:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    10b2:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    10b4:	ldr.w	r0, [r8, #16]
    10b8:	uxth	r1, r1
    10ba:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    10be:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    10c2:	vmov	s14, lr
    10c6:	ldrb.w	ip, [fp, #1]
    10ca:	ldrb.w	lr, [fp, #2]
    10ce:	vmov	s13, ip
    10d2:	vcvt.f32.s32	s14, s14
    10d6:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    10da:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    10de:	vcvt.f32.s32	s13, s13
    10e2:	ldrb	r3, [r2, r3]
    10e4:	ldrb.w	ip, [lr, #2]
    10e8:	vcvt.f32.s32	s12, s12
    10ec:	vmov	s10, r3
    10f0:	ldrb.w	r3, [lr, #1]
    10f4:	vmov	s8, ip
    10f8:	vmul.f32	s13, s13, s15
    10fc:	vmov	s9, r3
    1100:	vmul.f32	s12, s12, s15
    1104:	vcvt.f32.s32	s8, s8
    1108:	ldr.w	fp, [pc, #376]	; 1284 <updateScreensFade()+0x4f4>
    110c:	vcvt.f32.s32	s9, s9
    1110:	vmul.f32	s15, s14, s15
    1114:	vcvt.f32.s32	s10, s10
    1118:	vmov.f32	s14, s13
    111c:	vfma.f32	s12, s11, s8
    1120:	vfma.f32	s15, s10, s11
    1124:	vfma.f32	s14, s11, s9
    1128:	vcvt.s32.f32	s13, s12
    112c:	vcvt.s32.f32	s15, s15
    1130:	vcvt.s32.f32	s14, s14
    1134:	vstr	s13, [sp, #20]
    1138:	ldrb.w	r2, [sp, #20]
    113c:	vstr	s14, [sp, #12]
    1140:	vstr	s15, [sp, #16]
    1144:	str	r2, [sp, #0]
    1146:	ldrb.w	r3, [sp, #12]
    114a:	ldrb.w	r2, [sp, #16]
    114e:	bl	88ac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    1152:	cmp	r4, #24
    1154:	bne.n	109c <updateScreensFade()+0x30c>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    1156:	add.w	r9, r9, #1
    115a:	adds	r7, #24
    115c:	cmp.w	r9, #24
    1160:	uxth	r7, r7
    1162:	beq.n	1184 <updateScreensFade()+0x3f4>
    1164:	ldr.w	r2, [sl, #32]
    1168:	vldr	s15, [sl, #24]
    116c:	ldr.w	ip, [sl, #36]	; 0x24
    1170:	b.n	106c <updateScreensFade()+0x2dc>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    1172:	ldr.w	r0, [fp, #16]
    1176:	add	sp, #28
    1178:	vpop	{d8}
    117c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1180:	b.w	8664 <Adafruit_NeoPixel::show()>
    1184:	ldr.w	r0, [fp, #16]
    1188:	bl	8664 <Adafruit_NeoPixel::show()>
    118c:	b.n	e54 <updateScreensFade()+0xc4>
    118e:	movs	r1, #15
    1190:	ldr	r0, [pc, #228]	; (1278 <updateScreensFade()+0x4e8>)
    1192:	bl	8dc4 <usb_serial_write>
    1196:	ldr	r0, [pc, #228]	; (127c <updateScreensFade()+0x4ec>)
    1198:	bl	9f18 <Print::println()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    119c:	ldr	r3, [pc, #224]	; (1280 <updateScreensFade()+0x4f0>)
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    119e:	ldr.w	r1, [r8, #32]
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    11a2:	ldr.w	ip, [r8, #40]	; 0x28
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    11a6:	mov	r5, r3
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    11a8:	ldr.w	r2, [r8, #36]	; 0x24
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    11ac:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    11ae:	ldr	r3, [r3, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    11b0:	str.w	r1, [r8, #40]	; 0x28
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    11b4:	str.w	ip, [r8, #36]	; 0x24
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    11b8:	str.w	r2, [r8, #32]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    11bc:	ldr	r0, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    11be:	ldr	r1, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    11c0:	cmp	r1, r3
    11c2:	it	eq
    11c4:	cmpeq	r0, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    11c6:	mov	r4, r0
    uint32_t lo2 = SNVS_HPRTCLR;
    11c8:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
    11ca:	ite	eq
    11cc:	moveq	r6, #1
    11ce:	movne	r6, #0
    11d0:	cmp	r6, #0
    11d2:	beq.n	11bc <updateScreensFade()+0x42c>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    11d4:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
    11d6:	movs	r1, #0
    11d8:	orr.w	r3, r3, r0, lsl #27
    11dc:	strb.w	r1, [r8, #20]
    11e0:	vmov	s15, r3
    11e4:	vldr	d5, [pc, #136]	; 1270 <updateScreensFade()+0x4e0>
    11e8:	vcvt.f64.u32	d7, s15
    11ec:	vdiv.f64	d6, d7, d5
    11f0:	vcvt.u32.f64	s15, d6
    11f4:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    11f8:	vstr	s15, [r8, #28]
    11fc:	b.n	e78 <updateScreensFade()+0xe8>
    11fe:	movs	r1, #15
    1200:	ldr	r0, [pc, #116]	; (1278 <updateScreensFade()+0x4e8>)
    1202:	bl	8dc4 <usb_serial_write>
    1206:	ldr	r0, [pc, #116]	; (127c <updateScreensFade()+0x4ec>)
    1208:	bl	9f18 <Print::println()>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    120c:	mov	r6, r4
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    120e:	ldr.w	r1, [r8, #32]
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    1212:	ldr.w	ip, [r8, #40]	; 0x28
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    1216:	ldr.w	r2, [r8, #36]	; 0x24
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    121a:	ldr	r5, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    121c:	ldr	r3, [r4, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    121e:	str.w	r1, [r8, #40]	; 0x28
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    1222:	str.w	ip, [r8, #36]	; 0x24
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    1226:	str.w	r2, [r8, #32]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    122a:	ldr	r0, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    122c:	ldr	r1, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    122e:	cmp	r1, r3
    1230:	it	eq
    1232:	cmpeq	r0, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1234:	mov	r5, r0
    uint32_t lo2 = SNVS_HPRTCLR;
    1236:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
    1238:	ite	eq
    123a:	moveq	r4, #1
    123c:	movne	r4, #0
    123e:	cmp	r4, #0
    1240:	beq.n	122a <updateScreensFade()+0x49a>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    1242:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
    1244:	movs	r1, #0
    1246:	orr.w	r3, r3, r0, lsl #27
    124a:	strb.w	r1, [r8, #20]
    124e:	vmov	s15, r3
    1252:	vldr	d5, [pc, #28]	; 1270 <updateScreensFade()+0x4e0>
    1256:	vcvt.f64.u32	d7, s15
    125a:	vdiv.f64	d6, d7, d5
    125e:	vcvt.u32.f64	s15, d6
    1262:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    1266:	vstr	s15, [r8, #28]
    126a:	b.n	ffa <updateScreensFade()+0x26a>
    126c:	nop.w
    1270:	.word	0xd2f1a9fc
    1274:	.word	0x3ff0624d
    1278:	.word	0x2000000c
    127c:	.word	0x20000ca0
    1280:	.word	0x400d4000
    1284:	.word	0x20004040

00001288 <Screen::iterate_animation() [clone .part.12]>:
		_screen->show();
	}


	int ratio = 0;
	void iterate_animation() {
    1288:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    128c:	movs	r3, #2
    128e:	sub	sp, #68	; 0x44
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
    1290:	ldr.w	r9, [r0, #4]
    1294:	movs	r2, #32
    1296:	str	r3, [sp, #4]
		_screen->show();
	}


	int ratio = 0;
	void iterate_animation() {
    1298:	mov	fp, r0
    129a:	addw	r3, r9, #2428	; 0x97c
    129e:	movs	r1, #0
    12a0:	ldr.w	sl, [pc, #1500]	; 1880 <Screen::iterate_animation() [clone .part.12]+0x5f8>
    12a4:	add.w	r0, sp, r2
    12a8:	str	r3, [sp, #12]
    12aa:	add.w	r3, r9, #4640	; 0x1220
    12ae:	str	r1, [sp, #20]
    12b0:	str	r3, [sp, #24]
    12b2:	bl	aae8 <memset>
    12b6:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
    12ba:	bl	458 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    12be:	movs	r7, #2
  updateScreensFade();
    12c0:	bl	d90 <updateScreensFade()>
    12c4:	ldrb.w	r2, [r9, #24]
    12c8:	ldr	r3, [sp, #24]
    12ca:	str	r2, [sp, #16]
    12cc:	ldr	r3, [r3, #0]
    12ce:	ldr	r2, [sp, #20]
    12d0:	ldr	r1, [sp, #12]
    12d2:	add.w	r8, r3, r2
    12d6:	sub.w	ip, r1, #96	; 0x60
    12da:	sub.w	r3, r1, #2400	; 0x960
    12de:	mov	fp, r8
    12e0:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    12e2:	ldr	r3, [sp, #16]
    12e4:	cmp	r3, #0
    12e6:	beq.w	16ba <Screen::iterate_animation() [clone .part.12]+0x432>
      return _background[x][y];
    12ea:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    12ee:	cmp	r3, #0
    12f0:	beq.n	13c6 <Screen::iterate_animation() [clone .part.12]+0x13e>
    12f2:	ldr	r3, [sp, #4]
    12f4:	add.w	lr, sp, #32
    12f8:	subs	r6, r3, #3
    12fa:	subs	r3, r7, #3
    12fc:	str	r3, [sp, #8]
    12fe:	smull	r3, r2, sl, r6
    1302:	asrs	r3, r6, #31
    1304:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1306:	mov	r5, lr
    1308:	rsb	r3, r3, r2, asr #2
    130c:	add.w	r3, r3, r3, lsl #1
    1310:	sub.w	r3, r6, r3, lsl #3
    1314:	adds	r3, #24
    1316:	smull	r2, r1, sl, r3
    131a:	asrs	r2, r3, #31
    131c:	rsb	r2, r2, r1, asr #2
    1320:	add.w	r2, r2, r2, lsl #1
    1324:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1328:	add.w	r2, r2, r2, lsl #1
    132c:	lsls	r4, r2, #3
    132e:	smull	r3, r2, sl, r0
    1332:	asrs	r3, r0, #31
    1334:	rsb	r3, r3, r2, asr #2
    1338:	add.w	r3, r3, r3, lsl #1
    133c:	sub.w	r3, r0, r3, lsl #3
    1340:	adds	r0, #1
    1342:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1344:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1346:	smull	r2, r1, sl, r3
    134a:	mov.w	r2, r3, asr #31
    134e:	rsb	r2, r2, r1, asr #2
    1352:	add.w	r2, r2, r2, lsl #1
    1356:	sub.w	r3, r3, r2, lsl #3
    135a:	add	r3, r4
    135c:	add.w	r3, r9, r3, lsl #2
    1360:	ldr	r3, [r3, #28]
    1362:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1366:	bne.n	132e <Screen::iterate_animation() [clone .part.12]+0xa6>
    1368:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    136a:	ldr	r3, [sp, #4]
    136c:	add.w	lr, lr, #12
    1370:	cmp	r3, r6
    1372:	bne.n	12fe <Screen::iterate_animation() [clone .part.12]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1374:	ldr	r3, [sp, #0]
    1376:	movs	r0, #1
    1378:	ldr	r1, [r3, #0]
    137a:	ldr.w	r3, [r9]
    137e:	adds	r5, r1, r3
    1380:	movs	r4, #0
    1382:	mov	r3, r4
    1384:	b.n	138c <Screen::iterate_animation() [clone .part.12]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1386:	adds	r3, #1
    1388:	cmp	r3, #8
    138a:	beq.n	13a2 <Screen::iterate_animation() [clone .part.12]+0x11a>
          if ((i >> j) % 2 == 1){
    138c:	asr.w	r2, r0, r3
    1390:	lsls	r6, r2, #31
    1392:	bpl.n	1386 <Screen::iterate_animation() [clone .part.12]+0xfe>
            sum += neighbours[j];
    1394:	add	r2, sp, #32
    1396:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    139a:	adds	r3, #1
    139c:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    139e:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    13a0:	bne.n	138c <Screen::iterate_animation() [clone .part.12]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    13a2:	cmp	r5, r4
    13a4:	beq.w	16c4 <Screen::iterate_animation() [clone .part.12]+0x43c>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    13a8:	adds	r0, #1
    13aa:	cmp.w	r0, #256	; 0x100
    13ae:	bne.n	1380 <Screen::iterate_animation() [clone .part.12]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    13b0:	ldr.w	r3, [r9, #8]
    13b4:	subs	r1, r1, r3
    13b6:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    13ba:	ldr.w	r3, [r9, #12]
    13be:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    13c0:	it	gt
    13c2:	strgt.w	r3, [ip]
    13c6:	ldr	r3, [sp, #0]
    13c8:	add.w	ip, ip, #4
    13cc:	adds	r7, #1
    13ce:	add.w	r8, r8, #1
    13d2:	adds	r3, #4
    13d4:	add.w	fp, fp, #1
    13d8:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    13da:	ldr	r3, [sp, #12]
    13dc:	cmp	r3, ip
    13de:	bne.n	12e2 <Screen::iterate_animation() [clone .part.12]+0x5a>
    13e0:	ldr	r2, [sp, #12]
    13e2:	ldr	r3, [sp, #20]
    13e4:	adds	r2, #96	; 0x60
    13e6:	adds	r3, #24
    13e8:	str	r2, [sp, #12]
    13ea:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    13ec:	cmp.w	r3, #576	; 0x240
    13f0:	str	r3, [sp, #20]
    13f2:	add.w	r2, r2, #1
    13f6:	str	r2, [sp, #4]
    13f8:	bne.w	12ba <Screen::iterate_animation() [clone .part.12]+0x32>
    13fc:	movw	r5, #4632	; 0x1218
    1400:	ldr.w	fp, [sp, #28]
    1404:	addw	r4, r9, #2328	; 0x918
    1408:	add	r5, r9
    140a:	sub.w	r3, r4, #2304	; 0x900
    140e:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1412:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1414:	ldr.w	r1, [r2, #4]!
    1418:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    141c:	cmp	r3, r0
    141e:	bne.n	1414 <Screen::iterate_animation() [clone .part.12]+0x18c>
    1420:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1422:	cmp	r4, r5
    1424:	bne.n	140a <Screen::iterate_animation() [clone .part.12]+0x182>
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    1426:	ldr.w	r9, [fp]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    142a:	movs	r3, #2
    142c:	movs	r2, #32
    142e:	movs	r1, #0
    1430:	str	r3, [sp, #4]
    1432:	addw	r3, r9, #2428	; 0x97c
    1436:	ldr.w	sl, [pc, #1096]	; 1880 <Screen::iterate_animation() [clone .part.12]+0x5f8>
    143a:	add.w	r0, sp, r2
    143e:	str	r3, [sp, #12]
    1440:	add.w	r3, r9, #4640	; 0x1220
    1444:	str	r1, [sp, #20]
    1446:	str	r3, [sp, #24]
    1448:	bl	aae8 <memset>
    144c:	str.w	fp, [sp, #28]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    1450:	bl	458 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1454:	movs	r7, #2
  updateScreensFade();
    1456:	bl	d90 <updateScreensFade()>
    145a:	ldrb.w	r2, [r9, #24]
    145e:	ldr	r3, [sp, #24]
    1460:	str	r2, [sp, #16]
    1462:	ldr	r3, [r3, #0]
    1464:	ldr	r2, [sp, #20]
    1466:	ldr	r1, [sp, #12]
    1468:	add.w	r8, r3, r2
    146c:	sub.w	ip, r1, #96	; 0x60
    1470:	sub.w	r3, r1, #2400	; 0x960
    1474:	mov	fp, r8
    1476:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1478:	ldr	r3, [sp, #16]
    147a:	cmp	r3, #0
    147c:	beq.w	16d0 <Screen::iterate_animation() [clone .part.12]+0x448>
      return _background[x][y];
    1480:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    1484:	cmp	r3, #0
    1486:	beq.n	155c <Screen::iterate_animation() [clone .part.12]+0x2d4>
    1488:	ldr	r3, [sp, #4]
    148a:	add.w	lr, sp, #32
    148e:	subs	r6, r3, #3
    1490:	subs	r3, r7, #3
    1492:	str	r3, [sp, #8]
    1494:	smull	r3, r2, sl, r6
    1498:	asrs	r3, r6, #31
    149a:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    149c:	mov	r5, lr
    149e:	rsb	r3, r3, r2, asr #2
    14a2:	add.w	r3, r3, r3, lsl #1
    14a6:	sub.w	r3, r6, r3, lsl #3
    14aa:	adds	r3, #24
    14ac:	smull	r2, r1, sl, r3
    14b0:	asrs	r2, r3, #31
    14b2:	rsb	r2, r2, r1, asr #2
    14b6:	add.w	r2, r2, r2, lsl #1
    14ba:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    14be:	add.w	r2, r2, r2, lsl #1
    14c2:	lsls	r4, r2, #3
    14c4:	smull	r3, r2, sl, r0
    14c8:	asrs	r3, r0, #31
    14ca:	rsb	r3, r3, r2, asr #2
    14ce:	add.w	r3, r3, r3, lsl #1
    14d2:	sub.w	r3, r0, r3, lsl #3
    14d6:	adds	r0, #1
    14d8:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    14da:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    14dc:	smull	r2, r1, sl, r3
    14e0:	mov.w	r2, r3, asr #31
    14e4:	rsb	r2, r2, r1, asr #2
    14e8:	add.w	r2, r2, r2, lsl #1
    14ec:	sub.w	r3, r3, r2, lsl #3
    14f0:	add	r3, r4
    14f2:	add.w	r3, r9, r3, lsl #2
    14f6:	ldr	r3, [r3, #28]
    14f8:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    14fc:	bne.n	14c4 <Screen::iterate_animation() [clone .part.12]+0x23c>
    14fe:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1500:	ldr	r3, [sp, #4]
    1502:	add.w	lr, lr, #12
    1506:	cmp	r6, r3
    1508:	bne.n	1494 <Screen::iterate_animation() [clone .part.12]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    150a:	ldr	r3, [sp, #0]
    150c:	movs	r0, #1
    150e:	ldr	r1, [r3, #0]
    1510:	ldr.w	r3, [r9]
    1514:	adds	r5, r1, r3
    1516:	movs	r4, #0
    1518:	mov	r3, r4
    151a:	b.n	1522 <Screen::iterate_animation() [clone .part.12]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    151c:	adds	r3, #1
    151e:	cmp	r3, #8
    1520:	beq.n	1538 <Screen::iterate_animation() [clone .part.12]+0x2b0>
          if ((i >> j) % 2 == 1){
    1522:	asr.w	r2, r0, r3
    1526:	lsls	r2, r2, #31
    1528:	bpl.n	151c <Screen::iterate_animation() [clone .part.12]+0x294>
            sum += neighbours[j];
    152a:	add	r2, sp, #32
    152c:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1530:	adds	r3, #1
    1532:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1534:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1536:	bne.n	1522 <Screen::iterate_animation() [clone .part.12]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1538:	cmp	r5, r4
    153a:	beq.w	16da <Screen::iterate_animation() [clone .part.12]+0x452>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    153e:	adds	r0, #1
    1540:	cmp.w	r0, #256	; 0x100
    1544:	bne.n	1516 <Screen::iterate_animation() [clone .part.12]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1546:	ldr.w	r3, [r9, #8]
    154a:	subs	r1, r1, r3
    154c:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1550:	ldr.w	r3, [r9, #12]
    1554:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    1556:	it	gt
    1558:	strgt.w	r3, [ip]
    155c:	ldr	r3, [sp, #0]
    155e:	add.w	ip, ip, #4
    1562:	adds	r7, #1
    1564:	add.w	r8, r8, #1
    1568:	adds	r3, #4
    156a:	add.w	fp, fp, #1
    156e:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1570:	ldr	r3, [sp, #12]
    1572:	cmp	r3, ip
    1574:	bne.n	1478 <Screen::iterate_animation() [clone .part.12]+0x1f0>
    1576:	ldr	r2, [sp, #12]
    1578:	ldr	r3, [sp, #20]
    157a:	adds	r2, #96	; 0x60
    157c:	adds	r3, #24
    157e:	str	r2, [sp, #12]
    1580:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1582:	cmp.w	r3, #576	; 0x240
    1586:	str	r3, [sp, #20]
    1588:	add.w	r2, r2, #1
    158c:	str	r2, [sp, #4]
    158e:	bne.w	1450 <Screen::iterate_animation() [clone .part.12]+0x1c8>
    1592:	movw	r5, #4632	; 0x1218
    1596:	ldr.w	fp, [sp, #28]
    159a:	addw	r4, r9, #2328	; 0x918
    159e:	add	r5, r9
    15a0:	sub.w	r3, r4, #2304	; 0x900
    15a4:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15a8:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    15aa:	ldr.w	r1, [r2, #4]!
    15ae:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    15b2:	cmp	r3, r0
    15b4:	bne.n	15aa <Screen::iterate_animation() [clone .part.12]+0x322>
    15b6:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    15b8:	cmp	r4, r5
    15ba:	bne.n	15a0 <Screen::iterate_animation() [clone .part.12]+0x318>
		ratio++;
    15bc:	ldr.w	r3, [fp, #44]	; 0x2c
    15c0:	adds	r3, #1
		if (ratio == 1){
    15c2:	cmp	r3, #1
	void iterate_animation() {
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    15c4:	str.w	r3, [fp, #44]	; 0x2c
		if (ratio == 1){
    15c8:	beq.w	1884 <Screen::iterate_animation() [clone .part.12]+0x5fc>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15cc:	mov.w	ip, #0
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    15d0:	ldr	r1, [pc, #660]	; (1868 <Screen::iterate_animation() [clone .part.12]+0x5e0>)
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    15d2:	mov.w	lr, #360	; 0x168
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    15d6:	ldr	r0, [pc, #660]	; (186c <Screen::iterate_animation() [clone .part.12]+0x5e4>)
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15d8:	str.w	ip, [sp, #4]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    15dc:	ldr	r2, [sp, #4]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15de:	movs	r4, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    15e0:	add.w	sl, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    15e4:	add.w	r3, r2, r2, lsl #3
    15e8:	mov.w	sl, sl, lsl #3
    15ec:	lsls	r3, r3, #3
    15ee:	str	r3, [sp, #0]

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				if ((*_fg_automaton).can_color(x, y)) {
    15f0:	ldr.w	r3, [fp, #4]
    15f4:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    15f8:	ldrb	r5, [r3, #24]
    15fa:	ldr	r2, [r2, #0]
      return _background[x][y];
    15fc:	add	r2, r4
    15fe:	ldrb.w	r2, [r2, ip]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1602:	cbnz	r5, 1608 <Screen::iterate_animation() [clone .part.12]+0x380>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1604:	eor.w	r2, r2, #1
    1608:	cbnz	r2, 160e <Screen::iterate_animation() [clone .part.12]+0x386>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    160a:	ldr.w	r3, [fp]
    160e:	add.w	r2, sl, r4
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1612:	add.w	r6, sl, r4
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1616:	add.w	r3, r3, r2, lsl #2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    161a:	adds	r6, #6
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    161c:	ldr	r5, [r3, #28]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    161e:	lsls	r6, r6, #2
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1620:	ldr	r3, [pc, #588]	; (1870 <Screen::iterate_animation() [clone .part.12]+0x5e8>)
    1622:	smull	r2, r3, r5, r3
    1626:	asrs	r2, r5, #31
    1628:	add	r3, r5
    162a:	rsb	r3, r2, r3, asr #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    162e:	ldr.w	r2, [fp, #8]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1632:	mls	r3, lr, r3, r5
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    1636:	ldr.w	r5, [fp, #12]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    163a:	add	r2, r6
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    163c:	add	r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    163e:	ldr	r2, [r2, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    1640:	ldr	r5, [r5, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1642:	add.w	r2, r2, r2, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    1646:	adds	r5, #50	; 0x32
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1648:	lsls	r2, r2, #1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    164a:	smull	r8, r9, r5, r1
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    164e:	smull	r6, r7, r2, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    1652:	asrs	r6, r5, #31
    1654:	add.w	r8, r5, r9
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1658:	add.w	r9, r2, r7
    165c:	asrs	r7, r2, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    165e:	rsb	r6, r6, r8, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1662:	rsb	r7, r7, r9, asr #7
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    1666:	rsb	r6, r6, r6, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    166a:	rsb	r7, r7, r7, lsl #8
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    166e:	subs	r6, r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1670:	subs	r7, r2, r7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    1672:	cmp	r6, #199	; 0xc7
    1674:	ble.n	16e6 <Screen::iterate_animation() [clone .part.12]+0x45e>
    1676:	rsb	r6, r6, #255	; 0xff
    167a:	ldr	r5, [pc, #504]	; (1874 <Screen::iterate_animation() [clone .part.12]+0x5ec>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    167c:	cmp	r7, #150	; 0x96
    167e:	ldr.w	r2, [r5, r6, lsl #2]
    1682:	bgt.w	1850 <Screen::iterate_animation() [clone .part.12]+0x5c8>
    1686:	movs	r5, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    1688:	cmp	r2, #255	; 0xff
    168a:	bne.n	16f0 <Screen::iterate_animation() [clone .part.12]+0x468>


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    168c:	adds	r4, #1
    168e:	cmp	r4, #24
    1690:	bne.n	15f0 <Screen::iterate_animation() [clone .part.12]+0x368>
	}


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    1692:	ldr	r3, [sp, #4]
    1694:	add.w	ip, ip, #24
    1698:	adds	r3, #1
    169a:	cmp	r3, #24
    169c:	str	r3, [sp, #4]
    169e:	bne.n	15dc <Screen::iterate_animation() [clone .part.12]+0x354>
			ratio = 0;
		}

		gen_color_matrix();

		newFrameReady = true;
    16a0:	movs	r3, #1
    16a2:	movs	r1, #13
    16a4:	ldr	r0, [pc, #464]	; (1878 <Screen::iterate_animation() [clone .part.12]+0x5f0>)
    16a6:	strb.w	r3, [fp, #20]
    16aa:	bl	8dc4 <usb_serial_write>
    16ae:	ldr	r0, [pc, #460]	; (187c <Screen::iterate_animation() [clone .part.12]+0x5f4>)
    Serial.println("newFrameReady");
	}
    16b0:	add	sp, #68	; 0x44
    16b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16b6:	b.w	9f18 <Print::println()>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    16ba:	ldrb.w	r3, [fp]
    16be:	eor.w	r3, r3, #1
    16c2:	b.n	12ee <Screen::iterate_animation() [clone .part.12]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    16c4:	ldr.w	r2, [r9, #4]
    16c8:	add	r1, r2
    16ca:	str.w	r1, [ip]
    16ce:	b.n	13ba <Screen::iterate_animation() [clone .part.12]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    16d0:	ldrb.w	r3, [fp]
    16d4:	eor.w	r3, r3, #1
    16d8:	b.n	1484 <Screen::iterate_animation() [clone .part.12]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    16da:	ldr.w	r2, [r9, #4]
    16de:	add	r1, r2
    16e0:	str.w	r1, [ip]
    16e4:	b.n	1550 <Screen::iterate_animation() [clone .part.12]+0x2c8>
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    16e6:	cmp	r7, #150	; 0x96
    16e8:	bgt.w	184c <Screen::iterate_animation() [clone .part.12]+0x5c4>
    16ec:	movs	r5, #0
    16ee:	movs	r2, #7
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    16f0:	smull	r7, r6, r0, r3
    16f4:	asrs	r7, r3, #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    16f6:	mul.w	r2, r2, r5
    switch(hue/60) {
    16fa:	add	r6, r3
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    16fc:	asrs	r2, r2, #8
    switch(hue/60) {
    16fe:	rsb	r6, r7, r6, asr #5
    1702:	cmp	r6, #5
    1704:	bhi.w	185e <Screen::iterate_animation() [clone .part.12]+0x5d6>
    1708:	tbb	[pc, r6]
    170c:	.word	0x46627d99
    1710:	.short	0x032c
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    1712:	smull	r6, r9, r0, r3
    1716:	rsb	r8, r2, r5
    171a:	uxtb	r6, r5
    171c:	add.w	r5, r9, r3
    1720:	uxtb.w	r9, r2
    1724:	rsb	r5, r7, r5, asr #5
    1728:	rsb	r5, r5, r5, lsl #4
    172c:	sub.w	r3, r3, r5, lsl #2
    1730:	rsb	r3, r3, #60	; 0x3c
    1734:	mul.w	r3, r8, r3
    1738:	smull	r5, r7, r0, r3
    173c:	asrs	r5, r3, #31
    173e:	add	r3, r7
    1740:	rsb	r3, r5, r3, asr #5
    1744:	add	r2, r3
    1746:	uxtb.w	r8, r2
    break;
    }
    *r = colors[0];
    174a:	ldr	r5, [sp, #0]
    174c:	add.w	r3, r4, r4, lsl #1
				

				//hue = filter_hue(hue);
				bri = shift_bri(bri);

				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    1750:	ldr.w	r2, [fp, #40]	; 0x28
    1754:	add	r3, r5
    1756:	adds	r5, r2, r3
    1758:	strb	r6, [r2, r3]
    *g = colors[1];
    175a:	strb.w	r9, [r5, #1]
    *b = colors[2]; 
    175e:	strb.w	r8, [r5, #2]
    1762:	b.n	168c <Screen::iterate_animation() [clone .part.12]+0x404>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    1764:	smull	r6, r9, r0, r3
    1768:	uxtb.w	r8, r5
    176c:	subs	r6, r5, r2
    176e:	add.w	r5, r9, r3
    1772:	uxtb.w	r9, r2
    1776:	rsb	r5, r7, r5, asr #5
    177a:	rsb	r5, r5, r5, lsl #4
    177e:	sub.w	r3, r3, r5, lsl #2
    1782:	mul.w	r6, r3, r6
    1786:	smull	r3, r5, r0, r6
    178a:	asrs	r3, r6, #31
    178c:	add	r6, r5
    178e:	rsb	r6, r3, r6, asr #5
    1792:	add	r2, r6
    1794:	uxtb	r6, r2
    1796:	b.n	174a <Screen::iterate_animation() [clone .part.12]+0x4c2>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    1798:	smull	r8, r6, r0, r3
    179c:	rsb	r9, r2, r5
    17a0:	uxtb.w	r8, r5
    17a4:	adds	r5, r6, r3
    17a6:	uxtb	r6, r2
    17a8:	rsb	r5, r7, r5, asr #5
    17ac:	rsb	r5, r5, r5, lsl #4
    17b0:	sub.w	r3, r3, r5, lsl #2
    17b4:	rsb	r3, r3, #60	; 0x3c
    17b8:	mul.w	r3, r9, r3
    17bc:	smull	r5, r7, r0, r3
    17c0:	asrs	r5, r3, #31
    17c2:	add	r3, r7
    17c4:	rsb	r3, r5, r3, asr #5
    17c8:	add	r2, r3
    17ca:	uxtb.w	r9, r2
    17ce:	b.n	174a <Screen::iterate_animation() [clone .part.12]+0x4c2>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    17d0:	smull	r8, r6, r0, r3
    17d4:	uxtb.w	r9, r5
    17d8:	rsb	r8, r2, r5
    17dc:	adds	r5, r6, r3
    17de:	uxtb	r6, r2
    17e0:	rsb	r5, r7, r5, asr #5
    17e4:	rsb	r5, r5, r5, lsl #4
    17e8:	sub.w	r3, r3, r5, lsl #2
    17ec:	mul.w	r8, r3, r8
    17f0:	smull	r3, r5, r0, r8
    17f4:	mov.w	r3, r8, asr #31
    17f8:	add	r8, r5
    17fa:	rsb	r8, r3, r8, asr #5
    17fe:	add	r2, r8
    1800:	uxtb.w	r8, r2
    1804:	b.n	174a <Screen::iterate_animation() [clone .part.12]+0x4c2>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    1806:	smull	r6, r8, r0, r3
    180a:	uxtb.w	r9, r5
    180e:	subs	r6, r5, r2
    1810:	add.w	r5, r8, r3
    1814:	uxtb.w	r8, r2
    1818:	rsb	r5, r7, r5, asr #5
    181c:	rsb	r5, r5, r5, lsl #4
    1820:	sub.w	r3, r3, r5, lsl #2
    1824:	rsb	r3, r3, #60	; 0x3c
    1828:	mul.w	r3, r6, r3
    182c:	smull	r5, r6, r0, r3
    1830:	asrs	r5, r3, #31
    1832:	add	r3, r6
    1834:	rsb	r3, r5, r3, asr #5
    1838:	add	r2, r3
    183a:	uxtb	r6, r2
    183c:	b.n	174a <Screen::iterate_animation() [clone .part.12]+0x4c2>
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    183e:	subs	r7, r5, r2
    1840:	uxtb	r6, r5
    1842:	uxtb.w	r8, r2
    1846:	mul.w	r3, r3, r7
    184a:	b.n	17bc <Screen::iterate_animation() [clone .part.12]+0x534>
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    184c:	movs	r2, #7
    184e:	ldr	r5, [pc, #36]	; (1874 <Screen::iterate_animation() [clone .part.12]+0x5ec>)
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    1850:	adds	r7, #100	; 0x64
    1852:	cmp	r7, #255	; 0xff
    1854:	it	ge
    1856:	movge	r7, #255	; 0xff
    1858:	ldr.w	r5, [r5, r7, lsl #2]
    185c:	b.n	1688 <Screen::iterate_animation() [clone .part.12]+0x400>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    185e:	mov.w	r8, #0
    1862:	mov	r9, r8
    1864:	mov	r6, r8
    1866:	b.n	174a <Screen::iterate_animation() [clone .part.12]+0x4c2>
    1868:	.word	0x80808081
    186c:	.word	0x88888889
    1870:	.word	0xb60b60b7
    1874:	.word	0x2000002c
    1878:	.word	0x2000001c
    187c:	.word	0x20000ca0
    1880:	.word	0x2aaaaaab

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == 1){
			(*_grow_automaton).iterate_growth();
    1884:	ldr.w	sl, [fp, #8]
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1888:	movs	r2, #32
    188a:	mov.w	r8, #2
    188e:	ldr.w	r9, [pc, #792]	; 1ba8 <Screen::iterate_animation() [clone .part.12]+0x920>
    1892:	addw	r3, sl, #2332	; 0x91c
    1896:	movs	r1, #0
    1898:	add.w	r0, sp, r2
    189c:	str	r3, [sp, #4]
    189e:	bl	aae8 <memset>
    18a2:	str.w	fp, [sp, #20]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    18a6:	bl	458 <updateBeams()>
  updateScreensFade();
    18aa:	bl	d90 <updateScreensFade()>
    18ae:	ldr.w	r3, [sl]
    18b2:	ldr	r2, [sp, #4]
    18b4:	mov.w	ip, #4294967295
    18b8:	str	r3, [sp, #8]
    18ba:	ldr.w	r3, [sl, #12]
    18be:	mov	fp, r2
    18c0:	str	r3, [sp, #12]
    18c2:	subw	r3, r2, #2308	; 0x904
    18c6:	str	r3, [sp, #0]
    18c8:	sub.w	r3, r8, #3
    18cc:	str	r3, [sp, #16]
    18ce:	ldr	r6, [sp, #16]
    18d0:	add.w	lr, sp, #32
    18d4:	add.w	r7, ip, #3
    18d8:	smull	r3, r2, r9, r6
    18dc:	asrs	r3, r6, #31
    18de:	mov	r4, lr
    18e0:	mov	r1, ip
    18e2:	rsb	r3, r3, r2, asr #2
    18e6:	add.w	r3, r3, r3, lsl #1
    18ea:	sub.w	r3, r6, r3, lsl #3
    18ee:	adds	r3, #24
    18f0:	smull	r2, r0, r9, r3
    18f4:	asrs	r2, r3, #31
    18f6:	rsb	r0, r2, r0, asr #2
    18fa:	add.w	r0, r0, r0, lsl #1
    18fe:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1902:	add.w	r0, r0, r0, lsl #1
    1906:	lsls	r0, r0, #3
    1908:	smull	r3, r2, r9, r1
    190c:	asrs	r3, r1, #31
    190e:	rsb	r3, r3, r2, asr #2
    1912:	add.w	r3, r3, r3, lsl #1
    1916:	sub.w	r3, r1, r3, lsl #3
    191a:	adds	r1, #1
    191c:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    191e:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1920:	smull	r2, r5, r9, r3
    1924:	mov.w	r2, r3, asr #31
    1928:	rsb	r2, r2, r5, asr #2
    192c:	add.w	r2, r2, r2, lsl #1
    1930:	sub.w	r3, r3, r2, lsl #3
    1934:	add	r3, r0
    1936:	add.w	r3, sl, r3, lsl #2
    193a:	ldr	r3, [r3, #28]
    193c:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1940:	bne.n	1908 <Screen::iterate_animation() [clone .part.12]+0x680>
    1942:	adds	r6, #1
    1944:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    1948:	cmp	r8, r6
    194a:	bne.n	18d8 <Screen::iterate_animation() [clone .part.12]+0x650>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    194c:	ldr	r3, [sp, #0]
    194e:	movs	r1, #1
    1950:	ldr.w	r0, [r3, #4]!
    1954:	str	r3, [sp, #0]
    1956:	ldr	r3, [sp, #8]
    1958:	adds	r5, r3, r0
    195a:	movs	r4, #0
    195c:	mov	r3, r4
    195e:	b.n	1966 <Screen::iterate_animation() [clone .part.12]+0x6de>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1960:	adds	r3, #1
    1962:	cmp	r3, #8
    1964:	beq.n	197c <Screen::iterate_animation() [clone .part.12]+0x6f4>
          if ((i >> j) % 2 == 1){
    1966:	asr.w	r2, r1, r3
    196a:	lsls	r6, r2, #31
    196c:	bpl.n	1960 <Screen::iterate_animation() [clone .part.12]+0x6d8>
            sum += neighbours[j];
    196e:	add	r2, sp, #32
    1970:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1974:	adds	r3, #1
    1976:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1978:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    197a:	bne.n	1966 <Screen::iterate_animation() [clone .part.12]+0x6de>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    197c:	cmp	r5, r4
    197e:	beq.w	1b84 <Screen::iterate_animation() [clone .part.12]+0x8fc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1982:	adds	r1, #1
    1984:	cmp.w	r1, #256	; 0x100
    1988:	bne.n	195a <Screen::iterate_animation() [clone .part.12]+0x6d2>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    198a:	ldr.w	r3, [sl, #8]
    198e:	subs	r0, r0, r3
    1990:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    1994:	ldr	r2, [sp, #12]
    1996:	add.w	ip, ip, #1
    199a:	add.w	fp, fp, #4
    199e:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    19a0:	it	gt
    19a2:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    19a6:	cmp.w	ip, #23
    19aa:	bne.n	18ce <Screen::iterate_animation() [clone .part.12]+0x646>
    19ac:	ldr	r3, [sp, #4]
    19ae:	add.w	r8, r8, #1
    19b2:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    19b4:	cmp.w	r8, #26
    19b8:	str	r3, [sp, #4]
    19ba:	bne.w	18a6 <Screen::iterate_animation() [clone .part.12]+0x61e>
    19be:	movw	r0, #4632	; 0x1218
    19c2:	ldr.w	fp, [sp, #20]
    19c6:	addw	r3, sl, #2328	; 0x918
    19ca:	add	r0, sl
    19cc:	sub.w	r2, r3, #2304	; 0x900
    19d0:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    19d4:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    19d6:	ldr.w	r4, [r1, #4]!
    19da:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    19de:	cmp	r5, r2
    19e0:	bne.n	19d6 <Screen::iterate_animation() [clone .part.12]+0x74e>
    19e2:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    19e4:	cmp	r0, r3
    19e6:	bne.n	19cc <Screen::iterate_animation() [clone .part.12]+0x744>
			(*_sat_automaton).iterate();
    19e8:	ldr.w	r9, [fp, #12]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    19ec:	movs	r3, #2
    19ee:	movs	r2, #32
    19f0:	movs	r1, #0
    19f2:	str	r3, [sp, #0]
    19f4:	addw	r3, r9, #2428	; 0x97c
    19f8:	ldr.w	sl, [pc, #428]	; 1ba8 <Screen::iterate_animation() [clone .part.12]+0x920>
    19fc:	add.w	r0, sp, r2
    1a00:	str	r3, [sp, #8]
    1a02:	add.w	r3, r9, #4640	; 0x1220
    1a06:	str	r1, [sp, #12]
    1a08:	str	r3, [sp, #24]
    1a0a:	bl	aae8 <memset>
    1a0e:	str.w	fp, [sp, #28]
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    1a12:	bl	458 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1a16:	movs	r7, #2
  updateScreensFade();
    1a18:	bl	d90 <updateScreensFade()>
    1a1c:	ldrb.w	r2, [r9, #24]
    1a20:	ldr	r3, [sp, #24]
    1a22:	str	r2, [sp, #20]
    1a24:	ldr	r3, [r3, #0]
    1a26:	ldr	r2, [sp, #12]
    1a28:	ldr	r1, [sp, #8]
    1a2a:	add.w	r8, r3, r2
    1a2e:	sub.w	lr, r1, #96	; 0x60
    1a32:	sub.w	r3, r1, #2400	; 0x960
    1a36:	mov	fp, r8
    1a38:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1a3a:	ldr	r3, [sp, #20]
    1a3c:	cmp	r3, #0
    1a3e:	beq.w	1b90 <Screen::iterate_animation() [clone .part.12]+0x908>
      return _background[x][y];
    1a42:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    1a46:	cmp	r3, #0
    1a48:	beq.n	1b1c <Screen::iterate_animation() [clone .part.12]+0x894>
    1a4a:	ldr	r3, [sp, #0]
    1a4c:	add.w	ip, sp, #32
    1a50:	subs	r6, r3, #3
    1a52:	subs	r3, r7, #3
    1a54:	str	r3, [sp, #16]
    1a56:	smull	r3, r2, sl, r6
    1a5a:	asrs	r3, r6, #31
    1a5c:	ldr	r0, [sp, #16]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1a5e:	mov	r5, ip
    1a60:	rsb	r3, r3, r2, asr #2
    1a64:	add.w	r3, r3, r3, lsl #1
    1a68:	sub.w	r3, r6, r3, lsl #3
    1a6c:	adds	r3, #24
    1a6e:	smull	r2, r1, sl, r3
    1a72:	asrs	r2, r3, #31
    1a74:	rsb	r2, r2, r1, asr #2
    1a78:	add.w	r2, r2, r2, lsl #1
    1a7c:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1a80:	add.w	r2, r2, r2, lsl #1
    1a84:	lsls	r4, r2, #3
    1a86:	smull	r3, r2, sl, r0
    1a8a:	asrs	r3, r0, #31
    1a8c:	rsb	r3, r3, r2, asr #2
    1a90:	add.w	r3, r3, r3, lsl #1
    1a94:	sub.w	r3, r0, r3, lsl #3
    1a98:	adds	r0, #1
    1a9a:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1a9c:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1a9e:	smull	r2, r1, sl, r3
    1aa2:	mov.w	r2, r3, asr #31
    1aa6:	rsb	r2, r2, r1, asr #2
    1aaa:	add.w	r2, r2, r2, lsl #1
    1aae:	sub.w	r3, r3, r2, lsl #3
    1ab2:	add	r3, r4
    1ab4:	add.w	r3, r9, r3, lsl #2
    1ab8:	ldr	r3, [r3, #28]
    1aba:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1abe:	bne.n	1a86 <Screen::iterate_animation() [clone .part.12]+0x7fe>
    1ac0:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1ac2:	ldr	r3, [sp, #0]
    1ac4:	add.w	ip, ip, #12
    1ac8:	cmp	r3, r6
    1aca:	bne.n	1a56 <Screen::iterate_animation() [clone .part.12]+0x7ce>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1acc:	ldr	r3, [sp, #4]
    1ace:	movs	r0, #1
    1ad0:	ldr	r1, [r3, #0]
    1ad2:	ldr.w	r3, [r9]
    1ad6:	adds	r5, r1, r3
    1ad8:	movs	r4, #0
    1ada:	mov	r3, r4
    1adc:	b.n	1ae4 <Screen::iterate_animation() [clone .part.12]+0x85c>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1ade:	adds	r3, #1
    1ae0:	cmp	r3, #8
    1ae2:	beq.n	1afa <Screen::iterate_animation() [clone .part.12]+0x872>
          if ((i >> j) % 2 == 1){
    1ae4:	asr.w	r2, r0, r3
    1ae8:	lsls	r2, r2, #31
    1aea:	bpl.n	1ade <Screen::iterate_animation() [clone .part.12]+0x856>
            sum += neighbours[j];
    1aec:	add	r2, sp, #32
    1aee:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1af2:	adds	r3, #1
    1af4:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1af6:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1af8:	bne.n	1ae4 <Screen::iterate_animation() [clone .part.12]+0x85c>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1afa:	cmp	r5, r4
    1afc:	beq.n	1b9a <Screen::iterate_animation() [clone .part.12]+0x912>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1afe:	adds	r0, #1
    1b00:	cmp.w	r0, #256	; 0x100
    1b04:	bne.n	1ad8 <Screen::iterate_animation() [clone .part.12]+0x850>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1b06:	ldr.w	r3, [r9, #8]
    1b0a:	subs	r1, r1, r3
    1b0c:	str.w	r1, [lr]
          }
          if (nextCells[x][y] < _floorInit){
    1b10:	ldr.w	r3, [r9, #12]
    1b14:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    1b16:	it	gt
    1b18:	strgt.w	r3, [lr]
    1b1c:	ldr	r3, [sp, #4]
    1b1e:	add.w	lr, lr, #4
    1b22:	adds	r7, #1
    1b24:	add.w	r8, r8, #1
    1b28:	adds	r3, #4
    1b2a:	add.w	fp, fp, #1
    1b2e:	str	r3, [sp, #4]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1b30:	ldr	r3, [sp, #8]
    1b32:	cmp	r3, lr
    1b34:	bne.n	1a3a <Screen::iterate_animation() [clone .part.12]+0x7b2>
    1b36:	ldr	r2, [sp, #8]
    1b38:	ldr	r3, [sp, #12]
    1b3a:	adds	r2, #96	; 0x60
    1b3c:	adds	r3, #24
    1b3e:	str	r2, [sp, #8]
    1b40:	ldr	r2, [sp, #0]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1b42:	cmp.w	r3, #576	; 0x240
    1b46:	str	r3, [sp, #12]
    1b48:	add.w	r2, r2, #1
    1b4c:	str	r2, [sp, #0]
    1b4e:	bne.w	1a12 <Screen::iterate_animation() [clone .part.12]+0x78a>
    1b52:	movw	r0, #4632	; 0x1218
    1b56:	ldr.w	fp, [sp, #28]
    1b5a:	addw	r3, r9, #2328	; 0x918
    1b5e:	add	r0, r9
    1b60:	sub.w	r2, r3, #2304	; 0x900
    1b64:	sub.w	r5, r3, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1b68:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1b6a:	ldr.w	r4, [r1, #4]!
    1b6e:	str.w	r4, [r2, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1b72:	cmp	r5, r2
    1b74:	bne.n	1b6a <Screen::iterate_animation() [clone .part.12]+0x8e2>
    1b76:	adds	r3, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1b78:	cmp	r0, r3
    1b7a:	bne.n	1b60 <Screen::iterate_animation() [clone .part.12]+0x8d8>
			ratio = 0;
    1b7c:	movs	r3, #0
    1b7e:	str.w	r3, [fp, #44]	; 0x2c
    1b82:	b.n	15cc <Screen::iterate_animation() [clone .part.12]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1b84:	ldr.w	r2, [sl, #4]
    1b88:	add	r0, r2
    1b8a:	str.w	r0, [fp]
    1b8e:	b.n	1994 <Screen::iterate_animation() [clone .part.12]+0x70c>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1b90:	ldrb.w	r3, [fp]
    1b94:	eor.w	r3, r3, #1
    1b98:	b.n	1a46 <Screen::iterate_animation() [clone .part.12]+0x7be>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1b9a:	ldr.w	r2, [r9, #4]
    1b9e:	add	r1, r2
    1ba0:	str.w	r1, [lr]
    1ba4:	b.n	1b10 <Screen::iterate_animation() [clone .part.12]+0x888>
    1ba6:	nop
    1ba8:	.word	0x2aaaaaab
    1bac:	.word	0x00000000

00001bb0 <setup>:
  }
}

elapsedMillis sinceBeam = 0;

void setup() {
    1bb0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  randomSeed(analogRead(17));
    1bb4:	movs	r0, #17
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bb6:	ldr	r7, [pc, #416]	; (1d58 <setup+0x1a8>)
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1bb8:	ldr	r6, [pc, #416]	; (1d5c <setup+0x1ac>)
}

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
    1bba:	bl	9a38 <analogRead>
    1bbe:	bl	9cb8 <randomSeed(unsigned long)>
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1bc2:	ldr	r5, [pc, #412]	; (1d60 <setup+0x1b0>)

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bc4:	ldr.w	sl, [pc, #456]	; 1d90 <setup+0x1e0>
    1bc8:	add.w	lr, r7, #4640	; 0x1220
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1bcc:	add.w	fp, r6, #4640	; 0x1220

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bd0:	movs	r3, #1
    1bd2:	movs	r4, #0
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1bd4:	ldr	r0, [pc, #396]	; (1d64 <setup+0x1b4>)

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bd6:	mov.w	ip, #2
    1bda:	ldr	r2, [pc, #396]	; (1d68 <setup+0x1b8>)
    1bdc:	mov.w	r8, #10
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1be0:	add.w	r9, r5, #4640	; 0x1220

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1be4:	str.w	sl, [lr]
    1be8:	movw	lr, #4636	; 0x121c
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1bec:	str.w	sl, [fp]
    1bf0:	mov.w	fp, #4
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1bf4:	ldr	r1, [pc, #372]	; (1d6c <setup+0x1bc>)

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bf6:	str	r3, [r7, #4]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1bf8:	str	r3, [r6, #4]
    1bfa:	str	r3, [r6, #20]
    1bfc:	strb	r3, [r6, #24]

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1bfe:	str.w	r2, [r7, lr]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1c02:	str.w	r2, [r6, lr]
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1c06:	str.w	sl, [r9]
    1c0a:	mov.w	r9, #3

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1c0e:	str.w	ip, [r7]
    1c12:	str.w	ip, [r7, #8]
    1c16:	str	r4, [r7, #12]
    1c18:	str	r4, [r7, #16]
    1c1a:	strb	r4, [r7, #24]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1c1c:	str	r4, [r6, #12]
    1c1e:	str	r4, [r6, #16]

elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
    1c20:	str.w	r8, [r7, #20]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1c24:	movs	r7, #20
elapsedMillis sinceBeam = 0;

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
    1c26:	str.w	fp, [r6]
    1c2a:	str.w	fp, [r6, #8]
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c2e:	add.w	r6, r0, #4640	; 0x1220

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1c32:	str	r3, [r5, #4]
    1c34:	str.w	r2, [r5, lr]
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c38:	str	r3, [r0, #0]
    1c3a:	str	r3, [r0, #4]
    1c3c:	str	r3, [r0, #8]

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1c3e:	str	r4, [r5, #12]
    1c40:	strb	r4, [r5, #24]
    1c42:	str.w	r9, [r5]
    1c46:	str.w	r9, [r5, #8]
    1c4a:	str	r7, [r5, #20]
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c4c:	str	r4, [r0, #12]
    1c4e:	str	r4, [r0, #16]

void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
    1c50:	str.w	r8, [r5, #16]
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1c54:	add.w	r5, r1, #4640	; 0x1220
void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c58:	str	r3, [r0, #20]
    1c5a:	str.w	r2, [r0, lr]
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1c5e:	str.w	ip, [r1]
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1c62:	ldr	r2, [pc, #268]	; (1d70 <setup+0x1c0>)
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1c64:	str.w	ip, [r1, #8]
void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c68:	str.w	sl, [r6]
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1c6c:	add.w	sl, r2, #4640	; 0x1220
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
    1c70:	ldr	r6, [pc, #256]	; (1d74 <setup+0x1c4>)
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1c72:	ldr.w	ip, [pc, #288]	; 1d94 <setup+0x1e4>
void setup() {
  randomSeed(analogRead(17));
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
    1c76:	strb	r4, [r0, #24]
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
  sat_automaton_B = Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);
    1c78:	ldr	r0, [pc, #252]	; (1d78 <setup+0x1c8>)
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1c7a:	str	r7, [r2, #20]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
    1c7c:	add.w	r7, r6, #4640	; 0x1220
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1c80:	str.w	r9, [r2]
    1c84:	str.w	r9, [r2, #8]
  sat_automaton_B = Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);
    1c88:	add.w	r9, r0, #4640	; 0x1220
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1c8c:	str.w	ip, [r5]
    1c90:	ldr	r5, [pc, #232]	; (1d7c <setup+0x1cc>)
    1c92:	str	r3, [r1, #4]
    1c94:	str	r4, [r1, #12]
    1c96:	str	r4, [r1, #16]
    1c98:	strb	r4, [r1, #24]
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
  sat_automaton_B = Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);
    1c9a:	str	r3, [r0, #0]
    1c9c:	str	r3, [r0, #4]
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1c9e:	str	r3, [r2, #4]
    1ca0:	str	r4, [r2, #12]
    1ca2:	strb	r4, [r2, #24]
  fg_automaton_A = Automaton(2, 1, 2, 0, 0, 10, false, mask_A, background_A);
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
    1ca4:	str.w	r8, [r1, #20]
    1ca8:	str.w	r5, [r1, lr]
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
    1cac:	str	r3, [r6, #4]
    1cae:	str	r3, [r6, #20]
    1cb0:	strb	r3, [r6, #24]
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
    1cb2:	str.w	r8, [r2, #16]
    1cb6:	str.w	ip, [sl]
    1cba:	str.w	r5, [r2, lr]
  bg_automaton_A = Automaton(4, 1, 4, 0, 0, 1, true, mask_A, background_A);
  grow_automaton_A = Automaton(3, 1, 3, 0, 10, 20, false, mask_A, background_A);
  sat_automaton_A = Automaton(1, 1, 1, 0, 0, 1, false, mask_A, background_A);
//----------------------------------------------------------------------------------------Automatons for Side B
  fg_automaton_B = Automaton(2, 1, 2, 0, 0, 10, false, mask_B, background_B);
  bg_automaton_B= Automaton(4, 1, 4, 0, 0, 1, true, mask_B, background_B);
    1cbe:	str.w	r5, [r6, lr]
    1cc2:	str.w	ip, [r7]
    1cc6:	str	r4, [r6, #12]
    1cc8:	str	r4, [r6, #16]
    1cca:	str.w	fp, [r6]
    1cce:	str.w	fp, [r6, #8]
  grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
  sat_automaton_B = Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);
    1cd2:	str	r3, [r0, #8]
    1cd4:	str	r3, [r0, #20]
    1cd6:	str.w	r5, [r0, lr]
    1cda:	str.w	ip, [r9]
    1cde:	str	r4, [r0, #12]
    1ce0:	str	r4, [r0, #16]
    1ce2:	strb	r4, [r0, #24]
  init_A();
    1ce4:	bl	9ec <init_A()>
  init_B();
    1ce8:	bl	bbc <init_B()>
  synapse_A.begin();
    1cec:	ldr	r0, [pc, #144]	; (1d80 <setup+0x1d0>)
    1cee:	bl	85b8 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    1cf2:	ldr	r0, [pc, #144]	; (1d84 <setup+0x1d4>)
    1cf4:	bl	85b8 <Adafruit_NeoPixel::begin()>
  rtc_set(0);
    1cf8:	mov	r0, r4
    1cfa:	bl	98f8 <rtc_set>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1cfe:	ldr	r3, [pc, #136]	; (1d88 <setup+0x1d8>)
    1d00:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1d02:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    1d04:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1d06:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1d08:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    1d0a:	cmp	r3, r1
    1d0c:	it	eq
    1d0e:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1d10:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1d12:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1d14:	ite	eq
    1d16:	moveq	r5, #1
    1d18:	movne	r5, #0
    1d1a:	cmp	r5, #0
    1d1c:	beq.n	1d06 <setup+0x156>
    1d1e:	lsrs	r1, r3, #5
    1d20:	ldr	r3, [pc, #104]	; (1d8c <setup+0x1dc>)
  sinceBeam = 0;
  delay(1000);
    1d22:	mov.w	r0, #1000	; 0x3e8
    1d26:	orr.w	r1, r1, r2, lsl #27
    1d2a:	vmov	s15, r1
    1d2e:	vldr	d5, [pc, #32]	; 1d50 <setup+0x1a0>
    1d32:	vcvt.f64.u32	d7, s15
    1d36:	vdiv.f64	d6, d7, d5
    1d3a:	vcvt.u32.f64	s12, d6
    1d3e:	vstr	s12, [r3]
  
}
    1d42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  init_B();
  synapse_A.begin();
  synapse_B.begin();
  rtc_set(0);
  sinceBeam = 0;
  delay(1000);
    1d46:	b.w	9924 <delay>
    1d4a:	nop
    1d4c:	nop.w
    1d50:	.word	0xd2f1a9fc
    1d54:	.word	0x3ff0624d
    1d58:	.word	0x20001524
    1d5c:	.word	0x200091e8
    1d60:	.word	0x20006da0
    1d64:	.word	0x20005494
    1d68:	.word	0x20003980
    1d6c:	.word	0x20002748
    1d70:	.word	0x20007fc4
    1d74:	.word	0x2000a40c
    1d78:	.word	0x2000425c
    1d7c:	.word	0x200066b8
    1d80:	.word	0x20006d78
    1d84:	.word	0x20006d8c
    1d88:	.word	0x400d4000
    1d8c:	.word	0x2000151c
    1d90:	.word	0x200009a8
    1d94:	.word	0x20000768

00001d98 <loop>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1d98:	ldr	r3, [pc, #436]	; (1f50 <loop+0x1b8>)
  
}



void loop() {
    1d9a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d9e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1da0:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    1da2:	ldr	r1, [r3, #40]	; 0x28
    1da4:	vpush	{d8}
    1da8:	sub	sp, #32
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1daa:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1dac:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1dae:	ldr	r6, [pc, #416]	; (1f50 <loop+0x1b8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    1db0:	cmp	r3, r1
    1db2:	it	eq
    1db4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1db6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1db8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1dba:	ite	eq
    1dbc:	moveq	r5, #1
    1dbe:	movne	r5, #0
    1dc0:	cmp	r5, #0
    1dc2:	beq.n	1daa <loop+0x12>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    1dc4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    1dc6:	ldr	r5, [pc, #396]	; (1f54 <loop+0x1bc>)
    1dc8:	orr.w	r1, r1, r2, lsl #27
    1dcc:	ldr	r3, [r5, #0]
    1dce:	vmov	s15, r1
    1dd2:	vldr	d5, [pc, #372]	; 1f48 <loop+0x1b0>
    1dd6:	vcvt.f64.u32	d7, s15
    1dda:	vdiv.f64	d6, d7, d5
    1dde:	vcvt.u32.f64	s12, d6
    1de2:	vmov	r2, s12
    1de6:	subs	r3, r2, r3
    1de8:	cmp.w	r3, #800	; 0x320
    1dec:	bls.w	1f1a <loop+0x182>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1df0:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1df2:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    1df4:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1df6:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1df8:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    1dfa:	cmp	r3, r1
    1dfc:	it	eq
    1dfe:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1e00:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1e02:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1e04:	ite	eq
    1e06:	moveq	r6, #1
    1e08:	movne	r6, #0
    1e0a:	cmp	r6, #0
    1e0c:	beq.n	1df6 <loop+0x5e>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    1e0e:	lsrs	r3, r3, #5
    sinceBeam = 0;
    newBeam(&synapse_B, random(0,2), Color(random(0,360), 100, 100, HSB_MODE),random(6,50),random(1500,3000));
    1e10:	movs	r0, #0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e12:	mov.w	r9, #360	; 0x168
    1e16:	movs	r1, #2
    1e18:	orr.w	r3, r3, r2, lsl #27
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    1e1c:	mov	r7, r0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e1e:	ldr.w	r8, [pc, #328]	; 1f68 <loop+0x1d0>
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    1e22:	mov.w	sl, #1
    1e26:	vmov	s15, r3
    1e2a:	add	r6, sp, #24
    1e2c:	add	r4, sp, #16
    1e2e:	vcvt.f64.u32	d7, s15
    1e32:	vldr	d5, [pc, #276]	; 1f48 <loop+0x1b0>
    1e36:	vdiv.f64	d6, d7, d5
    1e3a:	vcvt.u32.f64	s12, d6
    1e3e:	vstr	s12, [r5]
    1e42:	bl	9ccc <random(long, long)>
    1e46:	mov	r1, r9
    1e48:	mov	r5, r0
    1e4a:	mov	r0, r7
    1e4c:	bl	9ccc <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e50:	add.w	r2, r0, #720	; 0x2d0
	HSB_color.s = s;
    1e54:	movs	r0, #100	; 0x64
    1e56:	movs	r1, #50	; 0x32
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e58:	lsrs	r3, r2, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    1e5a:	strb.w	r7, [sp, #28]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    1e5e:	strb.w	r0, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e62:	umull	lr, r3, r8, r3
	HSB_color.s = s;
	HSB_color.b = b;
    1e66:	strb.w	r0, [sp, #25]
    1e6a:	movs	r0, #6
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e6c:	lsrs	r3, r3, #2
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    1e6e:	strb.w	sl, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1e72:	mls	r3, r9, r3, r2
    1e76:	str	r3, [sp, #20]
    1e78:	bl	9ccc <random(long, long)>
    1e7c:	movw	r1, #3000	; 0xbb8
    1e80:	vmov	s16, r0
    1e84:	movw	r0, #1500	; 0x5dc
    1e88:	bl	9ccc <random(long, long)>
    1e8c:	str	r0, [sp, #8]
    1e8e:	vcvt.f32.s32	s0, s16
    1e92:	ldmia.w	r6, {r0, r1}
    1e96:	ldmia.w	r4, {r2, r3}
    1e9a:	stmia.w	sp, {r0, r1}
    1e9e:	subs	r1, r5, r7
    1ea0:	ldr	r0, [pc, #180]	; (1f58 <loop+0x1c0>)
    1ea2:	it	ne
    1ea4:	movne	r1, #1
    1ea6:	bl	f0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_A, random(0,2), Color(random(0,360), 255, 255, HSB_MODE),random(6,50),random(1500,3000));
    1eaa:	movs	r1, #2
    1eac:	mov	r0, r7
    1eae:	bl	9ccc <random(long, long)>
    1eb2:	mov	r1, r9
    1eb4:	mov	r5, r0
    1eb6:	mov	r0, r7
    1eb8:	bl	9ccc <random(long, long)>
    1ebc:	add.w	r3, r0, #720	; 0x2d0
	HSB_color.s = s;
    1ec0:	mov.w	lr, #255	; 0xff
    1ec4:	movs	r1, #50	; 0x32
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1ec6:	lsrs	r2, r3, #3
    1ec8:	movs	r0, #6
	HSB_color.s = s;
    1eca:	strb.w	lr, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1ece:	umull	r2, r8, r8, r2
	HSB_color.s = s;
	HSB_color.b = b;
    1ed2:	strb.w	lr, [sp, #25]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1ed6:	mov.w	r8, r8, lsr #2
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    1eda:	strb.w	r7, [sp, #28]
	HSB_updated = true;
    1ede:	strb.w	sl, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1ee2:	mls	r3, r9, r8, r3
    1ee6:	str	r3, [sp, #20]
    1ee8:	bl	9ccc <random(long, long)>
    1eec:	movw	r1, #3000	; 0xbb8
    1ef0:	vmov	s16, r0
    1ef4:	movw	r0, #1500	; 0x5dc
    1ef8:	bl	9ccc <random(long, long)>
    1efc:	str	r0, [sp, #8]
    1efe:	vcvt.f32.s32	s0, s16
    1f02:	ldmia.w	r6, {r0, r1}
    1f06:	ldmia.w	r4, {r2, r3}
    1f0a:	stmia.w	sp, {r0, r1}
    1f0e:	subs	r1, r5, r7
    1f10:	ldr	r0, [pc, #72]	; (1f5c <loop+0x1c4>)
    1f12:	it	ne
    1f14:	movne	r1, #1
    1f16:	bl	f0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
	}


	int ratio = 0;
	void iterate_animation() {
		if (newFrameReady) return;
    1f1a:	ldr	r0, [pc, #68]	; (1f60 <loop+0x1c8>)
    1f1c:	ldrb	r3, [r0, #20]
    1f1e:	cbz	r3, 1f3c <loop+0x1a4>
    1f20:	ldr	r0, [pc, #64]	; (1f64 <loop+0x1cc>)
    1f22:	ldrb	r3, [r0, #20]
    1f24:	cbnz	r3, 1f2a <loop+0x192>
    1f26:	bl	1288 <Screen::iterate_animation() [clone .part.12]>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    1f2a:	bl	458 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    1f2e:	add	sp, #32
    1f30:	vpop	{d8}
    1f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    1f38:	b.w	d90 <updateScreensFade()>
    1f3c:	bl	1288 <Screen::iterate_animation() [clone .part.12]>
    1f40:	b.n	1f20 <loop+0x188>
    1f42:	nop
    1f44:	nop.w
    1f48:	.word	0xd2f1a9fc
    1f4c:	.word	0x3ff0624d
    1f50:	.word	0x400d4000
    1f54:	.word	0x2000151c
    1f58:	.word	0x20006d8c
    1f5c:	.word	0x20006d78
    1f60:	.word	0x20004040
    1f64:	.word	0x20004070
    1f68:	.word	0x16c16c17
    1f6c:	.word	0x00000000

00001f70 <_GLOBAL__sub_I_low_threshold>:
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f70:	ldr	r3, [pc, #1004]	; (2360 <_GLOBAL__sub_I_low_threshold+0x3f0>)
    1f72:	movs	r2, #0
    1f74:	movs	r1, #130	; 0x82
    1f76:	mov.w	ip, #138	; 0x8a
    1f7a:	movs	r0, #132	; 0x84

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    1f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      _s = s;
      _b = b;
    1f80:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f84:	mov.w	r8, #139	; 0x8b
    1f88:	strb	r2, [r3, #0]
    1f8a:	movs	r5, #131	; 0x83
      _s = s;
      _b = b;
    1f8c:	strb.w	lr, [r3, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f90:	mov.w	lr, #106	; 0x6a
      _s = s;
    1f94:	strb	r2, [r3, #1]
      _b = b;
    1f96:	movs	r7, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f98:	strb.w	lr, [r3, #3]
    1f9c:	mov.w	r9, #143	; 0x8f
    1fa0:	strb.w	lr, [r3, #18]
      _s = s;
    1fa4:	mov.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fa8:	strb	r2, [r3, #9]
      _s = s;
    1faa:	movs	r6, #142	; 0x8e
    1fac:	strb.w	lr, [r3, #4]
      _b = b;
    1fb0:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fb4:	strb.w	lr, [r3, #19]
      _b = b;
    1fb8:	mvn.w	lr, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fbc:	strb	r2, [r3, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fbe:	mov.w	fp, #140	; 0x8c
      _s = s;
      _b = b;
    1fc2:	strb.w	lr, [r3, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fc6:	mov.w	lr, #85	; 0x55
    1fca:	strb	r2, [r3, #12]
    1fcc:	sub	sp, #12
    1fce:	strb.w	lr, [r3, #6]
      _s = s;
    1fd2:	mov.w	lr, #5
    1fd6:	strb	r2, [r3, #13]
    1fd8:	strb.w	lr, [r3, #7]
      _b = b;
    1fdc:	mvn.w	lr, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fe0:	strb	r2, [r3, #15]
      _s = s;
      _b = b;
    1fe2:	strb.w	lr, [r3, #8]
    1fe6:	mvn.w	lr, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fea:	strb	r2, [r3, #16]
      _b = b;
    1fec:	strb.w	lr, [r3, #11]
    1ff0:	mvn.w	lr, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ff4:	strb.w	r8, [r3, #30]
      _s = s;
      _b = b;
    1ff8:	strb.w	lr, [r3, #14]
    1ffc:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2000:	ldr	r4, [pc, #864]	; (2364 <_GLOBAL__sub_I_low_threshold+0x3f4>)
      _s = s;
      _b = b;
    2002:	strb.w	lr, [r3, #17]
    2006:	mvn.w	lr, #32
    200a:	strb.w	lr, [r3, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    200e:	mov.w	lr, #109	; 0x6d
    2012:	strb.w	lr, [r3, #21]
      _s = s;
    2016:	mov.w	lr, #10
    201a:	strb.w	lr, [r3, #22]
      _b = b;
    201e:	mvn.w	lr, #79	; 0x4f
    2022:	strb.w	lr, [r3, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2026:	mov.w	lr, #114	; 0x72
    202a:	strb.w	lr, [r3, #24]
      _s = s;
    202e:	mov.w	lr, #20
    2032:	strb.w	lr, [r3, #25]
      _b = b;
    2036:	mvn.w	lr, #92	; 0x5c
    203a:	strb.w	lr, [r3, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    203e:	mov.w	lr, #115	; 0x73
    2042:	strb.w	lr, [r3, #27]
      _s = s;
    2046:	mov.w	lr, #26
    204a:	strb.w	lr, [r3, #28]
      _b = b;
    204e:	mvn.w	lr, #119	; 0x77
    2052:	strb.w	lr, [r3, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2056:	mov.w	lr, #48	; 0x30
    205a:	strb.w	lr, [r3, #31]
      _b = b;
    205e:	mov.w	lr, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2062:	strb.w	r2, [r3, #57]	; 0x39
      _s = s;
      _b = b;
    2066:	strb.w	lr, [r3, #32]
    206a:	mvn.w	lr, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    206e:	strb.w	r2, [r3, #58]	; 0x3a
      _b = b;
    2072:	strb.w	lr, [r3, #50]	; 0x32
    2076:	mvn.w	lr, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    207a:	strb.w	r2, [r3, #60]	; 0x3c
      _s = s;
      _b = b;
    207e:	strb.w	lr, [r3, #53]	; 0x35
    2082:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2086:	strb.w	r2, [r3, #61]	; 0x3d
      _b = b;
    208a:	strb.w	lr, [r3, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    208e:	mvn.w	lr, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2092:	strb.w	r2, [r3, #63]	; 0x3f
      _s = s;
    2096:	strb.w	lr, [r3, #34]	; 0x22
      _b = b;
    209a:	mov.w	lr, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    209e:	strb.w	r2, [r3, #64]	; 0x40
      _b = b;
    20a2:	strb.w	lr, [r3, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20a6:	mvn.w	lr, #121	; 0x79
    20aa:	strb.w	ip, [r3, #33]	; 0x21
    20ae:	strb.w	lr, [r3, #36]	; 0x24
      _s = s;
    20b2:	mvn.w	lr, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20b6:	strb.w	ip, [r3, #54]	; 0x36
      _s = s;
    20ba:	strb.w	lr, [r3, #37]	; 0x25
      _b = b;
    20be:	mov.w	lr, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20c2:	strb.w	r1, [r3, #39]	; 0x27
      _s = s;
      _b = b;
    20c6:	strb.w	lr, [r3, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20ca:	mov.w	lr, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20ce:	strb.w	r1, [r3, #45]	; 0x2d
      _s = s;
    20d2:	strb.w	lr, [r3, #40]	; 0x28
      _b = b;
    20d6:	mvn.w	lr, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20da:	strb.w	r1, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    20de:	strb.w	lr, [r3, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20e2:	mvn.w	lr, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20e6:	strb.w	r5, [r3, #42]	; 0x2a
      _s = s;
    20ea:	strb.w	lr, [r3, #43]	; 0x2b
      _b = b;
    20ee:	mvn.w	lr, #45	; 0x2d
    20f2:	strb.w	lr, [r3, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20f6:	mvn.w	lr, #11
    20fa:	strb.w	lr, [r3, #46]	; 0x2e
      _b = b;
    20fe:	mvn.w	lr, #33	; 0x21
    2102:	strb.w	lr, [r3, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2106:	mvn.w	lr, #96	; 0x60
    210a:	strb.w	lr, [r3, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    210e:	mvn.w	lr, #120	; 0x78
    2112:	strb.w	lr, [r3, #51]	; 0x33
      _s = s;
    2116:	mov.w	lr, #51	; 0x33
    211a:	strb.w	lr, [r3, #52]	; 0x34
    211e:	mov.w	lr, #8
    2122:	strb.w	lr, [r3, #55]	; 0x37
      _b = b;
    2126:	mvn.w	lr, #9
    212a:	strb.w	lr, [r3, #56]	; 0x38
    212e:	mvn.w	lr, #4
    2132:	strb.w	r7, [r3, #62]	; 0x3e
    2136:	strb.w	lr, [r3, #74]	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    213a:	mov.w	lr, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    213e:	strb.w	r2, [r3, #66]	; 0x42
      _s = s;
    2142:	strb.w	lr, [r3, #76]	; 0x4c
      _b = b;
    2146:	mov.w	lr, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    214a:	strb.w	r2, [r3, #67]	; 0x43
      _b = b;
    214e:	strb.w	lr, [r3, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2152:	mov.w	lr, #60	; 0x3c
    2156:	strb.w	r2, [r3, #69]	; 0x45
    215a:	strb.w	lr, [r3, #90]	; 0x5a
      _s = s;
    215e:	mvn.w	lr, #39	; 0x27
    2162:	strb.w	r2, [r3, #70]	; 0x46
    2166:	strb.w	lr, [r3, #97]	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    216a:	mov.w	lr, #95	; 0x5f
    216e:	strb.w	r2, [r3, #72]	; 0x48
    2172:	strb.w	lr, [r3, #75]	; 0x4b
      _s = s;
      _b = b;
    2176:	mvn.w	lr, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    217a:	strb.w	r2, [r3, #73]	; 0x49
      _b = b;
    217e:	strb.w	lr, [r3, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2182:	mvn.w	lr, #118	; 0x76
      _b = b;
    2186:	strb.w	r7, [r3, #65]	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    218a:	strb.w	lr, [r3, #79]	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    218e:	mov.w	lr, #94	; 0x5e
      _s = s;
      _b = b;
    2192:	strb.w	r7, [r3, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2196:	strb.w	lr, [r3, #81]	; 0x51
      _s = s;
    219a:	mov.w	lr, #11
      _b = b;
    219e:	strb.w	r7, [r3, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21a2:	strb.w	lr, [r3, #82]	; 0x52
      _b = b;
    21a6:	mvn.w	lr, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21aa:	strb.w	r8, [r3, #78]	; 0x4e
      _s = s;
      _b = b;
    21ae:	strb.w	lr, [r3, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21b2:	mov.w	lr, #96	; 0x60
    21b6:	strb.w	lr, [r3, #84]	; 0x54
      _s = s;
    21ba:	mov.w	lr, #14
    21be:	strb.w	lr, [r3, #85]	; 0x55
      _b = b;
    21c2:	mvn.w	lr, #58	; 0x3a
    21c6:	strb.w	lr, [r3, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21ca:	mov.w	lr, #46	; 0x2e
    21ce:	strb.w	lr, [r3, #87]	; 0x57
      _s = s;
    21d2:	mov.w	lr, #37	; 0x25
    21d6:	strb.w	lr, [r3, #88]	; 0x58
      _b = b;
    21da:	mvn.w	lr, #99	; 0x63
    21de:	strb.w	lr, [r3, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21e2:	mov.w	lr, #121	; 0x79
    21e6:	strb.w	lr, [r3, #91]	; 0x5b
      _b = b;
    21ea:	mov.w	lr, #113	; 0x71
    21ee:	strb.w	lr, [r3, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21f2:	mov.w	lr, #105	; 0x69
    21f6:	strb.w	lr, [r3, #93]	; 0x5d
      _s = s;
    21fa:	mvn.w	lr, #69	; 0x45
    21fe:	strb.w	lr, [r3, #94]	; 0x5e
      _b = b;
    2202:	mov.w	lr, #101	; 0x65
    2206:	strb.w	lr, [r3, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    220a:	mov.w	lr, #118	; 0x76
    220e:	strb.w	lr, [r3, #96]	; 0x60
      _s = s;
      _b = b;
    2212:	mov.w	lr, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2216:	strb.w	r5, [r3, #114]	; 0x72
      _s = s;
      _b = b;
    221a:	strb.w	lr, [r3, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    221e:	mvn.w	lr, #43	; 0x2b
    2222:	strb.w	r1, [r3, #117]	; 0x75
    2226:	strb.w	lr, [r3, #99]	; 0x63
      _s = s;
    222a:	mov.w	lr, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    222e:	strb.w	r1, [r3, #120]	; 0x78
      _s = s;
    2232:	strb.w	lr, [r3, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2236:	mvn.w	lr, #121	; 0x79
    223a:	strb.w	r1, [r3, #123]	; 0x7b
    223e:	strb.w	lr, [r3, #105]	; 0x69
    2242:	mvn.w	lr, #122	; 0x7a
    2246:	strb.w	r5, [r3, #126]	; 0x7e
    224a:	strb.w	lr, [r3, #111]	; 0x6f
      _s = s;
    224e:	mov.w	lr, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2252:	strb.w	r0, [r3, #108]	; 0x6c
      _s = s;
    2256:	strb.w	lr, [r3, #112]	; 0x70
    225a:	mvn.w	lr, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    225e:	strb.w	r8, [r3, #102]	; 0x66
      _s = s;
    2262:	strb.w	lr, [r3, #115]	; 0x73
      _b = b;
    2266:	mvn.w	lr, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    226a:	strb.w	r7, [r3, #109]	; 0x6d
      _b = b;
    226e:	strb.w	lr, [r3, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2272:	mvn.w	lr, #16
    2276:	strb.w	lr, [r3, #118]	; 0x76
      _b = b;
    227a:	mov.w	lr, #32
    227e:	strb.w	lr, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2282:	mvn.w	lr, #104	; 0x68
    2286:	strb.w	lr, [r3, #103]	; 0x67
      _b = b;
    228a:	mov.w	lr, #64	; 0x40
    228e:	strb.w	lr, [r3, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2292:	mvn.w	lr, #5
    2296:	strb.w	lr, [r3, #106]	; 0x6a
      _b = b;
    229a:	mvn.w	lr, #88	; 0x58
    229e:	strb.w	lr, [r3, #107]	; 0x6b
    22a2:	mvn.w	lr, #76	; 0x4c
    22a6:	strb.w	lr, [r3, #110]	; 0x6e
    22aa:	mvn.w	lr, #80	; 0x50
    22ae:	strb.w	lr, [r3, #113]	; 0x71
    22b2:	mvn.w	lr, #29
    22b6:	strb.w	lr, [r3, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22ba:	mvn.w	lr, #37	; 0x25
    22be:	strb.w	lr, [r3, #121]	; 0x79
      _b = b;
    22c2:	strb.w	lr, [r3, #125]	; 0x7d
    22c6:	mvn.w	lr, #30
    22ca:	strb.w	lr, [r3, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22ce:	mvn.w	lr, #59	; 0x3b
    22d2:	strb.w	lr, [r3, #124]	; 0x7c
    22d6:	mov.w	lr, #87	; 0x57
    22da:	strb.w	lr, [r3, #127]	; 0x7f
      _b = b;
    22de:	mvn.w	lr, #52	; 0x34
    22e2:	strb.w	lr, [r3, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22e6:	mvn.w	lr, #107	; 0x6b
    22ea:	strb.w	lr, [r3, #129]	; 0x81
      _s = s;
    22ee:	mov.w	lr, #4
    22f2:	strb.w	lr, [r3, #130]	; 0x82
      _b = b;
    22f6:	mvn.w	lr, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22fa:	strb.w	r2, [r3, #132]	; 0x84
      _s = s;
      _b = b;
    22fe:	strb.w	lr, [r3, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2302:	mov.w	lr, #113	; 0x71
      _s = s;
    2306:	strb.w	r2, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    230a:	strb.w	lr, [r3, #144]	; 0x90
      _s = s;
      _b = b;
    230e:	mvn.w	lr, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2312:	strb.w	r2, [r3, #135]	; 0x87
      _s = s;
      _b = b;
    2316:	strb.w	lr, [r3, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    231a:	mov.w	lr, #51	; 0x33
      _s = s;
    231e:	strb.w	r2, [r3, #136]	; 0x88
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2322:	strb.w	lr, [r3, #147]	; 0x93
      _s = s;
    2326:	mov.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    232a:	strb.w	r2, [r3, #138]	; 0x8a
      _s = s;
    232e:	strb.w	lr, [r3, #148]	; 0x94
      _b = b;
    2332:	mvn.w	lr, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2336:	strb.w	r2, [r3, #139]	; 0x8b
      _b = b;
    233a:	strb.w	lr, [r3, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    233e:	mov.w	lr, #121	; 0x79
    2342:	strb.w	r2, [r3, #141]	; 0x8d
    2346:	strb.w	lr, [r3, #150]	; 0x96
      _s = s;
    234a:	mov.w	lr, #60	; 0x3c
    234e:	strb.w	r2, [r3, #142]	; 0x8e
    2352:	strb.w	lr, [r3, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2356:	mov.w	lr, #32
      _s = s;
      _b = b;
    235a:	strb.w	r7, [r3, #134]	; 0x86
    235e:	b.n	2368 <_GLOBAL__sub_I_low_threshold+0x3f8>
    2360:	.word	0x20003980
    2364:	.word	0x200066b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2368:	strb.w	lr, [r3, #153]	; 0x99
      _s = s;
    236c:	mvn.w	lr, #67	; 0x43
      _b = b;
    2370:	strb.w	r7, [r3, #137]	; 0x89
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2374:	strb.w	lr, [r3, #160]	; 0xa0
      _b = b;
    2378:	mvn.w	lr, #2
    237c:	strb.w	lr, [r3, #140]	; 0x8c
    2380:	strb.w	lr, [r3, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2384:	mov.w	lr, #3
    2388:	strb.w	lr, [r3, #145]	; 0x91
      _b = b;
    238c:	mov.w	lr, #123	; 0x7b
    2390:	strb.w	lr, [r3, #152]	; 0x98
    2394:	strb.w	lr, [r3, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2398:	mvn.w	lr, #82	; 0x52
    239c:	strb.w	lr, [r3, #154]	; 0x9a
      _b = b;
    23a0:	mvn.w	lr, #105	; 0x69
    23a4:	strb.w	lr, [r3, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23a8:	mov.w	lr, #54	; 0x36
    23ac:	strb.w	lr, [r3, #156]	; 0x9c
      _s = s;
    23b0:	mov.w	lr, #97	; 0x61
    23b4:	strb.w	lr, [r3, #157]	; 0x9d
      _b = b;
    23b8:	mov.w	lr, #120	; 0x78
    23bc:	strb.w	lr, [r3, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23c0:	mov.w	lr, #25
    23c4:	strb.w	lr, [r3, #159]	; 0x9f
    23c8:	mov.w	lr, #28
    23cc:	strb.w	lr, [r3, #162]	; 0xa2
      _s = s;
    23d0:	mvn.w	lr, #93	; 0x5d
    23d4:	strb.w	lr, [r3, #163]	; 0xa3
      _b = b;
    23d8:	mov.w	lr, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23dc:	strb.w	r0, [r3, #183]	; 0xb7
      _s = s;
      _b = b;
    23e0:	strb.w	lr, [r3, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23e4:	mov.w	lr, #97	; 0x61
      _s = s;
    23e8:	strb.w	ip, [r3, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23ec:	strb.w	lr, [r3, #165]	; 0xa5
      _s = s;
      _b = b;
    23f0:	mvn.w	lr, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23f4:	strb.w	r1, [r3, #186]	; 0xba
      _s = s;
      _b = b;
    23f8:	strb.w	lr, [r3, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23fc:	mov.w	lr, #121	; 0x79
    2400:	strb.w	r1, [r3, #189]	; 0xbd
    2404:	strb.w	lr, [r3, #168]	; 0xa8
      _s = s;
    2408:	mvn.w	lr, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    240c:	strb.w	r1, [r3, #192]	; 0xc0
      _s = s;
    2410:	strb.w	lr, [r3, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2414:	mvn.w	lr, #39	; 0x27
    2418:	strb.w	r9, [r3, #174]	; 0xae
    241c:	strb.w	lr, [r3, #171]	; 0xab
      _s = s;
    2420:	mvn.w	lr, #104	; 0x68
    2424:	strb.w	lr, [r3, #175]	; 0xaf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2428:	mvn.w	lr, #118	; 0x76
    242c:	strb.w	lr, [r3, #177]	; 0xb1
      _s = s;
    2430:	mvn.w	lr, #32
    2434:	strb.w	lr, [r3, #178]	; 0xb2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2438:	mvn.w	lr, #119	; 0x77
    243c:	strb.w	lr, [r3, #180]	; 0xb4
      _s = s;
    2440:	mvn.w	lr, #22
    2444:	strb.w	lr, [r3, #181]	; 0xb5
      _b = b;
    2448:	mov.w	lr, #103	; 0x67
    244c:	strb.w	lr, [r3, #185]	; 0xb9
    2450:	mvn.w	lr, #36	; 0x24
    2454:	strb.w	lr, [r3, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2458:	mvn.w	lr, #65	; 0x41
    245c:	strb.w	lr, [r3, #190]	; 0xbe
      _b = b;
    2460:	mvn.w	lr, #32
    2464:	strb.w	lr, [r3, #191]	; 0xbf
    2468:	mvn.w	lr, #28
    246c:	strb.w	lr, [r3, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2470:	mvn.w	lr, #122	; 0x7a
    2474:	strb.w	lr, [r3, #195]	; 0xc3
      _s = s;
    2478:	mvn.w	lr, #81	; 0x51
    247c:	strb.w	lr, [r3, #166]	; 0xa6
      _b = b;
    2480:	mvn.w	lr, #101	; 0x65
    2484:	strb.w	lr, [r3, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2488:	mov.w	lr, #93	; 0x5d
    248c:	strb.w	lr, [r3, #172]	; 0xac
      _b = b;
    2490:	mov.w	lr, #30
    2494:	strb.w	lr, [r3, #173]	; 0xad
    2498:	mov.w	lr, #59	; 0x3b
    249c:	strb.w	lr, [r3, #176]	; 0xb0
    24a0:	strb.w	lr, [r3, #182]	; 0xb6
    24a4:	mov.w	lr, #57	; 0x39
    24a8:	strb.w	lr, [r3, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24ac:	strb.w	lr, [r3, #187]	; 0xbb
    24b0:	mvn.w	lr, #51	; 0x33
    24b4:	strb.w	lr, [r3, #193]	; 0xc1
    24b8:	mov.w	lr, #90	; 0x5a
    24bc:	strb.w	lr, [r3, #196]	; 0xc4
      _b = b;
    24c0:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24c4:	strb.w	r9, [r3, #198]	; 0xc6
      _s = s;
      _b = b;
    24c8:	strb.w	lr, [r3, #197]	; 0xc5
    24cc:	mvn.w	lr, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24d0:	strb.w	r2, [r3, #210]	; 0xd2
      _s = s;
      _b = b;
    24d4:	strb.w	lr, [r3, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24d8:	mvn.w	lr, #96	; 0x60
      _s = s;
    24dc:	strb.w	r2, [r3, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24e0:	strb.w	lr, [r3, #201]	; 0xc9
    24e4:	mvn.w	lr, #105	; 0x69
    24e8:	strb.w	r2, [r3, #213]	; 0xd5
    24ec:	strb.w	lr, [r3, #204]	; 0xcc
      _s = s;
    24f0:	mov.w	lr, #26
    24f4:	strb.w	r2, [r3, #214]	; 0xd6
    24f8:	strb.w	lr, [r3, #205]	; 0xcd
      _b = b;
    24fc:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2500:	strb.w	r6, [r3, #226]	; 0xe2
      _b = b;
    2504:	strb.w	lr, [r3, #209]	; 0xd1
    2508:	mvn.w	lr, #2
    250c:	strb.w	lr, [r3, #212]	; 0xd4
    2510:	strb.w	lr, [r3, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2514:	mov.w	lr, #106	; 0x6a
    2518:	strb.w	lr, [r3, #216]	; 0xd8
      _s = s;
      _b = b;
    251c:	mvn.w	lr, #29
    2520:	strb.w	lr, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2524:	mvn.w	lr, #82	; 0x52
    2528:	strb.w	lr, [r3, #223]	; 0xdf
      _b = b;
    252c:	mvn.w	lr, #36	; 0x24
    2530:	strb.w	lr, [r3, #224]	; 0xe0
    2534:	mvn.w	lr, #15
    2538:	strb.w	lr, [r3, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    253c:	mvn.w	lr, #62	; 0x3e
    2540:	strb.w	lr, [r3, #229]	; 0xe5
    2544:	mov.w	lr, #44	; 0x2c
    2548:	strb.w	lr, [r3, #199]	; 0xc7
    254c:	mov.w	lr, #35	; 0x23
    2550:	strb.w	lr, [r3, #202]	; 0xca
      _b = b;
    2554:	mvn.w	lr, #74	; 0x4a
    2558:	strb.w	lr, [r3, #203]	; 0xcb
    255c:	mvn.w	lr, #66	; 0x42
    2560:	strb.w	lr, [r3, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2564:	mov.w	lr, #127	; 0x7f
    2568:	strb.w	lr, [r3, #207]	; 0xcf
      _s = s;
    256c:	mov.w	lr, #1
    2570:	strb.w	lr, [r3, #208]	; 0xd0
    2574:	mov.w	lr, #66	; 0x42
    2578:	strb.w	lr, [r3, #217]	; 0xd9
      _b = b;
    257c:	mvn.w	lr, #110	; 0x6e
    2580:	strb.w	lr, [r3, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2584:	mov.w	lr, #102	; 0x66
    2588:	strb.w	lr, [r3, #219]	; 0xdb
      _s = s;
    258c:	mov.w	lr, #72	; 0x48
    2590:	strb.w	lr, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2594:	mov.w	lr, #31
    2598:	strb.w	lr, [r3, #222]	; 0xde
    259c:	mov.w	lr, #33	; 0x21
    25a0:	strb.w	lr, [r3, #225]	; 0xe1
    25a4:	mov.w	lr, #29
    25a8:	strb.w	lr, [r3, #228]	; 0xe4
      _s = s;
      _b = b;
    25ac:	mvn.w	lr, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25b0:	strb.w	r6, [r3, #235]	; 0xeb
      _b = b;
    25b4:	strb.w	lr, [r3, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25b8:	mvn.w	lr, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25bc:	strb.w	r1, [r3, #246]	; 0xf6
      _s = s;
    25c0:	strb.w	lr, [r3, #232]	; 0xe8
      _b = b;
    25c4:	mvn.w	lr, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25c8:	strb.w	ip, [r3, #249]	; 0xf9
      _s = s;
      _b = b;
    25cc:	strb.w	lr, [r3, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25d0:	mov.w	lr, #77	; 0x4d
    25d4:	strb.w	r0, [r3, #258]	; 0x102
    25d8:	strb.w	lr, [r3, #237]	; 0xed
      _s = s;
    25dc:	mov.w	lr, #73	; 0x49
    25e0:	strb.w	lr, [r3, #241]	; 0xf1
      _b = b;
    25e4:	mvn.w	lr, #74	; 0x4a
    25e8:	strb.w	lr, [r3, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25ec:	mvn.w	lr, #43	; 0x2b
    25f0:	strb.w	lr, [r3, #243]	; 0xf3
      _s = s;
    25f4:	mov.w	lr, #87	; 0x57
    25f8:	strb.w	lr, [r3, #244]	; 0xf4
      _b = b;
    25fc:	mov.w	lr, #32
    2600:	strb.w	lr, [r3, #245]	; 0xf5
    2604:	mov.w	lr, #90	; 0x5a
    2608:	strb.w	lr, [r3, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    260c:	mvn.w	lr, #120	; 0x78
    2610:	strb.w	lr, [r3, #252]	; 0xfc
    2614:	mvn.w	lr, #118	; 0x76
    2618:	strb.w	lr, [r3, #255]	; 0xff
      _s = s;
    261c:	mvn.w	lr, #30
    2620:	strb.w	lr, [r3, #256]	; 0x100
      _b = b;
    2624:	mov.w	lr, #51	; 0x33
    2628:	strb.w	lr, [r3, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    262c:	mvn.w	lr, #122	; 0x7a
    2630:	strb.w	lr, [r3, #261]	; 0x105
      _s = s;
    2634:	mov.w	lr, #48	; 0x30
    2638:	strb.w	lr, [r3, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    263c:	mov.w	lr, #22
    2640:	strb.w	lr, [r3, #231]	; 0xe7
    2644:	mov.w	lr, #55	; 0x37
    2648:	strb.w	lr, [r3, #234]	; 0xea
      _s = s;
      _b = b;
    264c:	mvn.w	lr, #85	; 0x55
    2650:	strb.w	lr, [r3, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2654:	strb.w	lr, [r3, #238]	; 0xee
      _b = b;
    2658:	mvn.w	lr, #86	; 0x56
    265c:	strb.w	lr, [r3, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2660:	mov.w	lr, #112	; 0x70
    2664:	strb.w	lr, [r3, #240]	; 0xf0
      _s = s;
    2668:	mov.w	lr, #34	; 0x22
    266c:	strb.w	lr, [r3, #247]	; 0xf7
      _b = b;
    2670:	mov.w	lr, #110	; 0x6e
    2674:	strb.w	lr, [r3, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2678:	mvn.w	lr, #108	; 0x6c
    267c:	strb.w	lr, [r3, #250]	; 0xfa
    2680:	mvn.w	lr, #18
    2684:	strb.w	lr, [r3, #253]	; 0xfd
      _b = b;
    2688:	mov.w	lr, #71	; 0x47
    268c:	strb.w	lr, [r3, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2690:	mov.w	lr, #69	; 0x45
    2694:	strb.w	lr, [r3, #259]	; 0x103
      _b = b;
    2698:	mov.w	lr, #99	; 0x63
    269c:	strb.w	lr, [r3, #260]	; 0x104
    26a0:	mvn.w	lr, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26a4:	strb.w	r5, [r3, #279]	; 0x117
      _s = s;
      _b = b;
    26a8:	strb.w	lr, [r3, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26ac:	mvn.w	lr, #119	; 0x77
    26b0:	strb.w	r0, [r3, #282]	; 0x11a
    26b4:	strb.w	lr, [r3, #264]	; 0x108
      _s = s;
    26b8:	mov.w	lr, #55	; 0x37
    26bc:	strb.w	lr, [r3, #265]	; 0x109
      _b = b;
    26c0:	mvn.w	lr, #24
    26c4:	strb.w	lr, [r3, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26c8:	mvn.w	lr, #120	; 0x78
    26cc:	strb.w	lr, [r3, #267]	; 0x10b
      _s = s;
      _b = b;
    26d0:	mvn.w	lr, #18
    26d4:	strb.w	lr, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26d8:	mov.w	lr, #69	; 0x45
    26dc:	strb.w	lr, [r3, #271]	; 0x10f
    26e0:	mov.w	lr, #72	; 0x48
    26e4:	strb.w	lr, [r3, #274]	; 0x112
      _b = b;
    26e8:	mvn.w	lr, #52	; 0x34
    26ec:	strb.w	lr, [r3, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26f0:	mov.w	lr, #35	; 0x23
    26f4:	strb.w	lr, [r3, #277]	; 0x115
      _b = b;
    26f8:	mvn.w	lr, #46	; 0x2e
    26fc:	strb.w	lr, [r3, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2700:	mov.w	lr, #66	; 0x42
    2704:	strb.w	lr, [r3, #280]	; 0x118
      _b = b;
    2708:	mvn.w	lr, #33	; 0x21
    270c:	strb.w	lr, [r3, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2710:	mov.w	lr, #59	; 0x3b
    2714:	strb.w	lr, [r3, #283]	; 0x11b
      _b = b;
    2718:	mvn.w	lr, #22
    271c:	strb.w	lr, [r3, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2720:	mvn.w	lr, #111	; 0x6f
    2724:	strb.w	lr, [r3, #285]	; 0x11d
      _s = s;
    2728:	mov.w	lr, #5
    272c:	strb.w	lr, [r3, #286]	; 0x11e
      _b = b;
    2730:	mvn.w	lr, #9
    2734:	strb.w	lr, [r3, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2738:	mvn.w	lr, #32
    273c:	strb.w	lr, [r3, #288]	; 0x120
    2740:	mov.w	lr, #77	; 0x4d
    2744:	strb.w	lr, [r3, #291]	; 0x123
      _s = s;
    2748:	mov.w	lr, #59	; 0x3b
    274c:	strb.w	lr, [r3, #292]	; 0x124
      _b = b;
    2750:	mvn.w	lr, #49	; 0x31
    2754:	strb.w	lr, [r3, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2758:	mov.w	lr, #34	; 0x22
    275c:	strb.w	lr, [r3, #294]	; 0x126
      _s = s;
    2760:	mov.w	lr, #17
    2764:	strb.w	lr, [r3, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2768:	mvn.w	lr, #109	; 0x6d
    276c:	strb.w	lr, [r3, #270]	; 0x10e
    2770:	strb.w	lr, [r3, #273]	; 0x111
      _s = s;
      _b = b;
    2774:	mvn.w	lr, #54	; 0x36
    2778:	strb.w	lr, [r3, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    277c:	mvn.w	lr, #106	; 0x6a
    2780:	strb.w	lr, [r3, #276]	; 0x114
      _s = s;
    2784:	mov.w	lr, #65	; 0x41
    2788:	strb.w	lr, [r3, #289]	; 0x121
      _b = b;
    278c:	mov.w	lr, #58	; 0x3a
    2790:	strb.w	lr, [r3, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2794:	mvn.w	lr, #40	; 0x28
    2798:	strb.w	lr, [r3, #295]	; 0x127
      _b = b;
    279c:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27a0:	strb.w	r9, [r3, #298]	; 0x12a
      _b = b;
    27a4:	strb.w	lr, [r3, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27a8:	mov.w	lr, #31
    27ac:	strb.w	r1, [r3, #321]	; 0x141
    27b0:	strb.w	lr, [r3, #297]	; 0x129
    27b4:	mov.w	lr, #28
    27b8:	strb.w	r0, [r3, #324]	; 0x144
    27bc:	strb.w	lr, [r3, #300]	; 0x12c
      _s = s;
    27c0:	mvn.w	lr, #59	; 0x3b
      _b = b;
    27c4:	strb.w	r9, [r3, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27c8:	strb.w	lr, [r3, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27cc:	mov.w	lr, #20
    27d0:	strb.w	lr, [r3, #303]	; 0x12f
      _s = s;
    27d4:	mvn.w	lr, #120	; 0x78
    27d8:	strb.w	lr, [r3, #304]	; 0x130
      _b = b;
    27dc:	mvn.w	lr, #54	; 0x36
    27e0:	strb.w	lr, [r3, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27e4:	mov.w	lr, #29
    27e8:	strb.w	lr, [r3, #306]	; 0x132
      _s = s;
    27ec:	mvn.w	lr, #96	; 0x60
    27f0:	strb.w	lr, [r3, #307]	; 0x133
      _b = b;
    27f4:	mvn.w	lr, #62	; 0x3e
    27f8:	strb.w	lr, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27fc:	mov.w	lr, #112	; 0x70
    2800:	strb.w	lr, [r3, #312]	; 0x138
      _s = s;
    2804:	mov.w	lr, #48	; 0x30
    2808:	strb.w	lr, [r3, #313]	; 0x139
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    280c:	mov.w	lr, #123	; 0x7b
    2810:	strb.w	lr, [r3, #315]	; 0x13b
      _s = s;
    2814:	mov.w	lr, #22
    2818:	strb.w	lr, [r3, #316]	; 0x13c
      _b = b;
    281c:	mvn.w	lr, #120	; 0x78
    2820:	strb.w	lr, [r3, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2824:	mov.w	lr, #123	; 0x7b
    2828:	strb.w	lr, [r3, #318]	; 0x13e
      _s = s;
    282c:	mov.w	lr, #22
    2830:	strb.w	lr, [r3, #319]	; 0x13f
      _b = b;
    2834:	mvn.w	lr, #27
    2838:	strb.w	lr, [r3, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    283c:	mvn.w	lr, #4
    2840:	strb.w	lr, [r3, #325]	; 0x145
    2844:	mov.w	lr, #115	; 0x73
    2848:	strb.w	lr, [r3, #328]	; 0x148
      _b = b;
    284c:	mvn.w	lr, #31
    2850:	strb.w	lr, [r3, #299]	; 0x12b
    2854:	mvn.w	lr, #72	; 0x48
    2858:	strb.w	lr, [r3, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    285c:	mov.w	lr, #88	; 0x58
    2860:	strb.w	lr, [r3, #309]	; 0x135
      _s = s;
    2864:	mov.w	lr, #61	; 0x3d
    2868:	strb.w	lr, [r3, #310]	; 0x136
    286c:	strb.w	lr, [r3, #322]	; 0x142
      _b = b;
    2870:	mvn.w	lr, #61	; 0x3d
    2874:	strb.w	lr, [r3, #311]	; 0x137
    2878:	mvn.w	lr, #78	; 0x4e
    287c:	strb.w	lr, [r3, #314]	; 0x13a
    2880:	mvn.w	lr, #73	; 0x49
    2884:	strb.w	lr, [r3, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2888:	mov.w	lr, #125	; 0x7d
    288c:	strb.w	lr, [r3, #327]	; 0x147
      _s = s;
      _b = b;
    2890:	mvn.w	lr, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2894:	strb.w	r0, [r3, #333]	; 0x14d
      _s = s;
      _b = b;
    2898:	strb.w	lr, [r3, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    289c:	mov.w	lr, #127	; 0x7f
    28a0:	strb.w	r9, [r3, #339]	; 0x153
    28a4:	strb.w	lr, [r3, #330]	; 0x14a
      _s = s;
    28a8:	mov.w	lr, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28ac:	strb.w	r0, [r3, #351]	; 0x15f
      _s = s;
    28b0:	strb.w	lr, [r3, #331]	; 0x14b
      _b = b;
    28b4:	mvn.w	lr, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28b8:	strb.w	r5, [r3, #354]	; 0x162
      _s = s;
      _b = b;
    28bc:	strb.w	lr, [r3, #332]	; 0x14c
    28c0:	mvn.w	lr, #118	; 0x76
    28c4:	strb.w	lr, [r3, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28c8:	mvn.w	lr, #62	; 0x3e
    28cc:	strb.w	lr, [r3, #337]	; 0x151
      _b = b;
    28d0:	mov.w	lr, #121	; 0x79
    28d4:	strb.w	lr, [r3, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28d8:	mov.w	lr, #115	; 0x73
    28dc:	strb.w	lr, [r3, #340]	; 0x154
      _b = b;
    28e0:	mvn.w	lr, #102	; 0x66
    28e4:	strb.w	lr, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28e8:	mvn.w	lr, #107	; 0x6b
    28ec:	strb.w	lr, [r3, #342]	; 0x156
      _s = s;
    28f0:	mov.w	lr, #94	; 0x5e
    28f4:	strb.w	lr, [r3, #343]	; 0x157
      _b = b;
    28f8:	mvn.w	lr, #72	; 0x48
    28fc:	strb.w	lr, [r3, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2900:	mvn.w	lr, #100	; 0x64
    2904:	strb.w	lr, [r3, #345]	; 0x159
      _s = s;
      _b = b;
    2908:	mvn.w	lr, #74	; 0x4a
    290c:	strb.w	lr, [r3, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2910:	mvn.w	lr, #122	; 0x7a
    2914:	strb.w	lr, [r3, #348]	; 0x15c
      _s = s;
    2918:	mov.w	lr, #85	; 0x55
    291c:	strb.w	lr, [r3, #352]	; 0x160
    2920:	mvn.w	lr, #79	; 0x4f
    2924:	strb.w	lr, [r3, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2928:	mvn.w	lr, #122	; 0x7a
    292c:	strb.w	lr, [r3, #357]	; 0x165
    2930:	mvn.w	lr, #37	; 0x25
    2934:	strb.w	lr, [r3, #360]	; 0x168
      _s = s;
    2938:	mov.w	lr, #74	; 0x4a
    293c:	strb.w	lr, [r3, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2940:	mvn.w	lr, #114	; 0x72
    2944:	strb.w	lr, [r3, #336]	; 0x150
      _s = s;
    2948:	mov.w	lr, #45	; 0x2d
    294c:	strb.w	lr, [r3, #346]	; 0x15a
    2950:	mov.w	lr, #41	; 0x29
    2954:	strb.w	lr, [r3, #349]	; 0x15d
      _b = b;
    2958:	mvn.w	lr, #12
    295c:	strb.w	lr, [r3, #350]	; 0x15e
    2960:	mvn.w	lr, #13
    2964:	strb.w	lr, [r3, #353]	; 0x161
    2968:	mvn.w	lr, #23
    296c:	strb.w	lr, [r3, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2970:	mvn.w	lr, #63	; 0x3f
    2974:	strb.w	lr, [r3, #358]	; 0x166
      _b = b;
    2978:	strb.w	lr, [r3, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    297c:	mov.w	lr, #76	; 0x4c
    2980:	strb.w	lr, [r3, #361]	; 0x169
      _b = b;
    2984:	mov.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2988:	strb.w	r0, [r3, #393]	; 0x189
      _s = s;
      _b = b;
    298c:	strb.w	lr, [r3, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2990:	mov.w	lr, #101	; 0x65
    2994:	strb.w	lr, [r3, #363]	; 0x16b
      _s = s;
      _b = b;
    2998:	mvn.w	lr, #79	; 0x4f
    299c:	strb.w	lr, [r3, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29a0:	mov.w	lr, #22
    29a4:	strb.w	lr, [r3, #369]	; 0x171
      _s = s;
    29a8:	mvn.w	lr, #32
    29ac:	strb.w	lr, [r3, #370]	; 0x172
      _b = b;
    29b0:	mvn.w	lr, #99	; 0x63
    29b4:	strb.w	lr, [r3, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29b8:	mvn.w	lr, #12
    29bc:	strb.w	lr, [r3, #373]	; 0x175
      _b = b;
    29c0:	mvn.w	lr, #71	; 0x47
    29c4:	strb.w	lr, [r3, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29c8:	mov.w	lr, #24
    29cc:	strb.w	lr, [r3, #375]	; 0x177
      _s = s;
    29d0:	mvn.w	lr, #4
    29d4:	strb.w	lr, [r3, #376]	; 0x178
      _b = b;
    29d8:	mvn.w	lr, #46	; 0x2e
    29dc:	strb.w	lr, [r3, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29e0:	mov.w	lr, #54	; 0x36
    29e4:	strb.w	lr, [r3, #378]	; 0x17a
      _s = s;
      _b = b;
    29e8:	mvn.w	lr, #108	; 0x6c
    29ec:	strb.w	lr, [r3, #380]	; 0x17c
    29f0:	mov.w	lr, #127	; 0x7f
    29f4:	strb.w	lr, [r3, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29f8:	mov.w	lr, #95	; 0x5f
    29fc:	strb.w	lr, [r3, #384]	; 0x180
      _s = s;
    2a00:	mov.w	lr, #87	; 0x57
    2a04:	strb.w	lr, [r3, #385]	; 0x181
      _b = b;
    2a08:	mov.w	lr, #93	; 0x5d
    2a0c:	strb.w	lr, [r3, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a10:	mov.w	lr, #123	; 0x7b
    2a14:	strb.w	lr, [r3, #387]	; 0x183
      _s = s;
    2a18:	mov.w	lr, #105	; 0x69
    2a1c:	strb.w	lr, [r3, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a20:	mov.w	lr, #127	; 0x7f
    2a24:	strb.w	lr, [r3, #390]	; 0x186
      _s = s;
    2a28:	mov.w	lr, #47	; 0x2f
    2a2c:	strb.w	lr, [r3, #391]	; 0x187
      _b = b;
    2a30:	mvn.w	lr, #109	; 0x6d
    2a34:	strb.w	lr, [r3, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a38:	mvn.w	lr, #83	; 0x53
    2a3c:	strb.w	lr, [r3, #394]	; 0x18a
    2a40:	mov.w	lr, #92	; 0x5c
    2a44:	strb.w	lr, [r3, #364]	; 0x16c
      _b = b;
    2a48:	mvn.w	lr, #95	; 0x5f
    2a4c:	strb.w	lr, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a50:	mov.w	lr, #40	; 0x28
    2a54:	strb.w	lr, [r3, #366]	; 0x16e
      _s = s;
    2a58:	mvn.w	lr, #89	; 0x59
    2a5c:	strb.w	lr, [r3, #367]	; 0x16f
    2a60:	strb.w	lr, [r3, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a64:	mov.w	lr, #21
    2a68:	strb.w	lr, [r3, #372]	; 0x174
    2a6c:	mov.w	lr, #111	; 0x6f
    2a70:	strb.w	lr, [r3, #381]	; 0x17d
      _s = s;
    2a74:	mvn.w	lr, #77	; 0x4d
    2a78:	strb.w	lr, [r3, #382]	; 0x17e
      _b = b;
    2a7c:	mov.w	lr, #70	; 0x46
    2a80:	strb.w	lr, [r3, #389]	; 0x185
    2a84:	mvn.w	lr, #100	; 0x64
    2a88:	strb.w	sl, [r3, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a8c:	mov.w	sl, #99	; 0x63
      _b = b;
    2a90:	strb.w	lr, [r3, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a94:	mov.w	lr, #72	; 0x48
    2a98:	strb.w	sl, [r3, #403]	; 0x193
      _b = b;
    2a9c:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aa0:	strb.w	lr, [r3, #397]	; 0x18d
      _b = b;
    2aa4:	mvn.w	lr, #51	; 0x33
    2aa8:	strb.w	sl, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aac:	mov.w	sl, #95	; 0x5f
      _b = b;
    2ab0:	strb.w	lr, [r3, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ab4:	mov.w	lr, #57	; 0x39
    2ab8:	strb.w	sl, [r3, #406]	; 0x196
      _b = b;
    2abc:	mvn.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ac0:	strb.w	r0, [r3, #399]	; 0x18f
      _s = s;
      _b = b;
    2ac4:	strb.w	sl, [r3, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ac8:	mvn.w	sl, #122	; 0x7a
      _s = s;
    2acc:	strb.w	lr, [r3, #400]	; 0x190
      _b = b;
    2ad0:	mov.w	lr, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ad4:	strb.w	sl, [r3, #408]	; 0x198
      _s = s;
    2ad8:	mov.w	sl, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2adc:	strb.w	ip, [r3, #405]	; 0x195
      _s = s;
    2ae0:	strb.w	sl, [r3, #409]	; 0x199
      _b = b;
    2ae4:	mvn.w	sl, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ae8:	strb.w	r5, [r3, #420]	; 0x1a4
      _s = s;
      _b = b;
    2aec:	strb.w	sl, [r3, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2af0:	mov.w	sl, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2af4:	strb.w	r1, [r3, #423]	; 0x1a7
      _s = s;
    2af8:	strb.w	sl, [r3, #412]	; 0x19c
      _b = b;
    2afc:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b00:	strb.w	r5, [r3, #426]	; 0x1aa
      _s = s;
      _b = b;
    2b04:	strb.w	sl, [r3, #413]	; 0x19d
    2b08:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b0c:	strb.w	r8, [r3, #402]	; 0x192
      _s = s;
      _b = b;
    2b10:	strb.w	sl, [r3, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b14:	mvn.w	sl, #108	; 0x6c
    2b18:	strb.w	r8, [r3, #411]	; 0x19b
    2b1c:	strb.w	sl, [r3, #417]	; 0x1a1
      _s = s;
    2b20:	mov.w	sl, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b24:	strb.w	fp, [r3, #414]	; 0x19e
      _s = s;
    2b28:	strb.w	sl, [r3, #418]	; 0x1a2
    2b2c:	mov.w	sl, #73	; 0x49
      _b = b;
    2b30:	strb.w	fp, [r3, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b34:	strb.w	sl, [r3, #421]	; 0x1a5
      _b = b;
    2b38:	mvn.w	sl, #21
    2b3c:	strb.w	sl, [r3, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b40:	mvn.w	sl, #78	; 0x4e
    2b44:	strb.w	sl, [r3, #424]	; 0x1a8
      _b = b;
    2b48:	mvn.w	sl, #22
    2b4c:	strb.w	sl, [r3, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b50:	mvn.w	sl, #49	; 0x31
    2b54:	strb.w	sl, [r3, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b58:	mov.w	sl, #126	; 0x7e
    2b5c:	strb.w	sl, [r3, #396]	; 0x18c
      _s = s;
    2b60:	mov.w	sl, #116	; 0x74
    2b64:	strb.w	sl, [r3, #415]	; 0x19f
      _b = b;
    2b68:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b6c:	strb.w	r0, [r3, #429]	; 0x1ad
      _s = s;
      _b = b;
    2b70:	strb.w	sl, [r3, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b74:	mvn.w	sl, #96	; 0x60
      _b = b;
    2b78:	strb.w	r9, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b7c:	strb.w	sl, [r3, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b80:	mvn.w	sl, #95	; 0x5f
    2b84:	strb.w	sl, [r3, #432]	; 0x1b0
      _s = s;
    2b88:	mov.w	sl, #37	; 0x25
    2b8c:	strb.w	sl, [r3, #433]	; 0x1b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b90:	mov.w	sl, #116	; 0x74
    2b94:	strb.w	sl, [r3, #435]	; 0x1b3
      _s = s;
    2b98:	mov.w	sl, #123	; 0x7b
    2b9c:	strb.w	sl, [r3, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ba0:	mov.w	sl, #114	; 0x72
    2ba4:	strb.w	sl, [r3, #438]	; 0x1b6
      _s = s;
    2ba8:	mov.w	sl, #96	; 0x60
    2bac:	strb.w	sl, [r3, #439]	; 0x1b7
      _b = b;
    2bb0:	mvn.w	sl, #39	; 0x27
    2bb4:	strb.w	sl, [r3, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bb8:	mov.w	sl, #106	; 0x6a
    2bbc:	strb.w	sl, [r3, #441]	; 0x1b9
      _s = s;
    2bc0:	mov.w	sl, #66	; 0x42
    2bc4:	strb.w	sl, [r3, #442]	; 0x1ba
      _b = b;
    2bc8:	mvn.w	sl, #30
    2bcc:	strb.w	sl, [r3, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bd0:	mvn.w	sl, #102	; 0x66
    2bd4:	strb.w	sl, [r3, #445]	; 0x1bd
      _b = b;
    2bd8:	mvn.w	sl, #79	; 0x4f
    2bdc:	strb.w	sl, [r3, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2be0:	mov.w	sl, #112	; 0x70
    2be4:	strb.w	sl, [r3, #447]	; 0x1bf
      _s = s;
    2be8:	mov.w	sl, #118	; 0x76
    2bec:	strb.w	sl, [r3, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bf0:	mov.w	sl, #116	; 0x74
    2bf4:	strb.w	sl, [r3, #450]	; 0x1c2
      _s = s;
    2bf8:	mvn.w	sl, #34	; 0x22
    2bfc:	strb.w	sl, [r3, #451]	; 0x1c3
      _b = b;
    2c00:	mov.w	sl, #120	; 0x78
    2c04:	strb.w	sl, [r3, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c08:	mov.w	sl, #98	; 0x62
    2c0c:	strb.w	sl, [r3, #453]	; 0x1c5
      _s = s;
    2c10:	mvn.w	sl, #110	; 0x6e
    2c14:	strb.w	sl, [r3, #454]	; 0x1c6
      _b = b;
    2c18:	mov.w	sl, #102	; 0x66
    2c1c:	strb.w	sl, [r3, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c20:	mov.w	sl, #105	; 0x69
    2c24:	strb.w	sl, [r3, #456]	; 0x1c8
    2c28:	mvn.w	sl, #52	; 0x34
    2c2c:	strb.w	sl, [r3, #459]	; 0x1cb
      _s = s;
    2c30:	mov.w	sl, #95	; 0x5f
    2c34:	strb.w	sl, [r3, #460]	; 0x1cc
      _b = b;
    2c38:	mvn.w	sl, #55	; 0x37
    2c3c:	strb.w	sl, [r3, #431]	; 0x1af
    2c40:	mov.w	sl, #62	; 0x3e
    2c44:	strb.w	sl, [r3, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c48:	mov.w	sl, #38	; 0x26
    2c4c:	strb.w	sl, [r3, #444]	; 0x1bc
      _s = s;
      _b = b;
    2c50:	mvn.w	sl, #64	; 0x40
    2c54:	strb.w	sl, [r3, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c58:	mov.w	sl, #124	; 0x7c
    2c5c:	strb.w	sl, [r3, #457]	; 0x1c9
      _b = b;
    2c60:	mov.w	sl, #43	; 0x2b
    2c64:	strb.w	sl, [r3, #458]	; 0x1ca
    2c68:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c6c:	strb.w	r5, [r3, #465]	; 0x1d1
      _s = s;
      _b = b;
    2c70:	strb.w	sl, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c74:	mov.w	sl, #121	; 0x79
    2c78:	strb.w	r6, [r3, #471]	; 0x1d7
    2c7c:	strb.w	sl, [r3, #462]	; 0x1ce
      _s = s;
    2c80:	mvn.w	sl, #121	; 0x79
    2c84:	strb.w	r9, [r3, #478]	; 0x1de
    2c88:	strb.w	sl, [r3, #463]	; 0x1cf
      _b = b;
    2c8c:	mov.w	sl, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c90:	strb.w	ip, [r3, #486]	; 0x1e6
      _s = s;
      _b = b;
    2c94:	strb.w	sl, [r3, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c98:	mvn.w	sl, #73	; 0x49
      _b = b;
    2c9c:	strb.w	lr, [r3, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ca0:	strb.w	sl, [r3, #466]	; 0x1d2
      _b = b;
    2ca4:	mvn.w	sl, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ca8:	strb.w	r8, [r3, #469]	; 0x1d5
      _b = b;
    2cac:	strb.w	sl, [r3, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cb0:	mvn.w	sl, #118	; 0x76
    2cb4:	strb.w	sl, [r3, #468]	; 0x1d4
      _s = s;
      _b = b;
    2cb8:	mvn.w	sl, #34	; 0x22
    2cbc:	strb.w	sl, [r3, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cc0:	mvn.w	sl, #45	; 0x2d
    2cc4:	strb.w	sl, [r3, #472]	; 0x1d8
      _b = b;
    2cc8:	strb.w	sl, [r3, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ccc:	mvn.w	sl, #109	; 0x6d
    2cd0:	strb.w	sl, [r3, #474]	; 0x1da
      _s = s;
    2cd4:	mvn.w	sl, #110	; 0x6e
    2cd8:	strb.w	sl, [r3, #475]	; 0x1db
      _b = b;
    2cdc:	mvn.w	sl, #37	; 0x25
    2ce0:	strb.w	sl, [r3, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ce4:	mvn.w	sl, #114	; 0x72
    2ce8:	strb.w	sl, [r3, #477]	; 0x1dd
    2cec:	mvn.w	sl, #111	; 0x6f
    2cf0:	strb.w	sl, [r3, #480]	; 0x1e0
      _s = s;
    2cf4:	mvn.w	sl, #81	; 0x51
    2cf8:	strb.w	sl, [r3, #481]	; 0x1e1
      _b = b;
    2cfc:	mvn.w	sl, #31
    2d00:	strb.w	sl, [r3, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d04:	mvn.w	sl, #109	; 0x6d
    2d08:	strb.w	sl, [r3, #483]	; 0x1e3
      _s = s;
    2d0c:	mvn.w	sl, #101	; 0x65
    2d10:	strb.w	sl, [r3, #484]	; 0x1e4
      _b = b;
    2d14:	mvn.w	sl, #37	; 0x25
    2d18:	strb.w	sl, [r3, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d1c:	mov.w	sl, #37	; 0x25
    2d20:	strb.w	sl, [r3, #490]	; 0x1ea
      _b = b;
    2d24:	mvn.w	sl, #105	; 0x69
    2d28:	strb.w	sl, [r3, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d2c:	mov.w	sl, #113	; 0x71
    2d30:	strb.w	sl, [r3, #492]	; 0x1ec
      _s = s;
      _b = b;
    2d34:	mvn.w	sl, #44	; 0x2c
    2d38:	strb.w	sl, [r3, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d3c:	mov.w	sl, #79	; 0x4f
    2d40:	strb.w	sl, [r3, #487]	; 0x1e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d44:	mov.w	sl, #119	; 0x77
    2d48:	strb.w	sl, [r3, #489]	; 0x1e9
      _s = s;
    2d4c:	mov.w	sl, #52	; 0x34
    2d50:	strb.w	sl, [r3, #493]	; 0x1ed
      _b = b;
    2d54:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d58:	strb.w	r1, [r3, #504]	; 0x1f8
      _s = s;
      _b = b;
    2d5c:	strb.w	sl, [r3, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d60:	mov.w	sl, #121	; 0x79
      _s = s;
    2d64:	strb.w	r5, [r3, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d68:	strb.w	sl, [r3, #495]	; 0x1ef
      _s = s;
    2d6c:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d70:	strb.w	r5, [r3, #510]	; 0x1fe
      _s = s;
    2d74:	strb.w	sl, [r3, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d78:	strb.w	sl, [r3, #498]	; 0x1f2
      _s = s;
    2d7c:	mvn.w	sl, #58	; 0x3a
    2d80:	strb.w	r7, [r3, #517]	; 0x205
    2d84:	strb.w	sl, [r3, #499]	; 0x1f3
      _b = b;
    2d88:	mvn.w	sl, #65	; 0x41
    2d8c:	strb.w	sl, [r3, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d90:	mov.w	sl, #127	; 0x7f
    2d94:	strb.w	sl, [r3, #501]	; 0x1f5
      _s = s;
    2d98:	mvn.w	sl, #107	; 0x6b
    2d9c:	strb.w	sl, [r3, #502]	; 0x1f6
      _b = b;
    2da0:	mvn.w	sl, #78	; 0x4e
    2da4:	strb.w	sl, [r3, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2da8:	mov.w	sl, #97	; 0x61
    2dac:	strb.w	sl, [r3, #505]	; 0x1f9
      _b = b;
    2db0:	mvn.w	sl, #96	; 0x60
    2db4:	strb.w	sl, [r3, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2db8:	mov.w	sl, #127	; 0x7f
    2dbc:	strb.w	sl, [r3, #507]	; 0x1fb
      _s = s;
      _b = b;
    2dc0:	mvn.w	sl, #67	; 0x43
    2dc4:	strb.w	sl, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2dc8:	mvn.w	sl, #34	; 0x22
    2dcc:	strb.w	sl, [r3, #511]	; 0x1ff
      _b = b;
    2dd0:	mvn.w	sl, #110	; 0x6e
    2dd4:	strb.w	sl, [r3, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dd8:	mvn.w	sl, #120	; 0x78
    2ddc:	strb.w	sl, [r3, #513]	; 0x201
      _s = s;
    2de0:	mvn.w	sl, #28
    2de4:	strb.w	sl, [r3, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2de8:	mvn.w	sl, #120	; 0x78
    2dec:	strb.w	sl, [r3, #516]	; 0x204
      _s = s;
      _b = b;
    2df0:	mvn.w	sl, #52	; 0x34
    2df4:	strb.w	sl, [r3, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2df8:	mvn.w	sl, #119	; 0x77
    2dfc:	strb.w	sl, [r3, #519]	; 0x207
      _s = s;
    2e00:	mvn.w	sl, #5
    2e04:	strb.w	sl, [r3, #520]	; 0x208
      _b = b;
    2e08:	mvn.w	sl, #78	; 0x4e
    2e0c:	strb.w	sl, [r3, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e10:	mov.w	sl, #111	; 0x6f
    2e14:	strb.w	sl, [r3, #522]	; 0x20a
      _s = s;
    2e18:	mvn.w	sl, #104	; 0x68
    2e1c:	strb.w	sl, [r3, #523]	; 0x20b
      _b = b;
    2e20:	mvn.w	sl, #119	; 0x77
    2e24:	strb.w	sl, [r3, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e28:	mov.w	sl, #99	; 0x63
    2e2c:	strb.w	sl, [r3, #525]	; 0x20d
      _s = s;
    2e30:	mov.w	sl, #114	; 0x72
    2e34:	strb.w	sl, [r3, #526]	; 0x20e
      _b = b;
    2e38:	mvn.w	sl, #47	; 0x2f
    2e3c:	strb.w	sl, [r3, #497]	; 0x1f1
    2e40:	mvn.w	sl, #53	; 0x35
    2e44:	strb.w	sl, [r3, #515]	; 0x203
    2e48:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e4c:	strb.w	r6, [r3, #543]	; 0x21f
      _s = s;
      _b = b;
    2e50:	strb.w	sl, [r3, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e54:	mvn.w	sl, #64	; 0x40
    2e58:	strb.w	r6, [r3, #558]	; 0x22e
    2e5c:	strb.w	sl, [r3, #528]	; 0x210
      _s = s;
    2e60:	mov.w	sl, #106	; 0x6a
    2e64:	strb.w	r1, [r3, #559]	; 0x22f
    2e68:	strb.w	sl, [r3, #529]	; 0x211
      _b = b;
    2e6c:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e70:	strb.w	r7, [r3, #541]	; 0x21d
      _b = b;
    2e74:	strb.w	sl, [r3, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e78:	mvn.w	sl, #64	; 0x40
    2e7c:	strb.w	fp, [r3, #546]	; 0x222
    2e80:	strb.w	sl, [r3, #531]	; 0x213
      _s = s;
    2e84:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e88:	strb.w	r8, [r3, #549]	; 0x225
      _s = s;
    2e8c:	strb.w	sl, [r3, #532]	; 0x214
      _b = b;
    2e90:	mov.w	sl, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e94:	strb.w	fp, [r3, #552]	; 0x228
      _s = s;
      _b = b;
    2e98:	strb.w	sl, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e9c:	mov.w	sl, #127	; 0x7f
    2ea0:	strb.w	fp, [r3, #555]	; 0x22b
    2ea4:	strb.w	sl, [r3, #534]	; 0x216
      _s = s;
    2ea8:	mov.w	sl, #115	; 0x73
    2eac:	strb.w	sl, [r3, #535]	; 0x217
      _b = b;
    2eb0:	mov.w	sl, #121	; 0x79
    2eb4:	strb.w	sl, [r3, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2eb8:	mvn.w	sl, #122	; 0x7a
    2ebc:	strb.w	sl, [r3, #537]	; 0x219
      _s = s;
    2ec0:	mvn.w	sl, #61	; 0x3d
    2ec4:	strb.w	sl, [r3, #538]	; 0x21a
      _b = b;
    2ec8:	mvn.w	sl, #37	; 0x25
    2ecc:	strb.w	sl, [r3, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ed0:	mvn.w	sl, #111	; 0x6f
    2ed4:	strb.w	sl, [r3, #540]	; 0x21c
      _s = s;
      _b = b;
    2ed8:	mvn.w	sl, #54	; 0x36
    2edc:	strb.w	sl, [r3, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ee0:	mov.w	sl, #121	; 0x79
    2ee4:	strb.w	sl, [r3, #544]	; 0x220
      _b = b;
    2ee8:	mvn.w	sl, #35	; 0x23
    2eec:	strb.w	sl, [r3, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ef0:	mov.w	sl, #114	; 0x72
    2ef4:	strb.w	sl, [r3, #547]	; 0x223
      _b = b;
    2ef8:	mvn.w	sl, #23
    2efc:	strb.w	sl, [r3, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f00:	mvn.w	sl, #70	; 0x46
    2f04:	strb.w	sl, [r3, #550]	; 0x226
    2f08:	mov.w	sl, #124	; 0x7c
    2f0c:	strb.w	sl, [r3, #553]	; 0x229
    2f10:	mov.w	sl, #110	; 0x6e
    2f14:	strb.w	sl, [r3, #556]	; 0x22c
      _b = b;
    2f18:	mvn.w	sl, #19
    2f1c:	strb.w	sl, [r3, #557]	; 0x22d
    2f20:	mvn.w	sl, #38	; 0x26
    2f24:	strb.w	sl, [r3, #551]	; 0x227
    2f28:	mvn.w	sl, #25
    2f2c:	strb.w	sl, [r3, #554]	; 0x22a
    2f30:	strb.w	sl, [r3, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f34:	mvn.w	sl, #122	; 0x7a
    2f38:	strb.w	r1, [r3, #579]	; 0x243
    2f3c:	strb.w	sl, [r3, #561]	; 0x231
      _s = s;
      _b = b;
    2f40:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f44:	strb.w	r0, [r3, #582]	; 0x246
      _s = s;
      _b = b;
    2f48:	strb.w	sl, [r3, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f4c:	mov.w	sl, #110	; 0x6e
    2f50:	strb.w	r5, [r3, #585]	; 0x249
    2f54:	strb.w	sl, [r3, #564]	; 0x234
      _s = s;
    2f58:	mov.w	sl, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f5c:	strb.w	r5, [r3, #588]	; 0x24c
      _s = s;
    2f60:	strb.w	sl, [r3, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f64:	mov.w	sl, #120	; 0x78
    2f68:	strb.w	ip, [r3, #591]	; 0x24f
    2f6c:	strb.w	sl, [r3, #567]	; 0x237
    2f70:	strb.w	sl, [r3, #570]	; 0x23a
      _s = s;
    2f74:	mov.w	sl, #124	; 0x7c
      _b = b;
    2f78:	strb.w	r8, [r3, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f7c:	strb.w	sl, [r3, #571]	; 0x23b
      _b = b;
    2f80:	mvn.w	sl, #93	; 0x5d
    2f84:	strb.w	fp, [r3, #569]	; 0x239
    2f88:	strb.w	sl, [r3, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f8c:	mov.w	sl, #126	; 0x7e
    2f90:	strb.w	sl, [r3, #573]	; 0x23d
      _s = s;
    2f94:	mov.w	sl, #115	; 0x73
    2f98:	strb.w	sl, [r3, #574]	; 0x23e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f9c:	mov.w	sl, #120	; 0x78
    2fa0:	strb.w	sl, [r3, #576]	; 0x240
      _s = s;
    2fa4:	mov.w	sl, #45	; 0x2d
    2fa8:	strb.w	sl, [r3, #577]	; 0x241
      _b = b;
    2fac:	mvn.w	sl, #66	; 0x42
    2fb0:	strb.w	sl, [r3, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fb4:	mvn.w	sl, #55	; 0x37
    2fb8:	strb.w	sl, [r3, #580]	; 0x244
      _b = b;
    2fbc:	mvn.w	sl, #104	; 0x68
    2fc0:	strb.w	sl, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fc4:	mvn.w	sl, #8
    2fc8:	strb.w	sl, [r3, #583]	; 0x247
      _b = b;
    2fcc:	mvn.w	sl, #119	; 0x77
    2fd0:	strb.w	sl, [r3, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fd4:	mvn.w	sl, #5
    2fd8:	strb.w	sl, [r3, #586]	; 0x24a
    2fdc:	mvn.w	sl, #17
    2fe0:	strb.w	sl, [r3, #589]	; 0x24d
      _b = b;
    2fe4:	mvn.w	sl, #105	; 0x69
    2fe8:	strb.w	sl, [r3, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fec:	mov.w	sl, #78	; 0x4e
    2ff0:	strb.w	sl, [r3, #562]	; 0x232
    2ff4:	mov.w	sl, #122	; 0x7a
    2ff8:	strb.w	sl, [r3, #568]	; 0x238
      _b = b;
    2ffc:	mvn.w	sl, #94	; 0x5e
    3000:	strb.w	sl, [r3, #575]	; 0x23f
    3004:	mvn.w	sl, #90	; 0x5a
    3008:	strb.w	sl, [r3, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    300c:	mvn.w	sl, #98	; 0x62
    3010:	strb.w	sl, [r3, #592]	; 0x250
      _b = b;
    3014:	mvn.w	sl, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3018:	strb.w	r0, [r3, #604]	; 0x25c
      _b = b;
    301c:	strb.w	sl, [r3, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3020:	mvn.w	sl, #94	; 0x5e
      _s = s;
    3024:	strb.w	r6, [r3, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3028:	strb.w	sl, [r3, #594]	; 0x252
      _s = s;
      _b = b;
    302c:	mvn.w	sl, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3030:	strb.w	r6, [r3, #624]	; 0x270
      _s = s;
      _b = b;
    3034:	strb.w	sl, [r3, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3038:	mvn.w	sl, #15
    303c:	strb.w	sl, [r3, #597]	; 0x255
      _s = s;
    3040:	mov.w	sl, #119	; 0x77
    3044:	strb.w	sl, [r3, #598]	; 0x256
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3048:	mov.w	sl, #1
    304c:	strb.w	sl, [r3, #600]	; 0x258
      _s = s;
    3050:	mov.w	sl, #102	; 0x66
    3054:	strb.w	sl, [r3, #601]	; 0x259
      _b = b;
    3058:	mov.w	sl, #112	; 0x70
    305c:	strb.w	sl, [r3, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3060:	mvn.w	sl, #114	; 0x72
    3064:	strb.w	sl, [r3, #603]	; 0x25b
      _s = s;
      _b = b;
    3068:	mov.w	sl, #127	; 0x7f
    306c:	strb.w	sl, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3070:	mvn.w	sl, #114	; 0x72
    3074:	strb.w	sl, [r3, #606]	; 0x25e
      _s = s;
    3078:	mvn.w	sl, #35	; 0x23
    307c:	strb.w	sl, [r3, #607]	; 0x25f
      _b = b;
    3080:	mvn.w	sl, #26
    3084:	strb.w	sl, [r3, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3088:	mvn.w	sl, #114	; 0x72
    308c:	strb.w	sl, [r3, #609]	; 0x261
      _s = s;
    3090:	mvn.w	sl, #45	; 0x2d
    3094:	strb.w	sl, [r3, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3098:	mvn.w	sl, #118	; 0x76
    309c:	strb.w	sl, [r3, #612]	; 0x264
      _s = s;
      _b = b;
    30a0:	mvn.w	sl, #35	; 0x23
    30a4:	strb.w	sl, [r3, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30a8:	mvn.w	sl, #120	; 0x78
    30ac:	strb.w	sl, [r3, #615]	; 0x267
      _s = s;
    30b0:	mvn.w	sl, #92	; 0x5c
    30b4:	strb.w	sl, [r3, #616]	; 0x268
      _b = b;
    30b8:	mvn.w	sl, #23
    30bc:	strb.w	sl, [r3, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30c0:	mvn.w	sl, #121	; 0x79
    30c4:	strb.w	sl, [r3, #618]	; 0x26a
      _s = s;
    30c8:	mvn.w	sl, #8
    30cc:	strb.w	sl, [r3, #619]	; 0x26b
      _b = b;
    30d0:	mvn.w	sl, #29
    30d4:	strb.w	sl, [r3, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d8:	mvn.w	sl, #118	; 0x76
    30dc:	strb.w	sl, [r3, #621]	; 0x26d
      _s = s;
    30e0:	mvn.w	sl, #81	; 0x51
    30e4:	strb.w	sl, [r3, #622]	; 0x26e
      _b = b;
    30e8:	mvn.w	sl, #47	; 0x2f
    30ec:	strb.w	sl, [r3, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30f0:	mvn.w	sl, #119	; 0x77
    30f4:	strb.w	sl, [r3, #625]	; 0x271
    30f8:	mov.w	sl, #83	; 0x53
    30fc:	strb.w	sl, [r3, #595]	; 0x253
      _b = b;
    3100:	strb.w	sl, [r3, #599]	; 0x257
    3104:	mvn.w	sl, #56	; 0x38
    3108:	strb.w	sl, [r3, #611]	; 0x263
    310c:	mvn.w	sl, #50	; 0x32
    3110:	strb.w	lr, [r3, #629]	; 0x275
    3114:	strb.w	sl, [r3, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3118:	mvn.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    311c:	strb.w	ip, [r3, #630]	; 0x276
      _s = s;
    3120:	strb.w	sl, [r3, #628]	; 0x274
      _b = b;
    3124:	mvn.w	sl, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3128:	strb.w	ip, [r3, #633]	; 0x279
      _s = s;
      _b = b;
    312c:	strb.w	sl, [r3, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3130:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3134:	strb.w	r1, [r3, #636]	; 0x27c
      _s = s;
    3138:	strb.w	sl, [r3, #634]	; 0x27a
      _b = b;
    313c:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3140:	strb.w	r0, [r3, #657]	; 0x291
      _s = s;
      _b = b;
    3144:	strb.w	sl, [r3, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3148:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    314c:	strb.w	fp, [r3, #627]	; 0x273
      _s = s;
    3150:	strb.w	sl, [r3, #637]	; 0x27d
      _b = b;
    3154:	mov.w	sl, #97	; 0x61
    3158:	strb.w	sl, [r3, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    315c:	mvn.w	sl, #50	; 0x32
    3160:	strb.w	sl, [r3, #639]	; 0x27f
      _s = s;
    3164:	mov.w	sl, #85	; 0x55
    3168:	strb.w	sl, [r3, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    316c:	mvn.w	sl, #50	; 0x32
    3170:	strb.w	sl, [r3, #642]	; 0x282
      _s = s;
    3174:	mov.w	sl, #90	; 0x5a
    3178:	strb.w	sl, [r3, #643]	; 0x283
      _b = b;
    317c:	mov.w	sl, #17
    3180:	strb.w	sl, [r3, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3184:	mvn.w	sl, #51	; 0x33
    3188:	strb.w	sl, [r3, #645]	; 0x285
      _s = s;
    318c:	mov.w	sl, #70	; 0x46
    3190:	strb.w	sl, [r3, #646]	; 0x286
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3194:	mov.w	sl, #95	; 0x5f
    3198:	strb.w	sl, [r3, #648]	; 0x288
      _s = s;
      _b = b;
    319c:	mvn.w	sl, #29
    31a0:	strb.w	sl, [r3, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31a4:	mvn.w	sl, #122	; 0x7a
    31a8:	strb.w	sl, [r3, #651]	; 0x28b
      _s = s;
    31ac:	mov.w	sl, #87	; 0x57
    31b0:	strb.w	sl, [r3, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31b4:	mvn.w	sl, #122	; 0x7a
    31b8:	strb.w	sl, [r3, #654]	; 0x28e
      _s = s;
    31bc:	mvn.w	sl, #106	; 0x6a
    31c0:	strb.w	sl, [r3, #658]	; 0x292
    31c4:	mov.w	sl, #86	; 0x56
    31c8:	strb.w	sl, [r3, #631]	; 0x277
      _b = b;
    31cc:	mov.w	sl, #18
    31d0:	strb.w	sl, [r3, #641]	; 0x281
    31d4:	strb.w	sl, [r3, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31d8:	mov.w	sl, #13
    31dc:	strb.w	sl, [r3, #649]	; 0x289
      _b = b;
    31e0:	mvn.w	sl, #68	; 0x44
    31e4:	strb.w	sl, [r3, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31e8:	mvn.w	sl, #7
    31ec:	strb.w	sl, [r3, #655]	; 0x28f
      _b = b;
    31f0:	mvn.w	sl, #91	; 0x5b
    31f4:	strb.w	sl, [r3, #656]	; 0x290
    31f8:	mvn.w	sl, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31fc:	strb.w	r1, [r3, #673]	; 0x2a1
      _b = b;
    3200:	strb.w	sl, [r3, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3204:	mvn.w	sl, #78	; 0x4e
      _b = b;
    3208:	strb.w	lr, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    320c:	strb.w	sl, [r3, #661]	; 0x295
      _b = b;
    3210:	mvn.w	sl, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3214:	strb.w	r5, [r3, #684]	; 0x2ac
      _s = s;
      _b = b;
    3218:	strb.w	sl, [r3, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    321c:	mvn.w	sl, #99	; 0x63
    3220:	strb.w	r8, [r3, #660]	; 0x294
    3224:	strb.w	sl, [r3, #663]	; 0x297
    3228:	mvn.w	sl, #78	; 0x4e
      _s = s;
      _b = b;
    322c:	strb.w	r7, [r3, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3230:	strb.w	sl, [r3, #666]	; 0x29a
      _s = s;
    3234:	mvn.w	sl, #66	; 0x42
    3238:	strb.w	r7, [r3, #679]	; 0x2a7
    323c:	strb.w	sl, [r3, #667]	; 0x29b
      _b = b;
    3240:	mvn.w	sl, #6
    3244:	strb.w	sl, [r3, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3248:	mvn.w	sl, #72	; 0x48
    324c:	strb.w	sl, [r3, #669]	; 0x29d
      _s = s;
    3250:	mov.w	sl, #115	; 0x73
    3254:	strb.w	sl, [r3, #670]	; 0x29e
      _b = b;
    3258:	mvn.w	sl, #5
    325c:	strb.w	sl, [r3, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3260:	mvn.w	sl, #71	; 0x47
    3264:	strb.w	sl, [r3, #672]	; 0x2a0
      _s = s;
    3268:	mvn.w	sl, #56	; 0x38
    326c:	strb.w	sl, [r3, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3270:	mvn.w	sl, #93	; 0x5d
    3274:	strb.w	sl, [r3, #678]	; 0x2a6
      _s = s;
      _b = b;
    3278:	mvn.w	sl, #31
    327c:	strb.w	sl, [r3, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3280:	mvn.w	sl, #114	; 0x72
    3284:	strb.w	sl, [r3, #681]	; 0x2a9
      _s = s;
      _b = b;
    3288:	mvn.w	sl, #54	; 0x36
    328c:	strb.w	sl, [r3, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3290:	mvn.w	sl, #95	; 0x5f
    3294:	strb.w	sl, [r3, #685]	; 0x2ad
      _b = b;
    3298:	mvn.w	sl, #24
    329c:	strb.w	sl, [r3, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32a0:	mvn.w	sl, #120	; 0x78
    32a4:	strb.w	sl, [r3, #687]	; 0x2af
      _s = s;
    32a8:	mvn.w	sl, #6
    32ac:	strb.w	sl, [r3, #688]	; 0x2b0
      _b = b;
    32b0:	mvn.w	sl, #36	; 0x24
    32b4:	strb.w	sl, [r3, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b8:	mvn.w	sl, #118	; 0x76
    32bc:	strb.w	sl, [r3, #690]	; 0x2b2
      _s = s;
    32c0:	mvn.w	sl, #9
    32c4:	strb.w	sl, [r3, #691]	; 0x2b3
    32c8:	mov.w	sl, #91	; 0x5b
    32cc:	strb.w	sl, [r3, #664]	; 0x298
      _b = b;
    32d0:	mvn.w	sl, #14
    32d4:	strb.w	sl, [r3, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32d8:	mvn.w	sl, #103	; 0x67
    32dc:	strb.w	sl, [r3, #675]	; 0x2a3
      _s = s;
    32e0:	mvn.w	sl, #84	; 0x54
    32e4:	strb.w	sl, [r3, #682]	; 0x2aa
      _b = b;
    32e8:	mvn.w	sl, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32ec:	strb.w	r9, [r3, #699]	; 0x2bb
      _s = s;
      _b = b;
    32f0:	strb.w	sl, [r3, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32f4:	mvn.w	sl, #118	; 0x76
    32f8:	strb.w	r9, [r3, #705]	; 0x2c1
    32fc:	strb.w	sl, [r3, #693]	; 0x2b5
      _s = s;
    3300:	mvn.w	sl, #62	; 0x3e
      _b = b;
    3304:	strb.w	lr, [r3, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3308:	strb.w	sl, [r3, #694]	; 0x2b6
      _b = b;
    330c:	mvn.w	sl, #57	; 0x39
    3310:	strb.w	r9, [r3, #722]	; 0x2d2
    3314:	strb.w	sl, [r3, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3318:	mvn.w	sl, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    331c:	strb.w	fp, [r3, #696]	; 0x2b8
      _s = s;
    3320:	strb.w	sl, [r3, #697]	; 0x2b9
      _b = b;
    3324:	mvn.w	sl, #43	; 0x2b
    3328:	strb.w	sl, [r3, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    332c:	mov.w	sl, #123	; 0x7b
    3330:	strb.w	sl, [r3, #700]	; 0x2bc
      _b = b;
    3334:	mvn.w	sl, #28
    3338:	strb.w	sl, [r3, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    333c:	mvn.w	sl, #105	; 0x69
    3340:	strb.w	sl, [r3, #702]	; 0x2be
      _s = s;
    3344:	mov.w	sl, #85	; 0x55
    3348:	strb.w	sl, [r3, #703]	; 0x2bf
      _b = b;
    334c:	mvn.w	sl, #17
    3350:	strb.w	sl, [r3, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3354:	mvn.w	sl, #105	; 0x69
    3358:	strb.w	sl, [r3, #708]	; 0x2c4
      _s = s;
    335c:	mvn.w	sl, #41	; 0x29
    3360:	strb.w	sl, [r3, #709]	; 0x2c5
      _b = b;
    3364:	mvn.w	sl, #59	; 0x3b
    3368:	strb.w	sl, [r3, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    336c:	mvn.w	sl, #64	; 0x40
    3370:	strb.w	sl, [r3, #711]	; 0x2c7
      _s = s;
    3374:	mov.w	sl, #97	; 0x61
    3378:	strb.w	sl, [r3, #712]	; 0x2c8
      _b = b;
    337c:	mov.w	sl, #21
    3380:	strb.w	sl, [r3, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3384:	mvn.w	sl, #43	; 0x2b
    3388:	strb.w	sl, [r3, #714]	; 0x2ca
      _s = s;
    338c:	mov.w	sl, #90	; 0x5a
    3390:	strb.w	sl, [r3, #715]	; 0x2cb
      _b = b;
    3394:	mov.w	sl, #17
    3398:	strb.w	sl, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    339c:	mvn.w	sl, #50	; 0x32
    33a0:	strb.w	sl, [r3, #717]	; 0x2cd
      _s = s;
    33a4:	mov.w	sl, #76	; 0x4c
    33a8:	strb.w	sl, [r3, #718]	; 0x2ce
      _b = b;
    33ac:	mov.w	sl, #20
    33b0:	strb.w	sl, [r3, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33b4:	mov.w	sl, #113	; 0x71
    33b8:	strb.w	sl, [r3, #720]	; 0x2d0
      _s = s;
    33bc:	mov.w	sl, #69	; 0x45
    33c0:	strb.w	sl, [r3, #721]	; 0x2d1
    33c4:	mov.w	sl, #97	; 0x61
    33c8:	strb.w	sl, [r3, #724]	; 0x2d4
    33cc:	mvn.w	sl, #126	; 0x7e
    33d0:	strb.w	sl, [r3, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33d4:	strb.w	sl, [r3, #723]	; 0x2d3
    33d8:	mvn.w	sl, #122	; 0x7a
      _s = s;
      _b = b;
    33dc:	strb.w	ip, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e0:	strb.w	sl, [r3, #726]	; 0x2d6
      _s = s;
    33e4:	mov.w	sl, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e8:	strb.w	r0, [r3, #756]	; 0x2f4
      _s = s;
    33ec:	strb.w	sl, [r3, #727]	; 0x2d7
      _b = b;
    33f0:	mvn.w	sl, #11
    33f4:	strb.w	sl, [r3, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33f8:	mvn.w	sl, #111	; 0x6f
    33fc:	strb.w	sl, [r3, #729]	; 0x2d9
      _s = s;
    3400:	mov.w	sl, #46	; 0x2e
    3404:	strb.w	sl, [r3, #730]	; 0x2da
      _b = b;
    3408:	mvn.w	sl, #5
    340c:	strb.w	sl, [r3, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3410:	mvn.w	sl, #107	; 0x6b
    3414:	strb.w	sl, [r3, #732]	; 0x2dc
      _s = s;
      _b = b;
    3418:	mvn.w	sl, #4
    341c:	strb.w	sl, [r3, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3420:	mvn.w	sl, #91	; 0x5b
    3424:	strb.w	sl, [r3, #735]	; 0x2df
      _s = s;
    3428:	mov.w	sl, #85	; 0x55
    342c:	strb.w	sl, [r3, #736]	; 0x2e0
      _b = b;
    3430:	mvn.w	sl, #4
    3434:	strb.w	sl, [r3, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3438:	mvn.w	sl, #79	; 0x4f
    343c:	strb.w	sl, [r3, #738]	; 0x2e2
      _s = s;
    3440:	mov.w	sl, #121	; 0x79
    3444:	strb.w	sl, [r3, #739]	; 0x2e3
      _b = b;
    3448:	mvn.w	sl, #5
    344c:	strb.w	sl, [r3, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3450:	mvn.w	sl, #69	; 0x45
    3454:	strb.w	sl, [r3, #741]	; 0x2e5
      _s = s;
    3458:	mov.w	sl, #103	; 0x67
    345c:	strb.w	sl, [r3, #742]	; 0x2e6
      _b = b;
    3460:	mvn.w	sl, #6
    3464:	strb.w	sl, [r3, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3468:	mvn.w	sl, #71	; 0x47
    346c:	strb.w	sl, [r3, #744]	; 0x2e8
      _s = s;
    3470:	mov.w	sl, #69	; 0x45
    3474:	strb.w	sl, [r3, #745]	; 0x2e9
      _b = b;
    3478:	mvn.w	sl, #9
    347c:	strb.w	sl, [r3, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3480:	mvn.w	sl, #68	; 0x44
    3484:	strb.w	sl, [r3, #747]	; 0x2eb
      _s = s;
    3488:	mov.w	sl, #59	; 0x3b
    348c:	strb.w	sl, [r3, #748]	; 0x2ec
      _b = b;
    3490:	mvn.w	sl, #10
    3494:	strb.w	sl, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3498:	mvn.w	sl, #105	; 0x69
    349c:	strb.w	sl, [r3, #751]	; 0x2ef
      _b = b;
    34a0:	mvn.w	sl, #17
    34a4:	strb.w	sl, [r3, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34a8:	mvn.w	sl, #109	; 0x6d
    34ac:	strb.w	sl, [r3, #753]	; 0x2f1
      _s = s;
      _b = b;
    34b0:	mvn.w	sl, #54	; 0x36
    34b4:	strb.w	sl, [r3, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34b8:	mvn.w	sl, #114	; 0x72
    34bc:	strb.w	sl, [r3, #757]	; 0x2f5
    34c0:	mov.w	sl, #104	; 0x68
    34c4:	strb.w	sl, [r3, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34c8:	mvn.w	sl, #87	; 0x57
    34cc:	strb.w	sl, [r3, #750]	; 0x2ee
      _s = s;
    34d0:	mvn.w	sl, #42	; 0x2a
    34d4:	strb.w	sl, [r3, #754]	; 0x2f2
      _b = b;
    34d8:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34dc:	strb.w	r6, [r3, #765]	; 0x2fd
      _s = s;
      _b = b;
    34e0:	strb.w	sl, [r3, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34e4:	mvn.w	sl, #120	; 0x78
    34e8:	strb.w	ip, [r3, #768]	; 0x300
    34ec:	strb.w	sl, [r3, #759]	; 0x2f7
      _s = s;
    34f0:	mvn.w	sl, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34f4:	strb.w	r9, [r3, #771]	; 0x303
      _s = s;
    34f8:	strb.w	sl, [r3, #760]	; 0x2f8
      _b = b;
    34fc:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3500:	strb.w	r6, [r3, #778]	; 0x30a
      _b = b;
    3504:	strb.w	sl, [r3, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3508:	mvn.w	sl, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    350c:	strb.w	r8, [r3, #762]	; 0x2fa
      _s = s;
    3510:	strb.w	sl, [r3, #763]	; 0x2fb
      _b = b;
    3514:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3518:	strb.w	r8, [r3, #777]	; 0x309
      _s = s;
      _b = b;
    351c:	strb.w	sl, [r3, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3520:	mvn.w	sl, #70	; 0x46
    3524:	strb.w	r7, [r3, #781]	; 0x30d
    3528:	strb.w	sl, [r3, #766]	; 0x2fe
    352c:	mvn.w	sl, #80	; 0x50
    3530:	strb.w	sl, [r3, #769]	; 0x301
      _b = b;
    3534:	mvn.w	sl, #52	; 0x34
    3538:	strb.w	sl, [r3, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    353c:	mov.w	sl, #91	; 0x5b
    3540:	strb.w	sl, [r3, #772]	; 0x304
      _b = b;
    3544:	mvn.w	sl, #35	; 0x23
    3548:	strb.w	sl, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    354c:	mov.w	sl, #99	; 0x63
    3550:	strb.w	sl, [r3, #775]	; 0x307
      _b = b;
    3554:	mvn.w	sl, #19
    3558:	strb.w	sl, [r3, #776]	; 0x308
    355c:	mvn.w	sl, #17
    3560:	strb.w	sl, [r3, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3564:	mvn.w	sl, #103	; 0x67
    3568:	strb.w	sl, [r3, #780]	; 0x30c
      _s = s;
      _b = b;
    356c:	mvn.w	sl, #18
    3570:	strb.w	sl, [r3, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3574:	mvn.w	sl, #107	; 0x6b
    3578:	strb.w	sl, [r3, #783]	; 0x30f
      _s = s;
    357c:	mvn.w	sl, #15
    3580:	strb.w	sl, [r3, #784]	; 0x310
      _b = b;
    3584:	mvn.w	sl, #93	; 0x5d
    3588:	strb.w	sl, [r3, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    358c:	mvn.w	sl, #107	; 0x6b
    3590:	strb.w	sl, [r3, #786]	; 0x312
      _s = s;
    3594:	strb.w	sl, [r3, #787]	; 0x313
      _b = b;
    3598:	mov.w	sl, #31
    359c:	strb.w	sl, [r3, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a0:	mvn.w	sl, #122	; 0x7a
    35a4:	strb.w	sl, [r3, #789]	; 0x315
      _s = s;
    35a8:	mvn.w	sl, #107	; 0x6b
    35ac:	strb.w	sl, [r3, #790]	; 0x316
      _b = b;
    35b0:	mvn.w	sl, #75	; 0x4b
    35b4:	strb.w	sl, [r3, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35b8:	mvn.w	sl, #97	; 0x61
    35bc:	strb.w	sl, [r3, #774]	; 0x306
      _s = s;
      _b = b;
    35c0:	mov.w	sl, #103	; 0x67
    35c4:	strb.w	r7, [r3, #806]	; 0x326
    35c8:	strb.w	sl, [r3, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35cc:	mov.w	sl, #121	; 0x79
      _s = s;
    35d0:	strb.w	fp, [r3, #808]	; 0x328
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d4:	strb.w	sl, [r3, #792]	; 0x318
      _s = s;
    35d8:	mov.w	sl, #119	; 0x77
      _b = b;
    35dc:	strb.w	r7, [r3, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    35e0:	strb.w	sl, [r3, #793]	; 0x319
      _b = b;
    35e4:	mvn.w	sl, #56	; 0x38
    35e8:	strb.w	sl, [r3, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35ec:	mvn.w	sl, #119	; 0x77
    35f0:	strb.w	sl, [r3, #795]	; 0x31b
      _s = s;
    35f4:	mvn.w	sl, #50	; 0x32
    35f8:	strb.w	sl, [r3, #796]	; 0x31c
      _b = b;
    35fc:	mvn.w	sl, #11
    3600:	strb.w	sl, [r3, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3604:	mvn.w	sl, #100	; 0x64
    3608:	strb.w	sl, [r3, #798]	; 0x31e
      _s = s;
    360c:	mov.w	sl, #45	; 0x2d
    3610:	strb.w	sl, [r3, #799]	; 0x31f
      _b = b;
    3614:	mvn.w	sl, #5
    3618:	strb.w	sl, [r3, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    361c:	mvn.w	sl, #95	; 0x5f
    3620:	strb.w	sl, [r3, #801]	; 0x321
      _s = s;
    3624:	mov.w	sl, #79	; 0x4f
    3628:	strb.w	sl, [r3, #802]	; 0x322
      _b = b;
    362c:	mvn.w	sl, #8
    3630:	strb.w	sl, [r3, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3634:	mvn.w	sl, #107	; 0x6b
    3638:	strb.w	sl, [r3, #804]	; 0x324
      _s = s;
    363c:	mov.w	sl, #124	; 0x7c
    3640:	strb.w	sl, [r3, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3644:	mvn.w	sl, #90	; 0x5a
    3648:	strb.w	sl, [r3, #807]	; 0x327
      _s = s;
      _b = b;
    364c:	mvn.w	sl, #7
    3650:	strb.w	sl, [r3, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3654:	mvn.w	sl, #74	; 0x4a
    3658:	strb.w	sl, [r3, #810]	; 0x32a
    365c:	mvn.w	sl, #62	; 0x3e
    3660:	strb.w	sl, [r3, #813]	; 0x32d
      _s = s;
    3664:	mov.w	sl, #88	; 0x58
    3668:	strb.w	sl, [r3, #814]	; 0x32e
      _b = b;
    366c:	mvn.w	sl, #5
    3670:	strb.w	sl, [r3, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3674:	mvn.w	sl, #59	; 0x3b
    3678:	strb.w	sl, [r3, #816]	; 0x330
      _s = s;
      _b = b;
    367c:	mvn.w	sl, #6
    3680:	strb.w	sl, [r3, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3684:	mvn.w	sl, #57	; 0x39
    3688:	strb.w	sl, [r3, #819]	; 0x333
      _s = s;
    368c:	mov.w	sl, #58	; 0x3a
    3690:	strb.w	sl, [r3, #820]	; 0x334
      _b = b;
    3694:	mvn.w	sl, #9
    3698:	strb.w	sl, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    369c:	mvn.w	sl, #73	; 0x49
    36a0:	strb.w	sl, [r3, #822]	; 0x336
      _s = s;
    36a4:	mov.w	sl, #74	; 0x4a
    36a8:	strb.w	sl, [r3, #823]	; 0x337
    36ac:	mov.w	sl, #68	; 0x44
    36b0:	strb.w	sl, [r3, #811]	; 0x32b
    36b4:	mov.w	sl, #75	; 0x4b
    36b8:	strb.w	sl, [r3, #817]	; 0x331
      _b = b;
    36bc:	mvn.w	sl, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36c0:	strb.w	r5, [r3, #841]	; 0x349
      _b = b;
    36c4:	strb.w	sl, [r3, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36c8:	mvn.w	sl, #95	; 0x5f
      _s = s;
    36cc:	strb.w	lr, [r3, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36d0:	strb.w	sl, [r3, #825]	; 0x339
      _s = s;
    36d4:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36d8:	strb.w	r9, [r3, #855]	; 0x357
      _s = s;
    36dc:	strb.w	sl, [r3, #826]	; 0x33a
      _b = b;
    36e0:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36e4:	strb.w	fp, [r3, #831]	; 0x33f
      _s = s;
      _b = b;
    36e8:	strb.w	sl, [r3, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ec:	mvn.w	sl, #102	; 0x66
    36f0:	strb.w	r8, [r3, #840]	; 0x348
    36f4:	strb.w	sl, [r3, #828]	; 0x33c
      _s = s;
    36f8:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36fc:	strb.w	fp, [r3, #843]	; 0x34b
      _s = s;
    3700:	strb.w	sl, [r3, #829]	; 0x33d
      _b = b;
    3704:	mvn.w	sl, #58	; 0x3a
    3708:	strb.w	sl, [r3, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    370c:	mvn.w	sl, #26
    3710:	strb.w	sl, [r3, #832]	; 0x340
      _b = b;
    3714:	mvn.w	sl, #48	; 0x30
    3718:	strb.w	sl, [r3, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    371c:	mvn.w	sl, #118	; 0x76
    3720:	strb.w	sl, [r3, #834]	; 0x342
      _s = s;
    3724:	mvn.w	sl, #51	; 0x33
    3728:	strb.w	sl, [r3, #835]	; 0x343
      _b = b;
    372c:	mvn.w	sl, #47	; 0x2f
    3730:	strb.w	sl, [r3, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3734:	mvn.w	sl, #114	; 0x72
    3738:	strb.w	sl, [r3, #837]	; 0x345
      _s = s;
    373c:	mvn.w	sl, #68	; 0x44
    3740:	strb.w	sl, [r3, #838]	; 0x346
      _b = b;
    3744:	mvn.w	sl, #66	; 0x42
    3748:	strb.w	sl, [r3, #839]	; 0x347
    374c:	mvn.w	sl, #36	; 0x24
    3750:	strb.w	sl, [r3, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3754:	mov.w	sl, #115	; 0x73
    3758:	strb.w	sl, [r3, #844]	; 0x34c
      _b = b;
    375c:	mvn.w	sl, #24
    3760:	strb.w	sl, [r3, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3764:	mvn.w	sl, #103	; 0x67
    3768:	strb.w	sl, [r3, #846]	; 0x34e
      _s = s;
    376c:	mov.w	sl, #126	; 0x7e
    3770:	strb.w	sl, [r3, #847]	; 0x34f
      _b = b;
    3774:	mvn.w	sl, #22
    3778:	strb.w	sl, [r3, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    377c:	mvn.w	sl, #110	; 0x6e
    3780:	strb.w	sl, [r3, #849]	; 0x351
      _s = s;
    3784:	mvn.w	sl, #37	; 0x25
    3788:	strb.w	sl, [r3, #850]	; 0x352
      _b = b;
    378c:	mvn.w	sl, #26
    3790:	strb.w	sl, [r3, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3794:	mvn.w	sl, #107	; 0x6b
    3798:	strb.w	sl, [r3, #852]	; 0x354
      _s = s;
      _b = b;
    379c:	mvn.w	sl, #16
    37a0:	strb.w	sl, [r3, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37a4:	mov.w	sl, #100	; 0x64
    37a8:	strb.w	sl, [r3, #856]	; 0x358
      _b = b;
    37ac:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37b0:	strb.w	r9, [r3, #858]	; 0x35a
      _s = s;
      _b = b;
    37b4:	strb.w	sl, [r3, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37b8:	mvn.w	sl, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37bc:	strb.w	r6, [r3, #861]	; 0x35d
      _s = s;
    37c0:	strb.w	sl, [r3, #859]	; 0x35b
      _b = b;
    37c4:	mov.w	sl, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37c8:	strb.w	r0, [r3, #864]	; 0x360
      _s = s;
      _b = b;
    37cc:	strb.w	sl, [r3, #860]	; 0x35c
    37d0:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37d4:	strb.w	r7, [r3, #862]	; 0x35e
      _b = b;
    37d8:	strb.w	sl, [r3, #863]	; 0x35f
    37dc:	mvn.w	sl, #9
    37e0:	strb.w	sl, [r3, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37e4:	mvn.w	sl, #98	; 0x62
    37e8:	strb.w	sl, [r3, #867]	; 0x363
      _s = s;
    37ec:	mov.w	sl, #98	; 0x62
    37f0:	strb.w	sl, [r3, #868]	; 0x364
      _b = b;
    37f4:	mvn.w	sl, #9
    37f8:	strb.w	sl, [r3, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37fc:	mvn.w	sl, #82	; 0x52
    3800:	strb.w	sl, [r3, #870]	; 0x366
      _s = s;
    3804:	mov.w	sl, #43	; 0x2b
    3808:	strb.w	sl, [r3, #871]	; 0x367
      _b = b;
    380c:	mvn.w	sl, #6
    3810:	strb.w	sl, [r3, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3814:	mvn.w	sl, #91	; 0x5b
    3818:	strb.w	sl, [r3, #873]	; 0x369
      _s = s;
    381c:	mov.w	sl, #115	; 0x73
    3820:	strb.w	sl, [r3, #874]	; 0x36a
      _b = b;
    3824:	mvn.w	sl, #18
    3828:	strb.w	sl, [r3, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    382c:	mvn.w	sl, #90	; 0x5a
    3830:	strb.w	sl, [r3, #876]	; 0x36c
      _s = s;
    3834:	mov.w	sl, #116	; 0x74
    3838:	strb.w	sl, [r3, #877]	; 0x36d
      _b = b;
    383c:	mvn.w	sl, #13
    3840:	strb.w	sl, [r3, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3844:	mvn.w	sl, #89	; 0x59
    3848:	strb.w	sl, [r3, #879]	; 0x36f
      _s = s;
    384c:	mvn.w	sl, #106	; 0x6a
    3850:	strb.w	sl, [r3, #880]	; 0x370
      _b = b;
    3854:	mvn.w	sl, #13
    3858:	strb.w	sl, [r3, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    385c:	mvn.w	sl, #78	; 0x4e
    3860:	strb.w	sl, [r3, #882]	; 0x372
      _s = s;
    3864:	mov.w	sl, #113	; 0x71
    3868:	strb.w	sl, [r3, #883]	; 0x373
      _b = b;
    386c:	mvn.w	sl, #10
    3870:	strb.w	sl, [r3, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3874:	mvn.w	sl, #68	; 0x44
    3878:	strb.w	sl, [r3, #885]	; 0x375
      _s = s;
    387c:	mov.w	sl, #99	; 0x63
    3880:	strb.w	sl, [r3, #886]	; 0x376
      _b = b;
    3884:	mvn.w	sl, #11
    3888:	strb.w	sl, [r3, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    388c:	mvn.w	sl, #61	; 0x3d
    3890:	strb.w	sl, [r3, #888]	; 0x378
      _s = s;
    3894:	mov.w	sl, #79	; 0x4f
    3898:	strb.w	sl, [r3, #889]	; 0x379
    389c:	mvn.w	sl, #127	; 0x7f
    38a0:	strb.w	sl, [r3, #865]	; 0x361
      _b = b;
    38a4:	mvn.w	sl, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38a8:	strb.w	r5, [r3, #909]	; 0x38d
      _s = s;
      _b = b;
    38ac:	strb.w	sl, [r3, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38b0:	mvn.w	sl, #63	; 0x3f
    38b4:	strb.w	ip, [r3, #912]	; 0x390
    38b8:	strb.w	sl, [r3, #891]	; 0x37b
      _s = s;
    38bc:	mov.w	sl, #79	; 0x4f
    38c0:	strb.w	fp, [r3, #907]	; 0x38b
    38c4:	strb.w	sl, [r3, #892]	; 0x37c
      _b = b;
    38c8:	mvn.w	sl, #15
    38cc:	strb.w	sl, [r3, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38d0:	mvn.w	sl, #77	; 0x4d
    38d4:	strb.w	sl, [r3, #894]	; 0x37e
      _s = s;
    38d8:	mvn.w	sl, #122	; 0x7a
    38dc:	strb.w	sl, [r3, #895]	; 0x37f
      _b = b;
    38e0:	mvn.w	sl, #16
    38e4:	strb.w	sl, [r3, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38e8:	mvn.w	sl, #97	; 0x61
    38ec:	strb.w	sl, [r3, #897]	; 0x381
      _s = s;
    38f0:	mvn.w	sl, #38	; 0x26
    38f4:	strb.w	sl, [r3, #898]	; 0x382
      _b = b;
    38f8:	mvn.w	sl, #23
    38fc:	strb.w	sl, [r3, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3900:	mvn.w	sl, #99	; 0x63
    3904:	strb.w	sl, [r3, #900]	; 0x384
      _s = s;
    3908:	mvn.w	sl, #6
    390c:	strb.w	sl, [r3, #901]	; 0x385
      _b = b;
    3910:	mvn.w	sl, #71	; 0x47
    3914:	strb.w	sl, [r3, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3918:	mvn.w	sl, #111	; 0x6f
    391c:	strb.w	sl, [r3, #903]	; 0x387
      _s = s;
    3920:	mvn.w	sl, #6
    3924:	strb.w	sl, [r3, #904]	; 0x388
      _b = b;
    3928:	mvn.w	sl, #63	; 0x3f
    392c:	strb.w	sl, [r3, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3930:	mvn.w	sl, #118	; 0x76
    3934:	strb.w	sl, [r3, #906]	; 0x38a
      _s = s;
      _b = b;
    3938:	mvn.w	sl, #75	; 0x4b
    393c:	strb.w	sl, [r3, #908]	; 0x38c
    3940:	mvn.w	sl, #32
    3944:	strb.w	sl, [r3, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3948:	mov.w	sl, #105	; 0x69
    394c:	strb.w	sl, [r3, #913]	; 0x391
      _b = b;
    3950:	mvn.w	sl, #37	; 0x25
    3954:	strb.w	sl, [r3, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3958:	mvn.w	sl, #104	; 0x68
    395c:	strb.w	sl, [r3, #915]	; 0x393
      _s = s;
    3960:	mov.w	sl, #93	; 0x5d
    3964:	strb.w	sl, [r3, #916]	; 0x394
      _b = b;
    3968:	mvn.w	sl, #27
    396c:	strb.w	sl, [r3, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3970:	mvn.w	sl, #104	; 0x68
    3974:	strb.w	sl, [r3, #918]	; 0x396
      _s = s;
    3978:	mvn.w	sl, #61	; 0x3d
    397c:	strb.w	sl, [r3, #919]	; 0x397
      _b = b;
    3980:	mvn.w	sl, #29
    3984:	strb.w	sl, [r3, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3988:	mvn.w	sl, #102	; 0x66
    398c:	strb.w	sl, [r3, #921]	; 0x399
      _s = s;
    3990:	mvn.w	sl, #39	; 0x27
    3994:	strb.w	sl, [r3, #922]	; 0x39a
    3998:	mov.w	sl, #108	; 0x6c
    399c:	strb.w	sl, [r3, #910]	; 0x38e
      _b = b;
    39a0:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a4:	strb.w	r6, [r3, #927]	; 0x39f
      _s = s;
      _b = b;
    39a8:	strb.w	sl, [r3, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39ac:	mvn.w	sl, #104	; 0x68
    39b0:	strb.w	r9, [r3, #933]	; 0x3a5
    39b4:	strb.w	sl, [r3, #924]	; 0x39c
      _s = s;
    39b8:	mov.w	sl, #124	; 0x7c
      _b = b;
    39bc:	strb.w	lr, [r3, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39c0:	strb.w	sl, [r3, #925]	; 0x39d
      _b = b;
    39c4:	mvn.w	sl, #15
    39c8:	strb.w	lr, [r3, #950]	; 0x3b6
    39cc:	strb.w	sl, [r3, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39d0:	mov.w	sl, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d4:	strb.w	fp, [r3, #930]	; 0x3a2
      _s = s;
    39d8:	strb.w	sl, [r3, #928]	; 0x3a0
      _b = b;
    39dc:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e0:	strb.w	r8, [r3, #945]	; 0x3b1
      _s = s;
      _b = b;
    39e4:	strb.w	sl, [r3, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39e8:	mov.w	sl, #58	; 0x3a
    39ec:	strb.w	sl, [r3, #931]	; 0x3a3
      _b = b;
    39f0:	mvn.w	sl, #82	; 0x52
    39f4:	strb.w	sl, [r3, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39f8:	mvn.w	sl, #5
    39fc:	strb.w	sl, [r3, #934]	; 0x3a6
      _b = b;
    3a00:	mvn.w	sl, #66	; 0x42
    3a04:	strb.w	sl, [r3, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a08:	mvn.w	sl, #122	; 0x7a
    3a0c:	strb.w	sl, [r3, #936]	; 0x3a8
      _s = s;
    3a10:	mov.w	sl, #52	; 0x34
    3a14:	strb.w	sl, [r3, #937]	; 0x3a9
      _b = b;
    3a18:	mvn.w	sl, #4
    3a1c:	strb.w	sl, [r3, #938]	; 0x3aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a20:	mvn.w	sl, #97	; 0x61
    3a24:	strb.w	sl, [r3, #939]	; 0x3ab
      _s = s;
    3a28:	mov.w	sl, #99	; 0x63
    3a2c:	strb.w	sl, [r3, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a30:	mvn.w	sl, #114	; 0x72
    3a34:	strb.w	sl, [r3, #942]	; 0x3ae
      _s = s;
    3a38:	mvn.w	sl, #81	; 0x51
    3a3c:	strb.w	sl, [r3, #943]	; 0x3af
      _b = b;
    3a40:	mvn.w	sl, #17
    3a44:	strb.w	sl, [r3, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a48:	mvn.w	sl, #77	; 0x4d
    3a4c:	strb.w	sl, [r3, #946]	; 0x3b2
      _b = b;
    3a50:	mvn.w	sl, #7
    3a54:	strb.w	sl, [r3, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a58:	mvn.w	sl, #110	; 0x6e
    3a5c:	strb.w	sl, [r3, #948]	; 0x3b4
      _s = s;
    3a60:	mvn.w	sl, #80	; 0x50
    3a64:	strb.w	sl, [r3, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a68:	mvn.w	sl, #106	; 0x6a
    3a6c:	strb.w	sl, [r3, #951]	; 0x3b7
      _s = s;
    3a70:	mvn.w	sl, #109	; 0x6d
    3a74:	strb.w	sl, [r3, #952]	; 0x3b8
      _b = b;
    3a78:	mvn.w	sl, #10
    3a7c:	strb.w	sl, [r3, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a80:	mvn.w	sl, #85	; 0x55
    3a84:	strb.w	sl, [r3, #954]	; 0x3ba
      _s = s;
    3a88:	mvn.w	sl, #92	; 0x5c
    3a8c:	strb.w	sl, [r3, #955]	; 0x3bb
      _b = b;
    3a90:	mvn.w	sl, #26
    3a94:	strb.w	lr, [r3, #959]	; 0x3bf
    3a98:	strb.w	sl, [r3, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a9c:	mvn.w	sl, #73	; 0x49
    3aa0:	strb.w	r1, [r3, #969]	; 0x3c9
    3aa4:	strb.w	sl, [r3, #957]	; 0x3bd
      _s = s;
    3aa8:	mvn.w	sl, #57	; 0x39
      _b = b;
    3aac:	strb.w	r8, [r3, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ab0:	strb.w	sl, [r3, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ab4:	mvn.w	sl, #55	; 0x37
    3ab8:	strb.w	sl, [r3, #960]	; 0x3c0
      _s = s;
    3abc:	mov.w	sl, #114	; 0x72
    3ac0:	strb.w	sl, [r3, #961]	; 0x3c1
      _b = b;
    3ac4:	mvn.w	sl, #10
    3ac8:	strb.w	sl, [r3, #962]	; 0x3c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3acc:	mvn.w	sl, #54	; 0x36
    3ad0:	strb.w	sl, [r3, #963]	; 0x3c3
      _s = s;
    3ad4:	mov.w	sl, #104	; 0x68
    3ad8:	strb.w	sl, [r3, #964]	; 0x3c4
      _b = b;
    3adc:	mvn.w	sl, #33	; 0x21
    3ae0:	strb.w	sl, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ae4:	mvn.w	sl, #75	; 0x4b
    3ae8:	strb.w	sl, [r3, #966]	; 0x3c6
      _s = s;
    3aec:	mvn.w	sl, #95	; 0x5f
    3af0:	strb.w	sl, [r3, #967]	; 0x3c7
      _b = b;
    3af4:	mvn.w	sl, #50	; 0x32
    3af8:	strb.w	sl, [r3, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3afc:	mov.w	sl, #97	; 0x61
    3b00:	strb.w	sl, [r3, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b04:	mvn.w	sl, #97	; 0x61
    3b08:	strb.w	sl, [r3, #972]	; 0x3cc
      _s = s;
    3b0c:	mvn.w	sl, #70	; 0x46
    3b10:	strb.w	sl, [r3, #973]	; 0x3cd
      _b = b;
    3b14:	mvn.w	sl, #89	; 0x59
    3b18:	strb.w	sl, [r3, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b1c:	mvn.w	sl, #70	; 0x46
    3b20:	strb.w	sl, [r3, #975]	; 0x3cf
      _s = s;
    3b24:	mvn.w	sl, #111	; 0x6f
    3b28:	strb.w	sl, [r3, #976]	; 0x3d0
      _b = b;
    3b2c:	mvn.w	sl, #25
    3b30:	strb.w	sl, [r3, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b34:	mvn.w	sl, #86	; 0x56
    3b38:	strb.w	sl, [r3, #978]	; 0x3d2
      _s = s;
    3b3c:	mvn.w	sl, #90	; 0x5a
    3b40:	strb.w	sl, [r3, #979]	; 0x3d3
      _b = b;
    3b44:	mvn.w	sl, #62	; 0x3e
    3b48:	strb.w	sl, [r3, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b4c:	mvn.w	sl, #103	; 0x67
    3b50:	strb.w	sl, [r3, #981]	; 0x3d5
      _s = s;
    3b54:	mvn.w	sl, #127	; 0x7f
    3b58:	strb.w	sl, [r3, #982]	; 0x3d6
      _b = b;
    3b5c:	mvn.w	sl, #59	; 0x3b
    3b60:	strb.w	sl, [r3, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b64:	mvn.w	sl, #109	; 0x6d
    3b68:	strb.w	sl, [r3, #984]	; 0x3d8
      _s = s;
    3b6c:	mvn.w	sl, #127	; 0x7f
    3b70:	strb.w	sl, [r3, #985]	; 0x3d9
      _b = b;
    3b74:	mvn.w	sl, #46	; 0x2e
    3b78:	strb.w	sl, [r3, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b7c:	mvn.w	sl, #97	; 0x61
    3b80:	strb.w	sl, [r3, #987]	; 0x3db
      _s = s;
    3b84:	mvn.w	sl, #4
    3b88:	strb.w	sl, [r3, #988]	; 0x3dc
      _b = b;
    3b8c:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b90:	strb.w	r6, [r3, #1002]	; 0x3ea
      _s = s;
      _b = b;
    3b94:	strb.w	sl, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b98:	mvn.w	sl, #97	; 0x61
    3b9c:	strb.w	ip, [r3, #1005]	; 0x3ed
    3ba0:	strb.w	sl, [r3, #990]	; 0x3de
      _s = s;
    3ba4:	mvn.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ba8:	strb.w	ip, [r3, #1014]	; 0x3f6
      _s = s;
    3bac:	strb.w	sl, [r3, #991]	; 0x3df
      _b = b;
    3bb0:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bb4:	strb.w	ip, [r3, #1017]	; 0x3f9
      _s = s;
      _b = b;
    3bb8:	strb.w	sl, [r3, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bbc:	mvn.w	sl, #92	; 0x5c
      _s = s;
    3bc0:	strb.w	fp, [r3, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bc4:	strb.w	sl, [r3, #993]	; 0x3e1
      _s = s;
      _b = b;
    3bc8:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bcc:	strb.w	r8, [r3, #1020]	; 0x3fc
      _s = s;
      _b = b;
    3bd0:	strb.w	sl, [r3, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bd4:	mvn.w	sl, #75	; 0x4b
    3bd8:	strb.w	sl, [r3, #996]	; 0x3e4
      _s = s;
    3bdc:	mov.w	sl, #69	; 0x45
    3be0:	strb.w	sl, [r3, #997]	; 0x3e5
      _b = b;
    3be4:	mvn.w	sl, #17
    3be8:	strb.w	sl, [r3, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bec:	mvn.w	sl, #91	; 0x5b
    3bf0:	strb.w	sl, [r3, #999]	; 0x3e7
      _s = s;
    3bf4:	mov.w	sl, #109	; 0x6d
    3bf8:	strb.w	sl, [r3, #1000]	; 0x3e8
      _b = b;
    3bfc:	mvn.w	sl, #13
    3c00:	strb.w	sl, [r3, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c04:	mov.w	sl, #74	; 0x4a
    3c08:	strb.w	sl, [r3, #1003]	; 0x3eb
      _b = b;
    3c0c:	mvn.w	sl, #18
    3c10:	strb.w	sl, [r3, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c14:	mov.w	sl, #73	; 0x49
    3c18:	strb.w	sl, [r3, #1006]	; 0x3ee
      _b = b;
    3c1c:	mvn.w	sl, #75	; 0x4b
    3c20:	strb.w	sl, [r3, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c24:	mvn.w	sl, #120	; 0x78
    3c28:	strb.w	sl, [r3, #1008]	; 0x3f0
      _s = s;
    3c2c:	mov.w	sl, #90	; 0x5a
    3c30:	strb.w	sl, [r3, #1009]	; 0x3f1
      _b = b;
    3c34:	mvn.w	sl, #30
    3c38:	strb.w	sl, [r3, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c3c:	mvn.w	sl, #111	; 0x6f
    3c40:	strb.w	sl, [r3, #1011]	; 0x3f3
      _s = s;
    3c44:	mvn.w	sl, #37	; 0x25
    3c48:	strb.w	sl, [r3, #1012]	; 0x3f4
      _b = b;
    3c4c:	mvn.w	sl, #58	; 0x3a
    3c50:	strb.w	sl, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c54:	mvn.w	sl, #84	; 0x54
    3c58:	strb.w	sl, [r3, #1015]	; 0x3f7
      _b = b;
    3c5c:	mvn.w	sl, #34	; 0x22
    3c60:	strb.w	sl, [r3, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c64:	mvn.w	sl, #25
    3c68:	strb.w	sl, [r3, #1018]	; 0x3fa
      _b = b;
    3c6c:	mvn.w	sl, #43	; 0x2b
    3c70:	strb.w	sl, [r3, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c74:	mvn.w	sl, #84	; 0x54
    3c78:	strb.w	sl, [r3, #1021]	; 0x3fd
      _b = b;
    3c7c:	mvn.w	sl, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c80:	strb.w	r6, [r3, #1023]	; 0x3ff
      _s = s;
      _b = b;
    3c84:	strb.w	sl, [r3, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c88:	mvn.w	sl, #84	; 0x54
    3c8c:	strb.w	r1, [r3, #1051]	; 0x41b
    3c90:	strb.w	sl, [r3, #1024]	; 0x400
      _b = b;
    3c94:	mvn.w	sl, #13
    3c98:	strb.w	sl, [r3, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c9c:	mvn.w	sl, #106	; 0x6a
    3ca0:	strb.w	sl, [r3, #1026]	; 0x402
      _s = s;
    3ca4:	mvn.w	sl, #99	; 0x63
    3ca8:	strb.w	sl, [r3, #1027]	; 0x403
      _b = b;
    3cac:	mvn.w	sl, #30
    3cb0:	strb.w	sl, [r3, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cb4:	mvn.w	sl, #85	; 0x55
    3cb8:	strb.w	sl, [r3, #1029]	; 0x405
      _s = s;
    3cbc:	mvn.w	sl, #101	; 0x65
    3cc0:	strb.w	sl, [r3, #1030]	; 0x406
      _b = b;
    3cc4:	mvn.w	sl, #21
    3cc8:	strb.w	sl, [r3, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ccc:	mvn.w	sl, #82	; 0x52
    3cd0:	strb.w	sl, [r3, #1032]	; 0x408
      _s = s;
    3cd4:	mov.w	sl, #103	; 0x67
    3cd8:	strb.w	sl, [r3, #1033]	; 0x409
      _b = b;
    3cdc:	mvn.w	sl, #24
    3ce0:	strb.w	sl, [r3, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ce4:	mvn.w	sl, #70	; 0x46
    3ce8:	strb.w	sl, [r3, #1035]	; 0x40b
      _s = s;
    3cec:	mov.w	sl, #76	; 0x4c
    3cf0:	strb.w	sl, [r3, #1036]	; 0x40c
      _b = b;
    3cf4:	mvn.w	sl, #101	; 0x65
    3cf8:	strb.w	sl, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cfc:	mov.w	sl, #31
    3d00:	strb.w	sl, [r3, #1039]	; 0x40f
      _b = b;
    3d04:	mvn.w	sl, #119	; 0x77
    3d08:	strb.w	sl, [r3, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d0c:	mvn.w	sl, #104	; 0x68
    3d10:	strb.w	sl, [r3, #1041]	; 0x411
      _s = s;
      _b = b;
    3d14:	mov.w	sl, #111	; 0x6f
    3d18:	strb.w	sl, [r3, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d1c:	mvn.w	sl, #96	; 0x60
    3d20:	strb.w	sl, [r3, #1044]	; 0x414
      _s = s;
    3d24:	mov.w	sl, #95	; 0x5f
    3d28:	strb.w	sl, [r3, #1045]	; 0x415
      _b = b;
    3d2c:	mvn.w	sl, #55	; 0x37
    3d30:	strb.w	sl, [r3, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d34:	mvn.w	sl, #53	; 0x35
    3d38:	strb.w	sl, [r3, #1047]	; 0x417
      _s = s;
    3d3c:	mov.w	sl, #47	; 0x2f
    3d40:	strb.w	sl, [r3, #1048]	; 0x418
      _b = b;
    3d44:	mvn.w	sl, #51	; 0x33
    3d48:	strb.w	sl, [r3, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d4c:	mvn.w	sl, #56	; 0x38
    3d50:	strb.w	sl, [r3, #1050]	; 0x41a
      _s = s;
      _b = b;
    3d54:	mvn.w	sl, #28
    3d58:	strb.w	sl, [r3, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d5c:	mvn.w	sl, #73	; 0x49
    3d60:	strb.w	sl, [r3, #1053]	; 0x41d
      _s = s;
    3d64:	mvn.w	sl, #86	; 0x56
    3d68:	strb.w	sl, [r3, #1054]	; 0x41e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d6c:	mov.w	sl, #117	; 0x75
    3d70:	strb.w	sl, [r3, #1038]	; 0x40e
      _s = s;
    3d74:	mov.w	sl, #107	; 0x6b
    3d78:	strb.w	sl, [r3, #1042]	; 0x412
      _b = b;
    3d7c:	mvn.w	sl, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d80:	strb.w	r1, [r3, #1080]	; 0x438
      _s = s;
      _b = b;
    3d84:	strb.w	sl, [r3, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d88:	mvn.w	sl, #92	; 0x5c
    3d8c:	strb.w	r0, [r3, #1083]	; 0x43b
    3d90:	strb.w	sl, [r3, #1056]	; 0x420
      _s = s;
    3d94:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d98:	strb.w	r6, [r3, #1086]	; 0x43e
      _s = s;
    3d9c:	strb.w	sl, [r3, #1057]	; 0x421
      _b = b;
    3da0:	mvn.w	sl, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3da4:	strb.w	r8, [r3, #1087]	; 0x43f
      _b = b;
    3da8:	strb.w	sl, [r3, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dac:	mvn.w	sl, #90	; 0x5a
    3db0:	strb.w	sl, [r3, #1059]	; 0x423
      _s = s;
    3db4:	mvn.w	sl, #32
    3db8:	strb.w	sl, [r3, #1060]	; 0x424
      _b = b;
    3dbc:	mvn.w	sl, #25
    3dc0:	strb.w	sl, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dc4:	mvn.w	sl, #97	; 0x61
    3dc8:	strb.w	sl, [r3, #1062]	; 0x426
      _s = s;
    3dcc:	mvn.w	sl, #70	; 0x46
    3dd0:	strb.w	sl, [r3, #1063]	; 0x427
      _b = b;
    3dd4:	mvn.w	sl, #19
    3dd8:	strb.w	sl, [r3, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ddc:	mvn.w	sl, #65	; 0x41
    3de0:	strb.w	sl, [r3, #1065]	; 0x429
      _s = s;
    3de4:	mov.w	sl, #119	; 0x77
    3de8:	strb.w	sl, [r3, #1066]	; 0x42a
      _b = b;
    3dec:	mvn.w	sl, #16
    3df0:	strb.w	sl, [r3, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3df4:	mvn.w	sl, #66	; 0x42
    3df8:	strb.w	sl, [r3, #1068]	; 0x42c
      _s = s;
    3dfc:	mvn.w	sl, #92	; 0x5c
    3e00:	strb.w	sl, [r3, #1069]	; 0x42d
      _b = b;
    3e04:	mvn.w	sl, #21
    3e08:	strb.w	sl, [r3, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e0c:	mvn.w	sl, #71	; 0x47
    3e10:	strb.w	sl, [r3, #1071]	; 0x42f
      _s = s;
    3e14:	mvn.w	sl, #80	; 0x50
    3e18:	strb.w	sl, [r3, #1072]	; 0x430
      _b = b;
    3e1c:	mvn.w	sl, #10
    3e20:	strb.w	sl, [r3, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e24:	mvn.w	sl, #88	; 0x58
    3e28:	strb.w	sl, [r3, #1074]	; 0x432
      _s = s;
    3e2c:	mov.w	sl, #92	; 0x5c
    3e30:	strb.w	sl, [r3, #1075]	; 0x433
      _b = b;
    3e34:	mvn.w	sl, #13
    3e38:	strb.w	sl, [r3, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e3c:	mvn.w	sl, #119	; 0x77
    3e40:	strb.w	sl, [r3, #1077]	; 0x435
      _s = s;
      _b = b;
    3e44:	mvn.w	sl, #19
    3e48:	strb.w	sl, [r3, #1079]	; 0x437
    3e4c:	mvn.w	sl, #7
    3e50:	strb.w	sl, [r3, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e54:	mvn.w	sl, #109	; 0x6d
    3e58:	strb.w	sl, [r3, #1084]	; 0x43c
      _b = b;
    3e5c:	mvn.w	sl, #15
    3e60:	strb.w	sl, [r3, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e64:	mov.w	sl, #42	; 0x2a
    3e68:	strb.w	sl, [r3, #1078]	; 0x436
    3e6c:	mov.w	sl, #89	; 0x59
    3e70:	strb.w	sl, [r3, #1081]	; 0x439
      _b = b;
    3e74:	mvn.w	sl, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e78:	strb.w	ip, [r3, #1090]	; 0x442
      _b = b;
    3e7c:	strb.w	sl, [r3, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e80:	mvn.w	sl, #107	; 0x6b
      _s = s;
      _b = b;
    3e84:	strb.w	lr, [r3, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e88:	strb.w	sl, [r3, #1089]	; 0x441
      _s = s;
    3e8c:	mvn.w	sl, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e90:	strb.w	r6, [r3, #1092]	; 0x444
      _s = s;
    3e94:	strb.w	sl, [r3, #1093]	; 0x445
      _b = b;
    3e98:	mvn.w	sl, #42	; 0x2a
    3e9c:	strb.w	r5, [r3, #1106]	; 0x452
    3ea0:	strb.w	sl, [r3, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ea4:	mvn.w	sl, #118	; 0x76
    3ea8:	strb.w	r6, [r3, #1113]	; 0x459
    3eac:	strb.w	sl, [r3, #1095]	; 0x447
      _s = s;
    3eb0:	mvn.w	sl, #65	; 0x41
    3eb4:	strb.w	sl, [r3, #1096]	; 0x448
      _b = b;
    3eb8:	mvn.w	sl, #19
    3ebc:	strb.w	sl, [r3, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ec0:	mvn.w	sl, #109	; 0x6d
    3ec4:	strb.w	sl, [r3, #1098]	; 0x44a
      _s = s;
    3ec8:	mvn.w	sl, #103	; 0x67
    3ecc:	strb.w	sl, [r3, #1099]	; 0x44b
      _b = b;
    3ed0:	mvn.w	sl, #21
    3ed4:	strb.w	sl, [r3, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ed8:	mvn.w	sl, #93	; 0x5d
    3edc:	strb.w	sl, [r3, #1101]	; 0x44d
      _s = s;
    3ee0:	mvn.w	sl, #51	; 0x33
    3ee4:	strb.w	sl, [r3, #1102]	; 0x44e
      _b = b;
    3ee8:	mvn.w	sl, #46	; 0x2e
    3eec:	strb.w	sl, [r3, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ef0:	mvn.w	sl, #101	; 0x65
    3ef4:	strb.w	sl, [r3, #1104]	; 0x450
      _s = s;
    3ef8:	mov.w	sl, #79	; 0x4f
    3efc:	strb.w	sl, [r3, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f00:	mov.w	sl, #102	; 0x66
    3f04:	strb.w	sl, [r3, #1107]	; 0x453
      _s = s;
    3f08:	mov.w	sl, #103	; 0x67
    3f0c:	strb.w	sl, [r3, #1108]	; 0x454
      _b = b;
    3f10:	mov.w	sl, #86	; 0x56
    3f14:	strb.w	sl, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f18:	mov.w	sl, #111	; 0x6f
    3f1c:	strb.w	sl, [r3, #1111]	; 0x457
      _b = b;
    3f20:	mov.w	sl, #117	; 0x75
    3f24:	strb.w	sl, [r3, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f28:	mov.w	sl, #58	; 0x3a
    3f2c:	strb.w	sl, [r3, #1114]	; 0x45a
      _b = b;
    3f30:	mov.w	sl, #87	; 0x57
    3f34:	strb.w	sl, [r3, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f38:	mov.w	sl, #18
    3f3c:	strb.w	sl, [r3, #1116]	; 0x45c
      _s = s;
    3f40:	mov.w	sl, #74	; 0x4a
    3f44:	strb.w	sl, [r3, #1117]	; 0x45d
      _b = b;
    3f48:	mvn.w	sl, #76	; 0x4c
    3f4c:	strb.w	sl, [r3, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f50:	mov.w	sl, #17
    3f54:	strb.w	sl, [r3, #1119]	; 0x45f
      _s = s;
    3f58:	mov.w	sl, #94	; 0x5e
    3f5c:	strb.w	sl, [r3, #1120]	; 0x460
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f60:	mov.w	sl, #80	; 0x50
    3f64:	strb.w	sl, [r3, #1110]	; 0x456
      _s = s;
      _b = b;
    3f68:	mvn.w	sl, #36	; 0x24
    3f6c:	strb.w	lr, [r3, #1142]	; 0x476
    3f70:	strb.w	sl, [r3, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f74:	mvn.w	sl, #51	; 0x33
    3f78:	strb.w	r9, [r3, #1149]	; 0x47d
    3f7c:	strb.w	sl, [r3, #1122]	; 0x462
      _s = s;
    3f80:	mov.w	sl, #99	; 0x63
    3f84:	strb.w	sl, [r3, #1123]	; 0x463
      _b = b;
    3f88:	mvn.w	sl, #37	; 0x25
    3f8c:	strb.w	sl, [r3, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f90:	mvn.w	sl, #43	; 0x2b
    3f94:	strb.w	sl, [r3, #1125]	; 0x465
      _s = s;
    3f98:	mov.w	sl, #32
    3f9c:	strb.w	sl, [r3, #1126]	; 0x466
      _b = b;
    3fa0:	mvn.w	sl, #25
    3fa4:	strb.w	sl, [r3, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa8:	mvn.w	sl, #70	; 0x46
    3fac:	strb.w	sl, [r3, #1128]	; 0x468
      _s = s;
      _b = b;
    3fb0:	mvn.w	sl, #33	; 0x21
    3fb4:	strb.w	sl, [r3, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fb8:	mvn.w	sl, #96	; 0x60
    3fbc:	strb.w	sl, [r3, #1131]	; 0x46b
      _s = s;
    3fc0:	mvn.w	sl, #18
    3fc4:	strb.w	sl, [r3, #1132]	; 0x46c
      _b = b;
    3fc8:	mvn.w	sl, #24
    3fcc:	strb.w	sl, [r3, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fd0:	mvn.w	sl, #83	; 0x53
    3fd4:	strb.w	sl, [r3, #1134]	; 0x46e
      _s = s;
    3fd8:	mov.w	sl, #99	; 0x63
    3fdc:	strb.w	sl, [r3, #1135]	; 0x46f
      _b = b;
    3fe0:	mvn.w	sl, #15
    3fe4:	strb.w	sl, [r3, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fe8:	mvn.w	sl, #55	; 0x37
    3fec:	strb.w	sl, [r3, #1137]	; 0x471
      _s = s;
    3ff0:	mov.w	sl, #60	; 0x3c
    3ff4:	strb.w	sl, [r3, #1138]	; 0x472
      _b = b;
    3ff8:	mvn.w	sl, #17
    3ffc:	strb.w	sl, [r3, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4000:	mvn.w	sl, #49	; 0x31
    4004:	strb.w	sl, [r3, #1140]	; 0x474
      _s = s;
    4008:	mov.w	sl, #58	; 0x3a
    400c:	strb.w	sl, [r3, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4010:	mvn.w	sl, #62	; 0x3e
    4014:	strb.w	sl, [r3, #1143]	; 0x477
      _s = s;
    4018:	mvn.w	sl, #18
    401c:	strb.w	sl, [r3, #1144]	; 0x478
      _b = b;
    4020:	mvn.w	sl, #12
    4024:	strb.w	sl, [r3, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4028:	mvn.w	sl, #75	; 0x4b
    402c:	strb.w	sl, [r3, #1146]	; 0x47a
      _s = s;
    4030:	mov.w	sl, #78	; 0x4e
    4034:	strb.w	sl, [r3, #1147]	; 0x47b
      _b = b;
    4038:	mvn.w	sl, #11
    403c:	strb.w	sl, [r3, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4040:	mov.w	sl, #72	; 0x48
    4044:	strb.w	sl, [r3, #1150]	; 0x47e
      _b = b;
    4048:	mvn.w	sl, #18
    404c:	strb.w	sl, [r3, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4050:	mvn.w	sl, #126	; 0x7e
    4054:	strb.w	sl, [r3, #1152]	; 0x480
      _s = s;
    4058:	mvn.w	sl, #84	; 0x54
    405c:	strb.w	sl, [r3, #1153]	; 0x481
    4060:	mov.w	sl, #67	; 0x43
    4064:	strb.w	sl, [r3, #1129]	; 0x469
      _b = b;
    4068:	mvn.w	sl, #19
    406c:	strb.w	lr, [r3, #1163]	; 0x48b
    4070:	strb.w	sl, [r3, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4074:	mvn.w	sl, #122	; 0x7a
      _s = s;
    4078:	strb.w	fp, [r3, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    407c:	strb.w	sl, [r3, #1155]	; 0x483
      _s = s;
    4080:	mov.w	sl, #100	; 0x64
    4084:	strb.w	sl, [r3, #1156]	; 0x484
      _b = b;
    4088:	mvn.w	sl, #22
    408c:	strb.w	sl, [r3, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4090:	mvn.w	sl, #111	; 0x6f
    4094:	strb.w	sl, [r3, #1158]	; 0x486
      _s = s;
    4098:	mov.w	sl, #125	; 0x7d
    409c:	strb.w	sl, [r3, #1159]	; 0x487
      _b = b;
    40a0:	mvn.w	sl, #28
    40a4:	strb.w	sl, [r3, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40a8:	mvn.w	sl, #108	; 0x6c
    40ac:	strb.w	sl, [r3, #1161]	; 0x489
      _s = s;
    40b0:	mvn.w	sl, #110	; 0x6e
    40b4:	strb.w	sl, [r3, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40b8:	mvn.w	sl, #103	; 0x67
    40bc:	strb.w	sl, [r3, #1164]	; 0x48c
      _s = s;
      _b = b;
    40c0:	mvn.w	sl, #31
    40c4:	strb.w	sl, [r3, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40c8:	mvn.w	sl, #118	; 0x76
    40cc:	strb.w	sl, [r3, #1167]	; 0x48f
      _s = s;
    40d0:	mvn.w	sl, #95	; 0x5f
    40d4:	strb.w	sl, [r3, #1168]	; 0x490
      _b = b;
    40d8:	mvn.w	sl, #16
    40dc:	strb.w	sl, [r3, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40e0:	mvn.w	sl, #109	; 0x6d
    40e4:	strb.w	sl, [r3, #1170]	; 0x492
      _s = s;
    40e8:	mvn.w	sl, #75	; 0x4b
    40ec:	strb.w	sl, [r3, #1171]	; 0x493
      _b = b;
    40f0:	mvn.w	sl, #18
    40f4:	strb.w	sl, [r3, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40f8:	mvn.w	sl, #111	; 0x6f
    40fc:	strb.w	sl, [r3, #1173]	; 0x495
      _s = s;
    4100:	mov.w	sl, #97	; 0x61
    4104:	strb.w	sl, [r3, #1174]	; 0x496
      _b = b;
    4108:	mvn.w	sl, #64	; 0x40
    410c:	strb.w	sl, [r3, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4110:	mov.w	sl, #55	; 0x37
    4114:	strb.w	sl, [r3, #1176]	; 0x498
      _s = s;
    4118:	mov.w	sl, #94	; 0x5e
    411c:	strb.w	sl, [r3, #1177]	; 0x499
      _b = b;
    4120:	mvn.w	sl, #99	; 0x63
    4124:	strb.w	sl, [r3, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4128:	mov.w	sl, #44	; 0x2c
    412c:	strb.w	sl, [r3, #1179]	; 0x49b
      _s = s;
    4130:	mvn.w	sl, #33	; 0x21
    4134:	strb.w	sl, [r3, #1180]	; 0x49c
      _b = b;
    4138:	mov.w	sl, #111	; 0x6f
    413c:	strb.w	sl, [r3, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4140:	mov.w	sl, #85	; 0x55
    4144:	strb.w	sl, [r3, #1182]	; 0x49e
      _s = s;
    4148:	mvn.w	sl, #126	; 0x7e
    414c:	strb.w	sl, [r3, #1183]	; 0x49f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4150:	mov.w	sl, #108	; 0x6c
    4154:	strb.w	sl, [r3, #1185]	; 0x4a1
      _s = s;
    4158:	mvn.w	sl, #82	; 0x52
    415c:	strb.w	sl, [r3, #1186]	; 0x4a2
      _b = b;
    4160:	mov.w	sl, #53	; 0x35
    4164:	strb.w	sl, [r3, #1184]	; 0x4a0
    4168:	mov.w	sl, #47	; 0x2f
    416c:	strb.w	sl, [r3, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4170:	mov.w	sl, #18
    4174:	strb.w	sl, [r3, #1188]	; 0x4a4
      _s = s;
    4178:	mvn.w	sl, #94	; 0x5e
    417c:	strb.w	sl, [r3, #1189]	; 0x4a5
      _b = b;
    4180:	mov.w	sl, #101	; 0x65
    4184:	strb.w	sl, [r3, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4188:	mvn.w	sl, #30
    418c:	strb.w	sl, [r3, #1191]	; 0x4a7
      _s = s;
    4190:	mov.w	sl, #95	; 0x5f
    4194:	strb.w	sl, [r3, #1192]	; 0x4a8
      _b = b;
    4198:	mvn.w	sl, #89	; 0x59
    419c:	strb.w	sl, [r3, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41a0:	mvn.w	sl, #42	; 0x2a
    41a4:	strb.w	sl, [r3, #1194]	; 0x4aa
      _s = s;
      _b = b;
    41a8:	mvn.w	sl, #29
    41ac:	strb.w	sl, [r3, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41b0:	mvn.w	sl, #39	; 0x27
    41b4:	strb.w	sl, [r3, #1197]	; 0x4ad
      _s = s;
    41b8:	mov.w	sl, #33	; 0x21
    41bc:	strb.w	sl, [r3, #1198]	; 0x4ae
      _b = b;
    41c0:	mvn.w	sl, #21
    41c4:	strb.w	sl, [r3, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41c8:	mvn.w	sl, #52	; 0x34
    41cc:	strb.w	sl, [r3, #1200]	; 0x4b0
      _s = s;
    41d0:	mov.w	sl, #41	; 0x29
    41d4:	strb.w	sl, [r3, #1201]	; 0x4b1
      _b = b;
    41d8:	mvn.w	sl, #26
    41dc:	strb.w	sl, [r3, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41e0:	mvn.w	sl, #95	; 0x5f
    41e4:	strb.w	sl, [r3, #1203]	; 0x4b3
      _s = s;
    41e8:	mvn.w	sl, #75	; 0x4b
    41ec:	strb.w	sl, [r3, #1204]	; 0x4b4
      _b = b;
    41f0:	mvn.w	sl, #22
    41f4:	strb.w	sl, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41f8:	mvn.w	sl, #59	; 0x3b
    41fc:	strb.w	sl, [r3, #1206]	; 0x4b6
      _s = s;
    4200:	mov.w	sl, #111	; 0x6f
    4204:	strb.w	sl, [r3, #1207]	; 0x4b7
      _b = b;
    4208:	mvn.w	sl, #18
    420c:	strb.w	sl, [r3, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4210:	mvn.w	sl, #65	; 0x41
    4214:	strb.w	sl, [r3, #1209]	; 0x4b9
      _s = s;
    4218:	mov.w	sl, #48	; 0x30
    421c:	strb.w	sl, [r3, #1210]	; 0x4ba
      _b = b;
    4220:	mvn.w	sl, #18
    4224:	strb.w	sl, [r3, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4228:	mvn.w	sl, #41	; 0x29
    422c:	strb.w	sl, [r3, #1212]	; 0x4bc
      _s = s;
      _b = b;
    4230:	mvn.w	sl, #17
    4234:	strb.w	sl, [r3, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4238:	mvn.w	sl, #59	; 0x3b
    423c:	strb.w	sl, [r3, #1215]	; 0x4bf
      _s = s;
    4240:	mvn.w	sl, #41	; 0x29
    4244:	strb.w	sl, [r3, #1216]	; 0x4c0
      _b = b;
    4248:	mvn.w	sl, #11
    424c:	strb.w	sl, [r3, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4250:	mvn.w	sl, #78	; 0x4e
    4254:	strb.w	sl, [r3, #1218]	; 0x4c2
      _s = s;
    4258:	mov.w	sl, #122	; 0x7a
    425c:	strb.w	sl, [r3, #1219]	; 0x4c3
    4260:	mov.w	sl, #39	; 0x27
    4264:	strb.w	sl, [r3, #1195]	; 0x4ab
    4268:	strb.w	sl, [r3, #1213]	; 0x4bd
      _b = b;
    426c:	mvn.w	sl, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4270:	strb.w	r5, [r3, #1227]	; 0x4cb
      _s = s;
      _b = b;
    4274:	strb.w	sl, [r3, #1220]	; 0x4c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4278:	mvn.w	sl, #109	; 0x6d
    427c:	strb.w	r6, [r3, #1245]	; 0x4dd
    4280:	strb.w	sl, [r3, #1221]	; 0x4c5
      _s = s;
    4284:	mov.w	sl, #55	; 0x37
    4288:	strb.w	sl, [r3, #1222]	; 0x4c6
      _b = b;
    428c:	mvn.w	sl, #17
    4290:	strb.w	sl, [r3, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4294:	mvn.w	sl, #126	; 0x7e
    4298:	strb.w	sl, [r3, #1224]	; 0x4c8
      _s = s;
    429c:	mvn.w	sl, #95	; 0x5f
    42a0:	strb.w	sl, [r3, #1225]	; 0x4c9
      _b = b;
    42a4:	mvn.w	sl, #24
    42a8:	strb.w	sl, [r3, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42ac:	mov.w	sl, #105	; 0x69
    42b0:	strb.w	sl, [r3, #1228]	; 0x4cc
      _b = b;
    42b4:	mvn.w	sl, #11
    42b8:	strb.w	sl, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42bc:	mvn.w	sl, #119	; 0x77
    42c0:	strb.w	sl, [r3, #1230]	; 0x4ce
      _s = s;
    42c4:	mov.w	sl, #99	; 0x63
    42c8:	strb.w	sl, [r3, #1231]	; 0x4cf
      _b = b;
    42cc:	mvn.w	sl, #11
    42d0:	strb.w	sl, [r3, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42d4:	mvn.w	sl, #108	; 0x6c
    42d8:	strb.w	sl, [r3, #1233]	; 0x4d1
      _s = s;
    42dc:	mov.w	sl, #103	; 0x67
    42e0:	strb.w	sl, [r3, #1234]	; 0x4d2
      _b = b;
    42e4:	mvn.w	sl, #22
    42e8:	strb.w	sl, [r3, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42ec:	mvn.w	sl, #104	; 0x68
    42f0:	strb.w	sl, [r3, #1236]	; 0x4d4
      _s = s;
    42f4:	mov.w	sl, #79	; 0x4f
    42f8:	strb.w	sl, [r3, #1237]	; 0x4d5
      _b = b;
    42fc:	mvn.w	sl, #18
    4300:	strb.w	sl, [r3, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4304:	mvn.w	sl, #110	; 0x6e
    4308:	strb.w	sl, [r3, #1239]	; 0x4d7
      _s = s;
    430c:	mov.w	sl, #119	; 0x77
    4310:	strb.w	sl, [r3, #1240]	; 0x4d8
      _b = b;
    4314:	mvn.w	sl, #11
    4318:	strb.w	sl, [r3, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    431c:	mvn.w	sl, #100	; 0x64
    4320:	strb.w	sl, [r3, #1242]	; 0x4da
      _s = s;
    4324:	mvn.w	sl, #103	; 0x67
    4328:	strb.w	sl, [r3, #1243]	; 0x4db
      _b = b;
    432c:	mvn.w	sl, #18
    4330:	strb.w	sl, [r3, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4334:	mov.w	sl, #88	; 0x58
    4338:	strb.w	sl, [r3, #1246]	; 0x4de
      _b = b;
    433c:	mvn.w	sl, #80	; 0x50
    4340:	strb.w	sl, [r3, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4344:	mov.w	sl, #47	; 0x2f
    4348:	strb.w	sl, [r3, #1248]	; 0x4e0
      _s = s;
    434c:	mov.w	sl, #124	; 0x7c
    4350:	strb.w	sl, [r3, #1249]	; 0x4e1
      _b = b;
    4354:	mov.w	sl, #117	; 0x75
    4358:	strb.w	sl, [r3, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    435c:	mov.w	sl, #52	; 0x34
    4360:	strb.w	sl, [r3, #1251]	; 0x4e3
      _s = s;
    4364:	mvn.w	sl, #84	; 0x54
    4368:	strb.w	sl, [r3, #1252]	; 0x4e4
      _b = b;
    436c:	mov.w	sl, #98	; 0x62
    4370:	strb.w	lr, [r3, #1280]	; 0x500
    4374:	strb.w	sl, [r3, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4378:	mvn.w	sl, #48	; 0x30
    437c:	strb.w	sl, [r3, #1255]	; 0x4e7
      _b = b;
    4380:	mov.w	sl, #70	; 0x46
    4384:	strb.w	sl, [r3, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4388:	mvn.w	sl, #22
    438c:	strb.w	sl, [r3, #1257]	; 0x4e9
      _s = s;
      _b = b;
    4390:	mov.w	sl, #14
    4394:	strb.w	sl, [r3, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4398:	mov.w	sl, #18
    439c:	strb.w	sl, [r3, #1260]	; 0x4ec
      _s = s;
    43a0:	mvn.w	sl, #49	; 0x31
    43a4:	strb.w	sl, [r3, #1261]	; 0x4ed
      _b = b;
    43a8:	mov.w	sl, #116	; 0x74
    43ac:	strb.w	sl, [r3, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43b0:	mvn.w	sl, #34	; 0x22
    43b4:	strb.w	sl, [r3, #1263]	; 0x4ef
      _s = s;
    43b8:	mov.w	sl, #40	; 0x28
    43bc:	strb.w	sl, [r3, #1264]	; 0x4f0
      _b = b;
    43c0:	mvn.w	sl, #43	; 0x2b
    43c4:	strb.w	sl, [r3, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43c8:	strb.w	sl, [r3, #1266]	; 0x4f2
      _s = s;
    43cc:	mov.w	sl, #39	; 0x27
    43d0:	strb.w	sl, [r3, #1267]	; 0x4f3
      _b = b;
    43d4:	mvn.w	sl, #27
    43d8:	strb.w	sl, [r3, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43dc:	mvn.w	sl, #39	; 0x27
    43e0:	strb.w	sl, [r3, #1269]	; 0x4f5
      _s = s;
    43e4:	mov.w	sl, #33	; 0x21
    43e8:	strb.w	sl, [r3, #1270]	; 0x4f6
      _b = b;
    43ec:	mvn.w	sl, #22
    43f0:	strb.w	sl, [r3, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43f4:	mov.w	sl, #59	; 0x3b
    43f8:	strb.w	sl, [r3, #1273]	; 0x4f9
      _b = b;
    43fc:	mvn.w	sl, #25
    4400:	strb.w	sl, [r3, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4404:	mvn.w	sl, #105	; 0x69
    4408:	strb.w	sl, [r3, #1275]	; 0x4fb
      _s = s;
    440c:	mvn.w	sl, #101	; 0x65
    4410:	strb.w	sl, [r3, #1276]	; 0x4fc
      _b = b;
    4414:	mvn.w	sl, #24
    4418:	strb.w	sl, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    441c:	mvn.w	sl, #72	; 0x48
    4420:	strb.w	sl, [r3, #1278]	; 0x4fe
      _s = s;
    4424:	mov.w	sl, #122	; 0x7a
    4428:	strb.w	sl, [r3, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    442c:	mvn.w	sl, #54	; 0x36
    4430:	strb.w	sl, [r3, #1281]	; 0x501
      _s = s;
    4434:	mov.w	sl, #80	; 0x50
    4438:	strb.w	sl, [r3, #1282]	; 0x502
      _b = b;
    443c:	mvn.w	sl, #21
    4440:	strb.w	sl, [r3, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4444:	mvn.w	sl, #51	; 0x33
    4448:	strb.w	sl, [r3, #1284]	; 0x504
      _s = s;
    444c:	mov.w	sl, #75	; 0x4b
    4450:	strb.w	sl, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4454:	mov.w	sl, #12
    4458:	strb.w	sl, [r3, #1254]	; 0x4e6
      _s = s;
    445c:	mov.w	sl, #36	; 0x24
    4460:	strb.w	sl, [r3, #1258]	; 0x4ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4464:	mvn.w	sl, #60	; 0x3c
    4468:	strb.w	sl, [r3, #1272]	; 0x4f8
      _s = s;
      _b = b;
    446c:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4470:	strb.w	r5, [r3, #1299]	; 0x513
      _s = s;
      _b = b;
    4474:	strb.w	sl, [r3, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4478:	mvn.w	sl, #57	; 0x39
      _s = s;
    447c:	strb.w	r9, [r3, #1312]	; 0x520
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4480:	strb.w	sl, [r3, #1287]	; 0x507
      _s = s;
    4484:	mvn.w	sl, #55	; 0x37
    4488:	strb.w	sl, [r3, #1288]	; 0x508
      _b = b;
    448c:	mvn.w	sl, #12
    4490:	strb.w	sl, [r3, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4494:	mvn.w	sl, #82	; 0x52
    4498:	strb.w	sl, [r3, #1290]	; 0x50a
      _s = s;
    449c:	mov.w	sl, #124	; 0x7c
    44a0:	strb.w	sl, [r3, #1291]	; 0x50b
      _b = b;
    44a4:	mvn.w	sl, #12
    44a8:	strb.w	sl, [r3, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44ac:	mvn.w	sl, #108	; 0x6c
    44b0:	strb.w	sl, [r3, #1293]	; 0x50d
      _s = s;
      _b = b;
    44b4:	mvn.w	sl, #22
    44b8:	strb.w	sl, [r3, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44bc:	mvn.w	sl, #127	; 0x7f
    44c0:	strb.w	sl, [r3, #1296]	; 0x510
      _s = s;
    44c4:	mov.w	sl, #105	; 0x69
    44c8:	strb.w	sl, [r3, #1297]	; 0x511
      _b = b;
    44cc:	mvn.w	sl, #7
    44d0:	strb.w	sl, [r3, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44d4:	mvn.w	sl, #100	; 0x64
    44d8:	strb.w	sl, [r3, #1300]	; 0x514
      _b = b;
    44dc:	mvn.w	sl, #21
    44e0:	strb.w	sl, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e4:	mvn.w	sl, #99	; 0x63
    44e8:	strb.w	sl, [r3, #1302]	; 0x516
      _s = s;
    44ec:	mvn.w	sl, #61	; 0x3d
    44f0:	strb.w	sl, [r3, #1303]	; 0x517
      _b = b;
    44f4:	mvn.w	sl, #26
    44f8:	strb.w	sl, [r3, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44fc:	mvn.w	sl, #96	; 0x60
    4500:	strb.w	sl, [r3, #1305]	; 0x519
      _s = s;
    4504:	mov.w	sl, #99	; 0x63
    4508:	strb.w	sl, [r3, #1306]	; 0x51a
      _b = b;
    450c:	mvn.w	sl, #21
    4510:	strb.w	sl, [r3, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4514:	mvn.w	sl, #96	; 0x60
    4518:	strb.w	sl, [r3, #1308]	; 0x51c
      _s = s;
    451c:	mov.w	sl, #96	; 0x60
    4520:	strb.w	sl, [r3, #1309]	; 0x51d
      _b = b;
    4524:	mvn.w	sl, #23
    4528:	strb.w	sl, [r3, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    452c:	mvn.w	sl, #90	; 0x5a
    4530:	strb.w	sl, [r3, #1311]	; 0x51f
      _s = s;
      _b = b;
    4534:	mvn.w	sl, #21
    4538:	strb.w	sl, [r3, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    453c:	mvn.w	sl, #98	; 0x62
    4540:	strb.w	sl, [r3, #1314]	; 0x522
      _s = s;
    4544:	mvn.w	sl, #62	; 0x3e
    4548:	strb.w	sl, [r3, #1315]	; 0x523
      _b = b;
    454c:	mvn.w	sl, #22
    4550:	strb.w	sl, [r3, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4554:	mvn.w	sl, #111	; 0x6f
    4558:	strb.w	sl, [r3, #1317]	; 0x525
      _s = s;
    455c:	mvn.w	sl, #96	; 0x60
    4560:	strb.w	sl, [r3, #1318]	; 0x526
    4564:	mov.w	sl, #56	; 0x38
    4568:	strb.w	sl, [r3, #1294]	; 0x50e
      _b = b;
    456c:	mvn.w	sl, #71	; 0x47
    4570:	strb.w	sl, [r3, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4574:	mov.w	sl, #114	; 0x72
    4578:	strb.w	sl, [r3, #1320]	; 0x528
      _s = s;
    457c:	mov.w	sl, #121	; 0x79
    4580:	strb.w	sl, [r3, #1321]	; 0x529
      _b = b;
    4584:	mov.w	sl, #120	; 0x78
    4588:	strb.w	sl, [r3, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    458c:	mov.w	sl, #36	; 0x24
    4590:	strb.w	sl, [r3, #1323]	; 0x52b
      _s = s;
    4594:	mvn.w	sl, #49	; 0x31
    4598:	strb.w	sl, [r3, #1324]	; 0x52c
      _b = b;
    459c:	mov.w	sl, #73	; 0x49
    45a0:	strb.w	sl, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45a4:	mov.w	sl, #105	; 0x69
    45a8:	strb.w	sl, [r3, #1326]	; 0x52e
      _s = s;
    45ac:	mvn.w	sl, #85	; 0x55
    45b0:	strb.w	sl, [r3, #1327]	; 0x52f
      _b = b;
    45b4:	mov.w	sl, #88	; 0x58
    45b8:	strb.w	sl, [r3, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45bc:	mov.w	sl, #108	; 0x6c
    45c0:	strb.w	sl, [r3, #1329]	; 0x531
      _s = s;
    45c4:	mvn.w	sl, #67	; 0x43
    45c8:	strb.w	sl, [r3, #1330]	; 0x532
      _b = b;
    45cc:	mov.w	sl, #46	; 0x2e
    45d0:	strb.w	sl, [r3, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45d4:	mov.w	sl, #26
    45d8:	strb.w	sl, [r3, #1332]	; 0x534
      _s = s;
    45dc:	mov.w	sl, #116	; 0x74
    45e0:	strb.w	sl, [r3, #1333]	; 0x535
      _b = b;
    45e4:	mov.w	sl, #92	; 0x5c
    45e8:	strb.w	sl, [r3, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ec:	mvn.w	sl, #6
    45f0:	strb.w	sl, [r3, #1335]	; 0x537
      _s = s;
    45f4:	mov.w	sl, #53	; 0x35
    45f8:	strb.w	sl, [r3, #1336]	; 0x538
      _b = b;
    45fc:	mvn.w	sl, #49	; 0x31
    4600:	strb.w	sl, [r3, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4604:	mvn.w	sl, #38	; 0x26
    4608:	strb.w	sl, [r3, #1338]	; 0x53a
      _s = s;
    460c:	mov.w	sl, #37	; 0x25
    4610:	strb.w	sl, [r3, #1339]	; 0x53b
      _b = b;
    4614:	mvn.w	sl, #24
    4618:	strb.w	sl, [r3, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    461c:	mvn.w	sl, #45	; 0x2d
    4620:	strb.w	sl, [r3, #1341]	; 0x53d
      _s = s;
    4624:	mov.w	sl, #48	; 0x30
    4628:	strb.w	sl, [r3, #1342]	; 0x53e
      _b = b;
    462c:	mvn.w	sl, #25
    4630:	strb.w	sl, [r3, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4634:	mvn.w	sl, #69	; 0x45
    4638:	strb.w	sl, [r3, #1344]	; 0x540
      _s = s;
    463c:	mov.w	sl, #78	; 0x4e
    4640:	strb.w	sl, [r3, #1345]	; 0x541
      _b = b;
    4644:	mvn.w	sl, #25
    4648:	strb.w	sl, [r3, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    464c:	mvn.w	sl, #103	; 0x67
    4650:	strb.w	sl, [r3, #1347]	; 0x543
      _s = s;
    4654:	mvn.w	sl, #56	; 0x38
    4658:	strb.w	sl, [r3, #1348]	; 0x544
      _b = b;
    465c:	mvn.w	sl, #22
    4660:	strb.w	sl, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4664:	mvn.w	sl, #65	; 0x41
    4668:	strb.w	sl, [r3, #1350]	; 0x546
      _s = s;
    466c:	mvn.w	sl, #81	; 0x51
    4670:	strb.w	sl, [r3, #1351]	; 0x547
      _b = b;
    4674:	mvn.w	sl, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4678:	strb.w	r0, [r3, #1368]	; 0x558
      _s = s;
      _b = b;
    467c:	strb.w	sl, [r3, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4680:	mvn.w	sl, #57	; 0x39
    4684:	strb.w	r1, [r3, #1371]	; 0x55b
    4688:	strb.w	sl, [r3, #1353]	; 0x549
      _s = s;
    468c:	mvn.w	sl, #82	; 0x52
    4690:	strb.w	sl, [r3, #1354]	; 0x54a
      _b = b;
    4694:	mvn.w	sl, #15
    4698:	strb.w	sl, [r3, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    469c:	mvn.w	sl, #54	; 0x36
    46a0:	strb.w	sl, [r3, #1356]	; 0x54c
      _s = s;
    46a4:	mov.w	sl, #117	; 0x75
    46a8:	strb.w	sl, [r3, #1357]	; 0x54d
      _b = b;
    46ac:	mvn.w	sl, #14
    46b0:	strb.w	sl, [r3, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46b4:	mvn.w	sl, #59	; 0x3b
    46b8:	strb.w	sl, [r3, #1359]	; 0x54f
      _s = s;
    46bc:	mvn.w	sl, #64	; 0x40
    46c0:	strb.w	sl, [r3, #1360]	; 0x550
      _b = b;
    46c4:	mvn.w	sl, #11
    46c8:	strb.w	sl, [r3, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46cc:	mvn.w	sl, #81	; 0x51
    46d0:	strb.w	sl, [r3, #1362]	; 0x552
      _s = s;
    46d4:	mvn.w	sl, #121	; 0x79
    46d8:	strb.w	sl, [r3, #1363]	; 0x553
      _b = b;
    46dc:	mvn.w	sl, #11
    46e0:	strb.w	sl, [r3, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46e4:	mvn.w	sl, #110	; 0x6e
    46e8:	strb.w	sl, [r3, #1365]	; 0x555
      _s = s;
    46ec:	mov.w	sl, #46	; 0x2e
    46f0:	strb.w	sl, [r3, #1366]	; 0x556
      _b = b;
    46f4:	mvn.w	sl, #19
    46f8:	strb.w	sl, [r3, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46fc:	mvn.w	sl, #59	; 0x3b
    4700:	strb.w	sl, [r3, #1369]	; 0x559
      _b = b;
    4704:	mvn.w	sl, #12
    4708:	strb.w	sl, [r3, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    470c:	mvn.w	sl, #102	; 0x66
    4710:	strb.w	sl, [r3, #1372]	; 0x55c
      _b = b;
    4714:	mvn.w	sl, #8
    4718:	strb.w	sl, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    471c:	mvn.w	sl, #101	; 0x65
    4720:	strb.w	sl, [r3, #1374]	; 0x55e
      _s = s;
    4724:	mvn.w	sl, #90	; 0x5a
    4728:	strb.w	sl, [r3, #1375]	; 0x55f
      _b = b;
    472c:	mvn.w	sl, #19
    4730:	strb.w	sl, [r3, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4734:	mvn.w	sl, #96	; 0x60
    4738:	strb.w	sl, [r3, #1377]	; 0x561
      _s = s;
    473c:	mvn.w	sl, #110	; 0x6e
    4740:	strb.w	sl, [r3, #1378]	; 0x562
      _b = b;
    4744:	mvn.w	sl, #13
    4748:	strb.w	sl, [r3, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    474c:	mvn.w	sl, #77	; 0x4d
    4750:	strb.w	sl, [r3, #1380]	; 0x564
      _s = s;
    4754:	mvn.w	sl, #66	; 0x42
    4758:	strb.w	sl, [r3, #1381]	; 0x565
      _b = b;
    475c:	mvn.w	sl, #19
    4760:	strb.w	sl, [r3, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4764:	mvn.w	sl, #75	; 0x4b
    4768:	strb.w	sl, [r3, #1383]	; 0x567
      _s = s;
    476c:	mvn.w	sl, #106	; 0x6a
    4770:	strb.w	sl, [r3, #1384]	; 0x568
      _b = b;
    4774:	mvn.w	sl, #16
    4778:	strb.w	lr, [r3, #1388]	; 0x56c
    477c:	strb.w	sl, [r3, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4780:	mvn.w	sl, #81	; 0x51
    4784:	strb.w	sl, [r3, #1386]	; 0x56a
      _s = s;
    4788:	mov.w	sl, #113	; 0x71
    478c:	strb.w	sl, [r3, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4790:	mvn.w	sl, #100	; 0x64
    4794:	strb.w	sl, [r3, #1389]	; 0x56d
      _s = s;
    4798:	mvn.w	sl, #94	; 0x5e
    479c:	strb.w	sl, [r3, #1390]	; 0x56e
      _b = b;
    47a0:	mvn.w	sl, #39	; 0x27
    47a4:	strb.w	sl, [r3, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47a8:	mov.w	sl, #103	; 0x67
    47ac:	strb.w	sl, [r3, #1392]	; 0x570
      _s = s;
    47b0:	mov.w	sl, #95	; 0x5f
    47b4:	strb.w	sl, [r3, #1393]	; 0x571
      _b = b;
    47b8:	mov.w	sl, #126	; 0x7e
    47bc:	strb.w	sl, [r3, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47c0:	mov.w	sl, #95	; 0x5f
    47c4:	strb.w	sl, [r3, #1395]	; 0x573
      _s = s;
    47c8:	mov.w	sl, #88	; 0x58
    47cc:	strb.w	sl, [r3, #1396]	; 0x574
      _b = b;
    47d0:	mvn.w	sl, #114	; 0x72
    47d4:	strb.w	sl, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47d8:	mov.w	sl, #120	; 0x78
    47dc:	strb.w	sl, [r3, #1398]	; 0x576
      _s = s;
    47e0:	mvn.w	sl, #58	; 0x3a
    47e4:	strb.w	sl, [r3, #1399]	; 0x577
      _b = b;
    47e8:	mvn.w	sl, #127	; 0x7f
    47ec:	strb.w	sl, [r3, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47f0:	mov.w	sl, #95	; 0x5f
    47f4:	strb.w	sl, [r3, #1401]	; 0x579
      _s = s;
    47f8:	mvn.w	sl, #84	; 0x54
    47fc:	strb.w	sl, [r3, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4800:	mov.w	sl, #113	; 0x71
    4804:	strb.w	sl, [r3, #1404]	; 0x57c
      _s = s;
    4808:	mvn.w	sl, #126	; 0x7e
    480c:	strb.w	sl, [r3, #1405]	; 0x57d
      _b = b;
    4810:	mvn.w	sl, #127	; 0x7f
    4814:	strb.w	sl, [r3, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4818:	mvn.w	sl, #34	; 0x22
    481c:	strb.w	sl, [r3, #1407]	; 0x57f
      _s = s;
    4820:	mov.w	sl, #64	; 0x40
    4824:	strb.w	sl, [r3, #1408]	; 0x580
      _b = b;
    4828:	mvn.w	sl, #90	; 0x5a
    482c:	strb.w	sl, [r3, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4830:	mvn.w	sl, #58	; 0x3a
    4834:	strb.w	sl, [r3, #1410]	; 0x582
      _s = s;
    4838:	mov.w	sl, #72	; 0x48
    483c:	strb.w	sl, [r3, #1411]	; 0x583
      _b = b;
    4840:	mvn.w	sl, #27
    4844:	strb.w	sl, [r3, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4848:	mvn.w	sl, #65	; 0x41
    484c:	strb.w	sl, [r3, #1413]	; 0x585
      _s = s;
    4850:	mov.w	sl, #108	; 0x6c
    4854:	strb.w	sl, [r3, #1414]	; 0x586
      _b = b;
    4858:	mvn.w	sl, #21
    485c:	strb.w	sl, [r3, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4860:	mvn.w	sl, #96	; 0x60
    4864:	strb.w	sl, [r3, #1416]	; 0x588
      _s = s;
    4868:	mvn.w	sl, #102	; 0x66
    486c:	strb.w	sl, [r3, #1417]	; 0x589
      _b = b;
    4870:	mov.w	sl, #82	; 0x52
    4874:	strb.w	sl, [r3, #1403]	; 0x57b
    4878:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    487c:	strb.w	r5, [r3, #1429]	; 0x595
      _b = b;
    4880:	strb.w	sl, [r3, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4884:	mvn.w	sl, #119	; 0x77
      _s = s;
      _b = b;
    4888:	strb.w	lr, [r3, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    488c:	strb.w	sl, [r3, #1419]	; 0x58b
      _s = s;
    4890:	mvn.w	sl, #85	; 0x55
      _b = b;
    4894:	strb.w	lr, [r3, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4898:	strb.w	sl, [r3, #1420]	; 0x58c
      _b = b;
    489c:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48a0:	strb.w	r0, [r3, #1443]	; 0x5a3
      _s = s;
      _b = b;
    48a4:	strb.w	sl, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48a8:	mvn.w	sl, #73	; 0x49
    48ac:	strb.w	sl, [r3, #1422]	; 0x58e
      _s = s;
    48b0:	mov.w	sl, #109	; 0x6d
    48b4:	strb.w	sl, [r3, #1423]	; 0x58f
      _b = b;
    48b8:	mvn.w	sl, #17
    48bc:	strb.w	sl, [r3, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48c0:	mvn.w	sl, #56	; 0x38
    48c4:	strb.w	sl, [r3, #1425]	; 0x591
      _s = s;
    48c8:	mvn.w	sl, #66	; 0x42
    48cc:	strb.w	sl, [r3, #1426]	; 0x592
      _b = b;
    48d0:	mvn.w	sl, #16
    48d4:	strb.w	sl, [r3, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48d8:	mvn.w	sl, #55	; 0x37
    48dc:	strb.w	sl, [r3, #1428]	; 0x594
      _s = s;
      _b = b;
    48e0:	mvn.w	sl, #14
    48e4:	strb.w	sl, [r3, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48e8:	mvn.w	sl, #63	; 0x3f
    48ec:	strb.w	sl, [r3, #1431]	; 0x597
      _s = s;
    48f0:	mvn.w	sl, #81	; 0x51
    48f4:	strb.w	sl, [r3, #1432]	; 0x598
      _b = b;
    48f8:	mvn.w	sl, #13
    48fc:	strb.w	sl, [r3, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4900:	mvn.w	sl, #96	; 0x60
    4904:	strb.w	sl, [r3, #1434]	; 0x59a
      _s = s;
    4908:	mov.w	sl, #124	; 0x7c
    490c:	strb.w	sl, [r3, #1435]	; 0x59b
      _b = b;
    4910:	mvn.w	sl, #15
    4914:	strb.w	sl, [r3, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4918:	mvn.w	sl, #118	; 0x76
    491c:	strb.w	sl, [r3, #1437]	; 0x59d
      _s = s;
    4920:	mov.w	sl, #28
    4924:	strb.w	sl, [r3, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4928:	mvn.w	sl, #121	; 0x79
    492c:	strb.w	sl, [r3, #1440]	; 0x5a0
      _s = s;
    4930:	mvn.w	sl, #83	; 0x53
    4934:	strb.w	sl, [r3, #1441]	; 0x5a1
    4938:	mvn.w	sl, #38	; 0x26
    493c:	strb.w	sl, [r3, #1444]	; 0x5a4
      _b = b;
    4940:	mvn.w	sl, #15
    4944:	strb.w	sl, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4948:	mvn.w	sl, #110	; 0x6e
    494c:	strb.w	sl, [r3, #1446]	; 0x5a6
      _s = s;
    4950:	mvn.w	sl, #58	; 0x3a
    4954:	strb.w	sl, [r3, #1447]	; 0x5a7
      _b = b;
    4958:	mvn.w	sl, #18
    495c:	strb.w	sl, [r3, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4960:	mvn.w	sl, #109	; 0x6d
    4964:	strb.w	sl, [r3, #1449]	; 0x5a9
      _s = s;
      _b = b;
    4968:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    496c:	strb.w	r5, [r3, #1450]	; 0x5aa
      _b = b;
    4970:	strb.w	sl, [r3, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4974:	mvn.w	sl, #68	; 0x44
      _s = s;
    4978:	strb.w	r0, [r3, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    497c:	strb.w	sl, [r3, #1452]	; 0x5ac
      _s = s;
    4980:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4984:	strb.w	r6, [r3, #1464]	; 0x5b8
      _s = s;
    4988:	strb.w	sl, [r3, #1453]	; 0x5ad
      _b = b;
    498c:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4990:	strb.w	r5, [r3, #1470]	; 0x5be
      _s = s;
      _b = b;
    4994:	strb.w	sl, [r3, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4998:	mvn.w	sl, #53	; 0x35
      _s = s;
    499c:	strb.w	lr, [r3, #1471]	; 0x5bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49a0:	strb.w	sl, [r3, #1455]	; 0x5af
      _s = s;
    49a4:	mov.w	sl, #52	; 0x34
      _b = b;
    49a8:	strb.w	r9, [r3, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49ac:	strb.w	sl, [r3, #1456]	; 0x5b0
      _b = b;
    49b0:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49b4:	strb.w	r5, [r3, #1473]	; 0x5c1
      _s = s;
      _b = b;
    49b8:	strb.w	sl, [r3, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49bc:	mvn.w	sl, #50	; 0x32
      _s = s;
    49c0:	strb.w	r6, [r3, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49c4:	strb.w	sl, [r3, #1458]	; 0x5b2
      _s = s;
    49c8:	mov.w	sl, #62	; 0x3e
    49cc:	strb.w	sl, [r3, #1459]	; 0x5b3
      _b = b;
    49d0:	mvn.w	sl, #9
    49d4:	strb.w	sl, [r3, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49d8:	mvn.w	sl, #77	; 0x4d
    49dc:	strb.w	sl, [r3, #1461]	; 0x5b5
      _s = s;
      _b = b;
    49e0:	mvn.w	sl, #34	; 0x22
    49e4:	strb.w	sl, [r3, #1463]	; 0x5b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49e8:	mvn.w	sl, #46	; 0x2e
    49ec:	strb.w	sl, [r3, #1465]	; 0x5b9
      _b = b;
    49f0:	mov.w	sl, #118	; 0x76
    49f4:	strb.w	sl, [r3, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49f8:	mov.w	sl, #110	; 0x6e
    49fc:	strb.w	sl, [r3, #1467]	; 0x5bb
      _s = s;
    4a00:	mvn.w	sl, #63	; 0x3f
    4a04:	strb.w	sl, [r3, #1468]	; 0x5bc
      _b = b;
    4a08:	mov.w	sl, #74	; 0x4a
    4a0c:	strb.w	sl, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a10:	mvn.w	sl, #53	; 0x35
    4a14:	strb.w	sl, [r3, #1474]	; 0x5c2
      _b = b;
    4a18:	mov.w	sl, #87	; 0x57
    4a1c:	strb.w	sl, [r3, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a20:	mvn.w	sl, #110	; 0x6e
    4a24:	strb.w	sl, [r3, #1476]	; 0x5c4
      _s = s;
      _b = b;
    4a28:	mov.w	sl, #102	; 0x66
    4a2c:	strb.w	sl, [r3, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a30:	mvn.w	sl, #97	; 0x61
    4a34:	strb.w	sl, [r3, #1479]	; 0x5c7
      _s = s;
    4a38:	mvn.w	sl, #79	; 0x4f
    4a3c:	strb.w	sl, [r3, #1480]	; 0x5c8
      _b = b;
    4a40:	mvn.w	sl, #51	; 0x33
    4a44:	strb.w	sl, [r3, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a48:	mvn.w	sl, #95	; 0x5f
    4a4c:	strb.w	sl, [r3, #1482]	; 0x5ca
      _s = s;
    4a50:	mvn.w	sl, #28
    4a54:	strb.w	sl, [r3, #1483]	; 0x5cb
      _b = b;
    4a58:	mvn.w	sl, #24
    4a5c:	strb.w	lr, [r3, #1496]	; 0x5d8
    4a60:	strb.w	sl, [r3, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a64:	mvn.w	sl, #96	; 0x60
      _s = s;
    4a68:	strb.w	r6, [r3, #1498]	; 0x5da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a6c:	strb.w	sl, [r3, #1485]	; 0x5cd
      _s = s;
    4a70:	mvn.w	sl, #5
    4a74:	strb.w	r5, [r3, #1504]	; 0x5e0
    4a78:	strb.w	sl, [r3, #1486]	; 0x5ce
      _b = b;
    4a7c:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a80:	strb.w	r7, [r3, #1489]	; 0x5d1
      _b = b;
    4a84:	strb.w	sl, [r3, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a88:	mvn.w	sl, #98	; 0x62
      _s = s;
    4a8c:	strb.w	r8, [r3, #1495]	; 0x5d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a90:	strb.w	sl, [r3, #1488]	; 0x5d0
      _s = s;
      _b = b;
    4a94:	mvn.w	sl, #28
    4a98:	strb.w	sl, [r3, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a9c:	mvn.w	sl, #108	; 0x6c
    4aa0:	strb.w	sl, [r3, #1491]	; 0x5d3
      _s = s;
    4aa4:	mvn.w	sl, #60	; 0x3c
    4aa8:	strb.w	sl, [r3, #1492]	; 0x5d4
      _b = b;
    4aac:	mvn.w	sl, #26
    4ab0:	strb.w	sl, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ab4:	mvn.w	sl, #101	; 0x65
    4ab8:	strb.w	sl, [r3, #1494]	; 0x5d6
    4abc:	mvn.w	sl, #66	; 0x42
    4ac0:	strb.w	sl, [r3, #1497]	; 0x5d9
      _s = s;
      _b = b;
    4ac4:	mvn.w	sl, #16
    4ac8:	strb.w	sl, [r3, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4acc:	mvn.w	sl, #61	; 0x3d
    4ad0:	strb.w	sl, [r3, #1500]	; 0x5dc
      _s = s;
    4ad4:	mov.w	sl, #115	; 0x73
    4ad8:	strb.w	sl, [r3, #1501]	; 0x5dd
      _b = b;
    4adc:	mvn.w	sl, #16
    4ae0:	strb.w	sl, [r3, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ae4:	mvn.w	sl, #88	; 0x58
    4ae8:	strb.w	sl, [r3, #1503]	; 0x5df
      _s = s;
      _b = b;
    4aec:	mvn.w	sl, #15
    4af0:	strb.w	sl, [r3, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4af4:	mvn.w	sl, #111	; 0x6f
    4af8:	strb.w	sl, [r3, #1506]	; 0x5e2
      _s = s;
    4afc:	mov.w	sl, #113	; 0x71
    4b00:	strb.w	sl, [r3, #1507]	; 0x5e3
      _b = b;
    4b04:	mvn.w	sl, #17
    4b08:	strb.w	sl, [r3, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b0c:	mvn.w	sl, #120	; 0x78
    4b10:	strb.w	sl, [r3, #1509]	; 0x5e5
      _s = s;
    4b14:	mov.w	sl, #57	; 0x39
    4b18:	strb.w	sl, [r3, #1510]	; 0x5e6
      _b = b;
    4b1c:	mvn.w	sl, #21
    4b20:	strb.w	sl, [r3, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b24:	mov.w	sl, #94	; 0x5e
    4b28:	strb.w	sl, [r3, #1512]	; 0x5e8
      _s = s;
    4b2c:	mov.w	sl, #40	; 0x28
    4b30:	strb.w	sl, [r3, #1513]	; 0x5e9
      _b = b;
    4b34:	mvn.w	sl, #87	; 0x57
    4b38:	strb.w	sl, [r3, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b3c:	mov.w	sl, #122	; 0x7a
    4b40:	strb.w	sl, [r3, #1515]	; 0x5eb
      _s = s;
    4b44:	mov.w	sl, #116	; 0x74
    4b48:	strb.w	sl, [r3, #1516]	; 0x5ec
      _b = b;
    4b4c:	mvn.w	sl, #65	; 0x41
    4b50:	strb.w	r9, [r3, #1544]	; 0x608
    4b54:	strb.w	sl, [r3, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b58:	mvn.w	sl, #118	; 0x76
    4b5c:	strb.w	sl, [r3, #1518]	; 0x5ee
      _s = s;
    4b60:	mvn.w	sl, #50	; 0x32
    4b64:	strb.w	sl, [r3, #1519]	; 0x5ef
      _b = b;
    4b68:	mvn.w	sl, #23
    4b6c:	strb.w	sl, [r3, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b70:	mvn.w	sl, #103	; 0x67
    4b74:	strb.w	sl, [r3, #1521]	; 0x5f1
      _s = s;
    4b78:	mvn.w	sl, #93	; 0x5d
    4b7c:	strb.w	sl, [r3, #1522]	; 0x5f2
      _b = b;
    4b80:	mvn.w	sl, #9
    4b84:	strb.w	sl, [r3, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b88:	mvn.w	sl, #71	; 0x47
    4b8c:	strb.w	sl, [r3, #1524]	; 0x5f4
      _s = s;
    4b90:	mov.w	sl, #108	; 0x6c
    4b94:	strb.w	sl, [r3, #1525]	; 0x5f5
      _b = b;
    4b98:	mvn.w	sl, #6
    4b9c:	strb.w	sl, [r3, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ba0:	mvn.w	sl, #51	; 0x33
    4ba4:	strb.w	sl, [r3, #1527]	; 0x5f7
      _s = s;
    4ba8:	mov.w	sl, #59	; 0x3b
    4bac:	strb.w	sl, [r3, #1528]	; 0x5f8
      _b = b;
    4bb0:	mvn.w	sl, #6
    4bb4:	strb.w	sl, [r3, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bb8:	mvn.w	sl, #47	; 0x2f
    4bbc:	strb.w	sl, [r3, #1530]	; 0x5fa
      _s = s;
      _b = b;
    4bc0:	mvn.w	sl, #9
    4bc4:	strb.w	sl, [r3, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bc8:	mvn.w	sl, #38	; 0x26
    4bcc:	strb.w	sl, [r3, #1533]	; 0x5fd
      _s = s;
    4bd0:	mov.w	sl, #37	; 0x25
    4bd4:	strb.w	sl, [r3, #1534]	; 0x5fe
      _b = b;
    4bd8:	mvn.w	sl, #11
    4bdc:	strb.w	sl, [r3, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4be0:	mvn.w	sl, #94	; 0x5e
    4be4:	strb.w	sl, [r3, #1536]	; 0x600
      _s = s;
      _b = b;
    4be8:	mvn.w	sl, #77	; 0x4d
    4bec:	strb.w	sl, [r3, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bf0:	mov.w	sl, #91	; 0x5b
    4bf4:	strb.w	sl, [r3, #1540]	; 0x604
      _b = b;
    4bf8:	mvn.w	sl, #104	; 0x68
    4bfc:	strb.w	sl, [r3, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c00:	mov.w	sl, #118	; 0x76
    4c04:	strb.w	sl, [r3, #1542]	; 0x606
      _s = s;
    4c08:	mvn.w	sl, #63	; 0x3f
    4c0c:	strb.w	sl, [r3, #1543]	; 0x607
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c10:	mov.w	sl, #100	; 0x64
    4c14:	strb.w	sl, [r3, #1545]	; 0x609
      _s = s;
    4c18:	mvn.w	sl, #65	; 0x41
    4c1c:	strb.w	sl, [r3, #1546]	; 0x60a
      _b = b;
    4c20:	mov.w	sl, #63	; 0x3f
    4c24:	strb.w	sl, [r3, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c28:	mvn.w	sl, #110	; 0x6e
    4c2c:	strb.w	sl, [r3, #1548]	; 0x60c
      _s = s;
    4c30:	mvn.w	sl, #13
    4c34:	strb.w	sl, [r3, #1549]	; 0x60d
    4c38:	mov.w	sl, #81	; 0x51
    4c3c:	strb.w	sl, [r3, #1531]	; 0x5fb
    4c40:	strb.w	sl, [r3, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c44:	mov.w	sl, #84	; 0x54
    4c48:	strb.w	sl, [r3, #1539]	; 0x603
    4c4c:	mvn.w	sl, #107	; 0x6b
      _s = s;
      _b = b;
    4c50:	strb.w	r6, [r3, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c54:	strb.w	sl, [r3, #1551]	; 0x60f
      _s = s;
      _b = b;
    4c58:	mvn.w	sl, #65	; 0x41
    4c5c:	strb.w	lr, [r3, #1574]	; 0x626
    4c60:	strb.w	sl, [r3, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c64:	mvn.w	sl, #101	; 0x65
      _s = s;
      _b = b;
    4c68:	strb.w	lr, [r3, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c6c:	strb.w	sl, [r3, #1554]	; 0x612
      _s = s;
    4c70:	mvn.w	sl, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c74:	strb.w	ip, [r3, #1578]	; 0x62a
      _s = s;
    4c78:	strb.w	sl, [r3, #1555]	; 0x613
      _b = b;
    4c7c:	mvn.w	sl, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c80:	strb.w	r7, [r3, #1552]	; 0x610
      _b = b;
    4c84:	strb.w	sl, [r3, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c88:	mov.w	sl, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c8c:	strb.w	fp, [r3, #1557]	; 0x615
      _s = s;
    4c90:	strb.w	sl, [r3, #1558]	; 0x616
      _b = b;
    4c94:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c98:	strb.w	r7, [r3, #1564]	; 0x61c
      _b = b;
    4c9c:	strb.w	sl, [r3, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ca0:	mvn.w	sl, #107	; 0x6b
    4ca4:	strb.w	fp, [r3, #1581]	; 0x62d
    4ca8:	strb.w	sl, [r3, #1560]	; 0x618
      _s = s;
    4cac:	mvn.w	sl, #121	; 0x79
    4cb0:	strb.w	sl, [r3, #1561]	; 0x619
      _b = b;
    4cb4:	mvn.w	sl, #32
    4cb8:	strb.w	sl, [r3, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cbc:	mvn.w	sl, #96	; 0x60
    4cc0:	strb.w	sl, [r3, #1563]	; 0x61b
      _s = s;
      _b = b;
    4cc4:	mvn.w	sl, #39	; 0x27
    4cc8:	strb.w	sl, [r3, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ccc:	mvn.w	sl, #110	; 0x6e
    4cd0:	strb.w	sl, [r3, #1566]	; 0x61e
      _s = s;
    4cd4:	mvn.w	sl, #47	; 0x2f
    4cd8:	strb.w	sl, [r3, #1567]	; 0x61f
      _b = b;
    4cdc:	mvn.w	sl, #24
    4ce0:	strb.w	sl, [r3, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce4:	mvn.w	sl, #110	; 0x6e
    4ce8:	strb.w	sl, [r3, #1569]	; 0x621
      _s = s;
    4cec:	mvn.w	sl, #40	; 0x28
    4cf0:	strb.w	sl, [r3, #1570]	; 0x622
      _b = b;
    4cf4:	mvn.w	sl, #23
    4cf8:	strb.w	sl, [r3, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cfc:	mvn.w	sl, #106	; 0x6a
    4d00:	strb.w	sl, [r3, #1572]	; 0x624
      _s = s;
    4d04:	mvn.w	sl, #59	; 0x3b
    4d08:	strb.w	sl, [r3, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d0c:	mvn.w	sl, #107	; 0x6b
    4d10:	strb.w	sl, [r3, #1575]	; 0x627
      _s = s;
    4d14:	mvn.w	sl, #87	; 0x57
    4d18:	strb.w	sl, [r3, #1576]	; 0x628
    4d1c:	mov.w	sl, #61	; 0x3d
    4d20:	strb.w	sl, [r3, #1579]	; 0x62b
      _b = b;
    4d24:	mvn.w	sl, #23
    4d28:	strb.w	sl, [r3, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d2c:	mov.w	sl, #63	; 0x3f
    4d30:	strb.w	sl, [r3, #1582]	; 0x62e
      _b = b;
    4d34:	mvn.w	sl, #22
    4d38:	strb.w	sl, [r3, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d3c:	mvn.w	sl, #12
    4d40:	strb.w	sl, [r3, #1584]	; 0x630
      _s = s;
    4d44:	mov.w	sl, #88	; 0x58
    4d48:	strb.w	sl, [r3, #1585]	; 0x631
      _b = b;
    4d4c:	mov.w	sl, #43	; 0x2b
    4d50:	strb.w	sl, [r3, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d54:	mov.w	sl, #59	; 0x3b
    4d58:	strb.w	sl, [r3, #1587]	; 0x633
      _s = s;
    4d5c:	mov.w	sl, #44	; 0x2c
    4d60:	strb.w	sl, [r3, #1588]	; 0x634
      _b = b;
    4d64:	mov.w	sl, #57	; 0x39
    4d68:	strb.w	sl, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d6c:	mov.w	sl, #125	; 0x7d
    4d70:	strb.w	sl, [r3, #1590]	; 0x636
      _s = s;
    4d74:	mov.w	sl, #79	; 0x4f
    4d78:	strb.w	sl, [r3, #1591]	; 0x637
      _b = b;
    4d7c:	mvn.w	sl, #47	; 0x2f
    4d80:	strb.w	sl, [r3, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d84:	mvn.w	sl, #121	; 0x79
    4d88:	strb.w	sl, [r3, #1593]	; 0x639
      _s = s;
    4d8c:	mov.w	sl, #95	; 0x5f
    4d90:	strb.w	sl, [r3, #1594]	; 0x63a
      _b = b;
    4d94:	mvn.w	sl, #9
    4d98:	strb.w	sl, [r3, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d9c:	mvn.w	sl, #66	; 0x42
    4da0:	strb.w	sl, [r3, #1596]	; 0x63c
      _s = s;
    4da4:	mov.w	sl, #116	; 0x74
    4da8:	strb.w	sl, [r3, #1597]	; 0x63d
      _b = b;
    4dac:	mvn.w	sl, #5
    4db0:	strb.w	sl, [r3, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4db4:	mvn.w	sl, #64	; 0x40
    4db8:	strb.w	sl, [r3, #1599]	; 0x63f
      _s = s;
    4dbc:	mov.w	sl, #50	; 0x32
    4dc0:	strb.w	sl, [r3, #1600]	; 0x640
      _b = b;
    4dc4:	mvn.w	sl, #6
    4dc8:	strb.w	sl, [r3, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dcc:	mvn.w	sl, #45	; 0x2d
    4dd0:	strb.w	sl, [r3, #1602]	; 0x642
      _s = s;
    4dd4:	mov.w	sl, #57	; 0x39
    4dd8:	strb.w	sl, [r3, #1603]	; 0x643
      _b = b;
    4ddc:	mvn.w	sl, #9
    4de0:	strb.w	sl, [r3, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4de4:	mvn.w	sl, #50	; 0x32
    4de8:	strb.w	sl, [r3, #1605]	; 0x645
      _s = s;
    4dec:	mov.w	sl, #41	; 0x29
    4df0:	strb.w	sl, [r3, #1606]	; 0x646
      _b = b;
    4df4:	mvn.w	sl, #15
    4df8:	strb.w	sl, [r3, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dfc:	mvn.w	sl, #94	; 0x5e
    4e00:	strb.w	sl, [r3, #1608]	; 0x648
      _s = s;
    4e04:	mov.w	sl, #117	; 0x75
    4e08:	strb.w	sl, [r3, #1609]	; 0x649
      _b = b;
    4e0c:	mvn.w	sl, #28
    4e10:	strb.w	sl, [r3, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e14:	mvn.w	sl, #121	; 0x79
    4e18:	strb.w	sl, [r3, #1611]	; 0x64b
      _s = s;
    4e1c:	mvn.w	sl, #12
    4e20:	strb.w	sl, [r3, #1612]	; 0x64c
      _b = b;
    4e24:	mvn.w	sl, #35	; 0x23
    4e28:	strb.w	sl, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e2c:	mvn.w	sl, #118	; 0x76
    4e30:	strb.w	sl, [r3, #1614]	; 0x64e
      _s = s;
    4e34:	mvn.w	sl, #19
    4e38:	strb.w	sl, [r3, #1615]	; 0x64f
      _b = b;
    4e3c:	mvn.w	sl, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e40:	strb.w	ip, [r3, #1627]	; 0x65b
      _b = b;
    4e44:	strb.w	sl, [r3, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e48:	mvn.w	sl, #108	; 0x6c
    4e4c:	strb.w	r6, [r3, #1641]	; 0x669
    4e50:	strb.w	sl, [r3, #1617]	; 0x651
      _s = s;
    4e54:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e58:	strb.w	r5, [r3, #1647]	; 0x66f
      _s = s;
    4e5c:	strb.w	sl, [r3, #1618]	; 0x652
      _b = b;
    4e60:	mov.w	sl, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e64:	strb.w	r8, [r3, #1644]	; 0x66c
      _s = s;
      _b = b;
    4e68:	strb.w	sl, [r3, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e6c:	mvn.w	sl, #122	; 0x7a
    4e70:	strb.w	sl, [r3, #1620]	; 0x654
      _s = s;
    4e74:	mvn.w	sl, #25
    4e78:	strb.w	sl, [r3, #1621]	; 0x655
      _b = b;
    4e7c:	mvn.w	sl, #100	; 0x64
    4e80:	strb.w	sl, [r3, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e84:	mov.w	sl, #57	; 0x39
    4e88:	strb.w	sl, [r3, #1623]	; 0x657
      _s = s;
    4e8c:	mov.w	sl, #99	; 0x63
    4e90:	strb.w	sl, [r3, #1624]	; 0x658
      _b = b;
    4e94:	mvn.w	sl, #43	; 0x2b
    4e98:	strb.w	sl, [r3, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e9c:	mov.w	sl, #42	; 0x2a
    4ea0:	strb.w	sl, [r3, #1626]	; 0x65a
      _s = s;
      _b = b;
    4ea4:	mvn.w	sl, #39	; 0x27
    4ea8:	strb.w	sl, [r3, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eac:	mov.w	sl, #33	; 0x21
    4eb0:	strb.w	sl, [r3, #1629]	; 0x65d
      _s = s;
    4eb4:	mvn.w	sl, #84	; 0x54
    4eb8:	strb.w	sl, [r3, #1630]	; 0x65e
      _b = b;
    4ebc:	mvn.w	sl, #30
    4ec0:	strb.w	sl, [r3, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ec4:	mov.w	sl, #34	; 0x22
    4ec8:	strb.w	sl, [r3, #1632]	; 0x660
      _s = s;
    4ecc:	mov.w	sl, #91	; 0x5b
    4ed0:	strb.w	sl, [r3, #1633]	; 0x661
      _b = b;
    4ed4:	mvn.w	sl, #47	; 0x2f
    4ed8:	strb.w	sl, [r3, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4edc:	mvn.w	sl, #102	; 0x66
    4ee0:	strb.w	sl, [r3, #1635]	; 0x663
      _s = s;
    4ee4:	mvn.w	sl, #85	; 0x55
    4ee8:	strb.w	sl, [r3, #1636]	; 0x664
      _b = b;
    4eec:	mvn.w	sl, #36	; 0x24
    4ef0:	strb.w	sl, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ef4:	mvn.w	sl, #101	; 0x65
    4ef8:	strb.w	sl, [r3, #1638]	; 0x666
      _s = s;
    4efc:	mvn.w	sl, #2
    4f00:	strb.w	sl, [r3, #1639]	; 0x667
      _b = b;
    4f04:	mvn.w	sl, #36	; 0x24
    4f08:	strb.w	sl, [r3, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f0c:	mvn.w	sl, #57	; 0x39
    4f10:	strb.w	sl, [r3, #1642]	; 0x66a
      _b = b;
    4f14:	mvn.w	sl, #23
    4f18:	strb.w	sl, [r3, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f1c:	mov.w	sl, #57	; 0x39
    4f20:	strb.w	sl, [r3, #1645]	; 0x66d
      _b = b;
    4f24:	mvn.w	sl, #26
    4f28:	strb.w	sl, [r3, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f2c:	mov.w	sl, #24
    4f30:	strb.w	sl, [r3, #1648]	; 0x670
      _b = b;
    4f34:	mvn.w	sl, #27
    4f38:	strb.w	lr, [r3, #1670]	; 0x686
    4f3c:	strb.w	sl, [r3, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f40:	mvn.w	sl, #114	; 0x72
    4f44:	strb.w	sl, [r3, #1650]	; 0x672
      _s = s;
    4f48:	mov.w	sl, #83	; 0x53
    4f4c:	strb.w	sl, [r3, #1651]	; 0x673
      _b = b;
    4f50:	mvn.w	sl, #25
    4f54:	strb.w	sl, [r3, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f58:	mvn.w	sl, #43	; 0x2b
    4f5c:	strb.w	sl, [r3, #1653]	; 0x675
      _s = s;
    4f60:	mov.w	sl, #14
    4f64:	strb.w	sl, [r3, #1654]	; 0x676
      _b = b;
    4f68:	mvn.w	sl, #41	; 0x29
    4f6c:	strb.w	sl, [r3, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f70:	mvn.w	sl, #8
    4f74:	strb.w	sl, [r3, #1656]	; 0x678
      _s = s;
    4f78:	mov.w	sl, #94	; 0x5e
    4f7c:	strb.w	sl, [r3, #1657]	; 0x679
      _b = b;
    4f80:	mov.w	sl, #46	; 0x2e
    4f84:	strb.w	sl, [r3, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f88:	mov.w	sl, #1
    4f8c:	strb.w	sl, [r3, #1659]	; 0x67b
      _s = s;
    4f90:	mov.w	sl, #90	; 0x5a
    4f94:	strb.w	sl, [r3, #1660]	; 0x67c
      _b = b;
    4f98:	mov.w	sl, #62	; 0x3e
    4f9c:	strb.w	sl, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fa0:	mvn.w	sl, #107	; 0x6b
    4fa4:	strb.w	sl, [r3, #1662]	; 0x67e
      _s = s;
    4fa8:	mov.w	sl, #95	; 0x5f
    4fac:	strb.w	sl, [r3, #1663]	; 0x67f
      _b = b;
    4fb0:	mov.w	sl, #88	; 0x58
    4fb4:	strb.w	sl, [r3, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fb8:	mvn.w	sl, #119	; 0x77
    4fbc:	strb.w	sl, [r3, #1665]	; 0x681
      _s = s;
    4fc0:	mvn.w	sl, #69	; 0x45
    4fc4:	strb.w	sl, [r3, #1666]	; 0x682
      _b = b;
    4fc8:	mvn.w	sl, #53	; 0x35
    4fcc:	strb.w	sl, [r3, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fd0:	mvn.w	sl, #111	; 0x6f
    4fd4:	strb.w	sl, [r3, #1668]	; 0x684
      _s = s;
    4fd8:	mov.w	sl, #95	; 0x5f
    4fdc:	strb.w	sl, [r3, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fe0:	mvn.w	sl, #103	; 0x67
    4fe4:	strb.w	sl, [r3, #1671]	; 0x687
      _s = s;
    4fe8:	mov.w	sl, #69	; 0x45
    4fec:	strb.w	sl, [r3, #1672]	; 0x688
      _b = b;
    4ff0:	mvn.w	sl, #8
    4ff4:	strb.w	sl, [r3, #1673]	; 0x689
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ff8:	mvn.w	sl, #55	; 0x37
    4ffc:	strb.w	sl, [r3, #1674]	; 0x68a
      _s = s;
    5000:	mov.w	sl, #43	; 0x2b
    5004:	strb.w	sl, [r3, #1675]	; 0x68b
      _b = b;
    5008:	mvn.w	sl, #7
    500c:	strb.w	sl, [r3, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5010:	mvn.w	sl, #58	; 0x3a
    5014:	strb.w	sl, [r3, #1677]	; 0x68d
      _s = s;
    5018:	mov.w	sl, #92	; 0x5c
    501c:	strb.w	sl, [r3, #1678]	; 0x68e
      _b = b;
    5020:	mvn.w	sl, #8
    5024:	strb.w	sl, [r3, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5028:	mvn.w	sl, #110	; 0x6e
    502c:	strb.w	sl, [r3, #1680]	; 0x690
      _s = s;
    5030:	mov.w	sl, #107	; 0x6b
    5034:	strb.w	sl, [r3, #1681]	; 0x691
      _b = b;
    5038:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    503c:	strb.w	ip, [r3, #1683]	; 0x693
      _s = s;
      _b = b;
    5040:	strb.w	sl, [r3, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5044:	mvn.w	sl, #7
    5048:	strb.w	r7, [r3, #1687]	; 0x697
    504c:	strb.w	sl, [r3, #1684]	; 0x694
      _b = b;
    5050:	mvn.w	sl, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5054:	strb.w	r7, [r3, #1696]	; 0x6a0
      _b = b;
    5058:	strb.w	sl, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    505c:	mvn.w	sl, #109	; 0x6d
    5060:	strb.w	sl, [r3, #1686]	; 0x696
      _s = s;
      _b = b;
    5064:	mvn.w	sl, #77	; 0x4d
    5068:	strb.w	sl, [r3, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    506c:	mvn.w	sl, #121	; 0x79
    5070:	strb.w	sl, [r3, #1689]	; 0x699
      _s = s;
    5074:	mvn.w	sl, #6
    5078:	strb.w	sl, [r3, #1690]	; 0x69a
      _b = b;
    507c:	mvn.w	sl, #120	; 0x78
    5080:	strb.w	sl, [r3, #1691]	; 0x69b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5084:	mov.w	sl, #60	; 0x3c
    5088:	strb.w	sl, [r3, #1692]	; 0x69c
      _s = s;
    508c:	mov.w	sl, #124	; 0x7c
    5090:	strb.w	sl, [r3, #1693]	; 0x69d
      _b = b;
    5094:	mvn.w	sl, #61	; 0x3d
    5098:	strb.w	sl, [r3, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    509c:	mov.w	sl, #37	; 0x25
    50a0:	strb.w	sl, [r3, #1695]	; 0x69f
      _s = s;
      _b = b;
    50a4:	mvn.w	sl, #33	; 0x21
    50a8:	strb.w	sl, [r3, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ac:	mov.w	sl, #31
    50b0:	strb.w	sl, [r3, #1698]	; 0x6a2
      _s = s;
    50b4:	mvn.w	sl, #25
    50b8:	strb.w	sl, [r3, #1699]	; 0x6a3
      _b = b;
    50bc:	mvn.w	sl, #38	; 0x26
    50c0:	strb.w	sl, [r3, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50c4:	mov.w	sl, #26
    50c8:	strb.w	sl, [r3, #1701]	; 0x6a5
      _s = s;
    50cc:	mvn.w	sl, #51	; 0x33
    50d0:	strb.w	sl, [r3, #1702]	; 0x6a6
      _b = b;
    50d4:	mvn.w	sl, #40	; 0x28
    50d8:	strb.w	sl, [r3, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50dc:	mov.w	sl, #22
    50e0:	strb.w	sl, [r3, #1704]	; 0x6a8
      _s = s;
    50e4:	mvn.w	sl, #71	; 0x47
    50e8:	strb.w	sl, [r3, #1705]	; 0x6a9
      _b = b;
    50ec:	mvn.w	sl, #30
    50f0:	strb.w	sl, [r3, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50f4:	mov.w	sl, #13
    50f8:	strb.w	sl, [r3, #1707]	; 0x6ab
      _s = s;
    50fc:	mov.w	sl, #76	; 0x4c
    5100:	strb.w	sl, [r3, #1708]	; 0x6ac
      _b = b;
    5104:	mvn.w	sl, #27
    5108:	strb.w	sl, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    510c:	mvn.w	sl, #36	; 0x24
    5110:	strb.w	sl, [r3, #1710]	; 0x6ae
      _s = s;
    5114:	mov.w	sl, #62	; 0x3e
    5118:	strb.w	sl, [r3, #1711]	; 0x6af
      _b = b;
    511c:	mvn.w	sl, #87	; 0x57
    5120:	strb.w	sl, [r3, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5124:	mvn.w	sl, #16
    5128:	strb.w	sl, [r3, #1713]	; 0x6b1
      _s = s;
    512c:	mov.w	sl, #56	; 0x38
    5130:	strb.w	sl, [r3, #1714]	; 0x6b2
      _b = b;
    5134:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5138:	strb.w	r7, [r3, #1726]	; 0x6be
      _b = b;
    513c:	strb.w	sl, [r3, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5140:	mvn.w	sl, #13
    5144:	strb	r2, [r4, #0]
    5146:	strb.w	sl, [r3, #1716]	; 0x6b4
      _s = s;
    514a:	mov.w	sl, #24
    514e:	strb	r2, [r4, #1]
    5150:	strb.w	sl, [r3, #1717]	; 0x6b5
      _b = b;
    5154:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5158:	strb	r2, [r4, #9]
      _s = s;
      _b = b;
    515a:	strb.w	sl, [r3, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    515e:	mvn.w	sl, #18
      _s = s;
    5162:	strb	r2, [r4, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5164:	strb.w	sl, [r3, #1719]	; 0x6b7
      _s = s;
    5168:	mvn.w	sl, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    516c:	strb	r2, [r4, #12]
      _s = s;
    516e:	strb.w	sl, [r3, #1720]	; 0x6b8
      _b = b;
    5172:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5176:	strb	r2, [r4, #13]
      _b = b;
    5178:	strb.w	sl, [r3, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    517c:	mvn.w	sl, #15
    5180:	strb	r2, [r4, #15]
    5182:	strb.w	sl, [r3, #1722]	; 0x6ba
      _s = s;
    5186:	mov.w	sl, #114	; 0x72
    518a:	strb	r2, [r4, #16]
    518c:	strb.w	sl, [r3, #1723]	; 0x6bb
      _b = b;
    5190:	mvn.w	sl, #35	; 0x23
    5194:	strb.w	sl, [r3, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5198:	mvn.w	sl, #26
    519c:	strb.w	sl, [r3, #1725]	; 0x6bd
      _s = s;
      _b = b;
    51a0:	mvn.w	sl, #35	; 0x23
    51a4:	strb.w	sl, [r3, #1727]	; 0x6bf
    51a8:	mvn.w	r3, #4
    51ac:	strb	r3, [r4, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ae:	mov.w	r3, #106	; 0x6a
    51b2:	strb	r3, [r4, #3]
      _s = s;
    51b4:	mov.w	r3, #2
    51b8:	strb	r3, [r4, #4]
      _b = b;
    51ba:	mvn.w	r3, #39	; 0x27
    51be:	strb	r3, [r4, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51c0:	mov.w	r3, #85	; 0x55
    51c4:	strb	r3, [r4, #6]
      _s = s;
    51c6:	mov.w	r3, #5
    51ca:	strb	r3, [r4, #7]
      _b = b;
    51cc:	mvn.w	r3, #102	; 0x66
    51d0:	strb	r3, [r4, #8]
    51d2:	mvn.w	r3, #16
    51d6:	strb	r3, [r4, #11]
    51d8:	mvn.w	r3, #8
    51dc:	strb	r3, [r4, #14]
    51de:	mvn.w	r3, #10
    51e2:	strb	r3, [r4, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51e4:	mov.w	r3, #106	; 0x6a
    51e8:	strb	r3, [r4, #18]
      _s = s;
    51ea:	mov.w	r3, #2
    51ee:	strb	r3, [r4, #19]
      _b = b;
    51f0:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51f4:	strb.w	ip, [r4, #33]	; 0x21
      _s = s;
      _b = b;
    51f8:	strb	r3, [r4, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51fa:	mov.w	r3, #109	; 0x6d
    51fe:	strb.w	r1, [r4, #39]	; 0x27
    5202:	strb	r3, [r4, #21]
      _s = s;
    5204:	mov.w	r3, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5208:	strb.w	r5, [r4, #42]	; 0x2a
      _s = s;
    520c:	strb	r3, [r4, #22]
      _b = b;
    520e:	mvn.w	r3, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5212:	strb.w	r1, [r4, #45]	; 0x2d
      _s = s;
      _b = b;
    5216:	strb	r3, [r4, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5218:	mov.w	r3, #114	; 0x72
    521c:	strb.w	r1, [r4, #48]	; 0x30
    5220:	strb	r3, [r4, #24]
      _s = s;
    5222:	mov.w	r3, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5226:	strb.w	r8, [r4, #30]
      _s = s;
    522a:	strb	r3, [r4, #25]
      _b = b;
    522c:	mvn.w	r3, #92	; 0x5c
    5230:	strb	r3, [r4, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5232:	mov.w	r3, #115	; 0x73
    5236:	strb	r3, [r4, #27]
      _s = s;
    5238:	mov.w	r3, #26
    523c:	strb	r3, [r4, #28]
      _b = b;
    523e:	mvn.w	r3, #119	; 0x77
    5242:	strb	r3, [r4, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5244:	mov.w	r3, #48	; 0x30
    5248:	strb	r3, [r4, #31]
      _b = b;
    524a:	mov.w	r3, #73	; 0x49
    524e:	strb.w	r3, [r4, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5252:	mvn.w	r3, #70	; 0x46
    5256:	strb.w	r3, [r4, #34]	; 0x22
      _b = b;
    525a:	mov.w	r3, #77	; 0x4d
    525e:	strb.w	r3, [r4, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5262:	mvn.w	r3, #121	; 0x79
    5266:	strb.w	r3, [r4, #36]	; 0x24
      _s = s;
    526a:	mvn.w	r3, #34	; 0x22
    526e:	strb.w	r3, [r4, #37]	; 0x25
      _b = b;
    5272:	mov.w	r3, #100	; 0x64
    5276:	strb.w	r3, [r4, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    527a:	mov.w	r3, #63	; 0x3f
    527e:	strb.w	r3, [r4, #40]	; 0x28
      _b = b;
    5282:	mvn.w	r3, #122	; 0x7a
    5286:	strb.w	r3, [r4, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    528a:	mvn.w	r3, #83	; 0x53
    528e:	strb.w	r3, [r4, #43]	; 0x2b
      _b = b;
    5292:	mvn.w	r3, #45	; 0x2d
    5296:	strb.w	r3, [r4, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    529a:	mvn.w	r3, #11
    529e:	strb.w	r3, [r4, #46]	; 0x2e
      _b = b;
    52a2:	mvn.w	r3, #33	; 0x21
    52a6:	strb.w	r3, [r4, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52aa:	mvn.w	r3, #96	; 0x60
    52ae:	strb.w	r3, [r4, #49]	; 0x31
      _b = b;
    52b2:	mvn.w	r3, #39	; 0x27
    52b6:	strb.w	r3, [r4, #50]	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ba:	mvn.w	r3, #120	; 0x78
    52be:	strb.w	r3, [r4, #51]	; 0x33
      _s = s;
    52c2:	mov.w	r3, #51	; 0x33
    52c6:	strb.w	r3, [r4, #52]	; 0x34
      _b = b;
    52ca:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ce:	strb.w	ip, [r4, #54]	; 0x36
      _s = s;
      _b = b;
    52d2:	strb.w	r3, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52d6:	mov.w	r3, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52da:	strb.w	r2, [r4, #57]	; 0x39
      _s = s;
    52de:	strb.w	r3, [r4, #55]	; 0x37
      _b = b;
    52e2:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52e6:	strb.w	r2, [r4, #58]	; 0x3a
      _b = b;
    52ea:	strb.w	r3, [r4, #56]	; 0x38
    52ee:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52f2:	strb.w	r2, [r4, #60]	; 0x3c
      _s = s;
      _b = b;
    52f6:	strb.w	r3, [r4, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52fa:	mov.w	r3, #95	; 0x5f
      _s = s;
    52fe:	strb.w	r2, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5302:	strb.w	r3, [r4, #75]	; 0x4b
      _s = s;
    5306:	mov.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    530a:	strb.w	r2, [r4, #63]	; 0x3f
      _s = s;
    530e:	strb.w	r3, [r4, #76]	; 0x4c
      _b = b;
    5312:	mvn.w	r3, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5316:	strb.w	r2, [r4, #64]	; 0x40
      _b = b;
    531a:	strb.w	r3, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    531e:	mvn.w	r3, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5322:	strb.w	r2, [r4, #66]	; 0x42
      _s = s;
    5326:	strb.w	r3, [r4, #79]	; 0x4f
      _b = b;
    532a:	mov.w	r3, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    532e:	strb.w	r2, [r4, #67]	; 0x43
      _b = b;
    5332:	strb.w	r3, [r4, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5336:	mov.w	r3, #94	; 0x5e
    533a:	strb.w	r2, [r4, #69]	; 0x45
    533e:	strb.w	r3, [r4, #81]	; 0x51
      _s = s;
    5342:	mov.w	r3, #11
    5346:	strb.w	r2, [r4, #70]	; 0x46
    534a:	strb.w	r3, [r4, #82]	; 0x52
      _b = b;
    534e:	mvn.w	r3, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5352:	strb.w	r2, [r4, #72]	; 0x48
      _s = s;
      _b = b;
    5356:	strb.w	r3, [r4, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    535a:	mov.w	r3, #96	; 0x60
      _s = s;
    535e:	strb.w	r2, [r4, #73]	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5362:	strb.w	r3, [r4, #84]	; 0x54
      _s = s;
    5366:	mov.w	r3, #14
      _b = b;
    536a:	strb.w	r7, [r4, #62]	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    536e:	strb.w	r3, [r4, #85]	; 0x55
      _b = b;
    5372:	mvn.w	r3, #4
    5376:	strb.w	r7, [r4, #65]	; 0x41
    537a:	strb.w	r7, [r4, #68]	; 0x44
    537e:	strb.w	r7, [r4, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5382:	strb.w	r8, [r4, #78]	; 0x4e
      _s = s;
      _b = b;
    5386:	strb.w	r3, [r4, #74]	; 0x4a
    538a:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    538e:	strb.w	r0, [r4, #108]	; 0x6c
      _s = s;
      _b = b;
    5392:	strb.w	r3, [r4, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5396:	mov.w	r3, #46	; 0x2e
    539a:	strb.w	r5, [r4, #114]	; 0x72
    539e:	strb.w	r3, [r4, #87]	; 0x57
      _s = s;
    53a2:	mov.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53a6:	strb.w	r1, [r4, #117]	; 0x75
      _s = s;
    53aa:	strb.w	r3, [r4, #88]	; 0x58
      _b = b;
    53ae:	mvn.w	r3, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53b2:	strb.w	r8, [r4, #102]	; 0x66
      _s = s;
      _b = b;
    53b6:	strb.w	r3, [r4, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53ba:	mov.w	r3, #60	; 0x3c
      _s = s;
    53be:	strb.w	r7, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53c2:	strb.w	r3, [r4, #90]	; 0x5a
      _s = s;
    53c6:	mov.w	r3, #121	; 0x79
    53ca:	strb.w	r3, [r4, #91]	; 0x5b
      _b = b;
    53ce:	mov.w	r3, #113	; 0x71
    53d2:	strb.w	r3, [r4, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53d6:	mov.w	r3, #105	; 0x69
    53da:	strb.w	r3, [r4, #93]	; 0x5d
      _s = s;
    53de:	mvn.w	r3, #69	; 0x45
    53e2:	strb.w	r3, [r4, #94]	; 0x5e
      _b = b;
    53e6:	mov.w	r3, #101	; 0x65
    53ea:	strb.w	r3, [r4, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53ee:	mov.w	r3, #118	; 0x76
    53f2:	strb.w	r3, [r4, #96]	; 0x60
      _s = s;
    53f6:	mvn.w	r3, #39	; 0x27
    53fa:	strb.w	r3, [r4, #97]	; 0x61
      _b = b;
    53fe:	mov.w	r3, #106	; 0x6a
    5402:	strb.w	r3, [r4, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5406:	mvn.w	r3, #43	; 0x2b
    540a:	strb.w	r3, [r4, #99]	; 0x63
      _s = s;
    540e:	mov.w	r3, #95	; 0x5f
    5412:	strb.w	r3, [r4, #100]	; 0x64
      _b = b;
    5416:	mov.w	r3, #32
    541a:	strb.w	r3, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    541e:	mvn.w	r3, #104	; 0x68
    5422:	strb.w	r3, [r4, #103]	; 0x67
      _b = b;
    5426:	mov.w	r3, #64	; 0x40
    542a:	strb.w	r3, [r4, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    542e:	mvn.w	r3, #121	; 0x79
    5432:	strb.w	r3, [r4, #105]	; 0x69
      _s = s;
    5436:	mvn.w	r3, #5
    543a:	strb.w	r3, [r4, #106]	; 0x6a
      _b = b;
    543e:	mvn.w	r3, #88	; 0x58
    5442:	strb.w	r3, [r4, #107]	; 0x6b
    5446:	mvn.w	r3, #76	; 0x4c
    544a:	strb.w	r3, [r4, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    544e:	mvn.w	r3, #122	; 0x7a
    5452:	strb.w	r3, [r4, #111]	; 0x6f
      _s = s;
    5456:	mov.w	r3, #106	; 0x6a
    545a:	strb.w	r3, [r4, #112]	; 0x70
      _b = b;
    545e:	mvn.w	r3, #80	; 0x50
    5462:	strb.w	r3, [r4, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5466:	mvn.w	r3, #111	; 0x6f
    546a:	strb.w	r3, [r4, #115]	; 0x73
      _b = b;
    546e:	mvn.w	r3, #34	; 0x22
    5472:	strb.w	r3, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5476:	mvn.w	r3, #16
    547a:	strb.w	r3, [r4, #118]	; 0x76
      _b = b;
    547e:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5482:	strb.w	r1, [r4, #120]	; 0x78
      _s = s;
      _b = b;
    5486:	strb.w	r3, [r4, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    548a:	mov.w	r3, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    548e:	strb.w	r1, [r4, #123]	; 0x7b
      _s = s;
    5492:	strb.w	r3, [r4, #130]	; 0x82
    5496:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    549a:	strb.w	r5, [r4, #126]	; 0x7e
      _s = s;
    549e:	strb.w	r3, [r4, #121]	; 0x79
      _b = b;
    54a2:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54a6:	strb.w	r2, [r4, #132]	; 0x84
      _s = s;
      _b = b;
    54aa:	strb.w	r3, [r4, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54ae:	mvn.w	r3, #59	; 0x3b
    54b2:	strb.w	r2, [r4, #133]	; 0x85
    54b6:	strb.w	r3, [r4, #124]	; 0x7c
      _b = b;
    54ba:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54be:	strb.w	r2, [r4, #135]	; 0x87
      _s = s;
      _b = b;
    54c2:	strb.w	r3, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54c6:	mov.w	r3, #87	; 0x57
    54ca:	strb.w	r2, [r4, #136]	; 0x88
    54ce:	strb.w	r3, [r4, #127]	; 0x7f
      _b = b;
    54d2:	mvn.w	r3, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54d6:	strb.w	r2, [r4, #138]	; 0x8a
      _s = s;
      _b = b;
    54da:	strb.w	r3, [r4, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54de:	mvn.w	r3, #107	; 0x6b
      _s = s;
    54e2:	strb.w	r2, [r4, #139]	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54e6:	strb.w	r3, [r4, #129]	; 0x81
      _s = s;
      _b = b;
    54ea:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54ee:	strb.w	r2, [r4, #141]	; 0x8d
      _s = s;
      _b = b;
    54f2:	strb.w	r3, [r4, #131]	; 0x83
    54f6:	mvn.w	r3, #2
    54fa:	strb.w	r7, [r4, #134]	; 0x86
    54fe:	strb.w	r3, [r4, #140]	; 0x8c
    5502:	strb.w	r3, [r4, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5506:	mov.w	r3, #113	; 0x71
      _s = s;
      _b = b;
    550a:	strb.w	r7, [r4, #137]	; 0x89
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    550e:	strb.w	r3, [r4, #144]	; 0x90
      _s = s;
    5512:	mov.w	r3, #3
    5516:	strb.w	r3, [r4, #145]	; 0x91
      _b = b;
    551a:	mvn.w	r3, #5
    551e:	strb.w	r3, [r4, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5522:	mov.w	r3, #51	; 0x33
    5526:	strb.w	r3, [r4, #147]	; 0x93
      _s = s;
    552a:	mov.w	r3, #10
    552e:	strb.w	r3, [r4, #148]	; 0x94
      _b = b;
    5532:	mvn.w	r3, #36	; 0x24
    5536:	strb.w	r3, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    553a:	mov.w	r3, #121	; 0x79
    553e:	strb.w	r3, [r4, #150]	; 0x96
      _s = s;
    5542:	mov.w	r3, #60	; 0x3c
    5546:	strb.w	r3, [r4, #151]	; 0x97
      _b = b;
    554a:	mov.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    554e:	strb.w	r2, [r4, #142]	; 0x8e
      _b = b;
    5552:	strb.w	r3, [r4, #152]	; 0x98
    5556:	mov.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    555a:	strb.w	r9, [r4, #174]	; 0xae
      _s = s;
      _b = b;
    555e:	strb.w	r3, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5562:	mov.w	r3, #32
    5566:	strb.w	r0, [r4, #183]	; 0xb7
    556a:	strb.w	r3, [r4, #153]	; 0x99
      _s = s;
    556e:	mvn.w	r3, #82	; 0x52
    5572:	strb.w	ip, [r4, #184]	; 0xb8
    5576:	strb.w	r3, [r4, #154]	; 0x9a
      _b = b;
    557a:	mvn.w	r3, #105	; 0x69
    557e:	strb.w	r3, [r4, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5582:	mov.w	r3, #54	; 0x36
    5586:	strb.w	r3, [r4, #156]	; 0x9c
      _s = s;
    558a:	mov.w	r3, #97	; 0x61
    558e:	strb.w	r3, [r4, #157]	; 0x9d
      _b = b;
    5592:	mov.w	r3, #120	; 0x78
    5596:	strb.w	r3, [r4, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    559a:	mov.w	r3, #25
    559e:	strb.w	r3, [r4, #159]	; 0x9f
      _s = s;
    55a2:	mvn.w	r3, #67	; 0x43
    55a6:	strb.w	r3, [r4, #160]	; 0xa0
      _b = b;
    55aa:	mov.w	r3, #123	; 0x7b
    55ae:	strb.w	r3, [r4, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55b2:	mov.w	r3, #28
    55b6:	strb.w	r3, [r4, #162]	; 0xa2
      _s = s;
    55ba:	mvn.w	r3, #93	; 0x5d
    55be:	strb.w	r3, [r4, #163]	; 0xa3
      _b = b;
    55c2:	mov.w	r3, #85	; 0x55
    55c6:	strb.w	r3, [r4, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55ca:	mov.w	r3, #97	; 0x61
    55ce:	strb.w	r3, [r4, #165]	; 0xa5
      _s = s;
    55d2:	mvn.w	r3, #81	; 0x51
    55d6:	strb.w	r3, [r4, #166]	; 0xa6
      _b = b;
    55da:	mvn.w	r3, #118	; 0x76
    55de:	strb.w	r3, [r4, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55e2:	mov.w	r3, #121	; 0x79
    55e6:	strb.w	r3, [r4, #168]	; 0xa8
      _s = s;
    55ea:	mvn.w	r3, #93	; 0x5d
    55ee:	strb.w	r3, [r4, #169]	; 0xa9
      _b = b;
    55f2:	mvn.w	r3, #101	; 0x65
    55f6:	strb.w	r3, [r4, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55fa:	mov.w	r3, #93	; 0x5d
    55fe:	strb.w	r3, [r4, #172]	; 0xac
    5602:	mvn.w	r3, #104	; 0x68
    5606:	strb.w	r3, [r4, #175]	; 0xaf
      _b = b;
    560a:	mov.w	r3, #59	; 0x3b
    560e:	strb.w	r3, [r4, #176]	; 0xb0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5612:	mvn.w	r3, #118	; 0x76
    5616:	strb.w	r3, [r4, #177]	; 0xb1
      _s = s;
    561a:	mvn.w	r3, #32
    561e:	strb.w	r3, [r4, #178]	; 0xb2
      _b = b;
    5622:	mov.w	r3, #57	; 0x39
    5626:	strb.w	r3, [r4, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    562a:	mvn.w	r3, #119	; 0x77
    562e:	strb.w	r3, [r4, #180]	; 0xb4
      _s = s;
    5632:	mvn.w	r3, #22
    5636:	strb.w	r3, [r4, #181]	; 0xb5
      _b = b;
    563a:	mov.w	r3, #59	; 0x3b
    563e:	strb.w	r3, [r4, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5642:	mvn.w	r3, #39	; 0x27
    5646:	strb.w	r3, [r4, #171]	; 0xab
      _s = s;
      _b = b;
    564a:	mov.w	r3, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    564e:	strb.w	r1, [r4, #186]	; 0xba
      _s = s;
      _b = b;
    5652:	strb.w	r3, [r4, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5656:	mov.w	r3, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    565a:	strb.w	r1, [r4, #189]	; 0xbd
      _s = s;
    565e:	strb.w	r3, [r4, #187]	; 0xbb
      _b = b;
    5662:	mvn.w	r3, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5666:	strb.w	r1, [r4, #192]	; 0xc0
      _s = s;
      _b = b;
    566a:	strb.w	r3, [r4, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    566e:	mvn.w	r3, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5672:	strb.w	r9, [r4, #198]	; 0xc6
      _s = s;
    5676:	strb.w	r3, [r4, #190]	; 0xbe
      _b = b;
    567a:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    567e:	strb.w	r2, [r4, #210]	; 0xd2
      _s = s;
      _b = b;
    5682:	strb.w	r3, [r4, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5686:	mvn.w	r3, #51	; 0x33
    568a:	strb.w	r2, [r4, #211]	; 0xd3
    568e:	strb.w	r3, [r4, #193]	; 0xc1
      _b = b;
    5692:	mvn.w	r3, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5696:	strb.w	r2, [r4, #213]	; 0xd5
      _s = s;
      _b = b;
    569a:	strb.w	r3, [r4, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    569e:	mvn.w	r3, #122	; 0x7a
      _s = s;
    56a2:	strb.w	r2, [r4, #214]	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56a6:	mov.w	r2, #34	; 0x22
    56aa:	strb.w	r3, [r4, #195]	; 0xc3
      _s = s;
    56ae:	mov.w	r3, #90	; 0x5a
    56b2:	strb.w	r3, [r4, #196]	; 0xc4
      _b = b;
    56b6:	mvn.w	r3, #21
    56ba:	strb.w	r3, [r4, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56be:	mov.w	r3, #44	; 0x2c
    56c2:	strb.w	r3, [r4, #199]	; 0xc7
      _b = b;
    56c6:	mvn.w	r3, #41	; 0x29
    56ca:	strb.w	r3, [r4, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56ce:	mvn.w	r3, #96	; 0x60
    56d2:	strb.w	r3, [r4, #201]	; 0xc9
      _s = s;
    56d6:	mov.w	r3, #35	; 0x23
    56da:	strb.w	r3, [r4, #202]	; 0xca
      _b = b;
    56de:	mvn.w	r3, #74	; 0x4a
    56e2:	strb.w	r3, [r4, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56e6:	mvn.w	r3, #105	; 0x69
    56ea:	strb.w	r3, [r4, #204]	; 0xcc
      _s = s;
    56ee:	mov.w	r3, #26
    56f2:	strb.w	r3, [r4, #205]	; 0xcd
      _b = b;
    56f6:	mvn.w	r3, #66	; 0x42
    56fa:	strb.w	r3, [r4, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56fe:	mov.w	r3, #127	; 0x7f
    5702:	strb.w	r3, [r4, #207]	; 0xcf
      _s = s;
    5706:	mov.w	r3, #1
    570a:	strb.w	r3, [r4, #208]	; 0xd0
      _b = b;
    570e:	mvn.w	r3, #10
    5712:	strb.w	r3, [r4, #209]	; 0xd1
    5716:	mvn.w	r3, #2
    571a:	strb.w	r3, [r4, #212]	; 0xd4
    571e:	strb.w	r3, [r4, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5722:	mov.w	r3, #106	; 0x6a
    5726:	strb.w	r3, [r4, #216]	; 0xd8
      _s = s;
    572a:	mov.w	r3, #66	; 0x42
    572e:	strb.w	r3, [r4, #217]	; 0xd9
      _b = b;
    5732:	mvn.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5736:	strb.w	r6, [r4, #226]	; 0xe2
      _b = b;
    573a:	strb.w	r3, [r4, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    573e:	mov.w	r3, #102	; 0x66
      _s = s;
    5742:	strb.w	r6, [r4, #235]	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5746:	strb.w	r3, [r4, #219]	; 0xdb
      _s = s;
    574a:	mov.w	r3, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    574e:	strb.w	r1, [r4, #246]	; 0xf6
      _s = s;
    5752:	strb.w	r3, [r4, #220]	; 0xdc
      _b = b;
    5756:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    575a:	strb.w	ip, [r4, #249]	; 0xf9
      _s = s;
      _b = b;
    575e:	strb.w	r3, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5762:	mov.w	r3, #31
    5766:	strb.w	r3, [r4, #222]	; 0xde
      _s = s;
    576a:	mvn.w	r3, #82	; 0x52
    576e:	strb.w	r3, [r4, #223]	; 0xdf
      _b = b;
    5772:	mvn.w	r3, #36	; 0x24
    5776:	strb.w	r3, [r4, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    577a:	mov.w	r3, #33	; 0x21
    577e:	strb.w	r3, [r4, #225]	; 0xe1
      _s = s;
      _b = b;
    5782:	mvn.w	r3, #15
    5786:	strb.w	r3, [r4, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    578a:	mov.w	r3, #29
    578e:	strb.w	r3, [r4, #228]	; 0xe4
      _s = s;
    5792:	mvn.w	r3, #62	; 0x3e
    5796:	strb.w	r3, [r4, #229]	; 0xe5
      _b = b;
    579a:	mvn.w	r3, #67	; 0x43
    579e:	strb.w	r3, [r4, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57a2:	mov.w	r3, #22
    57a6:	strb.w	r3, [r4, #231]	; 0xe7
      _s = s;
    57aa:	mvn.w	r3, #33	; 0x21
    57ae:	strb.w	r3, [r4, #232]	; 0xe8
      _b = b;
    57b2:	mvn.w	r3, #92	; 0x5c
    57b6:	strb.w	r3, [r4, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57ba:	mov.w	r3, #55	; 0x37
    57be:	strb.w	r3, [r4, #234]	; 0xea
      _s = s;
      _b = b;
    57c2:	mvn.w	r3, #85	; 0x55
    57c6:	strb.w	r3, [r4, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57ca:	mov.w	r3, #77	; 0x4d
    57ce:	strb.w	r3, [r4, #237]	; 0xed
      _s = s;
    57d2:	mvn.w	r3, #85	; 0x55
    57d6:	strb.w	r3, [r4, #238]	; 0xee
      _b = b;
    57da:	mvn.w	r3, #86	; 0x56
    57de:	strb.w	r3, [r4, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57e2:	mov.w	r3, #112	; 0x70
    57e6:	strb.w	r3, [r4, #240]	; 0xf0
      _s = s;
    57ea:	mov.w	r3, #73	; 0x49
    57ee:	strb.w	r3, [r4, #241]	; 0xf1
      _b = b;
    57f2:	mvn.w	r3, #74	; 0x4a
    57f6:	strb.w	r3, [r4, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57fa:	mvn.w	r3, #43	; 0x2b
    57fe:	strb.w	r3, [r4, #243]	; 0xf3
      _s = s;
    5802:	mov.w	r3, #87	; 0x57
    5806:	strb.w	r3, [r4, #244]	; 0xf4
      _b = b;
    580a:	mov.w	r3, #32
    580e:	strb.w	r3, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5812:	mov.w	r3, #34	; 0x22
    5816:	strb.w	r3, [r4, #247]	; 0xf7
      _b = b;
    581a:	mov.w	r3, #110	; 0x6e
    581e:	strb.w	r3, [r4, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5822:	mvn.w	r3, #108	; 0x6c
    5826:	strb.w	r3, [r4, #250]	; 0xfa
      _b = b;
    582a:	mov.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    582e:	strb.w	r0, [r4, #258]	; 0x102
      _s = s;
      _b = b;
    5832:	strb.w	r3, [r4, #251]	; 0xfb
    5836:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    583a:	strb.w	r0, [r4, #282]	; 0x11a
      _s = s;
      _b = b;
    583e:	strb.w	r3, [r4, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5842:	mvn.w	r3, #120	; 0x78
    5846:	strb.w	r5, [r4, #279]	; 0x117
    584a:	strb.w	r3, [r4, #252]	; 0xfc
      _s = s;
    584e:	mvn.w	r3, #18
    5852:	strb.w	r3, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5856:	mvn.w	r3, #118	; 0x76
    585a:	strb.w	r3, [r4, #255]	; 0xff
      _s = s;
    585e:	mvn.w	r3, #30
    5862:	strb.w	r3, [r4, #256]	; 0x100
      _b = b;
    5866:	mov.w	r3, #51	; 0x33
    586a:	strb.w	r3, [r4, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    586e:	mov.w	r3, #69	; 0x45
    5872:	strb.w	r3, [r4, #259]	; 0x103
      _b = b;
    5876:	mov.w	r3, #99	; 0x63
    587a:	strb.w	r3, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    587e:	mvn.w	r3, #122	; 0x7a
    5882:	strb.w	r3, [r4, #261]	; 0x105
      _s = s;
    5886:	mov.w	r3, #48	; 0x30
    588a:	strb.w	r3, [r4, #262]	; 0x106
      _b = b;
    588e:	mvn.w	r3, #62	; 0x3e
    5892:	strb.w	r3, [r4, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5896:	mvn.w	r3, #119	; 0x77
    589a:	strb.w	r3, [r4, #264]	; 0x108
      _s = s;
    589e:	mov.w	r3, #55	; 0x37
    58a2:	strb.w	r3, [r4, #265]	; 0x109
      _b = b;
    58a6:	mvn.w	r3, #24
    58aa:	strb.w	r3, [r4, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58ae:	mvn.w	r3, #120	; 0x78
    58b2:	strb.w	r3, [r4, #267]	; 0x10b
      _s = s;
    58b6:	mov.w	r3, #17
    58ba:	strb.w	r3, [r4, #268]	; 0x10c
      _b = b;
    58be:	mvn.w	r3, #18
    58c2:	strb.w	r3, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58c6:	mvn.w	r3, #109	; 0x6d
    58ca:	strb.w	r3, [r4, #270]	; 0x10e
      _s = s;
    58ce:	mov.w	r3, #69	; 0x45
    58d2:	strb.w	r3, [r4, #271]	; 0x10f
      _b = b;
    58d6:	mvn.w	r3, #54	; 0x36
    58da:	strb.w	r3, [r4, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58de:	mvn.w	r3, #109	; 0x6d
    58e2:	strb.w	r3, [r4, #273]	; 0x111
      _s = s;
    58e6:	mov.w	r3, #72	; 0x48
    58ea:	strb.w	r3, [r4, #274]	; 0x112
      _b = b;
    58ee:	mvn.w	r3, #52	; 0x34
    58f2:	strb.w	r3, [r4, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58f6:	mvn.w	r3, #106	; 0x6a
    58fa:	strb.w	r3, [r4, #276]	; 0x114
      _s = s;
    58fe:	mov.w	r3, #35	; 0x23
    5902:	strb.w	r3, [r4, #277]	; 0x115
      _b = b;
    5906:	mvn.w	r3, #46	; 0x2e
    590a:	strb.w	r3, [r4, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    590e:	mov.w	r3, #66	; 0x42
    5912:	strb.w	r3, [r4, #280]	; 0x118
    5916:	mov.w	r3, #59	; 0x3b
    591a:	strb.w	r3, [r4, #283]	; 0x11b
      _b = b;
    591e:	mvn.w	r3, #33	; 0x21
    5922:	strb.w	r3, [r4, #281]	; 0x119
    5926:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    592a:	strb.w	r9, [r4, #298]	; 0x12a
      _b = b;
    592e:	strb.w	r3, [r4, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5932:	mov.w	r3, #65	; 0x41
    5936:	strb.w	r3, [r4, #289]	; 0x121
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    593a:	mvn.w	r3, #111	; 0x6f
    593e:	strb.w	r3, [r4, #285]	; 0x11d
      _s = s;
      _b = b;
    5942:	mvn.w	r3, #9
    5946:	strb.w	r3, [r4, #287]	; 0x11f
    594a:	mov.w	r3, #58	; 0x3a
    594e:	strb.w	r3, [r4, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5952:	mov.w	r3, #59	; 0x3b
    5956:	strb.w	r3, [r4, #292]	; 0x124
      _b = b;
    595a:	mvn.w	r3, #49	; 0x31
    595e:	strb.w	r3, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5962:	mov.w	r3, #34	; 0x22
    5966:	strb.w	r3, [r4, #294]	; 0x126
      _s = s;
    596a:	mvn.w	r3, #40	; 0x28
    596e:	strb.w	r3, [r4, #295]	; 0x127
      _b = b;
    5972:	mvn.w	r3, #22
    5976:	strb.w	r3, [r4, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    597a:	mov.w	r3, #31
    597e:	strb.w	r3, [r4, #297]	; 0x129
      _s = s;
      _b = b;
    5982:	mvn.w	r3, #31
    5986:	strb.w	r3, [r4, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    598a:	mov.w	r3, #28
    598e:	strb.w	r3, [r4, #300]	; 0x12c
      _s = s;
    5992:	mvn.w	r3, #59	; 0x3b
    5996:	strb.w	r3, [r4, #301]	; 0x12d
      _b = b;
    599a:	mvn.w	r3, #72	; 0x48
    599e:	strb.w	r3, [r4, #302]	; 0x12e
    59a2:	mvn.w	r3, #54	; 0x36
    59a6:	strb.w	r3, [r4, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59aa:	mov.w	r3, #29
    59ae:	strb.w	r3, [r4, #306]	; 0x132
      _s = s;
      _b = b;
    59b2:	mvn.w	r3, #62	; 0x3e
    59b6:	strb.w	r3, [r4, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59ba:	mov.w	r3, #88	; 0x58
    59be:	strb.w	r3, [r4, #309]	; 0x135
      _s = s;
    59c2:	mov.w	r3, #61	; 0x3d
    59c6:	strb.w	r3, [r4, #310]	; 0x136
      _b = b;
    59ca:	mvn.w	r3, #61	; 0x3d
    59ce:	strb.w	r3, [r4, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59d2:	mov.w	r3, #112	; 0x70
    59d6:	strb.w	r3, [r4, #312]	; 0x138
      _s = s;
      _b = b;
    59da:	mvn.w	r3, #78	; 0x4e
    59de:	strb.w	r3, [r4, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59e2:	mov.w	r3, #123	; 0x7b
    59e6:	strb.w	r3, [r4, #315]	; 0x13b
      _s = s;
    59ea:	mov.w	r3, #22
    59ee:	strb.w	r3, [r4, #316]	; 0x13c
    59f2:	mov.w	r3, #5
    59f6:	strb.w	r3, [r4, #286]	; 0x11e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59fa:	mvn.w	r3, #32
    59fe:	strb.w	r3, [r4, #288]	; 0x120
    5a02:	mov.w	r3, #77	; 0x4d
    5a06:	strb.w	r3, [r4, #291]	; 0x123
    5a0a:	mov.w	r3, #20
    5a0e:	strb.w	r3, [r4, #303]	; 0x12f
      _s = s;
    5a12:	mvn.w	r3, #120	; 0x78
    5a16:	strb.w	r3, [r4, #304]	; 0x130
    5a1a:	mvn.w	r3, #96	; 0x60
    5a1e:	strb.w	r3, [r4, #307]	; 0x133
    5a22:	mov.w	r3, #48	; 0x30
    5a26:	strb.w	r3, [r4, #313]	; 0x139
      _b = b;
    5a2a:	mvn.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a2e:	strb.w	r1, [r4, #321]	; 0x141
      _s = s;
      _b = b;
    5a32:	strb.w	r3, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a36:	mov.w	r3, #123	; 0x7b
    5a3a:	strb.w	r0, [r4, #324]	; 0x144
    5a3e:	strb.w	r3, [r4, #318]	; 0x13e
      _s = s;
    5a42:	mov.w	r3, #22
      _b = b;
    5a46:	strb.w	r9, [r4, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a4a:	strb.w	r3, [r4, #319]	; 0x13f
      _b = b;
    5a4e:	mvn.w	r3, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a52:	strb.w	r0, [r4, #333]	; 0x14d
      _s = s;
      _b = b;
    5a56:	strb.w	r3, [r4, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a5a:	mov.w	r3, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a5e:	strb.w	r9, [r4, #339]	; 0x153
      _s = s;
    5a62:	strb.w	r3, [r4, #322]	; 0x142
      _b = b;
    5a66:	mvn.w	r3, #73	; 0x49
    5a6a:	strb.w	r3, [r4, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a6e:	mvn.w	r3, #4
    5a72:	strb.w	r3, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a76:	mov.w	r3, #125	; 0x7d
    5a7a:	strb.w	r3, [r4, #327]	; 0x147
      _s = s;
    5a7e:	mov.w	r3, #115	; 0x73
    5a82:	strb.w	r3, [r4, #328]	; 0x148
      _b = b;
    5a86:	mvn.w	r3, #102	; 0x66
    5a8a:	strb.w	r3, [r4, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a8e:	mov.w	r3, #127	; 0x7f
    5a92:	strb.w	r3, [r4, #330]	; 0x14a
      _s = s;
    5a96:	mov.w	r3, #57	; 0x39
    5a9a:	strb.w	r3, [r4, #331]	; 0x14b
      _b = b;
    5a9e:	mvn.w	r3, #86	; 0x56
    5aa2:	strb.w	r3, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5aa6:	mov.w	r3, #74	; 0x4a
    5aaa:	strb.w	r3, [r4, #334]	; 0x14e
      _b = b;
    5aae:	mvn.w	r3, #118	; 0x76
    5ab2:	strb.w	r3, [r4, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ab6:	mvn.w	r3, #114	; 0x72
    5aba:	strb.w	r3, [r4, #336]	; 0x150
      _s = s;
    5abe:	mvn.w	r3, #62	; 0x3e
    5ac2:	strb.w	r3, [r4, #337]	; 0x151
      _b = b;
    5ac6:	mov.w	r3, #121	; 0x79
    5aca:	strb.w	r3, [r4, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ace:	mov.w	r3, #115	; 0x73
    5ad2:	strb.w	r3, [r4, #340]	; 0x154
      _b = b;
    5ad6:	mvn.w	r3, #102	; 0x66
    5ada:	strb.w	r3, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ade:	mvn.w	r3, #107	; 0x6b
    5ae2:	strb.w	r3, [r4, #342]	; 0x156
      _s = s;
    5ae6:	mov.w	r3, #94	; 0x5e
    5aea:	strb.w	r3, [r4, #343]	; 0x157
      _b = b;
    5aee:	mvn.w	r3, #72	; 0x48
    5af2:	strb.w	r3, [r4, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5af6:	mvn.w	r3, #100	; 0x64
    5afa:	strb.w	r3, [r4, #345]	; 0x159
      _s = s;
    5afe:	mov.w	r3, #45	; 0x2d
    5b02:	strb.w	r3, [r4, #346]	; 0x15a
      _b = b;
    5b06:	mvn.w	r3, #74	; 0x4a
    5b0a:	strb.w	r3, [r4, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b0e:	mvn.w	r3, #122	; 0x7a
    5b12:	strb.w	r3, [r4, #348]	; 0x15c
      _s = s;
    5b16:	mov.w	r3, #41	; 0x29
    5b1a:	strb.w	r3, [r4, #349]	; 0x15d
      _b = b;
    5b1e:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b22:	strb.w	r0, [r4, #351]	; 0x15f
      _s = s;
      _b = b;
    5b26:	strb.w	r3, [r4, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b2a:	mov.w	r3, #54	; 0x36
    5b2e:	strb.w	r5, [r4, #354]	; 0x162
    5b32:	strb.w	r3, [r4, #378]	; 0x17a
      _s = s;
      _b = b;
    5b36:	mvn.w	r3, #13
    5b3a:	strb.w	r3, [r4, #353]	; 0x161
    5b3e:	mvn.w	r3, #23
    5b42:	strb.w	r3, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b46:	mvn.w	r3, #63	; 0x3f
    5b4a:	strb.w	r3, [r4, #358]	; 0x166
      _b = b;
    5b4e:	strb.w	r3, [r4, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b52:	mvn.w	r3, #37	; 0x25
    5b56:	strb.w	r3, [r4, #360]	; 0x168
      _s = s;
    5b5a:	mov.w	r3, #76	; 0x4c
    5b5e:	strb.w	r3, [r4, #361]	; 0x169
      _b = b;
    5b62:	mov.w	r3, #50	; 0x32
    5b66:	strb.w	r3, [r4, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b6a:	mov.w	r3, #101	; 0x65
    5b6e:	strb.w	r3, [r4, #363]	; 0x16b
      _s = s;
    5b72:	mov.w	r3, #92	; 0x5c
    5b76:	strb.w	r3, [r4, #364]	; 0x16c
      _b = b;
    5b7a:	mvn.w	r3, #95	; 0x5f
    5b7e:	strb.w	r3, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b82:	mov.w	r3, #40	; 0x28
    5b86:	strb.w	r3, [r4, #366]	; 0x16e
      _s = s;
    5b8a:	mvn.w	r3, #89	; 0x59
    5b8e:	strb.w	r3, [r4, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b92:	mov.w	r3, #22
    5b96:	strb.w	r3, [r4, #369]	; 0x171
      _s = s;
      _b = b;
    5b9a:	mvn.w	r3, #99	; 0x63
    5b9e:	strb.w	r3, [r4, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ba2:	mov.w	r3, #21
    5ba6:	strb.w	r3, [r4, #372]	; 0x174
      _s = s;
    5baa:	mvn.w	r3, #12
    5bae:	strb.w	r3, [r4, #373]	; 0x175
      _b = b;
    5bb2:	mvn.w	r3, #71	; 0x47
    5bb6:	strb.w	r3, [r4, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bba:	mov.w	r3, #24
    5bbe:	strb.w	r3, [r4, #375]	; 0x177
      _s = s;
      _b = b;
    5bc2:	mvn.w	r3, #46	; 0x2e
    5bc6:	strb.w	r3, [r4, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bca:	mvn.w	r3, #89	; 0x59
    5bce:	strb.w	r3, [r4, #379]	; 0x17b
      _b = b;
    5bd2:	mvn.w	r3, #108	; 0x6c
    5bd6:	strb.w	r3, [r4, #380]	; 0x17c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bda:	mov.w	r3, #111	; 0x6f
    5bde:	strb.w	r3, [r4, #381]	; 0x17d
      _s = s;
    5be2:	mvn.w	r3, #77	; 0x4d
    5be6:	strb.w	r3, [r4, #382]	; 0x17e
    5bea:	mov.w	r3, #85	; 0x55
    5bee:	strb.w	r3, [r4, #352]	; 0x160
    5bf2:	mvn.w	r3, #79	; 0x4f
    5bf6:	strb.w	r3, [r4, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bfa:	mvn.w	r3, #122	; 0x7a
    5bfe:	strb.w	r3, [r4, #357]	; 0x165
      _s = s;
      _b = b;
    5c02:	mvn.w	r3, #79	; 0x4f
    5c06:	strb.w	r3, [r4, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c0a:	mvn.w	r3, #32
    5c0e:	strb.w	r3, [r4, #370]	; 0x172
    5c12:	mvn.w	r3, #4
    5c16:	strb.w	r3, [r4, #376]	; 0x178
      _b = b;
    5c1a:	mov.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c1e:	strb.w	r0, [r4, #393]	; 0x189
      _s = s;
      _b = b;
    5c22:	strb.w	r3, [r4, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c26:	mov.w	r3, #95	; 0x5f
    5c2a:	strb.w	r0, [r4, #399]	; 0x18f
    5c2e:	strb.w	r3, [r4, #384]	; 0x180
      _s = s;
    5c32:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c36:	strb.w	ip, [r4, #405]	; 0x195
      _s = s;
    5c3a:	strb.w	r3, [r4, #385]	; 0x181
      _b = b;
    5c3e:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c42:	strb.w	r8, [r4, #402]	; 0x192
      _s = s;
      _b = b;
    5c46:	strb.w	r3, [r4, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c4a:	mov.w	r3, #123	; 0x7b
    5c4e:	strb.w	r8, [r4, #411]	; 0x19b
    5c52:	strb.w	r3, [r4, #387]	; 0x183
      _s = s;
    5c56:	mov.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c5a:	strb.w	fp, [r4, #414]	; 0x19e
      _s = s;
    5c5e:	strb.w	r3, [r4, #388]	; 0x184
      _b = b;
    5c62:	mov.w	r3, #70	; 0x46
    5c66:	strb.w	r3, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c6a:	mov.w	r3, #127	; 0x7f
    5c6e:	strb.w	r3, [r4, #390]	; 0x186
      _s = s;
    5c72:	mov.w	r3, #47	; 0x2f
    5c76:	strb.w	r3, [r4, #391]	; 0x187
      _b = b;
    5c7a:	mvn.w	r3, #109	; 0x6d
    5c7e:	strb.w	r3, [r4, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c82:	mvn.w	r3, #83	; 0x53
    5c86:	strb.w	r3, [r4, #394]	; 0x18a
      _b = b;
    5c8a:	mvn.w	r3, #100	; 0x64
    5c8e:	strb.w	r3, [r4, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c92:	mov.w	r3, #126	; 0x7e
    5c96:	strb.w	r3, [r4, #396]	; 0x18c
      _s = s;
    5c9a:	mov.w	r3, #72	; 0x48
    5c9e:	strb.w	r3, [r4, #397]	; 0x18d
      _b = b;
    5ca2:	mvn.w	r3, #51	; 0x33
    5ca6:	strb.w	r3, [r4, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5caa:	mov.w	r3, #57	; 0x39
    5cae:	strb.w	r3, [r4, #400]	; 0x190
      _b = b;
    5cb2:	mvn.w	r3, #24
    5cb6:	strb.w	r3, [r4, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cba:	mov.w	r3, #99	; 0x63
    5cbe:	strb.w	r3, [r4, #403]	; 0x193
      _b = b;
    5cc2:	mvn.w	r3, #28
    5cc6:	strb.w	r3, [r4, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cca:	mov.w	r3, #95	; 0x5f
    5cce:	strb.w	r3, [r4, #406]	; 0x196
      _b = b;
    5cd2:	mvn.w	r3, #29
    5cd6:	strb.w	r3, [r4, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cda:	mvn.w	r3, #122	; 0x7a
    5cde:	strb.w	r3, [r4, #408]	; 0x198
      _s = s;
    5ce2:	mov.w	r3, #99	; 0x63
    5ce6:	strb.w	r3, [r4, #409]	; 0x199
      _b = b;
    5cea:	mvn.w	r3, #52	; 0x34
    5cee:	strb.w	r3, [r4, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cf2:	mov.w	r3, #98	; 0x62
    5cf6:	strb.w	r3, [r4, #412]	; 0x19c
      _b = b;
    5cfa:	mvn.w	r3, #69	; 0x45
    5cfe:	strb.w	r3, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d02:	mov.w	r3, #116	; 0x74
    5d06:	strb.w	r3, [r4, #415]	; 0x19f
      _b = b;
    5d0a:	mov.w	r3, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d0e:	strb.w	r0, [r4, #429]	; 0x1ad
      _s = s;
      _b = b;
    5d12:	strb.w	r3, [r4, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d16:	mov.w	r3, #66	; 0x42
      _b = b;
    5d1a:	strb.w	r9, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d1e:	strb.w	r3, [r4, #442]	; 0x1ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d22:	mvn.w	r3, #108	; 0x6c
    5d26:	strb.w	r5, [r4, #420]	; 0x1a4
    5d2a:	strb.w	r3, [r4, #417]	; 0x1a1
      _s = s;
    5d2e:	mov.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d32:	strb.w	r1, [r4, #423]	; 0x1a7
      _s = s;
    5d36:	strb.w	r3, [r4, #418]	; 0x1a2
      _b = b;
    5d3a:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d3e:	strb.w	r5, [r4, #426]	; 0x1aa
      _s = s;
      _b = b;
    5d42:	strb.w	r3, [r4, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d46:	mvn.w	r3, #78	; 0x4e
      _b = b;
    5d4a:	strb.w	fp, [r4, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d4e:	strb.w	r3, [r4, #424]	; 0x1a8
      _b = b;
    5d52:	mvn.w	r3, #22
    5d56:	strb.w	r3, [r4, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d5a:	mvn.w	r3, #49	; 0x31
    5d5e:	strb.w	r3, [r4, #427]	; 0x1ab
      _b = b;
    5d62:	mvn.w	r3, #26
    5d66:	strb.w	r3, [r4, #428]	; 0x1ac
    5d6a:	mvn.w	r3, #55	; 0x37
    5d6e:	strb.w	r3, [r4, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d72:	mvn.w	r3, #95	; 0x5f
    5d76:	strb.w	r3, [r4, #432]	; 0x1b0
      _s = s;
    5d7a:	mov.w	r3, #37	; 0x25
    5d7e:	strb.w	r3, [r4, #433]	; 0x1b1
      _b = b;
    5d82:	mov.w	r3, #62	; 0x3e
    5d86:	strb.w	r3, [r4, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d8a:	mov.w	r3, #116	; 0x74
    5d8e:	strb.w	r3, [r4, #435]	; 0x1b3
      _s = s;
    5d92:	mov.w	r3, #123	; 0x7b
    5d96:	strb.w	r3, [r4, #436]	; 0x1b4
    5d9a:	mov.w	r3, #96	; 0x60
    5d9e:	strb.w	r3, [r4, #439]	; 0x1b7
      _b = b;
    5da2:	mvn.w	r3, #30
    5da6:	strb.w	r3, [r4, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5daa:	mov.w	r3, #38	; 0x26
    5dae:	strb.w	r3, [r4, #444]	; 0x1bc
    5db2:	mov.w	r3, #112	; 0x70
    5db6:	strb.w	r3, [r4, #447]	; 0x1bf
      _s = s;
    5dba:	mov.w	r3, #118	; 0x76
    5dbe:	strb.w	r3, [r4, #448]	; 0x1c0
    5dc2:	mov.w	r3, #73	; 0x49
    5dc6:	strb.w	r3, [r4, #421]	; 0x1a5
    5dca:	mvn.w	r3, #96	; 0x60
    5dce:	strb.w	r3, [r4, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd2:	mov.w	r3, #114	; 0x72
    5dd6:	strb.w	r3, [r4, #438]	; 0x1b6
      _s = s;
      _b = b;
    5dda:	mvn.w	r3, #39	; 0x27
    5dde:	strb.w	r3, [r4, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5de2:	mov.w	r3, #106	; 0x6a
    5de6:	strb.w	r3, [r4, #441]	; 0x1b9
      _s = s;
    5dea:	mvn.w	r3, #102	; 0x66
    5dee:	strb.w	r3, [r4, #445]	; 0x1bd
      _b = b;
    5df2:	mvn.w	r3, #79	; 0x4f
    5df6:	strb.w	r3, [r4, #446]	; 0x1be
    5dfa:	mvn.w	r3, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dfe:	strb.w	r6, [r4, #471]	; 0x1d7
      _s = s;
      _b = b;
    5e02:	strb.w	r3, [r4, #449]	; 0x1c1
    5e06:	mvn.w	r3, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e0a:	strb.w	r9, [r4, #478]	; 0x1de
      _b = b;
    5e0e:	strb.w	r3, [r4, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e12:	mov.w	r3, #116	; 0x74
    5e16:	strb.w	r5, [r4, #465]	; 0x1d1
    5e1a:	strb.w	r3, [r4, #450]	; 0x1c2
      _s = s;
      _b = b;
    5e1e:	mov.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e22:	strb.w	r8, [r4, #469]	; 0x1d5
      _b = b;
    5e26:	strb.w	r3, [r4, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e2a:	mov.w	r3, #98	; 0x62
    5e2e:	strb.w	r3, [r4, #453]	; 0x1c5
      _s = s;
    5e32:	mvn.w	r3, #110	; 0x6e
    5e36:	strb.w	r3, [r4, #454]	; 0x1c6
      _b = b;
    5e3a:	mov.w	r3, #102	; 0x66
    5e3e:	strb.w	r3, [r4, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e42:	mov.w	r3, #105	; 0x69
    5e46:	strb.w	r3, [r4, #456]	; 0x1c8
      _s = s;
    5e4a:	mov.w	r3, #124	; 0x7c
    5e4e:	strb.w	r3, [r4, #457]	; 0x1c9
      _b = b;
    5e52:	mov.w	r3, #43	; 0x2b
    5e56:	strb.w	r3, [r4, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e5a:	mvn.w	r3, #52	; 0x34
    5e5e:	strb.w	r3, [r4, #459]	; 0x1cb
      _s = s;
    5e62:	mov.w	r3, #95	; 0x5f
    5e66:	strb.w	r3, [r4, #460]	; 0x1cc
      _b = b;
    5e6a:	mov.w	r3, #24
    5e6e:	strb.w	r3, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e72:	mov.w	r3, #121	; 0x79
    5e76:	strb.w	r3, [r4, #462]	; 0x1ce
      _s = s;
    5e7a:	mvn.w	r3, #73	; 0x49
    5e7e:	strb.w	r3, [r4, #466]	; 0x1d2
      _b = b;
    5e82:	mvn.w	r3, #80	; 0x50
    5e86:	strb.w	r3, [r4, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e8a:	mvn.w	r3, #118	; 0x76
    5e8e:	strb.w	r3, [r4, #468]	; 0x1d4
    5e92:	mvn.w	r3, #109	; 0x6d
    5e96:	strb.w	r3, [r4, #474]	; 0x1da
      _s = s;
    5e9a:	mvn.w	r3, #110	; 0x6e
    5e9e:	strb.w	r3, [r4, #475]	; 0x1db
      _b = b;
    5ea2:	mvn.w	r3, #37	; 0x25
    5ea6:	strb.w	r3, [r4, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eaa:	mvn.w	r3, #114	; 0x72
    5eae:	strb.w	r3, [r4, #477]	; 0x1dd
    5eb2:	mvn.w	r3, #111	; 0x6f
    5eb6:	strb.w	r3, [r4, #480]	; 0x1e0
      _s = s;
    5eba:	mvn.w	r3, #81	; 0x51
    5ebe:	strb.w	r3, [r4, #481]	; 0x1e1
    5ec2:	mvn.w	r3, #34	; 0x22
    5ec6:	strb.w	r3, [r4, #451]	; 0x1c3
    5eca:	mvn.w	r3, #121	; 0x79
    5ece:	strb.w	r3, [r4, #463]	; 0x1cf
      _b = b;
    5ed2:	mov.w	r3, #106	; 0x6a
    5ed6:	strb.w	r3, [r4, #464]	; 0x1d0
    5eda:	mvn.w	r3, #34	; 0x22
    5ede:	strb.w	r3, [r4, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ee2:	mvn.w	r3, #45	; 0x2d
    5ee6:	strb.w	r3, [r4, #472]	; 0x1d8
      _b = b;
    5eea:	strb.w	r3, [r4, #473]	; 0x1d9
    5eee:	mvn.w	r3, #31
    5ef2:	strb.w	lr, [r4, #485]	; 0x1e5
    5ef6:	strb.w	r3, [r4, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5efa:	mvn.w	r3, #109	; 0x6d
    5efe:	strb.w	ip, [r4, #486]	; 0x1e6
    5f02:	strb.w	r3, [r4, #483]	; 0x1e3
      _s = s;
    5f06:	mvn.w	r3, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f0a:	strb.w	r1, [r4, #504]	; 0x1f8
      _s = s;
    5f0e:	strb.w	r3, [r4, #484]	; 0x1e4
    5f12:	mov.w	r3, #79	; 0x4f
    5f16:	strb.w	r5, [r4, #508]	; 0x1fc
    5f1a:	strb.w	r3, [r4, #487]	; 0x1e7
      _b = b;
    5f1e:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f22:	strb.w	r5, [r4, #510]	; 0x1fe
      _s = s;
      _b = b;
    5f26:	strb.w	r3, [r4, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f2a:	mov.w	r3, #119	; 0x77
    5f2e:	strb.w	r3, [r4, #489]	; 0x1e9
      _s = s;
    5f32:	mov.w	r3, #37	; 0x25
    5f36:	strb.w	r3, [r4, #490]	; 0x1ea
      _b = b;
    5f3a:	mvn.w	r3, #105	; 0x69
    5f3e:	strb.w	r3, [r4, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f42:	mov.w	r3, #113	; 0x71
    5f46:	strb.w	r3, [r4, #492]	; 0x1ec
      _s = s;
    5f4a:	mov.w	r3, #52	; 0x34
    5f4e:	strb.w	r3, [r4, #493]	; 0x1ed
      _b = b;
    5f52:	mvn.w	r3, #43	; 0x2b
    5f56:	strb.w	r3, [r4, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f5a:	mov.w	r3, #121	; 0x79
    5f5e:	strb.w	r3, [r4, #495]	; 0x1ef
      _s = s;
    5f62:	mov.w	r3, #126	; 0x7e
    5f66:	strb.w	r3, [r4, #496]	; 0x1f0
      _b = b;
    5f6a:	mvn.w	r3, #47	; 0x2f
    5f6e:	strb.w	r3, [r4, #497]	; 0x1f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f72:	mov.w	r3, #126	; 0x7e
    5f76:	strb.w	r3, [r4, #498]	; 0x1f2
      _s = s;
    5f7a:	mvn.w	r3, #58	; 0x3a
    5f7e:	strb.w	r3, [r4, #499]	; 0x1f3
      _b = b;
    5f82:	mvn.w	r3, #65	; 0x41
    5f86:	strb.w	r3, [r4, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f8a:	mov.w	r3, #127	; 0x7f
    5f8e:	strb.w	r3, [r4, #501]	; 0x1f5
      _s = s;
    5f92:	mvn.w	r3, #107	; 0x6b
    5f96:	strb.w	r3, [r4, #502]	; 0x1f6
      _b = b;
    5f9a:	mvn.w	r3, #78	; 0x4e
    5f9e:	strb.w	r3, [r4, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fa2:	mov.w	r3, #97	; 0x61
    5fa6:	strb.w	r3, [r4, #505]	; 0x1f9
      _b = b;
    5faa:	mvn.w	r3, #96	; 0x60
    5fae:	strb.w	r3, [r4, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fb2:	mov.w	r3, #127	; 0x7f
    5fb6:	strb.w	r3, [r4, #507]	; 0x1fb
      _s = s;
      _b = b;
    5fba:	mvn.w	r3, #67	; 0x43
    5fbe:	strb.w	r3, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fc2:	mvn.w	r3, #34	; 0x22
    5fc6:	strb.w	r3, [r4, #511]	; 0x1ff
      _b = b;
    5fca:	mvn.w	r3, #110	; 0x6e
    5fce:	strb.w	r3, [r4, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fd2:	mvn.w	r3, #120	; 0x78
    5fd6:	strb.w	r3, [r4, #513]	; 0x201
      _s = s;
    5fda:	mvn.w	r3, #28
    5fde:	strb.w	r3, [r4, #514]	; 0x202
      _b = b;
    5fe2:	mvn.w	r3, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fe6:	strb.w	r6, [r4, #543]	; 0x21f
      _s = s;
      _b = b;
    5fea:	strb.w	r3, [r4, #515]	; 0x203
    5fee:	mov.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ff2:	strb.w	r7, [r4, #517]	; 0x205
      _b = b;
    5ff6:	strb.w	r3, [r4, #533]	; 0x215
    5ffa:	mvn.w	r3, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ffe:	strb.w	r7, [r4, #541]	; 0x21d
      _b = b;
    6002:	strb.w	r3, [r4, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6006:	mvn.w	r3, #5
      _b = b;
    600a:	strb.w	sl, [r4, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    600e:	strb.w	r3, [r4, #520]	; 0x208
      _b = b;
    6012:	mvn.w	r3, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6016:	strb.w	fp, [r4, #546]	; 0x222
      _s = s;
      _b = b;
    601a:	strb.w	r3, [r4, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    601e:	mov.w	r3, #111	; 0x6f
    6022:	strb.w	r3, [r4, #522]	; 0x20a
      _s = s;
    6026:	mvn.w	r3, #104	; 0x68
    602a:	strb.w	r3, [r4, #523]	; 0x20b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    602e:	mov.w	r3, #99	; 0x63
    6032:	strb.w	r3, [r4, #525]	; 0x20d
      _s = s;
      _b = b;
    6036:	mov.w	r3, #60	; 0x3c
    603a:	strb.w	r3, [r4, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    603e:	mvn.w	r3, #64	; 0x40
    6042:	strb.w	r3, [r4, #528]	; 0x210
      _s = s;
      _b = b;
    6046:	mov.w	r3, #24
    604a:	strb.w	r3, [r4, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    604e:	mvn.w	r3, #64	; 0x40
    6052:	strb.w	r3, [r4, #531]	; 0x213
      _s = s;
    6056:	mov.w	r3, #102	; 0x66
    605a:	strb.w	r3, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    605e:	mov.w	r3, #127	; 0x7f
    6062:	strb.w	r3, [r4, #534]	; 0x216
      _s = s;
      _b = b;
    6066:	mov.w	r3, #121	; 0x79
    606a:	strb.w	r3, [r4, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    606e:	mvn.w	r3, #61	; 0x3d
    6072:	strb.w	r3, [r4, #538]	; 0x21a
      _b = b;
    6076:	mvn.w	r3, #37	; 0x25
    607a:	strb.w	r3, [r4, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    607e:	mvn.w	r3, #111	; 0x6f
    6082:	strb.w	r3, [r4, #540]	; 0x21c
      _s = s;
      _b = b;
    6086:	mvn.w	r3, #54	; 0x36
    608a:	strb.w	r3, [r4, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    608e:	mov.w	r3, #121	; 0x79
    6092:	strb.w	r3, [r4, #544]	; 0x220
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6096:	mvn.w	r3, #120	; 0x78
    609a:	strb.w	r3, [r4, #516]	; 0x204
    609e:	mvn.w	r3, #119	; 0x77
    60a2:	strb.w	r3, [r4, #519]	; 0x207
      _s = s;
      _b = b;
    60a6:	strb.w	r3, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60aa:	mov.w	r3, #114	; 0x72
    60ae:	strb.w	r3, [r4, #526]	; 0x20e
    60b2:	mov.w	r3, #106	; 0x6a
    60b6:	strb.w	r3, [r4, #529]	; 0x211
    60ba:	mov.w	r3, #115	; 0x73
    60be:	strb.w	r3, [r4, #535]	; 0x217
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60c2:	mvn.w	r3, #122	; 0x7a
    60c6:	strb.w	r3, [r4, #537]	; 0x219
      _s = s;
    60ca:	mov.w	r3, #114	; 0x72
    60ce:	strb.w	r3, [r4, #547]	; 0x223
      _b = b;
    60d2:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60d6:	strb.w	r6, [r4, #558]	; 0x22e
      _s = s;
      _b = b;
    60da:	strb.w	r3, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60de:	mvn.w	r3, #70	; 0x46
    60e2:	strb.w	r1, [r4, #559]	; 0x22f
    60e6:	strb.w	r3, [r4, #550]	; 0x226
      _b = b;
    60ea:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60ee:	strb.w	r1, [r4, #579]	; 0x243
      _s = s;
      _b = b;
    60f2:	strb.w	r3, [r4, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60f6:	mov.w	r3, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60fa:	strb.w	r8, [r4, #549]	; 0x225
      _s = s;
    60fe:	strb.w	r3, [r4, #553]	; 0x229
      _b = b;
    6102:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6106:	strb.w	fp, [r4, #552]	; 0x228
      _s = s;
      _b = b;
    610a:	strb.w	r3, [r4, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    610e:	mov.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6112:	strb.w	fp, [r4, #555]	; 0x22b
      _s = s;
    6116:	strb.w	r3, [r4, #556]	; 0x22c
      _b = b;
    611a:	mvn.w	r3, #19
    611e:	strb.w	r8, [r4, #566]	; 0x236
    6122:	strb.w	r3, [r4, #557]	; 0x22d
    6126:	mvn.w	r3, #25
    612a:	strb.w	fp, [r4, #569]	; 0x239
    612e:	strb.w	r3, [r4, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6132:	mvn.w	r3, #122	; 0x7a
    6136:	strb.w	r3, [r4, #561]	; 0x231
      _s = s;
    613a:	mov.w	r3, #78	; 0x4e
    613e:	strb.w	r3, [r4, #562]	; 0x232
      _b = b;
    6142:	mvn.w	r3, #58	; 0x3a
    6146:	strb.w	r3, [r4, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    614a:	mov.w	r3, #110	; 0x6e
    614e:	strb.w	r3, [r4, #564]	; 0x234
      _s = s;
    6152:	mov.w	r3, #93	; 0x5d
    6156:	strb.w	r3, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    615a:	mov.w	r3, #120	; 0x78
    615e:	strb.w	r3, [r4, #567]	; 0x237
      _s = s;
    6162:	mov.w	r3, #122	; 0x7a
    6166:	strb.w	r3, [r4, #568]	; 0x238
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    616a:	mov.w	r3, #120	; 0x78
    616e:	strb.w	r3, [r4, #570]	; 0x23a
      _s = s;
    6172:	mov.w	r3, #124	; 0x7c
    6176:	strb.w	r3, [r4, #571]	; 0x23b
      _b = b;
    617a:	mvn.w	r3, #93	; 0x5d
    617e:	strb.w	r3, [r4, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6182:	mov.w	r3, #126	; 0x7e
    6186:	strb.w	r3, [r4, #573]	; 0x23d
      _s = s;
    618a:	mov.w	r3, #115	; 0x73
    618e:	strb.w	r3, [r4, #574]	; 0x23e
      _b = b;
    6192:	mvn.w	r3, #94	; 0x5e
    6196:	strb.w	r3, [r4, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    619a:	mov.w	r3, #120	; 0x78
    619e:	strb.w	r3, [r4, #576]	; 0x240
      _s = s;
    61a2:	mov.w	r3, #45	; 0x2d
    61a6:	strb.w	r3, [r4, #577]	; 0x241
      _b = b;
    61aa:	mvn.w	r3, #66	; 0x42
    61ae:	strb.w	r3, [r4, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61b2:	mvn.w	r3, #55	; 0x37
    61b6:	strb.w	r3, [r4, #580]	; 0x244
      _b = b;
    61ba:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61be:	strb.w	r0, [r4, #582]	; 0x246
      _s = s;
      _b = b;
    61c2:	strb.w	r3, [r4, #581]	; 0x245
    61c6:	mov.w	r3, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61ca:	strb.w	r0, [r4, #604]	; 0x25c
      _b = b;
    61ce:	strb.w	r3, [r4, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61d2:	mvn.w	r3, #5
    61d6:	strb.w	r6, [r4, #613]	; 0x265
    61da:	strb.w	r3, [r4, #586]	; 0x24a
      _b = b;
    61de:	mvn.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61e2:	strb.w	r5, [r4, #585]	; 0x249
      _s = s;
      _b = b;
    61e6:	strb.w	r3, [r4, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61ea:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61ee:	strb.w	r5, [r4, #588]	; 0x24c
      _s = s;
    61f2:	strb.w	r3, [r4, #589]	; 0x24d
      _b = b;
    61f6:	mvn.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61fa:	strb.w	ip, [r4, #591]	; 0x24f
      _s = s;
      _b = b;
    61fe:	strb.w	r3, [r4, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6202:	mvn.w	r3, #98	; 0x62
    6206:	strb.w	sl, [r4, #607]	; 0x25f
    620a:	strb.w	r3, [r4, #592]	; 0x250
      _b = b;
    620e:	mvn.w	r3, #111	; 0x6f
    6212:	strb.w	r3, [r4, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6216:	mvn.w	r3, #94	; 0x5e
    621a:	strb.w	r3, [r4, #594]	; 0x252
      _s = s;
    621e:	mov.w	r3, #83	; 0x53
    6222:	strb.w	r3, [r4, #595]	; 0x253
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6226:	mvn.w	r3, #15
    622a:	strb.w	r3, [r4, #597]	; 0x255
      _s = s;
    622e:	mov.w	r3, #119	; 0x77
    6232:	strb.w	r3, [r4, #598]	; 0x256
      _b = b;
    6236:	mov.w	r3, #83	; 0x53
    623a:	strb.w	r3, [r4, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    623e:	mov.w	r3, #1
    6242:	strb.w	r3, [r4, #600]	; 0x258
      _s = s;
    6246:	mov.w	r3, #102	; 0x66
    624a:	strb.w	r3, [r4, #601]	; 0x259
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    624e:	mvn.w	r3, #114	; 0x72
    6252:	strb.w	r3, [r4, #603]	; 0x25b
      _s = s;
      _b = b;
    6256:	mov.w	r3, #127	; 0x7f
    625a:	strb.w	r3, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    625e:	mvn.w	r3, #114	; 0x72
    6262:	strb.w	r3, [r4, #606]	; 0x25e
      _s = s;
      _b = b;
    6266:	mvn.w	r3, #26
    626a:	strb.w	r3, [r4, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    626e:	mvn.w	r3, #114	; 0x72
    6272:	strb.w	r3, [r4, #609]	; 0x261
      _s = s;
      _b = b;
    6276:	mvn.w	r3, #56	; 0x38
    627a:	strb.w	r3, [r4, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    627e:	mvn.w	r3, #118	; 0x76
    6282:	strb.w	r3, [r4, #612]	; 0x264
      _s = s;
    6286:	mvn.w	r3, #8
    628a:	strb.w	r3, [r4, #583]	; 0x247
      _b = b;
    628e:	mvn.w	r3, #119	; 0x77
    6292:	strb.w	r3, [r4, #584]	; 0x248
    6296:	mvn.w	r3, #120	; 0x78
    629a:	strb.w	r3, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    629e:	mvn.w	r3, #45	; 0x2d
    62a2:	strb.w	r3, [r4, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62a6:	mvn.w	r3, #120	; 0x78
    62aa:	strb.w	r6, [r4, #624]	; 0x270
    62ae:	strb.w	r3, [r4, #615]	; 0x267
      _s = s;
    62b2:	mvn.w	r3, #92	; 0x5c
      _b = b;
    62b6:	strb.w	lr, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    62ba:	strb.w	r3, [r4, #616]	; 0x268
      _b = b;
    62be:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62c2:	strb.w	ip, [r4, #630]	; 0x276
      _s = s;
      _b = b;
    62c6:	strb.w	r3, [r4, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62ca:	mvn.w	r3, #121	; 0x79
    62ce:	strb.w	ip, [r4, #633]	; 0x279
    62d2:	strb.w	r3, [r4, #618]	; 0x26a
      _s = s;
    62d6:	mvn.w	r3, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62da:	strb.w	r1, [r4, #636]	; 0x27c
      _s = s;
    62de:	strb.w	r3, [r4, #619]	; 0x26b
      _b = b;
    62e2:	mvn.w	r3, #29
    62e6:	strb.w	sl, [r4, #614]	; 0x266
    62ea:	strb.w	r3, [r4, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62ee:	mvn.w	r3, #118	; 0x76
    62f2:	strb.w	fp, [r4, #627]	; 0x273
    62f6:	strb.w	r3, [r4, #621]	; 0x26d
      _s = s;
    62fa:	mvn.w	r3, #81	; 0x51
    62fe:	strb.w	r3, [r4, #622]	; 0x26e
      _b = b;
    6302:	mvn.w	r3, #47	; 0x2f
    6306:	strb.w	r3, [r4, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    630a:	mvn.w	r3, #119	; 0x77
    630e:	strb.w	r3, [r4, #625]	; 0x271
      _b = b;
    6312:	mvn.w	r3, #50	; 0x32
    6316:	strb.w	r3, [r4, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    631a:	mvn.w	r3, #102	; 0x66
    631e:	strb.w	r3, [r4, #628]	; 0x274
    6322:	mov.w	r3, #86	; 0x56
    6326:	strb.w	r3, [r4, #631]	; 0x277
      _b = b;
    632a:	mvn.w	r3, #23
    632e:	strb.w	r3, [r4, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6332:	mov.w	r3, #114	; 0x72
    6336:	strb.w	r3, [r4, #634]	; 0x27a
      _b = b;
    633a:	mvn.w	r3, #32
    633e:	strb.w	r3, [r4, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6342:	mvn.w	r3, #40	; 0x28
    6346:	strb.w	r3, [r4, #637]	; 0x27d
      _b = b;
    634a:	mov.w	r3, #97	; 0x61
    634e:	strb.w	r3, [r4, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6352:	mvn.w	r3, #50	; 0x32
    6356:	strb.w	r3, [r4, #639]	; 0x27f
      _s = s;
    635a:	mov.w	r3, #85	; 0x55
    635e:	strb.w	r3, [r4, #640]	; 0x280
      _b = b;
    6362:	mov.w	r3, #18
    6366:	strb.w	r3, [r4, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    636a:	mvn.w	r3, #50	; 0x32
    636e:	strb.w	r3, [r4, #642]	; 0x282
      _s = s;
    6372:	mov.w	r3, #90	; 0x5a
    6376:	strb.w	r3, [r4, #643]	; 0x283
      _b = b;
    637a:	mov.w	r3, #17
    637e:	strb.w	r3, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6382:	mvn.w	r3, #51	; 0x33
    6386:	strb.w	r3, [r4, #645]	; 0x285
      _s = s;
    638a:	mov.w	r3, #70	; 0x46
    638e:	strb.w	r3, [r4, #646]	; 0x286
      _b = b;
    6392:	mov.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6396:	strb.w	r0, [r4, #657]	; 0x291
      _s = s;
      _b = b;
    639a:	strb.w	r3, [r4, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    639e:	mov.w	r3, #95	; 0x5f
      _s = s;
    63a2:	strb.w	r1, [r4, #673]	; 0x2a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a6:	strb.w	r3, [r4, #648]	; 0x288
      _s = s;
    63aa:	mov.w	r3, #13
      _b = b;
    63ae:	strb.w	lr, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63b2:	strb.w	r3, [r4, #649]	; 0x289
      _b = b;
    63b6:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63ba:	strb.w	r8, [r4, #660]	; 0x294
      _s = s;
      _b = b;
    63be:	strb.w	r3, [r4, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c2:	mvn.w	r3, #122	; 0x7a
      _s = s;
      _b = b;
    63c6:	strb.w	r7, [r4, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63ca:	strb.w	r3, [r4, #651]	; 0x28b
      _s = s;
    63ce:	mov.w	r3, #87	; 0x57
    63d2:	strb.w	r3, [r4, #652]	; 0x28c
      _b = b;
    63d6:	mvn.w	r3, #68	; 0x44
    63da:	strb.w	r3, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63de:	mvn.w	r3, #122	; 0x7a
    63e2:	strb.w	r3, [r4, #654]	; 0x28e
      _s = s;
    63e6:	mvn.w	r3, #7
    63ea:	strb.w	r3, [r4, #655]	; 0x28f
      _b = b;
    63ee:	mvn.w	r3, #91	; 0x5b
    63f2:	strb.w	r3, [r4, #656]	; 0x290
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63f6:	mvn.w	r3, #106	; 0x6a
    63fa:	strb.w	r3, [r4, #658]	; 0x292
      _b = b;
    63fe:	mvn.w	r3, #67	; 0x43
    6402:	strb.w	r3, [r4, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6406:	mvn.w	r3, #78	; 0x4e
    640a:	strb.w	r3, [r4, #661]	; 0x295
      _b = b;
    640e:	mvn.w	r3, #30
    6412:	strb.w	r3, [r4, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6416:	mvn.w	r3, #99	; 0x63
    641a:	strb.w	r3, [r4, #663]	; 0x297
      _s = s;
    641e:	mov.w	r3, #91	; 0x5b
    6422:	strb.w	r3, [r4, #664]	; 0x298
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6426:	mvn.w	r3, #78	; 0x4e
    642a:	strb.w	r3, [r4, #666]	; 0x29a
      _s = s;
    642e:	mvn.w	r3, #66	; 0x42
    6432:	strb.w	r3, [r4, #667]	; 0x29b
      _b = b;
    6436:	mvn.w	r3, #6
    643a:	strb.w	r3, [r4, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    643e:	mvn.w	r3, #72	; 0x48
    6442:	strb.w	r3, [r4, #669]	; 0x29d
      _s = s;
    6446:	mov.w	r3, #115	; 0x73
    644a:	strb.w	r3, [r4, #670]	; 0x29e
      _b = b;
    644e:	mvn.w	r3, #5
    6452:	strb.w	r3, [r4, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6456:	mvn.w	r3, #71	; 0x47
    645a:	strb.w	r3, [r4, #672]	; 0x2a0
      _s = s;
      _b = b;
    645e:	mvn.w	r3, #14
    6462:	strb.w	r3, [r4, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6466:	mvn.w	r3, #103	; 0x67
    646a:	strb.w	r3, [r4, #675]	; 0x2a3
      _s = s;
    646e:	mvn.w	r3, #56	; 0x38
    6472:	strb.w	r3, [r4, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6476:	mvn.w	r3, #93	; 0x5d
    647a:	strb.w	r3, [r4, #678]	; 0x2a6
      _s = s;
      _b = b;
    647e:	mvn.w	r3, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6482:	strb.w	r7, [r4, #679]	; 0x2a7
      _b = b;
    6486:	strb.w	r3, [r4, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    648a:	mov.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    648e:	strb.w	r9, [r4, #699]	; 0x2bb
      _s = s;
    6492:	strb.w	r3, [r4, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6496:	mvn.w	r3, #114	; 0x72
    649a:	strb.w	r9, [r4, #705]	; 0x2c1
    649e:	strb.w	r3, [r4, #681]	; 0x2a9
      _s = s;
    64a2:	mvn.w	r3, #84	; 0x54
      _b = b;
    64a6:	strb.w	lr, [r4, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64aa:	strb.w	r3, [r4, #682]	; 0x2aa
      _b = b;
    64ae:	mvn.w	r3, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64b2:	strb.w	r5, [r4, #684]	; 0x2ac
      _s = s;
      _b = b;
    64b6:	strb.w	r3, [r4, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64ba:	mvn.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64be:	strb.w	fp, [r4, #696]	; 0x2b8
      _s = s;
    64c2:	strb.w	r3, [r4, #685]	; 0x2ad
      _b = b;
    64c6:	mvn.w	r3, #24
    64ca:	strb.w	r3, [r4, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64ce:	mvn.w	r3, #6
    64d2:	strb.w	r3, [r4, #688]	; 0x2b0
      _b = b;
    64d6:	mvn.w	r3, #36	; 0x24
    64da:	strb.w	r3, [r4, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64de:	mvn.w	r3, #118	; 0x76
    64e2:	strb.w	r3, [r4, #690]	; 0x2b2
      _s = s;
    64e6:	mvn.w	r3, #9
    64ea:	strb.w	r3, [r4, #691]	; 0x2b3
      _b = b;
    64ee:	mvn.w	r3, #49	; 0x31
    64f2:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64f6:	mvn.w	r3, #118	; 0x76
    64fa:	strb.w	r3, [r4, #693]	; 0x2b5
      _s = s;
    64fe:	mvn.w	r3, #62	; 0x3e
    6502:	strb.w	r3, [r4, #694]	; 0x2b6
      _b = b;
    6506:	mvn.w	r3, #57	; 0x39
    650a:	strb.w	r3, [r4, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    650e:	mvn.w	r3, #38	; 0x26
    6512:	strb.w	r3, [r4, #697]	; 0x2b9
      _b = b;
    6516:	mvn.w	r3, #43	; 0x2b
    651a:	strb.w	r3, [r4, #698]	; 0x2ba
    651e:	mvn.w	r3, #28
    6522:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6526:	mvn.w	r3, #105	; 0x69
    652a:	strb.w	r3, [r4, #702]	; 0x2be
      _s = s;
      _b = b;
    652e:	mvn.w	r3, #17
    6532:	strb.w	r3, [r4, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6536:	mvn.w	r3, #126	; 0x7e
    653a:	strb.w	r3, [r4, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    653e:	mvn.w	r3, #105	; 0x69
    6542:	strb.w	r3, [r4, #708]	; 0x2c4
      _s = s;
    6546:	mvn.w	r3, #41	; 0x29
    654a:	strb.w	r3, [r4, #709]	; 0x2c5
      _b = b;
    654e:	mvn.w	r3, #59	; 0x3b
    6552:	strb.w	r3, [r4, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6556:	mvn.w	r3, #64	; 0x40
    655a:	strb.w	r3, [r4, #711]	; 0x2c7
      _s = s;
    655e:	mov.w	r3, #97	; 0x61
    6562:	strb.w	r3, [r4, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6566:	mvn.w	r3, #120	; 0x78
    656a:	strb.w	r3, [r4, #687]	; 0x2af
      _s = s;
    656e:	mov.w	r3, #85	; 0x55
    6572:	strb.w	r3, [r4, #703]	; 0x2bf
      _b = b;
    6576:	mov.w	r3, #21
    657a:	strb.w	r9, [r4, #722]	; 0x2d2
    657e:	strb.w	r3, [r4, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6582:	mvn.w	r3, #43	; 0x2b
      _s = s;
      _b = b;
    6586:	strb.w	ip, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    658a:	strb.w	r3, [r4, #714]	; 0x2ca
      _s = s;
    658e:	mov.w	r3, #90	; 0x5a
    6592:	strb.w	r3, [r4, #715]	; 0x2cb
      _b = b;
    6596:	mov.w	r3, #17
    659a:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    659e:	mvn.w	r3, #50	; 0x32
    65a2:	strb.w	r3, [r4, #717]	; 0x2cd
      _s = s;
    65a6:	mov.w	r3, #76	; 0x4c
    65aa:	strb.w	r3, [r4, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ae:	mov.w	r3, #113	; 0x71
    65b2:	strb.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    65b6:	mov.w	r3, #69	; 0x45
    65ba:	strb.w	r3, [r4, #721]	; 0x2d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65be:	mvn.w	r3, #126	; 0x7e
    65c2:	strb.w	r3, [r4, #723]	; 0x2d3
      _s = s;
    65c6:	mov.w	r3, #97	; 0x61
    65ca:	strb.w	r3, [r4, #724]	; 0x2d4
    65ce:	mov.w	r3, #90	; 0x5a
    65d2:	strb.w	r3, [r4, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65d6:	mvn.w	r3, #111	; 0x6f
    65da:	strb.w	r3, [r4, #729]	; 0x2d9
      _s = s;
    65de:	mov.w	r3, #46	; 0x2e
    65e2:	strb.w	r3, [r4, #730]	; 0x2da
      _b = b;
    65e6:	mvn.w	r3, #5
    65ea:	strb.w	r3, [r4, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ee:	mvn.w	r3, #107	; 0x6b
    65f2:	strb.w	r3, [r4, #732]	; 0x2dc
      _s = s;
    65f6:	mov.w	r3, #104	; 0x68
    65fa:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65fe:	mvn.w	r3, #91	; 0x5b
    6602:	strb.w	r3, [r4, #735]	; 0x2df
      _s = s;
    6606:	mov.w	r3, #121	; 0x79
    660a:	strb.w	r3, [r4, #739]	; 0x2e3
      _b = b;
    660e:	mvn.w	r3, #5
    6612:	strb.w	r3, [r4, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6616:	mvn.w	r3, #69	; 0x45
    661a:	strb.w	r3, [r4, #741]	; 0x2e5
      _s = s;
    661e:	mov.w	r3, #103	; 0x67
    6622:	strb.w	r3, [r4, #742]	; 0x2e6
      _b = b;
    6626:	mvn.w	r3, #6
    662a:	strb.w	r3, [r4, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    662e:	mvn.w	r3, #71	; 0x47
    6632:	strb.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    6636:	mov.w	r3, #69	; 0x45
    663a:	strb.w	r3, [r4, #745]	; 0x2e9
      _b = b;
    663e:	mov.w	r3, #20
    6642:	strb.w	r3, [r4, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6646:	mvn.w	r3, #122	; 0x7a
    664a:	strb.w	r3, [r4, #726]	; 0x2d6
      _s = s;
      _b = b;
    664e:	mvn.w	r3, #11
    6652:	strb.w	r3, [r4, #728]	; 0x2d8
    6656:	mvn.w	r3, #4
    665a:	strb.w	r3, [r4, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    665e:	mov.w	r3, #85	; 0x55
    6662:	strb.w	r3, [r4, #736]	; 0x2e0
      _b = b;
    6666:	mvn.w	r3, #4
    666a:	strb.w	r3, [r4, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    666e:	mvn.w	r3, #79	; 0x4f
    6672:	strb.w	r3, [r4, #738]	; 0x2e2
      _s = s;
      _b = b;
    6676:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    667a:	strb.w	r0, [r4, #756]	; 0x2f4
      _s = s;
      _b = b;
    667e:	strb.w	r3, [r4, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6682:	mvn.w	r3, #68	; 0x44
    6686:	strb.w	r6, [r4, #765]	; 0x2fd
    668a:	strb.w	r3, [r4, #747]	; 0x2eb
      _s = s;
    668e:	mov.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6692:	strb.w	ip, [r4, #768]	; 0x300
      _s = s;
    6696:	strb.w	r3, [r4, #748]	; 0x2ec
      _b = b;
    669a:	mvn.w	r3, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    669e:	strb.w	r9, [r4, #771]	; 0x303
      _s = s;
      _b = b;
    66a2:	strb.w	r3, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66a6:	mvn.w	r3, #87	; 0x57
    66aa:	strb.w	r8, [r4, #762]	; 0x2fa
    66ae:	strb.w	r3, [r4, #750]	; 0x2ee
      _s = s;
    66b2:	mvn.w	r3, #105	; 0x69
      _b = b;
    66b6:	strb.w	sl, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66ba:	strb.w	r3, [r4, #751]	; 0x2ef
      _b = b;
    66be:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c2:	strb.w	r8, [r4, #777]	; 0x309
      _s = s;
      _b = b;
    66c6:	strb.w	r3, [r4, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66ca:	mvn.w	r3, #109	; 0x6d
    66ce:	strb.w	r3, [r4, #753]	; 0x2f1
      _s = s;
    66d2:	mvn.w	r3, #42	; 0x2a
    66d6:	strb.w	r3, [r4, #754]	; 0x2f2
      _b = b;
    66da:	mvn.w	r3, #54	; 0x36
    66de:	strb.w	r3, [r4, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66e2:	mvn.w	r3, #114	; 0x72
    66e6:	strb.w	r3, [r4, #757]	; 0x2f5
      _b = b;
    66ea:	mvn.w	r3, #28
    66ee:	strb.w	r3, [r4, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66f2:	mvn.w	r3, #120	; 0x78
    66f6:	strb.w	r3, [r4, #759]	; 0x2f7
      _s = s;
    66fa:	mvn.w	r3, #104	; 0x68
    66fe:	strb.w	r3, [r4, #760]	; 0x2f8
      _b = b;
    6702:	mvn.w	r3, #48	; 0x30
    6706:	strb.w	r3, [r4, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    670a:	mvn.w	r3, #51	; 0x33
    670e:	strb.w	r3, [r4, #763]	; 0x2fb
      _b = b;
    6712:	mvn.w	r3, #58	; 0x3a
    6716:	strb.w	r3, [r4, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    671a:	mvn.w	r3, #70	; 0x46
    671e:	strb.w	r3, [r4, #766]	; 0x2fe
      _b = b;
    6722:	mvn.w	r3, #75	; 0x4b
    6726:	strb.w	r3, [r4, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    672a:	mvn.w	r3, #80	; 0x50
    672e:	strb.w	r3, [r4, #769]	; 0x301
      _b = b;
    6732:	mvn.w	r3, #52	; 0x34
    6736:	strb.w	r3, [r4, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    673a:	mov.w	r3, #91	; 0x5b
    673e:	strb.w	r3, [r4, #772]	; 0x304
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6742:	mvn.w	r3, #97	; 0x61
    6746:	strb.w	r3, [r4, #774]	; 0x306
      _s = s;
    674a:	mov.w	r3, #99	; 0x63
    674e:	strb.w	r3, [r4, #775]	; 0x307
      _b = b;
    6752:	mvn.w	r3, #19
    6756:	strb.w	r3, [r4, #776]	; 0x308
    675a:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    675e:	strb.w	r6, [r4, #778]	; 0x30a
      _b = b;
    6762:	strb.w	r3, [r4, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6766:	mov.w	r3, #45	; 0x2d
    676a:	strb.w	r7, [r4, #781]	; 0x30d
    676e:	strb.w	r3, [r4, #799]	; 0x31f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6772:	mvn.w	r3, #103	; 0x67
      _s = s;
      _b = b;
    6776:	strb.w	r7, [r4, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    677a:	strb.w	r3, [r4, #780]	; 0x30c
      _s = s;
      _b = b;
    677e:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6782:	strb.w	fp, [r4, #808]	; 0x328
      _b = b;
    6786:	strb.w	r3, [r4, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    678a:	mvn.w	r3, #107	; 0x6b
    678e:	strb.w	r3, [r4, #783]	; 0x30f
      _s = s;
    6792:	mvn.w	r3, #15
    6796:	strb.w	r3, [r4, #784]	; 0x310
      _b = b;
    679a:	mvn.w	r3, #93	; 0x5d
    679e:	strb.w	r3, [r4, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67a2:	mvn.w	r3, #107	; 0x6b
    67a6:	strb.w	r3, [r4, #786]	; 0x312
      _s = s;
    67aa:	strb.w	r3, [r4, #787]	; 0x313
      _b = b;
    67ae:	mov.w	r3, #31
    67b2:	strb.w	r3, [r4, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67b6:	mvn.w	r3, #107	; 0x6b
    67ba:	strb.w	r3, [r4, #790]	; 0x316
      _b = b;
    67be:	mov.w	r3, #103	; 0x67
    67c2:	strb.w	r3, [r4, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67c6:	mov.w	r3, #121	; 0x79
    67ca:	strb.w	r3, [r4, #792]	; 0x318
      _s = s;
    67ce:	mov.w	r3, #119	; 0x77
    67d2:	strb.w	r3, [r4, #793]	; 0x319
      _b = b;
    67d6:	mvn.w	r3, #56	; 0x38
    67da:	strb.w	r3, [r4, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67de:	mvn.w	r3, #50	; 0x32
    67e2:	strb.w	r3, [r4, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67e6:	mvn.w	r3, #100	; 0x64
    67ea:	strb.w	r3, [r4, #798]	; 0x31e
      _s = s;
      _b = b;
    67ee:	mvn.w	r3, #5
    67f2:	strb.w	r3, [r4, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67f6:	mvn.w	r3, #95	; 0x5f
    67fa:	strb.w	r3, [r4, #801]	; 0x321
      _s = s;
    67fe:	mov.w	r3, #79	; 0x4f
    6802:	strb.w	r3, [r4, #802]	; 0x322
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6806:	mvn.w	r3, #107	; 0x6b
    680a:	strb.w	r3, [r4, #804]	; 0x324
      _s = s;
    680e:	mov.w	r3, #124	; 0x7c
    6812:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6816:	mvn.w	r3, #90	; 0x5a
    681a:	strb.w	r3, [r4, #807]	; 0x327
      _s = s;
      _b = b;
    681e:	mvn.w	r3, #7
    6822:	strb.w	r3, [r4, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6826:	mvn.w	r3, #74	; 0x4a
    682a:	strb.w	r3, [r4, #810]	; 0x32a
      _s = s;
    682e:	mov.w	r3, #68	; 0x44
    6832:	strb.w	r3, [r4, #811]	; 0x32b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6836:	mvn.w	r3, #122	; 0x7a
    683a:	strb.w	r3, [r4, #789]	; 0x315
    683e:	mvn.w	r3, #119	; 0x77
    6842:	strb.w	r3, [r4, #795]	; 0x31b
      _s = s;
      _b = b;
    6846:	mvn.w	r3, #11
    684a:	strb.w	r3, [r4, #797]	; 0x31d
    684e:	mvn.w	r3, #8
    6852:	strb.w	r3, [r4, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6856:	mvn.w	r3, #62	; 0x3e
      _s = s;
    685a:	strb.w	r5, [r4, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    685e:	strb.w	r3, [r4, #813]	; 0x32d
      _s = s;
    6862:	mov.w	r3, #88	; 0x58
      _b = b;
    6866:	strb.w	r7, [r4, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    686a:	strb.w	r3, [r4, #814]	; 0x32e
      _b = b;
    686e:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6872:	strb.w	fp, [r4, #831]	; 0x33f
      _s = s;
      _b = b;
    6876:	strb.w	r3, [r4, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    687a:	mvn.w	r3, #59	; 0x3b
    687e:	strb.w	r8, [r4, #840]	; 0x348
    6882:	strb.w	r3, [r4, #816]	; 0x330
      _s = s;
    6886:	mov.w	r3, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    688a:	strb.w	fp, [r4, #843]	; 0x34b
      _s = s;
    688e:	strb.w	r3, [r4, #817]	; 0x331
      _b = b;
    6892:	mvn.w	r3, #6
    6896:	strb.w	r3, [r4, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    689a:	mvn.w	r3, #57	; 0x39
    689e:	strb.w	r3, [r4, #819]	; 0x333
      _s = s;
    68a2:	mov.w	r3, #58	; 0x3a
    68a6:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    68aa:	mvn.w	r3, #9
    68ae:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68b2:	mvn.w	r3, #73	; 0x49
    68b6:	strb.w	r3, [r4, #822]	; 0x336
      _s = s;
    68ba:	mov.w	r3, #74	; 0x4a
    68be:	strb.w	r3, [r4, #823]	; 0x337
      _b = b;
    68c2:	mvn.w	r3, #15
    68c6:	strb.w	r3, [r4, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68ca:	mvn.w	r3, #95	; 0x5f
    68ce:	strb.w	r3, [r4, #825]	; 0x339
      _s = s;
    68d2:	mvn.w	r3, #10
    68d6:	strb.w	r3, [r4, #826]	; 0x33a
      _b = b;
    68da:	mvn.w	r3, #42	; 0x2a
    68de:	strb.w	r3, [r4, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68e2:	mvn.w	r3, #102	; 0x66
    68e6:	strb.w	r3, [r4, #828]	; 0x33c
      _s = s;
    68ea:	mvn.w	r3, #6
    68ee:	strb.w	r3, [r4, #829]	; 0x33d
      _b = b;
    68f2:	mvn.w	r3, #58	; 0x3a
    68f6:	strb.w	r3, [r4, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68fa:	mvn.w	r3, #26
    68fe:	strb.w	r3, [r4, #832]	; 0x340
      _b = b;
    6902:	mvn.w	r3, #48	; 0x30
    6906:	strb.w	r3, [r4, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    690a:	mvn.w	r3, #118	; 0x76
    690e:	strb.w	r3, [r4, #834]	; 0x342
      _s = s;
    6912:	mvn.w	r3, #51	; 0x33
    6916:	strb.w	r3, [r4, #835]	; 0x343
      _b = b;
    691a:	mvn.w	r3, #47	; 0x2f
    691e:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6922:	mvn.w	r3, #114	; 0x72
    6926:	strb.w	r3, [r4, #837]	; 0x345
      _s = s;
    692a:	mvn.w	r3, #68	; 0x44
    692e:	strb.w	r3, [r4, #838]	; 0x346
      _b = b;
    6932:	mvn.w	r3, #66	; 0x42
    6936:	strb.w	r3, [r4, #839]	; 0x347
    693a:	mvn.w	r3, #36	; 0x24
    693e:	strb.w	r3, [r4, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6942:	mov.w	r3, #115	; 0x73
    6946:	strb.w	r3, [r4, #844]	; 0x34c
      _b = b;
    694a:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    694e:	strb.w	lr, [r4, #853]	; 0x355
      _b = b;
    6952:	strb.w	r3, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6956:	mvn.w	r3, #103	; 0x67
    695a:	strb.w	r9, [r4, #855]	; 0x357
    695e:	strb.w	r3, [r4, #846]	; 0x34e
      _s = s;
    6962:	mov.w	r3, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6966:	strb.w	r9, [r4, #858]	; 0x35a
      _s = s;
    696a:	strb.w	r3, [r4, #847]	; 0x34f
      _b = b;
    696e:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6972:	strb.w	r6, [r4, #861]	; 0x35d
      _s = s;
      _b = b;
    6976:	strb.w	r3, [r4, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    697a:	mvn.w	r3, #110	; 0x6e
    697e:	strb.w	r0, [r4, #864]	; 0x360
    6982:	strb.w	r3, [r4, #849]	; 0x351
      _s = s;
    6986:	mvn.w	r3, #37	; 0x25
    698a:	strb.w	r7, [r4, #862]	; 0x35e
    698e:	strb.w	r3, [r4, #850]	; 0x352
      _b = b;
    6992:	mvn.w	r3, #26
    6996:	strb.w	r3, [r4, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    699a:	mvn.w	r3, #107	; 0x6b
    699e:	strb.w	r3, [r4, #852]	; 0x354
      _s = s;
      _b = b;
    69a2:	mvn.w	r3, #16
    69a6:	strb.w	r3, [r4, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69aa:	mov.w	r3, #100	; 0x64
    69ae:	strb.w	r3, [r4, #856]	; 0x358
      _b = b;
    69b2:	mvn.w	r3, #32
    69b6:	strb.w	r3, [r4, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69ba:	mvn.w	r3, #66	; 0x42
    69be:	strb.w	r3, [r4, #859]	; 0x35b
      _b = b;
    69c2:	mov.w	r3, #47	; 0x2f
    69c6:	strb.w	r3, [r4, #860]	; 0x35c
    69ca:	mvn.w	r3, #57	; 0x39
    69ce:	strb.w	r3, [r4, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69d2:	mvn.w	r3, #127	; 0x7f
    69d6:	strb.w	r3, [r4, #865]	; 0x361
      _b = b;
    69da:	mvn.w	r3, #9
    69de:	strb.w	r3, [r4, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69e2:	mvn.w	r3, #98	; 0x62
    69e6:	strb.w	r3, [r4, #867]	; 0x363
      _s = s;
    69ea:	mov.w	r3, #98	; 0x62
    69ee:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    69f2:	mvn.w	r3, #9
    69f6:	strb.w	r3, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69fa:	mvn.w	r3, #82	; 0x52
    69fe:	strb.w	r3, [r4, #870]	; 0x366
      _s = s;
    6a02:	mov.w	r3, #43	; 0x2b
    6a06:	strb.w	r3, [r4, #871]	; 0x367
      _b = b;
    6a0a:	mvn.w	r3, #6
    6a0e:	strb.w	r3, [r4, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a12:	mvn.w	r3, #91	; 0x5b
    6a16:	strb.w	r3, [r4, #873]	; 0x369
      _s = s;
    6a1a:	mov.w	r3, #115	; 0x73
    6a1e:	strb.w	r3, [r4, #874]	; 0x36a
      _b = b;
    6a22:	mvn.w	r3, #18
    6a26:	strb.w	r3, [r4, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a2a:	mvn.w	r3, #90	; 0x5a
    6a2e:	strb.w	r3, [r4, #876]	; 0x36c
      _s = s;
    6a32:	mov.w	r3, #116	; 0x74
    6a36:	strb.w	r3, [r4, #877]	; 0x36d
      _b = b;
    6a3a:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a3e:	strb.w	r5, [r4, #909]	; 0x38d
      _s = s;
      _b = b;
    6a42:	strb.w	r3, [r4, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a46:	mvn.w	r3, #89	; 0x59
      _s = s;
    6a4a:	strb.w	fp, [r4, #907]	; 0x38b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a4e:	strb.w	r3, [r4, #879]	; 0x36f
      _s = s;
    6a52:	mvn.w	r3, #106	; 0x6a
    6a56:	strb.w	r3, [r4, #880]	; 0x370
      _b = b;
    6a5a:	mvn.w	r3, #13
    6a5e:	strb.w	r3, [r4, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a62:	mvn.w	r3, #78	; 0x4e
    6a66:	strb.w	r3, [r4, #882]	; 0x372
      _s = s;
    6a6a:	mov.w	r3, #113	; 0x71
    6a6e:	strb.w	r3, [r4, #883]	; 0x373
      _b = b;
    6a72:	mvn.w	r3, #10
    6a76:	strb.w	r3, [r4, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a7a:	mvn.w	r3, #68	; 0x44
    6a7e:	strb.w	r3, [r4, #885]	; 0x375
      _s = s;
    6a82:	mov.w	r3, #99	; 0x63
    6a86:	strb.w	r3, [r4, #886]	; 0x376
      _b = b;
    6a8a:	mvn.w	r3, #11
    6a8e:	strb.w	r3, [r4, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a92:	mvn.w	r3, #61	; 0x3d
    6a96:	strb.w	r3, [r4, #888]	; 0x378
      _s = s;
    6a9a:	mov.w	r3, #79	; 0x4f
    6a9e:	strb.w	r3, [r4, #889]	; 0x379
      _b = b;
    6aa2:	mvn.w	r3, #9
    6aa6:	strb.w	r3, [r4, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6aaa:	mvn.w	r3, #63	; 0x3f
    6aae:	strb.w	r3, [r4, #891]	; 0x37b
      _s = s;
    6ab2:	mov.w	r3, #79	; 0x4f
    6ab6:	strb.w	r3, [r4, #892]	; 0x37c
      _b = b;
    6aba:	mvn.w	r3, #15
    6abe:	strb.w	r3, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ac2:	mvn.w	r3, #77	; 0x4d
    6ac6:	strb.w	r3, [r4, #894]	; 0x37e
      _s = s;
    6aca:	mvn.w	r3, #122	; 0x7a
    6ace:	strb.w	r3, [r4, #895]	; 0x37f
      _b = b;
    6ad2:	mvn.w	r3, #16
    6ad6:	strb.w	r3, [r4, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ada:	mvn.w	r3, #97	; 0x61
    6ade:	strb.w	r3, [r4, #897]	; 0x381
      _s = s;
    6ae2:	mvn.w	r3, #38	; 0x26
    6ae6:	strb.w	r3, [r4, #898]	; 0x382
      _b = b;
    6aea:	mvn.w	r3, #23
    6aee:	strb.w	r3, [r4, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6af2:	mvn.w	r3, #99	; 0x63
    6af6:	strb.w	r3, [r4, #900]	; 0x384
      _s = s;
    6afa:	mvn.w	r3, #6
    6afe:	strb.w	r3, [r4, #901]	; 0x385
      _b = b;
    6b02:	mvn.w	r3, #71	; 0x47
    6b06:	strb.w	r3, [r4, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b0a:	mvn.w	r3, #111	; 0x6f
    6b0e:	strb.w	r3, [r4, #903]	; 0x387
      _s = s;
    6b12:	mvn.w	r3, #6
    6b16:	strb.w	r3, [r4, #904]	; 0x388
      _b = b;
    6b1a:	mvn.w	r3, #63	; 0x3f
    6b1e:	strb.w	r3, [r4, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b22:	mvn.w	r3, #118	; 0x76
    6b26:	strb.w	r3, [r4, #906]	; 0x38a
      _s = s;
      _b = b;
    6b2a:	mvn.w	r3, #75	; 0x4b
    6b2e:	strb.w	r3, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b32:	mov.w	r3, #108	; 0x6c
    6b36:	strb.w	r3, [r4, #910]	; 0x38e
      _b = b;
    6b3a:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b3e:	strb.w	r6, [r4, #927]	; 0x39f
      _s = s;
      _b = b;
    6b42:	strb.w	r3, [r4, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b46:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b4a:	strb.w	r9, [r4, #933]	; 0x3a5
      _s = s;
    6b4e:	strb.w	r3, [r4, #916]	; 0x394
    6b52:	mov.w	r3, #105	; 0x69
      _b = b;
    6b56:	strb.w	lr, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b5a:	strb.w	r3, [r4, #913]	; 0x391
      _b = b;
    6b5e:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b62:	strb.w	ip, [r4, #912]	; 0x390
      _s = s;
      _b = b;
    6b66:	strb.w	r3, [r4, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b6a:	mvn.w	r3, #104	; 0x68
    6b6e:	strb.w	fp, [r4, #930]	; 0x3a2
    6b72:	strb.w	r3, [r4, #915]	; 0x393
      _s = s;
      _b = b;
    6b76:	mvn.w	r3, #27
    6b7a:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b7e:	mvn.w	r3, #104	; 0x68
    6b82:	strb.w	r3, [r4, #918]	; 0x396
      _s = s;
    6b86:	mvn.w	r3, #61	; 0x3d
    6b8a:	strb.w	r3, [r4, #919]	; 0x397
      _b = b;
    6b8e:	mvn.w	r3, #29
    6b92:	strb.w	r3, [r4, #920]	; 0x398
    6b96:	mvn.w	r3, #22
    6b9a:	strb.w	r3, [r4, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b9e:	mvn.w	r3, #104	; 0x68
    6ba2:	strb.w	r3, [r4, #924]	; 0x39c
      _s = s;
    6ba6:	mov.w	r3, #124	; 0x7c
    6baa:	strb.w	r3, [r4, #925]	; 0x39d
      _b = b;
    6bae:	mvn.w	r3, #15
    6bb2:	strb.w	r3, [r4, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bb6:	mov.w	r3, #91	; 0x5b
    6bba:	strb.w	r3, [r4, #928]	; 0x3a0
      _b = b;
    6bbe:	mvn.w	r3, #19
    6bc2:	strb.w	r3, [r4, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bc6:	mov.w	r3, #58	; 0x3a
    6bca:	strb.w	r3, [r4, #931]	; 0x3a3
      _b = b;
    6bce:	mvn.w	r3, #82	; 0x52
    6bd2:	strb.w	r3, [r4, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bd6:	mvn.w	r3, #5
    6bda:	strb.w	r3, [r4, #934]	; 0x3a6
      _b = b;
    6bde:	mvn.w	r3, #66	; 0x42
    6be2:	strb.w	r3, [r4, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6be6:	mov.w	r3, #52	; 0x34
    6bea:	strb.w	r3, [r4, #937]	; 0x3a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bee:	mvn.w	r3, #97	; 0x61
    6bf2:	strb.w	r3, [r4, #939]	; 0x3ab
      _s = s;
    6bf6:	mov.w	r3, #99	; 0x63
    6bfa:	strb.w	r3, [r4, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bfe:	mvn.w	r3, #114	; 0x72
    6c02:	strb.w	r3, [r4, #942]	; 0x3ae
      _s = s;
    6c06:	mvn.w	r3, #81	; 0x51
    6c0a:	strb.w	r3, [r4, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c0e:	mvn.w	r3, #102	; 0x66
    6c12:	strb.w	r3, [r4, #921]	; 0x399
      _s = s;
    6c16:	mvn.w	r3, #39	; 0x27
    6c1a:	strb.w	r3, [r4, #922]	; 0x39a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c1e:	mvn.w	r3, #122	; 0x7a
    6c22:	strb.w	r3, [r4, #936]	; 0x3a8
      _s = s;
      _b = b;
    6c26:	mvn.w	r3, #4
    6c2a:	strb.w	r3, [r4, #938]	; 0x3aa
    6c2e:	mvn.w	r3, #17
    6c32:	strb.w	lr, [r4, #950]	; 0x3b6
    6c36:	strb.w	r3, [r4, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c3a:	mov.w	r3, #104	; 0x68
      _b = b;
    6c3e:	strb.w	lr, [r4, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c42:	strb.w	r3, [r4, #964]	; 0x3c4
    6c46:	mvn.w	r3, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c4a:	strb.w	r1, [r4, #969]	; 0x3c9
      _s = s;
    6c4e:	strb.w	r3, [r4, #946]	; 0x3b2
      _b = b;
    6c52:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c56:	strb.w	r8, [r4, #945]	; 0x3b1
      _s = s;
      _b = b;
    6c5a:	strb.w	r3, [r4, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c5e:	mvn.w	r3, #110	; 0x6e
      _s = s;
      _b = b;
    6c62:	strb.w	r8, [r4, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c66:	strb.w	r3, [r4, #948]	; 0x3b4
      _s = s;
    6c6a:	mvn.w	r3, #80	; 0x50
    6c6e:	strb.w	r3, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c72:	mvn.w	r3, #106	; 0x6a
    6c76:	strb.w	r3, [r4, #951]	; 0x3b7
      _s = s;
    6c7a:	mvn.w	r3, #109	; 0x6d
    6c7e:	strb.w	r3, [r4, #952]	; 0x3b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c82:	mvn.w	r3, #85	; 0x55
    6c86:	strb.w	r3, [r4, #954]	; 0x3ba
      _s = s;
      _b = b;
    6c8a:	mvn.w	r3, #26
    6c8e:	strb.w	r3, [r4, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c92:	mvn.w	r3, #73	; 0x49
    6c96:	strb.w	r3, [r4, #957]	; 0x3bd
      _s = s;
    6c9a:	mvn.w	r3, #57	; 0x39
    6c9e:	strb.w	r3, [r4, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ca2:	mvn.w	r3, #55	; 0x37
    6ca6:	strb.w	r3, [r4, #960]	; 0x3c0
    6caa:	mvn.w	r3, #54	; 0x36
    6cae:	strb.w	r3, [r4, #963]	; 0x3c3
    6cb2:	mvn.w	r3, #75	; 0x4b
    6cb6:	strb.w	r3, [r4, #966]	; 0x3c6
      _s = s;
    6cba:	mvn.w	r3, #95	; 0x5f
    6cbe:	strb.w	r3, [r4, #967]	; 0x3c7
      _b = b;
    6cc2:	mvn.w	r3, #50	; 0x32
    6cc6:	strb.w	r3, [r4, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cca:	mov.w	r3, #97	; 0x61
    6cce:	strb.w	r3, [r4, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cd2:	mvn.w	r3, #97	; 0x61
    6cd6:	strb.w	r3, [r4, #972]	; 0x3cc
      _s = s;
      _b = b;
    6cda:	mvn.w	r3, #89	; 0x59
    6cde:	strb.w	r3, [r4, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ce2:	mvn.w	r3, #111	; 0x6f
    6ce6:	strb.w	r3, [r4, #976]	; 0x3d0
      _b = b;
    6cea:	mvn.w	r3, #10
    6cee:	strb.w	r3, [r4, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cf2:	mvn.w	r3, #92	; 0x5c
    6cf6:	strb.w	r3, [r4, #955]	; 0x3bb
    6cfa:	mov.w	r3, #114	; 0x72
    6cfe:	strb.w	r3, [r4, #961]	; 0x3c1
      _b = b;
    6d02:	mvn.w	r3, #10
    6d06:	strb.w	r3, [r4, #962]	; 0x3c2
    6d0a:	mvn.w	r3, #33	; 0x21
    6d0e:	strb.w	r3, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d12:	mvn.w	r3, #70	; 0x46
    6d16:	strb.w	r3, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d1a:	strb.w	r3, [r4, #975]	; 0x3cf
      _s = s;
      _b = b;
    6d1e:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d22:	strb.w	r6, [r4, #1002]	; 0x3ea
      _s = s;
      _b = b;
    6d26:	strb.w	r3, [r4, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d2a:	mvn.w	r3, #91	; 0x5b
    6d2e:	strb.w	ip, [r4, #1005]	; 0x3ed
    6d32:	strb.w	r3, [r4, #999]	; 0x3e7
    6d36:	mvn.w	r3, #86	; 0x56
      _s = s;
    6d3a:	strb.w	fp, [r4, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d3e:	strb.w	r3, [r4, #978]	; 0x3d2
      _s = s;
    6d42:	mvn.w	r3, #90	; 0x5a
    6d46:	strb.w	r3, [r4, #979]	; 0x3d3
      _b = b;
    6d4a:	mvn.w	r3, #62	; 0x3e
    6d4e:	strb.w	r3, [r4, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d52:	mvn.w	r3, #103	; 0x67
    6d56:	strb.w	r3, [r4, #981]	; 0x3d5
      _s = s;
    6d5a:	mvn.w	r3, #127	; 0x7f
    6d5e:	strb.w	r3, [r4, #982]	; 0x3d6
      _b = b;
    6d62:	mvn.w	r3, #59	; 0x3b
    6d66:	strb.w	r3, [r4, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d6a:	mvn.w	r3, #109	; 0x6d
    6d6e:	strb.w	r3, [r4, #984]	; 0x3d8
      _s = s;
    6d72:	mvn.w	r3, #127	; 0x7f
    6d76:	strb.w	r3, [r4, #985]	; 0x3d9
      _b = b;
    6d7a:	mvn.w	r3, #46	; 0x2e
    6d7e:	strb.w	r3, [r4, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d82:	mvn.w	r3, #97	; 0x61
    6d86:	strb.w	r3, [r4, #987]	; 0x3db
      _s = s;
      _b = b;
    6d8a:	mvn.w	r3, #41	; 0x29
    6d8e:	strb.w	r3, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d92:	mvn.w	r3, #97	; 0x61
    6d96:	strb.w	r3, [r4, #990]	; 0x3de
      _s = s;
      _b = b;
    6d9a:	mvn.w	r3, #28
    6d9e:	strb.w	r3, [r4, #992]	; 0x3e0
    6da2:	mvn.w	r3, #19
    6da6:	strb.w	r3, [r4, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6daa:	mvn.w	r3, #75	; 0x4b
    6dae:	strb.w	r3, [r4, #996]	; 0x3e4
      _s = s;
    6db2:	mov.w	r3, #69	; 0x45
    6db6:	strb.w	r3, [r4, #997]	; 0x3e5
      _b = b;
    6dba:	mvn.w	r3, #17
    6dbe:	strb.w	r3, [r4, #998]	; 0x3e6
    6dc2:	mvn.w	r3, #13
    6dc6:	strb.w	r3, [r4, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6dca:	mov.w	r3, #74	; 0x4a
    6dce:	strb.w	r3, [r4, #1003]	; 0x3eb
      _b = b;
    6dd2:	mvn.w	r3, #18
    6dd6:	strb.w	r3, [r4, #1004]	; 0x3ec
    6dda:	mvn.w	r3, #75	; 0x4b
    6dde:	strb.w	r3, [r4, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6de2:	mov.w	r3, #90	; 0x5a
    6de6:	strb.w	r3, [r4, #1009]	; 0x3f1
    6dea:	mvn.w	r3, #4
    6dee:	strb.w	r3, [r4, #988]	; 0x3dc
    6df2:	strb.w	r3, [r4, #991]	; 0x3df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6df6:	mvn.w	r3, #92	; 0x5c
    6dfa:	strb.w	r3, [r4, #993]	; 0x3e1
      _s = s;
    6dfe:	mov.w	r3, #109	; 0x6d
    6e02:	strb.w	r3, [r4, #1000]	; 0x3e8
    6e06:	mov.w	r3, #73	; 0x49
    6e0a:	strb.w	r3, [r4, #1006]	; 0x3ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e0e:	mvn.w	r3, #120	; 0x78
    6e12:	strb.w	r3, [r4, #1008]	; 0x3f0
      _s = s;
      _b = b;
    6e16:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e1a:	strb.w	ip, [r4, #1014]	; 0x3f6
      _s = s;
      _b = b;
    6e1e:	strb.w	r3, [r4, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e22:	mvn.w	r3, #111	; 0x6f
    6e26:	strb.w	ip, [r4, #1017]	; 0x3f9
    6e2a:	strb.w	r3, [r4, #1011]	; 0x3f3
      _s = s;
    6e2e:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e32:	strb.w	r6, [r4, #1023]	; 0x3ff
      _s = s;
    6e36:	strb.w	r3, [r4, #1012]	; 0x3f4
      _b = b;
    6e3a:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e3e:	strb.w	r8, [r4, #1020]	; 0x3fc
      _s = s;
      _b = b;
    6e42:	strb.w	r3, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e46:	mvn.w	r3, #84	; 0x54
    6e4a:	strb.w	r3, [r4, #1015]	; 0x3f7
      _b = b;
    6e4e:	mvn.w	r3, #34	; 0x22
    6e52:	strb.w	r3, [r4, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e56:	mvn.w	r3, #25
    6e5a:	strb.w	r3, [r4, #1018]	; 0x3fa
      _b = b;
    6e5e:	mvn.w	r3, #43	; 0x2b
    6e62:	strb.w	r3, [r4, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e66:	mvn.w	r3, #84	; 0x54
    6e6a:	strb.w	r3, [r4, #1021]	; 0x3fd
      _b = b;
    6e6e:	mvn.w	r3, #17
    6e72:	strb.w	r3, [r4, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e76:	mvn.w	r3, #84	; 0x54
    6e7a:	strb.w	r3, [r4, #1024]	; 0x400
      _b = b;
    6e7e:	mvn.w	r3, #13
    6e82:	strb.w	r3, [r4, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e86:	mvn.w	r3, #106	; 0x6a
    6e8a:	strb.w	r3, [r4, #1026]	; 0x402
      _s = s;
    6e8e:	mvn.w	r3, #99	; 0x63
    6e92:	strb.w	r3, [r4, #1027]	; 0x403
      _b = b;
    6e96:	mvn.w	r3, #30
    6e9a:	strb.w	r3, [r4, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e9e:	mvn.w	r3, #85	; 0x55
    6ea2:	strb.w	r3, [r4, #1029]	; 0x405
      _s = s;
    6ea6:	mvn.w	r3, #101	; 0x65
    6eaa:	strb.w	r3, [r4, #1030]	; 0x406
      _b = b;
    6eae:	mvn.w	r3, #21
    6eb2:	strb.w	r3, [r4, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6eb6:	mvn.w	r3, #82	; 0x52
    6eba:	strb.w	r3, [r4, #1032]	; 0x408
      _s = s;
    6ebe:	mov.w	r3, #103	; 0x67
    6ec2:	strb.w	r3, [r4, #1033]	; 0x409
      _b = b;
    6ec6:	mvn.w	r3, #24
    6eca:	strb.w	r3, [r4, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ece:	mvn.w	r3, #70	; 0x46
    6ed2:	strb.w	r3, [r4, #1035]	; 0x40b
      _s = s;
    6ed6:	mov.w	r3, #76	; 0x4c
    6eda:	strb.w	r3, [r4, #1036]	; 0x40c
      _b = b;
    6ede:	mvn.w	r3, #101	; 0x65
    6ee2:	strb.w	r3, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ee6:	mov.w	r3, #117	; 0x75
    6eea:	strb.w	r3, [r4, #1038]	; 0x40e
      _s = s;
    6eee:	mov.w	r3, #31
    6ef2:	strb.w	r3, [r4, #1039]	; 0x40f
      _b = b;
    6ef6:	mvn.w	r3, #119	; 0x77
    6efa:	strb.w	r3, [r4, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6efe:	mvn.w	r3, #104	; 0x68
    6f02:	strb.w	r3, [r4, #1041]	; 0x411
      _s = s;
    6f06:	mov.w	r3, #107	; 0x6b
    6f0a:	strb.w	r3, [r4, #1042]	; 0x412
      _b = b;
    6f0e:	mov.w	r3, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f12:	strb.w	r1, [r4, #1051]	; 0x41b
      _b = b;
    6f16:	strb.w	r3, [r4, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f1a:	mvn.w	r3, #86	; 0x56
      _b = b;
    6f1e:	strb.w	sl, [r4, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f22:	strb.w	r3, [r4, #1054]	; 0x41e
    6f26:	mov.w	r3, #95	; 0x5f
    6f2a:	strb.w	r3, [r4, #1045]	; 0x415
      _b = b;
    6f2e:	mvn.w	r3, #55	; 0x37
    6f32:	strb.w	r3, [r4, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f36:	mvn.w	r3, #53	; 0x35
    6f3a:	strb.w	r3, [r4, #1047]	; 0x417
      _s = s;
    6f3e:	mov.w	r3, #47	; 0x2f
    6f42:	strb.w	r3, [r4, #1048]	; 0x418
      _b = b;
    6f46:	mvn.w	r3, #51	; 0x33
    6f4a:	strb.w	r3, [r4, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f4e:	mvn.w	r3, #56	; 0x38
    6f52:	strb.w	r3, [r4, #1050]	; 0x41a
      _s = s;
      _b = b;
    6f56:	mvn.w	r3, #28
    6f5a:	strb.w	r3, [r4, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f5e:	mvn.w	r3, #73	; 0x49
    6f62:	strb.w	r3, [r4, #1053]	; 0x41d
      _s = s;
    6f66:	mvn.w	r3, #69	; 0x45
    6f6a:	strb.w	r3, [r4, #1057]	; 0x421
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f6e:	mvn.w	r3, #90	; 0x5a
    6f72:	strb.w	r3, [r4, #1059]	; 0x423
      _s = s;
      _b = b;
    6f76:	mvn.w	r3, #25
    6f7a:	strb.w	r3, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f7e:	mvn.w	r3, #97	; 0x61
    6f82:	strb.w	r3, [r4, #1062]	; 0x426
      _s = s;
      _b = b;
    6f86:	mvn.w	r3, #19
    6f8a:	strb.w	r3, [r4, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f8e:	mvn.w	r3, #65	; 0x41
    6f92:	strb.w	r3, [r4, #1065]	; 0x429
      _s = s;
    6f96:	mov.w	r3, #119	; 0x77
    6f9a:	strb.w	r3, [r4, #1066]	; 0x42a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f9e:	mvn.w	r3, #66	; 0x42
    6fa2:	strb.w	r3, [r4, #1068]	; 0x42c
      _s = s;
      _b = b;
    6fa6:	mvn.w	r3, #21
    6faa:	strb.w	r3, [r4, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fae:	mvn.w	r3, #71	; 0x47
    6fb2:	strb.w	r3, [r4, #1071]	; 0x42f
      _s = s;
    6fb6:	mvn.w	r3, #80	; 0x50
    6fba:	strb.w	r3, [r4, #1072]	; 0x430
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fbe:	mvn.w	r3, #88	; 0x58
    6fc2:	strb.w	r3, [r4, #1074]	; 0x432
      _s = s;
    6fc6:	mov.w	r3, #92	; 0x5c
    6fca:	strb.w	r3, [r4, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fce:	mvn.w	r3, #96	; 0x60
    6fd2:	strb.w	r3, [r4, #1044]	; 0x414
    6fd6:	mvn.w	r3, #92	; 0x5c
    6fda:	strb.w	r3, [r4, #1056]	; 0x420
      _s = s;
      _b = b;
    6fde:	mvn.w	r3, #39	; 0x27
    6fe2:	strb.w	r3, [r4, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6fe6:	mvn.w	r3, #32
    6fea:	strb.w	r3, [r4, #1060]	; 0x424
    6fee:	mvn.w	r3, #70	; 0x46
    6ff2:	strb.w	r3, [r4, #1063]	; 0x427
      _b = b;
    6ff6:	mvn.w	r3, #16
    6ffa:	strb.w	r3, [r4, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ffe:	mvn.w	r3, #92	; 0x5c
    7002:	strb.w	r3, [r4, #1069]	; 0x42d
      _b = b;
    7006:	mvn.w	r3, #10
    700a:	strb.w	r3, [r4, #1073]	; 0x431
    700e:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7012:	strb.w	r1, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    7016:	strb.w	r3, [r4, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    701a:	mvn.w	r3, #119	; 0x77
    701e:	strb.w	r0, [r4, #1083]	; 0x43b
    7022:	strb.w	r3, [r4, #1077]	; 0x435
      _s = s;
    7026:	mov.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    702a:	strb.w	r6, [r4, #1086]	; 0x43e
      _s = s;
    702e:	strb.w	r3, [r4, #1078]	; 0x436
      _b = b;
    7032:	mvn.w	r3, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7036:	strb.w	ip, [r4, #1090]	; 0x442
      _b = b;
    703a:	strb.w	r3, [r4, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    703e:	mov.w	r3, #89	; 0x59
      _b = b;
    7042:	strb.w	lr, [r4, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7046:	strb.w	r3, [r4, #1081]	; 0x439
      _b = b;
    704a:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    704e:	strb.w	r6, [r4, #1092]	; 0x444
      _s = s;
      _b = b;
    7052:	strb.w	r3, [r4, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7056:	mvn.w	r3, #109	; 0x6d
      _b = b;
    705a:	strb.w	r5, [r4, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    705e:	strb.w	r3, [r4, #1084]	; 0x43c
      _b = b;
    7062:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7066:	strb.w	r8, [r4, #1087]	; 0x43f
      _b = b;
    706a:	strb.w	r3, [r4, #1085]	; 0x43d
    706e:	strb.w	r3, [r4, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7072:	mvn.w	r3, #107	; 0x6b
    7076:	strb.w	r3, [r4, #1089]	; 0x441
      _s = s;
    707a:	mvn.w	r3, #59	; 0x3b
    707e:	strb.w	r3, [r4, #1093]	; 0x445
      _b = b;
    7082:	mvn.w	r3, #42	; 0x2a
    7086:	strb.w	r3, [r4, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    708a:	mvn.w	r3, #118	; 0x76
    708e:	strb.w	r3, [r4, #1095]	; 0x447
      _s = s;
    7092:	mvn.w	r3, #65	; 0x41
    7096:	strb.w	r3, [r4, #1096]	; 0x448
      _b = b;
    709a:	mvn.w	r3, #19
    709e:	strb.w	r3, [r4, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70a2:	mvn.w	r3, #109	; 0x6d
    70a6:	strb.w	r3, [r4, #1098]	; 0x44a
      _s = s;
    70aa:	mvn.w	r3, #103	; 0x67
    70ae:	strb.w	r3, [r4, #1099]	; 0x44b
      _b = b;
    70b2:	mvn.w	r3, #21
    70b6:	strb.w	r3, [r4, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ba:	mvn.w	r3, #93	; 0x5d
    70be:	strb.w	r3, [r4, #1101]	; 0x44d
      _s = s;
    70c2:	mvn.w	r3, #51	; 0x33
    70c6:	strb.w	r3, [r4, #1102]	; 0x44e
      _b = b;
    70ca:	mvn.w	r3, #46	; 0x2e
    70ce:	strb.w	r3, [r4, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70d2:	mvn.w	r3, #101	; 0x65
    70d6:	strb.w	r3, [r4, #1104]	; 0x450
      _s = s;
    70da:	mov.w	r3, #79	; 0x4f
    70de:	strb.w	r3, [r4, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70e2:	mov.w	r3, #102	; 0x66
    70e6:	strb.w	r3, [r4, #1107]	; 0x453
      _s = s;
    70ea:	mov.w	r3, #103	; 0x67
    70ee:	strb.w	r3, [r4, #1108]	; 0x454
      _b = b;
    70f2:	mov.w	r3, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70f6:	strb.w	r6, [r4, #1113]	; 0x459
      _s = s;
      _b = b;
    70fa:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70fe:	mov.w	r3, #80	; 0x50
    7102:	strb.w	r3, [r4, #1110]	; 0x456
      _s = s;
    7106:	mov.w	r3, #111	; 0x6f
    710a:	strb.w	r3, [r4, #1111]	; 0x457
      _b = b;
    710e:	mov.w	r3, #117	; 0x75
    7112:	strb.w	r3, [r4, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7116:	mov.w	r3, #58	; 0x3a
    711a:	strb.w	r3, [r4, #1114]	; 0x45a
      _b = b;
    711e:	mov.w	r3, #87	; 0x57
    7122:	strb.w	r3, [r4, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7126:	mov.w	r3, #18
    712a:	strb.w	r3, [r4, #1116]	; 0x45c
      _s = s;
    712e:	mov.w	r3, #74	; 0x4a
    7132:	strb.w	r3, [r4, #1117]	; 0x45d
      _b = b;
    7136:	mvn.w	r3, #76	; 0x4c
    713a:	strb.w	r3, [r4, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    713e:	mov.w	r3, #17
    7142:	strb.w	r3, [r4, #1119]	; 0x45f
      _s = s;
    7146:	mov.w	r3, #94	; 0x5e
    714a:	strb.w	r3, [r4, #1120]	; 0x460
      _b = b;
    714e:	mvn.w	r3, #36	; 0x24
    7152:	strb.w	r3, [r4, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7156:	mvn.w	r3, #51	; 0x33
    715a:	strb.w	r3, [r4, #1122]	; 0x462
      _s = s;
    715e:	mov.w	r3, #99	; 0x63
    7162:	strb.w	r3, [r4, #1123]	; 0x463
      _b = b;
    7166:	mvn.w	r3, #37	; 0x25
    716a:	strb.w	r3, [r4, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    716e:	mvn.w	r3, #43	; 0x2b
    7172:	strb.w	r3, [r4, #1125]	; 0x465
      _s = s;
    7176:	mov.w	r3, #32
    717a:	strb.w	r3, [r4, #1126]	; 0x466
      _b = b;
    717e:	mvn.w	r3, #25
    7182:	strb.w	r3, [r4, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7186:	mov.w	r3, #67	; 0x43
    718a:	strb.w	r3, [r4, #1129]	; 0x469
    718e:	mvn.w	r3, #18
    7192:	strb.w	r3, [r4, #1132]	; 0x46c
      _b = b;
    7196:	mvn.w	r3, #24
    719a:	strb.w	r3, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    719e:	mov.w	r3, #99	; 0x63
    71a2:	strb.w	r3, [r4, #1135]	; 0x46f
      _b = b;
    71a6:	mvn.w	r3, #15
    71aa:	strb.w	r3, [r4, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71ae:	mvn.w	r3, #55	; 0x37
    71b2:	strb.w	r3, [r4, #1137]	; 0x471
      _s = s;
    71b6:	mov.w	r3, #60	; 0x3c
    71ba:	strb.w	r3, [r4, #1138]	; 0x472
      _b = b;
    71be:	mvn.w	r3, #17
    71c2:	strb.w	r3, [r4, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71c6:	mvn.w	r3, #49	; 0x31
    71ca:	strb.w	r3, [r4, #1140]	; 0x474
      _s = s;
    71ce:	mov.w	r3, #58	; 0x3a
    71d2:	strb.w	r3, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71d6:	mvn.w	r3, #70	; 0x46
    71da:	strb.w	r3, [r4, #1128]	; 0x468
      _s = s;
      _b = b;
    71de:	mvn.w	r3, #33	; 0x21
    71e2:	strb.w	r3, [r4, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71e6:	mvn.w	r3, #96	; 0x60
    71ea:	strb.w	r3, [r4, #1131]	; 0x46b
    71ee:	mvn.w	r3, #83	; 0x53
    71f2:	strb.w	r3, [r4, #1134]	; 0x46e
      _s = s;
    71f6:	mov.w	r3, #97	; 0x61
      _b = b;
    71fa:	strb.w	lr, [r4, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71fe:	strb.w	r3, [r4, #1174]	; 0x496
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7202:	mvn.w	r3, #62	; 0x3e
    7206:	strb.w	r9, [r4, #1149]	; 0x47d
    720a:	strb.w	r3, [r4, #1143]	; 0x477
      _s = s;
    720e:	mvn.w	r3, #18
      _b = b;
    7212:	strb.w	lr, [r4, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7216:	strb.w	r3, [r4, #1144]	; 0x478
      _b = b;
    721a:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    721e:	strb.w	fp, [r4, #1165]	; 0x48d
      _b = b;
    7222:	strb.w	r3, [r4, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7226:	mvn.w	r3, #75	; 0x4b
    722a:	strb.w	r3, [r4, #1146]	; 0x47a
      _s = s;
    722e:	mov.w	r3, #78	; 0x4e
    7232:	strb.w	r3, [r4, #1147]	; 0x47b
    7236:	mov.w	r3, #72	; 0x48
    723a:	strb.w	r3, [r4, #1150]	; 0x47e
      _b = b;
    723e:	mvn.w	r3, #18
    7242:	strb.w	r3, [r4, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7246:	mvn.w	r3, #126	; 0x7e
    724a:	strb.w	r3, [r4, #1152]	; 0x480
      _s = s;
    724e:	mvn.w	r3, #84	; 0x54
    7252:	strb.w	r3, [r4, #1153]	; 0x481
      _b = b;
    7256:	mvn.w	r3, #19
    725a:	strb.w	r3, [r4, #1154]	; 0x482
    725e:	mvn.w	r3, #22
    7262:	strb.w	r3, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7266:	mvn.w	r3, #111	; 0x6f
    726a:	strb.w	r3, [r4, #1158]	; 0x486
      _s = s;
    726e:	mov.w	r3, #125	; 0x7d
    7272:	strb.w	r3, [r4, #1159]	; 0x487
      _b = b;
    7276:	mvn.w	r3, #28
    727a:	strb.w	r3, [r4, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    727e:	mvn.w	r3, #108	; 0x6c
    7282:	strb.w	r3, [r4, #1161]	; 0x489
      _s = s;
    7286:	mvn.w	r3, #110	; 0x6e
    728a:	strb.w	r3, [r4, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    728e:	mvn.w	r3, #103	; 0x67
    7292:	strb.w	r3, [r4, #1164]	; 0x48c
      _s = s;
      _b = b;
    7296:	mvn.w	r3, #31
    729a:	strb.w	r3, [r4, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    729e:	mvn.w	r3, #118	; 0x76
    72a2:	strb.w	r3, [r4, #1167]	; 0x48f
      _s = s;
    72a6:	mvn.w	r3, #95	; 0x5f
    72aa:	strb.w	r3, [r4, #1168]	; 0x490
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72ae:	mvn.w	r3, #109	; 0x6d
    72b2:	strb.w	r3, [r4, #1170]	; 0x492
      _s = s;
    72b6:	mvn.w	r3, #75	; 0x4b
    72ba:	strb.w	r3, [r4, #1171]	; 0x493
      _b = b;
    72be:	mvn.w	r3, #18
    72c2:	strb.w	r3, [r4, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72c6:	mvn.w	r3, #111	; 0x6f
    72ca:	strb.w	r3, [r4, #1173]	; 0x495
      _s = s;
      _b = b;
    72ce:	mvn.w	r3, #11
    72d2:	strb.w	r3, [r4, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72d6:	mvn.w	r3, #122	; 0x7a
    72da:	strb.w	r3, [r4, #1155]	; 0x483
      _s = s;
    72de:	mov.w	r3, #100	; 0x64
    72e2:	strb.w	r3, [r4, #1156]	; 0x484
      _b = b;
    72e6:	mvn.w	r3, #16
    72ea:	strb.w	r3, [r4, #1169]	; 0x491
    72ee:	mvn.w	r3, #64	; 0x40
    72f2:	strb.w	r3, [r4, #1175]	; 0x497
    72f6:	mov.w	r3, #101	; 0x65
    72fa:	strb.w	r3, [r4, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72fe:	mov.w	r3, #55	; 0x37
    7302:	strb.w	r3, [r4, #1176]	; 0x498
      _s = s;
    7306:	mov.w	r3, #94	; 0x5e
    730a:	strb.w	r3, [r4, #1177]	; 0x499
      _b = b;
    730e:	mvn.w	r3, #99	; 0x63
    7312:	strb.w	r3, [r4, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7316:	mov.w	r3, #44	; 0x2c
    731a:	strb.w	r3, [r4, #1179]	; 0x49b
      _s = s;
      _b = b;
    731e:	mov.w	r3, #111	; 0x6f
    7322:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7326:	mvn.w	r3, #126	; 0x7e
    732a:	strb.w	r3, [r4, #1183]	; 0x49f
      _b = b;
    732e:	mov.w	r3, #53	; 0x35
    7332:	strb.w	r3, [r4, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7336:	mov.w	r3, #108	; 0x6c
    733a:	strb.w	r3, [r4, #1185]	; 0x4a1
      _s = s;
    733e:	mvn.w	r3, #82	; 0x52
    7342:	strb.w	r3, [r4, #1186]	; 0x4a2
      _b = b;
    7346:	mov.w	r3, #47	; 0x2f
    734a:	strb.w	r3, [r4, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    734e:	mov.w	r3, #18
    7352:	strb.w	r3, [r4, #1188]	; 0x4a4
      _s = s;
    7356:	mvn.w	r3, #94	; 0x5e
    735a:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    735e:	mvn.w	r3, #30
    7362:	strb.w	r3, [r4, #1191]	; 0x4a7
      _s = s;
    7366:	mov.w	r3, #95	; 0x5f
    736a:	strb.w	r3, [r4, #1192]	; 0x4a8
      _b = b;
    736e:	mvn.w	r3, #89	; 0x59
    7372:	strb.w	r3, [r4, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7376:	mvn.w	r3, #42	; 0x2a
    737a:	strb.w	r3, [r4, #1194]	; 0x4aa
      _s = s;
    737e:	mov.w	r3, #39	; 0x27
    7382:	strb.w	r3, [r4, #1195]	; 0x4ab
      _b = b;
    7386:	mvn.w	r3, #29
    738a:	strb.w	r3, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    738e:	mov.w	r3, #33	; 0x21
    7392:	strb.w	r3, [r4, #1198]	; 0x4ae
      _b = b;
    7396:	mvn.w	r3, #21
    739a:	strb.w	r3, [r4, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    739e:	mvn.w	r3, #52	; 0x34
    73a2:	strb.w	r3, [r4, #1200]	; 0x4b0
      _s = s;
    73a6:	mov.w	r3, #41	; 0x29
    73aa:	strb.w	r3, [r4, #1201]	; 0x4b1
      _b = b;
    73ae:	mvn.w	r3, #26
    73b2:	strb.w	r3, [r4, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73b6:	mvn.w	r3, #95	; 0x5f
    73ba:	strb.w	r3, [r4, #1203]	; 0x4b3
      _s = s;
    73be:	mvn.w	r3, #75	; 0x4b
    73c2:	strb.w	r3, [r4, #1204]	; 0x4b4
      _b = b;
    73c6:	mvn.w	r3, #22
    73ca:	strb.w	r3, [r4, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73ce:	mvn.w	r3, #59	; 0x3b
    73d2:	strb.w	r3, [r4, #1206]	; 0x4b6
      _s = s;
    73d6:	mov.w	r3, #111	; 0x6f
    73da:	strb.w	r3, [r4, #1207]	; 0x4b7
    73de:	mvn.w	r3, #33	; 0x21
    73e2:	strb.w	r3, [r4, #1180]	; 0x49c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e6:	mov.w	r3, #85	; 0x55
    73ea:	strb.w	r3, [r4, #1182]	; 0x49e
    73ee:	mvn.w	r3, #39	; 0x27
    73f2:	strb.w	r3, [r4, #1197]	; 0x4ad
      _s = s;
      _b = b;
    73f6:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73fa:	strb.w	r5, [r4, #1227]	; 0x4cb
      _s = s;
      _b = b;
    73fe:	strb.w	r3, [r4, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7402:	mvn.w	r3, #78	; 0x4e
    7406:	strb.w	r3, [r4, #1218]	; 0x4c2
    740a:	mvn.w	r3, #65	; 0x41
    740e:	strb.w	r3, [r4, #1209]	; 0x4b9
      _s = s;
      _b = b;
    7412:	mvn.w	r3, #18
    7416:	strb.w	r3, [r4, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    741a:	mvn.w	r3, #41	; 0x29
    741e:	strb.w	r3, [r4, #1212]	; 0x4bc
      _s = s;
    7422:	mov.w	r3, #39	; 0x27
    7426:	strb.w	r3, [r4, #1213]	; 0x4bd
      _b = b;
    742a:	mvn.w	r3, #17
    742e:	strb.w	r3, [r4, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7432:	mvn.w	r3, #59	; 0x3b
    7436:	strb.w	r3, [r4, #1215]	; 0x4bf
      _s = s;
    743a:	mvn.w	r3, #41	; 0x29
    743e:	strb.w	r3, [r4, #1216]	; 0x4c0
    7442:	mov.w	r3, #122	; 0x7a
    7446:	strb.w	r3, [r4, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    744a:	mvn.w	r3, #109	; 0x6d
    744e:	strb.w	r3, [r4, #1221]	; 0x4c5
      _s = s;
    7452:	mov.w	r3, #55	; 0x37
    7456:	strb.w	r3, [r4, #1222]	; 0x4c6
      _b = b;
    745a:	mvn.w	r3, #17
    745e:	strb.w	r3, [r4, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7462:	mvn.w	r3, #126	; 0x7e
    7466:	strb.w	r3, [r4, #1224]	; 0x4c8
      _s = s;
    746a:	mvn.w	r3, #95	; 0x5f
    746e:	strb.w	r3, [r4, #1225]	; 0x4c9
      _b = b;
    7472:	mvn.w	r3, #24
    7476:	strb.w	r3, [r4, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    747a:	mov.w	r3, #105	; 0x69
    747e:	strb.w	r3, [r4, #1228]	; 0x4cc
    7482:	mov.w	r3, #99	; 0x63
    7486:	strb.w	r3, [r4, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    748a:	mvn.w	r3, #108	; 0x6c
    748e:	strb.w	r3, [r4, #1233]	; 0x4d1
      _s = s;
    7492:	mov.w	r3, #103	; 0x67
    7496:	strb.w	r3, [r4, #1234]	; 0x4d2
      _b = b;
    749a:	mvn.w	r3, #22
    749e:	strb.w	r3, [r4, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74a2:	mvn.w	r3, #104	; 0x68
    74a6:	strb.w	r3, [r4, #1236]	; 0x4d4
      _s = s;
    74aa:	mov.w	r3, #79	; 0x4f
    74ae:	strb.w	r3, [r4, #1237]	; 0x4d5
      _b = b;
    74b2:	mvn.w	r3, #18
    74b6:	strb.w	r3, [r4, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ba:	mvn.w	r3, #110	; 0x6e
    74be:	strb.w	r3, [r4, #1239]	; 0x4d7
      _s = s;
    74c2:	mov.w	r3, #119	; 0x77
    74c6:	strb.w	r3, [r4, #1240]	; 0x4d8
    74ca:	mov.w	r3, #48	; 0x30
    74ce:	strb.w	r3, [r4, #1210]	; 0x4ba
      _b = b;
    74d2:	mvn.w	r3, #11
    74d6:	strb.w	r3, [r4, #1217]	; 0x4c1
    74da:	strb.w	r3, [r4, #1220]	; 0x4c4
    74de:	strb.w	r3, [r4, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74e2:	mvn.w	r3, #119	; 0x77
    74e6:	strb.w	r3, [r4, #1230]	; 0x4ce
      _s = s;
      _b = b;
    74ea:	mvn.w	r3, #11
    74ee:	strb.w	r3, [r4, #1232]	; 0x4d0
    74f2:	strb.w	r3, [r4, #1241]	; 0x4d9
    74f6:	mvn.w	r3, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74fa:	strb.w	r6, [r4, #1245]	; 0x4dd
      _s = s;
      _b = b;
    74fe:	strb.w	r3, [r4, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7502:	mvn.w	r3, #100	; 0x64
    7506:	strb.w	r3, [r4, #1242]	; 0x4da
      _s = s;
    750a:	mvn.w	r3, #103	; 0x67
    750e:	strb.w	r3, [r4, #1243]	; 0x4db
      _b = b;
    7512:	mvn.w	r3, #18
    7516:	strb.w	r3, [r4, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    751a:	mov.w	r3, #88	; 0x58
    751e:	strb.w	r3, [r4, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7522:	mov.w	r3, #47	; 0x2f
    7526:	strb.w	r3, [r4, #1248]	; 0x4e0
      _s = s;
    752a:	mov.w	r3, #124	; 0x7c
    752e:	strb.w	r3, [r4, #1249]	; 0x4e1
      _b = b;
    7532:	mov.w	r3, #117	; 0x75
    7536:	strb.w	r3, [r4, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    753a:	mov.w	r3, #52	; 0x34
    753e:	strb.w	r3, [r4, #1251]	; 0x4e3
      _s = s;
    7542:	mvn.w	r3, #84	; 0x54
    7546:	strb.w	r3, [r4, #1252]	; 0x4e4
      _b = b;
    754a:	mov.w	r3, #98	; 0x62
    754e:	strb.w	r3, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7552:	mov.w	r3, #12
    7556:	strb.w	r3, [r4, #1254]	; 0x4e6
      _s = s;
    755a:	mvn.w	r3, #48	; 0x30
    755e:	strb.w	r3, [r4, #1255]	; 0x4e7
      _b = b;
    7562:	mov.w	r3, #70	; 0x46
    7566:	strb.w	r3, [r4, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    756a:	mvn.w	r3, #22
    756e:	strb.w	r3, [r4, #1257]	; 0x4e9
      _s = s;
    7572:	mov.w	r3, #36	; 0x24
    7576:	strb.w	r3, [r4, #1258]	; 0x4ea
      _b = b;
    757a:	mov.w	r3, #14
    757e:	strb.w	r3, [r4, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7582:	mov.w	r3, #18
    7586:	strb.w	r3, [r4, #1260]	; 0x4ec
      _s = s;
    758a:	mvn.w	r3, #49	; 0x31
    758e:	strb.w	r3, [r4, #1261]	; 0x4ed
      _b = b;
    7592:	mov.w	r3, #116	; 0x74
    7596:	strb.w	r3, [r4, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    759a:	mov.w	r3, #40	; 0x28
    759e:	strb.w	r3, [r4, #1264]	; 0x4f0
      _b = b;
    75a2:	mvn.w	r3, #43	; 0x2b
    75a6:	strb.w	r3, [r4, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75aa:	strb.w	r3, [r4, #1266]	; 0x4f2
      _s = s;
    75ae:	mov.w	r3, #39	; 0x27
    75b2:	strb.w	r3, [r4, #1267]	; 0x4f3
      _b = b;
    75b6:	mvn.w	r3, #27
    75ba:	strb.w	r3, [r4, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    75be:	mov.w	r3, #33	; 0x21
    75c2:	strb.w	r3, [r4, #1270]	; 0x4f6
      _b = b;
    75c6:	mvn.w	r3, #22
    75ca:	strb.w	r3, [r4, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ce:	mvn.w	r3, #60	; 0x3c
    75d2:	strb.w	r3, [r4, #1272]	; 0x4f8
      _s = s;
    75d6:	mov.w	r3, #59	; 0x3b
    75da:	strb.w	r3, [r4, #1273]	; 0x4f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75de:	mvn.w	r3, #34	; 0x22
    75e2:	strb.w	r3, [r4, #1263]	; 0x4ef
    75e6:	mvn.w	r3, #39	; 0x27
    75ea:	strb.w	r3, [r4, #1269]	; 0x4f5
      _s = s;
      _b = b;
    75ee:	mvn.w	r3, #25
    75f2:	strb.w	lr, [r4, #1280]	; 0x500
    75f6:	strb.w	r3, [r4, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75fa:	mvn.w	r3, #72	; 0x48
    75fe:	strb.w	r5, [r4, #1299]	; 0x513
    7602:	strb.w	r3, [r4, #1278]	; 0x4fe
    7606:	mvn.w	r3, #105	; 0x69
    760a:	strb.w	r3, [r4, #1275]	; 0x4fb
      _s = s;
    760e:	mvn.w	r3, #101	; 0x65
    7612:	strb.w	r3, [r4, #1276]	; 0x4fc
      _b = b;
    7616:	mvn.w	r3, #24
    761a:	strb.w	r3, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    761e:	mov.w	r3, #122	; 0x7a
    7622:	strb.w	r3, [r4, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7626:	mvn.w	r3, #54	; 0x36
    762a:	strb.w	r3, [r4, #1281]	; 0x501
      _s = s;
    762e:	mov.w	r3, #80	; 0x50
    7632:	strb.w	r3, [r4, #1282]	; 0x502
      _b = b;
    7636:	mvn.w	r3, #21
    763a:	strb.w	r3, [r4, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    763e:	mvn.w	r3, #51	; 0x33
    7642:	strb.w	r3, [r4, #1284]	; 0x504
      _s = s;
    7646:	mov.w	r3, #75	; 0x4b
    764a:	strb.w	r3, [r4, #1285]	; 0x505
      _b = b;
    764e:	mvn.w	r3, #19
    7652:	strb.w	r3, [r4, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7656:	mvn.w	r3, #57	; 0x39
    765a:	strb.w	r3, [r4, #1287]	; 0x507
      _s = s;
    765e:	mvn.w	r3, #55	; 0x37
    7662:	strb.w	r3, [r4, #1288]	; 0x508
      _b = b;
    7666:	mvn.w	r3, #12
    766a:	strb.w	r3, [r4, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    766e:	mvn.w	r3, #82	; 0x52
    7672:	strb.w	r3, [r4, #1290]	; 0x50a
      _s = s;
    7676:	mov.w	r3, #124	; 0x7c
    767a:	strb.w	r3, [r4, #1291]	; 0x50b
      _b = b;
    767e:	mvn.w	r3, #12
    7682:	strb.w	r3, [r4, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7686:	mvn.w	r3, #108	; 0x6c
    768a:	strb.w	r3, [r4, #1293]	; 0x50d
      _s = s;
    768e:	mov.w	r3, #56	; 0x38
    7692:	strb.w	r3, [r4, #1294]	; 0x50e
      _b = b;
    7696:	mvn.w	r3, #22
    769a:	strb.w	r3, [r4, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    769e:	mvn.w	r3, #127	; 0x7f
    76a2:	strb.w	r3, [r4, #1296]	; 0x510
      _s = s;
    76a6:	mov.w	r3, #105	; 0x69
    76aa:	strb.w	r3, [r4, #1297]	; 0x511
      _b = b;
    76ae:	mvn.w	r3, #7
    76b2:	strb.w	r3, [r4, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76b6:	mvn.w	r3, #100	; 0x64
    76ba:	strb.w	r3, [r4, #1300]	; 0x514
      _b = b;
    76be:	mvn.w	r3, #21
    76c2:	strb.w	r3, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76c6:	mvn.w	r3, #99	; 0x63
    76ca:	strb.w	r3, [r4, #1302]	; 0x516
      _s = s;
    76ce:	mvn.w	r3, #61	; 0x3d
    76d2:	strb.w	r3, [r4, #1303]	; 0x517
      _b = b;
    76d6:	mvn.w	r3, #26
    76da:	strb.w	r3, [r4, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76de:	mov.w	r3, #99	; 0x63
    76e2:	strb.w	r3, [r4, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76e6:	mvn.w	r3, #96	; 0x60
    76ea:	strb.w	r3, [r4, #1305]	; 0x519
      _s = s;
      _b = b;
    76ee:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76f2:	strb.w	r9, [r4, #1312]	; 0x520
      _b = b;
    76f6:	strb.w	r3, [r4, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76fa:	mov.w	r3, #96	; 0x60
    76fe:	strb.w	r3, [r4, #1309]	; 0x51d
      _b = b;
    7702:	mvn.w	r3, #23
    7706:	strb.w	r3, [r4, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    770a:	mvn.w	r3, #90	; 0x5a
    770e:	strb.w	r3, [r4, #1311]	; 0x51f
      _s = s;
      _b = b;
    7712:	mvn.w	r3, #21
    7716:	strb.w	r3, [r4, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    771a:	mvn.w	r3, #98	; 0x62
    771e:	strb.w	r3, [r4, #1314]	; 0x522
      _s = s;
    7722:	mvn.w	r3, #62	; 0x3e
    7726:	strb.w	r3, [r4, #1315]	; 0x523
      _b = b;
    772a:	mvn.w	r3, #22
    772e:	strb.w	r3, [r4, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7732:	mvn.w	r3, #111	; 0x6f
    7736:	strb.w	r3, [r4, #1317]	; 0x525
      _s = s;
      _b = b;
    773a:	mvn.w	r3, #71	; 0x47
    773e:	strb.w	r3, [r4, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7742:	mov.w	r3, #121	; 0x79
    7746:	strb.w	r3, [r4, #1321]	; 0x529
      _b = b;
    774a:	mov.w	r3, #120	; 0x78
    774e:	strb.w	r3, [r4, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7752:	mov.w	r3, #36	; 0x24
    7756:	strb.w	r3, [r4, #1323]	; 0x52b
      _s = s;
    775a:	mvn.w	r3, #49	; 0x31
    775e:	strb.w	r3, [r4, #1324]	; 0x52c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7762:	mov.w	r3, #105	; 0x69
    7766:	strb.w	r3, [r4, #1326]	; 0x52e
      _s = s;
    776a:	mvn.w	r3, #85	; 0x55
    776e:	strb.w	r3, [r4, #1327]	; 0x52f
      _b = b;
    7772:	mov.w	r3, #88	; 0x58
    7776:	strb.w	r3, [r4, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    777a:	mov.w	r3, #108	; 0x6c
    777e:	strb.w	r3, [r4, #1329]	; 0x531
      _s = s;
    7782:	mvn.w	r3, #67	; 0x43
    7786:	strb.w	r3, [r4, #1330]	; 0x532
      _b = b;
    778a:	mov.w	r3, #46	; 0x2e
    778e:	strb.w	r3, [r4, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7792:	mov.w	r3, #116	; 0x74
    7796:	strb.w	r3, [r4, #1333]	; 0x535
      _b = b;
    779a:	mov.w	r3, #92	; 0x5c
    779e:	strb.w	r3, [r4, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77a2:	mvn.w	r3, #6
    77a6:	strb.w	r3, [r4, #1335]	; 0x537
      _s = s;
    77aa:	mov.w	r3, #53	; 0x35
    77ae:	strb.w	r3, [r4, #1336]	; 0x538
      _b = b;
    77b2:	mvn.w	r3, #49	; 0x31
    77b6:	strb.w	r3, [r4, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ba:	mvn.w	r3, #38	; 0x26
    77be:	strb.w	r3, [r4, #1338]	; 0x53a
      _s = s;
    77c2:	mov.w	r3, #37	; 0x25
    77c6:	strb.w	r3, [r4, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ca:	mvn.w	r3, #96	; 0x60
    77ce:	strb.w	r3, [r4, #1308]	; 0x51c
      _s = s;
    77d2:	strb.w	r3, [r4, #1318]	; 0x526
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77d6:	mov.w	r3, #114	; 0x72
    77da:	strb.w	r3, [r4, #1320]	; 0x528
      _s = s;
      _b = b;
    77de:	mov.w	r3, #73	; 0x49
    77e2:	strb.w	r3, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77e6:	mov.w	r3, #26
    77ea:	strb.w	r3, [r4, #1332]	; 0x534
      _s = s;
      _b = b;
    77ee:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77f2:	strb.w	r0, [r4, #1368]	; 0x558
      _s = s;
      _b = b;
    77f6:	strb.w	r3, [r4, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    77fa:	mov.w	r3, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77fe:	strb.w	r1, [r4, #1371]	; 0x55b
      _s = s;
    7802:	mov.w	r1, #91	; 0x5b
    7806:	strb.w	r3, [r4, #1345]	; 0x541
      _b = b;
    780a:	mvn.w	r3, #25
    780e:	strb.w	r3, [r4, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7812:	mvn.w	r3, #69	; 0x45
    7816:	strb.w	r3, [r4, #1344]	; 0x540
      _s = s;
      _b = b;
    781a:	mvn.w	r3, #25
    781e:	strb.w	r3, [r4, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7822:	mvn.w	r3, #103	; 0x67
    7826:	strb.w	r3, [r4, #1347]	; 0x543
      _s = s;
    782a:	mvn.w	r3, #56	; 0x38
    782e:	strb.w	r3, [r4, #1348]	; 0x544
      _b = b;
    7832:	mvn.w	r3, #22
    7836:	strb.w	r3, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    783a:	mvn.w	r3, #65	; 0x41
    783e:	strb.w	r3, [r4, #1350]	; 0x546
      _s = s;
    7842:	mvn.w	r3, #81	; 0x51
    7846:	strb.w	r3, [r4, #1351]	; 0x547
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    784a:	mvn.w	r3, #57	; 0x39
    784e:	strb.w	r3, [r4, #1353]	; 0x549
      _s = s;
    7852:	mvn.w	r3, #82	; 0x52
    7856:	strb.w	r3, [r4, #1354]	; 0x54a
      _b = b;
    785a:	mvn.w	r3, #15
    785e:	strb.w	r3, [r4, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7862:	mvn.w	r3, #54	; 0x36
    7866:	strb.w	r3, [r4, #1356]	; 0x54c
      _s = s;
    786a:	mov.w	r3, #117	; 0x75
    786e:	strb.w	r3, [r4, #1357]	; 0x54d
      _b = b;
    7872:	mvn.w	r3, #14
    7876:	strb.w	r3, [r4, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    787a:	mvn.w	r3, #59	; 0x3b
    787e:	strb.w	r3, [r4, #1359]	; 0x54f
      _s = s;
    7882:	mvn.w	r3, #64	; 0x40
    7886:	strb.w	r3, [r4, #1360]	; 0x550
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    788a:	mvn.w	r3, #81	; 0x51
    788e:	strb.w	r3, [r4, #1362]	; 0x552
    7892:	mvn.w	r3, #110	; 0x6e
    7896:	strb.w	r3, [r4, #1365]	; 0x555
      _s = s;
    789a:	mov.w	r3, #46	; 0x2e
    789e:	strb.w	r3, [r4, #1366]	; 0x556
      _b = b;
    78a2:	mvn.w	r3, #19
    78a6:	strb.w	r3, [r4, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78aa:	mvn.w	r3, #59	; 0x3b
    78ae:	strb.w	r3, [r4, #1369]	; 0x559
      _b = b;
    78b2:	mvn.w	r3, #12
    78b6:	strb.w	r3, [r4, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78ba:	mvn.w	r3, #45	; 0x2d
    78be:	strb.w	r3, [r4, #1341]	; 0x53d
      _s = s;
    78c2:	mov.w	r3, #48	; 0x30
    78c6:	strb.w	r3, [r4, #1342]	; 0x53e
      _b = b;
    78ca:	mvn.w	r3, #16
    78ce:	strb.w	r3, [r4, #1352]	; 0x548
    78d2:	mvn.w	r3, #11
    78d6:	strb.w	r3, [r4, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78da:	mvn.w	r3, #121	; 0x79
    78de:	strb.w	r3, [r4, #1363]	; 0x553
      _b = b;
    78e2:	mvn.w	r3, #11
    78e6:	strb.w	r3, [r4, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78ea:	mvn.w	r3, #102	; 0x66
    78ee:	strb.w	r3, [r4, #1372]	; 0x55c
      _b = b;
    78f2:	mvn.w	r3, #8
    78f6:	strb.w	lr, [r4, #1388]	; 0x56c
    78fa:	strb.w	r3, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78fe:	mvn.w	r3, #75	; 0x4b
    7902:	strb.w	r3, [r4, #1383]	; 0x567
    7906:	mvn.w	r3, #101	; 0x65
    790a:	strb.w	r3, [r4, #1374]	; 0x55e
      _s = s;
    790e:	mvn.w	r3, #90	; 0x5a
    7912:	strb.w	r3, [r4, #1375]	; 0x55f
      _b = b;
    7916:	mvn.w	r3, #19
    791a:	strb.w	r3, [r4, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    791e:	mvn.w	r3, #110	; 0x6e
    7922:	strb.w	r3, [r4, #1378]	; 0x562
      _b = b;
    7926:	mvn.w	r3, #13
    792a:	strb.w	r3, [r4, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    792e:	mvn.w	r3, #77	; 0x4d
    7932:	strb.w	r3, [r4, #1380]	; 0x564
      _s = s;
    7936:	mvn.w	r3, #66	; 0x42
    793a:	strb.w	r3, [r4, #1381]	; 0x565
      _b = b;
    793e:	mvn.w	r3, #19
    7942:	strb.w	r3, [r4, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7946:	mvn.w	r3, #106	; 0x6a
    794a:	strb.w	r3, [r4, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    794e:	mvn.w	r3, #81	; 0x51
    7952:	strb.w	r3, [r4, #1386]	; 0x56a
      _s = s;
    7956:	mov.w	r3, #113	; 0x71
    795a:	strb.w	r3, [r4, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    795e:	mvn.w	r3, #100	; 0x64
    7962:	strb.w	r3, [r4, #1389]	; 0x56d
      _s = s;
    7966:	mvn.w	r3, #94	; 0x5e
    796a:	strb.w	r3, [r4, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    796e:	mov.w	r3, #103	; 0x67
    7972:	strb.w	r3, [r4, #1392]	; 0x570
      _s = s;
    7976:	mov.w	r3, #95	; 0x5f
    797a:	strb.w	r3, [r4, #1393]	; 0x571
      _b = b;
    797e:	mov.w	r3, #126	; 0x7e
    7982:	strb.w	r3, [r4, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7986:	mov.w	r3, #95	; 0x5f
    798a:	strb.w	r3, [r4, #1395]	; 0x573
      _s = s;
    798e:	mov.w	r3, #88	; 0x58
    7992:	strb.w	r3, [r4, #1396]	; 0x574
      _b = b;
    7996:	mvn.w	r3, #114	; 0x72
    799a:	strb.w	r3, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    799e:	mov.w	r3, #120	; 0x78
    79a2:	strb.w	r3, [r4, #1398]	; 0x576
      _s = s;
    79a6:	mvn.w	r3, #58	; 0x3a
    79aa:	strb.w	r3, [r4, #1399]	; 0x577
      _b = b;
    79ae:	mvn.w	r3, #127	; 0x7f
    79b2:	strb.w	r3, [r4, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79b6:	mov.w	r3, #95	; 0x5f
    79ba:	strb.w	r3, [r4, #1401]	; 0x579
      _s = s;
    79be:	mvn.w	r3, #84	; 0x54
    79c2:	strb.w	r3, [r4, #1402]	; 0x57a
      _b = b;
    79c6:	mov.w	r3, #82	; 0x52
    79ca:	strb.w	r3, [r4, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79ce:	mov.w	r3, #113	; 0x71
    79d2:	strb.w	r3, [r4, #1404]	; 0x57c
      _s = s;
    79d6:	mvn.w	r3, #126	; 0x7e
    79da:	strb.w	r3, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79de:	mvn.w	r3, #96	; 0x60
    79e2:	strb.w	r3, [r4, #1377]	; 0x561
      _s = s;
      _b = b;
    79e6:	mvn.w	r3, #16
    79ea:	strb.w	r3, [r4, #1385]	; 0x569
    79ee:	mvn.w	r3, #39	; 0x27
    79f2:	strb.w	r3, [r4, #1391]	; 0x56f
    79f6:	mvn.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79fa:	strb.w	r5, [r4, #1429]	; 0x595
      _b = b;
    79fe:	strb.w	r3, [r4, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a02:	mov.w	r3, #64	; 0x40
    7a06:	strb.w	r3, [r4, #1408]	; 0x580
      _b = b;
    7a0a:	mvn.w	r3, #90	; 0x5a
    7a0e:	strb.w	r3, [r4, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a12:	mvn.w	r3, #58	; 0x3a
    7a16:	strb.w	r3, [r4, #1410]	; 0x582
      _s = s;
    7a1a:	mov.w	r3, #72	; 0x48
    7a1e:	strb.w	r3, [r4, #1411]	; 0x583
      _b = b;
    7a22:	mvn.w	r3, #27
    7a26:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a2a:	mvn.w	r3, #65	; 0x41
    7a2e:	strb.w	r3, [r4, #1413]	; 0x585
      _s = s;
    7a32:	mov.w	r3, #108	; 0x6c
    7a36:	strb.w	r3, [r4, #1414]	; 0x586
      _b = b;
    7a3a:	mvn.w	r3, #21
    7a3e:	strb.w	r3, [r4, #1415]	; 0x587
    7a42:	mvn.w	r3, #24
    7a46:	strb.w	r3, [r4, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a4a:	mvn.w	r3, #85	; 0x55
    7a4e:	strb.w	r3, [r4, #1420]	; 0x58c
      _b = b;
    7a52:	mvn.w	r3, #22
    7a56:	strb.w	r3, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a5a:	mvn.w	r3, #73	; 0x49
    7a5e:	strb.w	r3, [r4, #1422]	; 0x58e
      _s = s;
      _b = b;
    7a62:	mvn.w	r3, #17
    7a66:	strb.w	r3, [r4, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a6a:	mvn.w	r3, #56	; 0x38
    7a6e:	strb.w	r3, [r4, #1425]	; 0x591
      _s = s;
    7a72:	mvn.w	r3, #66	; 0x42
    7a76:	strb.w	r3, [r4, #1426]	; 0x592
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a7a:	mvn.w	r3, #55	; 0x37
    7a7e:	strb.w	r3, [r4, #1428]	; 0x594
      _s = s;
      _b = b;
    7a82:	mvn.w	r3, #14
    7a86:	strb.w	r3, [r4, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a8a:	mvn.w	r3, #63	; 0x3f
    7a8e:	strb.w	r3, [r4, #1431]	; 0x597
      _s = s;
    7a92:	mvn.w	r3, #81	; 0x51
    7a96:	strb.w	r3, [r4, #1432]	; 0x598
      _b = b;
    7a9a:	mvn.w	r3, #13
    7a9e:	strb.w	r3, [r4, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7aa2:	mov.w	r3, #124	; 0x7c
    7aa6:	strb.w	r3, [r4, #1435]	; 0x59b
      _b = b;
    7aaa:	mvn.w	r3, #15
    7aae:	strb.w	r3, [r4, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab2:	mvn.w	r3, #118	; 0x76
    7ab6:	strb.w	r3, [r4, #1437]	; 0x59d
      _s = s;
    7aba:	mov.w	r3, #28
    7abe:	strb.w	r3, [r4, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ac2:	mvn.w	r3, #34	; 0x22
    7ac6:	strb.w	r3, [r4, #1407]	; 0x57f
    7aca:	mvn.w	r3, #96	; 0x60
    7ace:	strb.w	r3, [r4, #1416]	; 0x588
      _s = s;
    7ad2:	mvn.w	r3, #102	; 0x66
    7ad6:	strb.w	r3, [r4, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ada:	mvn.w	r3, #119	; 0x77
    7ade:	strb.w	r3, [r4, #1419]	; 0x58b
      _s = s;
    7ae2:	mov.w	r3, #109	; 0x6d
    7ae6:	strb.w	r3, [r4, #1423]	; 0x58f
      _b = b;
    7aea:	mvn.w	r3, #16
    7aee:	strb.w	r3, [r4, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7af2:	mvn.w	r3, #96	; 0x60
    7af6:	strb.w	r3, [r4, #1434]	; 0x59a
    7afa:	mvn.w	r3, #68	; 0x44
      _s = s;
      _b = b;
    7afe:	strb.w	lr, [r4, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b02:	strb.w	r3, [r4, #1452]	; 0x5ac
      _s = s;
    7b06:	mvn.w	r3, #38	; 0x26
      _b = b;
    7b0a:	strb.w	lr, [r4, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b0e:	strb.w	r3, [r4, #1444]	; 0x5a4
      _b = b;
    7b12:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b16:	strb.w	r0, [r4, #1443]	; 0x5a3
      _s = s;
      _b = b;
    7b1a:	strb.w	r3, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b1e:	mvn.w	r3, #110	; 0x6e
      _s = s;
    7b22:	strb.w	r0, [r4, #1462]	; 0x5b6
      _b = b;
    7b26:	mvn.w	r0, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b2a:	strb.w	r3, [r4, #1446]	; 0x5a6
      _s = s;
    7b2e:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b32:	strb.w	r6, [r4, #1464]	; 0x5b8
      _s = s;
    7b36:	strb.w	r3, [r4, #1447]	; 0x5a7
      _b = b;
    7b3a:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b3e:	strb.w	lr, [r4, #1471]	; 0x5bf
      _b = b;
    7b42:	strb.w	r3, [r4, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b46:	mvn.w	r3, #109	; 0x6d
      _s = s;
    7b4a:	strb.w	r5, [r4, #1450]	; 0x5aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b4e:	strb.w	r3, [r4, #1449]	; 0x5a9
      _s = s;
      _b = b;
    7b52:	mvn.w	r3, #6
    7b56:	strb.w	r3, [r4, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b5a:	mov.w	r3, #126	; 0x7e
    7b5e:	strb.w	r3, [r4, #1453]	; 0x5ad
      _b = b;
    7b62:	mvn.w	r3, #5
    7b66:	strb.w	r3, [r4, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b6a:	mvn.w	r3, #53	; 0x35
    7b6e:	strb.w	r3, [r4, #1455]	; 0x5af
      _s = s;
    7b72:	mov.w	r3, #52	; 0x34
    7b76:	strb.w	r3, [r4, #1456]	; 0x5b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b7a:	mvn.w	r3, #50	; 0x32
    7b7e:	strb.w	r3, [r4, #1458]	; 0x5b2
      _s = s;
    7b82:	mov.w	r3, #62	; 0x3e
    7b86:	strb.w	r3, [r4, #1459]	; 0x5b3
      _b = b;
    7b8a:	mvn.w	r3, #9
    7b8e:	strb.w	r3, [r4, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b92:	mvn.w	r3, #77	; 0x4d
    7b96:	strb.w	r3, [r4, #1461]	; 0x5b5
      _s = s;
    7b9a:	mvn.w	r3, #46	; 0x2e
    7b9e:	strb.w	r3, [r4, #1465]	; 0x5b9
      _b = b;
    7ba2:	mov.w	r3, #118	; 0x76
    7ba6:	strb.w	r3, [r4, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7baa:	mov.w	r3, #110	; 0x6e
    7bae:	strb.w	r3, [r4, #1467]	; 0x5bb
      _s = s;
    7bb2:	mvn.w	r3, #63	; 0x3f
    7bb6:	strb.w	r3, [r4, #1468]	; 0x5bc
      _b = b;
    7bba:	mov.w	r3, #74	; 0x4a
    7bbe:	strb.w	r3, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bc2:	mvn.w	r3, #121	; 0x79
    7bc6:	strb.w	r3, [r4, #1440]	; 0x5a0
      _s = s;
    7bca:	mvn.w	r3, #83	; 0x53
    7bce:	strb.w	r3, [r4, #1441]	; 0x5a1
      _b = b;
    7bd2:	mvn.w	r3, #8
    7bd6:	strb.w	r3, [r4, #1457]	; 0x5b1
    7bda:	mvn.w	r3, #34	; 0x22
    7bde:	strb.w	r3, [r4, #1463]	; 0x5b7
    7be2:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7be6:	strb.w	r5, [r4, #1470]	; 0x5be
      _s = s;
      _b = b;
    7bea:	strb.w	r3, [r4, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bee:	mvn.w	r3, #53	; 0x35
      _b = b;
    7bf2:	strb.w	r9, [r4, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bf6:	strb.w	r3, [r4, #1474]	; 0x5c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bfa:	mvn.w	r3, #110	; 0x6e
      _s = s;
    7bfe:	strb.w	r6, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c02:	strb.w	r3, [r4, #1476]	; 0x5c4
      _s = s;
      _b = b;
    7c06:	mov.w	r3, #102	; 0x66
    7c0a:	strb.w	lr, [r4, #1496]	; 0x5d8
    7c0e:	strb.w	r3, [r4, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c12:	mvn.w	r3, #97	; 0x61
      _s = s;
    7c16:	strb.w	r6, [r4, #1498]	; 0x5da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c1a:	strb.w	r3, [r4, #1479]	; 0x5c7
      _s = s;
      _b = b;
    7c1e:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c22:	strb.w	r5, [r4, #1473]	; 0x5c1
      _s = s;
      _b = b;
    7c26:	strb.w	r3, [r4, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c2a:	mvn.w	r3, #95	; 0x5f
      _s = s;
    7c2e:	strb.w	r7, [r4, #1489]	; 0x5d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c32:	strb.w	r3, [r4, #1482]	; 0x5ca
      _s = s;
    7c36:	mvn.w	r3, #28
    7c3a:	strb.w	r8, [r4, #1495]	; 0x5d7
    7c3e:	strb.w	r3, [r4, #1483]	; 0x5cb
      _b = b;
    7c42:	mvn.w	r3, #24
    7c46:	strb.w	r3, [r4, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c4a:	mvn.w	r3, #5
    7c4e:	strb.w	r3, [r4, #1486]	; 0x5ce
      _b = b;
    7c52:	mvn.w	r3, #22
    7c56:	strb.w	r3, [r4, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c5a:	mvn.w	r3, #98	; 0x62
    7c5e:	strb.w	r3, [r4, #1488]	; 0x5d0
      _s = s;
      _b = b;
    7c62:	mvn.w	r3, #28
    7c66:	strb.w	r3, [r4, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c6a:	mvn.w	r3, #108	; 0x6c
    7c6e:	strb.w	r3, [r4, #1491]	; 0x5d3
      _s = s;
    7c72:	mvn.w	r3, #60	; 0x3c
    7c76:	strb.w	r3, [r4, #1492]	; 0x5d4
      _b = b;
    7c7a:	mvn.w	r3, #26
    7c7e:	strb.w	r3, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c82:	mvn.w	r3, #101	; 0x65
    7c86:	strb.w	r3, [r4, #1494]	; 0x5d6
    7c8a:	mvn.w	r3, #66	; 0x42
    7c8e:	strb.w	r3, [r4, #1497]	; 0x5d9
    7c92:	mvn.w	r3, #61	; 0x3d
    7c96:	strb.w	r3, [r4, #1500]	; 0x5dc
    7c9a:	mvn.w	r3, #88	; 0x58
    7c9e:	strb.w	r3, [r4, #1503]	; 0x5df
      _s = s;
    7ca2:	mvn.w	r3, #79	; 0x4f
    7ca6:	strb.w	r3, [r4, #1480]	; 0x5c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7caa:	mvn.w	r3, #96	; 0x60
    7cae:	strb.w	r3, [r4, #1485]	; 0x5cd
      _s = s;
      _b = b;
    7cb2:	mvn.w	r3, #16
    7cb6:	strb.w	r3, [r4, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cba:	mov.w	r3, #115	; 0x73
    7cbe:	strb.w	r3, [r4, #1501]	; 0x5dd
      _b = b;
    7cc2:	mvn.w	r3, #16
    7cc6:	strb.w	r3, [r4, #1502]	; 0x5de
    7cca:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cce:	strb.w	r5, [r4, #1504]	; 0x5e0
      _b = b;
    7cd2:	strb.w	r3, [r4, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cd6:	mov.w	r3, #113	; 0x71
    7cda:	strb.w	r3, [r4, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cde:	mvn.w	r3, #111	; 0x6f
    7ce2:	strb.w	r3, [r4, #1506]	; 0x5e2
      _s = s;
      _b = b;
    7ce6:	mvn.w	r3, #17
    7cea:	strb.w	r3, [r4, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cee:	mov.w	r3, #57	; 0x39
    7cf2:	strb.w	r3, [r4, #1510]	; 0x5e6
      _b = b;
    7cf6:	mvn.w	r3, #21
    7cfa:	strb.w	r3, [r4, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cfe:	mov.w	r3, #94	; 0x5e
    7d02:	strb.w	r3, [r4, #1512]	; 0x5e8
      _s = s;
    7d06:	mov.w	r3, #40	; 0x28
    7d0a:	strb.w	r3, [r4, #1513]	; 0x5e9
      _b = b;
    7d0e:	mvn.w	r3, #87	; 0x57
    7d12:	strb.w	r3, [r4, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d16:	mov.w	r3, #122	; 0x7a
    7d1a:	strb.w	r3, [r4, #1515]	; 0x5eb
      _s = s;
    7d1e:	mov.w	r3, #116	; 0x74
    7d22:	strb.w	r3, [r4, #1516]	; 0x5ec
      _b = b;
    7d26:	mvn.w	r3, #65	; 0x41
    7d2a:	strb.w	r3, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d2e:	mvn.w	r3, #118	; 0x76
    7d32:	strb.w	r3, [r4, #1518]	; 0x5ee
      _s = s;
    7d36:	mvn.w	r3, #50	; 0x32
    7d3a:	strb.w	r3, [r4, #1519]	; 0x5ef
      _b = b;
    7d3e:	mvn.w	r3, #23
    7d42:	strb.w	r3, [r4, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d46:	mvn.w	r3, #103	; 0x67
    7d4a:	strb.w	r3, [r4, #1521]	; 0x5f1
      _s = s;
    7d4e:	mvn.w	r3, #93	; 0x5d
    7d52:	strb.w	r3, [r4, #1522]	; 0x5f2
      _b = b;
    7d56:	mvn.w	r3, #9
    7d5a:	strb.w	r3, [r4, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d5e:	mvn.w	r3, #71	; 0x47
    7d62:	strb.w	r3, [r4, #1524]	; 0x5f4
      _s = s;
    7d66:	mov.w	r3, #108	; 0x6c
    7d6a:	strb.w	r3, [r4, #1525]	; 0x5f5
      _b = b;
    7d6e:	mvn.w	r3, #6
    7d72:	strb.w	r3, [r4, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d76:	mvn.w	r3, #51	; 0x33
    7d7a:	strb.w	r3, [r4, #1527]	; 0x5f7
      _s = s;
    7d7e:	mov.w	r3, #59	; 0x3b
    7d82:	strb.w	r3, [r4, #1528]	; 0x5f8
      _b = b;
    7d86:	mvn.w	r3, #6
    7d8a:	strb.w	r3, [r4, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d8e:	mvn.w	r3, #47	; 0x2f
    7d92:	strb.w	r3, [r4, #1530]	; 0x5fa
      _s = s;
    7d96:	mov.w	r3, #81	; 0x51
    7d9a:	strb.w	r3, [r4, #1531]	; 0x5fb
      _b = b;
    7d9e:	mvn.w	r3, #9
    7da2:	strb.w	r3, [r4, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7da6:	mvn.w	r3, #38	; 0x26
    7daa:	strb.w	r3, [r4, #1533]	; 0x5fd
      _s = s;
    7dae:	mov.w	r3, #37	; 0x25
    7db2:	strb.w	r3, [r4, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7db6:	mvn.w	r3, #94	; 0x5e
    7dba:	strb.w	r3, [r4, #1536]	; 0x600
      _s = s;
    7dbe:	mov.w	r3, #81	; 0x51
    7dc2:	strb.w	r3, [r4, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dc6:	mvn.w	r3, #120	; 0x78
    7dca:	strb.w	r3, [r4, #1509]	; 0x5e5
      _s = s;
      _b = b;
    7dce:	mvn.w	r3, #11
    7dd2:	strb.w	r3, [r4, #1535]	; 0x5ff
    7dd6:	mvn.w	r3, #77	; 0x4d
    7dda:	strb.w	r9, [r4, #1544]	; 0x608
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dde:	mvn.w	r9, #85	; 0x55
      _b = b;
    7de2:	strb.w	r3, [r4, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7de6:	mov.w	r3, #84	; 0x54
      _s = s;
      _b = b;
    7dea:	strb.w	r6, [r4, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dee:	strb.w	r3, [r4, #1539]	; 0x603
      _s = s;
    7df2:	mov.w	r3, #91	; 0x5b
    7df6:	strb.w	r7, [r4, #1552]	; 0x610
    7dfa:	strb.w	r3, [r4, #1540]	; 0x604
      _b = b;
    7dfe:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e02:	strb.w	fp, [r4, #1557]	; 0x615
      _s = s;
      _b = b;
    7e06:	strb.w	r3, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e0a:	mov.w	r3, #118	; 0x76
      _s = s;
    7e0e:	strb.w	r7, [r4, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e12:	strb.w	r3, [r4, #1542]	; 0x606
      _s = s;
    7e16:	mvn.w	r3, #63	; 0x3f
    7e1a:	strb.w	r3, [r4, #1543]	; 0x607
    7e1e:	mvn.w	r3, #65	; 0x41
    7e22:	strb.w	r3, [r4, #1546]	; 0x60a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e26:	mvn.w	r3, #110	; 0x6e
    7e2a:	strb.w	r3, [r4, #1548]	; 0x60c
      _s = s;
    7e2e:	mvn.w	r3, #13
    7e32:	strb.w	r3, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e36:	mvn.w	r3, #107	; 0x6b
    7e3a:	strb.w	r3, [r4, #1551]	; 0x60f
      _s = s;
      _b = b;
    7e3e:	mvn.w	r3, #65	; 0x41
    7e42:	strb.w	r3, [r4, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e46:	mvn.w	r3, #101	; 0x65
    7e4a:	strb.w	r3, [r4, #1554]	; 0x612
      _s = s;
    7e4e:	mvn.w	r3, #105	; 0x69
    7e52:	strb.w	r3, [r4, #1555]	; 0x613
      _b = b;
    7e56:	mvn.w	r3, #31
    7e5a:	strb.w	r3, [r4, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e5e:	mov.w	r3, #75	; 0x4b
    7e62:	strb.w	r3, [r4, #1558]	; 0x616
      _b = b;
    7e66:	mvn.w	r3, #41	; 0x29
    7e6a:	strb.w	r3, [r4, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e6e:	mvn.w	r3, #107	; 0x6b
    7e72:	strb.w	r3, [r4, #1560]	; 0x618
    7e76:	mvn.w	r3, #110	; 0x6e
    7e7a:	strb.w	r3, [r4, #1566]	; 0x61e
      _s = s;
    7e7e:	mvn.w	r3, #47	; 0x2f
    7e82:	strb.w	r3, [r4, #1567]	; 0x61f
      _b = b;
    7e86:	mvn.w	r3, #24
    7e8a:	strb.w	r3, [r4, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e8e:	mvn.w	r3, #110	; 0x6e
    7e92:	strb.w	r3, [r4, #1569]	; 0x621
      _s = s;
    7e96:	mvn.w	r3, #40	; 0x28
    7e9a:	strb.w	r3, [r4, #1570]	; 0x622
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e9e:	mov.w	r3, #100	; 0x64
    7ea2:	strb.w	r3, [r4, #1545]	; 0x609
      _s = s;
      _b = b;
    7ea6:	mov.w	r3, #63	; 0x3f
    7eaa:	strb.w	r3, [r4, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7eae:	mvn.w	r3, #121	; 0x79
    7eb2:	strb.w	r3, [r4, #1561]	; 0x619
      _b = b;
    7eb6:	mvn.w	r3, #32
    7eba:	strb.w	r3, [r4, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ebe:	mvn.w	r3, #96	; 0x60
    7ec2:	strb.w	r3, [r4, #1563]	; 0x61b
      _s = s;
      _b = b;
    7ec6:	mvn.w	r3, #39	; 0x27
    7eca:	strb.w	r3, [r4, #1565]	; 0x61d
    7ece:	mvn.w	r3, #23
    7ed2:	strb.w	lr, [r4, #1574]	; 0x626
    7ed6:	strb.w	r3, [r4, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eda:	mvn.w	r3, #106	; 0x6a
      _s = s;
      _b = b;
    7ede:	strb.w	lr, [r4, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ee2:	strb.w	r3, [r4, #1572]	; 0x624
      _s = s;
    7ee6:	mvn.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eea:	strb.w	ip, [r4, #1578]	; 0x62a
      _s = s;
    7eee:	strb.w	r3, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ef2:	mvn.w	r3, #107	; 0x6b
    7ef6:	strb.w	fp, [r4, #1581]	; 0x62d
    7efa:	strb.w	r3, [r4, #1575]	; 0x627
      _s = s;
    7efe:	mvn.w	r3, #87	; 0x57
    7f02:	strb.w	r3, [r4, #1576]	; 0x628
    7f06:	mov.w	r3, #61	; 0x3d
    7f0a:	strb.w	r3, [r4, #1579]	; 0x62b
      _b = b;
    7f0e:	mvn.w	r3, #23
    7f12:	strb.w	r3, [r4, #1580]	; 0x62c
    7f16:	mvn.w	r3, #22
    7f1a:	strb.w	r3, [r4, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f1e:	mvn.w	r3, #12
    7f22:	strb.w	r3, [r4, #1584]	; 0x630
      _s = s;
    7f26:	mov.w	r3, #88	; 0x58
    7f2a:	strb.w	r3, [r4, #1585]	; 0x631
      _b = b;
    7f2e:	mov.w	r3, #43	; 0x2b
    7f32:	strb.w	r3, [r4, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f36:	mov.w	r3, #59	; 0x3b
    7f3a:	strb.w	r3, [r4, #1587]	; 0x633
      _s = s;
    7f3e:	mov.w	r3, #44	; 0x2c
    7f42:	strb.w	r3, [r4, #1588]	; 0x634
      _b = b;
    7f46:	mov.w	r3, #57	; 0x39
    7f4a:	strb.w	r3, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f4e:	mov.w	r3, #125	; 0x7d
    7f52:	strb.w	r3, [r4, #1590]	; 0x636
      _s = s;
    7f56:	mov.w	r3, #79	; 0x4f
    7f5a:	strb.w	r3, [r4, #1591]	; 0x637
      _b = b;
    7f5e:	mvn.w	r3, #47	; 0x2f
    7f62:	strb.w	r3, [r4, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f66:	mov.w	r3, #95	; 0x5f
    7f6a:	strb.w	r3, [r4, #1594]	; 0x63a
      _b = b;
    7f6e:	mvn.w	r3, #9
    7f72:	strb.w	r3, [r4, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f76:	mvn.w	r3, #66	; 0x42
    7f7a:	strb.w	r3, [r4, #1596]	; 0x63c
      _s = s;
    7f7e:	mov.w	r3, #116	; 0x74
    7f82:	strb.w	r3, [r4, #1597]	; 0x63d
      _b = b;
    7f86:	mvn.w	r3, #5
    7f8a:	strb.w	r3, [r4, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f8e:	mvn.w	r3, #64	; 0x40
    7f92:	strb.w	r3, [r4, #1599]	; 0x63f
      _s = s;
    7f96:	mov.w	r3, #50	; 0x32
    7f9a:	strb.w	r3, [r4, #1600]	; 0x640
      _b = b;
    7f9e:	mvn.w	r3, #6
    7fa2:	strb.w	r3, [r4, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fa6:	mov.w	r3, #57	; 0x39
    7faa:	strb.w	r3, [r4, #1603]	; 0x643
    7fae:	mov.w	r3, #63	; 0x3f
    7fb2:	strb.w	r3, [r4, #1582]	; 0x62e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fb6:	mvn.w	r3, #121	; 0x79
    7fba:	strb.w	r3, [r4, #1593]	; 0x639
    7fbe:	mvn.w	r3, #45	; 0x2d
    7fc2:	strb.w	r3, [r4, #1602]	; 0x642
      _s = s;
      _b = b;
    7fc6:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fca:	strb.w	r9, [r4, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fce:	mvn.w	r9, #122	; 0x7a
      _s = s;
      _b = b;
    7fd2:	strb.w	r3, [r4, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fd6:	mvn.w	r3, #50	; 0x32
    7fda:	strb.w	r9, [r4, #1620]	; 0x654
    7fde:	mvn.w	r9, #121	; 0x79
    7fe2:	strb.w	r3, [r4, #1605]	; 0x645
      _s = s;
    7fe6:	mov.w	r3, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fea:	strb.w	r9, [r4, #1611]	; 0x64b
    7fee:	mvn.w	r9, #102	; 0x66
      _s = s;
    7ff2:	strb.w	r3, [r4, #1606]	; 0x646
      _b = b;
    7ff6:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ffa:	strb.w	r9, [r4, #1635]	; 0x663
      _s = s;
      _b = b;
    7ffe:	mvn.w	r9, #39	; 0x27
    8002:	strb.w	r3, [r4, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8006:	mvn.w	r3, #94	; 0x5e
    800a:	strb.w	r2, [r4, #1632]	; 0x660
#include "Screen.h"




Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    800e:	movs	r2, #7
    8010:	strb.w	r3, [r4, #1608]	; 0x648
      _s = s;
    8014:	mov.w	r3, #117	; 0x75
    8018:	strb.w	r1, [r4, #1633]	; 0x661
    801c:	mov.w	r1, #576	; 0x240
    8020:	strb.w	r3, [r4, #1609]	; 0x649
      _b = b;
    8024:	mvn.w	r3, #28
    8028:	strb.w	r0, [r4, #1634]	; 0x662
    802c:	strb.w	r3, [r4, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8030:	mvn.w	r3, #12
    8034:	strb.w	ip, [r4, #1627]	; 0x65b
    8038:	strb.w	r3, [r4, #1612]	; 0x64c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    803c:	mvn.w	r3, #118	; 0x76
      _s = s;
      _b = b;
    8040:	strb.w	sl, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8044:	strb.w	r3, [r4, #1614]	; 0x64e
      _s = s;
    8048:	mvn.w	r3, #19
    804c:	ldr	r0, [pc, #948]	; (8404 <_GLOBAL__sub_I_low_threshold+0x6494>)
    804e:	strb.w	r3, [r4, #1615]	; 0x64f
      _b = b;
    8052:	mvn.w	r3, #46	; 0x2e
    8056:	strb.w	r3, [r4, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    805a:	mvn.w	r3, #108	; 0x6c
    805e:	strb.w	r3, [r4, #1617]	; 0x651
      _s = s;
    8062:	mvn.w	r3, #43	; 0x2b
    8066:	strb.w	r3, [r4, #1618]	; 0x652
      _b = b;
    806a:	mov.w	r3, #89	; 0x59
    806e:	strb.w	r3, [r4, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8072:	mvn.w	r3, #25
    8076:	strb.w	r3, [r4, #1621]	; 0x655
      _b = b;
    807a:	mvn.w	r3, #100	; 0x64
    807e:	strb.w	r3, [r4, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8082:	mov.w	r3, #57	; 0x39
    8086:	strb.w	r3, [r4, #1623]	; 0x657
      _s = s;
    808a:	mov.w	r3, #99	; 0x63
    808e:	strb.w	r3, [r4, #1624]	; 0x658
      _b = b;
    8092:	mvn.w	r3, #43	; 0x2b
    8096:	strb.w	r3, [r4, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    809a:	mov.w	r3, #42	; 0x2a
    809e:	strb.w	r3, [r4, #1626]	; 0x65a
    80a2:	mov.w	r3, #33	; 0x21
    80a6:	strb.w	r3, [r4, #1629]	; 0x65d
      _s = s;
    80aa:	mvn.w	r3, #84	; 0x54
    80ae:	strb.w	r3, [r4, #1630]	; 0x65e
      _b = b;
    80b2:	mvn.w	r3, #30
    80b6:	strb.w	r3, [r4, #1631]	; 0x65f
    80ba:	movs	r3, #82	; 0x52
    80bc:	strb.w	r9, [r4, #1628]	; 0x65c
    80c0:	mvn.w	r9, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80c4:	strb.w	r6, [r4, #1641]	; 0x669
      _s = s;
    80c8:	mvn.w	r6, #57	; 0x39
      _b = b;
    80cc:	strb.w	r9, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80d0:	mvn.w	r9, #101	; 0x65
      _s = s;
    80d4:	strb.w	r6, [r4, #1642]	; 0x66a
      _b = b;
    80d8:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80dc:	strb.w	r9, [r4, #1638]	; 0x666
      _s = s;
    80e0:	mvn.w	r9, #2
      _b = b;
    80e4:	strb.w	r6, [r4, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80e8:	mov.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80ec:	strb.w	r5, [r4, #1647]	; 0x66f
    80f0:	mvn.w	r5, #119	; 0x77
      _s = s;
    80f4:	strb.w	r6, [r4, #1645]	; 0x66d
      _b = b;
    80f8:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80fc:	strb.w	r9, [r4, #1639]	; 0x667
      _b = b;
    8100:	mvn.w	r9, #36	; 0x24
    8104:	strb.w	r6, [r4, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8108:	mov.w	r6, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    810c:	strb.w	r5, [r4, #1665]	; 0x681
    8110:	mvn.w	r5, #8
      _s = s;
    8114:	strb.w	r6, [r4, #1648]	; 0x670
      _b = b;
    8118:	mvn.w	r6, #27
    811c:	strb.w	r9, [r4, #1640]	; 0x668
    8120:	strb.w	r6, [r4, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8124:	mvn.w	r6, #114	; 0x72
    8128:	strb.w	r8, [r4, #1644]	; 0x66c
    812c:	strb.w	r6, [r4, #1650]	; 0x672
      _s = s;
    8130:	mov.w	r6, #83	; 0x53
    8134:	strb.w	r6, [r4, #1651]	; 0x673
      _b = b;
    8138:	mvn.w	r6, #25
    813c:	strb.w	r6, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8140:	mvn.w	r6, #43	; 0x2b
    8144:	strb.w	r6, [r4, #1653]	; 0x675
      _s = s;
    8148:	mov.w	r6, #14
    814c:	strb.w	r6, [r4, #1654]	; 0x676
      _b = b;
    8150:	mvn.w	r6, #41	; 0x29
    8154:	strb.w	r6, [r4, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8158:	mov.w	r6, #94	; 0x5e
    815c:	strb.w	r6, [r4, #1657]	; 0x679
      _b = b;
    8160:	mov.w	r6, #46	; 0x2e
    8164:	strb.w	r6, [r4, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8168:	mov.w	r6, #1
    816c:	strb.w	r6, [r4, #1659]	; 0x67b
      _s = s;
    8170:	mov.w	r6, #90	; 0x5a
    8174:	strb.w	r6, [r4, #1660]	; 0x67c
      _b = b;
    8178:	mov.w	r6, #62	; 0x3e
    817c:	strb.w	r6, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8180:	mvn.w	r6, #107	; 0x6b
    8184:	strb.w	r6, [r4, #1662]	; 0x67e
      _s = s;
    8188:	mov.w	r6, #95	; 0x5f
    818c:	strb.w	r6, [r4, #1663]	; 0x67f
      _b = b;
    8190:	mov.w	r6, #88	; 0x58
    8194:	strb.w	r6, [r4, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8198:	mvn.w	r6, #69	; 0x45
    819c:	strb.w	r6, [r4, #1666]	; 0x682
      _b = b;
    81a0:	mvn.w	r6, #53	; 0x35
    81a4:	strb.w	r6, [r4, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81a8:	mvn.w	r6, #111	; 0x6f
    81ac:	strb.w	r6, [r4, #1668]	; 0x684
      _s = s;
    81b0:	mov.w	r6, #95	; 0x5f
    81b4:	strb.w	r6, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81b8:	strb.w	r5, [r4, #1656]	; 0x678
    81bc:	mvn.w	r5, #103	; 0x67
      _s = s;
      _b = b;
    81c0:	strb.w	lr, [r4, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81c4:	strb.w	r5, [r4, #1671]	; 0x687
      _s = s;
    81c8:	mov.w	r5, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81cc:	strb.w	ip, [r4, #1683]	; 0x693
      _s = s;
    81d0:	strb.w	r5, [r4, #1672]	; 0x688
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81d4:	mvn.w	r5, #55	; 0x37
      _s = s;
    81d8:	strb.w	r7, [r4, #1687]	; 0x697
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81dc:	strb.w	r5, [r4, #1674]	; 0x68a
      _s = s;
    81e0:	mov.w	r5, #43	; 0x2b
    81e4:	strb.w	r7, [r4, #1696]	; 0x6a0
    81e8:	strb.w	r5, [r4, #1675]	; 0x68b
      _b = b;
    81ec:	mvn.w	r5, #7
    81f0:	strb.w	r5, [r4, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81f4:	mvn.w	r5, #58	; 0x3a
    81f8:	strb.w	r5, [r4, #1677]	; 0x68d
      _s = s;
    81fc:	mov.w	r5, #92	; 0x5c
    8200:	strb.w	r5, [r4, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8204:	mvn.w	r5, #110	; 0x6e
    8208:	strb.w	r5, [r4, #1680]	; 0x690
      _s = s;
    820c:	mov.w	r5, #107	; 0x6b
    8210:	strb.w	r5, [r4, #1681]	; 0x691
      _b = b;
    8214:	mvn.w	r5, #24
    8218:	strb.w	r5, [r4, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    821c:	mvn.w	r5, #7
    8220:	strb.w	r5, [r4, #1684]	; 0x694
      _b = b;
    8224:	mvn.w	r5, #71	; 0x47
    8228:	strb.w	r5, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    822c:	mvn.w	r5, #109	; 0x6d
    8230:	strb.w	r5, [r4, #1686]	; 0x696
      _s = s;
      _b = b;
    8234:	mvn.w	r5, #77	; 0x4d
    8238:	strb.w	r5, [r4, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    823c:	mvn.w	r5, #6
    8240:	strb.w	r5, [r4, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8244:	mov.w	r5, #60	; 0x3c
    8248:	strb.w	r5, [r4, #1692]	; 0x69c
      _s = s;
    824c:	mov.w	r5, #124	; 0x7c
    8250:	strb.w	r5, [r4, #1693]	; 0x69d
      _b = b;
    8254:	mvn.w	r5, #61	; 0x3d
    8258:	strb.w	r5, [r4, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    825c:	mov.w	r5, #37	; 0x25
    8260:	strb.w	r5, [r4, #1695]	; 0x69f
    8264:	mov.w	r5, #31
    8268:	strb.w	r5, [r4, #1698]	; 0x6a2
      _s = s;
    826c:	mvn.w	r5, #25
    8270:	strb.w	r5, [r4, #1699]	; 0x6a3
      _b = b;
    8274:	mvn.w	r5, #38	; 0x26
    8278:	strb.w	r5, [r4, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    827c:	mvn.w	r5, #51	; 0x33
    8280:	strb.w	r5, [r4, #1702]	; 0x6a6
      _b = b;
    8284:	mvn.w	r5, #120	; 0x78
    8288:	strb.w	r5, [r4, #1691]	; 0x69b
    828c:	mvn.w	r5, #33	; 0x21
    8290:	strb.w	r5, [r4, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8294:	mvn.w	r5, #121	; 0x79
    8298:	strb.w	r5, [r4, #1689]	; 0x699
    829c:	mov.w	r5, #26
    82a0:	strb.w	r5, [r4, #1701]	; 0x6a5
      _s = s;
      _b = b;
    82a4:	mvn.w	r5, #8
    82a8:	strb.w	r5, [r4, #1673]	; 0x689
    82ac:	strb.w	r5, [r4, #1679]	; 0x68f
    82b0:	mvn.w	r5, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82b4:	strb.w	r9, [r4, #1710]	; 0x6ae
      _s = s;
      _b = b;
    82b8:	strb.w	r5, [r4, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82bc:	mov.w	r5, #22
      _s = s;
      _b = b;
    82c0:	strb.w	sl, [r4, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82c4:	strb.w	r5, [r4, #1704]	; 0x6a8
      _s = s;
    82c8:	mvn.w	r5, #71	; 0x47
    82cc:	strb.w	r7, [r4, #1726]	; 0x6be
    82d0:	strb.w	r5, [r4, #1705]	; 0x6a9
      _b = b;
    82d4:	mvn.w	r5, #30
    82d8:	strb.w	sl, [r4, #1727]	; 0x6bf
    82dc:	strb.w	r5, [r4, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82e0:	mov.w	r5, #13
    82e4:	strb.w	r5, [r4, #1707]	; 0x6ab
      _s = s;
    82e8:	mov.w	r5, #76	; 0x4c
    82ec:	strb.w	r5, [r4, #1708]	; 0x6ac
      _b = b;
    82f0:	mvn.w	r5, #27
    82f4:	strb.w	r5, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82f8:	mov.w	r5, #62	; 0x3e
    82fc:	strb.w	r5, [r4, #1711]	; 0x6af
      _b = b;
    8300:	mvn.w	r5, #87	; 0x57
    8304:	strb.w	r5, [r4, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8308:	mov.w	r5, #56	; 0x38
    830c:	strb.w	r5, [r4, #1714]	; 0x6b2
      _b = b;
    8310:	mvn.w	r5, #43	; 0x2b
    8314:	strb.w	r5, [r4, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8318:	mvn.w	r5, #13
    831c:	strb.w	r5, [r4, #1716]	; 0x6b4
      _s = s;
    8320:	mov.w	r5, #24
    8324:	strb.w	r5, [r4, #1717]	; 0x6b5
      _b = b;
    8328:	mvn.w	r5, #40	; 0x28
    832c:	strb.w	r5, [r4, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8330:	mvn.w	r5, #18
    8334:	strb.w	r5, [r4, #1719]	; 0x6b7
      _s = s;
    8338:	mvn.w	r5, #127	; 0x7f
    833c:	strb.w	r5, [r4, #1720]	; 0x6b8
      _b = b;
    8340:	mvn.w	r5, #24
    8344:	strb.w	r5, [r4, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8348:	mvn.w	r5, #15
    834c:	strb.w	r5, [r4, #1722]	; 0x6ba
    8350:	mvn.w	r5, #26
    8354:	strb.w	r5, [r4, #1725]	; 0x6bd
      _s = s;
    8358:	mov.w	r5, #114	; 0x72
    835c:	strb.w	r5, [r4, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8360:	mvn.w	r5, #16
    8364:	strb.w	r5, [r4, #1713]	; 0x6b1
    8368:	bl	8880 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    836c:	ldr	r2, [pc, #152]	; (8408 <_GLOBAL__sub_I_low_threshold+0x6498>)
    836e:	ldr	r1, [pc, #156]	; (840c <_GLOBAL__sub_I_low_threshold+0x649c>)
    8370:	ldr	r0, [pc, #144]	; (8404 <_GLOBAL__sub_I_low_threshold+0x6494>)
    8372:	bl	a474 <__aeabi_atexit>
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8376:	movs	r3, #82	; 0x52
    8378:	movs	r2, #8
    837a:	mov.w	r1, #576	; 0x240
    837e:	ldr	r0, [pc, #144]	; (8410 <_GLOBAL__sub_I_low_threshold+0x64a0>)
    8380:	bl	8880 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8384:	ldr	r2, [pc, #128]	; (8408 <_GLOBAL__sub_I_low_threshold+0x6498>)
    8386:	ldr	r1, [pc, #132]	; (840c <_GLOBAL__sub_I_low_threshold+0x649c>)
    8388:	ldr	r0, [pc, #132]	; (8410 <_GLOBAL__sub_I_low_threshold+0x64a0>)
    838a:	bl	a474 <__aeabi_atexit>
//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    838e:	movs	r3, #82	; 0x52
    8390:	movs	r2, #2
    8392:	movs	r1, #120	; 0x78
    8394:	ldr	r0, [pc, #124]	; (8414 <_GLOBAL__sub_I_low_threshold+0x64a4>)
    8396:	bl	8880 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    839a:	ldr	r2, [pc, #108]	; (8408 <_GLOBAL__sub_I_low_threshold+0x6498>)
    839c:	ldr	r1, [pc, #108]	; (840c <_GLOBAL__sub_I_low_threshold+0x649c>)
    839e:	ldr	r0, [pc, #116]	; (8414 <_GLOBAL__sub_I_low_threshold+0x64a4>)
    83a0:	bl	a474 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    83a4:	movs	r3, #82	; 0x52
    83a6:	movs	r2, #14
    83a8:	movs	r1, #120	; 0x78
    83aa:	ldr	r0, [pc, #108]	; (8418 <_GLOBAL__sub_I_low_threshold+0x64a8>)
    83ac:	bl	8880 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    83b0:	ldr	r2, [pc, #84]	; (8408 <_GLOBAL__sub_I_low_threshold+0x6498>)
    83b2:	ldr	r1, [pc, #88]	; (840c <_GLOBAL__sub_I_low_threshold+0x649c>)
    83b4:	ldr	r0, [pc, #96]	; (8418 <_GLOBAL__sub_I_low_threshold+0x64a8>)
    83b6:	bl	a474 <__aeabi_atexit>
    83ba:	ldr	r3, [pc, #96]	; (841c <_GLOBAL__sub_I_low_threshold+0x64ac>)

	public:
		

Color(){
	RGB_updated = false;
    83bc:	movs	r2, #0
    83be:	add.w	r1, r3, #440	; 0x1b8
    83c2:	strb.w	r2, [r3, #-20]
    83c6:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    83c8:	strb.w	r2, [r3, #-63]
		

		

Beam() {
	active = false;
    83cc:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    83d0:	cmp	r3, r1
    83d2:	bne.n	83c2 <_GLOBAL__sub_I_low_threshold+0x6452>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    83d4:	ldr	r3, [pc, #72]	; (8420 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    83d6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    83d8:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    83da:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    83dc:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    83de:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    83e0:	ldr	r4, [pc, #60]	; (8420 <_GLOBAL__sub_I_low_threshold+0x64b0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    83e2:	cmp	r3, r1
    83e4:	it	eq
    83e6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    83e8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    83ea:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    83ec:	ite	eq
    83ee:	moveq	r6, #1
    83f0:	movne	r6, #0
    83f2:	cmp	r6, #0
    83f4:	beq.n	83dc <_GLOBAL__sub_I_low_threshold+0x646c>
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
    83f6:	lsrs	r1, r3, #5
Automaton grow_automaton_B; //= Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
Automaton sat_automaton_B; //= Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);


//-----------------------------------------------------------------------------------------
Screen screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A);
    83f8:	ldr	r2, [pc, #8]	; (8404 <_GLOBAL__sub_I_low_threshold+0x6494>)
    83fa:	ldr	r3, [pc, #40]	; (8424 <_GLOBAL__sub_I_low_threshold+0x64b4>)
    83fc:	orr.w	r1, r1, r0, lsl #27
    8400:	b.n	8428 <_GLOBAL__sub_I_low_threshold+0x64b8>
    8402:	nop
    8404:	.word	0x2000396c
    8408:	.word	0x20000764
    840c:	.word	0x00008599
    8410:	.word	0x20005480
    8414:	.word	0x20006d78
    8418:	.word	0x20006d8c
    841c:	.word	0x200040cc
    8420:	.word	0x400d4000
    8424:	.word	0x20005494
    8428:	ldr	r5, [pc, #204]	; (84f8 <_GLOBAL__sub_I_low_threshold+0x6588>)
    842a:	str	r2, [sp, #4]
    842c:	vmov	s15, r1
    8430:	str	r3, [sp, #0]
    8432:	ldr	r2, [pc, #200]	; (84fc <_GLOBAL__sub_I_low_threshold+0x658c>)
    8434:	vcvt.f64.u32	d7, s15
    8438:	ldr	r3, [pc, #196]	; (8500 <_GLOBAL__sub_I_low_threshold+0x6590>)
    843a:	ldr	r1, [pc, #200]	; (8504 <_GLOBAL__sub_I_low_threshold+0x6594>)
    843c:	ldr	r0, [pc, #200]	; (8508 <_GLOBAL__sub_I_low_threshold+0x6598>)
    843e:	vldr	d5, [pc, #176]	; 84f0 <_GLOBAL__sub_I_low_threshold+0x6580>
    8442:	vdiv.f64	d6, d7, d5
    8446:	vcvt.u32.f64	s12, d6
    844a:	vstr	s12, [r5]
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    844e:	mov	r5, r4
    8450:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>
Screen screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B);
    8454:	ldr	r2, [pc, #180]	; (850c <_GLOBAL__sub_I_low_threshold+0x659c>)
    8456:	ldr	r3, [pc, #184]	; (8510 <_GLOBAL__sub_I_low_threshold+0x65a0>)
    8458:	str	r2, [sp, #4]
    845a:	str	r3, [sp, #0]
    845c:	ldr	r1, [pc, #180]	; (8514 <_GLOBAL__sub_I_low_threshold+0x65a4>)
    845e:	ldr	r3, [pc, #184]	; (8518 <_GLOBAL__sub_I_low_threshold+0x65a8>)
    8460:	ldr	r2, [pc, #184]	; (851c <_GLOBAL__sub_I_low_threshold+0x65ac>)
    8462:	ldr	r0, [pc, #188]	; (8520 <_GLOBAL__sub_I_low_threshold+0x65b0>)
    8464:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    8468:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    846a:	ldr	r1, [r4, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    846c:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    846e:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8470:	ldr	r6, [pc, #176]	; (8524 <_GLOBAL__sub_I_low_threshold+0x65b4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    8472:	cmp	r3, r1
    8474:	it	eq
    8476:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8478:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    847a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    847c:	ite	eq
    847e:	moveq	r4, #1
    8480:	movne	r4, #0
    8482:	cmp	r4, #0
    8484:	beq.n	846c <_GLOBAL__sub_I_low_threshold+0x64fc>
    8486:	lsrs	r1, r3, #5
    8488:	ldr	r3, [pc, #156]	; (8528 <_GLOBAL__sub_I_low_threshold+0x65b8>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    848a:	mov	r4, r6
    848c:	orr.w	r1, r1, r2, lsl #27
    8490:	vmov	s15, r1
    8494:	vldr	d5, [pc, #88]	; 84f0 <_GLOBAL__sub_I_low_threshold+0x6580>
    8498:	vcvt.f64.u32	d7, s15
    849c:	vdiv.f64	d6, d7, d5
    84a0:	vcvt.u32.f64	s12, d6
    84a4:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    84a8:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    84aa:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    84ac:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    84ae:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    84b0:	cmp	r3, r1
    84b2:	it	eq
    84b4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    84b6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    84b8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    84ba:	ite	eq
    84bc:	moveq	r5, #1
    84be:	movne	r5, #0
    84c0:	cmp	r5, #0
    84c2:	beq.n	84ac <_GLOBAL__sub_I_low_threshold+0x653c>
    84c4:	lsrs	r1, r3, #5
    84c6:	ldr	r3, [pc, #100]	; (852c <_GLOBAL__sub_I_low_threshold+0x65bc>)
    84c8:	orr.w	r1, r1, r2, lsl #27
    84cc:	vmov	s15, r1
    84d0:	vldr	d5, [pc, #28]	; 84f0 <_GLOBAL__sub_I_low_threshold+0x6580>
    84d4:	vcvt.f64.u32	d7, s15
    84d8:	vdiv.f64	d6, d7, d5
    84dc:	vcvt.u32.f64	s12, d6
    84e0:	vstr	s12, [r3]

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    84e4:	add	sp, #12
    84e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84ea:	nop
    84ec:	nop.w
    84f0:	.word	0xd2f1a9fc
    84f4:	.word	0x3ff0624d
    84f8:	.word	0x20001520
    84fc:	.word	0x200091e8
    8500:	.word	0x20006da0
    8504:	.word	0x20001524
    8508:	.word	0x20004040
    850c:	.word	0x20005480
    8510:	.word	0x2000425c
    8514:	.word	0x20002748
    8518:	.word	0x20007fc4
    851c:	.word	0x2000a40c
    8520:	.word	0x20004070
    8524:	.word	0x400d4000
    8528:	.word	0x20004258
    852c:	.word	0x2000151c

00008530 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    8530:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    8532:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    8534:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    8536:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    8538:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    853a:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    853c:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    8540:	cbz	r3, 855a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    8542:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    8546:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    854a:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    854e:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    8552:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    8556:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    855a:	ldrb	r7, [r0, #15]
    855c:	ldrb	r4, [r0, #12]
    855e:	cmp	r4, r7
    8560:	beq.n	858c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    8562:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    8564:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    8566:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    856a:	add	r7, r1
    856c:	cbnz	r3, 8582 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    856e:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    8570:	strb	r3, [r7, #0]
    8572:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    8574:	strb	r6, [r1, r7]
    p[gOffset] = g;
    8576:	ldrb	r3, [r0, #13]
    8578:	strb	r5, [r1, r3]
    p[bOffset] = b;
    857a:	ldrb	r3, [r0, #14]
    857c:	strb.w	lr, [r1, r3]
    8580:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    8582:	mul.w	r3, r3, r2
    8586:	ubfx	r3, r3, #8, #8
    858a:	b.n	8570 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    858c:	add.w	r1, r1, r1, lsl #1
    8590:	ldr	r3, [r0, #8]
    8592:	add	r1, r3
    8594:	b.n	8574 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    8596:	nop

00008598 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    8598:	push	{r4, lr}
    859a:	mov	r4, r0
  if(pixels)   free(pixels);
    859c:	ldr	r0, [r0, #8]
    859e:	cbz	r0, 85a4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    85a0:	bl	a568 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    85a4:	ldrsb.w	r0, [r4, #6]
    85a8:	cmp	r0, #0
    85aa:	blt.n	85b4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    85ac:	uxtb	r0, r0
    85ae:	movs	r1, #0
    85b0:	bl	9ac4 <pinMode>
}
    85b4:	mov	r0, r4
    85b6:	pop	{r4, pc}

000085b8 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    85b8:	push	{r4, lr}
    85ba:	mov	r4, r0
  if(pin >= 0) {
    85bc:	ldrsb.w	r0, [r0, #6]
    85c0:	cmp	r0, #0
    85c2:	blt.n	85d4 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    85c4:	uxtb	r0, r0
    85c6:	movs	r1, #1
    85c8:	bl	9ac4 <pinMode>
    digitalWrite(pin, LOW);
    85cc:	movs	r1, #0
    85ce:	ldrb	r0, [r4, #6]
    85d0:	bl	9ab8 <digitalWrite>
  }
  begun = true;
    85d4:	movs	r3, #1
    85d6:	strb	r3, [r4, #1]
    85d8:	pop	{r4, pc}
    85da:	nop

000085dc <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    85dc:	push	{r3, r4, r5, lr}
    85de:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    85e0:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    85e2:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    85e4:	cbz	r0, 85ea <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    85e6:	bl	a568 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    85ea:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    85ec:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    85ee:	ldrb	r0, [r4, #12]
    85f0:	cmp	r3, r0
    85f2:	ite	eq
    85f4:	moveq	r0, #3
    85f6:	movne	r0, #4
    85f8:	smulbb	r0, r0, r5
    85fc:	uxth	r0, r0
    85fe:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    8600:	bl	a480 <calloc>
    8604:	str	r0, [r4, #8]
    8606:	cbz	r0, 860c <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    8608:	strh	r5, [r4, #2]
    860a:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    860c:	strh	r0, [r4, #4]
    860e:	strh	r0, [r4, #2]
    8610:	pop	{r3, r4, r5, pc}
    8612:	nop

00008614 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    8614:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8616:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    8618:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    861c:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8620:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    8622:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    8626:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    862a:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    862e:	ite	hi
    8630:	movhi	r6, #0
    8632:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    8634:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8638:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    863c:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    863e:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    8640:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8642:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    8644:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8646:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    8648:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    864a:	cbz	r5, 8662 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    864c:	subs	r1, r2, r1
    864e:	clz	r1, r1
    8652:	lsrs	r1, r1, #5
    8654:	cmp	r1, r4
    8656:	beq.n	8662 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    8658:	ldrh	r1, [r0, #2]
  }
}
    865a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    865e:	b.w	85dc <Adafruit_NeoPixel::updateLength(unsigned short)>
    8662:	pop	{r4, r5, r6, r7, pc}

00008664 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    8664:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    8668:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    866a:	sub	sp, #20
    866c:	str	r0, [sp, #12]

  if(!pixels) return;
    866e:	cmp	r3, #0
    8670:	beq.n	8756 <Adafruit_NeoPixel::show()+0xf2>
    8672:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    8674:	bl	99e4 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    8678:	ldr	r3, [r4, #16]
    867a:	subs	r0, r0, r3
    867c:	cmp.w	r0, #300	; 0x12c
    8680:	bcc.n	8674 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    8682:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8684:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8686:	ldr	r0, [pc, #408]	; (8820 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8688:	ldrsb.w	r3, [r6, #6]
    868c:	ldr	r4, [pc, #404]	; (8824 <Adafruit_NeoPixel::show()+0x1c0>)
    868e:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8690:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8692:	ldr	r1, [pc, #404]	; (8828 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8694:	ldr.w	ip, [r4, r3]
    8698:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    869a:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    869c:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    86a0:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    86a4:	mov	r5, r6
    86a6:	mov	r6, r3
    86a8:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    86aa:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    86ac:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    86ae:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    86b0:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    86b2:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    86b4:	ldr	r4, [pc, #372]	; (882c <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    86b6:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    86ba:	str	r2, [sp, #8]
    86bc:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    86be:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    86c0:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    86c2:	ldr	r1, [pc, #364]	; (8830 <Adafruit_NeoPixel::show()+0x1cc>)
    86c4:	ldr	r0, [r4, #0]
    86c6:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    86c8:	cmp	r2, #0
    86ca:	beq.n	875c <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    86cc:	ldr	r5, [pc, #356]	; (8834 <Adafruit_NeoPixel::show()+0x1d0>)
    86ce:	lsrs	r3, r3, #8
    while(p < end) {
    86d0:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    86d2:	umull	r2, r3, r5, r3
    86d6:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    86da:	bcs.n	8736 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    86dc:	ldr	r7, [pc, #344]	; (8838 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    86de:	ldr	r6, [pc, #348]	; (883c <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    86e0:	ldr	r3, [sp, #4]
    86e2:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    86e6:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    86ea:	ldrb.w	sl, [r3], #1
    86ee:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    86f0:	ldr	r2, [r4, #0]
    86f2:	ldr	r3, [r1, #0]
    86f4:	subs	r2, r2, r0
    86f6:	lsrs	r3, r3, #8
    86f8:	umull	fp, r3, r5, r3
    86fc:	cmp.w	r2, r3, lsr #4
    8700:	bcc.n	86f0 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    8702:	ldr	r3, [pc, #296]	; (882c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    8704:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    8708:	ldr	r0, [r3, #0]
        *set = msk;
    870a:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    870e:	beq.n	880e <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    8710:	ldr	r3, [r4, #0]
    8712:	ldr	r2, [r1, #0]
    8714:	subs	r3, r3, r0
    8716:	umull	fp, r2, r7, r2
    871a:	cmp.w	r3, r2, lsr #19
    871e:	bcc.n	8710 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8720:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    8724:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8728:	mov.w	lr, lr, lsr #1
    872c:	bne.n	86f0 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    872e:	ldr	r3, [sp, #8]
    8730:	ldr	r2, [sp, #4]
    8732:	cmp	r3, r2
    8734:	bne.n	86e0 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    8736:	ldr	r5, [pc, #244]	; (882c <Adafruit_NeoPixel::show()+0x1c8>)
    8738:	ldr	r4, [pc, #248]	; (8834 <Adafruit_NeoPixel::show()+0x1d0>)
    873a:	ldr	r2, [r5, #0]
    873c:	ldr	r3, [r1, #0]
    873e:	subs	r2, r2, r0
    8740:	lsrs	r3, r3, #8
    8742:	umull	r6, r3, r4, r3
    8746:	cmp.w	r2, r3, lsr #4
    874a:	bcc.n	873a <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    874c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    874e:	bl	99e4 <micros>
    8752:	ldr	r3, [sp, #12]
    8754:	str	r0, [r3, #16]
}
    8756:	add	sp, #20
    8758:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    875c:	ldr	r6, [pc, #212]	; (8834 <Adafruit_NeoPixel::show()+0x1d0>)
    875e:	lsrs	r3, r3, #7
    8760:	umull	r2, r3, r6, r3
    while(p < end) {
    8764:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    8766:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    876a:	ldr	r3, [sp, #4]
    876c:	cmp	r3, r2
    876e:	bcs.n	87da <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    8770:	ldr.w	lr, [pc, #204]	; 8840 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    8774:	ldr	r7, [pc, #196]	; (883c <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    8776:	ldr	r3, [sp, #4]
    8778:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    877c:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    8780:	ldrb.w	fp, [r3], #1
    8784:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    8786:	ldr	r2, [r4, #0]
    8788:	ldr	r3, [r1, #0]
    878a:	subs	r2, r2, r0
    878c:	lsrs	r3, r3, #7
    878e:	umull	r5, r3, r6, r3
    8792:	cmp.w	r2, r3, lsr #4
    8796:	bcc.n	8786 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    8798:	ldr	r3, [pc, #144]	; (882c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    879a:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    879e:	ldr	r0, [r3, #0]
        *set = msk;
    87a0:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    87a4:	beq.n	87fc <Adafruit_NeoPixel::show()+0x198>
    87a6:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    87aa:	ldr	r2, [r4, #0]
    87ac:	ldr	r5, [r1, #0]
    87ae:	subs	r2, r2, r0
    87b0:	umull	ip, r3, lr, r5
    87b4:	subs	r5, r5, r3
    87b6:	add.w	r3, r3, r5, lsr #1
    87ba:	cmp.w	r2, r3, lsr #19
    87be:	bcc.n	87aa <Adafruit_NeoPixel::show()+0x146>
    87c0:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    87c4:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    87c8:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    87cc:	mov.w	r9, r9, lsr #1
    87d0:	bne.n	8786 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    87d2:	ldr	r3, [sp, #8]
    87d4:	ldr	r2, [sp, #4]
    87d6:	cmp	r3, r2
    87d8:	bne.n	8776 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    87da:	ldr	r5, [pc, #80]	; (882c <Adafruit_NeoPixel::show()+0x1c8>)
    87dc:	ldr	r4, [pc, #84]	; (8834 <Adafruit_NeoPixel::show()+0x1d0>)
    87de:	ldr	r2, [r5, #0]
    87e0:	ldr	r3, [r1, #0]
    87e2:	subs	r2, r2, r0
    87e4:	lsrs	r3, r3, #7
    87e6:	umull	r6, r3, r4, r3
    87ea:	cmp.w	r2, r3, lsr #4
    87ee:	bcc.n	87de <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    87f0:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    87f2:	bl	99e4 <micros>
    87f6:	ldr	r3, [sp, #12]
    87f8:	str	r0, [r3, #16]
    87fa:	b.n	8756 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    87fc:	ldr	r3, [r4, #0]
    87fe:	ldr	r2, [r1, #0]
    8800:	subs	r3, r3, r0
    8802:	umull	r5, r2, r7, r2
    8806:	cmp.w	r3, r2, lsr #19
    880a:	bcc.n	87fc <Adafruit_NeoPixel::show()+0x198>
    880c:	b.n	87c4 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    880e:	ldr	r3, [r4, #0]
    8810:	ldr	r2, [r1, #0]
    8812:	subs	r3, r3, r0
    8814:	umull	fp, r2, r6, r2
    8818:	cmp.w	r3, r2, lsr #20
    881c:	bcc.n	880e <Adafruit_NeoPixel::show()+0x1aa>
    881e:	b.n	8720 <Adafruit_NeoPixel::show()+0xbc>
    8820:	.word	0xe000edfc
    8824:	.word	0x20000448
    8828:	.word	0xe0001000
    882c:	.word	0xe0001004
    8830:	.word	0x20000bec
    8834:	.word	0x014f8b59
    8838:	.word	0x6b5fca6b
    883c:	.word	0x431bde83
    8840:	.word	0x421f67b3

00008844 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    8844:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    8846:	ldrb	r3, [r0, #1]
    8848:	cbz	r3, 8866 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    884a:	mov	r4, r0
    884c:	ldrsb.w	r0, [r0, #6]
    8850:	mov	r5, r1
    8852:	cmp	r0, #0
    8854:	blt.n	886a <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    8856:	uxtb	r0, r0
    8858:	movs	r1, #0
    885a:	bl	9ac4 <pinMode>
    885e:	ldrb	r3, [r4, #1]
    pin = p;
    8860:	strb	r5, [r4, #6]
    if(begun) {
    8862:	cbnz	r3, 886c <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    8864:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    8866:	strb	r1, [r0, #6]
    8868:	pop	{r3, r4, r5, pc}
    886a:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    886c:	mov	r0, r5
    886e:	movs	r1, #1
    8870:	bl	9ac4 <pinMode>
      digitalWrite(p, LOW);
    8874:	mov	r0, r5
    8876:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    8878:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    887c:	b.w	9ab8 <digitalWrite>

00008880 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    8880:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    8882:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    8884:	mov	r4, r0
    8886:	mov	r7, r1
    8888:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    888a:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    888c:	strb	r5, [r0, #1]
    888e:	strb	r5, [r0, #7]
    8890:	str	r5, [r0, #8]
    8892:	str	r5, [r0, #16]
{
  updateType(t);
    8894:	bl	8614 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    8898:	mov	r1, r7
    889a:	mov	r0, r4
    889c:	bl	85dc <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    88a0:	mov	r0, r4
    88a2:	mov	r1, r6
    88a4:	bl	8844 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    88a8:	mov	r0, r4
    88aa:	pop	{r3, r4, r5, r6, r7, pc}

000088ac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    88ac:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    88ae:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    88b0:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    88b4:	cmp	r4, r1
    88b6:	bls.n	88ec <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    88b8:	ldrb	r4, [r0, #7]
    88ba:	cbz	r4, 88ce <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    88bc:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    88c0:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    88c4:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    88c8:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    88ca:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    88cc:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    88ce:	ldrb	r5, [r0, #15]
    88d0:	ldrb	r4, [r0, #12]
    88d2:	cmp	r4, r5
    88d4:	beq.n	88f0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    88d6:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    88d8:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    88da:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    88de:	strb	r7, [r1, r5]
    88e0:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    88e2:	strb	r2, [r1, r5]
    p[gOffset] = g;
    88e4:	ldrb	r2, [r0, #13]
    88e6:	strb	r3, [r1, r2]
    p[bOffset] = b;
    88e8:	ldrb	r3, [r0, #14]
    88ea:	strb	r6, [r1, r3]
  }
}
    88ec:	pop	{r4, r5, r6, r7}
    88ee:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    88f0:	add.w	r1, r1, r1, lsl #1
    88f4:	ldr	r4, [r0, #8]
    88f6:	add	r1, r4
    88f8:	b.n	88e2 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    88fa:	nop

000088fc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    88fc:	ldrh	r3, [r0, #2]
    88fe:	cmp	r3, r1
    8900:	bls.n	8906 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    8902:	b.w	8530 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    8906:	bx	lr

00008908 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    8908:	ldrh	r3, [r0, #2]
    890a:	cmp	r3, r1
    890c:	bls.n	893e <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    890e:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    8910:	ldrb	r2, [r0, #15]
    8912:	ldrb	r3, [r0, #12]
    8914:	cmp	r2, r3
    8916:	beq.n	8942 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    8918:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    891a:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    891c:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8920:	ldrb	r3, [r1, r3]
    8922:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    8924:	cbnz	r4, 8974 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    8926:	lsls	r3, r3, #16
    8928:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    892a:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    892c:	orr.w	r0, r3, r5, lsl #24
    8930:	ldrb	r3, [r1, r4]
    8932:	ldrb	r2, [r1, r2]
    8934:	orrs	r3, r0
    8936:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    893a:	pop	{r4, r5}
    893c:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    893e:	movs	r0, #0
    8940:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    8942:	add.w	r1, r1, r1, lsl #1
    8946:	ldr	r3, [r0, #8]
    if(brightness) {
    8948:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    894a:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    894c:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    894e:	cbz	r4, 89a4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    8950:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8952:	lsls	r2, r2, #8
    8954:	ldrb	r3, [r0, #14]
    8956:	ldrb	r0, [r1, r5]
    8958:	ldrb	r3, [r1, r3]
    895a:	lsls	r0, r0, #8
    895c:	lsls	r3, r3, #8
    895e:	udiv	r2, r2, r4
    8962:	udiv	r0, r0, r4
    8966:	lsls	r2, r2, #16
    8968:	udiv	r3, r3, r4
    896c:	orr.w	r0, r2, r0, lsl #8
    8970:	orrs	r0, r3
    8972:	b.n	893a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8974:	lsls	r3, r3, #8
    8976:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    8978:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    897a:	lsls	r5, r5, #8
    897c:	ldrb	r2, [r1, r2]
    897e:	ldrb	r0, [r1, r0]
    8980:	lsls	r2, r2, #8
    8982:	lsls	r0, r0, #8
    8984:	udiv	r1, r3, r4
    8988:	udiv	r5, r5, r4
    898c:	udiv	r2, r2, r4
    8990:	lsls	r3, r1, #16
    8992:	udiv	r0, r0, r4
    8996:	orr.w	r3, r3, r5, lsl #24
    899a:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    899c:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    899e:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    89a2:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    89a4:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    89a6:	lsls	r2, r2, #16
    89a8:	ldrb	r3, [r0, #14]
    89aa:	ldrb	r0, [r1, r4]
    89ac:	ldrb	r3, [r1, r3]
    89ae:	orr.w	r0, r2, r0, lsl #8
    89b2:	orrs	r0, r3
    89b4:	b.n	893a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    89b6:	nop

000089b8 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    89b8:	ldrh	r0, [r0, #2]
    89ba:	bx	lr

000089bc <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    89bc:	ldrh	r2, [r0, #4]
    89be:	movs	r1, #0
    89c0:	ldr	r0, [r0, #8]
    89c2:	b.w	aae8 <memset>
    89c6:	nop

000089c8 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    89c8:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    89ca:	movs	r1, #0
    89cc:	mov	r3, r0
    89ce:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    89d2:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    89d4:	movs	r4, #0
    89d6:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    89d8:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    89dc:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    89de:	bfc	r2, #0, #4
    89e2:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    89e4:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    89e8:	cmp	r3, r5
    89ea:	bne.n	89d2 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    89ec:	mov	r2, r4
    89ee:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    89f0:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    89f2:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    89f6:	add.w	r3, r0, r2, lsl #4
    89fa:	adds	r3, #8
    89fc:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    89fe:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    8a02:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    8a06:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    8a0a:	beq.n	8a14 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    8a0c:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    8a0e:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    8a10:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    8a12:	str	r6, [r1, #8]
    8a14:	adds	r2, #1
    8a16:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    8a18:	cmp	r2, #12
    8a1a:	bne.n	89f6 <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    8a1c:	pop	{r4, r5, r6}
    8a1e:	bx	lr

00008a20 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    8a20:	ldr	r0, [pc, #4]	; (8a28 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    8a22:	b.w	89c8 <TimeAlarmsClass::TimeAlarmsClass()>
    8a26:	nop
    8a28:	.word	0x2000b630

00008a2c <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    8a2c:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    8a2e:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8a30:	ubfx	r3, r3, #16, #15
    8a34:	ldr	r1, [pc, #20]	; (8a4c <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    8a36:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8a38:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    8a3c:	ldr	r4, [pc, #16]	; (8a50 <rx_event+0x24>)
    8a3e:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8a40:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    8a44:	strh.w	r5, [r4, r2, lsl #1]
}
    8a48:	pop	{r4, r5}
    8a4a:	bx	lr
    8a4c:	.word	0x2000bec0
    8a50:	.word	0x2000beb8

00008a54 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8a54:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    8a56:	ldr	r3, [pc, #84]	; (8aac <usb_serial_flush_callback+0x58>)
    8a58:	ldrb	r3, [r3, #0]
    8a5a:	cbnz	r3, 8a6c <usb_serial_flush_callback+0x18>
    8a5c:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    8a60:	ldr	r3, [pc, #76]	; (8ab0 <usb_serial_flush_callback+0x5c>)
    8a62:	ldrb	r3, [r3, #0]
    8a64:	cbz	r3, 8a6c <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    8a66:	ldr	r5, [pc, #76]	; (8ab4 <usb_serial_flush_callback+0x60>)
    8a68:	ldrh	r2, [r5, #0]
    8a6a:	cbnz	r2, 8a6e <usb_serial_flush_callback+0x1a>
    8a6c:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a6e:	ldr	r7, [pc, #72]	; (8ab8 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8a70:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a72:	ldr	r6, [pc, #72]	; (8abc <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8a74:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a78:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8a7a:	ldr	r0, [pc, #68]	; (8ac0 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8a7c:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8a80:	add.w	r1, r0, r1, lsl #8
    8a84:	mov	r0, r6
    8a86:	bl	9854 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8a8a:	mov	r1, r6
    8a8c:	movs	r0, #4
    8a8e:	bl	9884 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8a92:	ldrb	r3, [r7, #0]
    8a94:	adds	r3, #1
    8a96:	uxtb	r3, r3
    8a98:	cmp	r3, #6
    8a9a:	it	ls
    8a9c:	strbls	r3, [r7, #0]
	tx_available = 0;
    8a9e:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    8aa2:	it	hi
    8aa4:	strbhi	r4, [r7, #0]
	tx_available = 0;
    8aa6:	strh	r3, [r5, #0]
    8aa8:	pop	{r3, r4, r5, r6, r7, pc}
    8aaa:	nop
    8aac:	.word	0x2000bdf4
    8ab0:	.word	0x2000c070
    8ab4:	.word	0x2000bf40
    8ab8:	.word	0x2000bdf5
    8abc:	.word	0x2000bf60
    8ac0:	.word	0x2000b6f4

00008ac4 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    8ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ac8:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8aca:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    8acc:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8ace:	cmp	r1, #0
    8ad0:	beq.w	8bfc <usb_serial_write.part.1+0x138>
    8ad4:	movs	r3, #0
    8ad6:	ldr.w	r8, [pc, #320]	; 8c18 <usb_serial_write.part.1+0x154>
    8ada:	ldr.w	r9, [pc, #304]	; 8c0c <usb_serial_write.part.1+0x148>
    8ade:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    8ae0:	ldr	r6, [pc, #284]	; (8c00 <usb_serial_write.part.1+0x13c>)
    8ae2:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8ae6:	ldr.w	sl, [pc, #308]	; 8c1c <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    8aea:	ldr	r2, [pc, #280]	; (8c04 <usb_serial_write.part.1+0x140>)
    8aec:	ldrb	r4, [r2, #0]
    8aee:	ldr	r2, [pc, #280]	; (8c08 <usb_serial_write.part.1+0x144>)
    8af0:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8af4:	cmp	r3, #0
    8af6:	bne.n	8bb4 <usb_serial_write.part.1+0xf0>
    8af8:	mov	r5, r3
    8afa:	mov	r4, r3
    8afc:	b.n	8b28 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8afe:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    8b02:	cbnz	r4, 8b06 <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    8b04:	ldr	r5, [r6, #0]
    8b06:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8b08:	cmp	r3, #0
    8b0a:	bne.n	8ba8 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8b0c:	ldr	r3, [r6, #0]
    8b0e:	subs	r3, r3, r5
    8b10:	cmp	r3, #120	; 0x78
    8b12:	bhi.n	8bf0 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8b14:	ldrb.w	r3, [sl]
    8b18:	cmp	r3, #0
    8b1a:	beq.n	8ba8 <usb_serial_write.part.1+0xe4>
			yield();
    8b1c:	bl	9b9c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8b20:	ldrh.w	r3, [r8]
    8b24:	cmp	r3, #0
    8b26:	bne.n	8bb0 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    8b28:	mov	r0, r7
    8b2a:	bl	98d0 <usb_transfer_status>
			if (!(status & 0x80)) {
    8b2e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8b32:	ldr	r2, [pc, #216]	; (8c0c <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    8b34:	bne.n	8afe <usb_serial_write.part.1+0x3a>
    8b36:	ldr	r2, [pc, #204]	; (8c04 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8b38:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    8b3c:	strb.w	r0, [r9]
    8b40:	ldrb	r4, [r2, #0]
    8b42:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8b44:	ldr	r1, [pc, #200]	; (8c10 <usb_serial_write.part.1+0x14c>)
    8b46:	lsls	r4, r4, #8
		if (size >= tx_available) {
    8b48:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8b4a:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8b4e:	add	r0, r4
    8b50:	add	r0, r1
		if (size >= tx_available) {
    8b52:	bcc.n	8bc6 <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    8b54:	ldr	r1, [sp, #8]
    8b56:	bl	9f3c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    8b5a:	ldr	r3, [pc, #180]	; (8c10 <usb_serial_write.part.1+0x14c>)
    8b5c:	mov.w	r2, #256	; 0x100
    8b60:	mov	r0, r7
    8b62:	adds	r1, r3, r4
    8b64:	movs	r3, #0
    8b66:	bl	9854 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8b6a:	mov	r1, r7
    8b6c:	movs	r0, #4
    8b6e:	bl	9884 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8b72:	ldr	r3, [pc, #144]	; (8c04 <usb_serial_write.part.1+0x140>)
    8b74:	ldr	r2, [pc, #140]	; (8c04 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    8b76:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8b78:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8b7a:	ldr	r0, [pc, #152]	; (8c14 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8b7c:	adds	r3, #1
    8b7e:	uxtb	r3, r3
    8b80:	cmp	r3, #6
    8b82:	it	hi
    8b84:	movhi	r3, #0
    8b86:	strb	r3, [r2, #0]
			size -= tx_available;
    8b88:	ldrh.w	r2, [r8]
			sent += tx_available;
    8b8c:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8b8e:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    8b92:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    8b96:	add	r3, r2
    8b98:	str	r3, [sp, #4]
			data += tx_available;
    8b9a:	ldr	r3, [sp, #8]
    8b9c:	add	r3, r2
    8b9e:	str	r3, [sp, #8]
    8ba0:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8ba2:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8ba6:	bne.n	8aea <usb_serial_write.part.1+0x26>
    8ba8:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8baa:	add	sp, #20
    8bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bb0:	ldr	r2, [pc, #80]	; (8c04 <usb_serial_write.part.1+0x140>)
    8bb2:	ldrb	r4, [r2, #0]
    8bb4:	mov	r2, r3
    8bb6:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8bba:	lsls	r4, r4, #8
    8bbc:	ldr	r1, [pc, #80]	; (8c10 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    8bbe:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8bc0:	add	r0, r4
    8bc2:	add	r0, r1
		if (size >= tx_available) {
    8bc4:	bcs.n	8b54 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    8bc6:	ldr	r1, [sp, #8]
    8bc8:	mov	r2, fp
    8bca:	str	r3, [sp, #12]
    8bcc:	bl	9f3c <memcpy>
			tx_available -= size;
    8bd0:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8bd2:	mov.w	r1, #3221225472	; 0xc0000000
    8bd6:	ldr	r2, [pc, #60]	; (8c14 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    8bd8:	rsb	r3, fp, r3
    8bdc:	strh.w	r3, [r8]
    8be0:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8be2:	str.w	r1, [r2, #132]	; 0x84
    8be6:	add	r3, fp
    8be8:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8bea:	add	sp, #20
    8bec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    8bf0:	movs	r3, #1
				return sent;
    8bf2:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    8bf4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8bf6:	add	sp, #20
    8bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8bfc:	mov	r0, r1
    8bfe:	b.n	8baa <usb_serial_write.part.1+0xe6>
    8c00:	.word	0x2000c078
    8c04:	.word	0x2000bdf5
    8c08:	.word	0x2000bf60
    8c0c:	.word	0x2000c040
    8c10:	.word	0x2000b6f4
    8c14:	.word	0x402e0000
    8c18:	.word	0x2000bf40
    8c1c:	.word	0x2000c070

00008c20 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    8c20:	bx	lr
    8c22:	nop

00008c24 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8c24:	movs	r1, #0
    8c26:	movs	r2, #224	; 0xe0
    8c28:	ldr	r0, [pc, #128]	; (8cac <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    8c2a:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8c2c:	mov	r4, r1
    8c2e:	ldr	r6, [pc, #128]	; (8cb0 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8c30:	ldr	r5, [pc, #128]	; (8cb4 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8c32:	bl	aae8 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8c36:	ldr	r7, [pc, #128]	; (8cb8 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8c38:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8c3a:	ldr	r3, [pc, #128]	; (8cbc <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8c3c:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8c3e:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8c40:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8c42:	ldr	r6, [pc, #124]	; (8cc0 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8c44:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8c46:	bl	aae8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    8c4a:	mov	r3, r4
    8c4c:	mov	r2, r4
    8c4e:	movs	r1, #16
    8c50:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8c52:	str	r4, [r7, #0]
    8c54:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    8c56:	str	r4, [r6, #0]
    8c58:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    8c5a:	bl	97ec <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    8c5e:	mov	r2, r4
    8c60:	ldr	r3, [pc, #96]	; (8cc4 <usb_serial_configure+0xa0>)
    8c62:	movs	r1, #64	; 0x40
    8c64:	movs	r0, #3
    8c66:	bl	9788 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    8c6a:	mov	r3, r4
    8c6c:	mov	r2, r4
    8c6e:	movs	r1, #64	; 0x40
    8c70:	movs	r0, #4
    8c72:	bl	97ec <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    8c76:	mov	r3, r4
    8c78:	movs	r2, #64	; 0x40
    8c7a:	mov	r0, r5
    8c7c:	ldr	r1, [pc, #72]	; (8cc8 <usb_serial_configure+0xa4>)
    8c7e:	bl	9854 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    8c82:	mov	r1, r5
    8c84:	movs	r0, #3
    8c86:	bl	98ac <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    8c8a:	ldr	r3, [pc, #64]	; (8ccc <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    8c8c:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8c8e:	ldr	r1, [pc, #64]	; (8cd0 <usb_serial_configure+0xac>)
    8c90:	ldr	r0, [pc, #64]	; (8cd4 <usb_serial_configure+0xb0>)
    8c92:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    8c94:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8c98:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8c9c:	ldr.w	r2, [r3, #328]	; 0x148
    8ca0:	orr.w	r2, r2, #16777216	; 0x1000000
    8ca4:	str.w	r2, [r3, #328]	; 0x148
    8ca8:	pop	{r3, r4, r5, r6, r7, pc}
    8caa:	nop
    8cac:	.word	0x2000bf60
    8cb0:	.word	0x2000bdf5
    8cb4:	.word	0x2000bee0
    8cb8:	.word	0x2000bec0
    8cbc:	.word	0x2000bf40
    8cc0:	.word	0x2000beb8
    8cc4:	.word	0x00008a2d
    8cc8:	.word	0x2000bdf8
    8ccc:	.word	0x402e0000
    8cd0:	.word	0x2000c044
    8cd4:	.word	0x00008a55

00008cd8 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8cd8:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    8cda:	ldr	r5, [pc, #56]	; (8d14 <usb_serial_getchar+0x3c>)
    8cdc:	ldr	r3, [pc, #56]	; (8d18 <usb_serial_getchar+0x40>)
    8cde:	ldrh	r2, [r5, #0]
    8ce0:	ldrh	r0, [r3, #0]
    8ce2:	cmp	r2, r0
    8ce4:	bcs.n	8d0e <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    8ce6:	adds	r3, r2, #1
    8ce8:	ldr	r1, [pc, #48]	; (8d1c <usb_serial_getchar+0x44>)
    8cea:	uxth	r3, r3
    8cec:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    8cee:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    8cf0:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    8cf2:	bls.n	8cf8 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    8cf4:	mov	r0, r4
	}
	return -1;
}
    8cf6:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    8cf8:	movs	r3, #0
    8cfa:	movs	r2, #64	; 0x40
    8cfc:	ldr	r0, [pc, #32]	; (8d20 <usb_serial_getchar+0x48>)
    8cfe:	bl	9854 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    8d02:	ldr	r1, [pc, #28]	; (8d20 <usb_serial_getchar+0x48>)
    8d04:	movs	r0, #3
    8d06:	bl	98ac <usb_receive>
		}
		return c;
    8d0a:	mov	r0, r4
    8d0c:	pop	{r3, r4, r5, pc}
	}
	return -1;
    8d0e:	mov.w	r0, #4294967295
    8d12:	pop	{r3, r4, r5, pc}
    8d14:	.word	0x2000beb8
    8d18:	.word	0x2000bec0
    8d1c:	.word	0x2000bdf8
    8d20:	.word	0x2000bee0

00008d24 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    8d24:	ldr	r3, [pc, #20]	; (8d3c <usb_serial_peekchar+0x18>)
    8d26:	ldr	r2, [pc, #24]	; (8d40 <usb_serial_peekchar+0x1c>)
    8d28:	ldrh	r3, [r3, #0]
    8d2a:	ldrh	r2, [r2, #0]
    8d2c:	cmp	r2, r3
    8d2e:	bls.n	8d36 <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    8d30:	ldr	r2, [pc, #16]	; (8d44 <usb_serial_peekchar+0x20>)
    8d32:	ldrb	r0, [r2, r3]
    8d34:	bx	lr
	}

	return -1;
    8d36:	mov.w	r0, #4294967295
}
    8d3a:	bx	lr
    8d3c:	.word	0x2000beb8
    8d40:	.word	0x2000bec0
    8d44:	.word	0x2000bdf8

00008d48 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    8d48:	ldr	r2, [pc, #8]	; (8d54 <usb_serial_available+0xc>)
    8d4a:	ldr	r3, [pc, #12]	; (8d58 <usb_serial_available+0x10>)
    8d4c:	ldrh	r0, [r2, #0]
    8d4e:	ldrh	r3, [r3, #0]
}
    8d50:	subs	r0, r0, r3
    8d52:	bx	lr
    8d54:	.word	0x2000bec0
    8d58:	.word	0x2000beb8

00008d5c <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8d5c:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    8d5e:	ldr	r3, [pc, #40]	; (8d88 <usb_serial_flush_input+0x2c>)
    8d60:	ldr	r4, [pc, #40]	; (8d8c <usb_serial_flush_input+0x30>)
    8d62:	ldrh	r5, [r3, #0]
    8d64:	ldrh	r3, [r4, #0]
    8d66:	cmp	r3, r5
    8d68:	bcc.n	8d6c <usb_serial_flush_input+0x10>
    8d6a:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    8d6c:	movs	r3, #0
    8d6e:	ldr	r1, [pc, #32]	; (8d90 <usb_serial_flush_input+0x34>)
    8d70:	ldr	r0, [pc, #32]	; (8d94 <usb_serial_flush_input+0x38>)
    8d72:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    8d74:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    8d76:	bl	9854 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    8d7a:	ldr	r1, [pc, #24]	; (8d94 <usb_serial_flush_input+0x38>)
    8d7c:	movs	r0, #3
	}
}
    8d7e:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    8d82:	b.w	98ac <usb_receive>
    8d86:	nop
    8d88:	.word	0x2000bec0
    8d8c:	.word	0x2000beb8
    8d90:	.word	0x2000bdf8
    8d94:	.word	0x2000bee0

00008d98 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8d98:	ldr	r3, [pc, #36]	; (8dc0 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8d9a:	push	{lr}
    8d9c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8d9e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8da0:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8da4:	cbnz	r3, 8db0 <usb_serial_putchar+0x18>
    8da6:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8daa:	add	sp, #12
    8dac:	ldr.w	pc, [sp], #4
    8db0:	movs	r1, #1
    8db2:	add.w	r0, sp, #7
    8db6:	bl	8ac4 <usb_serial_write.part.1>
    8dba:	add	sp, #12
    8dbc:	ldr.w	pc, [sp], #4
    8dc0:	.word	0x2000c070

00008dc4 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8dc4:	ldr	r3, [pc, #16]	; (8dd8 <usb_serial_write+0x14>)
    8dc6:	ldrb	r3, [r3, #0]
    8dc8:	and.w	r2, r3, #255	; 0xff
    8dcc:	cbz	r3, 8dd2 <usb_serial_write+0xe>
    8dce:	b.w	8ac4 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8dd2:	mov	r0, r2
    8dd4:	bx	lr
    8dd6:	nop
    8dd8:	.word	0x2000c070

00008ddc <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8ddc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8de0:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8de2:	ldr.w	r8, [pc, #64]	; 8e24 <usb_serial_write_buffer_free+0x48>
    8de6:	movs	r3, #1
    8de8:	ldr	r5, [pc, #48]	; (8e1c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8dea:	mov	r7, r4
    8dec:	ldr	r6, [pc, #48]	; (8e20 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    8dee:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8df2:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8df4:	mov	r0, r5
    8df6:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8df8:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8dfa:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8dfe:	beq.n	8e0c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8e00:	bl	98d0 <usb_transfer_status>
    8e04:	lsls	r3, r0, #24
    8e06:	it	pl
    8e08:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8e0c:	cmp	r4, #7
    8e0e:	bne.n	8df2 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8e10:	movs	r3, #0
	return sum;
}
    8e12:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8e14:	strb.w	r3, [r8]
	return sum;
}
    8e18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e1c:	.word	0x2000bf60
    8e20:	.word	0x2000bdf5
    8e24:	.word	0x2000bdf4

00008e28 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8e28:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8e2a:	ldr	r3, [pc, #80]	; (8e7c <usb_serial_flush_output+0x54>)
    8e2c:	ldrb	r3, [r3, #0]
    8e2e:	cbz	r3, 8e36 <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    8e30:	ldr	r4, [pc, #76]	; (8e80 <usb_serial_flush_output+0x58>)
    8e32:	ldrh	r2, [r4, #0]
    8e34:	cbnz	r2, 8e38 <usb_serial_flush_output+0x10>
    8e36:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8e38:	ldr	r6, [pc, #72]	; (8e84 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8e3a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8e3e:	ldr	r5, [pc, #72]	; (8e88 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8e40:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8e42:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8e44:	rsb	r2, r2, #256	; 0x100
    8e48:	ldr	r0, [pc, #64]	; (8e8c <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8e4a:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8e4e:	ldr	r7, [pc, #64]	; (8e90 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8e50:	add.w	r1, r0, r1, lsl #8
    8e54:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8e56:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8e5a:	bl	9854 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8e5e:	mov	r1, r5
    8e60:	movs	r0, #4
    8e62:	bl	9884 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8e66:	ldrb	r3, [r6, #0]
    8e68:	adds	r3, #1
    8e6a:	uxtb	r3, r3
    8e6c:	cmp	r3, #6
    8e6e:	it	hi
    8e70:	movhi	r3, #0
    8e72:	strb	r3, [r6, #0]
	tx_available = 0;
    8e74:	movs	r3, #0
    8e76:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    8e78:	strb	r3, [r7, #0]
    8e7a:	pop	{r3, r4, r5, r6, r7, pc}
    8e7c:	.word	0x2000c070
    8e80:	.word	0x2000bf40
    8e84:	.word	0x2000bdf5
    8e88:	.word	0x2000bf60
    8e8c:	.word	0x2000b6f4
    8e90:	.word	0x2000bdf4

00008e94 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8e94:	ldr	r2, [pc, #556]	; (90c4 <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8e96:	ldr	r3, [pc, #560]	; (90c8 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8e98:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    8e9a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    8e9e:	ldr	r5, [pc, #556]	; (90cc <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8ea0:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8ea2:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    8ea4:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8ea6:	bls.n	8ee4 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    8ea8:	ldr	r3, [pc, #548]	; (90d0 <set_arm_clock+0x23c>)
    8eaa:	cmp	r0, r3
    8eac:	bls.w	90b0 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8eb0:	ldr	r3, [pc, #544]	; (90d4 <set_arm_clock+0x240>)
    8eb2:	movw	r6, #1300	; 0x514
    8eb6:	ldr.w	lr, [pc, #600]	; 9110 <set_arm_clock+0x27c>
    8eba:	add	r3, r0
    8ebc:	ldr	r5, [pc, #536]	; (90d8 <set_arm_clock+0x244>)
    8ebe:	lsrs	r2, r3, #8
    8ec0:	umull	r3, r2, lr, r2
    8ec4:	lsrs	r3, r2, #7
    8ec6:	add.w	r3, r3, r3, lsl #2
    8eca:	add.w	r2, r3, r3, lsl #2
    8ece:	addw	r3, r2, #1250	; 0x4e2
    8ed2:	cmp	r3, r6
    8ed4:	it	cs
    8ed6:	movcs	r3, r6
    8ed8:	sub.w	r3, r3, #800	; 0x320
    8edc:	umull	r3, r6, r5, r3
    8ee0:	lsrs	r6, r6, #3
    8ee2:	b.n	8eec <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    8ee4:	cmp	r0, #25
    8ee6:	ite	cc
    8ee8:	movcc	r6, #6
    8eea:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8eec:	ldr	r2, [pc, #472]	; (90c8 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8eee:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8ef2:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8ef6:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8ef8:	orr.w	r3, r3, #192	; 0xc0
    8efc:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8f00:	bcs.n	8f18 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8f02:	ldr	r3, [pc, #456]	; (90cc <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8f04:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8f08:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8f0a:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    8f0c:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8f0e:	ldr	r3, [r2, #0]
    8f10:	cmp	r3, #0
    8f12:	bge.n	8f0e <set_arm_clock+0x7a>
    8f14:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    8f18:	ands.w	r3, r4, #33554432	; 0x2000000
    8f1c:	bne.n	8f7c <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    8f1e:	ldr	r5, [pc, #444]	; (90dc <set_arm_clock+0x248>)
    8f20:	ldr	r2, [pc, #444]	; (90e0 <set_arm_clock+0x24c>)
    8f22:	ldr.w	ip, [r5, #16]
    8f26:	mov	r5, r2
    8f28:	and.w	r2, ip, r2
    8f2c:	cmp	r2, r5
    8f2e:	itet	eq
    8f30:	moveq.w	r3, #402653184	; 0x18000000
    8f34:	movne.w	r2, #4096	; 0x1000
    8f38:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8f3a:	eor.w	r5, r4, r3
    8f3e:	tst.w	r5, #939524096	; 0x38000000
    8f42:	beq.n	8f52 <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8f44:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8f48:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    8f4c:	ldr	r5, [pc, #376]	; (90c8 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8f4e:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    8f50:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    8f52:	eor.w	r3, r1, r2
    8f56:	tst.w	r3, #12288	; 0x3000
    8f5a:	beq.n	8f6e <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8f5c:	ldr	r3, [pc, #360]	; (90c8 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8f5e:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8f62:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8f64:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8f66:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8f68:	ldr	r3, [r2, #72]	; 0x48
    8f6a:	lsls	r5, r3, #28
    8f6c:	bmi.n	8f68 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8f6e:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8f72:	ldr	r2, [pc, #340]	; (90c8 <set_arm_clock+0x234>)
    8f74:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8f76:	ldr	r3, [r2, #72]	; 0x48
    8f78:	lsls	r1, r3, #26
    8f7a:	bmi.n	8f76 <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8f7c:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8f7e:	ldr	r5, [pc, #356]	; (90e4 <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8f80:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8f82:	mul.w	r3, r1, r2
    8f86:	mul.w	r3, r0, r3
    8f8a:	cmp	r3, r5
    8f8c:	bhi.n	8fa2 <set_arm_clock+0x10e>
		if (div_arm < 8) {
    8f8e:	cmp	r2, #7
    8f90:	bhi.w	909c <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    8f94:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8f96:	mul.w	r3, r1, r2
    8f9a:	mul.w	r3, r0, r3
    8f9e:	cmp	r3, r5
    8fa0:	bls.n	8f8e <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8fa2:	ldr	r0, [pc, #324]	; (90e8 <set_arm_clock+0x254>)
    8fa4:	ldr	r5, [pc, #324]	; (90ec <set_arm_clock+0x258>)
    8fa6:	add	r0, r3
    8fa8:	umull	r3, r0, r5, r0
    8fac:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    8fae:	cmp	r3, #108	; 0x6c
    8fb0:	bhi.n	90a6 <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    8fb2:	cmp	r3, #53	; 0x35
    8fb4:	bhi.n	90b4 <set_arm_clock+0x220>
    8fb6:	ldr.w	r8, [pc, #348]	; 9114 <set_arm_clock+0x280>
    8fba:	movs	r3, #54	; 0x36
    8fbc:	ldr	r0, [pc, #304]	; (90f0 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8fbe:	ldr.w	ip, [pc, #284]	; 90dc <set_arm_clock+0x248>
    8fc2:	ldr	r5, [pc, #304]	; (90f4 <set_arm_clock+0x260>)
    8fc4:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8fc8:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8fcc:	and.w	r5, r9, r5
    8fd0:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8fd2:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8fd6:	beq.n	8ff0 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8fd8:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8fdc:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8fe0:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8fe2:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8fe6:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8fea:	ldr	r3, [r5, #0]
    8fec:	cmp	r3, #0
    8fee:	bge.n	8fea <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8ff0:	ldr.w	ip, [pc, #212]	; 90c8 <set_arm_clock+0x234>
    8ff4:	subs	r2, #1
    8ff6:	ldr.w	r3, [ip, #16]
    8ffa:	and.w	r3, r3, #7
    8ffe:	cmp	r3, r2
    9000:	beq.n	9012 <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9002:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9006:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9008:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    900c:	ldr	r3, [r5, #72]	; 0x48
    900e:	lsls	r3, r3, #15
    9010:	bmi.n	900c <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9012:	subs	r1, #1
    9014:	lsls	r1, r1, #10
    9016:	eor.w	r3, r4, r1
    901a:	tst.w	r3, #7168	; 0x1c00
    901e:	beq.n	9036 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    9020:	ldr	r3, [pc, #164]	; (90c8 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    9022:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9026:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    902a:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    902c:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    902e:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9030:	ldr	r3, [r2, #72]	; 0x48
    9032:	lsls	r1, r3, #30
    9034:	bmi.n	9030 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9036:	ldr	r3, [pc, #192]	; (90f8 <set_arm_clock+0x264>)
    9038:	ldr	r1, [pc, #192]	; (90fc <set_arm_clock+0x268>)
    903a:	add	r3, r0
    903c:	lsrs	r3, r3, #7
    903e:	umull	r3, r1, r1, r3
    9042:	lsrs	r1, r1, #12
    9044:	cmp	r1, #4
    9046:	it	cs
    9048:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    904a:	subs	r3, r1, #1
    904c:	lsls	r3, r3, #8
    904e:	eor.w	r2, r4, r3
    9052:	tst.w	r2, #768	; 0x300
    9056:	beq.n	9066 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    9058:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    905c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9060:	ldr	r2, [pc, #100]	; (90c8 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    9062:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9064:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    9066:	ldr	r3, [pc, #96]	; (90c8 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9068:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    906c:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    906e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9070:	ldr	r3, [r2, #72]	; 0x48
    9072:	lsls	r3, r3, #26
    9074:	bmi.n	9070 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    9076:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    907a:	ldr	r2, [pc, #132]	; (9100 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    907c:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    907e:	ldr	r3, [pc, #132]	; (9104 <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    9080:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    9082:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    9084:	bcs.n	9098 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9086:	ldr	r3, [pc, #68]	; (90cc <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9088:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    908c:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    908e:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    9090:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9092:	ldr	r3, [r2, #0]
    9094:	cmp	r3, #0
    9096:	bge.n	9092 <set_arm_clock+0x1fe>
	}

	return frequency;
}
    9098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    909c:	cmp	r1, #4
    909e:	bhi.n	8fa2 <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    90a0:	adds	r1, #1
				div_arm = 1;
    90a2:	movs	r2, #1
    90a4:	b.n	8f82 <set_arm_clock+0xee>
    90a6:	ldr.w	r8, [pc, #112]	; 9118 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    90aa:	movs	r3, #108	; 0x6c
    90ac:	ldr	r0, [pc, #88]	; (9108 <set_arm_clock+0x274>)
    90ae:	b.n	8fbe <set_arm_clock+0x12a>
    90b0:	movs	r6, #18
    90b2:	b.n	8eec <set_arm_clock+0x58>
    90b4:	ldr	r0, [pc, #84]	; (910c <set_arm_clock+0x278>)
    90b6:	ldr.w	r8, [pc, #100]	; 911c <set_arm_clock+0x288>
    90ba:	mul.w	r0, r0, r3
    90be:	orr.w	r8, r3, r8
    90c2:	b.n	8fbe <set_arm_clock+0x12a>
    90c4:	.word	0x1f78a400
    90c8:	.word	0x400fc000
    90cc:	.word	0x40080000
    90d0:	.word	0x23c34600
    90d4:	.word	0xdc3cba00
    90d8:	.word	0x51eb851f
    90dc:	.word	0x400d8000
    90e0:	.word	0x80003040
    90e4:	.word	0x269fb1ff
    90e8:	.word	0x005b8d80
    90ec:	.word	0x165e9f81
    90f0:	.word	0x269fb200
    90f4:	.word	0x8001307f
    90f8:	.word	0x08f0d17f
    90fc:	.word	0x00e5109f
    9100:	.word	0x20000bec
    9104:	.word	0x20000be8
    9108:	.word	0x4d3f6400
    910c:	.word	0x00b71b00
    9110:	.word	0x004cb223
    9114:	.word	0x80002036
    9118:	.word	0x8000206c
    911c:	.word	0x80002000

00009120 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9120:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    9122:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9124:	cbz	r3, 912e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9126:	ldr	r3, [r2, #4]
    9128:	orr.w	r3, r3, #32768	; 0x8000
    912c:	str	r3, [r2, #4]
	}
	__disable_irq();
    912e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    9130:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    9132:	cbz	r4, 915c <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    9134:	ldr	r3, [pc, #64]	; (9178 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    9136:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9138:	ldr.w	r4, [r3, #432]	; 0x1b0
    913c:	tst	r4, r1
    913e:	bne.n	9170 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    9140:	ldr.w	r4, [r3, #320]	; 0x140
    9144:	orr.w	r4, r4, #16384	; 0x4000
    9148:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    914c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    9150:	ldr.w	r4, [r3, #320]	; 0x140
    9154:	lsls	r4, r4, #17
    9156:	bpl.n	9140 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9158:	tst	r1, r5
    915a:	bne.n	9170 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    915c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    915e:	ldr	r4, [pc, #24]	; (9178 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    9160:	str	r2, [r0, #8]
	endpoint->status = 0;
    9162:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    9164:	ldr.w	r3, [r4, #432]	; 0x1b0
    9168:	orrs	r1, r3
    916a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    916e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    9170:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9172:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9174:	pop	{r4, r5}
    9176:	bx	lr
    9178:	.word	0x402e0000

0000917c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    917c:	push	{r3, r4, r5, lr}
    917e:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    9180:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    9182:	b.n	9192 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    9184:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    9186:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    9188:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    918a:	ldr	r2, [r5, #52]	; 0x34
    918c:	mov	r3, r4
    918e:	cmp	r4, r2
    9190:	beq.n	91a4 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    9192:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    9194:	cbz	r3, 91a4 <run_callbacks+0x28>
    9196:	cmp	r3, #1
    9198:	beq.n	91a4 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    919a:	ldr	r2, [r3, #4]
    919c:	lsls	r2, r2, #24
    919e:	bpl.n	9184 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    91a0:	str	r3, [r5, #48]	; 0x30
			return;
    91a2:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    91a4:	movs	r3, #0
    91a6:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    91a8:	str	r3, [r5, #52]	; 0x34
    91aa:	pop	{r3, r4, r5, pc}

000091ac <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    91ac:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    91ae:	cbnz	r1, 91e2 <endpoint0_transmit.constprop.0+0x36>
    91b0:	ldr	r4, [pc, #124]	; (9230 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91b2:	ldr	r3, [pc, #128]	; (9234 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    91b4:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    91b6:	ldr	r0, [pc, #128]	; (9238 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91b8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91ba:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    91bc:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91be:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    91c0:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91c2:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    91c4:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    91c6:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    91ca:	ldr	r5, [pc, #112]	; (923c <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    91cc:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    91d0:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    91d2:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    91d6:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    91d8:	ldr.w	r3, [r2, #432]	; 0x1b0
    91dc:	cmp	r3, #0
    91de:	bne.n	91d8 <endpoint0_transmit.constprop.0+0x2c>
}
    91e0:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    91e2:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    91e4:	ldr	r3, [pc, #88]	; (9240 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    91e6:	ldr	r5, [pc, #80]	; (9238 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    91e8:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    91ea:	ldr	r4, [pc, #68]	; (9230 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    91ec:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    91f0:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    91f2:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    91f4:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    91f6:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    91fa:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    91fc:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9200:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9202:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    9206:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    920a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    920e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9210:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    9212:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9216:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    921a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    921e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9220:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    9222:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9226:	ldr.w	r3, [r2, #432]	; 0x1b0
    922a:	cmp	r3, #0
    922c:	bne.n	9226 <endpoint0_transmit.constprop.0+0x7a>
    922e:	b.n	91b2 <endpoint0_transmit.constprop.0+0x6>
    9230:	.word	0x2000e000
    9234:	.word	0x2000d020
    9238:	.word	0x402e0000
    923c:	.word	0x2000c050
    9240:	.word	0x2000d000

00009244 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    9244:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    9248:	ldr	r4, [pc, #696]	; (9504 <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    924a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    924c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9250:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    9254:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9258:	beq.n	9318 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    925a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    925e:	cmp	r3, #0
    9260:	beq.n	930e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9262:	mov.w	r9, #65537	; 0x10001
    9266:	ldr.w	fp, [pc, #700]	; 9524 <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    926a:	mov	r6, r4
    926c:	ldr	r7, [pc, #664]	; (9508 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    926e:	mov	sl, r9
    9270:	ldr	r1, [r7, #40]	; 0x28
    9272:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    9274:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9278:	ldr.w	r3, [r4, #320]	; 0x140
    927c:	orr.w	r3, r3, #8192	; 0x2000
    9280:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9284:	ldr.w	r3, [r4, #320]	; 0x140
    9288:	lsls	r5, r3, #18
    928a:	bpl.n	9278 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    928c:	ldr.w	r3, [r6, #320]	; 0x140
    9290:	bic.w	r3, r3, #8192	; 0x2000
    9294:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9298:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    929c:	ldr.w	r3, [r4, #436]	; 0x1b4
    92a0:	ands.w	r3, r3, #65537	; 0x10001
    92a4:	bne.n	929c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    92a6:	uxth	r0, r1
    92a8:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    92ac:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    92b0:	cmp	r0, r5
    92b2:	bhi.w	93d6 <isr+0x192>
    92b6:	cmp.w	r0, #1664	; 0x680
    92ba:	bcs.w	9620 <isr+0x3dc>
    92be:	cmp.w	r0, #258	; 0x102
    92c2:	beq.w	9540 <isr+0x2fc>
    92c6:	bhi.w	945c <isr+0x218>
    92ca:	cmp	r0, #128	; 0x80
    92cc:	beq.w	94ea <isr+0x2a6>
    92d0:	cmp	r0, #130	; 0x82
    92d2:	bne.w	944c <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    92d6:	uxth	r2, r2
    92d8:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    92dc:	cmp	r1, #7
    92de:	bhi.w	944c <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    92e2:	lsls	r1, r1, #2
    92e4:	ldr	r0, [pc, #548]	; (950c <isr+0x2c8>)
		reply_buffer[0] = 0;
    92e6:	ldr	r5, [pc, #552]	; (9510 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    92e8:	add	r0, r1
    92ea:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    92ec:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    92ee:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    92f0:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    92f2:	bpl.w	9672 <isr+0x42e>
    92f6:	lsls	r2, r1, #15
    92f8:	bpl.n	92fe <isr+0xba>
			reply_buffer[0] = 1;
    92fa:	movs	r3, #1
    92fc:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    92fe:	movs	r1, #2
    9300:	ldr	r0, [pc, #524]	; (9510 <isr+0x2cc>)
    9302:	bl	91ac <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9306:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    930a:	cmp	r3, #0
    930c:	bne.n	9270 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    930e:	ldr	r2, [pc, #500]	; (9504 <isr+0x2c0>)
    9310:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    9314:	cmp	r3, #0
    9316:	bne.n	93a2 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    9318:	tst.w	r8, #64	; 0x40
    931c:	beq.n	9350 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    931e:	ldr	r3, [pc, #484]	; (9504 <isr+0x2c0>)
    9320:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9324:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9326:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    932a:	ldr.w	r1, [r3, #444]	; 0x1bc
    932e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9332:	ldr.w	r4, [r2, #432]	; 0x1b0
    9336:	ldr	r3, [pc, #460]	; (9504 <isr+0x2c0>)
    9338:	cmp	r4, #0
    933a:	bne.n	9332 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    933c:	mov.w	r2, #4294967295
    9340:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    9344:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    9348:	bl	8c20 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    934c:	ldr	r3, [pc, #452]	; (9514 <isr+0x2d0>)
    934e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    9350:	tst.w	r8, #16777216	; 0x1000000
    9354:	beq.n	935e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9356:	ldr	r3, [pc, #448]	; (9518 <isr+0x2d4>)
    9358:	ldr	r3, [r3, #0]
    935a:	cbz	r3, 935e <isr+0x11a>
    935c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    935e:	tst.w	r8, #33554432	; 0x2000000
    9362:	beq.n	936c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    9364:	ldr	r3, [pc, #436]	; (951c <isr+0x2d8>)
    9366:	ldr	r3, [r3, #0]
    9368:	cbz	r3, 936c <isr+0x128>
    936a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    936c:	tst.w	r8, #4
    9370:	beq.n	9378 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    9372:	ldr	r3, [pc, #400]	; (9504 <isr+0x2c0>)
    9374:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    9378:	ldr	r3, [pc, #392]	; (9504 <isr+0x2c0>)
    937a:	ldr.w	r2, [r3, #328]	; 0x148
    937e:	lsls	r2, r2, #24
    9380:	bpl.n	939c <isr+0x158>
    9382:	tst.w	r8, #128	; 0x80
    9386:	beq.n	939c <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    9388:	ldr	r1, [pc, #404]	; (9520 <isr+0x2dc>)
    938a:	ldrb	r2, [r1, #0]
    938c:	cmp	r2, #0
    938e:	beq.w	9660 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    9392:	subs	r3, r2, #1
    9394:	uxtb	r3, r3
    9396:	strb	r3, [r1, #0]
    9398:	cbnz	r3, 939c <isr+0x158>
				asm("bkpt #251"); // run bootloader
    939a:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    939c:	add	sp, #12
    939e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    93a2:	ldr	r1, [pc, #384]	; (9524 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    93a4:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    93a8:	ldr	r0, [r1, #0]
    93aa:	tst	r3, r0
    93ac:	bne.w	96ee <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    93b0:	ldr	r2, [pc, #352]	; (9514 <isr+0x2d0>)
    93b2:	ldr	r4, [r2, #0]
			if (completestatus) {
    93b4:	ands	r4, r3
    93b6:	beq.n	9318 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    93b8:	lsls	r6, r4, #29
    93ba:	bmi.w	9728 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    93be:	lsls	r5, r4, #13
    93c0:	bmi.w	9738 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    93c4:	lsls	r0, r4, #28
    93c6:	bmi.w	9730 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    93ca:	lsls	r1, r4, #12
    93cc:	bpl.n	9318 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    93ce:	ldr	r0, [pc, #344]	; (9528 <isr+0x2e4>)
    93d0:	bl	917c <run_callbacks>
    93d4:	b.n	9318 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    93d6:	movw	r5, #8225	; 0x2021
    93da:	cmp	r0, r5
    93dc:	beq.n	9444 <isr+0x200>
    93de:	bhi.n	94a8 <isr+0x264>
    93e0:	cmp.w	r0, #2176	; 0x880
    93e4:	beq.w	9604 <isr+0x3c0>
    93e8:	cmp.w	r0, #2304	; 0x900
    93ec:	bne.n	944c <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    93ee:	ubfx	r1, r1, #16, #8
    93f2:	ldr	r2, [pc, #312]	; (952c <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    93f4:	ldr	r0, [pc, #312]	; (9530 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    93f6:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    93f8:	ldr	r1, [pc, #312]	; (9534 <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    93fa:	ldr	r2, [pc, #316]	; (9538 <isr+0x2f4>)
    93fc:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    93fe:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9402:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    9406:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    940a:	bl	8c24 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    940e:	ldr	r2, [pc, #300]	; (953c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9410:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9412:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9414:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    9416:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9418:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    941a:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    941c:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    9420:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9422:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9424:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9428:	ldr	r2, [pc, #248]	; (9524 <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    942a:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    942e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    9430:	ldr.w	r3, [r4, #432]	; 0x1b0
    9434:	cmp	r3, #0
    9436:	bne.n	9430 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9438:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    943c:	cmp	r3, #0
    943e:	bne.w	9270 <isr+0x2c>
    9442:	b.n	930e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    9444:	lsrs	r0, r2, #16
    9446:	cmp	r0, #7
    9448:	beq.w	967a <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    944c:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9450:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9454:	cmp	r3, #0
    9456:	bne.w	9270 <isr+0x2c>
    945a:	b.n	930e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    945c:	movw	r5, #770	; 0x302
    9460:	cmp	r0, r5
    9462:	beq.w	95aa <isr+0x366>
    9466:	cmp.w	r0, #1280	; 0x500
    946a:	bne.n	944c <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    946c:	ldr	r2, [pc, #204]	; (953c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    946e:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9470:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9472:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9474:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9476:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9478:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    947c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    947e:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9482:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9484:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9488:	ldr.w	r3, [r4, #432]	; 0x1b0
    948c:	cmp	r3, #0
    948e:	bne.n	9488 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9490:	lsrs	r3, r1, #16
    9492:	lsls	r3, r3, #25
    9494:	orr.w	r3, r3, #16777216	; 0x1000000
    9498:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    949c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    94a0:	cmp	r3, #0
    94a2:	bne.w	9270 <isr+0x2c>
    94a6:	b.n	930e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    94a8:	movw	r3, #8737	; 0x2221
    94ac:	cmp	r0, r3
    94ae:	beq.n	9598 <isr+0x354>
    94b0:	movw	r3, #8993	; 0x2321
    94b4:	cmp	r0, r3
    94b6:	bne.n	944c <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    94b8:	ldr	r3, [pc, #128]	; (953c <isr+0x2f8>)
    94ba:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    94bc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    94be:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    94c0:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    94c2:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    94c4:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    94c8:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    94ca:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    94ce:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    94d0:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    94d2:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    94d6:	ldr.w	r3, [r4, #432]	; 0x1b0
    94da:	cmp	r3, #0
    94dc:	bne.n	94d6 <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    94de:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    94e2:	cmp	r3, #0
    94e4:	bne.w	9270 <isr+0x2c>
    94e8:	b.n	930e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    94ea:	ldr	r2, [pc, #36]	; (9510 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    94ec:	movs	r1, #2
    94ee:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    94f0:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    94f2:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    94f4:	bl	91ac <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    94f8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    94fc:	cmp	r3, #0
    94fe:	bne.w	9270 <isr+0x2c>
    9502:	b.n	930e <isr+0xca>
    9504:	.word	0x402e0000
    9508:	.word	0x2000e000
    950c:	.word	0x402e01c0
    9510:	.word	0x2000c060
    9514:	.word	0x2000c048
    9518:	.word	0x2000c044
    951c:	.word	0x2000c04c
    9520:	.word	0x2000c054
    9524:	.word	0x2000c050
    9528:	.word	0x2000e1c0
    952c:	.word	0x2000c070
    9530:	.word	0x00cc0002
    9534:	.word	0x000200c8
    9538:	.word	0x00c80002
    953c:	.word	0x2000d020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9540:	uxth	r2, r2
    9542:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9546:	cmp	r3, #7
    9548:	bhi.n	944c <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    954a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    954e:	mov.w	r3, r3, lsl #2
    9552:	ldr	r2, [pc, #492]	; (9740 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9554:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9558:	add	r2, r3
    955a:	ldr	r3, [r2, #0]
    955c:	ite	ne
    955e:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    9562:	biceq.w	r3, r3, #1
    9566:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9568:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    956a:	ldr	r3, [pc, #472]	; (9744 <isr+0x500>)
    956c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    956e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9570:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9572:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9576:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9578:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    957c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    957e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    9580:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9584:	ldr.w	r3, [r4, #432]	; 0x1b0
    9588:	cmp	r3, #0
    958a:	bne.n	9584 <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    958c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9590:	cmp	r3, #0
    9592:	bne.w	9270 <isr+0x2c>
    9596:	b.n	930e <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9598:	ldr	r3, [pc, #428]	; (9748 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    959a:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    959e:	ldr	r2, [pc, #428]	; (974c <isr+0x508>)
    95a0:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    95a2:	ldr	r3, [pc, #428]	; (9750 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    95a4:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    95a6:	strb	r1, [r3, #0]
    95a8:	b.n	94b8 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    95aa:	uxth	r2, r2
    95ac:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    95b0:	cmp	r3, #7
    95b2:	bhi.w	944c <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    95b6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    95ba:	mov.w	r3, r3, lsl #2
    95be:	ldr	r2, [pc, #384]	; (9740 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    95c0:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    95c4:	add	r2, r3
    95c6:	ldr	r3, [r2, #0]
    95c8:	ite	ne
    95ca:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    95ce:	orreq.w	r3, r3, #1
    95d2:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    95d4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    95d6:	ldr	r3, [pc, #364]	; (9744 <isr+0x500>)
    95d8:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    95da:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    95dc:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    95de:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    95e2:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    95e4:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    95e8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    95ea:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    95ec:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    95f0:	ldr.w	r3, [r4, #432]	; 0x1b0
    95f4:	cmp	r3, #0
    95f6:	bne.n	95f0 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    95f8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    95fc:	cmp	r3, #0
    95fe:	bne.w	9270 <isr+0x2c>
    9602:	b.n	930e <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9604:	ldr	r2, [pc, #332]	; (9754 <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9606:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9608:	ldr	r3, [pc, #332]	; (9758 <isr+0x514>)
    960a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    960c:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    960e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9610:	bl	91ac <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9614:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9618:	cmp	r3, #0
    961a:	bne.w	9270 <isr+0x2c>
    961e:	b.n	930e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9620:	ldr	r3, [pc, #312]	; (975c <isr+0x518>)
    9622:	ldr	r0, [r3, #4]
    9624:	cmp	r0, #0
    9626:	beq.w	944c <isr+0x208>
    962a:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    962c:	uxth.w	lr, r2
    9630:	b.n	963c <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9632:	adds	r3, #12
    9634:	ldr	r0, [r3, #4]
    9636:	cmp	r0, #0
    9638:	beq.w	944c <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    963c:	ldrh	r5, [r3, #0]
    963e:	cmp	r5, r1
    9640:	bne.n	9632 <isr+0x3ee>
    9642:	ldrh	r5, [r3, #2]
    9644:	cmp	r5, lr
    9646:	bne.n	9632 <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    9648:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    964a:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    964c:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    964e:	ite	eq
    9650:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    9652:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    9654:	cmp	r1, r2
    9656:	it	cs
    9658:	movcs	r1, r2
    965a:	bl	91ac <endpoint0_transmit.constprop.0>
    965e:	b.n	9306 <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    9660:	ldr.w	r2, [r3, #328]	; 0x148
    9664:	bic.w	r2, r2, #128	; 0x80
    9668:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    966c:	add	sp, #12
    966e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9672:	lsls	r3, r1, #31
    9674:	bpl.w	92fe <isr+0xba>
    9678:	b.n	92fa <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    967a:	ldr	r5, [pc, #228]	; (9760 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    967c:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    967e:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9680:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9682:	ldr	r3, [pc, #224]	; (9764 <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    9684:	ldr	r1, [pc, #224]	; (9768 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9686:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    9688:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    968a:	ldr	r1, [pc, #224]	; (976c <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    968c:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9690:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9692:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9696:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    969a:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    969e:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    96a2:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    96a4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    96a6:	sub.w	r0, r1, #4096	; 0x1000
    96aa:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    96ac:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    96b0:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    96b2:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    96b4:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    96b8:	ldr.w	r3, [r4, #432]	; 0x1b0
    96bc:	cmp	r3, #0
    96be:	bne.n	96b8 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    96c0:	ldr	r2, [pc, #128]	; (9744 <isr+0x500>)
    96c2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    96c4:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    96c6:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    96c8:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    96ca:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    96ce:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    96d0:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    96d4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    96d6:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    96da:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    96dc:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    96e0:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    96e4:	ldr.w	r3, [r4, #432]	; 0x1b0
    96e8:	cmp	r3, #0
    96ea:	bne.n	96e4 <isr+0x4a0>
    96ec:	b.n	9306 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    96ee:	ldr	r4, [pc, #112]	; (9760 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    96f0:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    96f4:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    96f6:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    96f8:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    96fa:	cmp	r4, r0
    96fc:	bne.w	93b0 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9700:	ldr	r1, [pc, #108]	; (9770 <isr+0x52c>)
    9702:	ldr	r4, [pc, #112]	; (9774 <isr+0x530>)
    9704:	ldmia	r1, {r0, r1}
    9706:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9708:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    970a:	str	r0, [r4, #0]
    970c:	strh	r1, [r4, #4]
    970e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9710:	bne.w	93b0 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    9714:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9718:	movs	r4, #80	; 0x50
    971a:	ldr	r0, [pc, #92]	; (9778 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    971c:	orr.w	r1, r1, #128	; 0x80
    9720:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9724:	strb	r4, [r0, #0]
    9726:	b.n	93b0 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    9728:	ldr	r0, [pc, #80]	; (977c <isr+0x538>)
    972a:	bl	917c <run_callbacks>
    972e:	b.n	93be <isr+0x17a>
    9730:	ldr	r0, [pc, #76]	; (9780 <isr+0x53c>)
    9732:	bl	917c <run_callbacks>
    9736:	b.n	93ca <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9738:	ldr	r0, [pc, #72]	; (9784 <isr+0x540>)
    973a:	bl	917c <run_callbacks>
    973e:	b.n	93c4 <isr+0x180>
    9740:	.word	0x402e01c0
    9744:	.word	0x2000d020
    9748:	.word	0x2000c078
    974c:	.word	0x2000c10c
    9750:	.word	0x2000c041
    9754:	.word	0x2000c070
    9758:	.word	0x2000c060
    975c:	.word	0x200006c8
    9760:	.word	0x2000c058
    9764:	.word	0x2000d000
    9768:	.word	0x00078080
    976c:	.word	0x2000e068
    9770:	.word	0x2000c068
    9774:	.word	0x2000c104
    9778:	.word	0x2000c054
    977c:	.word	0x2000e100
    9780:	.word	0x2000e180
    9784:	.word	0x2000e140

00009788 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9788:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    978a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    978e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9792:	ite	ne
    9794:	movne	r7, #0
    9796:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    979a:	cmp	r2, #2
    979c:	bls.n	97a2 <usb_config_rx+0x1a>
    979e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    97a2:	mov.w	sl, r0, lsl #7
    97a6:	ldr.w	r9, [pc, #64]	; 97e8 <usb_config_rx+0x60>
    97aa:	mov	r5, r1
    97ac:	mov	r4, r0
    97ae:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    97b2:	movs	r1, #0
    97b4:	movs	r2, #64	; 0x40
    97b6:	mov	r8, r3
    97b8:	mov	r0, r6
    97ba:	bl	aae8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    97be:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    97c0:	orr.w	r1, r7, r5, lsl #16
    97c4:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    97c8:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    97cc:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    97ce:	cmp.w	r8, #0
    97d2:	beq.n	979e <usb_config_rx+0x16>
    97d4:	ldr	r3, [pc, #12]	; (97e4 <usb_config_rx+0x5c>)
    97d6:	lsls	r0, r4
    97d8:	ldr	r4, [r3, #0]
    97da:	orrs	r0, r4
    97dc:	str	r0, [r3, #0]
    97de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97e2:	nop
    97e4:	.word	0x2000c048
    97e8:	.word	0x2000e000

000097ec <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    97ec:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    97ee:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    97f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    97f6:	ite	ne
    97f8:	movne	r7, #0
    97fa:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    97fe:	cmp	r2, #2
    9800:	bls.n	9806 <usb_config_tx+0x1a>
    9802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9806:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9808:	lsls	r5, r0, #7
    980a:	ldr.w	r9, [pc, #68]	; 9850 <usb_config_tx+0x64>
    980e:	mov	r8, r1
    9810:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9812:	movs	r1, #0
    9814:	mov	r4, r0
    9816:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9818:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    981c:	mov	r0, sl
    981e:	bl	aae8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9822:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9824:	orr.w	r1, r7, r8, lsl #16
    9828:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    982c:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9830:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9834:	cmp	r6, #0
    9836:	beq.n	9802 <usb_config_tx+0x16>
    9838:	add.w	r0, r4, #16
    983c:	ldr	r3, [pc, #12]	; (984c <usb_config_tx+0x60>)
    983e:	lsls	r2, r0
    9840:	ldr	r0, [r3, #0]
    9842:	orrs	r2, r0
    9844:	str	r2, [r3, #0]
    9846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    984a:	nop
    984c:	.word	0x2000c048
    9850:	.word	0x2000e000

00009854 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9854:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9856:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9858:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    985a:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    985e:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9860:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9862:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9864:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9868:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    986c:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9870:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9874:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9876:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9878:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    987a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    987c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    987e:	pop	{r4, r5, r6, r7}
    9880:	bx	lr
    9882:	nop

00009884 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9884:	subs	r3, r0, #2
    9886:	cmp	r3, #2
    9888:	bls.n	988c <usb_transmit+0x8>
    988a:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    988c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    988e:	ldr	r3, [pc, #24]	; (98a8 <usb_transmit+0x24>)
    9890:	add.w	r4, r0, #16
    9894:	movs	r5, #1
    9896:	mov	r2, r1
    9898:	add.w	r0, r3, r0, lsl #7
    989c:	lsl.w	r1, r5, r4
}
    98a0:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    98a2:	b.w	9120 <schedule_transfer>
    98a6:	nop
    98a8:	.word	0x2000e040

000098ac <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    98ac:	subs	r3, r0, #2
    98ae:	cmp	r3, #2
    98b0:	bls.n	98b4 <usb_receive+0x8>
    98b2:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    98b4:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    98b6:	ldr	r3, [pc, #20]	; (98cc <usb_receive+0x20>)
    98b8:	movs	r4, #1
    98ba:	mov	r2, r1
    98bc:	lsl.w	r1, r4, r0
    98c0:	add.w	r0, r3, r0, lsl #7
}
    98c4:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    98c8:	b.w	9120 <schedule_transfer>
    98cc:	.word	0x2000e000

000098d0 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    98d0:	ldr	r2, [pc, #32]	; (98f4 <usb_transfer_status+0x24>)
    98d2:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    98d6:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    98d8:	orr.w	r3, r3, #16384	; 0x4000
    98dc:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    98e0:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    98e2:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    98e6:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    98e8:	tst.w	r3, #16384	; 0x4000
    98ec:	beq.n	98d6 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    98ee:	mov	r0, r1
    98f0:	bx	lr
    98f2:	nop
    98f4:	.word	0x402e0000

000098f8 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    98f8:	ldr	r3, [pc, #36]	; (9920 <rtc_set+0x28>)
    98fa:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    98fc:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    98fe:	bic.w	r2, r2, #1
    9902:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    9904:	ldr	r3, [r1, #8]
    9906:	ldr	r2, [pc, #24]	; (9920 <rtc_set+0x28>)
    9908:	lsls	r3, r3, #31
    990a:	bmi.n	9904 <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    990c:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    990e:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    9910:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    9912:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    9914:	ldr	r3, [r2, #8]
    9916:	orr.w	r3, r3, #1
    991a:	str	r3, [r2, #8]
    991c:	bx	lr
    991e:	nop
    9920:	.word	0x400d4000

00009924 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9924:	cmp	r0, #0
    9926:	beq.n	99ce <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    9928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    992c:	mov	r9, r0
    992e:	sub	sp, #12
    9930:	ldr	r4, [pc, #156]	; (99d0 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9932:	movs	r0, #1
    9934:	ldr	r5, [pc, #156]	; (99d4 <delay+0xb0>)
    9936:	ldr	r6, [pc, #160]	; (99d8 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9938:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    993c:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    993e:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9940:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    9944:	cmp	r3, #0
    9946:	bne.n	9938 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9948:	ldr	r7, [pc, #144]	; (99dc <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    994a:	mov.w	lr, #1000	; 0x3e8
    994e:	ldr	r0, [pc, #144]	; (99e0 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    9950:	ldr.w	ip, [r7]
    9954:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9956:	add.w	r7, r7, #1660944384	; 0x63000000
    995a:	ldr	r3, [r0, #0]
    995c:	rsb	r1, r1, ip
    9960:	add.w	r7, r7, #1818624	; 0x1bc000
    9964:	addw	r7, r7, #3711	; 0xe7f
    9968:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    996c:	mov	sl, r7
    996e:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9970:	lsrs	r3, r3, #18
    9972:	udiv	r3, r1, r3
    9976:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    997a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    997e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9980:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9982:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    9986:	cmp	r3, #0
    9988:	bne.n	997a <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    998a:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    998e:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9992:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9994:	mul.w	r2, lr, r2
    9998:	rsb	r1, r1, ip
    999c:	umull	r3, lr, sl, r3
    99a0:	rsb	r3, r8, r2
    99a4:	mov.w	r2, lr, lsr #18
    99a8:	udiv	r1, r1, r2
    99ac:	adds	r2, r1, r3
    99ae:	cmp.w	r2, #1000	; 0x3e8
    99b2:	bcc.n	99c4 <delay+0xa0>
			if (--msec == 0) return;
    99b4:	subs.w	r9, r9, #1
			start += 1000;
    99b8:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    99bc:	bne.n	997a <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    99be:	add	sp, #12
    99c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c4:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    99c6:	bl	9b9c <yield>
	}
    99ca:	ldr	r0, [sp, #4]
    99cc:	b.n	997a <delay+0x56>
    99ce:	bx	lr
    99d0:	.word	0x2000e280
    99d4:	.word	0x2000c078
    99d8:	.word	0x2000c074
    99dc:	.word	0xe0001004
    99e0:	.word	0x20000bec

000099e4 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    99e4:	push	{r4, r5, r6}
    99e6:	ldr	r3, [pc, #56]	; (9a20 <micros+0x3c>)
    99e8:	movs	r6, #1
    99ea:	ldr	r5, [pc, #56]	; (9a24 <micros+0x40>)
    99ec:	ldr	r0, [pc, #56]	; (9a28 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    99ee:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    99f2:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    99f4:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    99f6:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    99fa:	cmp	r2, #0
    99fc:	bne.n	99ee <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    99fe:	ldr	r3, [pc, #44]	; (9a2c <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9a00:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9a04:	ldr	r2, [pc, #40]	; (9a30 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    9a06:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9a08:	ldr	r5, [pc, #40]	; (9a34 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9a0a:	ldr	r2, [r2, #0]
	return usec;
    9a0c:	subs	r4, r3, r4
    9a0e:	umull	r2, r3, r5, r2
    9a12:	lsrs	r3, r3, #18
    9a14:	udiv	r4, r4, r3
}
    9a18:	mla	r0, r0, r1, r4
    9a1c:	pop	{r4, r5, r6}
    9a1e:	bx	lr
    9a20:	.word	0x2000e280
    9a24:	.word	0x2000c078
    9a28:	.word	0x2000c074
    9a2c:	.word	0xe0001004
    9a30:	.word	0x20000bec
    9a34:	.word	0x431bde83

00009a38 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    9a38:	cmp	r0, #28
    9a3a:	bhi.n	9a68 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    9a3c:	ldr	r1, [pc, #68]	; (9a84 <analogRead+0x4c>)
    9a3e:	ldrb	r3, [r1, #0]
    9a40:	cbz	r3, 9a4e <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    9a42:	ldr	r2, [pc, #68]	; (9a88 <analogRead+0x50>)
    9a44:	ldr	r3, [r2, #72]	; 0x48
    9a46:	ands.w	r3, r3, #128	; 0x80
    9a4a:	bne.n	9a44 <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    9a4c:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    9a4e:	ldr	r3, [pc, #60]	; (9a8c <analogRead+0x54>)
    9a50:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    9a52:	lsls	r2, r3, #24
    9a54:	bmi.n	9a6c <analogRead+0x34>
		ADC1_HC0 = ch;
    9a56:	ldr	r2, [pc, #48]	; (9a88 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9a58:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    9a5a:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9a5c:	ldr	r3, [r1, #32]
    9a5e:	ldr	r2, [pc, #40]	; (9a88 <analogRead+0x50>)
    9a60:	lsls	r0, r3, #31
    9a62:	bpl.n	9a5c <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    9a64:	ldr	r0, [r2, #36]	; 0x24
    9a66:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    9a68:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    9a6a:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    9a6c:	ldr	r2, [pc, #32]	; (9a90 <analogRead+0x58>)
    9a6e:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    9a72:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    9a74:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    9a76:	ldr	r3, [r1, #32]
    9a78:	ldr	r2, [pc, #20]	; (9a90 <analogRead+0x58>)
    9a7a:	lsls	r3, r3, #31
    9a7c:	bpl.n	9a76 <analogRead+0x3e>
		return ADC2_R0;
    9a7e:	ldr	r0, [r2, #36]	; 0x24
    9a80:	bx	lr
    9a82:	nop
    9a84:	.word	0x2000c07c
    9a88:	.word	0x400c4000
    9a8c:	.word	0x2000042c
    9a90:	.word	0x400c8000

00009a94 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9a94:	lsls	r0, r0, #4
    9a96:	ldr	r3, [pc, #28]	; (9ab4 <digitalWrite.part.0+0x20>)
    9a98:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    9a9a:	ldr	r3, [r3, r0]
	mask = p->mask;
    9a9c:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    9a9e:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    9aa0:	tst	r0, r2
    9aa2:	beq.n	9aaa <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    9aa4:	cbnz	r1, 9aac <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    9aa6:	str.w	r2, [r3, #136]	; 0x88
    9aaa:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    9aac:	str.w	r2, [r3, #132]	; 0x84
    9ab0:	bx	lr
    9ab2:	nop
    9ab4:	.word	0x20000448

00009ab8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9ab8:	cmp	r0, #39	; 0x27
    9aba:	bhi.n	9ac0 <digitalWrite+0x8>
    9abc:	b.w	9a94 <digitalWrite.part.0>
    9ac0:	bx	lr
    9ac2:	nop

00009ac4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9ac4:	cmp	r0, #39	; 0x27
    9ac6:	bhi.n	9b02 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9ac8:	lsls	r0, r0, #4
    9aca:	ldr	r2, [pc, #104]	; (9b34 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9acc:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9ace:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9ad2:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9ad4:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9ad6:	beq.n	9b04 <pinMode+0x40>
    9ad8:	cmp	r1, #4
    9ada:	beq.n	9b04 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9adc:	ldr	r4, [r3, #12]
    9ade:	ldr	r2, [r0, #4]
    9ae0:	bic.w	r2, r2, r4
    9ae4:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9ae6:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9ae8:	cbz	r1, 9b26 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9aea:	cmp	r1, #2
    9aec:	beq.n	9b2c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9aee:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9af0:	ldr	r3, [r3, #4]
}
    9af2:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9af6:	ite	eq
    9af8:	ldreq	r1, [pc, #60]	; (9b38 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9afa:	ldrne	r1, [pc, #64]	; (9b3c <pinMode+0x78>)
    9afc:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9afe:	movs	r2, #21
    9b00:	str	r2, [r3, #0]
}
    9b02:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9b04:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9b06:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9b08:	ldr	r4, [r0, #4]
    9b0a:	orr.w	r2, r2, r4
    9b0e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9b10:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    9b12:	beq.n	9b26 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9b14:	movw	r1, #2104	; 0x838
    9b18:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9b1a:	ldr	r3, [r3, #4]
    9b1c:	movs	r2, #21
}
    9b1e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9b22:	str	r2, [r3, #0]
}
    9b24:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9b26:	movs	r1, #56	; 0x38
    9b28:	str	r1, [r2, #0]
    9b2a:	b.n	9b1a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9b2c:	ldr	r1, [pc, #16]	; (9b40 <pinMode+0x7c>)
    9b2e:	str	r1, [r2, #0]
    9b30:	b.n	9b1a <pinMode+0x56>
    9b32:	nop
    9b34:	.word	0x20000448
    9b38:	.word	0x00013038
    9b3c:	.word	0x00010038
    9b40:	.word	0x0001f038

00009b44 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9b44:	ldr	r2, [pc, #72]	; (9b90 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9b46:	ldr	r3, [pc, #76]	; (9b94 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9b48:	ldr.w	r0, [r2, #544]	; 0x220
    9b4c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9b50:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    9b52:	push	{r4, lr}
    9b54:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9b56:	bhi.n	9b5e <usb_init_serialnumber+0x1a>
    9b58:	add.w	r0, r0, r0, lsl #2
    9b5c:	lsls	r0, r0, #1
    9b5e:	ldr	r4, [pc, #56]	; (9b98 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    9b60:	add	r1, sp, #4
    9b62:	movs	r2, #10
    9b64:	bl	a144 <ultoa>
    9b68:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    9b6a:	movs	r3, #0
    9b6c:	mov	r0, r4
		char c = buf[i];
    9b6e:	ldrb.w	r2, [r1], #1
    9b72:	adds	r3, #1
		if (!c) break;
    9b74:	cbz	r2, 9b86 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9b76:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9b78:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9b7c:	bne.n	9b6e <usb_init_serialnumber+0x2a>
    9b7e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9b80:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    9b82:	add	sp, #16
    9b84:	pop	{r4, pc}
    9b86:	lsls	r3, r3, #1
    9b88:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9b8a:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    9b8c:	add	sp, #16
    9b8e:	pop	{r4, pc}
    9b90:	.word	0x401f4400
    9b94:	.word	0x0098967f
    9b98:	.word	0x20000c88

00009b9c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9b9c:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9b9e:	ldr	r4, [pc, #132]	; (9c24 <yield+0x88>)
    9ba0:	ldrb	r3, [r4, #0]
    9ba2:	cbnz	r3, 9bc6 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9ba4:	ldr	r3, [pc, #128]	; (9c28 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9ba6:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9ba8:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9baa:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9bac:	cbnz	r3, 9bf6 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9bae:	ldr	r3, [pc, #124]	; (9c2c <yield+0x90>)
    9bb0:	ldrb	r3, [r3, #0]
    9bb2:	cmp	r3, #0
    9bb4:	bne.n	9c0a <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    9bb6:	ldr	r3, [pc, #120]	; (9c30 <yield+0x94>)

	running = 0;
    9bb8:	movs	r1, #0
    9bba:	ldr	r2, [r3, #0]
    9bbc:	strb	r1, [r4, #0]
    9bbe:	cbz	r2, 9bc6 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9bc0:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9bc4:	cbz	r2, 9bc8 <yield+0x2c>
    9bc6:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9bc8:	mrs	r0, PRIMASK
		__disable_irq();
    9bcc:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9bce:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    9bd0:	cbz	r2, 9c10 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9bd2:	ldr	r4, [pc, #96]	; (9c34 <yield+0x98>)
    9bd4:	ldrb	r1, [r4, #0]
    9bd6:	cbnz	r1, 9c10 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9bd8:	movs	r6, #1
		firstYield = first->_next;
    9bda:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9bdc:	strb	r6, [r4, #0]
		firstYield = first->_next;
    9bde:	str	r5, [r3, #0]
		if (firstYield) {
    9be0:	cbz	r5, 9c18 <yield+0x7c>
			firstYield->_prev = nullptr;
    9be2:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9be4:	cbnz	r0, 9be8 <yield+0x4c>
    9be6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9be8:	movs	r5, #0
		(*(first->_function))(*first);
    9bea:	ldr	r3, [r2, #8]
    9bec:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9bee:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    9bf0:	blx	r3
		runningFromYield = false;
    9bf2:	strb	r5, [r4, #0]
    9bf4:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9bf6:	bl	8d48 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9bfa:	cmp	r0, #0
    9bfc:	beq.n	9bae <yield+0x12>
    9bfe:	bl	9f0c <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9c02:	ldr	r3, [pc, #40]	; (9c2c <yield+0x90>)
    9c04:	ldrb	r3, [r3, #0]
    9c06:	cmp	r3, #0
    9c08:	beq.n	9bb6 <yield+0x1a>
    9c0a:	bl	a44c <HardwareSerial::processSerialEvents()>
    9c0e:	b.n	9bb6 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c10:	cmp	r0, #0
    9c12:	bne.n	9bc6 <yield+0x2a>
    9c14:	cpsie	i
    9c16:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9c18:	ldr	r3, [pc, #28]	; (9c38 <yield+0x9c>)
    9c1a:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c1c:	cmp	r0, #0
    9c1e:	bne.n	9be8 <yield+0x4c>
    9c20:	b.n	9be6 <yield+0x4a>
    9c22:	nop
    9c24:	.word	0x2000c07d
    9c28:	.word	0x20000c9e
    9c2c:	.word	0x2000c0cc
    9c30:	.word	0x2000c094
    9c34:	.word	0x2000c098
    9c38:	.word	0x2000c090

00009c3c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    9c3c:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    9c3e:	ldr	r4, [pc, #100]	; (9ca4 <random(unsigned long) [clone .part.0]+0x68>)
    9c40:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    9c42:	cbz	r3, 9c88 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    9c44:	ldr	r1, [pc, #96]	; (9ca8 <random(unsigned long) [clone .part.0]+0x6c>)
    9c46:	asrs	r5, r3, #31
    9c48:	ldr.w	lr, [pc, #104]	; 9cb4 <random(unsigned long) [clone .part.0]+0x78>
    9c4c:	smull	r6, r7, r3, r1
    9c50:	ldr	r6, [pc, #88]	; (9cac <random(unsigned long) [clone .part.0]+0x70>)
    9c52:	smull	r2, r1, r1, r3
    9c56:	adds	r2, r3, r7
    9c58:	add	r1, r3
    9c5a:	rsb	r2, r5, r2, asr #16
    9c5e:	rsb	r1, r5, r1, asr #16
    9c62:	movw	r5, #16807	; 0x41a7
    9c66:	mls	r2, lr, r2, r3
    9c6a:	mul.w	r1, r6, r1
    9c6e:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    9c72:	cmp	r3, #0
    9c74:	bge.n	9c96 <random(unsigned long) [clone .part.0]+0x5a>
    9c76:	mvn.w	r2, #2147483648	; 0x80000000
    9c7a:	add	r2, r3
    9c7c:	udiv	r3, r2, r0
	seed = x;
    9c80:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9c82:	mls	r0, r0, r3, r2
    9c86:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    9c88:	ldr	r2, [pc, #36]	; (9cb0 <random(unsigned long) [clone .part.0]+0x74>)
    9c8a:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    9c8e:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9c90:	mls	r0, r0, r3, r2
    9c94:	pop	{r4, r5, r6, r7, pc}
    9c96:	mov	r2, r3
    9c98:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    9c9c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9c9e:	mls	r0, r0, r3, r2
    9ca2:	pop	{r4, r5, r6, r7, pc}
    9ca4:	.word	0x2000c080
    9ca8:	.word	0x834e0b5f
    9cac:	.word	0xfffff4ec
    9cb0:	.word	0x1f0cce42
    9cb4:	.word	0x0001f31d

00009cb8 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    9cb8:	cbz	r0, 9cbe <randomSeed(unsigned long)+0x6>
    9cba:	ldr	r3, [pc, #4]	; (9cc0 <randomSeed(unsigned long)+0x8>)
    9cbc:	str	r0, [r3, #0]
    9cbe:	bx	lr
    9cc0:	.word	0x2000c080

00009cc4 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    9cc4:	cbz	r0, 9cca <random(unsigned long)+0x6>
    9cc6:	b.w	9c3c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    9cca:	bx	lr

00009ccc <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    9ccc:	cmp	r0, r1
    9cce:	bge.n	9cde <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    9cd0:	push	{r4, lr}
    9cd2:	mov	r4, r0
    9cd4:	subs	r0, r1, r0
    9cd6:	bl	9c3c <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    9cda:	add	r0, r4
}
    9cdc:	pop	{r4, pc}
    9cde:	bx	lr

00009ce0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9ce0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9ce2:	mrs	r2, PRIMASK
		__disable_irq();
    9ce6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9ce8:	ldrb	r3, [r0, #29]
    9cea:	cbnz	r3, 9cfa <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9cec:	ldrb	r1, [r0, #28]
    9cee:	cmp	r1, #1
    9cf0:	beq.n	9d04 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9cf2:	cmp	r1, #3
    9cf4:	beq.n	9d18 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9cf6:	movs	r3, #1
    9cf8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9cfa:	cbnz	r2, 9cfe <EventResponder::triggerEventNotImmediate()+0x1e>
    9cfc:	cpsie	i
	}
	enableInterrupts(irq);
}
    9cfe:	ldr.w	r4, [sp], #4
    9d02:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9d04:	ldr	r4, [pc, #68]	; (9d4c <EventResponder::triggerEventNotImmediate()+0x6c>)
    9d06:	ldr	r1, [r4, #0]
    9d08:	cbz	r1, 9d34 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9d0a:	ldr	r1, [pc, #68]	; (9d50 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9d0c:	str	r3, [r0, #20]
				_prev = lastYield;
    9d0e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    9d10:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9d12:	str	r3, [r0, #24]
				_prev->_next = this;
    9d14:	str	r0, [r3, #20]
    9d16:	b.n	9cf6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9d18:	ldr	r4, [pc, #56]	; (9d54 <EventResponder::triggerEventNotImmediate()+0x74>)
    9d1a:	ldr	r1, [r4, #0]
    9d1c:	cbz	r1, 9d40 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9d1e:	ldr	r1, [pc, #56]	; (9d58 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9d20:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9d22:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    9d24:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9d26:	str	r3, [r0, #24]
				_prev->_next = this;
    9d28:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9d2a:	ldr	r3, [pc, #48]	; (9d5c <EventResponder::triggerEventNotImmediate()+0x7c>)
    9d2c:	mov.w	r1, #268435456	; 0x10000000
    9d30:	str	r1, [r3, #0]
    9d32:	b.n	9cf6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9d34:	ldr	r3, [pc, #24]	; (9d50 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9d36:	str	r1, [r0, #20]
				_prev = nullptr;
    9d38:	str	r1, [r0, #24]
				firstYield = this;
    9d3a:	str	r0, [r4, #0]
				lastYield = this;
    9d3c:	str	r0, [r3, #0]
    9d3e:	b.n	9cf6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9d40:	ldr	r3, [pc, #20]	; (9d58 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9d42:	str	r1, [r0, #20]
				_prev = nullptr;
    9d44:	str	r1, [r0, #24]
				firstInterrupt = this;
    9d46:	str	r0, [r4, #0]
				lastInterrupt = this;
    9d48:	str	r0, [r3, #0]
    9d4a:	b.n	9d2a <EventResponder::triggerEventNotImmediate()+0x4a>
    9d4c:	.word	0x2000c094
    9d50:	.word	0x2000c090
    9d54:	.word	0x2000c084
    9d58:	.word	0x2000c088
    9d5c:	.word	0xe000ed04

00009d60 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    9d60:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9d62:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9d64:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9d66:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9d68:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9d6a:	beq.n	9d74 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    9d6c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9d70:	b.w	9ce0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9d74:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    9d76:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9d7a:	bx	r3

00009d7c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9d7c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9d7e:	mrs	r1, PRIMASK
		__disable_irq();
    9d82:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9d84:	ldr	r4, [pc, #48]	; (9db8 <EventResponder::runFromInterrupt()+0x3c>)
    9d86:	ldr	r3, [r4, #0]
		if (first) {
    9d88:	cbz	r3, 9dae <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9d8a:	ldr	r6, [pc, #48]	; (9dbc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9d8c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9d8e:	ldr	r2, [r3, #20]
    9d90:	str	r2, [r4, #0]
			if (firstInterrupt) {
    9d92:	cbz	r2, 9db4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9d94:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9d96:	cbnz	r1, 9d9a <EventResponder::runFromInterrupt()+0x1e>
    9d98:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9d9a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9d9c:	mov	r0, r3
    9d9e:	ldr	r3, [r3, #8]
    9da0:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9da2:	mrs	r1, PRIMASK
		__disable_irq();
    9da6:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9da8:	ldr	r3, [r4, #0]
		if (first) {
    9daa:	cmp	r3, #0
    9dac:	bne.n	9d8e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9dae:	cbnz	r1, 9db2 <EventResponder::runFromInterrupt()+0x36>
    9db0:	cpsie	i
    9db2:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9db4:	str	r2, [r6, #0]
    9db6:	b.n	9d96 <EventResponder::runFromInterrupt()+0x1a>
    9db8:	.word	0x2000c084
    9dbc:	.word	0x2000c088

00009dc0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9dc0:	b.w	9d7c <EventResponder::runFromInterrupt()>

00009dc4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9dc4:	ldr	r2, [pc, #96]	; (9e28 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9dc6:	push	{r4, r5}
	if (listActive == nullptr) {
    9dc8:	ldr	r4, [r2, #0]
    9dca:	cmp	r4, #0
    9dcc:	beq.n	9e20 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9dce:	ldr	r3, [r0, #0]
    9dd0:	ldr	r1, [r4, #0]
    9dd2:	cmp	r3, r1
    9dd4:	bcs.n	9df6 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9dd6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9dd8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9dda:	str	r4, [r0, #8]
		_prev = nullptr;
    9ddc:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9dde:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9de0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9de2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9de4:	movs	r3, #2
}
    9de6:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9de8:	strb	r3, [r0, #20]
}
    9dea:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    9dec:	str	r3, [r0, #0]
    9dee:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9df0:	ldr	r1, [r2, #0]
    9df2:	cmp	r3, r1
    9df4:	bcc.n	9e08 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9df6:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9df8:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9dfa:	cmp	r2, #0
    9dfc:	bne.n	9dec <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9dfe:	str	r2, [r0, #8]
		_prev = timer;
    9e00:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9e02:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    9e04:	str	r0, [r4, #8]
    9e06:	b.n	9de4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9e08:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    9e0a:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9e0c:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    9e0e:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9e10:	str	r5, [r0, #12]
				timer->_prev = this;
    9e12:	str	r0, [r4, #12]
				_prev->_next = this;
    9e14:	ldr	r1, [r0, #12]
    9e16:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    9e18:	str	r3, [r4, #0]
				_state = TimerActive;
    9e1a:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9e1c:	pop	{r4, r5}
    9e1e:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9e20:	str	r4, [r0, #8]
		_prev = nullptr;
    9e22:	str	r4, [r0, #12]
		listActive = this;
    9e24:	str	r0, [r2, #0]
    9e26:	b.n	9de4 <MillisTimer::addToActiveList()+0x20>
    9e28:	.word	0x2000c08c

00009e2c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9e2c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9e2e:	ldr	r6, [pc, #136]	; (9eb8 <MillisTimer::runFromTimer()+0x8c>)
    9e30:	ldr	r4, [r6, #0]
	while (timer) {
    9e32:	cbz	r4, 9e80 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9e34:	ldr	r3, [r4, #0]
    9e36:	cmp	r3, #0
    9e38:	bne.n	9eb0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9e3a:	mov	r5, r3
    9e3c:	ldr	r7, [pc, #124]	; (9ebc <MillisTimer::runFromTimer()+0x90>)
    9e3e:	b.n	9e4a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9e40:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9e42:	cbz	r4, 9e80 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9e44:	ldr	r3, [r4, #0]
    9e46:	cmp	r3, #0
    9e48:	bne.n	9eb0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9e4a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9e4c:	cbz	r3, 9e50 <MillisTimer::runFromTimer()+0x24>
    9e4e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9e50:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9e52:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9e54:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9e56:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9e58:	ldr	r3, [r3, #0]
    9e5a:	cmp	r3, r7
    9e5c:	bne.n	9ea2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9e5e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9e60:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9e62:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9e64:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9e66:	beq.n	9eaa <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9e68:	bl	9ce0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9e6c:	ldr	r3, [r4, #4]
    9e6e:	cmp	r3, #0
    9e70:	beq.n	9e40 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9e72:	str	r3, [r4, #0]
				timer->addToActiveList();
    9e74:	mov	r0, r4
    9e76:	bl	9dc4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9e7a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9e7c:	cmp	r4, #0
    9e7e:	bne.n	9e44 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9e80:	mrs	r3, PRIMASK
		__disable_irq();
    9e84:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9e86:	ldr	r2, [pc, #56]	; (9ec0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9e88:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9e8a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9e8c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9e8e:	cbnz	r3, 9e92 <MillisTimer::runFromTimer()+0x66>
    9e90:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9e92:	cbz	r0, 9ea0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9e94:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9e96:	bl	9dc4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9e9a:	mov	r0, r4
    9e9c:	cmp	r0, #0
    9e9e:	bne.n	9e94 <MillisTimer::runFromTimer()+0x68>
    9ea0:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9ea2:	mov	r2, r4
    9ea4:	movs	r1, #0
    9ea6:	blx	r3
    9ea8:	b.n	9e6c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9eaa:	ldr	r3, [r0, #8]
    9eac:	blx	r3
    9eae:	b.n	9e6c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9eb0:	subs	r3, #1
    9eb2:	str	r3, [r4, #0]
			break;
    9eb4:	b.n	9e80 <MillisTimer::runFromTimer()+0x54>
    9eb6:	nop
    9eb8:	.word	0x2000c08c
    9ebc:	.word	0x00009d61
    9ec0:	.word	0x2000c09c

00009ec4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9ec4:	ldr	r2, [pc, #16]	; (9ed8 <systick_isr+0x14>)
    9ec6:	ldr	r3, [pc, #20]	; (9edc <systick_isr+0x18>)
    9ec8:	ldr	r1, [r2, #0]
	systick_millis_count++;
    9eca:	ldr	r2, [pc, #20]	; (9ee0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9ecc:	str	r1, [r3, #0]
	systick_millis_count++;
    9ece:	ldr	r3, [r2, #0]
    9ed0:	adds	r3, #1
    9ed2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9ed4:	b.w	9e2c <MillisTimer::runFromTimer()>
    9ed8:	.word	0xe0001004
    9edc:	.word	0x2000c074
    9ee0:	.word	0x2000c078

00009ee4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9ee4:	b.w	8d5c <usb_serial_flush_input>

00009ee8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9ee8:	b.w	8d24 <usb_serial_peekchar>

00009eec <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9eec:	b.w	8cd8 <usb_serial_getchar>

00009ef0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9ef0:	b.w	8d48 <usb_serial_available>

00009ef4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9ef4:	b.w	8e28 <usb_serial_flush_output>

00009ef8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9ef8:	b.w	8ddc <usb_serial_write_buffer_free>

00009efc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9efc:	mov	r0, r1
    9efe:	mov	r1, r2
    9f00:	b.w	8dc4 <usb_serial_write>

00009f04 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9f04:	mov	r0, r1
    9f06:	b.w	8d98 <usb_serial_putchar>
    9f0a:	nop

00009f0c <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    9f0c:	ldr	r3, [pc, #4]	; (9f14 <serialEvent()+0x8>)
    9f0e:	movs	r2, #0
    9f10:	strb	r2, [r3, #0]
    9f12:	bx	lr
    9f14:	.word	0x20000c9e

00009f18 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9f18:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    9f1a:	ldr	r4, [pc, #24]	; (9f34 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9f1c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9f1e:	ldr	r3, [r0, #0]
    9f20:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9f22:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    9f24:	add	r1, sp, #4
    9f26:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9f28:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    9f2c:	blx	r3
}
    9f2e:	add	sp, #8
    9f30:	pop	{r4, pc}
    9f32:	nop
    9f34:	.word	0x2000075c

00009f38 <operator new(unsigned int)>:
    9f38:	b.w	a558 <malloc>

00009f3c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9f3c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9f3e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9f42:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9f46:	bne.n	a024 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9f48:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9f4a:	bcc.n	9fd0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9f4c:	ldr.w	r3, [r1], #4
    9f50:	str.w	r3, [r0], #4
    9f54:	ldr.w	r3, [r1], #4
    9f58:	str.w	r3, [r0], #4
    9f5c:	ldr.w	r3, [r1], #4
    9f60:	str.w	r3, [r0], #4
    9f64:	ldr.w	r3, [r1], #4
    9f68:	str.w	r3, [r0], #4
    9f6c:	ldr.w	r3, [r1], #4
    9f70:	str.w	r3, [r0], #4
    9f74:	ldr.w	r3, [r1], #4
    9f78:	str.w	r3, [r0], #4
    9f7c:	ldr.w	r3, [r1], #4
    9f80:	str.w	r3, [r0], #4
    9f84:	ldr.w	r3, [r1], #4
    9f88:	str.w	r3, [r0], #4
    9f8c:	ldr.w	r3, [r1], #4
    9f90:	str.w	r3, [r0], #4
    9f94:	ldr.w	r3, [r1], #4
    9f98:	str.w	r3, [r0], #4
    9f9c:	ldr.w	r3, [r1], #4
    9fa0:	str.w	r3, [r0], #4
    9fa4:	ldr.w	r3, [r1], #4
    9fa8:	str.w	r3, [r0], #4
    9fac:	ldr.w	r3, [r1], #4
    9fb0:	str.w	r3, [r0], #4
    9fb4:	ldr.w	r3, [r1], #4
    9fb8:	str.w	r3, [r0], #4
    9fbc:	ldr.w	r3, [r1], #4
    9fc0:	str.w	r3, [r0], #4
    9fc4:	ldr.w	r3, [r1], #4
    9fc8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9fcc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9fce:	bcs.n	9f4c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9fd0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9fd2:	bcc.n	9ff8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9fd4:	ldr.w	r3, [r1], #4
    9fd8:	str.w	r3, [r0], #4
    9fdc:	ldr.w	r3, [r1], #4
    9fe0:	str.w	r3, [r0], #4
    9fe4:	ldr.w	r3, [r1], #4
    9fe8:	str.w	r3, [r0], #4
    9fec:	ldr.w	r3, [r1], #4
    9ff0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9ff4:	subs	r2, #16
	bhs	.Lmid_block_loop
    9ff6:	bcs.n	9fd4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9ff8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9ffa:	bcc.n	a008 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9ffc:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a000:	str.w	r3, [r0], #4
	subs	r2, #4
    a004:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a006:	bcs.n	9ffc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a008:	adds	r2, #4
	beq	.Ldone
    a00a:	beq.n	a01e <memcpy+0xe2>

	lsls	r2, r2, #31
    a00c:	lsls	r2, r2, #31
	itt ne
    a00e:	itt	ne
	ldrbne  r3, [r1], #1
    a010:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a014:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a018:	bcc.n	a01e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a01a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a01c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a01e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a020:	bx	lr
    a022:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a024:	cmp	r2, #8
	blo	.Lbyte_copy
    a026:	bcc.n	a050 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a028:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a02a:	beq.n	9f48 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a02c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a030:	beq.n	9f48 <memcpy+0xc>

	rsb	r3, #4
    a032:	rsb	r3, r3, #4
	subs	r2, r3
    a036:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a038:	lsls	r3, r3, #31
	itt ne
    a03a:	itt	ne
	ldrbne  r3, [r1], #1
    a03c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a040:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a044:	bcc.n	9f48 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a046:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a04a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a04e:	b.n	9f48 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a050:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a052:	bcc.n	a008 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a054:	subs	r2, #1
	ldrb    r3, [r1], #1
    a056:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a05a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a05e:	bcs.n	a054 <memcpy+0x118>

	ldrb	r3, [r1]
    a060:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a062:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a064:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a066:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a068:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a06a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a06c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a06e:	bx	lr

0000a070 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    a070:	movs	r0, #4
    a072:	mov	r1, lr
    a074:	tst	r0, r1
    a076:	beq.n	a080 <_MSP>
    a078:	mrs	r0, PSP
    a07c:	b.w	a088 <HardFault_HandlerC>

0000a080 <_MSP>:
    a080:	mrs	r0, MSP
    a084:	b.w	a088 <HardFault_HandlerC>

0000a088 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a088:	ldr	r3, [pc, #108]	; (a0f8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    a08a:	movs	r1, #5
    a08c:	ldr	r2, [pc, #108]	; (a0fc <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    a08e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    a090:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    a092:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    a096:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    a098:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    a09c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a09e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    a0a0:	ldr	r4, [pc, #92]	; (a100 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a0a2:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    a0a4:	ldr	r0, [pc, #92]	; (a104 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a0a6:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    a0a8:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    a0ac:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    a0b0:	ldr	r3, [r4, #0]
    a0b2:	cmp	r3, r0
    a0b4:	bls.n	a0bc <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    a0b6:	ldr	r0, [pc, #80]	; (a108 <HardFault_HandlerC+0x80>)
    a0b8:	bl	8e94 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    a0bc:	ldr	r5, [pc, #56]	; (a0f8 <HardFault_HandlerC+0x70>)
    a0be:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    a0c0:	movs	r0, #0
    a0c2:	ldr	r2, [pc, #72]	; (a10c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    a0c4:	ldr	r1, [pc, #72]	; (a110 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    a0c6:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    a0ca:	str	r0, [sp, #4]
    a0cc:	ldr	r3, [sp, #4]
    a0ce:	cmp	r3, r2
    a0d0:	bhi.n	a0de <HardFault_HandlerC+0x56>
    a0d2:	ldr	r3, [sp, #4]
    a0d4:	adds	r3, #1
    a0d6:	str	r3, [sp, #4]
    a0d8:	ldr	r3, [sp, #4]
    a0da:	cmp	r3, r2
    a0dc:	bls.n	a0d2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    a0de:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    a0e2:	str	r0, [sp, #4]
    a0e4:	ldr	r3, [sp, #4]
    a0e6:	cmp	r3, r1
    a0e8:	bhi.n	a0c6 <HardFault_HandlerC+0x3e>
    a0ea:	ldr	r3, [sp, #4]
    a0ec:	adds	r3, #1
    a0ee:	str	r3, [sp, #4]
    a0f0:	ldr	r3, [sp, #4]
    a0f2:	cmp	r3, r1
    a0f4:	bls.n	a0ea <HardFault_HandlerC+0x62>
    a0f6:	b.n	a0c6 <HardFault_HandlerC+0x3e>
    a0f8:	.word	0x401bc000
    a0fc:	.word	0x401f8000
    a100:	.word	0x20000bec
    a104:	.word	0x23c345ff
    a108:	.word	0x11e1a300
    a10c:	.word	0x000f423f
    a110:	.word	0x0089543f

0000a114 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    a114:	ldr	r2, [pc, #36]	; (a13c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    a116:	push	{r3, lr}
        char *prev = __brkval;
    a118:	ldr	r3, [r2, #0]
        if (incr != 0) {
    a11a:	cbz	r0, a126 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    a11c:	add	r0, r3
    a11e:	ldr	r1, [pc, #32]	; (a140 <_sbrk+0x2c>)
    a120:	cmp	r0, r1
    a122:	bhi.n	a12a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    a124:	str	r0, [r2, #0]
        }
        return prev;
}
    a126:	mov	r0, r3
    a128:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    a12a:	bl	a4fc <__errno>
    a12e:	movs	r2, #12
                        return (void *)-1;
    a130:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    a134:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    a136:	mov	r0, r3
    a138:	pop	{r3, pc}
    a13a:	nop
    a13c:	.word	0x20000cb0
    a140:	.word	0x20280000

0000a144 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a144:	push	{r4, r5, r6, r7}
    a146:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    a148:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a14a:	mov	r7, r6
    a14c:	b.n	a150 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a14e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a150:	udiv	r3, r0, r2
    a154:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a158:	add.w	r4, r0, #55	; 0x37
    a15c:	cmp	r0, #9
    a15e:	add.w	r0, r0, #48	; 0x30
    a162:	uxtb	r4, r4
    a164:	it	ls
    a166:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    a168:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a16a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    a16e:	cmp	r3, #0
    a170:	bne.n	a14e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a172:	adds	r2, r1, r5
    a174:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a176:	cbz	r5, a18c <ultoa+0x48>
    a178:	adds	r3, #1
		t = buf[j];
    a17a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    a17e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a180:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    a182:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a184:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a186:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a18a:	blt.n	a178 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a18c:	mov	r0, r1
    a18e:	pop	{r4, r5, r6, r7}
    a190:	bx	lr
    a192:	nop

0000a194 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a194:	ldr	r0, [pc, #656]	; (a428 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a196:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a19a:	ldr	r3, [pc, #656]	; (a42c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a19c:	ldr	r2, [r0, #120]	; 0x78
    a19e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    a1a2:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a1a4:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a1a6:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a1a8:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a1ac:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a1b0:	ldr	r4, [pc, #636]	; (a430 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a1b2:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a1b6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a1b8:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a1bc:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a1be:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a1c0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a1c4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a1c8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a1cc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a1d0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a1d4:	ldrh.w	r0, [r3, #392]	; 0x188
    a1d8:	uxth	r0, r0
    a1da:	orr.w	r0, r0, #240	; 0xf0
    a1de:	strh.w	r0, [r3, #392]	; 0x188
    a1e2:	add.w	r0, r1, r1, lsl #1
    a1e6:	ldr	r3, [pc, #580]	; (a42c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    a1e8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a1ea:	movs	r5, #0
    a1ec:	lsls	r0, r0, #5
    a1ee:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a1f0:	cmp	r1, #4
    a1f2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a1f4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a1f8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    a1fa:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a1fc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a1fe:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a200:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a202:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a204:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a206:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a208:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a20a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a20c:	bne.n	a1e2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a20e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a212:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a216:	ldr	r3, [pc, #540]	; (a434 <pwm_init+0x2a0>)
    a218:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a21c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a21e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a220:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a224:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a226:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a22a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a22e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a232:	ldrh.w	r0, [r4, #392]	; 0x188
    a236:	uxth	r0, r0
    a238:	orr.w	r0, r0, #3840	; 0xf00
    a23c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a240:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a244:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a248:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a24c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a250:	ldrh.w	r0, [r3, #392]	; 0x188
    a254:	uxth	r0, r0
    a256:	orr.w	r0, r0, #240	; 0xf0
    a25a:	strh.w	r0, [r3, #392]	; 0x188
    a25e:	add.w	r0, r1, r1, lsl #1
    a262:	ldr	r3, [pc, #464]	; (a434 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    a264:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a266:	movs	r5, #0
    a268:	lsls	r0, r0, #5
    a26a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a26c:	cmp	r1, #4
    a26e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a270:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a272:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a276:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a278:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a27a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a27c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a27e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a280:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a282:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a284:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a286:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a288:	bne.n	a25e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a28a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a28e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a292:	ldr	r3, [pc, #420]	; (a438 <pwm_init+0x2a4>)
    a294:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a298:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a29a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a29c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a2a0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a2a2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a2a6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a2aa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a2ae:	ldrh.w	r0, [r4, #392]	; 0x188
    a2b2:	uxth	r0, r0
    a2b4:	orr.w	r0, r0, #3840	; 0xf00
    a2b8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a2bc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a2c0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a2c4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a2c8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a2cc:	ldrh.w	r0, [r3, #392]	; 0x188
    a2d0:	uxth	r0, r0
    a2d2:	orr.w	r0, r0, #240	; 0xf0
    a2d6:	strh.w	r0, [r3, #392]	; 0x188
    a2da:	add.w	r0, r1, r1, lsl #1
    a2de:	ldr	r3, [pc, #344]	; (a438 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    a2e0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a2e2:	movs	r5, #0
    a2e4:	lsls	r0, r0, #5
    a2e6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a2e8:	cmp	r1, #4
    a2ea:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a2ec:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a2ee:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a2f2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a2f4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a2f6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a2f8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a2fa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a2fc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a2fe:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a300:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a302:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a304:	bne.n	a2da <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a306:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a30a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a30e:	ldr	r3, [pc, #300]	; (a43c <pwm_init+0x2a8>)
    a310:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a314:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a316:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a318:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a31c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a31e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a322:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a326:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a32a:	ldrh.w	r0, [r4, #392]	; 0x188
    a32e:	uxth	r0, r0
    a330:	orr.w	r0, r0, #3840	; 0xf00
    a334:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a338:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a33c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a340:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a344:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a348:	ldrh.w	r0, [r3, #392]	; 0x188
    a34c:	uxth	r0, r0
    a34e:	orr.w	r0, r0, #240	; 0xf0
    a352:	strh.w	r0, [r3, #392]	; 0x188
    a356:	add.w	r0, r1, r1, lsl #1
    a35a:	ldr	r3, [pc, #224]	; (a43c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    a35c:	adds	r1, #1
    a35e:	lsls	r0, r0, #5
    a360:	mov	r4, r3
    a362:	cmp	r1, #4
    a364:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a366:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a368:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a36c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a36e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a370:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a372:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a374:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    a376:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a378:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a37a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a37c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a37e:	bne.n	a356 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a380:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a384:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a386:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a388:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a38c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a38e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a392:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a394:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a398:	orrs	r3, r7
    a39a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a39e:	ldrh.w	r3, [r4, #392]	; 0x188
    a3a2:	uxth	r3, r3
    a3a4:	orr.w	r3, r3, #3840	; 0xf00
    a3a8:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a3ac:	lsls	r0, r2, #5
    a3ae:	ldr	r3, [pc, #144]	; (a440 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3b0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a3b2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3b4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a3b6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a3b8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3ba:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3bc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3be:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a3c2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a3c4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3c6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3c8:	bne.n	a3ac <pwm_init+0x218>
    a3ca:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3cc:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3ce:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3d2:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a3d6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3d8:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a3dc:	lsls	r0, r2, #5
    a3de:	ldr	r3, [pc, #100]	; (a444 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3e0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a3e2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3e4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a3e6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a3e8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3ea:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3ec:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3ee:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a3f0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a3f2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3f4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a3f6:	bne.n	a3dc <pwm_init+0x248>
    a3f8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3fa:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3fc:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a400:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a404:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a406:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a40a:	lsls	r0, r2, #5
    a40c:	ldr	r3, [pc, #56]	; (a448 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a40e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a410:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a412:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a414:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a416:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a418:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a41a:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a41c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a41e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a420:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a422:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a424:	bne.n	a40a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a426:	pop	{r4, r5, r6, r7, pc}
    a428:	.word	0x400fc000
    a42c:	.word	0x403dc000
    a430:	.word	0xfc030000
    a434:	.word	0x403e0000
    a438:	.word	0x403e4000
    a43c:	.word	0x403e8000
    a440:	.word	0x401dc000
    a444:	.word	0x401e0000
    a448:	.word	0x401e4000

0000a44c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    a44c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    a44e:	ldr	r3, [pc, #28]	; (a46c <HardwareSerial::processSerialEvents()+0x20>)
    a450:	ldrb	r4, [r3, #0]
    a452:	cbz	r4, a468 <HardwareSerial::processSerialEvents()+0x1c>
    a454:	ldr	r5, [pc, #24]	; (a470 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    a456:	ldr.w	r3, [r5, #4]!
    a45a:	cmp	r3, #0
    a45c:	beq.n	a456 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    a45e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    a460:	subs	r3, r4, #1
    a462:	ands.w	r4, r3, #255	; 0xff
    a466:	bne.n	a456 <HardwareSerial::processSerialEvents()+0xa>
    a468:	pop	{r3, r4, r5, pc}
    a46a:	nop
    a46c:	.word	0x2000c0cc
    a470:	.word	0x2000c0ac

0000a474 <__aeabi_atexit>:
    a474:	mov	r3, r1
    a476:	mov	r1, r0
    a478:	mov	r0, r3
    a47a:	b.w	a4f0 <__cxa_atexit>
    a47e:	nop

0000a480 <calloc>:
    a480:	ldr	r3, [pc, #8]	; (a48c <calloc+0xc>)
    a482:	mov	r2, r1
    a484:	mov	r1, r0
    a486:	ldr	r0, [r3, #0]
    a488:	b.w	a490 <_calloc_r>
    a48c:	.word	0x200010e0

0000a490 <_calloc_r>:
    a490:	push	{r4, lr}
    a492:	mul.w	r1, r2, r1
    a496:	bl	a578 <_malloc_r>
    a49a:	mov	r4, r0
    a49c:	cbz	r0, a4d6 <_calloc_r+0x46>
    a49e:	ldr.w	r2, [r0, #-4]
    a4a2:	bic.w	r2, r2, #3
    a4a6:	subs	r2, #4
    a4a8:	cmp	r2, #36	; 0x24
    a4aa:	bhi.n	a4de <_calloc_r+0x4e>
    a4ac:	cmp	r2, #19
    a4ae:	bls.n	a4da <_calloc_r+0x4a>
    a4b0:	movs	r3, #0
    a4b2:	cmp	r2, #27
    a4b4:	str	r3, [r0, #0]
    a4b6:	str	r3, [r0, #4]
    a4b8:	bls.n	a4e8 <_calloc_r+0x58>
    a4ba:	cmp	r2, #36	; 0x24
    a4bc:	str	r3, [r0, #8]
    a4be:	str	r3, [r0, #12]
    a4c0:	iteee	ne
    a4c2:	addne.w	r2, r0, #16
    a4c6:	streq	r3, [r0, #16]
    a4c8:	streq	r3, [r0, #20]
    a4ca:	addeq.w	r2, r0, #24
    a4ce:	movs	r3, #0
    a4d0:	str	r3, [r2, #0]
    a4d2:	str	r3, [r2, #4]
    a4d4:	str	r3, [r2, #8]
    a4d6:	mov	r0, r4
    a4d8:	pop	{r4, pc}
    a4da:	mov	r2, r0
    a4dc:	b.n	a4ce <_calloc_r+0x3e>
    a4de:	movs	r1, #0
    a4e0:	bl	aae8 <memset>
    a4e4:	mov	r0, r4
    a4e6:	pop	{r4, pc}
    a4e8:	add.w	r2, r0, #8
    a4ec:	b.n	a4ce <_calloc_r+0x3e>
    a4ee:	nop

0000a4f0 <__cxa_atexit>:
    a4f0:	mov	r3, r2
    a4f2:	mov	r2, r1
    a4f4:	mov	r1, r0
    a4f6:	movs	r0, #2
    a4f8:	b.w	abb0 <__register_exitproc>

0000a4fc <__errno>:
    a4fc:	ldr	r3, [pc, #4]	; (a504 <__errno+0x8>)
    a4fe:	ldr	r0, [r3, #0]
    a500:	bx	lr
    a502:	nop
    a504:	.word	0x200010e0

0000a508 <__libc_init_array>:
    a508:	push	{r4, r5, r6, lr}
    a50a:	ldr	r6, [pc, #60]	; (a548 <__libc_init_array+0x40>)
    a50c:	ldr	r5, [pc, #60]	; (a54c <__libc_init_array+0x44>)
    a50e:	subs	r6, r6, r5
    a510:	asrs	r6, r6, #2
    a512:	it	ne
    a514:	movne	r4, #0
    a516:	beq.n	a524 <__libc_init_array+0x1c>
    a518:	adds	r4, #1
    a51a:	ldr.w	r3, [r5], #4
    a51e:	blx	r3
    a520:	cmp	r6, r4
    a522:	bne.n	a518 <__libc_init_array+0x10>
    a524:	ldr	r6, [pc, #40]	; (a550 <__libc_init_array+0x48>)
    a526:	ldr	r5, [pc, #44]	; (a554 <__libc_init_array+0x4c>)
    a528:	subs	r6, r6, r5
    a52a:	bl	aec0 <___init_veneer>
    a52e:	asrs	r6, r6, #2
    a530:	it	ne
    a532:	movne	r4, #0
    a534:	beq.n	a544 <__libc_init_array+0x3c>
    a536:	adds	r4, #1
    a538:	ldr.w	r3, [r5], #4
    a53c:	blx	r3
    a53e:	cmp	r6, r4
    a540:	bne.n	a536 <__libc_init_array+0x2e>
    a542:	pop	{r4, r5, r6, pc}
    a544:	pop	{r4, r5, r6, pc}
    a546:	nop
    a548:	.word	0x60001600
    a54c:	.word	0x60001600
    a550:	.word	0x6000160c
    a554:	.word	0x60001600

0000a558 <malloc>:
    a558:	ldr	r3, [pc, #8]	; (a564 <malloc+0xc>)
    a55a:	mov	r1, r0
    a55c:	ldr	r0, [r3, #0]
    a55e:	b.w	a578 <_malloc_r>
    a562:	nop
    a564:	.word	0x200010e0

0000a568 <free>:
    a568:	ldr	r3, [pc, #8]	; (a574 <free+0xc>)
    a56a:	mov	r1, r0
    a56c:	ldr	r0, [r3, #0]
    a56e:	b.w	acf0 <_free_r>
    a572:	nop
    a574:	.word	0x200010e0

0000a578 <_malloc_r>:
    a578:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a57c:	add.w	r5, r1, #11
    a580:	cmp	r5, #22
    a582:	sub	sp, #12
    a584:	mov	r6, r0
    a586:	bls.w	a6c8 <_malloc_r+0x150>
    a58a:	bics.w	r5, r5, #7
    a58e:	bmi.w	a710 <_malloc_r+0x198>
    a592:	cmp	r1, r5
    a594:	bhi.w	a710 <_malloc_r+0x198>
    a598:	bl	ab84 <__malloc_lock>
    a59c:	cmp.w	r5, #504	; 0x1f8
    a5a0:	bcc.w	aadc <_malloc_r+0x564>
    a5a4:	lsrs	r3, r5, #9
    a5a6:	beq.w	a71e <_malloc_r+0x1a6>
    a5aa:	cmp	r3, #4
    a5ac:	bhi.w	a8b6 <_malloc_r+0x33e>
    a5b0:	lsrs	r0, r5, #6
    a5b2:	add.w	lr, r0, #57	; 0x39
    a5b6:	mov.w	r3, lr, lsl #1
    a5ba:	adds	r0, #56	; 0x38
    a5bc:	ldr	r7, [pc, #784]	; (a8d0 <_malloc_r+0x358>)
    a5be:	add.w	r3, r7, r3, lsl #2
    a5c2:	sub.w	r1, r3, #8
    a5c6:	ldr	r4, [r3, #4]
    a5c8:	cmp	r1, r4
    a5ca:	bne.n	a5dc <_malloc_r+0x64>
    a5cc:	b.n	a728 <_malloc_r+0x1b0>
    a5ce:	cmp	r2, #0
    a5d0:	bge.w	a72c <_malloc_r+0x1b4>
    a5d4:	ldr	r4, [r4, #12]
    a5d6:	cmp	r1, r4
    a5d8:	beq.w	a728 <_malloc_r+0x1b0>
    a5dc:	ldr	r3, [r4, #4]
    a5de:	bic.w	r3, r3, #3
    a5e2:	subs	r2, r3, r5
    a5e4:	cmp	r2, #15
    a5e6:	ble.n	a5ce <_malloc_r+0x56>
    a5e8:	ldr	r1, [pc, #740]	; (a8d0 <_malloc_r+0x358>)
    a5ea:	ldr	r4, [r7, #16]
    a5ec:	add.w	lr, r1, #8
    a5f0:	cmp	r4, lr
    a5f2:	beq.w	a95c <_malloc_r+0x3e4>
    a5f6:	ldr	r3, [r4, #4]
    a5f8:	bic.w	r3, r3, #3
    a5fc:	subs	r2, r3, r5
    a5fe:	cmp	r2, #15
    a600:	bgt.w	a936 <_malloc_r+0x3be>
    a604:	cmp	r2, #0
    a606:	str.w	lr, [r1, #20]
    a60a:	str.w	lr, [r1, #16]
    a60e:	bge.w	a74e <_malloc_r+0x1d6>
    a612:	cmp.w	r3, #512	; 0x200
    a616:	bcs.w	a8e8 <_malloc_r+0x370>
    a61a:	lsrs	r3, r3, #3
    a61c:	add.w	ip, r3, #1
    a620:	movs	r2, #1
    a622:	asrs	r3, r3, #2
    a624:	lsl.w	r3, r2, r3
    a628:	ldr	r2, [r1, #4]
    a62a:	ldr.w	r8, [r1, ip, lsl #3]
    a62e:	str.w	r8, [r4, #8]
    a632:	add.w	r9, r1, ip, lsl #3
    a636:	orrs	r2, r3
    a638:	sub.w	r3, r9, #8
    a63c:	str	r3, [r4, #12]
    a63e:	str	r2, [r1, #4]
    a640:	str.w	r4, [r1, ip, lsl #3]
    a644:	str.w	r4, [r8, #12]
    a648:	asrs	r3, r0, #2
    a64a:	movs	r4, #1
    a64c:	lsls	r4, r3
    a64e:	cmp	r4, r2
    a650:	bhi.w	a768 <_malloc_r+0x1f0>
    a654:	tst	r4, r2
    a656:	bne.n	a666 <_malloc_r+0xee>
    a658:	bic.w	r0, r0, #3
    a65c:	lsls	r4, r4, #1
    a65e:	tst	r4, r2
    a660:	add.w	r0, r0, #4
    a664:	beq.n	a65c <_malloc_r+0xe4>
    a666:	add.w	r9, r7, r0, lsl #3
    a66a:	mov	ip, r9
    a66c:	mov	r8, r0
    a66e:	ldr.w	r1, [ip, #12]
    a672:	cmp	ip, r1
    a674:	bne.n	a686 <_malloc_r+0x10e>
    a676:	b.n	a960 <_malloc_r+0x3e8>
    a678:	cmp	r2, #0
    a67a:	bge.w	a980 <_malloc_r+0x408>
    a67e:	ldr	r1, [r1, #12]
    a680:	cmp	ip, r1
    a682:	beq.w	a960 <_malloc_r+0x3e8>
    a686:	ldr	r3, [r1, #4]
    a688:	bic.w	r3, r3, #3
    a68c:	subs	r2, r3, r5
    a68e:	cmp	r2, #15
    a690:	ble.n	a678 <_malloc_r+0x100>
    a692:	mov	r4, r1
    a694:	ldr.w	ip, [r1, #12]
    a698:	ldr.w	r8, [r4, #8]!
    a69c:	adds	r3, r1, r5
    a69e:	orr.w	r5, r5, #1
    a6a2:	str	r5, [r1, #4]
    a6a4:	orr.w	r1, r2, #1
    a6a8:	str.w	ip, [r8, #12]
    a6ac:	mov	r0, r6
    a6ae:	str.w	r8, [ip, #8]
    a6b2:	str	r3, [r7, #20]
    a6b4:	str	r3, [r7, #16]
    a6b6:	str.w	lr, [r3, #12]
    a6ba:	str.w	lr, [r3, #8]
    a6be:	str	r1, [r3, #4]
    a6c0:	str	r2, [r3, r2]
    a6c2:	bl	ab88 <__malloc_unlock>
    a6c6:	b.n	a708 <_malloc_r+0x190>
    a6c8:	cmp	r1, #16
    a6ca:	bhi.n	a710 <_malloc_r+0x198>
    a6cc:	bl	ab84 <__malloc_lock>
    a6d0:	movs	r5, #16
    a6d2:	movs	r3, #6
    a6d4:	movs	r0, #2
    a6d6:	ldr	r7, [pc, #504]	; (a8d0 <_malloc_r+0x358>)
    a6d8:	add.w	r3, r7, r3, lsl #2
    a6dc:	sub.w	r2, r3, #8
    a6e0:	ldr	r4, [r3, #4]
    a6e2:	cmp	r4, r2
    a6e4:	beq.w	a972 <_malloc_r+0x3fa>
    a6e8:	ldr	r3, [r4, #4]
    a6ea:	ldr	r1, [r4, #12]
    a6ec:	ldr	r5, [r4, #8]
    a6ee:	bic.w	r3, r3, #3
    a6f2:	add	r3, r4
    a6f4:	mov	r0, r6
    a6f6:	ldr	r2, [r3, #4]
    a6f8:	str	r1, [r5, #12]
    a6fa:	orr.w	r2, r2, #1
    a6fe:	str	r5, [r1, #8]
    a700:	str	r2, [r3, #4]
    a702:	bl	ab88 <__malloc_unlock>
    a706:	adds	r4, #8
    a708:	mov	r0, r4
    a70a:	add	sp, #12
    a70c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a710:	movs	r4, #0
    a712:	movs	r3, #12
    a714:	mov	r0, r4
    a716:	str	r3, [r6, #0]
    a718:	add	sp, #12
    a71a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a71e:	movs	r3, #128	; 0x80
    a720:	mov.w	lr, #64	; 0x40
    a724:	movs	r0, #63	; 0x3f
    a726:	b.n	a5bc <_malloc_r+0x44>
    a728:	mov	r0, lr
    a72a:	b.n	a5e8 <_malloc_r+0x70>
    a72c:	add	r3, r4
    a72e:	ldr	r1, [r4, #12]
    a730:	ldr	r2, [r3, #4]
    a732:	ldr	r5, [r4, #8]
    a734:	orr.w	r2, r2, #1
    a738:	str	r1, [r5, #12]
    a73a:	mov	r0, r6
    a73c:	str	r5, [r1, #8]
    a73e:	str	r2, [r3, #4]
    a740:	bl	ab88 <__malloc_unlock>
    a744:	adds	r4, #8
    a746:	mov	r0, r4
    a748:	add	sp, #12
    a74a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a74e:	add	r3, r4
    a750:	mov	r0, r6
    a752:	ldr	r2, [r3, #4]
    a754:	orr.w	r2, r2, #1
    a758:	str	r2, [r3, #4]
    a75a:	bl	ab88 <__malloc_unlock>
    a75e:	adds	r4, #8
    a760:	mov	r0, r4
    a762:	add	sp, #12
    a764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a768:	ldr	r4, [r7, #8]
    a76a:	ldr	r3, [r4, #4]
    a76c:	bic.w	r8, r3, #3
    a770:	cmp	r8, r5
    a772:	bcc.n	a77e <_malloc_r+0x206>
    a774:	rsb	r3, r5, r8
    a778:	cmp	r3, #15
    a77a:	bgt.w	a896 <_malloc_r+0x31e>
    a77e:	ldr	r3, [pc, #340]	; (a8d4 <_malloc_r+0x35c>)
    a780:	ldr.w	r9, [pc, #352]	; a8e4 <_malloc_r+0x36c>
    a784:	ldr	r2, [r3, #0]
    a786:	ldr.w	r3, [r9]
    a78a:	adds	r3, #1
    a78c:	add	r2, r5
    a78e:	add.w	sl, r4, r8
    a792:	beq.w	aa56 <_malloc_r+0x4de>
    a796:	add.w	r2, r2, #4096	; 0x1000
    a79a:	adds	r2, #15
    a79c:	bic.w	r2, r2, #4080	; 0xff0
    a7a0:	bic.w	r2, r2, #15
    a7a4:	mov	r1, r2
    a7a6:	mov	r0, r6
    a7a8:	str	r2, [sp, #4]
    a7aa:	bl	ab8c <_sbrk_r>
    a7ae:	cmp.w	r0, #4294967295
    a7b2:	mov	fp, r0
    a7b4:	ldr	r2, [sp, #4]
    a7b6:	beq.w	aa6a <_malloc_r+0x4f2>
    a7ba:	cmp	sl, r0
    a7bc:	bhi.w	a9b8 <_malloc_r+0x440>
    a7c0:	ldr	r3, [pc, #276]	; (a8d8 <_malloc_r+0x360>)
    a7c2:	ldr	r1, [r3, #0]
    a7c4:	cmp	sl, fp
    a7c6:	add	r1, r2
    a7c8:	str	r1, [r3, #0]
    a7ca:	beq.w	aa74 <_malloc_r+0x4fc>
    a7ce:	ldr.w	r0, [r9]
    a7d2:	ldr.w	lr, [pc, #272]	; a8e4 <_malloc_r+0x36c>
    a7d6:	adds	r0, #1
    a7d8:	ittet	ne
    a7da:	rsbne	sl, sl, fp
    a7de:	addne	r1, sl
    a7e0:	streq.w	fp, [lr]
    a7e4:	strne	r1, [r3, #0]
    a7e6:	ands.w	r1, fp, #7
    a7ea:	beq.w	aa1c <_malloc_r+0x4a4>
    a7ee:	rsb	r0, r1, #8
    a7f2:	rsb	r1, r1, #4096	; 0x1000
    a7f6:	add	fp, r0
    a7f8:	adds	r1, #8
    a7fa:	add	r2, fp
    a7fc:	ubfx	r2, r2, #0, #12
    a800:	rsb	r9, r2, r1
    a804:	mov	r1, r9
    a806:	mov	r0, r6
    a808:	str	r3, [sp, #4]
    a80a:	bl	ab8c <_sbrk_r>
    a80e:	adds	r3, r0, #1
    a810:	ldr	r3, [sp, #4]
    a812:	beq.w	aa94 <_malloc_r+0x51c>
    a816:	rsb	r2, fp, r0
    a81a:	add	r2, r9
    a81c:	orr.w	r2, r2, #1
    a820:	ldr	r1, [r3, #0]
    a822:	str.w	fp, [r7, #8]
    a826:	add	r1, r9
    a828:	cmp	r4, r7
    a82a:	str.w	r2, [fp, #4]
    a82e:	str	r1, [r3, #0]
    a830:	ldr.w	r9, [pc, #164]	; a8d8 <_malloc_r+0x360>
    a834:	beq.n	a864 <_malloc_r+0x2ec>
    a836:	cmp.w	r8, #15
    a83a:	bls.w	aa38 <_malloc_r+0x4c0>
    a83e:	ldr	r2, [r4, #4]
    a840:	sub.w	r3, r8, #12
    a844:	bic.w	r3, r3, #7
    a848:	adds	r0, r4, r3
    a84a:	and.w	r2, r2, #1
    a84e:	mov.w	lr, #5
    a852:	orrs	r2, r3
    a854:	cmp	r3, #15
    a856:	str	r2, [r4, #4]
    a858:	str.w	lr, [r0, #4]
    a85c:	str.w	lr, [r0, #8]
    a860:	bhi.w	aa9c <_malloc_r+0x524>
    a864:	ldr	r3, [pc, #116]	; (a8dc <_malloc_r+0x364>)
    a866:	ldr	r4, [r7, #8]
    a868:	ldr	r2, [r3, #0]
    a86a:	cmp	r1, r2
    a86c:	it	hi
    a86e:	strhi	r1, [r3, #0]
    a870:	ldr	r3, [pc, #108]	; (a8e0 <_malloc_r+0x368>)
    a872:	ldr	r2, [r3, #0]
    a874:	cmp	r1, r2
    a876:	ldr	r2, [r4, #4]
    a878:	it	hi
    a87a:	strhi	r1, [r3, #0]
    a87c:	bic.w	r2, r2, #3
    a880:	cmp	r5, r2
    a882:	sub.w	r3, r2, r5
    a886:	bhi.n	a88c <_malloc_r+0x314>
    a888:	cmp	r3, #15
    a88a:	bgt.n	a896 <_malloc_r+0x31e>
    a88c:	mov	r0, r6
    a88e:	bl	ab88 <__malloc_unlock>
    a892:	movs	r4, #0
    a894:	b.n	a708 <_malloc_r+0x190>
    a896:	adds	r2, r4, r5
    a898:	orr.w	r3, r3, #1
    a89c:	orr.w	r5, r5, #1
    a8a0:	str	r5, [r4, #4]
    a8a2:	mov	r0, r6
    a8a4:	str	r2, [r7, #8]
    a8a6:	str	r3, [r2, #4]
    a8a8:	bl	ab88 <__malloc_unlock>
    a8ac:	adds	r4, #8
    a8ae:	mov	r0, r4
    a8b0:	add	sp, #12
    a8b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b6:	cmp	r3, #20
    a8b8:	bls.n	a99e <_malloc_r+0x426>
    a8ba:	cmp	r3, #84	; 0x54
    a8bc:	bhi.w	aa08 <_malloc_r+0x490>
    a8c0:	lsrs	r0, r5, #12
    a8c2:	add.w	lr, r0, #111	; 0x6f
    a8c6:	mov.w	r3, lr, lsl #1
    a8ca:	adds	r0, #110	; 0x6e
    a8cc:	b.n	a5bc <_malloc_r+0x44>
    a8ce:	nop
    a8d0:	.word	0x200010e4
    a8d4:	.word	0x2000c0d8
    a8d8:	.word	0x2000c0dc
    a8dc:	.word	0x2000c0d4
    a8e0:	.word	0x2000c0d0
    a8e4:	.word	0x200014f0
    a8e8:	lsrs	r2, r3, #9
    a8ea:	cmp	r2, #4
    a8ec:	bls.n	a9ac <_malloc_r+0x434>
    a8ee:	cmp	r2, #20
    a8f0:	bhi.w	aa5a <_malloc_r+0x4e2>
    a8f4:	add.w	r1, r2, #92	; 0x5c
    a8f8:	lsls	r1, r1, #1
    a8fa:	adds	r2, #91	; 0x5b
    a8fc:	add.w	ip, r7, r1, lsl #2
    a900:	ldr.w	r1, [r7, r1, lsl #2]
    a904:	ldr.w	r8, [pc, #476]	; aae4 <_malloc_r+0x56c>
    a908:	sub.w	ip, ip, #8
    a90c:	cmp	ip, r1
    a90e:	beq.w	aa22 <_malloc_r+0x4aa>
    a912:	ldr	r2, [r1, #4]
    a914:	bic.w	r2, r2, #3
    a918:	cmp	r3, r2
    a91a:	bcs.n	a922 <_malloc_r+0x3aa>
    a91c:	ldr	r1, [r1, #8]
    a91e:	cmp	ip, r1
    a920:	bne.n	a912 <_malloc_r+0x39a>
    a922:	ldr.w	ip, [r1, #12]
    a926:	ldr	r2, [r7, #4]
    a928:	str.w	ip, [r4, #12]
    a92c:	str	r1, [r4, #8]
    a92e:	str.w	r4, [ip, #8]
    a932:	str	r4, [r1, #12]
    a934:	b.n	a648 <_malloc_r+0xd0>
    a936:	adds	r3, r4, r5
    a938:	orr.w	r7, r2, #1
    a93c:	orr.w	r5, r5, #1
    a940:	str	r5, [r4, #4]
    a942:	mov	r0, r6
    a944:	str	r3, [r1, #20]
    a946:	str	r3, [r1, #16]
    a948:	str.w	lr, [r3, #12]
    a94c:	str.w	lr, [r3, #8]
    a950:	str	r7, [r3, #4]
    a952:	str	r2, [r3, r2]
    a954:	adds	r4, #8
    a956:	bl	ab88 <__malloc_unlock>
    a95a:	b.n	a708 <_malloc_r+0x190>
    a95c:	ldr	r2, [r1, #4]
    a95e:	b.n	a648 <_malloc_r+0xd0>
    a960:	add.w	r8, r8, #1
    a964:	tst.w	r8, #3
    a968:	add.w	ip, ip, #8
    a96c:	bne.w	a66e <_malloc_r+0xf6>
    a970:	b.n	a9d4 <_malloc_r+0x45c>
    a972:	ldr	r4, [r3, #12]
    a974:	cmp	r3, r4
    a976:	it	eq
    a978:	addeq	r0, #2
    a97a:	beq.w	a5e8 <_malloc_r+0x70>
    a97e:	b.n	a6e8 <_malloc_r+0x170>
    a980:	add	r3, r1
    a982:	mov	r4, r1
    a984:	ldr	r2, [r3, #4]
    a986:	ldr	r1, [r1, #12]
    a988:	ldr.w	r5, [r4, #8]!
    a98c:	orr.w	r2, r2, #1
    a990:	str	r2, [r3, #4]
    a992:	mov	r0, r6
    a994:	str	r1, [r5, #12]
    a996:	str	r5, [r1, #8]
    a998:	bl	ab88 <__malloc_unlock>
    a99c:	b.n	a708 <_malloc_r+0x190>
    a99e:	add.w	lr, r3, #92	; 0x5c
    a9a2:	add.w	r0, r3, #91	; 0x5b
    a9a6:	mov.w	r3, lr, lsl #1
    a9aa:	b.n	a5bc <_malloc_r+0x44>
    a9ac:	lsrs	r2, r3, #6
    a9ae:	add.w	r1, r2, #57	; 0x39
    a9b2:	lsls	r1, r1, #1
    a9b4:	adds	r2, #56	; 0x38
    a9b6:	b.n	a8fc <_malloc_r+0x384>
    a9b8:	cmp	r4, r7
    a9ba:	ldr	r3, [pc, #296]	; (aae4 <_malloc_r+0x56c>)
    a9bc:	beq.w	a7c0 <_malloc_r+0x248>
    a9c0:	ldr	r4, [r3, #8]
    a9c2:	ldr	r2, [r4, #4]
    a9c4:	bic.w	r2, r2, #3
    a9c8:	b.n	a880 <_malloc_r+0x308>
    a9ca:	ldr.w	r3, [r9], #-8
    a9ce:	cmp	r9, r3
    a9d0:	bne.w	aad8 <_malloc_r+0x560>
    a9d4:	tst.w	r0, #3
    a9d8:	add.w	r0, r0, #4294967295
    a9dc:	bne.n	a9ca <_malloc_r+0x452>
    a9de:	ldr	r3, [r7, #4]
    a9e0:	bic.w	r3, r3, r4
    a9e4:	str	r3, [r7, #4]
    a9e6:	lsls	r4, r4, #1
    a9e8:	cmp	r4, r3
    a9ea:	bhi.w	a768 <_malloc_r+0x1f0>
    a9ee:	cmp	r4, #0
    a9f0:	beq.w	a768 <_malloc_r+0x1f0>
    a9f4:	tst	r4, r3
    a9f6:	mov	r0, r8
    a9f8:	bne.w	a666 <_malloc_r+0xee>
    a9fc:	lsls	r4, r4, #1
    a9fe:	tst	r4, r3
    aa00:	add.w	r0, r0, #4
    aa04:	beq.n	a9fc <_malloc_r+0x484>
    aa06:	b.n	a666 <_malloc_r+0xee>
    aa08:	cmp.w	r3, #340	; 0x154
    aa0c:	bhi.n	aa40 <_malloc_r+0x4c8>
    aa0e:	lsrs	r0, r5, #15
    aa10:	add.w	lr, r0, #120	; 0x78
    aa14:	mov.w	r3, lr, lsl #1
    aa18:	adds	r0, #119	; 0x77
    aa1a:	b.n	a5bc <_malloc_r+0x44>
    aa1c:	mov.w	r1, #4096	; 0x1000
    aa20:	b.n	a7fa <_malloc_r+0x282>
    aa22:	movs	r1, #1
    aa24:	ldr.w	r3, [r8, #4]
    aa28:	asrs	r2, r2, #2
    aa2a:	lsl.w	r2, r1, r2
    aa2e:	orrs	r2, r3
    aa30:	str.w	r2, [r8, #4]
    aa34:	mov	r1, ip
    aa36:	b.n	a928 <_malloc_r+0x3b0>
    aa38:	movs	r3, #1
    aa3a:	str.w	r3, [fp, #4]
    aa3e:	b.n	a88c <_malloc_r+0x314>
    aa40:	movw	r2, #1364	; 0x554
    aa44:	cmp	r3, r2
    aa46:	bhi.n	aa8a <_malloc_r+0x512>
    aa48:	lsrs	r0, r5, #18
    aa4a:	add.w	lr, r0, #125	; 0x7d
    aa4e:	mov.w	r3, lr, lsl #1
    aa52:	adds	r0, #124	; 0x7c
    aa54:	b.n	a5bc <_malloc_r+0x44>
    aa56:	adds	r2, #16
    aa58:	b.n	a7a4 <_malloc_r+0x22c>
    aa5a:	cmp	r2, #84	; 0x54
    aa5c:	bhi.n	aaac <_malloc_r+0x534>
    aa5e:	lsrs	r2, r3, #12
    aa60:	add.w	r1, r2, #111	; 0x6f
    aa64:	lsls	r1, r1, #1
    aa66:	adds	r2, #110	; 0x6e
    aa68:	b.n	a8fc <_malloc_r+0x384>
    aa6a:	ldr	r4, [r7, #8]
    aa6c:	ldr	r2, [r4, #4]
    aa6e:	bic.w	r2, r2, #3
    aa72:	b.n	a880 <_malloc_r+0x308>
    aa74:	ubfx	r0, sl, #0, #12
    aa78:	cmp	r0, #0
    aa7a:	bne.w	a7ce <_malloc_r+0x256>
    aa7e:	add	r2, r8
    aa80:	ldr	r3, [r7, #8]
    aa82:	orr.w	r2, r2, #1
    aa86:	str	r2, [r3, #4]
    aa88:	b.n	a864 <_malloc_r+0x2ec>
    aa8a:	movs	r3, #254	; 0xfe
    aa8c:	mov.w	lr, #127	; 0x7f
    aa90:	movs	r0, #126	; 0x7e
    aa92:	b.n	a5bc <_malloc_r+0x44>
    aa94:	movs	r2, #1
    aa96:	mov.w	r9, #0
    aa9a:	b.n	a820 <_malloc_r+0x2a8>
    aa9c:	add.w	r1, r4, #8
    aaa0:	mov	r0, r6
    aaa2:	bl	acf0 <_free_r>
    aaa6:	ldr.w	r1, [r9]
    aaaa:	b.n	a864 <_malloc_r+0x2ec>
    aaac:	cmp.w	r2, #340	; 0x154
    aab0:	bhi.n	aabe <_malloc_r+0x546>
    aab2:	lsrs	r2, r3, #15
    aab4:	add.w	r1, r2, #120	; 0x78
    aab8:	lsls	r1, r1, #1
    aaba:	adds	r2, #119	; 0x77
    aabc:	b.n	a8fc <_malloc_r+0x384>
    aabe:	movw	r1, #1364	; 0x554
    aac2:	cmp	r2, r1
    aac4:	bhi.n	aad2 <_malloc_r+0x55a>
    aac6:	lsrs	r2, r3, #18
    aac8:	add.w	r1, r2, #125	; 0x7d
    aacc:	lsls	r1, r1, #1
    aace:	adds	r2, #124	; 0x7c
    aad0:	b.n	a8fc <_malloc_r+0x384>
    aad2:	movs	r1, #254	; 0xfe
    aad4:	movs	r2, #126	; 0x7e
    aad6:	b.n	a8fc <_malloc_r+0x384>
    aad8:	ldr	r3, [r7, #4]
    aada:	b.n	a9e6 <_malloc_r+0x46e>
    aadc:	lsrs	r0, r5, #3
    aade:	adds	r3, r0, #1
    aae0:	lsls	r3, r3, #1
    aae2:	b.n	a6d6 <_malloc_r+0x15e>
    aae4:	.word	0x200010e4

0000aae8 <memset>:
    aae8:	push	{r4, r5, r6}
    aaea:	lsls	r4, r0, #30
    aaec:	beq.n	ab7c <memset+0x94>
    aaee:	subs	r4, r2, #1
    aaf0:	cmp	r2, #0
    aaf2:	beq.n	ab78 <memset+0x90>
    aaf4:	uxtb	r5, r1
    aaf6:	mov	r3, r0
    aaf8:	b.n	ab00 <memset+0x18>
    aafa:	subs	r2, r4, #1
    aafc:	cbz	r4, ab78 <memset+0x90>
    aafe:	mov	r4, r2
    ab00:	strb.w	r5, [r3], #1
    ab04:	lsls	r2, r3, #30
    ab06:	bne.n	aafa <memset+0x12>
    ab08:	cmp	r4, #3
    ab0a:	bls.n	ab6a <memset+0x82>
    ab0c:	uxtb	r5, r1
    ab0e:	orr.w	r5, r5, r5, lsl #8
    ab12:	cmp	r4, #15
    ab14:	orr.w	r5, r5, r5, lsl #16
    ab18:	bls.n	ab4e <memset+0x66>
    ab1a:	add.w	r2, r3, #16
    ab1e:	mov	r6, r4
    ab20:	subs	r6, #16
    ab22:	cmp	r6, #15
    ab24:	str.w	r5, [r2, #-16]
    ab28:	str.w	r5, [r2, #-12]
    ab2c:	str.w	r5, [r2, #-8]
    ab30:	str.w	r5, [r2, #-4]
    ab34:	add.w	r2, r2, #16
    ab38:	bhi.n	ab20 <memset+0x38>
    ab3a:	sub.w	r2, r4, #16
    ab3e:	bic.w	r2, r2, #15
    ab42:	and.w	r4, r4, #15
    ab46:	adds	r2, #16
    ab48:	cmp	r4, #3
    ab4a:	add	r3, r2
    ab4c:	bls.n	ab6a <memset+0x82>
    ab4e:	mov	r6, r3
    ab50:	mov	r2, r4
    ab52:	subs	r2, #4
    ab54:	cmp	r2, #3
    ab56:	str.w	r5, [r6], #4
    ab5a:	bhi.n	ab52 <memset+0x6a>
    ab5c:	subs	r2, r4, #4
    ab5e:	bic.w	r2, r2, #3
    ab62:	adds	r2, #4
    ab64:	add	r3, r2
    ab66:	and.w	r4, r4, #3
    ab6a:	cbz	r4, ab78 <memset+0x90>
    ab6c:	uxtb	r1, r1
    ab6e:	add	r4, r3
    ab70:	strb.w	r1, [r3], #1
    ab74:	cmp	r3, r4
    ab76:	bne.n	ab70 <memset+0x88>
    ab78:	pop	{r4, r5, r6}
    ab7a:	bx	lr
    ab7c:	mov	r4, r2
    ab7e:	mov	r3, r0
    ab80:	b.n	ab08 <memset+0x20>
    ab82:	nop

0000ab84 <__malloc_lock>:
    ab84:	bx	lr
    ab86:	nop

0000ab88 <__malloc_unlock>:
    ab88:	bx	lr
    ab8a:	nop

0000ab8c <_sbrk_r>:
    ab8c:	push	{r3, r4, r5, lr}
    ab8e:	ldr	r4, [pc, #28]	; (abac <_sbrk_r+0x20>)
    ab90:	movs	r3, #0
    ab92:	mov	r5, r0
    ab94:	mov	r0, r1
    ab96:	str	r3, [r4, #0]
    ab98:	bl	a114 <_sbrk>
    ab9c:	adds	r3, r0, #1
    ab9e:	beq.n	aba2 <_sbrk_r+0x16>
    aba0:	pop	{r3, r4, r5, pc}
    aba2:	ldr	r3, [r4, #0]
    aba4:	cmp	r3, #0
    aba6:	beq.n	aba0 <_sbrk_r+0x14>
    aba8:	str	r3, [r5, #0]
    abaa:	pop	{r3, r4, r5, pc}
    abac:	.word	0x2000e6c0

0000abb0 <__register_exitproc>:
    abb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abb4:	ldr	r4, [pc, #148]	; (ac4c <__register_exitproc+0x9c>)
    abb6:	ldr	r5, [r4, #0]
    abb8:	ldr.w	r4, [r5, #328]	; 0x148
    abbc:	mov	r6, r0
    abbe:	mov	r8, r1
    abc0:	mov	sl, r2
    abc2:	mov	r9, r3
    abc4:	cbz	r4, ac38 <__register_exitproc+0x88>
    abc6:	ldr	r0, [r4, #4]
    abc8:	cmp	r0, #31
    abca:	bgt.n	abfc <__register_exitproc+0x4c>
    abcc:	adds	r3, r0, #1
    abce:	cbz	r6, abee <__register_exitproc+0x3e>
    abd0:	add.w	r5, r4, r0, lsl #2
    abd4:	movs	r2, #1
    abd6:	str.w	sl, [r5, #136]	; 0x88
    abda:	ldr.w	r1, [r4, #392]	; 0x188
    abde:	lsls	r2, r0
    abe0:	orrs	r1, r2
    abe2:	cmp	r6, #2
    abe4:	str.w	r1, [r4, #392]	; 0x188
    abe8:	str.w	r9, [r5, #264]	; 0x108
    abec:	beq.n	ac2c <__register_exitproc+0x7c>
    abee:	adds	r0, #2
    abf0:	str	r3, [r4, #4]
    abf2:	str.w	r8, [r4, r0, lsl #2]
    abf6:	movs	r0, #0
    abf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abfc:	ldr	r3, [pc, #80]	; (ac50 <__register_exitproc+0xa0>)
    abfe:	cbz	r3, ac42 <__register_exitproc+0x92>
    ac00:	mov.w	r0, #400	; 0x190
    ac04:	bl	a558 <malloc>
    ac08:	mov	r4, r0
    ac0a:	cbz	r0, ac42 <__register_exitproc+0x92>
    ac0c:	ldr.w	r3, [r5, #328]	; 0x148
    ac10:	movs	r7, #0
    ac12:	stmia.w	r0, {r3, r7}
    ac16:	str.w	r4, [r5, #328]	; 0x148
    ac1a:	mov	r0, r7
    ac1c:	movs	r3, #1
    ac1e:	str.w	r7, [r4, #392]	; 0x188
    ac22:	str.w	r7, [r4, #396]	; 0x18c
    ac26:	cmp	r6, #0
    ac28:	beq.n	abee <__register_exitproc+0x3e>
    ac2a:	b.n	abd0 <__register_exitproc+0x20>
    ac2c:	ldr.w	r1, [r4, #396]	; 0x18c
    ac30:	orrs	r2, r1
    ac32:	str.w	r2, [r4, #396]	; 0x18c
    ac36:	b.n	abee <__register_exitproc+0x3e>
    ac38:	add.w	r4, r5, #332	; 0x14c
    ac3c:	str.w	r4, [r5, #328]	; 0x148
    ac40:	b.n	abc6 <__register_exitproc+0x16>
    ac42:	mov.w	r0, #4294967295
    ac46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac4a:	nop
    ac4c:	.word	0x20000760
    ac50:	.word	0x0000a559

0000ac54 <_malloc_trim_r>:
    ac54:	push	{r3, r4, r5, r6, r7, lr}
    ac56:	ldr	r7, [pc, #140]	; (ace4 <_malloc_trim_r+0x90>)
    ac58:	mov	r4, r1
    ac5a:	mov	r6, r0
    ac5c:	bl	ab84 <__malloc_lock>
    ac60:	ldr	r3, [r7, #8]
    ac62:	ldr	r5, [r3, #4]
    ac64:	bic.w	r5, r5, #3
    ac68:	subs	r1, r5, r4
    ac6a:	addw	r1, r1, #4079	; 0xfef
    ac6e:	bic.w	r1, r1, #4080	; 0xff0
    ac72:	bic.w	r1, r1, #15
    ac76:	sub.w	r4, r1, #4096	; 0x1000
    ac7a:	cmp.w	r4, #4096	; 0x1000
    ac7e:	blt.n	ac90 <_malloc_trim_r+0x3c>
    ac80:	movs	r1, #0
    ac82:	mov	r0, r6
    ac84:	bl	ab8c <_sbrk_r>
    ac88:	ldr	r3, [r7, #8]
    ac8a:	add	r3, r5
    ac8c:	cmp	r0, r3
    ac8e:	beq.n	ac9a <_malloc_trim_r+0x46>
    ac90:	mov	r0, r6
    ac92:	bl	ab88 <__malloc_unlock>
    ac96:	movs	r0, #0
    ac98:	pop	{r3, r4, r5, r6, r7, pc}
    ac9a:	negs	r1, r4
    ac9c:	mov	r0, r6
    ac9e:	bl	ab8c <_sbrk_r>
    aca2:	adds	r0, #1
    aca4:	beq.n	acc2 <_malloc_trim_r+0x6e>
    aca6:	ldr	r3, [pc, #64]	; (ace8 <_malloc_trim_r+0x94>)
    aca8:	ldr	r2, [r7, #8]
    acaa:	ldr	r1, [r3, #0]
    acac:	subs	r5, r5, r4
    acae:	orr.w	r5, r5, #1
    acb2:	mov	r0, r6
    acb4:	subs	r1, r1, r4
    acb6:	str	r5, [r2, #4]
    acb8:	str	r1, [r3, #0]
    acba:	bl	ab88 <__malloc_unlock>
    acbe:	movs	r0, #1
    acc0:	pop	{r3, r4, r5, r6, r7, pc}
    acc2:	movs	r1, #0
    acc4:	mov	r0, r6
    acc6:	bl	ab8c <_sbrk_r>
    acca:	ldr	r2, [r7, #8]
    accc:	subs	r3, r0, r2
    acce:	cmp	r3, #15
    acd0:	ble.n	ac90 <_malloc_trim_r+0x3c>
    acd2:	ldr	r4, [pc, #24]	; (acec <_malloc_trim_r+0x98>)
    acd4:	ldr	r1, [pc, #16]	; (ace8 <_malloc_trim_r+0x94>)
    acd6:	ldr	r4, [r4, #0]
    acd8:	orr.w	r3, r3, #1
    acdc:	subs	r0, r0, r4
    acde:	str	r3, [r2, #4]
    ace0:	str	r0, [r1, #0]
    ace2:	b.n	ac90 <_malloc_trim_r+0x3c>
    ace4:	.word	0x200010e4
    ace8:	.word	0x2000c0dc
    acec:	.word	0x200014f0

0000acf0 <_free_r>:
    acf0:	cmp	r1, #0
    acf2:	beq.n	ad80 <_free_r+0x90>
    acf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acf8:	mov	r5, r1
    acfa:	mov	r8, r0
    acfc:	bl	ab84 <__malloc_lock>
    ad00:	ldr.w	r7, [r5, #-4]
    ad04:	ldr	r1, [pc, #424]	; (aeb0 <_free_r+0x1c0>)
    ad06:	bic.w	r3, r7, #1
    ad0a:	sub.w	r4, r5, #8
    ad0e:	adds	r2, r4, r3
    ad10:	ldr	r6, [r1, #8]
    ad12:	ldr	r0, [r2, #4]
    ad14:	cmp	r2, r6
    ad16:	bic.w	r0, r0, #3
    ad1a:	beq.n	ade2 <_free_r+0xf2>
    ad1c:	lsls	r6, r7, #31
    ad1e:	str	r0, [r2, #4]
    ad20:	bmi.n	ad3a <_free_r+0x4a>
    ad22:	ldr.w	r7, [r5, #-8]
    ad26:	subs	r4, r4, r7
    ad28:	add.w	lr, r1, #8
    ad2c:	ldr	r5, [r4, #8]
    ad2e:	cmp	r5, lr
    ad30:	add	r3, r7
    ad32:	beq.n	ae14 <_free_r+0x124>
    ad34:	ldr	r7, [r4, #12]
    ad36:	str	r7, [r5, #12]
    ad38:	str	r5, [r7, #8]
    ad3a:	adds	r5, r2, r0
    ad3c:	ldr	r5, [r5, #4]
    ad3e:	lsls	r5, r5, #31
    ad40:	bpl.n	adc8 <_free_r+0xd8>
    ad42:	orr.w	r2, r3, #1
    ad46:	str	r2, [r4, #4]
    ad48:	str	r3, [r4, r3]
    ad4a:	cmp.w	r3, #512	; 0x200
    ad4e:	bcs.n	ad82 <_free_r+0x92>
    ad50:	lsrs	r3, r3, #3
    ad52:	adds	r2, r3, #1
    ad54:	ldr	r5, [r1, #4]
    ad56:	ldr.w	r7, [r1, r2, lsl #3]
    ad5a:	str	r7, [r4, #8]
    ad5c:	movs	r0, #1
    ad5e:	asrs	r3, r3, #2
    ad60:	lsl.w	r3, r0, r3
    ad64:	add.w	r0, r1, r2, lsl #3
    ad68:	orrs	r5, r3
    ad6a:	subs	r0, #8
    ad6c:	str	r0, [r4, #12]
    ad6e:	str	r5, [r1, #4]
    ad70:	str.w	r4, [r1, r2, lsl #3]
    ad74:	str	r4, [r7, #12]
    ad76:	mov	r0, r8
    ad78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ad7c:	b.w	ab88 <__malloc_unlock>
    ad80:	bx	lr
    ad82:	lsrs	r2, r3, #9
    ad84:	cmp	r2, #4
    ad86:	bhi.n	ae30 <_free_r+0x140>
    ad88:	lsrs	r2, r3, #6
    ad8a:	add.w	r7, r2, #57	; 0x39
    ad8e:	lsls	r7, r7, #1
    ad90:	add.w	r5, r2, #56	; 0x38
    ad94:	add.w	r0, r1, r7, lsl #2
    ad98:	ldr.w	r2, [r1, r7, lsl #2]
    ad9c:	ldr	r1, [pc, #272]	; (aeb0 <_free_r+0x1c0>)
    ad9e:	subs	r0, #8
    ada0:	cmp	r0, r2
    ada2:	beq.n	ae40 <_free_r+0x150>
    ada4:	ldr	r1, [r2, #4]
    ada6:	bic.w	r1, r1, #3
    adaa:	cmp	r3, r1
    adac:	bcs.n	adb4 <_free_r+0xc4>
    adae:	ldr	r2, [r2, #8]
    adb0:	cmp	r0, r2
    adb2:	bne.n	ada4 <_free_r+0xb4>
    adb4:	ldr	r0, [r2, #12]
    adb6:	str	r0, [r4, #12]
    adb8:	str	r2, [r4, #8]
    adba:	str	r4, [r0, #8]
    adbc:	str	r4, [r2, #12]
    adbe:	mov	r0, r8
    adc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    adc4:	b.w	ab88 <__malloc_unlock>
    adc8:	ldr	r5, [r2, #8]
    adca:	ldr	r7, [pc, #232]	; (aeb4 <_free_r+0x1c4>)
    adcc:	cmp	r5, r7
    adce:	add	r3, r0
    add0:	beq.n	ae52 <_free_r+0x162>
    add2:	ldr	r0, [r2, #12]
    add4:	str	r0, [r5, #12]
    add6:	orr.w	r2, r3, #1
    adda:	str	r5, [r0, #8]
    addc:	str	r2, [r4, #4]
    adde:	str	r3, [r4, r3]
    ade0:	b.n	ad4a <_free_r+0x5a>
    ade2:	lsls	r7, r7, #31
    ade4:	add	r3, r0
    ade6:	bmi.n	adf8 <_free_r+0x108>
    ade8:	ldr.w	r2, [r5, #-8]
    adec:	subs	r4, r4, r2
    adee:	add	r3, r2
    adf0:	ldr	r0, [r4, #8]
    adf2:	ldr	r2, [r4, #12]
    adf4:	str	r2, [r0, #12]
    adf6:	str	r0, [r2, #8]
    adf8:	ldr	r2, [pc, #188]	; (aeb8 <_free_r+0x1c8>)
    adfa:	ldr	r2, [r2, #0]
    adfc:	orr.w	r0, r3, #1
    ae00:	cmp	r3, r2
    ae02:	str	r0, [r4, #4]
    ae04:	str	r4, [r1, #8]
    ae06:	bcc.n	ad76 <_free_r+0x86>
    ae08:	ldr	r3, [pc, #176]	; (aebc <_free_r+0x1cc>)
    ae0a:	mov	r0, r8
    ae0c:	ldr	r1, [r3, #0]
    ae0e:	bl	ac54 <_malloc_trim_r>
    ae12:	b.n	ad76 <_free_r+0x86>
    ae14:	adds	r1, r2, r0
    ae16:	ldr	r1, [r1, #4]
    ae18:	lsls	r1, r1, #31
    ae1a:	bmi.n	aea6 <_free_r+0x1b6>
    ae1c:	ldr	r1, [r2, #8]
    ae1e:	ldr	r2, [r2, #12]
    ae20:	str	r2, [r1, #12]
    ae22:	add	r3, r0
    ae24:	orr.w	r0, r3, #1
    ae28:	str	r1, [r2, #8]
    ae2a:	str	r0, [r4, #4]
    ae2c:	str	r3, [r4, r3]
    ae2e:	b.n	ad76 <_free_r+0x86>
    ae30:	cmp	r2, #20
    ae32:	bhi.n	ae64 <_free_r+0x174>
    ae34:	add.w	r7, r2, #92	; 0x5c
    ae38:	lsls	r7, r7, #1
    ae3a:	add.w	r5, r2, #91	; 0x5b
    ae3e:	b.n	ad94 <_free_r+0xa4>
    ae40:	asrs	r2, r5, #2
    ae42:	ldr	r3, [r1, #4]
    ae44:	movs	r5, #1
    ae46:	lsl.w	r2, r5, r2
    ae4a:	orrs	r3, r2
    ae4c:	str	r3, [r1, #4]
    ae4e:	mov	r2, r0
    ae50:	b.n	adb6 <_free_r+0xc6>
    ae52:	orr.w	r2, r3, #1
    ae56:	str	r4, [r1, #20]
    ae58:	str	r4, [r1, #16]
    ae5a:	str	r5, [r4, #12]
    ae5c:	str	r5, [r4, #8]
    ae5e:	str	r2, [r4, #4]
    ae60:	str	r3, [r4, r3]
    ae62:	b.n	ad76 <_free_r+0x86>
    ae64:	cmp	r2, #84	; 0x54
    ae66:	bhi.n	ae76 <_free_r+0x186>
    ae68:	lsrs	r2, r3, #12
    ae6a:	add.w	r7, r2, #111	; 0x6f
    ae6e:	lsls	r7, r7, #1
    ae70:	add.w	r5, r2, #110	; 0x6e
    ae74:	b.n	ad94 <_free_r+0xa4>
    ae76:	cmp.w	r2, #340	; 0x154
    ae7a:	bhi.n	ae8a <_free_r+0x19a>
    ae7c:	lsrs	r2, r3, #15
    ae7e:	add.w	r7, r2, #120	; 0x78
    ae82:	lsls	r7, r7, #1
    ae84:	add.w	r5, r2, #119	; 0x77
    ae88:	b.n	ad94 <_free_r+0xa4>
    ae8a:	movw	r0, #1364	; 0x554
    ae8e:	cmp	r2, r0
    ae90:	bhi.n	aea0 <_free_r+0x1b0>
    ae92:	lsrs	r2, r3, #18
    ae94:	add.w	r7, r2, #125	; 0x7d
    ae98:	lsls	r7, r7, #1
    ae9a:	add.w	r5, r2, #124	; 0x7c
    ae9e:	b.n	ad94 <_free_r+0xa4>
    aea0:	movs	r7, #254	; 0xfe
    aea2:	movs	r5, #126	; 0x7e
    aea4:	b.n	ad94 <_free_r+0xa4>
    aea6:	orr.w	r2, r3, #1
    aeaa:	str	r2, [r4, #4]
    aeac:	str	r3, [r4, r3]
    aeae:	b.n	ad76 <_free_r+0x86>
    aeb0:	.word	0x200010e4
    aeb4:	.word	0x200010ec
    aeb8:	.word	0x200014ec
    aebc:	.word	0x2000c0d8

0000aec0 <___init_veneer>:
    aec0:	ldr.w	pc, [pc]	; aec4 <___init_veneer+0x4>
    aec4:	.word	0x600015a9
	...

Disassembly of section .fini:

0000aed0 <_fini>:
    aed0:	push	{r3, r4, r5, r6, r7, lr}
    aed2:	nop
