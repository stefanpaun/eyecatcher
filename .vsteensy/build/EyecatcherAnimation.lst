
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000a980 l    d  .fini	00000000 .fini
0000a984 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001500 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00009b2c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00008bf8 l     F .text.itcm	0000005c schedule_transfer
00008c54 l     F .text.itcm	00000030 run_callbacks
00008c84 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
00008d1c l     F .text.itcm	00000544 isr
2000c048 l     O .bss	00000004 endpointN_notify_mask
2000c050 l     O .bss	00000004 endpoint0_notify_mask
2000c054 l     O .bss	00000001 usb_reboot_timer
2000c058 l     O .bss	00000008 endpoint0_setupdata
2000c060 l     O .bss	00000008 reply_buffer
2000c068 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000c07c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000c0a0 l     O .bss	00000004 s_hotTemp
2000c0a4 l     O .bss	00000004 s_hot_ROOM
2000c0a8 l     O .bss	00000004 s_roomC_hotC
2000c0ac l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001500 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001504 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000007c l     F .text.itcm	0000035c updateScreensFade() [clone .part.12]
00000710 l     F .text.itcm	0000041c updateBeams() [clone .part.11]
00000f14 l     F .text.itcm	00000904 Screen::iterate_animation() [clone .part.13]
0000199c l     F .text.itcm	0000666c _GLOBAL__sub_I_nextTime3
20000000 l     O .data	00000400 dim_curve
20000768 l     O .data	00000240 background_B
200009a8 l     O .data	00000240 background_A
20005ff8 l     O .bss	000006c0 mask_A
200066b8 l     O .bss	000006c0 mask_B
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
000084f8 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00008008 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 usb_serial.c
00008504 l     F .text.itcm	00000028 rx_event
0000852c l     F .text.itcm	00000070 usb_serial_flush_callback
0000859c l     F .text.itcm	0000015c usb_serial_write.part.1
2000b6f4 l     O .bss	00000700 txbuffer
2000bdf4 l     O .bss	00000001 tx_noautoflush
2000bdf5 l     O .bss	00000001 tx_head
2000bdf8 l     O .bss	000000c0 rx_buffer
2000beb8 l     O .bss	00000006 rx_index
2000bec0 l     O .bss	00000006 rx_count
2000bee0 l     O .bss	00000060 rx_transfer
2000bf40 l     O .bss	00000002 tx_available
2000bf60 l     O .bss	000000e0 tx_transfer
2000c040 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00009540 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000bf4 l     O .data	0000000a qualifier_descriptor
20000c18 l     O .data	00000043 config_descriptor
20000c5c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
2000c07d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
000096e8 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000c080 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000cb8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __pwm_init_veneer
600015c0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015c8 l     F .text.progmem	00000008 __yield_veneer
600015d0 l     F .text.progmem	00000008 __delay_veneer
600015d8 l     F .text.progmem	00000008 __setup_veneer
600015e0 l     F .text.progmem	00000008 __loop_veneer
600015e8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015f0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015f8 l     F .text.progmem	00000008 __memset_veneer
0000a970 l     F .text.itcm	00000008 ___init_veneer
00008820 g     F .text.itcm	00000014 usb_serial_available
00009648  w    F .text.itcm	000000a0 yield
2000c04c g     O .bss	00000004 usb_timer1_callback
20000c00 g     O .data	00000018 usb_string_manufacturer_name_default
2000c0b0 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
2000151c g     O .bss	00000004 sinceBeam
000099c4 g     F .text.itcm	00000020 Print::println()
00000d00 g     F .text.itcm	000001d4 init_B()
00009778 g     F .text.itcm	00000014 random(long, long)
000084a0 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000a634 g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
00000b2c g     F .text.itcm	000001d4 init_A()
20000bf0 g     O .data	00000004 F_CPU_ACTUAL
00009ef8 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
000098d8 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20003bac g     O .bss	00000004 sinceFadeUpdate
2000c098 g     O .bss	00000001 EventResponder::runningFromYield
2000b630 g     O .bss	000000c4 Alarm
00009fa8 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000c084 g     O .bss	00000004 EventResponder::firstInterrupt
000093a8 g     F .text.itcm	00000028 usb_transfer_status
20000ca2 g     O .data	00000001 usb_enable_serial_event_processing
000099a8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000448 g     O .data	00000280 digital_pin_to_info_PGM
2000e6c0 g     O .bss	00000004 errno
0000a980 g       .text.itcm	00000000 _etext
00008384 g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001500 g       .bss	00000000 _sbss
00008090 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001610 g       *ABS*	00000000 _stextload
0000184c g     F .text.itcm	00000150 loop
20003bb0 g     O .bss	00001224 sat_automaton_B
000003d8  w    F .text.itcm	0000006e Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)
20006d78 g     O .bss	00000014 synapse_A
00009260 g     F .text.itcm	00000064 usb_config_rx
00009870 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000813c g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
2000c088 g     O .bss	00000004 EventResponder::lastInterrupt
000099e8 g     F .text.itcm	00000134 memcpy
2000c078 g     O .bss	00000004 systick_millis_count
2000c070 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000c00  w    O .data	00000018 usb_string_manufacturer_name
0000a004 g     F .text.itcm	00000010 malloc
20006d8c g     O .bss	00000014 synapse_B
0000980c  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
2000c0d8 g     O .bss	00000004 __malloc_top_pad
2000e280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000764 g     O .data	00000000 .hidden __dso_handle
000080b4 g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000a638 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
000087b0 g     F .text.itcm	0000004c usb_serial_getchar
2000c104 g     O .bss	00000008 usb_cdc_line_coding
00009564 g     F .text.itcm	0000000a digitalWrite
2000c090 g     O .bss	00000004 EventResponder::lastYield
2000c0d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00009570 g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
2000c094 g     O .bss	00000004 EventResponder::firstYield
20000760 g     O .data	00000004 _global_impure_ptr
00009fb4 g     F .text.itcm	00000050 __libc_init_array
00009b34  w    F .text.itcm	0000008c HardFault_HandlerC
00009990  w    F .text.itcm	00000004 usb_serial_class::clear()
00009bc0 g     F .text.itcm	00000030 _sbrk
6000bf9c g       *ABS*	00000000 _sdataload
2000c09c g     O .bss	00000004 MillisTimer::listWaiting
20000cb4 g     O .data	00000004 __brkval
2000c041 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015a8 g     F .text.progmem	00000000 _init
000086f8 g     F .text.itcm	00000002 usb_serial_reset
2000e700 g       .bss	00000000 _ebss
00009f2c g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
200091e8 g     O .bss	00001224 bg_automaton_A
000080ec g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
2000d000 g     O .bss	00000020 endpoint0_transfer_data
00009c40 g     F .text.itcm	000002b8 pwm_init
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
000083e0 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000d020 g     O .bss	00000020 endpoint0_transfer_ack
2000c10c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000935c g     F .text.itcm	00000028 usb_transmit
00009970 g     F .text.itcm	00000020 systick_isr
20000ca4 g     O .data	00000010 Serial
2000c0cc g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
000099b0  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
000087fc g     F .text.itcm	00000024 usb_serial_peekchar
0000896c g     F .text.itcm	0000028c set_arm_clock
2000c074 g     O .bss	00000004 systick_cycle_count
20000c8c g     O .data	00000016 usb_string_serial_number_default
0000a79c g     F .text.itcm	000001d0 _free_r
000099a0  w    F .text.itcm	00000004 usb_serial_class::flush()
200014f0 g     O .data	00000004 __malloc_sbrk_base
00009998  w    F .text.itcm	00000004 usb_serial_class::read()
0000932c g     F .text.itcm	0000002e usb_prepare_transfer
00009b1c g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000c044 g     O .bss	00000004 usb_timer0_callback
000099b8  w    F .text.itcm	0000000c serialEvent()
0000a65c g     F .text.itcm	000000a4 __register_exitproc
000084a0 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
00008834 g     F .text.itcm	0000003c usb_serial_flush_input
00008870 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2000c0dc g     O .bss	00000028 __malloc_current_mallinfo
20006da0 g     O .bss	00001224 grow_automaton_A
000004c8 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
00009f9c g     F .text.itcm	0000000c __cxa_atexit
20004dd4 g     O .bss	00001224 sat_automaton_A
00009770 g     F .text.itcm	00000008 random(unsigned long)
20000734  w    O .data	00000028 vtable for usb_serial_class
20003980 g     O .bss	00000014 matrix_B
2000c08c g     O .bss	00000004 MillisTimer::listActive
200010e4 g     O .data	00000408 __malloc_av_
00008900 g     F .text.itcm	0000006c usb_serial_flush_output
0000a630 g     F .text.itcm	00000002 __malloc_lock
2000e400 g     O .bss	000002c0 _VectorsRam
00009f3c g     F .text.itcm	0000005e _calloc_r
00008490 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
000003d8  w    F .text.itcm	0000006e Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)
0000a594 g     F .text.itcm	0000009a memset
2000c0d0 g     O .bss	00000004 __malloc_max_total_mem
00000448 g     F .text.itcm	00000080 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
000095f0 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000a024 g     F .text.itcm	00000570 _malloc_r
0000978c g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
2000396c g     O .bss	00000014 matrix_A
00009490 g     F .text.itcm	00000054 micros
0000a700 g     F .text.itcm	0000009c _malloc_trim_r
20001524 g     O .bss	00001224 fg_automaton_A
20000c88 g     O .data	00000004 string0
0000889c g     F .text.itcm	00000018 usb_serial_write
0000999c  w    F .text.itcm	00000004 usb_serial_class::available()
00008494 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
2000e000 g     O .bss	00000280 endpoint_queue_head
20000c70  w    O .data	00000016 usb_string_product_name
000093d0 g     F .text.itcm	000000c0 delay
0000a980 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
2000a40c g     O .bss	00001224 bg_automaton_B
200010e0 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
0000831c g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
00009764 g     F .text.itcm	0000000c randomSeed(unsigned long)
00001818 g     F .text.itcm	00000034 setup
200006c8 g     O .data	0000006c usb_descriptor_list
200039c4 g     O .bss	00000030 screen_B
20007fc4 g     O .bss	00001224 grow_automaton_B
20070000 g       .bss	00000000 _estack
000088b4 g     F .text.itcm	0000004c usb_serial_write_buffer_free
20002748 g     O .bss	00001224 fg_automaton_B
20003994 g     O .bss	00000030 screen_A
000086fc g     F .text.itcm	000000b4 usb_serial_configure
20001500 g       .data	00000000 _edata
00008358 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
000099a4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000083d4 g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
00009bf0 g     F .text.itcm	0000004e ultoa
00000ed4 g     F .text.itcm	00000040 renderInterrupt()
20001520 g     O .bss	00000004 sinceBeamUpdate
200039f4 g     O .bss	000001b8 beams
000099e4 g     F .text.itcm	00000004 operator new(unsigned int)
00009828 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200014ec g     O .data	00000004 __malloc_trim_threshold
00009994  w    F .text.itcm	00000004 usb_serial_class::peek()
60001600 g       .text.progmem	00000000 __init_array_start
000094e4 g     F .text.itcm	0000005c analogRead
20000bec g     O .data	00000004 F_BUS_ACTUAL
20000be8 g     O .data	00000004 beamUpdateInterval
2000042c g     O .data	0000001c pin_to_channel
00008358 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000c70 g     O .data	00000016 usb_string_product_name_default
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001600 g       .text.progmem	00000000 __preinit_array_start
00009384 g     F .text.itcm	00000024 usb_receive
00008070 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00008070 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000d490 g       *ABS*	00000000 _flashimagelen
00009f20 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000986c g     F .text.itcm	00000004 pendablesrvreq_isr
000092c4 g     F .text.itcm	00000068 usb_config_tx
0000a014 g     F .text.itcm	00000010 free
20000c8c  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015c0 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015b8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015d8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015e0 <__loop_veneer>
		yield();
600011da:	bl	600015c8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000a980
600011f8:	.word	0x20000000
600011fc:	.word	0x6000bf9c
60001200:	.word	0x20001500
60001204:	.word	0x20001500
60001208:	.word	0x2000e700
6000120c:	.word	0xe000ed88
60001210:	.word	0x2000e3fc
60001214:	.word	0x00009b1d
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000986d
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x00009971
6000124c:	.word	0xe0001004
60001250:	.word	0x2000c074
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000c078
60001264:	.word	0x2000e400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015e8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015d0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x2000e000
60001348:	.word	0x2000e400
6000134c:	.word	0x00008d1d
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x2000c07c

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000c0a8
60001598:	.word	0x2000c0a4
6000159c:	.word	0x2000c0ac
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000c0a0

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__pwm_init_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__pwm_init_veneer+0x4>
600015bc:	.word	0x00009c41

600015c0 <__set_arm_clock_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__set_arm_clock_veneer+0x4>
600015c4:	.word	0x0000896d

600015c8 <__yield_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__yield_veneer+0x4>
600015cc:	.word	0x00009649

600015d0 <__delay_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__delay_veneer+0x4>
600015d4:	.word	0x000093d1

600015d8 <__setup_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__setup_veneer+0x4>
600015dc:	.word	0x00001819

600015e0 <__loop_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__loop_veneer+0x4>
600015e4:	.word	0x0000184d

600015e8 <__usb_init_serialnumber_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__usb_init_serialnumber_veneer+0x4>
600015ec:	.word	0x000095f1

600015f0 <____libc_init_array_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <____libc_init_array_veneer+0x4>
600015f4:	.word	0x00009fb5

600015f8 <__memset_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__memset_veneer+0x4>
600015fc:	.word	0x0000a595

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x0000199d
60001608:	.word	0x000084f9

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r0, #20
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	add	r1, sp, #528	; 0x210
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r0, #20
      6e:	movs	r0, #0
      70:	.word	0x0000a984
      74:	asrs	r0, r0, #20
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <updateScreensFade() [clone .part.12]>:
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      80:	ldr.w	r8, [pc, #832]	; 3c4 <updateScreensFade() [clone .part.12]+0x348>
      84:	vmov.f32	s15, #112	; 0x3f800000  1.0
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	.word	0xed984bcb
      8c:	ldrb	r6, [r0, #8]
  
  if(num >= 4){
      8e:	.short	0x681a
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	vcmpe.f32	s14, s15
      94:	ldr	r3, [pc, #804]	; (3bc <updateScreensFade() [clone .part.12]+0x340>)
      96:	vpush	{d8}
      9a:	vmrs	APSR_nzcv, fpscr
  sat_automaton_B.init_square();
}


elapsedMillis sinceFadeUpdate = 0;
void updateScreensFade() {
      9e:	sub	sp, #28
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
      a0:	str	r2, [r3, #0]
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
      a2:	bge.w	332 <updateScreensFade() [clone .part.12]+0x2b6>
      a6:	ldr.w	r1, [r8, #28]
      aa:	ldr.w	r2, [r8, #32]
      ae:	.short	0xf8d8
      b0:	movs	r4, r4
      b2:	.short	0x4bc1
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
      b4:	vmov.f32	s13, #112	; 0x3f800000  1.0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
      b8:	.word	0x6ac1ed9f
		fadeFactor = min(fadeFactor, 1);
      bc:	movs	r7, #0
      be:	ldr	r3, [r3, #0]
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
      c0:	.word	0xeeb04dc0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
      c4:	ldrh	r6, [r4, #18]
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
      c6:	subs	r3, r3, r1
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
      c8:	.word	0x46ab46ba
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
      cc:	vmov	s15, r3
      d0:	vcvt.f32.u32	s14, s15
      d4:	vdiv.f32	s15, s14, s12
      d8:	.word	0x7ae6eef4
      dc:	vmrs	APSR_nzcv, fpscr
      e0:	.word	0xeef0bf58
      e4:	ldrb	r6, [r4, #9]
		fadeFactor = min(fadeFactor, 1);
      e6:	.short	0xedc8
      e8:	ldrb	r6, [r0, #8]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
      ea:	.short	0xeb0a
      ec:	lsls	r2, r1, #27
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
      ee:	.short	0x2400
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
      f0:	lsls	r6, r6, #3
      f2:	b.n	fc <updateScreensFade() [clone .part.12]+0x80>
      f4:	.word	0xedd56a2a
      f8:	ldrb	r6, [r0, #8]
      fa:	.short	0x6a68
      fc:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     100:	.word	0x5a67ee78
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     104:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     106:	.short	0x3401
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     108:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     10a:	.short	0xf8df
     10c:	str	r2, [sp, #736]	; 0x2e0
     10e:	.short	0xb289
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     110:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     114:	.word	0xee075cc0
     118:	lsrs	r0, r2, #8
     11a:	ldrb.w	r0, [lr, #2]
     11e:	.short	0xf89e
     120:	b.n	126 <updateScreensFade() [clone .part.12]+0xaa>
     122:	.short	0xee06
     124:	lsrs	r0, r2, #8
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     126:	.short	0x18d0
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     128:	vmov	s13, lr
     12c:	.word	0xf8905cd3
     130:	b.n	138 <updateScreensFade() [clone .part.12]+0xbc>
     132:	.short	0xeeb8
     134:	ldr	r6, [r0, #44]	; 0x2c
     136:	vcvt.f32.s32	s13, s13
     13a:	.short	0xee05
     13c:	subs	r2, #16
     13e:	.short	0xee04
     140:	ands.w	r8, r0, r3, lsl #29
     144:	.word	0x7ac7eeb8
     148:	ldr.w	r0, [r8, #16]
     14c:	.word	0x6aa7ee66
     150:	vmov	s9, r3
     154:	.word	0x4ac4eeb8
     158:	vmul.f32	s12, s12, s15
     15c:	.word	0x4ae4eef8
     160:	vmul.f32	s15, s14, s15
     164:	.word	0x5ac5eeb8
     168:	vmov.f32	s14, s13
     16c:	.word	0x6a84eea5
     170:	vfma.f32	s15, s10, s11
     174:	.word	0x7aa4eea5
     178:	vcvt.s32.f32	s13, s12
     17c:	.word	0x7ae7eefd
     180:	vcvt.s32.f32	s14, s14
     184:	.word	0x6a05edcd
     188:	ldrb.w	r2, [sp, #20]
     18c:	vstr	s14, [sp, #12]
     190:	.word	0x7a04edcd
     194:	str	r2, [sp, #0]
     196:	.short	0xf89d
     198:	adds	r0, #12
     19a:	.short	0xf89d
     19c:	movs	r0, #16
     19e:	.short	0xf008
     1a0:	ldr??.w	r2, [r1, #3096]	; 0xc18


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     1a4:	bne.n	f4 <updateScreensFade() [clone .part.12]+0x78>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     1a6:	add.w	sl, sl, #1
     1aa:	adds	r7, #24
     1ac:	cmp.w	sl, #24
     1b0:	uxth	r7, r7
     1b2:	beq.n	1c2 <updateScreensFade() [clone .part.12]+0x146>
     1b4:	ldr.w	r2, [fp, #32]
     1b8:	vldr	s15, [fp, #24]
     1bc:	.word	0x0024f8db
     1c0:	b.n	ea <updateScreensFade() [clone .part.12]+0x6e>

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     1c2:	ldr.w	r0, [r9, #16]
     1c6:	bl	813c <Adafruit_NeoPixel::show()>
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     1ca:	ldr.w	r8, [pc, #508]	; 3c8 <updateScreensFade() [clone .part.12]+0x34c>
     1ce:	vmov.f32	s15, #112	; 0x3f800000  1.0
     1d2:	vldr	s14, [r8, #24]
     1d6:	.short	0xeeb4
     1d8:	ldrb	r7, [r4, #11]
     1da:	.short	0xeef1
     1dc:	uxtah	r2, r0, r0
     1e0:	.word	0xf1088099
     1e4:	lsls	r4, r3, #4
     1e6:	.short	0xe891
     1e8:	asrs	r6, r0, #32
     1ea:	.short	0x4b73
     1ec:	vmov.f32	s13, #112	; 0x3f800000  1.0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
     1f0:	.word	0x6a73ed9f
		fadeFactor = min(fadeFactor, 1);
     1f4:	movs	r7, #0
     1f6:	.short	0x681b
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     1f8:	ldr	r5, [pc, #460]	; (3c8 <updateScreensFade() [clone .part.12]+0x34c>)

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     1fa:	.short	0xeeb0
     1fc:	ldrh	r6, [r4, #18]
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
     1fe:	.short	0x1a5b
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     200:	mov	r9, r7
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     202:	.short	0x46aa
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
     204:	vmov	s15, r3
     208:	.word	0x7a67eeb8
     20c:	vdiv.f32	s15, s14, s12
     210:	.word	0x7ae6eef4
     214:	vmrs	APSR_nzcv, fpscr
     218:	.word	0xeef0bf58
     21c:	ldrb	r6, [r4, #9]
		fadeFactor = min(fadeFactor, 1);
     21e:	.short	0xedc8
     220:	ldrb	r6, [r0, #8]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     222:	.short	0xeb09
     224:	lsls	r1, r1, #27
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     226:	.short	0x2400
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     228:	lsls	r6, r6, #3
     22a:	.short	0xe004
     22c:	ldr	r2, [r5, #32]
     22e:	vldr	s15, [r5, #24]
     232:	.short	0xf8d5
     234:	stmia	r0!, {r2, r5}
     236:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     23a:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     23e:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     240:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     242:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     244:	ldr.w	r0, [r8, #16]
     248:	uxth	r1, r1
     24a:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     24e:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     252:	vmov	s14, lr
     256:	ldrb.w	ip, [fp, #1]
     25a:	ldrb.w	lr, [fp, #2]
     25e:	vmov	s13, ip
     262:	vcvt.f32.s32	s14, s14
     266:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     26a:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     26e:	vcvt.f32.s32	s13, s13
     272:	ldrb	r3, [r2, r3]
     274:	ldrb.w	ip, [lr, #2]
     278:	vcvt.f32.s32	s12, s12
     27c:	vmov	s10, r3
     280:	ldrb.w	r3, [lr, #1]
     284:	vmov	s8, ip
     288:	vmul.f32	s13, s13, s15
     28c:	vmov	s9, r3
     290:	vmul.f32	s12, s12, s15
     294:	vcvt.f32.s32	s8, s8
     298:	ldr.w	fp, [pc, #300]	; 3c8 <updateScreensFade() [clone .part.12]+0x34c>
     29c:	vcvt.f32.s32	s9, s9
     2a0:	vmul.f32	s15, s14, s15
     2a4:	vcvt.f32.s32	s10, s10
     2a8:	vmov.f32	s14, s13
     2ac:	vfma.f32	s12, s11, s8
     2b0:	vfma.f32	s15, s10, s11
     2b4:	vfma.f32	s14, s11, s9
     2b8:	vcvt.s32.f32	s13, s12
     2bc:	vcvt.s32.f32	s15, s15
     2c0:	vcvt.s32.f32	s14, s14
     2c4:	vstr	s13, [sp, #20]
     2c8:	ldrb.w	r2, [sp, #20]
     2cc:	vstr	s14, [sp, #12]
     2d0:	vstr	s15, [sp, #16]
     2d4:	str	r2, [sp, #0]
     2d6:	ldrb.w	r3, [sp, #12]
     2da:	ldrb.w	r2, [sp, #16]
     2de:	bl	8384 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     2e2:	cmp	r4, #24
     2e4:	bne.n	22c <updateScreensFade() [clone .part.12]+0x1b0>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     2e6:	add.w	r9, r9, #1
     2ea:	adds	r7, #24
     2ec:	cmp.w	r9, #24
     2f0:	uxth	r7, r7
     2f2:	beq.n	302 <updateScreensFade() [clone .part.12]+0x286>
     2f4:	ldr.w	r2, [sl, #32]
     2f8:	vldr	s15, [sl, #24]
     2fc:	ldr.w	ip, [sl, #36]	; 0x24
     300:	b.n	222 <updateScreensFade() [clone .part.12]+0x1a6>

		fadeFactor = (float)(millis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     302:	ldr.w	r0, [fp, #16]
  if (sinceFadeUpdate < FADE_INTERVAL) return;
  sinceFadeUpdate = 0;

  screen_A.updateFade();
  screen_B.updateFade();
}
     306:	add	sp, #28
     308:	vpop	{d8}
     30c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     310:	b.w	813c <Adafruit_NeoPixel::show()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     314:	movs	r1, #11
     316:	ldr	r0, [pc, #180]	; (3cc <updateScreensFade() [clone .part.12]+0x350>)
     318:	bl	889c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     31c:	ldr	r0, [pc, #176]	; (3d0 <updateScreensFade() [clone .part.12]+0x354>)
     31e:	bl	99c4 <Print::println()>
	}

	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
     322:	ldrb.w	r3, [r8, #20]
     326:	cbnz	r3, 380 <updateScreensFade() [clone .part.12]+0x304>
     328:	add	sp, #28
     32a:	vpop	{d8}
     32e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     332:	movs	r1, #11
     334:	ldr	r0, [pc, #148]	; (3cc <updateScreensFade() [clone .part.12]+0x350>)
     336:	bl	889c <usb_serial_write>
     33a:	ldr	r0, [pc, #148]	; (3d0 <updateScreensFade() [clone .part.12]+0x354>)
     33c:	bl	99c4 <Print::println()>
     340:	ldrb.w	r3, [r8, #20]
     344:	cmp	r3, #0
     346:	beq.w	1ca <updateScreensFade() [clone .part.12]+0x14e>
     34a:	movs	r1, #15
     34c:	ldr	r0, [pc, #132]	; (3d4 <updateScreensFade() [clone .part.12]+0x358>)
     34e:	bl	889c <usb_serial_write>
     352:	ldr	r0, [pc, #124]	; (3d0 <updateScreensFade() [clone .part.12]+0x354>)
     354:	bl	99c4 <Print::println()>
     358:	ldr	r1, [pc, #92]	; (3b8 <updateScreensFade() [clone .part.12]+0x33c>)
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     35a:	ldr.w	r4, [r8, #32]
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = millis();
        newFrameReady = false;
     35e:	movs	r3, #0
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     360:	ldr.w	r0, [r8, #40]	; 0x28
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     364:	ldr.w	r2, [r8, #36]	; 0x24
     368:	ldr	r1, [r1, #0]
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     36a:	str.w	r4, [r8, #40]	; 0x28
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     36e:	str.w	r0, [r8, #36]	; 0x24
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     372:	str.w	r2, [r8, #32]
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = millis();
     376:	str.w	r1, [r8, #28]
        newFrameReady = false;
     37a:	strb.w	r3, [r8, #20]
     37e:	b.n	b2 <updateScreensFade() [clone .part.12]+0x36>
     380:	movs	r1, #15
     382:	ldr	r0, [pc, #80]	; (3d4 <updateScreensFade() [clone .part.12]+0x358>)
     384:	bl	889c <usb_serial_write>
     388:	ldr	r0, [pc, #68]	; (3d0 <updateScreensFade() [clone .part.12]+0x354>)
     38a:	bl	99c4 <Print::println()>
     38e:	ldr	r1, [pc, #40]	; (3b8 <updateScreensFade() [clone .part.12]+0x33c>)
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     390:	ldr.w	r0, [r8, #32]
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = millis();
        newFrameReady = false;
     394:	movs	r3, #0
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     396:	ldr.w	ip, [r8, #40]	; 0x28
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     39a:	ldr.w	r2, [r8, #36]	; 0x24
     39e:	ldr	r1, [r1, #0]
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     3a0:	str.w	r0, [r8, #40]	; 0x28
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     3a4:	str.w	ip, [r8, #36]	; 0x24
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     3a8:	str.w	r2, [r8, #32]
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = millis();
     3ac:	str.w	r1, [r8, #28]
        newFrameReady = false;
     3b0:	strb.w	r3, [r8, #20]
     3b4:	b.n	1ea <updateScreensFade() [clone .part.12]+0x16e>
     3b6:	nop
     3b8:	.word	0x2000c078
     3bc:	.word	0x20003bac
     3c0:	.word	0x43c80000
     3c4:	.word	0x20003994
     3c8:	.word	0x200039c4
     3cc:	.word	0x20000400
     3d0:	.word	0x20000ca4
     3d4:	.word	0x2000040c

000003d8 <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>:

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     3d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
     3dc:	mov	r4, r0
     3de:	movs	r5, #0
     3e0:	movs	r6, #0
     3e2:	mov.w	r0, #1728	; 0x6c0
     3e6:	str	r5, [r4, #28]
     3e8:	mov	r7, r1
#define LOW_BRI 150
#define HIGH_BRI 255

class Screen {

	typedef struct {
     3ea:	mov	r8, r0

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     3ec:	str	r6, [r4, #24]
     3ee:	mov	fp, r2
     3f0:	mov	r6, r3
     3f2:	bl	99e4 <operator new(unsigned int)>
     3f6:	mov	r9, r0
#define LOW_BRI 150
#define HIGH_BRI 255

class Screen {

	typedef struct {
     3f8:	mov	r1, r5
     3fa:	mov	r2, r8
     3fc:	bl	a594 <memset>

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     400:	str.w	r9, [r4, #32]
     404:	mov	r0, r8
     406:	bl	99e4 <operator new(unsigned int)>
     40a:	mov	r9, r0
#define LOW_BRI 150
#define HIGH_BRI 255

class Screen {

	typedef struct {
     40c:	mov	r2, r8
     40e:	mov	r1, r5
     410:	bl	a594 <memset>

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     414:	str.w	r9, [r4, #36]	; 0x24
     418:	mov	r0, r8
     41a:	bl	99e4 <operator new(unsigned int)>
#define LOW_BRI 150
#define HIGH_BRI 255

class Screen {

	typedef struct {
     41e:	mov	r2, r8
     420:	mov	r1, r5

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     422:	mov	r9, r0
#define LOW_BRI 150
#define HIGH_BRI 255

class Screen {

	typedef struct {
     424:	bl	a594 <memset>
public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     428:	ldr	r3, [sp, #32]

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     42a:	str.w	r9, [r4, #40]	; 0x28
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		newFrameReady = false;
	}
     42e:	mov	r0, r4
public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     430:	str	r3, [r4, #12]
		_screen = screen;
     432:	ldr	r3, [sp, #36]	; 0x24

	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
     434:	str	r5, [r4, #44]	; 0x2c
		_bg_automaton = bg_automaton;
     436:	str.w	fp, [r4]
		_fg_automaton = fg_automaton;
     43a:	str	r7, [r4, #4]
		_grow_automaton = grow_automaton;
     43c:	str	r6, [r4, #8]
		_sat_automaton = sat_automaton;
		_screen = screen;
     43e:	str	r3, [r4, #16]
		newFrameReady = false;
     440:	strb	r5, [r4, #20]
	}
     442:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
     446:	nop

00000448 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate = 0;
int beamUpdateInterval = 1000/100;


bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     448:	sub	sp, #8
     44a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     44e:	movs	r4, #0
     450:	sub	sp, #16
     452:	mov	lr, r0
     454:	mov	r7, r1
     456:	add	r5, sp, #40	; 0x28
  for (int i = 0; i < BEAM_AM; i++) {
     458:	mov	r1, r4
     45a:	ldr	r0, [pc, #100]	; (4c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x78>)

elapsedMillis sinceBeamUpdate = 0;
int beamUpdateInterval = 1000/100;


bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     45c:	stmia.w	r5, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     460:	ldrb	r3, [r0, r4]
     462:	adds	r4, #44	; 0x2c
     464:	ldr	r2, [pc, #88]	; (4c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x78>)
     466:	cbz	r3, 47e <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x36>
elapsedMillis sinceBeamUpdate = 0;
int beamUpdateInterval = 1000/100;


bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     468:	adds	r1, #1
     46a:	cmp	r1, #10
     46c:	bne.n	460 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     46e:	mov.w	ip, #0
}
     472:	mov	r0, ip
     474:	add	sp, #16
     476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     47a:	add	sp, #8
     47c:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     47e:	movs	r3, #44	; 0x2c
     480:	movs	r0, #1
     482:	ldr	r4, [pc, #64]	; (4c4 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x7c>)
     484:	mov	r6, sp
     486:	mul.w	r1, r3, r1
     48a:	add	r3, sp, #40	; 0x28
     48c:	ldr.w	r8, [r4]

bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
     490:	mov	ip, r0
     492:	adds	r4, r2, r1
     494:	strb	r0, [r2, r1]
     496:	ldmia	r3, {r0, r1, r2, r3}
     498:	stmia	r6!, {r0, r1, r2}
     49a:	strh	r3, [r6, #0]
	strip = _strip;
	direction = _direction;
	color = _color;
     49c:	add	r3, sp, #16
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
     49e:	str.w	lr, [r4, #4]
	direction = _direction;
	color = _color;
     4a2:	add.w	r5, r4, #12

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     4a6:	strb	r7, [r4, #8]
	color = _color;
     4a8:	ldmdb	r3, {r0, r1, r2, r3}
     4ac:	stmia	r5!, {r0, r1, r2}
     4ae:	strh	r3, [r5, #0]
	length = _length;
	duration = _duration;
     4b0:	ldr	r3, [sp, #56]	; 0x38
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     4b2:	vstr	s0, [r4, #28]
	duration = _duration;
     4b6:	str	r3, [r4, #32]
	startTime = millis();
     4b8:	str.w	r8, [r4, #36]	; 0x24
     4bc:	b.n	472 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x2a>
     4be:	nop
     4c0:	.word	0x200039f4
     4c4:	.word	0x2000c078

000004c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     4c8:	sub	sp, #8
     4ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4ce:	sub	sp, #20
  int colInt = strip->getPixelColor(pixel);
     4d0:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     4d2:	mov	r8, r0
     4d4:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     4d8:	mov	r1, r6
     4da:	ldrb.w	r9, [sp, #68]	; 0x44
     4de:	str	r4, [sp, #4]
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     4e0:	add	r4, sp, #56	; 0x38
     4e2:	ldrb.w	r5, [sp, #64]	; 0x40
     4e6:	stmia.w	r4, {r2, r3}
     4ea:	ldrb.w	sl, [sp, #56]	; 0x38
     4ee:	ldrb.w	r4, [sp, #57]	; 0x39
     4f2:	ldrb.w	fp, [sp, #58]	; 0x3a
     4f6:	ldr	r7, [sp, #60]	; 0x3c
  int colInt = strip->getPixelColor(pixel);
     4f8:	bl	83e0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     4fc:	str	r0, [sp, #12]
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     4fe:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     502:	cmp.w	r9, #0
     506:	beq.n	54c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     508:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     50a:	ldrb.w	r2, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     50e:	ldrb.w	r5, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     512:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     514:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     516:	cmp.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     51a:	add.w	r3, r5, fp

  strip->setPixelColor(pixel, *(int*)getCol);
     51e:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     520:	it	ge
     522:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     526:	cmp	r4, #255	; 0xff
     528:	it	ge
     52a:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     52c:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     52e:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     532:	it	ge
     534:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     536:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     53a:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     53e:	ldr	r2, [sp, #12]
}
     540:	add	sp, #20
     542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     546:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     548:	b.w	83d4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
     54c:	ldr	r3, [sp, #4]
     54e:	cmp	r3, #99	; 0x63
     550:	bgt.n	5ce <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     552:	vmov	s15, r3
     556:	vldr	d6, [pc, #424]	; 700 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     55a:	vcvt.f64.s32	d7, s15
     55e:	vmul.f64	d7, d7, d6
     562:	vcvt.u32.f64	s15, d7
     566:	vstr	s15, [sp, #4]
     56a:	ldrb.w	sl, [sp, #4]
     56e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     570:	cbz	r5, 5d8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     572:	cmp	r5, #99	; 0x63
     574:	bgt.n	5dc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     576:	vmov	s15, r5
     57a:	vldr	d6, [pc, #388]	; 700 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     57e:	vcvt.f64.s32	d7, s15
     582:	vmul.f64	d7, d7, d6
     586:	vcvt.s32.f64	s15, d7
     58a:	vmov	r2, s15
     58e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     592:	ldr	r4, [pc, #372]	; (708 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     594:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     596:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     59a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     59e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     5a2:	adds	r4, r7, r5
     5a4:	mov.w	r5, #360	; 0x168
     5a8:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     5ac:	ldr	r4, [pc, #348]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     5ae:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     5b2:	smull	r3, r4, r4, r1
     5b6:	asrs	r5, r1, #31
     5b8:	add	r4, r1
     5ba:	rsb	r4, r5, r4, asr #5
     5be:	cmp	r4, #5
     5c0:	bhi.w	6f6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     5c4:	tbb	[pc, r4]
     5c8:	.word	0x415b7588
     5cc:	.short	0x0c27
     5ce:	mov.w	sl, #254	; 0xfe
     5d2:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     5d4:	cmp	r5, #0
     5d6:	bne.n	572 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     5d8:	mov	r4, sl
     5da:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5dc:	movs	r2, #1
     5de:	b.n	592 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     5e0:	ldr	r7, [pc, #296]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     5e2:	rsb	r3, r2, sl
     5e6:	smull	r4, lr, r7, r1
     5ea:	mov	r4, r2
     5ec:	add	lr, r1
     5ee:	rsb	r5, r5, lr, asr #5
     5f2:	rsb	r5, r5, r5, lsl #4
     5f6:	sub.w	r1, r1, r5, lsl #2
     5fa:	rsb	r1, r1, #60	; 0x3c
     5fe:	mul.w	r3, r1, r3
     602:	smull	r1, r7, r7, r3
     606:	asrs	r1, r3, #31
     608:	add	r3, r7
     60a:	rsb	r3, r1, r3, asr #5
     60e:	add	r3, r2
     610:	uxtb.w	fp, r3
     614:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     616:	ldr	r7, [pc, #244]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     618:	rsb	sl, r2, sl
     61c:	mov	r4, r2
     61e:	smull	r3, lr, r7, r1
     622:	add	lr, r1
     624:	rsb	r5, r5, lr, asr #5
     628:	rsb	r5, r5, r5, lsl #4
     62c:	sub.w	r1, r1, r5, lsl #2
     630:	mul.w	r1, r1, sl
     634:	smull	r3, r7, r7, r1
     638:	mov.w	sl, r1, asr #31
     63c:	add	r1, r7
     63e:	rsb	r1, sl, r1, asr #5
     642:	add	r2, r1
     644:	uxtb.w	sl, r2
     648:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     64a:	ldr	r7, [pc, #192]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     64c:	rsb	lr, r2, sl
     650:	mov	sl, r2
     652:	smull	r3, r4, r7, r1
     656:	add	r4, r1
     658:	rsb	r5, r5, r4, asr #5
     65c:	rsb	r5, r5, r5, lsl #4
     660:	sub.w	r1, r1, r5, lsl #2
     664:	rsb	r4, r1, #60	; 0x3c
     668:	mul.w	r1, r4, lr
     66c:	smull	r3, r7, r7, r1
     670:	asrs	r4, r1, #31
     672:	add	r1, r7
     674:	rsb	r4, r4, r1, asr #5
     678:	add	r4, r2
     67a:	uxtb	r4, r4
     67c:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     67e:	ldr	r7, [pc, #140]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     680:	rsb	lr, r2, sl
     684:	mov	r4, sl
     686:	mov	sl, r2
     688:	smull	ip, r3, r7, r1
     68c:	add	r3, r1
     68e:	rsb	r5, r5, r3, asr #5
     692:	rsb	r5, r5, r5, lsl #4
     696:	sub.w	r1, r1, r5, lsl #2
     69a:	mul.w	r1, r1, lr
     69e:	smull	r3, r7, r7, r1
     6a2:	asrs	r3, r1, #31
     6a4:	add	r1, r7
     6a6:	rsb	r3, r3, r1, asr #5
     6aa:	add	r3, r2
     6ac:	uxtb.w	fp, r3
     6b0:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     6b2:	ldr	r7, [pc, #88]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     6b4:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     6b8:	mov	r4, sl
      output.g = bri;
      output.b = base;
     6ba:	mov	fp, r2
     6bc:	smull	r3, ip, r7, r1
     6c0:	add	ip, r1
     6c2:	rsb	r5, r5, ip, asr #5
     6c6:	rsb	r5, r5, r5, lsl #4
     6ca:	sub.w	r5, r1, r5, lsl #2
     6ce:	rsb	r5, r5, #60	; 0x3c
     6d2:	mul.w	r1, r5, lr
     6d6:	b.n	634 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     6d8:	rsb	r3, r2, sl
     6dc:	ldr	r5, [pc, #44]	; (70c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     6de:	mov	fp, r2
     6e0:	mul.w	r1, r1, r3
     6e4:	smull	r3, r5, r5, r1
     6e8:	asrs	r4, r1, #31
     6ea:	add	r1, r5
     6ec:	rsb	r1, r4, r1, asr #5
     6f0:	adds	r4, r2, r1
     6f2:	uxtb	r4, r4
     6f4:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     6f6:	mov.w	sl, #0
     6fa:	mov	r4, sl
     6fc:	b.n	508 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     6fe:	nop
     700:	.word	0x66666666
     704:	.word	0x40046666
     708:	.word	0xb60b60b7
     70c:	.word	0x88888889

00000710 <updateBeams() [clone .part.11]>:
     710:	ldr	r3, [pc, #828]	; (a50 <updateBeams() [clone .part.11]+0x340>)

void updateBeams() {
  if ((int)sinceBeamUpdate < beamUpdateInterval) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     712:	ldr	r0, [pc, #832]	; (a54 <updateBeams() [clone .part.11]+0x344>)
     714:	ldr	r2, [r3, #0]
     716:	ldr	r3, [pc, #832]	; (a58 <updateBeams() [clone .part.11]+0x348>)
    }
  }
  return false;
}

void updateBeams() {
     718:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     71c:	vpush	{d8-d9}
     720:	vldr	d8, [pc, #804]	; a48 <updateBeams() [clone .part.11]+0x338>
     724:	sub	sp, #36	; 0x24
     726:	ldr	r7, [pc, #820]	; (a5c <updateBeams() [clone .part.11]+0x34c>)
     728:	str	r2, [r3, #0]
  if ((int)sinceBeamUpdate < beamUpdateInterval) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     72a:	bl	8494 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     72e:	ldr	r0, [pc, #816]	; (a60 <updateBeams() [clone .part.11]+0x350>)
     730:	bl	8494 <Adafruit_NeoPixel::clear()>

  for (int i = 0; i < BEAM_AM; i++) {
    if (beams[i].active) {
     734:	ldrb.w	r3, [r7, #-36]
     738:	cmp	r3, #0
     73a:	beq.w	900 <updateBeams() [clone .part.11]+0x1f0>
     73e:	ldr	r1, [pc, #784]	; (a50 <updateBeams() [clone .part.11]+0x340>)
}

void update() {
	if (!active) return;
	if (millis() > startTime + duration) {
     740:	ldr	r3, [r7, #0]
     742:	ldr.w	r2, [r7, #-4]
     746:	ldr	r0, [r1, #0]
     748:	adds	r1, r2, r3
     74a:	cmp	r0, r1
     74c:	bhi.w	8fa <updateBeams() [clone .part.11]+0x1ea>
     750:	ldr	r1, [pc, #764]	; (a50 <updateBeams() [clone .part.11]+0x340>)
		active = false;
		return;
	}

	float posFac = (float)(millis() - startTime) / duration;
     752:	vmov	s15, r2
	if (direction == DOWN) posFac = 1 - posFac;
     756:	ldrb.w	r2, [r7, #-28]
     75a:	ldr	r1, [r1, #0]
	if (millis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(millis() - startTime) / duration;
     75c:	vcvt.f32.s32	s14, s15
     760:	subs	r3, r1, r3
     762:	vmov	s15, r3
     766:	vcvt.f32.u32	s15, s15
     76a:	vdiv.f32	s18, s15, s14
	if (direction == DOWN) posFac = 1 - posFac;
     76e:	cmp	r2, #0
     770:	bne.w	9ce <updateBeams() [clone .part.11]+0x2be>
	position = (strip->numPixels() + length) * posFac - length / 2;
     774:	ldr.w	r0, [r7, #-32]
     778:	bl	8490 <Adafruit_NeoPixel::numPixels() const>
     77c:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     780:	ldrb.w	r3, [r7, #-36]
		return;
	}

	float posFac = (float)(millis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     784:	vmov.f32	s14, #96	; 0x3f000000  0.5
     788:	vcvt.f32.s32	s13, s15
     78c:	vldr	s15, [r7, #-8]
     790:	vmul.f32	s14, s15, s14
     794:	vadd.f32	s15, s13, s15
     798:	vmov.f32	s13, s14
     79c:	vfnms.f32	s13, s15, s18
     7a0:	vmov.f32	s15, s13
     7a4:	vstr	s13, [r7, #4]
}


void draw() {
	if (!active) return;
     7a8:	cmp	r3, #0
     7aa:	beq.w	900 <updateBeams() [clone .part.11]+0x1f0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     7ae:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7b2:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     7b6:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7ba:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     7be:	vmov	fp, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7c2:	vmov	sl, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     7c6:	cmp	sl, fp
     7c8:	ble.n	8c6 <updateBeams() [clone .part.11]+0x1b6>
     7ca:	b.n	900 <updateBeams() [clone .part.11]+0x1f0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     7cc:	vldr	s11, [r7, #-8]
     7d0:	vmov.f32	s14, #112	; 0x3f800000  1.0
     7d4:	vmov.f32	s13, #0	; 0x40000000  2.0
     7d8:	vdiv.f32	s12, s15, s11
     7dc:	vmov.f32	s15, s14
     7e0:	vfms.f32	s15, s12, s13
     7e4:	vcmpe.f32	s15, #0.0
     7e8:	vmrs	APSR_nzcv, fpscr
     7ec:	bmi.w	920 <updateBeams() [clone .part.11]+0x210>
     7f0:	vcmp.f32	s15, s14
     7f4:	vmrs	APSR_nzcv, fpscr
     7f8:	it	gt
     7fa:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     7fe:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     802:	sub.w	r3, r7, #24
     806:	add	r4, sp, #16
     808:	ldrb.w	ip, [r7, #-24]
     80c:	ldrb.w	lr, [r7, #-23]
     810:	vcmp.f32	s15, s14
     814:	ldrb.w	r6, [r7, #-22]
     818:	ldr.w	r8, [r7, #-20]
     81c:	vmrs	APSR_nzcv, fpscr
     820:	ldmia	r3, {r0, r1, r2, r3}
     822:	stmia.w	r4, {r0, r1, r2, r3}
     826:	ldrb.w	r3, [r7, #-16]
     82a:	ldrb.w	r2, [r7, #-15]
     82e:	ldrb.w	r1, [r7, #-12]
     832:	beq.n	888 <updateBeams() [clone .part.11]+0x178>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     834:	cmp	r1, #0
     836:	beq.n	926 <updateBeams() [clone .part.11]+0x216>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     838:	vmov	s14, ip
     83c:	vmov	s13, lr
     840:	vcvt.f32.s32	s14, s14
     844:	vmul.f32	s14, s14, s15
     848:	vcvt.u32.f32	s14, s14
     84c:	vstr	s14, [sp, #8]
     850:	ldrb.w	ip, [sp, #8]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     854:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     858:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     85c:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     85e:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     860:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     864:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     868:	strb.w	r0, [sp, #29]

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     86c:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     870:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     874:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     878:	vstr	s14, [sp, #8]
     87c:	ldrb.w	lr, [sp, #8]
		byte b = blue()*multFac;
     880:	vstr	s15, [sp, #12]
     884:	ldrb.w	r6, [sp, #12]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     888:	strb.w	r3, [sp, #24]
     88c:	add	r3, sp, #32
     88e:	strb.w	r2, [sp, #25]
     892:	strb.w	r1, [sp, #28]
     896:	ldr.w	r5, [r7, #-32]
     89a:	strb.w	ip, [sp, #16]
     89e:	strb.w	lr, [sp, #17]
     8a2:	strb.w	r6, [sp, #18]
     8a6:	str.w	r8, [sp, #20]
     8aa:	ldmdb	r3, {r0, r1}
     8ae:	ldmia.w	r4, {r2, r3}
     8b2:	stmia.w	sp, {r0, r1}
     8b6:	mov	r0, r5
     8b8:	mov	r1, sl
     8ba:	bl	4c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     8be:	add.w	sl, sl, #1
     8c2:	cmp	fp, sl
     8c4:	blt.n	900 <updateBeams() [clone .part.11]+0x1f0>
		if (i >= 0 && i < strip->numPixels()) {
     8c6:	cmp.w	sl, #0
     8ca:	blt.n	8be <updateBeams() [clone .part.11]+0x1ae>
     8cc:	ldr.w	r0, [r7, #-32]
     8d0:	bl	8490 <Adafruit_NeoPixel::numPixels() const>
     8d4:	cmp	r0, sl
     8d6:	ble.n	8be <updateBeams() [clone .part.11]+0x1ae>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     8d8:	vmov	s14, sl
     8dc:	vldr	s15, [r7, #4]
     8e0:	vcvt.f32.s32	s14, s14
     8e4:	vsub.f32	s15, s14, s15
     8e8:	vcmpe.f32	s15, #0.0
     8ec:	vmrs	APSR_nzcv, fpscr
     8f0:	bgt.w	7cc <updateBeams() [clone .part.11]+0xbc>
     8f4:	vneg.f32	s15, s15
     8f8:	b.n	7cc <updateBeams() [clone .part.11]+0xbc>
}

void update() {
	if (!active) return;
	if (millis() > startTime + duration) {
		active = false;
     8fa:	movs	r3, #0
     8fc:	strb.w	r3, [r7, #-36]
     900:	adds	r7, #44	; 0x2c
  sinceBeamUpdate = 0;

  synapse_A.clear();
  synapse_B.clear();

  for (int i = 0; i < BEAM_AM; i++) {
     902:	ldr	r3, [pc, #352]	; (a64 <updateBeams() [clone .part.11]+0x354>)
     904:	cmp	r7, r3
     906:	bne.w	734 <updateBeams() [clone .part.11]+0x24>
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     90a:	ldr	r0, [pc, #328]	; (a54 <updateBeams() [clone .part.11]+0x344>)
     90c:	bl	813c <Adafruit_NeoPixel::show()>
  synapse_B.show();
     910:	ldr	r0, [pc, #332]	; (a60 <updateBeams() [clone .part.11]+0x350>)
}
     912:	add	sp, #36	; 0x24
     914:	vpop	{d8-d9}
     918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     91c:	b.w	813c <Adafruit_NeoPixel::show()>
	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     920:	vldr	s15, [pc, #324]	; a68 <updateBeams() [clone .part.11]+0x358>
     924:	b.n	7fe <updateBeams() [clone .part.11]+0xee>
     926:	cmp	r2, #99	; 0x63
     928:	bgt.n	9a0 <updateBeams() [clone .part.11]+0x290>
     92a:	vmov	s14, r2
     92e:	vcvt.f64.s32	d6, s14
     932:	vmul.f64	d6, d6, d8
     936:	vcvt.u32.f64	s14, d6
     93a:	vstr	s14, [sp, #8]
     93e:	ldrb.w	ip, [sp, #8]
     942:	mov	r9, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     944:	cbz	r3, 9aa <updateBeams() [clone .part.11]+0x29a>
     946:	cmp	r3, #99	; 0x63
     948:	bgt.n	9ca <updateBeams() [clone .part.11]+0x2ba>
     94a:	vmov	s14, r3
     94e:	vcvt.f64.s32	d6, s14
     952:	vmul.f64	d6, d6, d8
     956:	vcvt.s32.f64	s14, d6
     95a:	vmov	r6, s14
     95e:	rsb	r6, r6, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     962:	ldr	r1, [pc, #264]	; (a6c <updateBeams() [clone .part.11]+0x35c>)
     964:	mov.w	r5, r8, asr #31
     968:	mov.w	lr, #360	; 0x168
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     96c:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     970:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     974:	ubfx	r6, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     978:	add	r1, r8
     97a:	rsb	r5, r5, r1, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     97e:	ldr	r1, [pc, #240]	; (a70 <updateBeams() [clone .part.11]+0x360>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     980:	mls	r5, lr, r5, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     984:	smull	r0, r1, r1, r5
     988:	asrs	r0, r5, #31
     98a:	add	r1, r5
     98c:	rsb	r1, r0, r1, asr #5
     990:	cmp	r1, #5
     992:	bhi.w	b1c <updateBeams() [clone .part.11]+0x40c>
     996:	tbb	[pc, r1]
     99a:	.short	0x9cb0
     99c:	.word	0x1f3c6d8a
     9a0:	mov.w	ip, #254	; 0xfe
     9a4:	mov	r9, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     9a6:	cmp	r3, #0
     9a8:	bne.n	946 <updateBeams() [clone .part.11]+0x236>
     9aa:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9ae:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     9b2:	mov	r6, r9
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9b4:	vcvt.f32.s32	s14, s14
     9b8:	vmul.f32	s14, s14, s15
     9bc:	vcvt.u32.f32	s14, s14
     9c0:	vstr	s14, [sp, #8]
     9c4:	ldrb.w	ip, [sp, #8]
     9c8:	b.n	854 <updateBeams() [clone .part.11]+0x144>
     9ca:	movs	r6, #1
     9cc:	b.n	962 <updateBeams() [clone .part.11]+0x252>
		active = false;
		return;
	}

	float posFac = (float)(millis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     9ce:	vmov.f32	s15, #112	; 0x3f800000  1.0
     9d2:	vsub.f32	s18, s15, s18
     9d6:	b.n	774 <updateBeams() [clone .part.11]+0x64>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     9d8:	ldr	r1, [pc, #148]	; (a70 <updateBeams() [clone .part.11]+0x360>)
     9da:	vmov	s13, r6
     9de:	smull	lr, r1, r1, r5
     9e2:	rsb	lr, r6, ip
     9e6:	add	r1, r5
     9e8:	rsb	r1, r0, r1, asr #5
     9ec:	rsb	r1, r1, r1, lsl #4
     9f0:	sub.w	r1, r5, r1, lsl #2
     9f4:	rsb	r1, r1, #60	; 0x3c
     9f8:	mul.w	r1, r1, lr
     9fc:	ldr	r0, [pc, #112]	; (a70 <updateBeams() [clone .part.11]+0x360>)
     9fe:	smull	r0, r5, r0, r1
     a02:	asrs	r0, r1, #31
     a04:	add	r1, r5
     a06:	rsb	r1, r0, r1, asr #5
     a0a:	add	r6, r1
     a0c:	uxtb.w	r9, r6
     a10:	b.n	9ae <updateBeams() [clone .part.11]+0x29e>
     a12:	ldr	r1, [pc, #92]	; (a70 <updateBeams() [clone .part.11]+0x360>)
     a14:	rsb	ip, r6, ip
     a18:	vmov	s13, r6
     a1c:	smull	lr, r1, r1, r5
     a20:	add	r1, r5
     a22:	rsb	r0, r0, r1, asr #5
     a26:	rsb	r0, r0, r0, lsl #4
     a2a:	sub.w	r5, r5, r0, lsl #2
     a2e:	mul.w	r1, r5, ip
     a32:	ldr	r0, [pc, #60]	; (a70 <updateBeams() [clone .part.11]+0x360>)
     a34:	smull	r0, r5, r0, r1
     a38:	asrs	r0, r1, #31
     a3a:	add	r1, r5
     a3c:	rsb	r1, r0, r1, asr #5
     a40:	add	r6, r1
     a42:	uxtb.w	ip, r6
     a46:	b.n	9ae <updateBeams() [clone .part.11]+0x29e>
     a48:	.word	0x66666666
     a4c:	.word	0x40046666
     a50:	.word	0x2000c078
     a54:	.word	0x20006d78
     a58:	.word	0x20001520
     a5c:	.word	0x20003a18
     a60:	.word	0x20006d8c
     a64:	.word	0x20003bd0
     a68:	.word	0x00000000
     a6c:	.word	0xb60b60b7
     a70:	.word	0x88888889
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     a74:	ldr	r1, [pc, #176]	; (b28 <updateBeams() [clone .part.11]+0x418>)
     a76:	smull	r1, lr, r1, r5
     a7a:	rsb	r1, r6, ip
     a7e:	mov	ip, r6
     a80:	add	lr, r5
     a82:	rsb	r0, r0, lr, asr #5
     a86:	rsb	r0, r0, r0, lsl #4
     a8a:	sub.w	r0, r5, r0, lsl #2
     a8e:	rsb	r0, r0, #60	; 0x3c
     a92:	mul.w	r1, r0, r1
     a96:	ldr	r0, [pc, #144]	; (b28 <updateBeams() [clone .part.11]+0x418>)
     a98:	smull	r0, r5, r0, r1
     a9c:	asrs	r0, r1, #31
     a9e:	add	r1, r5
     aa0:	rsb	r1, r0, r1, asr #5
     aa4:	add	r6, r1
     aa6:	uxtb	r1, r6
     aa8:	vmov	s13, r1
     aac:	b.n	9ae <updateBeams() [clone .part.11]+0x29e>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     aae:	ldr	r1, [pc, #120]	; (b28 <updateBeams() [clone .part.11]+0x418>)
     ab0:	vmov	s13, ip
     ab4:	smull	r1, lr, r1, r5
     ab8:	rsb	r1, r6, ip
     abc:	mov	ip, r6
     abe:	add	lr, r5
     ac0:	rsb	r0, r0, lr, asr #5
     ac4:	rsb	r0, r0, r0, lsl #4
     ac8:	sub.w	r5, r5, r0, lsl #2
     acc:	mul.w	r1, r5, r1
     ad0:	b.n	9fc <updateBeams() [clone .part.11]+0x2ec>
     ad2:	ldr	r1, [pc, #84]	; (b28 <updateBeams() [clone .part.11]+0x418>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     ad4:	vmov	s13, ip
     ad8:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     adc:	mov	r9, r6
     ade:	smull	lr, r1, r1, r5
     ae2:	add	r1, r5
     ae4:	rsb	r0, r0, r1, asr #5
     ae8:	rsb	r0, r0, r0, lsl #4
     aec:	sub.w	r1, r5, r0, lsl #2
     af0:	rsb	r1, r1, #60	; 0x3c
     af4:	mul.w	r1, r1, ip
     af8:	b.n	a32 <updateBeams() [clone .part.11]+0x322>
     afa:	rsb	r1, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     afe:	mov	r9, r6
     b00:	mul.w	r5, r5, r1
     b04:	ldr	r1, [pc, #32]	; (b28 <updateBeams() [clone .part.11]+0x418>)
     b06:	smull	r1, r0, r1, r5
     b0a:	asrs	r1, r5, #31
     b0c:	add	r5, r0
     b0e:	rsb	r5, r1, r5, asr #5
     b12:	add	r6, r5
     b14:	uxtb	r1, r6
     b16:	vmov	s13, r1
     b1a:	b.n	9ae <updateBeams() [clone .part.11]+0x29e>
     b1c:	mov.w	ip, #0
     b20:	vmov	s13, ip
     b24:	b.n	9ae <updateBeams() [clone .part.11]+0x29e>
     b26:	nop
     b28:	.word	0x88888889

00000b2c <init_A()>:
//   Serial.println(avg_bri);
// }



void init_A() {
     b2c:	ldr	r3, [pc, #444]	; (cec <init_A()+0x1c0>)
  matrix_A.begin();
     b2e:	ldr	r0, [pc, #448]	; (cf0 <init_A()+0x1c4>)
//   Serial.println(avg_bri);
// }



void init_A() {
     b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b34:	sub.w	r6, r3, #28
     b38:	sub	sp, #12
  matrix_A.begin();
     b3a:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b3e:	add.w	r8, r3, #4608	; 0x1200
     b42:	add.w	sl, r6, #4640	; 0x1220
     b46:	str	r3, [sp, #4]
     b48:	bl	8090 <Adafruit_NeoPixel::begin()>
     b4c:	add.w	r7, r9, r9, lsl #1
     b50:	ldr	r5, [sp, #4]
     b52:	movs	r4, #0
     b54:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b58:	ldrb	r2, [r6, #24]
      return _background[x][y];
     b5a:	add	r3, r4
     b5c:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b60:	cbnz	r2, b66 <init_A()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     b62:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     b66:	cmp	r3, #0
     b68:	bne.w	cc2 <init_A()+0x196>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     b6c:	adds	r4, #1
     b6e:	adds	r5, #4
     b70:	cmp	r4, #24
     b72:	bne.n	b54 <init_A()+0x28>
     b74:	ldr	r3, [sp, #4]
     b76:	add.w	r9, r9, #24
     b7a:	adds	r3, #96	; 0x60
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     b7c:	cmp.w	r9, #576	; 0x240
     b80:	str	r3, [sp, #4]
     b82:	bne.n	b4c <init_A()+0x20>
     b84:	ldr	r3, [pc, #364]	; (cf4 <init_A()+0x1c8>)
     b86:	movs	r7, #0
     b88:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b8c:	add.w	sl, r3, #4608	; 0x1200
     b90:	str	r3, [sp, #4]
     b92:	add.w	r9, r6, #4640	; 0x1220
     b96:	add.w	r8, r7, r7, lsl #1
     b9a:	ldr	r5, [sp, #4]
     b9c:	movs	r4, #0
     b9e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     ba2:	ldrb	r2, [r6, #24]
      return _background[x][y];
     ba4:	add	r3, r4
     ba6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     ba8:	cbnz	r2, bae <init_A()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     baa:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     bae:	cmp	r3, #0
     bb0:	bne.n	c9a <init_A()+0x16e>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     bb2:	adds	r4, #1
     bb4:	adds	r5, #4
     bb6:	cmp	r4, #24
     bb8:	bne.n	b9e <init_A()+0x72>
     bba:	ldr	r3, [sp, #4]
     bbc:	adds	r7, #24
     bbe:	adds	r3, #96	; 0x60
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     bc0:	cmp.w	r7, #576	; 0x240
     bc4:	str	r3, [sp, #4]
     bc6:	bne.n	b96 <init_A()+0x6a>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     bc8:	movs	r0, #10
     bca:	bl	9770 <random(unsigned long)>
     bce:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     bd0:	movs	r0, #10
     bd2:	bl	9770 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     bd6:	adds	r6, r0, #4
     bd8:	add.w	r8, r0, #9
     bdc:	cmp	r6, r8
     bde:	bgt.n	c2e <init_A()+0x102>
     be0:	add.w	r5, r4, r4, lsl #1
     be4:	ldr.w	fp, [pc, #272]	; cf8 <init_A()+0x1cc>
     be8:	adds	r7, r4, #4
     bea:	adds	r4, #9
     bec:	add.w	r5, r6, r5, lsl #3
     bf0:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     bf4:	cmp	r7, r4
     bf6:	bgt.n	c26 <init_A()+0xfa>
     bf8:	ldr.w	r2, [fp, #16]
     bfc:	mov	sl, r5
     bfe:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c00:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c04:	add.w	r9, r9, #1
     c08:	add.w	sl, sl, #96	; 0x60
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c0c:	subs	r0, r0, r2
     c0e:	adds	r0, #2
     c10:	bl	9770 <random(unsigned long)>
     c14:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c18:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c1a:	add.w	r3, r2, #4294967295
     c1e:	add	r0, r3
     c20:	str.w	r0, [sl, #316]	; 0x13c
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c24:	ble.n	c00 <init_A()+0xd4>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     c26:	adds	r6, #1
     c28:	adds	r5, #4
     c2a:	cmp	r6, r8
     c2c:	ble.n	bf4 <init_A()+0xc8>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     c2e:	movs	r0, #10
     c30:	bl	9770 <random(unsigned long)>
     c34:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     c36:	movs	r0, #10
     c38:	bl	9770 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     c3c:	adds	r6, r0, #4
     c3e:	add.w	r8, r0, #9
     c42:	cmp	r8, r6
     c44:	blt.n	c94 <init_A()+0x168>
     c46:	add.w	r5, r4, r4, lsl #1
     c4a:	ldr.w	fp, [pc, #176]	; cfc <init_A()+0x1d0>
     c4e:	adds	r7, r4, #4
     c50:	adds	r4, #9
     c52:	add.w	r5, r6, r5, lsl #3
     c56:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     c5a:	cmp	r7, r4
     c5c:	bgt.n	c8c <init_A()+0x160>
     c5e:	ldr.w	r2, [fp, #16]
     c62:	mov	sl, r5
     c64:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c66:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c6a:	add.w	r9, r9, #1
     c6e:	add.w	sl, sl, #96	; 0x60
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c72:	subs	r0, r0, r2
     c74:	adds	r0, #2
     c76:	bl	9770 <random(unsigned long)>
     c7a:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c7e:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c80:	add.w	r3, r2, #4294967295
     c84:	add	r0, r3
     c86:	str.w	r0, [sl, #316]	; 0x13c
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c8a:	ble.n	c66 <init_A()+0x13a>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     c8c:	adds	r6, #1
     c8e:	adds	r5, #4
     c90:	cmp	r8, r6
     c92:	bge.n	c5a <init_A()+0x12e>
  //matrix_A.setBrightness(255);
  fg_automaton_A.init();
  bg_automaton_A.init();
  grow_automaton_A.init_square();
  sat_automaton_A.init_square();
}
     c94:	add	sp, #12
     c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c9a:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     c9c:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ca0:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ca2:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ca6:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ca8:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     caa:	adds	r0, #2
     cac:	ldrb.w	fp, [r3, r1]
     cb0:	bl	9770 <random(unsigned long)>
     cb4:	ldr	r3, [r6, #16]
     cb6:	rsb	r3, r3, fp
     cba:	adds	r3, #1
     cbc:	subs	r0, r3, r0
     cbe:	str	r0, [r5, #0]
     cc0:	b.n	bb2 <init_A()+0x86>
     cc2:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cc4:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cc8:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cca:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cce:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cd0:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cd2:	adds	r0, #2
     cd4:	ldrb.w	fp, [r3, r1]
     cd8:	bl	9770 <random(unsigned long)>
     cdc:	ldr	r3, [r6, #16]
     cde:	rsb	r3, r3, fp
     ce2:	adds	r3, #1
     ce4:	subs	r0, r3, r0
     ce6:	str	r0, [r5, #0]
     ce8:	b.n	b6c <init_A()+0x40>
     cea:	nop
     cec:	.word	0x20001540
     cf0:	.word	0x2000396c
     cf4:	.word	0x20009204
     cf8:	.word	0x20006da0
     cfc:	.word	0x20004dd4

00000d00 <init_B()>:

void init_B() {
     d00:	ldr	r3, [pc, #444]	; (ec0 <init_B()+0x1c0>)
  matrix_B.begin();
     d02:	ldr	r0, [pc, #448]	; (ec4 <init_B()+0x1c4>)
  bg_automaton_A.init();
  grow_automaton_A.init_square();
  sat_automaton_A.init_square();
}

void init_B() {
     d04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d08:	sub.w	r6, r3, #28
     d0c:	sub	sp, #12
  matrix_B.begin();
     d0e:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d12:	add.w	r8, r3, #4608	; 0x1200
     d16:	add.w	sl, r6, #4640	; 0x1220
     d1a:	str	r3, [sp, #4]
     d1c:	bl	8090 <Adafruit_NeoPixel::begin()>
     d20:	add.w	r7, r9, r9, lsl #1
     d24:	ldr	r5, [sp, #4]
     d26:	movs	r4, #0
     d28:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d2c:	ldrb	r2, [r6, #24]
      return _background[x][y];
     d2e:	add	r3, r4
     d30:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d34:	cbnz	r2, d3a <init_B()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     d36:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     d3a:	cmp	r3, #0
     d3c:	bne.w	e96 <init_B()+0x196>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d40:	adds	r4, #1
     d42:	adds	r5, #4
     d44:	cmp	r4, #24
     d46:	bne.n	d28 <init_B()+0x28>
     d48:	ldr	r3, [sp, #4]
     d4a:	add.w	r9, r9, #24
     d4e:	adds	r3, #96	; 0x60
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     d50:	cmp.w	r9, #576	; 0x240
     d54:	str	r3, [sp, #4]
     d56:	bne.n	d20 <init_B()+0x20>
     d58:	ldr	r3, [pc, #364]	; (ec8 <init_B()+0x1c8>)
     d5a:	movs	r7, #0
     d5c:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d60:	add.w	sl, r3, #4608	; 0x1200
     d64:	str	r3, [sp, #4]
     d66:	add.w	r9, r6, #4640	; 0x1220
     d6a:	add.w	r8, r7, r7, lsl #1
     d6e:	ldr	r5, [sp, #4]
     d70:	movs	r4, #0
     d72:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d76:	ldrb	r2, [r6, #24]
      return _background[x][y];
     d78:	add	r3, r4
     d7a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d7c:	cbnz	r2, d82 <init_B()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     d7e:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     d82:	cmp	r3, #0
     d84:	bne.n	e6e <init_B()+0x16e>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d86:	adds	r4, #1
     d88:	adds	r5, #4
     d8a:	cmp	r4, #24
     d8c:	bne.n	d72 <init_B()+0x72>
     d8e:	ldr	r3, [sp, #4]
     d90:	adds	r7, #24
     d92:	adds	r3, #96	; 0x60
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     d94:	cmp.w	r7, #576	; 0x240
     d98:	str	r3, [sp, #4]
     d9a:	bne.n	d6a <init_B()+0x6a>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     d9c:	movs	r0, #10
     d9e:	bl	9770 <random(unsigned long)>
     da2:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     da4:	movs	r0, #10
     da6:	bl	9770 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     daa:	adds	r6, r0, #4
     dac:	add.w	r8, r0, #9
     db0:	cmp	r6, r8
     db2:	bgt.n	e02 <init_B()+0x102>
     db4:	add.w	r5, r4, r4, lsl #1
     db8:	ldr.w	fp, [pc, #272]	; ecc <init_B()+0x1cc>
     dbc:	adds	r7, r4, #4
     dbe:	adds	r4, #9
     dc0:	add.w	r5, r6, r5, lsl #3
     dc4:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     dc8:	cmp	r7, r4
     dca:	bgt.n	dfa <init_B()+0xfa>
     dcc:	ldr.w	r2, [fp, #16]
     dd0:	mov	sl, r5
     dd2:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     dd4:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     dd8:	add.w	r9, r9, #1
     ddc:	add.w	sl, sl, #96	; 0x60
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     de0:	subs	r0, r0, r2
     de2:	adds	r0, #2
     de4:	bl	9770 <random(unsigned long)>
     de8:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     dec:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     dee:	add.w	r3, r2, #4294967295
     df2:	add	r0, r3
     df4:	str.w	r0, [sl, #316]	; 0x13c
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     df8:	ble.n	dd4 <init_B()+0xd4>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     dfa:	adds	r6, #1
     dfc:	adds	r5, #4
     dfe:	cmp	r6, r8
     e00:	ble.n	dc8 <init_B()+0xc8>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     e02:	movs	r0, #10
     e04:	bl	9770 <random(unsigned long)>
     e08:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     e0a:	movs	r0, #10
     e0c:	bl	9770 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     e10:	adds	r6, r0, #4
     e12:	add.w	r8, r0, #9
     e16:	cmp	r8, r6
     e18:	blt.n	e68 <init_B()+0x168>
     e1a:	add.w	r5, r4, r4, lsl #1
     e1e:	ldr.w	fp, [pc, #176]	; ed0 <init_B()+0x1d0>
     e22:	adds	r7, r4, #4
     e24:	adds	r4, #9
     e26:	add.w	r5, r6, r5, lsl #3
     e2a:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     e2e:	cmp	r7, r4
     e30:	bgt.n	e60 <init_B()+0x160>
     e32:	ldr.w	r2, [fp, #16]
     e36:	mov	sl, r5
     e38:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e3a:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e3e:	add.w	r9, r9, #1
     e42:	add.w	sl, sl, #96	; 0x60
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e46:	subs	r0, r0, r2
     e48:	adds	r0, #2
     e4a:	bl	9770 <random(unsigned long)>
     e4e:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e52:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e54:	add.w	r3, r2, #4294967295
     e58:	add	r0, r3
     e5a:	str.w	r0, [sl, #316]	; 0x13c
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e5e:	ble.n	e3a <init_B()+0x13a>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     e60:	adds	r6, #1
     e62:	adds	r5, #4
     e64:	cmp	r8, r6
     e66:	bge.n	e2e <init_B()+0x12e>
  //matrix_B.setBrightness(255);
  fg_automaton_B.init();
  bg_automaton_B.init();
  grow_automaton_B.init_square();
  sat_automaton_B.init_square();
}
     e68:	add	sp, #12
     e6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e6e:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e70:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e74:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e76:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e7a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e7c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e7e:	adds	r0, #2
     e80:	ldrb.w	fp, [r3, r1]
     e84:	bl	9770 <random(unsigned long)>
     e88:	ldr	r3, [r6, #16]
     e8a:	rsb	r3, r3, fp
     e8e:	adds	r3, #1
     e90:	subs	r0, r3, r0
     e92:	str	r0, [r5, #0]
     e94:	b.n	d86 <init_B()+0x86>
     e96:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e98:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e9c:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e9e:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ea2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ea4:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ea6:	adds	r0, #2
     ea8:	ldrb.w	fp, [r3, r1]
     eac:	bl	9770 <random(unsigned long)>
     eb0:	ldr	r3, [r6, #16]
     eb2:	rsb	r3, r3, fp
     eb6:	adds	r3, #1
     eb8:	subs	r0, r3, r0
     eba:	str	r0, [r5, #0]
     ebc:	b.n	d40 <init_B()+0x40>
     ebe:	nop
     ec0:	.word	0x20002764
     ec4:	.word	0x20003980
     ec8:	.word	0x2000a428
     ecc:	.word	0x20007fc4
     ed0:	.word	0x20003bb0

00000ed4 <renderInterrupt()>:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     ed4:	ldr	r2, [pc, #44]	; (f04 <renderInterrupt()+0x30>)

  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
     ed6:	push	{r4, lr}
     ed8:	ldr	r4, [pc, #44]	; (f08 <renderInterrupt()+0x34>)
  }
  return false;
}

void updateBeams() {
  if ((int)sinceBeamUpdate < beamUpdateInterval) return;
     eda:	ldr	r1, [r2, #0]
     edc:	ldr	r3, [r4, #0]
     ede:	ldr	r2, [pc, #44]	; (f0c <renderInterrupt()+0x38>)
     ee0:	subs	r3, r3, r1
     ee2:	ldr	r2, [r2, #0]
     ee4:	cmp	r3, r2
     ee6:	bge.n	efe <renderInterrupt()+0x2a>
     ee8:	ldr	r2, [pc, #36]	; (f10 <renderInterrupt()+0x3c>)
     eea:	ldr	r3, [r4, #0]
}


elapsedMillis sinceFadeUpdate = 0;
void updateScreensFade() {
  if (sinceFadeUpdate < FADE_INTERVAL) return;
     eec:	ldr	r2, [r2, #0]
     eee:	subs	r3, r3, r2
     ef0:	cmp	r3, #24
     ef2:	bhi.n	ef6 <renderInterrupt()+0x22>
     ef4:	pop	{r4, pc}
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
}
     ef6:	ldmia.w	sp!, {r4, lr}
     efa:	b.w	7c <updateScreensFade() [clone .part.12]>
     efe:	bl	710 <updateBeams() [clone .part.11]>
     f02:	b.n	ee8 <renderInterrupt()+0x14>
     f04:	.word	0x20001520
     f08:	.word	0x2000c078
     f0c:	.word	0x20000be8
     f10:	.word	0x20003bac

00000f14 <Screen::iterate_animation() [clone .part.13]>:
		_screen->show();
	}


	int ratio = 0;
	void iterate_animation() {
     f14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     f18:	movs	r3, #2
     f1a:	sub	sp, #68	; 0x44
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
     f1c:	ldr.w	r9, [r0, #4]
     f20:	movs	r2, #32
     f22:	str	r3, [sp, #4]
		_screen->show();
	}


	int ratio = 0;
	void iterate_animation() {
     f24:	mov	fp, r0
     f26:	addw	r3, r9, #2428	; 0x97c
     f2a:	movs	r1, #0
     f2c:	ldr.w	sl, [pc, #1684]	; 15c4 <Screen::iterate_animation() [clone .part.13]+0x6b0>
     f30:	add.w	r0, sp, r2
     f34:	str	r3, [sp, #12]
     f36:	add.w	r3, r9, #4640	; 0x1220
     f3a:	str	r1, [sp, #20]
     f3c:	str	r3, [sp, #24]
     f3e:	bl	a594 <memset>
     f42:	str.w	fp, [sp, #28]
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
     f46:	bl	ed4 <renderInterrupt()>
     f4a:	ldrb.w	r2, [r9, #24]
     f4e:	ldr	r3, [sp, #24]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     f50:	movs	r7, #2
     f52:	str	r2, [sp, #16]
     f54:	ldr	r3, [r3, #0]
     f56:	ldr	r2, [sp, #20]
     f58:	ldr	r1, [sp, #12]
     f5a:	add.w	r8, r3, r2
     f5e:	sub.w	ip, r1, #96	; 0x60
     f62:	sub.w	r3, r1, #2400	; 0x960
     f66:	mov	fp, r8
     f68:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     f6a:	ldr	r3, [sp, #16]
     f6c:	cmp	r3, #0
     f6e:	beq.w	133e <Screen::iterate_animation() [clone .part.13]+0x42a>
      return _background[x][y];
     f72:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     f76:	cmp	r3, #0
     f78:	beq.n	104e <Screen::iterate_animation() [clone .part.13]+0x13a>
     f7a:	ldr	r3, [sp, #4]
     f7c:	add.w	lr, sp, #32
     f80:	subs	r6, r3, #3
     f82:	subs	r3, r7, #3
     f84:	str	r3, [sp, #8]
     f86:	smull	r3, r2, sl, r6
     f8a:	asrs	r3, r6, #31
     f8c:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     f8e:	mov	r5, lr
     f90:	rsb	r3, r3, r2, asr #2
     f94:	add.w	r3, r3, r3, lsl #1
     f98:	sub.w	r3, r6, r3, lsl #3
     f9c:	adds	r3, #24
     f9e:	smull	r2, r1, sl, r3
     fa2:	asrs	r2, r3, #31
     fa4:	rsb	r2, r2, r1, asr #2
     fa8:	add.w	r2, r2, r2, lsl #1
     fac:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     fb0:	add.w	r2, r2, r2, lsl #1
     fb4:	lsls	r4, r2, #3
     fb6:	smull	r3, r2, sl, r0
     fba:	asrs	r3, r0, #31
     fbc:	rsb	r3, r3, r2, asr #2
     fc0:	add.w	r3, r3, r3, lsl #1
     fc4:	sub.w	r3, r0, r3, lsl #3
     fc8:	adds	r0, #1
     fca:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     fcc:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     fce:	smull	r2, r1, sl, r3
     fd2:	mov.w	r2, r3, asr #31
     fd6:	rsb	r2, r2, r1, asr #2
     fda:	add.w	r2, r2, r2, lsl #1
     fde:	sub.w	r3, r3, r2, lsl #3
     fe2:	add	r3, r4
     fe4:	add.w	r3, r9, r3, lsl #2
     fe8:	ldr	r3, [r3, #28]
     fea:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     fee:	bne.n	fb6 <Screen::iterate_animation() [clone .part.13]+0xa2>
     ff0:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     ff2:	ldr	r3, [sp, #4]
     ff4:	add.w	lr, lr, #12
     ff8:	cmp	r3, r6
     ffa:	bne.n	f86 <Screen::iterate_animation() [clone .part.13]+0x72>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     ffc:	ldr	r3, [sp, #0]
     ffe:	movs	r0, #1
    1000:	ldr	r1, [r3, #0]
    1002:	ldr.w	r3, [r9]
    1006:	adds	r5, r1, r3
    1008:	movs	r4, #0
    100a:	mov	r3, r4
    100c:	b.n	1014 <Screen::iterate_animation() [clone .part.13]+0x100>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    100e:	adds	r3, #1
    1010:	cmp	r3, #8
    1012:	beq.n	102a <Screen::iterate_animation() [clone .part.13]+0x116>
          if ((i >> j) % 2 == 1){
    1014:	asr.w	r2, r0, r3
    1018:	lsls	r6, r2, #31
    101a:	bpl.n	100e <Screen::iterate_animation() [clone .part.13]+0xfa>
            sum += neighbours[j];
    101c:	add	r2, sp, #32
    101e:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1022:	adds	r3, #1
    1024:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1026:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1028:	bne.n	1014 <Screen::iterate_animation() [clone .part.13]+0x100>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    102a:	cmp	r5, r4
    102c:	beq.w	1348 <Screen::iterate_animation() [clone .part.13]+0x434>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1030:	adds	r0, #1
    1032:	cmp.w	r0, #256	; 0x100
    1036:	bne.n	1008 <Screen::iterate_animation() [clone .part.13]+0xf4>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1038:	ldr.w	r3, [r9, #8]
    103c:	subs	r1, r1, r3
    103e:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1042:	ldr.w	r3, [r9, #12]
    1046:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    1048:	it	gt
    104a:	strgt.w	r3, [ip]
    104e:	ldr	r3, [sp, #0]
    1050:	add.w	ip, ip, #4
    1054:	adds	r7, #1
    1056:	add.w	r8, r8, #1
    105a:	adds	r3, #4
    105c:	add.w	fp, fp, #1
    1060:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1062:	ldr	r3, [sp, #12]
    1064:	cmp	ip, r3
    1066:	bne.n	f6a <Screen::iterate_animation() [clone .part.13]+0x56>
    1068:	ldr	r3, [sp, #20]
    106a:	add.w	r2, ip, #96	; 0x60
    106e:	adds	r3, #24
    1070:	str	r2, [sp, #12]
    1072:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1074:	cmp.w	r3, #576	; 0x240
    1078:	str	r3, [sp, #20]
    107a:	add.w	r2, r2, #1
    107e:	str	r2, [sp, #4]
    1080:	bne.w	f46 <Screen::iterate_animation() [clone .part.13]+0x32>
    1084:	movw	r5, #4632	; 0x1218
    1088:	ldr.w	fp, [sp, #28]
    108c:	addw	r4, r9, #2328	; 0x918
    1090:	add	r5, r9
    1092:	sub.w	r3, r4, #2304	; 0x900
    1096:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    109a:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    109c:	ldr.w	r1, [r2, #4]!
    10a0:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    10a4:	cmp	r3, r0
    10a6:	bne.n	109c <Screen::iterate_animation() [clone .part.13]+0x188>
    10a8:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    10aa:	cmp	r4, r5
    10ac:	bne.n	1092 <Screen::iterate_animation() [clone .part.13]+0x17e>
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    10ae:	ldr.w	r9, [fp]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    10b2:	movs	r3, #2
    10b4:	movs	r2, #32
    10b6:	movs	r1, #0
    10b8:	str	r3, [sp, #4]
    10ba:	addw	r3, r9, #2428	; 0x97c
    10be:	ldr.w	sl, [pc, #1284]	; 15c4 <Screen::iterate_animation() [clone .part.13]+0x6b0>
    10c2:	add.w	r0, sp, r2
    10c6:	str	r3, [sp, #12]
    10c8:	add.w	r3, r9, #4640	; 0x1220
    10cc:	str	r1, [sp, #20]
    10ce:	str	r3, [sp, #24]
    10d0:	bl	a594 <memset>
    10d4:	str.w	fp, [sp, #28]
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
    10d8:	bl	ed4 <renderInterrupt()>
    10dc:	ldrb.w	r2, [r9, #24]
    10e0:	ldr	r3, [sp, #24]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    10e2:	movs	r7, #2
    10e4:	str	r2, [sp, #16]
    10e6:	ldr	r3, [r3, #0]
    10e8:	ldr	r2, [sp, #20]
    10ea:	ldr	r1, [sp, #12]
    10ec:	add.w	r8, r3, r2
    10f0:	sub.w	ip, r1, #96	; 0x60
    10f4:	sub.w	r3, r1, #2400	; 0x960
    10f8:	mov	fp, r8
    10fa:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    10fc:	ldr	r3, [sp, #16]
    10fe:	cmp	r3, #0
    1100:	beq.w	1354 <Screen::iterate_animation() [clone .part.13]+0x440>
      return _background[x][y];
    1104:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    1108:	cmp	r3, #0
    110a:	beq.n	11e0 <Screen::iterate_animation() [clone .part.13]+0x2cc>
    110c:	ldr	r3, [sp, #4]
    110e:	add.w	lr, sp, #32
    1112:	subs	r6, r3, #3
    1114:	subs	r3, r7, #3
    1116:	str	r3, [sp, #8]
    1118:	smull	r3, r2, sl, r6
    111c:	asrs	r3, r6, #31
    111e:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1120:	mov	r5, lr
    1122:	rsb	r3, r3, r2, asr #2
    1126:	add.w	r3, r3, r3, lsl #1
    112a:	sub.w	r3, r6, r3, lsl #3
    112e:	adds	r3, #24
    1130:	smull	r2, r1, sl, r3
    1134:	asrs	r2, r3, #31
    1136:	rsb	r2, r2, r1, asr #2
    113a:	add.w	r2, r2, r2, lsl #1
    113e:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1142:	add.w	r2, r2, r2, lsl #1
    1146:	lsls	r4, r2, #3
    1148:	smull	r3, r2, sl, r0
    114c:	asrs	r3, r0, #31
    114e:	rsb	r3, r3, r2, asr #2
    1152:	add.w	r3, r3, r3, lsl #1
    1156:	sub.w	r3, r0, r3, lsl #3
    115a:	adds	r0, #1
    115c:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    115e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1160:	smull	r2, r1, sl, r3
    1164:	mov.w	r2, r3, asr #31
    1168:	rsb	r2, r2, r1, asr #2
    116c:	add.w	r2, r2, r2, lsl #1
    1170:	sub.w	r3, r3, r2, lsl #3
    1174:	add	r3, r4
    1176:	add.w	r3, r9, r3, lsl #2
    117a:	ldr	r3, [r3, #28]
    117c:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1180:	bne.n	1148 <Screen::iterate_animation() [clone .part.13]+0x234>
    1182:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1184:	ldr	r3, [sp, #4]
    1186:	add.w	lr, lr, #12
    118a:	cmp	r6, r3
    118c:	bne.n	1118 <Screen::iterate_animation() [clone .part.13]+0x204>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    118e:	ldr	r3, [sp, #0]
    1190:	movs	r0, #1
    1192:	ldr	r1, [r3, #0]
    1194:	ldr.w	r3, [r9]
    1198:	adds	r5, r1, r3
    119a:	movs	r4, #0
    119c:	mov	r3, r4
    119e:	b.n	11a6 <Screen::iterate_animation() [clone .part.13]+0x292>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11a0:	adds	r3, #1
    11a2:	cmp	r3, #8
    11a4:	beq.n	11bc <Screen::iterate_animation() [clone .part.13]+0x2a8>
          if ((i >> j) % 2 == 1){
    11a6:	asr.w	r2, r0, r3
    11aa:	lsls	r2, r2, #31
    11ac:	bpl.n	11a0 <Screen::iterate_animation() [clone .part.13]+0x28c>
            sum += neighbours[j];
    11ae:	add	r2, sp, #32
    11b0:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11b4:	adds	r3, #1
    11b6:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    11b8:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11ba:	bne.n	11a6 <Screen::iterate_animation() [clone .part.13]+0x292>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    11bc:	cmp	r5, r4
    11be:	beq.w	135e <Screen::iterate_animation() [clone .part.13]+0x44a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    11c2:	adds	r0, #1
    11c4:	cmp.w	r0, #256	; 0x100
    11c8:	bne.n	119a <Screen::iterate_animation() [clone .part.13]+0x286>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    11ca:	ldr.w	r3, [r9, #8]
    11ce:	subs	r1, r1, r3
    11d0:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    11d4:	ldr.w	r3, [r9, #12]
    11d8:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    11da:	it	gt
    11dc:	strgt.w	r3, [ip]
    11e0:	ldr	r3, [sp, #0]
    11e2:	add.w	ip, ip, #4
    11e6:	adds	r7, #1
    11e8:	add.w	r8, r8, #1
    11ec:	adds	r3, #4
    11ee:	add.w	fp, fp, #1
    11f2:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    11f4:	ldr	r3, [sp, #12]
    11f6:	cmp	r3, ip
    11f8:	bne.n	10fc <Screen::iterate_animation() [clone .part.13]+0x1e8>
    11fa:	ldr	r2, [sp, #12]
    11fc:	ldr	r3, [sp, #20]
    11fe:	adds	r2, #96	; 0x60
    1200:	adds	r3, #24
    1202:	str	r2, [sp, #12]
    1204:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1206:	cmp.w	r3, #576	; 0x240
    120a:	str	r3, [sp, #20]
    120c:	add.w	r2, r2, #1
    1210:	str	r2, [sp, #4]
    1212:	bne.w	10d8 <Screen::iterate_animation() [clone .part.13]+0x1c4>
    1216:	movw	r5, #4632	; 0x1218
    121a:	ldr.w	fp, [sp, #28]
    121e:	addw	r4, r9, #2328	; 0x918
    1222:	add	r5, r9
    1224:	sub.w	r3, r4, #2304	; 0x900
    1228:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    122c:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    122e:	ldr.w	r1, [r2, #4]!
    1232:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1236:	cmp	r3, r0
    1238:	bne.n	122e <Screen::iterate_animation() [clone .part.13]+0x31a>
    123a:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    123c:	cmp	r4, r5
    123e:	bne.n	1224 <Screen::iterate_animation() [clone .part.13]+0x310>
		ratio++;
    1240:	ldr.w	r3, [fp, #44]	; 0x2c
    1244:	adds	r3, #1
		if (ratio == 1){
    1246:	cmp	r3, #1
	void iterate_animation() {
		if (newFrameReady) return;

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    1248:	str.w	r3, [fp, #44]	; 0x2c
		if (ratio == 1){
    124c:	beq.w	14d2 <Screen::iterate_animation() [clone .part.13]+0x5be>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1250:	mov.w	ip, #0
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1254:	ldr	r1, [pc, #852]	; (15ac <Screen::iterate_animation() [clone .part.13]+0x698>)
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1256:	mov.w	lr, #360	; 0x168
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    125a:	ldr	r0, [pc, #852]	; (15b0 <Screen::iterate_animation() [clone .part.13]+0x69c>)
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    125c:	str.w	ip, [sp, #4]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1260:	ldr	r2, [sp, #4]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1262:	movs	r4, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    1264:	add.w	sl, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    1268:	add.w	r3, r2, r2, lsl #3
    126c:	mov.w	sl, sl, lsl #3
    1270:	lsls	r3, r3, #3
    1272:	str	r3, [sp, #0]

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				if ((*_fg_automaton).can_color(x, y)) {
    1274:	ldr.w	r3, [fp, #4]
    1278:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    127c:	ldrb	r5, [r3, #24]
    127e:	ldr	r2, [r2, #0]
      return _background[x][y];
    1280:	add	r2, r4
    1282:	ldrb.w	r2, [r2, ip]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1286:	cbnz	r5, 128c <Screen::iterate_animation() [clone .part.13]+0x378>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1288:	eor.w	r2, r2, #1
    128c:	cbnz	r2, 1292 <Screen::iterate_animation() [clone .part.13]+0x37e>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    128e:	ldr.w	r3, [fp]
    1292:	add.w	r2, sl, r4
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    1296:	add.w	r6, sl, r4
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    129a:	add.w	r3, r3, r2, lsl #2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    129e:	adds	r6, #6
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    12a0:	ldr	r5, [r3, #28]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12a2:	lsls	r6, r6, #2
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    12a4:	ldr	r3, [pc, #780]	; (15b4 <Screen::iterate_animation() [clone .part.13]+0x6a0>)
    12a6:	smull	r2, r3, r5, r3
    12aa:	asrs	r2, r5, #31
    12ac:	add	r3, r5
    12ae:	rsb	r3, r2, r3, asr #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12b2:	ldr.w	r2, [fp, #8]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
    12b6:	mls	r3, lr, r3, r5
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12ba:	ldr.w	r5, [fp, #12]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12be:	add	r2, r6
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12c0:	add	r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12c2:	ldr	r2, [r2, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12c4:	ldr	r5, [r5, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12c6:	add.w	r2, r2, r2, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12ca:	adds	r5, #50	; 0x32
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12cc:	lsls	r2, r2, #1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12ce:	smull	r8, r9, r5, r1
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12d2:	smull	r6, r7, r2, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12d6:	asrs	r6, r5, #31
    12d8:	add.w	r8, r5, r9
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12dc:	add.w	r9, r2, r7
    12e0:	asrs	r7, r2, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12e2:	rsb	r6, r6, r8, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12e6:	rsb	r7, r7, r9, asr #7
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12ea:	rsb	r6, r6, r6, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12ee:	rsb	r7, r7, r7, lsl #8
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 200);
    12f2:	subs	r6, r5, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*10) % 255;
    12f4:	subs	r7, r2, r7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    12f6:	cmp	r6, #199	; 0xc7
    12f8:	ble.n	136a <Screen::iterate_animation() [clone .part.13]+0x456>
    12fa:	rsb	r6, r6, #255	; 0xff
    12fe:	ldr	r2, [pc, #696]	; (15b8 <Screen::iterate_animation() [clone .part.13]+0x6a4>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    1300:	cmp	r7, #150	; 0x96
    1302:	ldr.w	r2, [r2, r6, lsl #2]
    1306:	ite	gt
    1308:	movgt	r5, #255	; 0xff
    130a:	movle	r5, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    130c:	cmp	r2, #255	; 0xff
    130e:	bne.n	1376 <Screen::iterate_animation() [clone .part.13]+0x462>


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    1310:	adds	r4, #1
    1312:	cmp	r4, #24
    1314:	bne.n	1274 <Screen::iterate_animation() [clone .part.13]+0x360>
	}


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    1316:	ldr	r3, [sp, #4]
    1318:	add.w	ip, ip, #24
    131c:	adds	r3, #1
    131e:	cmp	r3, #24
    1320:	str	r3, [sp, #4]
    1322:	bne.n	1260 <Screen::iterate_animation() [clone .part.13]+0x34c>
			ratio = 0;
		}

		gen_color_matrix();

		newFrameReady = true;
    1324:	movs	r3, #1
    1326:	movs	r1, #13
    1328:	ldr	r0, [pc, #656]	; (15bc <Screen::iterate_animation() [clone .part.13]+0x6a8>)
    132a:	strb.w	r3, [fp, #20]
    132e:	bl	889c <usb_serial_write>
    1332:	ldr	r0, [pc, #652]	; (15c0 <Screen::iterate_animation() [clone .part.13]+0x6ac>)
    Serial.println("newFrameReady");
	}
    1334:	add	sp, #68	; 0x44
    1336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    133a:	b.w	99c4 <Print::println()>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    133e:	ldrb.w	r3, [fp]
    1342:	eor.w	r3, r3, #1
    1346:	b.n	f76 <Screen::iterate_animation() [clone .part.13]+0x62>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1348:	ldr.w	r2, [r9, #4]
    134c:	add	r1, r2
    134e:	str.w	r1, [ip]
    1352:	b.n	1042 <Screen::iterate_animation() [clone .part.13]+0x12e>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1354:	ldrb.w	r3, [fp]
    1358:	eor.w	r3, r3, #1
    135c:	b.n	1108 <Screen::iterate_animation() [clone .part.13]+0x1f4>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    135e:	ldr.w	r2, [r9, #4]
    1362:	add	r1, r2
    1364:	str.w	r1, [ip]
    1368:	b.n	11d4 <Screen::iterate_animation() [clone .part.13]+0x2c0>
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > 150){
    136a:	cmp	r7, #151	; 0x97
    136c:	mov.w	r2, #7
    1370:	ite	lt
    1372:	movlt	r5, #0
    1374:	movge	r5, #255	; 0xff
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    1376:	smull	r7, r6, r0, r3
    137a:	asrs	r7, r3, #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    137c:	mul.w	r2, r5, r2
    switch(hue/60) {
    1380:	add	r6, r3
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    1382:	asrs	r2, r2, #8
    switch(hue/60) {
    1384:	rsb	r6, r7, r6, asr #5
    1388:	cmp	r6, #5
    138a:	bhi.w	17f4 <Screen::iterate_animation() [clone .part.13]+0x8e0>
    138e:	tbb	[pc, r6]
    1392:	.short	0x7d99
    1394:	.word	0x032c4662
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    1398:	smull	r6, r9, r0, r3
    139c:	rsb	r8, r2, r5
    13a0:	uxtb	r6, r5
    13a2:	add.w	r5, r9, r3
    13a6:	uxtb.w	r9, r2
    13aa:	rsb	r5, r7, r5, asr #5
    13ae:	rsb	r5, r5, r5, lsl #4
    13b2:	sub.w	r3, r3, r5, lsl #2
    13b6:	rsb	r3, r3, #60	; 0x3c
    13ba:	mul.w	r3, r8, r3
    13be:	smull	r5, r7, r0, r3
    13c2:	asrs	r5, r3, #31
    13c4:	add	r3, r7
    13c6:	rsb	r3, r5, r3, asr #5
    13ca:	add	r2, r3
    13cc:	uxtb.w	r8, r2
    break;
    }
    *r = colors[0];
    13d0:	ldr	r5, [sp, #0]
    13d2:	add.w	r3, r4, r4, lsl #1
				

				//hue = filter_hue(hue);
				bri = shift_bri(bri);

				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    13d6:	ldr.w	r2, [fp, #40]	; 0x28
    13da:	add	r3, r5
    13dc:	adds	r5, r2, r3
    13de:	strb	r6, [r2, r3]
    *g = colors[1];
    13e0:	strb.w	r9, [r5, #1]
    *b = colors[2]; 
    13e4:	strb.w	r8, [r5, #2]
    13e8:	b.n	1310 <Screen::iterate_animation() [clone .part.13]+0x3fc>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    13ea:	smull	r6, r9, r0, r3
    13ee:	uxtb.w	r8, r5
    13f2:	subs	r6, r5, r2
    13f4:	add.w	r5, r9, r3
    13f8:	uxtb.w	r9, r2
    13fc:	rsb	r5, r7, r5, asr #5
    1400:	rsb	r5, r5, r5, lsl #4
    1404:	sub.w	r3, r3, r5, lsl #2
    1408:	mul.w	r6, r3, r6
    140c:	smull	r3, r5, r0, r6
    1410:	asrs	r3, r6, #31
    1412:	add	r6, r5
    1414:	rsb	r6, r3, r6, asr #5
    1418:	add	r2, r6
    141a:	uxtb	r6, r2
    141c:	b.n	13d0 <Screen::iterate_animation() [clone .part.13]+0x4bc>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    141e:	smull	r8, r6, r0, r3
    1422:	rsb	r9, r2, r5
    1426:	uxtb.w	r8, r5
    142a:	adds	r5, r6, r3
    142c:	uxtb	r6, r2
    142e:	rsb	r5, r7, r5, asr #5
    1432:	rsb	r5, r5, r5, lsl #4
    1436:	sub.w	r3, r3, r5, lsl #2
    143a:	rsb	r3, r3, #60	; 0x3c
    143e:	mul.w	r3, r9, r3
    1442:	smull	r5, r7, r0, r3
    1446:	asrs	r5, r3, #31
    1448:	add	r3, r7
    144a:	rsb	r3, r5, r3, asr #5
    144e:	add	r2, r3
    1450:	uxtb.w	r9, r2
    1454:	b.n	13d0 <Screen::iterate_animation() [clone .part.13]+0x4bc>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    1456:	smull	r8, r6, r0, r3
    145a:	uxtb.w	r9, r5
    145e:	rsb	r8, r2, r5
    1462:	adds	r5, r6, r3
    1464:	uxtb	r6, r2
    1466:	rsb	r5, r7, r5, asr #5
    146a:	rsb	r5, r5, r5, lsl #4
    146e:	sub.w	r3, r3, r5, lsl #2
    1472:	mul.w	r8, r3, r8
    1476:	smull	r3, r5, r0, r8
    147a:	mov.w	r3, r8, asr #31
    147e:	add	r8, r5
    1480:	rsb	r8, r3, r8, asr #5
    1484:	add	r2, r8
    1486:	uxtb.w	r8, r2
    148a:	b.n	13d0 <Screen::iterate_animation() [clone .part.13]+0x4bc>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    148c:	smull	r6, r8, r0, r3
    1490:	uxtb.w	r9, r5
    1494:	subs	r6, r5, r2
    1496:	add.w	r5, r8, r3
    149a:	uxtb.w	r8, r2
    149e:	rsb	r5, r7, r5, asr #5
    14a2:	rsb	r5, r5, r5, lsl #4
    14a6:	sub.w	r3, r3, r5, lsl #2
    14aa:	rsb	r3, r3, #60	; 0x3c
    14ae:	mul.w	r3, r6, r3
    14b2:	smull	r5, r6, r0, r3
    14b6:	asrs	r5, r3, #31
    14b8:	add	r3, r6
    14ba:	rsb	r3, r5, r3, asr #5
    14be:	add	r2, r3
    14c0:	uxtb	r6, r2
    14c2:	b.n	13d0 <Screen::iterate_animation() [clone .part.13]+0x4bc>
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    14c4:	subs	r7, r5, r2
    14c6:	uxtb	r6, r5
    14c8:	uxtb.w	r8, r2
    14cc:	mul.w	r3, r3, r7
    14d0:	b.n	1442 <Screen::iterate_animation() [clone .part.13]+0x52e>

		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == 1){
			(*_grow_automaton).iterate_growth();
    14d2:	ldr.w	sl, [fp, #8]
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    14d6:	movs	r2, #32
    14d8:	mov.w	r8, #2
    14dc:	ldr.w	r9, [pc, #228]	; 15c4 <Screen::iterate_animation() [clone .part.13]+0x6b0>
    14e0:	addw	r3, sl, #2332	; 0x91c
    14e4:	movs	r1, #0
    14e6:	add.w	r0, sp, r2
    14ea:	str	r3, [sp, #4]
    14ec:	bl	a594 <memset>
    14f0:	str.w	fp, [sp, #20]
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
    14f4:	bl	ed4 <renderInterrupt()>
    14f8:	ldr.w	r3, [sl]
    14fc:	ldr	r2, [sp, #4]
    14fe:	mov.w	ip, #4294967295
    1502:	str	r3, [sp, #12]
    1504:	ldr.w	r3, [sl, #12]
    1508:	mov	fp, r2
    150a:	str	r3, [sp, #8]
    150c:	subw	r3, r2, #2308	; 0x904
    1510:	str	r3, [sp, #0]
    1512:	sub.w	r3, r8, #3
    1516:	str	r3, [sp, #16]
    1518:	ldr	r6, [sp, #16]
    151a:	add.w	lr, sp, #32
    151e:	add.w	r7, ip, #3
    1522:	smull	r3, r2, r9, r6
    1526:	asrs	r3, r6, #31
    1528:	mov	r4, lr
    152a:	mov	r1, ip
    152c:	rsb	r3, r3, r2, asr #2
    1530:	add.w	r3, r3, r3, lsl #1
    1534:	sub.w	r3, r6, r3, lsl #3
    1538:	adds	r3, #24
    153a:	smull	r2, r0, r9, r3
    153e:	asrs	r2, r3, #31
    1540:	rsb	r0, r2, r0, asr #2
    1544:	add.w	r0, r0, r0, lsl #1
    1548:	sub.w	r0, r3, r0, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    154c:	add.w	r0, r0, r0, lsl #1
    1550:	lsls	r0, r0, #3
    1552:	smull	r3, r2, r9, r1
    1556:	asrs	r3, r1, #31
    1558:	rsb	r3, r3, r2, asr #2
    155c:	add.w	r3, r3, r3, lsl #1
    1560:	sub.w	r3, r1, r3, lsl #3
    1564:	adds	r1, #1
    1566:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1568:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    156a:	smull	r2, r5, r9, r3
    156e:	mov.w	r2, r3, asr #31
    1572:	rsb	r2, r2, r5, asr #2
    1576:	add.w	r2, r2, r2, lsl #1
    157a:	sub.w	r3, r3, r2, lsl #3
    157e:	add	r3, r0
    1580:	add.w	r3, sl, r3, lsl #2
    1584:	ldr	r3, [r3, #28]
    1586:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    158a:	bne.n	1552 <Screen::iterate_animation() [clone .part.13]+0x63e>
    158c:	adds	r6, #1
    158e:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    1592:	cmp	r8, r6
    1594:	bne.n	1522 <Screen::iterate_animation() [clone .part.13]+0x60e>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1596:	ldr	r3, [sp, #0]
    1598:	movs	r1, #1
    159a:	ldr.w	r0, [r3, #4]!
    159e:	str	r3, [sp, #0]
    15a0:	ldr	r3, [sp, #12]
    15a2:	adds	r5, r0, r3
    15a4:	movs	r4, #0
    15a6:	mov	r3, r4
    15a8:	b.n	15ce <Screen::iterate_animation() [clone .part.13]+0x6ba>
    15aa:	nop
    15ac:	.word	0x80808081
    15b0:	.word	0x88888889
    15b4:	.word	0xb60b60b7
    15b8:	.word	0x20000000
    15bc:	.word	0x2000041c
    15c0:	.word	0x20000ca4
    15c4:	.word	0x2aaaaaab
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15c8:	adds	r3, #1
    15ca:	cmp	r3, #8
    15cc:	beq.n	15e4 <Screen::iterate_animation() [clone .part.13]+0x6d0>
          if ((i >> j) % 2 == 1){
    15ce:	asr.w	r2, r1, r3
    15d2:	lsls	r6, r2, #31
    15d4:	bpl.n	15c8 <Screen::iterate_animation() [clone .part.13]+0x6b4>
            sum += neighbours[j];
    15d6:	add	r2, sp, #32
    15d8:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15dc:	adds	r3, #1
    15de:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    15e0:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    15e2:	bne.n	15ce <Screen::iterate_animation() [clone .part.13]+0x6ba>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    15e4:	cmp	r5, r4
    15e6:	beq.w	17e8 <Screen::iterate_animation() [clone .part.13]+0x8d4>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    15ea:	adds	r1, #1
    15ec:	cmp.w	r1, #256	; 0x100
    15f0:	bne.n	15a4 <Screen::iterate_animation() [clone .part.13]+0x690>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    15f2:	ldr.w	r3, [sl, #8]
    15f6:	subs	r0, r0, r3
    15f8:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    15fc:	ldr	r2, [sp, #8]
    15fe:	add.w	ip, ip, #1
    1602:	add.w	fp, fp, #4
    1606:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    1608:	it	gt
    160a:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    160e:	cmp.w	ip, #23
    1612:	bne.n	1518 <Screen::iterate_animation() [clone .part.13]+0x604>
    1614:	ldr	r3, [sp, #4]
    1616:	add.w	r8, r8, #1
    161a:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    161c:	cmp.w	r8, #26
    1620:	str	r3, [sp, #4]
    1622:	bne.w	14f4 <Screen::iterate_animation() [clone .part.13]+0x5e0>
    1626:	movw	r0, #4632	; 0x1218
    162a:	ldr.w	fp, [sp, #20]
    162e:	addw	r3, sl, #2328	; 0x918
    1632:	add	r0, sl
    1634:	sub.w	r2, r3, #2304	; 0x900
    1638:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    163c:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    163e:	ldr.w	r4, [r1, #4]!
    1642:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1646:	cmp	r5, r2
    1648:	bne.n	163e <Screen::iterate_animation() [clone .part.13]+0x72a>
    164a:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    164c:	cmp	r0, r3
    164e:	bne.n	1634 <Screen::iterate_animation() [clone .part.13]+0x720>
			(*_sat_automaton).iterate();
    1650:	ldr.w	r9, [fp, #12]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1654:	movs	r3, #2
    1656:	movs	r2, #32
    1658:	movs	r1, #0
    165a:	str	r3, [sp, #0]
    165c:	addw	r3, r9, #2428	; 0x97c
    1660:	ldr.w	sl, [pc, #432]	; 1814 <Screen::iterate_animation() [clone .part.13]+0x900>
    1664:	add.w	r0, sp, r2
    1668:	str	r3, [sp, #8]
    166a:	add.w	r3, r9, #4640	; 0x1220
    166e:	str	r1, [sp, #12]
    1670:	str	r3, [sp, #24]
    1672:	bl	a594 <memset>
    1676:	str.w	fp, [sp, #28]
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
    167a:	bl	ed4 <renderInterrupt()>
    167e:	ldrb.w	r2, [r9, #24]
    1682:	ldr	r3, [sp, #24]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1684:	movs	r7, #2
    1686:	str	r2, [sp, #20]
    1688:	ldr	r3, [r3, #0]
    168a:	ldr	r2, [sp, #12]
    168c:	ldr	r1, [sp, #8]
    168e:	add.w	r8, r3, r2
    1692:	sub.w	lr, r1, #96	; 0x60
    1696:	sub.w	r3, r1, #2400	; 0x960
    169a:	mov	fp, r8
    169c:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    169e:	ldr	r3, [sp, #20]
    16a0:	cmp	r3, #0
    16a2:	beq.w	17fe <Screen::iterate_animation() [clone .part.13]+0x8ea>
      return _background[x][y];
    16a6:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    16aa:	cmp	r3, #0
    16ac:	beq.n	1780 <Screen::iterate_animation() [clone .part.13]+0x86c>
    16ae:	ldr	r3, [sp, #0]
    16b0:	add.w	ip, sp, #32
    16b4:	subs	r6, r3, #3
    16b6:	subs	r3, r7, #3
    16b8:	str	r3, [sp, #16]
    16ba:	smull	r3, r2, sl, r6
    16be:	asrs	r3, r6, #31
    16c0:	ldr	r0, [sp, #16]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    16c2:	mov	r5, ip
    16c4:	rsb	r3, r3, r2, asr #2
    16c8:	add.w	r3, r3, r3, lsl #1
    16cc:	sub.w	r3, r6, r3, lsl #3
    16d0:	adds	r3, #24
    16d2:	smull	r2, r1, sl, r3
    16d6:	asrs	r2, r3, #31
    16d8:	rsb	r2, r2, r1, asr #2
    16dc:	add.w	r2, r2, r2, lsl #1
    16e0:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    16e4:	add.w	r2, r2, r2, lsl #1
    16e8:	lsls	r4, r2, #3
    16ea:	smull	r3, r2, sl, r0
    16ee:	asrs	r3, r0, #31
    16f0:	rsb	r3, r3, r2, asr #2
    16f4:	add.w	r3, r3, r3, lsl #1
    16f8:	sub.w	r3, r0, r3, lsl #3
    16fc:	adds	r0, #1
    16fe:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1700:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1702:	smull	r2, r1, sl, r3
    1706:	mov.w	r2, r3, asr #31
    170a:	rsb	r2, r2, r1, asr #2
    170e:	add.w	r2, r2, r2, lsl #1
    1712:	sub.w	r3, r3, r2, lsl #3
    1716:	add	r3, r4
    1718:	add.w	r3, r9, r3, lsl #2
    171c:	ldr	r3, [r3, #28]
    171e:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1722:	bne.n	16ea <Screen::iterate_animation() [clone .part.13]+0x7d6>
    1724:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1726:	ldr	r3, [sp, #0]
    1728:	add.w	ip, ip, #12
    172c:	cmp	r3, r6
    172e:	bne.n	16ba <Screen::iterate_animation() [clone .part.13]+0x7a6>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1730:	ldr	r3, [sp, #4]
    1732:	movs	r0, #1
    1734:	ldr	r1, [r3, #0]
    1736:	ldr.w	r3, [r9]
    173a:	adds	r5, r1, r3
    173c:	movs	r4, #0
    173e:	mov	r3, r4
    1740:	b.n	1748 <Screen::iterate_animation() [clone .part.13]+0x834>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1742:	adds	r3, #1
    1744:	cmp	r3, #8
    1746:	beq.n	175e <Screen::iterate_animation() [clone .part.13]+0x84a>
          if ((i >> j) % 2 == 1){
    1748:	asr.w	r2, r0, r3
    174c:	lsls	r2, r2, #31
    174e:	bpl.n	1742 <Screen::iterate_animation() [clone .part.13]+0x82e>
            sum += neighbours[j];
    1750:	add	r2, sp, #32
    1752:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1756:	adds	r3, #1
    1758:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    175a:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    175c:	bne.n	1748 <Screen::iterate_animation() [clone .part.13]+0x834>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    175e:	cmp	r5, r4
    1760:	beq.n	1808 <Screen::iterate_animation() [clone .part.13]+0x8f4>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1762:	adds	r0, #1
    1764:	cmp.w	r0, #256	; 0x100
    1768:	bne.n	173c <Screen::iterate_animation() [clone .part.13]+0x828>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    176a:	ldr.w	r3, [r9, #8]
    176e:	subs	r1, r1, r3
    1770:	str.w	r1, [lr]
          }
          if (nextCells[x][y] < _floorInit){
    1774:	ldr.w	r3, [r9, #12]
    1778:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    177a:	it	gt
    177c:	strgt.w	r3, [lr]
    1780:	ldr	r3, [sp, #4]
    1782:	add.w	lr, lr, #4
    1786:	adds	r7, #1
    1788:	add.w	r8, r8, #1
    178c:	adds	r3, #4
    178e:	add.w	fp, fp, #1
    1792:	str	r3, [sp, #4]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1794:	ldr	r3, [sp, #8]
    1796:	cmp	r3, lr
    1798:	bne.n	169e <Screen::iterate_animation() [clone .part.13]+0x78a>
    179a:	ldr	r2, [sp, #8]
    179c:	ldr	r3, [sp, #12]
    179e:	adds	r2, #96	; 0x60
    17a0:	adds	r3, #24
    17a2:	str	r2, [sp, #8]
    17a4:	ldr	r2, [sp, #0]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    17a6:	cmp.w	r3, #576	; 0x240
    17aa:	str	r3, [sp, #12]
    17ac:	add.w	r2, r2, #1
    17b0:	str	r2, [sp, #0]
    17b2:	bne.w	167a <Screen::iterate_animation() [clone .part.13]+0x766>
    17b6:	movw	r0, #4632	; 0x1218
    17ba:	ldr.w	fp, [sp, #28]
    17be:	addw	r3, r9, #2328	; 0x918
    17c2:	add	r0, r9
    17c4:	sub.w	r2, r3, #2304	; 0x900
    17c8:	sub.w	r5, r3, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    17cc:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    17ce:	ldr.w	r4, [r1, #4]!
    17d2:	str.w	r4, [r2, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    17d6:	cmp	r5, r2
    17d8:	bne.n	17ce <Screen::iterate_animation() [clone .part.13]+0x8ba>
    17da:	adds	r3, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    17dc:	cmp	r0, r3
    17de:	bne.n	17c4 <Screen::iterate_animation() [clone .part.13]+0x8b0>
			ratio = 0;
    17e0:	movs	r3, #0
    17e2:	str.w	r3, [fp, #44]	; 0x2c
    17e6:	b.n	1250 <Screen::iterate_animation() [clone .part.13]+0x33c>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    17e8:	ldr.w	r2, [sl, #4]
    17ec:	add	r0, r2
    17ee:	str.w	r0, [fp]
    17f2:	b.n	15fc <Screen::iterate_animation() [clone .part.13]+0x6e8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    17f4:	mov.w	r8, #0
    17f8:	mov	r9, r8
    17fa:	mov	r6, r8
    17fc:	b.n	13d0 <Screen::iterate_animation() [clone .part.13]+0x4bc>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    17fe:	ldrb.w	r3, [fp]
    1802:	eor.w	r3, r3, #1
    1806:	b.n	16aa <Screen::iterate_animation() [clone .part.13]+0x796>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1808:	ldr.w	r2, [r9, #4]
    180c:	add	r1, r2
    180e:	str.w	r1, [lr]
    1812:	b.n	1774 <Screen::iterate_animation() [clone .part.13]+0x860>
    1814:	.word	0x2aaaaaab

00001818 <setup>:




void setup() {
    1818:	push	{r3, lr}
  randomSeed(analogRead(17));
    181a:	movs	r0, #17
    181c:	bl	94e4 <analogRead>
    1820:	bl	9764 <randomSeed(unsigned long)>
  init_A();
    1824:	bl	b2c <init_A()>
  init_B();
    1828:	bl	d00 <init_B()>
  synapse_A.begin();
    182c:	ldr	r0, [pc, #20]	; (1844 <setup+0x2c>)
    182e:	bl	8090 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    1832:	ldr	r0, [pc, #20]	; (1848 <setup+0x30>)
    1834:	bl	8090 <Adafruit_NeoPixel::begin()>
  delay(1000);
    1838:	mov.w	r0, #1000	; 0x3e8
}
    183c:	ldmia.w	sp!, {r3, lr}
  randomSeed(analogRead(17));
  init_A();
  init_B();
  synapse_A.begin();
  synapse_B.begin();
  delay(1000);
    1840:	b.w	93d0 <delay>
    1844:	.word	0x20006d78
    1848:	.word	0x20006d8c

0000184c <loop>:
    184c:	ldr	r1, [pc, #304]	; (1980 <loop+0x134>)
    184e:	ldr	r2, [pc, #308]	; (1984 <loop+0x138>)
    1850:	ldr	r3, [r1, #0]
}

elapsedMillis sinceBeam = 0;

void loop() {
  if(sinceBeam>1000){
    1852:	ldr	r0, [r2, #0]
    1854:	subs	r3, r3, r0
    1856:	cmp.w	r3, #1000	; 0x3e8
  delay(1000);
}

elapsedMillis sinceBeam = 0;

void loop() {
    185a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    185e:	vpush	{d8}
    1862:	sub	sp, #36	; 0x24
  if(sinceBeam>1000){
    1864:	bhi.n	188a <loop+0x3e>
	}


	int ratio = 0;
	void iterate_animation() {
		if (newFrameReady) return;
    1866:	ldr	r0, [pc, #288]	; (1988 <loop+0x13c>)
    1868:	ldrb	r3, [r0, #20]
    186a:	cbz	r3, 1884 <loop+0x38>
    186c:	ldr	r0, [pc, #284]	; (198c <loop+0x140>)
    186e:	ldrb	r3, [r0, #20]
    1870:	cbnz	r3, 1876 <loop+0x2a>
    1872:	bl	f14 <Screen::iterate_animation() [clone .part.13]>

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    1876:	add	sp, #36	; 0x24
    1878:	vpop	{d8}
    187c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}


  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
    1880:	b.w	ed4 <renderInterrupt()>
    1884:	bl	f14 <Screen::iterate_animation() [clone .part.13]>
    1888:	b.n	186c <loop+0x20>
    188a:	ldr	r3, [r1, #0]
elapsedMillis sinceBeam = 0;

void loop() {
  if(sinceBeam>1000){
    sinceBeam = 0;
    newBeam(&synapse_B, random(0,2), Color(random(0,360), 100, 100, HSB_MODE),random(6,50),random(300,1000));
    188c:	movs	r0, #0
    188e:	movs	r1, #2
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1890:	ldr.w	fp, [pc, #260]	; 1998 <loop+0x14c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    1894:	str	r3, [r2, #0]
    1896:	bl	9778 <random(long, long)>
    189a:	mov.w	r1, #360	; 0x168
    189e:	mov	r8, r0
    18a0:	movs	r0, #0
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    18a2:	movs	r6, #0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    18a4:	mov	r7, r1
    18a6:	bl	9778 <random(long, long)>
    18aa:	add.w	r2, r0, #720	; 0x2d0
	HSB_color.s = s;
    18ae:	mov.w	sl, #100	; 0x64
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    18b2:	mov.w	r9, #1
    18b6:	add	r5, sp, #24
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    18b8:	lsrs	r3, r2, #3
    18ba:	movs	r1, #50	; 0x32
    18bc:	movs	r0, #6
	HSB_color.s = s;
    18be:	strb.w	sl, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    18c2:	umull	r4, r3, fp, r3
    18c6:	add	r4, sp, #16
	HSB_color.s = s;
	HSB_color.b = b;
    18c8:	strb.w	sl, [sp, #25]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    18cc:	lsrs	r3, r3, #2
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    18ce:	strb.w	r6, [sp, #28]
	HSB_updated = true;
    18d2:	strb.w	r9, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    18d6:	mls	r3, r7, r3, r2
    18da:	str	r3, [sp, #20]
    18dc:	bl	9778 <random(long, long)>
    18e0:	mov.w	r1, #1000	; 0x3e8
    18e4:	vmov	s16, r0
    18e8:	mov.w	r0, #300	; 0x12c
    18ec:	bl	9778 <random(long, long)>
    18f0:	str	r0, [sp, #8]
    18f2:	vcvt.f32.s32	s0, s16
    18f6:	ldmia.w	r5, {r0, r1}
    18fa:	ldmia.w	r4, {r2, r3}
    18fe:	stmia.w	sp, {r0, r1}
    1902:	subs.w	r1, r8, r6
    1906:	ldr	r0, [pc, #136]	; (1990 <loop+0x144>)
    1908:	it	ne
    190a:	movne	r1, #1
    190c:	bl	448 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_A, random(0,2), Color(random(0,360), 100, 100, HSB_MODE),random(6,50),random(300,1000));
    1910:	mov	r0, r6
    1912:	movs	r1, #2
    1914:	bl	9778 <random(long, long)>
    1918:	mov	r1, r7
    191a:	mov	r8, r0
    191c:	mov	r0, r6
    191e:	bl	9778 <random(long, long)>
    1922:	add.w	r2, r0, #720	; 0x2d0
    1926:	movs	r1, #50	; 0x32
    1928:	movs	r0, #6
    192a:	lsrs	r3, r2, #3
	HSB_color.s = s;
    192c:	strb.w	sl, [sp, #24]
	HSB_color.b = b;
    1930:	strb.w	sl, [sp, #25]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1934:	umull	lr, r3, fp, r3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    1938:	strb.w	r6, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    193c:	lsrs	r3, r3, #2
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    193e:	strb.w	r9, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    1942:	mls	r3, r7, r3, r2
    1946:	str	r3, [sp, #20]
    1948:	bl	9778 <random(long, long)>
    194c:	mov.w	r1, #1000	; 0x3e8
    1950:	vmov	s16, r0
    1954:	mov.w	r0, #300	; 0x12c
    1958:	bl	9778 <random(long, long)>
    195c:	str	r0, [sp, #8]
    195e:	vcvt.f32.s32	s0, s16
    1962:	ldmia.w	r5, {r0, r1}
    1966:	ldmia.w	r4, {r2, r3}
    196a:	stmia.w	sp, {r0, r1}
    196e:	subs.w	r1, r8, r6
    1972:	ldr	r0, [pc, #32]	; (1994 <loop+0x148>)
    1974:	it	ne
    1976:	movne	r1, #1
    1978:	bl	448 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    197c:	b.n	1866 <loop+0x1a>
    197e:	nop
    1980:	.word	0x2000c078
    1984:	.word	0x2000151c
    1988:	.word	0x20003994
    198c:	.word	0x200039c4
    1990:	.word	0x20006d8c
    1994:	.word	0x20006d78
    1998:	.word	0x16c16c17

0000199c <_GLOBAL__sub_I_nextTime3>:

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    199c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
      _b = b;
    19a0:	mvn.w	r0, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19a4:	ldr	r5, [pc, #1008]	; (1d98 <_GLOBAL__sub_I_nextTime3+0x3fc>)
    19a6:	movs	r3, #0
    19a8:	mov.w	r9, #139	; 0x8b
      _s = s;
      _b = b;
    19ac:	strb	r0, [r5, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19ae:	mov.w	r0, #106	; 0x6a
    19b2:	strb	r3, [r5, #0]
    19b4:	movs	r6, #131	; 0x83
    19b6:	strb	r0, [r5, #3]
    19b8:	movs	r2, #130	; 0x82
    19ba:	strb	r0, [r5, #18]
      _s = s;
    19bc:	mov.w	r0, #2
    19c0:	strb	r3, [r5, #1]
      _b = b;
    19c2:	mov.w	lr, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19c6:	strb	r0, [r5, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19c8:	mov.w	r8, #138	; 0x8a
      _s = s;
    19cc:	strb	r0, [r5, #19]
      _b = b;
    19ce:	mvn.w	r0, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19d2:	strb	r3, [r5, #9]
      _s = s;
    19d4:	mvn.w	ip, #5
      _b = b;
    19d8:	strb	r0, [r5, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19da:	mov.w	r0, #85	; 0x55
      _s = s;
    19de:	strb	r3, [r5, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19e0:	movs	r1, #132	; 0x84
    19e2:	strb	r0, [r5, #6]
      _s = s;
    19e4:	mov.w	r0, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19e8:	strb	r3, [r5, #12]
      _s = s;
    19ea:	movs	r7, #142	; 0x8e
    19ec:	strb	r0, [r5, #7]
      _b = b;
    19ee:	mvn.w	r0, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19f2:	strb	r3, [r5, #13]
      _b = b;
    19f4:	mvn.w	sl, #24
    19f8:	strb	r0, [r5, #8]
    19fa:	mvn.w	r0, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19fe:	strb	r3, [r5, #15]
    1a00:	mov.w	fp, #140	; 0x8c
      _s = s;
      _b = b;
    1a04:	strb	r0, [r5, #11]
    1a06:	mvn.w	r0, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a0a:	strb	r3, [r5, #16]
    1a0c:	sub	sp, #12
      _b = b;
    1a0e:	strb	r0, [r5, #14]
    1a10:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a14:	strb.w	r9, [r5, #30]
      _s = s;
      _b = b;
    1a18:	strb	r0, [r5, #17]
    1a1a:	mvn.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a1e:	ldr	r4, [pc, #892]	; (1d9c <_GLOBAL__sub_I_nextTime3+0x400>)
      _s = s;
      _b = b;
    1a20:	strb	r0, [r5, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a22:	mov.w	r0, #109	; 0x6d
    1a26:	strb	r0, [r5, #21]
      _s = s;
    1a28:	mov.w	r0, #10
    1a2c:	strb	r0, [r5, #22]
      _b = b;
    1a2e:	mvn.w	r0, #79	; 0x4f
    1a32:	strb	r0, [r5, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a34:	mov.w	r0, #114	; 0x72
    1a38:	strb	r0, [r5, #24]
      _s = s;
    1a3a:	mov.w	r0, #20
    1a3e:	strb	r0, [r5, #25]
      _b = b;
    1a40:	mvn.w	r0, #92	; 0x5c
    1a44:	strb	r0, [r5, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a46:	mov.w	r0, #115	; 0x73
    1a4a:	strb	r0, [r5, #27]
      _s = s;
    1a4c:	mov.w	r0, #26
    1a50:	strb	r0, [r5, #28]
      _b = b;
    1a52:	mvn.w	r0, #119	; 0x77
    1a56:	strb	r0, [r5, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a58:	mov.w	r0, #48	; 0x30
    1a5c:	strb	r0, [r5, #31]
      _b = b;
    1a5e:	mov.w	r0, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a62:	strb.w	r3, [r5, #57]	; 0x39
      _s = s;
      _b = b;
    1a66:	strb.w	r0, [r5, #32]
    1a6a:	mvn.w	r0, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a6e:	strb.w	r3, [r5, #58]	; 0x3a
      _b = b;
    1a72:	strb.w	r0, [r5, #50]	; 0x32
    1a76:	mvn.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a7a:	strb.w	r3, [r5, #60]	; 0x3c
      _s = s;
      _b = b;
    1a7e:	strb.w	r0, [r5, #53]	; 0x35
    1a82:	mvn.w	r0, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a86:	strb.w	r3, [r5, #61]	; 0x3d
      _b = b;
    1a8a:	strb.w	r0, [r5, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a8e:	mvn.w	r0, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a92:	strb.w	r3, [r5, #63]	; 0x3f
      _s = s;
    1a96:	strb.w	r0, [r5, #34]	; 0x22
      _b = b;
    1a9a:	mov.w	r0, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a9e:	strb.w	r3, [r5, #64]	; 0x40
      _b = b;
    1aa2:	strb.w	r0, [r5, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1aa6:	mvn.w	r0, #121	; 0x79
    1aaa:	strb.w	r2, [r5, #39]	; 0x27
    1aae:	strb.w	r0, [r5, #36]	; 0x24
      _s = s;
    1ab2:	mvn.w	r0, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ab6:	strb.w	r2, [r5, #45]	; 0x2d
      _s = s;
    1aba:	strb.w	r0, [r5, #37]	; 0x25
      _b = b;
    1abe:	mov.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ac2:	strb.w	r2, [r5, #48]	; 0x30
      _s = s;
      _b = b;
    1ac6:	strb.w	r0, [r5, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1aca:	mov.w	r0, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ace:	strb.w	r6, [r5, #42]	; 0x2a
      _s = s;
    1ad2:	strb.w	r0, [r5, #40]	; 0x28
      _b = b;
    1ad6:	mvn.w	r0, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ada:	strb.w	r8, [r5, #33]	; 0x21
      _s = s;
      _b = b;
    1ade:	strb.w	r0, [r5, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ae2:	mvn.w	r0, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ae6:	strb.w	r8, [r5, #54]	; 0x36
      _s = s;
    1aea:	strb.w	r0, [r5, #43]	; 0x2b
      _b = b;
    1aee:	mvn.w	r0, #45	; 0x2d
    1af2:	strb.w	r0, [r5, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1af6:	mvn.w	r0, #11
    1afa:	strb.w	r0, [r5, #46]	; 0x2e
      _b = b;
    1afe:	mvn.w	r0, #33	; 0x21
    1b02:	strb.w	r0, [r5, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b06:	mvn.w	r0, #96	; 0x60
    1b0a:	strb.w	r0, [r5, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b0e:	mvn.w	r0, #120	; 0x78
    1b12:	strb.w	r0, [r5, #51]	; 0x33
      _s = s;
    1b16:	mov.w	r0, #51	; 0x33
    1b1a:	strb.w	r0, [r5, #52]	; 0x34
    1b1e:	mov.w	r0, #8
    1b22:	strb.w	r0, [r5, #55]	; 0x37
      _b = b;
    1b26:	mvn.w	r0, #9
    1b2a:	strb.w	r0, [r5, #56]	; 0x38
    1b2e:	mvn.w	r0, #4
    1b32:	strb.w	lr, [r5, #62]	; 0x3e
    1b36:	strb.w	r0, [r5, #74]	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b3a:	mov.w	r0, #5
      _b = b;
    1b3e:	strb.w	lr, [r5, #65]	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b42:	strb.w	r0, [r5, #76]	; 0x4c
      _b = b;
    1b46:	mov.w	r0, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b4a:	strb.w	r3, [r5, #66]	; 0x42
      _s = s;
      _b = b;
    1b4e:	strb.w	r0, [r5, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b52:	mov.w	r0, #60	; 0x3c
      _s = s;
    1b56:	strb.w	r3, [r5, #67]	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b5a:	strb.w	r0, [r5, #90]	; 0x5a
      _s = s;
    1b5e:	mvn.w	r0, #39	; 0x27
      _b = b;
    1b62:	strb.w	lr, [r5, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b66:	strb.w	r0, [r5, #97]	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b6a:	mov.w	r0, #95	; 0x5f
    1b6e:	strb.w	r3, [r5, #69]	; 0x45
    1b72:	strb.w	r0, [r5, #75]	; 0x4b
      _s = s;
      _b = b;
    1b76:	mvn.w	r0, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b7a:	strb.w	r3, [r5, #70]	; 0x46
      _b = b;
    1b7e:	strb.w	r0, [r5, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b82:	mvn.w	r0, #118	; 0x76
      _b = b;
    1b86:	strb.w	lr, [r5, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b8a:	strb.w	r0, [r5, #79]	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b8e:	mov.w	r0, #94	; 0x5e
    1b92:	strb.w	r3, [r5, #72]	; 0x48
    1b96:	strb.w	r0, [r5, #81]	; 0x51
      _s = s;
    1b9a:	mov.w	r0, #11
    1b9e:	strb.w	r3, [r5, #73]	; 0x49
    1ba2:	strb.w	r0, [r5, #82]	; 0x52
      _b = b;
    1ba6:	mvn.w	r0, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1baa:	strb.w	r9, [r5, #78]	; 0x4e
      _s = s;
      _b = b;
    1bae:	strb.w	r0, [r5, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bb2:	mov.w	r0, #96	; 0x60
    1bb6:	strb.w	r0, [r5, #84]	; 0x54
      _s = s;
    1bba:	mov.w	r0, #14
    1bbe:	strb.w	r0, [r5, #85]	; 0x55
      _b = b;
    1bc2:	mvn.w	r0, #58	; 0x3a
    1bc6:	strb.w	r0, [r5, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bca:	mov.w	r0, #46	; 0x2e
    1bce:	strb.w	r0, [r5, #87]	; 0x57
      _s = s;
    1bd2:	mov.w	r0, #37	; 0x25
    1bd6:	strb.w	r0, [r5, #88]	; 0x58
      _b = b;
    1bda:	mvn.w	r0, #99	; 0x63
    1bde:	strb.w	r0, [r5, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1be2:	mov.w	r0, #121	; 0x79
    1be6:	strb.w	r0, [r5, #91]	; 0x5b
      _b = b;
    1bea:	mov.w	r0, #113	; 0x71
    1bee:	strb.w	r0, [r5, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bf2:	mov.w	r0, #105	; 0x69
    1bf6:	strb.w	r0, [r5, #93]	; 0x5d
      _s = s;
    1bfa:	mvn.w	r0, #69	; 0x45
    1bfe:	strb.w	r0, [r5, #94]	; 0x5e
      _b = b;
    1c02:	mov.w	r0, #101	; 0x65
    1c06:	strb.w	r0, [r5, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c0a:	mov.w	r0, #118	; 0x76
    1c0e:	strb.w	r0, [r5, #96]	; 0x60
      _s = s;
      _b = b;
    1c12:	mov.w	r0, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c16:	strb.w	ip, [r5, #106]	; 0x6a
      _b = b;
    1c1a:	mvn.w	ip, #88	; 0x58
    1c1e:	strb.w	r0, [r5, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c22:	mvn.w	r0, #43	; 0x2b
      _s = s;
      _b = b;
    1c26:	strb.w	ip, [r5, #107]	; 0x6b
    1c2a:	mvn.w	ip, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c2e:	strb.w	r0, [r5, #99]	; 0x63
      _s = s;
    1c32:	mov.w	r0, #95	; 0x5f
      _b = b;
    1c36:	strb.w	ip, [r5, #110]	; 0x6e
    1c3a:	mvn.w	ip, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c3e:	strb.w	r0, [r5, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c42:	mvn.w	r0, #121	; 0x79
      _s = s;
      _b = b;
    1c46:	strb.w	ip, [r5, #113]	; 0x71
    1c4a:	mvn.w	ip, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c4e:	strb.w	r0, [r5, #105]	; 0x69
    1c52:	mvn.w	r0, #122	; 0x7a
      _s = s;
      _b = b;
    1c56:	strb.w	ip, [r5, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c5a:	mvn.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c5e:	strb.w	r0, [r5, #111]	; 0x6f
      _s = s;
    1c62:	mov.w	r0, #106	; 0x6a
    1c66:	strb.w	ip, [r5, #121]	; 0x79
    1c6a:	strb.w	r0, [r5, #112]	; 0x70
    1c6e:	mvn.w	r0, #111	; 0x6f
      _b = b;
    1c72:	strb.w	ip, [r5, #125]	; 0x7d
    1c76:	mvn.w	ip, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c7a:	strb.w	r0, [r5, #115]	; 0x73
      _b = b;
    1c7e:	mvn.w	r0, #34	; 0x22
    1c82:	strb.w	ip, [r5, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c86:	mvn.w	ip, #59	; 0x3b
      _b = b;
    1c8a:	strb.w	r0, [r5, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c8e:	mvn.w	r0, #16
    1c92:	strb.w	ip, [r5, #124]	; 0x7c
    1c96:	mov.w	ip, #87	; 0x57
    1c9a:	strb.w	r0, [r5, #118]	; 0x76
      _b = b;
    1c9e:	mov.w	r0, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ca2:	strb.w	ip, [r5, #127]	; 0x7f
      _b = b;
    1ca6:	mvn.w	ip, #52	; 0x34
    1caa:	strb.w	r0, [r5, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cae:	mvn.w	r0, #104	; 0x68
      _b = b;
    1cb2:	strb.w	ip, [r5, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cb6:	mvn.w	ip, #107	; 0x6b
      _s = s;
    1cba:	strb.w	r0, [r5, #103]	; 0x67
      _b = b;
    1cbe:	mov.w	r0, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cc2:	strb.w	ip, [r5, #129]	; 0x81
      _s = s;
    1cc6:	mov.w	ip, #4
    1cca:	strb.w	lr, [r5, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cce:	strb.w	r6, [r5, #114]	; 0x72
    1cd2:	strb.w	r2, [r5, #117]	; 0x75
    1cd6:	strb.w	r2, [r5, #120]	; 0x78
    1cda:	strb.w	r2, [r5, #123]	; 0x7b
    1cde:	strb.w	r6, [r5, #126]	; 0x7e
      _s = s;
      _b = b;
    1ce2:	strb.w	r0, [r5, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ce6:	movs	r0, #143	; 0x8f
    1ce8:	strb.w	r1, [r5, #108]	; 0x6c
    1cec:	strb.w	r9, [r5, #102]	; 0x66
      _s = s;
    1cf0:	strb.w	ip, [r5, #130]	; 0x82
      _b = b;
    1cf4:	mvn.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cf8:	strb.w	r3, [r5, #132]	; 0x84
      _s = s;
      _b = b;
    1cfc:	strb.w	ip, [r5, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d00:	mov.w	ip, #113	; 0x71
      _s = s;
    1d04:	strb.w	r3, [r5, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d08:	strb.w	ip, [r5, #144]	; 0x90
      _s = s;
      _b = b;
    1d0c:	mvn.w	ip, #5
    1d10:	strb.w	lr, [r5, #134]	; 0x86
    1d14:	strb.w	ip, [r5, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d18:	mov.w	ip, #51	; 0x33
    1d1c:	strb.w	r3, [r5, #135]	; 0x87
    1d20:	strb.w	ip, [r5, #147]	; 0x93
      _s = s;
    1d24:	mov.w	ip, #10
    1d28:	strb.w	r3, [r5, #136]	; 0x88
    1d2c:	strb.w	ip, [r5, #148]	; 0x94
      _b = b;
    1d30:	mvn.w	ip, #36	; 0x24
    1d34:	strb.w	lr, [r5, #137]	; 0x89
    1d38:	strb.w	ip, [r5, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d3c:	mov.w	ip, #121	; 0x79
    1d40:	strb.w	r3, [r5, #138]	; 0x8a
    1d44:	strb.w	ip, [r5, #150]	; 0x96
      _s = s;
    1d48:	mov.w	ip, #60	; 0x3c
    1d4c:	strb.w	r3, [r5, #139]	; 0x8b
    1d50:	strb.w	ip, [r5, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d54:	mov.w	ip, #32
    1d58:	strb.w	r3, [r5, #141]	; 0x8d
    1d5c:	strb.w	ip, [r5, #153]	; 0x99
      _s = s;
    1d60:	mvn.w	ip, #67	; 0x43
    1d64:	strb.w	r3, [r5, #142]	; 0x8e
    1d68:	strb.w	ip, [r5, #160]	; 0xa0
      _b = b;
    1d6c:	mvn.w	ip, #2
    1d70:	strb.w	ip, [r5, #140]	; 0x8c
    1d74:	strb.w	ip, [r5, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d78:	mov.w	ip, #3
    1d7c:	strb.w	ip, [r5, #145]	; 0x91
      _b = b;
    1d80:	mov.w	ip, #123	; 0x7b
    1d84:	strb.w	ip, [r5, #152]	; 0x98
    1d88:	strb.w	ip, [r5, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d8c:	mvn.w	ip, #82	; 0x52
    1d90:	strb.w	ip, [r5, #154]	; 0x9a
    1d94:	b.n	1da0 <_GLOBAL__sub_I_nextTime3+0x404>
    1d96:	nop
    1d98:	.word	0x20005ff8
    1d9c:	.word	0x200066b8
      _b = b;
    1da0:	mvn.w	ip, #105	; 0x69
    1da4:	strb.w	ip, [r5, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1da8:	mov.w	ip, #54	; 0x36
    1dac:	strb.w	ip, [r5, #156]	; 0x9c
      _s = s;
    1db0:	mov.w	ip, #97	; 0x61
    1db4:	strb.w	ip, [r5, #157]	; 0x9d
      _b = b;
    1db8:	mov.w	ip, #120	; 0x78
    1dbc:	strb.w	ip, [r5, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dc0:	mov.w	ip, #25
    1dc4:	strb.w	ip, [r5, #159]	; 0x9f
    1dc8:	mov.w	ip, #28
    1dcc:	strb.w	ip, [r5, #162]	; 0xa2
      _s = s;
    1dd0:	mvn.w	ip, #93	; 0x5d
    1dd4:	strb.w	ip, [r5, #163]	; 0xa3
      _b = b;
    1dd8:	mov.w	ip, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ddc:	strb.w	r1, [r5, #183]	; 0xb7
      _s = s;
      _b = b;
    1de0:	strb.w	ip, [r5, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1de4:	mov.w	ip, #97	; 0x61
    1de8:	strb.w	r2, [r5, #186]	; 0xba
    1dec:	strb.w	ip, [r5, #165]	; 0xa5
      _s = s;
      _b = b;
    1df0:	mvn.w	ip, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1df4:	strb.w	r2, [r5, #189]	; 0xbd
      _s = s;
      _b = b;
    1df8:	strb.w	ip, [r5, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dfc:	mov.w	ip, #121	; 0x79
    1e00:	strb.w	r2, [r5, #192]	; 0xc0
    1e04:	strb.w	ip, [r5, #168]	; 0xa8
      _s = s;
    1e08:	mvn.w	ip, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e0c:	strb.w	r0, [r5, #174]	; 0xae
      _s = s;
    1e10:	strb.w	ip, [r5, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e14:	mvn.w	ip, #39	; 0x27
      _s = s;
    1e18:	strb.w	r8, [r5, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e1c:	strb.w	ip, [r5, #171]	; 0xab
      _s = s;
    1e20:	mvn.w	ip, #104	; 0x68
    1e24:	strb.w	ip, [r5, #175]	; 0xaf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e28:	mvn.w	ip, #118	; 0x76
    1e2c:	strb.w	ip, [r5, #177]	; 0xb1
      _s = s;
    1e30:	mvn.w	ip, #32
    1e34:	strb.w	ip, [r5, #178]	; 0xb2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e38:	mvn.w	ip, #119	; 0x77
    1e3c:	strb.w	ip, [r5, #180]	; 0xb4
      _s = s;
    1e40:	mvn.w	ip, #22
    1e44:	strb.w	ip, [r5, #181]	; 0xb5
      _b = b;
    1e48:	mov.w	ip, #103	; 0x67
    1e4c:	strb.w	ip, [r5, #185]	; 0xb9
    1e50:	mvn.w	ip, #36	; 0x24
    1e54:	strb.w	ip, [r5, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e58:	mvn.w	ip, #65	; 0x41
    1e5c:	strb.w	ip, [r5, #190]	; 0xbe
      _b = b;
    1e60:	mvn.w	ip, #32
    1e64:	strb.w	ip, [r5, #191]	; 0xbf
    1e68:	mvn.w	ip, #28
    1e6c:	strb.w	ip, [r5, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e70:	mvn.w	ip, #122	; 0x7a
    1e74:	strb.w	ip, [r5, #195]	; 0xc3
      _s = s;
    1e78:	mvn.w	ip, #81	; 0x51
    1e7c:	strb.w	ip, [r5, #166]	; 0xa6
      _b = b;
    1e80:	mvn.w	ip, #101	; 0x65
    1e84:	strb.w	ip, [r5, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e88:	mov.w	ip, #93	; 0x5d
    1e8c:	strb.w	ip, [r5, #172]	; 0xac
      _b = b;
    1e90:	mov.w	ip, #30
    1e94:	strb.w	ip, [r5, #173]	; 0xad
    1e98:	mov.w	ip, #59	; 0x3b
    1e9c:	strb.w	ip, [r5, #176]	; 0xb0
    1ea0:	strb.w	ip, [r5, #182]	; 0xb6
    1ea4:	mov.w	ip, #57	; 0x39
    1ea8:	strb.w	ip, [r5, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1eac:	strb.w	ip, [r5, #187]	; 0xbb
    1eb0:	mvn.w	ip, #51	; 0x33
    1eb4:	strb.w	ip, [r5, #193]	; 0xc1
    1eb8:	mov.w	ip, #90	; 0x5a
    1ebc:	strb.w	ip, [r5, #196]	; 0xc4
      _b = b;
    1ec0:	mvn.w	ip, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ec4:	strb.w	r0, [r5, #198]	; 0xc6
      _s = s;
      _b = b;
    1ec8:	strb.w	ip, [r5, #197]	; 0xc5
    1ecc:	mvn.w	ip, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ed0:	strb.w	r3, [r5, #210]	; 0xd2
      _s = s;
      _b = b;
    1ed4:	strb.w	ip, [r5, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ed8:	mvn.w	ip, #96	; 0x60
      _s = s;
    1edc:	strb.w	r3, [r5, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ee0:	strb.w	ip, [r5, #201]	; 0xc9
    1ee4:	mvn.w	ip, #105	; 0x69
    1ee8:	strb.w	r3, [r5, #213]	; 0xd5
    1eec:	strb.w	ip, [r5, #204]	; 0xcc
      _s = s;
    1ef0:	mov.w	ip, #26
    1ef4:	strb.w	r3, [r5, #214]	; 0xd6
    1ef8:	strb.w	ip, [r5, #205]	; 0xcd
      _b = b;
    1efc:	mvn.w	ip, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f00:	strb.w	r7, [r5, #226]	; 0xe2
      _b = b;
    1f04:	strb.w	ip, [r5, #209]	; 0xd1
    1f08:	mvn.w	ip, #2
    1f0c:	strb.w	ip, [r5, #212]	; 0xd4
    1f10:	strb.w	ip, [r5, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f14:	mov.w	ip, #106	; 0x6a
    1f18:	strb.w	ip, [r5, #216]	; 0xd8
      _s = s;
      _b = b;
    1f1c:	mvn.w	ip, #29
    1f20:	strb.w	ip, [r5, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f24:	mvn.w	ip, #82	; 0x52
    1f28:	strb.w	ip, [r5, #223]	; 0xdf
      _b = b;
    1f2c:	mvn.w	ip, #36	; 0x24
    1f30:	strb.w	ip, [r5, #224]	; 0xe0
    1f34:	mvn.w	ip, #15
    1f38:	strb.w	ip, [r5, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f3c:	mvn.w	ip, #62	; 0x3e
    1f40:	strb.w	ip, [r5, #229]	; 0xe5
    1f44:	mov.w	ip, #44	; 0x2c
    1f48:	strb.w	ip, [r5, #199]	; 0xc7
    1f4c:	mov.w	ip, #35	; 0x23
    1f50:	strb.w	ip, [r5, #202]	; 0xca
      _b = b;
    1f54:	mvn.w	ip, #74	; 0x4a
    1f58:	strb.w	ip, [r5, #203]	; 0xcb
    1f5c:	mvn.w	ip, #66	; 0x42
    1f60:	strb.w	ip, [r5, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f64:	mov.w	ip, #127	; 0x7f
    1f68:	strb.w	ip, [r5, #207]	; 0xcf
      _s = s;
    1f6c:	mov.w	ip, #1
    1f70:	strb.w	ip, [r5, #208]	; 0xd0
    1f74:	mov.w	ip, #66	; 0x42
    1f78:	strb.w	ip, [r5, #217]	; 0xd9
      _b = b;
    1f7c:	mvn.w	ip, #110	; 0x6e
    1f80:	strb.w	ip, [r5, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f84:	mov.w	ip, #102	; 0x66
    1f88:	strb.w	ip, [r5, #219]	; 0xdb
      _s = s;
    1f8c:	mov.w	ip, #72	; 0x48
    1f90:	strb.w	ip, [r5, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f94:	mov.w	ip, #31
    1f98:	strb.w	ip, [r5, #222]	; 0xde
    1f9c:	mov.w	ip, #33	; 0x21
    1fa0:	strb.w	ip, [r5, #225]	; 0xe1
    1fa4:	mov.w	ip, #29
    1fa8:	strb.w	ip, [r5, #228]	; 0xe4
      _s = s;
      _b = b;
    1fac:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fb0:	strb.w	r7, [r5, #235]	; 0xeb
      _b = b;
    1fb4:	strb.w	ip, [r5, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fb8:	mvn.w	ip, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fbc:	strb.w	r2, [r5, #246]	; 0xf6
      _s = s;
    1fc0:	strb.w	ip, [r5, #232]	; 0xe8
      _b = b;
    1fc4:	mvn.w	ip, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fc8:	strb.w	r1, [r5, #258]	; 0x102
      _s = s;
      _b = b;
    1fcc:	strb.w	ip, [r5, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fd0:	mov.w	ip, #77	; 0x4d
    1fd4:	strb.w	r8, [r5, #249]	; 0xf9
    1fd8:	strb.w	ip, [r5, #237]	; 0xed
      _s = s;
    1fdc:	mov.w	ip, #73	; 0x49
    1fe0:	strb.w	ip, [r5, #241]	; 0xf1
      _b = b;
    1fe4:	mvn.w	ip, #74	; 0x4a
    1fe8:	strb.w	ip, [r5, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fec:	mvn.w	ip, #43	; 0x2b
    1ff0:	strb.w	ip, [r5, #243]	; 0xf3
      _s = s;
    1ff4:	mov.w	ip, #87	; 0x57
    1ff8:	strb.w	ip, [r5, #244]	; 0xf4
      _b = b;
    1ffc:	mov.w	ip, #32
    2000:	strb.w	ip, [r5, #245]	; 0xf5
    2004:	mov.w	ip, #90	; 0x5a
    2008:	strb.w	ip, [r5, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    200c:	mvn.w	ip, #120	; 0x78
    2010:	strb.w	ip, [r5, #252]	; 0xfc
    2014:	mvn.w	ip, #118	; 0x76
    2018:	strb.w	ip, [r5, #255]	; 0xff
      _s = s;
    201c:	mvn.w	ip, #30
    2020:	strb.w	ip, [r5, #256]	; 0x100
      _b = b;
    2024:	mov.w	ip, #51	; 0x33
    2028:	strb.w	ip, [r5, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    202c:	mvn.w	ip, #122	; 0x7a
    2030:	strb.w	ip, [r5, #261]	; 0x105
      _s = s;
    2034:	mov.w	ip, #48	; 0x30
    2038:	strb.w	ip, [r5, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    203c:	mov.w	ip, #22
    2040:	strb.w	ip, [r5, #231]	; 0xe7
    2044:	mov.w	ip, #55	; 0x37
    2048:	strb.w	ip, [r5, #234]	; 0xea
      _s = s;
      _b = b;
    204c:	mvn.w	ip, #85	; 0x55
    2050:	strb.w	ip, [r5, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2054:	strb.w	ip, [r5, #238]	; 0xee
      _b = b;
    2058:	mvn.w	ip, #86	; 0x56
    205c:	strb.w	ip, [r5, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2060:	mov.w	ip, #112	; 0x70
    2064:	strb.w	ip, [r5, #240]	; 0xf0
      _s = s;
    2068:	mov.w	ip, #34	; 0x22
    206c:	strb.w	ip, [r5, #247]	; 0xf7
      _b = b;
    2070:	mov.w	ip, #110	; 0x6e
    2074:	strb.w	ip, [r5, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2078:	mvn.w	ip, #108	; 0x6c
    207c:	strb.w	ip, [r5, #250]	; 0xfa
    2080:	mvn.w	ip, #18
    2084:	strb.w	ip, [r5, #253]	; 0xfd
      _b = b;
    2088:	mov.w	ip, #71	; 0x47
    208c:	strb.w	ip, [r5, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2090:	mov.w	ip, #69	; 0x45
    2094:	strb.w	ip, [r5, #259]	; 0x103
      _b = b;
    2098:	mov.w	ip, #99	; 0x63
    209c:	strb.w	ip, [r5, #260]	; 0x104
    20a0:	mvn.w	ip, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20a4:	strb.w	r6, [r5, #279]	; 0x117
      _s = s;
      _b = b;
    20a8:	strb.w	ip, [r5, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20ac:	mvn.w	ip, #119	; 0x77
    20b0:	strb.w	r1, [r5, #282]	; 0x11a
    20b4:	strb.w	ip, [r5, #264]	; 0x108
      _s = s;
    20b8:	mov.w	ip, #55	; 0x37
    20bc:	strb.w	ip, [r5, #265]	; 0x109
      _b = b;
    20c0:	mvn.w	ip, #24
    20c4:	strb.w	ip, [r5, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20c8:	mvn.w	ip, #120	; 0x78
    20cc:	strb.w	ip, [r5, #267]	; 0x10b
      _s = s;
      _b = b;
    20d0:	mvn.w	ip, #18
    20d4:	strb.w	ip, [r5, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20d8:	mov.w	ip, #69	; 0x45
    20dc:	strb.w	ip, [r5, #271]	; 0x10f
    20e0:	mov.w	ip, #72	; 0x48
    20e4:	strb.w	ip, [r5, #274]	; 0x112
      _b = b;
    20e8:	mvn.w	ip, #52	; 0x34
    20ec:	strb.w	ip, [r5, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20f0:	mov.w	ip, #35	; 0x23
    20f4:	strb.w	ip, [r5, #277]	; 0x115
      _b = b;
    20f8:	mvn.w	ip, #46	; 0x2e
    20fc:	strb.w	ip, [r5, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2100:	mov.w	ip, #66	; 0x42
    2104:	strb.w	ip, [r5, #280]	; 0x118
      _b = b;
    2108:	mvn.w	ip, #33	; 0x21
    210c:	strb.w	ip, [r5, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2110:	mov.w	ip, #59	; 0x3b
    2114:	strb.w	ip, [r5, #283]	; 0x11b
      _b = b;
    2118:	mvn.w	ip, #22
    211c:	strb.w	ip, [r5, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2120:	mvn.w	ip, #111	; 0x6f
    2124:	strb.w	ip, [r5, #285]	; 0x11d
      _s = s;
    2128:	mov.w	ip, #5
    212c:	strb.w	ip, [r5, #286]	; 0x11e
      _b = b;
    2130:	mvn.w	ip, #9
    2134:	strb.w	ip, [r5, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2138:	mvn.w	ip, #32
    213c:	strb.w	ip, [r5, #288]	; 0x120
    2140:	mov.w	ip, #77	; 0x4d
    2144:	strb.w	ip, [r5, #291]	; 0x123
      _s = s;
    2148:	mov.w	ip, #59	; 0x3b
    214c:	strb.w	ip, [r5, #292]	; 0x124
      _b = b;
    2150:	mvn.w	ip, #49	; 0x31
    2154:	strb.w	ip, [r5, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2158:	mov.w	ip, #34	; 0x22
    215c:	strb.w	ip, [r5, #294]	; 0x126
      _s = s;
    2160:	mov.w	ip, #17
    2164:	strb.w	ip, [r5, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2168:	mvn.w	ip, #109	; 0x6d
    216c:	strb.w	ip, [r5, #270]	; 0x10e
    2170:	strb.w	ip, [r5, #273]	; 0x111
      _s = s;
      _b = b;
    2174:	mvn.w	ip, #54	; 0x36
    2178:	strb.w	ip, [r5, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    217c:	mvn.w	ip, #106	; 0x6a
    2180:	strb.w	ip, [r5, #276]	; 0x114
      _s = s;
    2184:	mov.w	ip, #65	; 0x41
    2188:	strb.w	ip, [r5, #289]	; 0x121
      _b = b;
    218c:	mov.w	ip, #58	; 0x3a
    2190:	strb.w	ip, [r5, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2194:	mvn.w	ip, #40	; 0x28
    2198:	strb.w	ip, [r5, #295]	; 0x127
      _b = b;
    219c:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21a0:	strb.w	r0, [r5, #298]	; 0x12a
      _b = b;
    21a4:	strb.w	ip, [r5, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21a8:	mov.w	ip, #31
    21ac:	strb.w	r2, [r5, #321]	; 0x141
    21b0:	strb.w	ip, [r5, #297]	; 0x129
    21b4:	mov.w	ip, #28
    21b8:	strb.w	r1, [r5, #324]	; 0x144
    21bc:	strb.w	ip, [r5, #300]	; 0x12c
      _s = s;
    21c0:	mvn.w	ip, #59	; 0x3b
      _b = b;
    21c4:	strb.w	r0, [r5, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21c8:	strb.w	ip, [r5, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21cc:	mov.w	ip, #20
    21d0:	strb.w	ip, [r5, #303]	; 0x12f
      _s = s;
    21d4:	mvn.w	ip, #120	; 0x78
    21d8:	strb.w	ip, [r5, #304]	; 0x130
      _b = b;
    21dc:	mvn.w	ip, #54	; 0x36
    21e0:	strb.w	ip, [r5, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21e4:	mov.w	ip, #29
    21e8:	strb.w	ip, [r5, #306]	; 0x132
      _s = s;
    21ec:	mvn.w	ip, #96	; 0x60
    21f0:	strb.w	ip, [r5, #307]	; 0x133
      _b = b;
    21f4:	mvn.w	ip, #62	; 0x3e
    21f8:	strb.w	ip, [r5, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21fc:	mov.w	ip, #112	; 0x70
    2200:	strb.w	ip, [r5, #312]	; 0x138
      _s = s;
    2204:	mov.w	ip, #48	; 0x30
    2208:	strb.w	ip, [r5, #313]	; 0x139
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    220c:	mov.w	ip, #123	; 0x7b
    2210:	strb.w	ip, [r5, #315]	; 0x13b
      _s = s;
    2214:	mov.w	ip, #22
    2218:	strb.w	ip, [r5, #316]	; 0x13c
      _b = b;
    221c:	mvn.w	ip, #120	; 0x78
    2220:	strb.w	ip, [r5, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2224:	mov.w	ip, #123	; 0x7b
    2228:	strb.w	ip, [r5, #318]	; 0x13e
      _s = s;
    222c:	mov.w	ip, #22
    2230:	strb.w	ip, [r5, #319]	; 0x13f
      _b = b;
    2234:	mvn.w	ip, #27
    2238:	strb.w	ip, [r5, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    223c:	mvn.w	ip, #4
    2240:	strb.w	ip, [r5, #325]	; 0x145
    2244:	mov.w	ip, #115	; 0x73
    2248:	strb.w	ip, [r5, #328]	; 0x148
      _b = b;
    224c:	mvn.w	ip, #31
    2250:	strb.w	ip, [r5, #299]	; 0x12b
    2254:	mvn.w	ip, #72	; 0x48
    2258:	strb.w	ip, [r5, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    225c:	mov.w	ip, #88	; 0x58
    2260:	strb.w	ip, [r5, #309]	; 0x135
      _s = s;
    2264:	mov.w	ip, #61	; 0x3d
    2268:	strb.w	ip, [r5, #310]	; 0x136
    226c:	strb.w	ip, [r5, #322]	; 0x142
      _b = b;
    2270:	mvn.w	ip, #61	; 0x3d
    2274:	strb.w	ip, [r5, #311]	; 0x137
    2278:	mvn.w	ip, #78	; 0x4e
    227c:	strb.w	ip, [r5, #314]	; 0x13a
    2280:	mvn.w	ip, #73	; 0x49
    2284:	strb.w	ip, [r5, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2288:	mov.w	ip, #125	; 0x7d
    228c:	strb.w	ip, [r5, #327]	; 0x147
      _s = s;
      _b = b;
    2290:	mvn.w	ip, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2294:	strb.w	r1, [r5, #333]	; 0x14d
      _s = s;
      _b = b;
    2298:	strb.w	ip, [r5, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    229c:	mov.w	ip, #127	; 0x7f
    22a0:	strb.w	r0, [r5, #339]	; 0x153
    22a4:	strb.w	ip, [r5, #330]	; 0x14a
      _s = s;
    22a8:	mov.w	ip, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ac:	strb.w	r1, [r5, #351]	; 0x15f
      _s = s;
    22b0:	strb.w	ip, [r5, #331]	; 0x14b
      _b = b;
    22b4:	mvn.w	ip, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22b8:	strb.w	r6, [r5, #354]	; 0x162
      _s = s;
      _b = b;
    22bc:	strb.w	ip, [r5, #332]	; 0x14c
    22c0:	mvn.w	ip, #118	; 0x76
    22c4:	strb.w	ip, [r5, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22c8:	mvn.w	ip, #62	; 0x3e
    22cc:	strb.w	ip, [r5, #337]	; 0x151
      _b = b;
    22d0:	mov.w	ip, #121	; 0x79
    22d4:	strb.w	ip, [r5, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22d8:	mov.w	ip, #115	; 0x73
    22dc:	strb.w	ip, [r5, #340]	; 0x154
      _b = b;
    22e0:	mvn.w	ip, #102	; 0x66
    22e4:	strb.w	ip, [r5, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22e8:	mvn.w	ip, #107	; 0x6b
    22ec:	strb.w	ip, [r5, #342]	; 0x156
      _s = s;
    22f0:	mov.w	ip, #94	; 0x5e
    22f4:	strb.w	ip, [r5, #343]	; 0x157
      _b = b;
    22f8:	mvn.w	ip, #72	; 0x48
    22fc:	strb.w	ip, [r5, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2300:	mvn.w	ip, #100	; 0x64
    2304:	strb.w	ip, [r5, #345]	; 0x159
      _s = s;
      _b = b;
    2308:	mvn.w	ip, #74	; 0x4a
    230c:	strb.w	ip, [r5, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2310:	mvn.w	ip, #122	; 0x7a
    2314:	strb.w	ip, [r5, #348]	; 0x15c
      _s = s;
    2318:	mov.w	ip, #85	; 0x55
    231c:	strb.w	ip, [r5, #352]	; 0x160
    2320:	mvn.w	ip, #79	; 0x4f
    2324:	strb.w	ip, [r5, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2328:	mvn.w	ip, #122	; 0x7a
    232c:	strb.w	ip, [r5, #357]	; 0x165
    2330:	mvn.w	ip, #37	; 0x25
    2334:	strb.w	ip, [r5, #360]	; 0x168
      _s = s;
    2338:	mov.w	ip, #74	; 0x4a
    233c:	strb.w	ip, [r5, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2340:	mvn.w	ip, #114	; 0x72
    2344:	strb.w	ip, [r5, #336]	; 0x150
      _s = s;
    2348:	mov.w	ip, #45	; 0x2d
    234c:	strb.w	ip, [r5, #346]	; 0x15a
    2350:	mov.w	ip, #41	; 0x29
    2354:	strb.w	ip, [r5, #349]	; 0x15d
      _b = b;
    2358:	mvn.w	ip, #12
    235c:	strb.w	ip, [r5, #350]	; 0x15e
    2360:	mvn.w	ip, #13
    2364:	strb.w	ip, [r5, #353]	; 0x161
    2368:	mvn.w	ip, #23
    236c:	strb.w	ip, [r5, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2370:	mvn.w	ip, #63	; 0x3f
    2374:	strb.w	ip, [r5, #358]	; 0x166
      _b = b;
    2378:	strb.w	ip, [r5, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    237c:	mov.w	ip, #76	; 0x4c
    2380:	strb.w	ip, [r5, #361]	; 0x169
      _b = b;
    2384:	mov.w	ip, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2388:	strb.w	r1, [r5, #393]	; 0x189
      _s = s;
      _b = b;
    238c:	strb.w	ip, [r5, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2390:	mov.w	ip, #101	; 0x65
    2394:	strb.w	ip, [r5, #363]	; 0x16b
      _s = s;
      _b = b;
    2398:	mvn.w	ip, #79	; 0x4f
    239c:	strb.w	ip, [r5, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23a0:	mov.w	ip, #22
    23a4:	strb.w	ip, [r5, #369]	; 0x171
      _s = s;
    23a8:	mvn.w	ip, #32
    23ac:	strb.w	ip, [r5, #370]	; 0x172
      _b = b;
    23b0:	mvn.w	ip, #99	; 0x63
    23b4:	strb.w	ip, [r5, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23b8:	mvn.w	ip, #12
    23bc:	strb.w	ip, [r5, #373]	; 0x175
      _b = b;
    23c0:	mvn.w	ip, #71	; 0x47
    23c4:	strb.w	ip, [r5, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23c8:	mov.w	ip, #24
    23cc:	strb.w	ip, [r5, #375]	; 0x177
      _s = s;
    23d0:	mvn.w	ip, #4
    23d4:	strb.w	ip, [r5, #376]	; 0x178
      _b = b;
    23d8:	mvn.w	ip, #46	; 0x2e
    23dc:	strb.w	ip, [r5, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23e0:	mov.w	ip, #54	; 0x36
    23e4:	strb.w	ip, [r5, #378]	; 0x17a
      _s = s;
      _b = b;
    23e8:	mvn.w	ip, #108	; 0x6c
    23ec:	strb.w	ip, [r5, #380]	; 0x17c
    23f0:	mov.w	ip, #127	; 0x7f
    23f4:	strb.w	ip, [r5, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23f8:	mov.w	ip, #95	; 0x5f
    23fc:	strb.w	ip, [r5, #384]	; 0x180
      _s = s;
    2400:	mov.w	ip, #87	; 0x57
    2404:	strb.w	ip, [r5, #385]	; 0x181
      _b = b;
    2408:	mov.w	ip, #93	; 0x5d
    240c:	strb.w	ip, [r5, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2410:	mov.w	ip, #123	; 0x7b
    2414:	strb.w	ip, [r5, #387]	; 0x183
      _s = s;
    2418:	mov.w	ip, #105	; 0x69
    241c:	strb.w	ip, [r5, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2420:	mov.w	ip, #127	; 0x7f
    2424:	strb.w	ip, [r5, #390]	; 0x186
      _s = s;
    2428:	mov.w	ip, #47	; 0x2f
    242c:	strb.w	ip, [r5, #391]	; 0x187
      _b = b;
    2430:	mvn.w	ip, #109	; 0x6d
    2434:	strb.w	ip, [r5, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2438:	mvn.w	ip, #83	; 0x53
    243c:	strb.w	ip, [r5, #394]	; 0x18a
    2440:	mov.w	ip, #92	; 0x5c
    2444:	strb.w	ip, [r5, #364]	; 0x16c
      _b = b;
    2448:	mvn.w	ip, #95	; 0x5f
    244c:	strb.w	ip, [r5, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2450:	mov.w	ip, #40	; 0x28
    2454:	strb.w	ip, [r5, #366]	; 0x16e
      _s = s;
    2458:	mvn.w	ip, #89	; 0x59
    245c:	strb.w	ip, [r5, #367]	; 0x16f
    2460:	strb.w	ip, [r5, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2464:	mov.w	ip, #21
    2468:	strb.w	ip, [r5, #372]	; 0x174
    246c:	mov.w	ip, #111	; 0x6f
    2470:	strb.w	ip, [r5, #381]	; 0x17d
      _s = s;
    2474:	mvn.w	ip, #77	; 0x4d
    2478:	strb.w	ip, [r5, #382]	; 0x17e
      _b = b;
    247c:	mov.w	ip, #70	; 0x46
    2480:	strb.w	ip, [r5, #389]	; 0x185
    2484:	mvn.w	ip, #100	; 0x64
    2488:	strb.w	sl, [r5, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    248c:	mov.w	sl, #99	; 0x63
      _b = b;
    2490:	strb.w	ip, [r5, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2494:	mov.w	ip, #72	; 0x48
    2498:	strb.w	sl, [r5, #403]	; 0x193
      _b = b;
    249c:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24a0:	strb.w	ip, [r5, #397]	; 0x18d
      _b = b;
    24a4:	mvn.w	ip, #51	; 0x33
    24a8:	strb.w	sl, [r5, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24ac:	mov.w	sl, #95	; 0x5f
      _b = b;
    24b0:	strb.w	ip, [r5, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24b4:	mov.w	ip, #57	; 0x39
    24b8:	strb.w	sl, [r5, #406]	; 0x196
      _b = b;
    24bc:	mvn.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24c0:	strb.w	r1, [r5, #399]	; 0x18f
      _s = s;
      _b = b;
    24c4:	strb.w	sl, [r5, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24c8:	mvn.w	sl, #122	; 0x7a
      _s = s;
    24cc:	strb.w	ip, [r5, #400]	; 0x190
      _b = b;
    24d0:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24d4:	strb.w	sl, [r5, #408]	; 0x198
      _s = s;
    24d8:	mov.w	sl, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24dc:	strb.w	r6, [r5, #420]	; 0x1a4
      _s = s;
    24e0:	strb.w	sl, [r5, #409]	; 0x199
      _b = b;
    24e4:	mvn.w	sl, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24e8:	strb.w	r2, [r5, #423]	; 0x1a7
      _s = s;
      _b = b;
    24ec:	strb.w	sl, [r5, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24f0:	mov.w	sl, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24f4:	strb.w	r6, [r5, #426]	; 0x1aa
      _s = s;
    24f8:	strb.w	sl, [r5, #412]	; 0x19c
      _b = b;
    24fc:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2500:	strb.w	r9, [r5, #402]	; 0x192
      _s = s;
      _b = b;
    2504:	strb.w	sl, [r5, #413]	; 0x19d
    2508:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    250c:	strb.w	r8, [r5, #405]	; 0x195
      _s = s;
      _b = b;
    2510:	strb.w	sl, [r5, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2514:	mvn.w	sl, #108	; 0x6c
    2518:	strb.w	r9, [r5, #411]	; 0x19b
    251c:	strb.w	sl, [r5, #417]	; 0x1a1
      _s = s;
    2520:	mov.w	sl, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2524:	strb.w	fp, [r5, #414]	; 0x19e
      _s = s;
    2528:	strb.w	sl, [r5, #418]	; 0x1a2
    252c:	mov.w	sl, #73	; 0x49
      _b = b;
    2530:	strb.w	fp, [r5, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2534:	strb.w	sl, [r5, #421]	; 0x1a5
      _b = b;
    2538:	mvn.w	sl, #21
    253c:	strb.w	sl, [r5, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2540:	mvn.w	sl, #78	; 0x4e
    2544:	strb.w	sl, [r5, #424]	; 0x1a8
      _b = b;
    2548:	mvn.w	sl, #22
    254c:	strb.w	sl, [r5, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2550:	mvn.w	sl, #49	; 0x31
    2554:	strb.w	sl, [r5, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2558:	mov.w	sl, #126	; 0x7e
    255c:	strb.w	sl, [r5, #396]	; 0x18c
      _s = s;
    2560:	mov.w	sl, #116	; 0x74
    2564:	strb.w	sl, [r5, #415]	; 0x19f
      _b = b;
    2568:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    256c:	strb.w	r1, [r5, #429]	; 0x1ad
      _s = s;
      _b = b;
    2570:	strb.w	sl, [r5, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2574:	mvn.w	sl, #96	; 0x60
      _b = b;
    2578:	strb.w	r0, [r5, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    257c:	strb.w	sl, [r5, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2580:	mvn.w	sl, #95	; 0x5f
    2584:	strb.w	sl, [r5, #432]	; 0x1b0
      _s = s;
    2588:	mov.w	sl, #37	; 0x25
    258c:	strb.w	sl, [r5, #433]	; 0x1b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2590:	mov.w	sl, #116	; 0x74
    2594:	strb.w	sl, [r5, #435]	; 0x1b3
      _s = s;
    2598:	mov.w	sl, #123	; 0x7b
    259c:	strb.w	sl, [r5, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25a0:	mov.w	sl, #114	; 0x72
    25a4:	strb.w	sl, [r5, #438]	; 0x1b6
      _s = s;
    25a8:	mov.w	sl, #96	; 0x60
    25ac:	strb.w	sl, [r5, #439]	; 0x1b7
      _b = b;
    25b0:	mvn.w	sl, #39	; 0x27
    25b4:	strb.w	sl, [r5, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25b8:	mov.w	sl, #106	; 0x6a
    25bc:	strb.w	sl, [r5, #441]	; 0x1b9
      _s = s;
    25c0:	mov.w	sl, #66	; 0x42
    25c4:	strb.w	sl, [r5, #442]	; 0x1ba
      _b = b;
    25c8:	mvn.w	sl, #30
    25cc:	strb.w	sl, [r5, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25d0:	mvn.w	sl, #102	; 0x66
    25d4:	strb.w	sl, [r5, #445]	; 0x1bd
      _b = b;
    25d8:	mvn.w	sl, #79	; 0x4f
    25dc:	strb.w	sl, [r5, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25e0:	mov.w	sl, #112	; 0x70
    25e4:	strb.w	sl, [r5, #447]	; 0x1bf
      _s = s;
    25e8:	mov.w	sl, #118	; 0x76
    25ec:	strb.w	sl, [r5, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25f0:	mov.w	sl, #116	; 0x74
    25f4:	strb.w	sl, [r5, #450]	; 0x1c2
      _s = s;
    25f8:	mvn.w	sl, #34	; 0x22
    25fc:	strb.w	sl, [r5, #451]	; 0x1c3
      _b = b;
    2600:	mov.w	sl, #120	; 0x78
    2604:	strb.w	sl, [r5, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2608:	mov.w	sl, #98	; 0x62
    260c:	strb.w	sl, [r5, #453]	; 0x1c5
      _s = s;
    2610:	mvn.w	sl, #110	; 0x6e
    2614:	strb.w	sl, [r5, #454]	; 0x1c6
      _b = b;
    2618:	mov.w	sl, #102	; 0x66
    261c:	strb.w	sl, [r5, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2620:	mov.w	sl, #105	; 0x69
    2624:	strb.w	sl, [r5, #456]	; 0x1c8
    2628:	mvn.w	sl, #52	; 0x34
    262c:	strb.w	sl, [r5, #459]	; 0x1cb
      _s = s;
    2630:	mov.w	sl, #95	; 0x5f
    2634:	strb.w	sl, [r5, #460]	; 0x1cc
      _b = b;
    2638:	mvn.w	sl, #55	; 0x37
    263c:	strb.w	sl, [r5, #431]	; 0x1af
    2640:	mov.w	sl, #62	; 0x3e
    2644:	strb.w	sl, [r5, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2648:	mov.w	sl, #38	; 0x26
    264c:	strb.w	sl, [r5, #444]	; 0x1bc
      _s = s;
      _b = b;
    2650:	mvn.w	sl, #64	; 0x40
    2654:	strb.w	sl, [r5, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2658:	mov.w	sl, #124	; 0x7c
    265c:	strb.w	sl, [r5, #457]	; 0x1c9
      _b = b;
    2660:	mov.w	sl, #43	; 0x2b
    2664:	strb.w	sl, [r5, #458]	; 0x1ca
    2668:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    266c:	strb.w	r6, [r5, #465]	; 0x1d1
      _s = s;
      _b = b;
    2670:	strb.w	sl, [r5, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2674:	mov.w	sl, #121	; 0x79
    2678:	strb.w	r7, [r5, #471]	; 0x1d7
    267c:	strb.w	sl, [r5, #462]	; 0x1ce
      _s = s;
    2680:	mvn.w	sl, #121	; 0x79
    2684:	strb.w	r0, [r5, #478]	; 0x1de
    2688:	strb.w	sl, [r5, #463]	; 0x1cf
      _b = b;
    268c:	mov.w	sl, #106	; 0x6a
    2690:	strb.w	ip, [r5, #485]	; 0x1e5
    2694:	strb.w	sl, [r5, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2698:	mvn.w	sl, #73	; 0x49
    269c:	strb.w	r9, [r5, #469]	; 0x1d5
    26a0:	strb.w	sl, [r5, #466]	; 0x1d2
      _b = b;
    26a4:	mvn.w	sl, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26a8:	strb.w	r8, [r5, #486]	; 0x1e6
      _s = s;
      _b = b;
    26ac:	strb.w	sl, [r5, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26b0:	mvn.w	sl, #118	; 0x76
    26b4:	strb.w	sl, [r5, #468]	; 0x1d4
      _s = s;
      _b = b;
    26b8:	mvn.w	sl, #34	; 0x22
    26bc:	strb.w	sl, [r5, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26c0:	mvn.w	sl, #45	; 0x2d
    26c4:	strb.w	sl, [r5, #472]	; 0x1d8
      _b = b;
    26c8:	strb.w	sl, [r5, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26cc:	mvn.w	sl, #109	; 0x6d
    26d0:	strb.w	sl, [r5, #474]	; 0x1da
      _s = s;
    26d4:	mvn.w	sl, #110	; 0x6e
    26d8:	strb.w	sl, [r5, #475]	; 0x1db
      _b = b;
    26dc:	mvn.w	sl, #37	; 0x25
    26e0:	strb.w	sl, [r5, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26e4:	mvn.w	sl, #114	; 0x72
    26e8:	strb.w	sl, [r5, #477]	; 0x1dd
    26ec:	mvn.w	sl, #111	; 0x6f
    26f0:	strb.w	sl, [r5, #480]	; 0x1e0
      _s = s;
    26f4:	mvn.w	sl, #81	; 0x51
    26f8:	strb.w	sl, [r5, #481]	; 0x1e1
      _b = b;
    26fc:	mvn.w	sl, #31
    2700:	strb.w	sl, [r5, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2704:	mvn.w	sl, #109	; 0x6d
    2708:	strb.w	sl, [r5, #483]	; 0x1e3
      _s = s;
    270c:	mvn.w	sl, #101	; 0x65
    2710:	strb.w	sl, [r5, #484]	; 0x1e4
      _b = b;
    2714:	mvn.w	sl, #37	; 0x25
    2718:	strb.w	sl, [r5, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    271c:	mov.w	sl, #37	; 0x25
    2720:	strb.w	sl, [r5, #490]	; 0x1ea
      _b = b;
    2724:	mvn.w	sl, #105	; 0x69
    2728:	strb.w	sl, [r5, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    272c:	mov.w	sl, #113	; 0x71
    2730:	strb.w	sl, [r5, #492]	; 0x1ec
      _s = s;
      _b = b;
    2734:	mvn.w	sl, #44	; 0x2c
    2738:	strb.w	sl, [r5, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    273c:	mov.w	sl, #79	; 0x4f
    2740:	strb.w	sl, [r5, #487]	; 0x1e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2744:	mov.w	sl, #119	; 0x77
    2748:	strb.w	sl, [r5, #489]	; 0x1e9
      _s = s;
    274c:	mov.w	sl, #52	; 0x34
    2750:	strb.w	sl, [r5, #493]	; 0x1ed
      _b = b;
    2754:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2758:	strb.w	r2, [r5, #504]	; 0x1f8
      _s = s;
      _b = b;
    275c:	strb.w	sl, [r5, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2760:	mov.w	sl, #121	; 0x79
      _s = s;
    2764:	strb.w	r6, [r5, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2768:	strb.w	sl, [r5, #495]	; 0x1ef
      _s = s;
    276c:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2770:	strb.w	r6, [r5, #510]	; 0x1fe
      _s = s;
    2774:	strb.w	sl, [r5, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2778:	strb.w	sl, [r5, #498]	; 0x1f2
      _s = s;
    277c:	mvn.w	sl, #58	; 0x3a
    2780:	strb.w	lr, [r5, #517]	; 0x205
    2784:	strb.w	sl, [r5, #499]	; 0x1f3
      _b = b;
    2788:	mvn.w	sl, #65	; 0x41
    278c:	strb.w	sl, [r5, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2790:	mov.w	sl, #127	; 0x7f
    2794:	strb.w	sl, [r5, #501]	; 0x1f5
      _s = s;
    2798:	mvn.w	sl, #107	; 0x6b
    279c:	strb.w	sl, [r5, #502]	; 0x1f6
      _b = b;
    27a0:	mvn.w	sl, #78	; 0x4e
    27a4:	strb.w	sl, [r5, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27a8:	mov.w	sl, #97	; 0x61
    27ac:	strb.w	sl, [r5, #505]	; 0x1f9
      _b = b;
    27b0:	mvn.w	sl, #96	; 0x60
    27b4:	strb.w	sl, [r5, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27b8:	mov.w	sl, #127	; 0x7f
    27bc:	strb.w	sl, [r5, #507]	; 0x1fb
      _s = s;
      _b = b;
    27c0:	mvn.w	sl, #67	; 0x43
    27c4:	strb.w	sl, [r5, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27c8:	mvn.w	sl, #34	; 0x22
    27cc:	strb.w	sl, [r5, #511]	; 0x1ff
      _b = b;
    27d0:	mvn.w	sl, #110	; 0x6e
    27d4:	strb.w	sl, [r5, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27d8:	mvn.w	sl, #120	; 0x78
    27dc:	strb.w	sl, [r5, #513]	; 0x201
      _s = s;
    27e0:	mvn.w	sl, #28
    27e4:	strb.w	sl, [r5, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27e8:	mvn.w	sl, #120	; 0x78
    27ec:	strb.w	sl, [r5, #516]	; 0x204
      _s = s;
      _b = b;
    27f0:	mvn.w	sl, #52	; 0x34
    27f4:	strb.w	sl, [r5, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27f8:	mvn.w	sl, #119	; 0x77
    27fc:	strb.w	sl, [r5, #519]	; 0x207
      _s = s;
    2800:	mvn.w	sl, #5
    2804:	strb.w	sl, [r5, #520]	; 0x208
      _b = b;
    2808:	mvn.w	sl, #78	; 0x4e
    280c:	strb.w	sl, [r5, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2810:	mov.w	sl, #111	; 0x6f
    2814:	strb.w	sl, [r5, #522]	; 0x20a
      _s = s;
    2818:	mvn.w	sl, #104	; 0x68
    281c:	strb.w	sl, [r5, #523]	; 0x20b
      _b = b;
    2820:	mvn.w	sl, #119	; 0x77
    2824:	strb.w	sl, [r5, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2828:	mov.w	sl, #99	; 0x63
    282c:	strb.w	sl, [r5, #525]	; 0x20d
      _s = s;
    2830:	mov.w	sl, #114	; 0x72
    2834:	strb.w	sl, [r5, #526]	; 0x20e
      _b = b;
    2838:	mvn.w	sl, #47	; 0x2f
    283c:	strb.w	sl, [r5, #497]	; 0x1f1
    2840:	mvn.w	sl, #53	; 0x35
    2844:	strb.w	sl, [r5, #515]	; 0x203
    2848:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    284c:	strb.w	lr, [r5, #541]	; 0x21d
      _b = b;
    2850:	strb.w	sl, [r5, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2854:	mvn.w	sl, #64	; 0x40
    2858:	strb.w	r7, [r5, #543]	; 0x21f
    285c:	strb.w	sl, [r5, #528]	; 0x210
      _s = s;
    2860:	mov.w	sl, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2864:	strb.w	r7, [r5, #558]	; 0x22e
      _s = s;
    2868:	strb.w	sl, [r5, #529]	; 0x211
      _b = b;
    286c:	mov.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2870:	strb.w	r2, [r5, #559]	; 0x22f
      _b = b;
    2874:	strb.w	sl, [r5, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2878:	mvn.w	sl, #64	; 0x40
    287c:	strb.w	fp, [r5, #546]	; 0x222
    2880:	strb.w	sl, [r5, #531]	; 0x213
      _s = s;
    2884:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2888:	strb.w	r9, [r5, #549]	; 0x225
      _s = s;
    288c:	strb.w	sl, [r5, #532]	; 0x214
      _b = b;
    2890:	mov.w	sl, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2894:	strb.w	fp, [r5, #552]	; 0x228
      _s = s;
      _b = b;
    2898:	strb.w	sl, [r5, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    289c:	mov.w	sl, #127	; 0x7f
    28a0:	strb.w	fp, [r5, #555]	; 0x22b
    28a4:	strb.w	sl, [r5, #534]	; 0x216
      _s = s;
    28a8:	mov.w	sl, #115	; 0x73
    28ac:	strb.w	sl, [r5, #535]	; 0x217
      _b = b;
    28b0:	mov.w	sl, #121	; 0x79
    28b4:	strb.w	sl, [r5, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28b8:	mvn.w	sl, #122	; 0x7a
    28bc:	strb.w	sl, [r5, #537]	; 0x219
      _s = s;
    28c0:	mvn.w	sl, #61	; 0x3d
    28c4:	strb.w	sl, [r5, #538]	; 0x21a
      _b = b;
    28c8:	mvn.w	sl, #37	; 0x25
    28cc:	strb.w	sl, [r5, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28d0:	mvn.w	sl, #111	; 0x6f
    28d4:	strb.w	sl, [r5, #540]	; 0x21c
      _s = s;
      _b = b;
    28d8:	mvn.w	sl, #54	; 0x36
    28dc:	strb.w	sl, [r5, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28e0:	mov.w	sl, #121	; 0x79
    28e4:	strb.w	sl, [r5, #544]	; 0x220
      _b = b;
    28e8:	mvn.w	sl, #35	; 0x23
    28ec:	strb.w	sl, [r5, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28f0:	mov.w	sl, #114	; 0x72
    28f4:	strb.w	sl, [r5, #547]	; 0x223
      _b = b;
    28f8:	mvn.w	sl, #23
    28fc:	strb.w	sl, [r5, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2900:	mvn.w	sl, #70	; 0x46
    2904:	strb.w	sl, [r5, #550]	; 0x226
    2908:	mov.w	sl, #124	; 0x7c
    290c:	strb.w	sl, [r5, #553]	; 0x229
    2910:	mov.w	sl, #110	; 0x6e
    2914:	strb.w	sl, [r5, #556]	; 0x22c
      _b = b;
    2918:	mvn.w	sl, #19
    291c:	strb.w	sl, [r5, #557]	; 0x22d
    2920:	mvn.w	sl, #38	; 0x26
    2924:	strb.w	sl, [r5, #551]	; 0x227
    2928:	mvn.w	sl, #25
    292c:	strb.w	sl, [r5, #554]	; 0x22a
    2930:	strb.w	sl, [r5, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2934:	mvn.w	sl, #122	; 0x7a
    2938:	strb.w	r2, [r5, #579]	; 0x243
    293c:	strb.w	sl, [r5, #561]	; 0x231
      _s = s;
      _b = b;
    2940:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2944:	strb.w	r1, [r5, #582]	; 0x246
      _s = s;
      _b = b;
    2948:	strb.w	sl, [r5, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    294c:	mov.w	sl, #110	; 0x6e
    2950:	strb.w	r6, [r5, #585]	; 0x249
    2954:	strb.w	sl, [r5, #564]	; 0x234
      _s = s;
    2958:	mov.w	sl, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    295c:	strb.w	r6, [r5, #588]	; 0x24c
      _s = s;
    2960:	strb.w	sl, [r5, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2964:	mov.w	sl, #120	; 0x78
      _s = s;
      _b = b;
    2968:	strb.w	r9, [r5, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    296c:	strb.w	sl, [r5, #567]	; 0x237
    2970:	strb.w	sl, [r5, #570]	; 0x23a
      _s = s;
    2974:	mov.w	sl, #124	; 0x7c
      _b = b;
    2978:	strb.w	fp, [r5, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    297c:	strb.w	sl, [r5, #571]	; 0x23b
      _b = b;
    2980:	mvn.w	sl, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2984:	strb.w	r8, [r5, #591]	; 0x24f
      _s = s;
      _b = b;
    2988:	strb.w	sl, [r5, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    298c:	mov.w	sl, #126	; 0x7e
    2990:	strb.w	sl, [r5, #573]	; 0x23d
      _s = s;
    2994:	mov.w	sl, #115	; 0x73
    2998:	strb.w	sl, [r5, #574]	; 0x23e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    299c:	mov.w	sl, #120	; 0x78
    29a0:	strb.w	sl, [r5, #576]	; 0x240
      _s = s;
    29a4:	mov.w	sl, #45	; 0x2d
    29a8:	strb.w	sl, [r5, #577]	; 0x241
      _b = b;
    29ac:	mvn.w	sl, #66	; 0x42
    29b0:	strb.w	sl, [r5, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29b4:	mvn.w	sl, #55	; 0x37
    29b8:	strb.w	sl, [r5, #580]	; 0x244
      _b = b;
    29bc:	mvn.w	sl, #104	; 0x68
    29c0:	strb.w	sl, [r5, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29c4:	mvn.w	sl, #8
    29c8:	strb.w	sl, [r5, #583]	; 0x247
      _b = b;
    29cc:	mvn.w	sl, #119	; 0x77
    29d0:	strb.w	sl, [r5, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29d4:	mvn.w	sl, #5
    29d8:	strb.w	sl, [r5, #586]	; 0x24a
    29dc:	mvn.w	sl, #17
    29e0:	strb.w	sl, [r5, #589]	; 0x24d
      _b = b;
    29e4:	mvn.w	sl, #105	; 0x69
    29e8:	strb.w	sl, [r5, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29ec:	mov.w	sl, #78	; 0x4e
    29f0:	strb.w	sl, [r5, #562]	; 0x232
    29f4:	mov.w	sl, #122	; 0x7a
    29f8:	strb.w	sl, [r5, #568]	; 0x238
      _b = b;
    29fc:	mvn.w	sl, #94	; 0x5e
    2a00:	strb.w	sl, [r5, #575]	; 0x23f
    2a04:	mvn.w	sl, #90	; 0x5a
    2a08:	strb.w	sl, [r5, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a0c:	mvn.w	sl, #98	; 0x62
    2a10:	strb.w	sl, [r5, #592]	; 0x250
      _b = b;
    2a14:	mvn.w	sl, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a18:	strb.w	r1, [r5, #604]	; 0x25c
      _b = b;
    2a1c:	strb.w	sl, [r5, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a20:	mvn.w	sl, #94	; 0x5e
      _s = s;
    2a24:	strb.w	r7, [r5, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a28:	strb.w	sl, [r5, #594]	; 0x252
      _s = s;
      _b = b;
    2a2c:	mvn.w	sl, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a30:	strb.w	r7, [r5, #624]	; 0x270
      _s = s;
      _b = b;
    2a34:	strb.w	sl, [r5, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a38:	mvn.w	sl, #15
    2a3c:	strb.w	sl, [r5, #597]	; 0x255
      _s = s;
    2a40:	mov.w	sl, #119	; 0x77
    2a44:	strb.w	sl, [r5, #598]	; 0x256
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a48:	mov.w	sl, #1
    2a4c:	strb.w	sl, [r5, #600]	; 0x258
      _s = s;
    2a50:	mov.w	sl, #102	; 0x66
    2a54:	strb.w	sl, [r5, #601]	; 0x259
      _b = b;
    2a58:	mov.w	sl, #112	; 0x70
    2a5c:	strb.w	sl, [r5, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a60:	mvn.w	sl, #114	; 0x72
    2a64:	strb.w	sl, [r5, #603]	; 0x25b
      _s = s;
      _b = b;
    2a68:	mov.w	sl, #127	; 0x7f
    2a6c:	strb.w	sl, [r5, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a70:	mvn.w	sl, #114	; 0x72
    2a74:	strb.w	sl, [r5, #606]	; 0x25e
      _s = s;
    2a78:	mvn.w	sl, #35	; 0x23
    2a7c:	strb.w	sl, [r5, #607]	; 0x25f
      _b = b;
    2a80:	mvn.w	sl, #26
    2a84:	strb.w	sl, [r5, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a88:	mvn.w	sl, #114	; 0x72
    2a8c:	strb.w	sl, [r5, #609]	; 0x261
      _s = s;
    2a90:	mvn.w	sl, #45	; 0x2d
    2a94:	strb.w	sl, [r5, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a98:	mvn.w	sl, #118	; 0x76
    2a9c:	strb.w	sl, [r5, #612]	; 0x264
      _s = s;
      _b = b;
    2aa0:	mvn.w	sl, #35	; 0x23
    2aa4:	strb.w	sl, [r5, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2aa8:	mvn.w	sl, #120	; 0x78
    2aac:	strb.w	sl, [r5, #615]	; 0x267
      _s = s;
    2ab0:	mvn.w	sl, #92	; 0x5c
    2ab4:	strb.w	sl, [r5, #616]	; 0x268
      _b = b;
    2ab8:	mvn.w	sl, #23
    2abc:	strb.w	sl, [r5, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ac0:	mvn.w	sl, #121	; 0x79
    2ac4:	strb.w	sl, [r5, #618]	; 0x26a
      _s = s;
    2ac8:	mvn.w	sl, #8
    2acc:	strb.w	sl, [r5, #619]	; 0x26b
      _b = b;
    2ad0:	mvn.w	sl, #29
    2ad4:	strb.w	sl, [r5, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ad8:	mvn.w	sl, #118	; 0x76
    2adc:	strb.w	sl, [r5, #621]	; 0x26d
      _s = s;
    2ae0:	mvn.w	sl, #81	; 0x51
    2ae4:	strb.w	sl, [r5, #622]	; 0x26e
      _b = b;
    2ae8:	mvn.w	sl, #47	; 0x2f
    2aec:	strb.w	sl, [r5, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2af0:	mvn.w	sl, #119	; 0x77
    2af4:	strb.w	sl, [r5, #625]	; 0x271
    2af8:	mov.w	sl, #83	; 0x53
    2afc:	strb.w	sl, [r5, #595]	; 0x253
      _b = b;
    2b00:	strb.w	sl, [r5, #599]	; 0x257
    2b04:	mvn.w	sl, #56	; 0x38
    2b08:	strb.w	sl, [r5, #611]	; 0x263
    2b0c:	mvn.w	sl, #50	; 0x32
    2b10:	strb.w	ip, [r5, #629]	; 0x275
    2b14:	strb.w	sl, [r5, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b18:	mvn.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b1c:	strb.w	r2, [r5, #636]	; 0x27c
      _s = s;
    2b20:	strb.w	sl, [r5, #628]	; 0x274
      _b = b;
    2b24:	mvn.w	sl, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b28:	strb.w	r1, [r5, #657]	; 0x291
      _s = s;
      _b = b;
    2b2c:	strb.w	sl, [r5, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b30:	mov.w	sl, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b34:	strb.w	fp, [r5, #627]	; 0x273
      _s = s;
    2b38:	strb.w	sl, [r5, #634]	; 0x27a
      _b = b;
    2b3c:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b40:	strb.w	r8, [r5, #630]	; 0x276
      _s = s;
      _b = b;
    2b44:	strb.w	sl, [r5, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b48:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b4c:	strb.w	r8, [r5, #633]	; 0x279
      _s = s;
    2b50:	strb.w	sl, [r5, #637]	; 0x27d
      _b = b;
    2b54:	mov.w	sl, #97	; 0x61
    2b58:	strb.w	sl, [r5, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b5c:	mvn.w	sl, #50	; 0x32
    2b60:	strb.w	sl, [r5, #639]	; 0x27f
      _s = s;
    2b64:	mov.w	sl, #85	; 0x55
    2b68:	strb.w	sl, [r5, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b6c:	mvn.w	sl, #50	; 0x32
    2b70:	strb.w	sl, [r5, #642]	; 0x282
      _s = s;
    2b74:	mov.w	sl, #90	; 0x5a
    2b78:	strb.w	sl, [r5, #643]	; 0x283
      _b = b;
    2b7c:	mov.w	sl, #17
    2b80:	strb.w	sl, [r5, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b84:	mvn.w	sl, #51	; 0x33
    2b88:	strb.w	sl, [r5, #645]	; 0x285
      _s = s;
    2b8c:	mov.w	sl, #70	; 0x46
    2b90:	strb.w	sl, [r5, #646]	; 0x286
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b94:	mov.w	sl, #95	; 0x5f
    2b98:	strb.w	sl, [r5, #648]	; 0x288
      _s = s;
      _b = b;
    2b9c:	mvn.w	sl, #29
    2ba0:	strb.w	sl, [r5, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ba4:	mvn.w	sl, #122	; 0x7a
    2ba8:	strb.w	sl, [r5, #651]	; 0x28b
      _s = s;
    2bac:	mov.w	sl, #87	; 0x57
    2bb0:	strb.w	sl, [r5, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bb4:	mvn.w	sl, #122	; 0x7a
    2bb8:	strb.w	sl, [r5, #654]	; 0x28e
      _s = s;
    2bbc:	mvn.w	sl, #106	; 0x6a
    2bc0:	strb.w	sl, [r5, #658]	; 0x292
    2bc4:	mov.w	sl, #86	; 0x56
    2bc8:	strb.w	sl, [r5, #631]	; 0x277
      _b = b;
    2bcc:	mov.w	sl, #18
    2bd0:	strb.w	sl, [r5, #641]	; 0x281
    2bd4:	strb.w	sl, [r5, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bd8:	mov.w	sl, #13
    2bdc:	strb.w	sl, [r5, #649]	; 0x289
      _b = b;
    2be0:	mvn.w	sl, #68	; 0x44
    2be4:	strb.w	sl, [r5, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2be8:	mvn.w	sl, #7
    2bec:	strb.w	sl, [r5, #655]	; 0x28f
      _b = b;
    2bf0:	mvn.w	sl, #91	; 0x5b
    2bf4:	strb.w	sl, [r5, #656]	; 0x290
    2bf8:	mvn.w	sl, #67	; 0x43
    2bfc:	strb.w	lr, [r5, #665]	; 0x299
    2c00:	strb.w	sl, [r5, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c04:	mvn.w	sl, #78	; 0x4e
    2c08:	strb.w	r2, [r5, #673]	; 0x2a1
    2c0c:	strb.w	sl, [r5, #661]	; 0x295
      _b = b;
    2c10:	mvn.w	sl, #30
    2c14:	strb.w	ip, [r5, #677]	; 0x2a5
    2c18:	strb.w	sl, [r5, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c1c:	mvn.w	sl, #99	; 0x63
      _s = s;
    2c20:	strb.w	lr, [r5, #679]	; 0x2a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c24:	strb.w	sl, [r5, #663]	; 0x297
    2c28:	mvn.w	sl, #78	; 0x4e
    2c2c:	strb.w	r6, [r5, #684]	; 0x2ac
    2c30:	strb.w	sl, [r5, #666]	; 0x29a
      _s = s;
    2c34:	mvn.w	sl, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c38:	strb.w	r9, [r5, #660]	; 0x294
      _s = s;
    2c3c:	strb.w	sl, [r5, #667]	; 0x29b
      _b = b;
    2c40:	mvn.w	sl, #6
    2c44:	strb.w	sl, [r5, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c48:	mvn.w	sl, #72	; 0x48
    2c4c:	strb.w	sl, [r5, #669]	; 0x29d
      _s = s;
    2c50:	mov.w	sl, #115	; 0x73
    2c54:	strb.w	sl, [r5, #670]	; 0x29e
      _b = b;
    2c58:	mvn.w	sl, #5
    2c5c:	strb.w	sl, [r5, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c60:	mvn.w	sl, #71	; 0x47
    2c64:	strb.w	sl, [r5, #672]	; 0x2a0
      _s = s;
    2c68:	mvn.w	sl, #56	; 0x38
    2c6c:	strb.w	sl, [r5, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c70:	mvn.w	sl, #93	; 0x5d
    2c74:	strb.w	sl, [r5, #678]	; 0x2a6
      _s = s;
      _b = b;
    2c78:	mvn.w	sl, #31
    2c7c:	strb.w	sl, [r5, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c80:	mvn.w	sl, #114	; 0x72
    2c84:	strb.w	sl, [r5, #681]	; 0x2a9
      _s = s;
      _b = b;
    2c88:	mvn.w	sl, #54	; 0x36
    2c8c:	strb.w	sl, [r5, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c90:	mvn.w	sl, #95	; 0x5f
    2c94:	strb.w	sl, [r5, #685]	; 0x2ad
      _b = b;
    2c98:	mvn.w	sl, #24
    2c9c:	strb.w	sl, [r5, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ca0:	mvn.w	sl, #120	; 0x78
    2ca4:	strb.w	sl, [r5, #687]	; 0x2af
      _s = s;
    2ca8:	mvn.w	sl, #6
    2cac:	strb.w	sl, [r5, #688]	; 0x2b0
      _b = b;
    2cb0:	mvn.w	sl, #36	; 0x24
    2cb4:	strb.w	sl, [r5, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cb8:	mvn.w	sl, #118	; 0x76
    2cbc:	strb.w	sl, [r5, #690]	; 0x2b2
      _s = s;
    2cc0:	mvn.w	sl, #9
    2cc4:	strb.w	sl, [r5, #691]	; 0x2b3
    2cc8:	mov.w	sl, #91	; 0x5b
    2ccc:	strb.w	sl, [r5, #664]	; 0x298
      _b = b;
    2cd0:	mvn.w	sl, #14
    2cd4:	strb.w	sl, [r5, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cd8:	mvn.w	sl, #103	; 0x67
    2cdc:	strb.w	sl, [r5, #675]	; 0x2a3
      _s = s;
    2ce0:	mvn.w	sl, #84	; 0x54
    2ce4:	strb.w	sl, [r5, #682]	; 0x2aa
      _b = b;
    2ce8:	mvn.w	sl, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cec:	strb.w	r0, [r5, #699]	; 0x2bb
      _s = s;
      _b = b;
    2cf0:	strb.w	sl, [r5, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cf4:	mvn.w	sl, #118	; 0x76
    2cf8:	strb.w	r0, [r5, #705]	; 0x2c1
    2cfc:	strb.w	sl, [r5, #693]	; 0x2b5
      _s = s;
    2d00:	mvn.w	sl, #62	; 0x3e
      _b = b;
    2d04:	strb.w	ip, [r5, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d08:	strb.w	sl, [r5, #694]	; 0x2b6
      _b = b;
    2d0c:	mvn.w	sl, #57	; 0x39
    2d10:	strb.w	r0, [r5, #722]	; 0x2d2
    2d14:	strb.w	sl, [r5, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d18:	mvn.w	sl, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d1c:	strb.w	fp, [r5, #696]	; 0x2b8
      _s = s;
    2d20:	strb.w	sl, [r5, #697]	; 0x2b9
      _b = b;
    2d24:	mvn.w	sl, #43	; 0x2b
    2d28:	strb.w	sl, [r5, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d2c:	mov.w	sl, #123	; 0x7b
    2d30:	strb.w	sl, [r5, #700]	; 0x2bc
      _b = b;
    2d34:	mvn.w	sl, #28
    2d38:	strb.w	sl, [r5, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d3c:	mvn.w	sl, #105	; 0x69
    2d40:	strb.w	sl, [r5, #702]	; 0x2be
      _s = s;
    2d44:	mov.w	sl, #85	; 0x55
    2d48:	strb.w	sl, [r5, #703]	; 0x2bf
      _b = b;
    2d4c:	mvn.w	sl, #17
    2d50:	strb.w	sl, [r5, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d54:	mvn.w	sl, #105	; 0x69
    2d58:	strb.w	sl, [r5, #708]	; 0x2c4
      _s = s;
    2d5c:	mvn.w	sl, #41	; 0x29
    2d60:	strb.w	sl, [r5, #709]	; 0x2c5
      _b = b;
    2d64:	mvn.w	sl, #59	; 0x3b
    2d68:	strb.w	sl, [r5, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d6c:	mvn.w	sl, #64	; 0x40
    2d70:	strb.w	sl, [r5, #711]	; 0x2c7
      _s = s;
    2d74:	mov.w	sl, #97	; 0x61
    2d78:	strb.w	sl, [r5, #712]	; 0x2c8
      _b = b;
    2d7c:	mov.w	sl, #21
    2d80:	strb.w	sl, [r5, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d84:	mvn.w	sl, #43	; 0x2b
    2d88:	strb.w	sl, [r5, #714]	; 0x2ca
      _s = s;
    2d8c:	mov.w	sl, #90	; 0x5a
    2d90:	strb.w	sl, [r5, #715]	; 0x2cb
      _b = b;
    2d94:	mov.w	sl, #17
    2d98:	strb.w	sl, [r5, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d9c:	mvn.w	sl, #50	; 0x32
    2da0:	strb.w	sl, [r5, #717]	; 0x2cd
      _s = s;
    2da4:	mov.w	sl, #76	; 0x4c
    2da8:	strb.w	sl, [r5, #718]	; 0x2ce
      _b = b;
    2dac:	mov.w	sl, #20
    2db0:	strb.w	sl, [r5, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2db4:	mov.w	sl, #113	; 0x71
    2db8:	strb.w	sl, [r5, #720]	; 0x2d0
      _s = s;
    2dbc:	mov.w	sl, #69	; 0x45
    2dc0:	strb.w	sl, [r5, #721]	; 0x2d1
    2dc4:	mov.w	sl, #97	; 0x61
    2dc8:	strb.w	sl, [r5, #724]	; 0x2d4
    2dcc:	mvn.w	sl, #126	; 0x7e
    2dd0:	strb.w	sl, [r5, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dd4:	strb.w	sl, [r5, #723]	; 0x2d3
    2dd8:	mvn.w	sl, #122	; 0x7a
    2ddc:	strb.w	r1, [r5, #756]	; 0x2f4
    2de0:	strb.w	sl, [r5, #726]	; 0x2d6
      _s = s;
    2de4:	mov.w	sl, #90	; 0x5a
      _b = b;
    2de8:	strb.w	r8, [r5, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2dec:	strb.w	sl, [r5, #727]	; 0x2d7
      _b = b;
    2df0:	mvn.w	sl, #11
    2df4:	strb.w	sl, [r5, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2df8:	mvn.w	sl, #111	; 0x6f
    2dfc:	strb.w	sl, [r5, #729]	; 0x2d9
      _s = s;
    2e00:	mov.w	sl, #46	; 0x2e
    2e04:	strb.w	sl, [r5, #730]	; 0x2da
      _b = b;
    2e08:	mvn.w	sl, #5
    2e0c:	strb.w	sl, [r5, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e10:	mvn.w	sl, #107	; 0x6b
    2e14:	strb.w	sl, [r5, #732]	; 0x2dc
      _s = s;
      _b = b;
    2e18:	mvn.w	sl, #4
    2e1c:	strb.w	sl, [r5, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e20:	mvn.w	sl, #91	; 0x5b
    2e24:	strb.w	sl, [r5, #735]	; 0x2df
      _s = s;
    2e28:	mov.w	sl, #85	; 0x55
    2e2c:	strb.w	sl, [r5, #736]	; 0x2e0
      _b = b;
    2e30:	mvn.w	sl, #4
    2e34:	strb.w	sl, [r5, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e38:	mvn.w	sl, #79	; 0x4f
    2e3c:	strb.w	sl, [r5, #738]	; 0x2e2
      _s = s;
    2e40:	mov.w	sl, #121	; 0x79
    2e44:	strb.w	sl, [r5, #739]	; 0x2e3
      _b = b;
    2e48:	mvn.w	sl, #5
    2e4c:	strb.w	sl, [r5, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e50:	mvn.w	sl, #69	; 0x45
    2e54:	strb.w	sl, [r5, #741]	; 0x2e5
      _s = s;
    2e58:	mov.w	sl, #103	; 0x67
    2e5c:	strb.w	sl, [r5, #742]	; 0x2e6
      _b = b;
    2e60:	mvn.w	sl, #6
    2e64:	strb.w	sl, [r5, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e68:	mvn.w	sl, #71	; 0x47
    2e6c:	strb.w	sl, [r5, #744]	; 0x2e8
      _s = s;
    2e70:	mov.w	sl, #69	; 0x45
    2e74:	strb.w	sl, [r5, #745]	; 0x2e9
      _b = b;
    2e78:	mvn.w	sl, #9
    2e7c:	strb.w	sl, [r5, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e80:	mvn.w	sl, #68	; 0x44
    2e84:	strb.w	sl, [r5, #747]	; 0x2eb
      _s = s;
    2e88:	mov.w	sl, #59	; 0x3b
    2e8c:	strb.w	sl, [r5, #748]	; 0x2ec
      _b = b;
    2e90:	mvn.w	sl, #10
    2e94:	strb.w	sl, [r5, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e98:	mvn.w	sl, #105	; 0x69
    2e9c:	strb.w	sl, [r5, #751]	; 0x2ef
      _b = b;
    2ea0:	mvn.w	sl, #17
    2ea4:	strb.w	sl, [r5, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ea8:	mvn.w	sl, #109	; 0x6d
    2eac:	strb.w	sl, [r5, #753]	; 0x2f1
      _s = s;
      _b = b;
    2eb0:	mvn.w	sl, #54	; 0x36
    2eb4:	strb.w	sl, [r5, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2eb8:	mvn.w	sl, #114	; 0x72
    2ebc:	strb.w	sl, [r5, #757]	; 0x2f5
    2ec0:	mov.w	sl, #104	; 0x68
    2ec4:	strb.w	sl, [r5, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ec8:	mvn.w	sl, #87	; 0x57
    2ecc:	strb.w	sl, [r5, #750]	; 0x2ee
      _s = s;
    2ed0:	mvn.w	sl, #42	; 0x2a
    2ed4:	strb.w	sl, [r5, #754]	; 0x2f2
      _b = b;
    2ed8:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2edc:	strb.w	r7, [r5, #765]	; 0x2fd
      _s = s;
      _b = b;
    2ee0:	strb.w	sl, [r5, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ee4:	mvn.w	sl, #120	; 0x78
    2ee8:	strb.w	r0, [r5, #771]	; 0x303
    2eec:	strb.w	sl, [r5, #759]	; 0x2f7
      _s = s;
    2ef0:	mvn.w	sl, #104	; 0x68
    2ef4:	strb.w	r7, [r5, #778]	; 0x30a
    2ef8:	strb.w	sl, [r5, #760]	; 0x2f8
      _b = b;
    2efc:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f00:	strb.w	lr, [r5, #781]	; 0x30d
      _b = b;
    2f04:	strb.w	sl, [r5, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f08:	mvn.w	sl, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f0c:	strb.w	r9, [r5, #762]	; 0x2fa
      _s = s;
    2f10:	strb.w	sl, [r5, #763]	; 0x2fb
      _b = b;
    2f14:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f18:	strb.w	r8, [r5, #768]	; 0x300
      _s = s;
      _b = b;
    2f1c:	strb.w	sl, [r5, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f20:	mvn.w	sl, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f24:	strb.w	r9, [r5, #777]	; 0x309
      _s = s;
    2f28:	strb.w	sl, [r5, #766]	; 0x2fe
    2f2c:	mvn.w	sl, #80	; 0x50
    2f30:	strb.w	sl, [r5, #769]	; 0x301
      _b = b;
    2f34:	mvn.w	sl, #52	; 0x34
    2f38:	strb.w	sl, [r5, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f3c:	mov.w	sl, #91	; 0x5b
    2f40:	strb.w	sl, [r5, #772]	; 0x304
      _b = b;
    2f44:	mvn.w	sl, #35	; 0x23
    2f48:	strb.w	sl, [r5, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f4c:	mov.w	sl, #99	; 0x63
    2f50:	strb.w	sl, [r5, #775]	; 0x307
      _b = b;
    2f54:	mvn.w	sl, #19
    2f58:	strb.w	sl, [r5, #776]	; 0x308
    2f5c:	mvn.w	sl, #17
    2f60:	strb.w	sl, [r5, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f64:	mvn.w	sl, #103	; 0x67
    2f68:	strb.w	sl, [r5, #780]	; 0x30c
      _s = s;
      _b = b;
    2f6c:	mvn.w	sl, #18
    2f70:	strb.w	sl, [r5, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f74:	mvn.w	sl, #107	; 0x6b
    2f78:	strb.w	sl, [r5, #783]	; 0x30f
      _s = s;
    2f7c:	mvn.w	sl, #15
    2f80:	strb.w	sl, [r5, #784]	; 0x310
      _b = b;
    2f84:	mvn.w	sl, #93	; 0x5d
    2f88:	strb.w	sl, [r5, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f8c:	mvn.w	sl, #107	; 0x6b
    2f90:	strb.w	sl, [r5, #786]	; 0x312
      _s = s;
    2f94:	strb.w	sl, [r5, #787]	; 0x313
      _b = b;
    2f98:	mov.w	sl, #31
    2f9c:	strb.w	sl, [r5, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fa0:	mvn.w	sl, #122	; 0x7a
    2fa4:	strb.w	sl, [r5, #789]	; 0x315
      _s = s;
    2fa8:	mvn.w	sl, #107	; 0x6b
    2fac:	strb.w	sl, [r5, #790]	; 0x316
      _b = b;
    2fb0:	mvn.w	sl, #75	; 0x4b
    2fb4:	strb.w	sl, [r5, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fb8:	mvn.w	sl, #97	; 0x61
    2fbc:	strb.w	sl, [r5, #774]	; 0x306
      _s = s;
      _b = b;
    2fc0:	mov.w	sl, #103	; 0x67
    2fc4:	strb.w	lr, [r5, #806]	; 0x326
    2fc8:	strb.w	sl, [r5, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fcc:	mov.w	sl, #121	; 0x79
      _s = s;
      _b = b;
    2fd0:	strb.w	lr, [r5, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fd4:	strb.w	sl, [r5, #792]	; 0x318
      _s = s;
    2fd8:	mov.w	sl, #119	; 0x77
    2fdc:	strb.w	fp, [r5, #808]	; 0x328
    2fe0:	strb.w	sl, [r5, #793]	; 0x319
      _b = b;
    2fe4:	mvn.w	sl, #56	; 0x38
    2fe8:	strb.w	sl, [r5, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fec:	mvn.w	sl, #119	; 0x77
    2ff0:	strb.w	sl, [r5, #795]	; 0x31b
      _s = s;
    2ff4:	mvn.w	sl, #50	; 0x32
    2ff8:	strb.w	sl, [r5, #796]	; 0x31c
      _b = b;
    2ffc:	mvn.w	sl, #11
    3000:	strb.w	sl, [r5, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3004:	mvn.w	sl, #100	; 0x64
    3008:	strb.w	sl, [r5, #798]	; 0x31e
      _s = s;
    300c:	mov.w	sl, #45	; 0x2d
    3010:	strb.w	sl, [r5, #799]	; 0x31f
      _b = b;
    3014:	mvn.w	sl, #5
    3018:	strb.w	sl, [r5, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    301c:	mvn.w	sl, #95	; 0x5f
    3020:	strb.w	sl, [r5, #801]	; 0x321
      _s = s;
    3024:	mov.w	sl, #79	; 0x4f
    3028:	strb.w	sl, [r5, #802]	; 0x322
      _b = b;
    302c:	mvn.w	sl, #8
    3030:	strb.w	sl, [r5, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3034:	mvn.w	sl, #107	; 0x6b
    3038:	strb.w	sl, [r5, #804]	; 0x324
      _s = s;
    303c:	mov.w	sl, #124	; 0x7c
    3040:	strb.w	sl, [r5, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3044:	mvn.w	sl, #90	; 0x5a
    3048:	strb.w	sl, [r5, #807]	; 0x327
      _s = s;
      _b = b;
    304c:	mvn.w	sl, #7
    3050:	strb.w	sl, [r5, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3054:	mvn.w	sl, #74	; 0x4a
    3058:	strb.w	sl, [r5, #810]	; 0x32a
    305c:	mvn.w	sl, #62	; 0x3e
    3060:	strb.w	sl, [r5, #813]	; 0x32d
      _s = s;
    3064:	mov.w	sl, #88	; 0x58
    3068:	strb.w	sl, [r5, #814]	; 0x32e
      _b = b;
    306c:	mvn.w	sl, #5
    3070:	strb.w	sl, [r5, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3074:	mvn.w	sl, #59	; 0x3b
    3078:	strb.w	sl, [r5, #816]	; 0x330
      _s = s;
      _b = b;
    307c:	mvn.w	sl, #6
    3080:	strb.w	sl, [r5, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3084:	mvn.w	sl, #57	; 0x39
    3088:	strb.w	sl, [r5, #819]	; 0x333
      _s = s;
    308c:	mov.w	sl, #58	; 0x3a
    3090:	strb.w	sl, [r5, #820]	; 0x334
      _b = b;
    3094:	mvn.w	sl, #9
    3098:	strb.w	sl, [r5, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    309c:	mvn.w	sl, #73	; 0x49
    30a0:	strb.w	sl, [r5, #822]	; 0x336
      _s = s;
    30a4:	mov.w	sl, #74	; 0x4a
    30a8:	strb.w	sl, [r5, #823]	; 0x337
    30ac:	mov.w	sl, #68	; 0x44
    30b0:	strb.w	sl, [r5, #811]	; 0x32b
    30b4:	mov.w	sl, #75	; 0x4b
    30b8:	strb.w	sl, [r5, #817]	; 0x331
      _b = b;
    30bc:	mvn.w	sl, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30c0:	strb.w	r6, [r5, #841]	; 0x349
      _b = b;
    30c4:	strb.w	sl, [r5, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30c8:	mvn.w	sl, #95	; 0x5f
      _s = s;
    30cc:	strb.w	ip, [r5, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d0:	strb.w	sl, [r5, #825]	; 0x339
      _s = s;
    30d4:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d8:	strb.w	r0, [r5, #855]	; 0x357
      _s = s;
    30dc:	strb.w	sl, [r5, #826]	; 0x33a
      _b = b;
    30e0:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30e4:	strb.w	fp, [r5, #831]	; 0x33f
      _s = s;
      _b = b;
    30e8:	strb.w	sl, [r5, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30ec:	mvn.w	sl, #102	; 0x66
    30f0:	strb.w	r9, [r5, #840]	; 0x348
    30f4:	strb.w	sl, [r5, #828]	; 0x33c
      _s = s;
    30f8:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30fc:	strb.w	fp, [r5, #843]	; 0x34b
      _s = s;
    3100:	strb.w	sl, [r5, #829]	; 0x33d
      _b = b;
    3104:	mvn.w	sl, #58	; 0x3a
    3108:	strb.w	sl, [r5, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    310c:	mvn.w	sl, #26
    3110:	strb.w	sl, [r5, #832]	; 0x340
      _b = b;
    3114:	mvn.w	sl, #48	; 0x30
    3118:	strb.w	sl, [r5, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    311c:	mvn.w	sl, #118	; 0x76
    3120:	strb.w	sl, [r5, #834]	; 0x342
      _s = s;
    3124:	mvn.w	sl, #51	; 0x33
    3128:	strb.w	sl, [r5, #835]	; 0x343
      _b = b;
    312c:	mvn.w	sl, #47	; 0x2f
    3130:	strb.w	sl, [r5, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3134:	mvn.w	sl, #114	; 0x72
    3138:	strb.w	sl, [r5, #837]	; 0x345
      _s = s;
    313c:	mvn.w	sl, #68	; 0x44
    3140:	strb.w	sl, [r5, #838]	; 0x346
      _b = b;
    3144:	mvn.w	sl, #66	; 0x42
    3148:	strb.w	sl, [r5, #839]	; 0x347
    314c:	mvn.w	sl, #36	; 0x24
    3150:	strb.w	sl, [r5, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3154:	mov.w	sl, #115	; 0x73
    3158:	strb.w	sl, [r5, #844]	; 0x34c
      _b = b;
    315c:	mvn.w	sl, #24
    3160:	strb.w	sl, [r5, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3164:	mvn.w	sl, #103	; 0x67
    3168:	strb.w	sl, [r5, #846]	; 0x34e
      _s = s;
    316c:	mov.w	sl, #126	; 0x7e
    3170:	strb.w	sl, [r5, #847]	; 0x34f
      _b = b;
    3174:	mvn.w	sl, #22
    3178:	strb.w	sl, [r5, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    317c:	mvn.w	sl, #110	; 0x6e
    3180:	strb.w	sl, [r5, #849]	; 0x351
      _s = s;
    3184:	mvn.w	sl, #37	; 0x25
    3188:	strb.w	sl, [r5, #850]	; 0x352
      _b = b;
    318c:	mvn.w	sl, #26
    3190:	strb.w	sl, [r5, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3194:	mvn.w	sl, #107	; 0x6b
    3198:	strb.w	sl, [r5, #852]	; 0x354
      _s = s;
      _b = b;
    319c:	mvn.w	sl, #16
    31a0:	strb.w	sl, [r5, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31a4:	mov.w	sl, #100	; 0x64
    31a8:	strb.w	sl, [r5, #856]	; 0x358
      _b = b;
    31ac:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31b0:	strb.w	r0, [r5, #858]	; 0x35a
      _s = s;
      _b = b;
    31b4:	strb.w	sl, [r5, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31b8:	mvn.w	sl, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31bc:	strb.w	r7, [r5, #861]	; 0x35d
      _s = s;
    31c0:	strb.w	sl, [r5, #859]	; 0x35b
      _b = b;
    31c4:	mov.w	sl, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31c8:	strb.w	lr, [r5, #862]	; 0x35e
      _b = b;
    31cc:	strb.w	sl, [r5, #860]	; 0x35c
    31d0:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31d4:	strb.w	r1, [r5, #864]	; 0x360
      _s = s;
      _b = b;
    31d8:	strb.w	sl, [r5, #863]	; 0x35f
    31dc:	mvn.w	sl, #9
    31e0:	strb.w	sl, [r5, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e4:	mvn.w	sl, #98	; 0x62
    31e8:	strb.w	sl, [r5, #867]	; 0x363
      _s = s;
    31ec:	mov.w	sl, #98	; 0x62
    31f0:	strb.w	sl, [r5, #868]	; 0x364
      _b = b;
    31f4:	mvn.w	sl, #9
    31f8:	strb.w	sl, [r5, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31fc:	mvn.w	sl, #82	; 0x52
    3200:	strb.w	sl, [r5, #870]	; 0x366
      _s = s;
    3204:	mov.w	sl, #43	; 0x2b
    3208:	strb.w	sl, [r5, #871]	; 0x367
      _b = b;
    320c:	mvn.w	sl, #6
    3210:	strb.w	sl, [r5, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3214:	mvn.w	sl, #91	; 0x5b
    3218:	strb.w	sl, [r5, #873]	; 0x369
      _s = s;
    321c:	mov.w	sl, #115	; 0x73
    3220:	strb.w	sl, [r5, #874]	; 0x36a
      _b = b;
    3224:	mvn.w	sl, #18
    3228:	strb.w	sl, [r5, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    322c:	mvn.w	sl, #90	; 0x5a
    3230:	strb.w	sl, [r5, #876]	; 0x36c
      _s = s;
    3234:	mov.w	sl, #116	; 0x74
    3238:	strb.w	sl, [r5, #877]	; 0x36d
      _b = b;
    323c:	mvn.w	sl, #13
    3240:	strb.w	sl, [r5, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3244:	mvn.w	sl, #89	; 0x59
    3248:	strb.w	sl, [r5, #879]	; 0x36f
      _s = s;
    324c:	mvn.w	sl, #106	; 0x6a
    3250:	strb.w	sl, [r5, #880]	; 0x370
      _b = b;
    3254:	mvn.w	sl, #13
    3258:	strb.w	sl, [r5, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    325c:	mvn.w	sl, #78	; 0x4e
    3260:	strb.w	sl, [r5, #882]	; 0x372
      _s = s;
    3264:	mov.w	sl, #113	; 0x71
    3268:	strb.w	sl, [r5, #883]	; 0x373
      _b = b;
    326c:	mvn.w	sl, #10
    3270:	strb.w	sl, [r5, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3274:	mvn.w	sl, #68	; 0x44
    3278:	strb.w	sl, [r5, #885]	; 0x375
      _s = s;
    327c:	mov.w	sl, #99	; 0x63
    3280:	strb.w	sl, [r5, #886]	; 0x376
      _b = b;
    3284:	mvn.w	sl, #11
    3288:	strb.w	sl, [r5, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    328c:	mvn.w	sl, #61	; 0x3d
    3290:	strb.w	sl, [r5, #888]	; 0x378
      _s = s;
    3294:	mov.w	sl, #79	; 0x4f
    3298:	strb.w	sl, [r5, #889]	; 0x379
    329c:	mvn.w	sl, #127	; 0x7f
    32a0:	strb.w	sl, [r5, #865]	; 0x361
      _b = b;
    32a4:	mvn.w	sl, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32a8:	strb.w	r6, [r5, #909]	; 0x38d
      _s = s;
      _b = b;
    32ac:	strb.w	sl, [r5, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b0:	mvn.w	sl, #63	; 0x3f
      _s = s;
    32b4:	strb.w	fp, [r5, #907]	; 0x38b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b8:	strb.w	sl, [r5, #891]	; 0x37b
      _s = s;
    32bc:	mov.w	sl, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32c0:	strb.w	r8, [r5, #912]	; 0x390
      _s = s;
    32c4:	strb.w	sl, [r5, #892]	; 0x37c
      _b = b;
    32c8:	mvn.w	sl, #15
    32cc:	strb.w	sl, [r5, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32d0:	mvn.w	sl, #77	; 0x4d
    32d4:	strb.w	sl, [r5, #894]	; 0x37e
      _s = s;
    32d8:	mvn.w	sl, #122	; 0x7a
    32dc:	strb.w	sl, [r5, #895]	; 0x37f
      _b = b;
    32e0:	mvn.w	sl, #16
    32e4:	strb.w	sl, [r5, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32e8:	mvn.w	sl, #97	; 0x61
    32ec:	strb.w	sl, [r5, #897]	; 0x381
      _s = s;
    32f0:	mvn.w	sl, #38	; 0x26
    32f4:	strb.w	sl, [r5, #898]	; 0x382
      _b = b;
    32f8:	mvn.w	sl, #23
    32fc:	strb.w	sl, [r5, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3300:	mvn.w	sl, #99	; 0x63
    3304:	strb.w	sl, [r5, #900]	; 0x384
      _s = s;
    3308:	mvn.w	sl, #6
    330c:	strb.w	sl, [r5, #901]	; 0x385
      _b = b;
    3310:	mvn.w	sl, #71	; 0x47
    3314:	strb.w	sl, [r5, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3318:	mvn.w	sl, #111	; 0x6f
    331c:	strb.w	sl, [r5, #903]	; 0x387
      _s = s;
    3320:	mvn.w	sl, #6
    3324:	strb.w	sl, [r5, #904]	; 0x388
      _b = b;
    3328:	mvn.w	sl, #63	; 0x3f
    332c:	strb.w	sl, [r5, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3330:	mvn.w	sl, #118	; 0x76
    3334:	strb.w	sl, [r5, #906]	; 0x38a
      _s = s;
      _b = b;
    3338:	mvn.w	sl, #75	; 0x4b
    333c:	strb.w	sl, [r5, #908]	; 0x38c
    3340:	mvn.w	sl, #32
    3344:	strb.w	sl, [r5, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3348:	mov.w	sl, #105	; 0x69
    334c:	strb.w	sl, [r5, #913]	; 0x391
      _b = b;
    3350:	mvn.w	sl, #37	; 0x25
    3354:	strb.w	sl, [r5, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3358:	mvn.w	sl, #104	; 0x68
    335c:	strb.w	sl, [r5, #915]	; 0x393
      _s = s;
    3360:	mov.w	sl, #93	; 0x5d
    3364:	strb.w	sl, [r5, #916]	; 0x394
      _b = b;
    3368:	mvn.w	sl, #27
    336c:	strb.w	sl, [r5, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3370:	mvn.w	sl, #104	; 0x68
    3374:	strb.w	sl, [r5, #918]	; 0x396
      _s = s;
    3378:	mvn.w	sl, #61	; 0x3d
    337c:	strb.w	sl, [r5, #919]	; 0x397
      _b = b;
    3380:	mvn.w	sl, #29
    3384:	strb.w	sl, [r5, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3388:	mvn.w	sl, #102	; 0x66
    338c:	strb.w	sl, [r5, #921]	; 0x399
      _s = s;
    3390:	mvn.w	sl, #39	; 0x27
    3394:	strb.w	sl, [r5, #922]	; 0x39a
    3398:	mov.w	sl, #108	; 0x6c
    339c:	strb.w	sl, [r5, #910]	; 0x38e
      _b = b;
    33a0:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33a4:	strb.w	r7, [r5, #927]	; 0x39f
      _s = s;
      _b = b;
    33a8:	strb.w	sl, [r5, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33ac:	mvn.w	sl, #104	; 0x68
    33b0:	strb.w	r0, [r5, #933]	; 0x3a5
    33b4:	strb.w	sl, [r5, #924]	; 0x39c
      _s = s;
    33b8:	mov.w	sl, #124	; 0x7c
      _b = b;
    33bc:	strb.w	ip, [r5, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33c0:	strb.w	sl, [r5, #925]	; 0x39d
      _b = b;
    33c4:	mvn.w	sl, #15
    33c8:	strb.w	ip, [r5, #950]	; 0x3b6
    33cc:	strb.w	sl, [r5, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33d0:	mov.w	sl, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33d4:	strb.w	fp, [r5, #930]	; 0x3a2
      _s = s;
    33d8:	strb.w	sl, [r5, #928]	; 0x3a0
      _b = b;
    33dc:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e0:	strb.w	r9, [r5, #945]	; 0x3b1
      _s = s;
      _b = b;
    33e4:	strb.w	sl, [r5, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33e8:	mov.w	sl, #58	; 0x3a
    33ec:	strb.w	sl, [r5, #931]	; 0x3a3
      _b = b;
    33f0:	mvn.w	sl, #82	; 0x52
    33f4:	strb.w	sl, [r5, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33f8:	mvn.w	sl, #5
    33fc:	strb.w	sl, [r5, #934]	; 0x3a6
      _b = b;
    3400:	mvn.w	sl, #66	; 0x42
    3404:	strb.w	sl, [r5, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3408:	mvn.w	sl, #122	; 0x7a
    340c:	strb.w	sl, [r5, #936]	; 0x3a8
      _s = s;
    3410:	mov.w	sl, #52	; 0x34
    3414:	strb.w	sl, [r5, #937]	; 0x3a9
      _b = b;
    3418:	mvn.w	sl, #4
    341c:	strb.w	sl, [r5, #938]	; 0x3aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3420:	mvn.w	sl, #97	; 0x61
    3424:	strb.w	sl, [r5, #939]	; 0x3ab
      _s = s;
    3428:	mov.w	sl, #99	; 0x63
    342c:	strb.w	sl, [r5, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3430:	mvn.w	sl, #114	; 0x72
    3434:	strb.w	sl, [r5, #942]	; 0x3ae
      _s = s;
    3438:	mvn.w	sl, #81	; 0x51
    343c:	strb.w	sl, [r5, #943]	; 0x3af
      _b = b;
    3440:	mvn.w	sl, #17
    3444:	strb.w	sl, [r5, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3448:	mvn.w	sl, #77	; 0x4d
    344c:	strb.w	sl, [r5, #946]	; 0x3b2
      _b = b;
    3450:	mvn.w	sl, #7
    3454:	strb.w	sl, [r5, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3458:	mvn.w	sl, #110	; 0x6e
    345c:	strb.w	sl, [r5, #948]	; 0x3b4
      _s = s;
    3460:	mvn.w	sl, #80	; 0x50
    3464:	strb.w	sl, [r5, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3468:	mvn.w	sl, #106	; 0x6a
    346c:	strb.w	sl, [r5, #951]	; 0x3b7
      _s = s;
    3470:	mvn.w	sl, #109	; 0x6d
    3474:	strb.w	sl, [r5, #952]	; 0x3b8
      _b = b;
    3478:	mvn.w	sl, #10
    347c:	strb.w	sl, [r5, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3480:	mvn.w	sl, #85	; 0x55
    3484:	strb.w	sl, [r5, #954]	; 0x3ba
      _s = s;
    3488:	mvn.w	sl, #92	; 0x5c
    348c:	strb.w	sl, [r5, #955]	; 0x3bb
      _b = b;
    3490:	mvn.w	sl, #26
    3494:	strb.w	ip, [r5, #959]	; 0x3bf
    3498:	strb.w	sl, [r5, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    349c:	mvn.w	sl, #73	; 0x49
    34a0:	strb.w	r2, [r5, #969]	; 0x3c9
    34a4:	strb.w	sl, [r5, #957]	; 0x3bd
      _s = s;
    34a8:	mvn.w	sl, #57	; 0x39
      _b = b;
    34ac:	strb.w	r9, [r5, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34b0:	strb.w	sl, [r5, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34b4:	mvn.w	sl, #55	; 0x37
    34b8:	strb.w	sl, [r5, #960]	; 0x3c0
      _s = s;
    34bc:	mov.w	sl, #114	; 0x72
    34c0:	strb.w	sl, [r5, #961]	; 0x3c1
      _b = b;
    34c4:	mvn.w	sl, #10
    34c8:	strb.w	sl, [r5, #962]	; 0x3c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34cc:	mvn.w	sl, #54	; 0x36
    34d0:	strb.w	sl, [r5, #963]	; 0x3c3
      _s = s;
    34d4:	mov.w	sl, #104	; 0x68
    34d8:	strb.w	sl, [r5, #964]	; 0x3c4
      _b = b;
    34dc:	mvn.w	sl, #33	; 0x21
    34e0:	strb.w	sl, [r5, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34e4:	mvn.w	sl, #75	; 0x4b
    34e8:	strb.w	sl, [r5, #966]	; 0x3c6
      _s = s;
    34ec:	mvn.w	sl, #95	; 0x5f
    34f0:	strb.w	sl, [r5, #967]	; 0x3c7
      _b = b;
    34f4:	mvn.w	sl, #50	; 0x32
    34f8:	strb.w	sl, [r5, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34fc:	mov.w	sl, #97	; 0x61
    3500:	strb.w	sl, [r5, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3504:	mvn.w	sl, #97	; 0x61
    3508:	strb.w	sl, [r5, #972]	; 0x3cc
      _s = s;
    350c:	mvn.w	sl, #70	; 0x46
    3510:	strb.w	sl, [r5, #973]	; 0x3cd
      _b = b;
    3514:	mvn.w	sl, #89	; 0x59
    3518:	strb.w	sl, [r5, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    351c:	mvn.w	sl, #70	; 0x46
    3520:	strb.w	sl, [r5, #975]	; 0x3cf
      _s = s;
    3524:	mvn.w	sl, #111	; 0x6f
    3528:	strb.w	sl, [r5, #976]	; 0x3d0
      _b = b;
    352c:	mvn.w	sl, #25
    3530:	strb.w	sl, [r5, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3534:	mvn.w	sl, #86	; 0x56
    3538:	strb.w	sl, [r5, #978]	; 0x3d2
      _s = s;
    353c:	mvn.w	sl, #90	; 0x5a
    3540:	strb.w	sl, [r5, #979]	; 0x3d3
      _b = b;
    3544:	mvn.w	sl, #62	; 0x3e
    3548:	strb.w	sl, [r5, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    354c:	mvn.w	sl, #103	; 0x67
    3550:	strb.w	sl, [r5, #981]	; 0x3d5
      _s = s;
    3554:	mvn.w	sl, #127	; 0x7f
    3558:	strb.w	sl, [r5, #982]	; 0x3d6
      _b = b;
    355c:	mvn.w	sl, #59	; 0x3b
    3560:	strb.w	sl, [r5, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3564:	mvn.w	sl, #109	; 0x6d
    3568:	strb.w	sl, [r5, #984]	; 0x3d8
      _s = s;
    356c:	mvn.w	sl, #127	; 0x7f
    3570:	strb.w	sl, [r5, #985]	; 0x3d9
      _b = b;
    3574:	mvn.w	sl, #46	; 0x2e
    3578:	strb.w	sl, [r5, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    357c:	mvn.w	sl, #97	; 0x61
    3580:	strb.w	sl, [r5, #987]	; 0x3db
      _s = s;
    3584:	mvn.w	sl, #4
    3588:	strb.w	sl, [r5, #988]	; 0x3dc
      _b = b;
    358c:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3590:	strb.w	r7, [r5, #1002]	; 0x3ea
      _s = s;
      _b = b;
    3594:	strb.w	sl, [r5, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3598:	mvn.w	sl, #97	; 0x61
      _s = s;
    359c:	strb.w	fp, [r5, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a0:	strb.w	sl, [r5, #990]	; 0x3de
      _s = s;
    35a4:	mvn.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a8:	strb.w	r8, [r5, #1005]	; 0x3ed
      _s = s;
    35ac:	strb.w	sl, [r5, #991]	; 0x3df
      _b = b;
    35b0:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35b4:	strb.w	r8, [r5, #1014]	; 0x3f6
      _s = s;
      _b = b;
    35b8:	strb.w	sl, [r5, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35bc:	mvn.w	sl, #92	; 0x5c
    35c0:	strb.w	r8, [r5, #1017]	; 0x3f9
    35c4:	strb.w	sl, [r5, #993]	; 0x3e1
      _s = s;
      _b = b;
    35c8:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35cc:	strb.w	r9, [r5, #1020]	; 0x3fc
      _s = s;
      _b = b;
    35d0:	strb.w	sl, [r5, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d4:	mvn.w	sl, #75	; 0x4b
    35d8:	strb.w	sl, [r5, #996]	; 0x3e4
      _s = s;
    35dc:	mov.w	sl, #69	; 0x45
    35e0:	strb.w	sl, [r5, #997]	; 0x3e5
      _b = b;
    35e4:	mvn.w	sl, #17
    35e8:	strb.w	sl, [r5, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35ec:	mvn.w	sl, #91	; 0x5b
    35f0:	strb.w	sl, [r5, #999]	; 0x3e7
      _s = s;
    35f4:	mov.w	sl, #109	; 0x6d
    35f8:	strb.w	sl, [r5, #1000]	; 0x3e8
      _b = b;
    35fc:	mvn.w	sl, #13
    3600:	strb.w	sl, [r5, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3604:	mov.w	sl, #74	; 0x4a
    3608:	strb.w	sl, [r5, #1003]	; 0x3eb
      _b = b;
    360c:	mvn.w	sl, #18
    3610:	strb.w	sl, [r5, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3614:	mov.w	sl, #73	; 0x49
    3618:	strb.w	sl, [r5, #1006]	; 0x3ee
      _b = b;
    361c:	mvn.w	sl, #75	; 0x4b
    3620:	strb.w	sl, [r5, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3624:	mvn.w	sl, #120	; 0x78
    3628:	strb.w	sl, [r5, #1008]	; 0x3f0
      _s = s;
    362c:	mov.w	sl, #90	; 0x5a
    3630:	strb.w	sl, [r5, #1009]	; 0x3f1
      _b = b;
    3634:	mvn.w	sl, #30
    3638:	strb.w	sl, [r5, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    363c:	mvn.w	sl, #111	; 0x6f
    3640:	strb.w	sl, [r5, #1011]	; 0x3f3
      _s = s;
    3644:	mvn.w	sl, #37	; 0x25
    3648:	strb.w	sl, [r5, #1012]	; 0x3f4
      _b = b;
    364c:	mvn.w	sl, #58	; 0x3a
    3650:	strb.w	sl, [r5, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3654:	mvn.w	sl, #84	; 0x54
    3658:	strb.w	sl, [r5, #1015]	; 0x3f7
      _b = b;
    365c:	mvn.w	sl, #34	; 0x22
    3660:	strb.w	sl, [r5, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3664:	mvn.w	sl, #25
    3668:	strb.w	sl, [r5, #1018]	; 0x3fa
      _b = b;
    366c:	mvn.w	sl, #43	; 0x2b
    3670:	strb.w	sl, [r5, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3674:	mvn.w	sl, #84	; 0x54
    3678:	strb.w	sl, [r5, #1021]	; 0x3fd
      _b = b;
    367c:	mvn.w	sl, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3680:	strb.w	r7, [r5, #1023]	; 0x3ff
      _s = s;
      _b = b;
    3684:	strb.w	sl, [r5, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3688:	mvn.w	sl, #84	; 0x54
    368c:	strb.w	r2, [r5, #1051]	; 0x41b
    3690:	strb.w	sl, [r5, #1024]	; 0x400
      _b = b;
    3694:	mvn.w	sl, #13
    3698:	strb.w	sl, [r5, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    369c:	mvn.w	sl, #106	; 0x6a
    36a0:	strb.w	sl, [r5, #1026]	; 0x402
      _s = s;
    36a4:	mvn.w	sl, #99	; 0x63
    36a8:	strb.w	sl, [r5, #1027]	; 0x403
      _b = b;
    36ac:	mvn.w	sl, #30
    36b0:	strb.w	sl, [r5, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36b4:	mvn.w	sl, #85	; 0x55
    36b8:	strb.w	sl, [r5, #1029]	; 0x405
      _s = s;
    36bc:	mvn.w	sl, #101	; 0x65
    36c0:	strb.w	sl, [r5, #1030]	; 0x406
      _b = b;
    36c4:	mvn.w	sl, #21
    36c8:	strb.w	sl, [r5, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36cc:	mvn.w	sl, #82	; 0x52
    36d0:	strb.w	sl, [r5, #1032]	; 0x408
      _s = s;
    36d4:	mov.w	sl, #103	; 0x67
    36d8:	strb.w	sl, [r5, #1033]	; 0x409
      _b = b;
    36dc:	mvn.w	sl, #24
    36e0:	strb.w	sl, [r5, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36e4:	mvn.w	sl, #70	; 0x46
    36e8:	strb.w	sl, [r5, #1035]	; 0x40b
      _s = s;
    36ec:	mov.w	sl, #76	; 0x4c
    36f0:	strb.w	sl, [r5, #1036]	; 0x40c
      _b = b;
    36f4:	mvn.w	sl, #101	; 0x65
    36f8:	strb.w	sl, [r5, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36fc:	mov.w	sl, #31
    3700:	strb.w	sl, [r5, #1039]	; 0x40f
      _b = b;
    3704:	mvn.w	sl, #119	; 0x77
    3708:	strb.w	sl, [r5, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    370c:	mvn.w	sl, #104	; 0x68
    3710:	strb.w	sl, [r5, #1041]	; 0x411
      _s = s;
      _b = b;
    3714:	mov.w	sl, #111	; 0x6f
    3718:	strb.w	sl, [r5, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    371c:	mvn.w	sl, #96	; 0x60
    3720:	strb.w	sl, [r5, #1044]	; 0x414
      _s = s;
    3724:	mov.w	sl, #95	; 0x5f
    3728:	strb.w	sl, [r5, #1045]	; 0x415
      _b = b;
    372c:	mvn.w	sl, #55	; 0x37
    3730:	strb.w	sl, [r5, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3734:	mvn.w	sl, #53	; 0x35
    3738:	strb.w	sl, [r5, #1047]	; 0x417
      _s = s;
    373c:	mov.w	sl, #47	; 0x2f
    3740:	strb.w	sl, [r5, #1048]	; 0x418
      _b = b;
    3744:	mvn.w	sl, #51	; 0x33
    3748:	strb.w	sl, [r5, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    374c:	mvn.w	sl, #56	; 0x38
    3750:	strb.w	sl, [r5, #1050]	; 0x41a
      _s = s;
      _b = b;
    3754:	mvn.w	sl, #28
    3758:	strb.w	sl, [r5, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    375c:	mvn.w	sl, #73	; 0x49
    3760:	strb.w	sl, [r5, #1053]	; 0x41d
      _s = s;
    3764:	mvn.w	sl, #86	; 0x56
    3768:	strb.w	sl, [r5, #1054]	; 0x41e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    376c:	mov.w	sl, #117	; 0x75
    3770:	strb.w	sl, [r5, #1038]	; 0x40e
      _s = s;
    3774:	mov.w	sl, #107	; 0x6b
    3778:	strb.w	sl, [r5, #1042]	; 0x412
      _b = b;
    377c:	mvn.w	sl, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3780:	strb.w	r2, [r5, #1080]	; 0x438
      _s = s;
      _b = b;
    3784:	strb.w	sl, [r5, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3788:	mvn.w	sl, #92	; 0x5c
    378c:	strb.w	r1, [r5, #1083]	; 0x43b
    3790:	strb.w	sl, [r5, #1056]	; 0x420
      _s = s;
    3794:	mvn.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3798:	strb.w	r7, [r5, #1086]	; 0x43e
      _s = s;
    379c:	strb.w	sl, [r5, #1057]	; 0x421
      _b = b;
    37a0:	mvn.w	sl, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37a4:	strb.w	r9, [r5, #1087]	; 0x43f
      _b = b;
    37a8:	strb.w	sl, [r5, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37ac:	mvn.w	sl, #90	; 0x5a
    37b0:	strb.w	sl, [r5, #1059]	; 0x423
      _s = s;
    37b4:	mvn.w	sl, #32
    37b8:	strb.w	sl, [r5, #1060]	; 0x424
      _b = b;
    37bc:	mvn.w	sl, #25
    37c0:	strb.w	sl, [r5, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37c4:	mvn.w	sl, #97	; 0x61
    37c8:	strb.w	sl, [r5, #1062]	; 0x426
      _s = s;
    37cc:	mvn.w	sl, #70	; 0x46
    37d0:	strb.w	sl, [r5, #1063]	; 0x427
      _b = b;
    37d4:	mvn.w	sl, #19
    37d8:	strb.w	sl, [r5, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37dc:	mvn.w	sl, #65	; 0x41
    37e0:	strb.w	sl, [r5, #1065]	; 0x429
      _s = s;
    37e4:	mov.w	sl, #119	; 0x77
    37e8:	strb.w	sl, [r5, #1066]	; 0x42a
      _b = b;
    37ec:	mvn.w	sl, #16
    37f0:	strb.w	sl, [r5, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37f4:	mvn.w	sl, #66	; 0x42
    37f8:	strb.w	sl, [r5, #1068]	; 0x42c
      _s = s;
    37fc:	mvn.w	sl, #92	; 0x5c
    3800:	strb.w	sl, [r5, #1069]	; 0x42d
      _b = b;
    3804:	mvn.w	sl, #21
    3808:	strb.w	sl, [r5, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    380c:	mvn.w	sl, #71	; 0x47
    3810:	strb.w	sl, [r5, #1071]	; 0x42f
      _s = s;
    3814:	mvn.w	sl, #80	; 0x50
    3818:	strb.w	sl, [r5, #1072]	; 0x430
      _b = b;
    381c:	mvn.w	sl, #10
    3820:	strb.w	sl, [r5, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3824:	mvn.w	sl, #88	; 0x58
    3828:	strb.w	sl, [r5, #1074]	; 0x432
      _s = s;
    382c:	mov.w	sl, #92	; 0x5c
    3830:	strb.w	sl, [r5, #1075]	; 0x433
      _b = b;
    3834:	mvn.w	sl, #13
    3838:	strb.w	sl, [r5, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    383c:	mvn.w	sl, #119	; 0x77
    3840:	strb.w	sl, [r5, #1077]	; 0x435
      _s = s;
      _b = b;
    3844:	mvn.w	sl, #19
    3848:	strb.w	sl, [r5, #1079]	; 0x437
    384c:	mvn.w	sl, #7
    3850:	strb.w	sl, [r5, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3854:	mvn.w	sl, #109	; 0x6d
    3858:	strb.w	sl, [r5, #1084]	; 0x43c
      _b = b;
    385c:	mvn.w	sl, #15
    3860:	strb.w	sl, [r5, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3864:	mov.w	sl, #42	; 0x2a
    3868:	strb.w	sl, [r5, #1078]	; 0x436
    386c:	mov.w	sl, #89	; 0x59
    3870:	strb.w	sl, [r5, #1081]	; 0x439
      _b = b;
    3874:	mvn.w	sl, #15
    3878:	strb.w	ip, [r5, #1091]	; 0x443
    387c:	strb.w	sl, [r5, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3880:	mvn.w	sl, #107	; 0x6b
    3884:	strb.w	r7, [r5, #1092]	; 0x444
    3888:	strb.w	sl, [r5, #1089]	; 0x441
      _s = s;
    388c:	mvn.w	sl, #59	; 0x3b
      _b = b;
    3890:	strb.w	r6, [r5, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3894:	strb.w	sl, [r5, #1093]	; 0x445
      _b = b;
    3898:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    389c:	strb.w	r7, [r5, #1113]	; 0x459
      _s = s;
      _b = b;
    38a0:	strb.w	sl, [r5, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38a4:	mvn.w	sl, #118	; 0x76
      _s = s;
    38a8:	strb.w	r8, [r5, #1090]	; 0x442
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38ac:	strb.w	sl, [r5, #1095]	; 0x447
      _s = s;
    38b0:	mvn.w	sl, #65	; 0x41
    38b4:	strb.w	sl, [r5, #1096]	; 0x448
      _b = b;
    38b8:	mvn.w	sl, #19
    38bc:	strb.w	sl, [r5, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38c0:	mvn.w	sl, #109	; 0x6d
    38c4:	strb.w	sl, [r5, #1098]	; 0x44a
      _s = s;
    38c8:	mvn.w	sl, #103	; 0x67
    38cc:	strb.w	sl, [r5, #1099]	; 0x44b
      _b = b;
    38d0:	mvn.w	sl, #21
    38d4:	strb.w	sl, [r5, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38d8:	mvn.w	sl, #93	; 0x5d
    38dc:	strb.w	sl, [r5, #1101]	; 0x44d
      _s = s;
    38e0:	mvn.w	sl, #51	; 0x33
    38e4:	strb.w	sl, [r5, #1102]	; 0x44e
      _b = b;
    38e8:	mvn.w	sl, #46	; 0x2e
    38ec:	strb.w	sl, [r5, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38f0:	mvn.w	sl, #101	; 0x65
    38f4:	strb.w	sl, [r5, #1104]	; 0x450
      _s = s;
    38f8:	mov.w	sl, #79	; 0x4f
    38fc:	strb.w	sl, [r5, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3900:	mov.w	sl, #102	; 0x66
    3904:	strb.w	sl, [r5, #1107]	; 0x453
      _s = s;
    3908:	mov.w	sl, #103	; 0x67
    390c:	strb.w	sl, [r5, #1108]	; 0x454
      _b = b;
    3910:	mov.w	sl, #86	; 0x56
    3914:	strb.w	sl, [r5, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3918:	mov.w	sl, #111	; 0x6f
    391c:	strb.w	sl, [r5, #1111]	; 0x457
      _b = b;
    3920:	mov.w	sl, #117	; 0x75
    3924:	strb.w	sl, [r5, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3928:	mov.w	sl, #58	; 0x3a
    392c:	strb.w	sl, [r5, #1114]	; 0x45a
      _b = b;
    3930:	mov.w	sl, #87	; 0x57
    3934:	strb.w	sl, [r5, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3938:	mov.w	sl, #18
    393c:	strb.w	sl, [r5, #1116]	; 0x45c
      _s = s;
    3940:	mov.w	sl, #74	; 0x4a
    3944:	strb.w	sl, [r5, #1117]	; 0x45d
      _b = b;
    3948:	mvn.w	sl, #76	; 0x4c
    394c:	strb.w	sl, [r5, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3950:	mov.w	sl, #17
    3954:	strb.w	sl, [r5, #1119]	; 0x45f
      _s = s;
    3958:	mov.w	sl, #94	; 0x5e
    395c:	strb.w	sl, [r5, #1120]	; 0x460
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3960:	mov.w	sl, #80	; 0x50
    3964:	strb.w	sl, [r5, #1110]	; 0x456
      _s = s;
      _b = b;
    3968:	mvn.w	sl, #36	; 0x24
    396c:	strb.w	ip, [r5, #1142]	; 0x476
    3970:	strb.w	sl, [r5, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3974:	mvn.w	sl, #51	; 0x33
    3978:	strb.w	r0, [r5, #1149]	; 0x47d
    397c:	strb.w	sl, [r5, #1122]	; 0x462
      _s = s;
    3980:	mov.w	sl, #99	; 0x63
    3984:	strb.w	sl, [r5, #1123]	; 0x463
      _b = b;
    3988:	mvn.w	sl, #37	; 0x25
    398c:	strb.w	sl, [r5, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3990:	mvn.w	sl, #43	; 0x2b
    3994:	strb.w	sl, [r5, #1125]	; 0x465
      _s = s;
    3998:	mov.w	sl, #32
    399c:	strb.w	sl, [r5, #1126]	; 0x466
      _b = b;
    39a0:	mvn.w	sl, #25
    39a4:	strb.w	sl, [r5, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a8:	mvn.w	sl, #70	; 0x46
    39ac:	strb.w	sl, [r5, #1128]	; 0x468
      _s = s;
      _b = b;
    39b0:	mvn.w	sl, #33	; 0x21
    39b4:	strb.w	sl, [r5, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39b8:	mvn.w	sl, #96	; 0x60
    39bc:	strb.w	sl, [r5, #1131]	; 0x46b
      _s = s;
    39c0:	mvn.w	sl, #18
    39c4:	strb.w	sl, [r5, #1132]	; 0x46c
      _b = b;
    39c8:	mvn.w	sl, #24
    39cc:	strb.w	sl, [r5, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d0:	mvn.w	sl, #83	; 0x53
    39d4:	strb.w	sl, [r5, #1134]	; 0x46e
      _s = s;
    39d8:	mov.w	sl, #99	; 0x63
    39dc:	strb.w	sl, [r5, #1135]	; 0x46f
      _b = b;
    39e0:	mvn.w	sl, #15
    39e4:	strb.w	sl, [r5, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e8:	mvn.w	sl, #55	; 0x37
    39ec:	strb.w	sl, [r5, #1137]	; 0x471
      _s = s;
    39f0:	mov.w	sl, #60	; 0x3c
    39f4:	strb.w	sl, [r5, #1138]	; 0x472
      _b = b;
    39f8:	mvn.w	sl, #17
    39fc:	strb.w	sl, [r5, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a00:	mvn.w	sl, #49	; 0x31
    3a04:	strb.w	sl, [r5, #1140]	; 0x474
      _s = s;
    3a08:	mov.w	sl, #58	; 0x3a
    3a0c:	strb.w	sl, [r5, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a10:	mvn.w	sl, #62	; 0x3e
    3a14:	strb.w	sl, [r5, #1143]	; 0x477
      _s = s;
    3a18:	mvn.w	sl, #18
    3a1c:	strb.w	sl, [r5, #1144]	; 0x478
      _b = b;
    3a20:	mvn.w	sl, #12
    3a24:	strb.w	sl, [r5, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a28:	mvn.w	sl, #75	; 0x4b
    3a2c:	strb.w	sl, [r5, #1146]	; 0x47a
      _s = s;
    3a30:	mov.w	sl, #78	; 0x4e
    3a34:	strb.w	sl, [r5, #1147]	; 0x47b
      _b = b;
    3a38:	mvn.w	sl, #11
    3a3c:	strb.w	sl, [r5, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a40:	mov.w	sl, #72	; 0x48
    3a44:	strb.w	sl, [r5, #1150]	; 0x47e
      _b = b;
    3a48:	mvn.w	sl, #18
    3a4c:	strb.w	sl, [r5, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a50:	mvn.w	sl, #126	; 0x7e
    3a54:	strb.w	sl, [r5, #1152]	; 0x480
      _s = s;
    3a58:	mvn.w	sl, #84	; 0x54
    3a5c:	strb.w	sl, [r5, #1153]	; 0x481
    3a60:	mov.w	sl, #67	; 0x43
    3a64:	strb.w	sl, [r5, #1129]	; 0x469
      _b = b;
    3a68:	mvn.w	sl, #19
    3a6c:	strb.w	ip, [r5, #1163]	; 0x48b
    3a70:	strb.w	sl, [r5, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a74:	mvn.w	sl, #122	; 0x7a
      _s = s;
    3a78:	strb.w	fp, [r5, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a7c:	strb.w	sl, [r5, #1155]	; 0x483
      _s = s;
    3a80:	mov.w	sl, #100	; 0x64
    3a84:	strb.w	sl, [r5, #1156]	; 0x484
      _b = b;
    3a88:	mvn.w	sl, #22
    3a8c:	strb.w	sl, [r5, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a90:	mvn.w	sl, #111	; 0x6f
    3a94:	strb.w	sl, [r5, #1158]	; 0x486
      _s = s;
    3a98:	mov.w	sl, #125	; 0x7d
    3a9c:	strb.w	sl, [r5, #1159]	; 0x487
      _b = b;
    3aa0:	mvn.w	sl, #28
    3aa4:	strb.w	sl, [r5, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aa8:	mvn.w	sl, #108	; 0x6c
    3aac:	strb.w	sl, [r5, #1161]	; 0x489
      _s = s;
    3ab0:	mvn.w	sl, #110	; 0x6e
    3ab4:	strb.w	sl, [r5, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ab8:	mvn.w	sl, #103	; 0x67
    3abc:	strb.w	sl, [r5, #1164]	; 0x48c
      _s = s;
      _b = b;
    3ac0:	mvn.w	sl, #31
    3ac4:	strb.w	sl, [r5, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ac8:	mvn.w	sl, #118	; 0x76
    3acc:	strb.w	sl, [r5, #1167]	; 0x48f
      _s = s;
    3ad0:	mvn.w	sl, #95	; 0x5f
    3ad4:	strb.w	sl, [r5, #1168]	; 0x490
      _b = b;
    3ad8:	mvn.w	sl, #16
    3adc:	strb.w	sl, [r5, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ae0:	mvn.w	sl, #109	; 0x6d
    3ae4:	strb.w	sl, [r5, #1170]	; 0x492
      _s = s;
    3ae8:	mvn.w	sl, #75	; 0x4b
    3aec:	strb.w	sl, [r5, #1171]	; 0x493
      _b = b;
    3af0:	mvn.w	sl, #18
    3af4:	strb.w	sl, [r5, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3af8:	mvn.w	sl, #111	; 0x6f
    3afc:	strb.w	sl, [r5, #1173]	; 0x495
      _s = s;
    3b00:	mov.w	sl, #97	; 0x61
    3b04:	strb.w	sl, [r5, #1174]	; 0x496
      _b = b;
    3b08:	mvn.w	sl, #64	; 0x40
    3b0c:	strb.w	sl, [r5, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b10:	mov.w	sl, #55	; 0x37
    3b14:	strb.w	sl, [r5, #1176]	; 0x498
      _s = s;
    3b18:	mov.w	sl, #94	; 0x5e
    3b1c:	strb.w	sl, [r5, #1177]	; 0x499
      _b = b;
    3b20:	mvn.w	sl, #99	; 0x63
    3b24:	strb.w	sl, [r5, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b28:	mov.w	sl, #44	; 0x2c
    3b2c:	strb.w	sl, [r5, #1179]	; 0x49b
      _s = s;
    3b30:	mvn.w	sl, #33	; 0x21
    3b34:	strb.w	sl, [r5, #1180]	; 0x49c
      _b = b;
    3b38:	mov.w	sl, #111	; 0x6f
    3b3c:	strb.w	sl, [r5, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b40:	mov.w	sl, #85	; 0x55
    3b44:	strb.w	sl, [r5, #1182]	; 0x49e
      _s = s;
    3b48:	mvn.w	sl, #126	; 0x7e
    3b4c:	strb.w	sl, [r5, #1183]	; 0x49f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b50:	mov.w	sl, #108	; 0x6c
    3b54:	strb.w	sl, [r5, #1185]	; 0x4a1
      _s = s;
    3b58:	mvn.w	sl, #82	; 0x52
    3b5c:	strb.w	sl, [r5, #1186]	; 0x4a2
      _b = b;
    3b60:	mov.w	sl, #53	; 0x35
    3b64:	strb.w	sl, [r5, #1184]	; 0x4a0
    3b68:	mov.w	sl, #47	; 0x2f
    3b6c:	strb.w	sl, [r5, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b70:	mov.w	sl, #18
    3b74:	strb.w	sl, [r5, #1188]	; 0x4a4
      _s = s;
    3b78:	mvn.w	sl, #94	; 0x5e
    3b7c:	strb.w	sl, [r5, #1189]	; 0x4a5
      _b = b;
    3b80:	mov.w	sl, #101	; 0x65
    3b84:	strb.w	sl, [r5, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b88:	mvn.w	sl, #30
    3b8c:	strb.w	sl, [r5, #1191]	; 0x4a7
      _s = s;
    3b90:	mov.w	sl, #95	; 0x5f
    3b94:	strb.w	sl, [r5, #1192]	; 0x4a8
      _b = b;
    3b98:	mvn.w	sl, #89	; 0x59
    3b9c:	strb.w	sl, [r5, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ba0:	mvn.w	sl, #42	; 0x2a
    3ba4:	strb.w	sl, [r5, #1194]	; 0x4aa
      _s = s;
      _b = b;
    3ba8:	mvn.w	sl, #29
    3bac:	strb.w	sl, [r5, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bb0:	mvn.w	sl, #39	; 0x27
    3bb4:	strb.w	sl, [r5, #1197]	; 0x4ad
      _s = s;
    3bb8:	mov.w	sl, #33	; 0x21
    3bbc:	strb.w	sl, [r5, #1198]	; 0x4ae
      _b = b;
    3bc0:	mvn.w	sl, #21
    3bc4:	strb.w	sl, [r5, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bc8:	mvn.w	sl, #52	; 0x34
    3bcc:	strb.w	sl, [r5, #1200]	; 0x4b0
      _s = s;
    3bd0:	mov.w	sl, #41	; 0x29
    3bd4:	strb.w	sl, [r5, #1201]	; 0x4b1
      _b = b;
    3bd8:	mvn.w	sl, #26
    3bdc:	strb.w	sl, [r5, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3be0:	mvn.w	sl, #95	; 0x5f
    3be4:	strb.w	sl, [r5, #1203]	; 0x4b3
      _s = s;
    3be8:	mvn.w	sl, #75	; 0x4b
    3bec:	strb.w	sl, [r5, #1204]	; 0x4b4
      _b = b;
    3bf0:	mvn.w	sl, #22
    3bf4:	strb.w	sl, [r5, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bf8:	mvn.w	sl, #59	; 0x3b
    3bfc:	strb.w	sl, [r5, #1206]	; 0x4b6
      _s = s;
    3c00:	mov.w	sl, #111	; 0x6f
    3c04:	strb.w	sl, [r5, #1207]	; 0x4b7
      _b = b;
    3c08:	mvn.w	sl, #18
    3c0c:	strb.w	sl, [r5, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c10:	mvn.w	sl, #65	; 0x41
    3c14:	strb.w	sl, [r5, #1209]	; 0x4b9
      _s = s;
    3c18:	mov.w	sl, #48	; 0x30
    3c1c:	strb.w	sl, [r5, #1210]	; 0x4ba
      _b = b;
    3c20:	mvn.w	sl, #18
    3c24:	strb.w	sl, [r5, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c28:	mvn.w	sl, #41	; 0x29
    3c2c:	strb.w	sl, [r5, #1212]	; 0x4bc
      _s = s;
      _b = b;
    3c30:	mvn.w	sl, #17
    3c34:	strb.w	sl, [r5, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c38:	mvn.w	sl, #59	; 0x3b
    3c3c:	strb.w	sl, [r5, #1215]	; 0x4bf
      _s = s;
    3c40:	mvn.w	sl, #41	; 0x29
    3c44:	strb.w	sl, [r5, #1216]	; 0x4c0
      _b = b;
    3c48:	mvn.w	sl, #11
    3c4c:	strb.w	sl, [r5, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c50:	mvn.w	sl, #78	; 0x4e
    3c54:	strb.w	sl, [r5, #1218]	; 0x4c2
      _s = s;
    3c58:	mov.w	sl, #122	; 0x7a
    3c5c:	strb.w	sl, [r5, #1219]	; 0x4c3
    3c60:	mov.w	sl, #39	; 0x27
    3c64:	strb.w	sl, [r5, #1195]	; 0x4ab
    3c68:	strb.w	sl, [r5, #1213]	; 0x4bd
      _b = b;
    3c6c:	mvn.w	sl, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c70:	strb.w	r6, [r5, #1227]	; 0x4cb
      _s = s;
      _b = b;
    3c74:	strb.w	sl, [r5, #1220]	; 0x4c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c78:	mvn.w	sl, #109	; 0x6d
    3c7c:	strb.w	r7, [r5, #1245]	; 0x4dd
    3c80:	strb.w	sl, [r5, #1221]	; 0x4c5
      _s = s;
    3c84:	mov.w	sl, #55	; 0x37
    3c88:	strb.w	sl, [r5, #1222]	; 0x4c6
      _b = b;
    3c8c:	mvn.w	sl, #17
    3c90:	strb.w	sl, [r5, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c94:	mvn.w	sl, #126	; 0x7e
    3c98:	strb.w	sl, [r5, #1224]	; 0x4c8
      _s = s;
    3c9c:	mvn.w	sl, #95	; 0x5f
    3ca0:	strb.w	sl, [r5, #1225]	; 0x4c9
      _b = b;
    3ca4:	mvn.w	sl, #24
    3ca8:	strb.w	sl, [r5, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cac:	mov.w	sl, #105	; 0x69
    3cb0:	strb.w	sl, [r5, #1228]	; 0x4cc
      _b = b;
    3cb4:	mvn.w	sl, #11
    3cb8:	strb.w	sl, [r5, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cbc:	mvn.w	sl, #119	; 0x77
    3cc0:	strb.w	sl, [r5, #1230]	; 0x4ce
      _s = s;
    3cc4:	mov.w	sl, #99	; 0x63
    3cc8:	strb.w	sl, [r5, #1231]	; 0x4cf
      _b = b;
    3ccc:	mvn.w	sl, #11
    3cd0:	strb.w	sl, [r5, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cd4:	mvn.w	sl, #108	; 0x6c
    3cd8:	strb.w	sl, [r5, #1233]	; 0x4d1
      _s = s;
    3cdc:	mov.w	sl, #103	; 0x67
    3ce0:	strb.w	sl, [r5, #1234]	; 0x4d2
      _b = b;
    3ce4:	mvn.w	sl, #22
    3ce8:	strb.w	sl, [r5, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cec:	mvn.w	sl, #104	; 0x68
    3cf0:	strb.w	sl, [r5, #1236]	; 0x4d4
      _s = s;
    3cf4:	mov.w	sl, #79	; 0x4f
    3cf8:	strb.w	sl, [r5, #1237]	; 0x4d5
      _b = b;
    3cfc:	mvn.w	sl, #18
    3d00:	strb.w	sl, [r5, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d04:	mvn.w	sl, #110	; 0x6e
    3d08:	strb.w	sl, [r5, #1239]	; 0x4d7
      _s = s;
    3d0c:	mov.w	sl, #119	; 0x77
    3d10:	strb.w	sl, [r5, #1240]	; 0x4d8
      _b = b;
    3d14:	mvn.w	sl, #11
    3d18:	strb.w	sl, [r5, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d1c:	mvn.w	sl, #100	; 0x64
    3d20:	strb.w	sl, [r5, #1242]	; 0x4da
      _s = s;
    3d24:	mvn.w	sl, #103	; 0x67
    3d28:	strb.w	sl, [r5, #1243]	; 0x4db
      _b = b;
    3d2c:	mvn.w	sl, #18
    3d30:	strb.w	sl, [r5, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d34:	mov.w	sl, #88	; 0x58
    3d38:	strb.w	sl, [r5, #1246]	; 0x4de
      _b = b;
    3d3c:	mvn.w	sl, #80	; 0x50
    3d40:	strb.w	sl, [r5, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d44:	mov.w	sl, #47	; 0x2f
    3d48:	strb.w	sl, [r5, #1248]	; 0x4e0
      _s = s;
    3d4c:	mov.w	sl, #124	; 0x7c
    3d50:	strb.w	sl, [r5, #1249]	; 0x4e1
      _b = b;
    3d54:	mov.w	sl, #117	; 0x75
    3d58:	strb.w	sl, [r5, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d5c:	mov.w	sl, #52	; 0x34
    3d60:	strb.w	sl, [r5, #1251]	; 0x4e3
      _s = s;
    3d64:	mvn.w	sl, #84	; 0x54
    3d68:	strb.w	sl, [r5, #1252]	; 0x4e4
      _b = b;
    3d6c:	mov.w	sl, #98	; 0x62
    3d70:	strb.w	ip, [r5, #1280]	; 0x500
    3d74:	strb.w	sl, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d78:	mvn.w	sl, #48	; 0x30
    3d7c:	strb.w	sl, [r5, #1255]	; 0x4e7
      _b = b;
    3d80:	mov.w	sl, #70	; 0x46
    3d84:	strb.w	sl, [r5, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d88:	mvn.w	sl, #22
    3d8c:	strb.w	sl, [r5, #1257]	; 0x4e9
      _s = s;
      _b = b;
    3d90:	mov.w	sl, #14
    3d94:	strb.w	sl, [r5, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d98:	mov.w	sl, #18
    3d9c:	strb.w	sl, [r5, #1260]	; 0x4ec
      _s = s;
    3da0:	mvn.w	sl, #49	; 0x31
    3da4:	strb.w	sl, [r5, #1261]	; 0x4ed
      _b = b;
    3da8:	mov.w	sl, #116	; 0x74
    3dac:	strb.w	sl, [r5, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3db0:	mvn.w	sl, #34	; 0x22
    3db4:	strb.w	sl, [r5, #1263]	; 0x4ef
      _s = s;
    3db8:	mov.w	sl, #40	; 0x28
    3dbc:	strb.w	sl, [r5, #1264]	; 0x4f0
      _b = b;
    3dc0:	mvn.w	sl, #43	; 0x2b
    3dc4:	strb.w	sl, [r5, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dc8:	strb.w	sl, [r5, #1266]	; 0x4f2
      _s = s;
    3dcc:	mov.w	sl, #39	; 0x27
    3dd0:	strb.w	sl, [r5, #1267]	; 0x4f3
      _b = b;
    3dd4:	mvn.w	sl, #27
    3dd8:	strb.w	sl, [r5, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ddc:	mvn.w	sl, #39	; 0x27
    3de0:	strb.w	sl, [r5, #1269]	; 0x4f5
      _s = s;
    3de4:	mov.w	sl, #33	; 0x21
    3de8:	strb.w	sl, [r5, #1270]	; 0x4f6
      _b = b;
    3dec:	mvn.w	sl, #22
    3df0:	strb.w	sl, [r5, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3df4:	mov.w	sl, #59	; 0x3b
    3df8:	strb.w	sl, [r5, #1273]	; 0x4f9
      _b = b;
    3dfc:	mvn.w	sl, #25
    3e00:	strb.w	sl, [r5, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e04:	mvn.w	sl, #105	; 0x69
    3e08:	strb.w	sl, [r5, #1275]	; 0x4fb
      _s = s;
    3e0c:	mvn.w	sl, #101	; 0x65
    3e10:	strb.w	sl, [r5, #1276]	; 0x4fc
      _b = b;
    3e14:	mvn.w	sl, #24
    3e18:	strb.w	sl, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e1c:	mvn.w	sl, #72	; 0x48
    3e20:	strb.w	sl, [r5, #1278]	; 0x4fe
      _s = s;
    3e24:	mov.w	sl, #122	; 0x7a
    3e28:	strb.w	sl, [r5, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e2c:	mvn.w	sl, #54	; 0x36
    3e30:	strb.w	sl, [r5, #1281]	; 0x501
      _s = s;
    3e34:	mov.w	sl, #80	; 0x50
    3e38:	strb.w	sl, [r5, #1282]	; 0x502
      _b = b;
    3e3c:	mvn.w	sl, #21
    3e40:	strb.w	sl, [r5, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e44:	mvn.w	sl, #51	; 0x33
    3e48:	strb.w	sl, [r5, #1284]	; 0x504
      _s = s;
    3e4c:	mov.w	sl, #75	; 0x4b
    3e50:	strb.w	sl, [r5, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e54:	mov.w	sl, #12
    3e58:	strb.w	sl, [r5, #1254]	; 0x4e6
      _s = s;
    3e5c:	mov.w	sl, #36	; 0x24
    3e60:	strb.w	sl, [r5, #1258]	; 0x4ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e64:	mvn.w	sl, #60	; 0x3c
    3e68:	strb.w	sl, [r5, #1272]	; 0x4f8
      _s = s;
      _b = b;
    3e6c:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e70:	strb.w	r6, [r5, #1299]	; 0x513
      _s = s;
      _b = b;
    3e74:	strb.w	sl, [r5, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e78:	mvn.w	sl, #57	; 0x39
      _s = s;
    3e7c:	strb.w	r0, [r5, #1312]	; 0x520
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e80:	strb.w	sl, [r5, #1287]	; 0x507
      _s = s;
    3e84:	mvn.w	sl, #55	; 0x37
    3e88:	strb.w	sl, [r5, #1288]	; 0x508
      _b = b;
    3e8c:	mvn.w	sl, #12
    3e90:	strb.w	sl, [r5, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e94:	mvn.w	sl, #82	; 0x52
    3e98:	strb.w	sl, [r5, #1290]	; 0x50a
      _s = s;
    3e9c:	mov.w	sl, #124	; 0x7c
    3ea0:	strb.w	sl, [r5, #1291]	; 0x50b
      _b = b;
    3ea4:	mvn.w	sl, #12
    3ea8:	strb.w	sl, [r5, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eac:	mvn.w	sl, #108	; 0x6c
    3eb0:	strb.w	sl, [r5, #1293]	; 0x50d
      _s = s;
      _b = b;
    3eb4:	mvn.w	sl, #22
    3eb8:	strb.w	sl, [r5, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ebc:	mvn.w	sl, #127	; 0x7f
    3ec0:	strb.w	sl, [r5, #1296]	; 0x510
      _s = s;
    3ec4:	mov.w	sl, #105	; 0x69
    3ec8:	strb.w	sl, [r5, #1297]	; 0x511
      _b = b;
    3ecc:	mvn.w	sl, #7
    3ed0:	strb.w	sl, [r5, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ed4:	mvn.w	sl, #100	; 0x64
    3ed8:	strb.w	sl, [r5, #1300]	; 0x514
      _b = b;
    3edc:	mvn.w	sl, #21
    3ee0:	strb.w	sl, [r5, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ee4:	mvn.w	sl, #99	; 0x63
    3ee8:	strb.w	sl, [r5, #1302]	; 0x516
      _s = s;
    3eec:	mvn.w	sl, #61	; 0x3d
    3ef0:	strb.w	sl, [r5, #1303]	; 0x517
      _b = b;
    3ef4:	mvn.w	sl, #26
    3ef8:	strb.w	sl, [r5, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3efc:	mvn.w	sl, #96	; 0x60
    3f00:	strb.w	sl, [r5, #1305]	; 0x519
      _s = s;
    3f04:	mov.w	sl, #99	; 0x63
    3f08:	strb.w	sl, [r5, #1306]	; 0x51a
      _b = b;
    3f0c:	mvn.w	sl, #21
    3f10:	strb.w	sl, [r5, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f14:	mvn.w	sl, #96	; 0x60
    3f18:	strb.w	sl, [r5, #1308]	; 0x51c
      _s = s;
    3f1c:	mov.w	sl, #96	; 0x60
    3f20:	strb.w	sl, [r5, #1309]	; 0x51d
      _b = b;
    3f24:	mvn.w	sl, #23
    3f28:	strb.w	sl, [r5, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f2c:	mvn.w	sl, #90	; 0x5a
    3f30:	strb.w	sl, [r5, #1311]	; 0x51f
      _s = s;
      _b = b;
    3f34:	mvn.w	sl, #21
    3f38:	strb.w	sl, [r5, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f3c:	mvn.w	sl, #98	; 0x62
    3f40:	strb.w	sl, [r5, #1314]	; 0x522
      _s = s;
    3f44:	mvn.w	sl, #62	; 0x3e
    3f48:	strb.w	sl, [r5, #1315]	; 0x523
      _b = b;
    3f4c:	mvn.w	sl, #22
    3f50:	strb.w	sl, [r5, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f54:	mvn.w	sl, #111	; 0x6f
    3f58:	strb.w	sl, [r5, #1317]	; 0x525
      _s = s;
    3f5c:	mvn.w	sl, #96	; 0x60
    3f60:	strb.w	sl, [r5, #1318]	; 0x526
    3f64:	mov.w	sl, #56	; 0x38
    3f68:	strb.w	sl, [r5, #1294]	; 0x50e
      _b = b;
    3f6c:	mvn.w	sl, #71	; 0x47
    3f70:	strb.w	sl, [r5, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f74:	mov.w	sl, #114	; 0x72
    3f78:	strb.w	sl, [r5, #1320]	; 0x528
      _s = s;
    3f7c:	mov.w	sl, #121	; 0x79
    3f80:	strb.w	sl, [r5, #1321]	; 0x529
      _b = b;
    3f84:	mov.w	sl, #120	; 0x78
    3f88:	strb.w	sl, [r5, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f8c:	mov.w	sl, #36	; 0x24
    3f90:	strb.w	sl, [r5, #1323]	; 0x52b
      _s = s;
    3f94:	mvn.w	sl, #49	; 0x31
    3f98:	strb.w	sl, [r5, #1324]	; 0x52c
      _b = b;
    3f9c:	mov.w	sl, #73	; 0x49
    3fa0:	strb.w	sl, [r5, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa4:	mov.w	sl, #105	; 0x69
    3fa8:	strb.w	sl, [r5, #1326]	; 0x52e
      _s = s;
    3fac:	mvn.w	sl, #85	; 0x55
    3fb0:	strb.w	sl, [r5, #1327]	; 0x52f
      _b = b;
    3fb4:	mov.w	sl, #88	; 0x58
    3fb8:	strb.w	sl, [r5, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fbc:	mov.w	sl, #108	; 0x6c
    3fc0:	strb.w	sl, [r5, #1329]	; 0x531
      _s = s;
    3fc4:	mvn.w	sl, #67	; 0x43
    3fc8:	strb.w	sl, [r5, #1330]	; 0x532
      _b = b;
    3fcc:	mov.w	sl, #46	; 0x2e
    3fd0:	strb.w	sl, [r5, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fd4:	mov.w	sl, #26
    3fd8:	strb.w	sl, [r5, #1332]	; 0x534
      _s = s;
    3fdc:	mov.w	sl, #116	; 0x74
    3fe0:	strb.w	sl, [r5, #1333]	; 0x535
      _b = b;
    3fe4:	mov.w	sl, #92	; 0x5c
    3fe8:	strb.w	sl, [r5, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fec:	mvn.w	sl, #6
    3ff0:	strb.w	sl, [r5, #1335]	; 0x537
      _s = s;
    3ff4:	mov.w	sl, #53	; 0x35
    3ff8:	strb.w	sl, [r5, #1336]	; 0x538
      _b = b;
    3ffc:	mvn.w	sl, #49	; 0x31
    4000:	strb.w	sl, [r5, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4004:	mvn.w	sl, #38	; 0x26
    4008:	strb.w	sl, [r5, #1338]	; 0x53a
      _s = s;
    400c:	mov.w	sl, #37	; 0x25
    4010:	strb.w	sl, [r5, #1339]	; 0x53b
      _b = b;
    4014:	mvn.w	sl, #24
    4018:	strb.w	sl, [r5, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    401c:	mvn.w	sl, #45	; 0x2d
    4020:	strb.w	sl, [r5, #1341]	; 0x53d
      _s = s;
    4024:	mov.w	sl, #48	; 0x30
    4028:	strb.w	sl, [r5, #1342]	; 0x53e
      _b = b;
    402c:	mvn.w	sl, #25
    4030:	strb.w	sl, [r5, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4034:	mvn.w	sl, #69	; 0x45
    4038:	strb.w	sl, [r5, #1344]	; 0x540
      _s = s;
    403c:	mov.w	sl, #78	; 0x4e
    4040:	strb.w	sl, [r5, #1345]	; 0x541
      _b = b;
    4044:	mvn.w	sl, #25
    4048:	strb.w	sl, [r5, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    404c:	mvn.w	sl, #103	; 0x67
    4050:	strb.w	sl, [r5, #1347]	; 0x543
      _s = s;
    4054:	mvn.w	sl, #56	; 0x38
    4058:	strb.w	sl, [r5, #1348]	; 0x544
      _b = b;
    405c:	mvn.w	sl, #22
    4060:	strb.w	sl, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4064:	mvn.w	sl, #65	; 0x41
    4068:	strb.w	sl, [r5, #1350]	; 0x546
      _s = s;
    406c:	mvn.w	sl, #81	; 0x51
    4070:	strb.w	sl, [r5, #1351]	; 0x547
      _b = b;
    4074:	mvn.w	sl, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4078:	strb.w	r1, [r5, #1368]	; 0x558
      _s = s;
      _b = b;
    407c:	strb.w	sl, [r5, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4080:	mvn.w	sl, #57	; 0x39
    4084:	strb.w	r2, [r5, #1371]	; 0x55b
    4088:	strb.w	sl, [r5, #1353]	; 0x549
      _s = s;
    408c:	mvn.w	sl, #82	; 0x52
    4090:	strb.w	sl, [r5, #1354]	; 0x54a
      _b = b;
    4094:	mvn.w	sl, #15
    4098:	strb.w	sl, [r5, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    409c:	mvn.w	sl, #54	; 0x36
    40a0:	strb.w	sl, [r5, #1356]	; 0x54c
      _s = s;
    40a4:	mov.w	sl, #117	; 0x75
    40a8:	strb.w	sl, [r5, #1357]	; 0x54d
      _b = b;
    40ac:	mvn.w	sl, #14
    40b0:	strb.w	sl, [r5, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40b4:	mvn.w	sl, #59	; 0x3b
    40b8:	strb.w	sl, [r5, #1359]	; 0x54f
      _s = s;
    40bc:	mvn.w	sl, #64	; 0x40
    40c0:	strb.w	sl, [r5, #1360]	; 0x550
      _b = b;
    40c4:	mvn.w	sl, #11
    40c8:	strb.w	sl, [r5, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40cc:	mvn.w	sl, #81	; 0x51
    40d0:	strb.w	sl, [r5, #1362]	; 0x552
      _s = s;
    40d4:	mvn.w	sl, #121	; 0x79
    40d8:	strb.w	sl, [r5, #1363]	; 0x553
      _b = b;
    40dc:	mvn.w	sl, #11
    40e0:	strb.w	sl, [r5, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40e4:	mvn.w	sl, #110	; 0x6e
    40e8:	strb.w	sl, [r5, #1365]	; 0x555
      _s = s;
    40ec:	mov.w	sl, #46	; 0x2e
    40f0:	strb.w	sl, [r5, #1366]	; 0x556
      _b = b;
    40f4:	mvn.w	sl, #19
    40f8:	strb.w	sl, [r5, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40fc:	mvn.w	sl, #59	; 0x3b
    4100:	strb.w	sl, [r5, #1369]	; 0x559
      _b = b;
    4104:	mvn.w	sl, #12
    4108:	strb.w	sl, [r5, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    410c:	mvn.w	sl, #102	; 0x66
    4110:	strb.w	sl, [r5, #1372]	; 0x55c
      _b = b;
    4114:	mvn.w	sl, #8
    4118:	strb.w	sl, [r5, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    411c:	mvn.w	sl, #101	; 0x65
    4120:	strb.w	sl, [r5, #1374]	; 0x55e
      _s = s;
    4124:	mvn.w	sl, #90	; 0x5a
    4128:	strb.w	sl, [r5, #1375]	; 0x55f
      _b = b;
    412c:	mvn.w	sl, #19
    4130:	strb.w	sl, [r5, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4134:	mvn.w	sl, #96	; 0x60
    4138:	strb.w	sl, [r5, #1377]	; 0x561
      _s = s;
    413c:	mvn.w	sl, #110	; 0x6e
    4140:	strb.w	sl, [r5, #1378]	; 0x562
      _b = b;
    4144:	mvn.w	sl, #13
    4148:	strb.w	sl, [r5, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    414c:	mvn.w	sl, #77	; 0x4d
    4150:	strb.w	sl, [r5, #1380]	; 0x564
      _s = s;
    4154:	mvn.w	sl, #66	; 0x42
    4158:	strb.w	sl, [r5, #1381]	; 0x565
      _b = b;
    415c:	mvn.w	sl, #19
    4160:	strb.w	sl, [r5, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4164:	mvn.w	sl, #75	; 0x4b
    4168:	strb.w	sl, [r5, #1383]	; 0x567
      _s = s;
    416c:	mvn.w	sl, #106	; 0x6a
    4170:	strb.w	sl, [r5, #1384]	; 0x568
      _b = b;
    4174:	mvn.w	sl, #16
    4178:	strb.w	ip, [r5, #1388]	; 0x56c
    417c:	strb.w	sl, [r5, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4180:	mvn.w	sl, #81	; 0x51
    4184:	strb.w	sl, [r5, #1386]	; 0x56a
      _s = s;
    4188:	mov.w	sl, #113	; 0x71
    418c:	strb.w	sl, [r5, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4190:	mvn.w	sl, #100	; 0x64
    4194:	strb.w	sl, [r5, #1389]	; 0x56d
      _s = s;
    4198:	mvn.w	sl, #94	; 0x5e
    419c:	strb.w	sl, [r5, #1390]	; 0x56e
      _b = b;
    41a0:	mvn.w	sl, #39	; 0x27
    41a4:	strb.w	sl, [r5, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41a8:	mov.w	sl, #103	; 0x67
    41ac:	strb.w	sl, [r5, #1392]	; 0x570
      _s = s;
    41b0:	mov.w	sl, #95	; 0x5f
    41b4:	strb.w	sl, [r5, #1393]	; 0x571
      _b = b;
    41b8:	mov.w	sl, #126	; 0x7e
    41bc:	strb.w	sl, [r5, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41c0:	mov.w	sl, #95	; 0x5f
    41c4:	strb.w	sl, [r5, #1395]	; 0x573
      _s = s;
    41c8:	mov.w	sl, #88	; 0x58
    41cc:	strb.w	sl, [r5, #1396]	; 0x574
      _b = b;
    41d0:	mvn.w	sl, #114	; 0x72
    41d4:	strb.w	sl, [r5, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41d8:	mov.w	sl, #120	; 0x78
    41dc:	strb.w	sl, [r5, #1398]	; 0x576
      _s = s;
    41e0:	mvn.w	sl, #58	; 0x3a
    41e4:	strb.w	sl, [r5, #1399]	; 0x577
      _b = b;
    41e8:	mvn.w	sl, #127	; 0x7f
    41ec:	strb.w	sl, [r5, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41f0:	mov.w	sl, #95	; 0x5f
    41f4:	strb.w	sl, [r5, #1401]	; 0x579
      _s = s;
    41f8:	mvn.w	sl, #84	; 0x54
    41fc:	strb.w	sl, [r5, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4200:	mov.w	sl, #113	; 0x71
    4204:	strb.w	sl, [r5, #1404]	; 0x57c
      _s = s;
    4208:	mvn.w	sl, #126	; 0x7e
    420c:	strb.w	sl, [r5, #1405]	; 0x57d
      _b = b;
    4210:	mvn.w	sl, #127	; 0x7f
    4214:	strb.w	sl, [r5, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4218:	mvn.w	sl, #34	; 0x22
    421c:	strb.w	sl, [r5, #1407]	; 0x57f
      _s = s;
    4220:	mov.w	sl, #64	; 0x40
    4224:	strb.w	sl, [r5, #1408]	; 0x580
      _b = b;
    4228:	mvn.w	sl, #90	; 0x5a
    422c:	strb.w	sl, [r5, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4230:	mvn.w	sl, #58	; 0x3a
    4234:	strb.w	sl, [r5, #1410]	; 0x582
      _s = s;
    4238:	mov.w	sl, #72	; 0x48
    423c:	strb.w	sl, [r5, #1411]	; 0x583
      _b = b;
    4240:	mvn.w	sl, #27
    4244:	strb.w	sl, [r5, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4248:	mvn.w	sl, #65	; 0x41
    424c:	strb.w	sl, [r5, #1413]	; 0x585
      _s = s;
    4250:	mov.w	sl, #108	; 0x6c
    4254:	strb.w	sl, [r5, #1414]	; 0x586
      _b = b;
    4258:	mvn.w	sl, #21
    425c:	strb.w	sl, [r5, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4260:	mvn.w	sl, #96	; 0x60
    4264:	strb.w	sl, [r5, #1416]	; 0x588
      _s = s;
    4268:	mvn.w	sl, #102	; 0x66
    426c:	strb.w	sl, [r5, #1417]	; 0x589
      _b = b;
    4270:	mov.w	sl, #82	; 0x52
    4274:	strb.w	sl, [r5, #1403]	; 0x57b
    4278:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    427c:	strb.w	r6, [r5, #1429]	; 0x595
      _b = b;
    4280:	strb.w	sl, [r5, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4284:	mvn.w	sl, #119	; 0x77
      _s = s;
      _b = b;
    4288:	strb.w	ip, [r5, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    428c:	strb.w	sl, [r5, #1419]	; 0x58b
      _s = s;
    4290:	mvn.w	sl, #85	; 0x55
      _b = b;
    4294:	strb.w	ip, [r5, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4298:	strb.w	sl, [r5, #1420]	; 0x58c
      _b = b;
    429c:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42a0:	strb.w	r1, [r5, #1443]	; 0x5a3
      _s = s;
      _b = b;
    42a4:	strb.w	sl, [r5, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42a8:	mvn.w	sl, #73	; 0x49
    42ac:	strb.w	sl, [r5, #1422]	; 0x58e
      _s = s;
    42b0:	mov.w	sl, #109	; 0x6d
    42b4:	strb.w	sl, [r5, #1423]	; 0x58f
      _b = b;
    42b8:	mvn.w	sl, #17
    42bc:	strb.w	sl, [r5, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42c0:	mvn.w	sl, #56	; 0x38
    42c4:	strb.w	sl, [r5, #1425]	; 0x591
      _s = s;
    42c8:	mvn.w	sl, #66	; 0x42
    42cc:	strb.w	sl, [r5, #1426]	; 0x592
      _b = b;
    42d0:	mvn.w	sl, #16
    42d4:	strb.w	sl, [r5, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42d8:	mvn.w	sl, #55	; 0x37
    42dc:	strb.w	sl, [r5, #1428]	; 0x594
      _s = s;
      _b = b;
    42e0:	mvn.w	sl, #14
    42e4:	strb.w	sl, [r5, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42e8:	mvn.w	sl, #63	; 0x3f
    42ec:	strb.w	sl, [r5, #1431]	; 0x597
      _s = s;
    42f0:	mvn.w	sl, #81	; 0x51
    42f4:	strb.w	sl, [r5, #1432]	; 0x598
      _b = b;
    42f8:	mvn.w	sl, #13
    42fc:	strb.w	sl, [r5, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4300:	mvn.w	sl, #96	; 0x60
    4304:	strb.w	sl, [r5, #1434]	; 0x59a
      _s = s;
    4308:	mov.w	sl, #124	; 0x7c
    430c:	strb.w	sl, [r5, #1435]	; 0x59b
      _b = b;
    4310:	mvn.w	sl, #15
    4314:	strb.w	sl, [r5, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4318:	mvn.w	sl, #118	; 0x76
    431c:	strb.w	sl, [r5, #1437]	; 0x59d
      _s = s;
    4320:	mov.w	sl, #28
    4324:	strb.w	sl, [r5, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4328:	mvn.w	sl, #121	; 0x79
    432c:	strb.w	sl, [r5, #1440]	; 0x5a0
      _s = s;
    4330:	mvn.w	sl, #83	; 0x53
    4334:	strb.w	sl, [r5, #1441]	; 0x5a1
    4338:	mvn.w	sl, #38	; 0x26
    433c:	strb.w	sl, [r5, #1444]	; 0x5a4
      _b = b;
    4340:	mvn.w	sl, #15
    4344:	strb.w	sl, [r5, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4348:	mvn.w	sl, #110	; 0x6e
    434c:	strb.w	sl, [r5, #1446]	; 0x5a6
      _s = s;
    4350:	mvn.w	sl, #58	; 0x3a
    4354:	strb.w	sl, [r5, #1447]	; 0x5a7
      _b = b;
    4358:	mvn.w	sl, #18
    435c:	strb.w	sl, [r5, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4360:	mvn.w	sl, #109	; 0x6d
    4364:	strb.w	sl, [r5, #1449]	; 0x5a9
      _s = s;
      _b = b;
    4368:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    436c:	strb.w	r6, [r5, #1450]	; 0x5aa
      _b = b;
    4370:	strb.w	sl, [r5, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4374:	mvn.w	sl, #68	; 0x44
      _s = s;
    4378:	strb.w	r1, [r5, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    437c:	strb.w	sl, [r5, #1452]	; 0x5ac
      _s = s;
    4380:	mov.w	sl, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4384:	strb.w	r7, [r5, #1464]	; 0x5b8
      _s = s;
    4388:	strb.w	sl, [r5, #1453]	; 0x5ad
      _b = b;
    438c:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4390:	strb.w	r6, [r5, #1470]	; 0x5be
      _s = s;
      _b = b;
    4394:	strb.w	sl, [r5, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4398:	mvn.w	sl, #53	; 0x35
      _s = s;
    439c:	strb.w	ip, [r5, #1471]	; 0x5bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43a0:	strb.w	sl, [r5, #1455]	; 0x5af
      _s = s;
    43a4:	mov.w	sl, #52	; 0x34
      _b = b;
    43a8:	strb.w	r0, [r5, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43ac:	strb.w	sl, [r5, #1456]	; 0x5b0
      _b = b;
    43b0:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43b4:	strb.w	r6, [r5, #1473]	; 0x5c1
      _s = s;
      _b = b;
    43b8:	strb.w	sl, [r5, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43bc:	mvn.w	sl, #50	; 0x32
      _s = s;
    43c0:	strb.w	r7, [r5, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43c4:	strb.w	sl, [r5, #1458]	; 0x5b2
      _s = s;
    43c8:	mov.w	sl, #62	; 0x3e
    43cc:	strb.w	sl, [r5, #1459]	; 0x5b3
      _b = b;
    43d0:	mvn.w	sl, #9
    43d4:	strb.w	sl, [r5, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43d8:	mvn.w	sl, #77	; 0x4d
    43dc:	strb.w	sl, [r5, #1461]	; 0x5b5
      _s = s;
      _b = b;
    43e0:	mvn.w	sl, #34	; 0x22
    43e4:	strb.w	sl, [r5, #1463]	; 0x5b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43e8:	mvn.w	sl, #46	; 0x2e
    43ec:	strb.w	sl, [r5, #1465]	; 0x5b9
      _b = b;
    43f0:	mov.w	sl, #118	; 0x76
    43f4:	strb.w	sl, [r5, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43f8:	mov.w	sl, #110	; 0x6e
    43fc:	strb.w	sl, [r5, #1467]	; 0x5bb
      _s = s;
    4400:	mvn.w	sl, #63	; 0x3f
    4404:	strb.w	sl, [r5, #1468]	; 0x5bc
      _b = b;
    4408:	mov.w	sl, #74	; 0x4a
    440c:	strb.w	sl, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4410:	mvn.w	sl, #53	; 0x35
    4414:	strb.w	sl, [r5, #1474]	; 0x5c2
      _b = b;
    4418:	mov.w	sl, #87	; 0x57
    441c:	strb.w	sl, [r5, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4420:	mvn.w	sl, #110	; 0x6e
    4424:	strb.w	sl, [r5, #1476]	; 0x5c4
      _s = s;
      _b = b;
    4428:	mov.w	sl, #102	; 0x66
    442c:	strb.w	sl, [r5, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4430:	mvn.w	sl, #97	; 0x61
    4434:	strb.w	sl, [r5, #1479]	; 0x5c7
      _s = s;
    4438:	mvn.w	sl, #79	; 0x4f
    443c:	strb.w	sl, [r5, #1480]	; 0x5c8
      _b = b;
    4440:	mvn.w	sl, #51	; 0x33
    4444:	strb.w	sl, [r5, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4448:	mvn.w	sl, #95	; 0x5f
    444c:	strb.w	sl, [r5, #1482]	; 0x5ca
      _s = s;
    4450:	mvn.w	sl, #28
    4454:	strb.w	sl, [r5, #1483]	; 0x5cb
      _b = b;
    4458:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    445c:	strb.w	lr, [r5, #1489]	; 0x5d1
      _b = b;
    4460:	strb.w	sl, [r5, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4464:	mvn.w	sl, #96	; 0x60
      _s = s;
      _b = b;
    4468:	strb.w	ip, [r5, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    446c:	strb.w	sl, [r5, #1485]	; 0x5cd
      _s = s;
    4470:	mvn.w	sl, #5
    4474:	strb.w	r7, [r5, #1498]	; 0x5da
    4478:	strb.w	sl, [r5, #1486]	; 0x5ce
      _b = b;
    447c:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4480:	strb.w	r6, [r5, #1504]	; 0x5e0
      _b = b;
    4484:	strb.w	sl, [r5, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4488:	mvn.w	sl, #98	; 0x62
      _s = s;
    448c:	strb.w	r9, [r5, #1495]	; 0x5d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4490:	strb.w	sl, [r5, #1488]	; 0x5d0
      _s = s;
      _b = b;
    4494:	mvn.w	sl, #28
    4498:	strb.w	sl, [r5, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    449c:	mvn.w	sl, #108	; 0x6c
    44a0:	strb.w	sl, [r5, #1491]	; 0x5d3
      _s = s;
    44a4:	mvn.w	sl, #60	; 0x3c
    44a8:	strb.w	sl, [r5, #1492]	; 0x5d4
      _b = b;
    44ac:	mvn.w	sl, #26
    44b0:	strb.w	sl, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44b4:	mvn.w	sl, #101	; 0x65
    44b8:	strb.w	sl, [r5, #1494]	; 0x5d6
    44bc:	mvn.w	sl, #66	; 0x42
    44c0:	strb.w	sl, [r5, #1497]	; 0x5d9
      _s = s;
      _b = b;
    44c4:	mvn.w	sl, #16
    44c8:	strb.w	sl, [r5, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44cc:	mvn.w	sl, #61	; 0x3d
    44d0:	strb.w	sl, [r5, #1500]	; 0x5dc
      _s = s;
    44d4:	mov.w	sl, #115	; 0x73
    44d8:	strb.w	sl, [r5, #1501]	; 0x5dd
      _b = b;
    44dc:	mvn.w	sl, #16
    44e0:	strb.w	sl, [r5, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e4:	mvn.w	sl, #88	; 0x58
    44e8:	strb.w	sl, [r5, #1503]	; 0x5df
      _s = s;
      _b = b;
    44ec:	mvn.w	sl, #15
    44f0:	strb.w	sl, [r5, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44f4:	mvn.w	sl, #111	; 0x6f
    44f8:	strb.w	sl, [r5, #1506]	; 0x5e2
      _s = s;
    44fc:	mov.w	sl, #113	; 0x71
    4500:	strb.w	sl, [r5, #1507]	; 0x5e3
      _b = b;
    4504:	mvn.w	sl, #17
    4508:	strb.w	sl, [r5, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    450c:	mvn.w	sl, #120	; 0x78
    4510:	strb.w	sl, [r5, #1509]	; 0x5e5
      _s = s;
    4514:	mov.w	sl, #57	; 0x39
    4518:	strb.w	sl, [r5, #1510]	; 0x5e6
      _b = b;
    451c:	mvn.w	sl, #21
    4520:	strb.w	sl, [r5, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4524:	mov.w	sl, #94	; 0x5e
    4528:	strb.w	sl, [r5, #1512]	; 0x5e8
      _s = s;
    452c:	mov.w	sl, #40	; 0x28
    4530:	strb.w	sl, [r5, #1513]	; 0x5e9
      _b = b;
    4534:	mvn.w	sl, #87	; 0x57
    4538:	strb.w	sl, [r5, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    453c:	mov.w	sl, #122	; 0x7a
    4540:	strb.w	sl, [r5, #1515]	; 0x5eb
      _s = s;
    4544:	mov.w	sl, #116	; 0x74
    4548:	strb.w	sl, [r5, #1516]	; 0x5ec
      _b = b;
    454c:	mvn.w	sl, #65	; 0x41
    4550:	strb.w	r0, [r5, #1544]	; 0x608
    4554:	strb.w	sl, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4558:	mvn.w	sl, #118	; 0x76
    455c:	strb.w	sl, [r5, #1518]	; 0x5ee
      _s = s;
    4560:	mvn.w	sl, #50	; 0x32
    4564:	strb.w	sl, [r5, #1519]	; 0x5ef
      _b = b;
    4568:	mvn.w	sl, #23
    456c:	strb.w	sl, [r5, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4570:	mvn.w	sl, #103	; 0x67
    4574:	strb.w	sl, [r5, #1521]	; 0x5f1
      _s = s;
    4578:	mvn.w	sl, #93	; 0x5d
    457c:	strb.w	sl, [r5, #1522]	; 0x5f2
      _b = b;
    4580:	mvn.w	sl, #9
    4584:	strb.w	sl, [r5, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4588:	mvn.w	sl, #71	; 0x47
    458c:	strb.w	sl, [r5, #1524]	; 0x5f4
      _s = s;
    4590:	mov.w	sl, #108	; 0x6c
    4594:	strb.w	sl, [r5, #1525]	; 0x5f5
      _b = b;
    4598:	mvn.w	sl, #6
    459c:	strb.w	sl, [r5, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45a0:	mvn.w	sl, #51	; 0x33
    45a4:	strb.w	sl, [r5, #1527]	; 0x5f7
      _s = s;
    45a8:	mov.w	sl, #59	; 0x3b
    45ac:	strb.w	sl, [r5, #1528]	; 0x5f8
      _b = b;
    45b0:	mvn.w	sl, #6
    45b4:	strb.w	sl, [r5, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45b8:	mvn.w	sl, #47	; 0x2f
    45bc:	strb.w	sl, [r5, #1530]	; 0x5fa
      _s = s;
      _b = b;
    45c0:	mvn.w	sl, #9
    45c4:	strb.w	sl, [r5, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45c8:	mvn.w	sl, #38	; 0x26
    45cc:	strb.w	sl, [r5, #1533]	; 0x5fd
      _s = s;
    45d0:	mov.w	sl, #37	; 0x25
    45d4:	strb.w	sl, [r5, #1534]	; 0x5fe
      _b = b;
    45d8:	mvn.w	sl, #11
    45dc:	strb.w	sl, [r5, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45e0:	mvn.w	sl, #94	; 0x5e
    45e4:	strb.w	sl, [r5, #1536]	; 0x600
      _s = s;
      _b = b;
    45e8:	mvn.w	sl, #77	; 0x4d
    45ec:	strb.w	sl, [r5, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45f0:	mov.w	sl, #91	; 0x5b
    45f4:	strb.w	sl, [r5, #1540]	; 0x604
      _b = b;
    45f8:	mvn.w	sl, #104	; 0x68
    45fc:	strb.w	sl, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4600:	mov.w	sl, #118	; 0x76
    4604:	strb.w	sl, [r5, #1542]	; 0x606
      _s = s;
    4608:	mvn.w	sl, #63	; 0x3f
    460c:	strb.w	sl, [r5, #1543]	; 0x607
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4610:	mov.w	sl, #100	; 0x64
    4614:	strb.w	sl, [r5, #1545]	; 0x609
      _s = s;
    4618:	mvn.w	sl, #65	; 0x41
    461c:	strb.w	sl, [r5, #1546]	; 0x60a
      _b = b;
    4620:	mov.w	sl, #63	; 0x3f
    4624:	strb.w	sl, [r5, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4628:	mvn.w	sl, #110	; 0x6e
    462c:	strb.w	sl, [r5, #1548]	; 0x60c
      _s = s;
    4630:	mvn.w	sl, #13
    4634:	strb.w	sl, [r5, #1549]	; 0x60d
    4638:	mov.w	sl, #81	; 0x51
    463c:	strb.w	sl, [r5, #1531]	; 0x5fb
    4640:	strb.w	sl, [r5, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4644:	mov.w	sl, #84	; 0x54
    4648:	strb.w	sl, [r5, #1539]	; 0x603
    464c:	mvn.w	sl, #107	; 0x6b
      _s = s;
      _b = b;
    4650:	strb.w	r7, [r5, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4654:	strb.w	sl, [r5, #1551]	; 0x60f
      _s = s;
      _b = b;
    4658:	mvn.w	sl, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    465c:	strb.w	lr, [r5, #1552]	; 0x610
      _b = b;
    4660:	strb.w	sl, [r5, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4664:	mvn.w	sl, #101	; 0x65
      _s = s;
    4668:	strb.w	lr, [r5, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    466c:	strb.w	sl, [r5, #1554]	; 0x612
      _s = s;
    4670:	mvn.w	sl, #105	; 0x69
      _b = b;
    4674:	strb.w	ip, [r5, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4678:	strb.w	sl, [r5, #1555]	; 0x613
      _b = b;
    467c:	mvn.w	sl, #31
    4680:	strb.w	ip, [r5, #1577]	; 0x629
    4684:	strb.w	sl, [r5, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4688:	mov.w	sl, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    468c:	strb.w	fp, [r5, #1557]	; 0x615
      _s = s;
    4690:	strb.w	sl, [r5, #1558]	; 0x616
      _b = b;
    4694:	mvn.w	sl, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4698:	strb.w	r8, [r5, #1578]	; 0x62a
      _s = s;
      _b = b;
    469c:	strb.w	sl, [r5, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a0:	mvn.w	sl, #107	; 0x6b
    46a4:	strb.w	fp, [r5, #1581]	; 0x62d
    46a8:	strb.w	sl, [r5, #1560]	; 0x618
      _s = s;
    46ac:	mvn.w	sl, #121	; 0x79
    46b0:	strb.w	sl, [r5, #1561]	; 0x619
      _b = b;
    46b4:	mvn.w	sl, #32
    46b8:	strb.w	sl, [r5, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46bc:	mvn.w	sl, #96	; 0x60
    46c0:	strb.w	sl, [r5, #1563]	; 0x61b
      _s = s;
      _b = b;
    46c4:	mvn.w	sl, #39	; 0x27
    46c8:	strb.w	sl, [r5, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46cc:	mvn.w	sl, #110	; 0x6e
    46d0:	strb.w	sl, [r5, #1566]	; 0x61e
      _s = s;
    46d4:	mvn.w	sl, #47	; 0x2f
    46d8:	strb.w	sl, [r5, #1567]	; 0x61f
      _b = b;
    46dc:	mvn.w	sl, #24
    46e0:	strb.w	sl, [r5, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46e4:	mvn.w	sl, #110	; 0x6e
    46e8:	strb.w	sl, [r5, #1569]	; 0x621
      _s = s;
    46ec:	mvn.w	sl, #40	; 0x28
    46f0:	strb.w	sl, [r5, #1570]	; 0x622
      _b = b;
    46f4:	mvn.w	sl, #23
    46f8:	strb.w	sl, [r5, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46fc:	mvn.w	sl, #106	; 0x6a
    4700:	strb.w	sl, [r5, #1572]	; 0x624
      _s = s;
    4704:	mvn.w	sl, #59	; 0x3b
    4708:	strb.w	sl, [r5, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    470c:	mvn.w	sl, #107	; 0x6b
    4710:	strb.w	sl, [r5, #1575]	; 0x627
      _s = s;
    4714:	mvn.w	sl, #87	; 0x57
    4718:	strb.w	sl, [r5, #1576]	; 0x628
    471c:	mov.w	sl, #61	; 0x3d
    4720:	strb.w	sl, [r5, #1579]	; 0x62b
      _b = b;
    4724:	mvn.w	sl, #23
    4728:	strb.w	sl, [r5, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    472c:	mov.w	sl, #63	; 0x3f
    4730:	strb.w	sl, [r5, #1582]	; 0x62e
      _b = b;
    4734:	mvn.w	sl, #22
    4738:	strb.w	sl, [r5, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    473c:	mvn.w	sl, #12
    4740:	strb.w	sl, [r5, #1584]	; 0x630
      _s = s;
    4744:	mov.w	sl, #88	; 0x58
    4748:	strb.w	sl, [r5, #1585]	; 0x631
      _b = b;
    474c:	mov.w	sl, #43	; 0x2b
    4750:	strb.w	sl, [r5, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4754:	mov.w	sl, #59	; 0x3b
    4758:	strb.w	sl, [r5, #1587]	; 0x633
      _s = s;
    475c:	mov.w	sl, #44	; 0x2c
    4760:	strb.w	sl, [r5, #1588]	; 0x634
      _b = b;
    4764:	mov.w	sl, #57	; 0x39
    4768:	strb.w	sl, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    476c:	mov.w	sl, #125	; 0x7d
    4770:	strb.w	sl, [r5, #1590]	; 0x636
      _s = s;
    4774:	mov.w	sl, #79	; 0x4f
    4778:	strb.w	sl, [r5, #1591]	; 0x637
      _b = b;
    477c:	mvn.w	sl, #47	; 0x2f
    4780:	strb.w	sl, [r5, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4784:	mvn.w	sl, #121	; 0x79
    4788:	strb.w	sl, [r5, #1593]	; 0x639
      _s = s;
    478c:	mov.w	sl, #95	; 0x5f
    4790:	strb.w	sl, [r5, #1594]	; 0x63a
      _b = b;
    4794:	mvn.w	sl, #9
    4798:	strb.w	sl, [r5, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    479c:	mvn.w	sl, #66	; 0x42
    47a0:	strb.w	sl, [r5, #1596]	; 0x63c
      _s = s;
    47a4:	mov.w	sl, #116	; 0x74
    47a8:	strb.w	sl, [r5, #1597]	; 0x63d
      _b = b;
    47ac:	mvn.w	sl, #5
    47b0:	strb.w	sl, [r5, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47b4:	mvn.w	sl, #64	; 0x40
    47b8:	strb.w	sl, [r5, #1599]	; 0x63f
      _s = s;
    47bc:	mov.w	sl, #50	; 0x32
    47c0:	strb.w	sl, [r5, #1600]	; 0x640
      _b = b;
    47c4:	mvn.w	sl, #6
    47c8:	strb.w	sl, [r5, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47cc:	mvn.w	sl, #45	; 0x2d
    47d0:	strb.w	sl, [r5, #1602]	; 0x642
      _s = s;
    47d4:	mov.w	sl, #57	; 0x39
    47d8:	strb.w	sl, [r5, #1603]	; 0x643
      _b = b;
    47dc:	mvn.w	sl, #9
    47e0:	strb.w	sl, [r5, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47e4:	mvn.w	sl, #50	; 0x32
    47e8:	strb.w	sl, [r5, #1605]	; 0x645
      _s = s;
    47ec:	mov.w	sl, #41	; 0x29
    47f0:	strb.w	sl, [r5, #1606]	; 0x646
      _b = b;
    47f4:	mvn.w	sl, #15
    47f8:	strb.w	sl, [r5, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47fc:	mvn.w	sl, #94	; 0x5e
    4800:	strb.w	sl, [r5, #1608]	; 0x648
      _s = s;
    4804:	mov.w	sl, #117	; 0x75
    4808:	strb.w	sl, [r5, #1609]	; 0x649
      _b = b;
    480c:	mvn.w	sl, #28
    4810:	strb.w	sl, [r5, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4814:	mvn.w	sl, #121	; 0x79
    4818:	strb.w	sl, [r5, #1611]	; 0x64b
      _s = s;
    481c:	mvn.w	sl, #12
    4820:	strb.w	sl, [r5, #1612]	; 0x64c
      _b = b;
    4824:	mvn.w	sl, #35	; 0x23
    4828:	strb.w	sl, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    482c:	mvn.w	sl, #118	; 0x76
    4830:	strb.w	sl, [r5, #1614]	; 0x64e
      _s = s;
    4834:	mvn.w	sl, #19
    4838:	strb.w	sl, [r5, #1615]	; 0x64f
      _b = b;
    483c:	mvn.w	sl, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4840:	strb.w	r7, [r5, #1641]	; 0x669
      _s = s;
      _b = b;
    4844:	strb.w	sl, [r5, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4848:	mvn.w	sl, #108	; 0x6c
    484c:	strb.w	r6, [r5, #1647]	; 0x66f
    4850:	strb.w	sl, [r5, #1617]	; 0x651
      _s = s;
    4854:	mvn.w	sl, #43	; 0x2b
    4858:	strb.w	r8, [r5, #1627]	; 0x65b
    485c:	strb.w	sl, [r5, #1618]	; 0x652
      _b = b;
    4860:	mov.w	sl, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4864:	strb.w	r9, [r5, #1644]	; 0x66c
      _s = s;
      _b = b;
    4868:	strb.w	sl, [r5, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    486c:	mvn.w	sl, #122	; 0x7a
    4870:	strb.w	sl, [r5, #1620]	; 0x654
      _s = s;
    4874:	mvn.w	sl, #25
    4878:	strb.w	sl, [r5, #1621]	; 0x655
      _b = b;
    487c:	mvn.w	sl, #100	; 0x64
    4880:	strb.w	sl, [r5, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4884:	mov.w	sl, #57	; 0x39
    4888:	strb.w	sl, [r5, #1623]	; 0x657
      _s = s;
    488c:	mov.w	sl, #99	; 0x63
    4890:	strb.w	sl, [r5, #1624]	; 0x658
      _b = b;
    4894:	mvn.w	sl, #43	; 0x2b
    4898:	strb.w	sl, [r5, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    489c:	mov.w	sl, #42	; 0x2a
    48a0:	strb.w	sl, [r5, #1626]	; 0x65a
      _s = s;
      _b = b;
    48a4:	mvn.w	sl, #39	; 0x27
    48a8:	strb.w	sl, [r5, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48ac:	mov.w	sl, #33	; 0x21
    48b0:	strb.w	sl, [r5, #1629]	; 0x65d
      _s = s;
    48b4:	mvn.w	sl, #84	; 0x54
    48b8:	strb.w	sl, [r5, #1630]	; 0x65e
      _b = b;
    48bc:	mvn.w	sl, #30
    48c0:	strb.w	sl, [r5, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48c4:	mov.w	sl, #34	; 0x22
    48c8:	strb.w	sl, [r5, #1632]	; 0x660
      _s = s;
    48cc:	mov.w	sl, #91	; 0x5b
    48d0:	strb.w	sl, [r5, #1633]	; 0x661
      _b = b;
    48d4:	mvn.w	sl, #47	; 0x2f
    48d8:	strb.w	sl, [r5, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48dc:	mvn.w	sl, #102	; 0x66
    48e0:	strb.w	sl, [r5, #1635]	; 0x663
      _s = s;
    48e4:	mvn.w	sl, #85	; 0x55
    48e8:	strb.w	sl, [r5, #1636]	; 0x664
      _b = b;
    48ec:	mvn.w	sl, #36	; 0x24
    48f0:	strb.w	sl, [r5, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48f4:	mvn.w	sl, #101	; 0x65
    48f8:	strb.w	sl, [r5, #1638]	; 0x666
      _s = s;
    48fc:	mvn.w	sl, #2
    4900:	strb.w	sl, [r5, #1639]	; 0x667
      _b = b;
    4904:	mvn.w	sl, #36	; 0x24
    4908:	strb.w	sl, [r5, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    490c:	mvn.w	sl, #57	; 0x39
    4910:	strb.w	sl, [r5, #1642]	; 0x66a
      _b = b;
    4914:	mvn.w	sl, #23
    4918:	strb.w	sl, [r5, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    491c:	mov.w	sl, #57	; 0x39
    4920:	strb.w	sl, [r5, #1645]	; 0x66d
      _b = b;
    4924:	mvn.w	sl, #26
    4928:	strb.w	sl, [r5, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    492c:	mov.w	sl, #24
    4930:	strb.w	sl, [r5, #1648]	; 0x670
      _b = b;
    4934:	mvn.w	sl, #27
    4938:	strb.w	ip, [r5, #1670]	; 0x686
    493c:	strb.w	sl, [r5, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4940:	mvn.w	sl, #114	; 0x72
    4944:	strb.w	sl, [r5, #1650]	; 0x672
      _s = s;
    4948:	mov.w	sl, #83	; 0x53
    494c:	strb.w	sl, [r5, #1651]	; 0x673
      _b = b;
    4950:	mvn.w	sl, #25
    4954:	strb.w	sl, [r5, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4958:	mvn.w	sl, #43	; 0x2b
    495c:	strb.w	sl, [r5, #1653]	; 0x675
      _s = s;
    4960:	mov.w	sl, #14
    4964:	strb.w	sl, [r5, #1654]	; 0x676
      _b = b;
    4968:	mvn.w	sl, #41	; 0x29
    496c:	strb.w	sl, [r5, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4970:	mvn.w	sl, #8
    4974:	strb.w	sl, [r5, #1656]	; 0x678
      _s = s;
    4978:	mov.w	sl, #94	; 0x5e
    497c:	strb.w	sl, [r5, #1657]	; 0x679
      _b = b;
    4980:	mov.w	sl, #46	; 0x2e
    4984:	strb.w	sl, [r5, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4988:	mov.w	sl, #1
    498c:	strb.w	sl, [r5, #1659]	; 0x67b
      _s = s;
    4990:	mov.w	sl, #90	; 0x5a
    4994:	strb.w	sl, [r5, #1660]	; 0x67c
      _b = b;
    4998:	mov.w	sl, #62	; 0x3e
    499c:	strb.w	sl, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49a0:	mvn.w	sl, #107	; 0x6b
    49a4:	strb.w	sl, [r5, #1662]	; 0x67e
      _s = s;
    49a8:	mov.w	sl, #95	; 0x5f
    49ac:	strb.w	sl, [r5, #1663]	; 0x67f
      _b = b;
    49b0:	mov.w	sl, #88	; 0x58
    49b4:	strb.w	sl, [r5, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49b8:	mvn.w	sl, #119	; 0x77
    49bc:	strb.w	sl, [r5, #1665]	; 0x681
      _s = s;
    49c0:	mvn.w	sl, #69	; 0x45
    49c4:	strb.w	sl, [r5, #1666]	; 0x682
      _b = b;
    49c8:	mvn.w	sl, #53	; 0x35
    49cc:	strb.w	sl, [r5, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49d0:	mvn.w	sl, #111	; 0x6f
    49d4:	strb.w	sl, [r5, #1668]	; 0x684
      _s = s;
    49d8:	mov.w	sl, #95	; 0x5f
    49dc:	strb.w	sl, [r5, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49e0:	mvn.w	sl, #103	; 0x67
    49e4:	strb.w	sl, [r5, #1671]	; 0x687
      _s = s;
    49e8:	mov.w	sl, #69	; 0x45
    49ec:	strb.w	sl, [r5, #1672]	; 0x688
      _b = b;
    49f0:	mvn.w	sl, #8
    49f4:	strb.w	sl, [r5, #1673]	; 0x689
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49f8:	mvn.w	sl, #55	; 0x37
    49fc:	strb.w	sl, [r5, #1674]	; 0x68a
      _s = s;
    4a00:	mov.w	sl, #43	; 0x2b
    4a04:	strb.w	sl, [r5, #1675]	; 0x68b
      _b = b;
    4a08:	mvn.w	sl, #7
    4a0c:	strb.w	sl, [r5, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a10:	mvn.w	sl, #58	; 0x3a
    4a14:	strb.w	sl, [r5, #1677]	; 0x68d
      _s = s;
    4a18:	mov.w	sl, #92	; 0x5c
    4a1c:	strb.w	sl, [r5, #1678]	; 0x68e
      _b = b;
    4a20:	mvn.w	sl, #8
    4a24:	strb.w	sl, [r5, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a28:	mvn.w	sl, #110	; 0x6e
    4a2c:	strb.w	sl, [r5, #1680]	; 0x690
      _s = s;
    4a30:	mov.w	sl, #107	; 0x6b
    4a34:	strb.w	sl, [r5, #1681]	; 0x691
      _b = b;
    4a38:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a3c:	strb.w	lr, [r5, #1687]	; 0x697
      _b = b;
    4a40:	strb.w	sl, [r5, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a44:	mvn.w	sl, #7
    4a48:	strb.w	lr, [r5, #1696]	; 0x6a0
    4a4c:	strb.w	sl, [r5, #1684]	; 0x694
      _b = b;
    4a50:	mvn.w	sl, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a54:	strb.w	r8, [r5, #1683]	; 0x693
      _s = s;
      _b = b;
    4a58:	strb.w	sl, [r5, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a5c:	mvn.w	sl, #109	; 0x6d
    4a60:	strb.w	sl, [r5, #1686]	; 0x696
      _s = s;
      _b = b;
    4a64:	mvn.w	sl, #77	; 0x4d
    4a68:	strb.w	sl, [r5, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a6c:	mvn.w	sl, #121	; 0x79
    4a70:	strb.w	sl, [r5, #1689]	; 0x699
      _s = s;
    4a74:	mvn.w	sl, #6
    4a78:	strb.w	sl, [r5, #1690]	; 0x69a
      _b = b;
    4a7c:	mvn.w	sl, #120	; 0x78
    4a80:	strb.w	sl, [r5, #1691]	; 0x69b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a84:	mov.w	sl, #60	; 0x3c
    4a88:	strb.w	sl, [r5, #1692]	; 0x69c
      _s = s;
    4a8c:	mov.w	sl, #124	; 0x7c
    4a90:	strb.w	sl, [r5, #1693]	; 0x69d
      _b = b;
    4a94:	mvn.w	sl, #61	; 0x3d
    4a98:	strb.w	sl, [r5, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a9c:	mov.w	sl, #37	; 0x25
    4aa0:	strb.w	sl, [r5, #1695]	; 0x69f
      _s = s;
      _b = b;
    4aa4:	mvn.w	sl, #33	; 0x21
    4aa8:	strb.w	sl, [r5, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aac:	mov.w	sl, #31
    4ab0:	strb.w	sl, [r5, #1698]	; 0x6a2
      _s = s;
    4ab4:	mvn.w	sl, #25
    4ab8:	strb.w	sl, [r5, #1699]	; 0x6a3
      _b = b;
    4abc:	mvn.w	sl, #38	; 0x26
    4ac0:	strb.w	sl, [r5, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ac4:	mov.w	sl, #26
    4ac8:	strb.w	sl, [r5, #1701]	; 0x6a5
      _s = s;
    4acc:	mvn.w	sl, #51	; 0x33
    4ad0:	strb.w	sl, [r5, #1702]	; 0x6a6
      _b = b;
    4ad4:	mvn.w	sl, #40	; 0x28
    4ad8:	strb.w	sl, [r5, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4adc:	mov.w	sl, #22
    4ae0:	strb.w	sl, [r5, #1704]	; 0x6a8
      _s = s;
    4ae4:	mvn.w	sl, #71	; 0x47
    4ae8:	strb.w	sl, [r5, #1705]	; 0x6a9
      _b = b;
    4aec:	mvn.w	sl, #30
    4af0:	strb.w	sl, [r5, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4af4:	mov.w	sl, #13
    4af8:	strb.w	sl, [r5, #1707]	; 0x6ab
      _s = s;
    4afc:	mov.w	sl, #76	; 0x4c
    4b00:	strb.w	sl, [r5, #1708]	; 0x6ac
      _b = b;
    4b04:	mvn.w	sl, #27
    4b08:	strb.w	sl, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b0c:	mvn.w	sl, #36	; 0x24
    4b10:	strb.w	sl, [r5, #1710]	; 0x6ae
      _s = s;
    4b14:	mov.w	sl, #62	; 0x3e
    4b18:	strb.w	sl, [r5, #1711]	; 0x6af
      _b = b;
    4b1c:	mvn.w	sl, #87	; 0x57
    4b20:	strb.w	sl, [r5, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b24:	mvn.w	sl, #16
    4b28:	strb.w	sl, [r5, #1713]	; 0x6b1
      _s = s;
    4b2c:	mov.w	sl, #56	; 0x38
    4b30:	strb.w	sl, [r5, #1714]	; 0x6b2
      _b = b;
    4b34:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b38:	strb.w	lr, [r5, #1726]	; 0x6be
      _b = b;
    4b3c:	strb.w	sl, [r5, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b40:	mvn.w	sl, #13
    4b44:	strb	r3, [r4, #0]
    4b46:	strb.w	sl, [r5, #1716]	; 0x6b4
      _s = s;
    4b4a:	mov.w	sl, #24
    4b4e:	strb	r3, [r4, #1]
    4b50:	strb.w	sl, [r5, #1717]	; 0x6b5
      _b = b;
    4b54:	mvn.w	sl, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b58:	strb	r3, [r4, #9]
      _s = s;
      _b = b;
    4b5a:	strb.w	sl, [r5, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b5e:	mvn.w	sl, #18
      _s = s;
    4b62:	strb	r3, [r4, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b64:	strb.w	sl, [r5, #1719]	; 0x6b7
      _s = s;
    4b68:	mvn.w	sl, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b6c:	strb	r3, [r4, #12]
      _s = s;
    4b6e:	strb.w	sl, [r5, #1720]	; 0x6b8
      _b = b;
    4b72:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b76:	strb	r3, [r4, #13]
      _b = b;
    4b78:	strb.w	sl, [r5, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b7c:	mvn.w	sl, #15
    4b80:	strb	r3, [r4, #15]
    4b82:	strb.w	sl, [r5, #1722]	; 0x6ba
      _s = s;
    4b86:	mov.w	sl, #114	; 0x72
    4b8a:	strb	r3, [r4, #16]
    4b8c:	strb.w	sl, [r5, #1723]	; 0x6bb
      _b = b;
    4b90:	mvn.w	sl, #35	; 0x23
    4b94:	strb.w	sl, [r5, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b98:	mvn.w	sl, #26
    4b9c:	strb.w	sl, [r5, #1725]	; 0x6bd
      _s = s;
      _b = b;
    4ba0:	mvn.w	sl, #35	; 0x23
    4ba4:	strb.w	sl, [r5, #1727]	; 0x6bf
    4ba8:	mvn.w	sl, #4
    4bac:	strb.w	sl, [r4, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bb0:	mov.w	sl, #106	; 0x6a
    4bb4:	strb.w	sl, [r4, #3]
      _s = s;
    4bb8:	mov.w	sl, #2
    4bbc:	strb.w	sl, [r4, #4]
      _b = b;
    4bc0:	mvn.w	sl, #39	; 0x27
    4bc4:	strb.w	sl, [r4, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bc8:	mov.w	sl, #85	; 0x55
    4bcc:	strb.w	sl, [r4, #6]
      _s = s;
    4bd0:	mov.w	sl, #5
    4bd4:	strb.w	sl, [r4, #7]
      _b = b;
    4bd8:	mvn.w	sl, #102	; 0x66
    4bdc:	strb.w	sl, [r4, #8]
    4be0:	mvn.w	sl, #16
    4be4:	strb.w	sl, [r4, #11]
    4be8:	mvn.w	sl, #8
    4bec:	strb.w	sl, [r4, #14]
    4bf0:	mvn.w	sl, #10
    4bf4:	strb.w	sl, [r4, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bf8:	mov.w	sl, #106	; 0x6a
    4bfc:	strb.w	sl, [r4, #18]
      _s = s;
    4c00:	mov.w	sl, #2
    4c04:	strb.w	sl, [r4, #19]
      _b = b;
    4c08:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c0c:	strb.w	r2, [r4, #39]	; 0x27
      _s = s;
      _b = b;
    4c10:	strb.w	sl, [r4, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c14:	mov.w	sl, #109	; 0x6d
    4c18:	strb.w	r6, [r4, #42]	; 0x2a
    4c1c:	strb.w	sl, [r4, #21]
      _s = s;
    4c20:	mov.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c24:	strb.w	r2, [r4, #45]	; 0x2d
      _s = s;
    4c28:	strb.w	sl, [r4, #22]
      _b = b;
    4c2c:	mvn.w	sl, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c30:	strb.w	r2, [r4, #48]	; 0x30
      _s = s;
      _b = b;
    4c34:	strb.w	sl, [r4, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c38:	mov.w	sl, #114	; 0x72
    4c3c:	strb.w	r9, [r4, #30]
    4c40:	strb.w	sl, [r4, #24]
      _s = s;
    4c44:	mov.w	sl, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c48:	strb.w	r8, [r4, #33]	; 0x21
      _s = s;
    4c4c:	strb.w	sl, [r4, #25]
      _b = b;
    4c50:	mvn.w	sl, #92	; 0x5c
    4c54:	strb.w	sl, [r4, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c58:	mov.w	sl, #115	; 0x73
    4c5c:	strb.w	sl, [r4, #27]
      _s = s;
    4c60:	mov.w	sl, #26
    4c64:	strb.w	sl, [r4, #28]
      _b = b;
    4c68:	mvn.w	sl, #119	; 0x77
    4c6c:	strb.w	sl, [r4, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c70:	mov.w	sl, #48	; 0x30
    4c74:	strb.w	sl, [r4, #31]
      _b = b;
    4c78:	mov.w	sl, #73	; 0x49
    4c7c:	strb.w	sl, [r4, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c80:	mvn.w	sl, #70	; 0x46
    4c84:	strb.w	sl, [r4, #34]	; 0x22
      _b = b;
    4c88:	mov.w	sl, #77	; 0x4d
    4c8c:	strb.w	sl, [r4, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c90:	mvn.w	sl, #121	; 0x79
    4c94:	strb.w	sl, [r4, #36]	; 0x24
      _s = s;
    4c98:	mvn.w	sl, #34	; 0x22
    4c9c:	strb.w	sl, [r4, #37]	; 0x25
      _b = b;
    4ca0:	mov.w	sl, #100	; 0x64
    4ca4:	strb.w	sl, [r4, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ca8:	mov.w	sl, #63	; 0x3f
    4cac:	strb.w	sl, [r4, #40]	; 0x28
      _b = b;
    4cb0:	mvn.w	sl, #122	; 0x7a
    4cb4:	strb.w	sl, [r4, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cb8:	mvn.w	sl, #83	; 0x53
    4cbc:	strb.w	sl, [r4, #43]	; 0x2b
      _b = b;
    4cc0:	mvn.w	sl, #45	; 0x2d
    4cc4:	strb.w	sl, [r4, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cc8:	mvn.w	sl, #11
    4ccc:	strb.w	sl, [r4, #46]	; 0x2e
      _b = b;
    4cd0:	mvn.w	sl, #33	; 0x21
    4cd4:	strb.w	sl, [r4, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cd8:	mvn.w	sl, #96	; 0x60
    4cdc:	strb.w	sl, [r4, #49]	; 0x31
      _b = b;
    4ce0:	mvn.w	sl, #39	; 0x27
    4ce4:	strb.w	sl, [r4, #50]	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce8:	mvn.w	sl, #120	; 0x78
    4cec:	strb.w	sl, [r4, #51]	; 0x33
      _s = s;
    4cf0:	mov.w	sl, #51	; 0x33
    4cf4:	strb.w	sl, [r4, #52]	; 0x34
      _b = b;
    4cf8:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cfc:	strb.w	r3, [r4, #57]	; 0x39
      _s = s;
      _b = b;
    4d00:	strb.w	sl, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d04:	mov.w	sl, #8
      _b = b;
    4d08:	strb.w	lr, [r4, #62]	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d0c:	strb.w	sl, [r4, #55]	; 0x37
      _b = b;
    4d10:	mvn.w	sl, #9
    4d14:	strb.w	lr, [r4, #65]	; 0x41
    4d18:	strb.w	sl, [r4, #56]	; 0x38
    4d1c:	mvn.w	sl, #4
    4d20:	strb.w	lr, [r4, #68]	; 0x44
    4d24:	strb.w	sl, [r4, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d28:	mov.w	sl, #95	; 0x5f
      _s = s;
      _b = b;
    4d2c:	strb.w	lr, [r4, #71]	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d30:	strb.w	sl, [r4, #75]	; 0x4b
      _s = s;
    4d34:	mov.w	sl, #5
    4d38:	strb.w	r3, [r4, #58]	; 0x3a
    4d3c:	strb.w	sl, [r4, #76]	; 0x4c
      _b = b;
    4d40:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d44:	strb.w	r3, [r4, #60]	; 0x3c
      _s = s;
      _b = b;
    4d48:	strb.w	sl, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d4c:	mvn.w	sl, #118	; 0x76
    4d50:	strb.w	r3, [r4, #61]	; 0x3d
    4d54:	strb.w	sl, [r4, #79]	; 0x4f
      _b = b;
    4d58:	mov.w	sl, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d5c:	strb.w	r3, [r4, #63]	; 0x3f
      _s = s;
      _b = b;
    4d60:	strb.w	sl, [r4, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d64:	mov.w	sl, #94	; 0x5e
      _s = s;
    4d68:	strb.w	r3, [r4, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d6c:	strb.w	sl, [r4, #81]	; 0x51
      _s = s;
    4d70:	mov.w	sl, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d74:	strb.w	r3, [r4, #66]	; 0x42
      _s = s;
    4d78:	strb.w	sl, [r4, #82]	; 0x52
      _b = b;
    4d7c:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d80:	strb.w	r3, [r4, #67]	; 0x43
      _b = b;
    4d84:	strb.w	sl, [r4, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d88:	mov.w	sl, #96	; 0x60
    4d8c:	strb.w	r3, [r4, #69]	; 0x45
    4d90:	strb.w	sl, [r4, #84]	; 0x54
      _s = s;
    4d94:	mov.w	sl, #14
    4d98:	strb.w	r3, [r4, #70]	; 0x46
    4d9c:	strb.w	sl, [r4, #85]	; 0x55
      _b = b;
    4da0:	mvn.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4da4:	strb.w	r3, [r4, #72]	; 0x48
      _s = s;
    4da8:	strb.w	r3, [r4, #73]	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dac:	strb.w	r8, [r4, #54]	; 0x36
    4db0:	strb.w	r9, [r4, #78]	; 0x4e
      _s = s;
      _b = b;
    4db4:	strb.w	sl, [r4, #74]	; 0x4a
    4db8:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dbc:	strb.w	r1, [r4, #108]	; 0x6c
      _s = s;
      _b = b;
    4dc0:	strb.w	sl, [r4, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dc4:	mov.w	sl, #46	; 0x2e
      _s = s;
    4dc8:	strb.w	lr, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dcc:	strb.w	sl, [r4, #87]	; 0x57
      _s = s;
    4dd0:	mov.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dd4:	strb.w	r6, [r4, #114]	; 0x72
      _s = s;
    4dd8:	strb.w	sl, [r4, #88]	; 0x58
      _b = b;
    4ddc:	mvn.w	sl, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4de0:	strb.w	r2, [r4, #117]	; 0x75
      _s = s;
      _b = b;
    4de4:	strb.w	sl, [r4, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4de8:	mov.w	sl, #60	; 0x3c
    4dec:	strb.w	r9, [r4, #102]	; 0x66
    4df0:	strb.w	sl, [r4, #90]	; 0x5a
      _s = s;
    4df4:	mov.w	sl, #121	; 0x79
    4df8:	strb.w	sl, [r4, #91]	; 0x5b
      _b = b;
    4dfc:	mov.w	sl, #113	; 0x71
    4e00:	strb.w	sl, [r4, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e04:	mov.w	sl, #105	; 0x69
    4e08:	strb.w	sl, [r4, #93]	; 0x5d
      _s = s;
    4e0c:	mvn.w	sl, #69	; 0x45
    4e10:	strb.w	sl, [r4, #94]	; 0x5e
      _b = b;
    4e14:	mov.w	sl, #101	; 0x65
    4e18:	strb.w	sl, [r4, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e1c:	mov.w	sl, #118	; 0x76
    4e20:	strb.w	sl, [r4, #96]	; 0x60
      _s = s;
    4e24:	mvn.w	sl, #39	; 0x27
    4e28:	strb.w	sl, [r4, #97]	; 0x61
      _b = b;
    4e2c:	mov.w	sl, #106	; 0x6a
    4e30:	strb.w	sl, [r4, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e34:	mvn.w	sl, #43	; 0x2b
    4e38:	strb.w	sl, [r4, #99]	; 0x63
      _s = s;
    4e3c:	mov.w	sl, #95	; 0x5f
    4e40:	strb.w	sl, [r4, #100]	; 0x64
      _b = b;
    4e44:	mov.w	sl, #32
    4e48:	strb.w	sl, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e4c:	mvn.w	sl, #104	; 0x68
    4e50:	strb.w	sl, [r4, #103]	; 0x67
      _b = b;
    4e54:	mov.w	sl, #64	; 0x40
    4e58:	strb.w	sl, [r4, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e5c:	mvn.w	sl, #121	; 0x79
    4e60:	strb.w	sl, [r4, #105]	; 0x69
      _s = s;
    4e64:	mvn.w	sl, #5
    4e68:	strb.w	sl, [r4, #106]	; 0x6a
      _b = b;
    4e6c:	mvn.w	sl, #88	; 0x58
    4e70:	strb.w	sl, [r4, #107]	; 0x6b
    4e74:	mvn.w	sl, #76	; 0x4c
    4e78:	strb.w	sl, [r4, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e7c:	mvn.w	sl, #122	; 0x7a
    4e80:	strb.w	sl, [r4, #111]	; 0x6f
      _s = s;
    4e84:	mov.w	sl, #106	; 0x6a
    4e88:	strb.w	sl, [r4, #112]	; 0x70
      _b = b;
    4e8c:	mvn.w	sl, #80	; 0x50
    4e90:	strb.w	sl, [r4, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e94:	mvn.w	sl, #111	; 0x6f
    4e98:	strb.w	sl, [r4, #115]	; 0x73
      _b = b;
    4e9c:	mvn.w	sl, #34	; 0x22
    4ea0:	strb.w	sl, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ea4:	mvn.w	sl, #16
    4ea8:	strb.w	sl, [r4, #118]	; 0x76
      _b = b;
    4eac:	mvn.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eb0:	strb.w	r2, [r4, #120]	; 0x78
      _s = s;
      _b = b;
    4eb4:	strb.w	sl, [r4, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4eb8:	mov.w	sl, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ebc:	strb.w	r2, [r4, #123]	; 0x7b
      _s = s;
    4ec0:	strb.w	sl, [r4, #130]	; 0x82
    4ec4:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ec8:	strb.w	r6, [r4, #126]	; 0x7e
      _s = s;
    4ecc:	strb.w	sl, [r4, #121]	; 0x79
      _b = b;
    4ed0:	mvn.w	sl, #30
    4ed4:	strb.w	lr, [r4, #134]	; 0x86
    4ed8:	strb.w	sl, [r4, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4edc:	mvn.w	sl, #59	; 0x3b
      _b = b;
    4ee0:	strb.w	lr, [r4, #137]	; 0x89
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ee4:	strb.w	sl, [r4, #124]	; 0x7c
      _b = b;
    4ee8:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eec:	strb.w	r3, [r4, #132]	; 0x84
      _s = s;
      _b = b;
    4ef0:	strb.w	sl, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ef4:	mov.w	sl, #87	; 0x57
    4ef8:	strb.w	r3, [r4, #133]	; 0x85
    4efc:	strb.w	sl, [r4, #127]	; 0x7f
      _b = b;
    4f00:	mvn.w	sl, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f04:	strb.w	r3, [r4, #135]	; 0x87
      _s = s;
      _b = b;
    4f08:	strb.w	sl, [r4, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f0c:	mvn.w	sl, #107	; 0x6b
      _s = s;
    4f10:	strb.w	r3, [r4, #136]	; 0x88
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f14:	strb.w	sl, [r4, #129]	; 0x81
      _s = s;
      _b = b;
    4f18:	mvn.w	sl, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f1c:	strb.w	r3, [r4, #138]	; 0x8a
      _s = s;
      _b = b;
    4f20:	strb.w	sl, [r4, #131]	; 0x83
    4f24:	mvn.w	sl, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f28:	strb.w	r3, [r4, #139]	; 0x8b
      _b = b;
    4f2c:	strb.w	sl, [r4, #140]	; 0x8c
    4f30:	strb.w	sl, [r4, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f34:	mov.w	sl, #113	; 0x71
    4f38:	strb.w	r3, [r4, #141]	; 0x8d
    4f3c:	strb.w	sl, [r4, #144]	; 0x90
      _s = s;
    4f40:	mov.w	sl, #3
    4f44:	strb.w	sl, [r4, #145]	; 0x91
      _b = b;
    4f48:	mvn.w	sl, #5
    4f4c:	strb.w	sl, [r4, #146]	; 0x92
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f50:	mov.w	sl, #51	; 0x33
    4f54:	strb.w	sl, [r4, #147]	; 0x93
      _s = s;
    4f58:	mov.w	sl, #10
    4f5c:	strb.w	sl, [r4, #148]	; 0x94
      _b = b;
    4f60:	mvn.w	sl, #36	; 0x24
    4f64:	strb.w	sl, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f68:	mov.w	sl, #121	; 0x79
    4f6c:	strb.w	sl, [r4, #150]	; 0x96
      _s = s;
    4f70:	mov.w	sl, #60	; 0x3c
    4f74:	strb.w	sl, [r4, #151]	; 0x97
      _b = b;
    4f78:	mov.w	sl, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f7c:	strb.w	r3, [r4, #142]	; 0x8e
      _b = b;
    4f80:	strb.w	sl, [r4, #152]	; 0x98
    4f84:	mov.w	sl, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f88:	strb.w	r0, [r4, #174]	; 0xae
      _s = s;
      _b = b;
    4f8c:	strb.w	sl, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f90:	mov.w	sl, #32
    4f94:	strb.w	r1, [r4, #183]	; 0xb7
    4f98:	strb.w	sl, [r4, #153]	; 0x99
      _s = s;
    4f9c:	mvn.w	sl, #82	; 0x52
    4fa0:	strb.w	r8, [r4, #184]	; 0xb8
    4fa4:	strb.w	sl, [r4, #154]	; 0x9a
      _b = b;
    4fa8:	mvn.w	sl, #105	; 0x69
    4fac:	strb.w	sl, [r4, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fb0:	mov.w	sl, #54	; 0x36
    4fb4:	strb.w	sl, [r4, #156]	; 0x9c
      _s = s;
    4fb8:	mov.w	sl, #97	; 0x61
    4fbc:	strb.w	sl, [r4, #157]	; 0x9d
      _b = b;
    4fc0:	mov.w	sl, #120	; 0x78
    4fc4:	strb.w	sl, [r4, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fc8:	mov.w	sl, #25
    4fcc:	strb.w	sl, [r4, #159]	; 0x9f
      _s = s;
    4fd0:	mvn.w	sl, #67	; 0x43
    4fd4:	strb.w	sl, [r4, #160]	; 0xa0
      _b = b;
    4fd8:	mov.w	sl, #123	; 0x7b
    4fdc:	strb.w	sl, [r4, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fe0:	mov.w	sl, #28
    4fe4:	strb.w	sl, [r4, #162]	; 0xa2
      _s = s;
    4fe8:	mvn.w	sl, #93	; 0x5d
    4fec:	strb.w	sl, [r4, #163]	; 0xa3
      _b = b;
    4ff0:	mov.w	sl, #85	; 0x55
    4ff4:	strb.w	sl, [r4, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ff8:	mov.w	sl, #97	; 0x61
    4ffc:	strb.w	sl, [r4, #165]	; 0xa5
      _s = s;
    5000:	mvn.w	sl, #81	; 0x51
    5004:	strb.w	sl, [r4, #166]	; 0xa6
      _b = b;
    5008:	mvn.w	sl, #118	; 0x76
    500c:	strb.w	sl, [r4, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5010:	mov.w	sl, #121	; 0x79
    5014:	strb.w	sl, [r4, #168]	; 0xa8
      _s = s;
    5018:	mvn.w	sl, #93	; 0x5d
    501c:	strb.w	sl, [r4, #169]	; 0xa9
      _b = b;
    5020:	mvn.w	sl, #101	; 0x65
    5024:	strb.w	sl, [r4, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5028:	mov.w	sl, #93	; 0x5d
    502c:	strb.w	sl, [r4, #172]	; 0xac
    5030:	mvn.w	sl, #104	; 0x68
    5034:	strb.w	sl, [r4, #175]	; 0xaf
      _b = b;
    5038:	mov.w	sl, #59	; 0x3b
    503c:	strb.w	sl, [r4, #176]	; 0xb0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5040:	mvn.w	sl, #118	; 0x76
    5044:	strb.w	sl, [r4, #177]	; 0xb1
      _s = s;
    5048:	mvn.w	sl, #32
    504c:	strb.w	sl, [r4, #178]	; 0xb2
      _b = b;
    5050:	mov.w	sl, #57	; 0x39
    5054:	strb.w	sl, [r4, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5058:	mvn.w	sl, #119	; 0x77
    505c:	strb.w	sl, [r4, #180]	; 0xb4
      _s = s;
    5060:	mvn.w	sl, #22
    5064:	strb.w	sl, [r4, #181]	; 0xb5
      _b = b;
    5068:	mov.w	sl, #59	; 0x3b
    506c:	strb.w	sl, [r4, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5070:	mvn.w	sl, #39	; 0x27
    5074:	strb.w	sl, [r4, #171]	; 0xab
      _s = s;
      _b = b;
    5078:	mov.w	sl, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    507c:	strb.w	r3, [r4, #210]	; 0xd2
      _s = s;
      _b = b;
    5080:	strb.w	sl, [r4, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5084:	mov.w	sl, #57	; 0x39
    5088:	strb.w	r3, [r4, #211]	; 0xd3
    508c:	strb.w	sl, [r4, #187]	; 0xbb
      _b = b;
    5090:	mvn.w	sl, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5094:	strb.w	r3, [r4, #213]	; 0xd5
      _s = s;
      _b = b;
    5098:	strb.w	sl, [r4, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    509c:	mvn.w	sl, #65	; 0x41
    50a0:	strb.w	r3, [r4, #214]	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50a4:	mov.w	r3, #106	; 0x6a
      _s = s;
    50a8:	strb.w	sl, [r4, #190]	; 0xbe
      _b = b;
    50ac:	mvn.w	sl, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50b0:	strb.w	r3, [r4, #216]	; 0xd8
      _s = s;
    50b4:	mov.w	r3, #66	; 0x42
      _b = b;
    50b8:	strb.w	sl, [r4, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50bc:	mvn.w	sl, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50c0:	strb.w	r2, [r4, #186]	; 0xba
      _s = s;
    50c4:	strb.w	sl, [r4, #193]	; 0xc1
      _b = b;
    50c8:	mvn.w	sl, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50cc:	strb.w	r2, [r4, #189]	; 0xbd
      _s = s;
      _b = b;
    50d0:	strb.w	sl, [r4, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50d4:	mvn.w	sl, #122	; 0x7a
    50d8:	strb.w	r2, [r4, #192]	; 0xc0
    50dc:	strb.w	sl, [r4, #195]	; 0xc3
      _s = s;
    50e0:	mov.w	sl, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50e4:	strb.w	r0, [r4, #198]	; 0xc6
      _s = s;
    50e8:	strb.w	sl, [r4, #196]	; 0xc4
      _b = b;
    50ec:	mvn.w	sl, #21
    50f0:	strb.w	sl, [r4, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50f4:	mov.w	sl, #44	; 0x2c
    50f8:	strb.w	sl, [r4, #199]	; 0xc7
      _b = b;
    50fc:	mvn.w	sl, #41	; 0x29
    5100:	strb.w	sl, [r4, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5104:	mvn.w	sl, #96	; 0x60
    5108:	strb.w	sl, [r4, #201]	; 0xc9
      _s = s;
    510c:	mov.w	sl, #35	; 0x23
    5110:	strb.w	sl, [r4, #202]	; 0xca
      _b = b;
    5114:	mvn.w	sl, #74	; 0x4a
    5118:	strb.w	sl, [r4, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    511c:	mvn.w	sl, #105	; 0x69
    5120:	strb.w	sl, [r4, #204]	; 0xcc
      _s = s;
    5124:	mov.w	sl, #26
    5128:	strb.w	sl, [r4, #205]	; 0xcd
      _b = b;
    512c:	mvn.w	sl, #66	; 0x42
    5130:	strb.w	sl, [r4, #206]	; 0xce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5134:	mov.w	sl, #127	; 0x7f
    5138:	strb.w	sl, [r4, #207]	; 0xcf
      _s = s;
    513c:	mov.w	sl, #1
    5140:	strb.w	sl, [r4, #208]	; 0xd0
      _b = b;
    5144:	mvn.w	sl, #10
    5148:	strb.w	sl, [r4, #209]	; 0xd1
    514c:	mvn.w	sl, #2
    5150:	strb.w	sl, [r4, #212]	; 0xd4
    5154:	strb.w	sl, [r4, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5158:	mvn.w	sl, #85	; 0x55
    515c:	strb.w	r3, [r4, #217]	; 0xd9
      _b = b;
    5160:	mvn.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5164:	strb.w	r7, [r4, #226]	; 0xe2
      _b = b;
    5168:	strb.w	r3, [r4, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    516c:	mov.w	r3, #102	; 0x66
      _s = s;
    5170:	strb.w	r7, [r4, #235]	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5174:	strb.w	r3, [r4, #219]	; 0xdb
      _s = s;
    5178:	mov.w	r3, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    517c:	strb.w	r2, [r4, #246]	; 0xf6
      _s = s;
    5180:	strb.w	r3, [r4, #220]	; 0xdc
      _b = b;
    5184:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5188:	strb.w	r8, [r4, #249]	; 0xf9
      _s = s;
      _b = b;
    518c:	strb.w	r3, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5190:	mov.w	r3, #31
    5194:	strb.w	r3, [r4, #222]	; 0xde
      _s = s;
    5198:	mvn.w	r3, #82	; 0x52
    519c:	strb.w	r3, [r4, #223]	; 0xdf
      _b = b;
    51a0:	mvn.w	r3, #36	; 0x24
    51a4:	strb.w	r3, [r4, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51a8:	mov.w	r3, #33	; 0x21
    51ac:	strb.w	r3, [r4, #225]	; 0xe1
      _s = s;
      _b = b;
    51b0:	mvn.w	r3, #15
    51b4:	strb.w	r3, [r4, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51b8:	mov.w	r3, #29
    51bc:	strb.w	r3, [r4, #228]	; 0xe4
      _s = s;
    51c0:	mvn.w	r3, #62	; 0x3e
    51c4:	strb.w	r3, [r4, #229]	; 0xe5
      _b = b;
    51c8:	mvn.w	r3, #67	; 0x43
    51cc:	strb.w	r3, [r4, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51d0:	mov.w	r3, #22
    51d4:	strb.w	r3, [r4, #231]	; 0xe7
      _s = s;
    51d8:	mvn.w	r3, #33	; 0x21
    51dc:	strb.w	r3, [r4, #232]	; 0xe8
      _b = b;
    51e0:	mvn.w	r3, #92	; 0x5c
    51e4:	strb.w	r3, [r4, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51e8:	mov.w	r3, #55	; 0x37
    51ec:	strb.w	r3, [r4, #234]	; 0xea
      _s = s;
      _b = b;
    51f0:	mvn.w	r3, #85	; 0x55
    51f4:	strb.w	r3, [r4, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51f8:	mov.w	r3, #77	; 0x4d
    51fc:	strb.w	r3, [r4, #237]	; 0xed
      _s = s;
    5200:	mvn.w	r3, #85	; 0x55
    5204:	strb.w	r3, [r4, #238]	; 0xee
      _b = b;
    5208:	mvn.w	r3, #86	; 0x56
    520c:	strb.w	r3, [r4, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5210:	mov.w	r3, #112	; 0x70
    5214:	strb.w	r3, [r4, #240]	; 0xf0
      _s = s;
    5218:	mov.w	r3, #73	; 0x49
    521c:	strb.w	r3, [r4, #241]	; 0xf1
      _b = b;
    5220:	mvn.w	r3, #74	; 0x4a
    5224:	strb.w	r3, [r4, #242]	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5228:	mvn.w	r3, #43	; 0x2b
    522c:	strb.w	r3, [r4, #243]	; 0xf3
      _s = s;
    5230:	mov.w	r3, #87	; 0x57
    5234:	strb.w	r3, [r4, #244]	; 0xf4
      _b = b;
    5238:	mov.w	r3, #32
    523c:	strb.w	r3, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5240:	mov.w	r3, #34	; 0x22
    5244:	strb.w	r3, [r4, #247]	; 0xf7
      _b = b;
    5248:	mov.w	r3, #110	; 0x6e
    524c:	strb.w	r3, [r4, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5250:	mvn.w	r3, #108	; 0x6c
    5254:	strb.w	r3, [r4, #250]	; 0xfa
      _b = b;
    5258:	mov.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    525c:	strb.w	r1, [r4, #258]	; 0x102
      _s = s;
      _b = b;
    5260:	strb.w	r3, [r4, #251]	; 0xfb
    5264:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5268:	strb.w	r1, [r4, #282]	; 0x11a
      _s = s;
      _b = b;
    526c:	strb.w	r3, [r4, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5270:	mvn.w	r3, #120	; 0x78
    5274:	strb.w	r6, [r4, #279]	; 0x117
    5278:	strb.w	r3, [r4, #252]	; 0xfc
      _s = s;
    527c:	mvn.w	r3, #18
    5280:	strb.w	r3, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5284:	mvn.w	r3, #118	; 0x76
    5288:	strb.w	r3, [r4, #255]	; 0xff
      _s = s;
    528c:	mvn.w	r3, #30
    5290:	strb.w	r3, [r4, #256]	; 0x100
      _b = b;
    5294:	mov.w	r3, #51	; 0x33
    5298:	strb.w	r3, [r4, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    529c:	mov.w	r3, #69	; 0x45
    52a0:	strb.w	r3, [r4, #259]	; 0x103
      _b = b;
    52a4:	mov.w	r3, #99	; 0x63
    52a8:	strb.w	r3, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ac:	mvn.w	r3, #122	; 0x7a
    52b0:	strb.w	r3, [r4, #261]	; 0x105
      _s = s;
    52b4:	mov.w	r3, #48	; 0x30
    52b8:	strb.w	r3, [r4, #262]	; 0x106
      _b = b;
    52bc:	mvn.w	r3, #62	; 0x3e
    52c0:	strb.w	r3, [r4, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52c4:	mvn.w	r3, #119	; 0x77
    52c8:	strb.w	r3, [r4, #264]	; 0x108
      _s = s;
    52cc:	mov.w	r3, #55	; 0x37
    52d0:	strb.w	r3, [r4, #265]	; 0x109
      _b = b;
    52d4:	mvn.w	r3, #24
    52d8:	strb.w	r3, [r4, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52dc:	mvn.w	r3, #120	; 0x78
    52e0:	strb.w	r3, [r4, #267]	; 0x10b
      _s = s;
    52e4:	mov.w	r3, #17
    52e8:	strb.w	r3, [r4, #268]	; 0x10c
      _b = b;
    52ec:	mvn.w	r3, #18
    52f0:	strb.w	r3, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52f4:	mvn.w	r3, #109	; 0x6d
    52f8:	strb.w	r3, [r4, #270]	; 0x10e
      _s = s;
    52fc:	mov.w	r3, #69	; 0x45
    5300:	strb.w	r3, [r4, #271]	; 0x10f
      _b = b;
    5304:	mvn.w	r3, #54	; 0x36
    5308:	strb.w	r3, [r4, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    530c:	mvn.w	r3, #109	; 0x6d
    5310:	strb.w	r3, [r4, #273]	; 0x111
      _s = s;
    5314:	mov.w	r3, #72	; 0x48
    5318:	strb.w	r3, [r4, #274]	; 0x112
      _b = b;
    531c:	mvn.w	r3, #52	; 0x34
    5320:	strb.w	r3, [r4, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5324:	mvn.w	r3, #106	; 0x6a
    5328:	strb.w	r3, [r4, #276]	; 0x114
      _s = s;
    532c:	mov.w	r3, #35	; 0x23
    5330:	strb.w	r3, [r4, #277]	; 0x115
      _b = b;
    5334:	mvn.w	r3, #46	; 0x2e
    5338:	strb.w	r3, [r4, #278]	; 0x116
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    533c:	mov.w	r3, #66	; 0x42
    5340:	strb.w	r3, [r4, #280]	; 0x118
    5344:	mov.w	r3, #59	; 0x3b
    5348:	strb.w	r3, [r4, #283]	; 0x11b
      _b = b;
    534c:	mvn.w	r3, #33	; 0x21
    5350:	strb.w	r3, [r4, #281]	; 0x119
    5354:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5358:	strb.w	r0, [r4, #298]	; 0x12a
      _b = b;
    535c:	strb.w	r3, [r4, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5360:	mov.w	r3, #65	; 0x41
    5364:	strb.w	r3, [r4, #289]	; 0x121
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5368:	mvn.w	r3, #111	; 0x6f
    536c:	strb.w	r3, [r4, #285]	; 0x11d
      _s = s;
      _b = b;
    5370:	mvn.w	r3, #9
    5374:	strb.w	r3, [r4, #287]	; 0x11f
    5378:	mov.w	r3, #58	; 0x3a
    537c:	strb.w	r3, [r4, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5380:	mov.w	r3, #59	; 0x3b
    5384:	strb.w	r3, [r4, #292]	; 0x124
      _b = b;
    5388:	mvn.w	r3, #49	; 0x31
    538c:	strb.w	r3, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5390:	mov.w	r3, #34	; 0x22
    5394:	strb.w	r3, [r4, #294]	; 0x126
      _s = s;
    5398:	mvn.w	r3, #40	; 0x28
    539c:	strb.w	r3, [r4, #295]	; 0x127
      _b = b;
    53a0:	mvn.w	r3, #22
    53a4:	strb.w	r3, [r4, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53a8:	mov.w	r3, #31
    53ac:	strb.w	r3, [r4, #297]	; 0x129
      _s = s;
      _b = b;
    53b0:	mvn.w	r3, #31
    53b4:	strb.w	r3, [r4, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53b8:	mov.w	r3, #28
    53bc:	strb.w	r3, [r4, #300]	; 0x12c
      _s = s;
    53c0:	mvn.w	r3, #59	; 0x3b
    53c4:	strb.w	r3, [r4, #301]	; 0x12d
      _b = b;
    53c8:	mvn.w	r3, #72	; 0x48
    53cc:	strb.w	r3, [r4, #302]	; 0x12e
    53d0:	mvn.w	r3, #54	; 0x36
    53d4:	strb.w	r3, [r4, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53d8:	mov.w	r3, #29
    53dc:	strb.w	r3, [r4, #306]	; 0x132
      _s = s;
      _b = b;
    53e0:	mvn.w	r3, #62	; 0x3e
    53e4:	strb.w	r3, [r4, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53e8:	mov.w	r3, #88	; 0x58
    53ec:	strb.w	r3, [r4, #309]	; 0x135
      _s = s;
    53f0:	mov.w	r3, #61	; 0x3d
    53f4:	strb.w	r3, [r4, #310]	; 0x136
      _b = b;
    53f8:	mvn.w	r3, #61	; 0x3d
    53fc:	strb.w	r3, [r4, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5400:	mov.w	r3, #112	; 0x70
    5404:	strb.w	r3, [r4, #312]	; 0x138
      _s = s;
      _b = b;
    5408:	mvn.w	r3, #78	; 0x4e
    540c:	strb.w	r3, [r4, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5410:	mov.w	r3, #123	; 0x7b
    5414:	strb.w	r3, [r4, #315]	; 0x13b
      _s = s;
    5418:	mov.w	r3, #22
    541c:	strb.w	r3, [r4, #316]	; 0x13c
    5420:	mov.w	r3, #5
    5424:	strb.w	r3, [r4, #286]	; 0x11e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5428:	mvn.w	r3, #32
    542c:	strb.w	r3, [r4, #288]	; 0x120
    5430:	mov.w	r3, #77	; 0x4d
    5434:	strb.w	r3, [r4, #291]	; 0x123
    5438:	mov.w	r3, #20
    543c:	strb.w	r3, [r4, #303]	; 0x12f
      _s = s;
    5440:	mvn.w	r3, #120	; 0x78
    5444:	strb.w	r3, [r4, #304]	; 0x130
    5448:	mvn.w	r3, #96	; 0x60
    544c:	strb.w	r3, [r4, #307]	; 0x133
    5450:	mov.w	r3, #48	; 0x30
    5454:	strb.w	r3, [r4, #313]	; 0x139
      _b = b;
    5458:	mvn.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    545c:	strb.w	r2, [r4, #321]	; 0x141
      _s = s;
      _b = b;
    5460:	strb.w	r3, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5464:	mov.w	r3, #123	; 0x7b
    5468:	strb.w	r1, [r4, #324]	; 0x144
    546c:	strb.w	r3, [r4, #318]	; 0x13e
      _s = s;
    5470:	mov.w	r3, #22
      _b = b;
    5474:	strb.w	r0, [r4, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5478:	strb.w	r3, [r4, #319]	; 0x13f
      _b = b;
    547c:	mvn.w	r3, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5480:	strb.w	r1, [r4, #333]	; 0x14d
      _s = s;
      _b = b;
    5484:	strb.w	r3, [r4, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5488:	mov.w	r3, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    548c:	strb.w	r0, [r4, #339]	; 0x153
      _s = s;
    5490:	strb.w	r3, [r4, #322]	; 0x142
      _b = b;
    5494:	mvn.w	r3, #73	; 0x49
    5498:	strb.w	r3, [r4, #323]	; 0x143
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    549c:	mvn.w	r3, #4
    54a0:	strb.w	r3, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54a4:	mov.w	r3, #125	; 0x7d
    54a8:	strb.w	r3, [r4, #327]	; 0x147
      _s = s;
    54ac:	mov.w	r3, #115	; 0x73
    54b0:	strb.w	r3, [r4, #328]	; 0x148
      _b = b;
    54b4:	mvn.w	r3, #102	; 0x66
    54b8:	strb.w	r3, [r4, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54bc:	mov.w	r3, #127	; 0x7f
    54c0:	strb.w	r3, [r4, #330]	; 0x14a
      _s = s;
    54c4:	mov.w	r3, #57	; 0x39
    54c8:	strb.w	r3, [r4, #331]	; 0x14b
      _b = b;
    54cc:	mvn.w	r3, #86	; 0x56
    54d0:	strb.w	r3, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54d4:	mov.w	r3, #74	; 0x4a
    54d8:	strb.w	r3, [r4, #334]	; 0x14e
      _b = b;
    54dc:	mvn.w	r3, #118	; 0x76
    54e0:	strb.w	r3, [r4, #335]	; 0x14f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54e4:	mvn.w	r3, #114	; 0x72
    54e8:	strb.w	r3, [r4, #336]	; 0x150
      _s = s;
    54ec:	mvn.w	r3, #62	; 0x3e
    54f0:	strb.w	r3, [r4, #337]	; 0x151
      _b = b;
    54f4:	mov.w	r3, #121	; 0x79
    54f8:	strb.w	r3, [r4, #338]	; 0x152
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54fc:	mov.w	r3, #115	; 0x73
    5500:	strb.w	r3, [r4, #340]	; 0x154
      _b = b;
    5504:	mvn.w	r3, #102	; 0x66
    5508:	strb.w	r3, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    550c:	mvn.w	r3, #107	; 0x6b
    5510:	strb.w	r3, [r4, #342]	; 0x156
      _s = s;
    5514:	mov.w	r3, #94	; 0x5e
    5518:	strb.w	r3, [r4, #343]	; 0x157
      _b = b;
    551c:	mvn.w	r3, #72	; 0x48
    5520:	strb.w	r3, [r4, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5524:	mvn.w	r3, #100	; 0x64
    5528:	strb.w	r3, [r4, #345]	; 0x159
      _s = s;
    552c:	mov.w	r3, #45	; 0x2d
    5530:	strb.w	r3, [r4, #346]	; 0x15a
      _b = b;
    5534:	mvn.w	r3, #74	; 0x4a
    5538:	strb.w	r3, [r4, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    553c:	mvn.w	r3, #122	; 0x7a
    5540:	strb.w	r3, [r4, #348]	; 0x15c
      _s = s;
    5544:	mov.w	r3, #41	; 0x29
    5548:	strb.w	r3, [r4, #349]	; 0x15d
      _b = b;
    554c:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5550:	strb.w	r1, [r4, #351]	; 0x15f
      _s = s;
      _b = b;
    5554:	strb.w	r3, [r4, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5558:	mov.w	r3, #54	; 0x36
    555c:	strb.w	r6, [r4, #354]	; 0x162
    5560:	strb.w	r3, [r4, #378]	; 0x17a
      _s = s;
      _b = b;
    5564:	mvn.w	r3, #13
    5568:	strb.w	r3, [r4, #353]	; 0x161
    556c:	mvn.w	r3, #23
    5570:	strb.w	r3, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5574:	mvn.w	r3, #63	; 0x3f
    5578:	strb.w	r3, [r4, #358]	; 0x166
      _b = b;
    557c:	strb.w	r3, [r4, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5580:	mvn.w	r3, #37	; 0x25
    5584:	strb.w	r3, [r4, #360]	; 0x168
      _s = s;
    5588:	mov.w	r3, #76	; 0x4c
    558c:	strb.w	r3, [r4, #361]	; 0x169
      _b = b;
    5590:	mov.w	r3, #50	; 0x32
    5594:	strb.w	r3, [r4, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5598:	mov.w	r3, #101	; 0x65
    559c:	strb.w	r3, [r4, #363]	; 0x16b
      _s = s;
    55a0:	mov.w	r3, #92	; 0x5c
    55a4:	strb.w	r3, [r4, #364]	; 0x16c
      _b = b;
    55a8:	mvn.w	r3, #95	; 0x5f
    55ac:	strb.w	r3, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55b0:	mov.w	r3, #40	; 0x28
    55b4:	strb.w	r3, [r4, #366]	; 0x16e
      _s = s;
    55b8:	mvn.w	r3, #89	; 0x59
    55bc:	strb.w	r3, [r4, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55c0:	mov.w	r3, #22
    55c4:	strb.w	r3, [r4, #369]	; 0x171
      _s = s;
      _b = b;
    55c8:	mvn.w	r3, #99	; 0x63
    55cc:	strb.w	r3, [r4, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55d0:	mov.w	r3, #21
    55d4:	strb.w	r3, [r4, #372]	; 0x174
      _s = s;
    55d8:	mvn.w	r3, #12
    55dc:	strb.w	r3, [r4, #373]	; 0x175
      _b = b;
    55e0:	mvn.w	r3, #71	; 0x47
    55e4:	strb.w	r3, [r4, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55e8:	mov.w	r3, #24
    55ec:	strb.w	r3, [r4, #375]	; 0x177
      _s = s;
      _b = b;
    55f0:	mvn.w	r3, #46	; 0x2e
    55f4:	strb.w	r3, [r4, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55f8:	mvn.w	r3, #89	; 0x59
    55fc:	strb.w	r3, [r4, #379]	; 0x17b
      _b = b;
    5600:	mvn.w	r3, #108	; 0x6c
    5604:	strb.w	r3, [r4, #380]	; 0x17c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5608:	mov.w	r3, #111	; 0x6f
    560c:	strb.w	r3, [r4, #381]	; 0x17d
      _s = s;
    5610:	mvn.w	r3, #77	; 0x4d
    5614:	strb.w	r3, [r4, #382]	; 0x17e
    5618:	mov.w	r3, #85	; 0x55
    561c:	strb.w	r3, [r4, #352]	; 0x160
    5620:	mvn.w	r3, #79	; 0x4f
    5624:	strb.w	r3, [r4, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5628:	mvn.w	r3, #122	; 0x7a
    562c:	strb.w	r3, [r4, #357]	; 0x165
      _s = s;
      _b = b;
    5630:	mvn.w	r3, #79	; 0x4f
    5634:	strb.w	r3, [r4, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5638:	mvn.w	r3, #32
    563c:	strb.w	r3, [r4, #370]	; 0x172
    5640:	mvn.w	r3, #4
    5644:	strb.w	r3, [r4, #376]	; 0x178
      _b = b;
    5648:	mov.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    564c:	strb.w	r1, [r4, #393]	; 0x189
      _s = s;
      _b = b;
    5650:	strb.w	r3, [r4, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5654:	mov.w	r3, #95	; 0x5f
    5658:	strb.w	r1, [r4, #399]	; 0x18f
    565c:	strb.w	r3, [r4, #384]	; 0x180
      _s = s;
    5660:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5664:	strb.w	r9, [r4, #402]	; 0x192
      _s = s;
    5668:	strb.w	r3, [r4, #385]	; 0x181
      _b = b;
    566c:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5670:	strb.w	r8, [r4, #405]	; 0x195
      _s = s;
      _b = b;
    5674:	strb.w	r3, [r4, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5678:	mov.w	r3, #123	; 0x7b
    567c:	strb.w	r9, [r4, #411]	; 0x19b
    5680:	strb.w	r3, [r4, #387]	; 0x183
      _s = s;
    5684:	mov.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5688:	strb.w	fp, [r4, #414]	; 0x19e
      _s = s;
    568c:	strb.w	r3, [r4, #388]	; 0x184
      _b = b;
    5690:	mov.w	r3, #70	; 0x46
    5694:	strb.w	r3, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5698:	mov.w	r3, #127	; 0x7f
    569c:	strb.w	r3, [r4, #390]	; 0x186
      _s = s;
    56a0:	mov.w	r3, #47	; 0x2f
    56a4:	strb.w	r3, [r4, #391]	; 0x187
      _b = b;
    56a8:	mvn.w	r3, #109	; 0x6d
    56ac:	strb.w	r3, [r4, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56b0:	mvn.w	r3, #83	; 0x53
    56b4:	strb.w	r3, [r4, #394]	; 0x18a
      _b = b;
    56b8:	mvn.w	r3, #100	; 0x64
    56bc:	strb.w	r3, [r4, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56c0:	mov.w	r3, #126	; 0x7e
    56c4:	strb.w	r3, [r4, #396]	; 0x18c
      _s = s;
    56c8:	mov.w	r3, #72	; 0x48
    56cc:	strb.w	r3, [r4, #397]	; 0x18d
      _b = b;
    56d0:	mvn.w	r3, #51	; 0x33
    56d4:	strb.w	r3, [r4, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56d8:	mov.w	r3, #57	; 0x39
    56dc:	strb.w	r3, [r4, #400]	; 0x190
      _b = b;
    56e0:	mvn.w	r3, #24
    56e4:	strb.w	r3, [r4, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56e8:	mov.w	r3, #99	; 0x63
    56ec:	strb.w	r3, [r4, #403]	; 0x193
      _b = b;
    56f0:	mvn.w	r3, #28
    56f4:	strb.w	r3, [r4, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56f8:	mov.w	r3, #95	; 0x5f
    56fc:	strb.w	r3, [r4, #406]	; 0x196
      _b = b;
    5700:	mvn.w	r3, #29
    5704:	strb.w	r3, [r4, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5708:	mvn.w	r3, #122	; 0x7a
    570c:	strb.w	r3, [r4, #408]	; 0x198
      _s = s;
    5710:	mov.w	r3, #99	; 0x63
    5714:	strb.w	r3, [r4, #409]	; 0x199
      _b = b;
    5718:	mvn.w	r3, #52	; 0x34
    571c:	strb.w	r3, [r4, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5720:	mov.w	r3, #98	; 0x62
    5724:	strb.w	r3, [r4, #412]	; 0x19c
      _b = b;
    5728:	mvn.w	r3, #69	; 0x45
    572c:	strb.w	r3, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5730:	mov.w	r3, #116	; 0x74
    5734:	strb.w	r3, [r4, #415]	; 0x19f
      _b = b;
    5738:	mov.w	r3, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    573c:	strb.w	r1, [r4, #429]	; 0x1ad
      _s = s;
      _b = b;
    5740:	strb.w	r3, [r4, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5744:	mov.w	r3, #66	; 0x42
      _b = b;
    5748:	strb.w	r0, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    574c:	strb.w	r3, [r4, #442]	; 0x1ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5750:	mvn.w	r3, #108	; 0x6c
    5754:	strb.w	r6, [r4, #420]	; 0x1a4
    5758:	strb.w	r3, [r4, #417]	; 0x1a1
      _s = s;
    575c:	mov.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5760:	strb.w	r2, [r4, #423]	; 0x1a7
      _s = s;
    5764:	strb.w	r3, [r4, #418]	; 0x1a2
      _b = b;
    5768:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    576c:	strb.w	r6, [r4, #426]	; 0x1aa
      _s = s;
      _b = b;
    5770:	strb.w	r3, [r4, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5774:	mvn.w	r3, #78	; 0x4e
      _b = b;
    5778:	strb.w	fp, [r4, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    577c:	strb.w	r3, [r4, #424]	; 0x1a8
      _b = b;
    5780:	mvn.w	r3, #22
    5784:	strb.w	r3, [r4, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5788:	mvn.w	r3, #49	; 0x31
    578c:	strb.w	r3, [r4, #427]	; 0x1ab
      _b = b;
    5790:	mvn.w	r3, #26
    5794:	strb.w	r3, [r4, #428]	; 0x1ac
    5798:	mvn.w	r3, #55	; 0x37
    579c:	strb.w	r3, [r4, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57a0:	mvn.w	r3, #95	; 0x5f
    57a4:	strb.w	r3, [r4, #432]	; 0x1b0
      _s = s;
    57a8:	mov.w	r3, #37	; 0x25
    57ac:	strb.w	r3, [r4, #433]	; 0x1b1
      _b = b;
    57b0:	mov.w	r3, #62	; 0x3e
    57b4:	strb.w	r3, [r4, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57b8:	mov.w	r3, #116	; 0x74
    57bc:	strb.w	r3, [r4, #435]	; 0x1b3
      _s = s;
    57c0:	mov.w	r3, #123	; 0x7b
    57c4:	strb.w	r3, [r4, #436]	; 0x1b4
    57c8:	mov.w	r3, #96	; 0x60
    57cc:	strb.w	r3, [r4, #439]	; 0x1b7
      _b = b;
    57d0:	mvn.w	r3, #30
    57d4:	strb.w	r3, [r4, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57d8:	mov.w	r3, #38	; 0x26
    57dc:	strb.w	r3, [r4, #444]	; 0x1bc
    57e0:	mov.w	r3, #112	; 0x70
    57e4:	strb.w	r3, [r4, #447]	; 0x1bf
      _s = s;
    57e8:	mov.w	r3, #118	; 0x76
    57ec:	strb.w	r3, [r4, #448]	; 0x1c0
    57f0:	mov.w	r3, #73	; 0x49
    57f4:	strb.w	r3, [r4, #421]	; 0x1a5
    57f8:	mvn.w	r3, #96	; 0x60
    57fc:	strb.w	r3, [r4, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5800:	mov.w	r3, #114	; 0x72
    5804:	strb.w	r3, [r4, #438]	; 0x1b6
      _s = s;
      _b = b;
    5808:	mvn.w	r3, #39	; 0x27
    580c:	strb.w	r3, [r4, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5810:	mov.w	r3, #106	; 0x6a
    5814:	strb.w	r3, [r4, #441]	; 0x1b9
      _s = s;
    5818:	mvn.w	r3, #102	; 0x66
    581c:	strb.w	r3, [r4, #445]	; 0x1bd
      _b = b;
    5820:	mvn.w	r3, #79	; 0x4f
    5824:	strb.w	r3, [r4, #446]	; 0x1be
    5828:	mvn.w	r3, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    582c:	strb.w	r7, [r4, #471]	; 0x1d7
      _s = s;
      _b = b;
    5830:	strb.w	r3, [r4, #449]	; 0x1c1
    5834:	mvn.w	r3, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5838:	strb.w	r0, [r4, #478]	; 0x1de
      _b = b;
    583c:	strb.w	r3, [r4, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5840:	mov.w	r3, #116	; 0x74
    5844:	strb.w	r6, [r4, #465]	; 0x1d1
    5848:	strb.w	r3, [r4, #450]	; 0x1c2
      _s = s;
      _b = b;
    584c:	mov.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5850:	strb.w	r9, [r4, #469]	; 0x1d5
      _b = b;
    5854:	strb.w	r3, [r4, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5858:	mov.w	r3, #98	; 0x62
    585c:	strb.w	r3, [r4, #453]	; 0x1c5
      _s = s;
    5860:	mvn.w	r3, #110	; 0x6e
    5864:	strb.w	r3, [r4, #454]	; 0x1c6
      _b = b;
    5868:	mov.w	r3, #102	; 0x66
    586c:	strb.w	r3, [r4, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5870:	mov.w	r3, #105	; 0x69
    5874:	strb.w	r3, [r4, #456]	; 0x1c8
      _s = s;
    5878:	mov.w	r3, #124	; 0x7c
    587c:	strb.w	r3, [r4, #457]	; 0x1c9
      _b = b;
    5880:	mov.w	r3, #43	; 0x2b
    5884:	strb.w	r3, [r4, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5888:	mvn.w	r3, #52	; 0x34
    588c:	strb.w	r3, [r4, #459]	; 0x1cb
      _s = s;
    5890:	mov.w	r3, #95	; 0x5f
    5894:	strb.w	r3, [r4, #460]	; 0x1cc
      _b = b;
    5898:	mov.w	r3, #24
    589c:	strb.w	r3, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58a0:	mov.w	r3, #121	; 0x79
    58a4:	strb.w	r3, [r4, #462]	; 0x1ce
      _s = s;
    58a8:	mvn.w	r3, #73	; 0x49
    58ac:	strb.w	r3, [r4, #466]	; 0x1d2
      _b = b;
    58b0:	mvn.w	r3, #80	; 0x50
    58b4:	strb.w	r3, [r4, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58b8:	mvn.w	r3, #118	; 0x76
    58bc:	strb.w	r3, [r4, #468]	; 0x1d4
    58c0:	mvn.w	r3, #109	; 0x6d
    58c4:	strb.w	r3, [r4, #474]	; 0x1da
      _s = s;
    58c8:	mvn.w	r3, #110	; 0x6e
    58cc:	strb.w	r3, [r4, #475]	; 0x1db
      _b = b;
    58d0:	mvn.w	r3, #37	; 0x25
    58d4:	strb.w	r3, [r4, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58d8:	mvn.w	r3, #114	; 0x72
    58dc:	strb.w	r3, [r4, #477]	; 0x1dd
    58e0:	mvn.w	r3, #111	; 0x6f
    58e4:	strb.w	r3, [r4, #480]	; 0x1e0
      _s = s;
    58e8:	mvn.w	r3, #81	; 0x51
    58ec:	strb.w	r3, [r4, #481]	; 0x1e1
    58f0:	mvn.w	r3, #34	; 0x22
    58f4:	strb.w	r3, [r4, #451]	; 0x1c3
    58f8:	mvn.w	r3, #121	; 0x79
    58fc:	strb.w	r3, [r4, #463]	; 0x1cf
      _b = b;
    5900:	mov.w	r3, #106	; 0x6a
    5904:	strb.w	r3, [r4, #464]	; 0x1d0
    5908:	mvn.w	r3, #34	; 0x22
    590c:	strb.w	r3, [r4, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5910:	mvn.w	r3, #45	; 0x2d
    5914:	strb.w	r3, [r4, #472]	; 0x1d8
      _b = b;
    5918:	strb.w	r3, [r4, #473]	; 0x1d9
    591c:	mvn.w	r3, #31
    5920:	strb.w	ip, [r4, #485]	; 0x1e5
    5924:	strb.w	r3, [r4, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5928:	mvn.w	r3, #109	; 0x6d
    592c:	strb.w	r2, [r4, #504]	; 0x1f8
    5930:	strb.w	r3, [r4, #483]	; 0x1e3
      _s = s;
    5934:	mvn.w	r3, #101	; 0x65
    5938:	strb.w	r6, [r4, #508]	; 0x1fc
    593c:	strb.w	r3, [r4, #484]	; 0x1e4
    5940:	mov.w	r3, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5944:	strb.w	r6, [r4, #510]	; 0x1fe
      _s = s;
    5948:	strb.w	r3, [r4, #487]	; 0x1e7
      _b = b;
    594c:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5950:	strb.w	r8, [r4, #486]	; 0x1e6
      _s = s;
      _b = b;
    5954:	strb.w	r3, [r4, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5958:	mov.w	r3, #119	; 0x77
    595c:	strb.w	r3, [r4, #489]	; 0x1e9
      _s = s;
    5960:	mov.w	r3, #37	; 0x25
    5964:	strb.w	r3, [r4, #490]	; 0x1ea
      _b = b;
    5968:	mvn.w	r3, #105	; 0x69
    596c:	strb.w	r3, [r4, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5970:	mov.w	r3, #113	; 0x71
    5974:	strb.w	r3, [r4, #492]	; 0x1ec
      _s = s;
    5978:	mov.w	r3, #52	; 0x34
    597c:	strb.w	r3, [r4, #493]	; 0x1ed
      _b = b;
    5980:	mvn.w	r3, #43	; 0x2b
    5984:	strb.w	r3, [r4, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5988:	mov.w	r3, #121	; 0x79
    598c:	strb.w	r3, [r4, #495]	; 0x1ef
      _s = s;
    5990:	mov.w	r3, #126	; 0x7e
    5994:	strb.w	r3, [r4, #496]	; 0x1f0
      _b = b;
    5998:	mvn.w	r3, #47	; 0x2f
    599c:	strb.w	r3, [r4, #497]	; 0x1f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59a0:	mov.w	r3, #126	; 0x7e
    59a4:	strb.w	r3, [r4, #498]	; 0x1f2
      _s = s;
    59a8:	mvn.w	r3, #58	; 0x3a
    59ac:	strb.w	r3, [r4, #499]	; 0x1f3
      _b = b;
    59b0:	mvn.w	r3, #65	; 0x41
    59b4:	strb.w	r3, [r4, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59b8:	mov.w	r3, #127	; 0x7f
    59bc:	strb.w	r3, [r4, #501]	; 0x1f5
      _s = s;
    59c0:	mvn.w	r3, #107	; 0x6b
    59c4:	strb.w	r3, [r4, #502]	; 0x1f6
      _b = b;
    59c8:	mvn.w	r3, #78	; 0x4e
    59cc:	strb.w	r3, [r4, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59d0:	mov.w	r3, #97	; 0x61
    59d4:	strb.w	r3, [r4, #505]	; 0x1f9
      _b = b;
    59d8:	mvn.w	r3, #96	; 0x60
    59dc:	strb.w	r3, [r4, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59e0:	mov.w	r3, #127	; 0x7f
    59e4:	strb.w	r3, [r4, #507]	; 0x1fb
      _s = s;
      _b = b;
    59e8:	mvn.w	r3, #67	; 0x43
    59ec:	strb.w	r3, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59f0:	mvn.w	r3, #34	; 0x22
    59f4:	strb.w	r3, [r4, #511]	; 0x1ff
      _b = b;
    59f8:	mvn.w	r3, #110	; 0x6e
    59fc:	strb.w	r3, [r4, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a00:	mvn.w	r3, #120	; 0x78
    5a04:	strb.w	r3, [r4, #513]	; 0x201
      _s = s;
    5a08:	mvn.w	r3, #28
    5a0c:	strb.w	r3, [r4, #514]	; 0x202
      _b = b;
    5a10:	mvn.w	r3, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a14:	strb.w	lr, [r4, #517]	; 0x205
      _b = b;
    5a18:	strb.w	r3, [r4, #515]	; 0x203
    5a1c:	mov.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a20:	strb.w	lr, [r4, #541]	; 0x21d
      _b = b;
    5a24:	strb.w	r3, [r4, #533]	; 0x215
    5a28:	mvn.w	r3, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a2c:	strb.w	r7, [r4, #543]	; 0x21f
      _s = s;
      _b = b;
    5a30:	strb.w	r3, [r4, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a34:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a38:	strb.w	fp, [r4, #546]	; 0x222
      _s = s;
    5a3c:	strb.w	r3, [r4, #520]	; 0x208
      _b = b;
    5a40:	mvn.w	r3, #78	; 0x4e
    5a44:	strb.w	r3, [r4, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a48:	mov.w	r3, #111	; 0x6f
    5a4c:	strb.w	r3, [r4, #522]	; 0x20a
      _s = s;
    5a50:	mvn.w	r3, #104	; 0x68
    5a54:	strb.w	r3, [r4, #523]	; 0x20b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a58:	mov.w	r3, #99	; 0x63
    5a5c:	strb.w	r3, [r4, #525]	; 0x20d
      _s = s;
      _b = b;
    5a60:	mov.w	r3, #60	; 0x3c
    5a64:	strb.w	r3, [r4, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a68:	mvn.w	r3, #64	; 0x40
    5a6c:	strb.w	r3, [r4, #528]	; 0x210
      _s = s;
      _b = b;
    5a70:	mov.w	r3, #24
    5a74:	strb.w	r3, [r4, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a78:	mvn.w	r3, #64	; 0x40
    5a7c:	strb.w	r3, [r4, #531]	; 0x213
      _s = s;
    5a80:	mov.w	r3, #102	; 0x66
    5a84:	strb.w	r3, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a88:	mov.w	r3, #127	; 0x7f
    5a8c:	strb.w	r3, [r4, #534]	; 0x216
      _s = s;
      _b = b;
    5a90:	mov.w	r3, #121	; 0x79
    5a94:	strb.w	r3, [r4, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a98:	mvn.w	r3, #61	; 0x3d
    5a9c:	strb.w	r3, [r4, #538]	; 0x21a
      _b = b;
    5aa0:	mvn.w	r3, #37	; 0x25
    5aa4:	strb.w	r3, [r4, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5aa8:	mvn.w	r3, #111	; 0x6f
    5aac:	strb.w	r3, [r4, #540]	; 0x21c
      _s = s;
      _b = b;
    5ab0:	mvn.w	r3, #54	; 0x36
    5ab4:	strb.w	r3, [r4, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ab8:	mov.w	r3, #121	; 0x79
    5abc:	strb.w	r3, [r4, #544]	; 0x220
      _b = b;
    5ac0:	mvn.w	r3, #35	; 0x23
    5ac4:	strb.w	r3, [r4, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ac8:	mvn.w	r3, #120	; 0x78
    5acc:	strb.w	r3, [r4, #516]	; 0x204
    5ad0:	mvn.w	r3, #119	; 0x77
    5ad4:	strb.w	r3, [r4, #519]	; 0x207
      _s = s;
      _b = b;
    5ad8:	strb.w	r3, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5adc:	mov.w	r3, #114	; 0x72
    5ae0:	strb.w	r3, [r4, #526]	; 0x20e
    5ae4:	mov.w	r3, #106	; 0x6a
    5ae8:	strb.w	r3, [r4, #529]	; 0x211
    5aec:	mov.w	r3, #115	; 0x73
    5af0:	strb.w	r3, [r4, #535]	; 0x217
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5af4:	mvn.w	r3, #122	; 0x7a
    5af8:	strb.w	r3, [r4, #537]	; 0x219
      _s = s;
    5afc:	mov.w	r3, #114	; 0x72
    5b00:	strb.w	r3, [r4, #547]	; 0x223
      _b = b;
    5b04:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b08:	strb.w	r7, [r4, #558]	; 0x22e
      _s = s;
      _b = b;
    5b0c:	strb.w	r3, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b10:	mvn.w	r3, #70	; 0x46
    5b14:	strb.w	r2, [r4, #559]	; 0x22f
    5b18:	strb.w	r3, [r4, #550]	; 0x226
      _b = b;
    5b1c:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b20:	strb.w	r2, [r4, #579]	; 0x243
      _s = s;
      _b = b;
    5b24:	strb.w	r3, [r4, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b28:	mov.w	r3, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b2c:	strb.w	r9, [r4, #549]	; 0x225
      _s = s;
    5b30:	strb.w	r3, [r4, #553]	; 0x229
      _b = b;
    5b34:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b38:	strb.w	fp, [r4, #552]	; 0x228
      _s = s;
      _b = b;
    5b3c:	strb.w	r3, [r4, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b40:	mov.w	r3, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b44:	strb.w	fp, [r4, #555]	; 0x22b
      _s = s;
    5b48:	strb.w	r3, [r4, #556]	; 0x22c
      _b = b;
    5b4c:	mvn.w	r3, #19
    5b50:	strb.w	r9, [r4, #566]	; 0x236
    5b54:	strb.w	r3, [r4, #557]	; 0x22d
    5b58:	mvn.w	r3, #25
    5b5c:	strb.w	fp, [r4, #569]	; 0x239
    5b60:	strb.w	r3, [r4, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b64:	mvn.w	r3, #122	; 0x7a
    5b68:	strb.w	r3, [r4, #561]	; 0x231
      _s = s;
    5b6c:	mov.w	r3, #78	; 0x4e
    5b70:	strb.w	r3, [r4, #562]	; 0x232
      _b = b;
    5b74:	mvn.w	r3, #58	; 0x3a
    5b78:	strb.w	r3, [r4, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b7c:	mov.w	r3, #110	; 0x6e
    5b80:	strb.w	r3, [r4, #564]	; 0x234
      _s = s;
    5b84:	mov.w	r3, #93	; 0x5d
    5b88:	strb.w	r3, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b8c:	mov.w	r3, #120	; 0x78
    5b90:	strb.w	r3, [r4, #567]	; 0x237
      _s = s;
    5b94:	mov.w	r3, #122	; 0x7a
    5b98:	strb.w	r3, [r4, #568]	; 0x238
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b9c:	mov.w	r3, #120	; 0x78
    5ba0:	strb.w	r3, [r4, #570]	; 0x23a
      _s = s;
    5ba4:	mov.w	r3, #124	; 0x7c
    5ba8:	strb.w	r3, [r4, #571]	; 0x23b
      _b = b;
    5bac:	mvn.w	r3, #93	; 0x5d
    5bb0:	strb.w	r3, [r4, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bb4:	mov.w	r3, #126	; 0x7e
    5bb8:	strb.w	r3, [r4, #573]	; 0x23d
      _s = s;
    5bbc:	mov.w	r3, #115	; 0x73
    5bc0:	strb.w	r3, [r4, #574]	; 0x23e
      _b = b;
    5bc4:	mvn.w	r3, #94	; 0x5e
    5bc8:	strb.w	r3, [r4, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bcc:	mov.w	r3, #120	; 0x78
    5bd0:	strb.w	r3, [r4, #576]	; 0x240
      _s = s;
    5bd4:	mov.w	r3, #45	; 0x2d
    5bd8:	strb.w	r3, [r4, #577]	; 0x241
      _b = b;
    5bdc:	mvn.w	r3, #66	; 0x42
    5be0:	strb.w	r3, [r4, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5be4:	mvn.w	r3, #55	; 0x37
    5be8:	strb.w	r3, [r4, #580]	; 0x244
      _b = b;
    5bec:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bf0:	strb.w	r1, [r4, #582]	; 0x246
      _s = s;
      _b = b;
    5bf4:	strb.w	r3, [r4, #581]	; 0x245
    5bf8:	mov.w	r3, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bfc:	strb.w	r1, [r4, #604]	; 0x25c
      _b = b;
    5c00:	strb.w	r3, [r4, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c04:	mvn.w	r3, #5
    5c08:	strb.w	r7, [r4, #613]	; 0x265
    5c0c:	strb.w	r3, [r4, #586]	; 0x24a
      _b = b;
    5c10:	mvn.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c14:	strb.w	r6, [r4, #585]	; 0x249
      _s = s;
      _b = b;
    5c18:	strb.w	r3, [r4, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c1c:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c20:	strb.w	r6, [r4, #588]	; 0x24c
      _s = s;
    5c24:	strb.w	r3, [r4, #589]	; 0x24d
      _b = b;
    5c28:	mvn.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c2c:	strb.w	r8, [r4, #591]	; 0x24f
      _s = s;
      _b = b;
    5c30:	strb.w	r3, [r4, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c34:	mvn.w	r3, #98	; 0x62
    5c38:	strb.w	r3, [r4, #592]	; 0x250
      _b = b;
    5c3c:	mvn.w	r3, #111	; 0x6f
    5c40:	strb.w	r3, [r4, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c44:	mvn.w	r3, #94	; 0x5e
    5c48:	strb.w	r3, [r4, #594]	; 0x252
      _s = s;
    5c4c:	mov.w	r3, #83	; 0x53
    5c50:	strb.w	r3, [r4, #595]	; 0x253
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c54:	mvn.w	r3, #15
    5c58:	strb.w	r3, [r4, #597]	; 0x255
      _s = s;
    5c5c:	mov.w	r3, #119	; 0x77
    5c60:	strb.w	r3, [r4, #598]	; 0x256
      _b = b;
    5c64:	mov.w	r3, #83	; 0x53
    5c68:	strb.w	r3, [r4, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c6c:	mov.w	r3, #1
    5c70:	strb.w	r3, [r4, #600]	; 0x258
      _s = s;
    5c74:	mov.w	r3, #102	; 0x66
    5c78:	strb.w	r3, [r4, #601]	; 0x259
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c7c:	mvn.w	r3, #114	; 0x72
    5c80:	strb.w	r3, [r4, #603]	; 0x25b
      _s = s;
      _b = b;
    5c84:	mov.w	r3, #127	; 0x7f
    5c88:	strb.w	r3, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c8c:	mvn.w	r3, #114	; 0x72
    5c90:	strb.w	r3, [r4, #606]	; 0x25e
      _s = s;
    5c94:	mvn.w	r3, #35	; 0x23
    5c98:	strb.w	r3, [r4, #607]	; 0x25f
      _b = b;
    5c9c:	mvn.w	r3, #26
    5ca0:	strb.w	r3, [r4, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ca4:	mvn.w	r3, #114	; 0x72
    5ca8:	strb.w	r3, [r4, #609]	; 0x261
      _s = s;
      _b = b;
    5cac:	mvn.w	r3, #56	; 0x38
    5cb0:	strb.w	r3, [r4, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cb4:	mvn.w	r3, #118	; 0x76
    5cb8:	strb.w	r3, [r4, #612]	; 0x264
      _s = s;
    5cbc:	mvn.w	r3, #8
    5cc0:	strb.w	r3, [r4, #583]	; 0x247
      _b = b;
    5cc4:	mvn.w	r3, #119	; 0x77
    5cc8:	strb.w	r3, [r4, #584]	; 0x248
    5ccc:	mvn.w	r3, #120	; 0x78
    5cd0:	strb.w	r3, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cd4:	mvn.w	r3, #45	; 0x2d
    5cd8:	strb.w	r3, [r4, #610]	; 0x262
      _b = b;
    5cdc:	mvn.w	r3, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ce0:	strb.w	r7, [r4, #624]	; 0x270
      _s = s;
      _b = b;
    5ce4:	strb.w	r3, [r4, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ce8:	mvn.w	r3, #120	; 0x78
      _s = s;
      _b = b;
    5cec:	strb.w	ip, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cf0:	strb.w	r3, [r4, #615]	; 0x267
      _s = s;
    5cf4:	mvn.w	r3, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cf8:	strb.w	r2, [r4, #636]	; 0x27c
      _s = s;
    5cfc:	strb.w	r3, [r4, #616]	; 0x268
      _b = b;
    5d00:	mvn.w	r3, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d04:	strb.w	fp, [r4, #627]	; 0x273
      _s = s;
      _b = b;
    5d08:	strb.w	r3, [r4, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d0c:	mvn.w	r3, #121	; 0x79
    5d10:	strb.w	r8, [r4, #630]	; 0x276
    5d14:	strb.w	r3, [r4, #618]	; 0x26a
      _s = s;
    5d18:	mvn.w	r3, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d1c:	strb.w	r8, [r4, #633]	; 0x279
      _s = s;
    5d20:	strb.w	r3, [r4, #619]	; 0x26b
      _b = b;
    5d24:	mvn.w	r3, #29
    5d28:	strb.w	r3, [r4, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d2c:	mvn.w	r3, #118	; 0x76
    5d30:	strb.w	r3, [r4, #621]	; 0x26d
      _s = s;
    5d34:	mvn.w	r3, #81	; 0x51
    5d38:	strb.w	r3, [r4, #622]	; 0x26e
      _b = b;
    5d3c:	mvn.w	r3, #47	; 0x2f
    5d40:	strb.w	r3, [r4, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d44:	mvn.w	r3, #119	; 0x77
    5d48:	strb.w	r3, [r4, #625]	; 0x271
      _b = b;
    5d4c:	mvn.w	r3, #50	; 0x32
    5d50:	strb.w	r3, [r4, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d54:	mvn.w	r3, #102	; 0x66
    5d58:	strb.w	r3, [r4, #628]	; 0x274
    5d5c:	mov.w	r3, #86	; 0x56
    5d60:	strb.w	r3, [r4, #631]	; 0x277
      _b = b;
    5d64:	mvn.w	r3, #23
    5d68:	strb.w	r3, [r4, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d6c:	mov.w	r3, #114	; 0x72
    5d70:	strb.w	r3, [r4, #634]	; 0x27a
      _b = b;
    5d74:	mvn.w	r3, #32
    5d78:	strb.w	r3, [r4, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d7c:	mvn.w	r3, #40	; 0x28
    5d80:	strb.w	r3, [r4, #637]	; 0x27d
      _b = b;
    5d84:	mov.w	r3, #97	; 0x61
    5d88:	strb.w	r3, [r4, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d8c:	mvn.w	r3, #50	; 0x32
    5d90:	strb.w	r3, [r4, #639]	; 0x27f
      _s = s;
    5d94:	mov.w	r3, #85	; 0x55
    5d98:	strb.w	r3, [r4, #640]	; 0x280
      _b = b;
    5d9c:	mov.w	r3, #18
    5da0:	strb.w	r3, [r4, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5da4:	mvn.w	r3, #50	; 0x32
    5da8:	strb.w	r3, [r4, #642]	; 0x282
      _s = s;
    5dac:	mov.w	r3, #90	; 0x5a
    5db0:	strb.w	r3, [r4, #643]	; 0x283
      _b = b;
    5db4:	mov.w	r3, #17
    5db8:	strb.w	r3, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dbc:	mvn.w	r3, #51	; 0x33
    5dc0:	strb.w	r3, [r4, #645]	; 0x285
      _s = s;
    5dc4:	mov.w	r3, #70	; 0x46
    5dc8:	strb.w	r3, [r4, #646]	; 0x286
      _b = b;
    5dcc:	mov.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd0:	strb.w	r1, [r4, #657]	; 0x291
      _s = s;
      _b = b;
    5dd4:	strb.w	r3, [r4, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd8:	mov.w	r3, #95	; 0x5f
      _s = s;
      _b = b;
    5ddc:	strb.w	lr, [r4, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5de0:	strb.w	r3, [r4, #648]	; 0x288
      _s = s;
    5de4:	mov.w	r3, #13
    5de8:	strb.w	r2, [r4, #673]	; 0x2a1
    5dec:	strb.w	r3, [r4, #649]	; 0x289
      _b = b;
    5df0:	mvn.w	r3, #29
    5df4:	strb.w	ip, [r4, #677]	; 0x2a5
    5df8:	strb.w	r3, [r4, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dfc:	mvn.w	r3, #122	; 0x7a
    5e00:	strb.w	r9, [r4, #660]	; 0x294
    5e04:	strb.w	r3, [r4, #651]	; 0x28b
      _s = s;
    5e08:	mov.w	r3, #87	; 0x57
    5e0c:	strb.w	r3, [r4, #652]	; 0x28c
      _b = b;
    5e10:	mvn.w	r3, #68	; 0x44
    5e14:	strb.w	r3, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e18:	mvn.w	r3, #122	; 0x7a
    5e1c:	strb.w	r3, [r4, #654]	; 0x28e
      _s = s;
    5e20:	mvn.w	r3, #7
    5e24:	strb.w	r3, [r4, #655]	; 0x28f
      _b = b;
    5e28:	mvn.w	r3, #91	; 0x5b
    5e2c:	strb.w	r3, [r4, #656]	; 0x290
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e30:	mvn.w	r3, #106	; 0x6a
    5e34:	strb.w	r3, [r4, #658]	; 0x292
      _b = b;
    5e38:	mvn.w	r3, #67	; 0x43
    5e3c:	strb.w	r3, [r4, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e40:	mvn.w	r3, #78	; 0x4e
    5e44:	strb.w	r3, [r4, #661]	; 0x295
      _b = b;
    5e48:	mvn.w	r3, #30
    5e4c:	strb.w	r3, [r4, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e50:	mvn.w	r3, #99	; 0x63
    5e54:	strb.w	r3, [r4, #663]	; 0x297
      _s = s;
    5e58:	mov.w	r3, #91	; 0x5b
    5e5c:	strb.w	r3, [r4, #664]	; 0x298
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e60:	mvn.w	r3, #78	; 0x4e
    5e64:	strb.w	r3, [r4, #666]	; 0x29a
      _s = s;
    5e68:	mvn.w	r3, #66	; 0x42
    5e6c:	strb.w	r3, [r4, #667]	; 0x29b
      _b = b;
    5e70:	mvn.w	r3, #6
    5e74:	strb.w	r3, [r4, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e78:	mvn.w	r3, #72	; 0x48
    5e7c:	strb.w	r3, [r4, #669]	; 0x29d
      _s = s;
    5e80:	mov.w	r3, #115	; 0x73
    5e84:	strb.w	r3, [r4, #670]	; 0x29e
      _b = b;
    5e88:	mvn.w	r3, #5
    5e8c:	strb.w	r3, [r4, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e90:	mvn.w	r3, #71	; 0x47
    5e94:	strb.w	r3, [r4, #672]	; 0x2a0
      _s = s;
      _b = b;
    5e98:	mvn.w	r3, #14
    5e9c:	strb.w	r3, [r4, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ea0:	mvn.w	r3, #103	; 0x67
    5ea4:	strb.w	r3, [r4, #675]	; 0x2a3
      _s = s;
    5ea8:	mvn.w	r3, #56	; 0x38
    5eac:	strb.w	r3, [r4, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eb0:	mvn.w	r3, #93	; 0x5d
    5eb4:	strb.w	r3, [r4, #678]	; 0x2a6
      _s = s;
      _b = b;
    5eb8:	mvn.w	r3, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ebc:	strb.w	lr, [r4, #679]	; 0x2a7
      _b = b;
    5ec0:	strb.w	r3, [r4, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ec4:	mov.w	r3, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ec8:	strb.w	r0, [r4, #699]	; 0x2bb
      _s = s;
    5ecc:	strb.w	r3, [r4, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ed0:	mvn.w	r3, #114	; 0x72
    5ed4:	strb.w	r0, [r4, #705]	; 0x2c1
    5ed8:	strb.w	r3, [r4, #681]	; 0x2a9
      _s = s;
    5edc:	mvn.w	r3, #84	; 0x54
      _b = b;
    5ee0:	strb.w	ip, [r4, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ee4:	strb.w	r3, [r4, #682]	; 0x2aa
      _b = b;
    5ee8:	mvn.w	r3, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eec:	strb.w	r6, [r4, #684]	; 0x2ac
      _s = s;
      _b = b;
    5ef0:	strb.w	r3, [r4, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ef4:	mvn.w	r3, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ef8:	strb.w	fp, [r4, #696]	; 0x2b8
      _s = s;
    5efc:	strb.w	r3, [r4, #685]	; 0x2ad
      _b = b;
    5f00:	mvn.w	r3, #24
    5f04:	strb.w	r3, [r4, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f08:	mvn.w	r3, #6
    5f0c:	strb.w	r3, [r4, #688]	; 0x2b0
      _b = b;
    5f10:	mvn.w	r3, #36	; 0x24
    5f14:	strb.w	r3, [r4, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f18:	mvn.w	r3, #118	; 0x76
    5f1c:	strb.w	r3, [r4, #690]	; 0x2b2
      _s = s;
    5f20:	mvn.w	r3, #9
    5f24:	strb.w	r3, [r4, #691]	; 0x2b3
      _b = b;
    5f28:	mvn.w	r3, #49	; 0x31
    5f2c:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f30:	mvn.w	r3, #118	; 0x76
    5f34:	strb.w	r3, [r4, #693]	; 0x2b5
      _s = s;
    5f38:	mvn.w	r3, #62	; 0x3e
    5f3c:	strb.w	r3, [r4, #694]	; 0x2b6
      _b = b;
    5f40:	mvn.w	r3, #57	; 0x39
    5f44:	strb.w	r3, [r4, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f48:	mvn.w	r3, #38	; 0x26
    5f4c:	strb.w	r3, [r4, #697]	; 0x2b9
      _b = b;
    5f50:	mvn.w	r3, #43	; 0x2b
    5f54:	strb.w	r3, [r4, #698]	; 0x2ba
    5f58:	mvn.w	r3, #28
    5f5c:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f60:	mvn.w	r3, #105	; 0x69
    5f64:	strb.w	r3, [r4, #702]	; 0x2be
      _s = s;
      _b = b;
    5f68:	mvn.w	r3, #17
    5f6c:	strb.w	r3, [r4, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f70:	mvn.w	r3, #126	; 0x7e
    5f74:	strb.w	r3, [r4, #706]	; 0x2c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f78:	mvn.w	r3, #105	; 0x69
    5f7c:	strb.w	r3, [r4, #708]	; 0x2c4
      _s = s;
    5f80:	mvn.w	r3, #41	; 0x29
    5f84:	strb.w	r3, [r4, #709]	; 0x2c5
      _b = b;
    5f88:	mvn.w	r3, #59	; 0x3b
    5f8c:	strb.w	r3, [r4, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f90:	mvn.w	r3, #64	; 0x40
    5f94:	strb.w	r3, [r4, #711]	; 0x2c7
      _s = s;
    5f98:	mov.w	r3, #97	; 0x61
    5f9c:	strb.w	r3, [r4, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fa0:	mvn.w	r3, #120	; 0x78
    5fa4:	strb.w	r3, [r4, #687]	; 0x2af
      _s = s;
    5fa8:	mov.w	r3, #85	; 0x55
    5fac:	strb.w	r3, [r4, #703]	; 0x2bf
      _b = b;
    5fb0:	mov.w	r3, #21
    5fb4:	strb.w	r0, [r4, #722]	; 0x2d2
    5fb8:	strb.w	r3, [r4, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fbc:	mvn.w	r3, #43	; 0x2b
      _s = s;
      _b = b;
    5fc0:	strb.w	r8, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fc4:	strb.w	r3, [r4, #714]	; 0x2ca
      _s = s;
    5fc8:	mov.w	r3, #90	; 0x5a
    5fcc:	strb.w	r3, [r4, #715]	; 0x2cb
      _b = b;
    5fd0:	mov.w	r3, #17
    5fd4:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fd8:	mvn.w	r3, #50	; 0x32
    5fdc:	strb.w	r3, [r4, #717]	; 0x2cd
      _s = s;
    5fe0:	mov.w	r3, #76	; 0x4c
    5fe4:	strb.w	r3, [r4, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fe8:	mov.w	r3, #113	; 0x71
    5fec:	strb.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    5ff0:	mov.w	r3, #69	; 0x45
    5ff4:	strb.w	r3, [r4, #721]	; 0x2d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ff8:	mvn.w	r3, #126	; 0x7e
    5ffc:	strb.w	r3, [r4, #723]	; 0x2d3
      _s = s;
    6000:	mov.w	r3, #97	; 0x61
    6004:	strb.w	r3, [r4, #724]	; 0x2d4
    6008:	mov.w	r3, #90	; 0x5a
    600c:	strb.w	r3, [r4, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6010:	mvn.w	r3, #111	; 0x6f
    6014:	strb.w	r3, [r4, #729]	; 0x2d9
      _s = s;
    6018:	mov.w	r3, #46	; 0x2e
    601c:	strb.w	r3, [r4, #730]	; 0x2da
      _b = b;
    6020:	mvn.w	r3, #5
    6024:	strb.w	r3, [r4, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6028:	mvn.w	r3, #107	; 0x6b
    602c:	strb.w	r3, [r4, #732]	; 0x2dc
      _s = s;
    6030:	mov.w	r3, #104	; 0x68
    6034:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6038:	mvn.w	r3, #91	; 0x5b
    603c:	strb.w	r3, [r4, #735]	; 0x2df
      _s = s;
    6040:	mov.w	r3, #121	; 0x79
    6044:	strb.w	r3, [r4, #739]	; 0x2e3
      _b = b;
    6048:	mvn.w	r3, #5
    604c:	strb.w	r3, [r4, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6050:	mvn.w	r3, #69	; 0x45
    6054:	strb.w	r3, [r4, #741]	; 0x2e5
      _s = s;
    6058:	mov.w	r3, #103	; 0x67
    605c:	strb.w	r3, [r4, #742]	; 0x2e6
      _b = b;
    6060:	mvn.w	r3, #6
    6064:	strb.w	r3, [r4, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6068:	mvn.w	r3, #71	; 0x47
    606c:	strb.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    6070:	mov.w	r3, #69	; 0x45
    6074:	strb.w	r3, [r4, #745]	; 0x2e9
      _b = b;
    6078:	mov.w	r3, #20
    607c:	strb.w	r3, [r4, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6080:	mvn.w	r3, #122	; 0x7a
    6084:	strb.w	r3, [r4, #726]	; 0x2d6
      _s = s;
      _b = b;
    6088:	mvn.w	r3, #11
    608c:	strb.w	r3, [r4, #728]	; 0x2d8
    6090:	mvn.w	r3, #4
    6094:	strb.w	r3, [r4, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6098:	mov.w	r3, #85	; 0x55
    609c:	strb.w	r3, [r4, #736]	; 0x2e0
      _b = b;
    60a0:	mvn.w	r3, #4
    60a4:	strb.w	r3, [r4, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60a8:	mvn.w	r3, #79	; 0x4f
    60ac:	strb.w	r3, [r4, #738]	; 0x2e2
      _s = s;
      _b = b;
    60b0:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60b4:	strb.w	r1, [r4, #756]	; 0x2f4
      _s = s;
      _b = b;
    60b8:	strb.w	r3, [r4, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60bc:	mvn.w	r3, #68	; 0x44
    60c0:	strb.w	r7, [r4, #765]	; 0x2fd
    60c4:	strb.w	r3, [r4, #747]	; 0x2eb
      _s = s;
    60c8:	mov.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60cc:	strb.w	r0, [r4, #771]	; 0x303
      _s = s;
    60d0:	strb.w	r3, [r4, #748]	; 0x2ec
      _b = b;
    60d4:	mvn.w	r3, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60d8:	strb.w	r9, [r4, #762]	; 0x2fa
      _s = s;
      _b = b;
    60dc:	strb.w	r3, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60e0:	mvn.w	r3, #87	; 0x57
    60e4:	strb.w	r8, [r4, #768]	; 0x300
    60e8:	strb.w	r3, [r4, #750]	; 0x2ee
      _s = s;
    60ec:	mvn.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60f0:	strb.w	r9, [r4, #777]	; 0x309
      _s = s;
    60f4:	strb.w	r3, [r4, #751]	; 0x2ef
      _b = b;
    60f8:	mvn.w	r3, #17
    60fc:	strb.w	r3, [r4, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6100:	mvn.w	r3, #109	; 0x6d
    6104:	strb.w	r3, [r4, #753]	; 0x2f1
      _s = s;
    6108:	mvn.w	r3, #42	; 0x2a
    610c:	strb.w	r3, [r4, #754]	; 0x2f2
      _b = b;
    6110:	mvn.w	r3, #54	; 0x36
    6114:	strb.w	r3, [r4, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6118:	mvn.w	r3, #114	; 0x72
    611c:	strb.w	r3, [r4, #757]	; 0x2f5
      _b = b;
    6120:	mvn.w	r3, #28
    6124:	strb.w	r3, [r4, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6128:	mvn.w	r3, #120	; 0x78
    612c:	strb.w	r3, [r4, #759]	; 0x2f7
      _s = s;
    6130:	mvn.w	r3, #104	; 0x68
    6134:	strb.w	r3, [r4, #760]	; 0x2f8
      _b = b;
    6138:	mvn.w	r3, #48	; 0x30
    613c:	strb.w	r3, [r4, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6140:	mvn.w	r3, #51	; 0x33
    6144:	strb.w	r3, [r4, #763]	; 0x2fb
      _b = b;
    6148:	mvn.w	r3, #58	; 0x3a
    614c:	strb.w	r3, [r4, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6150:	mvn.w	r3, #70	; 0x46
    6154:	strb.w	r3, [r4, #766]	; 0x2fe
      _b = b;
    6158:	mvn.w	r3, #75	; 0x4b
    615c:	strb.w	r3, [r4, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6160:	mvn.w	r3, #80	; 0x50
    6164:	strb.w	r3, [r4, #769]	; 0x301
      _b = b;
    6168:	mvn.w	r3, #52	; 0x34
    616c:	strb.w	r3, [r4, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6170:	mov.w	r3, #91	; 0x5b
    6174:	strb.w	r3, [r4, #772]	; 0x304
      _b = b;
    6178:	mvn.w	r3, #35	; 0x23
    617c:	strb.w	r3, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6180:	mvn.w	r3, #97	; 0x61
    6184:	strb.w	r3, [r4, #774]	; 0x306
      _s = s;
    6188:	mov.w	r3, #99	; 0x63
    618c:	strb.w	r3, [r4, #775]	; 0x307
      _b = b;
    6190:	mvn.w	r3, #19
    6194:	strb.w	r3, [r4, #776]	; 0x308
    6198:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    619c:	strb.w	r7, [r4, #778]	; 0x30a
      _b = b;
    61a0:	strb.w	r3, [r4, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61a4:	mov.w	r3, #45	; 0x2d
    61a8:	strb.w	lr, [r4, #781]	; 0x30d
    61ac:	strb.w	r3, [r4, #799]	; 0x31f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61b0:	mvn.w	r3, #103	; 0x67
      _s = s;
      _b = b;
    61b4:	strb.w	lr, [r4, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61b8:	strb.w	r3, [r4, #780]	; 0x30c
      _s = s;
      _b = b;
    61bc:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61c0:	strb.w	fp, [r4, #808]	; 0x328
      _b = b;
    61c4:	strb.w	r3, [r4, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61c8:	mvn.w	r3, #107	; 0x6b
    61cc:	strb.w	r3, [r4, #783]	; 0x30f
      _s = s;
    61d0:	mvn.w	r3, #15
    61d4:	strb.w	r3, [r4, #784]	; 0x310
      _b = b;
    61d8:	mvn.w	r3, #93	; 0x5d
    61dc:	strb.w	r3, [r4, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61e0:	mvn.w	r3, #107	; 0x6b
    61e4:	strb.w	r3, [r4, #786]	; 0x312
      _s = s;
    61e8:	strb.w	r3, [r4, #787]	; 0x313
      _b = b;
    61ec:	mov.w	r3, #31
    61f0:	strb.w	r3, [r4, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61f4:	mvn.w	r3, #107	; 0x6b
    61f8:	strb.w	r3, [r4, #790]	; 0x316
      _b = b;
    61fc:	mov.w	r3, #103	; 0x67
    6200:	strb.w	r3, [r4, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6204:	mov.w	r3, #121	; 0x79
    6208:	strb.w	r3, [r4, #792]	; 0x318
      _s = s;
    620c:	mov.w	r3, #119	; 0x77
    6210:	strb.w	r3, [r4, #793]	; 0x319
      _b = b;
    6214:	mvn.w	r3, #56	; 0x38
    6218:	strb.w	r3, [r4, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    621c:	mvn.w	r3, #50	; 0x32
    6220:	strb.w	r3, [r4, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6224:	mvn.w	r3, #100	; 0x64
    6228:	strb.w	r3, [r4, #798]	; 0x31e
      _s = s;
      _b = b;
    622c:	mvn.w	r3, #5
    6230:	strb.w	r3, [r4, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6234:	mvn.w	r3, #95	; 0x5f
    6238:	strb.w	r3, [r4, #801]	; 0x321
      _s = s;
    623c:	mov.w	r3, #79	; 0x4f
    6240:	strb.w	r3, [r4, #802]	; 0x322
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6244:	mvn.w	r3, #107	; 0x6b
    6248:	strb.w	r3, [r4, #804]	; 0x324
      _s = s;
    624c:	mov.w	r3, #124	; 0x7c
    6250:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6254:	mvn.w	r3, #90	; 0x5a
    6258:	strb.w	r3, [r4, #807]	; 0x327
      _s = s;
      _b = b;
    625c:	mvn.w	r3, #7
    6260:	strb.w	r3, [r4, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6264:	mvn.w	r3, #74	; 0x4a
    6268:	strb.w	r3, [r4, #810]	; 0x32a
      _s = s;
    626c:	mov.w	r3, #68	; 0x44
    6270:	strb.w	r3, [r4, #811]	; 0x32b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6274:	mvn.w	r3, #122	; 0x7a
    6278:	strb.w	r3, [r4, #789]	; 0x315
    627c:	mvn.w	r3, #119	; 0x77
    6280:	strb.w	r3, [r4, #795]	; 0x31b
      _s = s;
      _b = b;
    6284:	mvn.w	r3, #11
    6288:	strb.w	r3, [r4, #797]	; 0x31d
    628c:	mvn.w	r3, #8
    6290:	strb.w	r3, [r4, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6294:	mvn.w	r3, #62	; 0x3e
      _s = s;
      _b = b;
    6298:	strb.w	lr, [r4, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    629c:	strb.w	r3, [r4, #813]	; 0x32d
      _s = s;
    62a0:	mov.w	r3, #88	; 0x58
    62a4:	strb.w	r6, [r4, #841]	; 0x349
    62a8:	strb.w	r3, [r4, #814]	; 0x32e
      _b = b;
    62ac:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62b0:	strb.w	fp, [r4, #831]	; 0x33f
      _s = s;
      _b = b;
    62b4:	strb.w	r3, [r4, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62b8:	mvn.w	r3, #59	; 0x3b
    62bc:	strb.w	r9, [r4, #840]	; 0x348
    62c0:	strb.w	r3, [r4, #816]	; 0x330
      _s = s;
    62c4:	mov.w	r3, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62c8:	strb.w	fp, [r4, #843]	; 0x34b
      _s = s;
    62cc:	strb.w	r3, [r4, #817]	; 0x331
      _b = b;
    62d0:	mvn.w	r3, #6
    62d4:	strb.w	r3, [r4, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62d8:	mvn.w	r3, #57	; 0x39
    62dc:	strb.w	r3, [r4, #819]	; 0x333
      _s = s;
    62e0:	mov.w	r3, #58	; 0x3a
    62e4:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    62e8:	mvn.w	r3, #9
    62ec:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62f0:	mvn.w	r3, #73	; 0x49
    62f4:	strb.w	r3, [r4, #822]	; 0x336
      _s = s;
    62f8:	mov.w	r3, #74	; 0x4a
    62fc:	strb.w	r3, [r4, #823]	; 0x337
      _b = b;
    6300:	mvn.w	r3, #15
    6304:	strb.w	r3, [r4, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6308:	mvn.w	r3, #95	; 0x5f
    630c:	strb.w	r3, [r4, #825]	; 0x339
      _s = s;
    6310:	mvn.w	r3, #10
    6314:	strb.w	r3, [r4, #826]	; 0x33a
      _b = b;
    6318:	mvn.w	r3, #42	; 0x2a
    631c:	strb.w	r3, [r4, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6320:	mvn.w	r3, #102	; 0x66
    6324:	strb.w	r3, [r4, #828]	; 0x33c
      _s = s;
    6328:	mvn.w	r3, #6
    632c:	strb.w	r3, [r4, #829]	; 0x33d
      _b = b;
    6330:	mvn.w	r3, #58	; 0x3a
    6334:	strb.w	r3, [r4, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6338:	mvn.w	r3, #26
    633c:	strb.w	r3, [r4, #832]	; 0x340
      _b = b;
    6340:	mvn.w	r3, #48	; 0x30
    6344:	strb.w	r3, [r4, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6348:	mvn.w	r3, #118	; 0x76
    634c:	strb.w	r3, [r4, #834]	; 0x342
      _s = s;
    6350:	mvn.w	r3, #51	; 0x33
    6354:	strb.w	r3, [r4, #835]	; 0x343
      _b = b;
    6358:	mvn.w	r3, #47	; 0x2f
    635c:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6360:	mvn.w	r3, #114	; 0x72
    6364:	strb.w	r3, [r4, #837]	; 0x345
      _s = s;
    6368:	mvn.w	r3, #68	; 0x44
    636c:	strb.w	r3, [r4, #838]	; 0x346
      _b = b;
    6370:	mvn.w	r3, #66	; 0x42
    6374:	strb.w	r3, [r4, #839]	; 0x347
    6378:	mvn.w	r3, #36	; 0x24
    637c:	strb.w	r3, [r4, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6380:	mov.w	r3, #115	; 0x73
    6384:	strb.w	r3, [r4, #844]	; 0x34c
      _b = b;
    6388:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    638c:	strb.w	ip, [r4, #853]	; 0x355
      _b = b;
    6390:	strb.w	r3, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6394:	mvn.w	r3, #103	; 0x67
    6398:	strb.w	r0, [r4, #855]	; 0x357
    639c:	strb.w	r3, [r4, #846]	; 0x34e
      _s = s;
    63a0:	mov.w	r3, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a4:	strb.w	r0, [r4, #858]	; 0x35a
      _s = s;
    63a8:	strb.w	r3, [r4, #847]	; 0x34f
      _b = b;
    63ac:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63b0:	strb.w	r7, [r4, #861]	; 0x35d
      _s = s;
      _b = b;
    63b4:	strb.w	r3, [r4, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63b8:	mvn.w	r3, #110	; 0x6e
      _s = s;
    63bc:	strb.w	lr, [r4, #862]	; 0x35e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c0:	strb.w	r3, [r4, #849]	; 0x351
      _s = s;
    63c4:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c8:	strb.w	r1, [r4, #864]	; 0x360
      _s = s;
    63cc:	strb.w	r3, [r4, #850]	; 0x352
      _b = b;
    63d0:	mvn.w	r3, #26
    63d4:	strb.w	r3, [r4, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63d8:	mvn.w	r3, #107	; 0x6b
    63dc:	strb.w	r3, [r4, #852]	; 0x354
      _s = s;
      _b = b;
    63e0:	mvn.w	r3, #16
    63e4:	strb.w	r3, [r4, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63e8:	mov.w	r3, #100	; 0x64
    63ec:	strb.w	r3, [r4, #856]	; 0x358
      _b = b;
    63f0:	mvn.w	r3, #32
    63f4:	strb.w	r3, [r4, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63f8:	mvn.w	r3, #66	; 0x42
    63fc:	strb.w	r3, [r4, #859]	; 0x35b
      _b = b;
    6400:	mov.w	r3, #47	; 0x2f
    6404:	strb.w	r3, [r4, #860]	; 0x35c
    6408:	mvn.w	r3, #57	; 0x39
    640c:	strb.w	r3, [r4, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6410:	mvn.w	r3, #127	; 0x7f
    6414:	strb.w	r3, [r4, #865]	; 0x361
      _b = b;
    6418:	mvn.w	r3, #9
    641c:	strb.w	r3, [r4, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6420:	mvn.w	r3, #98	; 0x62
    6424:	strb.w	r3, [r4, #867]	; 0x363
      _s = s;
    6428:	mov.w	r3, #98	; 0x62
    642c:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    6430:	mvn.w	r3, #9
    6434:	strb.w	r3, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6438:	mvn.w	r3, #82	; 0x52
    643c:	strb.w	r3, [r4, #870]	; 0x366
      _s = s;
    6440:	mov.w	r3, #43	; 0x2b
    6444:	strb.w	r3, [r4, #871]	; 0x367
      _b = b;
    6448:	mvn.w	r3, #6
    644c:	strb.w	r3, [r4, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6450:	mvn.w	r3, #91	; 0x5b
    6454:	strb.w	r3, [r4, #873]	; 0x369
      _s = s;
    6458:	mov.w	r3, #115	; 0x73
    645c:	strb.w	r3, [r4, #874]	; 0x36a
      _b = b;
    6460:	mvn.w	r3, #18
    6464:	strb.w	r3, [r4, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6468:	mvn.w	r3, #90	; 0x5a
    646c:	strb.w	r3, [r4, #876]	; 0x36c
      _s = s;
    6470:	mov.w	r3, #116	; 0x74
    6474:	strb.w	r3, [r4, #877]	; 0x36d
      _b = b;
    6478:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    647c:	strb.w	r6, [r4, #909]	; 0x38d
      _s = s;
      _b = b;
    6480:	strb.w	r3, [r4, #878]	; 0x36e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6484:	mvn.w	r3, #89	; 0x59
      _s = s;
    6488:	strb.w	fp, [r4, #907]	; 0x38b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    648c:	strb.w	r3, [r4, #879]	; 0x36f
      _s = s;
    6490:	mvn.w	r3, #106	; 0x6a
    6494:	strb.w	r3, [r4, #880]	; 0x370
      _b = b;
    6498:	mvn.w	r3, #13
    649c:	strb.w	r3, [r4, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64a0:	mvn.w	r3, #78	; 0x4e
    64a4:	strb.w	r3, [r4, #882]	; 0x372
      _s = s;
    64a8:	mov.w	r3, #113	; 0x71
    64ac:	strb.w	r3, [r4, #883]	; 0x373
      _b = b;
    64b0:	mvn.w	r3, #10
    64b4:	strb.w	r3, [r4, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64b8:	mvn.w	r3, #68	; 0x44
    64bc:	strb.w	r3, [r4, #885]	; 0x375
      _s = s;
    64c0:	mov.w	r3, #99	; 0x63
    64c4:	strb.w	r3, [r4, #886]	; 0x376
      _b = b;
    64c8:	mvn.w	r3, #11
    64cc:	strb.w	r3, [r4, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64d0:	mvn.w	r3, #61	; 0x3d
    64d4:	strb.w	r3, [r4, #888]	; 0x378
      _s = s;
    64d8:	mov.w	r3, #79	; 0x4f
    64dc:	strb.w	r3, [r4, #889]	; 0x379
      _b = b;
    64e0:	mvn.w	r3, #9
    64e4:	strb.w	r3, [r4, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64e8:	mvn.w	r3, #63	; 0x3f
    64ec:	strb.w	r3, [r4, #891]	; 0x37b
      _s = s;
    64f0:	mov.w	r3, #79	; 0x4f
    64f4:	strb.w	r3, [r4, #892]	; 0x37c
      _b = b;
    64f8:	mvn.w	r3, #15
    64fc:	strb.w	r3, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6500:	mvn.w	r3, #77	; 0x4d
    6504:	strb.w	r3, [r4, #894]	; 0x37e
      _s = s;
    6508:	mvn.w	r3, #122	; 0x7a
    650c:	strb.w	r3, [r4, #895]	; 0x37f
      _b = b;
    6510:	mvn.w	r3, #16
    6514:	strb.w	r3, [r4, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6518:	mvn.w	r3, #97	; 0x61
    651c:	strb.w	r3, [r4, #897]	; 0x381
      _s = s;
    6520:	mvn.w	r3, #38	; 0x26
    6524:	strb.w	r3, [r4, #898]	; 0x382
      _b = b;
    6528:	mvn.w	r3, #23
    652c:	strb.w	r3, [r4, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6530:	mvn.w	r3, #99	; 0x63
    6534:	strb.w	r3, [r4, #900]	; 0x384
      _s = s;
    6538:	mvn.w	r3, #6
    653c:	strb.w	r3, [r4, #901]	; 0x385
      _b = b;
    6540:	mvn.w	r3, #71	; 0x47
    6544:	strb.w	r3, [r4, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6548:	mvn.w	r3, #111	; 0x6f
    654c:	strb.w	r3, [r4, #903]	; 0x387
      _s = s;
    6550:	mvn.w	r3, #6
    6554:	strb.w	r3, [r4, #904]	; 0x388
      _b = b;
    6558:	mvn.w	r3, #63	; 0x3f
    655c:	strb.w	r3, [r4, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6560:	mvn.w	r3, #118	; 0x76
    6564:	strb.w	r3, [r4, #906]	; 0x38a
      _s = s;
      _b = b;
    6568:	mvn.w	r3, #75	; 0x4b
    656c:	strb.w	r3, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6570:	mov.w	r3, #108	; 0x6c
    6574:	strb.w	r3, [r4, #910]	; 0x38e
      _b = b;
    6578:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    657c:	strb.w	r7, [r4, #927]	; 0x39f
      _s = s;
      _b = b;
    6580:	strb.w	r3, [r4, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6584:	mov.w	r3, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6588:	strb.w	r0, [r4, #933]	; 0x3a5
      _s = s;
    658c:	strb.w	r3, [r4, #916]	; 0x394
    6590:	mov.w	r3, #105	; 0x69
      _b = b;
    6594:	strb.w	ip, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6598:	strb.w	r3, [r4, #913]	; 0x391
      _b = b;
    659c:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65a0:	strb.w	fp, [r4, #930]	; 0x3a2
      _s = s;
      _b = b;
    65a4:	strb.w	r3, [r4, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65a8:	mvn.w	r3, #104	; 0x68
    65ac:	strb.w	r8, [r4, #912]	; 0x390
    65b0:	strb.w	r3, [r4, #915]	; 0x393
      _s = s;
      _b = b;
    65b4:	mvn.w	r3, #27
    65b8:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65bc:	mvn.w	r3, #104	; 0x68
    65c0:	strb.w	r3, [r4, #918]	; 0x396
      _s = s;
    65c4:	mvn.w	r3, #61	; 0x3d
    65c8:	strb.w	r3, [r4, #919]	; 0x397
      _b = b;
    65cc:	mvn.w	r3, #29
    65d0:	strb.w	r3, [r4, #920]	; 0x398
    65d4:	mvn.w	r3, #22
    65d8:	strb.w	r3, [r4, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65dc:	mvn.w	r3, #104	; 0x68
    65e0:	strb.w	r3, [r4, #924]	; 0x39c
      _s = s;
    65e4:	mov.w	r3, #124	; 0x7c
    65e8:	strb.w	r3, [r4, #925]	; 0x39d
      _b = b;
    65ec:	mvn.w	r3, #15
    65f0:	strb.w	r3, [r4, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65f4:	mov.w	r3, #91	; 0x5b
    65f8:	strb.w	r3, [r4, #928]	; 0x3a0
      _b = b;
    65fc:	mvn.w	r3, #19
    6600:	strb.w	r3, [r4, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6604:	mov.w	r3, #58	; 0x3a
    6608:	strb.w	r3, [r4, #931]	; 0x3a3
      _b = b;
    660c:	mvn.w	r3, #82	; 0x52
    6610:	strb.w	r3, [r4, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6614:	mvn.w	r3, #5
    6618:	strb.w	r3, [r4, #934]	; 0x3a6
      _b = b;
    661c:	mvn.w	r3, #66	; 0x42
    6620:	strb.w	r3, [r4, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6624:	mov.w	r3, #52	; 0x34
    6628:	strb.w	r3, [r4, #937]	; 0x3a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    662c:	mvn.w	r3, #97	; 0x61
    6630:	strb.w	r3, [r4, #939]	; 0x3ab
      _s = s;
    6634:	mov.w	r3, #99	; 0x63
    6638:	strb.w	r3, [r4, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    663c:	mvn.w	r3, #114	; 0x72
    6640:	strb.w	r3, [r4, #942]	; 0x3ae
      _s = s;
    6644:	mvn.w	r3, #81	; 0x51
    6648:	strb.w	r3, [r4, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    664c:	mvn.w	r3, #102	; 0x66
    6650:	strb.w	r3, [r4, #921]	; 0x399
      _s = s;
    6654:	mvn.w	r3, #39	; 0x27
    6658:	strb.w	r3, [r4, #922]	; 0x39a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    665c:	mvn.w	r3, #122	; 0x7a
    6660:	strb.w	r3, [r4, #936]	; 0x3a8
      _s = s;
      _b = b;
    6664:	mvn.w	r3, #4
    6668:	strb.w	r3, [r4, #938]	; 0x3aa
    666c:	mvn.w	r3, #17
    6670:	strb.w	ip, [r4, #950]	; 0x3b6
    6674:	strb.w	r3, [r4, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6678:	mov.w	r3, #104	; 0x68
      _b = b;
    667c:	strb.w	ip, [r4, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6680:	strb.w	r3, [r4, #964]	; 0x3c4
    6684:	mvn.w	r3, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6688:	strb.w	r2, [r4, #969]	; 0x3c9
      _s = s;
    668c:	strb.w	r3, [r4, #946]	; 0x3b2
      _b = b;
    6690:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6694:	strb.w	r9, [r4, #945]	; 0x3b1
      _s = s;
      _b = b;
    6698:	strb.w	r3, [r4, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    669c:	mvn.w	r3, #110	; 0x6e
      _s = s;
      _b = b;
    66a0:	strb.w	r9, [r4, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66a4:	strb.w	r3, [r4, #948]	; 0x3b4
      _s = s;
    66a8:	mvn.w	r3, #80	; 0x50
    66ac:	strb.w	r3, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66b0:	mvn.w	r3, #106	; 0x6a
    66b4:	strb.w	r3, [r4, #951]	; 0x3b7
      _s = s;
    66b8:	mvn.w	r3, #109	; 0x6d
    66bc:	strb.w	r3, [r4, #952]	; 0x3b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c0:	mvn.w	r3, #85	; 0x55
    66c4:	strb.w	r3, [r4, #954]	; 0x3ba
      _s = s;
      _b = b;
    66c8:	mvn.w	r3, #26
    66cc:	strb.w	r3, [r4, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66d0:	mvn.w	r3, #73	; 0x49
    66d4:	strb.w	r3, [r4, #957]	; 0x3bd
      _s = s;
    66d8:	mvn.w	r3, #57	; 0x39
    66dc:	strb.w	r3, [r4, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66e0:	mvn.w	r3, #55	; 0x37
    66e4:	strb.w	r3, [r4, #960]	; 0x3c0
    66e8:	mvn.w	r3, #54	; 0x36
    66ec:	strb.w	r3, [r4, #963]	; 0x3c3
    66f0:	mvn.w	r3, #75	; 0x4b
    66f4:	strb.w	r3, [r4, #966]	; 0x3c6
      _s = s;
    66f8:	mvn.w	r3, #95	; 0x5f
    66fc:	strb.w	r3, [r4, #967]	; 0x3c7
      _b = b;
    6700:	mvn.w	r3, #50	; 0x32
    6704:	strb.w	r3, [r4, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6708:	mov.w	r3, #97	; 0x61
    670c:	strb.w	r3, [r4, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6710:	mvn.w	r3, #97	; 0x61
    6714:	strb.w	r3, [r4, #972]	; 0x3cc
      _s = s;
      _b = b;
    6718:	mvn.w	r3, #89	; 0x59
    671c:	strb.w	r3, [r4, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6720:	mvn.w	r3, #111	; 0x6f
    6724:	strb.w	r3, [r4, #976]	; 0x3d0
      _b = b;
    6728:	mvn.w	r3, #10
    672c:	strb.w	r3, [r4, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6730:	mvn.w	r3, #92	; 0x5c
    6734:	strb.w	r3, [r4, #955]	; 0x3bb
    6738:	mov.w	r3, #114	; 0x72
    673c:	strb.w	r3, [r4, #961]	; 0x3c1
      _b = b;
    6740:	mvn.w	r3, #10
    6744:	strb.w	r3, [r4, #962]	; 0x3c2
    6748:	mvn.w	r3, #33	; 0x21
    674c:	strb.w	r3, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6750:	mvn.w	r3, #70	; 0x46
    6754:	strb.w	r3, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6758:	strb.w	r3, [r4, #975]	; 0x3cf
      _s = s;
      _b = b;
    675c:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6760:	strb.w	r7, [r4, #1002]	; 0x3ea
      _s = s;
      _b = b;
    6764:	strb.w	r3, [r4, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6768:	mvn.w	r3, #91	; 0x5b
      _s = s;
    676c:	strb.w	fp, [r4, #994]	; 0x3e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6770:	strb.w	r3, [r4, #999]	; 0x3e7
    6774:	mvn.w	r3, #86	; 0x56
    6778:	strb.w	r8, [r4, #1005]	; 0x3ed
    677c:	strb.w	r3, [r4, #978]	; 0x3d2
      _s = s;
    6780:	mvn.w	r3, #90	; 0x5a
    6784:	strb.w	r3, [r4, #979]	; 0x3d3
      _b = b;
    6788:	mvn.w	r3, #62	; 0x3e
    678c:	strb.w	r3, [r4, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6790:	mvn.w	r3, #103	; 0x67
    6794:	strb.w	r3, [r4, #981]	; 0x3d5
      _s = s;
    6798:	mvn.w	r3, #127	; 0x7f
    679c:	strb.w	r3, [r4, #982]	; 0x3d6
      _b = b;
    67a0:	mvn.w	r3, #59	; 0x3b
    67a4:	strb.w	r3, [r4, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67a8:	mvn.w	r3, #109	; 0x6d
    67ac:	strb.w	r3, [r4, #984]	; 0x3d8
      _s = s;
    67b0:	mvn.w	r3, #127	; 0x7f
    67b4:	strb.w	r3, [r4, #985]	; 0x3d9
      _b = b;
    67b8:	mvn.w	r3, #46	; 0x2e
    67bc:	strb.w	r3, [r4, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67c0:	mvn.w	r3, #97	; 0x61
    67c4:	strb.w	r3, [r4, #987]	; 0x3db
      _s = s;
      _b = b;
    67c8:	mvn.w	r3, #41	; 0x29
    67cc:	strb.w	r3, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67d0:	mvn.w	r3, #97	; 0x61
    67d4:	strb.w	r3, [r4, #990]	; 0x3de
      _s = s;
      _b = b;
    67d8:	mvn.w	r3, #28
    67dc:	strb.w	r3, [r4, #992]	; 0x3e0
    67e0:	mvn.w	r3, #19
    67e4:	strb.w	r3, [r4, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67e8:	mvn.w	r3, #75	; 0x4b
    67ec:	strb.w	r3, [r4, #996]	; 0x3e4
      _s = s;
    67f0:	mov.w	r3, #69	; 0x45
    67f4:	strb.w	r3, [r4, #997]	; 0x3e5
      _b = b;
    67f8:	mvn.w	r3, #17
    67fc:	strb.w	r3, [r4, #998]	; 0x3e6
    6800:	mvn.w	r3, #13
    6804:	strb.w	r3, [r4, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6808:	mov.w	r3, #74	; 0x4a
    680c:	strb.w	r3, [r4, #1003]	; 0x3eb
      _b = b;
    6810:	mvn.w	r3, #18
    6814:	strb.w	r3, [r4, #1004]	; 0x3ec
    6818:	mvn.w	r3, #75	; 0x4b
    681c:	strb.w	r3, [r4, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6820:	mov.w	r3, #90	; 0x5a
    6824:	strb.w	r3, [r4, #1009]	; 0x3f1
    6828:	mvn.w	r3, #4
    682c:	strb.w	r3, [r4, #988]	; 0x3dc
    6830:	strb.w	r3, [r4, #991]	; 0x3df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6834:	mvn.w	r3, #92	; 0x5c
    6838:	strb.w	r3, [r4, #993]	; 0x3e1
      _s = s;
    683c:	mov.w	r3, #109	; 0x6d
    6840:	strb.w	r3, [r4, #1000]	; 0x3e8
    6844:	mov.w	r3, #73	; 0x49
    6848:	strb.w	r3, [r4, #1006]	; 0x3ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    684c:	mvn.w	r3, #120	; 0x78
    6850:	strb.w	r3, [r4, #1008]	; 0x3f0
      _s = s;
      _b = b;
    6854:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6858:	strb.w	r7, [r4, #1023]	; 0x3ff
      _s = s;
      _b = b;
    685c:	strb.w	r3, [r4, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6860:	mvn.w	r3, #111	; 0x6f
    6864:	strb.w	r8, [r4, #1014]	; 0x3f6
    6868:	strb.w	r3, [r4, #1011]	; 0x3f3
      _s = s;
    686c:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6870:	strb.w	r8, [r4, #1017]	; 0x3f9
      _s = s;
    6874:	strb.w	r3, [r4, #1012]	; 0x3f4
      _b = b;
    6878:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    687c:	strb.w	r9, [r4, #1020]	; 0x3fc
      _s = s;
      _b = b;
    6880:	strb.w	r3, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6884:	mvn.w	r3, #84	; 0x54
    6888:	strb.w	r3, [r4, #1015]	; 0x3f7
      _b = b;
    688c:	mvn.w	r3, #34	; 0x22
    6890:	strb.w	r3, [r4, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6894:	mvn.w	r3, #25
    6898:	strb.w	r3, [r4, #1018]	; 0x3fa
      _b = b;
    689c:	mvn.w	r3, #43	; 0x2b
    68a0:	strb.w	r3, [r4, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68a4:	mvn.w	r3, #84	; 0x54
    68a8:	strb.w	r3, [r4, #1021]	; 0x3fd
      _b = b;
    68ac:	mvn.w	r3, #17
    68b0:	strb.w	r3, [r4, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68b4:	mvn.w	r3, #84	; 0x54
    68b8:	strb.w	r3, [r4, #1024]	; 0x400
      _b = b;
    68bc:	mvn.w	r3, #13
    68c0:	strb.w	r3, [r4, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68c4:	mvn.w	r3, #106	; 0x6a
    68c8:	strb.w	r3, [r4, #1026]	; 0x402
      _s = s;
    68cc:	mvn.w	r3, #99	; 0x63
    68d0:	strb.w	r3, [r4, #1027]	; 0x403
      _b = b;
    68d4:	mvn.w	r3, #30
    68d8:	strb.w	r3, [r4, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68dc:	mvn.w	r3, #85	; 0x55
    68e0:	strb.w	r3, [r4, #1029]	; 0x405
      _s = s;
    68e4:	mvn.w	r3, #101	; 0x65
    68e8:	strb.w	r3, [r4, #1030]	; 0x406
      _b = b;
    68ec:	mvn.w	r3, #21
    68f0:	strb.w	r3, [r4, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68f4:	mvn.w	r3, #82	; 0x52
    68f8:	strb.w	r3, [r4, #1032]	; 0x408
      _s = s;
    68fc:	mov.w	r3, #103	; 0x67
    6900:	strb.w	r3, [r4, #1033]	; 0x409
      _b = b;
    6904:	mvn.w	r3, #24
    6908:	strb.w	r3, [r4, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    690c:	mvn.w	r3, #70	; 0x46
    6910:	strb.w	r3, [r4, #1035]	; 0x40b
      _s = s;
    6914:	mov.w	r3, #76	; 0x4c
    6918:	strb.w	r3, [r4, #1036]	; 0x40c
      _b = b;
    691c:	mvn.w	r3, #101	; 0x65
    6920:	strb.w	r3, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6924:	mov.w	r3, #117	; 0x75
    6928:	strb.w	r3, [r4, #1038]	; 0x40e
      _s = s;
    692c:	mov.w	r3, #31
    6930:	strb.w	r3, [r4, #1039]	; 0x40f
      _b = b;
    6934:	mvn.w	r3, #119	; 0x77
    6938:	strb.w	r3, [r4, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    693c:	mvn.w	r3, #104	; 0x68
    6940:	strb.w	r3, [r4, #1041]	; 0x411
      _s = s;
    6944:	mov.w	r3, #107	; 0x6b
    6948:	strb.w	r3, [r4, #1042]	; 0x412
      _b = b;
    694c:	mov.w	r3, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6950:	strb.w	r2, [r4, #1051]	; 0x41b
      _b = b;
    6954:	strb.w	r3, [r4, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6958:	mvn.w	r3, #86	; 0x56
    695c:	strb.w	r3, [r4, #1054]	; 0x41e
    6960:	mov.w	r3, #95	; 0x5f
    6964:	strb.w	r3, [r4, #1045]	; 0x415
      _b = b;
    6968:	mvn.w	r3, #55	; 0x37
    696c:	strb.w	r3, [r4, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6970:	mvn.w	r3, #53	; 0x35
    6974:	strb.w	r3, [r4, #1047]	; 0x417
      _s = s;
    6978:	mov.w	r3, #47	; 0x2f
    697c:	strb.w	r3, [r4, #1048]	; 0x418
      _b = b;
    6980:	mvn.w	r3, #51	; 0x33
    6984:	strb.w	r3, [r4, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6988:	mvn.w	r3, #56	; 0x38
    698c:	strb.w	r3, [r4, #1050]	; 0x41a
      _s = s;
      _b = b;
    6990:	mvn.w	r3, #28
    6994:	strb.w	r3, [r4, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6998:	mvn.w	r3, #73	; 0x49
    699c:	strb.w	r3, [r4, #1053]	; 0x41d
      _s = s;
      _b = b;
    69a0:	mvn.w	r3, #35	; 0x23
    69a4:	strb.w	r3, [r4, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69a8:	mvn.w	r3, #69	; 0x45
    69ac:	strb.w	r3, [r4, #1057]	; 0x421
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69b0:	mvn.w	r3, #90	; 0x5a
    69b4:	strb.w	r3, [r4, #1059]	; 0x423
      _s = s;
      _b = b;
    69b8:	mvn.w	r3, #25
    69bc:	strb.w	r3, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69c0:	mvn.w	r3, #97	; 0x61
    69c4:	strb.w	r3, [r4, #1062]	; 0x426
      _s = s;
      _b = b;
    69c8:	mvn.w	r3, #19
    69cc:	strb.w	r3, [r4, #1064]	; 0x428
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69d0:	mvn.w	r3, #65	; 0x41
    69d4:	strb.w	r3, [r4, #1065]	; 0x429
      _s = s;
    69d8:	mov.w	r3, #119	; 0x77
    69dc:	strb.w	r3, [r4, #1066]	; 0x42a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69e0:	mvn.w	r3, #66	; 0x42
    69e4:	strb.w	r3, [r4, #1068]	; 0x42c
      _s = s;
      _b = b;
    69e8:	mvn.w	r3, #21
    69ec:	strb.w	r3, [r4, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69f0:	mvn.w	r3, #71	; 0x47
    69f4:	strb.w	r3, [r4, #1071]	; 0x42f
      _s = s;
    69f8:	mvn.w	r3, #80	; 0x50
    69fc:	strb.w	r3, [r4, #1072]	; 0x430
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a00:	mvn.w	r3, #88	; 0x58
    6a04:	strb.w	r3, [r4, #1074]	; 0x432
      _s = s;
    6a08:	mov.w	r3, #92	; 0x5c
    6a0c:	strb.w	r3, [r4, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a10:	mvn.w	r3, #96	; 0x60
    6a14:	strb.w	r3, [r4, #1044]	; 0x414
    6a18:	mvn.w	r3, #92	; 0x5c
    6a1c:	strb.w	r3, [r4, #1056]	; 0x420
      _s = s;
      _b = b;
    6a20:	mvn.w	r3, #39	; 0x27
    6a24:	strb.w	r3, [r4, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a28:	mvn.w	r3, #32
    6a2c:	strb.w	r3, [r4, #1060]	; 0x424
    6a30:	mvn.w	r3, #70	; 0x46
    6a34:	strb.w	r3, [r4, #1063]	; 0x427
      _b = b;
    6a38:	mvn.w	r3, #16
    6a3c:	strb.w	r3, [r4, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a40:	mvn.w	r3, #92	; 0x5c
    6a44:	strb.w	r3, [r4, #1069]	; 0x42d
      _b = b;
    6a48:	mvn.w	r3, #10
    6a4c:	strb.w	r3, [r4, #1073]	; 0x431
    6a50:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a54:	strb.w	r2, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    6a58:	strb.w	r3, [r4, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a5c:	mvn.w	r3, #119	; 0x77
    6a60:	strb.w	r1, [r4, #1083]	; 0x43b
    6a64:	strb.w	r3, [r4, #1077]	; 0x435
      _s = s;
    6a68:	mov.w	r3, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a6c:	strb.w	r7, [r4, #1086]	; 0x43e
      _s = s;
    6a70:	strb.w	r3, [r4, #1078]	; 0x436
      _b = b;
    6a74:	mvn.w	r3, #19
    6a78:	strb.w	ip, [r4, #1091]	; 0x443
    6a7c:	strb.w	r3, [r4, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a80:	mov.w	r3, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a84:	strb.w	r7, [r4, #1092]	; 0x444
      _s = s;
    6a88:	strb.w	r3, [r4, #1081]	; 0x439
      _b = b;
    6a8c:	mvn.w	r3, #7
    6a90:	strb.w	r6, [r4, #1106]	; 0x452
    6a94:	strb.w	r3, [r4, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a98:	mvn.w	r3, #109	; 0x6d
    6a9c:	strb.w	r9, [r4, #1087]	; 0x43f
    6aa0:	strb.w	r3, [r4, #1084]	; 0x43c
      _b = b;
    6aa4:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6aa8:	strb.w	r8, [r4, #1090]	; 0x442
      _b = b;
    6aac:	strb.w	r3, [r4, #1085]	; 0x43d
    6ab0:	strb.w	r3, [r4, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ab4:	mvn.w	r3, #107	; 0x6b
    6ab8:	strb.w	r3, [r4, #1089]	; 0x441
      _s = s;
    6abc:	mvn.w	r3, #59	; 0x3b
    6ac0:	strb.w	r3, [r4, #1093]	; 0x445
      _b = b;
    6ac4:	mvn.w	r3, #42	; 0x2a
    6ac8:	strb.w	r3, [r4, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6acc:	mvn.w	r3, #118	; 0x76
    6ad0:	strb.w	r3, [r4, #1095]	; 0x447
      _s = s;
    6ad4:	mvn.w	r3, #65	; 0x41
    6ad8:	strb.w	r3, [r4, #1096]	; 0x448
      _b = b;
    6adc:	mvn.w	r3, #19
    6ae0:	strb.w	r3, [r4, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ae4:	mvn.w	r3, #109	; 0x6d
    6ae8:	strb.w	r3, [r4, #1098]	; 0x44a
      _s = s;
    6aec:	mvn.w	r3, #103	; 0x67
    6af0:	strb.w	r3, [r4, #1099]	; 0x44b
      _b = b;
    6af4:	mvn.w	r3, #21
    6af8:	strb.w	r3, [r4, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6afc:	mvn.w	r3, #93	; 0x5d
    6b00:	strb.w	r3, [r4, #1101]	; 0x44d
      _s = s;
    6b04:	mvn.w	r3, #51	; 0x33
    6b08:	strb.w	r3, [r4, #1102]	; 0x44e
      _b = b;
    6b0c:	mvn.w	r3, #46	; 0x2e
    6b10:	strb.w	r3, [r4, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b14:	mvn.w	r3, #101	; 0x65
    6b18:	strb.w	r3, [r4, #1104]	; 0x450
      _s = s;
    6b1c:	mov.w	r3, #79	; 0x4f
    6b20:	strb.w	r3, [r4, #1105]	; 0x451
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b24:	mov.w	r3, #102	; 0x66
    6b28:	strb.w	r3, [r4, #1107]	; 0x453
      _s = s;
    6b2c:	mov.w	r3, #103	; 0x67
    6b30:	strb.w	r3, [r4, #1108]	; 0x454
      _b = b;
    6b34:	mov.w	r3, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b38:	strb.w	r7, [r4, #1113]	; 0x459
      _s = s;
      _b = b;
    6b3c:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b40:	mov.w	r3, #80	; 0x50
    6b44:	strb.w	r3, [r4, #1110]	; 0x456
      _s = s;
    6b48:	mov.w	r3, #111	; 0x6f
    6b4c:	strb.w	r3, [r4, #1111]	; 0x457
      _b = b;
    6b50:	mov.w	r3, #117	; 0x75
    6b54:	strb.w	r3, [r4, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b58:	mov.w	r3, #58	; 0x3a
    6b5c:	strb.w	r3, [r4, #1114]	; 0x45a
      _b = b;
    6b60:	mov.w	r3, #87	; 0x57
    6b64:	strb.w	r3, [r4, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b68:	mov.w	r3, #18
    6b6c:	strb.w	r3, [r4, #1116]	; 0x45c
      _s = s;
    6b70:	mov.w	r3, #74	; 0x4a
    6b74:	strb.w	r3, [r4, #1117]	; 0x45d
      _b = b;
    6b78:	mvn.w	r3, #76	; 0x4c
    6b7c:	strb.w	r3, [r4, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b80:	mov.w	r3, #17
    6b84:	strb.w	r3, [r4, #1119]	; 0x45f
      _s = s;
    6b88:	mov.w	r3, #94	; 0x5e
    6b8c:	strb.w	r3, [r4, #1120]	; 0x460
      _b = b;
    6b90:	mvn.w	r3, #36	; 0x24
    6b94:	strb.w	r3, [r4, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b98:	mvn.w	r3, #51	; 0x33
    6b9c:	strb.w	r3, [r4, #1122]	; 0x462
      _s = s;
    6ba0:	mov.w	r3, #99	; 0x63
    6ba4:	strb.w	r3, [r4, #1123]	; 0x463
      _b = b;
    6ba8:	mvn.w	r3, #37	; 0x25
    6bac:	strb.w	r3, [r4, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bb0:	mvn.w	r3, #43	; 0x2b
    6bb4:	strb.w	r3, [r4, #1125]	; 0x465
      _s = s;
    6bb8:	mov.w	r3, #32
    6bbc:	strb.w	r3, [r4, #1126]	; 0x466
      _b = b;
    6bc0:	mvn.w	r3, #25
    6bc4:	strb.w	r3, [r4, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bc8:	mov.w	r3, #67	; 0x43
    6bcc:	strb.w	r3, [r4, #1129]	; 0x469
    6bd0:	mvn.w	r3, #18
    6bd4:	strb.w	r3, [r4, #1132]	; 0x46c
      _b = b;
    6bd8:	mvn.w	r3, #24
    6bdc:	strb.w	r3, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6be0:	mov.w	r3, #99	; 0x63
    6be4:	strb.w	r3, [r4, #1135]	; 0x46f
      _b = b;
    6be8:	mvn.w	r3, #15
    6bec:	strb.w	r3, [r4, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bf0:	mvn.w	r3, #55	; 0x37
    6bf4:	strb.w	r3, [r4, #1137]	; 0x471
      _s = s;
    6bf8:	mov.w	r3, #60	; 0x3c
    6bfc:	strb.w	r3, [r4, #1138]	; 0x472
      _b = b;
    6c00:	mvn.w	r3, #17
    6c04:	strb.w	r3, [r4, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c08:	mvn.w	r3, #49	; 0x31
    6c0c:	strb.w	r3, [r4, #1140]	; 0x474
      _s = s;
    6c10:	mov.w	r3, #58	; 0x3a
    6c14:	strb.w	r3, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c18:	mvn.w	r3, #70	; 0x46
    6c1c:	strb.w	r3, [r4, #1128]	; 0x468
      _s = s;
      _b = b;
    6c20:	mvn.w	r3, #33	; 0x21
    6c24:	strb.w	r3, [r4, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c28:	mvn.w	r3, #96	; 0x60
    6c2c:	strb.w	r3, [r4, #1131]	; 0x46b
    6c30:	mvn.w	r3, #83	; 0x53
    6c34:	strb.w	r3, [r4, #1134]	; 0x46e
      _s = s;
    6c38:	mov.w	r3, #97	; 0x61
      _b = b;
    6c3c:	strb.w	ip, [r4, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c40:	strb.w	r3, [r4, #1174]	; 0x496
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c44:	mvn.w	r3, #62	; 0x3e
    6c48:	strb.w	r0, [r4, #1149]	; 0x47d
    6c4c:	strb.w	r3, [r4, #1143]	; 0x477
      _s = s;
    6c50:	mvn.w	r3, #18
      _b = b;
    6c54:	strb.w	ip, [r4, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c58:	strb.w	r3, [r4, #1144]	; 0x478
      _b = b;
    6c5c:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c60:	strb.w	fp, [r4, #1165]	; 0x48d
      _b = b;
    6c64:	strb.w	r3, [r4, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c68:	mvn.w	r3, #75	; 0x4b
    6c6c:	strb.w	r3, [r4, #1146]	; 0x47a
      _s = s;
    6c70:	mov.w	r3, #78	; 0x4e
    6c74:	strb.w	r3, [r4, #1147]	; 0x47b
    6c78:	mov.w	r3, #72	; 0x48
    6c7c:	strb.w	r3, [r4, #1150]	; 0x47e
      _b = b;
    6c80:	mvn.w	r3, #18
    6c84:	strb.w	r3, [r4, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c88:	mvn.w	r3, #126	; 0x7e
    6c8c:	strb.w	r3, [r4, #1152]	; 0x480
      _s = s;
    6c90:	mvn.w	r3, #84	; 0x54
    6c94:	strb.w	r3, [r4, #1153]	; 0x481
      _b = b;
    6c98:	mvn.w	r3, #19
    6c9c:	strb.w	r3, [r4, #1154]	; 0x482
    6ca0:	mvn.w	r3, #22
    6ca4:	strb.w	r3, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ca8:	mvn.w	r3, #111	; 0x6f
    6cac:	strb.w	r3, [r4, #1158]	; 0x486
      _s = s;
    6cb0:	mov.w	r3, #125	; 0x7d
    6cb4:	strb.w	r3, [r4, #1159]	; 0x487
      _b = b;
    6cb8:	mvn.w	r3, #28
    6cbc:	strb.w	r3, [r4, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cc0:	mvn.w	r3, #108	; 0x6c
    6cc4:	strb.w	r3, [r4, #1161]	; 0x489
      _s = s;
    6cc8:	mvn.w	r3, #110	; 0x6e
    6ccc:	strb.w	r3, [r4, #1162]	; 0x48a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cd0:	mvn.w	r3, #103	; 0x67
    6cd4:	strb.w	r3, [r4, #1164]	; 0x48c
      _s = s;
      _b = b;
    6cd8:	mvn.w	r3, #31
    6cdc:	strb.w	r3, [r4, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ce0:	mvn.w	r3, #118	; 0x76
    6ce4:	strb.w	r3, [r4, #1167]	; 0x48f
      _s = s;
    6ce8:	mvn.w	r3, #95	; 0x5f
    6cec:	strb.w	r3, [r4, #1168]	; 0x490
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cf0:	mvn.w	r3, #109	; 0x6d
    6cf4:	strb.w	r3, [r4, #1170]	; 0x492
      _s = s;
    6cf8:	mvn.w	r3, #75	; 0x4b
    6cfc:	strb.w	r3, [r4, #1171]	; 0x493
      _b = b;
    6d00:	mvn.w	r3, #18
    6d04:	strb.w	r3, [r4, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d08:	mvn.w	r3, #111	; 0x6f
    6d0c:	strb.w	r3, [r4, #1173]	; 0x495
      _s = s;
      _b = b;
    6d10:	mvn.w	r3, #11
    6d14:	strb.w	r3, [r4, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d18:	mvn.w	r3, #122	; 0x7a
    6d1c:	strb.w	r3, [r4, #1155]	; 0x483
      _s = s;
    6d20:	mov.w	r3, #100	; 0x64
    6d24:	strb.w	r3, [r4, #1156]	; 0x484
      _b = b;
    6d28:	mvn.w	r3, #16
    6d2c:	strb.w	r3, [r4, #1169]	; 0x491
    6d30:	mvn.w	r3, #64	; 0x40
    6d34:	strb.w	r3, [r4, #1175]	; 0x497
    6d38:	mov.w	r3, #101	; 0x65
    6d3c:	strb.w	r3, [r4, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d40:	mov.w	r3, #55	; 0x37
    6d44:	strb.w	r3, [r4, #1176]	; 0x498
      _s = s;
    6d48:	mov.w	r3, #94	; 0x5e
    6d4c:	strb.w	r3, [r4, #1177]	; 0x499
      _b = b;
    6d50:	mvn.w	r3, #99	; 0x63
    6d54:	strb.w	r3, [r4, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d58:	mov.w	r3, #44	; 0x2c
    6d5c:	strb.w	r3, [r4, #1179]	; 0x49b
      _s = s;
      _b = b;
    6d60:	mov.w	r3, #111	; 0x6f
    6d64:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d68:	mvn.w	r3, #126	; 0x7e
    6d6c:	strb.w	r3, [r4, #1183]	; 0x49f
      _b = b;
    6d70:	mov.w	r3, #53	; 0x35
    6d74:	strb.w	r3, [r4, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d78:	mov.w	r3, #108	; 0x6c
    6d7c:	strb.w	r3, [r4, #1185]	; 0x4a1
      _s = s;
    6d80:	mvn.w	r3, #82	; 0x52
    6d84:	strb.w	r3, [r4, #1186]	; 0x4a2
      _b = b;
    6d88:	mov.w	r3, #47	; 0x2f
    6d8c:	strb.w	r3, [r4, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d90:	mov.w	r3, #18
    6d94:	strb.w	r3, [r4, #1188]	; 0x4a4
      _s = s;
    6d98:	mvn.w	r3, #94	; 0x5e
    6d9c:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6da0:	mvn.w	r3, #30
    6da4:	strb.w	r3, [r4, #1191]	; 0x4a7
      _s = s;
    6da8:	mov.w	r3, #95	; 0x5f
    6dac:	strb.w	r3, [r4, #1192]	; 0x4a8
      _b = b;
    6db0:	mvn.w	r3, #89	; 0x59
    6db4:	strb.w	r3, [r4, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6db8:	mvn.w	r3, #42	; 0x2a
    6dbc:	strb.w	r3, [r4, #1194]	; 0x4aa
      _s = s;
    6dc0:	mov.w	r3, #39	; 0x27
    6dc4:	strb.w	r3, [r4, #1195]	; 0x4ab
      _b = b;
    6dc8:	mvn.w	r3, #29
    6dcc:	strb.w	r3, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6dd0:	mov.w	r3, #33	; 0x21
    6dd4:	strb.w	r3, [r4, #1198]	; 0x4ae
      _b = b;
    6dd8:	mvn.w	r3, #21
    6ddc:	strb.w	r3, [r4, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6de0:	mvn.w	r3, #52	; 0x34
    6de4:	strb.w	r3, [r4, #1200]	; 0x4b0
      _s = s;
    6de8:	mov.w	r3, #41	; 0x29
    6dec:	strb.w	r3, [r4, #1201]	; 0x4b1
      _b = b;
    6df0:	mvn.w	r3, #26
    6df4:	strb.w	r3, [r4, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6df8:	mvn.w	r3, #95	; 0x5f
    6dfc:	strb.w	r3, [r4, #1203]	; 0x4b3
      _s = s;
    6e00:	mvn.w	r3, #75	; 0x4b
    6e04:	strb.w	r3, [r4, #1204]	; 0x4b4
      _b = b;
    6e08:	mvn.w	r3, #22
    6e0c:	strb.w	r3, [r4, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e10:	mvn.w	r3, #59	; 0x3b
    6e14:	strb.w	r3, [r4, #1206]	; 0x4b6
      _s = s;
    6e18:	mov.w	r3, #111	; 0x6f
    6e1c:	strb.w	r3, [r4, #1207]	; 0x4b7
    6e20:	mvn.w	r3, #33	; 0x21
    6e24:	strb.w	r3, [r4, #1180]	; 0x49c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e28:	mov.w	r3, #85	; 0x55
    6e2c:	strb.w	r3, [r4, #1182]	; 0x49e
    6e30:	mvn.w	r3, #39	; 0x27
    6e34:	strb.w	r3, [r4, #1197]	; 0x4ad
      _s = s;
      _b = b;
    6e38:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e3c:	strb.w	r6, [r4, #1227]	; 0x4cb
      _s = s;
      _b = b;
    6e40:	strb.w	r3, [r4, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e44:	mvn.w	r3, #78	; 0x4e
    6e48:	strb.w	r3, [r4, #1218]	; 0x4c2
    6e4c:	mvn.w	r3, #65	; 0x41
    6e50:	strb.w	r3, [r4, #1209]	; 0x4b9
      _s = s;
      _b = b;
    6e54:	mvn.w	r3, #18
    6e58:	strb.w	r3, [r4, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e5c:	mvn.w	r3, #41	; 0x29
    6e60:	strb.w	r3, [r4, #1212]	; 0x4bc
      _s = s;
    6e64:	mov.w	r3, #39	; 0x27
    6e68:	strb.w	r3, [r4, #1213]	; 0x4bd
      _b = b;
    6e6c:	mvn.w	r3, #17
    6e70:	strb.w	r3, [r4, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e74:	mvn.w	r3, #59	; 0x3b
    6e78:	strb.w	r3, [r4, #1215]	; 0x4bf
      _s = s;
    6e7c:	mvn.w	r3, #41	; 0x29
    6e80:	strb.w	r3, [r4, #1216]	; 0x4c0
    6e84:	mov.w	r3, #122	; 0x7a
    6e88:	strb.w	r3, [r4, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e8c:	mvn.w	r3, #109	; 0x6d
    6e90:	strb.w	r3, [r4, #1221]	; 0x4c5
      _s = s;
    6e94:	mov.w	r3, #55	; 0x37
    6e98:	strb.w	r3, [r4, #1222]	; 0x4c6
      _b = b;
    6e9c:	mvn.w	r3, #17
    6ea0:	strb.w	r3, [r4, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ea4:	mvn.w	r3, #126	; 0x7e
    6ea8:	strb.w	r3, [r4, #1224]	; 0x4c8
      _s = s;
    6eac:	mvn.w	r3, #95	; 0x5f
    6eb0:	strb.w	r3, [r4, #1225]	; 0x4c9
      _b = b;
    6eb4:	mvn.w	r3, #24
    6eb8:	strb.w	r3, [r4, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ebc:	mov.w	r3, #105	; 0x69
    6ec0:	strb.w	r3, [r4, #1228]	; 0x4cc
    6ec4:	mov.w	r3, #99	; 0x63
    6ec8:	strb.w	r3, [r4, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ecc:	mvn.w	r3, #108	; 0x6c
    6ed0:	strb.w	r3, [r4, #1233]	; 0x4d1
      _s = s;
    6ed4:	mov.w	r3, #103	; 0x67
    6ed8:	strb.w	r3, [r4, #1234]	; 0x4d2
      _b = b;
    6edc:	mvn.w	r3, #22
    6ee0:	strb.w	r3, [r4, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ee4:	mvn.w	r3, #104	; 0x68
    6ee8:	strb.w	r3, [r4, #1236]	; 0x4d4
      _s = s;
    6eec:	mov.w	r3, #79	; 0x4f
    6ef0:	strb.w	r3, [r4, #1237]	; 0x4d5
      _b = b;
    6ef4:	mvn.w	r3, #18
    6ef8:	strb.w	r3, [r4, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6efc:	mvn.w	r3, #110	; 0x6e
    6f00:	strb.w	r3, [r4, #1239]	; 0x4d7
      _s = s;
    6f04:	mov.w	r3, #119	; 0x77
    6f08:	strb.w	r3, [r4, #1240]	; 0x4d8
    6f0c:	mov.w	r3, #48	; 0x30
    6f10:	strb.w	r3, [r4, #1210]	; 0x4ba
      _b = b;
    6f14:	mvn.w	r3, #11
    6f18:	strb.w	r3, [r4, #1217]	; 0x4c1
    6f1c:	strb.w	r3, [r4, #1220]	; 0x4c4
    6f20:	strb.w	r3, [r4, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f24:	mvn.w	r3, #119	; 0x77
    6f28:	strb.w	r3, [r4, #1230]	; 0x4ce
      _s = s;
      _b = b;
    6f2c:	mvn.w	r3, #11
    6f30:	strb.w	r3, [r4, #1232]	; 0x4d0
    6f34:	strb.w	r3, [r4, #1241]	; 0x4d9
    6f38:	mvn.w	r3, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f3c:	strb.w	r7, [r4, #1245]	; 0x4dd
      _s = s;
      _b = b;
    6f40:	strb.w	r3, [r4, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f44:	mvn.w	r3, #100	; 0x64
    6f48:	strb.w	r3, [r4, #1242]	; 0x4da
      _s = s;
    6f4c:	mvn.w	r3, #103	; 0x67
    6f50:	strb.w	r3, [r4, #1243]	; 0x4db
      _b = b;
    6f54:	mvn.w	r3, #18
    6f58:	strb.w	r3, [r4, #1244]	; 0x4dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f5c:	mov.w	r3, #88	; 0x58
    6f60:	strb.w	r3, [r4, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f64:	mov.w	r3, #47	; 0x2f
    6f68:	strb.w	r3, [r4, #1248]	; 0x4e0
      _s = s;
    6f6c:	mov.w	r3, #124	; 0x7c
    6f70:	strb.w	r3, [r4, #1249]	; 0x4e1
      _b = b;
    6f74:	mov.w	r3, #117	; 0x75
    6f78:	strb.w	r3, [r4, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f7c:	mov.w	r3, #52	; 0x34
    6f80:	strb.w	r3, [r4, #1251]	; 0x4e3
      _s = s;
    6f84:	mvn.w	r3, #84	; 0x54
    6f88:	strb.w	r3, [r4, #1252]	; 0x4e4
      _b = b;
    6f8c:	mov.w	r3, #98	; 0x62
    6f90:	strb.w	r3, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f94:	mov.w	r3, #12
    6f98:	strb.w	r3, [r4, #1254]	; 0x4e6
      _s = s;
    6f9c:	mvn.w	r3, #48	; 0x30
    6fa0:	strb.w	r3, [r4, #1255]	; 0x4e7
      _b = b;
    6fa4:	mov.w	r3, #70	; 0x46
    6fa8:	strb.w	r3, [r4, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fac:	mvn.w	r3, #22
    6fb0:	strb.w	r3, [r4, #1257]	; 0x4e9
      _s = s;
    6fb4:	mov.w	r3, #36	; 0x24
    6fb8:	strb.w	r3, [r4, #1258]	; 0x4ea
      _b = b;
    6fbc:	mov.w	r3, #14
    6fc0:	strb.w	r3, [r4, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fc4:	mov.w	r3, #18
    6fc8:	strb.w	r3, [r4, #1260]	; 0x4ec
      _s = s;
    6fcc:	mvn.w	r3, #49	; 0x31
    6fd0:	strb.w	r3, [r4, #1261]	; 0x4ed
      _b = b;
    6fd4:	mov.w	r3, #116	; 0x74
    6fd8:	strb.w	r3, [r4, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6fdc:	mov.w	r3, #40	; 0x28
    6fe0:	strb.w	r3, [r4, #1264]	; 0x4f0
      _b = b;
    6fe4:	mvn.w	r3, #43	; 0x2b
    6fe8:	strb.w	r3, [r4, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fec:	strb.w	r3, [r4, #1266]	; 0x4f2
      _s = s;
    6ff0:	mov.w	r3, #39	; 0x27
    6ff4:	strb.w	r3, [r4, #1267]	; 0x4f3
      _b = b;
    6ff8:	mvn.w	r3, #27
    6ffc:	strb.w	r3, [r4, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7000:	mov.w	r3, #33	; 0x21
    7004:	strb.w	r3, [r4, #1270]	; 0x4f6
      _b = b;
    7008:	mvn.w	r3, #22
    700c:	strb.w	r3, [r4, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7010:	mvn.w	r3, #60	; 0x3c
    7014:	strb.w	r3, [r4, #1272]	; 0x4f8
      _s = s;
    7018:	mov.w	r3, #59	; 0x3b
    701c:	strb.w	r3, [r4, #1273]	; 0x4f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7020:	mvn.w	r3, #34	; 0x22
    7024:	strb.w	r3, [r4, #1263]	; 0x4ef
    7028:	mvn.w	r3, #39	; 0x27
    702c:	strb.w	r3, [r4, #1269]	; 0x4f5
      _s = s;
      _b = b;
    7030:	mvn.w	r3, #25
    7034:	strb.w	ip, [r4, #1280]	; 0x500
    7038:	strb.w	r3, [r4, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    703c:	mvn.w	r3, #72	; 0x48
    7040:	strb.w	r6, [r4, #1299]	; 0x513
    7044:	strb.w	r3, [r4, #1278]	; 0x4fe
    7048:	mvn.w	r3, #105	; 0x69
    704c:	strb.w	r3, [r4, #1275]	; 0x4fb
      _s = s;
    7050:	mvn.w	r3, #101	; 0x65
    7054:	strb.w	r3, [r4, #1276]	; 0x4fc
      _b = b;
    7058:	mvn.w	r3, #24
    705c:	strb.w	r3, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7060:	mov.w	r3, #122	; 0x7a
    7064:	strb.w	r3, [r4, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7068:	mvn.w	r3, #54	; 0x36
    706c:	strb.w	r3, [r4, #1281]	; 0x501
      _s = s;
    7070:	mov.w	r3, #80	; 0x50
    7074:	strb.w	r3, [r4, #1282]	; 0x502
      _b = b;
    7078:	mvn.w	r3, #21
    707c:	strb.w	r3, [r4, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7080:	mvn.w	r3, #51	; 0x33
    7084:	strb.w	r3, [r4, #1284]	; 0x504
      _s = s;
    7088:	mov.w	r3, #75	; 0x4b
    708c:	strb.w	r3, [r4, #1285]	; 0x505
      _b = b;
    7090:	mvn.w	r3, #19
    7094:	strb.w	r3, [r4, #1286]	; 0x506
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7098:	mvn.w	r3, #57	; 0x39
    709c:	strb.w	r3, [r4, #1287]	; 0x507
      _s = s;
    70a0:	mvn.w	r3, #55	; 0x37
    70a4:	strb.w	r3, [r4, #1288]	; 0x508
      _b = b;
    70a8:	mvn.w	r3, #12
    70ac:	strb.w	r3, [r4, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70b0:	mvn.w	r3, #82	; 0x52
    70b4:	strb.w	r3, [r4, #1290]	; 0x50a
      _s = s;
    70b8:	mov.w	r3, #124	; 0x7c
    70bc:	strb.w	r3, [r4, #1291]	; 0x50b
      _b = b;
    70c0:	mvn.w	r3, #12
    70c4:	strb.w	r3, [r4, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70c8:	mvn.w	r3, #108	; 0x6c
    70cc:	strb.w	r3, [r4, #1293]	; 0x50d
      _s = s;
    70d0:	mov.w	r3, #56	; 0x38
    70d4:	strb.w	r3, [r4, #1294]	; 0x50e
      _b = b;
    70d8:	mvn.w	r3, #22
    70dc:	strb.w	r3, [r4, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70e0:	mvn.w	r3, #127	; 0x7f
    70e4:	strb.w	r3, [r4, #1296]	; 0x510
      _s = s;
    70e8:	mov.w	r3, #105	; 0x69
    70ec:	strb.w	r3, [r4, #1297]	; 0x511
      _b = b;
    70f0:	mvn.w	r3, #7
    70f4:	strb.w	r3, [r4, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70f8:	mvn.w	r3, #100	; 0x64
    70fc:	strb.w	r3, [r4, #1300]	; 0x514
      _b = b;
    7100:	mvn.w	r3, #21
    7104:	strb.w	r3, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7108:	mvn.w	r3, #99	; 0x63
    710c:	strb.w	r3, [r4, #1302]	; 0x516
      _s = s;
    7110:	mvn.w	r3, #61	; 0x3d
    7114:	strb.w	r3, [r4, #1303]	; 0x517
      _b = b;
    7118:	mvn.w	r3, #26
    711c:	strb.w	r3, [r4, #1304]	; 0x518
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7120:	mov.w	r3, #99	; 0x63
    7124:	strb.w	r3, [r4, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7128:	mvn.w	r3, #96	; 0x60
    712c:	strb.w	r3, [r4, #1305]	; 0x519
      _s = s;
      _b = b;
    7130:	mvn.w	r3, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7134:	strb.w	r0, [r4, #1312]	; 0x520
      _b = b;
    7138:	strb.w	r3, [r4, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    713c:	mov.w	r3, #96	; 0x60
    7140:	strb.w	r3, [r4, #1309]	; 0x51d
      _b = b;
    7144:	mvn.w	r3, #23
    7148:	strb.w	r3, [r4, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    714c:	mvn.w	r3, #90	; 0x5a
    7150:	strb.w	r3, [r4, #1311]	; 0x51f
      _s = s;
      _b = b;
    7154:	mvn.w	r3, #21
    7158:	strb.w	r3, [r4, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    715c:	mvn.w	r3, #98	; 0x62
    7160:	strb.w	r3, [r4, #1314]	; 0x522
      _s = s;
    7164:	mvn.w	r3, #62	; 0x3e
    7168:	strb.w	r3, [r4, #1315]	; 0x523
      _b = b;
    716c:	mvn.w	r3, #22
    7170:	strb.w	r3, [r4, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7174:	mvn.w	r3, #111	; 0x6f
    7178:	strb.w	r3, [r4, #1317]	; 0x525
      _s = s;
      _b = b;
    717c:	mvn.w	r3, #71	; 0x47
    7180:	strb.w	r3, [r4, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7184:	mov.w	r3, #121	; 0x79
    7188:	strb.w	r3, [r4, #1321]	; 0x529
      _b = b;
    718c:	mov.w	r3, #120	; 0x78
    7190:	strb.w	r3, [r4, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7194:	mov.w	r3, #36	; 0x24
    7198:	strb.w	r3, [r4, #1323]	; 0x52b
      _s = s;
    719c:	mvn.w	r3, #49	; 0x31
    71a0:	strb.w	r3, [r4, #1324]	; 0x52c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71a4:	mov.w	r3, #105	; 0x69
    71a8:	strb.w	r3, [r4, #1326]	; 0x52e
      _s = s;
    71ac:	mvn.w	r3, #85	; 0x55
    71b0:	strb.w	r3, [r4, #1327]	; 0x52f
      _b = b;
    71b4:	mov.w	r3, #88	; 0x58
    71b8:	strb.w	r3, [r4, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71bc:	mov.w	r3, #108	; 0x6c
    71c0:	strb.w	r3, [r4, #1329]	; 0x531
      _s = s;
    71c4:	mvn.w	r3, #67	; 0x43
    71c8:	strb.w	r3, [r4, #1330]	; 0x532
      _b = b;
    71cc:	mov.w	r3, #46	; 0x2e
    71d0:	strb.w	r3, [r4, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71d4:	mov.w	r3, #116	; 0x74
    71d8:	strb.w	r3, [r4, #1333]	; 0x535
      _b = b;
    71dc:	mov.w	r3, #92	; 0x5c
    71e0:	strb.w	r3, [r4, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71e4:	mvn.w	r3, #6
    71e8:	strb.w	r3, [r4, #1335]	; 0x537
      _s = s;
    71ec:	mov.w	r3, #53	; 0x35
    71f0:	strb.w	r3, [r4, #1336]	; 0x538
      _b = b;
    71f4:	mvn.w	r3, #49	; 0x31
    71f8:	strb.w	r3, [r4, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71fc:	mvn.w	r3, #38	; 0x26
    7200:	strb.w	r3, [r4, #1338]	; 0x53a
      _s = s;
    7204:	mov.w	r3, #37	; 0x25
    7208:	strb.w	r3, [r4, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    720c:	mvn.w	r3, #96	; 0x60
    7210:	strb.w	r3, [r4, #1308]	; 0x51c
      _s = s;
    7214:	strb.w	r3, [r4, #1318]	; 0x526
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7218:	mov.w	r3, #114	; 0x72
    721c:	strb.w	r3, [r4, #1320]	; 0x528
      _s = s;
      _b = b;
    7220:	mov.w	r3, #73	; 0x49
    7224:	strb.w	r3, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7228:	mov.w	r3, #26
    722c:	strb.w	r3, [r4, #1332]	; 0x534
      _s = s;
      _b = b;
    7230:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7234:	strb.w	r1, [r4, #1368]	; 0x558
      _s = s;
      _b = b;
    7238:	strb.w	r3, [r4, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    723c:	mov.w	r3, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7240:	strb.w	r2, [r4, #1371]	; 0x55b
    7244:	mov.w	r2, #34	; 0x22
      _s = s;
    7248:	strb.w	r3, [r4, #1345]	; 0x541
      _b = b;
    724c:	mvn.w	r3, #25
    7250:	strb.w	r3, [r4, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7254:	mvn.w	r3, #69	; 0x45
    7258:	strb.w	r3, [r4, #1344]	; 0x540
      _s = s;
      _b = b;
    725c:	mvn.w	r3, #25
    7260:	strb.w	r3, [r4, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7264:	mvn.w	r3, #103	; 0x67
    7268:	strb.w	r3, [r4, #1347]	; 0x543
      _s = s;
    726c:	mvn.w	r3, #56	; 0x38
    7270:	strb.w	r3, [r4, #1348]	; 0x544
      _b = b;
    7274:	mvn.w	r3, #22
    7278:	strb.w	r3, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    727c:	mvn.w	r3, #65	; 0x41
    7280:	strb.w	r3, [r4, #1350]	; 0x546
      _s = s;
    7284:	mvn.w	r3, #81	; 0x51
    7288:	strb.w	r3, [r4, #1351]	; 0x547
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    728c:	mvn.w	r3, #57	; 0x39
    7290:	strb.w	r3, [r4, #1353]	; 0x549
      _s = s;
    7294:	mvn.w	r3, #82	; 0x52
    7298:	strb.w	r3, [r4, #1354]	; 0x54a
      _b = b;
    729c:	mvn.w	r3, #15
    72a0:	strb.w	r3, [r4, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72a4:	mvn.w	r3, #54	; 0x36
    72a8:	strb.w	r3, [r4, #1356]	; 0x54c
      _s = s;
    72ac:	mov.w	r3, #117	; 0x75
    72b0:	strb.w	r3, [r4, #1357]	; 0x54d
      _b = b;
    72b4:	mvn.w	r3, #14
    72b8:	strb.w	r3, [r4, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72bc:	mvn.w	r3, #59	; 0x3b
    72c0:	strb.w	r3, [r4, #1359]	; 0x54f
      _s = s;
    72c4:	mvn.w	r3, #64	; 0x40
    72c8:	strb.w	r3, [r4, #1360]	; 0x550
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72cc:	mvn.w	r3, #81	; 0x51
    72d0:	strb.w	r3, [r4, #1362]	; 0x552
    72d4:	mvn.w	r3, #110	; 0x6e
    72d8:	strb.w	r3, [r4, #1365]	; 0x555
      _s = s;
    72dc:	mov.w	r3, #46	; 0x2e
    72e0:	strb.w	r3, [r4, #1366]	; 0x556
      _b = b;
    72e4:	mvn.w	r3, #19
    72e8:	strb.w	r3, [r4, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72ec:	mvn.w	r3, #59	; 0x3b
    72f0:	strb.w	r3, [r4, #1369]	; 0x559
      _b = b;
    72f4:	mvn.w	r3, #12
    72f8:	strb.w	r3, [r4, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72fc:	mvn.w	r3, #45	; 0x2d
    7300:	strb.w	r3, [r4, #1341]	; 0x53d
      _s = s;
    7304:	mov.w	r3, #48	; 0x30
    7308:	strb.w	r3, [r4, #1342]	; 0x53e
      _b = b;
    730c:	mvn.w	r3, #16
    7310:	strb.w	r3, [r4, #1352]	; 0x548
    7314:	mvn.w	r3, #11
    7318:	strb.w	r3, [r4, #1361]	; 0x551
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    731c:	mvn.w	r3, #121	; 0x79
    7320:	strb.w	r3, [r4, #1363]	; 0x553
      _b = b;
    7324:	mvn.w	r3, #11
    7328:	strb.w	r3, [r4, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    732c:	mvn.w	r3, #102	; 0x66
    7330:	strb.w	r3, [r4, #1372]	; 0x55c
      _b = b;
    7334:	mvn.w	r3, #8
    7338:	strb.w	ip, [r4, #1388]	; 0x56c
    733c:	strb.w	r3, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7340:	mvn.w	r3, #75	; 0x4b
    7344:	strb.w	r3, [r4, #1383]	; 0x567
    7348:	mvn.w	r3, #101	; 0x65
    734c:	strb.w	r3, [r4, #1374]	; 0x55e
      _s = s;
    7350:	mvn.w	r3, #90	; 0x5a
    7354:	strb.w	r3, [r4, #1375]	; 0x55f
      _b = b;
    7358:	mvn.w	r3, #19
    735c:	strb.w	r3, [r4, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7360:	mvn.w	r3, #110	; 0x6e
    7364:	strb.w	r3, [r4, #1378]	; 0x562
      _b = b;
    7368:	mvn.w	r3, #13
    736c:	strb.w	r3, [r4, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7370:	mvn.w	r3, #77	; 0x4d
    7374:	strb.w	r3, [r4, #1380]	; 0x564
      _s = s;
    7378:	mvn.w	r3, #66	; 0x42
    737c:	strb.w	r3, [r4, #1381]	; 0x565
      _b = b;
    7380:	mvn.w	r3, #19
    7384:	strb.w	r3, [r4, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7388:	mvn.w	r3, #106	; 0x6a
    738c:	strb.w	r3, [r4, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7390:	mvn.w	r3, #81	; 0x51
    7394:	strb.w	r3, [r4, #1386]	; 0x56a
      _s = s;
    7398:	mov.w	r3, #113	; 0x71
    739c:	strb.w	r3, [r4, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73a0:	mvn.w	r3, #100	; 0x64
    73a4:	strb.w	r3, [r4, #1389]	; 0x56d
      _s = s;
    73a8:	mvn.w	r3, #94	; 0x5e
    73ac:	strb.w	r3, [r4, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73b0:	mov.w	r3, #103	; 0x67
    73b4:	strb.w	r3, [r4, #1392]	; 0x570
      _s = s;
    73b8:	mov.w	r3, #95	; 0x5f
    73bc:	strb.w	r3, [r4, #1393]	; 0x571
      _b = b;
    73c0:	mov.w	r3, #126	; 0x7e
    73c4:	strb.w	r3, [r4, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73c8:	mov.w	r3, #95	; 0x5f
    73cc:	strb.w	r3, [r4, #1395]	; 0x573
      _s = s;
    73d0:	mov.w	r3, #88	; 0x58
    73d4:	strb.w	r3, [r4, #1396]	; 0x574
      _b = b;
    73d8:	mvn.w	r3, #114	; 0x72
    73dc:	strb.w	r3, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e0:	mov.w	r3, #120	; 0x78
    73e4:	strb.w	r3, [r4, #1398]	; 0x576
      _s = s;
    73e8:	mvn.w	r3, #58	; 0x3a
    73ec:	strb.w	r3, [r4, #1399]	; 0x577
      _b = b;
    73f0:	mvn.w	r3, #127	; 0x7f
    73f4:	strb.w	r3, [r4, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73f8:	mov.w	r3, #95	; 0x5f
    73fc:	strb.w	r3, [r4, #1401]	; 0x579
      _s = s;
    7400:	mvn.w	r3, #84	; 0x54
    7404:	strb.w	r3, [r4, #1402]	; 0x57a
      _b = b;
    7408:	mov.w	r3, #82	; 0x52
    740c:	strb.w	r3, [r4, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7410:	mov.w	r3, #113	; 0x71
    7414:	strb.w	r3, [r4, #1404]	; 0x57c
      _s = s;
    7418:	mvn.w	r3, #126	; 0x7e
    741c:	strb.w	r3, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7420:	mvn.w	r3, #96	; 0x60
    7424:	strb.w	r3, [r4, #1377]	; 0x561
      _s = s;
      _b = b;
    7428:	mvn.w	r3, #16
    742c:	strb.w	r3, [r4, #1385]	; 0x569
    7430:	mvn.w	r3, #39	; 0x27
    7434:	strb.w	r3, [r4, #1391]	; 0x56f
    7438:	mvn.w	r3, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    743c:	strb.w	r6, [r4, #1429]	; 0x595
      _b = b;
    7440:	strb.w	r3, [r4, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7444:	mov.w	r3, #64	; 0x40
    7448:	strb.w	r3, [r4, #1408]	; 0x580
      _b = b;
    744c:	mvn.w	r3, #90	; 0x5a
    7450:	strb.w	r3, [r4, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7454:	mvn.w	r3, #58	; 0x3a
    7458:	strb.w	r3, [r4, #1410]	; 0x582
      _s = s;
    745c:	mov.w	r3, #72	; 0x48
    7460:	strb.w	r3, [r4, #1411]	; 0x583
      _b = b;
    7464:	mvn.w	r3, #27
    7468:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    746c:	mvn.w	r3, #65	; 0x41
    7470:	strb.w	r3, [r4, #1413]	; 0x585
      _s = s;
    7474:	mov.w	r3, #108	; 0x6c
    7478:	strb.w	r3, [r4, #1414]	; 0x586
      _b = b;
    747c:	mvn.w	r3, #21
    7480:	strb.w	r3, [r4, #1415]	; 0x587
    7484:	mvn.w	r3, #24
    7488:	strb.w	r3, [r4, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    748c:	mvn.w	r3, #85	; 0x55
    7490:	strb.w	r3, [r4, #1420]	; 0x58c
      _b = b;
    7494:	mvn.w	r3, #22
    7498:	strb.w	r3, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    749c:	mvn.w	r3, #73	; 0x49
    74a0:	strb.w	r3, [r4, #1422]	; 0x58e
      _s = s;
      _b = b;
    74a4:	mvn.w	r3, #17
    74a8:	strb.w	r3, [r4, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ac:	mvn.w	r3, #56	; 0x38
    74b0:	strb.w	r3, [r4, #1425]	; 0x591
      _s = s;
    74b4:	mvn.w	r3, #66	; 0x42
    74b8:	strb.w	r3, [r4, #1426]	; 0x592
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74bc:	mvn.w	r3, #55	; 0x37
    74c0:	strb.w	r3, [r4, #1428]	; 0x594
      _s = s;
      _b = b;
    74c4:	mvn.w	r3, #14
    74c8:	strb.w	r3, [r4, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74cc:	mvn.w	r3, #63	; 0x3f
    74d0:	strb.w	r3, [r4, #1431]	; 0x597
      _s = s;
    74d4:	mvn.w	r3, #81	; 0x51
    74d8:	strb.w	r3, [r4, #1432]	; 0x598
      _b = b;
    74dc:	mvn.w	r3, #13
    74e0:	strb.w	r3, [r4, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74e4:	mov.w	r3, #124	; 0x7c
    74e8:	strb.w	r3, [r4, #1435]	; 0x59b
      _b = b;
    74ec:	mvn.w	r3, #15
    74f0:	strb.w	r3, [r4, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74f4:	mvn.w	r3, #118	; 0x76
    74f8:	strb.w	r3, [r4, #1437]	; 0x59d
      _s = s;
    74fc:	mov.w	r3, #28
    7500:	strb.w	r3, [r4, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7504:	mvn.w	r3, #34	; 0x22
    7508:	strb.w	r3, [r4, #1407]	; 0x57f
    750c:	mvn.w	r3, #96	; 0x60
    7510:	strb.w	r3, [r4, #1416]	; 0x588
      _s = s;
    7514:	mvn.w	r3, #102	; 0x66
    7518:	strb.w	r3, [r4, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    751c:	mvn.w	r3, #119	; 0x77
    7520:	strb.w	r3, [r4, #1419]	; 0x58b
      _s = s;
    7524:	mov.w	r3, #109	; 0x6d
    7528:	strb.w	r3, [r4, #1423]	; 0x58f
      _b = b;
    752c:	mvn.w	r3, #16
    7530:	strb.w	r3, [r4, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7534:	mvn.w	r3, #96	; 0x60
    7538:	strb.w	r3, [r4, #1434]	; 0x59a
    753c:	mvn.w	r3, #68	; 0x44
      _s = s;
      _b = b;
    7540:	strb.w	ip, [r4, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7544:	strb.w	r3, [r4, #1452]	; 0x5ac
      _s = s;
    7548:	mvn.w	r3, #38	; 0x26
      _b = b;
    754c:	strb.w	ip, [r4, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7550:	strb.w	r3, [r4, #1444]	; 0x5a4
      _b = b;
    7554:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7558:	strb.w	r1, [r4, #1443]	; 0x5a3
      _s = s;
      _b = b;
    755c:	strb.w	r3, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7560:	mvn.w	r3, #110	; 0x6e
      _s = s;
    7564:	strb.w	r1, [r4, #1462]	; 0x5b6
    7568:	mov.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    756c:	strb.w	r3, [r4, #1446]	; 0x5a6
      _s = s;
    7570:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7574:	strb.w	r7, [r4, #1464]	; 0x5b8
      _s = s;
    7578:	strb.w	r3, [r4, #1447]	; 0x5a7
      _b = b;
    757c:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7580:	strb.w	ip, [r4, #1471]	; 0x5bf
      _b = b;
    7584:	strb.w	r3, [r4, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7588:	mvn.w	r3, #109	; 0x6d
      _s = s;
    758c:	strb.w	r6, [r4, #1450]	; 0x5aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7590:	strb.w	r3, [r4, #1449]	; 0x5a9
      _s = s;
      _b = b;
    7594:	mvn.w	r3, #6
    7598:	strb.w	r3, [r4, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    759c:	mov.w	r3, #126	; 0x7e
    75a0:	strb.w	r3, [r4, #1453]	; 0x5ad
      _b = b;
    75a4:	mvn.w	r3, #5
    75a8:	strb.w	r3, [r4, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ac:	mvn.w	r3, #53	; 0x35
    75b0:	strb.w	r3, [r4, #1455]	; 0x5af
      _s = s;
    75b4:	mov.w	r3, #52	; 0x34
    75b8:	strb.w	r3, [r4, #1456]	; 0x5b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75bc:	mvn.w	r3, #50	; 0x32
    75c0:	strb.w	r3, [r4, #1458]	; 0x5b2
      _s = s;
    75c4:	mov.w	r3, #62	; 0x3e
    75c8:	strb.w	r3, [r4, #1459]	; 0x5b3
      _b = b;
    75cc:	mvn.w	r3, #9
    75d0:	strb.w	r3, [r4, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75d4:	mvn.w	r3, #77	; 0x4d
    75d8:	strb.w	r3, [r4, #1461]	; 0x5b5
      _s = s;
    75dc:	mvn.w	r3, #46	; 0x2e
    75e0:	strb.w	r3, [r4, #1465]	; 0x5b9
      _b = b;
    75e4:	mov.w	r3, #118	; 0x76
    75e8:	strb.w	r3, [r4, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ec:	mov.w	r3, #110	; 0x6e
    75f0:	strb.w	r3, [r4, #1467]	; 0x5bb
      _s = s;
    75f4:	mvn.w	r3, #63	; 0x3f
    75f8:	strb.w	r3, [r4, #1468]	; 0x5bc
      _b = b;
    75fc:	mov.w	r3, #74	; 0x4a
    7600:	strb.w	r3, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7604:	mvn.w	r3, #121	; 0x79
    7608:	strb.w	r3, [r4, #1440]	; 0x5a0
      _s = s;
    760c:	mvn.w	r3, #83	; 0x53
    7610:	strb.w	r3, [r4, #1441]	; 0x5a1
      _b = b;
    7614:	mvn.w	r3, #8
    7618:	strb.w	r3, [r4, #1457]	; 0x5b1
    761c:	mvn.w	r3, #34	; 0x22
    7620:	strb.w	r3, [r4, #1463]	; 0x5b7
    7624:	mov.w	r3, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7628:	strb.w	r6, [r4, #1470]	; 0x5be
      _s = s;
      _b = b;
    762c:	strb.w	r3, [r4, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7630:	mvn.w	r3, #53	; 0x35
      _b = b;
    7634:	strb.w	r0, [r4, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7638:	strb.w	r3, [r4, #1474]	; 0x5c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    763c:	mvn.w	r3, #110	; 0x6e
      _s = s;
    7640:	strb.w	r7, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7644:	strb.w	r3, [r4, #1476]	; 0x5c4
      _s = s;
      _b = b;
    7648:	mov.w	r3, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    764c:	strb.w	lr, [r4, #1489]	; 0x5d1
      _b = b;
    7650:	strb.w	r3, [r4, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7654:	mvn.w	r3, #97	; 0x61
      _s = s;
      _b = b;
    7658:	strb.w	ip, [r4, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    765c:	strb.w	r3, [r4, #1479]	; 0x5c7
      _s = s;
      _b = b;
    7660:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7664:	strb.w	r7, [r4, #1498]	; 0x5da
      _b = b;
    7668:	strb.w	r3, [r4, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    766c:	mvn.w	r3, #95	; 0x5f
    7670:	strb.w	r6, [r4, #1473]	; 0x5c1
    7674:	strb.w	r3, [r4, #1482]	; 0x5ca
      _s = s;
    7678:	mvn.w	r3, #28
    767c:	strb.w	r9, [r4, #1495]	; 0x5d7
    7680:	strb.w	r3, [r4, #1483]	; 0x5cb
      _b = b;
    7684:	mvn.w	r3, #24
    7688:	strb.w	r3, [r4, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    768c:	mvn.w	r3, #5
    7690:	strb.w	r3, [r4, #1486]	; 0x5ce
      _b = b;
    7694:	mvn.w	r3, #22
    7698:	strb.w	r3, [r4, #1487]	; 0x5cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    769c:	mvn.w	r3, #98	; 0x62
    76a0:	strb.w	r3, [r4, #1488]	; 0x5d0
      _s = s;
      _b = b;
    76a4:	mvn.w	r3, #28
    76a8:	strb.w	r3, [r4, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ac:	mvn.w	r3, #108	; 0x6c
    76b0:	strb.w	r3, [r4, #1491]	; 0x5d3
      _s = s;
    76b4:	mvn.w	r3, #60	; 0x3c
    76b8:	strb.w	r3, [r4, #1492]	; 0x5d4
      _b = b;
    76bc:	mvn.w	r3, #26
    76c0:	strb.w	r3, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76c4:	mvn.w	r3, #101	; 0x65
    76c8:	strb.w	r3, [r4, #1494]	; 0x5d6
    76cc:	mvn.w	r3, #66	; 0x42
    76d0:	strb.w	r3, [r4, #1497]	; 0x5d9
    76d4:	mvn.w	r3, #61	; 0x3d
    76d8:	strb.w	r3, [r4, #1500]	; 0x5dc
    76dc:	mvn.w	r3, #88	; 0x58
    76e0:	strb.w	r3, [r4, #1503]	; 0x5df
      _s = s;
    76e4:	mvn.w	r3, #79	; 0x4f
    76e8:	strb.w	r3, [r4, #1480]	; 0x5c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ec:	mvn.w	r3, #96	; 0x60
    76f0:	strb.w	r3, [r4, #1485]	; 0x5cd
      _s = s;
      _b = b;
    76f4:	mvn.w	r3, #16
    76f8:	strb.w	r3, [r4, #1499]	; 0x5db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76fc:	mov.w	r3, #115	; 0x73
    7700:	strb.w	r3, [r4, #1501]	; 0x5dd
      _b = b;
    7704:	mvn.w	r3, #16
    7708:	strb.w	r3, [r4, #1502]	; 0x5de
    770c:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7710:	strb.w	r6, [r4, #1504]	; 0x5e0
      _b = b;
    7714:	strb.w	r3, [r4, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7718:	mov.w	r3, #113	; 0x71
    771c:	strb.w	r3, [r4, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7720:	mvn.w	r3, #111	; 0x6f
    7724:	strb.w	r3, [r4, #1506]	; 0x5e2
      _s = s;
      _b = b;
    7728:	mvn.w	r3, #17
    772c:	strb.w	r3, [r4, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7730:	mov.w	r3, #57	; 0x39
    7734:	strb.w	r3, [r4, #1510]	; 0x5e6
      _b = b;
    7738:	mvn.w	r3, #21
    773c:	strb.w	r3, [r4, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7740:	mov.w	r3, #94	; 0x5e
    7744:	strb.w	r3, [r4, #1512]	; 0x5e8
      _s = s;
    7748:	mov.w	r3, #40	; 0x28
    774c:	strb.w	r3, [r4, #1513]	; 0x5e9
      _b = b;
    7750:	mvn.w	r3, #87	; 0x57
    7754:	strb.w	r3, [r4, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7758:	mov.w	r3, #122	; 0x7a
    775c:	strb.w	r3, [r4, #1515]	; 0x5eb
      _s = s;
    7760:	mov.w	r3, #116	; 0x74
    7764:	strb.w	r3, [r4, #1516]	; 0x5ec
      _b = b;
    7768:	mvn.w	r3, #65	; 0x41
    776c:	strb.w	r3, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7770:	mvn.w	r3, #118	; 0x76
    7774:	strb.w	r3, [r4, #1518]	; 0x5ee
      _s = s;
    7778:	mvn.w	r3, #50	; 0x32
    777c:	strb.w	r3, [r4, #1519]	; 0x5ef
      _b = b;
    7780:	mvn.w	r3, #23
    7784:	strb.w	r3, [r4, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7788:	mvn.w	r3, #103	; 0x67
    778c:	strb.w	r3, [r4, #1521]	; 0x5f1
      _s = s;
    7790:	mvn.w	r3, #93	; 0x5d
    7794:	strb.w	r3, [r4, #1522]	; 0x5f2
      _b = b;
    7798:	mvn.w	r3, #9
    779c:	strb.w	r3, [r4, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77a0:	mvn.w	r3, #71	; 0x47
    77a4:	strb.w	r3, [r4, #1524]	; 0x5f4
      _s = s;
    77a8:	mov.w	r3, #108	; 0x6c
    77ac:	strb.w	r3, [r4, #1525]	; 0x5f5
      _b = b;
    77b0:	mvn.w	r3, #6
    77b4:	strb.w	r3, [r4, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77b8:	mvn.w	r3, #51	; 0x33
    77bc:	strb.w	r3, [r4, #1527]	; 0x5f7
      _s = s;
    77c0:	mov.w	r3, #59	; 0x3b
    77c4:	strb.w	r3, [r4, #1528]	; 0x5f8
      _b = b;
    77c8:	mvn.w	r3, #6
    77cc:	strb.w	r3, [r4, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77d0:	mvn.w	r3, #47	; 0x2f
    77d4:	strb.w	r3, [r4, #1530]	; 0x5fa
      _s = s;
    77d8:	mov.w	r3, #81	; 0x51
    77dc:	strb.w	r3, [r4, #1531]	; 0x5fb
      _b = b;
    77e0:	mvn.w	r3, #9
    77e4:	strb.w	r3, [r4, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77e8:	mvn.w	r3, #38	; 0x26
    77ec:	strb.w	r3, [r4, #1533]	; 0x5fd
      _s = s;
    77f0:	mov.w	r3, #37	; 0x25
    77f4:	strb.w	r3, [r4, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77f8:	mvn.w	r3, #94	; 0x5e
    77fc:	strb.w	r3, [r4, #1536]	; 0x600
      _s = s;
    7800:	mov.w	r3, #81	; 0x51
    7804:	strb.w	r3, [r4, #1537]	; 0x601
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7808:	mvn.w	r3, #120	; 0x78
    780c:	strb.w	r3, [r4, #1509]	; 0x5e5
      _s = s;
      _b = b;
    7810:	mvn.w	r3, #11
    7814:	strb.w	r3, [r4, #1535]	; 0x5ff
    7818:	mvn.w	r3, #77	; 0x4d
    781c:	strb.w	r0, [r4, #1544]	; 0x608
    7820:	mvn.w	r0, #47	; 0x2f
    7824:	strb.w	r3, [r4, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7828:	mov.w	r3, #84	; 0x54
      _s = s;
      _b = b;
    782c:	strb.w	r7, [r4, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7830:	strb.w	r3, [r4, #1539]	; 0x603
      _s = s;
    7834:	mov.w	r3, #91	; 0x5b
    7838:	strb.w	lr, [r4, #1552]	; 0x610
    783c:	strb.w	r3, [r4, #1540]	; 0x604
      _b = b;
    7840:	mvn.w	r3, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7844:	strb.w	lr, [r4, #1564]	; 0x61c
      _b = b;
    7848:	strb.w	r3, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    784c:	mov.w	r3, #118	; 0x76
    7850:	strb.w	fp, [r4, #1557]	; 0x615
    7854:	strb.w	r3, [r4, #1542]	; 0x606
      _s = s;
    7858:	mvn.w	r3, #63	; 0x3f
    785c:	strb.w	r3, [r4, #1543]	; 0x607
    7860:	mvn.w	r3, #65	; 0x41
    7864:	strb.w	r3, [r4, #1546]	; 0x60a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7868:	mvn.w	r3, #110	; 0x6e
    786c:	strb.w	r3, [r4, #1548]	; 0x60c
      _s = s;
    7870:	mvn.w	r3, #13
    7874:	strb.w	r3, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7878:	mvn.w	r3, #107	; 0x6b
    787c:	strb.w	r3, [r4, #1551]	; 0x60f
      _s = s;
      _b = b;
    7880:	mvn.w	r3, #65	; 0x41
    7884:	strb.w	r3, [r4, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7888:	mvn.w	r3, #101	; 0x65
    788c:	strb.w	r3, [r4, #1554]	; 0x612
      _s = s;
    7890:	mvn.w	r3, #105	; 0x69
    7894:	strb.w	r3, [r4, #1555]	; 0x613
      _b = b;
    7898:	mvn.w	r3, #31
    789c:	strb.w	r3, [r4, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78a0:	mov.w	r3, #75	; 0x4b
    78a4:	strb.w	r3, [r4, #1558]	; 0x616
      _b = b;
    78a8:	mvn.w	r3, #41	; 0x29
    78ac:	strb.w	r3, [r4, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78b0:	mvn.w	r3, #107	; 0x6b
    78b4:	strb.w	r3, [r4, #1560]	; 0x618
    78b8:	mvn.w	r3, #110	; 0x6e
    78bc:	strb.w	r3, [r4, #1566]	; 0x61e
      _s = s;
    78c0:	mvn.w	r3, #47	; 0x2f
    78c4:	strb.w	r3, [r4, #1567]	; 0x61f
      _b = b;
    78c8:	mvn.w	r3, #24
    78cc:	strb.w	r3, [r4, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78d0:	mvn.w	r3, #110	; 0x6e
    78d4:	strb.w	r3, [r4, #1569]	; 0x621
      _s = s;
    78d8:	mvn.w	r3, #40	; 0x28
    78dc:	strb.w	r3, [r4, #1570]	; 0x622
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78e0:	mov.w	r3, #100	; 0x64
    78e4:	strb.w	r3, [r4, #1545]	; 0x609
      _s = s;
      _b = b;
    78e8:	mov.w	r3, #63	; 0x3f
    78ec:	strb.w	r3, [r4, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78f0:	mvn.w	r3, #121	; 0x79
    78f4:	strb.w	r3, [r4, #1561]	; 0x619
      _b = b;
    78f8:	mvn.w	r3, #32
    78fc:	strb.w	r3, [r4, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7900:	mvn.w	r3, #96	; 0x60
    7904:	strb.w	r3, [r4, #1563]	; 0x61b
      _s = s;
      _b = b;
    7908:	mvn.w	r3, #39	; 0x27
    790c:	strb.w	r3, [r4, #1565]	; 0x61d
    7910:	mvn.w	r3, #23
    7914:	strb.w	ip, [r4, #1574]	; 0x626
    7918:	strb.w	r3, [r4, #1571]	; 0x623
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    791c:	mvn.w	r3, #106	; 0x6a
      _s = s;
      _b = b;
    7920:	strb.w	ip, [r4, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7924:	strb.w	r3, [r4, #1572]	; 0x624
      _s = s;
    7928:	mvn.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    792c:	strb.w	fp, [r4, #1581]	; 0x62d
      _s = s;
    7930:	strb.w	r3, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7934:	mvn.w	r3, #107	; 0x6b
    7938:	strb.w	r8, [r4, #1578]	; 0x62a
    793c:	strb.w	r3, [r4, #1575]	; 0x627
      _s = s;
    7940:	mvn.w	r3, #87	; 0x57
    7944:	strb.w	r3, [r4, #1576]	; 0x628
    7948:	mov.w	r3, #61	; 0x3d
    794c:	strb.w	r3, [r4, #1579]	; 0x62b
      _b = b;
    7950:	mvn.w	r3, #23
    7954:	strb.w	r3, [r4, #1580]	; 0x62c
    7958:	mvn.w	r3, #22
    795c:	strb.w	r3, [r4, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7960:	mvn.w	r3, #12
    7964:	strb.w	r3, [r4, #1584]	; 0x630
      _s = s;
    7968:	mov.w	r3, #88	; 0x58
    796c:	strb.w	r3, [r4, #1585]	; 0x631
      _b = b;
    7970:	mov.w	r3, #43	; 0x2b
    7974:	strb.w	r3, [r4, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7978:	mov.w	r3, #59	; 0x3b
    797c:	strb.w	r3, [r4, #1587]	; 0x633
      _s = s;
    7980:	mov.w	r3, #44	; 0x2c
    7984:	strb.w	r3, [r4, #1588]	; 0x634
      _b = b;
    7988:	mov.w	r3, #57	; 0x39
    798c:	strb.w	r3, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7990:	mov.w	r3, #125	; 0x7d
    7994:	strb.w	r3, [r4, #1590]	; 0x636
      _s = s;
    7998:	mov.w	r3, #79	; 0x4f
    799c:	strb.w	r3, [r4, #1591]	; 0x637
      _b = b;
    79a0:	mvn.w	r3, #47	; 0x2f
    79a4:	strb.w	r3, [r4, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79a8:	mov.w	r3, #95	; 0x5f
    79ac:	strb.w	r3, [r4, #1594]	; 0x63a
      _b = b;
    79b0:	mvn.w	r3, #9
    79b4:	strb.w	r3, [r4, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79b8:	mvn.w	r3, #66	; 0x42
    79bc:	strb.w	r3, [r4, #1596]	; 0x63c
      _s = s;
    79c0:	mov.w	r3, #116	; 0x74
    79c4:	strb.w	r3, [r4, #1597]	; 0x63d
      _b = b;
    79c8:	mvn.w	r3, #5
    79cc:	strb.w	r3, [r4, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79d0:	mvn.w	r3, #64	; 0x40
    79d4:	strb.w	r3, [r4, #1599]	; 0x63f
      _s = s;
    79d8:	mov.w	r3, #50	; 0x32
    79dc:	strb.w	r3, [r4, #1600]	; 0x640
      _b = b;
    79e0:	mvn.w	r3, #6
    79e4:	strb.w	r3, [r4, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79e8:	mov.w	r3, #57	; 0x39
    79ec:	strb.w	r3, [r4, #1603]	; 0x643
    79f0:	mov.w	r3, #63	; 0x3f
    79f4:	strb.w	r3, [r4, #1582]	; 0x62e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79f8:	mvn.w	r3, #121	; 0x79
    79fc:	strb.w	r3, [r4, #1593]	; 0x639
    7a00:	mvn.w	r3, #45	; 0x2d
    7a04:	strb.w	r3, [r4, #1602]	; 0x642
      _s = s;
      _b = b;
    7a08:	mvn.w	r3, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a0c:	strb.w	sl, [r4, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a10:	mvn.w	sl, #122	; 0x7a
      _s = s;
      _b = b;
    7a14:	strb.w	r3, [r4, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a18:	mvn.w	r3, #50	; 0x32
    7a1c:	strb.w	sl, [r4, #1620]	; 0x654
    7a20:	mvn.w	sl, #121	; 0x79
    7a24:	strb.w	r3, [r4, #1605]	; 0x645
      _s = s;
    7a28:	mov.w	r3, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a2c:	strb.w	sl, [r4, #1611]	; 0x64b
    7a30:	mvn.w	sl, #102	; 0x66
      _s = s;
    7a34:	strb.w	r3, [r4, #1606]	; 0x646
      _b = b;
    7a38:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a3c:	strb.w	sl, [r4, #1635]	; 0x663
      _s = s;
      _b = b;
    7a40:	mvn.w	sl, #39	; 0x27
    7a44:	strb.w	r3, [r4, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a48:	mvn.w	r3, #94	; 0x5e
    7a4c:	strb.w	r2, [r4, #1632]	; 0x660
int low_threshold = 200;
int high_threshold = 300;



Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    7a50:	movs	r2, #7
    7a52:	strb.w	r3, [r4, #1608]	; 0x648
      _s = s;
    7a56:	mov.w	r3, #117	; 0x75
    7a5a:	strb.w	r1, [r4, #1633]	; 0x661
    7a5e:	mov.w	r1, #576	; 0x240
    7a62:	strb.w	r3, [r4, #1609]	; 0x649
      _b = b;
    7a66:	mvn.w	r3, #28
    7a6a:	strb.w	r0, [r4, #1634]	; 0x662
    7a6e:	strb.w	r3, [r4, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a72:	mvn.w	r3, #12
    7a76:	strb.w	r8, [r4, #1627]	; 0x65b
    7a7a:	strb.w	r3, [r4, #1612]	; 0x64c
      _b = b;
    7a7e:	mvn.w	r3, #35	; 0x23
    7a82:	ldr	r0, [pc, #972]	; (7e50 <_GLOBAL__sub_I_nextTime3+0x64b4>)
    7a84:	strb.w	r3, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a88:	mvn.w	r3, #118	; 0x76
    7a8c:	strb.w	r3, [r4, #1614]	; 0x64e
      _s = s;
    7a90:	mvn.w	r3, #19
    7a94:	strb.w	r3, [r4, #1615]	; 0x64f
      _b = b;
    7a98:	mvn.w	r3, #46	; 0x2e
    7a9c:	strb.w	r3, [r4, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7aa0:	mvn.w	r3, #108	; 0x6c
    7aa4:	strb.w	r3, [r4, #1617]	; 0x651
      _s = s;
    7aa8:	mvn.w	r3, #43	; 0x2b
    7aac:	strb.w	r3, [r4, #1618]	; 0x652
      _b = b;
    7ab0:	mov.w	r3, #89	; 0x59
    7ab4:	strb.w	r3, [r4, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ab8:	mvn.w	r3, #25
    7abc:	strb.w	r3, [r4, #1621]	; 0x655
      _b = b;
    7ac0:	mvn.w	r3, #100	; 0x64
    7ac4:	strb.w	r3, [r4, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ac8:	mov.w	r3, #57	; 0x39
    7acc:	strb.w	r3, [r4, #1623]	; 0x657
      _s = s;
    7ad0:	mov.w	r3, #99	; 0x63
    7ad4:	strb.w	r3, [r4, #1624]	; 0x658
      _b = b;
    7ad8:	mvn.w	r3, #43	; 0x2b
    7adc:	strb.w	r3, [r4, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ae0:	mov.w	r3, #42	; 0x2a
    7ae4:	strb.w	r3, [r4, #1626]	; 0x65a
    7ae8:	mov.w	r3, #33	; 0x21
    7aec:	strb.w	r3, [r4, #1629]	; 0x65d
      _s = s;
    7af0:	mvn.w	r3, #84	; 0x54
    7af4:	strb.w	r3, [r4, #1630]	; 0x65e
      _b = b;
    7af8:	mvn.w	r3, #30
    7afc:	strb.w	r3, [r4, #1631]	; 0x65f
    7b00:	movs	r3, #82	; 0x52
    7b02:	strb.w	sl, [r4, #1628]	; 0x65c
    7b06:	mvn.w	sl, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b0a:	strb.w	r7, [r4, #1641]	; 0x669
      _s = s;
    7b0e:	mvn.w	r7, #57	; 0x39
      _b = b;
    7b12:	strb.w	sl, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b16:	mvn.w	sl, #101	; 0x65
      _s = s;
    7b1a:	strb.w	r7, [r4, #1642]	; 0x66a
      _b = b;
    7b1e:	mvn.w	r7, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b22:	strb.w	sl, [r4, #1638]	; 0x666
      _s = s;
    7b26:	mvn.w	sl, #2
      _b = b;
    7b2a:	strb.w	r7, [r4, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b2e:	mov.w	r7, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b32:	strb.w	r6, [r4, #1647]	; 0x66f
    7b36:	mvn.w	r6, #119	; 0x77
      _s = s;
    7b3a:	strb.w	r7, [r4, #1645]	; 0x66d
      _b = b;
    7b3e:	mvn.w	r7, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b42:	strb.w	sl, [r4, #1639]	; 0x667
      _b = b;
    7b46:	mvn.w	sl, #36	; 0x24
    7b4a:	strb.w	r7, [r4, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b4e:	mov.w	r7, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b52:	strb.w	r6, [r4, #1665]	; 0x681
    7b56:	mvn.w	r6, #8
      _s = s;
    7b5a:	strb.w	r7, [r4, #1648]	; 0x670
      _b = b;
    7b5e:	mvn.w	r7, #27
    7b62:	strb.w	sl, [r4, #1640]	; 0x668
    7b66:	strb.w	r7, [r4, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b6a:	mvn.w	r7, #114	; 0x72
    7b6e:	strb.w	r9, [r4, #1644]	; 0x66c
    7b72:	strb.w	r7, [r4, #1650]	; 0x672
      _s = s;
    7b76:	mov.w	r7, #83	; 0x53
    7b7a:	strb.w	r7, [r4, #1651]	; 0x673
      _b = b;
    7b7e:	mvn.w	r7, #25
    7b82:	strb.w	r7, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b86:	mvn.w	r7, #43	; 0x2b
    7b8a:	strb.w	r7, [r4, #1653]	; 0x675
      _s = s;
    7b8e:	mov.w	r7, #14
    7b92:	strb.w	r7, [r4, #1654]	; 0x676
      _b = b;
    7b96:	mvn.w	r7, #41	; 0x29
    7b9a:	strb.w	r7, [r4, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b9e:	mov.w	r7, #94	; 0x5e
    7ba2:	strb.w	r7, [r4, #1657]	; 0x679
      _b = b;
    7ba6:	mov.w	r7, #46	; 0x2e
    7baa:	strb.w	r7, [r4, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bae:	mov.w	r7, #1
    7bb2:	strb.w	r7, [r4, #1659]	; 0x67b
      _s = s;
    7bb6:	mov.w	r7, #90	; 0x5a
    7bba:	strb.w	r7, [r4, #1660]	; 0x67c
      _b = b;
    7bbe:	mov.w	r7, #62	; 0x3e
    7bc2:	strb.w	r7, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bc6:	mvn.w	r7, #107	; 0x6b
    7bca:	strb.w	r7, [r4, #1662]	; 0x67e
      _s = s;
    7bce:	mov.w	r7, #95	; 0x5f
    7bd2:	strb.w	r7, [r4, #1663]	; 0x67f
      _b = b;
    7bd6:	mov.w	r7, #88	; 0x58
    7bda:	strb.w	r7, [r4, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bde:	mvn.w	r7, #69	; 0x45
    7be2:	strb.w	r7, [r4, #1666]	; 0x682
      _b = b;
    7be6:	mvn.w	r7, #53	; 0x35
    7bea:	strb.w	r7, [r4, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bee:	mvn.w	r7, #111	; 0x6f
    7bf2:	strb.w	r7, [r4, #1668]	; 0x684
      _s = s;
    7bf6:	mov.w	r7, #95	; 0x5f
    7bfa:	strb.w	r7, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bfe:	strb.w	r6, [r4, #1656]	; 0x678
    7c02:	mvn.w	r6, #103	; 0x67
      _s = s;
      _b = b;
    7c06:	strb.w	ip, [r4, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c0a:	strb.w	r6, [r4, #1671]	; 0x687
      _s = s;
    7c0e:	mov.w	r6, #69	; 0x45
    7c12:	strb.w	lr, [r4, #1687]	; 0x697
    7c16:	strb.w	r6, [r4, #1672]	; 0x688
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c1a:	mvn.w	r6, #55	; 0x37
      _s = s;
    7c1e:	strb.w	lr, [r4, #1696]	; 0x6a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c22:	strb.w	r6, [r4, #1674]	; 0x68a
      _s = s;
    7c26:	mov.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c2a:	strb.w	r8, [r4, #1683]	; 0x693
      _s = s;
    7c2e:	strb.w	r6, [r4, #1675]	; 0x68b
      _b = b;
    7c32:	mvn.w	r6, #7
    7c36:	strb.w	r6, [r4, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c3a:	mvn.w	r6, #58	; 0x3a
    7c3e:	strb.w	r6, [r4, #1677]	; 0x68d
      _s = s;
    7c42:	mov.w	r6, #92	; 0x5c
    7c46:	strb.w	r6, [r4, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c4a:	mvn.w	r6, #110	; 0x6e
    7c4e:	strb.w	r6, [r4, #1680]	; 0x690
      _s = s;
    7c52:	mov.w	r6, #107	; 0x6b
    7c56:	strb.w	r6, [r4, #1681]	; 0x691
      _b = b;
    7c5a:	mvn.w	r6, #24
    7c5e:	strb.w	r6, [r4, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c62:	mvn.w	r6, #7
    7c66:	strb.w	r6, [r4, #1684]	; 0x694
      _b = b;
    7c6a:	mvn.w	r6, #71	; 0x47
    7c6e:	strb.w	r6, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c72:	mvn.w	r6, #109	; 0x6d
    7c76:	strb.w	r6, [r4, #1686]	; 0x696
      _s = s;
      _b = b;
    7c7a:	mvn.w	r6, #77	; 0x4d
    7c7e:	strb.w	r6, [r4, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c82:	mvn.w	r6, #6
    7c86:	strb.w	r6, [r4, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c8a:	mov.w	r6, #60	; 0x3c
    7c8e:	strb.w	r6, [r4, #1692]	; 0x69c
      _s = s;
    7c92:	mov.w	r6, #124	; 0x7c
    7c96:	strb.w	r6, [r4, #1693]	; 0x69d
      _b = b;
    7c9a:	mvn.w	r6, #61	; 0x3d
    7c9e:	strb.w	r6, [r4, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ca2:	mov.w	r6, #37	; 0x25
    7ca6:	strb.w	r6, [r4, #1695]	; 0x69f
    7caa:	mov.w	r6, #31
    7cae:	strb.w	r6, [r4, #1698]	; 0x6a2
      _s = s;
    7cb2:	mvn.w	r6, #25
    7cb6:	strb.w	r6, [r4, #1699]	; 0x6a3
      _b = b;
    7cba:	mvn.w	r6, #38	; 0x26
    7cbe:	strb.w	r6, [r4, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cc2:	mvn.w	r6, #51	; 0x33
    7cc6:	strb.w	r6, [r4, #1702]	; 0x6a6
      _b = b;
    7cca:	mvn.w	r6, #120	; 0x78
    7cce:	strb.w	r6, [r4, #1691]	; 0x69b
    7cd2:	mvn.w	r6, #33	; 0x21
    7cd6:	strb.w	r6, [r4, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cda:	mvn.w	r6, #121	; 0x79
    7cde:	strb.w	r6, [r4, #1689]	; 0x699
    7ce2:	mov.w	r6, #26
    7ce6:	strb.w	r6, [r4, #1701]	; 0x6a5
      _s = s;
      _b = b;
    7cea:	mvn.w	r6, #8
    7cee:	strb.w	r6, [r4, #1673]	; 0x689
    7cf2:	strb.w	r6, [r4, #1679]	; 0x68f
    7cf6:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cfa:	strb.w	sl, [r4, #1710]	; 0x6ae
      _s = s;
      _b = b;
    7cfe:	strb.w	r6, [r4, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d02:	mov.w	r6, #22
      _s = s;
    7d06:	strb.w	lr, [r4, #1726]	; 0x6be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d0a:	strb.w	r6, [r4, #1704]	; 0x6a8
      _s = s;
    7d0e:	mvn.w	r6, #71	; 0x47
    7d12:	strb.w	r6, [r4, #1705]	; 0x6a9
      _b = b;
    7d16:	mvn.w	r6, #30
    7d1a:	strb.w	r6, [r4, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d1e:	mov.w	r6, #13
    7d22:	strb.w	r6, [r4, #1707]	; 0x6ab
      _s = s;
    7d26:	mov.w	r6, #76	; 0x4c
    7d2a:	strb.w	r6, [r4, #1708]	; 0x6ac
      _b = b;
    7d2e:	mvn.w	r6, #27
    7d32:	strb.w	r6, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d36:	mov.w	r6, #62	; 0x3e
    7d3a:	strb.w	r6, [r4, #1711]	; 0x6af
      _b = b;
    7d3e:	mvn.w	r6, #87	; 0x57
    7d42:	strb.w	r6, [r4, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d46:	mov.w	r6, #56	; 0x38
    7d4a:	strb.w	r6, [r4, #1714]	; 0x6b2
      _b = b;
    7d4e:	mvn.w	r6, #43	; 0x2b
    7d52:	strb.w	r6, [r4, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d56:	mvn.w	r6, #13
    7d5a:	strb.w	r6, [r4, #1716]	; 0x6b4
      _s = s;
    7d5e:	mov.w	r6, #24
    7d62:	strb.w	r6, [r4, #1717]	; 0x6b5
      _b = b;
    7d66:	mvn.w	r6, #40	; 0x28
    7d6a:	strb.w	r6, [r4, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d6e:	mvn.w	r6, #18
    7d72:	strb.w	r6, [r4, #1719]	; 0x6b7
      _s = s;
    7d76:	mvn.w	r6, #127	; 0x7f
    7d7a:	strb.w	r6, [r4, #1720]	; 0x6b8
      _b = b;
    7d7e:	mvn.w	r6, #24
    7d82:	strb.w	r6, [r4, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d86:	mvn.w	r6, #15
    7d8a:	strb.w	r6, [r4, #1722]	; 0x6ba
      _s = s;
      _b = b;
    7d8e:	mvn.w	r6, #35	; 0x23
    7d92:	strb.w	r6, [r4, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d96:	mvn.w	r6, #26
    7d9a:	strb.w	r6, [r4, #1725]	; 0x6bd
      _s = s;
      _b = b;
    7d9e:	mvn.w	r6, #35	; 0x23
    7da2:	strb.w	r6, [r4, #1727]	; 0x6bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7da6:	mov.w	r6, #114	; 0x72
    7daa:	strb.w	r6, [r4, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dae:	mvn.w	r6, #16
    7db2:	strb.w	r6, [r4, #1713]	; 0x6b1
    7db6:	bl	8358 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    7dba:	ldr	r2, [pc, #152]	; (7e54 <_GLOBAL__sub_I_nextTime3+0x64b8>)
    7dbc:	ldr	r1, [pc, #152]	; (7e58 <_GLOBAL__sub_I_nextTime3+0x64bc>)
    7dbe:	ldr	r0, [pc, #144]	; (7e50 <_GLOBAL__sub_I_nextTime3+0x64b4>)
    7dc0:	bl	9f20 <__aeabi_atexit>
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    7dc4:	movs	r3, #82	; 0x52
    7dc6:	movs	r2, #8
    7dc8:	mov.w	r1, #576	; 0x240
    7dcc:	ldr	r0, [pc, #140]	; (7e5c <_GLOBAL__sub_I_nextTime3+0x64c0>)
    7dce:	bl	8358 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    7dd2:	ldr	r2, [pc, #128]	; (7e54 <_GLOBAL__sub_I_nextTime3+0x64b8>)
    7dd4:	ldr	r1, [pc, #128]	; (7e58 <_GLOBAL__sub_I_nextTime3+0x64bc>)
    7dd6:	ldr	r0, [pc, #132]	; (7e5c <_GLOBAL__sub_I_nextTime3+0x64c0>)
    7dd8:	bl	9f20 <__aeabi_atexit>
//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    7ddc:	movs	r3, #82	; 0x52
    7dde:	movs	r2, #2
    7de0:	movs	r1, #120	; 0x78
    7de2:	ldr	r0, [pc, #124]	; (7e60 <_GLOBAL__sub_I_nextTime3+0x64c4>)
    7de4:	bl	8358 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    7de8:	ldr	r2, [pc, #104]	; (7e54 <_GLOBAL__sub_I_nextTime3+0x64b8>)
    7dea:	ldr	r1, [pc, #108]	; (7e58 <_GLOBAL__sub_I_nextTime3+0x64bc>)
    7dec:	ldr	r0, [pc, #112]	; (7e60 <_GLOBAL__sub_I_nextTime3+0x64c4>)
    7dee:	bl	9f20 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    7df2:	movs	r3, #82	; 0x52
    7df4:	movs	r2, #14
    7df6:	movs	r1, #120	; 0x78
    7df8:	ldr	r0, [pc, #104]	; (7e64 <_GLOBAL__sub_I_nextTime3+0x64c8>)
    7dfa:	bl	8358 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    7dfe:	ldr	r2, [pc, #84]	; (7e54 <_GLOBAL__sub_I_nextTime3+0x64b8>)
    7e00:	ldr	r1, [pc, #84]	; (7e58 <_GLOBAL__sub_I_nextTime3+0x64bc>)
    7e02:	ldr	r0, [pc, #96]	; (7e64 <_GLOBAL__sub_I_nextTime3+0x64c8>)
    7e04:	bl	9f20 <__aeabi_atexit>
    7e08:	ldr	r3, [pc, #92]	; (7e68 <_GLOBAL__sub_I_nextTime3+0x64cc>)

	public:
		

Color(){
	RGB_updated = false;
    7e0a:	movs	r2, #0
    7e0c:	add.w	r1, r3, #440	; 0x1b8
    7e10:	strb.w	r2, [r3, #-20]
    7e14:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    7e16:	strb.w	r2, [r3, #-63]

	public:
		

Color(){
	RGB_updated = false;
    7e1a:	movs	r6, #0
		

		

Beam() {
	active = false;
    7e1c:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    7e20:	cmp	r3, r1
    7e22:	bne.n	7e10 <_GLOBAL__sub_I_nextTime3+0x6474>
    7e24:	ldr	r0, [pc, #68]	; (7e6c <_GLOBAL__sub_I_nextTime3+0x64d0>)
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7e26:	movs	r7, #1
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7e28:	ldr	r1, [pc, #68]	; (7e70 <_GLOBAL__sub_I_nextTime3+0x64d4>)
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7e2a:	movw	fp, #4636	; 0x121c
    7e2e:	ldr.w	r9, [r0]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    7e32:	ldr.w	ip, [pc, #72]	; 7e7c <_GLOBAL__sub_I_nextTime3+0x64e0>
      _background = current_bg;
    7e36:	add.w	r0, r1, #4640	; 0x1220
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7e3a:	ldr	r3, [pc, #56]	; (7e74 <_GLOBAL__sub_I_nextTime3+0x64d8>)
    7e3c:	str.w	r9, [ip]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7e40:	ldr.w	ip, [pc, #60]	; 7e80 <_GLOBAL__sub_I_nextTime3+0x64e4>
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7e44:	ldr	r2, [pc, #48]	; (7e78 <_GLOBAL__sub_I_nextTime3+0x64dc>)
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7e46:	str.w	ip, [r0]
    7e4a:	add.w	r0, r3, #4640	; 0x1220
    7e4e:	b.n	7e84 <_GLOBAL__sub_I_nextTime3+0x64e8>
    7e50:	.word	0x2000396c
    7e54:	.word	0x20000764
    7e58:	.word	0x00008071
    7e5c:	.word	0x20003980
    7e60:	.word	0x20006d78
    7e64:	.word	0x20006d8c
    7e68:	.word	0x20003a20
    7e6c:	.word	0x2000c078
    7e70:	.word	0x20001524
    7e74:	.word	0x20006da0
    7e78:	.word	0x200091e8
    7e7c:	.word	0x20001520
    7e80:	.word	0x200009a8
    7e84:	add.w	lr, r2, #4640	; 0x1220
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7e88:	str.w	r5, [r1, fp]
      _background = current_bg;
    7e8c:	str.w	ip, [r0]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7e90:	movs	r0, #2
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7e92:	str.w	ip, [lr]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7e96:	mov.w	lr, #3
    7e9a:	str	r0, [r1, #0]
      _penalty = penalty;
    7e9c:	str	r0, [r1, #8]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7e9e:	movs	r0, #10
      _isBg = isBg;
      _cellmask = current_mask;
    7ea0:	str.w	r5, [r2, fp]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7ea4:	str	r0, [r1, #20]
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    7ea6:	str	r0, [r3, #16]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7ea8:	movs	r0, #4
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7eaa:	str.w	r5, [r3, fp]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7eae:	str	r0, [r2, #0]
      _penalty = penalty;
    7eb0:	str	r0, [r2, #8]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7eb2:	movs	r0, #20
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    7eb4:	str	r6, [r1, #12]
      _minInit = minInit;
      _maxInit = maxInit;
    7eb6:	str	r0, [r3, #20]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7eb8:	ldr	r0, [pc, #280]	; (7fd4 <_GLOBAL__sub_I_nextTime3+0x6638>)
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    7eba:	str	r6, [r1, #16]
      _maxInit = maxInit;
      _isBg = isBg;
    7ebc:	strb	r6, [r1, #24]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    7ebe:	str	r6, [r2, #12]
      _minInit = minInit;
    7ec0:	str	r6, [r2, #16]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    7ec2:	str	r6, [r3, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    7ec4:	strb	r6, [r3, #24]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7ec6:	str	r7, [r1, #4]
    7ec8:	str	r7, [r2, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7eca:	str	r7, [r2, #20]
      _isBg = isBg;
    7ecc:	strb	r7, [r2, #24]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7ece:	str	r7, [r3, #4]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7ed0:	str.w	lr, [r3]
      _penalty = penalty;
    7ed4:	str.w	lr, [r3, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7ed8:	str	r7, [r0, #0]
      _penalty = penalty;
    7eda:	str	r7, [r0, #8]
      _reward = reward;
    7edc:	str	r7, [r0, #4]
      _floorInit = floorInit;
    7ede:	str	r6, [r0, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7ee0:	str.w	r5, [r0, fp]
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    7ee4:	str	r6, [r0, #16]
      _maxInit = maxInit;
    7ee6:	str	r7, [r0, #20]
      _isBg = isBg;
    7ee8:	strb	r6, [r0, #24]
      _cellmask = current_mask;
      _background = current_bg;
    7eea:	add.w	r0, r0, #4640	; 0x1220
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7eee:	ldr.w	sl, [pc, #260]	; 7ff4 <_GLOBAL__sub_I_nextTime3+0x6658>
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7ef2:	str.w	ip, [r0]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7ef6:	movs	r0, #20
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7ef8:	ldr.w	r8, [pc, #252]	; 7ff8 <_GLOBAL__sub_I_nextTime3+0x665c>
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    7efc:	str.w	r0, [sl, #20]
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    7f00:	movs	r0, #10
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f02:	ldr.w	r9, [pc, #248]	; 7ffc <_GLOBAL__sub_I_nextTime3+0x6660>
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7f06:	add.w	ip, r8, #4640	; 0x1220
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    7f0a:	str.w	r0, [sl, #16]
      _maxInit = maxInit;
    7f0e:	str.w	r0, [r8, #20]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f12:	movs	r0, #2
    7f14:	str.w	lr, [sl]
    7f18:	str.w	r0, [r8]
      _penalty = penalty;
    7f1c:	str.w	r0, [r8, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f20:	movs	r0, #4
      _penalty = penalty;
    7f22:	str.w	lr, [sl, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f26:	str.w	r0, [r9]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7f2a:	ldr.w	lr, [pc, #212]	; 8000 <_GLOBAL__sub_I_nextTime3+0x6664>
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    7f2e:	str.w	r0, [r9, #8]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7f32:	add.w	r0, r9, #4640	; 0x1220
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f36:	ldr	r5, [pc, #160]	; (7fd8 <_GLOBAL__sub_I_nextTime3+0x663c>)
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7f38:	str.w	lr, [r0]
    7f3c:	add.w	r0, sl, #4640	; 0x1220
    7f40:	str.w	lr, [ip]
    7f44:	str.w	lr, [r0]
Automaton grow_automaton_B = Automaton(3, 1, 3, 0, 10, 20, false, mask_B, background_B);
Automaton sat_automaton_B = Automaton(1, 1, 1, 0, 0, 1, false, mask_B, background_B);


//-----------------------------------------------------------------------------------------
Screen screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A);
    7f48:	ldr.w	ip, [pc, #184]	; 8004 <_GLOBAL__sub_I_nextTime3+0x6668>
    7f4c:	ldr	r0, [pc, #132]	; (7fd4 <_GLOBAL__sub_I_nextTime3+0x6638>)
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7f4e:	str.w	r4, [sl, fp]
    7f52:	str.w	r4, [r8, fp]
    7f56:	str.w	r4, [r9, fp]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7f5a:	str.w	r7, [sl, #4]
      _floorInit = floorInit;
    7f5e:	str.w	r6, [sl, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    7f62:	strb.w	r6, [sl, #24]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7f66:	str.w	r7, [r8, #4]
      _floorInit = floorInit;
    7f6a:	str.w	r6, [r8, #12]
      _minInit = minInit;
    7f6e:	str.w	r6, [r8, #16]
      _maxInit = maxInit;
      _isBg = isBg;
    7f72:	strb.w	r6, [r8, #24]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7f76:	str.w	r7, [r9, #4]
      _floorInit = floorInit;
    7f7a:	str.w	r6, [r9, #12]
      _minInit = minInit;
    7f7e:	str.w	r6, [r9, #16]
      _maxInit = maxInit;
    7f82:	str.w	r7, [r9, #20]
      _isBg = isBg;
    7f86:	strb.w	r7, [r9, #24]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    7f8a:	str	r7, [r5, #0]
    7f8c:	stmia.w	sp, {r0, ip}
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    7f90:	str.w	r4, [r5, fp]
      _background = current_bg;
    7f94:	add.w	r4, r5, #4640	; 0x1220
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    7f98:	str	r7, [r5, #8]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    7f9a:	str.w	lr, [r4]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    7f9e:	str	r7, [r5, #4]
      _floorInit = floorInit;
    7fa0:	str	r6, [r5, #12]
      _minInit = minInit;
    7fa2:	str	r6, [r5, #16]
      _maxInit = maxInit;
    7fa4:	str	r7, [r5, #20]
      _isBg = isBg;
    7fa6:	strb	r6, [r5, #24]
    7fa8:	ldr	r0, [pc, #48]	; (7fdc <_GLOBAL__sub_I_nextTime3+0x6640>)
    7faa:	bl	3d8 <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>
Screen screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B);
    7fae:	ldr	r0, [pc, #48]	; (7fe0 <_GLOBAL__sub_I_nextTime3+0x6644>)
    7fb0:	mov	r3, sl
    7fb2:	mov	r2, r9
    7fb4:	mov	r1, r8
    7fb6:	str	r0, [sp, #4]
    7fb8:	str	r5, [sp, #0]
    7fba:	ldr	r0, [pc, #40]	; (7fe4 <_GLOBAL__sub_I_nextTime3+0x6648>)
    7fbc:	bl	3d8 <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*)>
    7fc0:	ldr	r3, [pc, #36]	; (7fe8 <_GLOBAL__sub_I_nextTime3+0x664c>)
    7fc2:	ldr	r1, [pc, #40]	; (7fec <_GLOBAL__sub_I_nextTime3+0x6650>)
    7fc4:	ldr	r0, [r3, #0]
    7fc6:	ldr	r2, [r3, #0]
    7fc8:	ldr	r3, [pc, #36]	; (7ff0 <_GLOBAL__sub_I_nextTime3+0x6654>)
    7fca:	str	r0, [r1, #0]
    7fcc:	str	r2, [r3, #0]

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    7fce:	add	sp, #12
    7fd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fd4:	.word	0x20004dd4
    7fd8:	.word	0x20003bb0
    7fdc:	.word	0x20003994
    7fe0:	.word	0x20003980
    7fe4:	.word	0x200039c4
    7fe8:	.word	0x2000c078
    7fec:	.word	0x20003bac
    7ff0:	.word	0x2000151c
    7ff4:	.word	0x20007fc4
    7ff8:	.word	0x20002748
    7ffc:	.word	0x2000a40c
    8000:	.word	0x20000768
    8004:	.word	0x2000396c

00008008 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    8008:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    800a:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    800c:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    800e:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    8010:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    8012:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    8014:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    8018:	cbz	r3, 8032 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    801a:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    801e:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    8022:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    8026:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    802a:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    802e:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    8032:	ldrb	r7, [r0, #15]
    8034:	ldrb	r4, [r0, #12]
    8036:	cmp	r4, r7
    8038:	beq.n	8064 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    803a:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    803c:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    803e:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    8042:	add	r7, r1
    8044:	cbnz	r3, 805a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    8046:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    8048:	strb	r3, [r7, #0]
    804a:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    804c:	strb	r6, [r1, r7]
    p[gOffset] = g;
    804e:	ldrb	r3, [r0, #13]
    8050:	strb	r5, [r1, r3]
    p[bOffset] = b;
    8052:	ldrb	r3, [r0, #14]
    8054:	strb.w	lr, [r1, r3]
    8058:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    805a:	mul.w	r3, r3, r2
    805e:	ubfx	r3, r3, #8, #8
    8062:	b.n	8048 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    8064:	add.w	r1, r1, r1, lsl #1
    8068:	ldr	r3, [r0, #8]
    806a:	add	r1, r3
    806c:	b.n	804c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    806e:	nop

00008070 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    8070:	push	{r4, lr}
    8072:	mov	r4, r0
  if(pixels)   free(pixels);
    8074:	ldr	r0, [r0, #8]
    8076:	cbz	r0, 807c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    8078:	bl	a014 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    807c:	ldrsb.w	r0, [r4, #6]
    8080:	cmp	r0, #0
    8082:	blt.n	808c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    8084:	uxtb	r0, r0
    8086:	movs	r1, #0
    8088:	bl	9570 <pinMode>
}
    808c:	mov	r0, r4
    808e:	pop	{r4, pc}

00008090 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    8090:	push	{r4, lr}
    8092:	mov	r4, r0
  if(pin >= 0) {
    8094:	ldrsb.w	r0, [r0, #6]
    8098:	cmp	r0, #0
    809a:	blt.n	80ac <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    809c:	uxtb	r0, r0
    809e:	movs	r1, #1
    80a0:	bl	9570 <pinMode>
    digitalWrite(pin, LOW);
    80a4:	movs	r1, #0
    80a6:	ldrb	r0, [r4, #6]
    80a8:	bl	9564 <digitalWrite>
  }
  begun = true;
    80ac:	movs	r3, #1
    80ae:	strb	r3, [r4, #1]
    80b0:	pop	{r4, pc}
    80b2:	nop

000080b4 <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    80b4:	push	{r3, r4, r5, lr}
    80b6:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    80b8:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    80ba:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    80bc:	cbz	r0, 80c2 <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    80be:	bl	a014 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    80c2:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    80c4:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    80c6:	ldrb	r0, [r4, #12]
    80c8:	cmp	r3, r0
    80ca:	ite	eq
    80cc:	moveq	r0, #3
    80ce:	movne	r0, #4
    80d0:	smulbb	r0, r0, r5
    80d4:	uxth	r0, r0
    80d6:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    80d8:	bl	9f2c <calloc>
    80dc:	str	r0, [r4, #8]
    80de:	cbz	r0, 80e4 <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    80e0:	strh	r5, [r4, #2]
    80e2:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    80e4:	strh	r0, [r4, #4]
    80e6:	strh	r0, [r4, #2]
    80e8:	pop	{r3, r4, r5, pc}
    80ea:	nop

000080ec <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    80ec:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    80ee:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    80f0:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    80f4:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    80f8:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    80fa:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    80fe:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8102:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8106:	ite	hi
    8108:	movhi	r6, #0
    810a:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    810c:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8110:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    8114:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    8116:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    8118:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    811a:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    811c:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    811e:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    8120:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    8122:	cbz	r5, 813a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    8124:	subs	r1, r2, r1
    8126:	clz	r1, r1
    812a:	lsrs	r1, r1, #5
    812c:	cmp	r1, r4
    812e:	beq.n	813a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    8130:	ldrh	r1, [r0, #2]
  }
}
    8132:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    8136:	b.w	80b4 <Adafruit_NeoPixel::updateLength(unsigned short)>
    813a:	pop	{r4, r5, r6, r7, pc}

0000813c <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    813c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    8140:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    8142:	sub	sp, #20
    8144:	str	r0, [sp, #12]

  if(!pixels) return;
    8146:	cmp	r3, #0
    8148:	beq.n	822e <Adafruit_NeoPixel::show()+0xf2>
    814a:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    814c:	bl	9490 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    8150:	ldr	r3, [r4, #16]
    8152:	subs	r0, r0, r3
    8154:	cmp.w	r0, #300	; 0x12c
    8158:	bcc.n	814c <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    815a:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    815c:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    815e:	ldr	r0, [pc, #408]	; (82f8 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8160:	ldrsb.w	r3, [r6, #6]
    8164:	ldr	r4, [pc, #404]	; (82fc <Adafruit_NeoPixel::show()+0x1c0>)
    8166:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8168:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    816a:	ldr	r1, [pc, #404]	; (8300 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    816c:	ldr.w	ip, [r4, r3]
    8170:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    8172:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8174:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    8178:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    817c:	mov	r5, r6
    817e:	mov	r6, r3
    8180:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    8182:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8184:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    8186:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8188:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    818a:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    818c:	ldr	r4, [pc, #372]	; (8304 <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    818e:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    8192:	str	r2, [sp, #8]
    8194:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    8196:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8198:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    819a:	ldr	r1, [pc, #364]	; (8308 <Adafruit_NeoPixel::show()+0x1cc>)
    819c:	ldr	r0, [r4, #0]
    819e:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    81a0:	cmp	r2, #0
    81a2:	beq.n	8234 <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    81a4:	ldr	r5, [pc, #356]	; (830c <Adafruit_NeoPixel::show()+0x1d0>)
    81a6:	lsrs	r3, r3, #8
    while(p < end) {
    81a8:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    81aa:	umull	r2, r3, r5, r3
    81ae:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    81b2:	bcs.n	820e <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    81b4:	ldr	r7, [pc, #344]	; (8310 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    81b6:	ldr	r6, [pc, #348]	; (8314 <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    81b8:	ldr	r3, [sp, #4]
    81ba:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    81be:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    81c2:	ldrb.w	sl, [r3], #1
    81c6:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    81c8:	ldr	r2, [r4, #0]
    81ca:	ldr	r3, [r1, #0]
    81cc:	subs	r2, r2, r0
    81ce:	lsrs	r3, r3, #8
    81d0:	umull	fp, r3, r5, r3
    81d4:	cmp.w	r2, r3, lsr #4
    81d8:	bcc.n	81c8 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    81da:	ldr	r3, [pc, #296]	; (8304 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    81dc:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    81e0:	ldr	r0, [r3, #0]
        *set = msk;
    81e2:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    81e6:	beq.n	82e6 <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    81e8:	ldr	r3, [r4, #0]
    81ea:	ldr	r2, [r1, #0]
    81ec:	subs	r3, r3, r0
    81ee:	umull	fp, r2, r7, r2
    81f2:	cmp.w	r3, r2, lsr #19
    81f6:	bcc.n	81e8 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    81f8:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    81fc:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8200:	mov.w	lr, lr, lsr #1
    8204:	bne.n	81c8 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    8206:	ldr	r3, [sp, #8]
    8208:	ldr	r2, [sp, #4]
    820a:	cmp	r3, r2
    820c:	bne.n	81b8 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    820e:	ldr	r5, [pc, #244]	; (8304 <Adafruit_NeoPixel::show()+0x1c8>)
    8210:	ldr	r4, [pc, #248]	; (830c <Adafruit_NeoPixel::show()+0x1d0>)
    8212:	ldr	r2, [r5, #0]
    8214:	ldr	r3, [r1, #0]
    8216:	subs	r2, r2, r0
    8218:	lsrs	r3, r3, #8
    821a:	umull	r6, r3, r4, r3
    821e:	cmp.w	r2, r3, lsr #4
    8222:	bcc.n	8212 <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    8224:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    8226:	bl	9490 <micros>
    822a:	ldr	r3, [sp, #12]
    822c:	str	r0, [r3, #16]
}
    822e:	add	sp, #20
    8230:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    8234:	ldr	r6, [pc, #212]	; (830c <Adafruit_NeoPixel::show()+0x1d0>)
    8236:	lsrs	r3, r3, #7
    8238:	umull	r2, r3, r6, r3
    while(p < end) {
    823c:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    823e:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    8242:	ldr	r3, [sp, #4]
    8244:	cmp	r3, r2
    8246:	bcs.n	82b2 <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    8248:	ldr.w	lr, [pc, #204]	; 8318 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    824c:	ldr	r7, [pc, #196]	; (8314 <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    824e:	ldr	r3, [sp, #4]
    8250:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    8254:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    8258:	ldrb.w	fp, [r3], #1
    825c:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    825e:	ldr	r2, [r4, #0]
    8260:	ldr	r3, [r1, #0]
    8262:	subs	r2, r2, r0
    8264:	lsrs	r3, r3, #7
    8266:	umull	r5, r3, r6, r3
    826a:	cmp.w	r2, r3, lsr #4
    826e:	bcc.n	825e <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    8270:	ldr	r3, [pc, #144]	; (8304 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    8272:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    8276:	ldr	r0, [r3, #0]
        *set = msk;
    8278:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    827c:	beq.n	82d4 <Adafruit_NeoPixel::show()+0x198>
    827e:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    8282:	ldr	r2, [r4, #0]
    8284:	ldr	r5, [r1, #0]
    8286:	subs	r2, r2, r0
    8288:	umull	ip, r3, lr, r5
    828c:	subs	r5, r5, r3
    828e:	add.w	r3, r3, r5, lsr #1
    8292:	cmp.w	r2, r3, lsr #19
    8296:	bcc.n	8282 <Adafruit_NeoPixel::show()+0x146>
    8298:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    829c:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    82a0:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    82a4:	mov.w	r9, r9, lsr #1
    82a8:	bne.n	825e <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    82aa:	ldr	r3, [sp, #8]
    82ac:	ldr	r2, [sp, #4]
    82ae:	cmp	r3, r2
    82b0:	bne.n	824e <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    82b2:	ldr	r5, [pc, #80]	; (8304 <Adafruit_NeoPixel::show()+0x1c8>)
    82b4:	ldr	r4, [pc, #84]	; (830c <Adafruit_NeoPixel::show()+0x1d0>)
    82b6:	ldr	r2, [r5, #0]
    82b8:	ldr	r3, [r1, #0]
    82ba:	subs	r2, r2, r0
    82bc:	lsrs	r3, r3, #7
    82be:	umull	r6, r3, r4, r3
    82c2:	cmp.w	r2, r3, lsr #4
    82c6:	bcc.n	82b6 <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    82c8:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    82ca:	bl	9490 <micros>
    82ce:	ldr	r3, [sp, #12]
    82d0:	str	r0, [r3, #16]
    82d2:	b.n	822e <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    82d4:	ldr	r3, [r4, #0]
    82d6:	ldr	r2, [r1, #0]
    82d8:	subs	r3, r3, r0
    82da:	umull	r5, r2, r7, r2
    82de:	cmp.w	r3, r2, lsr #19
    82e2:	bcc.n	82d4 <Adafruit_NeoPixel::show()+0x198>
    82e4:	b.n	829c <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    82e6:	ldr	r3, [r4, #0]
    82e8:	ldr	r2, [r1, #0]
    82ea:	subs	r3, r3, r0
    82ec:	umull	fp, r2, r6, r2
    82f0:	cmp.w	r3, r2, lsr #20
    82f4:	bcc.n	82e6 <Adafruit_NeoPixel::show()+0x1aa>
    82f6:	b.n	81f8 <Adafruit_NeoPixel::show()+0xbc>
    82f8:	.word	0xe000edfc
    82fc:	.word	0x20000448
    8300:	.word	0xe0001000
    8304:	.word	0xe0001004
    8308:	.word	0x20000bf0
    830c:	.word	0x014f8b59
    8310:	.word	0x6b5fca6b
    8314:	.word	0x431bde83
    8318:	.word	0x421f67b3

0000831c <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    831c:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    831e:	ldrb	r3, [r0, #1]
    8320:	cbz	r3, 833e <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    8322:	mov	r4, r0
    8324:	ldrsb.w	r0, [r0, #6]
    8328:	mov	r5, r1
    832a:	cmp	r0, #0
    832c:	blt.n	8342 <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    832e:	uxtb	r0, r0
    8330:	movs	r1, #0
    8332:	bl	9570 <pinMode>
    8336:	ldrb	r3, [r4, #1]
    pin = p;
    8338:	strb	r5, [r4, #6]
    if(begun) {
    833a:	cbnz	r3, 8344 <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    833c:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    833e:	strb	r1, [r0, #6]
    8340:	pop	{r3, r4, r5, pc}
    8342:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    8344:	mov	r0, r5
    8346:	movs	r1, #1
    8348:	bl	9570 <pinMode>
      digitalWrite(p, LOW);
    834c:	mov	r0, r5
    834e:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    8350:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    8354:	b.w	9564 <digitalWrite>

00008358 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    8358:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    835a:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    835c:	mov	r4, r0
    835e:	mov	r7, r1
    8360:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    8362:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    8364:	strb	r5, [r0, #1]
    8366:	strb	r5, [r0, #7]
    8368:	str	r5, [r0, #8]
    836a:	str	r5, [r0, #16]
{
  updateType(t);
    836c:	bl	80ec <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    8370:	mov	r1, r7
    8372:	mov	r0, r4
    8374:	bl	80b4 <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    8378:	mov	r0, r4
    837a:	mov	r1, r6
    837c:	bl	831c <Adafruit_NeoPixel::setPin(unsigned char)>
}
    8380:	mov	r0, r4
    8382:	pop	{r3, r4, r5, r6, r7, pc}

00008384 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    8384:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    8386:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    8388:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    838c:	cmp	r4, r1
    838e:	bls.n	83c4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    8390:	ldrb	r4, [r0, #7]
    8392:	cbz	r4, 83a6 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    8394:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    8398:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    839c:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    83a0:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    83a2:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    83a4:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    83a6:	ldrb	r5, [r0, #15]
    83a8:	ldrb	r4, [r0, #12]
    83aa:	cmp	r4, r5
    83ac:	beq.n	83c8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    83ae:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    83b0:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    83b2:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    83b6:	strb	r7, [r1, r5]
    83b8:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    83ba:	strb	r2, [r1, r5]
    p[gOffset] = g;
    83bc:	ldrb	r2, [r0, #13]
    83be:	strb	r3, [r1, r2]
    p[bOffset] = b;
    83c0:	ldrb	r3, [r0, #14]
    83c2:	strb	r6, [r1, r3]
  }
}
    83c4:	pop	{r4, r5, r6, r7}
    83c6:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    83c8:	add.w	r1, r1, r1, lsl #1
    83cc:	ldr	r4, [r0, #8]
    83ce:	add	r1, r4
    83d0:	b.n	83ba <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    83d2:	nop

000083d4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    83d4:	ldrh	r3, [r0, #2]
    83d6:	cmp	r3, r1
    83d8:	bls.n	83de <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    83da:	b.w	8008 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    83de:	bx	lr

000083e0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    83e0:	ldrh	r3, [r0, #2]
    83e2:	cmp	r3, r1
    83e4:	bls.n	8416 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    83e6:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    83e8:	ldrb	r2, [r0, #15]
    83ea:	ldrb	r3, [r0, #12]
    83ec:	cmp	r2, r3
    83ee:	beq.n	841a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    83f0:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    83f2:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    83f4:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    83f8:	ldrb	r3, [r1, r3]
    83fa:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    83fc:	cbnz	r4, 844c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    83fe:	lsls	r3, r3, #16
    8400:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    8402:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    8404:	orr.w	r0, r3, r5, lsl #24
    8408:	ldrb	r3, [r1, r4]
    840a:	ldrb	r2, [r1, r2]
    840c:	orrs	r3, r0
    840e:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    8412:	pop	{r4, r5}
    8414:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    8416:	movs	r0, #0
    8418:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    841a:	add.w	r1, r1, r1, lsl #1
    841e:	ldr	r3, [r0, #8]
    if(brightness) {
    8420:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    8422:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8424:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    8426:	cbz	r4, 847c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    8428:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    842a:	lsls	r2, r2, #8
    842c:	ldrb	r3, [r0, #14]
    842e:	ldrb	r0, [r1, r5]
    8430:	ldrb	r3, [r1, r3]
    8432:	lsls	r0, r0, #8
    8434:	lsls	r3, r3, #8
    8436:	udiv	r2, r2, r4
    843a:	udiv	r0, r0, r4
    843e:	lsls	r2, r2, #16
    8440:	udiv	r3, r3, r4
    8444:	orr.w	r0, r2, r0, lsl #8
    8448:	orrs	r0, r3
    844a:	b.n	8412 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    844c:	lsls	r3, r3, #8
    844e:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    8450:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8452:	lsls	r5, r5, #8
    8454:	ldrb	r2, [r1, r2]
    8456:	ldrb	r0, [r1, r0]
    8458:	lsls	r2, r2, #8
    845a:	lsls	r0, r0, #8
    845c:	udiv	r1, r3, r4
    8460:	udiv	r5, r5, r4
    8464:	udiv	r2, r2, r4
    8468:	lsls	r3, r1, #16
    846a:	udiv	r0, r0, r4
    846e:	orr.w	r3, r3, r5, lsl #24
    8472:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    8474:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    8476:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    847a:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    847c:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    847e:	lsls	r2, r2, #16
    8480:	ldrb	r3, [r0, #14]
    8482:	ldrb	r0, [r1, r4]
    8484:	ldrb	r3, [r1, r3]
    8486:	orr.w	r0, r2, r0, lsl #8
    848a:	orrs	r0, r3
    848c:	b.n	8412 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    848e:	nop

00008490 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    8490:	ldrh	r0, [r0, #2]
    8492:	bx	lr

00008494 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    8494:	ldrh	r2, [r0, #4]
    8496:	movs	r1, #0
    8498:	ldr	r0, [r0, #8]
    849a:	b.w	a594 <memset>
    849e:	nop

000084a0 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    84a0:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    84a2:	movs	r1, #0
    84a4:	mov	r3, r0
    84a6:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    84aa:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    84ac:	movs	r4, #0
    84ae:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    84b0:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    84b4:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    84b6:	bfc	r2, #0, #4
    84ba:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    84bc:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    84c0:	cmp	r3, r5
    84c2:	bne.n	84aa <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    84c4:	mov	r2, r4
    84c6:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    84c8:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    84ca:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    84ce:	add.w	r3, r0, r2, lsl #4
    84d2:	adds	r3, #8
    84d4:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    84d6:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    84da:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    84de:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    84e2:	beq.n	84ec <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    84e4:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    84e6:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    84e8:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    84ea:	str	r6, [r1, #8]
    84ec:	adds	r2, #1
    84ee:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    84f0:	cmp	r2, #12
    84f2:	bne.n	84ce <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    84f4:	pop	{r4, r5, r6}
    84f6:	bx	lr

000084f8 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    84f8:	ldr	r0, [pc, #4]	; (8500 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    84fa:	b.w	84a0 <TimeAlarmsClass::TimeAlarmsClass()>
    84fe:	nop
    8500:	.word	0x2000b630

00008504 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    8504:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    8506:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8508:	ubfx	r3, r3, #16, #15
    850c:	ldr	r1, [pc, #20]	; (8524 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    850e:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8510:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    8514:	ldr	r4, [pc, #16]	; (8528 <rx_event+0x24>)
    8516:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8518:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    851c:	strh.w	r5, [r4, r2, lsl #1]
}
    8520:	pop	{r4, r5}
    8522:	bx	lr
    8524:	.word	0x2000bec0
    8528:	.word	0x2000beb8

0000852c <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    852c:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    852e:	ldr	r3, [pc, #84]	; (8584 <usb_serial_flush_callback+0x58>)
    8530:	ldrb	r3, [r3, #0]
    8532:	cbnz	r3, 8544 <usb_serial_flush_callback+0x18>
    8534:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    8538:	ldr	r3, [pc, #76]	; (8588 <usb_serial_flush_callback+0x5c>)
    853a:	ldrb	r3, [r3, #0]
    853c:	cbz	r3, 8544 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    853e:	ldr	r5, [pc, #76]	; (858c <usb_serial_flush_callback+0x60>)
    8540:	ldrh	r2, [r5, #0]
    8542:	cbnz	r2, 8546 <usb_serial_flush_callback+0x1a>
    8544:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8546:	ldr	r7, [pc, #72]	; (8590 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8548:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    854a:	ldr	r6, [pc, #72]	; (8594 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    854c:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8550:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8552:	ldr	r0, [pc, #68]	; (8598 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8554:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8558:	add.w	r1, r0, r1, lsl #8
    855c:	mov	r0, r6
    855e:	bl	932c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8562:	mov	r1, r6
    8564:	movs	r0, #4
    8566:	bl	935c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    856a:	ldrb	r3, [r7, #0]
    856c:	adds	r3, #1
    856e:	uxtb	r3, r3
    8570:	cmp	r3, #6
    8572:	it	ls
    8574:	strbls	r3, [r7, #0]
	tx_available = 0;
    8576:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    857a:	it	hi
    857c:	strbhi	r4, [r7, #0]
	tx_available = 0;
    857e:	strh	r3, [r5, #0]
    8580:	pop	{r3, r4, r5, r6, r7, pc}
    8582:	nop
    8584:	.word	0x2000bdf4
    8588:	.word	0x2000c070
    858c:	.word	0x2000bf40
    8590:	.word	0x2000bdf5
    8594:	.word	0x2000bf60
    8598:	.word	0x2000b6f4

0000859c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    859c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85a0:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    85a2:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    85a4:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    85a6:	cmp	r1, #0
    85a8:	beq.w	86d4 <usb_serial_write.part.1+0x138>
    85ac:	movs	r3, #0
    85ae:	ldr.w	r8, [pc, #320]	; 86f0 <usb_serial_write.part.1+0x154>
    85b2:	ldr.w	r9, [pc, #304]	; 86e4 <usb_serial_write.part.1+0x148>
    85b6:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    85b8:	ldr	r6, [pc, #284]	; (86d8 <usb_serial_write.part.1+0x13c>)
    85ba:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    85be:	ldr.w	sl, [pc, #308]	; 86f4 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    85c2:	ldr	r2, [pc, #280]	; (86dc <usb_serial_write.part.1+0x140>)
    85c4:	ldrb	r4, [r2, #0]
    85c6:	ldr	r2, [pc, #280]	; (86e0 <usb_serial_write.part.1+0x144>)
    85c8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    85cc:	cmp	r3, #0
    85ce:	bne.n	868c <usb_serial_write.part.1+0xf0>
    85d0:	mov	r5, r3
    85d2:	mov	r4, r3
    85d4:	b.n	8600 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    85d6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    85da:	cbnz	r4, 85de <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    85dc:	ldr	r5, [r6, #0]
    85de:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    85e0:	cmp	r3, #0
    85e2:	bne.n	8680 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    85e4:	ldr	r3, [r6, #0]
    85e6:	subs	r3, r3, r5
    85e8:	cmp	r3, #120	; 0x78
    85ea:	bhi.n	86c8 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    85ec:	ldrb.w	r3, [sl]
    85f0:	cmp	r3, #0
    85f2:	beq.n	8680 <usb_serial_write.part.1+0xe4>
			yield();
    85f4:	bl	9648 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    85f8:	ldrh.w	r3, [r8]
    85fc:	cmp	r3, #0
    85fe:	bne.n	8688 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    8600:	mov	r0, r7
    8602:	bl	93a8 <usb_transfer_status>
			if (!(status & 0x80)) {
    8606:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    860a:	ldr	r2, [pc, #216]	; (86e4 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    860c:	bne.n	85d6 <usb_serial_write.part.1+0x3a>
    860e:	ldr	r2, [pc, #204]	; (86dc <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8610:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    8614:	strb.w	r0, [r9]
    8618:	ldrb	r4, [r2, #0]
    861a:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    861c:	ldr	r1, [pc, #200]	; (86e8 <usb_serial_write.part.1+0x14c>)
    861e:	lsls	r4, r4, #8
		if (size >= tx_available) {
    8620:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8622:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8626:	add	r0, r4
    8628:	add	r0, r1
		if (size >= tx_available) {
    862a:	bcc.n	869e <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    862c:	ldr	r1, [sp, #8]
    862e:	bl	99e8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    8632:	ldr	r3, [pc, #180]	; (86e8 <usb_serial_write.part.1+0x14c>)
    8634:	mov.w	r2, #256	; 0x100
    8638:	mov	r0, r7
    863a:	adds	r1, r3, r4
    863c:	movs	r3, #0
    863e:	bl	932c <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8642:	mov	r1, r7
    8644:	movs	r0, #4
    8646:	bl	935c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    864a:	ldr	r3, [pc, #144]	; (86dc <usb_serial_write.part.1+0x140>)
    864c:	ldr	r2, [pc, #140]	; (86dc <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    864e:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8650:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8652:	ldr	r0, [pc, #152]	; (86ec <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8654:	adds	r3, #1
    8656:	uxtb	r3, r3
    8658:	cmp	r3, #6
    865a:	it	hi
    865c:	movhi	r3, #0
    865e:	strb	r3, [r2, #0]
			size -= tx_available;
    8660:	ldrh.w	r2, [r8]
			sent += tx_available;
    8664:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8666:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    866a:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    866e:	add	r3, r2
    8670:	str	r3, [sp, #4]
			data += tx_available;
    8672:	ldr	r3, [sp, #8]
    8674:	add	r3, r2
    8676:	str	r3, [sp, #8]
    8678:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    867a:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    867e:	bne.n	85c2 <usb_serial_write.part.1+0x26>
    8680:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8682:	add	sp, #20
    8684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8688:	ldr	r2, [pc, #80]	; (86dc <usb_serial_write.part.1+0x140>)
    868a:	ldrb	r4, [r2, #0]
    868c:	mov	r2, r3
    868e:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8692:	lsls	r4, r4, #8
    8694:	ldr	r1, [pc, #80]	; (86e8 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    8696:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8698:	add	r0, r4
    869a:	add	r0, r1
		if (size >= tx_available) {
    869c:	bcs.n	862c <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    869e:	ldr	r1, [sp, #8]
    86a0:	mov	r2, fp
    86a2:	str	r3, [sp, #12]
    86a4:	bl	99e8 <memcpy>
			tx_available -= size;
    86a8:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    86aa:	mov.w	r1, #3221225472	; 0xc0000000
    86ae:	ldr	r2, [pc, #60]	; (86ec <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    86b0:	rsb	r3, fp, r3
    86b4:	strh.w	r3, [r8]
    86b8:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    86ba:	str.w	r1, [r2, #132]	; 0x84
    86be:	add	r3, fp
    86c0:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    86c2:	add	sp, #20
    86c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    86c8:	movs	r3, #1
				return sent;
    86ca:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    86cc:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    86ce:	add	sp, #20
    86d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    86d4:	mov	r0, r1
    86d6:	b.n	8682 <usb_serial_write.part.1+0xe6>
    86d8:	.word	0x2000c078
    86dc:	.word	0x2000bdf5
    86e0:	.word	0x2000bf60
    86e4:	.word	0x2000c040
    86e8:	.word	0x2000b6f4
    86ec:	.word	0x402e0000
    86f0:	.word	0x2000bf40
    86f4:	.word	0x2000c070

000086f8 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    86f8:	bx	lr
    86fa:	nop

000086fc <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    86fc:	movs	r1, #0
    86fe:	movs	r2, #224	; 0xe0
    8700:	ldr	r0, [pc, #128]	; (8784 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    8702:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8704:	mov	r4, r1
    8706:	ldr	r6, [pc, #128]	; (8788 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8708:	ldr	r5, [pc, #128]	; (878c <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    870a:	bl	a594 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    870e:	ldr	r7, [pc, #128]	; (8790 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8710:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8712:	ldr	r3, [pc, #128]	; (8794 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8714:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8716:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8718:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    871a:	ldr	r6, [pc, #124]	; (8798 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    871c:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    871e:	bl	a594 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    8722:	mov	r3, r4
    8724:	mov	r2, r4
    8726:	movs	r1, #16
    8728:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    872a:	str	r4, [r7, #0]
    872c:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    872e:	str	r4, [r6, #0]
    8730:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    8732:	bl	92c4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    8736:	mov	r2, r4
    8738:	ldr	r3, [pc, #96]	; (879c <usb_serial_configure+0xa0>)
    873a:	movs	r1, #64	; 0x40
    873c:	movs	r0, #3
    873e:	bl	9260 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    8742:	mov	r3, r4
    8744:	mov	r2, r4
    8746:	movs	r1, #64	; 0x40
    8748:	movs	r0, #4
    874a:	bl	92c4 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    874e:	mov	r3, r4
    8750:	movs	r2, #64	; 0x40
    8752:	mov	r0, r5
    8754:	ldr	r1, [pc, #72]	; (87a0 <usb_serial_configure+0xa4>)
    8756:	bl	932c <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    875a:	mov	r1, r5
    875c:	movs	r0, #3
    875e:	bl	9384 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    8762:	ldr	r3, [pc, #64]	; (87a4 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    8764:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8766:	ldr	r1, [pc, #64]	; (87a8 <usb_serial_configure+0xac>)
    8768:	ldr	r0, [pc, #64]	; (87ac <usb_serial_configure+0xb0>)
    876a:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    876c:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8770:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8774:	ldr.w	r2, [r3, #328]	; 0x148
    8778:	orr.w	r2, r2, #16777216	; 0x1000000
    877c:	str.w	r2, [r3, #328]	; 0x148
    8780:	pop	{r3, r4, r5, r6, r7, pc}
    8782:	nop
    8784:	.word	0x2000bf60
    8788:	.word	0x2000bdf5
    878c:	.word	0x2000bee0
    8790:	.word	0x2000bec0
    8794:	.word	0x2000bf40
    8798:	.word	0x2000beb8
    879c:	.word	0x00008505
    87a0:	.word	0x2000bdf8
    87a4:	.word	0x402e0000
    87a8:	.word	0x2000c044
    87ac:	.word	0x0000852d

000087b0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    87b0:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    87b2:	ldr	r5, [pc, #56]	; (87ec <usb_serial_getchar+0x3c>)
    87b4:	ldr	r3, [pc, #56]	; (87f0 <usb_serial_getchar+0x40>)
    87b6:	ldrh	r2, [r5, #0]
    87b8:	ldrh	r0, [r3, #0]
    87ba:	cmp	r2, r0
    87bc:	bcs.n	87e6 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    87be:	adds	r3, r2, #1
    87c0:	ldr	r1, [pc, #48]	; (87f4 <usb_serial_getchar+0x44>)
    87c2:	uxth	r3, r3
    87c4:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    87c6:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    87c8:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    87ca:	bls.n	87d0 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    87cc:	mov	r0, r4
	}
	return -1;
}
    87ce:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    87d0:	movs	r3, #0
    87d2:	movs	r2, #64	; 0x40
    87d4:	ldr	r0, [pc, #32]	; (87f8 <usb_serial_getchar+0x48>)
    87d6:	bl	932c <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    87da:	ldr	r1, [pc, #28]	; (87f8 <usb_serial_getchar+0x48>)
    87dc:	movs	r0, #3
    87de:	bl	9384 <usb_receive>
		}
		return c;
    87e2:	mov	r0, r4
    87e4:	pop	{r3, r4, r5, pc}
	}
	return -1;
    87e6:	mov.w	r0, #4294967295
    87ea:	pop	{r3, r4, r5, pc}
    87ec:	.word	0x2000beb8
    87f0:	.word	0x2000bec0
    87f4:	.word	0x2000bdf8
    87f8:	.word	0x2000bee0

000087fc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    87fc:	ldr	r3, [pc, #20]	; (8814 <usb_serial_peekchar+0x18>)
    87fe:	ldr	r2, [pc, #24]	; (8818 <usb_serial_peekchar+0x1c>)
    8800:	ldrh	r3, [r3, #0]
    8802:	ldrh	r2, [r2, #0]
    8804:	cmp	r2, r3
    8806:	bls.n	880e <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    8808:	ldr	r2, [pc, #16]	; (881c <usb_serial_peekchar+0x20>)
    880a:	ldrb	r0, [r2, r3]
    880c:	bx	lr
	}

	return -1;
    880e:	mov.w	r0, #4294967295
}
    8812:	bx	lr
    8814:	.word	0x2000beb8
    8818:	.word	0x2000bec0
    881c:	.word	0x2000bdf8

00008820 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    8820:	ldr	r2, [pc, #8]	; (882c <usb_serial_available+0xc>)
    8822:	ldr	r3, [pc, #12]	; (8830 <usb_serial_available+0x10>)
    8824:	ldrh	r0, [r2, #0]
    8826:	ldrh	r3, [r3, #0]
}
    8828:	subs	r0, r0, r3
    882a:	bx	lr
    882c:	.word	0x2000bec0
    8830:	.word	0x2000beb8

00008834 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8834:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    8836:	ldr	r3, [pc, #40]	; (8860 <usb_serial_flush_input+0x2c>)
    8838:	ldr	r4, [pc, #40]	; (8864 <usb_serial_flush_input+0x30>)
    883a:	ldrh	r5, [r3, #0]
    883c:	ldrh	r3, [r4, #0]
    883e:	cmp	r3, r5
    8840:	bcc.n	8844 <usb_serial_flush_input+0x10>
    8842:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    8844:	movs	r3, #0
    8846:	ldr	r1, [pc, #32]	; (8868 <usb_serial_flush_input+0x34>)
    8848:	ldr	r0, [pc, #32]	; (886c <usb_serial_flush_input+0x38>)
    884a:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    884c:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    884e:	bl	932c <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    8852:	ldr	r1, [pc, #24]	; (886c <usb_serial_flush_input+0x38>)
    8854:	movs	r0, #3
	}
}
    8856:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    885a:	b.w	9384 <usb_receive>
    885e:	nop
    8860:	.word	0x2000bec0
    8864:	.word	0x2000beb8
    8868:	.word	0x2000bdf8
    886c:	.word	0x2000bee0

00008870 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8870:	ldr	r3, [pc, #36]	; (8898 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8872:	push	{lr}
    8874:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8876:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8878:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    887c:	cbnz	r3, 8888 <usb_serial_putchar+0x18>
    887e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8882:	add	sp, #12
    8884:	ldr.w	pc, [sp], #4
    8888:	movs	r1, #1
    888a:	add.w	r0, sp, #7
    888e:	bl	859c <usb_serial_write.part.1>
    8892:	add	sp, #12
    8894:	ldr.w	pc, [sp], #4
    8898:	.word	0x2000c070

0000889c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    889c:	ldr	r3, [pc, #16]	; (88b0 <usb_serial_write+0x14>)
    889e:	ldrb	r3, [r3, #0]
    88a0:	and.w	r2, r3, #255	; 0xff
    88a4:	cbz	r3, 88aa <usb_serial_write+0xe>
    88a6:	b.w	859c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    88aa:	mov	r0, r2
    88ac:	bx	lr
    88ae:	nop
    88b0:	.word	0x2000c070

000088b4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    88b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    88b8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    88ba:	ldr.w	r8, [pc, #64]	; 88fc <usb_serial_write_buffer_free+0x48>
    88be:	movs	r3, #1
    88c0:	ldr	r5, [pc, #48]	; (88f4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    88c2:	mov	r7, r4
    88c4:	ldr	r6, [pc, #48]	; (88f8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    88c6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    88ca:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    88cc:	mov	r0, r5
    88ce:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    88d0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    88d2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    88d6:	beq.n	88e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    88d8:	bl	93a8 <usb_transfer_status>
    88dc:	lsls	r3, r0, #24
    88de:	it	pl
    88e0:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    88e4:	cmp	r4, #7
    88e6:	bne.n	88ca <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    88e8:	movs	r3, #0
	return sum;
}
    88ea:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    88ec:	strb.w	r3, [r8]
	return sum;
}
    88f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88f4:	.word	0x2000bf60
    88f8:	.word	0x2000bdf5
    88fc:	.word	0x2000bdf4

00008900 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8900:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8902:	ldr	r3, [pc, #80]	; (8954 <usb_serial_flush_output+0x54>)
    8904:	ldrb	r3, [r3, #0]
    8906:	cbz	r3, 890e <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    8908:	ldr	r4, [pc, #76]	; (8958 <usb_serial_flush_output+0x58>)
    890a:	ldrh	r2, [r4, #0]
    890c:	cbnz	r2, 8910 <usb_serial_flush_output+0x10>
    890e:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8910:	ldr	r6, [pc, #72]	; (895c <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8912:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8916:	ldr	r5, [pc, #72]	; (8960 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8918:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    891a:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    891c:	rsb	r2, r2, #256	; 0x100
    8920:	ldr	r0, [pc, #64]	; (8964 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8922:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8926:	ldr	r7, [pc, #64]	; (8968 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8928:	add.w	r1, r0, r1, lsl #8
    892c:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    892e:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8932:	bl	932c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8936:	mov	r1, r5
    8938:	movs	r0, #4
    893a:	bl	935c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    893e:	ldrb	r3, [r6, #0]
    8940:	adds	r3, #1
    8942:	uxtb	r3, r3
    8944:	cmp	r3, #6
    8946:	it	hi
    8948:	movhi	r3, #0
    894a:	strb	r3, [r6, #0]
	tx_available = 0;
    894c:	movs	r3, #0
    894e:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    8950:	strb	r3, [r7, #0]
    8952:	pop	{r3, r4, r5, r6, r7, pc}
    8954:	.word	0x2000c070
    8958:	.word	0x2000bf40
    895c:	.word	0x2000bdf5
    8960:	.word	0x2000bf60
    8964:	.word	0x2000b6f4
    8968:	.word	0x2000bdf4

0000896c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    896c:	ldr	r2, [pc, #556]	; (8b9c <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    896e:	ldr	r3, [pc, #560]	; (8ba0 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8970:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    8972:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    8976:	ldr	r5, [pc, #556]	; (8ba4 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8978:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    897a:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    897c:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    897e:	bls.n	89bc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    8980:	ldr	r3, [pc, #548]	; (8ba8 <set_arm_clock+0x23c>)
    8982:	cmp	r0, r3
    8984:	bls.w	8b88 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8988:	ldr	r3, [pc, #544]	; (8bac <set_arm_clock+0x240>)
    898a:	movw	r6, #1300	; 0x514
    898e:	ldr.w	lr, [pc, #600]	; 8be8 <set_arm_clock+0x27c>
    8992:	add	r3, r0
    8994:	ldr	r5, [pc, #536]	; (8bb0 <set_arm_clock+0x244>)
    8996:	lsrs	r2, r3, #8
    8998:	umull	r3, r2, lr, r2
    899c:	lsrs	r3, r2, #7
    899e:	add.w	r3, r3, r3, lsl #2
    89a2:	add.w	r2, r3, r3, lsl #2
    89a6:	addw	r3, r2, #1250	; 0x4e2
    89aa:	cmp	r3, r6
    89ac:	it	cs
    89ae:	movcs	r3, r6
    89b0:	sub.w	r3, r3, #800	; 0x320
    89b4:	umull	r3, r6, r5, r3
    89b8:	lsrs	r6, r6, #3
    89ba:	b.n	89c4 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    89bc:	cmp	r0, #25
    89be:	ite	cc
    89c0:	movcc	r6, #6
    89c2:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    89c4:	ldr	r2, [pc, #472]	; (8ba0 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    89c6:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    89ca:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    89ce:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    89d0:	orr.w	r3, r3, #192	; 0xc0
    89d4:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    89d8:	bcs.n	89f0 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    89da:	ldr	r3, [pc, #456]	; (8ba4 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    89dc:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    89e0:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    89e2:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    89e4:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    89e6:	ldr	r3, [r2, #0]
    89e8:	cmp	r3, #0
    89ea:	bge.n	89e6 <set_arm_clock+0x7a>
    89ec:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    89f0:	ands.w	r3, r4, #33554432	; 0x2000000
    89f4:	bne.n	8a54 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    89f6:	ldr	r5, [pc, #444]	; (8bb4 <set_arm_clock+0x248>)
    89f8:	ldr	r2, [pc, #444]	; (8bb8 <set_arm_clock+0x24c>)
    89fa:	ldr.w	ip, [r5, #16]
    89fe:	mov	r5, r2
    8a00:	and.w	r2, ip, r2
    8a04:	cmp	r2, r5
    8a06:	itet	eq
    8a08:	moveq.w	r3, #402653184	; 0x18000000
    8a0c:	movne.w	r2, #4096	; 0x1000
    8a10:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8a12:	eor.w	r5, r4, r3
    8a16:	tst.w	r5, #939524096	; 0x38000000
    8a1a:	beq.n	8a2a <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8a1c:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8a20:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    8a24:	ldr	r5, [pc, #376]	; (8ba0 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8a26:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    8a28:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    8a2a:	eor.w	r3, r1, r2
    8a2e:	tst.w	r3, #12288	; 0x3000
    8a32:	beq.n	8a46 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8a34:	ldr	r3, [pc, #360]	; (8ba0 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8a36:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8a3a:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8a3c:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8a3e:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8a40:	ldr	r3, [r2, #72]	; 0x48
    8a42:	lsls	r5, r3, #28
    8a44:	bmi.n	8a40 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8a46:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8a4a:	ldr	r2, [pc, #340]	; (8ba0 <set_arm_clock+0x234>)
    8a4c:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8a4e:	ldr	r3, [r2, #72]	; 0x48
    8a50:	lsls	r1, r3, #26
    8a52:	bmi.n	8a4e <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8a54:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8a56:	ldr	r5, [pc, #356]	; (8bbc <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8a58:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8a5a:	mul.w	r3, r1, r2
    8a5e:	mul.w	r3, r0, r3
    8a62:	cmp	r3, r5
    8a64:	bhi.n	8a7a <set_arm_clock+0x10e>
		if (div_arm < 8) {
    8a66:	cmp	r2, #7
    8a68:	bhi.w	8b74 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    8a6c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8a6e:	mul.w	r3, r1, r2
    8a72:	mul.w	r3, r0, r3
    8a76:	cmp	r3, r5
    8a78:	bls.n	8a66 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8a7a:	ldr	r0, [pc, #324]	; (8bc0 <set_arm_clock+0x254>)
    8a7c:	ldr	r5, [pc, #324]	; (8bc4 <set_arm_clock+0x258>)
    8a7e:	add	r0, r3
    8a80:	umull	r3, r0, r5, r0
    8a84:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    8a86:	cmp	r3, #108	; 0x6c
    8a88:	bhi.n	8b7e <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    8a8a:	cmp	r3, #53	; 0x35
    8a8c:	bhi.n	8b8c <set_arm_clock+0x220>
    8a8e:	ldr.w	r8, [pc, #348]	; 8bec <set_arm_clock+0x280>
    8a92:	movs	r3, #54	; 0x36
    8a94:	ldr	r0, [pc, #304]	; (8bc8 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8a96:	ldr.w	ip, [pc, #284]	; 8bb4 <set_arm_clock+0x248>
    8a9a:	ldr	r5, [pc, #304]	; (8bcc <set_arm_clock+0x260>)
    8a9c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8aa0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8aa4:	and.w	r5, r9, r5
    8aa8:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8aaa:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8aae:	beq.n	8ac8 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8ab0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8ab4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8ab8:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8aba:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8abe:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8ac2:	ldr	r3, [r5, #0]
    8ac4:	cmp	r3, #0
    8ac6:	bge.n	8ac2 <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8ac8:	ldr.w	ip, [pc, #212]	; 8ba0 <set_arm_clock+0x234>
    8acc:	subs	r2, #1
    8ace:	ldr.w	r3, [ip, #16]
    8ad2:	and.w	r3, r3, #7
    8ad6:	cmp	r3, r2
    8ad8:	beq.n	8aea <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8ada:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8ade:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8ae0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8ae4:	ldr	r3, [r5, #72]	; 0x48
    8ae6:	lsls	r3, r3, #15
    8ae8:	bmi.n	8ae4 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8aea:	subs	r1, #1
    8aec:	lsls	r1, r1, #10
    8aee:	eor.w	r3, r4, r1
    8af2:	tst.w	r3, #7168	; 0x1c00
    8af6:	beq.n	8b0e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    8af8:	ldr	r3, [pc, #164]	; (8ba0 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8afa:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8afe:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8b02:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8b04:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    8b06:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8b08:	ldr	r3, [r2, #72]	; 0x48
    8b0a:	lsls	r1, r3, #30
    8b0c:	bmi.n	8b08 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8b0e:	ldr	r3, [pc, #192]	; (8bd0 <set_arm_clock+0x264>)
    8b10:	ldr	r1, [pc, #192]	; (8bd4 <set_arm_clock+0x268>)
    8b12:	add	r3, r0
    8b14:	lsrs	r3, r3, #7
    8b16:	umull	r3, r1, r1, r3
    8b1a:	lsrs	r1, r1, #12
    8b1c:	cmp	r1, #4
    8b1e:	it	cs
    8b20:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    8b22:	subs	r3, r1, #1
    8b24:	lsls	r3, r3, #8
    8b26:	eor.w	r2, r4, r3
    8b2a:	tst.w	r2, #768	; 0x300
    8b2e:	beq.n	8b3e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8b30:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8b34:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8b38:	ldr	r2, [pc, #100]	; (8ba0 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8b3a:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8b3c:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    8b3e:	ldr	r3, [pc, #96]	; (8ba0 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8b40:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8b44:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    8b46:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8b48:	ldr	r3, [r2, #72]	; 0x48
    8b4a:	lsls	r3, r3, #26
    8b4c:	bmi.n	8b48 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8b4e:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8b52:	ldr	r2, [pc, #132]	; (8bd8 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8b54:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8b56:	ldr	r3, [pc, #132]	; (8bdc <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8b58:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    8b5a:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8b5c:	bcs.n	8b70 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8b5e:	ldr	r3, [pc, #68]	; (8ba4 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8b60:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8b64:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8b66:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    8b68:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8b6a:	ldr	r3, [r2, #0]
    8b6c:	cmp	r3, #0
    8b6e:	bge.n	8b6a <set_arm_clock+0x1fe>
	}

	return frequency;
}
    8b70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    8b74:	cmp	r1, #4
    8b76:	bhi.n	8a7a <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    8b78:	adds	r1, #1
				div_arm = 1;
    8b7a:	movs	r2, #1
    8b7c:	b.n	8a5a <set_arm_clock+0xee>
    8b7e:	ldr.w	r8, [pc, #112]	; 8bf0 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    8b82:	movs	r3, #108	; 0x6c
    8b84:	ldr	r0, [pc, #88]	; (8be0 <set_arm_clock+0x274>)
    8b86:	b.n	8a96 <set_arm_clock+0x12a>
    8b88:	movs	r6, #18
    8b8a:	b.n	89c4 <set_arm_clock+0x58>
    8b8c:	ldr	r0, [pc, #84]	; (8be4 <set_arm_clock+0x278>)
    8b8e:	ldr.w	r8, [pc, #100]	; 8bf4 <set_arm_clock+0x288>
    8b92:	mul.w	r0, r0, r3
    8b96:	orr.w	r8, r3, r8
    8b9a:	b.n	8a96 <set_arm_clock+0x12a>
    8b9c:	.word	0x1f78a400
    8ba0:	.word	0x400fc000
    8ba4:	.word	0x40080000
    8ba8:	.word	0x23c34600
    8bac:	.word	0xdc3cba00
    8bb0:	.word	0x51eb851f
    8bb4:	.word	0x400d8000
    8bb8:	.word	0x80003040
    8bbc:	.word	0x269fb1ff
    8bc0:	.word	0x005b8d80
    8bc4:	.word	0x165e9f81
    8bc8:	.word	0x269fb200
    8bcc:	.word	0x8001307f
    8bd0:	.word	0x08f0d17f
    8bd4:	.word	0x00e5109f
    8bd8:	.word	0x20000bf0
    8bdc:	.word	0x20000bec
    8be0:	.word	0x4d3f6400
    8be4:	.word	0x00b71b00
    8be8:	.word	0x004cb223
    8bec:	.word	0x80002036
    8bf0:	.word	0x8000206c
    8bf4:	.word	0x80002000

00008bf8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8bf8:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8bfa:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8bfc:	cbz	r3, 8c06 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8bfe:	ldr	r3, [r2, #4]
    8c00:	orr.w	r3, r3, #32768	; 0x8000
    8c04:	str	r3, [r2, #4]
	}
	__disable_irq();
    8c06:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8c08:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8c0a:	cbz	r4, 8c34 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8c0c:	ldr	r3, [pc, #64]	; (8c50 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    8c0e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8c10:	ldr.w	r4, [r3, #432]	; 0x1b0
    8c14:	tst	r4, r1
    8c16:	bne.n	8c48 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8c18:	ldr.w	r4, [r3, #320]	; 0x140
    8c1c:	orr.w	r4, r4, #16384	; 0x4000
    8c20:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8c24:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    8c28:	ldr.w	r4, [r3, #320]	; 0x140
    8c2c:	lsls	r4, r4, #17
    8c2e:	bpl.n	8c18 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8c30:	tst	r1, r5
    8c32:	bne.n	8c48 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    8c34:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    8c36:	ldr	r4, [pc, #24]	; (8c50 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8c38:	str	r2, [r0, #8]
	endpoint->status = 0;
    8c3a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8c3c:	ldr.w	r3, [r4, #432]	; 0x1b0
    8c40:	orrs	r1, r3
    8c42:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8c46:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8c48:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8c4a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8c4c:	pop	{r4, r5}
    8c4e:	bx	lr
    8c50:	.word	0x402e0000

00008c54 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8c54:	push	{r3, r4, r5, lr}
    8c56:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    8c58:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    8c5a:	b.n	8c6a <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    8c5c:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    8c5e:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    8c60:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    8c62:	ldr	r2, [r5, #52]	; 0x34
    8c64:	mov	r3, r4
    8c66:	cmp	r4, r2
    8c68:	beq.n	8c7c <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    8c6a:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    8c6c:	cbz	r3, 8c7c <run_callbacks+0x28>
    8c6e:	cmp	r3, #1
    8c70:	beq.n	8c7c <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    8c72:	ldr	r2, [r3, #4]
    8c74:	lsls	r2, r2, #24
    8c76:	bpl.n	8c5c <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    8c78:	str	r3, [r5, #48]	; 0x30
			return;
    8c7a:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    8c7c:	movs	r3, #0
    8c7e:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    8c80:	str	r3, [r5, #52]	; 0x34
    8c82:	pop	{r3, r4, r5, pc}

00008c84 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8c84:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8c86:	cbnz	r1, 8cba <endpoint0_transmit.constprop.0+0x36>
    8c88:	ldr	r4, [pc, #124]	; (8d08 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c8a:	ldr	r3, [pc, #128]	; (8d0c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8c8c:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    8c8e:	ldr	r0, [pc, #128]	; (8d10 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c90:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c92:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8c94:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c96:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8c98:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c9a:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8c9c:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    8c9e:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8ca2:	ldr	r5, [pc, #112]	; (8d14 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    8ca4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8ca8:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    8caa:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8cae:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8cb0:	ldr.w	r3, [r2, #432]	; 0x1b0
    8cb4:	cmp	r3, #0
    8cb6:	bne.n	8cb0 <endpoint0_transmit.constprop.0+0x2c>
}
    8cb8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cba:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cbc:	ldr	r3, [pc, #88]	; (8d18 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cbe:	ldr	r5, [pc, #80]	; (8d10 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cc0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8cc2:	ldr	r4, [pc, #68]	; (8d08 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cc4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8cc8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cca:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ccc:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cce:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8cd2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cd4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8cd8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cda:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cde:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8ce2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    8ce6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8ce8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cea:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cee:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cf2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cf6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8cf8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cfa:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8cfe:	ldr.w	r3, [r2, #432]	; 0x1b0
    8d02:	cmp	r3, #0
    8d04:	bne.n	8cfe <endpoint0_transmit.constprop.0+0x7a>
    8d06:	b.n	8c8a <endpoint0_transmit.constprop.0+0x6>
    8d08:	.word	0x2000e000
    8d0c:	.word	0x2000d020
    8d10:	.word	0x402e0000
    8d14:	.word	0x2000c050
    8d18:	.word	0x2000d000

00008d1c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    8d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8d20:	ldr	r4, [pc, #696]	; (8fdc <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    8d22:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8d24:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8d28:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8d2c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8d30:	beq.n	8df0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8d32:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8d36:	cmp	r3, #0
    8d38:	beq.n	8de6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d3a:	mov.w	r9, #65537	; 0x10001
    8d3e:	ldr.w	fp, [pc, #700]	; 8ffc <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8d42:	mov	r6, r4
    8d44:	ldr	r7, [pc, #664]	; (8fe0 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d46:	mov	sl, r9
    8d48:	ldr	r1, [r7, #40]	; 0x28
    8d4a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    8d4c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8d50:	ldr.w	r3, [r4, #320]	; 0x140
    8d54:	orr.w	r3, r3, #8192	; 0x2000
    8d58:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8d5c:	ldr.w	r3, [r4, #320]	; 0x140
    8d60:	lsls	r5, r3, #18
    8d62:	bpl.n	8d50 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8d64:	ldr.w	r3, [r6, #320]	; 0x140
    8d68:	bic.w	r3, r3, #8192	; 0x2000
    8d6c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d70:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8d74:	ldr.w	r3, [r4, #436]	; 0x1b4
    8d78:	ands.w	r3, r3, #65537	; 0x10001
    8d7c:	bne.n	8d74 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d7e:	uxth	r0, r1
    8d80:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8d84:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d88:	cmp	r0, r5
    8d8a:	bhi.w	8eae <isr+0x192>
    8d8e:	cmp.w	r0, #1664	; 0x680
    8d92:	bcs.w	90f8 <isr+0x3dc>
    8d96:	cmp.w	r0, #258	; 0x102
    8d9a:	beq.w	9018 <isr+0x2fc>
    8d9e:	bhi.w	8f34 <isr+0x218>
    8da2:	cmp	r0, #128	; 0x80
    8da4:	beq.w	8fc2 <isr+0x2a6>
    8da8:	cmp	r0, #130	; 0x82
    8daa:	bne.w	8f24 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8dae:	uxth	r2, r2
    8db0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8db4:	cmp	r1, #7
    8db6:	bhi.w	8f24 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8dba:	lsls	r1, r1, #2
    8dbc:	ldr	r0, [pc, #548]	; (8fe4 <isr+0x2c8>)
		reply_buffer[0] = 0;
    8dbe:	ldr	r5, [pc, #552]	; (8fe8 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8dc0:	add	r0, r1
    8dc2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8dc4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    8dc6:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    8dc8:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8dca:	bpl.w	914a <isr+0x42e>
    8dce:	lsls	r2, r1, #15
    8dd0:	bpl.n	8dd6 <isr+0xba>
			reply_buffer[0] = 1;
    8dd2:	movs	r3, #1
    8dd4:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    8dd6:	movs	r1, #2
    8dd8:	ldr	r0, [pc, #524]	; (8fe8 <isr+0x2cc>)
    8dda:	bl	8c84 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8dde:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8de2:	cmp	r3, #0
    8de4:	bne.n	8d48 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8de6:	ldr	r2, [pc, #500]	; (8fdc <isr+0x2c0>)
    8de8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8dec:	cmp	r3, #0
    8dee:	bne.n	8e7a <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8df0:	tst.w	r8, #64	; 0x40
    8df4:	beq.n	8e28 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8df6:	ldr	r3, [pc, #484]	; (8fdc <isr+0x2c0>)
    8df8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8dfc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8dfe:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8e02:	ldr.w	r1, [r3, #444]	; 0x1bc
    8e06:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8e0a:	ldr.w	r4, [r2, #432]	; 0x1b0
    8e0e:	ldr	r3, [pc, #460]	; (8fdc <isr+0x2c0>)
    8e10:	cmp	r4, #0
    8e12:	bne.n	8e0a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8e14:	mov.w	r2, #4294967295
    8e18:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8e1c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    8e20:	bl	86f8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    8e24:	ldr	r3, [pc, #452]	; (8fec <isr+0x2d0>)
    8e26:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    8e28:	tst.w	r8, #16777216	; 0x1000000
    8e2c:	beq.n	8e36 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8e2e:	ldr	r3, [pc, #448]	; (8ff0 <isr+0x2d4>)
    8e30:	ldr	r3, [r3, #0]
    8e32:	cbz	r3, 8e36 <isr+0x11a>
    8e34:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8e36:	tst.w	r8, #33554432	; 0x2000000
    8e3a:	beq.n	8e44 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8e3c:	ldr	r3, [pc, #436]	; (8ff4 <isr+0x2d8>)
    8e3e:	ldr	r3, [r3, #0]
    8e40:	cbz	r3, 8e44 <isr+0x128>
    8e42:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    8e44:	tst.w	r8, #4
    8e48:	beq.n	8e50 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8e4a:	ldr	r3, [pc, #400]	; (8fdc <isr+0x2c0>)
    8e4c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8e50:	ldr	r3, [pc, #392]	; (8fdc <isr+0x2c0>)
    8e52:	ldr.w	r2, [r3, #328]	; 0x148
    8e56:	lsls	r2, r2, #24
    8e58:	bpl.n	8e74 <isr+0x158>
    8e5a:	tst.w	r8, #128	; 0x80
    8e5e:	beq.n	8e74 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    8e60:	ldr	r1, [pc, #404]	; (8ff8 <isr+0x2dc>)
    8e62:	ldrb	r2, [r1, #0]
    8e64:	cmp	r2, #0
    8e66:	beq.w	9138 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    8e6a:	subs	r3, r2, #1
    8e6c:	uxtb	r3, r3
    8e6e:	strb	r3, [r1, #0]
    8e70:	cbnz	r3, 8e74 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    8e72:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    8e74:	add	sp, #12
    8e76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8e7a:	ldr	r1, [pc, #384]	; (8ffc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    8e7c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8e80:	ldr	r0, [r1, #0]
    8e82:	tst	r3, r0
    8e84:	bne.w	91c6 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    8e88:	ldr	r2, [pc, #352]	; (8fec <isr+0x2d0>)
    8e8a:	ldr	r4, [r2, #0]
			if (completestatus) {
    8e8c:	ands	r4, r3
    8e8e:	beq.n	8df0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    8e90:	lsls	r6, r4, #29
    8e92:	bmi.w	9200 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    8e96:	lsls	r5, r4, #13
    8e98:	bmi.w	9210 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    8e9c:	lsls	r0, r4, #28
    8e9e:	bmi.w	9208 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    8ea2:	lsls	r1, r4, #12
    8ea4:	bpl.n	8df0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    8ea6:	ldr	r0, [pc, #344]	; (9000 <isr+0x2e4>)
    8ea8:	bl	8c54 <run_callbacks>
    8eac:	b.n	8df0 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8eae:	movw	r5, #8225	; 0x2021
    8eb2:	cmp	r0, r5
    8eb4:	beq.n	8f1c <isr+0x200>
    8eb6:	bhi.n	8f80 <isr+0x264>
    8eb8:	cmp.w	r0, #2176	; 0x880
    8ebc:	beq.w	90dc <isr+0x3c0>
    8ec0:	cmp.w	r0, #2304	; 0x900
    8ec4:	bne.n	8f24 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8ec6:	ubfx	r1, r1, #16, #8
    8eca:	ldr	r2, [pc, #312]	; (9004 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8ecc:	ldr	r0, [pc, #312]	; (9008 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8ece:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8ed0:	ldr	r1, [pc, #312]	; (900c <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8ed2:	ldr	r2, [pc, #316]	; (9010 <isr+0x2f4>)
    8ed4:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8ed6:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8eda:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8ede:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    8ee2:	bl	86fc <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8ee6:	ldr	r2, [pc, #300]	; (9014 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8ee8:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    8eea:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8eec:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    8eee:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8ef0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8ef2:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    8ef4:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    8ef8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8efa:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8efc:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8f00:	ldr	r2, [pc, #248]	; (8ffc <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8f02:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8f06:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    8f08:	ldr.w	r3, [r4, #432]	; 0x1b0
    8f0c:	cmp	r3, #0
    8f0e:	bne.n	8f08 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8f10:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f14:	cmp	r3, #0
    8f16:	bne.w	8d48 <isr+0x2c>
    8f1a:	b.n	8de6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    8f1c:	lsrs	r0, r2, #16
    8f1e:	cmp	r0, #7
    8f20:	beq.w	9152 <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8f24:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8f28:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f2c:	cmp	r3, #0
    8f2e:	bne.w	8d48 <isr+0x2c>
    8f32:	b.n	8de6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8f34:	movw	r5, #770	; 0x302
    8f38:	cmp	r0, r5
    8f3a:	beq.w	9082 <isr+0x366>
    8f3e:	cmp.w	r0, #1280	; 0x500
    8f42:	bne.n	8f24 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f44:	ldr	r2, [pc, #204]	; (9014 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    8f46:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f48:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8f4a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    8f4c:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f4e:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8f50:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    8f54:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8f56:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8f5a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8f5c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8f60:	ldr.w	r3, [r4, #432]	; 0x1b0
    8f64:	cmp	r3, #0
    8f66:	bne.n	8f60 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8f68:	lsrs	r3, r1, #16
    8f6a:	lsls	r3, r3, #25
    8f6c:	orr.w	r3, r3, #16777216	; 0x1000000
    8f70:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8f74:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f78:	cmp	r3, #0
    8f7a:	bne.w	8d48 <isr+0x2c>
    8f7e:	b.n	8de6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8f80:	movw	r3, #8737	; 0x2221
    8f84:	cmp	r0, r3
    8f86:	beq.n	9070 <isr+0x354>
    8f88:	movw	r3, #8993	; 0x2321
    8f8c:	cmp	r0, r3
    8f8e:	bne.n	8f24 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f90:	ldr	r3, [pc, #128]	; (9014 <isr+0x2f8>)
    8f92:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    8f94:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f96:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    8f98:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    8f9a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8f9c:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8fa0:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    8fa2:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    8fa6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8fa8:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    8faa:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8fae:	ldr.w	r3, [r4, #432]	; 0x1b0
    8fb2:	cmp	r3, #0
    8fb4:	bne.n	8fae <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8fb6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8fba:	cmp	r3, #0
    8fbc:	bne.w	8d48 <isr+0x2c>
    8fc0:	b.n	8de6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8fc2:	ldr	r2, [pc, #36]	; (8fe8 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    8fc4:	movs	r1, #2
    8fc6:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8fc8:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    8fca:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    8fcc:	bl	8c84 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8fd0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8fd4:	cmp	r3, #0
    8fd6:	bne.w	8d48 <isr+0x2c>
    8fda:	b.n	8de6 <isr+0xca>
    8fdc:	.word	0x402e0000
    8fe0:	.word	0x2000e000
    8fe4:	.word	0x402e01c0
    8fe8:	.word	0x2000c060
    8fec:	.word	0x2000c048
    8ff0:	.word	0x2000c044
    8ff4:	.word	0x2000c04c
    8ff8:	.word	0x2000c054
    8ffc:	.word	0x2000c050
    9000:	.word	0x2000e1c0
    9004:	.word	0x2000c070
    9008:	.word	0x00cc0002
    900c:	.word	0x000200c8
    9010:	.word	0x00c80002
    9014:	.word	0x2000d020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9018:	uxth	r2, r2
    901a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    901e:	cmp	r3, #7
    9020:	bhi.n	8f24 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9022:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9026:	mov.w	r3, r3, lsl #2
    902a:	ldr	r2, [pc, #492]	; (9218 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    902c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9030:	add	r2, r3
    9032:	ldr	r3, [r2, #0]
    9034:	ite	ne
    9036:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    903a:	biceq.w	r3, r3, #1
    903e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9040:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9042:	ldr	r3, [pc, #472]	; (921c <isr+0x500>)
    9044:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    9046:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    9048:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    904a:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    904e:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    9050:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    9054:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9056:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    9058:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    905c:	ldr.w	r3, [r4, #432]	; 0x1b0
    9060:	cmp	r3, #0
    9062:	bne.n	905c <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9064:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9068:	cmp	r3, #0
    906a:	bne.w	8d48 <isr+0x2c>
    906e:	b.n	8de6 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9070:	ldr	r3, [pc, #428]	; (9220 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    9072:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9076:	ldr	r2, [pc, #428]	; (9224 <isr+0x508>)
    9078:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    907a:	ldr	r3, [pc, #428]	; (9228 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    907c:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    907e:	strb	r1, [r3, #0]
    9080:	b.n	8f90 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9082:	uxth	r2, r2
    9084:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9088:	cmp	r3, #7
    908a:	bhi.w	8f24 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    908e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9092:	mov.w	r3, r3, lsl #2
    9096:	ldr	r2, [pc, #384]	; (9218 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9098:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    909c:	add	r2, r3
    909e:	ldr	r3, [r2, #0]
    90a0:	ite	ne
    90a2:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    90a6:	orreq.w	r3, r3, #1
    90aa:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    90ac:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90ae:	ldr	r3, [pc, #364]	; (921c <isr+0x500>)
    90b0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    90b2:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    90b4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    90b6:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    90ba:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    90bc:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    90c0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    90c2:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    90c4:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    90c8:	ldr.w	r3, [r4, #432]	; 0x1b0
    90cc:	cmp	r3, #0
    90ce:	bne.n	90c8 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    90d0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    90d4:	cmp	r3, #0
    90d6:	bne.w	8d48 <isr+0x2c>
    90da:	b.n	8de6 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    90dc:	ldr	r2, [pc, #332]	; (922c <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    90de:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    90e0:	ldr	r3, [pc, #332]	; (9230 <isr+0x514>)
    90e2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    90e4:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    90e6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    90e8:	bl	8c84 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    90ec:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    90f0:	cmp	r3, #0
    90f2:	bne.w	8d48 <isr+0x2c>
    90f6:	b.n	8de6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    90f8:	ldr	r3, [pc, #312]	; (9234 <isr+0x518>)
    90fa:	ldr	r0, [r3, #4]
    90fc:	cmp	r0, #0
    90fe:	beq.w	8f24 <isr+0x208>
    9102:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9104:	uxth.w	lr, r2
    9108:	b.n	9114 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    910a:	adds	r3, #12
    910c:	ldr	r0, [r3, #4]
    910e:	cmp	r0, #0
    9110:	beq.w	8f24 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9114:	ldrh	r5, [r3, #0]
    9116:	cmp	r5, r1
    9118:	bne.n	910a <isr+0x3ee>
    911a:	ldrh	r5, [r3, #2]
    911c:	cmp	r5, lr
    911e:	bne.n	910a <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    9120:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9122:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    9124:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9126:	ite	eq
    9128:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    912a:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    912c:	cmp	r1, r2
    912e:	it	cs
    9130:	movcs	r1, r2
    9132:	bl	8c84 <endpoint0_transmit.constprop.0>
    9136:	b.n	8dde <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    9138:	ldr.w	r2, [r3, #328]	; 0x148
    913c:	bic.w	r2, r2, #128	; 0x80
    9140:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    9144:	add	sp, #12
    9146:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    914a:	lsls	r3, r1, #31
    914c:	bpl.w	8dd6 <isr+0xba>
    9150:	b.n	8dd2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9152:	ldr	r5, [pc, #228]	; (9238 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9154:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    9156:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9158:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    915a:	ldr	r3, [pc, #224]	; (923c <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    915c:	ldr	r1, [pc, #224]	; (9240 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    915e:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    9160:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9162:	ldr	r1, [pc, #224]	; (9244 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9164:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9168:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    916a:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    916e:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9172:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9176:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    917a:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    917c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    917e:	sub.w	r0, r1, #4096	; 0x1000
    9182:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9184:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9188:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    918a:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    918c:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    9190:	ldr.w	r3, [r4, #432]	; 0x1b0
    9194:	cmp	r3, #0
    9196:	bne.n	9190 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    9198:	ldr	r2, [pc, #128]	; (921c <isr+0x500>)
    919a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    919c:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    919e:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91a0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    91a2:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    91a6:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    91a8:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    91ac:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    91ae:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    91b2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    91b4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    91b8:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    91bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    91c0:	cmp	r3, #0
    91c2:	bne.n	91bc <isr+0x4a0>
    91c4:	b.n	8dde <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    91c6:	ldr	r4, [pc, #112]	; (9238 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    91c8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    91cc:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    91ce:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    91d0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    91d2:	cmp	r4, r0
    91d4:	bne.w	8e88 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    91d8:	ldr	r1, [pc, #108]	; (9248 <isr+0x52c>)
    91da:	ldr	r4, [pc, #112]	; (924c <isr+0x530>)
    91dc:	ldmia	r1, {r0, r1}
    91de:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    91e0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    91e2:	str	r0, [r4, #0]
    91e4:	strh	r1, [r4, #4]
    91e6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    91e8:	bne.w	8e88 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    91ec:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    91f0:	movs	r4, #80	; 0x50
    91f2:	ldr	r0, [pc, #92]	; (9250 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    91f4:	orr.w	r1, r1, #128	; 0x80
    91f8:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    91fc:	strb	r4, [r0, #0]
    91fe:	b.n	8e88 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    9200:	ldr	r0, [pc, #80]	; (9254 <isr+0x538>)
    9202:	bl	8c54 <run_callbacks>
    9206:	b.n	8e96 <isr+0x17a>
    9208:	ldr	r0, [pc, #76]	; (9258 <isr+0x53c>)
    920a:	bl	8c54 <run_callbacks>
    920e:	b.n	8ea2 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9210:	ldr	r0, [pc, #72]	; (925c <isr+0x540>)
    9212:	bl	8c54 <run_callbacks>
    9216:	b.n	8e9c <isr+0x180>
    9218:	.word	0x402e01c0
    921c:	.word	0x2000d020
    9220:	.word	0x2000c078
    9224:	.word	0x2000c10c
    9228:	.word	0x2000c041
    922c:	.word	0x2000c070
    9230:	.word	0x2000c060
    9234:	.word	0x200006c8
    9238:	.word	0x2000c058
    923c:	.word	0x2000d000
    9240:	.word	0x00078080
    9244:	.word	0x2000e068
    9248:	.word	0x2000c068
    924c:	.word	0x2000c104
    9250:	.word	0x2000c054
    9254:	.word	0x2000e100
    9258:	.word	0x2000e180
    925c:	.word	0x2000e140

00009260 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9260:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9262:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9266:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    926a:	ite	ne
    926c:	movne	r7, #0
    926e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9272:	cmp	r2, #2
    9274:	bls.n	927a <usb_config_rx+0x1a>
    9276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    927a:	mov.w	sl, r0, lsl #7
    927e:	ldr.w	r9, [pc, #64]	; 92c0 <usb_config_rx+0x60>
    9282:	mov	r5, r1
    9284:	mov	r4, r0
    9286:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    928a:	movs	r1, #0
    928c:	movs	r2, #64	; 0x40
    928e:	mov	r8, r3
    9290:	mov	r0, r6
    9292:	bl	a594 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9296:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9298:	orr.w	r1, r7, r5, lsl #16
    929c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    92a0:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    92a4:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    92a6:	cmp.w	r8, #0
    92aa:	beq.n	9276 <usb_config_rx+0x16>
    92ac:	ldr	r3, [pc, #12]	; (92bc <usb_config_rx+0x5c>)
    92ae:	lsls	r0, r4
    92b0:	ldr	r4, [r3, #0]
    92b2:	orrs	r0, r4
    92b4:	str	r0, [r3, #0]
    92b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92ba:	nop
    92bc:	.word	0x2000c048
    92c0:	.word	0x2000e000

000092c4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    92c4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    92c6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    92ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    92ce:	ite	ne
    92d0:	movne	r7, #0
    92d2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    92d6:	cmp	r2, #2
    92d8:	bls.n	92de <usb_config_tx+0x1a>
    92da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    92de:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    92e0:	lsls	r5, r0, #7
    92e2:	ldr.w	r9, [pc, #68]	; 9328 <usb_config_tx+0x64>
    92e6:	mov	r8, r1
    92e8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    92ea:	movs	r1, #0
    92ec:	mov	r4, r0
    92ee:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    92f0:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    92f4:	mov	r0, sl
    92f6:	bl	a594 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    92fa:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    92fc:	orr.w	r1, r7, r8, lsl #16
    9300:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9304:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9308:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    930c:	cmp	r6, #0
    930e:	beq.n	92da <usb_config_tx+0x16>
    9310:	add.w	r0, r4, #16
    9314:	ldr	r3, [pc, #12]	; (9324 <usb_config_tx+0x60>)
    9316:	lsls	r2, r0
    9318:	ldr	r0, [r3, #0]
    931a:	orrs	r2, r0
    931c:	str	r2, [r3, #0]
    931e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9322:	nop
    9324:	.word	0x2000c048
    9328:	.word	0x2000e000

0000932c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    932c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    932e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9330:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9332:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    9336:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9338:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    933a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    933c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9340:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9344:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9348:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    934c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    934e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9350:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    9352:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9354:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    9356:	pop	{r4, r5, r6, r7}
    9358:	bx	lr
    935a:	nop

0000935c <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    935c:	subs	r3, r0, #2
    935e:	cmp	r3, #2
    9360:	bls.n	9364 <usb_transmit+0x8>
    9362:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9364:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9366:	ldr	r3, [pc, #24]	; (9380 <usb_transmit+0x24>)
    9368:	add.w	r4, r0, #16
    936c:	movs	r5, #1
    936e:	mov	r2, r1
    9370:	add.w	r0, r3, r0, lsl #7
    9374:	lsl.w	r1, r5, r4
}
    9378:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    937a:	b.w	8bf8 <schedule_transfer>
    937e:	nop
    9380:	.word	0x2000e040

00009384 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9384:	subs	r3, r0, #2
    9386:	cmp	r3, #2
    9388:	bls.n	938c <usb_receive+0x8>
    938a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    938c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    938e:	ldr	r3, [pc, #20]	; (93a4 <usb_receive+0x20>)
    9390:	movs	r4, #1
    9392:	mov	r2, r1
    9394:	lsl.w	r1, r4, r0
    9398:	add.w	r0, r3, r0, lsl #7
}
    939c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    93a0:	b.w	8bf8 <schedule_transfer>
    93a4:	.word	0x2000e000

000093a8 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    93a8:	ldr	r2, [pc, #32]	; (93cc <usb_transfer_status+0x24>)
    93aa:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    93ae:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    93b0:	orr.w	r3, r3, #16384	; 0x4000
    93b4:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    93b8:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    93ba:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    93be:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    93c0:	tst.w	r3, #16384	; 0x4000
    93c4:	beq.n	93ae <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    93c6:	mov	r0, r1
    93c8:	bx	lr
    93ca:	nop
    93cc:	.word	0x402e0000

000093d0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    93d0:	cmp	r0, #0
    93d2:	beq.n	947a <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    93d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93d8:	mov	r9, r0
    93da:	sub	sp, #12
    93dc:	ldr	r4, [pc, #156]	; (947c <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    93de:	movs	r0, #1
    93e0:	ldr	r5, [pc, #156]	; (9480 <delay+0xb0>)
    93e2:	ldr	r6, [pc, #160]	; (9484 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    93e4:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    93e8:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    93ea:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    93ec:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    93f0:	cmp	r3, #0
    93f2:	bne.n	93e4 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    93f4:	ldr	r7, [pc, #144]	; (9488 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    93f6:	mov.w	lr, #1000	; 0x3e8
    93fa:	ldr	r0, [pc, #144]	; (948c <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    93fc:	ldr.w	ip, [r7]
    9400:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9402:	add.w	r7, r7, #1660944384	; 0x63000000
    9406:	ldr	r3, [r0, #0]
    9408:	rsb	r1, r1, ip
    940c:	add.w	r7, r7, #1818624	; 0x1bc000
    9410:	addw	r7, r7, #3711	; 0xe7f
    9414:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9418:	mov	sl, r7
    941a:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    941c:	lsrs	r3, r3, #18
    941e:	udiv	r3, r1, r3
    9422:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9426:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    942a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    942c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    942e:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    9432:	cmp	r3, #0
    9434:	bne.n	9426 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9436:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    943a:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    943e:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9440:	mul.w	r2, lr, r2
    9444:	rsb	r1, r1, ip
    9448:	umull	r3, lr, sl, r3
    944c:	rsb	r3, r8, r2
    9450:	mov.w	r2, lr, lsr #18
    9454:	udiv	r1, r1, r2
    9458:	adds	r2, r1, r3
    945a:	cmp.w	r2, #1000	; 0x3e8
    945e:	bcc.n	9470 <delay+0xa0>
			if (--msec == 0) return;
    9460:	subs.w	r9, r9, #1
			start += 1000;
    9464:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    9468:	bne.n	9426 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    946a:	add	sp, #12
    946c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9470:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    9472:	bl	9648 <yield>
	}
    9476:	ldr	r0, [sp, #4]
    9478:	b.n	9426 <delay+0x56>
    947a:	bx	lr
    947c:	.word	0x2000e280
    9480:	.word	0x2000c078
    9484:	.word	0x2000c074
    9488:	.word	0xe0001004
    948c:	.word	0x20000bf0

00009490 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    9490:	push	{r4, r5, r6}
    9492:	ldr	r3, [pc, #56]	; (94cc <micros+0x3c>)
    9494:	movs	r6, #1
    9496:	ldr	r5, [pc, #56]	; (94d0 <micros+0x40>)
    9498:	ldr	r0, [pc, #56]	; (94d4 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    949a:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    949e:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    94a0:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    94a2:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    94a6:	cmp	r2, #0
    94a8:	bne.n	949a <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    94aa:	ldr	r3, [pc, #44]	; (94d8 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    94ac:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    94b0:	ldr	r2, [pc, #40]	; (94dc <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    94b2:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    94b4:	ldr	r5, [pc, #40]	; (94e0 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    94b6:	ldr	r2, [r2, #0]
	return usec;
    94b8:	subs	r4, r3, r4
    94ba:	umull	r2, r3, r5, r2
    94be:	lsrs	r3, r3, #18
    94c0:	udiv	r4, r4, r3
}
    94c4:	mla	r0, r0, r1, r4
    94c8:	pop	{r4, r5, r6}
    94ca:	bx	lr
    94cc:	.word	0x2000e280
    94d0:	.word	0x2000c078
    94d4:	.word	0x2000c074
    94d8:	.word	0xe0001004
    94dc:	.word	0x20000bf0
    94e0:	.word	0x431bde83

000094e4 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    94e4:	cmp	r0, #28
    94e6:	bhi.n	9514 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    94e8:	ldr	r1, [pc, #68]	; (9530 <analogRead+0x4c>)
    94ea:	ldrb	r3, [r1, #0]
    94ec:	cbz	r3, 94fa <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    94ee:	ldr	r2, [pc, #68]	; (9534 <analogRead+0x50>)
    94f0:	ldr	r3, [r2, #72]	; 0x48
    94f2:	ands.w	r3, r3, #128	; 0x80
    94f6:	bne.n	94f0 <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    94f8:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    94fa:	ldr	r3, [pc, #60]	; (9538 <analogRead+0x54>)
    94fc:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    94fe:	lsls	r2, r3, #24
    9500:	bmi.n	9518 <analogRead+0x34>
		ADC1_HC0 = ch;
    9502:	ldr	r2, [pc, #48]	; (9534 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9504:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    9506:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9508:	ldr	r3, [r1, #32]
    950a:	ldr	r2, [pc, #40]	; (9534 <analogRead+0x50>)
    950c:	lsls	r0, r3, #31
    950e:	bpl.n	9508 <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    9510:	ldr	r0, [r2, #36]	; 0x24
    9512:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    9514:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    9516:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    9518:	ldr	r2, [pc, #32]	; (953c <analogRead+0x58>)
    951a:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    951e:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    9520:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    9522:	ldr	r3, [r1, #32]
    9524:	ldr	r2, [pc, #20]	; (953c <analogRead+0x58>)
    9526:	lsls	r3, r3, #31
    9528:	bpl.n	9522 <analogRead+0x3e>
		return ADC2_R0;
    952a:	ldr	r0, [r2, #36]	; 0x24
    952c:	bx	lr
    952e:	nop
    9530:	.word	0x2000c07c
    9534:	.word	0x400c4000
    9538:	.word	0x2000042c
    953c:	.word	0x400c8000

00009540 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9540:	lsls	r0, r0, #4
    9542:	ldr	r3, [pc, #28]	; (9560 <digitalWrite.part.0+0x20>)
    9544:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    9546:	ldr	r3, [r3, r0]
	mask = p->mask;
    9548:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    954a:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    954c:	tst	r0, r2
    954e:	beq.n	9556 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    9550:	cbnz	r1, 9558 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    9552:	str.w	r2, [r3, #136]	; 0x88
    9556:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    9558:	str.w	r2, [r3, #132]	; 0x84
    955c:	bx	lr
    955e:	nop
    9560:	.word	0x20000448

00009564 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9564:	cmp	r0, #39	; 0x27
    9566:	bhi.n	956c <digitalWrite+0x8>
    9568:	b.w	9540 <digitalWrite.part.0>
    956c:	bx	lr
    956e:	nop

00009570 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9570:	cmp	r0, #39	; 0x27
    9572:	bhi.n	95ae <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9574:	lsls	r0, r0, #4
    9576:	ldr	r2, [pc, #104]	; (95e0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9578:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    957a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    957e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9580:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9582:	beq.n	95b0 <pinMode+0x40>
    9584:	cmp	r1, #4
    9586:	beq.n	95b0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9588:	ldr	r4, [r3, #12]
    958a:	ldr	r2, [r0, #4]
    958c:	bic.w	r2, r2, r4
    9590:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9592:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9594:	cbz	r1, 95d2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9596:	cmp	r1, #2
    9598:	beq.n	95d8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    959a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    959c:	ldr	r3, [r3, #4]
}
    959e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    95a2:	ite	eq
    95a4:	ldreq	r1, [pc, #60]	; (95e4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    95a6:	ldrne	r1, [pc, #64]	; (95e8 <pinMode+0x78>)
    95a8:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    95aa:	movs	r2, #21
    95ac:	str	r2, [r3, #0]
}
    95ae:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    95b0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    95b2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    95b4:	ldr	r4, [r0, #4]
    95b6:	orr.w	r2, r2, r4
    95ba:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    95bc:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    95be:	beq.n	95d2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    95c0:	movw	r1, #2104	; 0x838
    95c4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    95c6:	ldr	r3, [r3, #4]
    95c8:	movs	r2, #21
}
    95ca:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    95ce:	str	r2, [r3, #0]
}
    95d0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    95d2:	movs	r1, #56	; 0x38
    95d4:	str	r1, [r2, #0]
    95d6:	b.n	95c6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    95d8:	ldr	r1, [pc, #16]	; (95ec <pinMode+0x7c>)
    95da:	str	r1, [r2, #0]
    95dc:	b.n	95c6 <pinMode+0x56>
    95de:	nop
    95e0:	.word	0x20000448
    95e4:	.word	0x00013038
    95e8:	.word	0x00010038
    95ec:	.word	0x0001f038

000095f0 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    95f0:	ldr	r2, [pc, #72]	; (963c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    95f2:	ldr	r3, [pc, #76]	; (9640 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    95f4:	ldr.w	r0, [r2, #544]	; 0x220
    95f8:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    95fc:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    95fe:	push	{r4, lr}
    9600:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9602:	bhi.n	960a <usb_init_serialnumber+0x1a>
    9604:	add.w	r0, r0, r0, lsl #2
    9608:	lsls	r0, r0, #1
    960a:	ldr	r4, [pc, #56]	; (9644 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    960c:	add	r1, sp, #4
    960e:	movs	r2, #10
    9610:	bl	9bf0 <ultoa>
    9614:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    9616:	movs	r3, #0
    9618:	mov	r0, r4
		char c = buf[i];
    961a:	ldrb.w	r2, [r1], #1
    961e:	adds	r3, #1
		if (!c) break;
    9620:	cbz	r2, 9632 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9622:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9624:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9628:	bne.n	961a <usb_init_serialnumber+0x2a>
    962a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    962c:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    962e:	add	sp, #16
    9630:	pop	{r4, pc}
    9632:	lsls	r3, r3, #1
    9634:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9636:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    9638:	add	sp, #16
    963a:	pop	{r4, pc}
    963c:	.word	0x401f4400
    9640:	.word	0x0098967f
    9644:	.word	0x20000c8c

00009648 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9648:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    964a:	ldr	r4, [pc, #132]	; (96d0 <yield+0x88>)
    964c:	ldrb	r3, [r4, #0]
    964e:	cbnz	r3, 9672 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9650:	ldr	r3, [pc, #128]	; (96d4 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9652:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9654:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9656:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9658:	cbnz	r3, 96a2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    965a:	ldr	r3, [pc, #124]	; (96d8 <yield+0x90>)
    965c:	ldrb	r3, [r3, #0]
    965e:	cmp	r3, #0
    9660:	bne.n	96b6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    9662:	ldr	r3, [pc, #120]	; (96dc <yield+0x94>)

	running = 0;
    9664:	movs	r1, #0
    9666:	ldr	r2, [r3, #0]
    9668:	strb	r1, [r4, #0]
    966a:	cbz	r2, 9672 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    966c:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9670:	cbz	r2, 9674 <yield+0x2c>
    9672:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9674:	mrs	r0, PRIMASK
		__disable_irq();
    9678:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    967a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    967c:	cbz	r2, 96bc <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    967e:	ldr	r4, [pc, #96]	; (96e0 <yield+0x98>)
    9680:	ldrb	r1, [r4, #0]
    9682:	cbnz	r1, 96bc <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9684:	movs	r6, #1
		firstYield = first->_next;
    9686:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9688:	strb	r6, [r4, #0]
		firstYield = first->_next;
    968a:	str	r5, [r3, #0]
		if (firstYield) {
    968c:	cbz	r5, 96c4 <yield+0x7c>
			firstYield->_prev = nullptr;
    968e:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9690:	cbnz	r0, 9694 <yield+0x4c>
    9692:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9694:	movs	r5, #0
		(*(first->_function))(*first);
    9696:	ldr	r3, [r2, #8]
    9698:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    969a:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    969c:	blx	r3
		runningFromYield = false;
    969e:	strb	r5, [r4, #0]
    96a0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    96a2:	bl	8820 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    96a6:	cmp	r0, #0
    96a8:	beq.n	965a <yield+0x12>
    96aa:	bl	99b8 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    96ae:	ldr	r3, [pc, #40]	; (96d8 <yield+0x90>)
    96b0:	ldrb	r3, [r3, #0]
    96b2:	cmp	r3, #0
    96b4:	beq.n	9662 <yield+0x1a>
    96b6:	bl	9ef8 <HardwareSerial::processSerialEvents()>
    96ba:	b.n	9662 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    96bc:	cmp	r0, #0
    96be:	bne.n	9672 <yield+0x2a>
    96c0:	cpsie	i
    96c2:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    96c4:	ldr	r3, [pc, #28]	; (96e4 <yield+0x9c>)
    96c6:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    96c8:	cmp	r0, #0
    96ca:	bne.n	9694 <yield+0x4c>
    96cc:	b.n	9692 <yield+0x4a>
    96ce:	nop
    96d0:	.word	0x2000c07d
    96d4:	.word	0x20000ca2
    96d8:	.word	0x2000c0cc
    96dc:	.word	0x2000c094
    96e0:	.word	0x2000c098
    96e4:	.word	0x2000c090

000096e8 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    96e8:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    96ea:	ldr	r4, [pc, #100]	; (9750 <random(unsigned long) [clone .part.0]+0x68>)
    96ec:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    96ee:	cbz	r3, 9734 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    96f0:	ldr	r1, [pc, #96]	; (9754 <random(unsigned long) [clone .part.0]+0x6c>)
    96f2:	asrs	r5, r3, #31
    96f4:	ldr.w	lr, [pc, #104]	; 9760 <random(unsigned long) [clone .part.0]+0x78>
    96f8:	smull	r6, r7, r3, r1
    96fc:	ldr	r6, [pc, #88]	; (9758 <random(unsigned long) [clone .part.0]+0x70>)
    96fe:	smull	r2, r1, r1, r3
    9702:	adds	r2, r3, r7
    9704:	add	r1, r3
    9706:	rsb	r2, r5, r2, asr #16
    970a:	rsb	r1, r5, r1, asr #16
    970e:	movw	r5, #16807	; 0x41a7
    9712:	mls	r2, lr, r2, r3
    9716:	mul.w	r1, r6, r1
    971a:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    971e:	cmp	r3, #0
    9720:	bge.n	9742 <random(unsigned long) [clone .part.0]+0x5a>
    9722:	mvn.w	r2, #2147483648	; 0x80000000
    9726:	add	r2, r3
    9728:	udiv	r3, r2, r0
	seed = x;
    972c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    972e:	mls	r0, r0, r3, r2
    9732:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    9734:	ldr	r2, [pc, #36]	; (975c <random(unsigned long) [clone .part.0]+0x74>)
    9736:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    973a:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    973c:	mls	r0, r0, r3, r2
    9740:	pop	{r4, r5, r6, r7, pc}
    9742:	mov	r2, r3
    9744:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    9748:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    974a:	mls	r0, r0, r3, r2
    974e:	pop	{r4, r5, r6, r7, pc}
    9750:	.word	0x2000c080
    9754:	.word	0x834e0b5f
    9758:	.word	0xfffff4ec
    975c:	.word	0x1f0cce42
    9760:	.word	0x0001f31d

00009764 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    9764:	cbz	r0, 976a <randomSeed(unsigned long)+0x6>
    9766:	ldr	r3, [pc, #4]	; (976c <randomSeed(unsigned long)+0x8>)
    9768:	str	r0, [r3, #0]
    976a:	bx	lr
    976c:	.word	0x2000c080

00009770 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    9770:	cbz	r0, 9776 <random(unsigned long)+0x6>
    9772:	b.w	96e8 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    9776:	bx	lr

00009778 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    9778:	cmp	r0, r1
    977a:	bge.n	978a <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    977c:	push	{r4, lr}
    977e:	mov	r4, r0
    9780:	subs	r0, r1, r0
    9782:	bl	96e8 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    9786:	add	r0, r4
}
    9788:	pop	{r4, pc}
    978a:	bx	lr

0000978c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    978c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    978e:	mrs	r2, PRIMASK
		__disable_irq();
    9792:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9794:	ldrb	r3, [r0, #29]
    9796:	cbnz	r3, 97a6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9798:	ldrb	r1, [r0, #28]
    979a:	cmp	r1, #1
    979c:	beq.n	97b0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    979e:	cmp	r1, #3
    97a0:	beq.n	97c4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    97a2:	movs	r3, #1
    97a4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    97a6:	cbnz	r2, 97aa <EventResponder::triggerEventNotImmediate()+0x1e>
    97a8:	cpsie	i
	}
	enableInterrupts(irq);
}
    97aa:	ldr.w	r4, [sp], #4
    97ae:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    97b0:	ldr	r4, [pc, #68]	; (97f8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    97b2:	ldr	r1, [r4, #0]
    97b4:	cbz	r1, 97e0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    97b6:	ldr	r1, [pc, #68]	; (97fc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    97b8:	str	r3, [r0, #20]
				_prev = lastYield;
    97ba:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    97bc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    97be:	str	r3, [r0, #24]
				_prev->_next = this;
    97c0:	str	r0, [r3, #20]
    97c2:	b.n	97a2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    97c4:	ldr	r4, [pc, #56]	; (9800 <EventResponder::triggerEventNotImmediate()+0x74>)
    97c6:	ldr	r1, [r4, #0]
    97c8:	cbz	r1, 97ec <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    97ca:	ldr	r1, [pc, #56]	; (9804 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    97cc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    97ce:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    97d0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    97d2:	str	r3, [r0, #24]
				_prev->_next = this;
    97d4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    97d6:	ldr	r3, [pc, #48]	; (9808 <EventResponder::triggerEventNotImmediate()+0x7c>)
    97d8:	mov.w	r1, #268435456	; 0x10000000
    97dc:	str	r1, [r3, #0]
    97de:	b.n	97a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    97e0:	ldr	r3, [pc, #24]	; (97fc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    97e2:	str	r1, [r0, #20]
				_prev = nullptr;
    97e4:	str	r1, [r0, #24]
				firstYield = this;
    97e6:	str	r0, [r4, #0]
				lastYield = this;
    97e8:	str	r0, [r3, #0]
    97ea:	b.n	97a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    97ec:	ldr	r3, [pc, #20]	; (9804 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    97ee:	str	r1, [r0, #20]
				_prev = nullptr;
    97f0:	str	r1, [r0, #24]
				firstInterrupt = this;
    97f2:	str	r0, [r4, #0]
				lastInterrupt = this;
    97f4:	str	r0, [r3, #0]
    97f6:	b.n	97d6 <EventResponder::triggerEventNotImmediate()+0x4a>
    97f8:	.word	0x2000c094
    97fc:	.word	0x2000c090
    9800:	.word	0x2000c084
    9804:	.word	0x2000c088
    9808:	.word	0xe000ed04

0000980c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    980c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    980e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9810:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9812:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9814:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9816:	beq.n	9820 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    9818:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    981c:	b.w	978c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9820:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    9822:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9826:	bx	r3

00009828 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9828:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    982a:	mrs	r1, PRIMASK
		__disable_irq();
    982e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9830:	ldr	r4, [pc, #48]	; (9864 <EventResponder::runFromInterrupt()+0x3c>)
    9832:	ldr	r3, [r4, #0]
		if (first) {
    9834:	cbz	r3, 985a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9836:	ldr	r6, [pc, #48]	; (9868 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9838:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    983a:	ldr	r2, [r3, #20]
    983c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    983e:	cbz	r2, 9860 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9840:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9842:	cbnz	r1, 9846 <EventResponder::runFromInterrupt()+0x1e>
    9844:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9846:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9848:	mov	r0, r3
    984a:	ldr	r3, [r3, #8]
    984c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    984e:	mrs	r1, PRIMASK
		__disable_irq();
    9852:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9854:	ldr	r3, [r4, #0]
		if (first) {
    9856:	cmp	r3, #0
    9858:	bne.n	983a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    985a:	cbnz	r1, 985e <EventResponder::runFromInterrupt()+0x36>
    985c:	cpsie	i
    985e:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9860:	str	r2, [r6, #0]
    9862:	b.n	9842 <EventResponder::runFromInterrupt()+0x1a>
    9864:	.word	0x2000c084
    9868:	.word	0x2000c088

0000986c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    986c:	b.w	9828 <EventResponder::runFromInterrupt()>

00009870 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9870:	ldr	r2, [pc, #96]	; (98d4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9872:	push	{r4, r5}
	if (listActive == nullptr) {
    9874:	ldr	r4, [r2, #0]
    9876:	cmp	r4, #0
    9878:	beq.n	98cc <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    987a:	ldr	r3, [r0, #0]
    987c:	ldr	r1, [r4, #0]
    987e:	cmp	r3, r1
    9880:	bcs.n	98a2 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9882:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9884:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9886:	str	r4, [r0, #8]
		_prev = nullptr;
    9888:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    988a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    988c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    988e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9890:	movs	r3, #2
}
    9892:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9894:	strb	r3, [r0, #20]
}
    9896:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    9898:	str	r3, [r0, #0]
    989a:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    989c:	ldr	r1, [r2, #0]
    989e:	cmp	r3, r1
    98a0:	bcc.n	98b4 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    98a2:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    98a4:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    98a6:	cmp	r2, #0
    98a8:	bne.n	9898 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    98aa:	str	r2, [r0, #8]
		_prev = timer;
    98ac:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    98ae:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    98b0:	str	r0, [r4, #8]
    98b2:	b.n	9890 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    98b4:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    98b6:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    98b8:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    98ba:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    98bc:	str	r5, [r0, #12]
				timer->_prev = this;
    98be:	str	r0, [r4, #12]
				_prev->_next = this;
    98c0:	ldr	r1, [r0, #12]
    98c2:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    98c4:	str	r3, [r4, #0]
				_state = TimerActive;
    98c6:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    98c8:	pop	{r4, r5}
    98ca:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    98cc:	str	r4, [r0, #8]
		_prev = nullptr;
    98ce:	str	r4, [r0, #12]
		listActive = this;
    98d0:	str	r0, [r2, #0]
    98d2:	b.n	9890 <MillisTimer::addToActiveList()+0x20>
    98d4:	.word	0x2000c08c

000098d8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    98d8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    98da:	ldr	r6, [pc, #136]	; (9964 <MillisTimer::runFromTimer()+0x8c>)
    98dc:	ldr	r4, [r6, #0]
	while (timer) {
    98de:	cbz	r4, 992c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    98e0:	ldr	r3, [r4, #0]
    98e2:	cmp	r3, #0
    98e4:	bne.n	995c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    98e6:	mov	r5, r3
    98e8:	ldr	r7, [pc, #124]	; (9968 <MillisTimer::runFromTimer()+0x90>)
    98ea:	b.n	98f6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    98ec:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    98ee:	cbz	r4, 992c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    98f0:	ldr	r3, [r4, #0]
    98f2:	cmp	r3, #0
    98f4:	bne.n	995c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    98f6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    98f8:	cbz	r3, 98fc <MillisTimer::runFromTimer()+0x24>
    98fa:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    98fc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    98fe:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9900:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9902:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9904:	ldr	r3, [r3, #0]
    9906:	cmp	r3, r7
    9908:	bne.n	994e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    990a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    990c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    990e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9910:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9912:	beq.n	9956 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9914:	bl	978c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9918:	ldr	r3, [r4, #4]
    991a:	cmp	r3, #0
    991c:	beq.n	98ec <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    991e:	str	r3, [r4, #0]
				timer->addToActiveList();
    9920:	mov	r0, r4
    9922:	bl	9870 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9926:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9928:	cmp	r4, #0
    992a:	bne.n	98f0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    992c:	mrs	r3, PRIMASK
		__disable_irq();
    9930:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9932:	ldr	r2, [pc, #56]	; (996c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9934:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9936:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9938:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    993a:	cbnz	r3, 993e <MillisTimer::runFromTimer()+0x66>
    993c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    993e:	cbz	r0, 994c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9940:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9942:	bl	9870 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9946:	mov	r0, r4
    9948:	cmp	r0, #0
    994a:	bne.n	9940 <MillisTimer::runFromTimer()+0x68>
    994c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    994e:	mov	r2, r4
    9950:	movs	r1, #0
    9952:	blx	r3
    9954:	b.n	9918 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9956:	ldr	r3, [r0, #8]
    9958:	blx	r3
    995a:	b.n	9918 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    995c:	subs	r3, #1
    995e:	str	r3, [r4, #0]
			break;
    9960:	b.n	992c <MillisTimer::runFromTimer()+0x54>
    9962:	nop
    9964:	.word	0x2000c08c
    9968:	.word	0x0000980d
    996c:	.word	0x2000c09c

00009970 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9970:	ldr	r2, [pc, #16]	; (9984 <systick_isr+0x14>)
    9972:	ldr	r3, [pc, #20]	; (9988 <systick_isr+0x18>)
    9974:	ldr	r1, [r2, #0]
	systick_millis_count++;
    9976:	ldr	r2, [pc, #20]	; (998c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9978:	str	r1, [r3, #0]
	systick_millis_count++;
    997a:	ldr	r3, [r2, #0]
    997c:	adds	r3, #1
    997e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9980:	b.w	98d8 <MillisTimer::runFromTimer()>
    9984:	.word	0xe0001004
    9988:	.word	0x2000c074
    998c:	.word	0x2000c078

00009990 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9990:	b.w	8834 <usb_serial_flush_input>

00009994 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9994:	b.w	87fc <usb_serial_peekchar>

00009998 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9998:	b.w	87b0 <usb_serial_getchar>

0000999c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    999c:	b.w	8820 <usb_serial_available>

000099a0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    99a0:	b.w	8900 <usb_serial_flush_output>

000099a4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    99a4:	b.w	88b4 <usb_serial_write_buffer_free>

000099a8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    99a8:	mov	r0, r1
    99aa:	mov	r1, r2
    99ac:	b.w	889c <usb_serial_write>

000099b0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    99b0:	mov	r0, r1
    99b2:	b.w	8870 <usb_serial_putchar>
    99b6:	nop

000099b8 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    99b8:	ldr	r3, [pc, #4]	; (99c0 <serialEvent()+0x8>)
    99ba:	movs	r2, #0
    99bc:	strb	r2, [r3, #0]
    99be:	bx	lr
    99c0:	.word	0x20000ca2

000099c4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    99c4:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    99c6:	ldr	r4, [pc, #24]	; (99e0 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    99c8:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    99ca:	ldr	r3, [r0, #0]
    99cc:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    99ce:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    99d0:	add	r1, sp, #4
    99d2:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    99d4:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    99d8:	blx	r3
}
    99da:	add	sp, #8
    99dc:	pop	{r4, pc}
    99de:	nop
    99e0:	.word	0x2000075c

000099e4 <operator new(unsigned int)>:
    99e4:	b.w	a004 <malloc>

000099e8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    99e8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    99ea:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    99ee:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    99f2:	bne.n	9ad0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    99f4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    99f6:	bcc.n	9a7c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    99f8:	ldr.w	r3, [r1], #4
    99fc:	str.w	r3, [r0], #4
    9a00:	ldr.w	r3, [r1], #4
    9a04:	str.w	r3, [r0], #4
    9a08:	ldr.w	r3, [r1], #4
    9a0c:	str.w	r3, [r0], #4
    9a10:	ldr.w	r3, [r1], #4
    9a14:	str.w	r3, [r0], #4
    9a18:	ldr.w	r3, [r1], #4
    9a1c:	str.w	r3, [r0], #4
    9a20:	ldr.w	r3, [r1], #4
    9a24:	str.w	r3, [r0], #4
    9a28:	ldr.w	r3, [r1], #4
    9a2c:	str.w	r3, [r0], #4
    9a30:	ldr.w	r3, [r1], #4
    9a34:	str.w	r3, [r0], #4
    9a38:	ldr.w	r3, [r1], #4
    9a3c:	str.w	r3, [r0], #4
    9a40:	ldr.w	r3, [r1], #4
    9a44:	str.w	r3, [r0], #4
    9a48:	ldr.w	r3, [r1], #4
    9a4c:	str.w	r3, [r0], #4
    9a50:	ldr.w	r3, [r1], #4
    9a54:	str.w	r3, [r0], #4
    9a58:	ldr.w	r3, [r1], #4
    9a5c:	str.w	r3, [r0], #4
    9a60:	ldr.w	r3, [r1], #4
    9a64:	str.w	r3, [r0], #4
    9a68:	ldr.w	r3, [r1], #4
    9a6c:	str.w	r3, [r0], #4
    9a70:	ldr.w	r3, [r1], #4
    9a74:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9a78:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9a7a:	bcs.n	99f8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9a7c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9a7e:	bcc.n	9aa4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9a80:	ldr.w	r3, [r1], #4
    9a84:	str.w	r3, [r0], #4
    9a88:	ldr.w	r3, [r1], #4
    9a8c:	str.w	r3, [r0], #4
    9a90:	ldr.w	r3, [r1], #4
    9a94:	str.w	r3, [r0], #4
    9a98:	ldr.w	r3, [r1], #4
    9a9c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9aa0:	subs	r2, #16
	bhs	.Lmid_block_loop
    9aa2:	bcs.n	9a80 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9aa4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9aa6:	bcc.n	9ab4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9aa8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9aac:	str.w	r3, [r0], #4
	subs	r2, #4
    9ab0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9ab2:	bcs.n	9aa8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9ab4:	adds	r2, #4
	beq	.Ldone
    9ab6:	beq.n	9aca <memcpy+0xe2>

	lsls	r2, r2, #31
    9ab8:	lsls	r2, r2, #31
	itt ne
    9aba:	itt	ne
	ldrbne  r3, [r1], #1
    9abc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9ac0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9ac4:	bcc.n	9aca <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9ac6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9ac8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9aca:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9acc:	bx	lr
    9ace:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9ad0:	cmp	r2, #8
	blo	.Lbyte_copy
    9ad2:	bcc.n	9afc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9ad4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9ad6:	beq.n	99f4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9ad8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9adc:	beq.n	99f4 <memcpy+0xc>

	rsb	r3, #4
    9ade:	rsb	r3, r3, #4
	subs	r2, r3
    9ae2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9ae4:	lsls	r3, r3, #31
	itt ne
    9ae6:	itt	ne
	ldrbne  r3, [r1], #1
    9ae8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9aec:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9af0:	bcc.n	99f4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9af2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9af6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9afa:	b.n	99f4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9afc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9afe:	bcc.n	9ab4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9b00:	subs	r2, #1
	ldrb    r3, [r1], #1
    9b02:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9b06:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9b0a:	bcs.n	9b00 <memcpy+0x118>

	ldrb	r3, [r1]
    9b0c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9b0e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9b10:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9b12:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9b14:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9b16:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9b18:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9b1a:	bx	lr

00009b1c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    9b1c:	movs	r0, #4
    9b1e:	mov	r1, lr
    9b20:	tst	r0, r1
    9b22:	beq.n	9b2c <_MSP>
    9b24:	mrs	r0, PSP
    9b28:	b.w	9b34 <HardFault_HandlerC>

00009b2c <_MSP>:
    9b2c:	mrs	r0, MSP
    9b30:	b.w	9b34 <HardFault_HandlerC>

00009b34 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9b34:	ldr	r3, [pc, #108]	; (9ba4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9b36:	movs	r1, #5
    9b38:	ldr	r2, [pc, #108]	; (9ba8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9b3a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9b3c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9b3e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    9b42:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9b44:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9b48:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9b4a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9b4c:	ldr	r4, [pc, #92]	; (9bac <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9b4e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9b50:	ldr	r0, [pc, #92]	; (9bb0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9b52:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    9b54:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9b58:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    9b5c:	ldr	r3, [r4, #0]
    9b5e:	cmp	r3, r0
    9b60:	bls.n	9b68 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    9b62:	ldr	r0, [pc, #80]	; (9bb4 <HardFault_HandlerC+0x80>)
    9b64:	bl	896c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9b68:	ldr	r5, [pc, #56]	; (9ba4 <HardFault_HandlerC+0x70>)
    9b6a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9b6c:	movs	r0, #0
    9b6e:	ldr	r2, [pc, #72]	; (9bb8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9b70:	ldr	r1, [pc, #72]	; (9bbc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9b72:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9b76:	str	r0, [sp, #4]
    9b78:	ldr	r3, [sp, #4]
    9b7a:	cmp	r3, r2
    9b7c:	bhi.n	9b8a <HardFault_HandlerC+0x56>
    9b7e:	ldr	r3, [sp, #4]
    9b80:	adds	r3, #1
    9b82:	str	r3, [sp, #4]
    9b84:	ldr	r3, [sp, #4]
    9b86:	cmp	r3, r2
    9b88:	bls.n	9b7e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9b8a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9b8e:	str	r0, [sp, #4]
    9b90:	ldr	r3, [sp, #4]
    9b92:	cmp	r3, r1
    9b94:	bhi.n	9b72 <HardFault_HandlerC+0x3e>
    9b96:	ldr	r3, [sp, #4]
    9b98:	adds	r3, #1
    9b9a:	str	r3, [sp, #4]
    9b9c:	ldr	r3, [sp, #4]
    9b9e:	cmp	r3, r1
    9ba0:	bls.n	9b96 <HardFault_HandlerC+0x62>
    9ba2:	b.n	9b72 <HardFault_HandlerC+0x3e>
    9ba4:	.word	0x401bc000
    9ba8:	.word	0x401f8000
    9bac:	.word	0x20000bf0
    9bb0:	.word	0x23c345ff
    9bb4:	.word	0x11e1a300
    9bb8:	.word	0x000f423f
    9bbc:	.word	0x0089543f

00009bc0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9bc0:	ldr	r2, [pc, #36]	; (9be8 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9bc2:	push	{r3, lr}
        char *prev = __brkval;
    9bc4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    9bc6:	cbz	r0, 9bd2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    9bc8:	add	r0, r3
    9bca:	ldr	r1, [pc, #32]	; (9bec <_sbrk+0x2c>)
    9bcc:	cmp	r0, r1
    9bce:	bhi.n	9bd6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    9bd0:	str	r0, [r2, #0]
        }
        return prev;
}
    9bd2:	mov	r0, r3
    9bd4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9bd6:	bl	9fa8 <__errno>
    9bda:	movs	r2, #12
                        return (void *)-1;
    9bdc:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9be0:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9be2:	mov	r0, r3
    9be4:	pop	{r3, pc}
    9be6:	nop
    9be8:	.word	0x20000cb4
    9bec:	.word	0x20280000

00009bf0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9bf0:	push	{r4, r5, r6, r7}
    9bf2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9bf4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9bf6:	mov	r7, r6
    9bf8:	b.n	9bfc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    9bfa:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    9bfc:	udiv	r3, r0, r2
    9c00:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9c04:	add.w	r4, r0, #55	; 0x37
    9c08:	cmp	r0, #9
    9c0a:	add.w	r0, r0, #48	; 0x30
    9c0e:	uxtb	r4, r4
    9c10:	it	ls
    9c12:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9c14:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9c16:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    9c1a:	cmp	r3, #0
    9c1c:	bne.n	9bfa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    9c1e:	adds	r2, r1, r5
    9c20:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9c22:	cbz	r5, 9c38 <ultoa+0x48>
    9c24:	adds	r3, #1
		t = buf[j];
    9c26:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    9c2a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9c2c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    9c2e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9c30:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9c32:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9c36:	blt.n	9c24 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    9c38:	mov	r0, r1
    9c3a:	pop	{r4, r5, r6, r7}
    9c3c:	bx	lr
    9c3e:	nop

00009c40 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9c40:	ldr	r0, [pc, #656]	; (9ed4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9c42:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c46:	ldr	r3, [pc, #656]	; (9ed8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9c48:	ldr	r2, [r0, #120]	; 0x78
    9c4a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    9c4e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9c50:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9c52:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9c54:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c58:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9c5c:	ldr	r4, [pc, #636]	; (9edc <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9c5e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9c62:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9c64:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9c68:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9c6a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9c6c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c70:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9c74:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9c78:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9c7c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9c80:	ldrh.w	r0, [r3, #392]	; 0x188
    9c84:	uxth	r0, r0
    9c86:	orr.w	r0, r0, #240	; 0xf0
    9c8a:	strh.w	r0, [r3, #392]	; 0x188
    9c8e:	add.w	r0, r1, r1, lsl #1
    9c92:	ldr	r3, [pc, #580]	; (9ed8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    9c94:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9c96:	movs	r5, #0
    9c98:	lsls	r0, r0, #5
    9c9a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9c9c:	cmp	r1, #4
    9c9e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9ca0:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ca4:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    9ca6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9ca8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9caa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9cac:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9cae:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9cb0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9cb2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9cb4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9cb6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9cb8:	bne.n	9c8e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cba:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9cbe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9cc2:	ldr	r3, [pc, #540]	; (9ee0 <pwm_init+0x2a0>)
    9cc4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cc8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9cca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9ccc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9cd0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cd2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9cd6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cda:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9cde:	ldrh.w	r0, [r4, #392]	; 0x188
    9ce2:	uxth	r0, r0
    9ce4:	orr.w	r0, r0, #3840	; 0xf00
    9ce8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9cec:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9cf0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9cf4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9cf8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9cfc:	ldrh.w	r0, [r3, #392]	; 0x188
    9d00:	uxth	r0, r0
    9d02:	orr.w	r0, r0, #240	; 0xf0
    9d06:	strh.w	r0, [r3, #392]	; 0x188
    9d0a:	add.w	r0, r1, r1, lsl #1
    9d0e:	ldr	r3, [pc, #464]	; (9ee0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9d10:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9d12:	movs	r5, #0
    9d14:	lsls	r0, r0, #5
    9d16:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d18:	cmp	r1, #4
    9d1a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d1c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d1e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9d22:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9d24:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9d26:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9d28:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9d2a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9d2c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9d2e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9d30:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9d32:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d34:	bne.n	9d0a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9d36:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9d3a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d3e:	ldr	r3, [pc, #420]	; (9ee4 <pwm_init+0x2a4>)
    9d40:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9d44:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d46:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d48:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9d4c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9d4e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d52:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9d56:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9d5a:	ldrh.w	r0, [r4, #392]	; 0x188
    9d5e:	uxth	r0, r0
    9d60:	orr.w	r0, r0, #3840	; 0xf00
    9d64:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d68:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9d6c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9d70:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9d74:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9d78:	ldrh.w	r0, [r3, #392]	; 0x188
    9d7c:	uxth	r0, r0
    9d7e:	orr.w	r0, r0, #240	; 0xf0
    9d82:	strh.w	r0, [r3, #392]	; 0x188
    9d86:	add.w	r0, r1, r1, lsl #1
    9d8a:	ldr	r3, [pc, #344]	; (9ee4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9d8c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9d8e:	movs	r5, #0
    9d90:	lsls	r0, r0, #5
    9d92:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d94:	cmp	r1, #4
    9d96:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d98:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d9a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9d9e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9da0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9da2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9da4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9da6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9da8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9daa:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9dac:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9dae:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9db0:	bne.n	9d86 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9db2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9db6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9dba:	ldr	r3, [pc, #300]	; (9ee8 <pwm_init+0x2a8>)
    9dbc:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9dc0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9dc2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9dc4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9dc8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9dca:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9dce:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9dd2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9dd6:	ldrh.w	r0, [r4, #392]	; 0x188
    9dda:	uxth	r0, r0
    9ddc:	orr.w	r0, r0, #3840	; 0xf00
    9de0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9de4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9de8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9dec:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9df0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9df4:	ldrh.w	r0, [r3, #392]	; 0x188
    9df8:	uxth	r0, r0
    9dfa:	orr.w	r0, r0, #240	; 0xf0
    9dfe:	strh.w	r0, [r3, #392]	; 0x188
    9e02:	add.w	r0, r1, r1, lsl #1
    9e06:	ldr	r3, [pc, #224]	; (9ee8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9e08:	adds	r1, #1
    9e0a:	lsls	r0, r0, #5
    9e0c:	mov	r4, r3
    9e0e:	cmp	r1, #4
    9e10:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e12:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e14:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9e18:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9e1a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9e1c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9e1e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9e20:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9e22:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9e24:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9e26:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9e28:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e2a:	bne.n	9e02 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e2c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9e30:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e32:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9e34:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e38:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9e3a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9e3e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9e40:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e44:	orrs	r3, r7
    9e46:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9e4a:	ldrh.w	r3, [r4, #392]	; 0x188
    9e4e:	uxth	r3, r3
    9e50:	orr.w	r3, r3, #3840	; 0xf00
    9e54:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9e58:	lsls	r0, r2, #5
    9e5a:	ldr	r3, [pc, #144]	; (9eec <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e5c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9e5e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e60:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9e62:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9e64:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9e66:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9e68:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9e6a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9e6e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9e70:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9e72:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e74:	bne.n	9e58 <pwm_init+0x218>
    9e76:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9e78:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9e7a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9e7e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9e82:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9e84:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9e88:	lsls	r0, r2, #5
    9e8a:	ldr	r3, [pc, #100]	; (9ef0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e8c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9e8e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9e90:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9e92:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9e94:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9e96:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9e98:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9e9a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9e9c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9e9e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9ea0:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ea2:	bne.n	9e88 <pwm_init+0x248>
    9ea4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9ea6:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9ea8:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9eac:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9eb0:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9eb2:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9eb6:	lsls	r0, r2, #5
    9eb8:	ldr	r3, [pc, #56]	; (9ef4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9eba:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9ebc:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ebe:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9ec0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9ec2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9ec4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9ec6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9ec8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9eca:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9ecc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9ece:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ed0:	bne.n	9eb6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9ed2:	pop	{r4, r5, r6, r7, pc}
    9ed4:	.word	0x400fc000
    9ed8:	.word	0x403dc000
    9edc:	.word	0xfc030000
    9ee0:	.word	0x403e0000
    9ee4:	.word	0x403e4000
    9ee8:	.word	0x403e8000
    9eec:	.word	0x401dc000
    9ef0:	.word	0x401e0000
    9ef4:	.word	0x401e4000

00009ef8 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    9ef8:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    9efa:	ldr	r3, [pc, #28]	; (9f18 <HardwareSerial::processSerialEvents()+0x20>)
    9efc:	ldrb	r4, [r3, #0]
    9efe:	cbz	r4, 9f14 <HardwareSerial::processSerialEvents()+0x1c>
    9f00:	ldr	r5, [pc, #24]	; (9f1c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    9f02:	ldr.w	r3, [r5, #4]!
    9f06:	cmp	r3, #0
    9f08:	beq.n	9f02 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    9f0a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    9f0c:	subs	r3, r4, #1
    9f0e:	ands.w	r4, r3, #255	; 0xff
    9f12:	bne.n	9f02 <HardwareSerial::processSerialEvents()+0xa>
    9f14:	pop	{r3, r4, r5, pc}
    9f16:	nop
    9f18:	.word	0x2000c0cc
    9f1c:	.word	0x2000c0ac

00009f20 <__aeabi_atexit>:
    9f20:	mov	r3, r1
    9f22:	mov	r1, r0
    9f24:	mov	r0, r3
    9f26:	b.w	9f9c <__cxa_atexit>
    9f2a:	nop

00009f2c <calloc>:
    9f2c:	ldr	r3, [pc, #8]	; (9f38 <calloc+0xc>)
    9f2e:	mov	r2, r1
    9f30:	mov	r1, r0
    9f32:	ldr	r0, [r3, #0]
    9f34:	b.w	9f3c <_calloc_r>
    9f38:	.word	0x200010e0

00009f3c <_calloc_r>:
    9f3c:	push	{r4, lr}
    9f3e:	mul.w	r1, r2, r1
    9f42:	bl	a024 <_malloc_r>
    9f46:	mov	r4, r0
    9f48:	cbz	r0, 9f82 <_calloc_r+0x46>
    9f4a:	ldr.w	r2, [r0, #-4]
    9f4e:	bic.w	r2, r2, #3
    9f52:	subs	r2, #4
    9f54:	cmp	r2, #36	; 0x24
    9f56:	bhi.n	9f8a <_calloc_r+0x4e>
    9f58:	cmp	r2, #19
    9f5a:	bls.n	9f86 <_calloc_r+0x4a>
    9f5c:	movs	r3, #0
    9f5e:	cmp	r2, #27
    9f60:	str	r3, [r0, #0]
    9f62:	str	r3, [r0, #4]
    9f64:	bls.n	9f94 <_calloc_r+0x58>
    9f66:	cmp	r2, #36	; 0x24
    9f68:	str	r3, [r0, #8]
    9f6a:	str	r3, [r0, #12]
    9f6c:	iteee	ne
    9f6e:	addne.w	r2, r0, #16
    9f72:	streq	r3, [r0, #16]
    9f74:	streq	r3, [r0, #20]
    9f76:	addeq.w	r2, r0, #24
    9f7a:	movs	r3, #0
    9f7c:	str	r3, [r2, #0]
    9f7e:	str	r3, [r2, #4]
    9f80:	str	r3, [r2, #8]
    9f82:	mov	r0, r4
    9f84:	pop	{r4, pc}
    9f86:	mov	r2, r0
    9f88:	b.n	9f7a <_calloc_r+0x3e>
    9f8a:	movs	r1, #0
    9f8c:	bl	a594 <memset>
    9f90:	mov	r0, r4
    9f92:	pop	{r4, pc}
    9f94:	add.w	r2, r0, #8
    9f98:	b.n	9f7a <_calloc_r+0x3e>
    9f9a:	nop

00009f9c <__cxa_atexit>:
    9f9c:	mov	r3, r2
    9f9e:	mov	r2, r1
    9fa0:	mov	r1, r0
    9fa2:	movs	r0, #2
    9fa4:	b.w	a65c <__register_exitproc>

00009fa8 <__errno>:
    9fa8:	ldr	r3, [pc, #4]	; (9fb0 <__errno+0x8>)
    9faa:	ldr	r0, [r3, #0]
    9fac:	bx	lr
    9fae:	nop
    9fb0:	.word	0x200010e0

00009fb4 <__libc_init_array>:
    9fb4:	push	{r4, r5, r6, lr}
    9fb6:	ldr	r6, [pc, #60]	; (9ff4 <__libc_init_array+0x40>)
    9fb8:	ldr	r5, [pc, #60]	; (9ff8 <__libc_init_array+0x44>)
    9fba:	subs	r6, r6, r5
    9fbc:	asrs	r6, r6, #2
    9fbe:	it	ne
    9fc0:	movne	r4, #0
    9fc2:	beq.n	9fd0 <__libc_init_array+0x1c>
    9fc4:	adds	r4, #1
    9fc6:	ldr.w	r3, [r5], #4
    9fca:	blx	r3
    9fcc:	cmp	r6, r4
    9fce:	bne.n	9fc4 <__libc_init_array+0x10>
    9fd0:	ldr	r6, [pc, #40]	; (9ffc <__libc_init_array+0x48>)
    9fd2:	ldr	r5, [pc, #44]	; (a000 <__libc_init_array+0x4c>)
    9fd4:	subs	r6, r6, r5
    9fd6:	bl	a970 <___init_veneer>
    9fda:	asrs	r6, r6, #2
    9fdc:	it	ne
    9fde:	movne	r4, #0
    9fe0:	beq.n	9ff0 <__libc_init_array+0x3c>
    9fe2:	adds	r4, #1
    9fe4:	ldr.w	r3, [r5], #4
    9fe8:	blx	r3
    9fea:	cmp	r6, r4
    9fec:	bne.n	9fe2 <__libc_init_array+0x2e>
    9fee:	pop	{r4, r5, r6, pc}
    9ff0:	pop	{r4, r5, r6, pc}
    9ff2:	nop
    9ff4:	.word	0x60001600
    9ff8:	.word	0x60001600
    9ffc:	.word	0x6000160c
    a000:	.word	0x60001600

0000a004 <malloc>:
    a004:	ldr	r3, [pc, #8]	; (a010 <malloc+0xc>)
    a006:	mov	r1, r0
    a008:	ldr	r0, [r3, #0]
    a00a:	b.w	a024 <_malloc_r>
    a00e:	nop
    a010:	.word	0x200010e0

0000a014 <free>:
    a014:	ldr	r3, [pc, #8]	; (a020 <free+0xc>)
    a016:	mov	r1, r0
    a018:	ldr	r0, [r3, #0]
    a01a:	b.w	a79c <_free_r>
    a01e:	nop
    a020:	.word	0x200010e0

0000a024 <_malloc_r>:
    a024:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a028:	add.w	r5, r1, #11
    a02c:	cmp	r5, #22
    a02e:	sub	sp, #12
    a030:	mov	r6, r0
    a032:	bls.w	a174 <_malloc_r+0x150>
    a036:	bics.w	r5, r5, #7
    a03a:	bmi.w	a1bc <_malloc_r+0x198>
    a03e:	cmp	r1, r5
    a040:	bhi.w	a1bc <_malloc_r+0x198>
    a044:	bl	a630 <__malloc_lock>
    a048:	cmp.w	r5, #504	; 0x1f8
    a04c:	bcc.w	a588 <_malloc_r+0x564>
    a050:	lsrs	r3, r5, #9
    a052:	beq.w	a1ca <_malloc_r+0x1a6>
    a056:	cmp	r3, #4
    a058:	bhi.w	a362 <_malloc_r+0x33e>
    a05c:	lsrs	r0, r5, #6
    a05e:	add.w	lr, r0, #57	; 0x39
    a062:	mov.w	r3, lr, lsl #1
    a066:	adds	r0, #56	; 0x38
    a068:	ldr	r7, [pc, #784]	; (a37c <_malloc_r+0x358>)
    a06a:	add.w	r3, r7, r3, lsl #2
    a06e:	sub.w	r1, r3, #8
    a072:	ldr	r4, [r3, #4]
    a074:	cmp	r1, r4
    a076:	bne.n	a088 <_malloc_r+0x64>
    a078:	b.n	a1d4 <_malloc_r+0x1b0>
    a07a:	cmp	r2, #0
    a07c:	bge.w	a1d8 <_malloc_r+0x1b4>
    a080:	ldr	r4, [r4, #12]
    a082:	cmp	r1, r4
    a084:	beq.w	a1d4 <_malloc_r+0x1b0>
    a088:	ldr	r3, [r4, #4]
    a08a:	bic.w	r3, r3, #3
    a08e:	subs	r2, r3, r5
    a090:	cmp	r2, #15
    a092:	ble.n	a07a <_malloc_r+0x56>
    a094:	ldr	r1, [pc, #740]	; (a37c <_malloc_r+0x358>)
    a096:	ldr	r4, [r7, #16]
    a098:	add.w	lr, r1, #8
    a09c:	cmp	r4, lr
    a09e:	beq.w	a408 <_malloc_r+0x3e4>
    a0a2:	ldr	r3, [r4, #4]
    a0a4:	bic.w	r3, r3, #3
    a0a8:	subs	r2, r3, r5
    a0aa:	cmp	r2, #15
    a0ac:	bgt.w	a3e2 <_malloc_r+0x3be>
    a0b0:	cmp	r2, #0
    a0b2:	str.w	lr, [r1, #20]
    a0b6:	str.w	lr, [r1, #16]
    a0ba:	bge.w	a1fa <_malloc_r+0x1d6>
    a0be:	cmp.w	r3, #512	; 0x200
    a0c2:	bcs.w	a394 <_malloc_r+0x370>
    a0c6:	lsrs	r3, r3, #3
    a0c8:	add.w	ip, r3, #1
    a0cc:	movs	r2, #1
    a0ce:	asrs	r3, r3, #2
    a0d0:	lsl.w	r3, r2, r3
    a0d4:	ldr	r2, [r1, #4]
    a0d6:	ldr.w	r8, [r1, ip, lsl #3]
    a0da:	str.w	r8, [r4, #8]
    a0de:	add.w	r9, r1, ip, lsl #3
    a0e2:	orrs	r2, r3
    a0e4:	sub.w	r3, r9, #8
    a0e8:	str	r3, [r4, #12]
    a0ea:	str	r2, [r1, #4]
    a0ec:	str.w	r4, [r1, ip, lsl #3]
    a0f0:	str.w	r4, [r8, #12]
    a0f4:	asrs	r3, r0, #2
    a0f6:	movs	r4, #1
    a0f8:	lsls	r4, r3
    a0fa:	cmp	r4, r2
    a0fc:	bhi.w	a214 <_malloc_r+0x1f0>
    a100:	tst	r4, r2
    a102:	bne.n	a112 <_malloc_r+0xee>
    a104:	bic.w	r0, r0, #3
    a108:	lsls	r4, r4, #1
    a10a:	tst	r4, r2
    a10c:	add.w	r0, r0, #4
    a110:	beq.n	a108 <_malloc_r+0xe4>
    a112:	add.w	r9, r7, r0, lsl #3
    a116:	mov	ip, r9
    a118:	mov	r8, r0
    a11a:	ldr.w	r1, [ip, #12]
    a11e:	cmp	ip, r1
    a120:	bne.n	a132 <_malloc_r+0x10e>
    a122:	b.n	a40c <_malloc_r+0x3e8>
    a124:	cmp	r2, #0
    a126:	bge.w	a42c <_malloc_r+0x408>
    a12a:	ldr	r1, [r1, #12]
    a12c:	cmp	ip, r1
    a12e:	beq.w	a40c <_malloc_r+0x3e8>
    a132:	ldr	r3, [r1, #4]
    a134:	bic.w	r3, r3, #3
    a138:	subs	r2, r3, r5
    a13a:	cmp	r2, #15
    a13c:	ble.n	a124 <_malloc_r+0x100>
    a13e:	mov	r4, r1
    a140:	ldr.w	ip, [r1, #12]
    a144:	ldr.w	r8, [r4, #8]!
    a148:	adds	r3, r1, r5
    a14a:	orr.w	r5, r5, #1
    a14e:	str	r5, [r1, #4]
    a150:	orr.w	r1, r2, #1
    a154:	str.w	ip, [r8, #12]
    a158:	mov	r0, r6
    a15a:	str.w	r8, [ip, #8]
    a15e:	str	r3, [r7, #20]
    a160:	str	r3, [r7, #16]
    a162:	str.w	lr, [r3, #12]
    a166:	str.w	lr, [r3, #8]
    a16a:	str	r1, [r3, #4]
    a16c:	str	r2, [r3, r2]
    a16e:	bl	a634 <__malloc_unlock>
    a172:	b.n	a1b4 <_malloc_r+0x190>
    a174:	cmp	r1, #16
    a176:	bhi.n	a1bc <_malloc_r+0x198>
    a178:	bl	a630 <__malloc_lock>
    a17c:	movs	r5, #16
    a17e:	movs	r3, #6
    a180:	movs	r0, #2
    a182:	ldr	r7, [pc, #504]	; (a37c <_malloc_r+0x358>)
    a184:	add.w	r3, r7, r3, lsl #2
    a188:	sub.w	r2, r3, #8
    a18c:	ldr	r4, [r3, #4]
    a18e:	cmp	r4, r2
    a190:	beq.w	a41e <_malloc_r+0x3fa>
    a194:	ldr	r3, [r4, #4]
    a196:	ldr	r1, [r4, #12]
    a198:	ldr	r5, [r4, #8]
    a19a:	bic.w	r3, r3, #3
    a19e:	add	r3, r4
    a1a0:	mov	r0, r6
    a1a2:	ldr	r2, [r3, #4]
    a1a4:	str	r1, [r5, #12]
    a1a6:	orr.w	r2, r2, #1
    a1aa:	str	r5, [r1, #8]
    a1ac:	str	r2, [r3, #4]
    a1ae:	bl	a634 <__malloc_unlock>
    a1b2:	adds	r4, #8
    a1b4:	mov	r0, r4
    a1b6:	add	sp, #12
    a1b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1bc:	movs	r4, #0
    a1be:	movs	r3, #12
    a1c0:	mov	r0, r4
    a1c2:	str	r3, [r6, #0]
    a1c4:	add	sp, #12
    a1c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1ca:	movs	r3, #128	; 0x80
    a1cc:	mov.w	lr, #64	; 0x40
    a1d0:	movs	r0, #63	; 0x3f
    a1d2:	b.n	a068 <_malloc_r+0x44>
    a1d4:	mov	r0, lr
    a1d6:	b.n	a094 <_malloc_r+0x70>
    a1d8:	add	r3, r4
    a1da:	ldr	r1, [r4, #12]
    a1dc:	ldr	r2, [r3, #4]
    a1de:	ldr	r5, [r4, #8]
    a1e0:	orr.w	r2, r2, #1
    a1e4:	str	r1, [r5, #12]
    a1e6:	mov	r0, r6
    a1e8:	str	r5, [r1, #8]
    a1ea:	str	r2, [r3, #4]
    a1ec:	bl	a634 <__malloc_unlock>
    a1f0:	adds	r4, #8
    a1f2:	mov	r0, r4
    a1f4:	add	sp, #12
    a1f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1fa:	add	r3, r4
    a1fc:	mov	r0, r6
    a1fe:	ldr	r2, [r3, #4]
    a200:	orr.w	r2, r2, #1
    a204:	str	r2, [r3, #4]
    a206:	bl	a634 <__malloc_unlock>
    a20a:	adds	r4, #8
    a20c:	mov	r0, r4
    a20e:	add	sp, #12
    a210:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a214:	ldr	r4, [r7, #8]
    a216:	ldr	r3, [r4, #4]
    a218:	bic.w	r8, r3, #3
    a21c:	cmp	r8, r5
    a21e:	bcc.n	a22a <_malloc_r+0x206>
    a220:	rsb	r3, r5, r8
    a224:	cmp	r3, #15
    a226:	bgt.w	a342 <_malloc_r+0x31e>
    a22a:	ldr	r3, [pc, #340]	; (a380 <_malloc_r+0x35c>)
    a22c:	ldr.w	r9, [pc, #352]	; a390 <_malloc_r+0x36c>
    a230:	ldr	r2, [r3, #0]
    a232:	ldr.w	r3, [r9]
    a236:	adds	r3, #1
    a238:	add	r2, r5
    a23a:	add.w	sl, r4, r8
    a23e:	beq.w	a502 <_malloc_r+0x4de>
    a242:	add.w	r2, r2, #4096	; 0x1000
    a246:	adds	r2, #15
    a248:	bic.w	r2, r2, #4080	; 0xff0
    a24c:	bic.w	r2, r2, #15
    a250:	mov	r1, r2
    a252:	mov	r0, r6
    a254:	str	r2, [sp, #4]
    a256:	bl	a638 <_sbrk_r>
    a25a:	cmp.w	r0, #4294967295
    a25e:	mov	fp, r0
    a260:	ldr	r2, [sp, #4]
    a262:	beq.w	a516 <_malloc_r+0x4f2>
    a266:	cmp	sl, r0
    a268:	bhi.w	a464 <_malloc_r+0x440>
    a26c:	ldr	r3, [pc, #276]	; (a384 <_malloc_r+0x360>)
    a26e:	ldr	r1, [r3, #0]
    a270:	cmp	sl, fp
    a272:	add	r1, r2
    a274:	str	r1, [r3, #0]
    a276:	beq.w	a520 <_malloc_r+0x4fc>
    a27a:	ldr.w	r0, [r9]
    a27e:	ldr.w	lr, [pc, #272]	; a390 <_malloc_r+0x36c>
    a282:	adds	r0, #1
    a284:	ittet	ne
    a286:	rsbne	sl, sl, fp
    a28a:	addne	r1, sl
    a28c:	streq.w	fp, [lr]
    a290:	strne	r1, [r3, #0]
    a292:	ands.w	r1, fp, #7
    a296:	beq.w	a4c8 <_malloc_r+0x4a4>
    a29a:	rsb	r0, r1, #8
    a29e:	rsb	r1, r1, #4096	; 0x1000
    a2a2:	add	fp, r0
    a2a4:	adds	r1, #8
    a2a6:	add	r2, fp
    a2a8:	ubfx	r2, r2, #0, #12
    a2ac:	rsb	r9, r2, r1
    a2b0:	mov	r1, r9
    a2b2:	mov	r0, r6
    a2b4:	str	r3, [sp, #4]
    a2b6:	bl	a638 <_sbrk_r>
    a2ba:	adds	r3, r0, #1
    a2bc:	ldr	r3, [sp, #4]
    a2be:	beq.w	a540 <_malloc_r+0x51c>
    a2c2:	rsb	r2, fp, r0
    a2c6:	add	r2, r9
    a2c8:	orr.w	r2, r2, #1
    a2cc:	ldr	r1, [r3, #0]
    a2ce:	str.w	fp, [r7, #8]
    a2d2:	add	r1, r9
    a2d4:	cmp	r4, r7
    a2d6:	str.w	r2, [fp, #4]
    a2da:	str	r1, [r3, #0]
    a2dc:	ldr.w	r9, [pc, #164]	; a384 <_malloc_r+0x360>
    a2e0:	beq.n	a310 <_malloc_r+0x2ec>
    a2e2:	cmp.w	r8, #15
    a2e6:	bls.w	a4e4 <_malloc_r+0x4c0>
    a2ea:	ldr	r2, [r4, #4]
    a2ec:	sub.w	r3, r8, #12
    a2f0:	bic.w	r3, r3, #7
    a2f4:	adds	r0, r4, r3
    a2f6:	and.w	r2, r2, #1
    a2fa:	mov.w	lr, #5
    a2fe:	orrs	r2, r3
    a300:	cmp	r3, #15
    a302:	str	r2, [r4, #4]
    a304:	str.w	lr, [r0, #4]
    a308:	str.w	lr, [r0, #8]
    a30c:	bhi.w	a548 <_malloc_r+0x524>
    a310:	ldr	r3, [pc, #116]	; (a388 <_malloc_r+0x364>)
    a312:	ldr	r4, [r7, #8]
    a314:	ldr	r2, [r3, #0]
    a316:	cmp	r1, r2
    a318:	it	hi
    a31a:	strhi	r1, [r3, #0]
    a31c:	ldr	r3, [pc, #108]	; (a38c <_malloc_r+0x368>)
    a31e:	ldr	r2, [r3, #0]
    a320:	cmp	r1, r2
    a322:	ldr	r2, [r4, #4]
    a324:	it	hi
    a326:	strhi	r1, [r3, #0]
    a328:	bic.w	r2, r2, #3
    a32c:	cmp	r5, r2
    a32e:	sub.w	r3, r2, r5
    a332:	bhi.n	a338 <_malloc_r+0x314>
    a334:	cmp	r3, #15
    a336:	bgt.n	a342 <_malloc_r+0x31e>
    a338:	mov	r0, r6
    a33a:	bl	a634 <__malloc_unlock>
    a33e:	movs	r4, #0
    a340:	b.n	a1b4 <_malloc_r+0x190>
    a342:	adds	r2, r4, r5
    a344:	orr.w	r3, r3, #1
    a348:	orr.w	r5, r5, #1
    a34c:	str	r5, [r4, #4]
    a34e:	mov	r0, r6
    a350:	str	r2, [r7, #8]
    a352:	str	r3, [r2, #4]
    a354:	bl	a634 <__malloc_unlock>
    a358:	adds	r4, #8
    a35a:	mov	r0, r4
    a35c:	add	sp, #12
    a35e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a362:	cmp	r3, #20
    a364:	bls.n	a44a <_malloc_r+0x426>
    a366:	cmp	r3, #84	; 0x54
    a368:	bhi.w	a4b4 <_malloc_r+0x490>
    a36c:	lsrs	r0, r5, #12
    a36e:	add.w	lr, r0, #111	; 0x6f
    a372:	mov.w	r3, lr, lsl #1
    a376:	adds	r0, #110	; 0x6e
    a378:	b.n	a068 <_malloc_r+0x44>
    a37a:	nop
    a37c:	.word	0x200010e4
    a380:	.word	0x2000c0d8
    a384:	.word	0x2000c0dc
    a388:	.word	0x2000c0d4
    a38c:	.word	0x2000c0d0
    a390:	.word	0x200014f0
    a394:	lsrs	r2, r3, #9
    a396:	cmp	r2, #4
    a398:	bls.n	a458 <_malloc_r+0x434>
    a39a:	cmp	r2, #20
    a39c:	bhi.w	a506 <_malloc_r+0x4e2>
    a3a0:	add.w	r1, r2, #92	; 0x5c
    a3a4:	lsls	r1, r1, #1
    a3a6:	adds	r2, #91	; 0x5b
    a3a8:	add.w	ip, r7, r1, lsl #2
    a3ac:	ldr.w	r1, [r7, r1, lsl #2]
    a3b0:	ldr.w	r8, [pc, #476]	; a590 <_malloc_r+0x56c>
    a3b4:	sub.w	ip, ip, #8
    a3b8:	cmp	ip, r1
    a3ba:	beq.w	a4ce <_malloc_r+0x4aa>
    a3be:	ldr	r2, [r1, #4]
    a3c0:	bic.w	r2, r2, #3
    a3c4:	cmp	r3, r2
    a3c6:	bcs.n	a3ce <_malloc_r+0x3aa>
    a3c8:	ldr	r1, [r1, #8]
    a3ca:	cmp	ip, r1
    a3cc:	bne.n	a3be <_malloc_r+0x39a>
    a3ce:	ldr.w	ip, [r1, #12]
    a3d2:	ldr	r2, [r7, #4]
    a3d4:	str.w	ip, [r4, #12]
    a3d8:	str	r1, [r4, #8]
    a3da:	str.w	r4, [ip, #8]
    a3de:	str	r4, [r1, #12]
    a3e0:	b.n	a0f4 <_malloc_r+0xd0>
    a3e2:	adds	r3, r4, r5
    a3e4:	orr.w	r7, r2, #1
    a3e8:	orr.w	r5, r5, #1
    a3ec:	str	r5, [r4, #4]
    a3ee:	mov	r0, r6
    a3f0:	str	r3, [r1, #20]
    a3f2:	str	r3, [r1, #16]
    a3f4:	str.w	lr, [r3, #12]
    a3f8:	str.w	lr, [r3, #8]
    a3fc:	str	r7, [r3, #4]
    a3fe:	str	r2, [r3, r2]
    a400:	adds	r4, #8
    a402:	bl	a634 <__malloc_unlock>
    a406:	b.n	a1b4 <_malloc_r+0x190>
    a408:	ldr	r2, [r1, #4]
    a40a:	b.n	a0f4 <_malloc_r+0xd0>
    a40c:	add.w	r8, r8, #1
    a410:	tst.w	r8, #3
    a414:	add.w	ip, ip, #8
    a418:	bne.w	a11a <_malloc_r+0xf6>
    a41c:	b.n	a480 <_malloc_r+0x45c>
    a41e:	ldr	r4, [r3, #12]
    a420:	cmp	r3, r4
    a422:	it	eq
    a424:	addeq	r0, #2
    a426:	beq.w	a094 <_malloc_r+0x70>
    a42a:	b.n	a194 <_malloc_r+0x170>
    a42c:	add	r3, r1
    a42e:	mov	r4, r1
    a430:	ldr	r2, [r3, #4]
    a432:	ldr	r1, [r1, #12]
    a434:	ldr.w	r5, [r4, #8]!
    a438:	orr.w	r2, r2, #1
    a43c:	str	r2, [r3, #4]
    a43e:	mov	r0, r6
    a440:	str	r1, [r5, #12]
    a442:	str	r5, [r1, #8]
    a444:	bl	a634 <__malloc_unlock>
    a448:	b.n	a1b4 <_malloc_r+0x190>
    a44a:	add.w	lr, r3, #92	; 0x5c
    a44e:	add.w	r0, r3, #91	; 0x5b
    a452:	mov.w	r3, lr, lsl #1
    a456:	b.n	a068 <_malloc_r+0x44>
    a458:	lsrs	r2, r3, #6
    a45a:	add.w	r1, r2, #57	; 0x39
    a45e:	lsls	r1, r1, #1
    a460:	adds	r2, #56	; 0x38
    a462:	b.n	a3a8 <_malloc_r+0x384>
    a464:	cmp	r4, r7
    a466:	ldr	r3, [pc, #296]	; (a590 <_malloc_r+0x56c>)
    a468:	beq.w	a26c <_malloc_r+0x248>
    a46c:	ldr	r4, [r3, #8]
    a46e:	ldr	r2, [r4, #4]
    a470:	bic.w	r2, r2, #3
    a474:	b.n	a32c <_malloc_r+0x308>
    a476:	ldr.w	r3, [r9], #-8
    a47a:	cmp	r9, r3
    a47c:	bne.w	a584 <_malloc_r+0x560>
    a480:	tst.w	r0, #3
    a484:	add.w	r0, r0, #4294967295
    a488:	bne.n	a476 <_malloc_r+0x452>
    a48a:	ldr	r3, [r7, #4]
    a48c:	bic.w	r3, r3, r4
    a490:	str	r3, [r7, #4]
    a492:	lsls	r4, r4, #1
    a494:	cmp	r4, r3
    a496:	bhi.w	a214 <_malloc_r+0x1f0>
    a49a:	cmp	r4, #0
    a49c:	beq.w	a214 <_malloc_r+0x1f0>
    a4a0:	tst	r4, r3
    a4a2:	mov	r0, r8
    a4a4:	bne.w	a112 <_malloc_r+0xee>
    a4a8:	lsls	r4, r4, #1
    a4aa:	tst	r4, r3
    a4ac:	add.w	r0, r0, #4
    a4b0:	beq.n	a4a8 <_malloc_r+0x484>
    a4b2:	b.n	a112 <_malloc_r+0xee>
    a4b4:	cmp.w	r3, #340	; 0x154
    a4b8:	bhi.n	a4ec <_malloc_r+0x4c8>
    a4ba:	lsrs	r0, r5, #15
    a4bc:	add.w	lr, r0, #120	; 0x78
    a4c0:	mov.w	r3, lr, lsl #1
    a4c4:	adds	r0, #119	; 0x77
    a4c6:	b.n	a068 <_malloc_r+0x44>
    a4c8:	mov.w	r1, #4096	; 0x1000
    a4cc:	b.n	a2a6 <_malloc_r+0x282>
    a4ce:	movs	r1, #1
    a4d0:	ldr.w	r3, [r8, #4]
    a4d4:	asrs	r2, r2, #2
    a4d6:	lsl.w	r2, r1, r2
    a4da:	orrs	r2, r3
    a4dc:	str.w	r2, [r8, #4]
    a4e0:	mov	r1, ip
    a4e2:	b.n	a3d4 <_malloc_r+0x3b0>
    a4e4:	movs	r3, #1
    a4e6:	str.w	r3, [fp, #4]
    a4ea:	b.n	a338 <_malloc_r+0x314>
    a4ec:	movw	r2, #1364	; 0x554
    a4f0:	cmp	r3, r2
    a4f2:	bhi.n	a536 <_malloc_r+0x512>
    a4f4:	lsrs	r0, r5, #18
    a4f6:	add.w	lr, r0, #125	; 0x7d
    a4fa:	mov.w	r3, lr, lsl #1
    a4fe:	adds	r0, #124	; 0x7c
    a500:	b.n	a068 <_malloc_r+0x44>
    a502:	adds	r2, #16
    a504:	b.n	a250 <_malloc_r+0x22c>
    a506:	cmp	r2, #84	; 0x54
    a508:	bhi.n	a558 <_malloc_r+0x534>
    a50a:	lsrs	r2, r3, #12
    a50c:	add.w	r1, r2, #111	; 0x6f
    a510:	lsls	r1, r1, #1
    a512:	adds	r2, #110	; 0x6e
    a514:	b.n	a3a8 <_malloc_r+0x384>
    a516:	ldr	r4, [r7, #8]
    a518:	ldr	r2, [r4, #4]
    a51a:	bic.w	r2, r2, #3
    a51e:	b.n	a32c <_malloc_r+0x308>
    a520:	ubfx	r0, sl, #0, #12
    a524:	cmp	r0, #0
    a526:	bne.w	a27a <_malloc_r+0x256>
    a52a:	add	r2, r8
    a52c:	ldr	r3, [r7, #8]
    a52e:	orr.w	r2, r2, #1
    a532:	str	r2, [r3, #4]
    a534:	b.n	a310 <_malloc_r+0x2ec>
    a536:	movs	r3, #254	; 0xfe
    a538:	mov.w	lr, #127	; 0x7f
    a53c:	movs	r0, #126	; 0x7e
    a53e:	b.n	a068 <_malloc_r+0x44>
    a540:	movs	r2, #1
    a542:	mov.w	r9, #0
    a546:	b.n	a2cc <_malloc_r+0x2a8>
    a548:	add.w	r1, r4, #8
    a54c:	mov	r0, r6
    a54e:	bl	a79c <_free_r>
    a552:	ldr.w	r1, [r9]
    a556:	b.n	a310 <_malloc_r+0x2ec>
    a558:	cmp.w	r2, #340	; 0x154
    a55c:	bhi.n	a56a <_malloc_r+0x546>
    a55e:	lsrs	r2, r3, #15
    a560:	add.w	r1, r2, #120	; 0x78
    a564:	lsls	r1, r1, #1
    a566:	adds	r2, #119	; 0x77
    a568:	b.n	a3a8 <_malloc_r+0x384>
    a56a:	movw	r1, #1364	; 0x554
    a56e:	cmp	r2, r1
    a570:	bhi.n	a57e <_malloc_r+0x55a>
    a572:	lsrs	r2, r3, #18
    a574:	add.w	r1, r2, #125	; 0x7d
    a578:	lsls	r1, r1, #1
    a57a:	adds	r2, #124	; 0x7c
    a57c:	b.n	a3a8 <_malloc_r+0x384>
    a57e:	movs	r1, #254	; 0xfe
    a580:	movs	r2, #126	; 0x7e
    a582:	b.n	a3a8 <_malloc_r+0x384>
    a584:	ldr	r3, [r7, #4]
    a586:	b.n	a492 <_malloc_r+0x46e>
    a588:	lsrs	r0, r5, #3
    a58a:	adds	r3, r0, #1
    a58c:	lsls	r3, r3, #1
    a58e:	b.n	a182 <_malloc_r+0x15e>
    a590:	.word	0x200010e4

0000a594 <memset>:
    a594:	push	{r4, r5, r6}
    a596:	lsls	r4, r0, #30
    a598:	beq.n	a628 <memset+0x94>
    a59a:	subs	r4, r2, #1
    a59c:	cmp	r2, #0
    a59e:	beq.n	a624 <memset+0x90>
    a5a0:	uxtb	r5, r1
    a5a2:	mov	r3, r0
    a5a4:	b.n	a5ac <memset+0x18>
    a5a6:	subs	r2, r4, #1
    a5a8:	cbz	r4, a624 <memset+0x90>
    a5aa:	mov	r4, r2
    a5ac:	strb.w	r5, [r3], #1
    a5b0:	lsls	r2, r3, #30
    a5b2:	bne.n	a5a6 <memset+0x12>
    a5b4:	cmp	r4, #3
    a5b6:	bls.n	a616 <memset+0x82>
    a5b8:	uxtb	r5, r1
    a5ba:	orr.w	r5, r5, r5, lsl #8
    a5be:	cmp	r4, #15
    a5c0:	orr.w	r5, r5, r5, lsl #16
    a5c4:	bls.n	a5fa <memset+0x66>
    a5c6:	add.w	r2, r3, #16
    a5ca:	mov	r6, r4
    a5cc:	subs	r6, #16
    a5ce:	cmp	r6, #15
    a5d0:	str.w	r5, [r2, #-16]
    a5d4:	str.w	r5, [r2, #-12]
    a5d8:	str.w	r5, [r2, #-8]
    a5dc:	str.w	r5, [r2, #-4]
    a5e0:	add.w	r2, r2, #16
    a5e4:	bhi.n	a5cc <memset+0x38>
    a5e6:	sub.w	r2, r4, #16
    a5ea:	bic.w	r2, r2, #15
    a5ee:	and.w	r4, r4, #15
    a5f2:	adds	r2, #16
    a5f4:	cmp	r4, #3
    a5f6:	add	r3, r2
    a5f8:	bls.n	a616 <memset+0x82>
    a5fa:	mov	r6, r3
    a5fc:	mov	r2, r4
    a5fe:	subs	r2, #4
    a600:	cmp	r2, #3
    a602:	str.w	r5, [r6], #4
    a606:	bhi.n	a5fe <memset+0x6a>
    a608:	subs	r2, r4, #4
    a60a:	bic.w	r2, r2, #3
    a60e:	adds	r2, #4
    a610:	add	r3, r2
    a612:	and.w	r4, r4, #3
    a616:	cbz	r4, a624 <memset+0x90>
    a618:	uxtb	r1, r1
    a61a:	add	r4, r3
    a61c:	strb.w	r1, [r3], #1
    a620:	cmp	r3, r4
    a622:	bne.n	a61c <memset+0x88>
    a624:	pop	{r4, r5, r6}
    a626:	bx	lr
    a628:	mov	r4, r2
    a62a:	mov	r3, r0
    a62c:	b.n	a5b4 <memset+0x20>
    a62e:	nop

0000a630 <__malloc_lock>:
    a630:	bx	lr
    a632:	nop

0000a634 <__malloc_unlock>:
    a634:	bx	lr
    a636:	nop

0000a638 <_sbrk_r>:
    a638:	push	{r3, r4, r5, lr}
    a63a:	ldr	r4, [pc, #28]	; (a658 <_sbrk_r+0x20>)
    a63c:	movs	r3, #0
    a63e:	mov	r5, r0
    a640:	mov	r0, r1
    a642:	str	r3, [r4, #0]
    a644:	bl	9bc0 <_sbrk>
    a648:	adds	r3, r0, #1
    a64a:	beq.n	a64e <_sbrk_r+0x16>
    a64c:	pop	{r3, r4, r5, pc}
    a64e:	ldr	r3, [r4, #0]
    a650:	cmp	r3, #0
    a652:	beq.n	a64c <_sbrk_r+0x14>
    a654:	str	r3, [r5, #0]
    a656:	pop	{r3, r4, r5, pc}
    a658:	.word	0x2000e6c0

0000a65c <__register_exitproc>:
    a65c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a660:	ldr	r4, [pc, #148]	; (a6f8 <__register_exitproc+0x9c>)
    a662:	ldr	r5, [r4, #0]
    a664:	ldr.w	r4, [r5, #328]	; 0x148
    a668:	mov	r6, r0
    a66a:	mov	r8, r1
    a66c:	mov	sl, r2
    a66e:	mov	r9, r3
    a670:	cbz	r4, a6e4 <__register_exitproc+0x88>
    a672:	ldr	r0, [r4, #4]
    a674:	cmp	r0, #31
    a676:	bgt.n	a6a8 <__register_exitproc+0x4c>
    a678:	adds	r3, r0, #1
    a67a:	cbz	r6, a69a <__register_exitproc+0x3e>
    a67c:	add.w	r5, r4, r0, lsl #2
    a680:	movs	r2, #1
    a682:	str.w	sl, [r5, #136]	; 0x88
    a686:	ldr.w	r1, [r4, #392]	; 0x188
    a68a:	lsls	r2, r0
    a68c:	orrs	r1, r2
    a68e:	cmp	r6, #2
    a690:	str.w	r1, [r4, #392]	; 0x188
    a694:	str.w	r9, [r5, #264]	; 0x108
    a698:	beq.n	a6d8 <__register_exitproc+0x7c>
    a69a:	adds	r0, #2
    a69c:	str	r3, [r4, #4]
    a69e:	str.w	r8, [r4, r0, lsl #2]
    a6a2:	movs	r0, #0
    a6a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6a8:	ldr	r3, [pc, #80]	; (a6fc <__register_exitproc+0xa0>)
    a6aa:	cbz	r3, a6ee <__register_exitproc+0x92>
    a6ac:	mov.w	r0, #400	; 0x190
    a6b0:	bl	a004 <malloc>
    a6b4:	mov	r4, r0
    a6b6:	cbz	r0, a6ee <__register_exitproc+0x92>
    a6b8:	ldr.w	r3, [r5, #328]	; 0x148
    a6bc:	movs	r7, #0
    a6be:	stmia.w	r0, {r3, r7}
    a6c2:	str.w	r4, [r5, #328]	; 0x148
    a6c6:	mov	r0, r7
    a6c8:	movs	r3, #1
    a6ca:	str.w	r7, [r4, #392]	; 0x188
    a6ce:	str.w	r7, [r4, #396]	; 0x18c
    a6d2:	cmp	r6, #0
    a6d4:	beq.n	a69a <__register_exitproc+0x3e>
    a6d6:	b.n	a67c <__register_exitproc+0x20>
    a6d8:	ldr.w	r1, [r4, #396]	; 0x18c
    a6dc:	orrs	r2, r1
    a6de:	str.w	r2, [r4, #396]	; 0x18c
    a6e2:	b.n	a69a <__register_exitproc+0x3e>
    a6e4:	add.w	r4, r5, #332	; 0x14c
    a6e8:	str.w	r4, [r5, #328]	; 0x148
    a6ec:	b.n	a672 <__register_exitproc+0x16>
    a6ee:	mov.w	r0, #4294967295
    a6f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6f6:	nop
    a6f8:	.word	0x20000760
    a6fc:	.word	0x0000a005

0000a700 <_malloc_trim_r>:
    a700:	push	{r3, r4, r5, r6, r7, lr}
    a702:	ldr	r7, [pc, #140]	; (a790 <_malloc_trim_r+0x90>)
    a704:	mov	r4, r1
    a706:	mov	r6, r0
    a708:	bl	a630 <__malloc_lock>
    a70c:	ldr	r3, [r7, #8]
    a70e:	ldr	r5, [r3, #4]
    a710:	bic.w	r5, r5, #3
    a714:	subs	r1, r5, r4
    a716:	addw	r1, r1, #4079	; 0xfef
    a71a:	bic.w	r1, r1, #4080	; 0xff0
    a71e:	bic.w	r1, r1, #15
    a722:	sub.w	r4, r1, #4096	; 0x1000
    a726:	cmp.w	r4, #4096	; 0x1000
    a72a:	blt.n	a73c <_malloc_trim_r+0x3c>
    a72c:	movs	r1, #0
    a72e:	mov	r0, r6
    a730:	bl	a638 <_sbrk_r>
    a734:	ldr	r3, [r7, #8]
    a736:	add	r3, r5
    a738:	cmp	r0, r3
    a73a:	beq.n	a746 <_malloc_trim_r+0x46>
    a73c:	mov	r0, r6
    a73e:	bl	a634 <__malloc_unlock>
    a742:	movs	r0, #0
    a744:	pop	{r3, r4, r5, r6, r7, pc}
    a746:	negs	r1, r4
    a748:	mov	r0, r6
    a74a:	bl	a638 <_sbrk_r>
    a74e:	adds	r0, #1
    a750:	beq.n	a76e <_malloc_trim_r+0x6e>
    a752:	ldr	r3, [pc, #64]	; (a794 <_malloc_trim_r+0x94>)
    a754:	ldr	r2, [r7, #8]
    a756:	ldr	r1, [r3, #0]
    a758:	subs	r5, r5, r4
    a75a:	orr.w	r5, r5, #1
    a75e:	mov	r0, r6
    a760:	subs	r1, r1, r4
    a762:	str	r5, [r2, #4]
    a764:	str	r1, [r3, #0]
    a766:	bl	a634 <__malloc_unlock>
    a76a:	movs	r0, #1
    a76c:	pop	{r3, r4, r5, r6, r7, pc}
    a76e:	movs	r1, #0
    a770:	mov	r0, r6
    a772:	bl	a638 <_sbrk_r>
    a776:	ldr	r2, [r7, #8]
    a778:	subs	r3, r0, r2
    a77a:	cmp	r3, #15
    a77c:	ble.n	a73c <_malloc_trim_r+0x3c>
    a77e:	ldr	r4, [pc, #24]	; (a798 <_malloc_trim_r+0x98>)
    a780:	ldr	r1, [pc, #16]	; (a794 <_malloc_trim_r+0x94>)
    a782:	ldr	r4, [r4, #0]
    a784:	orr.w	r3, r3, #1
    a788:	subs	r0, r0, r4
    a78a:	str	r3, [r2, #4]
    a78c:	str	r0, [r1, #0]
    a78e:	b.n	a73c <_malloc_trim_r+0x3c>
    a790:	.word	0x200010e4
    a794:	.word	0x2000c0dc
    a798:	.word	0x200014f0

0000a79c <_free_r>:
    a79c:	cmp	r1, #0
    a79e:	beq.n	a82c <_free_r+0x90>
    a7a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7a4:	mov	r5, r1
    a7a6:	mov	r8, r0
    a7a8:	bl	a630 <__malloc_lock>
    a7ac:	ldr.w	r7, [r5, #-4]
    a7b0:	ldr	r1, [pc, #424]	; (a95c <_free_r+0x1c0>)
    a7b2:	bic.w	r3, r7, #1
    a7b6:	sub.w	r4, r5, #8
    a7ba:	adds	r2, r4, r3
    a7bc:	ldr	r6, [r1, #8]
    a7be:	ldr	r0, [r2, #4]
    a7c0:	cmp	r2, r6
    a7c2:	bic.w	r0, r0, #3
    a7c6:	beq.n	a88e <_free_r+0xf2>
    a7c8:	lsls	r6, r7, #31
    a7ca:	str	r0, [r2, #4]
    a7cc:	bmi.n	a7e6 <_free_r+0x4a>
    a7ce:	ldr.w	r7, [r5, #-8]
    a7d2:	subs	r4, r4, r7
    a7d4:	add.w	lr, r1, #8
    a7d8:	ldr	r5, [r4, #8]
    a7da:	cmp	r5, lr
    a7dc:	add	r3, r7
    a7de:	beq.n	a8c0 <_free_r+0x124>
    a7e0:	ldr	r7, [r4, #12]
    a7e2:	str	r7, [r5, #12]
    a7e4:	str	r5, [r7, #8]
    a7e6:	adds	r5, r2, r0
    a7e8:	ldr	r5, [r5, #4]
    a7ea:	lsls	r5, r5, #31
    a7ec:	bpl.n	a874 <_free_r+0xd8>
    a7ee:	orr.w	r2, r3, #1
    a7f2:	str	r2, [r4, #4]
    a7f4:	str	r3, [r4, r3]
    a7f6:	cmp.w	r3, #512	; 0x200
    a7fa:	bcs.n	a82e <_free_r+0x92>
    a7fc:	lsrs	r3, r3, #3
    a7fe:	adds	r2, r3, #1
    a800:	ldr	r5, [r1, #4]
    a802:	ldr.w	r7, [r1, r2, lsl #3]
    a806:	str	r7, [r4, #8]
    a808:	movs	r0, #1
    a80a:	asrs	r3, r3, #2
    a80c:	lsl.w	r3, r0, r3
    a810:	add.w	r0, r1, r2, lsl #3
    a814:	orrs	r5, r3
    a816:	subs	r0, #8
    a818:	str	r0, [r4, #12]
    a81a:	str	r5, [r1, #4]
    a81c:	str.w	r4, [r1, r2, lsl #3]
    a820:	str	r4, [r7, #12]
    a822:	mov	r0, r8
    a824:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a828:	b.w	a634 <__malloc_unlock>
    a82c:	bx	lr
    a82e:	lsrs	r2, r3, #9
    a830:	cmp	r2, #4
    a832:	bhi.n	a8dc <_free_r+0x140>
    a834:	lsrs	r2, r3, #6
    a836:	add.w	r7, r2, #57	; 0x39
    a83a:	lsls	r7, r7, #1
    a83c:	add.w	r5, r2, #56	; 0x38
    a840:	add.w	r0, r1, r7, lsl #2
    a844:	ldr.w	r2, [r1, r7, lsl #2]
    a848:	ldr	r1, [pc, #272]	; (a95c <_free_r+0x1c0>)
    a84a:	subs	r0, #8
    a84c:	cmp	r0, r2
    a84e:	beq.n	a8ec <_free_r+0x150>
    a850:	ldr	r1, [r2, #4]
    a852:	bic.w	r1, r1, #3
    a856:	cmp	r3, r1
    a858:	bcs.n	a860 <_free_r+0xc4>
    a85a:	ldr	r2, [r2, #8]
    a85c:	cmp	r0, r2
    a85e:	bne.n	a850 <_free_r+0xb4>
    a860:	ldr	r0, [r2, #12]
    a862:	str	r0, [r4, #12]
    a864:	str	r2, [r4, #8]
    a866:	str	r4, [r0, #8]
    a868:	str	r4, [r2, #12]
    a86a:	mov	r0, r8
    a86c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a870:	b.w	a634 <__malloc_unlock>
    a874:	ldr	r5, [r2, #8]
    a876:	ldr	r7, [pc, #232]	; (a960 <_free_r+0x1c4>)
    a878:	cmp	r5, r7
    a87a:	add	r3, r0
    a87c:	beq.n	a8fe <_free_r+0x162>
    a87e:	ldr	r0, [r2, #12]
    a880:	str	r0, [r5, #12]
    a882:	orr.w	r2, r3, #1
    a886:	str	r5, [r0, #8]
    a888:	str	r2, [r4, #4]
    a88a:	str	r3, [r4, r3]
    a88c:	b.n	a7f6 <_free_r+0x5a>
    a88e:	lsls	r7, r7, #31
    a890:	add	r3, r0
    a892:	bmi.n	a8a4 <_free_r+0x108>
    a894:	ldr.w	r2, [r5, #-8]
    a898:	subs	r4, r4, r2
    a89a:	add	r3, r2
    a89c:	ldr	r0, [r4, #8]
    a89e:	ldr	r2, [r4, #12]
    a8a0:	str	r2, [r0, #12]
    a8a2:	str	r0, [r2, #8]
    a8a4:	ldr	r2, [pc, #188]	; (a964 <_free_r+0x1c8>)
    a8a6:	ldr	r2, [r2, #0]
    a8a8:	orr.w	r0, r3, #1
    a8ac:	cmp	r3, r2
    a8ae:	str	r0, [r4, #4]
    a8b0:	str	r4, [r1, #8]
    a8b2:	bcc.n	a822 <_free_r+0x86>
    a8b4:	ldr	r3, [pc, #176]	; (a968 <_free_r+0x1cc>)
    a8b6:	mov	r0, r8
    a8b8:	ldr	r1, [r3, #0]
    a8ba:	bl	a700 <_malloc_trim_r>
    a8be:	b.n	a822 <_free_r+0x86>
    a8c0:	adds	r1, r2, r0
    a8c2:	ldr	r1, [r1, #4]
    a8c4:	lsls	r1, r1, #31
    a8c6:	bmi.n	a952 <_free_r+0x1b6>
    a8c8:	ldr	r1, [r2, #8]
    a8ca:	ldr	r2, [r2, #12]
    a8cc:	str	r2, [r1, #12]
    a8ce:	add	r3, r0
    a8d0:	orr.w	r0, r3, #1
    a8d4:	str	r1, [r2, #8]
    a8d6:	str	r0, [r4, #4]
    a8d8:	str	r3, [r4, r3]
    a8da:	b.n	a822 <_free_r+0x86>
    a8dc:	cmp	r2, #20
    a8de:	bhi.n	a910 <_free_r+0x174>
    a8e0:	add.w	r7, r2, #92	; 0x5c
    a8e4:	lsls	r7, r7, #1
    a8e6:	add.w	r5, r2, #91	; 0x5b
    a8ea:	b.n	a840 <_free_r+0xa4>
    a8ec:	asrs	r2, r5, #2
    a8ee:	ldr	r3, [r1, #4]
    a8f0:	movs	r5, #1
    a8f2:	lsl.w	r2, r5, r2
    a8f6:	orrs	r3, r2
    a8f8:	str	r3, [r1, #4]
    a8fa:	mov	r2, r0
    a8fc:	b.n	a862 <_free_r+0xc6>
    a8fe:	orr.w	r2, r3, #1
    a902:	str	r4, [r1, #20]
    a904:	str	r4, [r1, #16]
    a906:	str	r5, [r4, #12]
    a908:	str	r5, [r4, #8]
    a90a:	str	r2, [r4, #4]
    a90c:	str	r3, [r4, r3]
    a90e:	b.n	a822 <_free_r+0x86>
    a910:	cmp	r2, #84	; 0x54
    a912:	bhi.n	a922 <_free_r+0x186>
    a914:	lsrs	r2, r3, #12
    a916:	add.w	r7, r2, #111	; 0x6f
    a91a:	lsls	r7, r7, #1
    a91c:	add.w	r5, r2, #110	; 0x6e
    a920:	b.n	a840 <_free_r+0xa4>
    a922:	cmp.w	r2, #340	; 0x154
    a926:	bhi.n	a936 <_free_r+0x19a>
    a928:	lsrs	r2, r3, #15
    a92a:	add.w	r7, r2, #120	; 0x78
    a92e:	lsls	r7, r7, #1
    a930:	add.w	r5, r2, #119	; 0x77
    a934:	b.n	a840 <_free_r+0xa4>
    a936:	movw	r0, #1364	; 0x554
    a93a:	cmp	r2, r0
    a93c:	bhi.n	a94c <_free_r+0x1b0>
    a93e:	lsrs	r2, r3, #18
    a940:	add.w	r7, r2, #125	; 0x7d
    a944:	lsls	r7, r7, #1
    a946:	add.w	r5, r2, #124	; 0x7c
    a94a:	b.n	a840 <_free_r+0xa4>
    a94c:	movs	r7, #254	; 0xfe
    a94e:	movs	r5, #126	; 0x7e
    a950:	b.n	a840 <_free_r+0xa4>
    a952:	orr.w	r2, r3, #1
    a956:	str	r2, [r4, #4]
    a958:	str	r3, [r4, r3]
    a95a:	b.n	a822 <_free_r+0x86>
    a95c:	.word	0x200010e4
    a960:	.word	0x200010ec
    a964:	.word	0x200014ec
    a968:	.word	0x2000c0d8
    a96c:	.word	0x00000000

0000a970 <___init_veneer>:
    a970:	ldr.w	pc, [pc]	; a974 <___init_veneer+0x4>
    a974:	.word	0x600015a9
	...

Disassembly of section .fini:

0000a980 <_fini>:
    a980:	push	{r3, r4, r5, r6, r7, lr}
    a982:	nop
