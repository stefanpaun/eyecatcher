
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000bbb0 l    d  .fini	00000000 .fini
0000bbb4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
200015a0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00009f0c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 analog.c
20014f84 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb.c
0000a440 l     F .text.itcm	0000005c schedule_transfer
0000a49c l     F .text.itcm	00000030 run_callbacks
0000a4cc l     F .text.itcm	000000a4 endpoint0_transmit.constprop.0
0000a570 l     F .text.itcm	000005b8 isr
200158e8 l     O .bss	00000004 endpointN_notify_mask
200158f0 l     O .bss	00000004 endpoint0_notify_mask
200158f4 l     O .bss	00000001 usb_reboot_timer
200158f8 l     O .bss	00000008 endpoint0_setupdata
20015900 l     O .bss	00000008 reply_buffer
20015908 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20015914 l     O .bss	00000004 s_hotTemp
20015918 l     O .bss	00000004 s_hot_ROOM
2001591c l     O .bss	00000004 s_roomC_hotC
20015920 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200015a0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200015a4 l       .bss	00000000 object.8610
60001648 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000007c l     F .text.itcm	00000164 getRGB(int, int, int, int*, int*, int*)
00001c94 l     F .text.itcm	0000746c _GLOBAL__sub_I_nextTime1
20000748 l     O .data	000002a4 background_A
200009ec l     O .data	000002a4 background_B
20009f50 l     O .bss	000007ec mask_A
2000a73c l     O .bss	000007ec mask_B
20000000 l     O .data	00000400 dim_curve
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
000094bc l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
000098cc l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 yield.cpp
20014f85 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
00009a1c l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
20014f88 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00009fd8 l     F .text.itcm	00000028 rx_event
0000a000 l     F .text.itcm	00000070 usb_serial_flush_callback
0000a070 l     F .text.itcm	0000015c usb_serial_write.part.1
20014fa8 l     O .bss	00000700 txbuffer
200156a8 l     O .bss	00000001 tx_noautoflush
200156a9 l     O .bss	00000001 tx_head
200156ac l     O .bss	000000c0 rx_buffer
2001576c l     O .bss	00000006 rx_index
20015774 l     O .bss	00000006 rx_count
20015780 l     O .bss	00000060 rx_transfer
200157e0 l     O .bss	00000002 tx_available
20015800 l     O .bss	000000e0 tx_transfer
200158e0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_desc.c
20000cb0 l     O .data	0000000a qualifier_descriptor
20000cd4 l     O .data	00000043 config_descriptor
20000d18 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000d60 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015f0 l     F .text.progmem	00000008 __startup_late_hook_veneer
600015f8 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001600 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001608 l     F .text.progmem	00000008 __pwm_init_veneer
60001610 l     F .text.progmem	00000008 __delay_veneer
60001618 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001620 l     F .text.progmem	00000008 __setup_veneer
60001628 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001630 l     F .text.progmem	00000008 __loop_veneer
60001638 l     F .text.progmem	00000008 __yield_veneer
60001640 l     F .text.progmem	00000008 __memset_veneer
0000bba0 l     F .text.itcm	00000008 ___init_veneer
0000a2f4 g     F .text.itcm	00000014 usb_serial_available
00009f18 g     F .text.itcm	00000002 startup_default_late_hook
0000997c  w    F .text.itcm	000000a0 yield
200158ec g     O .bss	00000004 usb_timer1_callback
20000cbc g     O .data	00000018 usb_string_manufacturer_name_default
20015924 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00009ce4 g     F .text.itcm	00000020 Print::println()
00000900 g     F .text.itcm	000001e4 init_B()
00009464 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000b868 g     F .text.itcm	00000002 __malloc_unlock
600012a0 g     F .text.progmem	00000058 analog_init
0000071c g     F .text.itcm	000001e4 init_A()
20000c94 g     O .data	00000004 F_CPU_ACTUAL
0000afa8 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
00009bf8 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20014fa0 g     O .bss	00000001 EventResponder::runningFromYield
20014eb8 g     O .bss	000000c4 Alarm
0000024c g     F .text.itcm	00000142 send_pulse(Adafruit_NeoPixel*, int)
0000b1dc g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
20014f8c g     O .bss	00000004 EventResponder::firstInterrupt
0000ac70 g     F .text.itcm	00000028 usb_transfer_status
20000c98 g     O .data	00000001 usb_enable_serial_event_processing
00009cc8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
2000041c g     O .data	00000280 digital_pin_to_info_PGM
20017280 g     O .bss	00000004 errno
0000bbb0 g       .text.itcm	00000000 _etext
00009414 g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
200015a0 g       .bss	00000000 _sbss
00009120 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001660 g       *ABS*	00000000 _stextload
00000b30 g     F .text.itcm	00001164 loop
2000af50 g     O .bss	00001540 sat_automaton_B
2000f990 g     O .bss	00000014 synapse_A
0000ab28 g     F .text.itcm	00000064 usb_config_rx
00009b90 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
000091cc g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
20014f90 g     O .bss	00000004 EventResponder::lastInterrupt
0000afd0 g     F .text.itcm	00000134 memcpy
20014f80 g     O .bss	00000004 systick_millis_count
20015910 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
2000e44c g     O .bss	00000004 nextTime3
20000cbc  w    O .data	00000018 usb_string_manufacturer_name
0000b238 g     F .text.itcm	00000010 malloc
2000f9a4 g     O .bss	00000014 synapse_B
00009b2c  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600013fc g     F .text.progmem	000000ec usb_init
2001594c g     O .bss	00000004 __malloc_top_pad
20015978 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000744 g     O .data	00000000 .hidden __dso_handle
00009144 g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
000001e0 g     F .text.itcm	0000006c instant_avg_bri()
0000b86c g     F .text.itcm	00000024 _sbrk_r
00009f14 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	0000026c ResetHandler
0000a284 g     F .text.itcm	0000004c usb_serial_getchar
20015ec0 g     O .bss	00000008 usb_cdc_line_coding
000098f0 g     F .text.itcm	0000000a digitalWrite
20014f98 g     O .bss	00000004 EventResponder::lastYield
20015948 g     O .bss	00000004 __malloc_max_sbrked_mem
000098fc g     F .text.itcm	00000080 pinMode
00009d88 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss	00000000 _heap_end
20014f9c g     O .bss	00000004 EventResponder::firstYield
20000740 g     O .data	00000004 _global_impure_ptr
0000b1e8 g     F .text.itcm	00000050 __libc_init_array
00009f1c  w    F .text.itcm	0000008c HardFault_HandlerC
00009cb0  w    F .text.itcm	00000004 usb_serial_class::clear()
00009fa8 g     F .text.itcm	00000030 _sbrk
6000d21c g       *ABS*	00000000 _sdataload
20014fa4 g     O .bss	00000004 MillisTimer::listWaiting
20000cac g     O .data	00000004 __brkval
200158e1 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015e0 g     F .text.progmem	00000000 _init
0000a1cc g     F .text.itcm	00000002 usb_serial_reset
200172c0 g       .bss	00000000 _ebss
0000b160 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
20012438 g     O .bss	00001540 bg_automaton_A
0000917c g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
20016000 g     O .bss	00000020 endpoint0_transfer_data
0000ac98 g     F .text.itcm	000002b8 pwm_init
60001398 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20016020 g     O .bss	00000020 endpoint0_transfer_ack
20015ec8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ac24 g     F .text.itcm	00000028 usb_transmit
00009c90 g     F .text.itcm	00000020 systick_isr
2000551c g     O .bss	00001fb0 next_colors_B
20000c9c g     O .data	00000010 Serial
20015940 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
2000e440 g     O .bss	00000004 i
00009cd0  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00009f14  w    F .text.itcm	00000002 startup_early_hook
0000a2d0 g     F .text.itcm	00000024 usb_serial_peekchar
000094c8 g     F .text.itcm	00000294 set_arm_clock
20014f7c g     O .bss	00000004 systick_cycle_count
20000d48 g     O .data	00000016 usb_string_serial_number_default
0000b9d0 g     F .text.itcm	000001d0 _free_r
2000e448 g     O .bss	00000004 nextTime2
00009cc0  w    F .text.itcm	00000004 usb_serial_class::flush()
20001598 g     O .data	00000004 __malloc_sbrk_base
00009cb8  w    F .text.itcm	00000004 usb_serial_class::read()
0000abf4 g     F .text.itcm	0000002e usb_prepare_transfer
00009efc g     F .text.itcm	00000018 unused_interrupt_vector
000004dc g     F .text.itcm	00000148 gen_color_matrix_B()
200158e4 g     O .bss	00000004 usb_timer0_callback
600014e8 g     F .text.progmem	000000f8 tempmon_init
00009cd8  w    F .text.itcm	0000000c serialEvent()
0000b890 g     F .text.itcm	000000a4 __register_exitproc
00009464 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000a308 g     F .text.itcm	0000003c usb_serial_flush_input
0000a344 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20015950 g     O .bss	00000028 __malloc_current_mallinfo
2000f9b8 g     O .bss	00001540 grow_automaton_A
0000b1d0 g     F .text.itcm	0000000c __cxa_atexit
2000e450 g     O .bss	00001540 sat_automaton_A
00009aa4 g     F .text.itcm	00000008 random(unsigned long)
2000069c  w    O .data	00000028 vtable for usb_serial_class
20014f94 g     O .bss	00000004 MillisTimer::listActive
00000390 g     F .text.itcm	0000014c gen_color_matrix_A()
2000118c g     O .data	00000408 __malloc_av_
00000624 g     F .text.itcm	000000f8 interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)
0000a3d4 g     F .text.itcm	0000006c usb_serial_flush_output
0000b864 g     F .text.itcm	00000002 __malloc_lock
20015c00 g     O .bss	000002c0 _VectorsRam
0000b170 g     F .text.itcm	0000005e _calloc_r
0000b7c8 g     F .text.itcm	0000009a memset
20015944 g     O .bss	00000004 __malloc_max_total_mem
0000af50 g     F .text.itcm	00000058 usb_init_serialnumber
60001654 g       .text.progmem	00000000 __init_array_end
0000b258 g     F .text.itcm	00000570 _malloc_r
00009aac g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
0000981c g     F .text.itcm	00000054 micros
0000b934 g     F .text.itcm	0000009c _malloc_trim_r
200074d0 g     O .bss	00001540 fg_automaton_A
20000d44 g     O .data	00000004 string0
0000a370 g     F .text.itcm	00000018 usb_serial_write
00009f18  w    F .text.itcm	00000002 startup_late_hook
00009cbc  w    F .text.itcm	00000004 usb_serial_class::available()
20017000 g     O .bss	00000280 endpoint_queue_head
20000d2c  w    O .data	00000016 usb_string_product_name
0000975c g     F .text.itcm	000000c0 delay
0000bbb0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
20013978 g     O .bss	00001540 bg_automaton_B
200015bc g     O .bss	00001fb0 prev_colors_B
20001188 g     O .data	00000004 _impure_ptr
60001648 g       .text.progmem	00000000 __preinit_array_end
000093ac g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
00009a98 g     F .text.itcm	0000000c randomSeed(unsigned long)
00000ae4 g     F .text.itcm	0000004c setup
200006d4 g     O .data	0000006c usb_descriptor_list
2000af3c g     O .bss	00000014 screen_B
20010ef8 g     O .bss	00001540 grow_automaton_B
2000c490 g     O .bss	00001fb0 prev_colors_A
20070000 g       .bss	00000000 _estack
2000356c g     O .bss	00001fb0 next_colors_A
0000a388 g     F .text.itcm	0000004c usb_serial_write_buffer_free
2000af28 g     O .bss	00000014 screen_A
20008a10 g     O .bss	00001540 fg_automaton_B
0000a1d0 g     F .text.itcm	000000b4 usb_serial_configure
200015a0 g       .data	00000000 _edata
000093e8 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00009cc4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000b104 g     F .text.itcm	0000004e ultoa
00009b48 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001594 g     O .data	00000004 __malloc_trim_threshold
00009cb4  w    F .text.itcm	00000004 usb_serial_class::peek()
60001648 g       .text.progmem	00000000 __init_array_start
00009870 g     F .text.itcm	0000005c analogRead
20000c90 g     O .data	00000004 F_BUS_ACTUAL
20000400 g     O .data	0000001c pin_to_channel
000093e8 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000d2c g     O .data	00000016 usb_string_product_name_default
600012f8 g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001648 g       .text.progmem	00000000 __preinit_array_start
0000ac4c g     F .text.itcm	00000024 usb_receive
00009100 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00009100 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000e7b0 g       *ABS*	00000000 _flashimagelen
0000b154 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
2000e444 g     O .bss	00000004 nextTime1
00009b8c g     F .text.itcm	00000004 pendablesrvreq_isr
00009d04 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ab8c g     F .text.itcm	00000068 usb_config_tx
0000b248 g     F .text.itcm	00000010 free
20000d48  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104a:	ldr	r1, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #464]	; (60001224 <ResetHandler+0x1f0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001072:	ldr	r1, [pc, #440]	; (6000122c <ResetHandler+0x1f8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109a:	ldr	r3, [pc, #412]	; (60001238 <ResetHandler+0x204>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #384]	; (6000123c <ResetHandler+0x208>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #384]	; (60001240 <ResetHandler+0x20c>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #380]	; (60001244 <ResetHandler+0x210>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #372]	; (60001248 <ResetHandler+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #372]	; (6000124c <ResetHandler+0x218>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #364]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #424]	; 60001294 <ResetHandler+0x260>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #420]	; 60001298 <ResetHandler+0x264>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #420]	; 6000129c <ResetHandler+0x268>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #276]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	600012f8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #292]	; (6000125c <ResetHandler+0x228>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #296]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #284]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #284]	; (6000126c <ResetHandler+0x238>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #288]	; (60001270 <ResetHandler+0x23c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #276]	; (6000127c <ResetHandler+0x248>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001398 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #260]	; (60001280 <ResetHandler+0x24c>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001628 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #236]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x258>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #188]	; (60001288 <ResetHandler+0x254>)
600011cc:	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x25c>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600015f8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013fc <usb_init>
	analog_init();
600011e4:	bl	600012a0 <analog_init>
	pwm_init();
600011e8:	bl	60001608 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e8 <tempmon_init>

	startup_late_hook();
600011f0:	bl	600015f0 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001618 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
60001200:	bl	60001620 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
60001204:	bl	60001630 <__loop_veneer>
		yield();
60001208:	bl	60001638 <__yield_veneer>
6000120c:	b.n	60001204 <ResetHandler+0x1d0>
6000120e:	nop
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaaf
60001218:	.word	0x20070000
6000121c:	.word	0x00000000
60001220:	.word	0x60001660
60001224:	.word	0x0000bbb0
60001228:	.word	0x20000000
6000122c:	.word	0x6000d21c
60001230:	.word	0x200015a0
60001234:	.word	0x200015a0
60001238:	.word	0x200172c0
6000123c:	.word	0xe000ed88
60001240:	.word	0x20015bfc
60001244:	.word	0x00009efd
60001248:	.word	0xe000e400
6000124c:	.word	0xe000e4a0
60001250:	.word	0x400d8000
60001254:	.word	0x400fc000
60001258:	.word	0xe000ed08
6000125c:	.word	0xe000e014
60001260:	.word	0xe000e018
60001264:	.word	0x00009b8d
60001268:	.word	0xe000edfc
6000126c:	.word	0x20200000
60001270:	.word	0x00009c91
60001274:	.word	0xe0001000
60001278:	.word	0xe0001004
6000127c:	.word	0x20014f7c
60001280:	.word	0x23c34600
60001284:	.word	0x40084000
60001288:	.word	0x400d4000
6000128c:	.word	0x56c00000
60001290:	.word	0x20014f80
60001294:	.word	0x20015c00
60001298:	.word	0x2018101b
6000129c:	.word	0x13110d0c

600012a0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a0:	ldr	r3, [pc, #68]	; (600012e8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012a2:	ldr	r1, [pc, #72]	; (600012ec <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012a6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a8:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
600012ac:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012ae:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012b0:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012b6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b8:	orr.w	r0, r0, #768	; 0x300
600012bc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012be:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012c0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012c2:	ldr	r3, [r2, #72]	; 0x48
600012c4:	lsls	r3, r3, #24
600012c6:	bmi.n	600012c2 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012c8:	ldr	r3, [pc, #36]	; (600012f0 <analog_init+0x50>)
600012ca:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012ce:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012d0:	ldr	r2, [pc, #24]	; (600012ec <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012d2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012d6:	ldr	r3, [r2, #72]	; 0x48
600012d8:	ands.w	r3, r3, #128	; 0x80
600012dc:	bne.n	600012d6 <analog_init+0x36>
	calibrating = 0;
600012de:	ldr	r2, [pc, #20]	; (600012f4 <analog_init+0x54>)
600012e0:	strb	r3, [r2, #0]
}
600012e2:	pop	{r4, r5}
600012e4:	bx	lr
600012e6:	nop
600012e8:	.word	0x400fc000
600012ec:	.word	0x400c4000
600012f0:	.word	0x400c8000
600012f4:	.word	0x20014f84

600012f8 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600012f8:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012fa:	ldr	r2, [pc, #100]	; (60001360 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012fc:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012fe:	ldr	r3, [pc, #100]	; (60001364 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001300:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001304:	ldr	r0, [pc, #96]	; (60001368 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001306:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001308:	ldr	r6, [pc, #96]	; (6000136c <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
6000130a:	ldr	r5, [pc, #100]	; (60001370 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000130c:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000130e:	ldr	r7, [pc, #100]	; (60001374 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001310:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001314:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001316:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001318:	ldr	r6, [pc, #92]	; (60001378 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000131a:	ldr	r5, [pc, #96]	; (6000137c <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000131c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000131e:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001320:	ldr	r7, [pc, #92]	; (60001380 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001322:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001324:	ldr	r6, [pc, #92]	; (60001384 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001326:	ldr	r5, [pc, #96]	; (60001388 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001328:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000132a:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000132c:	ldr	r7, [pc, #92]	; (6000138c <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000132e:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001330:	ldr	r6, [pc, #92]	; (60001390 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001332:	ldr	r5, [pc, #96]	; (60001394 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001334:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001336:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001338:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000133a:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000133c:	dsb	sy
	asm("isb");
60001340:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001344:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
60001348:	dsb	sy
	asm("isb");
6000134c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001350:	ldr.w	r3, [r2, #-136]
60001354:	orr.w	r3, r3, #196608	; 0x30000
60001358:	str.w	r3, [r2, #-136]
6000135c:	pop	{r4, r5, r6, r7, pc}
6000135e:	nop
60001360:	.word	0xe000ed9c
60001364:	.word	0xe000eda0
60001368:	.word	0xe000ed94
6000136c:	.word	0x03080025
60001370:	.word	0x00200011
60001374:	.word	0x07020021
60001378:	.word	0x20000012
6000137c:	.word	0x13080025
60001380:	.word	0x20200013
60001384:	.word	0x130b0027
60001388:	.word	0x40000014
6000138c:	.word	0x13100033
60001390:	.word	0x60000015
60001394:	.word	0x070b002f

60001398 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
60001398:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139a:	ldr	r2, [pc, #92]	; (600013f8 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000139c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000139e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013a2:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013a6:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013aa:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013ae:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b2:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b4:	tst.w	r3, #2
600013b8:	beq.n	600013c8 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013ba:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013bc:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013be:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013c0:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013c2:	tst.w	r3, #2
600013c6:	bne.n	600013ba <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013c8:	tst.w	r3, #8192	; 0x2000
600013cc:	bne.n	600013d2 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013ce:	str	r5, [r2, #20]
			continue;
600013d0:	b.n	600013b2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013d2:	tst.w	r3, #4096	; 0x1000
600013d6:	bne.n	600013dc <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013d8:	str	r6, [r2, #20]
			continue;
600013da:	b.n	600013b2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013dc:	cmp	r3, #0
600013de:	bge.n	600013b2 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013e0:	tst.w	r3, #65536	; 0x10000
600013e4:	beq.n	600013ea <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013e6:	str	r1, [r2, #24]
			continue;
600013e8:	b.n	600013b2 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ea:	lsls	r3, r3, #25
600013ec:	bmi.n	600013f2 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013ee:	str	r7, [r2, #20]
			continue;
600013f0:	b.n	600013b2 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013f2:	pop	{r4, r5, r6, r7}
600013f4:	bx	lr
600013f6:	nop
600013f8:	.word	0x400d8000

600013fc <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013fc:	ldr	r3, [pc, #192]	; (600014c0 <usb_init+0xc4>)
600013fe:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
60001402:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001404:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001408:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000140c:	bl	60001600 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001410:	ldr	r1, [pc, #176]	; (600014c4 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001412:	ldr	r0, [pc, #180]	; (600014c8 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001414:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001418:	ldr	r4, [pc, #176]	; (600014cc <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000141a:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000141e:	ldr	r3, [pc, #176]	; (600014d0 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001420:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001424:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001428:	ldr	r2, [r4, #0]
6000142a:	ands	r3, r2
6000142c:	cbnz	r3, 60001436 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000142e:	ldr.w	r3, [r0, #424]	; 0x1a8
60001432:	lsls	r2, r3, #30
60001434:	beq.n	6000146c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001436:	ldr	r3, [pc, #144]	; (600014c8 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001438:	mov.w	r1, #2147483648	; 0x80000000
6000143c:	ldr	r2, [pc, #140]	; (600014cc <usb_init+0xd0>)
6000143e:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001440:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001442:	ldr.w	r1, [r3, #320]	; 0x140
60001446:	orr.w	r1, r1, #2
6000144a:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000144e:	ldr.w	r3, [r2, #320]	; 0x140
60001452:	lsls	r3, r3, #30
60001454:	bmi.n	6000144e <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001456:	mov.w	r0, #131072	; 0x20000
6000145a:	ldr	r1, [pc, #120]	; (600014d4 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000145c:	ldr	r3, [pc, #108]	; (600014cc <usb_init+0xd0>)
6000145e:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001462:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001464:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001466:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001468:	bl	60001610 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000146c:	ldr	r5, [pc, #104]	; (600014d8 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000146e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001470:	ldr	r3, [pc, #88]	; (600014cc <usb_init+0xd0>)
60001472:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001476:	ldr	r4, [pc, #80]	; (600014c8 <usb_init+0xcc>)
60001478:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000147a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000147c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000147e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001480:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001482:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001486:	mov.w	r2, #640	; 0x280
6000148a:	bl	60001640 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000148e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001492:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001496:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000149a:	ldr	r2, [pc, #64]	; (600014dc <usb_init+0xe0>)
6000149c:	ldr	r1, [pc, #64]	; (600014e0 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000149e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600014a0:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600014a2:	str.w	r5, [r4, #344]	; 0x158
600014a6:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600014aa:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600014ae:	ldr	r2, [pc, #52]	; (600014e4 <usb_init+0xe8>)
600014b0:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600014b4:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600014b6:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600014b8:	str.w	r3, [r4, #320]	; 0x140
600014bc:	pop	{r4, r5, r6, pc}
600014be:	nop
600014c0:	.word	0x400d8000
600014c4:	.word	0x400fc000
600014c8:	.word	0x402e0000
600014cc:	.word	0x400d9000
600014d0:	.word	0x001e1c00
600014d4:	.word	0xe000e28c
600014d8:	.word	0x20017000
600014dc:	.word	0x20015c00
600014e0:	.word	0x0000a571
600014e4:	.word	0xe000e10c

600014e8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e8:	ldr	r2, [pc, #216]	; (600015c4 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014ea:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014ec:	ldr	r1, [pc, #216]	; (600015c8 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f2:	ldr	r3, [r2, #0]
600014f4:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014f8:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014fa:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fc:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001500:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001504:	ldr.w	lr, [pc, #212]	; 600015dc <tempmon_init+0xf4>
60001508:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000150a:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150e:	ldr	r7, [pc, #188]	; (600015cc <tempmon_init+0xe4>)
60001510:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001514:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001518:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000151c:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001520:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001528:	vmov	s15, r0
6000152c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001532:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001536:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153e:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001548:	ldr	r5, [pc, #132]	; (600015d0 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000154a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001550:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001558:	ldr	r6, [pc, #120]	; (600015d4 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	ldr	r1, [pc, #120]	; (600015d8 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001560:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001562:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001564:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001568:	vmov	s15, r3
6000156c:	vcvt.f32.u32	s15, s15
60001570:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001574:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001578:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001580:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001584:	vmov	r3, s11
60001588:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000158c:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001590:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001594:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001596:	and.w	r1, r1, r0, lsl #16
6000159a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a2:	orrs	r3, r1
600015a4:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a8:	vmov	r3, s15
600015ac:	ldr.w	r1, [r2, #272]	; 0x110
600015b0:	ubfx	r3, r3, #0, #12
600015b4:	orrs	r3, r1
600015b6:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015ba:	ldr	r3, [r2, #0]
600015bc:	orr.w	r3, r3, #2
600015c0:	str	r3, [r2, #0]
600015c2:	pop	{r4, r5, r6, r7, pc}
600015c4:	.word	0x400d8180
600015c8:	.word	0x401f4400
600015cc:	.word	0x2001591c
600015d0:	.word	0x20015918
600015d4:	.word	0x20015920
600015d8:	.word	0x0fff0000
600015dc:	.word	0x20015914

600015e0 <_init>:
600015e0:	push	{r3, r4, r5, r6, r7, lr}
600015e2:	nop
600015e4:	pop	{r3, r4, r5, r6, r7}
600015e6:	pop	{r3}
600015e8:	mov	lr, r3
600015ea:	bx	lr
600015ec:			; <UNDEFINED> instruction: 0xffffffff

600015f0 <__startup_late_hook_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__startup_late_hook_veneer+0x4>
600015f4:	.word	0x00009f19

600015f8 <__startup_early_hook_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__startup_early_hook_veneer+0x4>
600015fc:	.word	0x00009f15

60001600 <__usb_init_serialnumber_veneer>:
60001600:	ldr.w	pc, [pc]	; 60001604 <__usb_init_serialnumber_veneer+0x4>
60001604:	.word	0x0000af51

60001608 <__pwm_init_veneer>:
60001608:	ldr.w	pc, [pc]	; 6000160c <__pwm_init_veneer+0x4>
6000160c:	.word	0x0000ac99

60001610 <__delay_veneer>:
60001610:	ldr.w	pc, [pc]	; 60001614 <__delay_veneer+0x4>
60001614:	.word	0x0000975d

60001618 <____libc_init_array_veneer>:
60001618:	ldr.w	pc, [pc]	; 6000161c <____libc_init_array_veneer+0x4>
6000161c:	.word	0x0000b1e9

60001620 <__setup_veneer>:
60001620:	ldr.w	pc, [pc]	; 60001624 <__setup_veneer+0x4>
60001624:	.word	0x00000ae5

60001628 <__set_arm_clock_veneer>:
60001628:	ldr.w	pc, [pc]	; 6000162c <__set_arm_clock_veneer+0x4>
6000162c:	.word	0x000094c9

60001630 <__loop_veneer>:
60001630:	ldr.w	pc, [pc]	; 60001634 <__loop_veneer+0x4>
60001634:	.word	0x00000b31

60001638 <__yield_veneer>:
60001638:	ldr.w	pc, [pc]	; 6000163c <__yield_veneer+0x4>
6000163c:	.word	0x0000997d

60001640 <__memset_veneer>:
60001640:	ldr.w	pc, [pc]	; 60001644 <__memset_veneer+0x4>
60001644:	.word	0x0000b7c9

60001648 <__init_array_start>:
60001648:	.word	0x00000045
6000164c:	.word	0x00001c95
60001650:	.word	0x000094bd

60001654 <__init_array_end>:
60001654:	.word	0xffffffff
60001658:	.word	0xffffffff
6000165c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r4, #22
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	cbnz	r4, b0 <getRGB(int, int, int, int*, int*, int*)+0x34>
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r4, #22
      6e:	.short	0x2000
      70:	cbnz	r4, e0 <getRGB(int, int, int, int*, int*, int*)+0x64>
      72:	.short	0x0000
      74:	asrs	r0, r4, #22
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <getRGB(int, int, int, int*, int*, int*)>:
      7c:	.word	0xf1c1b5f0
      80:	lsls	r7, r7, #7
      82:	.short	0x4d55
      84:	ldr.w	r4, [r5, r1, lsl #2]
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	cmp	r4, #255	; 0xff
      8a:	.short	0xd02f
      8c:	ldr	r1, [pc, #332]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
  
  if(num >= 4){
      8e:	.short	0x17c6
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	ldr.w	r5, [r5, r2, lsl #2]
      94:	.word	0x2100fb81
      98:	mul.w	r2, r4, r5
  (*synapse).setPixelColor(pixel+2, r, g, b);
  (*synapse).setPixelColor(pixel+3, r, g, b);
  (*synapse).setPixelColor(pixel+4, r, g, b);
  (*synapse).show();
  
}
      9c:	.word	0x12124401
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
      a0:	rsb	r1, r6, r1, asr #5
      a4:	.word	0xf2002905
      a8:	strh	r3, [r2, #4]
      aa:	tbb	[pc, r1]
      ae:	.short	0x2e20
      b0:	str	r1, [r1, #36]	; 0x24
      b2:	.short	0x037b
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
      b4:	ldr	r7, [pc, #292]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
      b6:	.short	0x1aac
        colors[0] = (((val-base)*(hue%60))/60)+base;
        colors[1] = base;
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
      b8:	mov	r1, r5
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
      ba:	.short	0xfb87
      bc:	b.n	fffffac0 <_flexram_bank_config+0x55555011>
      be:	.short	0x4405
      c0:	rsb	r6, r6, r5, asr #5
      c4:	.word	0x1606ebc6
      c8:	sub.w	r0, r0, r6, lsl #2
      cc:	.word	0x003cf1c0
      d0:	mul.w	r0, r4, r0
      d4:	.word	0x4700fb87
      d8:	asrs	r5, r0, #31
      da:	.short	0x4438
      dc:	rsb	r0, r5, r0, asr #5
      e0:	.word	0x60191815
    break;
    }
    *r = colors[0];
    *g = colors[1];
      e4:	ldr	r3, [sp, #20]
      e6:	str	r2, [r3, #0]
    *b = colors[2]; 
      e8:	.word	0x601d9b06
      ec:	pop	{r4, r5, r6, r7, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
      ee:	.short	0x1aac
      f0:	ldr	r6, [pc, #232]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
      f2:	.short	0x4629
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
      f4:	mov	r5, r2
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
      f6:	.short	0xfb00
      f8:	bl	4808 <_GLOBAL__sub_I_nextTime1+0x2b74>
      fc:	.word	0x17c44600
     100:	add	r0, r6
     102:	rsb	r0, r4, r0, asr #5
     106:	add	r2, r0
        colors[2] = base;
    break;
     108:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     10a:	.short	0x4f34
     10c:	rsb	lr, r2, r5
     110:	smull	r4, r1, r7, r0
        colors[1] = val;
        colors[2] = base;
    break;
     114:	.word	0x44014614
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     118:	rsb	r6, r6, r1, asr #5
     11c:	.word	0x1606ebc6
     120:	sub.w	r0, r0, r6, lsl #2
     124:	rsb	r0, r0, #60	; 0x3c
     128:	mul.w	r0, lr, r0
     12c:	smull	r1, r7, r7, r0
     130:	asrs	r1, r0, #31
     132:	add	r0, r7
     134:	rsb	r0, r1, r0, asr #5
     138:	adds	r1, r2, r0
        colors[1] = val;
     13a:	mov	r2, r5
        colors[2] = base;
     13c:	.word	0xe7d04625
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     140:	ldr	r7, [pc, #152]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
     142:	.short	0xebc2
     144:	lsrs	r5, r0, #24
     146:	.short	0xfb87
     148:	asrs	r0, r0, #16
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
     14a:	mov	r1, r2
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     14c:	.word	0xebc64404
     150:	asrs	r4, r4, #25
     152:	rsb	r6, r6, r6, lsl #4
     156:	.short	0xeba0
     158:	lsls	r6, r0, #2
     15a:	mul.w	r0, r0, lr
     15e:	.short	0xfb87
     160:	bx	r0
     162:	.short	0x17c4
     164:	add	r0, r7
     166:	.short	0xebc4
     168:	asrs	r0, r4, #1
     16a:	.short	0x4410
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
     16c:	mov	r2, r5
        colors[2] = (((val-base)*(hue%60))/60)+base;
     16e:	mov	r5, r0
    break;
     170:	.word	0x4f1ae7b7
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     174:	rsb	lr, r2, r5
     178:	.word	0x1400fb87
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
     17c:	mov	r1, r2
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     17e:	.short	0x4404
     180:	rsb	r6, r6, r4, asr #5
     184:	.word	0x1606ebc6
     188:	sub.w	r0, r0, r6, lsl #2
     18c:	.word	0x003cf1c0
     190:	mul.w	r0, lr, r0
     194:	.word	0x4700fb87
     198:	asrs	r4, r0, #31
     19a:	add	r0, r7
     19c:	rsb	r0, r4, r0, asr #5
     1a0:	add	r2, r0
        colors[2] = val;
    break;
     1a2:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
     1a4:	.word	0x1aa94f0d
     1a8:	smull	lr, r4, r7, r0
     1ac:	add	r4, r0
     1ae:	rsb	r6, r6, r4, asr #5
     1b2:	rsb	r6, r6, r6, lsl #4
     1b6:	sub.w	r6, r0, r6, lsl #2
     1ba:	.short	0x4608
     1bc:	mul.w	r0, r6, r0
     1c0:	.word	0x1700fb87
     1c4:	asrs	r1, r0, #31
     1c6:	.short	0x4438
     1c8:	rsb	r0, r1, r0, asr #5
     1cc:	.word	0xe7881811
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
     1d0:	movs	r5, #0
     1d2:	.short	0x462a
     1d4:	mov	r1, r5
     1d6:	.short	0xe784
     1d8:	movs	r0, r0
     1da:	.short	0x2000
     1dc:	ldrh	r1, [r1, #4]
     1de:	.short	0x8888

000001e0 <instant_avg_bri()>:
  }
  avg_hue = avg_hue / counter;
  return avg_hue; 
}

void instant_avg_bri(){
     1e0:	push	{r3, r4, r5, lr}
  float avg_bri = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     1e2:	.short	0x2100
  avg_hue = avg_hue / counter;
  return avg_hue; 
}

void instant_avg_bri(){
  float avg_bri = 0;
     1e4:	vldr	s15, [pc, #80]	; 238 <instant_avg_bri()+0x58>
     1e8:	.word	0x201a4d14
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
      avg_bri += next_colors_A.bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     1ec:	ldr	r4, [pc, #80]	; (240 <instant_avg_bri()+0x60>)
     1ee:	.short	0xfb84
     1f0:	adds	r2, #1
     1f2:	.short	0x17cb
     1f4:	rsb	r3, r3, r2, asr #3
     1f8:	.word	0x1213fb00
  return avg_hue; 
}

void instant_avg_bri(){
  float avg_bri = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     1fc:	adds	r1, #1
      avg_bri += next_colors_A.bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     1fe:	.short	0xfb00
     200:	adds	r3, #2
  return avg_hue; 
}

void instant_avg_bri(){
  float avg_bri = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     202:	.short	0xf5b1
     204:	ldrb	r1, [r5, #28]
      avg_bri += next_colors_A.bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     206:	.short	0xf503
     208:	str	r1, [r5, #56]	; 0x38
     20a:	add.w	r3, r5, r3, lsl #2
     20e:	.short	0xed93
     210:	ldrb	r0, [r0, #8]
     212:	vadd.f32	s15, s15, s14
  return avg_hue; 
}

void instant_avg_bri(){
  float avg_bri = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     216:	bne.n	1ee <instant_avg_bri()+0xe>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     218:	vldr	s14, [pc, #40]	; 244 <instant_avg_bri()+0x64>
     21c:	movs	r1, #2
     21e:	ldr	r0, [pc, #40]	; (248 <instant_avg_bri()+0x68>)
     220:	vdiv.f32	s0, s15, s14
     224:	vcvt.f64.f32	d0, s0
     228:	bl	9d88 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     22c:	ldr	r0, [pc, #24]	; (248 <instant_avg_bri()+0x68>)
      avg_bri += next_colors_A.bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
  }
  avg_bri = avg_bri / NUM_LEDS_SCREEN;
  Serial.println(avg_bri);
}
     22e:	ldmia.w	sp!, {r3, r4, r5, lr}
     232:	b.w	9ce4 <Print::println()>
     236:	nop
     238:	.word	0x00000000
     23c:	.word	0x2000356c
     240:	.word	0x4ec4ec4f
     244:	.word	0x44290000
     248:	.word	0x20000c9c

0000024c <send_pulse(Adafruit_NeoPixel*, int)>:
  (*synapse).setPixelColor(pixel+3, r, g, b);
  (*synapse).setPixelColor(pixel+4, r, g, b);
  (*synapse).show();
}

void send_pulse(Adafruit_NeoPixel * synapse, int hue){
     24c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
     250:	mov.w	sl, #0
  (*synapse).setPixelColor(pixel+3, r, g, b);
  (*synapse).setPixelColor(pixel+4, r, g, b);
  (*synapse).show();
}

void send_pulse(Adafruit_NeoPixel * synapse, int hue){
     254:	sub	sp, #36	; 0x24
     256:	mov	r4, r0
    (*synapse).setPixelColor(pixel+1, r, g, b);
    (*synapse).setPixelColor(pixel+2, r, g, b);
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
    (*synapse).show();
    r = 0; g = 0; b = 0;
     258:	mov	fp, sl
  (*synapse).setPixelColor(pixel+3, r, g, b);
  (*synapse).setPixelColor(pixel+4, r, g, b);
  (*synapse).show();
}

void send_pulse(Adafruit_NeoPixel * synapse, int hue){
     25a:	str	r1, [sp, #12]
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
    getRGB(hue, sat, bri, &r, &g, &b);
     25c:	add	r3, sp, #28
     25e:	movs	r2, #255	; 0xff
    (*synapse).setPixelColor(pixel, r, g, b);
     260:	uxth.w	r5, sl
void send_pulse(Adafruit_NeoPixel * synapse, int hue){
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
    getRGB(hue, sat, bri, &r, &g, &b);
     264:	ldr	r0, [sp, #12]
     266:	str	r3, [sp, #4]
     268:	add	r3, sp, #24
     26a:	mov	r1, r2
     26c:	add.w	r9, r5, #1
     270:	str	r3, [sp, #0]
     272:	add	r3, sp, #20
     274:	bl	7c <getRGB(int, int, int, int*, int*, int*)>
    (*synapse).setPixelColor(pixel, r, g, b);
     278:	ldrb.w	r0, [sp, #28]
     27c:	mov	r1, r5
     27e:	ldrb.w	r3, [sp, #24]
     282:	ldrb.w	r2, [sp, #20]
     286:	uxth.w	r9, r9
     28a:	str	r0, [sp, #0]
     28c:	mov	r0, r4
     28e:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+1, r, g, b);
     292:	ldrb.w	r6, [sp, #28]
     296:	add.w	r8, r5, #2
     29a:	ldrb.w	r3, [sp, #24]
     29e:	mov	r0, r4
     2a0:	ldrb.w	r2, [sp, #20]
     2a4:	mov	r1, r9
     2a6:	str	r6, [sp, #0]
     2a8:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+2, r, g, b);
     2ac:	ldrb.w	r6, [sp, #28]
     2b0:	uxth.w	r8, r8
     2b4:	ldrb.w	r3, [sp, #24]
     2b8:	mov	r0, r4
     2ba:	ldrb.w	r2, [sp, #20]
     2be:	mov	r1, r8
     2c0:	str	r6, [sp, #0]
     2c2:	adds	r7, r5, #3
     2c4:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+3, r, g, b);
     2c8:	ldrb.w	r6, [sp, #28]
     2cc:	mov	r0, r4
     2ce:	uxth	r7, r7
     2d0:	ldrb.w	r3, [sp, #24]
     2d4:	str	r6, [sp, #0]
     2d6:	adds	r6, r5, #4
     2d8:	ldrb.w	r2, [sp, #20]
     2dc:	mov	r1, r7
     2de:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+4, r, g, b);
     2e2:	ldrb.w	lr, [sp, #28]
     2e6:	uxth	r6, r6
     2e8:	ldrb.w	r3, [sp, #24]
     2ec:	str.w	lr, [sp]
     2f0:	mov	r0, r4
     2f2:	ldrb.w	r2, [sp, #20]
     2f6:	mov	r1, r6
     2f8:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).show();
     2fc:	mov	r0, r4
     2fe:	bl	91cc <Adafruit_NeoPixel::show()>
    r = 0; g = 0; b = 0;
    (*synapse).setPixelColor(pixel, r, g, b);
     302:	movs	r3, #0
     304:	mov	r1, r5
     306:	mov	r0, r4
     308:	mov	r2, r3
     30a:	str.w	fp, [sp]
    (*synapse).setPixelColor(pixel+1, r, g, b);
    (*synapse).setPixelColor(pixel+2, r, g, b);
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
    (*synapse).show();
    r = 0; g = 0; b = 0;
     30e:	str.w	fp, [sp, #20]

void send_pulse(Adafruit_NeoPixel * synapse, int hue){
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
     312:	add.w	sl, sl, #1
    (*synapse).setPixelColor(pixel+1, r, g, b);
    (*synapse).setPixelColor(pixel+2, r, g, b);
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
    (*synapse).show();
    r = 0; g = 0; b = 0;
     316:	str.w	fp, [sp, #24]
     31a:	str.w	fp, [sp, #28]
    (*synapse).setPixelColor(pixel, r, g, b);
     31e:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+1, r, g, b);
     322:	ldrb.w	r5, [sp, #28]
     326:	mov	r1, r9
     328:	ldrb.w	r3, [sp, #24]
     32c:	mov	r0, r4
     32e:	ldrb.w	r2, [sp, #20]
     332:	str	r5, [sp, #0]
     334:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+2, r, g, b);
     338:	ldrb.w	r5, [sp, #28]
     33c:	ldrb.w	r3, [sp, #24]
     340:	mov	r1, r8
     342:	ldrb.w	r2, [sp, #20]
     346:	mov	r0, r4
     348:	str	r5, [sp, #0]
     34a:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+3, r, g, b);
     34e:	ldrb.w	r5, [sp, #28]
     352:	ldrb.w	r3, [sp, #24]
     356:	mov	r1, r7
     358:	ldrb.w	r2, [sp, #20]
     35c:	mov	r0, r4
     35e:	str	r5, [sp, #0]
     360:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).setPixelColor(pixel+4, r, g, b);
     364:	ldrb.w	r5, [sp, #28]
     368:	ldrb.w	r3, [sp, #24]
     36c:	mov	r1, r6
     36e:	ldrb.w	r2, [sp, #20]
     372:	mov	r0, r4
     374:	str	r5, [sp, #0]
     376:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
    (*synapse).show();
     37a:	mov	r0, r4
     37c:	bl	91cc <Adafruit_NeoPixel::show()>

void send_pulse(Adafruit_NeoPixel * synapse, int hue){
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
     380:	cmp.w	sl, #120	; 0x78
     384:	bne.w	25c <send_pulse(Adafruit_NeoPixel*, int)+0x10>
    (*synapse).setPixelColor(pixel+2, r, g, b);
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
    (*synapse).show();
  }
}
     388:	add	sp, #36	; 0x24
     38a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     38e:	nop

00000390 <gen_color_matrix_A()>:
void gen_color_matrix_A(){
     390:	ldr	r2, [pc, #292]	; (4b8 <gen_color_matrix_A()+0x128>)
     392:	movw	r3, #5436	; 0x153c
     396:	movs	r0, #0
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     398:	movs	r1, #26
     39a:	ldrb	r2, [r2, #9]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     39c:	ldr.w	ip, [pc, #308]	; 4d4 <gen_color_matrix_A()+0x144>
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
    (*synapse).show();
  }
}
void gen_color_matrix_A(){
     3a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3a4:	sub	sp, #12
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     3a6:	mov.w	r8, #360	; 0x168
     3aa:	ldr.w	lr, [pc, #300]	; 4d8 <gen_color_matrix_A()+0x148>
     3ae:	str	r2, [sp, #4]
     3b0:	ldr	r2, [pc, #260]	; (4b8 <gen_color_matrix_A()+0x128>)
     3b2:	ldr	r3, [r2, r3]
     3b4:	str	r3, [sp, #0]
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     3b6:	ldr	r3, [pc, #260]	; (4bc <gen_color_matrix_A()+0x12c>)
     3b8:	smull	r3, r2, r3, r0
     3bc:	asrs	r3, r0, #31
     3be:	asrs	r2, r2, #3
     3c0:	subs	r5, r2, r3
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     3c2:	ldr	r2, [sp, #4]
     3c4:	mov	r3, r5
     3c6:	mls	r5, r1, r5, r0
     3ca:	cmp	r2, #0
     3cc:	beq.n	4a2 <gen_color_matrix_A()+0x112>
      return _background[x][y];
     3ce:	ldr	r2, [sp, #0]
     3d0:	mla	r2, r1, r5, r2
     3d4:	ldrb	r2, [r2, r3]
     3d6:	cmp	r2, #0
     3d8:	beq.n	498 <gen_color_matrix_A()+0x108>
            hue = fg_automaton_A.colorMap(fg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     3da:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     3de:	ldr	r4, [pc, #216]	; (4b8 <gen_color_matrix_A()+0x128>)
     3e0:	adds	r2, #6
     3e2:	ldr.w	r4, [r4, r2, lsl #2]
     3e6:	ldr	r2, [pc, #216]	; (4c0 <gen_color_matrix_A()+0x130>)
     3e8:	smull	r6, r7, r4, r2
     3ec:	asrs	r2, r4, #31
     3ee:	adds	r6, r4, r7
     3f0:	rsb	r2, r2, r6, asr #8
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
         
         
          
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     3f4:	ldr	r6, [pc, #204]	; (4c4 <gen_color_matrix_A()+0x134>)
     3f6:	mls	r2, r8, r2, r4
     3fa:	mla	r4, r1, r5, r3
     3fe:	adds	r4, #6
     400:	ldr.w	r4, [r6, r4, lsl #2]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     404:	add.w	r9, r4, r4, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     408:	adds	r4, #150	; 0x96
     40a:	smull	sl, fp, r4, ip
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     40e:	mov.w	r9, r9, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     412:	mov.w	sl, r4, asr #31
     416:	add	fp, r4
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     418:	smull	r6, r7, r9, ip
     41c:	mov.w	r6, r9, asr #31
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     420:	rsb	sl, sl, fp, asr #7
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     424:	add	r7, r9
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     426:	rsb	sl, sl, sl, lsl #8
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     42a:	rsb	r6, r6, r7, asr #7
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     42e:	rsb	sl, sl, r4
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     432:	rsb	r6, r6, r6, lsl #8
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     436:	cmp.w	sl, #99	; 0x63
     43a:	rsb	r6, r6, r9
     43e:	ble.n	4b0 <gen_color_matrix_A()+0x120>
     440:	vmov	s15, sl
     444:	vcvt.f32.s32	s14, s15
}


int shift_bri(int bri){
  int val = bri;
  if (val < 150){
     448:	cmp	r6, #149	; 0x95
     44a:	bgt.n	48e <gen_color_matrix_A()+0xfe>
     44c:	vldr	s15, [pc, #120]	; 4c8 <gen_color_matrix_A()+0x138>
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);

          //hue = filter_hue(hue);
          bri = shift_bri(bri);
          
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     450:	mla	r3, r1, r5, r3
     454:	vmov	s13, r2
  }
}
void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     458:	adds	r0, #1

          //hue = filter_hue(hue);
          bri = shift_bri(bri);
          
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     45a:	add.w	r4, r3, #676	; 0x2a4
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     45e:	add.w	r2, r3, #1352	; 0x548
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);

          //hue = filter_hue(hue);
          bri = shift_bri(bri);
          
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     462:	vcvt.f32.s32	s13, s13
     466:	add.w	r3, lr, r3, lsl #2
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     46a:	add.w	r4, lr, r4, lsl #2
  }
}
void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     46e:	cmp.w	r0, #676	; 0x2a4
          //hue = filter_hue(hue);
          bri = shift_bri(bri);
          
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     472:	add.w	r2, lr, r2, lsl #2
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);

          //hue = filter_hue(hue);
          bri = shift_bri(bri);
          
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     476:	vstr	s13, [r3]
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     47a:	vstr	s14, [r4]
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     47e:	vstr	s15, [r2]
  }
}
void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     482:	bne.n	3b6 <gen_color_matrix_A()+0x26>
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
        }
     }
  instant_avg_bri();
}
     484:	add	sp, #12
     486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
        }
     }
  instant_avg_bri();
     48a:	b.w	1e0 <instant_avg_bri()>
     48e:	vmov	s15, r6
     492:	vcvt.f32.s32	s15, s15
     496:	b.n	450 <gen_color_matrix_A()+0xc0>
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
            hue = fg_automaton_A.colorMap(fg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          } else {
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     498:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     49c:	ldr	r4, [pc, #44]	; (4cc <gen_color_matrix_A()+0x13c>)
     49e:	adds	r2, #6
     4a0:	b.n	3e2 <gen_color_matrix_A()+0x52>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     4a2:	ldr	r2, [sp, #0]
     4a4:	mla	r2, r1, r5, r2
     4a8:	ldrb	r2, [r2, r3]
     4aa:	eor.w	r2, r2, #1
     4ae:	b.n	3d6 <gen_color_matrix_A()+0x46>
     4b0:	vldr	s14, [pc, #28]	; 4d0 <gen_color_matrix_A()+0x140>
     4b4:	b.n	448 <gen_color_matrix_A()+0xb8>
     4b6:	nop
     4b8:	.word	0x200074d0
     4bc:	.word	0x4ec4ec4f
     4c0:	.word	0xb60b60b7
     4c4:	.word	0x2000f9b8
     4c8:	.word	0x00000000
     4cc:	.word	0x20012438
     4d0:	.word	0x42c80000
     4d4:	.word	0x80808081
     4d8:	.word	0x2000356c

000004dc <gen_color_matrix_B()>:
        }
     }
  instant_avg_bri();
}

void gen_color_matrix_B(){
     4dc:	ldr	r2, [pc, #288]	; (600 <gen_color_matrix_B()+0x124>)
     4de:	movw	r3, #5436	; 0x153c
     4e2:	movs	r0, #0
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     4e4:	movs	r1, #26
     4e6:	ldrb	r2, [r2, #9]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     4e8:	ldr.w	ip, [pc, #304]	; 61c <gen_color_matrix_B()+0x140>
        }
     }
  instant_avg_bri();
}

void gen_color_matrix_B(){
     4ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f0:	sub	sp, #12
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     4f2:	mov.w	r8, #360	; 0x168
     4f6:	ldr.w	lr, [pc, #296]	; 620 <gen_color_matrix_B()+0x144>
     4fa:	str	r2, [sp, #4]
     4fc:	ldr	r2, [pc, #256]	; (600 <gen_color_matrix_B()+0x124>)
     4fe:	ldr	r3, [r2, r3]
     500:	str	r3, [sp, #0]
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     502:	ldr	r3, [pc, #256]	; (604 <gen_color_matrix_B()+0x128>)
     504:	smull	r3, r2, r3, r0
     508:	asrs	r3, r0, #31
     50a:	asrs	r2, r2, #3
     50c:	subs	r5, r2, r3
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     50e:	ldr	r2, [sp, #4]
     510:	mov	r3, r5
     512:	mls	r5, r1, r5, r0
     516:	cmp	r2, #0
     518:	beq.n	5ea <gen_color_matrix_B()+0x10e>
      return _background[x][y];
     51a:	ldr	r2, [sp, #0]
     51c:	mla	r2, r1, r5, r2
     520:	ldrb	r2, [r2, r3]
     522:	cmp	r2, #0
     524:	beq.n	5e0 <gen_color_matrix_B()+0x104>
            hue = fg_automaton_B.colorMap(fg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     526:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     52a:	ldr	r4, [pc, #212]	; (600 <gen_color_matrix_B()+0x124>)
     52c:	adds	r2, #6
     52e:	ldr.w	r4, [r4, r2, lsl #2]
     532:	ldr	r2, [pc, #212]	; (608 <gen_color_matrix_B()+0x12c>)
     534:	smull	r6, r7, r4, r2
     538:	asrs	r2, r4, #31
     53a:	adds	r6, r4, r7
     53c:	rsb	r2, r2, r6, asr #8
          } else {
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     540:	ldr	r6, [pc, #200]	; (60c <gen_color_matrix_B()+0x130>)
     542:	mls	r2, r8, r2, r4
     546:	mla	r4, r1, r5, r3
     54a:	adds	r4, #6
     54c:	ldr.w	r4, [r6, r4, lsl #2]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     550:	add.w	r9, r4, r4, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     554:	adds	r4, #150	; 0x96
     556:	smull	sl, fp, r4, ip
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     55a:	mov.w	r9, r9, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     55e:	mov.w	sl, r4, asr #31
     562:	add	fp, r4
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     564:	smull	r6, r7, r9, ip
     568:	mov.w	r6, r9, asr #31
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     56c:	rsb	sl, sl, fp, asr #7
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     570:	add	r7, r9
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     572:	rsb	sl, sl, sl, lsl #8
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     576:	rsb	r6, r6, r7, asr #7
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     57a:	rsb	sl, sl, r4
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 20) % 255;
     57e:	rsb	r6, r6, r6, lsl #8
     582:	cmp.w	sl, #99	; 0x63
     586:	rsb	r6, r6, r9
     58a:	ble.n	5f8 <gen_color_matrix_B()+0x11c>
     58c:	vmov	s15, sl
     590:	vcvt.f32.s32	s14, s15
}


int shift_bri(int bri){
  int val = bri;
  if (val < 150){
     594:	cmp	r6, #149	; 0x95
     596:	bgt.n	5d6 <gen_color_matrix_B()+0xfa>
     598:	vldr	s15, [pc, #116]	; 610 <gen_color_matrix_B()+0x134>
        

          //hue = filter_hue(hue);
          bri = shift_bri(bri);

          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     59c:	mla	r3, r1, r5, r3
     5a0:	vmov	s13, r2
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     5a4:	adds	r0, #1

          //hue = filter_hue(hue);
          bri = shift_bri(bri);

          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     5a6:	add.w	r4, r3, #676	; 0x2a4
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     5aa:	add.w	r2, r3, #1352	; 0x548
        

          //hue = filter_hue(hue);
          bri = shift_bri(bri);

          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     5ae:	vcvt.f32.s32	s13, s13
     5b2:	add.w	r3, lr, r3, lsl #2
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     5b6:	add.w	r4, lr, r4, lsl #2
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     5ba:	cmp.w	r0, #676	; 0x2a4
          //hue = filter_hue(hue);
          bri = shift_bri(bri);

          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     5be:	add.w	r2, lr, r2, lsl #2
        

          //hue = filter_hue(hue);
          bri = shift_bri(bri);

          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     5c2:	vstr	s13, [r3]
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     5c6:	vstr	s14, [r4]
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     5ca:	vstr	s15, [r2]
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     5ce:	bne.n	502 <gen_color_matrix_B()+0x26>
          // Serial.print(g);
          // Serial.print(" ");
          // Serial.println(b);
        }
     }
}
     5d0:	add	sp, #12
     5d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5d6:	vmov	s15, r6
     5da:	vcvt.f32.s32	s15, s15
     5de:	b.n	59c <gen_color_matrix_B()+0xc0>
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
            hue = fg_automaton_B.colorMap(fg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          } else {
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     5e0:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     5e4:	ldr	r4, [pc, #44]	; (614 <gen_color_matrix_B()+0x138>)
     5e6:	adds	r2, #6
     5e8:	b.n	52e <gen_color_matrix_B()+0x52>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     5ea:	ldr	r2, [sp, #0]
     5ec:	mla	r2, r1, r5, r2
     5f0:	ldrb	r2, [r2, r3]
     5f2:	eor.w	r2, r2, #1
     5f6:	b.n	522 <gen_color_matrix_B()+0x46>
     5f8:	vldr	s14, [pc, #28]	; 618 <gen_color_matrix_B()+0x13c>
     5fc:	b.n	594 <gen_color_matrix_B()+0xb8>
     5fe:	nop
     600:	.word	0x20008a10
     604:	.word	0x4ec4ec4f
     608:	.word	0xb60b60b7
     60c:	.word	0x20010ef8
     610:	.word	0x00000000
     614:	.word	0x20013978
     618:	.word	0x42c80000
     61c:	.word	0x80808081
     620:	.word	0x2000551c

00000624 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>:
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     624:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     628:	vpush	{d8}
     62c:	sub	sp, #36	; 0x24
  int r = 0, g = 0, b = 0;
     62e:	movs	r3, #0
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     630:	mov	r6, r2
     632:	mov	sl, r0
  int r = 0, g = 0, b = 0;
     634:	movs	r2, #30
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     636:	mov	r9, r1
     638:	add	r7, sp, #24
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     63a:	vldr	s16, [pc, #216]	; 714 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0xf0>
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     63e:	ldr.w	r8, [pc, #216]	; 718 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0xf4>
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
     642:	str	r2, [sp, #12]
     644:	str	r3, [sp, #20]
     646:	str	r3, [sp, #24]
     648:	str	r3, [sp, #28]
     64a:	movs	r4, #0
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     64c:	movs	r5, #26
     64e:	smull	r3, r0, r8, r4
     652:	mov.w	lr, r4, asr #31
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     656:	add	r3, sp, #28
     658:	str	r7, [sp, #0]
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     65a:	asrs	r2, r0, #3
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     65c:	str	r3, [sp, #4]
     65e:	add	r3, sp, #20
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     660:	rsb	r1, lr, r2
     664:	mov	r2, r1
     666:	mls	r1, r5, r1, r4
     66a:	mla	r2, r5, r1, r2
     66e:	lsls	r2, r2, #2
     670:	add.w	r0, r9, r2
     674:	add	r2, sl
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
     676:	add.w	ip, r0, #2704	; 0xa90
            current_bri = interpolate_function((*next).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     67a:	add.w	lr, r0, #5408	; 0x1520
     67e:	add.w	r1, r2, #5408	; 0x1520
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
     682:	add.w	fp, r2, #2704	; 0xa90
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     686:	vldr	s13, [r0]
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
     68a:	vldr	s14, [ip]
            current_bri = interpolate_function((*next).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     68e:	vldr	s15, [lr]
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     692:	vldr	s11, [r2]
     696:	vldr	s12, [r1]
     69a:	vldr	s10, [fp]
     69e:	vsub.f32	s11, s11, s13
     6a2:	vsub.f32	s12, s12, s15
     6a6:	vsub.f32	s10, s10, s14
     6aa:	vfma.f32	s13, s11, s16
     6ae:	vfma.f32	s15, s12, s16
     6b2:	vfma.f32	s14, s10, s16
           
            //Serial.println("Prev and next bri");
            //Serial.println(current_bri);
            
            //Serial.println(current_bri);
            (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
     6b6:	vstr	s13, [r0]
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     6ba:	vcvt.s32.f32	s13, s13
     6be:	vcvt.s32.f32	s12, s14
            //Serial.println("Prev and next bri");
            //Serial.println(current_bri);
            
            //Serial.println(current_bri);
            (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
            (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_sat;
     6c2:	vstr	s14, [ip]
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     6c6:	vcvt.s32.f32	s14, s15
     6ca:	vmov	r0, s13
            //Serial.println(current_bri);
            
            //Serial.println(current_bri);
            (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
            (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_sat;
            (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_bri;  
     6ce:	vstr	s15, [lr]
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     6d2:	vmov	r1, s12
     6d6:	vmov	r2, s14
     6da:	bl	7c <getRGB(int, int, int, int*, int*, int*)>
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
     6de:	ldrb.w	r0, [sp, #28]
     6e2:	uxth	r1, r4
void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     6e4:	adds	r4, #1
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
     6e6:	str	r0, [sp, #0]
     6e8:	mov	r0, r6
     6ea:	ldrb.w	r3, [sp, #24]
     6ee:	ldrb.w	r2, [sp, #20]
     6f2:	bl	9414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     6f6:	cmp.w	r4, #676	; 0x2a4
     6fa:	bne.n	64e <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x2a>
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
        }
    }
  (*screen).show();
     6fc:	mov	r0, r6
     6fe:	bl	91cc <Adafruit_NeoPixel::show()>


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
     702:	ldr	r3, [sp, #12]
     704:	subs	r3, #1
     706:	str	r3, [sp, #12]
     708:	bne.n	64a <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x26>
  (*screen).show();
  }
  // matrix_copy(prev_hue_A, next_hue_A);
  // matrix_copy(prev_sat_A, next_sat_A);
  // matrix_copy(prev_bri_A, next_bri_A);
}
     70a:	add	sp, #36	; 0x24
     70c:	vpop	{d8}
     710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     714:	.word	0x3d088889
     718:	.word	0x4ec4ec4f

0000071c <init_A()>:
  // matrix_copy(prev_hue_A, next_hue_A);
  // matrix_copy(prev_sat_A, next_sat_A);
  // matrix_copy(prev_bri_A, next_bri_A);
//}

void init_A(){
     71c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     720:	ldr	r3, [pc, #448]	; (8e4 <init_A()+0x1c8>)
     722:	sub	sp, #12
  screen_A.begin();
     724:	ldr	r0, [pc, #448]	; (8e8 <init_A()+0x1cc>)
     726:	mov.w	sl, #0
     72a:	str	r3, [sp, #4]
     72c:	sub.w	r9, r3, #24
     730:	ldr.w	fp, [pc, #444]	; 8f0 <init_A()+0x1d4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     734:	add.w	r7, r3, #5408	; 0x1520
     738:	bl	9120 <Adafruit_NeoPixel::begin()>
     73c:	add.w	r6, sl, sl, lsl #1
     740:	ldr	r5, [sp, #4]
     742:	movs	r4, #0
     744:	ldr.w	r3, [fp]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     748:	ldrb.w	r2, [r9, #9]
      return _background[x][y];
     74c:	add	r3, r4
     74e:	ldrb.w	r3, [r3, sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     752:	cbnz	r2, 758 <init_A()+0x3c>
      return _background[x][y];
    } else {
      return !_background[x][y];
     754:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     758:	cmp	r3, #0
     75a:	bne.w	8b8 <init_A()+0x19c>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     75e:	adds	r4, #1
     760:	adds	r5, #4
     762:	cmp	r4, #26
     764:	bne.n	744 <init_A()+0x28>
     766:	ldr	r3, [sp, #4]
     768:	add.w	sl, sl, #26
     76c:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     76e:	cmp.w	sl, #676	; 0x2a4
     772:	str	r3, [sp, #4]
     774:	bne.n	73c <init_A()+0x20>
     776:	ldr	r3, [pc, #372]	; (8ec <init_A()+0x1d0>)
     778:	mov.w	r9, #0
     77c:	ldr.w	sl, [pc, #372]	; 8f4 <init_A()+0x1d8>
     780:	sub.w	r6, r3, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     784:	add.w	fp, r3, #5408	; 0x1520
     788:	str	r3, [sp, #4]
     78a:	add.w	r7, r9, r9, lsl #1
     78e:	ldr	r5, [sp, #4]
     790:	movs	r4, #0
     792:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     796:	ldrb	r2, [r6, #9]
      return _background[x][y];
     798:	add	r3, r4
     79a:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     79e:	cbnz	r2, 7a4 <init_A()+0x88>
      return _background[x][y];
    } else {
      return !_background[x][y];
     7a0:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     7a4:	cmp	r3, #0
     7a6:	bne.n	890 <init_A()+0x174>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     7a8:	adds	r4, #1
     7aa:	adds	r5, #4
     7ac:	cmp	r4, #26
     7ae:	bne.n	792 <init_A()+0x76>
     7b0:	ldr	r3, [sp, #4]
     7b2:	add.w	r9, r9, #26
     7b6:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     7b8:	cmp.w	r9, #676	; 0x2a4
     7bc:	str	r3, [sp, #4]
     7be:	bne.n	78a <init_A()+0x6e>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     7c0:	movs	r0, #10
     7c2:	bl	9aa4 <random(unsigned long)>
     7c6:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     7c8:	movs	r0, #10
     7ca:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     7ce:	adds	r6, r0, #4
     7d0:	add.w	r7, r0, #9
     7d4:	cmp	r6, r7
     7d6:	bgt.n	824 <init_A()+0x108>
     7d8:	mla	r4, r4, r5, r6
     7dc:	ldr.w	sl, [pc, #280]	; 8f8 <init_A()+0x1dc>
     7e0:	add.w	r8, r5, #4
     7e4:	adds	r5, #9
     7e6:	add.w	r4, sl, r4, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     7ea:	cmp	r8, r5
     7ec:	bgt.n	81c <init_A()+0x100>
     7ee:	ldrb.w	r2, [sl, #7]
     7f2:	mov	fp, r4
     7f4:	mov	r9, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     7f6:	ldrb.w	r0, [sl, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     7fa:	add.w	r9, r9, #1
     7fe:	add.w	fp, fp, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     802:	subs	r0, r0, r2
     804:	adds	r0, #2
     806:	bl	9aa4 <random(unsigned long)>
     80a:	ldrb.w	r2, [sl, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     80e:	cmp	r9, r5
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     810:	add.w	r3, r2, #4294967295
     814:	add	r0, r3
     816:	str.w	r0, [fp, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     81a:	ble.n	7f6 <init_A()+0xda>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     81c:	adds	r6, #1
     81e:	adds	r4, #4
     820:	cmp	r6, r7
     822:	ble.n	7ea <init_A()+0xce>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     824:	movs	r0, #10
     826:	bl	9aa4 <random(unsigned long)>
     82a:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     82c:	movs	r0, #10
     82e:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     832:	adds	r6, r0, #4
     834:	add.w	r8, r0, #9
     838:	cmp	r8, r6
     83a:	blt.n	88a <init_A()+0x16e>
     83c:	movs	r3, #26
     83e:	ldr.w	fp, [pc, #188]	; 8fc <init_A()+0x1e0>
     842:	adds	r7, r5, #4
     844:	add.w	r4, r5, #9
     848:	mla	r5, r3, r5, r6
     84c:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     850:	cmp	r7, r4
     852:	bgt.n	882 <init_A()+0x166>
     854:	ldrb.w	r2, [fp, #7]
     858:	mov	sl, r5
     85a:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     85c:	ldrb.w	r0, [fp, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     860:	add.w	r9, r9, #1
     864:	add.w	sl, sl, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     868:	subs	r0, r0, r2
     86a:	adds	r0, #2
     86c:	bl	9aa4 <random(unsigned long)>
     870:	ldrb.w	r2, [fp, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     874:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     876:	add.w	r3, r2, #4294967295
     87a:	add	r0, r3
     87c:	str.w	r0, [sl, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     880:	ble.n	85c <init_A()+0x140>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     882:	adds	r6, #1
     884:	adds	r5, #4
     886:	cmp	r8, r6
     888:	bge.n	850 <init_A()+0x134>
  fg_automaton_A.init();
  bg_automaton_A.init();
  grow_automaton_A.init_square();
  sat_automaton_A.init_square();
}
     88a:	add	sp, #12
     88c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     890:	ldrb	r1, [r6, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     892:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     896:	ldrb	r0, [r6, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     898:	ldr.w	r2, [fp]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     89c:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     89e:	add	r2, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     8a0:	adds	r0, #2
     8a2:	ldrb.w	r8, [r2, r3]
     8a6:	bl	9aa4 <random(unsigned long)>
     8aa:	ldrb	r2, [r6, #7]
     8ac:	rsb	r3, r2, r8
     8b0:	adds	r3, #1
     8b2:	subs	r0, r3, r0
     8b4:	str	r0, [r5, #0]
     8b6:	b.n	7a8 <init_A()+0x8c>
     8b8:	ldrb.w	r1, [r9, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     8bc:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     8c0:	ldrb.w	r0, [r9, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     8c4:	ldr	r2, [r7, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     8c6:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     8c8:	add	r2, r6
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     8ca:	adds	r0, #2
     8cc:	ldrb.w	r8, [r2, r3]
     8d0:	bl	9aa4 <random(unsigned long)>
     8d4:	ldrb.w	r2, [r9, #7]
     8d8:	rsb	r3, r2, r8
     8dc:	adds	r3, #1
     8de:	subs	r0, r3, r0
     8e0:	str	r0, [r5, #0]
     8e2:	b.n	75e <init_A()+0x42>
     8e4:	.word	0x200074e8
     8e8:	.word	0x2000af28
     8ec:	.word	0x20012450
     8f0:	.word	0x20008a0c
     8f4:	.word	0x20013974
     8f8:	.word	0x2000f9b8
     8fc:	.word	0x2000e450

00000900 <init_B()>:

void init_B(){
     900:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     904:	ldr	r3, [pc, #448]	; (ac8 <init_B()+0x1c8>)
     906:	sub	sp, #12
  screen_B.begin();
     908:	ldr	r0, [pc, #448]	; (acc <init_B()+0x1cc>)
     90a:	mov.w	sl, #0
     90e:	str	r3, [sp, #4]
     910:	sub.w	r9, r3, #24
     914:	ldr.w	fp, [pc, #444]	; ad4 <init_B()+0x1d4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     918:	add.w	r7, r3, #5408	; 0x1520
     91c:	bl	9120 <Adafruit_NeoPixel::begin()>
     920:	add.w	r6, sl, sl, lsl #1
     924:	ldr	r5, [sp, #4]
     926:	movs	r4, #0
     928:	ldr.w	r3, [fp]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     92c:	ldrb.w	r2, [r9, #9]
      return _background[x][y];
     930:	add	r3, r4
     932:	ldrb.w	r3, [r3, sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     936:	cbnz	r2, 93c <init_B()+0x3c>
      return _background[x][y];
    } else {
      return !_background[x][y];
     938:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     93c:	cmp	r3, #0
     93e:	bne.w	a9c <init_B()+0x19c>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     942:	adds	r4, #1
     944:	adds	r5, #4
     946:	cmp	r4, #26
     948:	bne.n	928 <init_B()+0x28>
     94a:	ldr	r3, [sp, #4]
     94c:	add.w	sl, sl, #26
     950:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     952:	cmp.w	sl, #676	; 0x2a4
     956:	str	r3, [sp, #4]
     958:	bne.n	920 <init_B()+0x20>
     95a:	ldr	r3, [pc, #372]	; (ad0 <init_B()+0x1d0>)
     95c:	mov.w	r9, #0
     960:	ldr.w	sl, [pc, #372]	; ad8 <init_B()+0x1d8>
     964:	sub.w	r6, r3, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     968:	add.w	fp, r3, #5408	; 0x1520
     96c:	str	r3, [sp, #4]
     96e:	add.w	r7, r9, r9, lsl #1
     972:	ldr	r5, [sp, #4]
     974:	movs	r4, #0
     976:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     97a:	ldrb	r2, [r6, #9]
      return _background[x][y];
     97c:	add	r3, r4
     97e:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     982:	cbnz	r2, 988 <init_B()+0x88>
      return _background[x][y];
    } else {
      return !_background[x][y];
     984:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     988:	cmp	r3, #0
     98a:	bne.n	a74 <init_B()+0x174>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     98c:	adds	r4, #1
     98e:	adds	r5, #4
     990:	cmp	r4, #26
     992:	bne.n	976 <init_B()+0x76>
     994:	ldr	r3, [sp, #4]
     996:	add.w	r9, r9, #26
     99a:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     99c:	cmp.w	r9, #676	; 0x2a4
     9a0:	str	r3, [sp, #4]
     9a2:	bne.n	96e <init_B()+0x6e>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     9a4:	movs	r0, #10
     9a6:	bl	9aa4 <random(unsigned long)>
     9aa:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     9ac:	movs	r0, #10
     9ae:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     9b2:	adds	r6, r0, #4
     9b4:	add.w	r7, r0, #9
     9b8:	cmp	r6, r7
     9ba:	bgt.n	a08 <init_B()+0x108>
     9bc:	mla	r4, r4, r5, r6
     9c0:	ldr.w	sl, [pc, #280]	; adc <init_B()+0x1dc>
     9c4:	add.w	r8, r5, #4
     9c8:	adds	r5, #9
     9ca:	add.w	r4, sl, r4, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     9ce:	cmp	r8, r5
     9d0:	bgt.n	a00 <init_B()+0x100>
     9d2:	ldrb.w	r2, [sl, #7]
     9d6:	mov	fp, r4
     9d8:	mov	r9, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     9da:	ldrb.w	r0, [sl, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     9de:	add.w	r9, r9, #1
     9e2:	add.w	fp, fp, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     9e6:	subs	r0, r0, r2
     9e8:	adds	r0, #2
     9ea:	bl	9aa4 <random(unsigned long)>
     9ee:	ldrb.w	r2, [sl, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     9f2:	cmp	r9, r5
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     9f4:	add.w	r3, r2, #4294967295
     9f8:	add	r0, r3
     9fa:	str.w	r0, [fp, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     9fe:	ble.n	9da <init_B()+0xda>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     a00:	adds	r6, #1
     a02:	adds	r4, #4
     a04:	cmp	r6, r7
     a06:	ble.n	9ce <init_B()+0xce>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     a08:	movs	r0, #10
     a0a:	bl	9aa4 <random(unsigned long)>
     a0e:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     a10:	movs	r0, #10
     a12:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     a16:	adds	r6, r0, #4
     a18:	add.w	r8, r0, #9
     a1c:	cmp	r8, r6
     a1e:	blt.n	a6e <init_B()+0x16e>
     a20:	movs	r3, #26
     a22:	ldr.w	fp, [pc, #188]	; ae0 <init_B()+0x1e0>
     a26:	adds	r7, r5, #4
     a28:	add.w	r4, r5, #9
     a2c:	mla	r5, r3, r5, r6
     a30:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     a34:	cmp	r7, r4
     a36:	bgt.n	a66 <init_B()+0x166>
     a38:	ldrb.w	r2, [fp, #7]
     a3c:	mov	sl, r5
     a3e:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a40:	ldrb.w	r0, [fp, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     a44:	add.w	r9, r9, #1
     a48:	add.w	sl, sl, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a4c:	subs	r0, r0, r2
     a4e:	adds	r0, #2
     a50:	bl	9aa4 <random(unsigned long)>
     a54:	ldrb.w	r2, [fp, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     a58:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a5a:	add.w	r3, r2, #4294967295
     a5e:	add	r0, r3
     a60:	str.w	r0, [sl, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     a64:	ble.n	a40 <init_B()+0x140>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     a66:	adds	r6, #1
     a68:	adds	r5, #4
     a6a:	cmp	r8, r6
     a6c:	bge.n	a34 <init_B()+0x134>
  fg_automaton_B.init();
  bg_automaton_B.init();
  grow_automaton_B.init_square();
  sat_automaton_B.init_square();
}
     a6e:	add	sp, #12
     a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a74:	ldrb	r1, [r6, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     a76:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a7a:	ldrb	r0, [r6, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     a7c:	ldr.w	r2, [fp]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a80:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     a82:	add	r2, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     a84:	adds	r0, #2
     a86:	ldrb.w	r8, [r2, r3]
     a8a:	bl	9aa4 <random(unsigned long)>
     a8e:	ldrb	r2, [r6, #7]
     a90:	rsb	r3, r2, r8
     a94:	adds	r3, #1
     a96:	subs	r0, r3, r0
     a98:	str	r0, [r5, #0]
     a9a:	b.n	98c <init_B()+0x8c>
     a9c:	ldrb.w	r1, [r9, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     aa0:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     aa4:	ldrb.w	r0, [r9, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     aa8:	ldr	r2, [r7, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     aaa:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     aac:	add	r2, r6
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     aae:	adds	r0, #2
     ab0:	ldrb.w	r8, [r2, r3]
     ab4:	bl	9aa4 <random(unsigned long)>
     ab8:	ldrb.w	r2, [r9, #7]
     abc:	rsb	r3, r2, r8
     ac0:	adds	r3, #1
     ac2:	subs	r0, r3, r0
     ac4:	str	r0, [r5, #0]
     ac6:	b.n	942 <init_B()+0x42>
     ac8:	.word	0x20008a28
     acc:	.word	0x2000af3c
     ad0:	.word	0x20013990
     ad4:	.word	0x20009f4c
     ad8:	.word	0x20014eb4
     adc:	.word	0x20010ef8
     ae0:	.word	0x2000af50

00000ae4 <setup>:


void setup() {
     ae4:	push	{r3, lr}
  Serial.begin(250000); //to be removed later
  delay(100);
     ae6:	movs	r0, #100	; 0x64
     ae8:	bl	975c <delay>
  synapse_A.begin();
     aec:	ldr	r0, [pc, #56]	; (b28 <setup+0x44>)
     aee:	bl	9120 <Adafruit_NeoPixel::begin()>
  delay(100);
     af2:	movs	r0, #100	; 0x64
     af4:	bl	975c <delay>
  synapse_B.begin();
     af8:	ldr	r0, [pc, #48]	; (b2c <setup+0x48>)
     afa:	bl	9120 <Adafruit_NeoPixel::begin()>
  delay(100);
     afe:	movs	r0, #100	; 0x64
     b00:	bl	975c <delay>
  randomSeed(analogRead(17));
     b04:	movs	r0, #17
     b06:	bl	9870 <analogRead>
     b0a:	bl	9a98 <randomSeed(unsigned long)>
  init_A();
     b0e:	bl	71c <init_A()>
  delay(100);
     b12:	movs	r0, #100	; 0x64
     b14:	bl	975c <delay>
  init_B();
     b18:	bl	900 <init_B()>
  delay(100);
     b1c:	movs	r0, #100	; 0x64
}
     b1e:	ldmia.w	sp!, {r3, lr}
  delay(100);
  randomSeed(analogRead(17));
  init_A();
  delay(100);
  init_B();
  delay(100);
     b22:	b.w	975c <delay>
     b26:	nop
     b28:	.word	0x2000f990
     b2c:	.word	0x2000f9a4

00000b30 <loop>:
}


int i = 0;
void loop() {
     b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  i = (i + 1) % NUM_LEDS_SYNAPSE;
     b34:	ldr	r4, [pc, #660]	; (dcc <loop+0x29c>)
  delay(100);
}


int i = 0;
void loop() {
     b36:	sub	sp, #84	; 0x54
  i = (i + 1) % NUM_LEDS_SYNAPSE;
     b38:	ldr	r0, [pc, #660]	; (dd0 <loop+0x2a0>)
     b3a:	ldr	r3, [r4, #0]
     b3c:	ldr	r2, [pc, #660]	; (dd4 <loop+0x2a4>)
     b3e:	adds	r3, #1
     b40:	ldr	r5, [r2, #0]
     b42:	smull	r0, r1, r3, r0
     b46:	asrs	r2, r3, #31
     b48:	adds	r0, r3, r1
  if (millis() >= nextTime1){
     b4a:	ldr	r1, [pc, #652]	; (dd8 <loop+0x2a8>)
}


int i = 0;
void loop() {
  i = (i + 1) % NUM_LEDS_SYNAPSE;
     b4c:	rsb	r2, r2, r0, asr #6
  if (millis() >= nextTime1){
     b50:	ldr	r1, [r1, #0]
}


int i = 0;
void loop() {
  i = (i + 1) % NUM_LEDS_SYNAPSE;
     b52:	rsb	r2, r2, r2, lsl #4
  if (millis() >= nextTime1){
     b56:	cmp	r1, r5
}


int i = 0;
void loop() {
  i = (i + 1) % NUM_LEDS_SYNAPSE;
     b58:	sub.w	r3, r3, r2, lsl #3
     b5c:	str	r3, [r4, #0]
  if (millis() >= nextTime1){
     b5e:	bls.w	faa <loop+0x47a>
     b62:	ldr	r3, [pc, #624]	; (dd4 <loop+0x2a4>)
     b64:	ldr	r2, [r3, #0]
      bg_automaton_B.init();
    }
    nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
  } 
  
  if (millis() >= nextTime2){
     b66:	ldr	r3, [pc, #628]	; (ddc <loop+0x2ac>)
     b68:	ldr	r3, [r3, #0]
     b6a:	cmp	r2, r3
     b6c:	bcc.w	e8c <loop+0x35c>
     b70:	ldr	r3, [pc, #620]	; (de0 <loop+0x2b0>)
     b72:	add.w	r1, r3, #2704	; 0xa90
     b76:	sub.w	r2, r3, #104	; 0x68
     b7a:	b.n	b82 <loop+0x52>
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
     b7c:	cmp	r2, r3
     b7e:	beq.w	199e <loop+0xe6e>
        if (cells[x][y] != 0) {
     b82:	ldr.w	r0, [r2, #4]!
     b86:	cmp	r0, #0
     b88:	beq.n	b7c <loop+0x4c>
     b8a:	ldr.w	r9, [pc, #616]	; df4 <loop+0x2c4>
     b8e:	ldr	r3, [pc, #596]	; (de4 <loop+0x2b4>)
     b90:	add.w	r1, r3, #2704	; 0xa90
     b94:	sub.w	r2, r3, #104	; 0x68
     b98:	b.n	ba0 <loop+0x70>
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
     b9a:	cmp	r3, r2
     b9c:	beq.w	191e <loop+0xdee>
        if (cells[x][y] != 0) {
     ba0:	ldr.w	r0, [r2, #4]!
     ba4:	cmp	r0, #0
     ba6:	beq.n	b9a <loop+0x6a>
     ba8:	ldr.w	sl, [pc, #588]	; df8 <loop+0x2c8>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     bac:	add.w	r8, sp, #48	; 0x30
     bb0:	movs	r2, #32
     bb2:	movs	r1, #0
     bb4:	mov.w	fp, #26
     bb8:	mov	r0, r8
     bba:	bl	b7c8 <memset>
     bbe:	ldr.w	r3, [r9]
     bc2:	ldr.w	ip, [pc, #568]	; dfc <loop+0x2cc>
     bc6:	str	r3, [sp, #16]
     bc8:	ldrb.w	r3, [r9, #6]
     bcc:	str.w	sl, [sp, #36]	; 0x24
     bd0:	str	r3, [sp, #12]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     bd2:	movs	r3, #2
     bd4:	str	r3, [sp, #4]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     bd6:	ldrb.w	r3, [r9, #5]
     bda:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     bdc:	ldrb.w	r3, [r9, #4]
     be0:	str	r3, [sp, #24]
     be2:	ldr	r3, [pc, #516]	; (de8 <loop+0x2b8>)
     be4:	str	r3, [sp, #32]
     be6:	ldr	r2, [sp, #32]
     be8:	mov.w	sl, #4294967295
     bec:	subw	r3, r2, #2708	; 0xa94
     bf0:	str	r2, [sp, #0]
     bf2:	str	r3, [sp, #8]
     bf4:	ldr	r3, [sp, #4]
     bf6:	subs	r3, #3
     bf8:	str	r3, [sp, #20]
     bfa:	ldr	r6, [sp, #20]
     bfc:	mov	lr, r8
     bfe:	add.w	r7, sl, #3
     c02:	smull	r3, r2, ip, r6
     c06:	asrs	r3, r6, #31
     c08:	mov	r5, lr
     c0a:	mov	r0, sl
     c0c:	rsb	r3, r3, r2, asr #3
     c10:	mls	r3, fp, r3, r6
     c14:	adds	r3, #26
     c16:	smull	r2, r4, ip, r3
     c1a:	asrs	r2, r3, #31
     c1c:	rsb	r4, r2, r4, asr #3
     c20:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     c24:	mul.w	r4, fp, r4
     c28:	smull	r3, r1, ip, r0
     c2c:	asrs	r3, r0, #31
     c2e:	rsb	r3, r3, r1, asr #3
     c32:	mls	r3, fp, r3, r0
     c36:	adds	r0, #1
     c38:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     c3c:	cmp	r7, r0
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     c3e:	smull	r2, r3, ip, r1
     c42:	mov.w	r2, r1, asr #31
     c46:	rsb	r3, r2, r3, asr #3
     c4a:	mls	r3, fp, r3, r1
     c4e:	add	r3, r4
     c50:	add.w	r3, r3, #6
     c54:	ldr.w	r3, [r9, r3, lsl #2]
     c58:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     c5c:	bne.n	c28 <loop+0xf8>
     c5e:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
     c60:	ldr	r3, [sp, #4]
     c62:	add.w	lr, lr, #12
     c66:	cmp	r3, r6
     c68:	bne.n	c02 <loop+0xd2>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     c6a:	ldr	r3, [sp, #8]
     c6c:	movs	r1, #1
     c6e:	ldr.w	r5, [r3, #4]!
     c72:	str	r3, [sp, #8]
     c74:	ldr	r3, [sp, #16]
     c76:	adds	r4, r5, r3
     c78:	movs	r0, #0
     c7a:	mov	r3, r0
     c7c:	b.n	c84 <loop+0x154>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     c7e:	adds	r3, #1
     c80:	cmp	r3, #8
     c82:	beq.n	c98 <loop+0x168>
          if ((i >> j) % 2 == 1){
     c84:	asr.w	r2, r1, r3
     c88:	lsls	r6, r2, #31
     c8a:	bpl.n	c7e <loop+0x14e>
            sum += neighbours[j];
     c8c:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     c90:	adds	r3, #1
     c92:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     c94:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     c96:	bne.n	c84 <loop+0x154>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     c98:	cmp	r4, r0
     c9a:	beq.w	1a14 <loop+0xee4>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     c9e:	adds	r1, #1
     ca0:	cmp.w	r1, #256	; 0x100
     ca4:	bne.n	c78 <loop+0x148>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     ca6:	ldr	r3, [sp, #28]
     ca8:	subs	r5, r5, r3
     caa:	ldr	r3, [sp, #0]
     cac:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
     cae:	ldr	r2, [sp, #12]
     cb0:	cmp	r2, r5
     cb2:	ble.n	cba <loop+0x18a>
            nextCells[x][y] = _floorInit;
     cb4:	ldr	r3, [sp, #0]
     cb6:	mov	r1, r3
     cb8:	str	r2, [r1, #0]
     cba:	ldr	r3, [sp, #0]
     cbc:	add.w	sl, sl, #1
     cc0:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     cc2:	cmp.w	sl, #25
     cc6:	str	r3, [sp, #0]
     cc8:	bne.n	bfa <loop+0xca>
     cca:	ldr	r3, [sp, #4]
     ccc:	ldr	r2, [sp, #32]
     cce:	adds	r3, #1
     cd0:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     cd2:	cmp	r3, #28
     cd4:	str	r3, [sp, #4]
     cd6:	str	r2, [sp, #32]
     cd8:	bne.n	be6 <loop+0xb6>
     cda:	ldr	r4, [pc, #272]	; (dec <loop+0x2bc>)
     cdc:	ldr.w	sl, [sp, #36]	; 0x24
     ce0:	add.w	r5, r4, #2704	; 0xa90
     ce4:	sub.w	r3, r4, #2704	; 0xa90
     ce8:	subw	r0, r4, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     cec:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     cee:	ldr.w	r1, [r2, #4]!
     cf2:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     cf6:	cmp	r0, r3
     cf8:	bne.n	cee <loop+0x1be>
     cfa:	adds	r4, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     cfc:	cmp	r5, r4
     cfe:	bne.n	ce4 <loop+0x1b4>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     d00:	movs	r2, #32
     d02:	movs	r1, #0
     d04:	mov	r0, r8
     d06:	mov.w	fp, #26
     d0a:	bl	b7c8 <memset>
     d0e:	ldr.w	r3, [sl]
     d12:	ldr.w	r9, [pc, #232]	; dfc <loop+0x2cc>
     d16:	str	r3, [sp, #16]
     d18:	ldrb.w	r3, [sl, #6]
     d1c:	str	r3, [sp, #12]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     d1e:	movs	r3, #2
     d20:	str	r3, [sp, #4]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     d22:	ldrb.w	r3, [sl, #5]
     d26:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     d28:	ldrb.w	r3, [sl, #4]
     d2c:	str	r3, [sp, #24]
     d2e:	ldr	r3, [pc, #192]	; (df0 <loop+0x2c0>)
     d30:	str	r3, [sp, #32]
     d32:	ldr	r2, [sp, #32]
     d34:	mov.w	ip, #4294967295
     d38:	subw	r3, r2, #2708	; 0xa94
     d3c:	str	r2, [sp, #0]
     d3e:	str	r3, [sp, #8]
     d40:	ldr	r3, [sp, #4]
     d42:	subs	r3, #3
     d44:	str	r3, [sp, #20]
     d46:	ldr	r6, [sp, #20]
     d48:	mov	lr, r8
     d4a:	add.w	r7, ip, #3
     d4e:	smull	r3, r2, r9, r6
     d52:	asrs	r3, r6, #31
     d54:	mov	r5, lr
     d56:	mov	r0, ip
     d58:	rsb	r3, r3, r2, asr #3
     d5c:	mls	r3, fp, r3, r6
     d60:	adds	r3, #26
     d62:	smull	r2, r4, r9, r3
     d66:	asrs	r2, r3, #31
     d68:	rsb	r4, r2, r4, asr #3
     d6c:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     d70:	mul.w	r4, fp, r4
     d74:	smull	r3, r1, r9, r0
     d78:	asrs	r3, r0, #31
     d7a:	rsb	r3, r3, r1, asr #3
     d7e:	mls	r3, fp, r3, r0
     d82:	adds	r0, #1
     d84:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     d88:	cmp	r7, r0
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     d8a:	smull	r2, r3, r9, r1
     d8e:	mov.w	r2, r1, asr #31
     d92:	rsb	r3, r2, r3, asr #3
     d96:	mls	r3, fp, r3, r1
     d9a:	add	r3, r4
     d9c:	add.w	r3, r3, #6
     da0:	ldr.w	r3, [sl, r3, lsl #2]
     da4:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     da8:	bne.n	d74 <loop+0x244>
     daa:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
     dac:	ldr	r3, [sp, #4]
     dae:	add.w	lr, lr, #12
     db2:	cmp	r3, r6
     db4:	bne.n	d4e <loop+0x21e>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     db6:	ldr	r3, [sp, #8]
     db8:	movs	r1, #1
     dba:	ldr.w	r5, [r3, #4]!
     dbe:	str	r3, [sp, #8]
     dc0:	ldr	r3, [sp, #16]
     dc2:	adds	r4, r5, r3
     dc4:	movs	r0, #0
     dc6:	mov	r3, r0
     dc8:	b.n	e06 <loop+0x2d6>
     dca:	nop
     dcc:	.word	0x2000e440
     dd0:	.word	0x88888889
     dd4:	.word	0x20014f80
     dd8:	.word	0x2000e444
     ddc:	.word	0x2000e448
     de0:	.word	0x2000fa34
     de4:	.word	0x20010f74
     de8:	.word	0x20010460
     dec:	.word	0x2001045c
     df0:	.word	0x200119a0
     df4:	.word	0x2000f9b8
     df8:	.word	0x20010ef8
     dfc:	.word	0x4ec4ec4f

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     e00:	adds	r3, #1
     e02:	cmp	r3, #8
     e04:	beq.n	e1a <loop+0x2ea>
          if ((i >> j) % 2 == 1){
     e06:	asr.w	r2, r1, r3
     e0a:	lsls	r2, r2, #31
     e0c:	bpl.n	e00 <loop+0x2d0>
            sum += neighbours[j];
     e0e:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     e12:	adds	r3, #1
     e14:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     e16:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     e18:	bne.n	e06 <loop+0x2d6>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     e1a:	cmp	r4, r0
     e1c:	beq.w	1a20 <loop+0xef0>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     e20:	adds	r1, #1
     e22:	cmp.w	r1, #256	; 0x100
     e26:	bne.n	dc4 <loop+0x294>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     e28:	ldr	r3, [sp, #28]
     e2a:	subs	r5, r5, r3
     e2c:	ldr	r3, [sp, #0]
     e2e:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
     e30:	ldr	r2, [sp, #12]
     e32:	cmp	r2, r5
     e34:	ble.n	e3c <loop+0x30c>
            nextCells[x][y] = _floorInit;
     e36:	ldr	r3, [sp, #0]
     e38:	mov	r1, r3
     e3a:	str	r2, [r1, #0]
     e3c:	ldr	r3, [sp, #0]
     e3e:	add.w	ip, ip, #1
     e42:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     e44:	cmp.w	ip, #25
     e48:	str	r3, [sp, #0]
     e4a:	bne.w	d46 <loop+0x216>
     e4e:	ldr	r3, [sp, #4]
     e50:	ldr	r2, [sp, #32]
     e52:	adds	r3, #1
     e54:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     e56:	cmp	r3, #28
     e58:	str	r3, [sp, #4]
     e5a:	str	r2, [sp, #32]
     e5c:	bne.w	d32 <loop+0x202>
     e60:	ldr	r4, [pc, #568]	; (109c <loop+0x56c>)
     e62:	add.w	r5, r4, #2704	; 0xa90
     e66:	sub.w	r3, r4, #2704	; 0xa90
     e6a:	subw	r0, r4, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     e6e:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     e70:	ldr.w	r1, [r2, #4]!
     e74:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     e78:	cmp	r0, r3
     e7a:	bne.n	e70 <loop+0x340>
     e7c:	adds	r4, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     e7e:	cmp	r5, r4
     e80:	bne.n	e66 <loop+0x336>
     e82:	ldr	r3, [pc, #540]	; (10a0 <loop+0x570>)

    grow_automaton_A.iterate_growth();
    grow_automaton_B.iterate_growth();

 
    nextTime2 = millis() + (1000/FRAMERATE_GROW);  
     e84:	ldr	r2, [pc, #540]	; (10a4 <loop+0x574>)
     e86:	ldr	r3, [r3, #0]
     e88:	adds	r3, #100	; 0x64
     e8a:	str	r3, [r2, #0]
     e8c:	ldr	r3, [pc, #528]	; (10a0 <loop+0x570>)
  }

  if (millis() >= nextTime3){
     e8e:	ldr	r5, [pc, #536]	; (10a8 <loop+0x578>)
     e90:	ldr	r2, [r3, #0]
     e92:	ldr	r3, [r5, #0]
     e94:	cmp	r2, r3
     e96:	bcc.n	f90 <loop+0x460>
     e98:	movs	r0, #0
     e9a:	ldr	r6, [pc, #528]	; (10ac <loop+0x57c>)
     e9c:	vldr	s14, [pc, #528]	; 10b0 <loop+0x580>
//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     ea0:	movs	r7, #26
     ea2:	mov	r4, r0
     ea4:	mov	ip, r6
     ea6:	ldr.w	lr, [pc, #560]	; 10d8 <loop+0x5a8>
     eaa:	vldr	s15, [pc, #520]	; 10b4 <loop+0x584>
     eae:	smull	r3, r1, lr, r4
     eb2:	mov.w	r8, r4, asr #31
     eb6:	asrs	r2, r1, #3
     eb8:	rsb	r3, r8, r2
     ebc:	mov	r2, r3
     ebe:	mls	r3, r7, r3, r4

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     ec2:	adds	r4, #1
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     ec4:	mla	r3, r7, r3, r2
     ec8:	add.w	r2, r3, #1352	; 0x548
    counter ++;
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     ecc:	add.w	r3, ip, r3, lsl #2
//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     ed0:	add.w	r2, r6, r2, lsl #2
     ed4:	vldr	s13, [r2]
     ed8:	vcmpe.f32	s13, s15
     edc:	vmrs	APSR_nzcv, fpscr
     ee0:	ble.n	eec <loop+0x3bc>
    counter ++;
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     ee2:	vldr	s13, [r3]
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
    counter ++;
     ee6:	adds	r0, #1
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     ee8:	vadd.f32	s14, s14, s13

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     eec:	cmp.w	r4, #676	; 0x2a4
     ef0:	bne.n	eae <loop+0x37e>
    // send_pulse_on(i, &synapse_A, 120);
    // send_pulse_on(i, &synapse_B, 120);
    // delay(500);
    // send_pulse_off(i, &synapse_A, 120);
    // send_pulse_off(i, &synapse_B, 120);
    send_pulse(&synapse_A, get_hue(&next_colors_A));
     ef2:	vmov	s15, r0
     ef6:	ldr	r0, [pc, #448]	; (10b8 <loop+0x588>)
     ef8:	ldr	r6, [pc, #448]	; (10bc <loop+0x58c>)
//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     efa:	movs	r7, #26
    // send_pulse_on(i, &synapse_A, 120);
    // send_pulse_on(i, &synapse_B, 120);
    // delay(500);
    // send_pulse_off(i, &synapse_A, 120);
    // send_pulse_off(i, &synapse_B, 120);
    send_pulse(&synapse_A, get_hue(&next_colors_A));
     efc:	vcvt.f32.s32	s15, s15
     f00:	vdiv.f32	s13, s14, s15
     f04:	vcvt.s32.f32	s15, s13
     f08:	vmov	r1, s15
     f0c:	bl	24c <send_pulse(Adafruit_NeoPixel*, int)>
    delay(10);
     f10:	movs	r0, #10
     f12:	bl	975c <delay>
}

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
     f16:	movs	r0, #0
  return val;
}

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
     f18:	vldr	s14, [pc, #404]	; 10b0 <loop+0x580>
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     f1c:	mov	ip, r6

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     f1e:	mov	r4, r0
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     f20:	ldr.w	lr, [pc, #436]	; 10d8 <loop+0x5a8>
     f24:	vldr	s15, [pc, #396]	; 10b4 <loop+0x584>
     f28:	smull	r3, r1, lr, r4
     f2c:	mov.w	r8, r4, asr #31
     f30:	asrs	r2, r1, #3
     f32:	rsb	r3, r8, r2
     f36:	mov	r2, r3
     f38:	mls	r3, r7, r3, r4

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     f3c:	adds	r4, #1
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     f3e:	mla	r3, r7, r3, r2
     f42:	add.w	r2, r3, #1352	; 0x548
    counter ++;
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     f46:	add.w	r3, ip, r3, lsl #2
//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
     f4a:	add.w	r2, r6, r2, lsl #2
     f4e:	vldr	s13, [r2]
     f52:	vcmpe.f32	s13, s15
     f56:	vmrs	APSR_nzcv, fpscr
     f5a:	ble.n	f66 <loop+0x436>
    counter ++;
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     f5c:	vldr	s13, [r3]
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
    if((*nextColors).bri[i%SIZE_SCREEN][int(i/SIZE_SCREEN)] > 50){
    counter ++;
     f60:	adds	r0, #1
    avg_hue += (*nextColors).hue[i%SIZE_SCREEN][int(i/SIZE_SCREEN)];
     f62:	vadd.f32	s14, s14, s13

//TEST FUNCTION
int get_hue(nextCol * nextColors){
  float avg_hue = 0;
  int counter = 0;
  for(int i = 0; i < NUM_LEDS_SCREEN; i++){
     f66:	cmp.w	r4, #676	; 0x2a4
     f6a:	bne.n	f28 <loop+0x3f8>
    // delay(500);
    // send_pulse_off(i, &synapse_A, 120);
    // send_pulse_off(i, &synapse_B, 120);
    send_pulse(&synapse_A, get_hue(&next_colors_A));
    delay(10);
    send_pulse(&synapse_B, get_hue(&next_colors_B));
     f6c:	vmov	s15, r0
     f70:	ldr	r0, [pc, #332]	; (10c0 <loop+0x590>)
     f72:	vcvt.f32.s32	s15, s15
     f76:	vdiv.f32	s13, s14, s15
     f7a:	vcvt.s32.f32	s15, s13
     f7e:	vmov	r1, s15
     f82:	bl	24c <send_pulse(Adafruit_NeoPixel*, int)>
     f86:	ldr	r3, [pc, #280]	; (10a0 <loop+0x570>)
     f88:	ldr	r3, [r3, #0]
    nextTime3 = millis() + (1000/FRAMERATE_PULSES);  
     f8a:	add.w	r3, r3, #1000	; 0x3e8
     f8e:	str	r3, [r5, #0]
  }

  //test_screen();
  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
     f90:	ldr	r2, [pc, #304]	; (10c4 <loop+0x594>)
     f92:	ldr	r1, [pc, #308]	; (10c8 <loop+0x598>)
     f94:	ldr	r0, [pc, #276]	; (10ac <loop+0x57c>)
     f96:	bl	624 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
     f9a:	ldr	r2, [pc, #304]	; (10cc <loop+0x59c>)
     f9c:	ldr	r1, [pc, #304]	; (10d0 <loop+0x5a0>)
     f9e:	ldr	r0, [pc, #284]	; (10bc <loop+0x58c>)
   
}
     fa0:	add	sp, #84	; 0x54
     fa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nextTime3 = millis() + (1000/FRAMERATE_PULSES);  
  }

  //test_screen();
  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
     fa6:	b.w	624 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     faa:	add.w	r8, sp, #48	; 0x30
     fae:	movs	r2, #32
     fb0:	movs	r1, #0
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     fb2:	mov.w	sl, #2
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     fb6:	mov	r0, r8
     fb8:	mov.w	r9, #26
     fbc:	bl	b7c8 <memset>
     fc0:	ldr	r2, [pc, #272]	; (10d4 <loop+0x5a4>)
     fc2:	movw	r3, #5436	; 0x153c
     fc6:	ldr.w	fp, [pc, #272]	; 10d8 <loop+0x5a8>
     fca:	ldrb	r2, [r2, #9]
     fcc:	str	r2, [sp, #20]
     fce:	ldr	r2, [pc, #260]	; (10d4 <loop+0x5a4>)
     fd0:	add.w	r2, r2, #2832	; 0xb10
     fd4:	str	r2, [sp, #16]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     fd6:	sub.w	r2, r2, #2832	; 0xb10
     fda:	ldr	r2, [r2, #0]
     fdc:	str	r2, [sp, #28]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     fde:	ldr	r2, [pc, #244]	; (10d4 <loop+0x5a4>)
     fe0:	ldrb	r2, [r2, #5]
     fe2:	str	r2, [sp, #40]	; 0x28
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     fe4:	ldr	r2, [pc, #236]	; (10d4 <loop+0x5a4>)
     fe6:	ldrb	r2, [r2, #4]
     fe8:	str	r2, [sp, #36]	; 0x24
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     fea:	ldr	r2, [pc, #232]	; (10d4 <loop+0x5a4>)
     fec:	ldrb	r2, [r2, #6]
     fee:	str	r2, [sp, #32]
     ff0:	ldr	r2, [pc, #224]	; (10d4 <loop+0x5a4>)
     ff2:	ldr	r3, [r2, r3]
     ff4:	str	r3, [sp, #24]
     ff6:	ldr	r2, [sp, #16]
     ff8:	movs	r7, #2
     ffa:	subw	r3, r2, #2808	; 0xaf8
     ffe:	sub.w	ip, r2, #104	; 0x68
    1002:	str	r3, [sp, #4]
    1004:	ldr	r3, [sp, #24]
    1006:	str	r3, [sp, #8]
    1008:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    100a:	ldr	r3, [sp, #20]
    100c:	cmp	r3, #0
    100e:	beq.w	1906 <loop+0xdd6>
      return _background[x][y];
    1012:	ldr	r3, [sp, #0]
    1014:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    1016:	cmp	r3, #0
    1018:	beq.n	1116 <loop+0x5e6>
    101a:	subs	r3, r7, #3
    101c:	sub.w	r6, sl, #3
    1020:	mov	lr, r8
    1022:	str	r3, [sp, #12]
    1024:	smull	r3, r2, fp, r6
    1028:	asrs	r3, r6, #31
    102a:	ldr	r0, [sp, #12]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    102c:	mov	r5, lr
    102e:	rsb	r3, r3, r2, asr #3
    1032:	mls	r3, r9, r3, r6
    1036:	adds	r3, #26
    1038:	smull	r2, r4, fp, r3
    103c:	asrs	r2, r3, #31
    103e:	rsb	r4, r2, r4, asr #3
    1042:	mls	r4, r9, r4, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1046:	mul.w	r4, r9, r4
    104a:	smull	r3, r1, fp, r0
    104e:	asrs	r3, r0, #31
    1050:	rsb	r3, r3, r1, asr #3
    1054:	mls	r3, r9, r3, r0
    1058:	adds	r0, #1
    105a:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    105e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1060:	smull	r2, r3, fp, r1
    1064:	mov.w	r2, r1, asr #31
    1068:	rsb	r3, r2, r3, asr #3
    106c:	ldr	r2, [pc, #100]	; (10d4 <loop+0x5a4>)
    106e:	mls	r3, r9, r3, r1
    1072:	add	r3, r4
    1074:	add.w	r3, r3, #6
    1078:	ldr.w	r3, [r2, r3, lsl #2]
    107c:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1080:	bne.n	104a <loop+0x51a>
    1082:	adds	r6, #1
    1084:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1088:	cmp	sl, r6
    108a:	bne.n	1024 <loop+0x4f4>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    108c:	ldr	r3, [sp, #4]
    108e:	movs	r1, #1
    1090:	ldr	r5, [r3, #0]
    1092:	ldr	r3, [sp, #28]
    1094:	adds	r4, r3, r5
    1096:	movs	r0, #0
    1098:	mov	r3, r0
    109a:	b.n	10e2 <loop+0x5b2>
    109c:	.word	0x2001199c
    10a0:	.word	0x20014f80
    10a4:	.word	0x2000e448
    10a8:	.word	0x2000e44c
    10ac:	.word	0x2000356c
    10b0:	.word	0x00000000
    10b4:	.word	0x42480000
    10b8:	.word	0x2000f990
    10bc:	.word	0x2000551c
    10c0:	.word	0x2000f9a4
    10c4:	.word	0x2000af28
    10c8:	.word	0x2000c490
    10cc:	.word	0x2000af3c
    10d0:	.word	0x200015bc
    10d4:	.word	0x200074d0
    10d8:	.word	0x4ec4ec4f

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    10dc:	adds	r3, #1
    10de:	cmp	r3, #8
    10e0:	beq.n	10f6 <loop+0x5c6>
          if ((i >> j) % 2 == 1){
    10e2:	asr.w	r2, r1, r3
    10e6:	lsls	r6, r2, #31
    10e8:	bpl.n	10dc <loop+0x5ac>
            sum += neighbours[j];
    10ea:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    10ee:	adds	r3, #1
    10f0:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    10f2:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    10f4:	bne.n	10e2 <loop+0x5b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    10f6:	cmp	r4, r0
    10f8:	beq.w	1912 <loop+0xde2>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    10fc:	adds	r1, #1
    10fe:	cmp.w	r1, #256	; 0x100
    1102:	bne.n	1096 <loop+0x566>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1104:	ldr	r3, [sp, #40]	; 0x28
    1106:	subs	r5, r5, r3
    1108:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    110c:	ldr	r2, [sp, #32]
    110e:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
    1110:	it	gt
    1112:	strgt.w	r2, [ip]
    1116:	ldr	r3, [sp, #4]
    1118:	add.w	ip, ip, #4
    111c:	adds	r7, #1
    111e:	adds	r3, #4
    1120:	str	r3, [sp, #4]
    1122:	ldr	r3, [sp, #0]
    1124:	adds	r3, #1
    1126:	str	r3, [sp, #0]
    1128:	ldr	r3, [sp, #8]
    112a:	adds	r3, #1
    112c:	str	r3, [sp, #8]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    112e:	ldr	r3, [sp, #16]
    1130:	cmp	r3, ip
    1132:	bne.w	100a <loop+0x4da>
    1136:	adds	r3, #104	; 0x68
    1138:	add.w	sl, sl, #1
    113c:	str	r3, [sp, #16]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    113e:	cmp.w	sl, #28
    1142:	ldr	r3, [sp, #24]
    1144:	add.w	r3, r3, #26
    1148:	str	r3, [sp, #24]
    114a:	bne.w	ff6 <loop+0x4c6>
    114e:	ldr	r1, [pc, #624]	; (13c0 <loop+0x890>)
    1150:	add.w	r5, r1, #2704	; 0xa90
    1154:	sub.w	r3, r1, #2704	; 0xa90
    1158:	subw	r4, r1, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    115c:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    115e:	ldr.w	r0, [r2, #4]!
    1162:	str.w	r0, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1166:	cmp	r3, r4
    1168:	bne.n	115e <loop+0x62e>
    116a:	adds	r1, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    116c:	cmp	r1, r5
    116e:	bne.n	1154 <loop+0x624>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1170:	movs	r2, #32
    1172:	movs	r1, #0
    1174:	mov	r0, r8
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1176:	mov.w	sl, #2
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    117a:	bl	b7c8 <memset>
    117e:	ldr	r2, [pc, #580]	; (13c4 <loop+0x894>)
    1180:	movw	r3, #5436	; 0x153c
    1184:	mov.w	r9, #26
    1188:	ldrb	r2, [r2, #9]
    118a:	ldr.w	fp, [pc, #576]	; 13cc <loop+0x89c>
    118e:	str	r2, [sp, #20]
    1190:	ldr	r2, [pc, #560]	; (13c4 <loop+0x894>)
    1192:	add.w	r2, r2, #2832	; 0xb10
    1196:	str	r2, [sp, #16]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1198:	sub.w	r2, r2, #2832	; 0xb10
    119c:	ldr	r2, [r2, #0]
    119e:	str	r2, [sp, #28]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    11a0:	ldr	r2, [pc, #544]	; (13c4 <loop+0x894>)
    11a2:	ldrb	r2, [r2, #5]
    11a4:	str	r2, [sp, #40]	; 0x28
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    11a6:	ldr	r2, [pc, #540]	; (13c4 <loop+0x894>)
    11a8:	ldrb	r2, [r2, #4]
    11aa:	str	r2, [sp, #36]	; 0x24
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    11ac:	ldr	r2, [pc, #532]	; (13c4 <loop+0x894>)
    11ae:	ldrb	r2, [r2, #6]
    11b0:	str	r2, [sp, #32]
    11b2:	ldr	r2, [pc, #528]	; (13c4 <loop+0x894>)
    11b4:	ldr	r3, [r2, r3]
    11b6:	str	r3, [sp, #24]
    11b8:	ldr	r2, [sp, #16]
    11ba:	movs	r7, #2
    11bc:	subw	r3, r2, #2808	; 0xaf8
    11c0:	sub.w	ip, r2, #104	; 0x68
    11c4:	str	r3, [sp, #8]
    11c6:	ldr	r3, [sp, #24]
    11c8:	str	r3, [sp, #0]
    11ca:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    11cc:	ldr	r3, [sp, #20]
    11ce:	cmp	r3, #0
    11d0:	beq.w	1a2c <loop+0xefc>
      return _background[x][y];
    11d4:	ldr	r3, [sp, #4]
    11d6:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    11d8:	cmp	r3, #0
    11da:	beq.n	1298 <loop+0x768>
    11dc:	subs	r3, r7, #3
    11de:	sub.w	r6, sl, #3
    11e2:	mov	lr, r8
    11e4:	str	r3, [sp, #12]
    11e6:	smull	r3, r2, fp, r6
    11ea:	asrs	r3, r6, #31
    11ec:	ldr	r0, [sp, #12]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    11ee:	mov	r5, lr
    11f0:	rsb	r3, r3, r2, asr #3
    11f4:	mls	r3, r9, r3, r6
    11f8:	adds	r3, #26
    11fa:	smull	r2, r4, fp, r3
    11fe:	asrs	r2, r3, #31
    1200:	rsb	r4, r2, r4, asr #3
    1204:	mls	r4, r9, r4, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1208:	mul.w	r4, r9, r4
    120c:	smull	r3, r1, fp, r0
    1210:	asrs	r3, r0, #31
    1212:	rsb	r3, r3, r1, asr #3
    1216:	mls	r3, r9, r3, r0
    121a:	adds	r0, #1
    121c:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1220:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1222:	smull	r2, r3, fp, r1
    1226:	mov.w	r2, r1, asr #31
    122a:	rsb	r3, r2, r3, asr #3
    122e:	ldr	r2, [pc, #404]	; (13c4 <loop+0x894>)
    1230:	mls	r3, r9, r3, r1
    1234:	add	r3, r4
    1236:	add.w	r3, r3, #6
    123a:	ldr.w	r3, [r2, r3, lsl #2]
    123e:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1242:	bne.n	120c <loop+0x6dc>
    1244:	adds	r6, #1
    1246:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    124a:	cmp	sl, r6
    124c:	bne.n	11e6 <loop+0x6b6>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    124e:	ldr	r3, [sp, #8]
    1250:	movs	r1, #1
    1252:	ldr	r5, [r3, #0]
    1254:	ldr	r3, [sp, #28]
    1256:	adds	r4, r3, r5
    1258:	movs	r0, #0
    125a:	mov	r3, r0
    125c:	b.n	1264 <loop+0x734>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    125e:	adds	r3, #1
    1260:	cmp	r3, #8
    1262:	beq.n	1278 <loop+0x748>
          if ((i >> j) % 2 == 1){
    1264:	asr.w	r2, r1, r3
    1268:	lsls	r2, r2, #31
    126a:	bpl.n	125e <loop+0x72e>
            sum += neighbours[j];
    126c:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1270:	adds	r3, #1
    1272:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1274:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1276:	bne.n	1264 <loop+0x734>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1278:	cmp	r4, r0
    127a:	beq.w	1a38 <loop+0xf08>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    127e:	adds	r1, #1
    1280:	cmp.w	r1, #256	; 0x100
    1284:	bne.n	1258 <loop+0x728>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1286:	ldr	r3, [sp, #40]	; 0x28
    1288:	subs	r5, r5, r3
    128a:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    128e:	ldr	r2, [sp, #32]
    1290:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
    1292:	it	gt
    1294:	strgt.w	r2, [ip]
    1298:	ldr	r3, [sp, #8]
    129a:	add.w	ip, ip, #4
    129e:	adds	r7, #1
    12a0:	adds	r3, #4
    12a2:	str	r3, [sp, #8]
    12a4:	ldr	r3, [sp, #4]
    12a6:	adds	r3, #1
    12a8:	str	r3, [sp, #4]
    12aa:	ldr	r3, [sp, #0]
    12ac:	adds	r3, #1
    12ae:	str	r3, [sp, #0]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    12b0:	ldr	r3, [sp, #16]
    12b2:	cmp	r3, ip
    12b4:	bne.n	11cc <loop+0x69c>
    12b6:	adds	r3, #104	; 0x68
    12b8:	add.w	sl, sl, #1
    12bc:	str	r3, [sp, #16]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    12be:	cmp.w	sl, #28
    12c2:	ldr	r3, [sp, #24]
    12c4:	add.w	r3, r3, #26
    12c8:	str	r3, [sp, #24]
    12ca:	bne.w	11b8 <loop+0x688>
    12ce:	ldr	r1, [pc, #248]	; (13c8 <loop+0x898>)
    12d0:	add.w	r5, r1, #2704	; 0xa90
    12d4:	sub.w	r3, r1, #2704	; 0xa90
    12d8:	subw	r4, r1, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    12dc:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    12de:	ldr.w	r0, [r2, #4]!
    12e2:	str.w	r0, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    12e6:	cmp	r4, r3
    12e8:	bne.n	12de <loop+0x7ae>
    12ea:	adds	r1, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    12ec:	cmp	r5, r1
    12ee:	bne.n	12d4 <loop+0x7a4>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    12f0:	movs	r2, #32
    12f2:	movs	r1, #0
    12f4:	mov	r0, r8
    12f6:	ldr.w	sl, [pc, #216]	; 13d0 <loop+0x8a0>
    12fa:	bl	b7c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    12fe:	movs	r3, #2
    1300:	ldr.w	r9, [pc, #200]	; 13cc <loop+0x89c>
    1304:	mov.w	fp, #26
    1308:	str	r3, [sp, #0]
    130a:	ldr.w	r3, [sl]
    130e:	str	r3, [sp, #12]
    1310:	addw	r3, sl, #2728	; 0xaa8
    1314:	str	r3, [sp, #24]
    1316:	ldrb.w	r3, [sl, #6]
    131a:	str	r3, [sp, #16]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    131c:	ldrb.w	r3, [sl, #5]
    1320:	str	r3, [sp, #32]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1322:	ldrb.w	r3, [sl, #4]
    1326:	str	r3, [sp, #28]
    1328:	ldr	r2, [sp, #24]
    132a:	mov.w	ip, #4294967295
    132e:	subw	r3, r2, #2708	; 0xa94
    1332:	str	r2, [sp, #4]
    1334:	str	r3, [sp, #8]
    1336:	ldr	r3, [sp, #0]
    1338:	subs	r3, #3
    133a:	str	r3, [sp, #20]
    133c:	ldr	r6, [sp, #20]
    133e:	mov	lr, r8
    1340:	add.w	r7, ip, #3
    1344:	smull	r3, r2, r9, r6
    1348:	asrs	r3, r6, #31
    134a:	mov	r5, lr
    134c:	mov	r0, ip
    134e:	rsb	r3, r3, r2, asr #3
    1352:	mls	r3, fp, r3, r6
    1356:	adds	r3, #26
    1358:	smull	r2, r4, r9, r3
    135c:	asrs	r2, r3, #31
    135e:	rsb	r4, r2, r4, asr #3
    1362:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1366:	mul.w	r4, fp, r4
    136a:	smull	r3, r1, r9, r0
    136e:	asrs	r3, r0, #31
    1370:	rsb	r3, r3, r1, asr #3
    1374:	mls	r3, fp, r3, r0
    1378:	adds	r0, #1
    137a:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    137e:	cmp	r0, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1380:	smull	r2, r3, r9, r1
    1384:	mov.w	r2, r1, asr #31
    1388:	rsb	r3, r2, r3, asr #3
    138c:	mls	r3, fp, r3, r1
    1390:	add	r3, r4
    1392:	add.w	r3, r3, #6
    1396:	ldr.w	r3, [sl, r3, lsl #2]
    139a:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    139e:	bne.n	136a <loop+0x83a>
    13a0:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    13a2:	ldr	r3, [sp, #0]
    13a4:	add.w	lr, lr, #12
    13a8:	cmp	r3, r6
    13aa:	bne.n	1344 <loop+0x814>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    13ac:	ldr	r3, [sp, #8]
    13ae:	movs	r2, #1
    13b0:	ldr.w	r5, [r3, #4]!
    13b4:	str	r3, [sp, #8]
    13b6:	ldr	r3, [sp, #12]
    13b8:	adds	r4, r5, r3
    13ba:	movs	r0, #0
    13bc:	mov	r3, r0
    13be:	b.n	13da <loop+0x8aa>
    13c0:	.word	0x20007f74
    13c4:	.word	0x20012438
    13c8:	.word	0x20012edc
    13cc:	.word	0x4ec4ec4f
    13d0:	.word	0x2000e450

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    13d4:	adds	r3, #1
    13d6:	cmp	r3, #8
    13d8:	beq.n	13ee <loop+0x8be>
          if ((i >> j) % 2 == 1){
    13da:	asr.w	r1, r2, r3
    13de:	lsls	r7, r1, #31
    13e0:	bpl.n	13d4 <loop+0x8a4>
            sum += neighbours[j];
    13e2:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    13e6:	adds	r3, #1
    13e8:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    13ea:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    13ec:	bne.n	13da <loop+0x8aa>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    13ee:	cmp	r4, r0
    13f0:	beq.w	1a42 <loop+0xf12>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    13f4:	adds	r2, #1
    13f6:	cmp.w	r2, #256	; 0x100
    13fa:	bne.n	13ba <loop+0x88a>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    13fc:	ldr	r3, [sp, #32]
    13fe:	subs	r5, r5, r3
    1400:	ldr	r3, [sp, #4]
    1402:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    1404:	ldr	r2, [sp, #16]
    1406:	cmp	r2, r5
    1408:	ble.n	1410 <loop+0x8e0>
            nextCells[x][y] = _floorInit;
    140a:	ldr	r3, [sp, #4]
    140c:	mov	r1, r3
    140e:	str	r2, [r1, #0]
    1410:	ldr	r3, [sp, #4]
    1412:	add.w	ip, ip, #1
    1416:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1418:	cmp.w	ip, #25
    141c:	str	r3, [sp, #4]
    141e:	bne.n	133c <loop+0x80c>
    1420:	ldr	r3, [sp, #0]
    1422:	ldr	r2, [sp, #24]
    1424:	adds	r3, #1
    1426:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1428:	cmp	r3, #28
    142a:	str	r3, [sp, #0]
    142c:	str	r2, [sp, #24]
    142e:	bne.w	1328 <loop+0x7f8>
    1432:	ldr	r1, [pc, #656]	; (16c4 <loop+0xb94>)
    1434:	add.w	r5, r1, #2704	; 0xa90
    1438:	sub.w	r3, r1, #2704	; 0xa90
    143c:	subw	r4, r1, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1440:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1442:	ldr.w	r0, [r2, #4]!
    1446:	str.w	r0, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    144a:	cmp	r4, r3
    144c:	bne.n	1442 <loop+0x912>
    144e:	adds	r1, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1450:	cmp	r5, r1
    1452:	bne.n	1438 <loop+0x908>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1454:	movs	r2, #32
    1456:	movs	r1, #0
    1458:	mov	r0, r8
    145a:	ldr.w	r9, [pc, #624]	; 16cc <loop+0xb9c>
    145e:	bl	b7c8 <memset>
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1462:	movs	r2, #2
    1464:	movw	r3, #5436	; 0x153c
    1468:	mov.w	sl, #26
    146c:	str	r2, [sp, #0]
    146e:	ldrb.w	r2, [r9, #9]
    1472:	ldr.w	r3, [r9, r3]
    1476:	str	r2, [sp, #24]
    1478:	add.w	r2, r9, #2832	; 0xb10
    147c:	ldr.w	fp, [pc, #592]	; 16d0 <loop+0xba0>
    1480:	str	r2, [sp, #20]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1482:	ldr.w	r2, [r9]
    1486:	str	r3, [sp, #28]
    1488:	str	r2, [sp, #32]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    148a:	ldrb.w	r2, [r9, #5]
    148e:	str	r2, [sp, #44]	; 0x2c
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1490:	ldrb.w	r2, [r9, #4]
    1494:	str	r2, [sp, #40]	; 0x28
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1496:	ldrb.w	r2, [r9, #6]
    149a:	str	r2, [sp, #36]	; 0x24
    149c:	ldr	r2, [sp, #20]
    149e:	movs	r7, #2
    14a0:	subw	r3, r2, #2808	; 0xaf8
    14a4:	sub.w	ip, r2, #104	; 0x68
    14a8:	str	r3, [sp, #8]
    14aa:	ldr	r3, [sp, #28]
    14ac:	str	r3, [sp, #12]
    14ae:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    14b0:	ldr	r3, [sp, #24]
    14b2:	cmp	r3, #0
    14b4:	beq.w	1a4c <loop+0xf1c>
      return _background[x][y];
    14b8:	ldr	r3, [sp, #4]
    14ba:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    14bc:	cmp	r3, #0
    14be:	beq.n	157c <loop+0xa4c>
    14c0:	ldr	r3, [sp, #0]
    14c2:	mov	lr, r8
    14c4:	subs	r6, r3, #3
    14c6:	subs	r3, r7, #3
    14c8:	str	r3, [sp, #16]
    14ca:	smull	r3, r2, fp, r6
    14ce:	asrs	r3, r6, #31
    14d0:	ldr	r0, [sp, #16]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    14d2:	mov	r5, lr
    14d4:	rsb	r3, r3, r2, asr #3
    14d8:	mls	r3, sl, r3, r6
    14dc:	adds	r3, #26
    14de:	smull	r2, r1, fp, r3
    14e2:	asrs	r2, r3, #31
    14e4:	rsb	r2, r2, r1, asr #3
    14e8:	mls	r2, sl, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    14ec:	mul.w	r4, sl, r2
    14f0:	smull	r3, r1, fp, r0
    14f4:	asrs	r3, r0, #31
    14f6:	rsb	r3, r3, r1, asr #3
    14fa:	mls	r3, sl, r3, r0
    14fe:	adds	r0, #1
    1500:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1504:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1506:	smull	r2, r3, fp, r1
    150a:	mov.w	r2, r1, asr #31
    150e:	rsb	r3, r2, r3, asr #3
    1512:	mls	r3, sl, r3, r1
    1516:	add	r3, r4
    1518:	add.w	r3, r3, #6
    151c:	ldr.w	r3, [r9, r3, lsl #2]
    1520:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1524:	bne.n	14f0 <loop+0x9c0>
    1526:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    1528:	ldr	r3, [sp, #0]
    152a:	add.w	lr, lr, #12
    152e:	cmp	r3, r6
    1530:	bne.n	14ca <loop+0x99a>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1532:	ldr	r3, [sp, #8]
    1534:	movs	r2, #1
    1536:	ldr	r5, [r3, #0]
    1538:	ldr	r3, [sp, #32]
    153a:	adds	r4, r3, r5
    153c:	movs	r0, #0
    153e:	mov	r3, r0
    1540:	b.n	1548 <loop+0xa18>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1542:	adds	r3, #1
    1544:	cmp	r3, #8
    1546:	beq.n	155c <loop+0xa2c>
          if ((i >> j) % 2 == 1){
    1548:	asr.w	r1, r2, r3
    154c:	lsls	r6, r1, #31
    154e:	bpl.n	1542 <loop+0xa12>
            sum += neighbours[j];
    1550:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1554:	adds	r3, #1
    1556:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1558:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    155a:	bne.n	1548 <loop+0xa18>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    155c:	cmp	r4, r0
    155e:	beq.w	1a56 <loop+0xf26>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1562:	adds	r2, #1
    1564:	cmp.w	r2, #256	; 0x100
    1568:	bne.n	153c <loop+0xa0c>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    156a:	ldr	r3, [sp, #44]	; 0x2c
    156c:	subs	r5, r5, r3
    156e:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1572:	ldr	r2, [sp, #36]	; 0x24
    1574:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
    1576:	it	gt
    1578:	strgt.w	r2, [ip]
    157c:	ldr	r3, [sp, #8]
    157e:	add.w	ip, ip, #4
    1582:	adds	r7, #1
    1584:	adds	r3, #4
    1586:	str	r3, [sp, #8]
    1588:	ldr	r3, [sp, #4]
    158a:	adds	r3, #1
    158c:	str	r3, [sp, #4]
    158e:	ldr	r3, [sp, #12]
    1590:	adds	r3, #1
    1592:	str	r3, [sp, #12]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1594:	ldr	r3, [sp, #20]
    1596:	cmp	r3, ip
    1598:	bne.n	14b0 <loop+0x980>
    159a:	ldr	r2, [sp, #20]
    159c:	ldr	r3, [sp, #0]
    159e:	adds	r2, #104	; 0x68
    15a0:	adds	r3, #1
    15a2:	str	r2, [sp, #20]
    15a4:	ldr	r2, [sp, #28]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    15a6:	cmp	r3, #28
    15a8:	str	r3, [sp, #0]
    15aa:	add.w	r2, r2, #26
    15ae:	str	r2, [sp, #28]
    15b0:	bne.w	149c <loop+0x96c>
    15b4:	ldr	r1, [pc, #272]	; (16c8 <loop+0xb98>)
    15b6:	add.w	r5, r1, #2704	; 0xa90
    15ba:	sub.w	r3, r1, #2704	; 0xa90
    15be:	subw	r4, r1, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15c2:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    15c4:	ldr.w	r0, [r2, #4]!
    15c8:	str.w	r0, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    15cc:	cmp	r3, r4
    15ce:	bne.n	15c4 <loop+0xa94>
    15d0:	adds	r1, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    15d2:	cmp	r5, r1
    15d4:	bne.n	15ba <loop+0xa8a>
    15d6:	ldr.w	sl, [pc, #252]	; 16d4 <loop+0xba4>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    15da:	movs	r2, #32
    15dc:	movs	r1, #0
    15de:	mov	r0, r8
    15e0:	bl	b7c8 <memset>
    15e4:	ldrb.w	r2, [sl, #9]
    15e8:	movw	r3, #5436	; 0x153c
    15ec:	mov.w	r9, #26
    15f0:	str	r2, [sp, #24]
    15f2:	add.w	r2, sl, #2832	; 0xb10
    15f6:	ldr.w	r3, [sl, r3]
    15fa:	str	r2, [sp, #20]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    15fc:	ldr.w	r2, [sl]
    1600:	ldr.w	fp, [pc, #204]	; 16d0 <loop+0xba0>
    1604:	str	r2, [sp, #32]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1606:	movs	r2, #2
    1608:	str	r3, [sp, #28]
    160a:	str	r2, [sp, #0]
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    160c:	ldrb.w	r2, [sl, #5]
    1610:	str	r2, [sp, #44]	; 0x2c
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1612:	ldrb.w	r2, [sl, #4]
    1616:	str	r2, [sp, #40]	; 0x28
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1618:	ldrb.w	r2, [sl, #6]
    161c:	str	r2, [sp, #36]	; 0x24
    161e:	ldr	r2, [sp, #20]
    1620:	movs	r7, #2
    1622:	subw	r3, r2, #2808	; 0xaf8
    1626:	sub.w	ip, r2, #104	; 0x68
    162a:	str	r3, [sp, #4]
    162c:	ldr	r3, [sp, #28]
    162e:	str	r3, [sp, #12]
    1630:	str	r3, [sp, #8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1632:	ldr	r3, [sp, #24]
    1634:	cmp	r3, #0
    1636:	beq.w	1a60 <loop+0xf30>
      return _background[x][y];
    163a:	ldr	r3, [sp, #8]
    163c:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    163e:	cmp	r3, #0
    1640:	beq.n	1712 <loop+0xbe2>
    1642:	ldr	r3, [sp, #0]
    1644:	mov	lr, r8
    1646:	subs	r6, r3, #3
    1648:	subs	r3, r7, #3
    164a:	str	r3, [sp, #16]
    164c:	smull	r3, r2, fp, r6
    1650:	asrs	r3, r6, #31
    1652:	ldr	r0, [sp, #16]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
    1654:	mov	r5, lr
    1656:	rsb	r3, r3, r2, asr #3
    165a:	mls	r3, r9, r3, r6
    165e:	adds	r3, #26
    1660:	smull	r2, r1, fp, r3
    1664:	asrs	r2, r3, #31
    1666:	rsb	r2, r2, r1, asr #3
    166a:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    166e:	mul.w	r4, r9, r2
    1672:	smull	r3, r1, fp, r0
    1676:	asrs	r3, r0, #31
    1678:	rsb	r3, r3, r1, asr #3
    167c:	mls	r3, r9, r3, r0
    1680:	adds	r0, #1
    1682:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    1686:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1688:	smull	r2, r3, fp, r1
    168c:	mov.w	r2, r1, asr #31
    1690:	rsb	r3, r2, r3, asr #3
    1694:	mls	r3, r9, r3, r1
    1698:	add	r3, r4
    169a:	add.w	r3, r3, #6
    169e:	ldr.w	r3, [sl, r3, lsl #2]
    16a2:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    16a6:	bne.n	1672 <loop+0xb42>
    16a8:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    16aa:	ldr	r3, [sp, #0]
    16ac:	add.w	lr, lr, #12
    16b0:	cmp	r3, r6
    16b2:	bne.n	164c <loop+0xb1c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    16b4:	ldr	r3, [sp, #4]
    16b6:	movs	r2, #1
    16b8:	ldr	r5, [r3, #0]
    16ba:	ldr	r3, [sp, #32]
    16bc:	adds	r4, r3, r5
    16be:	movs	r0, #0
    16c0:	mov	r3, r0
    16c2:	b.n	16de <loop+0xbae>
    16c4:	.word	0x2000eef4
    16c8:	.word	0x200094b4
    16cc:	.word	0x20008a10
    16d0:	.word	0x4ec4ec4f
    16d4:	.word	0x20013978

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    16d8:	adds	r3, #1
    16da:	cmp	r3, #8
    16dc:	beq.n	16f2 <loop+0xbc2>
          if ((i >> j) % 2 == 1){
    16de:	asr.w	r1, r2, r3
    16e2:	lsls	r1, r1, #31
    16e4:	bpl.n	16d8 <loop+0xba8>
            sum += neighbours[j];
    16e6:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    16ea:	adds	r3, #1
    16ec:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    16ee:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    16f0:	bne.n	16de <loop+0xbae>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    16f2:	cmp	r4, r0
    16f4:	beq.w	1a6a <loop+0xf3a>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    16f8:	adds	r2, #1
    16fa:	cmp.w	r2, #256	; 0x100
    16fe:	bne.n	16be <loop+0xb8e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1700:	ldr	r3, [sp, #44]	; 0x2c
    1702:	subs	r5, r5, r3
    1704:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1708:	ldr	r2, [sp, #36]	; 0x24
    170a:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
    170c:	it	gt
    170e:	strgt.w	r2, [ip]
    1712:	ldr	r3, [sp, #4]
    1714:	add.w	ip, ip, #4
    1718:	adds	r7, #1
    171a:	adds	r3, #4
    171c:	str	r3, [sp, #4]
    171e:	ldr	r3, [sp, #8]
    1720:	adds	r3, #1
    1722:	str	r3, [sp, #8]
    1724:	ldr	r3, [sp, #12]
    1726:	adds	r3, #1
    1728:	str	r3, [sp, #12]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    172a:	ldr	r3, [sp, #20]
    172c:	cmp	r3, ip
    172e:	bne.n	1632 <loop+0xb02>
    1730:	ldr	r2, [sp, #20]
    1732:	ldr	r3, [sp, #0]
    1734:	adds	r2, #104	; 0x68
    1736:	adds	r3, #1
    1738:	str	r2, [sp, #20]
    173a:	ldr	r2, [sp, #28]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    173c:	cmp	r3, #28
    173e:	str	r3, [sp, #0]
    1740:	add.w	r2, r2, #26
    1744:	str	r2, [sp, #28]
    1746:	bne.w	161e <loop+0xaee>
    174a:	ldr	r1, [pc, #808]	; (1a74 <loop+0xf44>)
    174c:	add.w	r5, r1, #2704	; 0xa90
    1750:	sub.w	r3, r1, #2704	; 0xa90
    1754:	subw	r4, r1, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1758:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    175a:	ldr.w	r0, [r2, #4]!
    175e:	str.w	r0, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1762:	cmp	r4, r3
    1764:	bne.n	175a <loop+0xc2a>
    1766:	adds	r1, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1768:	cmp	r5, r1
    176a:	bne.n	1750 <loop+0xc20>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    176c:	movs	r2, #32
    176e:	movs	r1, #0
    1770:	mov	r0, r8
    1772:	ldr.w	r9, [pc, #792]	; 1a8c <loop+0xf5c>
    1776:	bl	b7c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    177a:	movs	r3, #2
    177c:	ldr.w	ip, [pc, #784]	; 1a90 <loop+0xf60>
    1780:	mov.w	fp, #26
    1784:	str	r3, [sp, #4]
    1786:	ldr.w	r3, [r9]
    178a:	str	r3, [sp, #16]
    178c:	addw	r3, r9, #2728	; 0xaa8
    1790:	str	r3, [sp, #28]
    1792:	ldrb.w	r3, [r9, #6]
    1796:	str	r3, [sp, #20]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1798:	ldrb.w	r3, [r9, #5]
    179c:	str	r3, [sp, #36]	; 0x24
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    179e:	ldrb.w	r3, [r9, #4]
    17a2:	str	r3, [sp, #32]
    17a4:	ldr	r2, [sp, #28]
    17a6:	subw	r3, r2, #2708	; 0xa94
    17aa:	str	r2, [sp, #8]
    17ac:	str	r3, [sp, #12]
    17ae:	mov.w	r3, #4294967295
    17b2:	str	r3, [sp, #0]
    17b4:	ldr	r3, [sp, #4]
    17b6:	subs	r3, #3
    17b8:	str	r3, [sp, #24]
    17ba:	ldr	r3, [sp, #0]
    17bc:	mov	lr, r8
    17be:	ldr	r6, [sp, #24]
    17c0:	adds	r7, r3, #3
    17c2:	smull	r3, r2, ip, r6
    17c6:	asrs	r3, r6, #31
    17c8:	mov	r5, lr
    17ca:	ldr	r0, [sp, #0]
    17cc:	rsb	r3, r3, r2, asr #3
    17d0:	mls	r3, fp, r3, r6
    17d4:	adds	r3, #26
    17d6:	smull	r2, r1, ip, r3
    17da:	asrs	r2, r3, #31
    17dc:	rsb	r2, r2, r1, asr #3
    17e0:	mls	r2, fp, r2, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    17e4:	mul.w	r4, fp, r2
    17e8:	smull	r3, r1, ip, r0
    17ec:	asrs	r3, r0, #31
    17ee:	rsb	r3, r3, r1, asr #3
    17f2:	mls	r3, fp, r3, r0
    17f6:	adds	r0, #1
    17f8:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    17fc:	cmp	r7, r0
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    17fe:	smull	r2, r3, ip, r1
    1802:	mov.w	r2, r1, asr #31
    1806:	rsb	r3, r2, r3, asr #3
    180a:	mls	r3, fp, r3, r1
    180e:	add	r3, r4
    1810:	add.w	r3, r3, #6
    1814:	ldr.w	r3, [r9, r3, lsl #2]
    1818:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    181c:	bne.n	17e8 <loop+0xcb8>
    181e:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    1820:	ldr	r3, [sp, #4]
    1822:	add.w	lr, lr, #12
    1826:	cmp	r3, r6
    1828:	bne.n	17c2 <loop+0xc92>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    182a:	ldr	r3, [sp, #12]
    182c:	movs	r2, #1
    182e:	ldr.w	r5, [r3, #4]!
    1832:	str	r3, [sp, #12]
    1834:	ldr	r3, [sp, #16]
    1836:	adds	r4, r5, r3
    1838:	movs	r0, #0
    183a:	mov	r3, r0
    183c:	b.n	1844 <loop+0xd14>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    183e:	adds	r3, #1
    1840:	cmp	r3, #8
    1842:	beq.n	1858 <loop+0xd28>
          if ((i >> j) % 2 == 1){
    1844:	asr.w	r1, r2, r3
    1848:	lsls	r7, r1, #31
    184a:	bpl.n	183e <loop+0xd0e>
            sum += neighbours[j];
    184c:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1850:	adds	r3, #1
    1852:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1854:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1856:	bne.n	1844 <loop+0xd14>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1858:	cmp	r4, r0
    185a:	beq.w	1a9c <loop+0xf6c>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    185e:	adds	r2, #1
    1860:	cmp.w	r2, #256	; 0x100
    1864:	bne.n	1838 <loop+0xd08>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1866:	ldr	r3, [sp, #36]	; 0x24
    1868:	subs	r5, r5, r3
    186a:	ldr	r3, [sp, #8]
    186c:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    186e:	ldr	r2, [sp, #20]
    1870:	cmp	r2, r5
    1872:	ble.n	187a <loop+0xd4a>
            nextCells[x][y] = _floorInit;
    1874:	ldr	r3, [sp, #8]
    1876:	mov	r1, r3
    1878:	str	r2, [r1, #0]
    187a:	ldr	r3, [sp, #0]
    187c:	ldr	r2, [sp, #8]
    187e:	adds	r3, #1
    1880:	adds	r2, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1882:	cmp	r3, #25
    1884:	str	r3, [sp, #0]
    1886:	str	r2, [sp, #8]
    1888:	bne.n	17ba <loop+0xc8a>
    188a:	ldr	r3, [sp, #4]
    188c:	ldr	r2, [sp, #28]
    188e:	adds	r3, #1
    1890:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1892:	cmp	r3, #28
    1894:	str	r3, [sp, #4]
    1896:	str	r2, [sp, #28]
    1898:	bne.n	17a4 <loop+0xc74>
    189a:	ldr	r1, [pc, #476]	; (1a78 <loop+0xf48>)
    189c:	add.w	r5, r1, #2704	; 0xa90
    18a0:	sub.w	r3, r1, #2704	; 0xa90
    18a4:	subw	r4, r1, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    18a8:	mov	r2, r1
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    18aa:	ldr.w	r0, [r2, #4]!
    18ae:	str.w	r0, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    18b2:	cmp	r4, r3
    18b4:	bne.n	18aa <loop+0xd7a>
    18b6:	adds	r1, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    18b8:	cmp	r5, r1
    18ba:	bne.n	18a0 <loop+0xd70>
    bg_automaton_A.iterate();
    sat_automaton_A.iterate_growth();
    fg_automaton_B.iterate();
    bg_automaton_B.iterate();
    sat_automaton_B.iterate_growth();
    gen_color_matrix_A();
    18bc:	bl	390 <gen_color_matrix_A()>
    gen_color_matrix_B();
    18c0:	bl	4dc <gen_color_matrix_B()>
    18c4:	ldr	r3, [pc, #436]	; (1a7c <loop+0xf4c>)
    18c6:	add.w	r1, r3, #2704	; 0xa90
    18ca:	sub.w	r2, r3, #104	; 0x68
    18ce:	b.n	18d6 <loop+0xda6>
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
    18d0:	cmp	r3, r2
    18d2:	beq.w	1aa6 <loop+0xf76>
        if (cells[x][y] != 0) {
    18d6:	ldr.w	r4, [r2, #4]!
    18da:	cmp	r4, #0
    18dc:	beq.n	18d0 <loop+0xda0>
    18de:	ldr	r3, [pc, #416]	; (1a80 <loop+0xf50>)
    18e0:	add.w	r1, r3, #2704	; 0xa90
    18e4:	sub.w	r2, r3, #104	; 0x68
    18e8:	b.n	18f0 <loop+0xdc0>
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
    18ea:	cmp	r3, r2
    18ec:	beq.w	1b38 <loop+0x1008>
        if (cells[x][y] != 0) {
    18f0:	ldr.w	r4, [r2, #4]!
    18f4:	cmp	r4, #0
    18f6:	beq.n	18ea <loop+0xdba>
    18f8:	ldr	r3, [pc, #392]	; (1a84 <loop+0xf54>)
    }
    if(bg_automaton_A.allZero()){
      bg_automaton_A.init();
      bg_automaton_B.init();
    }
    nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
    18fa:	ldr	r2, [pc, #396]	; (1a88 <loop+0xf58>)
    18fc:	ldr	r3, [r3, #0]
    18fe:	adds	r3, #50	; 0x32
    1900:	str	r3, [r2, #0]
    1902:	b.w	b62 <loop+0x32>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1906:	ldr	r3, [sp, #8]
    1908:	ldrb	r3, [r3, #0]
    190a:	eor.w	r3, r3, #1
    190e:	b.w	1016 <loop+0x4e6>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1912:	ldr	r3, [sp, #36]	; 0x24
    1914:	add	r5, r3
    1916:	str.w	r5, [ip]
    191a:	b.w	110c <loop+0x5dc>
    191e:	adds	r3, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    1920:	cmp	r3, r1
    1922:	bne.w	b94 <loop+0x64>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    1926:	movs	r0, #10
    1928:	bl	9aa4 <random(unsigned long)>
    192c:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    192e:	movs	r0, #10
    1930:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
    1934:	adds	r5, r0, #4
    1936:	add.w	r6, r0, #9
    193a:	cmp	r6, r5
    193c:	blt.w	ba8 <loop+0x78>
    1940:	movs	r3, #26
    1942:	ldr.w	sl, [pc, #336]	; 1a94 <loop+0xf64>
    1946:	add.w	r8, r4, #4
    194a:	add.w	r7, r4, #9
    194e:	mla	r4, r3, r4, r5
    1952:	str.w	r9, [sp]
    1956:	mov	r9, r6
    1958:	add.w	r4, sl, r4, lsl #2
    195c:	mov	r6, r4
      for (int x = cx - 3; x < cx + 3; x++){
    195e:	cmp	r8, r7
    1960:	bgt.n	198e <loop+0xe5e>
    1962:	ldrb.w	r3, [sl, #7]
    1966:	mov	r4, r6
    1968:	mov	fp, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    196a:	ldrb.w	r2, [sl, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    196e:	add.w	fp, fp, #1
    1972:	adds	r4, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1974:	subs	r0, r2, r3
    1976:	adds	r0, #2
    1978:	bl	9aa4 <random(unsigned long)>
    197c:	ldrb.w	r3, [sl, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    1980:	cmp	fp, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1982:	add.w	r2, r3, #4294967295
    1986:	add	r0, r2
    1988:	str.w	r0, [r4, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    198c:	ble.n	196a <loop+0xe3a>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
    198e:	adds	r5, #1
    1990:	adds	r6, #4
    1992:	cmp	r9, r5
    1994:	bge.n	195e <loop+0xe2e>
    1996:	ldr.w	r9, [sp]
    199a:	b.w	bac <loop+0x7c>
    199e:	add.w	r3, r2, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    19a2:	cmp	r1, r3
    19a4:	bne.w	b76 <loop+0x46>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    19a8:	movs	r0, #10
    19aa:	bl	9aa4 <random(unsigned long)>
    19ae:	mov	r4, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    19b0:	movs	r0, #10
    19b2:	bl	9aa4 <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
    19b6:	adds	r5, r0, #4
    19b8:	add.w	r6, r0, #9
    19bc:	cmp	r5, r6
    19be:	bgt.w	b8a <loop+0x5a>
    19c2:	movs	r3, #26
    19c4:	ldr.w	r9, [pc, #208]	; 1a98 <loop+0xf68>
    19c8:	add.w	r8, r4, #9
    19cc:	adds	r7, r4, #4
    19ce:	mla	r4, r3, r4, r5
    19d2:	add.w	r4, r9, r4, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
    19d6:	cmp	r8, r7
    19d8:	blt.n	1a08 <loop+0xed8>
    19da:	ldrb.w	r3, [r9, #7]
    19de:	mov	fp, r4
    19e0:	mov	sl, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    19e2:	ldrb.w	r2, [r9, #8]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    19e6:	add.w	sl, sl, #1
    19ea:	add.w	fp, fp, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    19ee:	subs	r0, r2, r3
    19f0:	adds	r0, #2
    19f2:	bl	9aa4 <random(unsigned long)>
    19f6:	ldrb.w	r3, [r9, #7]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    19fa:	cmp	sl, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    19fc:	add.w	r2, r3, #4294967295
    1a00:	add	r0, r2
    1a02:	str.w	r0, [fp, #336]	; 0x150
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
    1a06:	ble.n	19e2 <loop+0xeb2>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
    1a08:	adds	r5, #1
    1a0a:	adds	r4, #4
    1a0c:	cmp	r5, r6
    1a0e:	ble.n	19d6 <loop+0xea6>
    1a10:	b.w	b8e <loop+0x5e>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a14:	ldr	r3, [sp, #24]
    1a16:	add	r5, r3
    1a18:	ldr	r3, [sp, #0]
    1a1a:	str	r5, [r3, #0]
    1a1c:	b.w	cae <loop+0x17e>
    1a20:	ldr	r3, [sp, #24]
    1a22:	add	r5, r3
    1a24:	ldr	r3, [sp, #0]
    1a26:	str	r5, [r3, #0]
    1a28:	b.w	e30 <loop+0x300>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1a2c:	ldr	r3, [sp, #0]
    1a2e:	ldrb	r3, [r3, #0]
    1a30:	eor.w	r3, r3, #1
    1a34:	b.w	11d8 <loop+0x6a8>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a38:	ldr	r3, [sp, #36]	; 0x24
    1a3a:	add	r5, r3
    1a3c:	str.w	r5, [ip]
    1a40:	b.n	128e <loop+0x75e>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a42:	ldr	r3, [sp, #28]
    1a44:	add	r5, r3
    1a46:	ldr	r3, [sp, #4]
    1a48:	str	r5, [r3, #0]
    1a4a:	b.n	1404 <loop+0x8d4>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1a4c:	ldr	r3, [sp, #12]
    1a4e:	ldrb	r3, [r3, #0]
    1a50:	eor.w	r3, r3, #1
    1a54:	b.n	14bc <loop+0x98c>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a56:	ldr	r3, [sp, #40]	; 0x28
    1a58:	add	r5, r3
    1a5a:	str.w	r5, [ip]
    1a5e:	b.n	1572 <loop+0xa42>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1a60:	ldr	r3, [sp, #12]
    1a62:	ldrb	r3, [r3, #0]
    1a64:	eor.w	r3, r3, #1
    1a68:	b.n	163e <loop+0xb0e>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a6a:	ldr	r3, [sp, #40]	; 0x28
    1a6c:	add	r5, r3
    1a6e:	str.w	r5, [ip]
    1a72:	b.n	1708 <loop+0xbd8>
    1a74:	.word	0x2001441c
    1a78:	.word	0x2000b9f4
    1a7c:	.word	0x2000754c
    1a80:	.word	0x200124b4
    1a84:	.word	0x20014f80
    1a88:	.word	0x2000e444
    1a8c:	.word	0x2000af50
    1a90:	.word	0x4ec4ec4f
    1a94:	.word	0x20010ef8
    1a98:	.word	0x2000f9b8
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1a9c:	ldr	r3, [sp, #32]
    1a9e:	add	r5, r3
    1aa0:	ldr	r3, [sp, #8]
    1aa2:	str	r5, [r3, #0]
    1aa4:	b.n	186e <loop+0xd3e>
    1aa6:	adds	r3, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    1aa8:	cmp	r1, r3
    1aaa:	bne.w	18ca <loop+0xd9a>
    1aae:	ldr	r7, [pc, #452]	; (1c74 <loop+0x1144>)
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1ab0:	add.w	r9, r7, #5408	; 0x1520
    1ab4:	add.w	fp, r4, r4, lsl #1
    1ab8:	mov	r8, r7
    1aba:	movs	r6, #0
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1abc:	ldr	r3, [pc, #440]	; (1c78 <loop+0x1148>)
    1abe:	ldrb	r2, [r3, #9]
    1ac0:	ldr	r3, [pc, #440]	; (1c7c <loop+0x114c>)
    1ac2:	ldr	r3, [r3, #0]
      return _background[x][y];
    1ac4:	add	r3, r6
    1ac6:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1ac8:	cbnz	r2, 1ace <loop+0xf9e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1aca:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    1ace:	cmp	r3, #0
    1ad0:	bne.n	1bc8 <loop+0x1098>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1ad2:	adds	r6, #1
    1ad4:	add.w	r8, r8, #4
    1ad8:	cmp	r6, #26
    1ada:	bne.n	1abc <loop+0xf8c>
    1adc:	adds	r4, #26
    1ade:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1ae0:	cmp.w	r4, #676	; 0x2a4
    1ae4:	bne.n	1ab4 <loop+0xf84>
    1ae6:	ldr	r7, [pc, #408]	; (1c80 <loop+0x1150>)
    1ae8:	movs	r5, #0
    1aea:	ldr.w	r8, [pc, #420]	; 1c90 <loop+0x1160>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1aee:	add.w	r4, r7, #5408	; 0x1520
    1af2:	mov	r2, r8
    1af4:	mov	fp, r7
    1af6:	str	r7, [sp, #0]
    1af8:	add.w	r8, r5, r5, lsl #1
    1afc:	mov.w	r9, #0
    1b00:	mov	r7, r2
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1b02:	ldr	r3, [pc, #384]	; (1c84 <loop+0x1154>)
    1b04:	ldrb	r1, [r3, #9]
    1b06:	ldr	r3, [r7, #0]
      return _background[x][y];
    1b08:	add	r3, r9
    1b0a:	ldrb	r3, [r3, r5]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1b0c:	cbnz	r1, 1b12 <loop+0xfe2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1b0e:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    1b12:	cmp	r3, #0
    1b14:	bne.w	1c1e <loop+0x10ee>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1b18:	add.w	r9, r9, #1
    1b1c:	add.w	fp, fp, #4
    1b20:	cmp.w	r9, #26
    1b24:	bne.n	1b02 <loop+0xfd2>
    1b26:	adds	r5, #26
    1b28:	mov	r2, r7
    1b2a:	ldr	r7, [sp, #0]
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1b2c:	cmp.w	r5, #676	; 0x2a4
    1b30:	add.w	r7, r7, #104	; 0x68
    1b34:	bne.n	1af4 <loop+0xfc4>
    1b36:	b.n	18de <loop+0xdae>
    1b38:	adds	r3, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    1b3a:	cmp	r1, r3
    1b3c:	bne.w	18e4 <loop+0xdb4>
    1b40:	ldr	r7, [pc, #316]	; (1c80 <loop+0x1150>)
    1b42:	ldr.w	r8, [pc, #332]	; 1c90 <loop+0x1160>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1b46:	add.w	r5, r7, #5408	; 0x1520
    1b4a:	mov	r2, r8
    1b4c:	mov	fp, r7
    1b4e:	str	r7, [sp, #0]
    1b50:	add.w	r8, r4, r4, lsl #1
    1b54:	mov.w	r9, #0
    1b58:	mov	r7, r2
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1b5a:	ldr	r3, [pc, #296]	; (1c84 <loop+0x1154>)
    1b5c:	ldrb	r1, [r3, #9]
    1b5e:	ldr	r3, [r7, #0]
      return _background[x][y];
    1b60:	add	r3, r9
    1b62:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1b64:	cbnz	r1, 1b6a <loop+0x103a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1b66:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    1b6a:	cmp	r3, #0
    1b6c:	bne.n	1bf4 <loop+0x10c4>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1b6e:	add.w	r9, r9, #1
    1b72:	add.w	fp, fp, #4
    1b76:	cmp.w	r9, #26
    1b7a:	bne.n	1b5a <loop+0x102a>
    1b7c:	adds	r4, #26
    1b7e:	mov	r2, r7
    1b80:	ldr	r7, [sp, #0]
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1b82:	cmp.w	r4, #676	; 0x2a4
    1b86:	add.w	r7, r7, #104	; 0x68
    1b8a:	bne.n	1b4c <loop+0x101c>
    1b8c:	ldr	r7, [pc, #248]	; (1c88 <loop+0x1158>)
    1b8e:	movs	r5, #0
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1b90:	add.w	r9, r7, #5408	; 0x1520
    1b94:	add.w	fp, r5, r5, lsl #1
    1b98:	mov	r8, r7
    1b9a:	movs	r4, #0
    1b9c:	ldr	r3, [pc, #236]	; (1c8c <loop+0x115c>)
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1b9e:	ldrb.w	r2, [sl, #9]
    1ba2:	ldr	r3, [r3, #0]
      return _background[x][y];
    1ba4:	add	r3, r4
    1ba6:	ldrb	r3, [r3, r5]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1ba8:	cbnz	r2, 1bae <loop+0x107e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1baa:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    1bae:	cmp	r3, #0
    1bb0:	bne.n	1c48 <loop+0x1118>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1bb2:	adds	r4, #1
    1bb4:	add.w	r8, r8, #4
    1bb8:	cmp	r4, #26
    1bba:	bne.n	1b9c <loop+0x106c>
    1bbc:	adds	r5, #26
    1bbe:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1bc0:	cmp.w	r5, #676	; 0x2a4
    1bc4:	bne.n	1b94 <loop+0x1064>
    1bc6:	b.n	18f8 <loop+0xdc8>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bc8:	ldr	r3, [pc, #172]	; (1c78 <loop+0x1148>)
    1bca:	ldr	r2, [pc, #172]	; (1c78 <loop+0x1148>)
    1bcc:	ldrb	r1, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1bce:	add.w	r3, r6, r6, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bd2:	ldrb	r0, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1bd4:	ldr.w	r2, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bd8:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1bda:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bdc:	adds	r0, #2
    1bde:	ldrb	r5, [r2, r3]
    1be0:	bl	9aa4 <random(unsigned long)>
    1be4:	ldr	r3, [pc, #144]	; (1c78 <loop+0x1148>)
    1be6:	ldrb	r3, [r3, #7]
    1be8:	subs	r3, r5, r3
    1bea:	adds	r3, #1
    1bec:	subs	r0, r3, r0
    1bee:	str.w	r0, [r8]
    1bf2:	b.n	1ad2 <loop+0xfa2>
    1bf4:	ldr	r3, [pc, #140]	; (1c84 <loop+0x1154>)
    1bf6:	ldr	r2, [pc, #140]	; (1c84 <loop+0x1154>)
    1bf8:	ldrb	r0, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1bfa:	add.w	r3, r9, r9, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1bfe:	ldrb	r6, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c00:	ldr	r1, [r5, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c02:	subs	r0, r0, r6
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c04:	add	r1, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c06:	adds	r0, #2
    1c08:	ldrb	r6, [r1, r3]
    1c0a:	bl	9aa4 <random(unsigned long)>
    1c0e:	ldr	r3, [pc, #116]	; (1c84 <loop+0x1154>)
    1c10:	ldrb	r3, [r3, #7]
    1c12:	subs	r3, r6, r3
    1c14:	adds	r3, #1
    1c16:	subs	r0, r3, r0
    1c18:	str.w	r0, [fp]
    1c1c:	b.n	1b6e <loop+0x103e>
    1c1e:	ldr	r3, [pc, #100]	; (1c84 <loop+0x1154>)
    1c20:	ldr	r2, [pc, #96]	; (1c84 <loop+0x1154>)
    1c22:	ldrb	r0, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c24:	add.w	r3, r9, r9, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c28:	ldrb	r6, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c2a:	ldr	r1, [r4, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c2c:	subs	r0, r0, r6
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c2e:	add	r1, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c30:	adds	r0, #2
    1c32:	ldrb	r6, [r1, r3]
    1c34:	bl	9aa4 <random(unsigned long)>
    1c38:	ldr	r3, [pc, #72]	; (1c84 <loop+0x1154>)
    1c3a:	ldrb	r3, [r3, #7]
    1c3c:	subs	r3, r6, r3
    1c3e:	adds	r3, #1
    1c40:	subs	r0, r3, r0
    1c42:	str.w	r0, [fp]
    1c46:	b.n	1b18 <loop+0xfe8>
    1c48:	ldrb.w	r1, [sl, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c4c:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c50:	ldrb.w	r0, [sl, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c54:	ldr.w	r2, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c58:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1c5a:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c5c:	adds	r0, #2
    1c5e:	ldrb	r6, [r2, r3]
    1c60:	bl	9aa4 <random(unsigned long)>
    1c64:	ldrb.w	r3, [sl, #7]
    1c68:	subs	r3, r6, r3
    1c6a:	adds	r3, #1
    1c6c:	subs	r0, r3, r0
    1c6e:	str.w	r0, [r8]
    1c72:	b.n	1bb2 <loop+0x1082>
    1c74:	.word	0x200074e8
    1c78:	.word	0x200074d0
    1c7c:	.word	0x20008a0c
    1c80:	.word	0x20012450
    1c84:	.word	0x20012438
    1c88:	.word	0x20013990
    1c8c:	.word	0x20014eb4
    1c90:	.word	0x20013974

00001c94 <_GLOBAL__sub_I_nextTime1>:
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c94:	ldr	r3, [pc, #1008]	; (2088 <_GLOBAL__sub_I_nextTime1+0x3f4>)
      _s = s;
      _b = b;
    1c96:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c9a:	movs	r0, #0
      _s = s;
      _b = b;
    1c9c:	mov.w	ip, #207	; 0xcf
    1ca0:	mov	r2, r3

  //test_screen();
  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
   
}
    1ca2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ca6:	strb	r1, [r3, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ca8:	mov.w	r1, #106	; 0x6a
      _s = s;
    1cac:	movs	r4, #2
      _b = b;
    1cae:	mov.w	fp, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cb2:	strb	r1, [r3, #3]
      _s = s;
    1cb4:	mov.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cb8:	strb	r1, [r3, #18]
      _s = s;
      _b = b;
    1cba:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cbe:	mov.w	lr, #109	; 0x6d
    1cc2:	strb	r0, [r3, #0]
      _s = s;
      _b = b;
    1cc4:	strb	r1, [r3, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cc6:	mov.w	r1, #85	; 0x55
    1cca:	strb.w	lr, [r3, #21]
    1cce:	mov.w	sl, #131	; 0x83
    1cd2:	strb	r1, [r3, #6]
      _s = s;
    1cd4:	mov.w	r1, #5
    1cd8:	strb	r0, [r3, #1]
    1cda:	movs	r7, #63	; 0x3f
    1cdc:	strb	r1, [r3, #7]
      _b = b;
    1cde:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ce2:	strb	r0, [r3, #9]
      _s = s;
    1ce4:	movs	r6, #244	; 0xf4
      _b = b;
    1ce6:	strb	r1, [r3, #8]
    1ce8:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cec:	strb	r0, [r3, #10]
    1cee:	movs	r5, #8
      _b = b;
    1cf0:	strb	r1, [r3, #14]
    1cf2:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cf6:	strb	r0, [r3, #12]
      _s = s;
      _b = b;
    1cf8:	mov.w	r9, #198	; 0xc6
    1cfc:	strb	r1, [r3, #17]
    1cfe:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d02:	strb	r0, [r3, #13]
    1d04:	mov.w	lr, #14
      _b = b;
    1d08:	strb	r1, [r3, #20]
    1d0a:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d0e:	strb	r0, [r3, #15]
    1d10:	sub	sp, #60	; 0x3c
      _s = s;
      _b = b;
    1d12:	strb	r1, [r3, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d14:	mov.w	r1, #114	; 0x72
      _s = s;
    1d18:	strb	r0, [r3, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d1a:	strb	r1, [r3, #24]
      _s = s;
    1d1c:	mov.w	r1, #20
    1d20:	strb	r4, [r3, #4]
    1d22:	strb	r1, [r3, #25]
      _b = b;
    1d24:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d28:	strb	r4, [r3, #19]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d2a:	movs	r4, #46	; 0x2e
      _s = s;
      _b = b;
    1d2c:	strb	r1, [r3, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d2e:	mov.w	r1, #115	; 0x73
      _s = s;
      _b = b;
    1d32:	strb.w	fp, [r3, #11]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d36:	strb	r1, [r3, #27]
      _s = s;
    1d38:	mov.w	r1, #26
    1d3c:	strb.w	r8, [r3, #22]
    1d40:	strb	r1, [r3, #28]
      _b = b;
    1d42:	mvn.w	r1, #119	; 0x77
    1d46:	strb	r1, [r3, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d48:	mvn.w	r1, #116	; 0x74
    1d4c:	strb	r1, [r3, #30]
      _s = s;
    1d4e:	mov.w	r1, #48	; 0x30
    1d52:	strb	r1, [r3, #31]
      _b = b;
    1d54:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d58:	strb.w	r0, [r3, #57]	; 0x39
      _s = s;
      _b = b;
    1d5c:	strb.w	r1, [r3, #32]
    1d60:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d64:	strb.w	r0, [r3, #58]	; 0x3a
      _b = b;
    1d68:	strb.w	r1, [r3, #50]	; 0x32
    1d6c:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d70:	strb.w	r0, [r3, #60]	; 0x3c
      _s = s;
      _b = b;
    1d74:	strb.w	r1, [r3, #53]	; 0x35
    1d78:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d7c:	strb.w	r0, [r3, #61]	; 0x3d
      _b = b;
    1d80:	strb.w	r1, [r3, #59]	; 0x3b
    1d84:	mov.w	r1, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d88:	strb.w	r0, [r3, #63]	; 0x3f
      _s = s;
      _b = b;
    1d8c:	strb.w	r1, [r3, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d90:	mvn.w	r1, #117	; 0x75
      _s = s;
    1d94:	strb.w	r0, [r3, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d98:	strb.w	r1, [r3, #33]	; 0x21
    1d9c:	strb.w	r1, [r3, #54]	; 0x36
      _s = s;
    1da0:	mvn.w	r1, #70	; 0x46
    1da4:	strb.w	r7, [r3, #40]	; 0x28
      _b = b;
    1da8:	movs	r7, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1daa:	strb.w	r1, [r3, #34]	; 0x22
      _b = b;
    1dae:	mov.w	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1db2:	strb.w	r6, [r3, #46]	; 0x2e
      _b = b;
    1db6:	movs	r6, #167	; 0xa7
    1db8:	strb.w	r1, [r3, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dbc:	mvn.w	r1, #121	; 0x79
      _s = s;
    1dc0:	strb.w	r5, [r3, #55]	; 0x37
      _b = b;
    1dc4:	movs	r5, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dc6:	strb.w	r1, [r3, #36]	; 0x24
      _s = s;
    1dca:	mvn.w	r1, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dce:	strb.w	sl, [r3, #42]	; 0x2a
      _s = s;
    1dd2:	strb.w	r1, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dd6:	mvn.w	r1, #125	; 0x7d
    1dda:	strb.w	r1, [r3, #39]	; 0x27
    1dde:	strb.w	r1, [r3, #45]	; 0x2d
    1de2:	strb.w	r1, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    1de6:	mvn.w	r1, #122	; 0x7a
    1dea:	strb.w	r1, [r3, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dee:	mvn.w	r1, #83	; 0x53
    1df2:	strb.w	r1, [r3, #43]	; 0x2b
      _b = b;
    1df6:	mvn.w	r1, #45	; 0x2d
    1dfa:	strb.w	r1, [r3, #44]	; 0x2c
    1dfe:	mvn.w	r1, #33	; 0x21
    1e02:	strb.w	r1, [r3, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e06:	mvn.w	r1, #96	; 0x60
    1e0a:	strb.w	r1, [r3, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e0e:	mvn.w	r1, #120	; 0x78
    1e12:	strb.w	r1, [r3, #51]	; 0x33
      _s = s;
    1e16:	mov.w	r1, #51	; 0x33
    1e1a:	strb.w	r1, [r3, #52]	; 0x34
      _b = b;
    1e1e:	mvn.w	r1, #9
    1e22:	strb.w	r1, [r3, #56]	; 0x38
    1e26:	mvn.w	r1, #3
    1e2a:	strb.w	r1, [r3, #62]	; 0x3e
    1e2e:	strb.w	r1, [r3, #65]	; 0x41
    1e32:	strb.w	r1, [r3, #68]	; 0x44
    1e36:	strb.w	r1, [r3, #71]	; 0x47
    1e3a:	strb.w	r1, [r3, #74]	; 0x4a
    1e3e:	strb.w	r1, [r3, #77]	; 0x4d
    1e42:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e46:	strb.w	r0, [r3, #66]	; 0x42
      _s = s;
      _b = b;
    1e4a:	strb.w	r1, [r3, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e4e:	mov.w	r1, #5
    1e52:	strb.w	r0, [r3, #67]	; 0x43
    1e56:	strb.w	r1, [r3, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e5a:	mvn.w	r1, #116	; 0x74
    1e5e:	strb.w	r0, [r3, #69]	; 0x45
    1e62:	strb.w	r1, [r3, #84]	; 0x54
      _s = s;
    1e66:	mov.w	r1, #11
    1e6a:	strb.w	r0, [r3, #70]	; 0x46
    1e6e:	strb.w	r1, [r3, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e72:	mov.w	r1, #95	; 0x5f
    1e76:	strb.w	r0, [r3, #72]	; 0x48
    1e7a:	strb.w	r1, [r3, #81]	; 0x51
      _s = s;
    1e7e:	mvn.w	r1, #118	; 0x76
    1e82:	strb.w	r0, [r3, #73]	; 0x49
    1e86:	strb.w	r1, [r3, #85]	; 0x55
      _b = b;
    1e8a:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e8e:	strb.w	r0, [r3, #75]	; 0x4b
      _s = s;
      _b = b;
    1e92:	strb.w	r1, [r3, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e96:	mov.w	r1, #94	; 0x5e
      _s = s;
    1e9a:	strb.w	r0, [r3, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e9e:	strb.w	r1, [r3, #87]	; 0x57
    1ea2:	mov.w	r1, #96	; 0x60
    1ea6:	strb.w	r0, [r3, #78]	; 0x4e
    1eaa:	strb.w	r1, [r3, #90]	; 0x5a
      _s = s;
      _b = b;
    1eae:	mvn.w	r1, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1eb2:	strb.w	r0, [r3, #79]	; 0x4f
      _b = b;
    1eb6:	strb.w	r1, [r3, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1eba:	mov.w	r1, #37	; 0x25
      _b = b;
    1ebe:	strb.w	r9, [r3, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ec2:	mov.w	r9, #3
    1ec6:	strb.w	r1, [r3, #94]	; 0x5e
      _b = b;
    1eca:	mvn.w	r1, #99	; 0x63
    1ece:	strb.w	ip, [r3, #89]	; 0x59
    1ed2:	mov.w	ip, #103	; 0x67
    1ed6:	strb.w	r1, [r3, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1eda:	mov.w	r1, #60	; 0x3c
      _s = s;
    1ede:	strb.w	lr, [r3, #91]	; 0x5b
      _b = b;
    1ee2:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ee6:	strb.w	r1, [r3, #96]	; 0x60
      _s = s;
    1eea:	mov.w	r1, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1eee:	strb.w	r4, [r3, #93]	; 0x5d
      _s = s;
      _b = b;
    1ef2:	movs	r4, #253	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ef4:	strb.w	r1, [r3, #97]	; 0x61
      _b = b;
    1ef8:	mov.w	r1, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1efc:	strb.w	sl, [r3, #120]	; 0x78
      _s = s;
      _b = b;
    1f00:	strb.w	r1, [r3, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f04:	mvn.w	r1, #39	; 0x27
    1f08:	strb.w	fp, [r3, #124]	; 0x7c
    1f0c:	mov.w	fp, #44	; 0x2c
    1f10:	strb.w	r1, [r3, #103]	; 0x67
      _b = b;
    1f14:	mov.w	r1, #106	; 0x6a
    1f18:	strb.w	r7, [r3, #110]	; 0x6e
    1f1c:	movs	r7, #59	; 0x3b
    1f1e:	strb.w	r1, [r3, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f22:	mov.w	r1, #95	; 0x5f
      _b = b;
    1f26:	strb.w	r6, [r3, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f2a:	movs	r6, #1
    1f2c:	strb.w	r1, [r3, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f30:	mvn.w	r1, #116	; 0x74
      _s = s;
      _b = b;
    1f34:	strb.w	r5, [r3, #116]	; 0x74
    1f38:	movs	r5, #214	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f3a:	strb.w	r1, [r3, #108]	; 0x6c
    1f3e:	mvn.w	r1, #121	; 0x79
    1f42:	strb.w	r1, [r3, #111]	; 0x6f
      _s = s;
    1f46:	mvn.w	r1, #3
    1f4a:	strb.w	r1, [r3, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f4e:	mvn.w	r1, #122	; 0x7a
    1f52:	strb.w	r1, [r3, #117]	; 0x75
      _s = s;
    1f56:	mov.w	r1, #106	; 0x6a
    1f5a:	strb.w	r1, [r3, #118]	; 0x76
      _b = b;
    1f5e:	mvn.w	r1, #34	; 0x22
    1f62:	strb.w	r1, [r3, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f66:	mvn.w	r1, #125	; 0x7d
    1f6a:	strb.w	r1, [r3, #123]	; 0x7b
    1f6e:	strb.w	r1, [r3, #126]	; 0x7e
    1f72:	strb.w	r1, [r3, #129]	; 0x81
    1f76:	mov.w	r1, #105	; 0x69
    1f7a:	strb.w	r1, [r3, #99]	; 0x63
      _s = s;
    1f7e:	mvn.w	r1, #69	; 0x45
    1f82:	strb.w	r1, [r3, #100]	; 0x64
      _b = b;
    1f86:	mov.w	r1, #101	; 0x65
    1f8a:	strb.w	r1, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f8e:	mov.w	r1, #118	; 0x76
    1f92:	strb.w	r1, [r3, #102]	; 0x66
    1f96:	mvn.w	r1, #43	; 0x2b
    1f9a:	strb.w	r1, [r3, #105]	; 0x69
      _s = s;
      _b = b;
    1f9e:	mov.w	r1, #32
    1fa2:	strb.w	r1, [r3, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fa6:	mvn.w	r1, #104	; 0x68
    1faa:	strb.w	r1, [r3, #109]	; 0x6d
    1fae:	mvn.w	r1, #5
    1fb2:	strb.w	r1, [r3, #112]	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fb6:	mvn.w	r1, #123	; 0x7b
    1fba:	strb.w	r1, [r3, #114]	; 0x72
      _s = s;
      _b = b;
    1fbe:	mvn.w	r1, #80	; 0x50
    1fc2:	strb.w	r1, [r3, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fc6:	mvn.w	r1, #111	; 0x6f
    1fca:	strb.w	r1, [r3, #121]	; 0x79
      _b = b;
    1fce:	mvn.w	r1, #29
    1fd2:	strb.w	r1, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fd6:	mvn.w	r1, #37	; 0x25
    1fda:	strb.w	r1, [r3, #127]	; 0x7f
      _b = b;
    1fde:	mvn.w	r1, #30
    1fe2:	strb.w	r1, [r3, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fe6:	mvn.w	r1, #59	; 0x3b
    1fea:	strb.w	r1, [r3, #130]	; 0x82
      _b = b;
    1fee:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ff2:	strb.w	sl, [r3, #132]	; 0x84
      _s = s;
      _b = b;
    1ff6:	strb.w	r1, [r3, #131]	; 0x83
    1ffa:	strb.w	r1, [r3, #137]	; 0x89
    1ffe:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2002:	strb.w	r0, [r3, #138]	; 0x8a
      _s = s;
      _b = b;
    2006:	strb.w	r1, [r3, #140]	; 0x8c
    200a:	strb.w	r1, [r3, #143]	; 0x8f
    200e:	strb.w	r1, [r3, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2012:	mov.w	r1, #113	; 0x71
      _s = s;
    2016:	strb.w	r0, [r3, #139]	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    201a:	strb.w	r1, [r3, #156]	; 0x9c
      _s = s;
      _b = b;
    201e:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2022:	strb.w	r0, [r3, #141]	; 0x8d
      _s = s;
      _b = b;
    2026:	strb.w	r1, [r3, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    202a:	mov.w	r1, #51	; 0x33
      _s = s;
    202e:	strb.w	r0, [r3, #142]	; 0x8e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2032:	strb.w	r1, [r3, #159]	; 0x9f
    2036:	mov.w	r1, #121	; 0x79
    203a:	strb.w	r0, [r3, #144]	; 0x90
    203e:	strb.w	r1, [r3, #162]	; 0xa2
      _s = s;
    2042:	mov.w	r1, #60	; 0x3c
    2046:	strb.w	r0, [r3, #145]	; 0x91
    204a:	strb.w	r1, [r3, #163]	; 0xa3
    204e:	mov.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2052:	strb.w	r0, [r3, #147]	; 0x93
      _s = s;
    2056:	strb.w	r1, [r3, #136]	; 0x88
    205a:	mov.w	r1, #87	; 0x57
    205e:	strb.w	r0, [r3, #148]	; 0x94
    2062:	strb.w	r1, [r3, #133]	; 0x85
      _b = b;
    2066:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    206a:	strb.w	r0, [r3, #150]	; 0x96
      _s = s;
      _b = b;
    206e:	strb.w	r1, [r3, #134]	; 0x86
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2072:	mvn.w	r1, #107	; 0x6b
      _s = s;
    2076:	strb.w	r0, [r3, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    207a:	strb.w	r1, [r3, #135]	; 0x87
      _s = s;
      _b = b;
    207e:	mov.w	r1, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2082:	strb.w	r0, [r3, #153]	; 0x99
    2086:	b.n	208c <_GLOBAL__sub_I_nextTime1+0x3f8>
    2088:	.word	0x20009f50
      _s = s;
    208c:	strb.w	r0, [r3, #154]	; 0x9a
    2090:	strb.w	r8, [r3, #160]	; 0xa0
    2094:	mov.w	r8, #90	; 0x5a
    2098:	strb.w	r9, [r3, #157]	; 0x9d
      _b = b;
    209c:	mov.w	r9, #240	; 0xf0
    20a0:	strb.w	r4, [r3, #146]	; 0x92
    20a4:	strb.w	r4, [r3, #149]	; 0x95
    20a8:	strb.w	r4, [r3, #152]	; 0x98
    20ac:	strb.w	lr, [r3, #161]	; 0xa1
    20b0:	strb.w	r1, [r3, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20b4:	mov.w	r1, #32
      _s = s;
      _b = b;
    20b8:	strb.w	r7, [r3, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20bc:	strb.w	r1, [r3, #165]	; 0xa5
      _s = s;
      _b = b;
    20c0:	mov.w	r1, #123	; 0x7b
    20c4:	strb.w	r7, [r3, #194]	; 0xc2
    20c8:	strb.w	r1, [r3, #173]	; 0xad
    20cc:	mov.w	r1, #85	; 0x55
    20d0:	strb.w	r1, [r3, #176]	; 0xb0
    20d4:	mvn.w	r1, #118	; 0x76
    20d8:	strb.w	r1, [r3, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20dc:	mov.w	r1, #121	; 0x79
    20e0:	strb.w	r1, [r3, #180]	; 0xb4
    20e4:	mvn.w	r1, #39	; 0x27
    20e8:	strb.w	r1, [r3, #183]	; 0xb7
      _s = s;
    20ec:	mvn.w	r1, #104	; 0x68
    20f0:	strb.w	r1, [r3, #187]	; 0xbb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20f4:	mvn.w	r1, #118	; 0x76
    20f8:	strb.w	r1, [r3, #189]	; 0xbd
      _s = s;
    20fc:	mvn.w	r1, #32
    2100:	strb.w	r1, [r3, #190]	; 0xbe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2104:	mvn.w	r1, #119	; 0x77
    2108:	strb.w	r1, [r3, #192]	; 0xc0
    210c:	mvn.w	r1, #123	; 0x7b
    2110:	strb.w	r1, [r3, #195]	; 0xc3
      _s = s;
    2114:	mvn.w	r1, #117	; 0x75
    2118:	strb.w	r1, [r3, #196]	; 0xc4
      _b = b;
    211c:	mov.w	r1, #30
    2120:	strb.w	r1, [r3, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2124:	mvn.w	r1, #82	; 0x52
    2128:	strb.w	r1, [r3, #166]	; 0xa6
      _b = b;
    212c:	mvn.w	r1, #105	; 0x69
    2130:	strb.w	r1, [r3, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2134:	mov.w	r1, #54	; 0x36
    2138:	strb.w	r1, [r3, #168]	; 0xa8
      _s = s;
    213c:	mov.w	r1, #97	; 0x61
    2140:	strb.w	r1, [r3, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2144:	strb.w	r1, [r3, #177]	; 0xb1
      _s = s;
      _b = b;
    2148:	mov.w	r1, #120	; 0x78
    214c:	strb.w	r1, [r3, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2150:	mov.w	r1, #25
    2154:	strb.w	r1, [r3, #171]	; 0xab
      _s = s;
    2158:	mvn.w	r1, #67	; 0x43
    215c:	strb.w	r1, [r3, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2160:	mov.w	r1, #28
    2164:	strb.w	r1, [r3, #174]	; 0xae
      _s = s;
    2168:	mvn.w	r1, #93	; 0x5d
    216c:	strb.w	r1, [r3, #175]	; 0xaf
    2170:	strb.w	r1, [r3, #181]	; 0xb5
    2174:	mvn.w	r1, #81	; 0x51
    2178:	strb.w	r1, [r3, #178]	; 0xb2
      _b = b;
    217c:	mvn.w	r1, #101	; 0x65
    2180:	strb.w	r1, [r3, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2184:	mov.w	r1, #93	; 0x5d
    2188:	strb.w	r1, [r3, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    218c:	mvn.w	r1, #112	; 0x70
    2190:	strb.w	r1, [r3, #186]	; 0xba
      _s = s;
      _b = b;
    2194:	mov.w	r1, #57	; 0x39
    2198:	strb.w	r1, [r3, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    219c:	mvn.w	r1, #22
    21a0:	strb.w	r1, [r3, #193]	; 0xc1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21a4:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    21a8:	strb.w	ip, [r3, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21ac:	mov.w	ip, #31
    21b0:	strb.w	r1, [r3, #198]	; 0xc6
      _s = s;
    21b4:	mov.w	r1, #57	; 0x39
      _b = b;
    21b8:	strb.w	lr, [r3, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21bc:	strb.w	r1, [r3, #199]	; 0xc7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21c0:	mvn.w	r1, #125	; 0x7d
    21c4:	strb.w	r0, [r3, #222]	; 0xde
    21c8:	strb.w	r1, [r3, #201]	; 0xc9
      _s = s;
      _b = b;
    21cc:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21d0:	strb.w	r0, [r3, #223]	; 0xdf
      _b = b;
    21d4:	strb.w	r1, [r3, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21d8:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    21dc:	strb.w	r4, [r3, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21e0:	strb.w	r1, [r3, #204]	; 0xcc
    21e4:	mvn.w	r1, #122	; 0x7a
    21e8:	strb.w	r0, [r3, #225]	; 0xe1
    21ec:	strb.w	r1, [r3, #207]	; 0xcf
    21f0:	mvn.w	r1, #112	; 0x70
      _s = s;
    21f4:	strb.w	r0, [r3, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21f8:	strb.w	r1, [r3, #210]	; 0xd2
    21fc:	mvn.w	r1, #96	; 0x60
      _s = s;
      _b = b;
    2200:	strb.w	r4, [r3, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2204:	strb.w	r1, [r3, #213]	; 0xd5
    2208:	mvn.w	r1, #105	; 0x69
    220c:	strb.w	r0, [r3, #228]	; 0xe4
    2210:	strb.w	r1, [r3, #216]	; 0xd8
      _s = s;
    2214:	mov.w	r1, #26
    2218:	strb.w	r0, [r3, #229]	; 0xe5
    221c:	strb.w	r1, [r3, #217]	; 0xd9
      _b = b;
    2220:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2224:	strb.w	fp, [r3, #211]	; 0xd3
      _b = b;
    2228:	mov.w	fp, #170	; 0xaa
    222c:	strb.w	r1, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2230:	mvn.w	r1, #65	; 0x41
      _b = b;
    2234:	strb.w	r5, [r3, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2238:	movs	r5, #193	; 0xc1
    223a:	strb.w	r1, [r3, #202]	; 0xca
    223e:	mvn.w	r1, #51	; 0x33
    2242:	strb.w	r6, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2246:	movs	r6, #22
      _s = s;
    2248:	strb.w	r1, [r3, #205]	; 0xcd
      _b = b;
    224c:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2250:	strb.w	r8, [r3, #208]	; 0xd0
      _b = b;
    2254:	strb.w	r1, [r3, #206]	; 0xce
    2258:	mvn.w	r1, #21
    225c:	strb.w	r1, [r3, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2260:	mov.w	r1, #35	; 0x23
    2264:	strb.w	r1, [r3, #214]	; 0xd6
      _b = b;
    2268:	mvn.w	r1, #74	; 0x4a
    226c:	strb.w	r1, [r3, #215]	; 0xd7
    2270:	mvn.w	r1, #66	; 0x42
    2274:	strb.w	r1, [r3, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2278:	mov.w	r1, #127	; 0x7f
    227c:	strb.w	r1, [r3, #219]	; 0xdb
      _s = s;
      _b = b;
    2280:	mvn.w	r1, #3
    2284:	strb.w	r4, [r3, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2288:	movs	r4, #55	; 0x37
      _s = s;
      _b = b;
    228a:	strb.w	r1, [r3, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    228e:	mov.w	r1, #106	; 0x6a
      _s = s;
      _b = b;
    2292:	strb.w	lr, [r3, #242]	; 0xf2
    2296:	mov.w	lr, #169	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    229a:	strb.w	r1, [r3, #234]	; 0xea
      _s = s;
      _b = b;
    229e:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22a2:	strb.w	r0, [r3, #231]	; 0xe7
      _s = s;
      _b = b;
    22a6:	strb.w	r1, [r3, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22aa:	mvn.w	r1, #82	; 0x52
    22ae:	strb.w	r0, [r3, #232]	; 0xe8
    22b2:	strb.w	r1, [r3, #241]	; 0xf1
      _b = b;
    22b6:	mvn.w	r1, #67	; 0x43
    22ba:	strb.w	r9, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22be:	mov.w	r9, #17
      _b = b;
    22c2:	strb.w	r1, [r3, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22c6:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ca:	strb.w	ip, [r3, #240]	; 0xf0
      _s = s;
    22ce:	strb.w	r1, [r3, #250]	; 0xfa
      _b = b;
    22d2:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22d6:	strb.w	r5, [r3, #247]	; 0xf7
      _b = b;
    22da:	strb.w	r1, [r3, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22de:	mov.w	r1, #77	; 0x4d
    22e2:	strb.w	r6, [r3, #249]	; 0xf9
    22e6:	strb.w	r1, [r3, #255]	; 0xff
      _s = s;
    22ea:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ee:	strb.w	r4, [r3, #252]	; 0xfc
      _s = s;
    22f2:	strb.w	r1, [r3, #259]	; 0x103
      _b = b;
    22f6:	mvn.w	r1, #74	; 0x4a
    22fa:	strb.w	fp, [r3, #254]	; 0xfe
    22fe:	strb.w	r1, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2302:	mvn.w	r1, #43	; 0x2b
      _s = s;
    2306:	strb.w	fp, [r3, #256]	; 0x100
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    230a:	mov.w	fp, #149	; 0x95
    230e:	strb.w	r1, [r3, #261]	; 0x105
      _s = s;
    2312:	mov.w	r1, #87	; 0x57
      _b = b;
    2316:	strb.w	lr, [r3, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    231a:	strb.w	r1, [r3, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    231e:	mov.w	r1, #33	; 0x21
    2322:	strb.w	r1, [r3, #243]	; 0xf3
      _s = s;
    2326:	mov.w	r1, #66	; 0x42
    232a:	strb.w	r1, [r3, #235]	; 0xeb
      _b = b;
    232e:	mvn.w	r1, #110	; 0x6e
    2332:	strb.w	r1, [r3, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2336:	mov.w	r1, #102	; 0x66
    233a:	strb.w	r1, [r3, #237]	; 0xed
      _s = s;
    233e:	mov.w	r1, #72	; 0x48
    2342:	strb.w	r1, [r3, #238]	; 0xee
    2346:	mvn.w	r1, #113	; 0x71
    234a:	strb.w	r1, [r3, #244]	; 0xf4
    234e:	strb.w	r1, [r3, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2352:	mov.w	r1, #29
    2356:	strb.w	r1, [r3, #246]	; 0xf6
    235a:	mov.w	r1, #112	; 0x70
    235e:	strb.w	r1, [r3, #258]	; 0x102
      _s = s;
      _b = b;
    2362:	mov.w	r1, #32
    2366:	strb.w	r8, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    236a:	mov.w	r8, #69	; 0x45
      _b = b;
    236e:	strb.w	r1, [r3, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2372:	mvn.w	r1, #125	; 0x7d
      _s = s;
    2376:	strb.w	r4, [r3, #283]	; 0x11b
    237a:	movs	r4, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    237c:	strb.w	r1, [r3, #264]	; 0x108
    2380:	mvn.w	r1, #117	; 0x75
      _s = s;
    2384:	strb.w	r9, [r3, #286]	; 0x11e
      _b = b;
    2388:	mov.w	r9, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    238c:	strb.w	r1, [r3, #267]	; 0x10b
    2390:	mvn.w	r1, #120	; 0x78
    2394:	strb.w	fp, [r3, #294]	; 0x126
    2398:	mov.w	fp, #146	; 0x92
    239c:	strb.w	r1, [r3, #270]	; 0x10e
    23a0:	mvn.w	r1, #118	; 0x76
      _s = s;
      _b = b;
    23a4:	strb.w	r5, [r3, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23a8:	strb.w	r1, [r3, #273]	; 0x111
      _s = s;
    23ac:	mvn.w	r1, #30
    23b0:	strb.w	r4, [r3, #271]	; 0x10f
    23b4:	strb.w	r1, [r3, #274]	; 0x112
      _b = b;
    23b8:	mov.w	r1, #51	; 0x33
    23bc:	strb.w	r4, [r3, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23c0:	movs	r4, #215	; 0xd7
      _b = b;
    23c2:	strb.w	r1, [r3, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23c6:	mvn.w	r1, #123	; 0x7b
      _s = s;
    23ca:	strb.w	r8, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23ce:	strb.w	r1, [r3, #276]	; 0x114
    23d2:	mvn.w	r1, #122	; 0x7a
      _s = s;
    23d6:	strb.w	r8, [r3, #289]	; 0x121
      _b = b;
    23da:	mov.w	r8, #209	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23de:	strb.w	r1, [r3, #279]	; 0x117
      _s = s;
    23e2:	mov.w	r1, #48	; 0x30
      _b = b;
    23e6:	strb.w	r9, [r3, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23ea:	strb.w	r1, [r3, #280]	; 0x118
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23ee:	mvn.w	r1, #119	; 0x77
    23f2:	strb.w	fp, [r3, #288]	; 0x120
    23f6:	strb.w	r1, [r3, #282]	; 0x11a
    23fa:	mvn.w	r1, #120	; 0x78
    23fe:	strb.w	fp, [r3, #291]	; 0x123
    2402:	strb.w	r1, [r3, #285]	; 0x11d
      _s = s;
    2406:	mov.w	r1, #72	; 0x48
    240a:	strb.w	r1, [r3, #292]	; 0x124
      _b = b;
    240e:	mvn.w	r1, #52	; 0x34
    2412:	strb.w	r1, [r3, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2416:	mov.w	r1, #35	; 0x23
    241a:	strb.w	r1, [r3, #295]	; 0x127
      _b = b;
    241e:	mov.w	r1, #71	; 0x47
    2422:	strb.w	r1, [r3, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2426:	mov.w	r1, #34	; 0x22
    242a:	strb.w	r1, [r3, #265]	; 0x109
      _b = b;
    242e:	mov.w	r1, #110	; 0x6e
    2432:	strb.w	r1, [r3, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2436:	mvn.w	r1, #108	; 0x6c
    243a:	strb.w	r1, [r3, #268]	; 0x10c
      _b = b;
    243e:	mov.w	r1, #99	; 0x63
    2442:	strb.w	r1, [r3, #278]	; 0x116
    2446:	mvn.w	r1, #54	; 0x36
    244a:	strb.w	r1, [r3, #290]	; 0x122
    244e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2452:	strb.w	r7, [r3, #301]	; 0x12d
      _b = b;
    2456:	strb.w	r1, [r3, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    245a:	mov.w	r1, #66	; 0x42
    245e:	strb.w	r7, [r3, #316]	; 0x13c
      _b = b;
    2462:	movs	r7, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2464:	strb.w	r1, [r3, #298]	; 0x12a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2468:	mvn.w	r1, #123	; 0x7b
    246c:	strb.w	ip, [r3, #321]	; 0x141
      _s = s;
    2470:	mov.w	ip, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2474:	strb.w	r1, [r3, #300]	; 0x12c
      _s = s;
      _b = b;
    2478:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    247c:	strb.w	r4, [r3, #319]	; 0x13f
      _b = b;
    2480:	movs	r4, #183	; 0xb7
    2482:	strb.w	r1, [r3, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2486:	mvn.w	r1, #111	; 0x6f
      _s = s;
      _b = b;
    248a:	strb.w	r8, [r3, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    248e:	strb.w	r1, [r3, #303]	; 0x12f
      _s = s;
    2492:	mov.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2496:	strb.w	sl, [r3, #297]	; 0x129
      _s = s;
    249a:	strb.w	r1, [r3, #304]	; 0x130
      _b = b;
    249e:	mvn.w	r1, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24a2:	strb.w	r0, [r3, #306]	; 0x132
      _s = s;
      _b = b;
    24a6:	strb.w	r1, [r3, #305]	; 0x131
    24aa:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24ae:	strb.w	r0, [r3, #307]	; 0x133
      _b = b;
    24b2:	strb.w	r1, [r3, #308]	; 0x134
    24b6:	strb.w	r1, [r3, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24ba:	mvn.w	r1, #32
    24be:	strb.w	r0, [r3, #309]	; 0x135
    24c2:	strb.w	r1, [r3, #312]	; 0x138
    24c6:	mov.w	r1, #77	; 0x4d
      _s = s;
    24ca:	strb.w	r0, [r3, #310]	; 0x136
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24ce:	strb.w	r1, [r3, #315]	; 0x13b
    24d2:	mov.w	r1, #34	; 0x22
      _s = s;
    24d6:	strb.w	ip, [r3, #313]	; 0x139
    24da:	mov.w	ip, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24de:	strb.w	r1, [r3, #318]	; 0x13e
      _s = s;
      _b = b;
    24e2:	mvn.w	r1, #22
    24e6:	strb.w	r7, [r3, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24ea:	movs	r7, #88	; 0x58
      _s = s;
      _b = b;
    24ec:	strb.w	r1, [r3, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24f0:	mvn.w	r1, #112	; 0x70
    24f4:	strb.w	r1, [r3, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24f8:	mov.w	r1, #28
    24fc:	strb.w	r1, [r3, #324]	; 0x144
      _s = s;
    2500:	mvn.w	r1, #59	; 0x3b
    2504:	strb.w	r1, [r3, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2508:	mov.w	r1, #20
    250c:	strb.w	r1, [r3, #327]	; 0x147
      _s = s;
    2510:	mvn.w	r1, #120	; 0x78
    2514:	strb.w	r1, [r3, #328]	; 0x148
      _b = b;
    2518:	mvn.w	r1, #49	; 0x31
    251c:	strb.w	r1, [r3, #317]	; 0x13d
    2520:	mvn.w	r1, #31
    2524:	strb.w	r1, [r3, #323]	; 0x143
    2528:	mvn.w	r1, #54	; 0x36
    252c:	strb.w	r4, [r3, #326]	; 0x146
    2530:	strb.w	r1, [r3, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2534:	mov.w	r1, #29
      _s = s;
      _b = b;
    2538:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    253c:	strb.w	r1, [r3, #330]	; 0x14a
      _s = s;
    2540:	mvn.w	r1, #96	; 0x60
      _b = b;
    2544:	strb.w	lr, [r3, #356]	; 0x164
    2548:	mov.w	lr, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    254c:	strb.w	r1, [r3, #331]	; 0x14b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2550:	mov.w	r1, #112	; 0x70
      _s = s;
    2554:	strb.w	r5, [r3, #361]	; 0x169
    2558:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    255a:	strb.w	r1, [r3, #336]	; 0x150
      _s = s;
    255e:	mov.w	r1, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2562:	strb.w	r7, [r3, #333]	; 0x14d
      _s = s;
    2566:	movs	r7, #61	; 0x3d
    2568:	strb.w	r1, [r3, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    256c:	mov.w	r1, #123	; 0x7b
      _s = s;
    2570:	strb.w	r6, [r3, #340]	; 0x154
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2574:	strb.w	r1, [r3, #339]	; 0x153
      _s = s;
      _b = b;
    2578:	mvn.w	r1, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    257c:	strb.w	r6, [r3, #343]	; 0x157
      _b = b;
    2580:	strb.w	r1, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2584:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    2588:	strb.w	lr, [r3, #344]	; 0x158
    258c:	mov.w	lr, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2590:	strb.w	r1, [r3, #342]	; 0x156
    2594:	mvn.w	r1, #125	; 0x7d
      _s = s;
    2598:	strb.w	r5, [r3, #358]	; 0x166
      _b = b;
    259c:	movs	r5, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    259e:	strb.w	r1, [r3, #345]	; 0x159
    25a2:	mvn.w	r1, #123	; 0x7b
      _s = s;
    25a6:	strb.w	r7, [r3, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25aa:	strb.w	r1, [r3, #348]	; 0x15c
      _s = s;
    25ae:	mvn.w	r1, #4
    25b2:	strb.w	r7, [r3, #346]	; 0x15a
    25b6:	movs	r7, #76	; 0x4c
    25b8:	strb.w	r1, [r3, #349]	; 0x15d
      _b = b;
    25bc:	mvn.w	r1, #112	; 0x70
    25c0:	strb.w	r1, [r3, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25c4:	mov.w	r1, #115	; 0x73
    25c8:	strb.w	r1, [r3, #352]	; 0x160
      _b = b;
    25cc:	mvn.w	r1, #102	; 0x66
    25d0:	strb.w	r1, [r3, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25d4:	mov.w	r1, #127	; 0x7f
    25d8:	strb.w	r1, [r3, #354]	; 0x162
      _s = s;
    25dc:	mov.w	r1, #57	; 0x39
    25e0:	strb.w	r1, [r3, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25e4:	mvn.w	r1, #123	; 0x7b
    25e8:	strb.w	r1, [r3, #357]	; 0x165
      _s = s;
      _b = b;
    25ec:	mvn.w	r1, #118	; 0x76
    25f0:	strb.w	r1, [r3, #359]	; 0x167
    25f4:	mvn.w	r1, #61	; 0x3d
    25f8:	strb.w	r1, [r3, #335]	; 0x14f
    25fc:	mvn.w	r1, #78	; 0x4e
    2600:	strb.w	r1, [r3, #338]	; 0x152
    2604:	mvn.w	r1, #73	; 0x49
    2608:	strb.w	r1, [r3, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    260c:	mov.w	r1, #125	; 0x7d
    2610:	strb.w	r1, [r3, #351]	; 0x15f
    2614:	mvn.w	r1, #114	; 0x72
    2618:	strb.w	r1, [r3, #360]	; 0x168
      _s = s;
      _b = b;
    261c:	mov.w	r1, #121	; 0x79
    2620:	strb.w	r4, [r3, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2624:	movs	r4, #92	; 0x5c
      _b = b;
    2626:	strb.w	r1, [r3, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    262a:	mov.w	r1, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    262e:	strb.w	r0, [r3, #387]	; 0x183
      _s = s;
    2632:	strb.w	r1, [r3, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2636:	mvn.w	r1, #112	; 0x70
      _s = s;
    263a:	strb.w	r0, [r3, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    263e:	movs	r0, #155	; 0x9b
    2640:	strb.w	r1, [r3, #363]	; 0x16b
      _s = s;
    2644:	mov.w	r1, #115	; 0x73
      _b = b;
    2648:	strb.w	lr, [r3, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    264c:	mov.w	lr, #192	; 0xc0
    2650:	strb.w	r1, [r3, #364]	; 0x16c
      _b = b;
    2654:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2658:	strb.w	r7, [r3, #391]	; 0x187
      _b = b;
    265c:	movs	r7, #243	; 0xf3
    265e:	strb.w	r1, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2662:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    2666:	strb.w	r5, [r3, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    266a:	movs	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    266c:	strb.w	r1, [r3, #366]	; 0x16e
      _s = s;
      _b = b;
    2670:	mvn.w	r1, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2674:	strb.w	sl, [r3, #378]	; 0x17a
      _s = s;
      _b = b;
    2678:	strb.w	r1, [r3, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    267c:	mvn.w	r1, #122	; 0x7a
      _s = s;
    2680:	strb.w	ip, [r3, #373]	; 0x175
      _b = b;
    2684:	mov.w	ip, #184	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2688:	strb.w	r1, [r3, #372]	; 0x174
    268c:	mvn.w	r1, #123	; 0x7b
      _s = s;
    2690:	strb.w	r4, [r3, #394]	; 0x18a
      _b = b;
    2694:	movs	r4, #160	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2696:	strb.w	r1, [r3, #375]	; 0x177
      _s = s;
    269a:	mov.w	r1, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    269e:	strb.w	r0, [r3, #369]	; 0x171
      _s = s;
    26a2:	strb.w	r1, [r3, #376]	; 0x178
    26a6:	mvn.w	r1, #79	; 0x4f
      _b = b;
    26aa:	strb.w	r7, [r3, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26ae:	strb.w	r1, [r3, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26b2:	mvn.w	r1, #122	; 0x7a
      _s = s;
    26b6:	strb.w	lr, [r3, #382]	; 0x17e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26ba:	strb.w	r1, [r3, #381]	; 0x17d
    26be:	strb.w	r1, [r3, #384]	; 0x180
      _s = s;
      _b = b;
    26c2:	mvn.w	r1, #43	; 0x2b
    26c6:	strb.w	lr, [r3, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26ca:	mov.w	lr, #178	; 0xb2
      _b = b;
    26ce:	strb.w	r1, [r3, #386]	; 0x182
    26d2:	mvn.w	r1, #5
    26d6:	strb.w	r1, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26da:	mvn.w	r1, #37	; 0x25
    26de:	strb.w	r1, [r3, #390]	; 0x186
    26e2:	mov.w	r1, #101	; 0x65
    26e6:	strb.w	r1, [r3, #393]	; 0x189
      _s = s;
    26ea:	mov.w	r1, #45	; 0x2d
    26ee:	strb.w	r1, [r3, #370]	; 0x172
      _b = b;
    26f2:	mvn.w	r1, #23
    26f6:	strb.w	r1, [r3, #380]	; 0x17c
    26fa:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26fe:	strb.w	r5, [r3, #385]	; 0x181
      _b = b;
    2702:	strb.w	r1, [r3, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2706:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    270a:	strb.w	r6, [r3, #399]	; 0x18f
    270e:	movs	r6, #21
      _s = s;
    2710:	strb.w	r1, [r3, #400]	; 0x190
      _b = b;
    2714:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2718:	strb.w	r7, [r3, #403]	; 0x193
      _b = b;
    271c:	movs	r7, #70	; 0x46
    271e:	strb.w	r1, [r3, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2722:	mvn.w	r1, #4
      _b = b;
    2726:	strb.w	r8, [r3, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    272a:	mov.w	r8, #40	; 0x28
      _s = s;
    272e:	strb.w	r1, [r3, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2732:	mov.w	r1, #54	; 0x36
      _s = s;
      _b = b;
    2736:	strb.w	r0, [r3, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    273a:	movs	r0, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    273c:	strb.w	r1, [r3, #408]	; 0x198
      _s = s;
      _b = b;
    2740:	mvn.w	r1, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2744:	strb.w	r6, [r3, #402]	; 0x192
      _s = s;
    2748:	movs	r6, #166	; 0xa6
      _b = b;
    274a:	strb.w	r1, [r3, #410]	; 0x19a
    274e:	mov.w	r1, #127	; 0x7f
    2752:	strb.w	r4, [r3, #395]	; 0x18b
    2756:	strb.w	r1, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    275a:	mov.w	r1, #95	; 0x5f
    275e:	strb.w	r5, [r3, #405]	; 0x195
    2762:	strb.w	r1, [r3, #414]	; 0x19e
      _s = s;
    2766:	mov.w	r1, #87	; 0x57
      _b = b;
    276a:	strb.w	fp, [r3, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    276e:	strb.w	r1, [r3, #415]	; 0x19f
      _b = b;
    2772:	mov.w	r1, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2776:	strb.w	r8, [r3, #396]	; 0x18c
    277a:	mvn.w	r8, #125	; 0x7d
      _s = s;
      _b = b;
    277e:	strb.w	r1, [r3, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2782:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    2786:	strb.w	ip, [r3, #404]	; 0x194
    278a:	mov.w	ip, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    278e:	strb.w	r1, [r3, #417]	; 0x1a1
      _s = s;
    2792:	mov.w	r1, #105	; 0x69
    2796:	strb.w	lr, [r3, #412]	; 0x19c
      _b = b;
    279a:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    279e:	strb.w	r1, [r3, #418]	; 0x1a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27a2:	mov.w	r1, #127	; 0x7f
      _s = s;
      _b = b;
    27a6:	strb.w	r7, [r3, #419]	; 0x1a3
    27aa:	movs	r7, #229	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27ac:	strb.w	r1, [r3, #420]	; 0x1a4
    27b0:	mvn.w	r1, #123	; 0x7b
      _s = s;
    27b4:	strb.w	r0, [r3, #421]	; 0x1a5
    27b8:	movs	r0, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27ba:	strb.w	r1, [r3, #423]	; 0x1a7
      _s = s;
    27be:	mvn.w	r1, #83	; 0x53
    27c2:	strb.w	r6, [r3, #397]	; 0x18d
    27c6:	strb.w	r1, [r3, #424]	; 0x1a8
    27ca:	mov.w	r1, #72	; 0x48
    27ce:	strb.w	r6, [r3, #409]	; 0x199
      _b = b;
    27d2:	movs	r6, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27d4:	strb.w	r1, [r3, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27d8:	mov.w	r1, #111	; 0x6f
    27dc:	strb.w	r1, [r3, #411]	; 0x19b
    27e0:	mov.w	r1, #126	; 0x7e
    27e4:	strb.w	r1, [r3, #426]	; 0x1aa
      _s = s;
      _b = b;
    27e8:	mvn.w	r1, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27ec:	strb.w	r8, [r3, #453]	; 0x1c5
      _s = s;
    27f0:	mvn.w	r8, #78	; 0x4e
      _b = b;
    27f4:	strb.w	r1, [r3, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27f8:	mvn.w	r1, #123	; 0x7b
      _s = s;
    27fc:	strb.w	r8, [r3, #454]	; 0x1c6
      _b = b;
    2800:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2804:	strb.w	r1, [r3, #429]	; 0x1ad
      _s = s;
    2808:	mov.w	r1, #57	; 0x39
      _b = b;
    280c:	strb.w	r8, [r3, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2810:	mov.w	r8, #138	; 0x8a
      _s = s;
    2814:	strb.w	r1, [r3, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2818:	mvn.w	r1, #116	; 0x74
    281c:	str.w	r8, [sp, #8]
      _s = s;
    2820:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2824:	strb.w	r1, [r3, #432]	; 0x1b0
      _s = s;
    2828:	mov.w	r1, #99	; 0x63
    282c:	strb.w	r8, [r3, #457]	; 0x1c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2830:	mvn.w	r8, #123	; 0x7b
      _s = s;
    2834:	strb.w	r1, [r3, #433]	; 0x1b1
      _b = b;
    2838:	mvn.w	r1, #28
    283c:	strb.w	lr, [r3, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2840:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    2844:	strb.w	r1, [r3, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2848:	mvn.w	r1, #117	; 0x75
    284c:	strb.w	r8, [r3, #459]	; 0x1cb
      _s = s;
    2850:	mvn.w	r8, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2854:	strb.w	r1, [r3, #435]	; 0x1b3
      _s = s;
    2858:	mov.w	r1, #95	; 0x5f
      _b = b;
    285c:	strb.w	r9, [r3, #431]	; 0x1af
    2860:	mov.w	r9, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2864:	strb.w	r1, [r3, #436]	; 0x1b4
      _b = b;
    2868:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    286c:	strb.w	sl, [r3, #450]	; 0x1c2
      _s = s;
      _b = b;
    2870:	strb.w	r1, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2874:	mvn.w	r1, #122	; 0x7a
    2878:	str.w	lr, [sp, #4]
      _s = s;
      _b = b;
    287c:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2880:	strb.w	r1, [r3, #438]	; 0x1b6
      _s = s;
    2884:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2888:	strb.w	sl, [r3, #456]	; 0x1c8
      _s = s;
    288c:	strb.w	r1, [r3, #439]	; 0x1b7
      _b = b;
    2890:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2894:	strb.w	r8, [r3, #460]	; 0x1cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2898:	mvn.w	r8, #116	; 0x74
      _s = s;
      _b = b;
    289c:	strb.w	r1, [r3, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28a0:	mvn.w	r1, #116	; 0x74
    28a4:	strb.w	r1, [r3, #441]	; 0x1b9
      _s = s;
    28a8:	mov.w	r1, #98	; 0x62
    28ac:	strb.w	r1, [r3, #442]	; 0x1ba
      _b = b;
    28b0:	mvn.w	r1, #69	; 0x45
    28b4:	strb.w	r1, [r3, #443]	; 0x1bb
    28b8:	mov.w	r1, #114	; 0x72
    28bc:	strb.w	r1, [r3, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28c0:	mvn.w	r1, #108	; 0x6c
    28c4:	strb.w	r1, [r3, #447]	; 0x1bf
      _s = s;
    28c8:	mov.w	r1, #34	; 0x22
    28cc:	strb.w	r1, [r3, #448]	; 0x1c0
    28d0:	mov.w	r1, #73	; 0x49
    28d4:	strb.w	r1, [r3, #451]	; 0x1c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28d8:	movs	r1, #137	; 0x89
    28da:	str	r1, [sp, #0]
      _s = s;
    28dc:	mvn.w	r1, #110	; 0x6e
      _b = b;
    28e0:	strb.w	r7, [r3, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28e4:	mvn.w	r7, #115	; 0x73
    28e8:	strb.w	r4, [r3, #468]	; 0x1d4
      _s = s;
      _b = b;
    28ec:	mvn.w	r4, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28f0:	strb.w	r8, [r3, #465]	; 0x1d1
      _s = s;
    28f4:	mov.w	r8, #29
      _b = b;
    28f8:	strb.w	r4, [r3, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28fc:	mov.w	r4, #106	; 0x6a
      _s = s;
    2900:	strb.w	r8, [r3, #466]	; 0x1d2
    2904:	mov.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2908:	strb.w	r4, [r3, #477]	; 0x1dd
      _s = s;
    290c:	mov.w	r4, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2910:	strb.w	r7, [r3, #444]	; 0x1bc
      _s = s;
    2914:	strb.w	r4, [r3, #478]	; 0x1de
      _b = b;
    2918:	mvn.w	r4, #30
    291c:	strb.w	r7, [r3, #449]	; 0x1c1
    2920:	mvn.w	r7, #55	; 0x37
    2924:	strb.w	r4, [r3, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2928:	mvn.w	r4, #102	; 0x66
    292c:	strb.w	r8, [r3, #469]	; 0x1d5
    2930:	mov.w	r8, #123	; 0x7b
    2934:	strb.w	r4, [r3, #481]	; 0x1e1
      _b = b;
    2938:	mvn.w	r4, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    293c:	strb.w	r0, [r3, #445]	; 0x1bd
      _b = b;
    2940:	strb.w	r4, [r3, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2944:	movs	r4, #97	; 0x61
      _b = b;
    2946:	strb.w	r7, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    294a:	mvn.w	r7, #122	; 0x7a
    294e:	strb.w	r0, [r3, #471]	; 0x1d7
      _s = s;
    2952:	strb.w	r8, [r3, #472]	; 0x1d8
      _b = b;
    2956:	mvn.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    295a:	str	r4, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    295c:	mov.w	r4, #112	; 0x70
    2960:	strb.w	r0, [r3, #486]	; 0x1e6
      _s = s;
    2964:	mvn.w	r0, #34	; 0x22
    2968:	strb.w	r1, [r3, #490]	; 0x1ea
      _b = b;
    296c:	mov.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2970:	strb.w	r7, [r3, #462]	; 0x1ce
      _s = s;
      _b = b;
    2974:	mvn.w	r7, #74	; 0x4a
    2978:	strb.w	r8, [r3, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    297c:	mov.w	r8, #114	; 0x72
    2980:	strb.w	r4, [r3, #483]	; 0x1e3
      _s = s;
    2984:	mov.w	r4, #118	; 0x76
    2988:	strb.w	r0, [r3, #487]	; 0x1e7
      _b = b;
    298c:	mov.w	r0, #120	; 0x78
    2990:	strb.w	r1, [r3, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2994:	mov.w	r1, #105	; 0x69
      _s = s;
      _b = b;
    2998:	strb.w	r7, [r3, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    299c:	mov.w	r7, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29a0:	strb.w	r8, [r3, #474]	; 0x1da
      _s = s;
    29a4:	mov.w	r8, #96	; 0x60
    29a8:	strb.w	r4, [r3, #484]	; 0x1e4
      _b = b;
    29ac:	movs	r4, #232	; 0xe8
    29ae:	strb.w	r0, [r3, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29b2:	mov.w	r0, #98	; 0x62
    29b6:	strb.w	r1, [r3, #492]	; 0x1ec
      _s = s;
      _b = b;
    29ba:	movs	r1, #177	; 0xb1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29bc:	strb.w	r8, [r3, #475]	; 0x1db
    29c0:	mov.w	r8, #252	; 0xfc
      _b = b;
    29c4:	str	r4, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29c6:	movs	r4, #142	; 0x8e
    29c8:	strb.w	r0, [r3, #489]	; 0x1e9
    29cc:	movs	r0, #140	; 0x8c
      _s = s;
      _b = b;
    29ce:	str	r1, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29d0:	mvn.w	r1, #103	; 0x67
    29d4:	strb.w	r7, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29d8:	mvn.w	r7, #52	; 0x34
      _s = s;
    29dc:	strb.w	r1, [r3, #463]	; 0x1cf
      _b = b;
    29e0:	mvn.w	r1, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29e4:	strb.w	r7, [r3, #495]	; 0x1ef
      _s = s;
    29e8:	mov.w	r7, #95	; 0x5f
      _b = b;
    29ec:	strb.w	r1, [r3, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29f0:	mov.w	r1, #38	; 0x26
      _s = s;
    29f4:	strb.w	r7, [r3, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29f8:	mov.w	r7, #121	; 0x79
      _s = s;
      _b = b;
    29fc:	strb.w	r9, [r3, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a00:	mov.w	r9, #132	; 0x84
    2a04:	strb.w	r7, [r3, #498]	; 0x1f2
      _s = s;
    2a08:	mvn.w	r7, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a0c:	strb.w	r1, [r3, #480]	; 0x1e0
      _s = s;
      _b = b;
    2a10:	movs	r1, #130	; 0x82
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a12:	strb.w	r7, [r3, #499]	; 0x1f3
      _b = b;
    2a16:	mov.w	r7, #106	; 0x6a
    2a1a:	strb.w	r6, [r3, #485]	; 0x1e5
    2a1e:	strb.w	r7, [r3, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a22:	mvn.w	r7, #73	; 0x49
      _b = b;
    2a26:	strb.w	ip, [r3, #494]	; 0x1ee
    2a2a:	mov.w	ip, #220	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a2e:	strb.w	r7, [r3, #502]	; 0x1f6
      _b = b;
    2a32:	mvn.w	r7, #80	; 0x50
    2a36:	strb.w	r5, [r3, #497]	; 0x1f1
    2a3a:	strb.w	r7, [r3, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a3e:	ldrb.w	r7, [sp]
    2a42:	strb.w	sl, [r3, #501]	; 0x1f5
    2a46:	strb.w	r7, [r3, #504]	; 0x1f8
      _s = s;
    2a4a:	mvn.w	r7, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a4e:	strb.w	r4, [r3, #507]	; 0x1fb
      _s = s;
    2a52:	strb.w	r7, [r3, #505]	; 0x1f9
      _b = b;
    2a56:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a5a:	strb.w	fp, [r3, #510]	; 0x1fe
      _s = s;
      _b = b;
    2a5e:	strb.w	r7, [r3, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a62:	mvn.w	r7, #45	; 0x2d
    2a66:	strb.w	r7, [r3, #508]	; 0x1fc
      _b = b;
    2a6a:	strb.w	r7, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a6e:	mvn.w	r7, #110	; 0x6e
    2a72:	strb.w	r7, [r3, #511]	; 0x1ff
      _b = b;
    2a76:	mvn.w	r7, #37	; 0x25
    2a7a:	strb.w	r7, [r3, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a7e:	ldrb.w	r7, [sp, #4]
    2a82:	strb.w	r7, [r3, #513]	; 0x201
      _s = s;
    2a86:	mvn.w	r7, #112	; 0x70
    2a8a:	strb.w	r7, [r3, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a8e:	mvn.w	r7, #111	; 0x6f
    2a92:	strb.w	r7, [r3, #516]	; 0x204
      _s = s;
    2a96:	mvn.w	r7, #81	; 0x51
    2a9a:	strb.w	r7, [r3, #517]	; 0x205
      _b = b;
    2a9e:	mvn.w	r7, #31
    2aa2:	strb.w	r7, [r3, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aa6:	mvn.w	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2aaa:	strb.w	fp, [r3, #519]	; 0x207
      _s = s;
      _b = b;
    2aae:	mvn.w	fp, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ab2:	strb.w	r7, [r3, #520]	; 0x208
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ab6:	ldrb.w	r7, [sp, #8]
      _s = s;
      _b = b;
    2aba:	strb.w	fp, [r3, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2abe:	mov.w	fp, #127	; 0x7f
    2ac2:	strb.w	r7, [r3, #522]	; 0x20a
      _s = s;
      _b = b;
    2ac6:	mvn.w	r7, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2aca:	strb.w	fp, [r3, #549]	; 0x225
      _s = s;
      _b = b;
    2ace:	mvn.w	fp, #67	; 0x43
    2ad2:	strb.w	r7, [r3, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ad6:	mov.w	r7, #37	; 0x25
      _b = b;
    2ada:	strb.w	fp, [r3, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ade:	mvn.w	fp, #34	; 0x22
    2ae2:	strb.w	r7, [r3, #526]	; 0x20e
    2ae6:	mov.w	r7, #79	; 0x4f
      _b = b;
    2aea:	strb.w	lr, [r3, #515]	; 0x203
    2aee:	mov.w	lr, #230	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2af2:	strb.w	r7, [r3, #523]	; 0x20b
      _b = b;
    2af6:	mvn.w	r7, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2afa:	strb.w	sl, [r3, #540]	; 0x21c
      _s = s;
      _b = b;
    2afe:	strb.w	r7, [r3, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b02:	mov.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    2b06:	strb.w	r1, [r3, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b0a:	strb.w	r7, [r3, #525]	; 0x20d
      _s = s;
      _b = b;
    2b0e:	mvn.w	r7, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b12:	strb.w	r1, [r3, #546]	; 0x222
      _s = s;
      _b = b;
    2b16:	strb.w	r7, [r3, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b1a:	mov.w	r7, #113	; 0x71
      _s = s;
    2b1e:	strb.w	sl, [r3, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b22:	strb.w	r7, [r3, #528]	; 0x210
      _s = s;
      _b = b;
    2b26:	mvn.w	r7, #43	; 0x2b
    2b2a:	strb.w	r7, [r3, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b2e:	mov.w	r7, #121	; 0x79
    2b32:	strb.w	r7, [r3, #531]	; 0x213
      _s = s;
    2b36:	mov.w	r7, #126	; 0x7e
    2b3a:	strb.w	r7, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b3e:	strb.w	r7, [r3, #534]	; 0x216
      _s = s;
    2b42:	mvn.w	r7, #58	; 0x3a
    2b46:	strb.w	r7, [r3, #535]	; 0x217
      _b = b;
    2b4a:	mvn.w	r7, #65	; 0x41
    2b4e:	strb.w	r7, [r3, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b52:	mov.w	r7, #127	; 0x7f
    2b56:	strb.w	r7, [r3, #537]	; 0x219
      _s = s;
    2b5a:	mvn.w	r7, #107	; 0x6b
    2b5e:	strb.w	r7, [r3, #538]	; 0x21a
      _b = b;
    2b62:	ldrb.w	r7, [sp, #12]
    2b66:	strb.w	r7, [r3, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b6a:	mov.w	r7, #125	; 0x7d
    2b6e:	strb.w	r7, [r3, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b72:	mvn.w	r7, #120	; 0x78
    2b76:	strb.w	r7, [r3, #543]	; 0x21f
      _s = s;
    2b7a:	ldrb.w	r7, [sp, #20]
    2b7e:	strb.w	r7, [r3, #547]	; 0x223
      _b = b;
    2b82:	movs	r7, #161	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b84:	strb.w	sl, [r3, #552]	; 0x228
      _s = s;
    2b88:	strb.w	fp, [r3, #553]	; 0x229
      _b = b;
    2b8c:	mvn.w	fp, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b90:	strb.w	r8, [r3, #559]	; 0x22f
      _b = b;
    2b94:	strb.w	fp, [r3, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b98:	mvn.w	fp, #120	; 0x78
    2b9c:	strb.w	r6, [r3, #570]	; 0x23a
    2ba0:	strb.w	fp, [r3, #555]	; 0x22b
      _s = s;
    2ba4:	mvn.w	fp, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ba8:	strb.w	r6, [r3, #573]	; 0x23d
    2bac:	movs	r6, #133	; 0x85
      _s = s;
    2bae:	strb.w	fp, [r3, #556]	; 0x22c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bb2:	mvn.w	fp, #120	; 0x78
      _s = s;
      _b = b;
    2bb6:	strb.w	r5, [r3, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bba:	movs	r5, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bbc:	strb.w	fp, [r3, #558]	; 0x22e
      _s = s;
    2bc0:	mov	fp, r8
    2bc2:	mov.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bc6:	strb.w	r6, [r3, #579]	; 0x243
      _s = s;
    2bca:	strb.w	r8, [r3, #529]	; 0x211
      _b = b;
    2bce:	mvn.w	r8, #42	; 0x2a
    2bd2:	strb.w	r8, [r3, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bd6:	mov.w	r8, #82	; 0x52
    2bda:	strb.w	r8, [r3, #544]	; 0x220
      _b = b;
    2bde:	mvn.w	r8, #53	; 0x35
    2be2:	strb.w	r8, [r3, #557]	; 0x22d
    2be6:	mvn.w	r8, #47	; 0x2f
    2bea:	strb.w	r8, [r3, #533]	; 0x215
    2bee:	mvn.w	r8, #52	; 0x34
    2bf2:	strb.w	r8, [r3, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bf6:	mvn.w	r8, #119	; 0x77
    2bfa:	strb.w	r8, [r3, #561]	; 0x231
      _s = s;
    2bfe:	mvn.w	r8, #5
    2c02:	strb.w	r8, [r3, #562]	; 0x232
      _b = b;
    2c06:	ldrb.w	r8, [sp, #12]
    2c0a:	strb.w	r8, [r3, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c0e:	mov.w	r8, #111	; 0x6f
    2c12:	strb.w	r8, [r3, #564]	; 0x234
      _s = s;
    2c16:	mvn.w	r8, #104	; 0x68
    2c1a:	strb.w	r8, [r3, #565]	; 0x235
      _b = b;
    2c1e:	mvn.w	r8, #119	; 0x77
    2c22:	strb.w	r8, [r3, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c26:	mov.w	r8, #99	; 0x63
    2c2a:	strb.w	r8, [r3, #567]	; 0x237
      _s = s;
    2c2e:	mov.w	r8, #114	; 0x72
    2c32:	strb.w	r8, [r3, #568]	; 0x238
      _b = b;
    2c36:	mov.w	r8, #60	; 0x3c
    2c3a:	strb.w	r8, [r3, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c3e:	mov.w	r8, #106	; 0x6a
    2c42:	strb.w	r8, [r3, #571]	; 0x23b
    2c46:	mov.w	r8, #102	; 0x66
    2c4a:	strb.w	r8, [r3, #574]	; 0x23e
      _b = b;
    2c4e:	mov.w	r8, #25
    2c52:	strb.w	r8, [r3, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c56:	mov.w	r8, #127	; 0x7f
    2c5a:	strb.w	r8, [r3, #576]	; 0x240
      _s = s;
    2c5e:	mov.w	r8, #115	; 0x73
    2c62:	strb.w	r8, [r3, #577]	; 0x241
      _b = b;
    2c66:	mov.w	r8, #121	; 0x79
    2c6a:	strb.w	r8, [r3, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c6e:	mvn.w	r8, #61	; 0x3d
    2c72:	strb.w	r8, [r3, #580]	; 0x244
      _b = b;
    2c76:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c7a:	str.w	fp, [sp, #24]
      _b = b;
    2c7e:	strb.w	r8, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c82:	mvn.w	r8, #111	; 0x6f
      _s = s;
    2c86:	strb.w	fp, [r3, #583]	; 0x247
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c8a:	mov.w	fp, #134	; 0x86
    2c8e:	strb.w	r8, [r3, #582]	; 0x246
      _s = s;
      _b = b;
    2c92:	mvn.w	r8, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c96:	strb.w	r4, [r3, #585]	; 0x249
      _s = s;
      _b = b;
    2c9a:	strb.w	r8, [r3, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c9e:	mov.w	r8, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ca2:	strb.w	r0, [r3, #588]	; 0x24c
      _s = s;
    2ca6:	strb.w	r8, [r3, #586]	; 0x24a
    2caa:	mov.w	r8, #114	; 0x72
      _b = b;
    2cae:	strb.w	ip, [r3, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cb2:	strb.w	r8, [r3, #589]	; 0x24d
      _b = b;
    2cb6:	ldrb.w	r8, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cba:	strb.w	r0, [r3, #594]	; 0x252
      _s = s;
      _b = b;
    2cbe:	strb.w	r8, [r3, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cc2:	mvn.w	r8, #116	; 0x74
    2cc6:	strb.w	r0, [r3, #597]	; 0x255
    2cca:	strb.w	r8, [r3, #591]	; 0x24f
      _s = s;
    2cce:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cd2:	strb.w	r4, [r3, #600]	; 0x258
      _s = s;
    2cd6:	strb.w	r8, [r3, #592]	; 0x250
      _b = b;
    2cda:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cde:	strb.w	r1, [r3, #601]	; 0x259
      _b = b;
    2ce2:	strb.w	r8, [r3, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ce6:	mov.w	r8, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cea:	strb.w	r6, [r3, #603]	; 0x25b
      _s = s;
    2cee:	movs	r6, #215	; 0xd7
    2cf0:	strb.w	r8, [r3, #595]	; 0x253
    2cf4:	mov.w	r8, #110	; 0x6e
      _b = b;
    2cf8:	strb.w	r0, [r3, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cfc:	strb.w	r8, [r3, #598]	; 0x256
      _b = b;
    2d00:	mvn.w	r8, #58	; 0x3a
    2d04:	strb.w	r8, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d08:	mov.w	r8, #110	; 0x6e
    2d0c:	strb.w	r8, [r3, #606]	; 0x25e
      _s = s;
    2d10:	mov.w	r8, #93	; 0x5d
    2d14:	strb.w	r8, [r3, #607]	; 0x25f
      _b = b;
    2d18:	mvn.w	r8, #116	; 0x74
    2d1c:	strb.w	r8, [r3, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d20:	mov.w	r8, #120	; 0x78
    2d24:	strb.w	r8, [r3, #609]	; 0x261
    2d28:	strb.w	r8, [r3, #612]	; 0x264
      _s = s;
    2d2c:	mov.w	r8, #124	; 0x7c
    2d30:	strb.w	r8, [r3, #613]	; 0x265
      _b = b;
    2d34:	mvn.w	r8, #93	; 0x5d
    2d38:	strb.w	r8, [r3, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d3c:	mov.w	r8, #126	; 0x7e
    2d40:	strb.w	r8, [r3, #615]	; 0x267
      _s = s;
    2d44:	mov.w	r8, #115	; 0x73
    2d48:	strb.w	r8, [r3, #616]	; 0x268
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d4c:	mov.w	r8, #123	; 0x7b
      _s = s;
      _b = b;
    2d50:	strb.w	r7, [r3, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d54:	strb.w	r8, [r3, #618]	; 0x26a
      _s = s;
      _b = b;
    2d58:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d5c:	strb.w	r7, [r3, #642]	; 0x282
      _s = s;
      _b = b;
    2d60:	mvn.w	r7, #120	; 0x78
    2d64:	strb.w	r8, [r3, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d68:	mov.w	r8, #20
      _b = b;
    2d6c:	strb.w	r7, [r3, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d70:	mov.w	r7, #119	; 0x77
    2d74:	strb.w	r8, [r3, #622]	; 0x26e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d78:	mov.w	r8, #120	; 0x78
      _s = s;
    2d7c:	strb.w	r7, [r3, #646]	; 0x286
    2d80:	mov.w	r7, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d84:	strb.w	r8, [r3, #624]	; 0x270
      _s = s;
    2d88:	mov.w	r8, #45	; 0x2d
      _b = b;
    2d8c:	strb.w	lr, [r3, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d90:	strb.w	r8, [r3, #625]	; 0x271
      _b = b;
    2d94:	mvn.w	r8, #19
    2d98:	strb.w	lr, [r3, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d9c:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    2da0:	strb.w	r8, [r3, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2da4:	mov.w	r8, #78	; 0x4e
    2da8:	strb.w	r7, [r3, #649]	; 0x289
      _b = b;
    2dac:	mov.w	r7, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2db0:	strb.w	r8, [r3, #604]	; 0x25c
    2db4:	mov.w	r8, #122	; 0x7a
      _b = b;
    2db8:	strb.w	ip, [r3, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2dbc:	strb.w	r8, [r3, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dc0:	mvn.w	r8, #126	; 0x7e
    2dc4:	strb.w	lr, [r3, #651]	; 0x28b
    2dc8:	strb.w	r8, [r3, #621]	; 0x26d
      _s = s;
    2dcc:	mov.w	r8, #42	; 0x2a
      _b = b;
    2dd0:	strb.w	r7, [r3, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dd4:	movs	r7, #183	; 0xb7
      _s = s;
    2dd6:	strb.w	r8, [r3, #619]	; 0x26b
      _b = b;
    2dda:	mvn.w	r8, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dde:	strb.w	lr, [r3, #654]	; 0x28e
      _s = s;
      _b = b;
    2de2:	strb.w	r8, [r3, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2de6:	mvn.w	r8, #45	; 0x2d
    2dea:	strb.w	ip, [r3, #655]	; 0x28f
    2dee:	strb.w	r8, [r3, #658]	; 0x292
      _b = b;
    2df2:	mvn.w	r8, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2df6:	strb.w	lr, [r3, #657]	; 0x291
    2dfa:	mvn.w	lr, #120	; 0x78
      _s = s;
      _b = b;
    2dfe:	strb.w	r8, [r3, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e02:	ldrb.w	r8, [sp, #8]
    2e06:	strb.w	r1, [r3, #627]	; 0x273
    2e0a:	strb.w	r8, [r3, #639]	; 0x27f
      _s = s;
      _b = b;
    2e0e:	mvn.w	r8, #111	; 0x6f
    2e12:	strb.w	r8, [r3, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e16:	mov.w	r8, #1
    2e1a:	strb.w	r8, [r3, #648]	; 0x288
      _s = s;
      _b = b;
    2e1e:	mov.w	r8, #112	; 0x70
    2e22:	strb.w	r8, [r3, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e26:	mvn.w	r8, #55	; 0x37
    2e2a:	strb.w	r8, [r3, #628]	; 0x274
      _b = b;
    2e2e:	mvn.w	r8, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e32:	strb.w	r5, [r3, #643]	; 0x283
      _b = b;
    2e36:	strb.w	r8, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e3a:	mvn.w	r8, #8
      _b = b;
    2e3e:	strb.w	r5, [r3, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e42:	movs	r5, #137	; 0x89
      _s = s;
    2e44:	strb.w	r8, [r3, #631]	; 0x277
      _b = b;
    2e48:	mvn.w	r8, #119	; 0x77
    2e4c:	strb.w	ip, [r3, #662]	; 0x296
    2e50:	mov.w	ip, #232	; 0xe8
    2e54:	strb.w	r8, [r3, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e58:	mvn.w	r8, #5
    2e5c:	strb.w	r4, [r3, #661]	; 0x295
    2e60:	strb.w	r8, [r3, #634]	; 0x27a
      _b = b;
    2e64:	mvn.w	r8, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e68:	strb.w	r4, [r3, #672]	; 0x2a0
    2e6c:	movs	r4, #138	; 0x8a
      _s = s;
      _b = b;
    2e6e:	strb.w	r8, [r3, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e72:	mvn.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e76:	strb.w	r9, [r3, #630]	; 0x276
      _s = s;
    2e7a:	strb.w	r8, [r3, #637]	; 0x27d
    2e7e:	mvn.w	r8, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e82:	strb.w	sl, [r3, #633]	; 0x279
      _s = s;
    2e86:	strb.w	r8, [r3, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e8a:	mvn.w	r8, #15
    2e8e:	strb.w	sl, [r3, #636]	; 0x27c
    2e92:	strb.w	r8, [r3, #645]	; 0x285
      _s = s;
      _b = b;
    2e96:	mvn.w	r8, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e9a:	strb.w	r9, [r3, #652]	; 0x28c
      _b = b;
    2e9e:	strb.w	r8, [r3, #656]	; 0x290
    2ea2:	mvn.w	r8, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ea6:	strb.w	r5, [r3, #660]	; 0x294
      _s = s;
      _b = b;
    2eaa:	strb.w	r8, [r3, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2eae:	mvn.w	r8, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2eb2:	strb.w	lr, [r3, #663]	; 0x297
      _s = s;
      _b = b;
    2eb6:	mov.w	lr, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2eba:	strb.w	r8, [r3, #667]	; 0x29b
    2ebe:	mvn.w	r8, #81	; 0x51
      _b = b;
    2ec2:	strb.w	ip, [r3, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ec6:	strb.w	r8, [r3, #670]	; 0x29e
      _b = b;
    2eca:	mvn.w	r8, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ece:	strb.w	r5, [r3, #669]	; 0x29d
    2ed2:	movs	r5, #150	; 0x96
      _s = s;
      _b = b;
    2ed4:	strb.w	r8, [r3, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ed8:	mvn.w	r8, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2edc:	strb.w	r0, [r3, #675]	; 0x2a3
      _s = s;
    2ee0:	strb.w	r8, [r3, #673]	; 0x2a1
      _b = b;
    2ee4:	mvn.w	r8, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ee8:	strb.w	r4, [r3, #678]	; 0x2a6
      _s = s;
      _b = b;
    2eec:	strb.w	r8, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ef0:	mov.w	r8, #114	; 0x72
      _b = b;
    2ef4:	strb.w	ip, [r3, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ef8:	mov.w	ip, #133	; 0x85
    2efc:	strb.w	r4, [r3, #681]	; 0x2a9
      _s = s;
    2f00:	mvn.w	r4, #92	; 0x5c
    2f04:	strb.w	r8, [r3, #682]	; 0x2aa
      _b = b;
    2f08:	mvn.w	r8, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f0c:	strb.w	r6, [r3, #685]	; 0x2ad
    2f10:	movs	r6, #177	; 0xb1
      _b = b;
    2f12:	strb.w	r8, [r3, #668]	; 0x29c
    2f16:	mvn.w	r8, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f1a:	strb.w	ip, [r3, #705]	; 0x2c1
      _s = s;
      _b = b;
    2f1e:	strb.w	r8, [r3, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f22:	strb.w	r8, [r3, #687]	; 0x2af
    2f26:	strb.w	r8, [r3, #690]	; 0x2b2
      _s = s;
    2f2a:	mvn.w	r8, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f2e:	strb.w	ip, [r3, #708]	; 0x2c4
      _s = s;
      _b = b;
    2f32:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f36:	strb.w	r8, [r3, #676]	; 0x2a4
    2f3a:	mov.w	r8, #86	; 0x56
      _b = b;
    2f3e:	strb.w	ip, [r3, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f42:	mvn.w	ip, #116	; 0x74
      _s = s;
    2f46:	strb.w	r8, [r3, #679]	; 0x2a7
      _b = b;
    2f4a:	mvn.w	r8, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f4e:	strb.w	r6, [r3, #715]	; 0x2cb
      _b = b;
    2f52:	strb.w	r8, [r3, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f56:	mov.w	r8, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f5a:	strb.w	r6, [r3, #720]	; 0x2d0
      _s = s;
    2f5e:	mvn.w	r6, #66	; 0x42
    2f62:	strb.w	r8, [r3, #688]	; 0x2b0
      _b = b;
    2f66:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f6a:	strb.w	r1, [r3, #684]	; 0x2ac
      _s = s;
      _b = b;
    2f6e:	strb.w	r8, [r3, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f72:	mov.w	r8, #90	; 0x5a
      _b = b;
    2f76:	strb.w	lr, [r3, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f7a:	strb.w	r8, [r3, #691]	; 0x2b3
      _b = b;
    2f7e:	mov.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f82:	strb.w	fp, [r3, #666]	; 0x29a
    2f86:	mov.w	fp, #143	; 0x8f
      _s = s;
      _b = b;
    2f8a:	strb.w	r8, [r3, #692]	; 0x2b4
    2f8e:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f92:	strb.w	r4, [r3, #664]	; 0x298
    2f96:	movs	r4, #246	; 0xf6
      _b = b;
    2f98:	strb.w	r8, [r3, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f9c:	mov.w	r8, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fa0:	strb.w	lr, [r3, #696]	; 0x2b8
      _s = s;
    2fa4:	mov.w	lr, #71	; 0x47
    2fa8:	strb.w	r8, [r3, #697]	; 0x2b9
      _b = b;
    2fac:	mov.w	r8, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fb0:	strb.w	r9, [r3, #711]	; 0x2c7
      _s = s;
      _b = b;
    2fb4:	mov.w	r9, #20
    2fb8:	strb.w	r8, [r3, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fbc:	mov.w	r8, #120	; 0x78
    2fc0:	strb.w	ip, [r3, #714]	; 0x2ca
    2fc4:	mov.w	ip, #120	; 0x78
    2fc8:	strb.w	r8, [r3, #699]	; 0x2bb
      _s = s;
      _b = b;
    2fcc:	mvn.w	r8, #38	; 0x26
    2fd0:	strb.w	r8, [r3, #701]	; 0x2bd
    2fd4:	mvn.w	r8, #29
    2fd8:	strb.w	r8, [r3, #704]	; 0x2c0
    2fdc:	ldrb.w	r8, [sp, #24]
    2fe0:	strb.w	r8, [r3, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fe4:	mov.w	r8, #115	; 0x73
    2fe8:	strb.w	r6, [r3, #721]	; 0x2d1
    2fec:	movs	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fee:	strb.w	r7, [r3, #723]	; 0x2d3
    2ff2:	mvn.w	r7, #51	; 0x33
      _s = s;
    2ff6:	strb.w	r8, [r3, #724]	; 0x2d4
    2ffa:	mov.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ffe:	strb.w	r7, [r3, #693]	; 0x2b5
    3002:	mov.w	r7, #95	; 0x5f
      _s = s;
    3006:	strb.w	r1, [r3, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    300a:	mvn.w	r1, #120	; 0x78
    300e:	strb.w	r7, [r3, #702]	; 0x2be
      _s = s;
    3012:	mov.w	r7, #87	; 0x57
    3016:	strb.w	r8, [r3, #694]	; 0x2b6
    301a:	mov.w	r8, #34	; 0x22
    301e:	strb.w	r7, [r3, #706]	; 0x2c2
      _b = b;
    3022:	mvn.w	r7, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3026:	strb.w	r1, [r3, #741]	; 0x2e5
    302a:	movs	r1, #137	; 0x89
      _s = s;
      _b = b;
    302c:	strb.w	r7, [r3, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3030:	mvn.w	r7, #7
    3034:	strb.w	r8, [r3, #700]	; 0x2bc
    3038:	mov.w	r8, #13
    303c:	strb.w	r7, [r3, #709]	; 0x2c5
      _b = b;
    3040:	mvn.w	r7, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3044:	strb.w	r1, [r3, #744]	; 0x2e8
      _s = s;
      _b = b;
    3048:	strb.w	r7, [r3, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    304c:	mvn.w	r7, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3050:	strb.w	r1, [r3, #747]	; 0x2eb
      _s = s;
      _b = b;
    3054:	mvn.w	r1, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3058:	strb.w	r7, [r3, #712]	; 0x2c8
      _b = b;
    305c:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3060:	strb.w	r8, [r3, #703]	; 0x2bf
      _b = b;
    3064:	mvn.w	r8, #49	; 0x31
    3068:	strb.w	r7, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    306c:	mvn.w	r7, #99	; 0x63
    3070:	strb.w	sl, [r3, #738]	; 0x2e2
    3074:	mvn.w	sl, #111	; 0x6f
    3078:	strb.w	r7, [r3, #717]	; 0x2cd
      _s = s;
    307c:	mov.w	r7, #91	; 0x5b
    3080:	strb.w	r7, [r3, #718]	; 0x2ce
      _b = b;
    3084:	mvn.w	r7, #6
    3088:	strb.w	r7, [r3, #722]	; 0x2d2
    308c:	mvn.w	r7, #5
    3090:	strb.w	r7, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3094:	mvn.w	r7, #56	; 0x38
    3098:	strb.w	r7, [r3, #730]	; 0x2da
      _b = b;
    309c:	mvn.w	r7, #20
    30a0:	strb.w	r7, [r3, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30a4:	mvn.w	r7, #93	; 0x5d
    30a8:	strb.w	r7, [r3, #732]	; 0x2dc
      _s = s;
    30ac:	ldrb.w	r7, [sp, #24]
    30b0:	strb.w	r7, [r3, #733]	; 0x2dd
      _b = b;
    30b4:	mvn.w	r7, #31
    30b8:	strb.w	r7, [r3, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30bc:	ldrb.w	r7, [sp, #4]
    30c0:	strb.w	r7, [r3, #735]	; 0x2df
      _s = s;
      _b = b;
    30c4:	mvn.w	r7, #54	; 0x36
    30c8:	strb.w	r7, [r3, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30cc:	mvn.w	r7, #6
    30d0:	strb.w	r7, [r3, #742]	; 0x2e6
    30d4:	movs	r7, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d6:	strb.w	r0, [r3, #750]	; 0x2ee
    30da:	movs	r0, #168	; 0xa8
      _s = s;
      _b = b;
    30dc:	strb.w	r1, [r3, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30e0:	mov.w	r1, #85	; 0x55
      _b = b;
    30e4:	strb.w	r8, [r3, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30e8:	mvn.w	r8, #62	; 0x3e
    30ec:	strb.w	r1, [r3, #757]	; 0x2f5
    30f0:	mov.w	r1, #123	; 0x7b
    30f4:	strb.w	r8, [r3, #748]	; 0x2ec
      _b = b;
    30f8:	mvn.w	r8, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30fc:	strb.w	r1, [r3, #754]	; 0x2f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3100:	mvn.w	r1, #71	; 0x47
      _s = s;
      _b = b;
    3104:	strb.w	r8, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3108:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    310c:	strb.w	r1, [r3, #726]	; 0x2d6
    3110:	mvn.w	r1, #103	; 0x67
      _s = s;
    3114:	strb.w	r4, [r3, #745]	; 0x2e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3118:	strb.w	r1, [r3, #729]	; 0x2d9
      _s = s;
    311c:	mvn.w	r1, #84	; 0x54
    3120:	strb.w	r8, [r3, #751]	; 0x2ef
    3124:	mov.w	r8, #151	; 0x97
    3128:	strb.w	r1, [r3, #736]	; 0x2e0
    312c:	mvn.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3130:	strb.w	fp, [r2, #753]	; 0x2f1
      _s = s;
    3134:	strb.w	r1, [r3, #739]	; 0x2e3
      _b = b;
    3138:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    313c:	strb.w	r5, [r2, #756]	; 0x2f4
      _s = s;
      _b = b;
    3140:	strb.w	r1, [r3, #740]	; 0x2e4
    3144:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3148:	strb.w	fp, [r2, #759]	; 0x2f7
      _s = s;
      _b = b;
    314c:	strb.w	r1, [r3, #743]	; 0x2e7
    3150:	mvn.w	r3, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3154:	strb.w	r5, [r2, #762]	; 0x2fa
      _s = s;
    3158:	movs	r1, #121	; 0x79
      _b = b;
    315a:	strb.w	r3, [r2, #752]	; 0x2f0
    315e:	mvn.w	r3, #28
    3162:	strb.w	fp, [r2, #782]	; 0x30e
    3166:	strb.w	r3, [r2, #755]	; 0x2f3
    316a:	mvn.w	r3, #17
    316e:	strb.w	r9, [r2, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3172:	mov.w	r9, #142	; 0x8e
      _s = s;
      _b = b;
    3176:	strb.w	r3, [r2, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    317a:	mvn.w	r3, #43	; 0x2b
    317e:	strb.w	ip, [r2, #774]	; 0x306
    3182:	mov.w	ip, #158	; 0x9e
    3186:	strb.w	r3, [r2, #768]	; 0x300
      _s = s;
    318a:	mov.w	r3, #90	; 0x5a
    318e:	strb.w	lr, [r2, #775]	; 0x307
      _b = b;
    3192:	mov.w	lr, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3196:	strb.w	r3, [r2, #769]	; 0x301
      _b = b;
    319a:	mov.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    319e:	strb.w	r6, [r2, #790]	; 0x316
    31a2:	movs	r6, #252	; 0xfc
      _b = b;
    31a4:	strb.w	r3, [r2, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31a8:	mvn.w	r3, #50	; 0x32
    31ac:	strb.w	r3, [r2, #771]	; 0x303
      _s = s;
    31b0:	mov.w	r3, #90	; 0x5a
    31b4:	strb.w	r3, [r2, #787]	; 0x313
      _b = b;
    31b8:	mov.w	r3, #21
    31bc:	strb.w	r3, [r2, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31c0:	mvn.w	r3, #126	; 0x7e
    31c4:	strb.w	r3, [r2, #760]	; 0x2f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31c8:	strb.w	r3, [r2, #783]	; 0x30f
      _s = s;
      _b = b;
    31cc:	mvn.w	r3, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31d0:	strb.w	sl, [r2, #789]	; 0x315
      _s = s;
      _b = b;
    31d4:	mvn.w	sl, #5
    31d8:	strb.w	r3, [r2, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31dc:	mvn.w	r3, #41	; 0x29
      _b = b;
    31e0:	strb.w	sl, [r2, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e4:	mvn.w	sl, #91	; 0x5b
      _s = s;
    31e8:	strb.w	r3, [r2, #763]	; 0x2fb
      _b = b;
    31ec:	mvn.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31f0:	strb.w	sl, [r2, #795]	; 0x31b
      _s = s;
    31f4:	mov.w	sl, #85	; 0x55
      _b = b;
    31f8:	strb.w	r3, [r2, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31fc:	mvn.w	r3, #64	; 0x40
      _s = s;
    3200:	strb.w	sl, [r2, #796]	; 0x31c
      _b = b;
    3204:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3208:	strb.w	r3, [r2, #765]	; 0x2fd
      _s = s;
    320c:	mov.w	r3, #97	; 0x61
      _b = b;
    3210:	strb.w	sl, [r2, #800]	; 0x320
    3214:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3218:	strb.w	r3, [r2, #766]	; 0x2fe
    321c:	strb.w	r3, [r2, #784]	; 0x310
    3220:	mov.w	r3, #76	; 0x4c
      _b = b;
    3224:	strb.w	sl, [r2, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3228:	mvn.w	sl, #71	; 0x47
      _s = s;
    322c:	strb.w	r3, [r2, #772]	; 0x304
      _b = b;
    3230:	mvn.w	r3, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3234:	strb.w	r5, [r2, #811]	; 0x32b
      _b = b;
    3238:	mvn.w	r5, #17
    323c:	strb.w	r3, [r2, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3240:	mvn.w	r3, #125	; 0x7d
    3244:	strb.w	sl, [r2, #804]	; 0x324
      _s = s;
    3248:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    324c:	strb.w	r3, [r2, #777]	; 0x309
      _s = s;
    3250:	mvn.w	r3, #118	; 0x76
      _b = b;
    3254:	strb.w	r5, [r2, #812]	; 0x32c
    3258:	mvn.w	r5, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    325c:	strb.w	r3, [r2, #778]	; 0x30a
      _b = b;
    3260:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3264:	strb.w	sl, [r2, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3268:	mvn.w	sl, #68	; 0x44
      _s = s;
      _b = b;
    326c:	strb.w	r3, [r2, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3270:	mov.w	r3, #113	; 0x71
      _s = s;
      _b = b;
    3274:	strb.w	r5, [r2, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3278:	mvn.w	r5, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    327c:	strb.w	r3, [r2, #780]	; 0x30c
      _s = s;
    3280:	mov.w	r3, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3284:	strb.w	sl, [r2, #807]	; 0x327
      _s = s;
      _b = b;
    3288:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    328c:	strb.w	r3, [r2, #781]	; 0x30d
      _b = b;
    3290:	mvn.w	r3, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3294:	strb.w	r5, [r2, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3298:	mvn.w	r5, #79	; 0x4f
      _s = s;
      _b = b;
    329c:	strb.w	r3, [r2, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32a0:	mvn.w	r3, #122	; 0x7a
      _s = s;
      _b = b;
    32a4:	strb.w	r4, [r2, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32a8:	strb.w	r3, [r2, #786]	; 0x312
      _s = s;
      _b = b;
    32ac:	mvn.w	r3, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b0:	strb.w	r5, [r2, #798]	; 0x31e
      _s = s;
    32b4:	movs	r5, #88	; 0x58
      _b = b;
    32b6:	strb.w	r3, [r2, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32ba:	movs	r3, #128	; 0x80
      _s = s;
    32bc:	strb.w	r7, [r2, #808]	; 0x328
    32c0:	movs	r7, #68	; 0x44
      _b = b;
    32c2:	strb.w	sl, [r2, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32c6:	mvn.w	sl, #109	; 0x6d
    32ca:	strb.w	r0, [r2, #810]	; 0x32a
    32ce:	mvn.w	r0, #107	; 0x6b
    32d2:	strb.w	sl, [r2, #813]	; 0x32d
      _s = s;
    32d6:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32da:	strb.w	r0, [r2, #792]	; 0x318
      _s = s;
    32de:	mov.w	r0, #104	; 0x68
    32e2:	strb.w	sl, [r2, #814]	; 0x32e
      _b = b;
    32e6:	mvn.w	sl, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32ea:	strb.w	r0, [r2, #793]	; 0x319
      _b = b;
    32ee:	mvn.w	r0, #4
    32f2:	strb.w	sl, [r2, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32f6:	mvn.w	sl, #123	; 0x7b
      _s = s;
      _b = b;
    32fa:	strb.w	r0, [r2, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32fe:	strb.w	sl, [r2, #816]	; 0x330
      _s = s;
    3302:	mvn.w	sl, #114	; 0x72
      _b = b;
    3306:	strb.w	r0, [r2, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    330a:	mvn.w	r0, #69	; 0x45
      _s = s;
    330e:	strb.w	sl, [r2, #817]	; 0x331
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3312:	mvn.w	sl, #120	; 0x78
    3316:	strb.w	r0, [r2, #801]	; 0x321
      _s = s;
    331a:	mov.w	r0, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    331e:	strb.w	sl, [r2, #819]	; 0x333
      _s = s;
      _b = b;
    3322:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3326:	strb.w	r1, [r2, #799]	; 0x31f
      _b = b;
    332a:	strb.w	sl, [r2, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    332e:	mvn.w	sl, #116	; 0x74
      _s = s;
    3332:	strb.w	r0, [r2, #802]	; 0x322
    3336:	movs	r0, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3338:	strb.w	sl, [r2, #822]	; 0x336
      _s = s;
      _b = b;
    333c:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3340:	strb.w	r8, [r2, #820]	; 0x334
      _b = b;
    3344:	strb.w	sl, [r2, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3348:	mvn.w	sl, #117	; 0x75
    334c:	strb.w	fp, [r2, #831]	; 0x33f
    3350:	strb.w	sl, [r2, #828]	; 0x33c
      _s = s;
    3354:	mov.w	sl, #91	; 0x5b
    3358:	strb.w	sl, [r2, #832]	; 0x340
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    335c:	mvn.w	sl, #116	; 0x74
    3360:	strb.w	sl, [r2, #837]	; 0x345
      _s = s;
      _b = b;
    3364:	mvn.w	sl, #17
    3368:	strb.w	sl, [r2, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    336c:	mvn.w	sl, #103	; 0x67
    3370:	strb.w	sl, [r2, #840]	; 0x348
    3374:	mvn.w	sl, #107	; 0x6b
    3378:	strb.w	sl, [r2, #843]	; 0x34b
      _s = s;
    337c:	mvn.w	sl, #15
    3380:	strb.w	sl, [r2, #844]	; 0x34c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3384:	mvn.w	sl, #107	; 0x6b
    3388:	strb.w	sl, [r2, #846]	; 0x34e
      _s = s;
    338c:	strb.w	sl, [r2, #847]	; 0x34f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3390:	mvn.w	sl, #122	; 0x7a
    3394:	strb.w	sl, [r2, #849]	; 0x351
      _s = s;
    3398:	mvn.w	sl, #107	; 0x6b
    339c:	strb.w	sl, [r2, #850]	; 0x352
      _b = b;
    33a0:	mov.w	sl, #103	; 0x67
    33a4:	strb.w	sl, [r2, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33a8:	mvn.w	sl, #125	; 0x7d
    33ac:	strb.w	sl, [r2, #852]	; 0x354
      _s = s;
      _b = b;
    33b0:	mvn.w	sl, #28
    33b4:	strb.w	lr, [r2, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33b8:	mvn.w	lr, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33bc:	strb.w	r1, [r2, #858]	; 0x35a
      _s = s;
      _b = b;
    33c0:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33c4:	strb.w	lr, [r2, #826]	; 0x33a
      _b = b;
    33c8:	mvn.w	lr, #75	; 0x4b
    33cc:	strb.w	r1, [r2, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33d0:	mvn.w	r1, #50	; 0x32
      _b = b;
    33d4:	strb.w	lr, [r2, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33d8:	mvn.w	lr, #80	; 0x50
    33dc:	strb.w	r1, [r2, #862]	; 0x35e
      _b = b;
    33e0:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33e4:	strb.w	lr, [r2, #829]	; 0x33d
      _b = b;
    33e8:	mvn.w	lr, #35	; 0x23
    33ec:	strb.w	r1, [r2, #863]	; 0x35f
    33f0:	mvn.w	r1, #5
    33f4:	strb.w	lr, [r2, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33f8:	mov.w	lr, #99	; 0x63
      _b = b;
    33fc:	strb.w	r1, [r2, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3400:	mvn.w	r1, #95	; 0x5f
      _s = s;
    3404:	strb.w	lr, [r2, #835]	; 0x343
    3408:	strb.w	lr, [r2, #853]	; 0x355
      _b = b;
    340c:	mvn.w	lr, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3410:	strb.w	r1, [r2, #867]	; 0x363
    3414:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    3418:	strb.w	lr, [r2, #836]	; 0x344
    341c:	mvn.w	lr, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3420:	strb.w	r1, [r2, #870]	; 0x366
      _s = s;
      _b = b;
    3424:	mvn.w	r1, #7
    3428:	strb.w	lr, [r2, #842]	; 0x34a
    342c:	mvn.w	lr, #93	; 0x5d
    3430:	strb.w	r1, [r2, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3434:	mvn.w	r1, #62	; 0x3e
      _s = s;
      _b = b;
    3438:	strb.w	lr, [r2, #845]	; 0x34d
    343c:	mov.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3440:	strb.w	r1, [r2, #879]	; 0x36f
      _s = s;
      _b = b;
    3444:	mvn.w	r1, #5
    3448:	strb.w	lr, [r2, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    344c:	mvn.w	lr, #55	; 0x37
      _b = b;
    3450:	strb.w	r1, [r2, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3454:	mvn.w	r1, #59	; 0x3b
      _s = s;
    3458:	strb.w	lr, [r2, #856]	; 0x358
      _b = b;
    345c:	mvn.w	lr, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3460:	strb.w	r1, [r2, #882]	; 0x372
      _s = s;
      _b = b;
    3464:	mvn.w	r1, #6
    3468:	strb.w	sl, [r2, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    346c:	strb.w	r9, [r2, #825]	; 0x339
      _s = s;
    3470:	strb.w	r9, [r2, #838]	; 0x346
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3474:	strb.w	ip, [r2, #834]	; 0x342
      _s = s;
    3478:	strb.w	r6, [r2, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    347c:	strb.w	r3, [r2, #855]	; 0x357
      _s = s;
      _b = b;
    3480:	strb.w	lr, [r2, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3484:	mvn.w	lr, #74	; 0x4a
      _s = s;
      _b = b;
    3488:	strb.w	r6, [r2, #872]	; 0x368
    348c:	strb.w	r6, [r2, #878]	; 0x36e
    3490:	strb.w	r1, [r2, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3494:	mvn.w	r1, #57	; 0x39
      _s = s;
    3498:	strb.w	r5, [r2, #880]	; 0x370
    349c:	mov.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34a0:	strb.w	r1, [r2, #885]	; 0x375
    34a4:	mvn.w	r1, #73	; 0x49
      _s = s;
    34a8:	strb.w	r5, [r2, #859]	; 0x35b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34ac:	mvn.w	r5, #119	; 0x77
    34b0:	strb.w	r1, [r2, #888]	; 0x378
    34b4:	mvn.w	r1, #100	; 0x64
    34b8:	strb.w	r5, [r2, #861]	; 0x35d
      _s = s;
    34bc:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34c0:	strb.w	r1, [r2, #864]	; 0x360
      _s = s;
    34c4:	mov.w	r1, #45	; 0x2d
    34c8:	strb.w	r5, [r2, #868]	; 0x364
    34cc:	mov.w	r5, #124	; 0x7c
    34d0:	strb.w	r1, [r2, #865]	; 0x361
      _b = b;
    34d4:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34d8:	strb.w	r5, [r2, #871]	; 0x367
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34dc:	mvn.w	r5, #90	; 0x5a
      _s = s;
      _b = b;
    34e0:	strb.w	r4, [r2, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34e4:	strb.w	r5, [r2, #873]	; 0x369
      _s = s;
    34e8:	mvn.w	r5, #115	; 0x73
      _b = b;
    34ec:	strb.w	r1, [r2, #869]	; 0x365
    34f0:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34f2:	strb.w	r5, [r2, #874]	; 0x36a
    34f6:	mov.w	r5, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34fa:	strb.w	lr, [r2, #876]	; 0x36c
      _s = s;
    34fe:	mov.w	lr, #126	; 0x7e
    3502:	strb.w	r5, [r2, #886]	; 0x376
    3506:	mov.w	r5, #74	; 0x4a
    350a:	strb.w	r7, [r2, #877]	; 0x36d
    350e:	movs	r7, #98	; 0x62
    3510:	strb.w	r5, [r2, #889]	; 0x379
      _b = b;
    3514:	mvn.w	r5, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3518:	strb.w	r0, [r2, #883]	; 0x373
    351c:	movs	r0, #115	; 0x73
      _b = b;
    351e:	strb.w	r5, [r2, #890]	; 0x37a
    3522:	mvn.w	r5, #48	; 0x30
    3526:	strb.w	r5, [r2, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    352a:	mvn.w	r5, #95	; 0x5f
    352e:	strb.w	r5, [r2, #891]	; 0x37b
      _s = s;
    3532:	mvn.w	r5, #10
    3536:	strb.w	r5, [r2, #892]	; 0x37c
      _b = b;
    353a:	mvn.w	r5, #42	; 0x2a
    353e:	strb.w	r5, [r2, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3542:	mvn.w	r5, #102	; 0x66
    3546:	strb.w	r5, [r2, #894]	; 0x37e
      _s = s;
    354a:	mvn.w	r5, #6
    354e:	strb.w	r5, [r2, #895]	; 0x37f
      _b = b;
    3552:	mvn.w	r5, #58	; 0x3a
    3556:	strb.w	r5, [r2, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    355a:	mvn.w	r5, #115	; 0x73
    355e:	strb.w	r5, [r2, #897]	; 0x381
      _s = s;
    3562:	mvn.w	r5, #26
    3566:	strb.w	r5, [r2, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    356a:	mvn.w	r5, #118	; 0x76
    356e:	strb.w	r5, [r2, #900]	; 0x384
      _s = s;
    3572:	mvn.w	r5, #51	; 0x33
    3576:	strb.w	r5, [r2, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    357a:	mvn.w	r5, #114	; 0x72
    357e:	strb.w	r5, [r2, #903]	; 0x387
      _s = s;
    3582:	mvn.w	r5, #68	; 0x44
    3586:	strb.w	r5, [r2, #904]	; 0x388
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    358a:	mvn.w	r5, #116	; 0x74
    358e:	strb.w	r5, [r2, #906]	; 0x38a
      _s = s;
      _b = b;
    3592:	mvn.w	r5, #36	; 0x24
    3596:	strb.w	r1, [r2, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    359a:	movs	r1, #195	; 0xc3
      _b = b;
    359c:	strb.w	r5, [r2, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a0:	mvn.w	r5, #115	; 0x73
    35a4:	strb.w	fp, [r2, #921]	; 0x399
    35a8:	strb.w	r5, [r2, #909]	; 0x38d
      _s = s;
      _b = b;
    35ac:	mvn.w	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    35b0:	strb.w	lr, [r2, #913]	; 0x391
    35b4:	mov.w	lr, #105	; 0x69
      _b = b;
    35b8:	strb.w	r5, [r2, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35bc:	mvn.w	r5, #103	; 0x67
      _s = s;
    35c0:	strb.w	r0, [r2, #910]	; 0x38e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35c4:	strb.w	r5, [r2, #912]	; 0x390
      _s = s;
      _b = b;
    35c8:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35cc:	strb.w	fp, [r2, #924]	; 0x39c
      _s = s;
      _b = b;
    35d0:	strb.w	r5, [r2, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d4:	mvn.w	r5, #107	; 0x6b
    35d8:	strb.w	r9, [r2, #927]	; 0x39f
    35dc:	strb.w	r5, [r2, #918]	; 0x396
      _s = s;
    35e0:	mvn.w	r5, #20
    35e4:	strb.w	r6, [r2, #928]	; 0x3a0
    35e8:	movs	r6, #43	; 0x2b
    35ea:	strb.w	r5, [r2, #919]	; 0x397
      _b = b;
    35ee:	mvn.w	r5, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35f2:	strb.w	r3, [r2, #933]	; 0x3a5
      _s = s;
      _b = b;
    35f6:	strb.w	r5, [r2, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    35fa:	mvn.w	r5, #124	; 0x7c
    35fe:	strb.w	r3, [r2, #937]	; 0x3a9
    3602:	strb.w	r5, [r2, #907]	; 0x38b
      _b = b;
    3606:	mvn.w	r5, #22
    360a:	strb.w	r4, [r2, #938]	; 0x3aa
    360e:	strb.w	r5, [r2, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3612:	mvn.w	r5, #110	; 0x6e
      _s = s;
      _b = b;
    3616:	strb.w	r4, [r2, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    361a:	strb.w	r5, [r2, #915]	; 0x393
      _s = s;
    361e:	mvn.w	r5, #37	; 0x25
    3622:	strb.w	r5, [r2, #916]	; 0x394
      _b = b;
    3626:	mvn.w	r5, #16
    362a:	strb.w	r5, [r2, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    362e:	mov.w	r5, #100	; 0x64
    3632:	strb.w	r5, [r2, #922]	; 0x39a
      _b = b;
    3636:	mvn.w	r5, #32
    363a:	strb.w	r5, [r2, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    363e:	mvn.w	r5, #98	; 0x62
    3642:	strb.w	r5, [r2, #939]	; 0x3ab
      _s = s;
    3646:	mvn.w	r5, #66	; 0x42
    364a:	strb.w	r5, [r2, #925]	; 0x39d
      _b = b;
    364e:	mvn.w	r5, #57	; 0x39
    3652:	strb.w	r5, [r2, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3656:	mvn.w	r5, #125	; 0x7d
    365a:	strb.w	r5, [r2, #930]	; 0x3a2
      _s = s;
      _b = b;
    365e:	mvn.w	r5, #29
    3662:	strb.w	r5, [r2, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3666:	mvn.w	r5, #123	; 0x7b
    366a:	strb.w	r5, [r2, #936]	; 0x3a8
      _s = s;
      _b = b;
    366e:	mvn.w	r5, #6
    3672:	strb.w	r5, [r2, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3676:	mvn.w	r5, #91	; 0x5b
      _s = s;
    367a:	strb.w	r1, [r2, #934]	; 0x3a6
    367e:	movs	r1, #116	; 0x74
    3680:	strb.w	r0, [r2, #946]	; 0x3b2
      _b = b;
    3684:	mvn.w	r0, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3688:	strb.w	r1, [r2, #931]	; 0x3a3
    368c:	strb.w	r1, [r2, #949]	; 0x3b5
      _b = b;
    3690:	mvn.w	r1, #21
    3694:	strb.w	r0, [r2, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3698:	mvn.w	r0, #90	; 0x5a
      _s = s;
      _b = b;
    369c:	strb.w	r1, [r2, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36a0:	mvn.w	r1, #82	; 0x52
      _s = s;
      _b = b;
    36a4:	strb.w	r4, [r2, #962]	; 0x3c2
    36a8:	mvn.w	r4, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ac:	strb.w	r1, [r2, #942]	; 0x3ae
      _s = s;
      _b = b;
    36b0:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36b4:	strb.w	r0, [r2, #948]	; 0x3b4
      _s = s;
    36b8:	mvn.w	r0, #106	; 0x6a
      _b = b;
    36bc:	strb.w	r1, [r2, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36c0:	mvn.w	r1, #68	; 0x44
      _s = s;
      _b = b;
    36c4:	strb.w	r4, [r2, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36c8:	mvn.w	r4, #99	; 0x63
    36cc:	strb.w	r1, [r2, #957]	; 0x3bd
      _s = s;
    36d0:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36d4:	strb.w	r5, [r2, #945]	; 0x3b1
    36d8:	movs	r5, #177	; 0xb1
      _s = s;
    36da:	strb.w	r1, [r2, #958]	; 0x3be
      _b = b;
    36de:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36e2:	strb.w	r0, [r2, #952]	; 0x3b8
    36e6:	mov.w	r0, #113	; 0x71
      _b = b;
    36ea:	strb.w	r1, [r2, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36ee:	mov.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36f2:	strb.w	r4, [r2, #972]	; 0x3cc
      _s = s;
    36f6:	mvn.w	r4, #6
    36fa:	strb.w	r1, [r2, #961]	; 0x3c1
    36fe:	strb.w	r1, [r2, #964]	; 0x3c4
    3702:	mvn.w	r1, #122	; 0x7a
    3706:	strb.w	r0, [r2, #955]	; 0x3bb
      _b = b;
    370a:	movs	r0, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    370c:	strb.w	r1, [r2, #967]	; 0x3c7
      _b = b;
    3710:	mvn.w	r1, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3714:	strb.w	r6, [r2, #943]	; 0x3af
      _b = b;
    3718:	mov.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    371c:	strb.w	r5, [r2, #954]	; 0x3ba
    3720:	movs	r5, #166	; 0xa6
      _s = s;
      _b = b;
    3722:	strb.w	r1, [r2, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3726:	mvn.w	r1, #38	; 0x26
    372a:	strb.w	r4, [r2, #973]	; 0x3cd
      _b = b;
    372e:	mvn.w	r4, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3732:	strb.w	r7, [r2, #940]	; 0x3ac
    3736:	movs	r7, #93	; 0x5d
      _b = b;
    3738:	strb.w	r6, [r2, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    373c:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    373e:	strb.w	r0, [r2, #950]	; 0x3b6
    3742:	strb.w	r0, [r2, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3746:	strb.w	r5, [r2, #951]	; 0x3b7
    374a:	strb.w	ip, [r2, #969]	; 0x3c9
      _s = s;
    374e:	strb.w	r1, [r2, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3752:	movs	r1, #194	; 0xc2
      _s = s;
      _b = b;
    3754:	strb.w	r4, [r2, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3758:	mvn.w	r4, #111	; 0x6f
    375c:	strb.w	r1, [r2, #960]	; 0x3c0
    3760:	strb.w	r4, [r2, #975]	; 0x3cf
      _s = s;
    3764:	mvn.w	r4, #6
    3768:	strb.w	r1, [r2, #991]	; 0x3df
      _b = b;
    376c:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3770:	strb.w	r4, [r2, #976]	; 0x3d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3774:	mvn.w	r4, #118	; 0x76
      _s = s;
      _b = b;
    3778:	strb.w	r1, [r2, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    377c:	mvn.w	r1, #102	; 0x66
    3780:	strb.w	r4, [r2, #978]	; 0x3d2
      _s = s;
    3784:	mvn.w	r4, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3788:	strb.w	r1, [r2, #993]	; 0x3e1
      _s = s;
      _b = b;
    378c:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3790:	strb.w	r4, [r2, #979]	; 0x3d3
      _b = b;
    3794:	mvn.w	r4, #75	; 0x4b
    3798:	strb.w	r1, [r2, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    379c:	mov.w	r1, #124	; 0x7c
      _b = b;
    37a0:	strb.w	r4, [r2, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37a4:	mvn.w	r4, #124	; 0x7c
      _s = s;
    37a8:	strb.w	r1, [r2, #997]	; 0x3e5
    37ac:	mov.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37b0:	strb.w	r4, [r2, #981]	; 0x3d5
      _s = s;
      _b = b;
    37b4:	mvn.w	r4, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37b8:	strb.w	r1, [r2, #1000]	; 0x3e8
      _b = b;
    37bc:	mvn.w	r1, #19
    37c0:	strb.w	r4, [r2, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37c4:	mvn.w	r4, #117	; 0x75
      _s = s;
      _b = b;
    37c8:	strb.w	r1, [r2, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37cc:	mvn.w	r1, #115	; 0x73
    37d0:	strb.w	r4, [r2, #984]	; 0x3d8
      _s = s;
      _b = b;
    37d4:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37d8:	strb.w	r7, [r2, #988]	; 0x3dc
      _b = b;
    37dc:	mvn.w	r7, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37e0:	strb.w	r1, [r2, #1002]	; 0x3ea
      _s = s;
    37e4:	mov.w	r1, #58	; 0x3a
      _b = b;
    37e8:	strb.w	r4, [r2, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37ec:	movs	r4, #178	; 0xb2
      _s = s;
      _b = b;
    37ee:	strb.w	r7, [r2, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37f2:	mov.w	r7, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37f6:	strb.w	r6, [r2, #963]	; 0x3c3
      _s = s;
      _b = b;
    37fa:	strb.w	r6, [r2, #977]	; 0x3d1
    37fe:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3800:	strb.w	r1, [r2, #1003]	; 0x3eb
      _b = b;
    3804:	mvn.w	r1, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3808:	strb.w	r8, [r2, #987]	; 0x3db
      _s = s;
    380c:	strb.w	lr, [r2, #985]	; 0x3d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3810:	mov.w	lr, #190	; 0xbe
    3814:	strb.w	r4, [r2, #966]	; 0x3c6
      _s = s;
    3818:	strb.w	r7, [r2, #982]	; 0x3d6
      _b = b;
    381c:	strb.w	r6, [r2, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3820:	mvn.w	r6, #122	; 0x7a
    3824:	strb.w	r8, [r2, #990]	; 0x3de
    3828:	strb.w	r8, [r2, #996]	; 0x3e4
    382c:	strb.w	r9, [r2, #999]	; 0x3e7
      _s = s;
      _b = b;
    3830:	strb.w	r1, [r2, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3834:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3838:	strb.w	fp, [r2, #1005]	; 0x3ed
      _s = s;
    383c:	strb.w	r4, [r2, #1024]	; 0x400
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3840:	mvn.w	r4, #116	; 0x74
      _s = s;
    3844:	strb.w	r1, [r2, #1006]	; 0x3ee
      _b = b;
    3848:	mvn.w	r1, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    384c:	strb.w	r4, [r2, #1023]	; 0x3ff
      _s = s;
      _b = b;
    3850:	mvn.w	r4, #7
    3854:	strb.w	r1, [r2, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3858:	mvn.w	r1, #120	; 0x78
      _s = s;
      _b = b;
    385c:	strb.w	r4, [r2, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3860:	mvn.w	r4, #110	; 0x6e
    3864:	strb.w	r6, [r2, #1014]	; 0x3f6
      _s = s;
      _b = b;
    3868:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    386c:	strb.w	r4, [r2, #1026]	; 0x402
      _s = s;
    3870:	mvn.w	r4, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3874:	strb.w	r1, [r2, #1008]	; 0x3f0
      _s = s;
      _b = b;
    3878:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    387c:	strb.w	r4, [r2, #1027]	; 0x403
      _b = b;
    3880:	mvn.w	r4, #20
    3884:	strb.w	r6, [r2, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3888:	mov.w	r6, #99	; 0x63
      _b = b;
    388c:	strb.w	r4, [r2, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3890:	mvn.w	r4, #106	; 0x6a
      _s = s;
      _b = b;
    3894:	strb.w	r1, [r2, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3898:	mvn.w	r1, #125	; 0x7d
    389c:	strb.w	r4, [r2, #1029]	; 0x405
      _s = s;
    38a0:	mvn.w	r4, #109	; 0x6d
    38a4:	strb.w	r6, [r2, #1018]	; 0x3fa
      _b = b;
    38a8:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38ac:	strb.w	r4, [r2, #1030]	; 0x406
      _b = b;
    38b0:	mvn.w	r4, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38b4:	strb.w	r1, [r2, #1011]	; 0x3f3
      _s = s;
    38b8:	mvn.w	r1, #93	; 0x5d
      _b = b;
    38bc:	strb.w	r4, [r2, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38c0:	mvn.w	r4, #92	; 0x5c
      _b = b;
    38c4:	strb.w	r6, [r2, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38c8:	mvn.w	r6, #114	; 0x72
      _s = s;
    38cc:	strb.w	r4, [r2, #1033]	; 0x409
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38d0:	mvn.w	r4, #73	; 0x49
      _s = s;
    38d4:	strb.w	r1, [r2, #1012]	; 0x3f4
      _b = b;
    38d8:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38dc:	strb.w	r6, [r2, #1020]	; 0x3fc
      _s = s;
      _b = b;
    38e0:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38e4:	strb.w	r4, [r2, #1035]	; 0x40b
      _s = s;
    38e8:	mvn.w	r4, #57	; 0x39
      _b = b;
    38ec:	strb.w	r1, [r2, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38f0:	movs	r1, #52	; 0x34
      _b = b;
    38f2:	strb.w	r6, [r2, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38f6:	mvn.w	r6, #39	; 0x27
    38fa:	strb.w	r4, [r2, #1036]	; 0x40c
      _b = b;
    38fe:	mvn.w	r4, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3902:	strb.w	r1, [r2, #1015]	; 0x3f7
    3906:	movs	r1, #174	; 0xae
    3908:	strb.w	r6, [r2, #994]	; 0x3e2
      _b = b;
    390c:	mvn.w	r6, #17
    3910:	strb.w	r4, [r2, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3914:	mvn.w	r4, #55	; 0x37
      _s = s;
    3918:	strb.w	r3, [r2, #1009]	; 0x3f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    391c:	strb.w	ip, [r2, #1017]	; 0x3f9
      _s = s;
    3920:	strb.w	r1, [r2, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3924:	mov	r1, r2
      _s = s;
      _b = b;
    3926:	strb.w	r6, [r2, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    392a:	strb.w	r4, [r2, #1038]	; 0x40e
      _s = s;
      _b = b;
    392e:	mvn.w	r4, #10
    3932:	strb.w	r5, [r2, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3936:	movs	r5, #114	; 0x72
      _b = b;
    3938:	strb.w	r4, [r2, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    393c:	mvn.w	r4, #54	; 0x36
      _s = s;
    3940:	strb.w	r5, [r2, #1039]	; 0x40f
      _b = b;
    3944:	mvn.w	r5, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3948:	strb.w	r4, [r2, #1041]	; 0x411
      _s = s;
    394c:	mov.w	r4, #104	; 0x68
      _b = b;
    3950:	strb.w	r5, [r2, #1043]	; 0x413
    3954:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3958:	strb.w	r4, [r2, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    395c:	mvn.w	r4, #75	; 0x4b
      _s = s;
      _b = b;
    3960:	strb.w	r5, [r2, #1055]	; 0x41f
    3964:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3968:	strb.w	r4, [r2, #1044]	; 0x414
      _s = s;
    396c:	mvn.w	r4, #95	; 0x5f
      _b = b;
    3970:	strb.w	r5, [r2, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3974:	mvn.w	r5, #90	; 0x5a
    3978:	strb.w	r4, [r2, #1045]	; 0x415
      _b = b;
    397c:	mvn.w	r4, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3980:	strb.w	r5, [r2, #1057]	; 0x421
      _b = b;
    3984:	mvn.w	r5, #62	; 0x3e
    3988:	strb.w	r4, [r2, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    398c:	mvn.w	r4, #125	; 0x7d
      _s = s;
      _b = b;
    3990:	strb.w	r5, [r2, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3994:	mvn.w	r5, #103	; 0x67
    3998:	strb.w	r4, [r2, #1047]	; 0x417
      _s = s;
    399c:	mov.w	r4, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a0:	strb.w	r5, [r2, #1059]	; 0x423
      _s = s;
      _b = b;
    39a4:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39a8:	strb.w	r4, [r2, #1048]	; 0x418
      _b = b;
    39ac:	mvn.w	r4, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39b0:	strb.w	r3, [r2, #1060]	; 0x424
      _b = b;
    39b4:	strb.w	r4, [r2, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39b8:	mvn.w	r4, #70	; 0x46
    39bc:	strb.w	r3, [r2, #1063]	; 0x427
    39c0:	mvn.w	r3, #4
    39c4:	strb.w	r4, [r2, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39c8:	strb.w	r4, [r2, #1053]	; 0x41d
      _s = s;
    39cc:	mvn.w	r4, #111	; 0x6f
      _b = b;
    39d0:	strb.w	r5, [r2, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d4:	mvn.w	r5, #109	; 0x6d
      _s = s;
    39d8:	strb.w	r4, [r2, #1054]	; 0x41e
      _b = b;
    39dc:	mvn.w	r4, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39e0:	strb.w	r3, [r2, #1066]	; 0x42a
      _b = b;
    39e4:	strb.w	r4, [r2, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e8:	movs	r4, #170	; 0xaa
      _s = s;
    39ea:	strb.w	r3, [r2, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39ee:	mvn.w	r3, #92	; 0x5c
    39f2:	strb.w	ip, [r2, #1050]	; 0x41a
    39f6:	strb.w	r4, [r2, #1032]	; 0x408
    39fa:	strb.w	r5, [r2, #1062]	; 0x426
      _s = s;
    39fe:	movs	r5, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a00:	strb.w	ip, [r2, #1065]	; 0x429
    3a04:	strb.w	ip, [r2, #1068]	; 0x42c
      _s = s;
      _b = b;
    3a08:	strb.w	sl, [r2, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a0c:	strb.w	r3, [r2, #1071]	; 0x42f
      _s = s;
    3a10:	mvn.w	r3, #115	; 0x73
      _b = b;
    3a14:	strb.w	r6, [r2, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a18:	mvn.w	r6, #91	; 0x5b
      _s = s;
    3a1c:	strb.w	r3, [r2, #1072]	; 0x430
      _b = b;
    3a20:	mvn.w	r3, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a24:	strb.w	r6, [r2, #1077]	; 0x435
      _s = s;
    3a28:	mov.w	r6, #74	; 0x4a
      _b = b;
    3a2c:	strb.w	r3, [r2, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a30:	mvn.w	r3, #75	; 0x4b
      _s = s;
    3a34:	strb.w	r6, [r2, #1081]	; 0x439
      _b = b;
    3a38:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a3c:	strb.w	r3, [r2, #1074]	; 0x432
      _s = s;
    3a40:	mov.w	r3, #69	; 0x45
      _b = b;
    3a44:	strb.w	r6, [r2, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a48:	mvn.w	r6, #117	; 0x75
      _s = s;
    3a4c:	strb.w	r3, [r2, #1075]	; 0x433
    3a50:	movs	r3, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a52:	strb.w	r6, [r2, #1083]	; 0x43b
      _s = s;
      _b = b;
    3a56:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a5a:	strb.w	r3, [r2, #1084]	; 0x43c
      _b = b;
    3a5e:	mvn.w	r3, #46	; 0x2e
    3a62:	strb.w	r6, [r2, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a66:	mvn.w	r6, #55	; 0x37
      _b = b;
    3a6a:	strb.w	r3, [r2, #1064]	; 0x428
    3a6e:	mvn.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a72:	strb.w	r6, [r2, #1087]	; 0x43f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a76:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    3a78:	strb.w	r3, [r2, #1088]	; 0x440
    3a7c:	mvn.w	r3, #58	; 0x3a
    3a80:	strb.w	r0, [r2, #1079]	; 0x437
    3a84:	strb.w	r3, [r2, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a88:	mvn.w	r3, #124	; 0x7c
    3a8c:	strb.w	r9, [r2, #1080]	; 0x438
    3a90:	strb.w	r3, [r2, #1089]	; 0x441
      _s = s;
      _b = b;
    3a94:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a98:	strb.w	fp, [r2, #1086]	; 0x43e
      _s = s;
      _b = b;
    3a9c:	strb.w	r3, [r2, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aa0:	mvn.w	r3, #120	; 0x78
      _s = s;
    3aa4:	strb.w	r5, [r2, #1078]	; 0x436
    3aa8:	movs	r5, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aaa:	strb.w	r3, [r2, #1092]	; 0x444
      _s = s;
    3aae:	mov.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ab2:	strb.w	r6, [r2, #1056]	; 0x420
      _s = s;
    3ab6:	strb.w	r3, [r2, #1093]	; 0x445
      _b = b;
    3aba:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3abe:	strb.w	r7, [r2, #1090]	; 0x442
    3ac2:	mvn.w	r7, #125	; 0x7d
      _b = b;
    3ac6:	strb.w	r3, [r2, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aca:	mvn.w	r3, #111	; 0x6f
    3ace:	strb.w	r3, [r2, #1095]	; 0x447
      _s = s;
    3ad2:	mvn.w	r3, #37	; 0x25
    3ad6:	strb.w	r3, [r2, #1096]	; 0x448
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ada:	mvn.w	r3, #117	; 0x75
    3ade:	strb.w	r3, [r2, #1098]	; 0x44a
      _s = s;
    3ae2:	mvn.w	r3, #84	; 0x54
    3ae6:	strb.w	r3, [r2, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aea:	mvn.w	r3, #117	; 0x75
    3aee:	strb.w	r3, [r2, #1101]	; 0x44d
      _s = s;
    3af2:	mvn.w	r3, #25
    3af6:	strb.w	r3, [r2, #1102]	; 0x44e
      _b = b;
    3afa:	mvn.w	r3, #43	; 0x2b
    3afe:	strb.w	r3, [r2, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b02:	mvn.w	r3, #116	; 0x74
    3b06:	strb.w	r4, [r2, #1113]	; 0x459
      _s = s;
    3b0a:	mov.w	r4, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b0e:	strb.w	r3, [r2, #1104]	; 0x450
      _s = s;
    3b12:	mvn.w	r3, #84	; 0x54
    3b16:	strb.w	r4, [r2, #1123]	; 0x463
      _b = b;
    3b1a:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b1e:	strb.w	r3, [r2, #1105]	; 0x451
      _b = b;
    3b22:	mvn.w	r3, #17
    3b26:	strb.w	r4, [r2, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b2a:	mov.w	r4, #95	; 0x5f
      _b = b;
    3b2e:	strb.w	r3, [r2, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b32:	mvn.w	r3, #84	; 0x54
    3b36:	strb.w	r4, [r2, #1129]	; 0x469
      _b = b;
    3b3a:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b3e:	strb.w	r3, [r2, #1108]	; 0x454
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b42:	mvn.w	r3, #106	; 0x6a
      _s = s;
      _b = b;
    3b46:	strb.w	r4, [r2, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b4a:	mov.w	r4, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b4e:	strb.w	r3, [r2, #1110]	; 0x456
      _s = s;
    3b52:	mvn.w	r3, #99	; 0x63
    3b56:	strb.w	r4, [r2, #1132]	; 0x46c
      _b = b;
    3b5a:	mvn.w	r4, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b5e:	strb.w	r3, [r2, #1111]	; 0x457
      _b = b;
    3b62:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b66:	strb.w	r6, [r2, #1138]	; 0x472
      _b = b;
    3b6a:	mvn.w	r6, #35	; 0x23
    3b6e:	strb.w	r3, [r2, #1112]	; 0x458
    3b72:	mvn.w	r3, #21
    3b76:	strb.w	r4, [r2, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b7a:	mvn.w	r4, #56	; 0x38
      _s = s;
      _b = b;
    3b7e:	strb.w	r3, [r2, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b82:	mvn.w	r3, #82	; 0x52
      _s = s;
    3b86:	strb.w	r7, [r2, #1135]	; 0x46f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b8a:	mvn.w	r7, #73	; 0x49
    3b8e:	strb.w	r3, [r2, #1116]	; 0x45c
      _s = s;
    3b92:	mov.w	r3, #103	; 0x67
      _b = b;
    3b96:	strb.w	r6, [r2, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b9a:	mvn.w	r6, #92	; 0x5c
      _s = s;
    3b9e:	strb.w	r3, [r2, #1117]	; 0x45d
      _b = b;
    3ba2:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ba6:	strb.w	r9, [r2, #1107]	; 0x453
      _s = s;
      _b = b;
    3baa:	strb.w	r3, [r2, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bae:	mvn.w	r3, #70	; 0x46
      _s = s;
      _b = b;
    3bb2:	strb.w	r0, [r2, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bb6:	strb.w	r3, [r2, #1119]	; 0x45f
      _s = s;
    3bba:	mov.w	r3, #76	; 0x4c
    3bbe:	strb.w	r5, [r2, #1114]	; 0x45a
    3bc2:	strb.w	r3, [r2, #1120]	; 0x460
      _b = b;
    3bc6:	movs	r3, #221	; 0xdd
    3bc8:	strb.w	r5, [r2, #1121]	; 0x461
    3bcc:	strb.w	r3, [r2, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bd0:	strb.w	r8, [r2, #1125]	; 0x465
      _s = s;
      _b = b;
    3bd4:	mov.w	r8, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bd8:	strb.w	r4, [r2, #1134]	; 0x46e
    3bdc:	movs	r4, #202	; 0xca
      _s = s;
      _b = b;
    3bde:	strb.w	sl, [r2, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3be2:	mvn.w	sl, #118	; 0x76
    3be6:	strb.w	r7, [r2, #1137]	; 0x471
    3bea:	movs	r7, #117	; 0x75
    3bec:	strb.w	r6, [r2, #1140]	; 0x474
      _s = s;
    3bf0:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bf4:	strb.w	r4, [r2, #1131]	; 0x46b
    3bf8:	mvn.w	r4, #96	; 0x60
      _s = s;
    3bfc:	strb.w	r6, [r2, #1141]	; 0x475
      _b = b;
    3c00:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c04:	strb.w	r4, [r2, #1128]	; 0x468
      _s = s;
      _b = b;
    3c08:	mvn.w	r4, #21
    3c0c:	strb.w	r6, [r2, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c10:	mvn.w	r6, #90	; 0x5a
      _s = s;
      _b = b;
    3c14:	strb.w	r4, [r2, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c18:	mvn.w	r4, #71	; 0x47
    3c1c:	strb.w	r6, [r2, #1143]	; 0x477
      _s = s;
    3c20:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c24:	strb.w	r4, [r2, #1155]	; 0x483
      _s = s;
    3c28:	mvn.w	r4, #80	; 0x50
    3c2c:	strb.w	r6, [r2, #1144]	; 0x478
      _b = b;
    3c30:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c34:	strb.w	r4, [r2, #1156]	; 0x484
      _b = b;
    3c38:	mvn.w	r4, #10
    3c3c:	strb.w	r6, [r2, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c40:	mvn.w	r6, #70	; 0x46
      _b = b;
    3c44:	strb.w	r4, [r2, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c48:	mvn.w	r4, #114	; 0x72
      _s = s;
    3c4c:	strb.w	r6, [r2, #1147]	; 0x47b
      _b = b;
    3c50:	mvn.w	r6, #19
    3c54:	strb.w	r0, [r2, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c58:	mvn.w	r0, #119	; 0x77
      _s = s;
      _b = b;
    3c5c:	strb.w	r6, [r2, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c60:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c64:	strb.w	r0, [r2, #1161]	; 0x489
      _s = s;
    3c68:	movs	r0, #145	; 0x91
    3c6a:	strb.w	r6, [r2, #1150]	; 0x47e
      _b = b;
    3c6e:	mvn.w	r6, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c72:	strb.w	r4, [r2, #1164]	; 0x48c
      _s = s;
    3c76:	mov.w	r4, #90	; 0x5a
      _b = b;
    3c7a:	strb.w	r6, [r2, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c7e:	mvn.w	r6, #66	; 0x42
      _s = s;
    3c82:	str	r0, [sp, #0]
      _b = b;
    3c84:	mvn.w	r0, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c88:	strb.w	r6, [r2, #1152]	; 0x480
      _s = s;
    3c8c:	mvn.w	r6, #92	; 0x5c
    3c90:	strb.w	r4, [r2, #1165]	; 0x48d
      _b = b;
    3c94:	mvn.w	r4, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c98:	strb.w	r6, [r2, #1153]	; 0x481
    3c9c:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ca0:	strb.w	ip, [r2, #1146]	; 0x47a
      _s = s;
    3ca4:	strb.w	r6, [r2, #1126]	; 0x466
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ca8:	mvn.w	r6, #116	; 0x74
    3cac:	strb.w	r7, [r2, #1122]	; 0x462
    3cb0:	strb.w	r6, [r2, #1167]	; 0x48f
      _s = s;
    3cb4:	mvn.w	r6, #5
      _b = b;
    3cb8:	strb.w	r8, [r2, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cbc:	strb.w	r6, [r2, #1168]	; 0x490
      _b = b;
    3cc0:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cc4:	strb.w	lr, [r2, #1149]	; 0x47d
      _s = s;
      _b = b;
    3cc8:	strb.w	r6, [r2, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ccc:	mvn.w	r6, #125	; 0x7d
      _s = s;
      _b = b;
    3cd0:	strb.w	r0, [r2, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cd4:	movs	r0, #152	; 0x98
      _s = s;
      _b = b;
    3cd6:	strb.w	r4, [r2, #1166]	; 0x48e
    3cda:	movs	r4, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cdc:	strb.w	r6, [r2, #1170]	; 0x492
      _s = s;
      _b = b;
    3ce0:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ce4:	strb.w	lr, [r2, #1186]	; 0x4a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ce8:	mvn.w	lr, #88	; 0x58
      _s = s;
      _b = b;
    3cec:	strb.w	r6, [r2, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cf0:	mvn.w	r6, #123	; 0x7b
    3cf4:	strb.w	lr, [r2, #1158]	; 0x486
      _s = s;
    3cf8:	mov.w	lr, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cfc:	strb.w	r6, [r2, #1173]	; 0x495
      _s = s;
    3d00:	movs	r6, #160	; 0xa0
    3d02:	strb.w	lr, [r2, #1159]	; 0x487
    3d06:	mov.w	lr, #42	; 0x2a
    3d0a:	str	r6, [sp, #12]
    3d0c:	mvn.w	r6, #109	; 0x6d
    3d10:	strb.w	lr, [r2, #1162]	; 0x48a
    3d14:	mov.w	lr, #89	; 0x59
    3d18:	strb.w	r6, [r2, #1174]	; 0x496
      _b = b;
    3d1c:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d20:	strb.w	lr, [r2, #1171]	; 0x493
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d24:	mvn.w	lr, #109	; 0x6d
      _s = s;
      _b = b;
    3d28:	strb.w	r6, [r2, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d2c:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d30:	str	r0, [sp, #4]
      _s = s;
      _b = b;
    3d32:	movs	r0, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d34:	strb.w	r6, [r2, #1177]	; 0x499
      _b = b;
    3d38:	movs	r6, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d3a:	strb.w	lr, [r2, #1188]	; 0x4a4
      _s = s;
      _b = b;
    3d3e:	mov	ip, r4
    3d40:	str	r6, [sp, #16]
    3d42:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d46:	ldrb.w	lr, [sp, #4]
      _b = b;
    3d4a:	strb.w	r6, [r2, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d4e:	mvn.w	r6, #107	; 0x6b
      _s = s;
    3d52:	strb.w	lr, [r2, #1189]	; 0x4a5
      _b = b;
    3d56:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d5a:	strb.w	r6, [r2, #1179]	; 0x49b
      _s = s;
    3d5e:	movs	r6, #180	; 0xb4
      _b = b;
    3d60:	strb.w	lr, [r2, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d64:	mvn.w	lr, #93	; 0x5d
      _s = s;
    3d68:	str	r6, [sp, #20]
    3d6a:	mvn.w	r6, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d6e:	strb.w	lr, [r2, #1191]	; 0x4a7
      _s = s;
    3d72:	mvn.w	lr, #51	; 0x33
    3d76:	strb.w	r6, [r2, #1180]	; 0x49c
    3d7a:	mvn.w	r6, #59	; 0x3b
    3d7e:	strb.w	lr, [r2, #1192]	; 0x4a8
      _b = b;
    3d82:	mvn.w	lr, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d86:	strb.w	r6, [r2, #1183]	; 0x49f
      _b = b;
    3d8a:	mvn.w	r6, #42	; 0x2a
    3d8e:	strb.w	lr, [r2, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d92:	mov.w	lr, #102	; 0x66
      _s = s;
      _b = b;
    3d96:	strb.w	r6, [r2, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d9a:	movs	r6, #173	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d9c:	strb.w	r9, [r2, #1176]	; 0x498
      _s = s;
    3da0:	str	r6, [sp, #24]
      _b = b;
    3da2:	mvn.w	r6, #19
    3da6:	strb.w	r4, [r2, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3daa:	movs	r4, #129	; 0x81
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dac:	strb.w	r9, [r2, #1182]	; 0x49e
    3db0:	strb.w	sl, [r2, #1185]	; 0x4a1
    3db4:	mvn.w	sl, #62	; 0x3e
      _s = s;
      _b = b;
    3db8:	strb.w	r6, [r2, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dbc:	mvn.w	r6, #96	; 0x60
    3dc0:	strb.w	r5, [r2, #1194]	; 0x4aa
      _s = s;
    3dc4:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dc8:	strb.w	lr, [r2, #1197]	; 0x4ad
    3dcc:	mov.w	lr, #80	; 0x50
      _s = s;
    3dd0:	strb.w	r5, [r2, #1195]	; 0x4ab
      _b = b;
    3dd4:	mvn.w	r5, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dd8:	strb.w	lr, [r2, #1200]	; 0x4b0
      _s = s;
      _b = b;
    3ddc:	mvn.w	lr, #76	; 0x4c
    3de0:	strb.w	r5, [r2, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3de4:	mov.w	r5, #103	; 0x67
      _b = b;
    3de8:	strb.w	lr, [r2, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3dec:	mov.w	lr, #32
    3df0:	strb.w	r5, [r2, #1198]	; 0x4ae
      _b = b;
    3df4:	mov.w	r5, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3df8:	strb.w	lr, [r2, #1216]	; 0x4c0
    3dfc:	mov.w	lr, #67	; 0x43
      _b = b;
    3e00:	strb.w	r5, [r2, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e04:	mov.w	r5, #58	; 0x3a
    3e08:	strb.w	lr, [r2, #1219]	; 0x4c3
    3e0c:	mov.w	lr, #94	; 0x5e
    3e10:	strb.w	r5, [r2, #1204]	; 0x4b4
      _b = b;
    3e14:	mov.w	r5, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e18:	strb.w	lr, [r2, #1210]	; 0x4ba
      _b = b;
    3e1c:	mvn.w	lr, #33	; 0x21
    3e20:	strb.w	r7, [r2, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e24:	mov.w	r7, #99	; 0x63
      _b = b;
    3e28:	strb.w	r5, [r2, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e2c:	mov.w	r5, #18
      _s = s;
      _b = b;
    3e30:	strb.w	lr, [r2, #1220]	; 0x4c4
    3e34:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e38:	strb.w	r5, [r2, #1206]	; 0x4b6
      _s = s;
    3e3c:	mov.w	r5, #74	; 0x4a
    3e40:	strb.w	r7, [r2, #1213]	; 0x4bd
      _b = b;
    3e44:	mvn.w	r7, #37	; 0x25
    3e48:	strb.w	lr, [r2, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e4c:	mov.w	lr, #99	; 0x63
    3e50:	strb.w	r5, [r2, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e54:	mov.w	r5, #17
      _s = s;
      _b = b;
    3e58:	strb.w	r7, [r2, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e5c:	mvn.w	r7, #43	; 0x2b
      _s = s;
    3e60:	strb.w	lr, [r2, #1225]	; 0x4c9
      _b = b;
    3e64:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e68:	strb.w	r5, [r2, #1209]	; 0x4b9
      _s = s;
      _b = b;
    3e6c:	mvn.w	r5, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e70:	strb.w	r7, [r2, #1215]	; 0x4bf
      _s = s;
      _b = b;
    3e74:	mvn.w	r7, #25
    3e78:	strb.w	lr, [r2, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e7c:	mvn.w	lr, #55	; 0x37
      _s = s;
      _b = b;
    3e80:	strb.w	r5, [r2, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e84:	mvn.w	r5, #51	; 0x33
      _s = s;
      _b = b;
    3e88:	strb.w	r7, [r2, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e8c:	mvn.w	r7, #70	; 0x46
    3e90:	strb.w	lr, [r2, #1227]	; 0x4cb
      _s = s;
      _b = b;
    3e94:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e98:	strb.w	r8, [r2, #1201]	; 0x4b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e9c:	strb.w	r9, [r2, #1203]	; 0x4b3
      _s = s;
      _b = b;
    3ea0:	mov.w	r9, #226	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ea4:	strb.w	r5, [r2, #1212]	; 0x4bc
    3ea8:	movs	r5, #55	; 0x37
    3eaa:	strb.w	r7, [r2, #1218]	; 0x4c2
      _s = s;
      _b = b;
    3eae:	movs	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eb0:	strb.w	r6, [r2, #1221]	; 0x4c5
      _s = s;
    3eb4:	movs	r6, #39	; 0x27
    3eb6:	strb.w	r0, [r2, #1222]	; 0x4c6
      _b = b;
    3eba:	strb.w	lr, [r2, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ebe:	mvn.w	lr, #49	; 0x31
    3ec2:	strb.w	sl, [r2, #1233]	; 0x4d1
      _s = s;
      _b = b;
    3ec6:	mvn.w	sl, #11
    3eca:	str.w	ip, [sp, #8]
    3ece:	strb.w	sl, [r2, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ed2:	mvn.w	sl, #120	; 0x78
    3ed6:	strb.w	lr, [r2, #1230]	; 0x4ce
      _s = s;
    3eda:	mov.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ede:	strb.w	sl, [r2, #1242]	; 0x4da
    3ee2:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    3ee6:	strb.w	ip, [r2, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eea:	mov.w	ip, #180	; 0xb4
    3eee:	strb.w	sl, [r2, #1245]	; 0x4dd
      _s = s;
    3ef2:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ef6:	strb.w	fp, [r2, #1239]	; 0x4d7
      _s = s;
      _b = b;
    3efa:	mov.w	fp, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3efe:	strb.w	sl, [r2, #1246]	; 0x4de
    3f02:	mvn.w	sl, #84	; 0x54
    3f06:	strb.w	lr, [r2, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f0a:	mov.w	lr, #177	; 0xb1
      _s = s;
    3f0e:	strb.w	sl, [r2, #1249]	; 0x4e1
      _b = b;
    3f12:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f16:	strb.w	r0, [r2, #1234]	; 0x4d2
      _b = b;
    3f1a:	strb.w	sl, [r2, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f1e:	mvn.w	sl, #122	; 0x7a
    3f22:	strb.w	ip, [r2, #1236]	; 0x4d4
    3f26:	strb.w	sl, [r2, #1251]	; 0x4e3
      _s = s;
    3f2a:	mov.w	sl, #100	; 0x64
      _b = b;
    3f2e:	strb.w	r0, [r2, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f32:	strb.w	sl, [r2, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f36:	mvn.w	sl, #83	; 0x53
      _s = s;
      _b = b;
    3f3a:	strb.w	fp, [r2, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f3e:	strb.w	sl, [r2, #1224]	; 0x4c8
      _s = s;
    3f42:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f46:	strb.w	r4, [r2, #1248]	; 0x4e0
      _s = s;
    3f4a:	strb.w	sl, [r2, #1228]	; 0x4cc
      _b = b;
    3f4e:	mvn.w	sl, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f52:	strb.w	fp, [r2, #1258]	; 0x4ea
    3f56:	mov.w	fp, #160	; 0xa0
      _b = b;
    3f5a:	strb.w	sl, [r2, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f5e:	mov.w	sl, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f62:	ldr	r3, [pc, #1016]	; (435c <_GLOBAL__sub_I_nextTime1+0x26c8>)
      _s = s;
    3f64:	strb.w	sl, [r2, #1237]	; 0x4d5
    3f68:	mov.w	sl, #72	; 0x48
    3f6c:	strb.w	sl, [r2, #1240]	; 0x4d8
    3f70:	mov.w	sl, #40	; 0x28
    3f74:	strb.w	sl, [r2, #1243]	; 0x4db
      _b = b;
    3f78:	mvn.w	sl, #31
    3f7c:	strb.w	sl, [r2, #1244]	; 0x4dc
    3f80:	mvn.w	sl, #22
    3f84:	strb.w	sl, [r2, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f88:	mvn.w	sl, #111	; 0x6f
    3f8c:	strb.w	sl, [r2, #1254]	; 0x4e6
      _s = s;
      _b = b;
    3f90:	mvn.w	sl, #28
    3f94:	strb.w	sl, [r2, #1256]	; 0x4e8
    3f98:	ldrb.w	sl, [sp, #8]
    3f9c:	strb.w	sl, [r2, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa0:	ldrb.w	sl, [sp, #4]
      _s = s;
    3fa4:	strb.w	ip, [r2, #1267]	; 0x4f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa8:	strb.w	sl, [r2, #1260]	; 0x4ec
      _s = s;
    3fac:	mvn.w	sl, #115	; 0x73
    3fb0:	strb.w	fp, [r2, #1264]	; 0x4f0
    3fb4:	strb.w	sl, [r2, #1261]	; 0x4ed
      _b = b;
    3fb8:	mvn.w	sl, #31
    3fbc:	strb.w	r0, [r2, #1268]	; 0x4f4
    3fc0:	strb.w	sl, [r2, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fc4:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    3fc8:	strb.w	r8, [r2, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fcc:	strb.w	sl, [r2, #1263]	; 0x4ef
      _s = s;
      _b = b;
    3fd0:	ldrb.w	sl, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3fd4:	strb.w	r4, [r2, #1279]	; 0x4ff
      _b = b;
    3fd8:	strb.w	sl, [r2, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fdc:	mvn.w	sl, #109	; 0x6d
    3fe0:	strb.w	r5, [r2, #1272]	; 0x4f8
    3fe4:	strb.w	sl, [r2, #1266]	; 0x4f2
      _s = s;
    3fe8:	mov	sl, ip
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fea:	mvn.w	ip, #111	; 0x6f
      _s = s;
      _b = b;
    3fee:	strb.w	r7, [r2, #1286]	; 0x506
    3ff2:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ff6:	strb.w	ip, [r2, #1269]	; 0x4f5
      _s = s;
    3ffa:	mov.w	ip, #97	; 0x61
    3ffe:	strb.w	ip, [r2, #1270]	; 0x4f6
      _b = b;
    4002:	mvn.w	ip, #64	; 0x40
    4006:	strb.w	ip, [r2, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    400a:	mov.w	ip, #94	; 0x5e
    400e:	strb.w	ip, [r2, #1273]	; 0x4f9
      _b = b;
    4012:	mvn.w	ip, #99	; 0x63
    4016:	strb.w	ip, [r2, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    401a:	mvn.w	ip, #33	; 0x21
    401e:	strb.w	ip, [r2, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4022:	mov.w	ip, #108	; 0x6c
    4026:	strb.w	ip, [r2, #1281]	; 0x501
      _s = s;
    402a:	ldrb.w	ip, [sp, #24]
    402e:	strb.w	ip, [r2, #1282]	; 0x502
      _b = b;
    4032:	mov.w	ip, #47	; 0x2f
    4036:	strb.w	ip, [r2, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    403a:	mov.w	ip, #18
    403e:	strb.w	ip, [r2, #1284]	; 0x504
    4042:	mov.w	ip, #85	; 0x55
    4046:	strb.w	ip, [r2, #1278]	; 0x4fe
      _s = s;
    404a:	mov.w	ip, #125	; 0x7d
    404e:	strb.w	ip, [r2, #1255]	; 0x4e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4052:	mov.w	ip, #44	; 0x2c
    4056:	strb.w	ip, [r2, #1275]	; 0x4fb
    405a:	mvn.w	ip, #108	; 0x6c
    405e:	strb.w	ip, [r2, #1257]	; 0x4e9
      _s = s;
      _b = b;
    4062:	mov.w	ip, #53	; 0x35
    4066:	strb.w	ip, [r2, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    406a:	mvn.w	ip, #94	; 0x5e
    406e:	strb.w	ip, [r2, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4072:	mvn.w	ip, #30
    4076:	strb.w	ip, [r2, #1287]	; 0x507
    407a:	mvn.w	ip, #109	; 0x6d
      _s = s;
    407e:	strb.w	r5, [r2, #1318]	; 0x526
    4082:	mov.w	r5, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4086:	strb.w	ip, [r2, #1317]	; 0x525
      _s = s;
    408a:	mov.w	ip, #41	; 0x29
    408e:	strb.w	r5, [r2, #1288]	; 0x508
      _b = b;
    4092:	mvn.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4096:	strb.w	ip, [r2, #1297]	; 0x511
      _b = b;
    409a:	mvn.w	ip, #26
    409e:	strb.w	r5, [r2, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40a2:	mvn.w	r5, #42	; 0x2a
      _s = s;
      _b = b;
    40a6:	strb.w	ip, [r2, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40aa:	mvn.w	ip, #59	; 0x3b
    40ae:	strb.w	r5, [r2, #1290]	; 0x50a
    40b2:	mvn.w	r5, #52	; 0x34
    40b6:	strb.w	ip, [r2, #1302]	; 0x516
    40ba:	strb.w	ip, [r2, #1311]	; 0x51f
    40be:	mvn.w	ip, #65	; 0x41
    40c2:	strb.w	r5, [r2, #1296]	; 0x510
    40c6:	mvn.w	r5, #39	; 0x27
    40ca:	strb.w	ip, [r2, #1305]	; 0x519
      _s = s;
    40ce:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40d2:	strb.w	r5, [r2, #1293]	; 0x50d
      _s = s;
    40d6:	mov.w	r5, #33	; 0x21
    40da:	strb.w	ip, [r2, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40de:	mvn.w	ip, #41	; 0x29
      _s = s;
    40e2:	strb.w	r5, [r2, #1294]	; 0x50e
      _b = b;
    40e6:	mvn.w	r5, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40ea:	strb.w	ip, [r2, #1308]	; 0x51c
      _s = s;
    40ee:	strb.w	ip, [r2, #1312]	; 0x520
      _b = b;
    40f2:	mvn.w	ip, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40f6:	strb.w	r8, [r2, #1303]	; 0x517
      _b = b;
    40fa:	mov.w	r8, #70	; 0x46
    40fe:	strb.w	ip, [r2, #1310]	; 0x51e
    4102:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4106:	strb.w	fp, [r2, #1299]	; 0x513
      _s = s;
      _b = b;
    410a:	mov.w	fp, #98	; 0x62
    410e:	strb.w	ip, [r2, #1313]	; 0x521
    4112:	strb.w	ip, [r2, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4116:	mov.w	ip, #122	; 0x7a
    411a:	strb.w	sl, [r2, #1300]	; 0x514
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    411e:	mov.w	sl, #12
      _s = s;
    4122:	strb.w	ip, [r2, #1315]	; 0x523
      _b = b;
    4126:	mvn.w	ip, #17
    412a:	strb.w	r7, [r2, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    412e:	movs	r7, #206	; 0xce
      _b = b;
    4130:	strb.w	ip, [r2, #1319]	; 0x527
    4134:	mvn.w	ip, #94	; 0x5e
    4138:	strb.w	r0, [r2, #1304]	; 0x518
    413c:	strb.w	r0, [r2, #1307]	; 0x51b
    4140:	strb.w	r9, [r2, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4144:	mov.w	r9, #207	; 0xcf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4148:	strb.w	lr, [r2, #1314]	; 0x522
      _s = s;
    414c:	mov.w	lr, #80	; 0x50
    4150:	strb.w	r6, [r2, #1291]	; 0x50b
    4154:	strb.w	r6, [r2, #1309]	; 0x51d
      _b = b;
    4158:	strb.w	r5, [r2, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    415c:	movs	r5, #36	; 0x24
      _b = b;
    415e:	strb.w	ip, [r2, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4162:	ldrb.w	ip, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4166:	strb.w	r4, [r2, #1320]	; 0x528
      _s = s;
    416a:	strb.w	ip, [r2, #1327]	; 0x52f
      _b = b;
    416e:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4172:	strb.w	r4, [r2, #1326]	; 0x52e
      _s = s;
      _b = b;
    4176:	mvn.w	r4, #22
    417a:	strb.w	ip, [r2, #1331]	; 0x533
    417e:	strb.w	ip, [r2, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4182:	mvn.w	ip, #108	; 0x6c
      _s = s;
      _b = b;
    4186:	strb.w	r4, [r2, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    418a:	movs	r4, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    418c:	strb.w	ip, [r2, #1335]	; 0x537
    4190:	ldrb.w	ip, [sp]
      _s = s;
      _b = b;
    4194:	strb.w	r0, [r2, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4198:	strb.w	ip, [r2, #1341]	; 0x53d
      _s = s;
      _b = b;
    419c:	mvn.w	ip, #11
    41a0:	strb.w	r0, [r2, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41a4:	mvn.w	r0, #22
      _s = s;
      _b = b;
    41a8:	strb.w	ip, [r2, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41ac:	ldrb.w	ip, [sp, #4]
    41b0:	strb.w	ip, [r2, #1345]	; 0x541
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41b4:	mov.w	ip, #47	; 0x2f
    41b8:	strb.w	ip, [r2, #1350]	; 0x546
      _s = s;
    41bc:	mov.w	ip, #119	; 0x77
    41c0:	strb.w	ip, [r2, #1342]	; 0x53e
    41c4:	mov.w	ip, #24
    41c8:	strb.w	ip, [r2, #1321]	; 0x529
      _b = b;
    41cc:	mvn.w	ip, #27
    41d0:	strb.w	ip, [r2, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41d4:	mvn.w	ip, #121	; 0x79
    41d8:	strb.w	ip, [r2, #1323]	; 0x52b
      _s = s;
    41dc:	mvn.w	ip, #5
    41e0:	strb.w	ip, [r2, #1324]	; 0x52c
      _b = b;
    41e4:	mvn.w	ip, #24
    41e8:	strb.w	ip, [r2, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41ec:	mvn.w	ip, #124	; 0x7c
    41f0:	strb.w	ip, [r2, #1329]	; 0x531
      _s = s;
    41f4:	mov.w	ip, #105	; 0x69
    41f8:	strb.w	ip, [r2, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41fc:	mvn.w	ip, #119	; 0x77
    4200:	strb.w	ip, [r2, #1332]	; 0x534
      _s = s;
    4204:	mov.w	ip, #99	; 0x63
    4208:	strb.w	ip, [r2, #1333]	; 0x535
    420c:	mov.w	ip, #103	; 0x67
    4210:	strb.w	ip, [r2, #1336]	; 0x538
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4214:	mvn.w	ip, #104	; 0x68
    4218:	strb.w	ip, [r2, #1338]	; 0x53a
      _s = s;
    421c:	mov.w	ip, #79	; 0x4f
    4220:	strb.w	ip, [r2, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4224:	mvn.w	ip, #100	; 0x64
    4228:	strb.w	ip, [r2, #1344]	; 0x540
    422c:	mvn.w	ip, #113	; 0x71
    4230:	strb.w	ip, [r2, #1347]	; 0x543
      _s = s;
    4234:	mov.w	ip, #88	; 0x58
    4238:	strb.w	ip, [r2, #1348]	; 0x544
      _b = b;
    423c:	mvn.w	ip, #80	; 0x50
    4240:	strb.w	ip, [r2, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4244:	mov.w	ip, #124	; 0x7c
    4248:	strb.w	lr, [r2, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    424c:	mov.w	lr, #18
      _s = s;
    4250:	strb.w	ip, [r2, #1351]	; 0x547
      _b = b;
    4254:	mov.w	ip, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4258:	strb.w	lr, [r2, #1362]	; 0x552
    425c:	mov.w	lr, #52	; 0x34
      _s = s;
      _b = b;
    4260:	strb.w	ip, [r2, #1352]	; 0x548
    4264:	mvn.w	ip, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4268:	strb.w	lr, [r2, #1353]	; 0x549
      _s = s;
    426c:	mvn.w	lr, #84	; 0x54
      _b = b;
    4270:	strb.w	ip, [r2, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4274:	mvn.w	ip, #39	; 0x27
      _s = s;
    4278:	strb.w	lr, [r2, #1354]	; 0x54a
      _b = b;
    427c:	mov.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4280:	strb.w	ip, [r2, #1371]	; 0x55b
      _s = s;
    4284:	mov.w	ip, #33	; 0x21
      _b = b;
    4288:	strb.w	lr, [r2, #1361]	; 0x551
    428c:	mov.w	lr, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4290:	strb.w	ip, [r2, #1372]	; 0x55c
      _b = b;
    4294:	mvn.w	ip, #24
    4298:	strb.w	lr, [r2, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    429c:	mvn.w	lr, #34	; 0x22
      _s = s;
      _b = b;
    42a0:	strb.w	ip, [r2, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42a4:	mov.w	ip, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42a8:	strb.w	lr, [r2, #1365]	; 0x555
      _s = s;
    42ac:	mov.w	lr, #40	; 0x28
    42b0:	strb.w	ip, [r2, #1381]	; 0x565
    42b4:	strb.w	lr, [r2, #1366]	; 0x556
      _b = b;
    42b8:	mvn.w	lr, #43	; 0x2b
    42bc:	ldrb.w	ip, [sp, #8]
    42c0:	strb.w	lr, [r2, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42c4:	strb.w	lr, [r2, #1368]	; 0x558
    42c8:	mvn.w	lr, #60	; 0x3c
      _s = s;
    42cc:	strb.w	r6, [r2, #1369]	; 0x559
      _b = b;
    42d0:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42d4:	strb.w	lr, [r2, #1374]	; 0x55e
      _s = s;
    42d8:	mov.w	lr, #59	; 0x3b
      _b = b;
    42dc:	strb.w	ip, [r2, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42e0:	mvn.w	ip, #72	; 0x48
      _s = s;
    42e4:	strb.w	lr, [r2, #1375]	; 0x55f
      _b = b;
    42e8:	mvn.w	lr, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42ec:	strb.w	r0, [r2, #1359]	; 0x54f
    42f0:	movs	r0, #159	; 0x9f
      _s = s;
      _b = b;
    42f2:	strb.w	lr, [r2, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42f6:	mvn.w	lr, #105	; 0x69
      _s = s;
      _b = b;
    42fa:	strb.w	r6, [r2, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42fe:	movs	r6, #173	; 0xad
      _s = s;
      _b = b;
    4300:	strb.w	fp, [r2, #1355]	; 0x54b
    4304:	mov.w	fp, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4308:	strb.w	sl, [r2, #1356]	; 0x54c
      _s = s;
    430c:	mov.w	sl, #193	; 0xc1
    4310:	strb.w	r9, [r2, #1357]	; 0x54d
    4314:	mov.w	r9, #121	; 0x79
      _b = b;
    4318:	strb.w	r8, [r2, #1358]	; 0x54e
    431c:	mov.w	r8, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4320:	strb.w	ip, [r2, #1380]	; 0x564
    4324:	mvn.w	ip, #57	; 0x39
      _s = s;
    4328:	strb.w	r5, [r2, #1360]	; 0x550
    432c:	strb.w	r7, [r2, #1363]	; 0x553
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4330:	strb.w	lr, [r2, #1377]	; 0x561
      _s = s;
    4334:	mvn.w	lr, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4338:	strb.w	ip, [r2, #1389]	; 0x56d
      _s = s;
    433c:	mvn.w	ip, #55	; 0x37
    4340:	strb.w	lr, [r2, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4344:	mvn.w	lr, #54	; 0x36
      _s = s;
    4348:	strb.w	ip, [r2, #1390]	; 0x56e
      _b = b;
    434c:	mvn.w	ip, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4350:	strb.w	lr, [r2, #1383]	; 0x567
      _s = s;
      _b = b;
    4354:	mvn.w	lr, #21
    4358:	b.n	4360 <_GLOBAL__sub_I_nextTime1+0x26cc>
    435a:	nop
    435c:	.word	0x2000a73c
    4360:	strb.w	ip, [r2, #1391]	; 0x56f
    4364:	strb.w	lr, [r2, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4368:	mvn.w	lr, #108	; 0x6c
      _s = s;
      _b = b;
    436c:	strb.w	ip, [r2, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4370:	mov.w	ip, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4374:	strb.w	lr, [r2, #1395]	; 0x573
      _s = s;
    4378:	mov.w	lr, #124	; 0x7c
    437c:	strb.w	ip, [r2, #1396]	; 0x574
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4380:	mvn.w	ip, #125	; 0x7d
      _s = s;
    4384:	strb.w	lr, [r2, #1393]	; 0x571
      _b = b;
    4388:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    438c:	strb.w	ip, [r2, #1398]	; 0x576
      _s = s;
      _b = b;
    4390:	mvn.w	ip, #44	; 0x2c
    4394:	strb.w	lr, [r2, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4398:	mov.w	lr, #105	; 0x69
      _b = b;
    439c:	strb.w	ip, [r2, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43a0:	mvn.w	ip, #120	; 0x78
      _s = s;
    43a4:	strb.w	lr, [r2, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43a8:	mvn.w	lr, #124	; 0x7c
    43ac:	strb.w	ip, [r2, #1401]	; 0x579
      _s = s;
    43b0:	mvn.w	ip, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43b4:	strb.w	lr, [r2, #1407]	; 0x57f
      _s = s;
    43b8:	mvn.w	lr, #100	; 0x64
    43bc:	strb.w	ip, [r2, #1402]	; 0x57a
      _b = b;
    43c0:	mvn.w	ip, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43c4:	strb.w	lr, [r2, #1408]	; 0x580
      _b = b;
    43c8:	mvn.w	lr, #21
    43cc:	strb.w	ip, [r2, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43d0:	mvn.w	ip, #127	; 0x7f
      _s = s;
      _b = b;
    43d4:	strb.w	lr, [r2, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43d8:	mvn.w	lr, #99	; 0x63
    43dc:	strb.w	ip, [r2, #1404]	; 0x57c
      _s = s;
      _b = b;
    43e0:	mvn.w	ip, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43e4:	strb.w	lr, [r2, #1410]	; 0x582
      _s = s;
      _b = b;
    43e8:	mvn.w	lr, #26
    43ec:	strb.w	ip, [r2, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43f0:	mvn.w	ip, #61	; 0x3d
      _b = b;
    43f4:	strb.w	lr, [r2, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43f8:	mov.w	lr, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43fc:	strb.w	r6, [r2, #1392]	; 0x570
      _s = s;
    4400:	strb.w	lr, [r2, #1414]	; 0x586
      _b = b;
    4404:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4408:	strb.w	r4, [r2, #1399]	; 0x577
    440c:	movs	r4, #174	; 0xae
      _b = b;
    440e:	strb.w	lr, [r2, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4412:	mov.w	lr, #96	; 0x60
    4416:	strb.w	lr, [r2, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    441a:	mvn.w	lr, #51	; 0x33
    441e:	strb.w	lr, [r2, #1386]	; 0x56a
      _s = s;
    4422:	mov.w	lr, #75	; 0x4b
    4426:	strb.w	lr, [r2, #1387]	; 0x56b
      _b = b;
    442a:	mvn.w	lr, #19
    442e:	strb.w	lr, [r2, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4432:	mov.w	lr, #78	; 0x4e
    4436:	strb.w	ip, [r2, #1411]	; 0x583
      _b = b;
    443a:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    443e:	strb.w	r5, [r2, #1431]	; 0x597
    4442:	mov.w	r5, #105	; 0x69
      _s = s;
      _b = b;
    4446:	strb.w	ip, [r2, #1418]	; 0x58a
    444a:	mvn.w	ip, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    444e:	strb.w	r5, [r2, #1434]	; 0x59a
      _s = s;
      _b = b;
    4452:	mov.w	r5, #88	; 0x58
    4456:	strb.w	ip, [r2, #1421]	; 0x58d
    445a:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    445e:	strb.w	r7, [r2, #1432]	; 0x598
      _b = b;
    4462:	strb.w	ip, [r2, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4466:	mvn.w	ip, #111	; 0x6f
      _s = s;
      _b = b;
    446a:	strb.w	r5, [r2, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    446e:	mov.w	r5, #108	; 0x6c
    4472:	strb.w	ip, [r2, #1425]	; 0x591
      _s = s;
    4476:	mov.w	ip, #116	; 0x74
      _b = b;
    447a:	strb.w	r7, [r2, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    447e:	mvn.w	r7, #90	; 0x5a
      _s = s;
    4482:	strb.w	ip, [r2, #1441]	; 0x5a1
    4486:	mov.w	ip, #53	; 0x35
      _b = b;
    448a:	strb.w	r8, [r2, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    448e:	mvn.w	r8, #54	; 0x36
      _s = s;
    4492:	strb.w	ip, [r2, #1444]	; 0x5a4
      _b = b;
    4496:	mvn.w	ip, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    449a:	strb.w	r0, [r2, #1413]	; 0x585
      _s = s;
      _b = b;
    449e:	strb.w	ip, [r2, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44a2:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44a6:	strb.w	r0, [r2, #1416]	; 0x588
      _s = s;
    44aa:	strb.w	ip, [r2, #1450]	; 0x5aa
    44ae:	mvn.w	ip, #67	; 0x43
    44b2:	strb.w	r0, [r2, #1426]	; 0x592
    44b6:	strb.w	ip, [r2, #1438]	; 0x59e
    44ba:	mvn.w	ip, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44be:	strb.w	r5, [r2, #1437]	; 0x59d
    44c2:	movs	r5, #132	; 0x84
      _s = s;
    44c4:	strb.w	ip, [r2, #1420]	; 0x58c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44c8:	mvn.w	ip, #98	; 0x62
      _s = s;
    44cc:	strb.w	sl, [r2, #1423]	; 0x58f
    44d0:	mvn.w	sl, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44d4:	strb.w	ip, [r2, #1422]	; 0x58e
      _s = s;
      _b = b;
    44d8:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44dc:	strb.w	r9, [r2, #1429]	; 0x595
      _b = b;
    44e0:	mov.w	r9, #82	; 0x52
    44e4:	strb.w	ip, [r2, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e8:	mov.w	ip, #114	; 0x72
    44ec:	strb.w	r7, [r2, #1419]	; 0x58b
      _s = s;
      _b = b;
    44f0:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44f4:	strb.w	ip, [r2, #1428]	; 0x594
      _s = s;
    44f8:	mvn.w	ip, #85	; 0x55
      _b = b;
    44fc:	strb.w	fp, [r2, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4500:	strb.w	ip, [r2, #1435]	; 0x59b
      _b = b;
    4504:	mov.w	ip, #46	; 0x2e
    4508:	strb.w	ip, [r2, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    450c:	mov.w	ip, #26
    4510:	strb.w	ip, [r2, #1440]	; 0x5a0
      _s = s;
      _b = b;
    4514:	mov.w	ip, #92	; 0x5c
    4518:	strb.w	ip, [r2, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    451c:	mvn.w	ip, #6
    4520:	strb.w	ip, [r2, #1443]	; 0x5a3
    4524:	mvn.w	ip, #38	; 0x26
    4528:	strb.w	ip, [r2, #1446]	; 0x5a6
      _s = s;
    452c:	mov.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4530:	strb.w	r8, [r2, #1464]	; 0x5b8
      _s = s;
    4534:	mov.w	r8, #117	; 0x75
    4538:	strb.w	ip, [r2, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    453c:	mvn.w	ip, #45	; 0x2d
      _s = s;
    4540:	strb.w	r8, [r2, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4544:	mvn.w	r8, #59	; 0x3b
    4548:	strb.w	ip, [r2, #1449]	; 0x5a9
      _s = s;
      _b = b;
    454c:	mvn.w	ip, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4550:	strb.w	r8, [r2, #1467]	; 0x5bb
      _s = s;
    4554:	mvn.w	r8, #64	; 0x40
    4558:	strb.w	lr, [r2, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    455c:	mvn.w	lr, #69	; 0x45
      _s = s;
    4560:	strb.w	r8, [r2, #1468]	; 0x5bc
      _b = b;
    4564:	mvn.w	r8, #11
    4568:	strb.w	ip, [r2, #1451]	; 0x5ab
    456c:	strb.w	r8, [r2, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4570:	mvn.w	r8, #121	; 0x79
      _b = b;
    4574:	strb.w	ip, [r2, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4578:	strb.w	r8, [r2, #1471]	; 0x5bf
      _b = b;
    457c:	mvn.w	r8, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4580:	ldrb.w	ip, [sp, #4]
      _s = s;
      _b = b;
    4584:	strb.w	r8, [r2, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4588:	mov.w	r8, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    458c:	strb.w	lr, [r2, #1452]	; 0x5ac
      _s = s;
    4590:	mvn.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4594:	strb.w	ip, [r2, #1455]	; 0x5af
    4598:	mvn.w	ip, #65	; 0x41
      _s = s;
    459c:	strb.w	r8, [r2, #1474]	; 0x5c2
      _b = b;
    45a0:	mvn.w	r8, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45a4:	strb.w	lr, [r2, #1456]	; 0x5b0
      _b = b;
    45a8:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ac:	strb.w	ip, [r2, #1458]	; 0x5b2
      _s = s;
      _b = b;
    45b0:	strb.w	r8, [r2, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45b4:	mvn.w	r8, #113	; 0x71
      _s = s;
      _b = b;
    45b8:	ldrb.w	ip, [sp, #16]
    45bc:	strb.w	lr, [r2, #1463]	; 0x5b7
    45c0:	mvn.w	lr, #14
    45c4:	strb.w	r7, [r2, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45c8:	movs	r7, #145	; 0x91
      _s = s;
      _b = b;
    45ca:	strb.w	ip, [r2, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ce:	mvn.w	ip, #57	; 0x39
      _s = s;
    45d2:	strb.w	r6, [r2, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45d6:	mvn.w	r6, #100	; 0x64
    45da:	strb.w	r8, [r2, #1476]	; 0x5c4
      _s = s;
      _b = b;
    45de:	mvn.w	r8, #80	; 0x50
    45e2:	strb.w	lr, [r2, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45e6:	mov.w	lr, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ea:	strb.w	ip, [r2, #1461]	; 0x5b5
      _s = s;
      _b = b;
    45ee:	mov.w	ip, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45f2:	strb.w	r7, [r2, #1473]	; 0x5c1
      _s = s;
      _b = b;
    45f6:	strb.w	r8, [r2, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45fa:	mov.w	r8, #129	; 0x81
    45fe:	strb.w	sl, [r2, #1483]	; 0x5cb
    4602:	mov.w	sl, #64	; 0x40
    4606:	strb.w	r4, [r2, #1459]	; 0x5b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    460a:	strb.w	r4, [r2, #1470]	; 0x5be
      _s = s;
    460e:	strb.w	lr, [r2, #1477]	; 0x5c5
      _b = b;
    4612:	mvn.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4616:	strb.w	r6, [r2, #1503]	; 0x5df
      _s = s;
      _b = b;
    461a:	mvn.w	r6, #39	; 0x27
    461e:	strb.w	lr, [r2, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4622:	mvn.w	lr, #114	; 0x72
      _s = s;
      _b = b;
    4626:	strb.w	r6, [r2, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    462a:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    462e:	strb.w	lr, [r2, #1479]	; 0x5c7
      _s = s;
    4632:	mvn.w	lr, #3
    4636:	strb.w	r6, [r2, #1510]	; 0x5e6
      _b = b;
    463a:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    463e:	strb.w	lr, [r2, #1480]	; 0x5c8
      _b = b;
    4642:	mvn.w	lr, #12
    4646:	strb.w	r6, [r2, #1511]	; 0x5e7
    464a:	mvn.w	r6, #127	; 0x7f
    464e:	strb.w	lr, [r2, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4652:	mov.w	lr, #103	; 0x67
      _s = s;
      _b = b;
    4656:	strb.w	r6, [r2, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    465a:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    465e:	strb.w	r5, [r2, #1482]	; 0x5ca
      _s = s;
    4662:	strb.w	r6, [r2, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4666:	mvn.w	r6, #125	; 0x7d
    466a:	strb.w	lr, [r2, #1506]	; 0x5e2
      _s = s;
    466e:	mov.w	lr, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4672:	strb.w	r6, [r2, #1485]	; 0x5cd
    4676:	mvn.w	r6, #101	; 0x65
    467a:	strb.w	fp, [r2, #1512]	; 0x5e8
      _s = s;
    467e:	mov.w	fp, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4682:	strb.w	r6, [r2, #1488]	; 0x5d0
      _s = s;
    4686:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    468a:	strb.w	r0, [r2, #1491]	; 0x5d3
      _s = s;
    468e:	strb.w	r6, [r2, #1489]	; 0x5d1
      _b = b;
    4692:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4696:	strb.w	r7, [r2, #1492]	; 0x5d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    469a:	movs	r7, #192	; 0xc0
      _s = s;
      _b = b;
    469c:	strb.w	r6, [r2, #1490]	; 0x5d2
    46a0:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a4:	strb.w	r4, [r2, #1500]	; 0x5dc
      _s = s;
      _b = b;
    46a8:	strb.w	r6, [r2, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46ac:	ldrb.w	r6, [sp, #20]
    46b0:	strb.w	r6, [r2, #1497]	; 0x5d9
      _s = s;
      _b = b;
    46b4:	ldrb.w	r6, [sp, #16]
    46b8:	strb.w	r6, [r2, #1499]	; 0x5db
    46bc:	ldrb.w	r6, [sp, #8]
    46c0:	strb.w	r6, [r2, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46c4:	mvn.w	r6, #102	; 0x66
    46c8:	strb.w	r6, [r2, #1486]	; 0x5ce
      _b = b;
    46cc:	mvn.w	r6, #8
    46d0:	strb.w	r6, [r2, #1487]	; 0x5cf
    46d4:	mvn.w	r6, #13
    46d8:	strb.w	r6, [r2, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46dc:	mvn.w	r6, #77	; 0x4d
    46e0:	strb.w	r6, [r2, #1494]	; 0x5d6
      _s = s;
    46e4:	mvn.w	r6, #66	; 0x42
    46e8:	strb.w	r6, [r2, #1495]	; 0x5d7
    46ec:	mvn.w	r6, #106	; 0x6a
    46f0:	strb.w	r6, [r2, #1498]	; 0x5da
    46f4:	mov.w	r6, #113	; 0x71
    46f8:	strb.w	r4, [r1, #1546]	; 0x60a
      _b = b;
    46fc:	mvn.w	r4, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4700:	strb.w	r6, [r2, #1501]	; 0x5dd
    4704:	mvn.w	r6, #94	; 0x5e
      _b = b;
    4708:	strb.w	r4, [r1, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    470c:	mvn.w	r4, #119	; 0x77
      _s = s;
    4710:	strb.w	r6, [r1, #1504]	; 0x5e0
    4714:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4718:	strb.w	r4, [r1, #1533]	; 0x5fd
    471c:	movs	r2, #187	; 0xbb
      _s = s;
    471e:	strb.w	r6, [r1, #1507]	; 0x5e3
      _b = b;
    4722:	mvn.w	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4726:	strb.w	r6, [r1, #1509]	; 0x5e5
    472a:	strb.w	r6, [r1, #1515]	; 0x5eb
      _s = s;
    472e:	mvn.w	r6, #58	; 0x3a
      _b = b;
    4732:	strb.w	ip, [r1, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4736:	strb.w	r6, [r1, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    473a:	mov.w	r6, #113	; 0x71
      _s = s;
      _b = b;
    473e:	strb.w	r9, [r1, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4742:	mov.w	r9, #110	; 0x6e
    4746:	strb.w	r6, [r1, #1518]	; 0x5ee
      _s = s;
      _b = b;
    474a:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    474e:	strb.w	r0, [r1, #1530]	; 0x5fa
      _s = s;
      _b = b;
    4752:	strb.w	r6, [r1, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4756:	mvn.w	r6, #34	; 0x22
    475a:	strb.w	r0, [r1, #1548]	; 0x60c
    475e:	strb.w	r6, [r1, #1521]	; 0x5f1
      _s = s;
      _b = b;
    4762:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4766:	strb.w	r8, [r1, #1519]	; 0x5ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    476a:	mov.w	r8, #145	; 0x91
      _s = s;
      _b = b;
    476e:	strb.w	r6, [r1, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4772:	mvn.w	r6, #58	; 0x3a
      _s = s;
    4776:	strb.w	sl, [r1, #1522]	; 0x5f2
    477a:	mvn.w	sl, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    477e:	strb.w	r6, [r1, #1524]	; 0x5f4
      _s = s;
      _b = b;
    4782:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4786:	strb.w	lr, [r1, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    478a:	mov.w	lr, #158	; 0x9e
      _s = s;
      _b = b;
    478e:	strb.w	r6, [r1, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4792:	mvn.w	r6, #65	; 0x41
      _s = s;
    4796:	strb.w	fp, [r1, #1537]	; 0x601
    479a:	mov.w	fp, #139	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    479e:	strb.w	r6, [r1, #1527]	; 0x5f7
      _s = s;
      _b = b;
    47a2:	mvn.w	r6, #21
    47a6:	strb.w	r6, [r1, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47aa:	mvn.w	r6, #102	; 0x66
    47ae:	strb.w	r6, [r1, #1531]	; 0x5fb
      _b = b;
    47b2:	mvn.w	r6, #24
    47b6:	strb.w	r6, [r1, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47ba:	mvn.w	r6, #85	; 0x55
    47be:	strb.w	r6, [r1, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47c2:	mvn.w	r6, #56	; 0x38
    47c6:	strb.w	r6, [r1, #1539]	; 0x603
      _s = s;
    47ca:	mvn.w	r6, #66	; 0x42
    47ce:	strb.w	r6, [r1, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47d2:	mvn.w	r6, #55	; 0x37
    47d6:	strb.w	r6, [r1, #1542]	; 0x606
      _s = s;
      _b = b;
    47da:	mvn.w	r6, #14
    47de:	strb.w	r6, [r1, #1544]	; 0x608
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47e2:	mvn.w	r6, #3
      _b = b;
    47e6:	strb.w	r4, [r1, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47ea:	mvn.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47ee:	strb.w	r2, [r1, #1572]	; 0x624
      _s = s;
      _b = b;
    47f2:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47f6:	strb.w	r6, [r1, #1558]	; 0x616
      _b = b;
    47fa:	mvn.w	r6, #85	; 0x55
    47fe:	strb.w	r2, [r1, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4802:	mvn.w	r2, #113	; 0x71
      _s = s;
    4806:	strb.w	r4, [r1, #1543]	; 0x607
    480a:	mov.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    480e:	strb.w	r2, [r1, #1557]	; 0x615
    4812:	mvn.w	r2, #121	; 0x79
      _s = s;
      _b = b;
    4816:	strb.w	r6, [r1, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    481a:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    481e:	strb.w	r2, [r1, #1560]	; 0x618
      _s = s;
    4822:	mvn.w	r2, #124	; 0x7c
    4826:	strb.w	r4, [r1, #1549]	; 0x60d
    482a:	mov.w	r4, #108	; 0x6c
    482e:	strb.w	r6, [r1, #1564]	; 0x61c
      _b = b;
    4832:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4836:	strb.w	r2, [r1, #1570]	; 0x622
      _b = b;
    483a:	mvn.w	r2, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    483e:	strb.w	r4, [r1, #1528]	; 0x5f8
      _b = b;
    4842:	mvn.w	r4, #22
    4846:	strb.w	r6, [r1, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    484a:	mvn.w	r6, #58	; 0x3a
      _b = b;
    484e:	strb.w	r2, [r1, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4852:	mov.w	r2, #52	; 0x34
      _b = b;
    4856:	strb.w	r4, [r1, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    485a:	mvn.w	r4, #73	; 0x49
      _s = s;
    485e:	strb.w	r6, [r1, #1567]	; 0x61f
      _b = b;
    4862:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4866:	strb.w	r2, [r1, #1576]	; 0x628
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    486a:	mvn.w	r2, #118	; 0x76
    486e:	strb.w	r4, [r1, #1536]	; 0x600
      _s = s;
      _b = b;
    4872:	mvn.w	r4, #16
    4876:	strb.w	r6, [r1, #1571]	; 0x623
    487a:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    487e:	strb.w	r2, [r1, #1551]	; 0x60f
      _s = s;
      _b = b;
    4882:	mvn.w	r2, #20
    4886:	strb.w	r4, [r1, #1541]	; 0x605
    488a:	mvn.w	r4, #15
    488e:	strb.w	r6, [r1, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4892:	mvn.w	r6, #50	; 0x32
      _s = s;
      _b = b;
    4896:	strb.w	r2, [r1, #1553]	; 0x611
    489a:	strb.w	r2, [r1, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    489e:	mvn.w	r2, #108	; 0x6c
      _s = s;
      _b = b;
    48a2:	strb.w	r4, [r1, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48a6:	mov.w	r4, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48aa:	strb.w	r6, [r1, #1578]	; 0x62a
    48ae:	mvn.w	r6, #77	; 0x4d
    48b2:	strb.w	r2, [r1, #1554]	; 0x612
      _s = s;
    48b6:	mov.w	r2, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48ba:	strb.w	r7, [r1, #1545]	; 0x609
      _s = s;
    48be:	strb.w	r4, [r1, #1552]	; 0x610
      _b = b;
    48c2:	movs	r4, #246	; 0xf6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48c4:	strb.w	r5, [r1, #1563]	; 0x61b
      _s = s;
    48c8:	strb.w	ip, [r1, #1573]	; 0x625
      _b = b;
    48cc:	mov.w	ip, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48d0:	strb.w	r6, [r1, #1581]	; 0x62d
      _s = s;
      _b = b;
    48d4:	movs	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48d6:	strb.w	r5, [r1, #1582]	; 0x62e
      _b = b;
    48da:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48dc:	strb.w	r2, [r1, #1555]	; 0x613
    48e0:	strb.w	r2, [r1, #1579]	; 0x62b
    48e4:	mvn.w	r2, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48e8:	strb.w	lr, [r1, #1599]	; 0x63f
    48ec:	mvn.w	lr, #113	; 0x71
      _s = s;
    48f0:	strb.w	r2, [r1, #1561]	; 0x619
      _b = b;
    48f4:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48f8:	strb.w	lr, [r1, #1584]	; 0x630
    48fc:	mvn.w	lr, #124	; 0x7c
      _s = s;
      _b = b;
    4900:	strb.w	r2, [r1, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4904:	mvn.w	r2, #109	; 0x6d
    4908:	strb.w	lr, [r1, #1590]	; 0x636
    490c:	strb.w	r2, [r1, #1569]	; 0x621
    4910:	mvn.w	r2, #53	; 0x35
    4914:	strb.w	lr, [r1, #1593]	; 0x639
      _s = s;
    4918:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    491c:	strb.w	r2, [r1, #1575]	; 0x627
      _s = s;
      _b = b;
    4920:	mvn.w	r2, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4924:	strb.w	lr, [r1, #1597]	; 0x63d
      _b = b;
    4928:	mvn.w	lr, #24
    492c:	strb.w	r2, [r1, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4930:	mvn.w	r2, #20
      _b = b;
    4934:	strb.w	lr, [r1, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4938:	mvn.w	lr, #5
    493c:	strb.w	r2, [r1, #1591]	; 0x637
      _b = b;
    4940:	mvn.w	r2, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4944:	strb.w	sl, [r1, #1609]	; 0x649
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4948:	mvn.w	sl, #108	; 0x6c
      _s = s;
      _b = b;
    494c:	strb.w	r2, [r1, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4950:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4954:	strb.w	r9, [r1, #1587]	; 0x633
      _s = s;
      _b = b;
    4958:	mvn.w	r9, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    495c:	strb.w	r2, [r1, #1594]	; 0x63a
      _b = b;
    4960:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4964:	strb.w	lr, [r1, #1606]	; 0x646
    4968:	mvn.w	lr, #60	; 0x3c
      _b = b;
    496c:	strb.w	r2, [r1, #1601]	; 0x641
    4970:	mvn.w	r2, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4974:	strb.w	r8, [r1, #1566]	; 0x61e
      _s = s;
      _b = b;
    4978:	strb.w	r2, [r1, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    497c:	mvn.w	r2, #98	; 0x62
      _s = s;
      _b = b;
    4980:	strb.w	r4, [r1, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4984:	strb.w	r2, [r1, #1608]	; 0x648
    4988:	movs	r2, #160	; 0xa0
      _s = s;
    498a:	strb.w	r7, [r1, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    498e:	strb.w	r8, [r1, #1596]	; 0x63c
    4992:	strb.w	r0, [r1, #1605]	; 0x645
    4996:	strb.w	sl, [r1, #1611]	; 0x64b
      _s = s;
    499a:	mov.w	sl, #209	; 0xd1
      _b = b;
    499e:	strb.w	r5, [r1, #1589]	; 0x635
    49a2:	movs	r5, #118	; 0x76
    49a4:	strb.w	ip, [r1, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49a8:	mov.w	ip, #176	; 0xb0
      _b = b;
    49ac:	strb.w	r6, [r1, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49b0:	movs	r6, #227	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49b2:	strb.w	r2, [r1, #1602]	; 0x642
      _s = s;
    49b6:	movs	r2, #115	; 0x73
    49b8:	strb.w	lr, [r1, #1612]	; 0x64c
    49bc:	mov.w	lr, #162	; 0xa2
      _b = b;
    49c0:	strb.w	r9, [r1, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49c4:	mvn.w	r9, #101	; 0x65
      _s = s;
    49c8:	strb.w	lr, [r1, #1648]	; 0x670
    49cc:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49d0:	strb.w	r9, [r1, #1614]	; 0x64e
      _s = s;
      _b = b;
    49d4:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49d8:	strb.w	lr, [r1, #1618]	; 0x652
    49dc:	mvn.w	lr, #124	; 0x7c
      _b = b;
    49e0:	strb.w	r9, [r1, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49e4:	mvn.w	r9, #66	; 0x42
      _s = s;
    49e8:	strb.w	ip, [r1, #1600]	; 0x640
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49ec:	strb.w	r9, [r1, #1617]	; 0x651
      _s = s;
      _b = b;
    49f0:	mvn.w	r9, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49f4:	strb.w	ip, [r1, #1633]	; 0x661
      _b = b;
    49f8:	mvn.w	ip, #20
    49fc:	strb.w	r9, [r1, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a00:	mvn.w	r9, #61	; 0x3d
      _s = s;
    4a04:	strb.w	lr, [r1, #1624]	; 0x658
      _b = b;
    4a08:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a0c:	strb.w	r9, [r1, #1620]	; 0x654
      _s = s;
      _b = b;
    4a10:	mvn.w	r9, #16
    4a14:	strb.w	ip, [r1, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a18:	mvn.w	ip, #114	; 0x72
      _s = s;
      _b = b;
    4a1c:	strb.w	lr, [r1, #1628]	; 0x65c
    4a20:	mvn.w	lr, #21
    4a24:	strb.w	r9, [r1, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a28:	mvn.w	r9, #88	; 0x58
    4a2c:	strb.w	ip, [r1, #1635]	; 0x663
      _s = s;
    4a30:	mvn.w	ip, #88	; 0x58
      _b = b;
    4a34:	strb.w	lr, [r1, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a38:	mvn.w	lr, #113	; 0x71
    4a3c:	strb.w	r9, [r1, #1623]	; 0x657
      _s = s;
      _b = b;
    4a40:	mvn.w	r9, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a44:	strb.w	ip, [r1, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a48:	mvn.w	ip, #118	; 0x76
    4a4c:	strb.w	lr, [r1, #1632]	; 0x660
      _s = s;
    4a50:	mov.w	lr, #40	; 0x28
      _b = b;
    4a54:	strb.w	r9, [r1, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a58:	mov.w	r9, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a5c:	strb.w	ip, [r1, #1644]	; 0x66c
      _s = s;
    4a60:	mvn.w	ip, #50	; 0x32
    4a64:	strb.w	lr, [r1, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a68:	mov.w	lr, #122	; 0x7a
      _s = s;
    4a6c:	strb.w	r9, [r1, #1627]	; 0x65b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a70:	mvn.w	r9, #120	; 0x78
      _s = s;
    4a74:	strb.w	ip, [r1, #1645]	; 0x66d
      _b = b;
    4a78:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a7c:	strb.w	lr, [r1, #1641]	; 0x669
      _s = s;
    4a80:	mov.w	lr, #116	; 0x74
    4a84:	strb.w	sl, [r1, #1585]	; 0x631
      _b = b;
    4a88:	strb.w	r5, [r1, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a8c:	strb.w	r6, [r1, #1603]	; 0x643
      _b = b;
    4a90:	strb.w	r6, [r1, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a94:	strb.w	fp, [r1, #1615]	; 0x64f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a98:	strb.w	r9, [r1, #1629]	; 0x65d
      _s = s;
    4a9c:	mov.w	r9, #57	; 0x39
      _b = b;
    4aa0:	strb.w	ip, [r1, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4aa4:	strb.w	r2, [r1, #1621]	; 0x655
      _b = b;
    4aa8:	movs	r2, #148	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4aaa:	strb.w	lr, [r1, #1642]	; 0x66a
      _b = b;
    4aae:	mvn.w	lr, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ab2:	strb.w	r7, [r1, #1669]	; 0x685
      _b = b;
    4ab6:	mvn.w	r7, #112	; 0x70
    4aba:	strb.w	lr, [r1, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4abe:	mvn.w	lr, #111	; 0x6f
      _s = s;
      _b = b;
    4ac2:	strb.w	r7, [r1, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ac6:	mvn.w	r7, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aca:	strb.w	lr, [r1, #1626]	; 0x65a
    4ace:	mov.w	lr, #94	; 0x5e
      _s = s;
    4ad2:	strb.w	r7, [r1, #1675]	; 0x68b
    4ad6:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ada:	strb.w	lr, [r1, #1638]	; 0x666
      _s = s;
      _b = b;
    4ade:	mvn.w	lr, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ae2:	strb.w	r7, [r1, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ae6:	mvn.w	r7, #51	; 0x33
      _s = s;
      _b = b;
    4aea:	strb.w	lr, [r1, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aee:	mvn.w	lr, #103	; 0x67
    4af2:	strb.w	r5, [r1, #1668]	; 0x684
    4af6:	movs	r5, #84	; 0x54
    4af8:	strb.w	lr, [r1, #1647]	; 0x66f
      _s = s;
    4afc:	mov.w	lr, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b00:	strb.w	r7, [r1, #1653]	; 0x675
      _s = s;
      _b = b;
    4b04:	mvn.w	r7, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b08:	strb.w	lr, [r1, #1651]	; 0x673
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b0c:	mvn.w	lr, #71	; 0x47
    4b10:	strb.w	r5, [r1, #1665]	; 0x681
    4b14:	movs	r5, #100	; 0x64
    4b16:	strb.w	lr, [r1, #1650]	; 0x672
      _s = s;
      _b = b;
    4b1a:	mvn.w	lr, #6
    4b1e:	strb.w	r7, [r1, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b22:	mvn.w	r7, #65	; 0x41
      _b = b;
    4b26:	strb.w	lr, [r1, #1652]	; 0x674
    4b2a:	strb.w	lr, [r1, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b2e:	mvn.w	lr, #38	; 0x26
    4b32:	strb.w	r5, [r1, #1671]	; 0x687
      _s = s;
    4b36:	mov.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b3a:	strb.w	lr, [r1, #1659]	; 0x67b
      _s = s;
    4b3e:	mov.w	lr, #37	; 0x25
    4b42:	strb.w	r7, [r1, #1672]	; 0x688
      _b = b;
    4b46:	mvn.w	r7, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b4a:	strb.w	lr, [r1, #1660]	; 0x67c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b4e:	mvn.w	lr, #94	; 0x5e
      _s = s;
    4b52:	strb.w	r5, [r1, #1654]	; 0x676
      _b = b;
    4b56:	mvn.w	r5, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b5a:	strb.w	lr, [r1, #1662]	; 0x67e
      _s = s;
      _b = b;
    4b5e:	mvn.w	lr, #77	; 0x4d
    4b62:	strb.w	r7, [r1, #1676]	; 0x68c
    4b66:	mvn.w	r7, #65	; 0x41
    4b6a:	strb.w	lr, [r1, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b6e:	mov.w	lr, #81	; 0x51
    4b72:	strb.w	r9, [r1, #1630]	; 0x65e
      _b = b;
    4b76:	strb.w	r2, [r1, #1637]	; 0x665
    4b7a:	strb.w	r4, [r1, #1649]	; 0x671
    4b7e:	strb.w	r4, [r1, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b82:	strb.w	r8, [r1, #1674]	; 0x68a
    4b86:	strb.w	r2, [r1, #1677]	; 0x68d
      _s = s;
      _b = b;
    4b8a:	strb.w	r5, [r1, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b8e:	movs	r5, #208	; 0xd0
      _s = s;
      _b = b;
    4b90:	strb.w	r7, [r1, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b94:	mvn.w	r7, #101	; 0x65
      _s = s;
    4b98:	strb.w	lr, [r1, #1657]	; 0x679
    4b9c:	strb.w	lr, [r1, #1663]	; 0x67f
    4ba0:	mov.w	lr, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ba4:	strb.w	r0, [r1, #1689]	; 0x699
      _s = s;
      _b = b;
    4ba8:	movs	r0, #223	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4baa:	strb.w	lr, [r1, #1666]	; 0x682
      _b = b;
    4bae:	mvn.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bb2:	strb.w	r7, [r1, #1680]	; 0x690
      _s = s;
    4bb6:	mvn.w	r7, #105	; 0x69
      _b = b;
    4bba:	strb.w	lr, [r1, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bbe:	mov.w	lr, #75	; 0x4b
      _b = b;
    4bc2:	strb.w	r0, [r1, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bc6:	movs	r0, #86	; 0x56
    4bc8:	strb.w	lr, [r1, #1684]	; 0x694
    4bcc:	mvn.w	lr, #3
    4bd0:	strb.w	r7, [r1, #1681]	; 0x691
      _b = b;
    4bd4:	movs	r7, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bd6:	strb.w	lr, [r1, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bda:	mvn.w	lr, #106	; 0x6a
      _s = s;
    4bde:	strb.w	r0, [r1, #1714]	; 0x6b2
      _b = b;
    4be2:	mvn.w	r0, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4be6:	strb.w	lr, [r1, #1698]	; 0x6a2
      _s = s;
      _b = b;
    4bea:	mvn.w	lr, #20
    4bee:	strb.w	r7, [r1, #1673]	; 0x689
    4bf2:	strb.w	lr, [r1, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bf6:	mvn.w	lr, #87	; 0x57
    4bfa:	strb.w	r7, [r1, #1708]	; 0x6ac
    4bfe:	movs	r7, #61	; 0x3d
    4c00:	strb.w	lr, [r1, #1702]	; 0x6a6
      _b = b;
    4c04:	mvn.w	lr, #20
    4c08:	strb.w	r0, [r1, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c0c:	mvn.w	r0, #121	; 0x79
      _b = b;
    4c10:	strb.w	lr, [r1, #1703]	; 0x6a7
    4c14:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c18:	strb.w	r5, [r1, #1656]	; 0x678
      _s = s;
      _b = b;
    4c1c:	strb.w	lr, [r1, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c20:	mvn.w	lr, #103	; 0x67
    4c24:	strb.w	r2, [r1, #1686]	; 0x696
    4c28:	strb.w	lr, [r1, #1710]	; 0x6ae
    4c2c:	mvn.w	lr, #22
    4c30:	strb.w	r8, [r1, #1692]	; 0x69c
    4c34:	strb.w	lr, [r1, #1713]	; 0x6b1
      _s = s;
    4c38:	mov.w	lr, #58	; 0x3a
    4c3c:	strb.w	r5, [r1, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c40:	strb.w	r8, [r1, #1695]	; 0x69f
      _s = s;
      _b = b;
    4c44:	strb.w	ip, [r1, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c48:	strb.w	r2, [r1, #1701]	; 0x6a5
      _s = s;
      _b = b;
    4c4c:	strb.w	ip, [r1, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c50:	mov.w	ip, #138	; 0x8a
      _s = s;
      _b = b;
    4c54:	strb.w	r6, [r1, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c58:	strb.w	r7, [r1, #1705]	; 0x6a9
    4c5c:	mvn.w	r7, #19
    4c60:	strb.w	lr, [r1, #1711]	; 0x6af
      _b = b;
    4c64:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c68:	strb.w	r0, [r1, #1687]	; 0x697
      _b = b;
    4c6c:	mvn.w	r0, #39	; 0x27
    4c70:	strb.w	r4, [r1, #1727]	; 0x6bf
    4c74:	strb.w	r0, [r1, #1691]	; 0x69b
    4c78:	mvn.w	r0, #24
    4c7c:	strb.w	r4, [r1, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c80:	movs	r4, #44	; 0x2c
      _b = b;
    4c82:	strb.w	r0, [r1, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c86:	mvn.w	r0, #59	; 0x3b
    4c8a:	strb.w	r4, [r1, #1720]	; 0x6b8
    4c8e:	movs	r4, #50	; 0x32
    4c90:	strb.w	r0, [r1, #1699]	; 0x6a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c94:	mvn.w	r0, #115	; 0x73
      _s = s;
    4c98:	strb.w	r4, [r1, #1732]	; 0x6c4
    4c9c:	mov.w	r4, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ca0:	strb.w	r0, [r1, #1683]	; 0x693
    4ca4:	strb.w	r0, [r1, #1707]	; 0x6ab
      _s = s;
    4ca8:	mvn.w	r0, #40	; 0x28
    4cac:	strb.w	r4, [r1, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cb0:	mov.w	r4, #59	; 0x3b
      _s = s;
    4cb4:	strb.w	r0, [r1, #1696]	; 0x6a0
      _b = b;
    4cb8:	mvn.w	r0, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cbc:	strb.w	r4, [r1, #1719]	; 0x6b7
      _s = s;
    4cc0:	mov.w	r4, #79	; 0x4f
      _b = b;
    4cc4:	strb.w	r0, [r1, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cc8:	mvn.w	r0, #12
      _s = s;
      _b = b;
    4ccc:	strb.w	r6, [r1, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cd0:	movs	r6, #125	; 0x7d
    4cd2:	strb.w	r0, [r1, #1716]	; 0x6b4
      _s = s;
    4cd6:	mov.w	r0, #95	; 0x5f
    4cda:	strb.w	r4, [r1, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cde:	mvn.w	r4, #121	; 0x79
      _s = s;
    4ce2:	strb.w	r0, [r1, #1726]	; 0x6be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce6:	mvn.w	r0, #66	; 0x42
    4cea:	strb.w	ip, [r1, #1704]	; 0x6a8
    4cee:	strb.w	r0, [r1, #1728]	; 0x6c0
      _s = s;
      _b = b;
    4cf2:	mvn.w	r0, #6
    4cf6:	strb.w	r9, [r1, #1721]	; 0x6b9
    4cfa:	strb.w	r0, [r1, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cfe:	mvn.w	r0, #45	; 0x2d
      _s = s;
      _b = b;
    4d02:	strb.w	r5, [r1, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d06:	strb.w	r0, [r1, #1734]	; 0x6c6
    4d0a:	mvn.w	r0, #50	; 0x32
      _s = s;
    4d0e:	strb.w	r9, [r1, #1735]	; 0x6c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d12:	strb.w	r0, [r1, #1737]	; 0x6c9
      _s = s;
      _b = b;
    4d16:	mvn.w	r0, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d1a:	strb.w	r7, [r1, #1747]	; 0x6d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d1e:	movs	r7, #133	; 0x85
      _s = s;
      _b = b;
    4d20:	strb.w	r0, [r1, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d24:	mvn.w	r0, #94	; 0x5e
    4d28:	strb.w	r6, [r1, #1722]	; 0x6ba
    4d2c:	movs	r6, #42	; 0x2a
    4d2e:	strb.w	r0, [r1, #1740]	; 0x6cc
      _s = s;
    4d32:	mvn.w	r0, #12
    4d36:	strb.w	r0, [r1, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d3a:	mvn.w	r0, #118	; 0x76
    4d3e:	strb.w	r0, [r1, #1746]	; 0x6d2
    4d42:	movs	r0, #191	; 0xbf
    4d44:	strb.w	r0, [r1, #1731]	; 0x6c3
      _s = s;
      _b = b;
    4d48:	mov	r0, r1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d4a:	strb.w	r4, [r1, #1725]	; 0x6bd
      _s = s;
    4d4e:	mov.w	r4, #116	; 0x74
      _b = b;
    4d52:	strb.w	r5, [r1, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d56:	mvn.w	r5, #84	; 0x54
    4d5a:	strb.w	r4, [r1, #1729]	; 0x6c1
      _b = b;
    4d5e:	mvn.w	r4, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d62:	strb.w	r5, [r1, #1762]	; 0x6e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d66:	mvn.w	r5, #101	; 0x65
      _s = s;
      _b = b;
    4d6a:	strb.w	r4, [r1, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d6e:	mov.w	r4, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d72:	strb.w	r5, [r1, #1770]	; 0x6ea
    4d76:	mvn.w	r5, #113	; 0x71
      _s = s;
    4d7a:	strb.w	r4, [r1, #1738]	; 0x6ca
    4d7e:	mov.w	r4, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d82:	strb.w	r5, [r1, #1773]	; 0x6ed
      _s = s;
      _b = b;
    4d86:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d8a:	strb.w	r4, [r1, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d8e:	mvn.w	r4, #121	; 0x79
      _s = s;
      _b = b;
    4d92:	strb.w	r5, [r1, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d96:	mvn.w	r5, #124	; 0x7c
    4d9a:	strb.w	r4, [r1, #1743]	; 0x6cf
      _s = s;
      _b = b;
    4d9e:	mov.w	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4da2:	strb.w	r5, [r1, #1779]	; 0x6f3
      _s = s;
    4da6:	mov.w	r5, #24
      _b = b;
    4daa:	strb.w	r4, [r1, #1718]	; 0x6b6
    4dae:	mvn.w	r4, #35	; 0x23
    4db2:	strb.w	sl, [r1, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4db6:	mov.w	sl, #1
      _s = s;
      _b = b;
    4dba:	strb.w	r4, [r1, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dbe:	mvn.w	r4, #108	; 0x6c
    4dc2:	strb.w	r9, [r1, #1755]	; 0x6db
    4dc6:	strb.w	r4, [r1, #1749]	; 0x6d5
      _s = s;
    4dca:	mov.w	r4, #91	; 0x5b
    4dce:	strb.w	ip, [r1, #1759]	; 0x6df
    4dd2:	strb.w	r4, [r1, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dd6:	mvn.w	r4, #102	; 0x66
    4dda:	strb.w	fp, [r1, #1776]	; 0x6f0
      _s = s;
    4dde:	mov.w	fp, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4de2:	strb.w	r4, [r1, #1767]	; 0x6e7
      _s = s;
    4de6:	mvn.w	r4, #85	; 0x55
    4dea:	strb.w	r9, [r1, #1777]	; 0x6f1
    4dee:	mov.w	r9, #90	; 0x5a
    4df2:	strb.w	r4, [r1, #1768]	; 0x6e8
    4df6:	mvn.w	r4, #57	; 0x39
    4dfa:	strb.w	r4, [r1, #1774]	; 0x6ee
      _b = b;
    4dfe:	mvn.w	r4, #23
    4e02:	strb.w	r4, [r1, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e06:	mvn.w	r4, #43	; 0x2b
    4e0a:	strb.w	r4, [r1, #1750]	; 0x6d6
    4e0e:	mvn.w	r4, #25
    4e12:	strb.w	r4, [r1, #1753]	; 0x6d9
      _b = b;
    4e16:	mvn.w	r4, #100	; 0x64
    4e1a:	strb.w	r4, [r1, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e1e:	mov.w	r4, #99	; 0x63
    4e22:	strb.w	r4, [r1, #1756]	; 0x6dc
      _b = b;
    4e26:	mvn.w	r4, #43	; 0x2b
    4e2a:	strb.w	r4, [r1, #1757]	; 0x6dd
    4e2e:	mvn.w	r4, #39	; 0x27
    4e32:	strb.w	r4, [r1, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e36:	mov.w	r4, #33	; 0x21
    4e3a:	strb.w	r4, [r1, #1761]	; 0x6e1
    4e3e:	movs	r4, #33	; 0x21
    4e40:	str	r4, [sp, #24]
    4e42:	mov.w	r4, #34	; 0x22
      _s = s;
    4e46:	strb.w	r5, [r1, #1780]	; 0x6f4
      _b = b;
    4e4a:	mov.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e4e:	strb.w	r7, [r1, #1752]	; 0x6d8
    4e52:	mvn.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    4e56:	strb.w	r5, [r1, #1751]	; 0x6d7
    4e5a:	mvn.w	r5, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e5e:	strb.w	r7, [r1, #1803]	; 0x70b
      _s = s;
    4e62:	mvn.w	r7, #69	; 0x45
      _b = b;
    4e66:	strb.w	r5, [r1, #1763]	; 0x6e3
    4e6a:	mvn.w	r5, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e6e:	strb.w	r2, [r1, #1800]	; 0x708
      _s = s;
    4e72:	mov.w	r2, #95	; 0x5f
      _b = b;
    4e76:	strb.w	r5, [r1, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e7a:	mvn.w	r5, #114	; 0x72
      _s = s;
    4e7e:	strb.w	r7, [r1, #1804]	; 0x70c
      _b = b;
    4e82:	mvn.w	r7, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e86:	strb.w	r5, [r1, #1782]	; 0x6f6
      _s = s;
      _b = b;
    4e8a:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e8e:	strb.w	r2, [r1, #1801]	; 0x709
      _b = b;
    4e92:	mov.w	r2, #88	; 0x58
    4e96:	strb.w	r5, [r1, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e9a:	mvn.w	r5, #43	; 0x2b
      _s = s;
      _b = b;
    4e9e:	strb.w	r7, [r1, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ea2:	mvn.w	r7, #111	; 0x6f
    4ea6:	strb.w	r5, [r1, #1785]	; 0x6f9
      _s = s;
    4eaa:	mov.w	r5, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eae:	strb.w	r6, [r1, #1758]	; 0x6de
      _s = s;
    4eb2:	movs	r6, #43	; 0x2b
    4eb4:	strb.w	r5, [r1, #1786]	; 0x6fa
      _b = b;
    4eb8:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ebc:	strb.w	r4, [r1, #1764]	; 0x6e4
      _s = s;
    4ec0:	mvn.w	r4, #2
      _b = b;
    4ec4:	strb.w	r5, [r1, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ec8:	mvn.w	r5, #21
      _s = s;
      _b = b;
    4ecc:	strb.w	r2, [r1, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ed0:	movs	r2, #37	; 0x25
    4ed2:	strb.w	r5, [r1, #1788]	; 0x6fc
      _s = s;
    4ed6:	mvn.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eda:	strb.w	r7, [r1, #1806]	; 0x70e
      _s = s;
    4ede:	movs	r7, #230	; 0xe6
    4ee0:	strb.w	r5, [r1, #1789]	; 0x6fd
      _b = b;
    4ee4:	mvn.w	r5, #38	; 0x26
    4ee8:	strb.w	lr, [r1, #1769]	; 0x6e9
    4eec:	strb.w	r5, [r1, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ef0:	mvn.w	r5, #56	; 0x38
      _b = b;
    4ef4:	strb.w	lr, [r1, #1772]	; 0x6ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ef8:	strb.w	r5, [r1, #1792]	; 0x700
      _b = b;
    4efc:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f00:	strb.w	r4, [r1, #1771]	; 0x6eb
    4f04:	movs	r4, #252	; 0xfc
      _b = b;
    4f06:	strb.w	r5, [r1, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f0a:	mvn.w	r5, #8
      _s = s;
    4f0e:	str	r6, [sp, #20]
      _b = b;
    4f10:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f12:	strb.w	r5, [r1, #1794]	; 0x702
      _s = s;
    4f16:	mov.w	r5, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f1a:	str	r2, [sp, #28]
    4f1c:	movs	r2, #200	; 0xc8
      _s = s;
    4f1e:	strb.w	r5, [r1, #1795]	; 0x703
      _b = b;
    4f22:	mov.w	r5, #46	; 0x2e
    4f26:	strb.w	r5, [r1, #1796]	; 0x704
    4f2a:	mov.w	r5, #62	; 0x3e
    4f2e:	strb.w	r5, [r1, #1799]	; 0x707
    4f32:	mvn.w	r5, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f36:	str	r7, [sp, #0]
    4f38:	mov.w	r7, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f3c:	strb.w	sl, [r1, #1797]	; 0x705
      _s = s;
      _b = b;
    4f40:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f44:	strb.w	ip, [r1, #1821]	; 0x71d
      _s = s;
    4f48:	mvn.w	ip, #7
      _b = b;
    4f4c:	str.w	sl, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f50:	mov.w	sl, #137	; 0x89
      _s = s;
    4f54:	strb.w	ip, [r1, #1822]	; 0x71e
      _b = b;
    4f58:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f5c:	str.w	sl, [sp, #4]
    4f60:	mvn.w	sl, #10
      _s = s;
      _b = b;
    4f64:	strb.w	ip, [r1, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f68:	mvn.w	ip, #109	; 0x6d
    4f6c:	strb.w	sl, [r1, #1791]	; 0x6ff
      _s = s;
    4f70:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f74:	strb.w	ip, [r1, #1824]	; 0x720
      _s = s;
      _b = b;
    4f78:	mvn.w	ip, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f7c:	strb.w	sl, [r1, #1810]	; 0x712
      _b = b;
    4f80:	mvn.w	sl, #7
    4f84:	strb.w	ip, [r1, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f88:	mvn.w	ip, #121	; 0x79
      _s = s;
      _b = b;
    4f8c:	strb.w	sl, [r1, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f90:	mov.w	sl, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f94:	strb.w	ip, [r1, #1827]	; 0x723
      _s = s;
    4f98:	mvn.w	ip, #6
    4f9c:	strb.w	r7, [r1, #1807]	; 0x70f
      _b = b;
    4fa0:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fa4:	strb.w	sl, [r1, #1816]	; 0x718
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fa8:	mvn.w	sl, #58	; 0x3a
      _s = s;
    4fac:	strb.w	ip, [r1, #1828]	; 0x724
      _b = b;
    4fb0:	mvn.w	ip, #120	; 0x78
    4fb4:	strb.w	r5, [r1, #1808]	; 0x710
    4fb8:	movs	r5, #229	; 0xe5
    4fba:	strb.w	r7, [r1, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fbe:	strb.w	sl, [r1, #1815]	; 0x717
      _s = s;
      _b = b;
    4fc2:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fc6:	ldrb.w	r7, [sp, #20]
      _b = b;
    4fca:	strb.w	ip, [r1, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fce:	mov.w	ip, #124	; 0x7c
      _b = b;
    4fd2:	str	r5, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fd4:	mvn.w	r5, #103	; 0x67
      _s = s;
    4fd8:	strb.w	r7, [r1, #1813]	; 0x715
    4fdc:	mvn.w	r7, #71	; 0x47
    4fe0:	strb.w	fp, [r1, #1783]	; 0x6f7
      _b = b;
    4fe4:	mov.w	fp, #120	; 0x78
    4fe8:	strb.w	sl, [r1, #1817]	; 0x719
    4fec:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ff0:	strb.w	ip, [r1, #1831]	; 0x727
      _b = b;
    4ff4:	mvn.w	ip, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ff8:	strb.w	r5, [r1, #1809]	; 0x711
    4ffc:	movs	r5, #234	; 0xea
    4ffe:	strb.w	r2, [r1, #1812]	; 0x714
      _s = s;
      _b = b;
    5002:	str.w	fp, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5006:	mov.w	fp, #77	; 0x4d
    500a:	strb.w	r9, [r1, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    500e:	mov.w	r9, #67	; 0x43
    5012:	strb.w	r8, [r1, #1818]	; 0x71a
      _s = s;
      _b = b;
    5016:	strb.w	sl, [r1, #1820]	; 0x71c
    501a:	mov.w	sl, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    501e:	strb.w	r4, [r1, #1825]	; 0x721
      _b = b;
    5022:	strb.w	ip, [r1, #1832]	; 0x728
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5026:	strb.w	r7, [r1, #1843]	; 0x733
      _b = b;
    502a:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    502e:	strb.w	lr, [r1, #1848]	; 0x738
      _s = s;
    5032:	mov.w	lr, #62	; 0x3e
      _b = b;
    5036:	strb.w	r7, [r1, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    503a:	mov.w	r7, #107	; 0x6b
    503e:	strb.w	lr, [r1, #1849]	; 0x739
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5042:	mvn.w	lr, #16
      _s = s;
    5046:	strb.w	r7, [r1, #1819]	; 0x71b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    504a:	mov.w	r7, #60	; 0x3c
    504e:	strb.w	lr, [r1, #1851]	; 0x73b
      _s = s;
    5052:	mov.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5056:	strb.w	r7, [r1, #1830]	; 0x726
      _s = s;
      _b = b;
    505a:	mvn.w	r7, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    505e:	strb.w	lr, [r1, #1852]	; 0x73c
      _b = b;
    5062:	mvn.w	lr, #43	; 0x2b
    5066:	strb.w	r7, [r1, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    506a:	mov.w	r7, #31
      _s = s;
      _b = b;
    506e:	strb.w	lr, [r1, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5072:	mvn.w	lr, #13
    5076:	ldrb.w	ip, [sp, #28]
    507a:	strb.w	r7, [r1, #1836]	; 0x72c
    507e:	mov.w	r7, #13
    5082:	strb.w	lr, [r1, #1854]	; 0x73e
      _s = s;
    5086:	mov.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    508a:	strb.w	ip, [r1, #1833]	; 0x729
    508e:	strb.w	r7, [r1, #1845]	; 0x735
      _s = s;
    5092:	mov.w	r7, #76	; 0x4c
    5096:	ldrb.w	ip, [sp]
    509a:	strb.w	lr, [r1, #1855]	; 0x73f
      _b = b;
    509e:	mvn.w	lr, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50a2:	strb.w	ip, [r1, #1837]	; 0x72d
      _b = b;
    50a6:	mvn.w	ip, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50aa:	strb.w	r7, [r1, #1846]	; 0x736
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ae:	mov.w	r7, #22
      _s = s;
      _b = b;
    50b2:	strb.w	lr, [r1, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50b6:	mvn.w	lr, #18
      _s = s;
      _b = b;
    50ba:	strb.w	ip, [r1, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50be:	mov.w	ip, #26
    50c2:	strb.w	r7, [r1, #1842]	; 0x732
      _s = s;
      _b = b;
    50c6:	mvn.w	r7, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ca:	strb.w	lr, [r1, #1857]	; 0x741
      _s = s;
    50ce:	mvn.w	lr, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50d2:	strb.w	ip, [r1, #1839]	; 0x72f
      _s = s;
    50d6:	mvn.w	ip, #51	; 0x33
      _b = b;
    50da:	strb.w	r7, [r1, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50de:	mvn.w	r7, #15
      _s = s;
    50e2:	strb.w	lr, [r1, #1858]	; 0x742
      _b = b;
    50e6:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50ea:	strb.w	ip, [r1, #1840]	; 0x730
      _b = b;
    50ee:	mvn.w	ip, #40	; 0x28
    50f2:	strb.w	lr, [r1, #1859]	; 0x743
    50f6:	mvn.w	lr, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50fa:	strb.w	r7, [r1, #1860]	; 0x744
      _s = s;
    50fe:	mov.w	r7, #114	; 0x72
    5102:	strb.w	r4, [r1, #1834]	; 0x72a
      _b = b;
    5106:	strb.w	ip, [r1, #1841]	; 0x731
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    510a:	mov.w	ip, #66	; 0x42
      _b = b;
    510e:	strb.w	r6, [r1, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5112:	strb.w	r7, [r1, #1861]	; 0x745
      _b = b;
    5116:	mvn.w	r7, #35	; 0x23
    511a:	strb.w	lr, [r1, #1865]	; 0x749
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    511e:	mvn.w	lr, #31
      _s = s;
      _b = b;
    5122:	strb.w	r7, [r1, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5126:	movs	r7, #229	; 0xe5
    5128:	strb.w	lr, [r1, #1866]	; 0x74a
      _s = s;
    512c:	mvn.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5130:	strb.w	r7, [r0, #1863]	; 0x747
      _s = s;
    5134:	strb.w	lr, [r1, #1867]	; 0x74b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5138:	mvn.w	lr, #24
      _s = s;
    513c:	strb.w	r4, [r1, #1864]	; 0x748
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5140:	strb.w	lr, [r1, #1869]	; 0x74d
      _s = s;
    5144:	mvn.w	lr, #2
      _b = b;
    5148:	strb.w	r6, [r1, #1868]	; 0x74c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    514c:	strb.w	lr, [r1, #1870]	; 0x74e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5150:	mov.w	lr, #22
      _s = s;
      _b = b;
    5154:	strb.w	r5, [r0, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5158:	strb.w	lr, [r1, #1872]	; 0x750
      _s = s;
    515c:	ldrb.w	lr, [sp, #20]
      _b = b;
    5160:	strb.w	r7, [r0, #1883]	; 0x75b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5164:	strb.w	lr, [r1, #1873]	; 0x751
      _b = b;
    5168:	mvn.w	lr, #66	; 0x42
    516c:	strb.w	r2, [r1, #1886]	; 0x75e
    5170:	strb.w	lr, [r1, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5174:	mov.w	lr, #40	; 0x28
      _s = s;
    5178:	strb.w	r8, [r1, #1888]	; 0x760
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    517c:	mov.w	r8, #53	; 0x35
    5180:	strb.w	lr, [r1, #1878]	; 0x756
      _s = s;
    5184:	mov.w	lr, #41	; 0x29
      _b = b;
    5188:	strb.w	r2, [r1, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    518c:	strb.w	lr, [r1, #1879]	; 0x757
      _b = b;
    5190:	mov.w	lr, #112	; 0x70
    5194:	strb.w	lr, [r1, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5198:	mov.w	lr, #51	; 0x33
    519c:	strb.w	lr, [r1, #1876]	; 0x754
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51a0:	mov.w	lr, #32
    51a4:	strb.w	lr, [r1, #1875]	; 0x753
      _s = s;
      _b = b;
    51a8:	mvn.w	lr, #44	; 0x2c
    51ac:	strb.w	lr, [r1, #1880]	; 0x758
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51b0:	mov.w	lr, #113	; 0x71
    51b4:	strb.w	lr, [r1, #1881]	; 0x759
      _s = s;
    51b8:	mov.w	lr, #105	; 0x69
    51bc:	strb.w	lr, [r1, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51c0:	strb.w	lr, [r1, #1890]	; 0x762
      _s = s;
      _b = b;
    51c4:	mvn.w	lr, #31
    51c8:	strb.w	lr, [r1, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51cc:	mvn.w	lr, #106	; 0x6a
    51d0:	strb.w	lr, [r1, #1893]	; 0x765
      _s = s;
    51d4:	mov.w	lr, #124	; 0x7c
    51d8:	strb.w	lr, [r1, #1894]	; 0x766
      _b = b;
    51dc:	mvn.w	lr, #23
    51e0:	strb.w	lr, [r1, #1895]	; 0x767
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51e4:	mvn.w	lr, #115	; 0x73
    51e8:	strb.w	lr, [r1, #1896]	; 0x768
      _s = s;
    51ec:	mvn.w	lr, #4
    51f0:	strb.w	lr, [r1, #1897]	; 0x769
      _b = b;
    51f4:	mvn.w	lr, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51f8:	strb.w	r9, [r1, #1905]	; 0x771
      _s = s;
      _b = b;
    51fc:	mov.w	r9, #196	; 0xc4
    5200:	strb.w	lr, [r1, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5204:	mvn.w	lr, #108	; 0x6c
      _s = s;
    5208:	strb.w	r4, [r1, #1912]	; 0x778
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    520c:	strb.w	lr, [r1, #1899]	; 0x76b
      _s = s;
    5210:	mvn.w	lr, #5
    5214:	strb.w	fp, [r1, #1891]	; 0x763
    5218:	mov.w	fp, #238	; 0xee
    521c:	strb.w	lr, [r1, #1900]	; 0x76c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5220:	mvn.w	lr, #112	; 0x70
      _s = s;
      _b = b;
    5224:	strb.w	sl, [r1, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5228:	mov.w	sl, #12
    522c:	strb.w	lr, [r1, #1902]	; 0x76e
      _s = s;
    5230:	mvn.w	lr, #73	; 0x49
    5234:	strb.w	ip, [r1, #1906]	; 0x772
      _b = b;
    5238:	mov.w	ip, #247	; 0xf7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    523c:	strb.w	lr, [r1, #1903]	; 0x76f
      _b = b;
    5240:	mvn.w	lr, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5244:	strb.w	r2, [r1, #1921]	; 0x781
      _b = b;
    5248:	strb.w	lr, [r1, #1904]	; 0x770
    524c:	mvn.w	lr, #57	; 0x39
    5250:	strb.w	r6, [r1, #1922]	; 0x782
    5254:	strb.w	lr, [r1, #1907]	; 0x773
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5258:	mvn.w	lr, #19
      _b = b;
    525c:	strb.w	r6, [r1, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5260:	strb.w	lr, [r1, #1909]	; 0x775
      _b = b;
    5264:	mvn.w	lr, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5268:	strb.w	r4, [r1, #1933]	; 0x78d
      _b = b;
    526c:	strb.w	lr, [r1, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5270:	mov.w	lr, #26
      _s = s;
    5274:	strb.w	r5, [r0, #1936]	; 0x790
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5278:	strb.w	lr, [r1, #1911]	; 0x777
      _s = s;
    527c:	mov.w	lr, #106	; 0x6a
      _b = b;
    5280:	strb.w	r9, [r0, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5284:	strb.w	lr, [r1, #1882]	; 0x75a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5288:	mov.w	lr, #65	; 0x41
    528c:	strb.w	lr, [r1, #1884]	; 0x75c
    5290:	mov.w	lr, #101	; 0x65
    5294:	strb.w	lr, [r1, #1887]	; 0x75f
    5298:	mov.w	lr, #35	; 0x23
    529c:	strb.w	lr, [r1, #1908]	; 0x774
      _s = s;
      _b = b;
    52a0:	mvn.w	lr, #45	; 0x2d
    52a4:	strb.w	lr, [r1, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52a8:	mov.w	lr, #26
    52ac:	strb.w	lr, [r1, #1923]	; 0x783
      _s = s;
      _b = b;
    52b0:	mvn.w	lr, #19
    52b4:	strb.w	lr, [r1, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52b8:	mvn.w	lr, #20
    52bc:	strb.w	lr, [r1, #1929]	; 0x789
      _s = s;
    52c0:	mvn.w	lr, #16
    52c4:	strb.w	lr, [r1, #1930]	; 0x78a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52c8:	mvn.w	lr, #20
    52cc:	strb.w	lr, [r1, #1935]	; 0x78f
    52d0:	mvn.w	lr, #24
    52d4:	strb.w	lr, [r1, #1938]	; 0x792
      _s = s;
    52d8:	mvn.w	lr, #20
    52dc:	strb.w	lr, [r1, #1939]	; 0x793
    52e0:	mvn.w	lr, #2
      _b = b;
    52e4:	str	r5, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52e6:	strb.w	lr, [r1, #1942]	; 0x796
      _b = b;
    52ea:	mvn.w	lr, #66	; 0x42
    52ee:	strb.w	r5, [r0, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52f2:	movs	r5, #37	; 0x25
      _s = s;
      _b = b;
    52f4:	strb.w	lr, [r1, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52f8:	mvn.w	lr, #2
      _b = b;
    52fc:	strb.w	r9, [r0, #1940]	; 0x794
    5300:	mov.w	r9, #199	; 0xc7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5304:	strb.w	lr, [r1, #1945]	; 0x799
    5308:	mvn.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    530c:	strb.w	r7, [r0, #1941]	; 0x795
      _s = s;
    5310:	movs	r7, #4
    5312:	strb.w	lr, [r1, #1915]	; 0x77b
      _b = b;
    5316:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    531a:	strb.w	r5, [r0, #1956]	; 0x7a4
      _s = s;
      _b = b;
    531e:	strb.w	lr, [r1, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5322:	mov.w	lr, #26
      _s = s;
      _b = b;
    5326:	strb.w	r4, [r0, #1958]	; 0x7a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    532a:	strb.w	lr, [r1, #1917]	; 0x77d
      _s = s;
    532e:	mvn.w	lr, #83	; 0x53
    5332:	strb.w	r4, [r0, #1966]	; 0x7ae
    5336:	strb.w	lr, [r1, #1918]	; 0x77e
      _b = b;
    533a:	mvn.w	lr, #24
    533e:	strb.w	lr, [r1, #1919]	; 0x77f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5342:	mov.w	lr, #26
    5346:	strb.w	lr, [r1, #1920]	; 0x780
    534a:	mov.w	lr, #30
    534e:	strb.w	lr, [r1, #1914]	; 0x77a
      _s = s;
    5352:	mvn.w	r1, #122	; 0x7a
      _b = b;
    5356:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    535a:	strb.w	r1, [r0, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    535e:	mov.w	r1, #10
      _s = s;
      _b = b;
    5362:	strb.w	lr, [r0, #1964]	; 0x7ac
    5366:	mvn.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    536a:	strb.w	r1, [r0, #1926]	; 0x786
      _s = s;
    536e:	mov.w	r1, #98	; 0x62
    5372:	strb.w	r1, [r0, #1927]	; 0x787
      _b = b;
    5376:	mvn.w	r1, #46	; 0x2e
    537a:	strb.w	r1, [r0, #1931]	; 0x78b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    537e:	mvn.w	r1, #14
    5382:	strb.w	r1, [r0, #1932]	; 0x78c
      _s = s;
      _b = b;
    5386:	mvn.w	r1, #82	; 0x52
    538a:	strb.w	r1, [r0, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    538e:	mvn.w	r1, #28
    5392:	strb.w	r1, [r0, #1944]	; 0x798
      _s = s;
      _b = b;
    5396:	mvn.w	r1, #61	; 0x3d
    539a:	strb.w	r1, [r0, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    539e:	mov.w	r1, #91	; 0x5b
    53a2:	strb.w	r1, [r0, #1960]	; 0x7a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53a6:	mvn.w	r1, #30
    53aa:	strb.w	r1, [r0, #1947]	; 0x79b
      _s = s;
    53ae:	mvn.w	r1, #2
    53b2:	strb.w	r1, [r0, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53b6:	ldrb.w	r1, [sp, #24]
    53ba:	strb.w	r1, [r0, #1950]	; 0x79e
    53be:	movs	r1, #43	; 0x2b
    53c0:	strb.w	r1, [r0, #1962]	; 0x7aa
      _s = s;
      _b = b;
    53c4:	strb.w	lr, [r0, #1967]	; 0x7af
    53c8:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53cc:	strb.w	r8, [r0, #1965]	; 0x7ad
      _s = s;
      _b = b;
    53d0:	mvn.w	r8, #9
    53d4:	strb.w	lr, [r0, #1970]	; 0x7b2
    53d8:	mvn.w	lr, #18
    53dc:	strb.w	r8, [r0, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53e0:	mov.w	r8, #48	; 0x30
      _s = s;
      _b = b;
    53e4:	strb.w	lr, [r0, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53e8:	mvn.w	lr, #102	; 0x66
    53ec:	strb.w	r8, [r0, #1968]	; 0x7b0
    53f0:	mov.w	r8, #52	; 0x34
    53f4:	strb.w	lr, [r0, #1977]	; 0x7b9
      _s = s;
      _b = b;
    53f8:	mvn.w	lr, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53fc:	strb.w	r8, [r0, #1971]	; 0x7b3
    5400:	mvn.w	r8, #104	; 0x68
      _s = s;
      _b = b;
    5404:	strb.w	lr, [r0, #1955]	; 0x7a3
    5408:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    540c:	strb.w	r8, [r0, #1974]	; 0x7b6
      _s = s;
    5410:	mvn.w	r8, #105	; 0x69
      _b = b;
    5414:	strb.w	lr, [r0, #1952]	; 0x7a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5418:	mov.w	lr, #105	; 0x69
    541c:	strb.w	r8, [r0, #1975]	; 0x7b7
      _b = b;
    5420:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5424:	strb.w	lr, [r0, #1972]	; 0x7b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5428:	mov.w	lr, #49	; 0x31
      _s = s;
    542c:	strb.w	r1, [r0, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5430:	strb.w	lr, [r0, #1959]	; 0x7a7
      _s = s;
    5434:	mvn.w	lr, #60	; 0x3c
      _b = b;
    5438:	ldrb.w	r1, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    543c:	strb.w	lr, [r0, #1963]	; 0x7ab
    5440:	mov.w	lr, #59	; 0x3b
      _b = b;
    5444:	strb.w	r8, [r0, #1976]	; 0x7b8
    5448:	mvn.w	r8, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    544c:	strb.w	lr, [r0, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5450:	mov.w	lr, #38	; 0x26
      _s = s;
      _b = b;
    5454:	strb.w	r1, [r0, #1985]	; 0x7c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5458:	mov.w	r1, #32
    545c:	strb.w	lr, [r0, #1953]	; 0x7a1
      _s = s;
    5460:	mov.w	lr, #63	; 0x3f
      _b = b;
    5464:	strb.w	r8, [r0, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5468:	mov.w	r8, #69	; 0x45
    546c:	strb.w	r1, [r0, #1986]	; 0x7c2
      _s = s;
    5470:	ldrb.w	r1, [sp, #8]
    5474:	strb.w	lr, [r0, #1954]	; 0x7a2
    5478:	mov.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    547c:	strb.w	r8, [r0, #1980]	; 0x7bc
    5480:	mov.w	r8, #33	; 0x21
      _s = s;
    5484:	strb.w	r1, [r0, #1987]	; 0x7c3
    5488:	mvn.w	r1, #2
    548c:	strb.w	r2, [r0, #1969]	; 0x7b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5490:	movs	r2, #0
      _s = s;
    5492:	strb.w	r4, [r0, #1978]	; 0x7ba
    5496:	strb.w	lr, [r0, #1957]	; 0x7a5
    549a:	mov.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    549e:	strb.w	r8, [r0, #1983]	; 0x7bf
      _s = s;
      _b = b;
    54a2:	strb.w	r6, [r0, #1988]	; 0x7c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54a6:	strb.w	r8, [r0, #1989]	; 0x7c5
    54aa:	mov.w	r8, #109	; 0x6d
      _s = s;
    54ae:	strb.w	r4, [r0, #1990]	; 0x7c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54b2:	mov	r4, r5
      _s = s;
    54b4:	strb.w	r1, [r0, #1993]	; 0x7c9
      _b = b;
    54b8:	ldrb.w	r1, [sp]
    54bc:	strb.w	r6, [r0, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54c0:	movs	r6, #185	; 0xb9
      _b = b;
    54c2:	strb.w	r1, [r0, #1994]	; 0x7ca
    54c6:	ldrb.w	r1, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54ca:	strb.w	r5, [r0, #1992]	; 0x7c8
      _s = s;
      _b = b;
    54ce:	movs	r5, #100	; 0x64
    54d0:	strb.w	r1, [r0, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54d4:	mov.w	r1, #35	; 0x23
    54d8:	strb.w	r4, [r0, #1995]	; 0x7cb
      _s = s;
    54dc:	movs	r4, #244	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54de:	strb.w	r1, [r0, #1998]	; 0x7ce
    54e2:	mov.w	r1, #32
    54e6:	strb.w	sl, [r0, #2004]	; 0x7d4
    54ea:	mov.w	sl, #130	; 0x82
    54ee:	strb.w	r1, [r0, #2001]	; 0x7d1
      _s = s;
    54f2:	mvn.w	r1, #37	; 0x25
    54f6:	strb.w	fp, [r0, #2014]	; 0x7de
    54fa:	mov.w	fp, #11
    54fe:	strb.w	r1, [r0, #2002]	; 0x7d2
    5502:	mvn.w	r1, #6
      _b = b;
    5506:	strb.w	r9, [r0, #2015]	; 0x7df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    550a:	mov.w	r9, #132	; 0x84
      _s = s;
    550e:	strb.w	r1, [r0, #1996]	; 0x7cc
    5512:	mvn.w	r1, #68	; 0x44
    5516:	strb.w	r1, [r0, #1984]	; 0x7c0
      _b = b;
    551a:	mvn.w	r1, #52	; 0x34
    551e:	strb.w	r1, [r0, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5522:	mvn.w	r1, #29
    5526:	strb.w	r1, [r0, #1999]	; 0x7cf
      _b = b;
    552a:	strb.w	r1, [r0, #2003]	; 0x7d3
    552e:	mvn.w	r1, #22
    5532:	strb.w	r1, [r0, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5536:	mov.w	r1, #116	; 0x74
    553a:	strb.w	r1, [r0, #2005]	; 0x7d5
      _b = b;
    553e:	mvn.w	r1, #21
    5542:	strb.w	r1, [r0, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5546:	mvn.w	r1, #12
    554a:	strb.w	r1, [r0, #2007]	; 0x7d7
      _s = s;
      _b = b;
    554e:	strb.w	r1, [r0, #2009]	; 0x7d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5552:	mov.w	r1, #57	; 0x39
    5556:	strb.w	r1, [r0, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    555a:	mvn.w	r1, #15
    555e:	strb.w	r1, [r0, #2010]	; 0x7da
      _s = s;
    5562:	mvn.w	r1, #74	; 0x4a
    5566:	strb.w	r1, [r0, #2011]	; 0x7db
      _b = b;
    556a:	mvn.w	r1, #29
    556e:	strb.w	r1, [r0, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5572:	mvn.w	r1, #14
    5576:	strb.w	r1, [r0, #2013]	; 0x7dd
    557a:	mvn.w	r1, #25
    557e:	strb.w	r1, [r0, #2022]	; 0x7e6
    5582:	mvn.w	r1, #20
    5586:	strb.w	r1, [r0, #2016]	; 0x7e0
      _s = s;
    558a:	mvn.w	r1, #4
    558e:	strb.w	r1, [r0, #2017]	; 0x7e1
      _b = b;
    5592:	mvn.w	r1, #57	; 0x39
    5596:	strb.w	r1, [r0, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    559a:	mvn.w	r1, #24
      _s = s;
      _b = b;
    559e:	strb.w	ip, [r3, #14]
    55a2:	mov.w	ip, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55a6:	strb.w	r1, [r0, #2019]	; 0x7e3
      _s = s;
    55aa:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55ae:	strb	r2, [r3, #0]
      _s = s;
    55b0:	strb.w	r1, [r0, #2020]	; 0x7e4
    55b4:	strb.w	r1, [r0, #2023]	; 0x7e7
      _b = b;
    55b8:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55bc:	strb	r2, [r3, #1]
      _b = b;
    55be:	strb.w	r1, [r0, #2021]	; 0x7e5
    55c2:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55c6:	strb	r2, [r3, #9]
      _s = s;
      _b = b;
    55c8:	strb.w	r1, [r0, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55cc:	mvn.w	r1, #26
      _s = s;
    55d0:	strb	r2, [r3, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55d2:	strb.w	r1, [r0, #2025]	; 0x7e9
      _s = s;
    55d6:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55da:	strb	r2, [r3, #12]
      _s = s;
    55dc:	strb.w	r1, [r0, #2026]	; 0x7ea
      _b = b;
    55e0:	mvn.w	r1, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55e4:	strb	r2, [r3, #13]
      _b = b;
    55e6:	strb.w	r1, [r0, #2027]	; 0x7eb
    55ea:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55ee:	strb	r2, [r3, #15]
      _s = s;
    55f0:	movs	r0, #8
      _b = b;
    55f2:	strb	r1, [r3, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55f4:	mov.w	r1, #106	; 0x6a
      _s = s;
    55f8:	strb	r2, [r3, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55fa:	strb	r1, [r3, #3]
      _s = s;
      _b = b;
    55fc:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5600:	strb.w	lr, [r3, #4]
      _b = b;
    5604:	strb	r1, [r3, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5606:	mov.w	r1, #85	; 0x55
      _s = s;
    560a:	strb.w	lr, [r3, #19]
      _b = b;
    560e:	mov.w	lr, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5612:	strb	r1, [r3, #6]
      _s = s;
    5614:	mov.w	r1, #5
    5618:	strb	r1, [r3, #7]
      _b = b;
    561a:	mvn.w	r1, #102	; 0x66
    561e:	strb	r1, [r3, #8]
    5620:	mvn.w	r1, #16
    5624:	strb	r1, [r3, #11]
    5626:	mvn.w	r1, #10
    562a:	strb	r1, [r3, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    562c:	mov.w	r1, #63	; 0x3f
    5630:	strb.w	r1, [r3, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5634:	mov.w	r1, #106	; 0x6a
    5638:	strb	r1, [r3, #18]
      _s = s;
    563a:	mov.w	r1, #10
    563e:	strb	r1, [r3, #22]
    5640:	mov.w	r1, #48	; 0x30
    5644:	strb	r1, [r3, #31]
      _b = b;
    5646:	mvn.w	r1, #122	; 0x7a
    564a:	strb.w	r1, [r3, #41]	; 0x29
    564e:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5652:	strb.w	r8, [r3, #21]
      _s = s;
    5656:	mov.w	r8, #14
      _b = b;
    565a:	strb	r1, [r3, #20]
    565c:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5660:	strb.w	r6, [r3, #34]	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5664:	movs	r6, #60	; 0x3c
      _s = s;
      _b = b;
    5666:	strb	r1, [r3, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5668:	mov.w	r1, #114	; 0x72
      _s = s;
      _b = b;
    566c:	strb.w	r5, [r3, #38]	; 0x26
    5670:	movs	r5, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5672:	strb	r1, [r3, #24]
      _s = s;
    5674:	mov.w	r1, #20
    5678:	strb.w	r4, [r3, #46]	; 0x2e
      _b = b;
    567c:	movs	r4, #167	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    567e:	strb	r1, [r3, #25]
      _b = b;
    5680:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5684:	strb.w	sl, [r3, #39]	; 0x27
      _s = s;
      _b = b;
    5688:	strb	r1, [r3, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    568a:	mov.w	r1, #115	; 0x73
    568e:	strb.w	sl, [r3, #45]	; 0x2d
    5692:	strb	r1, [r3, #27]
      _s = s;
    5694:	mov.w	r1, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5698:	strb.w	sl, [r3, #48]	; 0x30
      _s = s;
    569c:	strb	r1, [r3, #28]
      _b = b;
    569e:	mvn.w	r1, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56a2:	strb.w	r2, [r3, #57]	; 0x39
      _s = s;
      _b = b;
    56a6:	strb	r1, [r3, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56a8:	mvn.w	r1, #116	; 0x74
      _s = s;
    56ac:	strb.w	r2, [r3, #58]	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56b0:	strb	r1, [r3, #30]
      _s = s;
      _b = b;
    56b2:	mov.w	r1, #73	; 0x49
    56b6:	strb.w	r1, [r3, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56ba:	mvn.w	r1, #117	; 0x75
    56be:	strb.w	r1, [r3, #33]	; 0x21
      _s = s;
      _b = b;
    56c2:	mov.w	r1, #77	; 0x4d
    56c6:	strb.w	r1, [r3, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56ca:	mvn.w	r1, #121	; 0x79
    56ce:	strb.w	r1, [r3, #36]	; 0x24
      _s = s;
    56d2:	mvn.w	r1, #34	; 0x22
    56d6:	strb.w	r1, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56da:	mvn.w	r1, #124	; 0x7c
    56de:	strb.w	r1, [r3, #42]	; 0x2a
      _s = s;
    56e2:	mvn.w	r1, #83	; 0x53
    56e6:	strb.w	r1, [r3, #43]	; 0x2b
      _b = b;
    56ea:	mvn.w	r1, #45	; 0x2d
    56ee:	strb.w	r1, [r3, #44]	; 0x2c
    56f2:	mvn.w	r1, #33	; 0x21
    56f6:	strb.w	r1, [r3, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56fa:	mvn.w	r1, #96	; 0x60
    56fe:	strb.w	r1, [r3, #49]	; 0x31
      _b = b;
    5702:	mvn.w	r1, #39	; 0x27
    5706:	strb.w	r1, [r3, #50]	; 0x32
    570a:	mvn.w	r1, #32
    570e:	strb.w	r1, [r3, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5712:	mvn.w	r1, #117	; 0x75
    5716:	strb.w	r1, [r3, #54]	; 0x36
      _s = s;
      _b = b;
    571a:	mvn.w	r1, #9
    571e:	strb.w	r1, [r3, #56]	; 0x38
    5722:	mvn.w	r1, #4
    5726:	strb.w	r1, [r3, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    572a:	strb.w	r2, [r3, #60]	; 0x3c
      _s = s;
      _b = b;
    572e:	strb.w	r1, [r3, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5732:	mov.w	r1, #5
    5736:	strb.w	r2, [r3, #61]	; 0x3d
    573a:	strb.w	r1, [r3, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    573e:	mvn.w	r1, #120	; 0x78
    5742:	strb.w	r2, [r3, #63]	; 0x3f
    5746:	strb.w	r1, [r3, #51]	; 0x33
      _s = s;
    574a:	mov.w	r1, #51	; 0x33
    574e:	strb.w	r2, [r3, #64]	; 0x40
    5752:	strb.w	r1, [r3, #52]	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5756:	mov.w	r1, #95	; 0x5f
    575a:	strb.w	r2, [r3, #66]	; 0x42
    575e:	strb.w	r1, [r3, #81]	; 0x51
      _s = s;
      _b = b;
    5762:	mvn.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5766:	strb.w	r2, [r3, #67]	; 0x43
      _b = b;
    576a:	strb.w	r1, [r3, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    576e:	mvn.w	r1, #116	; 0x74
    5772:	strb.w	r2, [r3, #69]	; 0x45
    5776:	strb.w	r1, [r3, #84]	; 0x54
      _s = s;
      _b = b;
    577a:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    577e:	strb.w	r2, [r3, #70]	; 0x46
      _b = b;
    5782:	strb.w	r1, [r3, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5786:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    578a:	strb.w	r2, [r3, #72]	; 0x48
      _s = s;
    578e:	strb.w	r1, [r3, #103]	; 0x67
      _b = b;
    5792:	mov.w	r1, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5796:	strb.w	r2, [r3, #73]	; 0x49
      _b = b;
    579a:	strb.w	r1, [r3, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    579e:	mov.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57a2:	strb.w	r2, [r3, #75]	; 0x4b
      _s = s;
    57a6:	strb.w	r1, [r3, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57aa:	mvn.w	r1, #116	; 0x74
      _s = s;
    57ae:	strb.w	r2, [r3, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57b2:	strb.w	r1, [r3, #108]	; 0x6c
      _s = s;
    57b6:	mvn.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57ba:	strb.w	r2, [r3, #78]	; 0x4e
      _s = s;
    57be:	strb.w	r2, [r3, #79]	; 0x4f
    57c2:	strb.w	r0, [r3, #55]	; 0x37
      _b = b;
    57c6:	movs	r0, #219	; 0xdb
    57c8:	strb.w	ip, [r3, #62]	; 0x3e
    57cc:	strb.w	ip, [r3, #65]	; 0x41
    57d0:	strb.w	ip, [r3, #68]	; 0x44
    57d4:	strb.w	ip, [r3, #71]	; 0x47
    57d8:	strb.w	ip, [r3, #74]	; 0x4a
    57dc:	strb.w	ip, [r3, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57e0:	strb.w	r1, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57e4:	mvn.w	r1, #121	; 0x79
      _s = s;
    57e8:	strb.w	ip, [r3, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57ec:	strb.w	r1, [r3, #111]	; 0x6f
      _s = s;
    57f0:	mvn.w	r1, #5
    57f4:	strb.w	fp, [r3, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57f8:	mov.w	fp, #25
      _s = s;
    57fc:	strb.w	r1, [r3, #112]	; 0x70
      _b = b;
    5800:	mvn.w	r1, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5804:	strb.w	r8, [r3, #91]	; 0x5b
      _b = b;
    5808:	mov.w	r8, #30
    580c:	strb.w	r1, [r3, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5810:	mov.w	r1, #46	; 0x2e
      _s = s;
      _b = b;
    5814:	strb.w	r5, [r3, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5818:	movs	r5, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    581a:	strb.w	r1, [r3, #93]	; 0x5d
      _s = s;
    581e:	ldrb.w	r1, [sp, #4]
      _b = b;
    5822:	strb.w	r4, [r3, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5826:	movs	r4, #162	; 0xa2
    5828:	strb.w	r1, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    582c:	mov.w	r1, #94	; 0x5e
    5830:	strb.w	r6, [r3, #96]	; 0x60
    5834:	strb.w	r1, [r3, #87]	; 0x57
    5838:	mov.w	r1, #96	; 0x60
    583c:	strb.w	r9, [r3, #114]	; 0x72
    5840:	strb.w	r1, [r3, #90]	; 0x5a
      _s = s;
      _b = b;
    5844:	mvn.w	r1, #58	; 0x3a
    5848:	strb.w	lr, [r3, #116]	; 0x74
    584c:	mov.w	lr, #103	; 0x67
    5850:	strb.w	r1, [r3, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5854:	mov.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5858:	strb.w	sl, [r3, #123]	; 0x7b
      _s = s;
    585c:	strb.w	r1, [r3, #94]	; 0x5e
      _b = b;
    5860:	mvn.w	r1, #99	; 0x63
    5864:	strb.w	r1, [r3, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5868:	mov.w	r1, #121	; 0x79
    586c:	strb.w	r1, [r3, #97]	; 0x61
      _b = b;
    5870:	mov.w	r1, #113	; 0x71
    5874:	strb.w	r1, [r3, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5878:	mov.w	r1, #105	; 0x69
    587c:	strb.w	r1, [r3, #99]	; 0x63
      _s = s;
    5880:	mvn.w	r1, #69	; 0x45
    5884:	strb.w	r1, [r3, #100]	; 0x64
      _b = b;
    5888:	mov.w	r1, #101	; 0x65
    588c:	strb.w	r1, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5890:	mov.w	r1, #118	; 0x76
    5894:	strb.w	r1, [r3, #102]	; 0x66
    5898:	mvn.w	r1, #43	; 0x2b
    589c:	strb.w	r1, [r3, #105]	; 0x69
      _s = s;
      _b = b;
    58a0:	mov.w	r1, #32
    58a4:	strb.w	r1, [r3, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58a8:	mvn.w	r1, #122	; 0x7a
    58ac:	strb.w	r1, [r3, #117]	; 0x75
      _s = s;
    58b0:	mov.w	r1, #106	; 0x6a
    58b4:	strb.w	r1, [r3, #118]	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58b8:	mvn.w	r1, #124	; 0x7c
    58bc:	strb.w	r1, [r3, #120]	; 0x78
      _s = s;
      _b = b;
    58c0:	mvn.w	r1, #34	; 0x22
    58c4:	strb.w	r1, [r3, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58c8:	mvn.w	r1, #16
    58cc:	strb.w	r1, [r3, #124]	; 0x7c
      _b = b;
    58d0:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58d4:	strb.w	sl, [r3, #126]	; 0x7e
      _s = s;
      _b = b;
    58d8:	strb.w	r1, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58dc:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58e0:	strb.w	sl, [r3, #129]	; 0x81
      _s = s;
    58e4:	strb.w	r1, [r3, #127]	; 0x7f
      _b = b;
    58e8:	strb.w	r1, [r3, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58ec:	mvn.w	r1, #124	; 0x7c
    58f0:	strb.w	r2, [r3, #138]	; 0x8a
    58f4:	strb.w	r1, [r3, #132]	; 0x84
      _s = s;
      _b = b;
    58f8:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58fc:	strb.w	r2, [r3, #139]	; 0x8b
      _b = b;
    5900:	strb.w	r1, [r3, #134]	; 0x86
    5904:	mvn.w	r1, #37	; 0x25
    5908:	strb.w	ip, [r3, #140]	; 0x8c
    590c:	strb.w	r1, [r3, #137]	; 0x89
    5910:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5914:	strb.w	r2, [r3, #141]	; 0x8d
      _s = s;
      _b = b;
    5918:	strb.w	r1, [r3, #146]	; 0x92
    591c:	mvn.w	r1, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5920:	strb.w	r2, [r3, #142]	; 0x8e
      _b = b;
    5924:	strb.w	r1, [r3, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5928:	mvn.w	r1, #111	; 0x6f
      _b = b;
    592c:	strb.w	ip, [r3, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5930:	strb.w	r1, [r3, #121]	; 0x79
      _b = b;
    5934:	mvn.w	r1, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5938:	strb.w	r2, [r3, #144]	; 0x90
      _s = s;
      _b = b;
    593c:	strb.w	r1, [r3, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5940:	mvn.w	r1, #59	; 0x3b
    5944:	strb.w	r2, [r3, #145]	; 0x91
    5948:	strb.w	r1, [r3, #130]	; 0x82
    594c:	mov.w	r1, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5950:	strb.w	r2, [r3, #147]	; 0x93
      _s = s;
    5954:	strb.w	r1, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5958:	mvn.w	r1, #107	; 0x6b
      _s = s;
    595c:	strb.w	r2, [r3, #148]	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5960:	strb.w	r1, [r3, #135]	; 0x87
      _s = s;
      _b = b;
    5964:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5968:	strb.w	r7, [r3, #136]	; 0x88
    596c:	movs	r7, #44	; 0x2c
      _b = b;
    596e:	strb.w	r1, [r3, #149]	; 0x95
    5972:	strb.w	r1, [r3, #152]	; 0x98
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5976:	mov.w	r1, #113	; 0x71
    597a:	strb.w	r2, [r3, #150]	; 0x96
      _s = s;
    597e:	strb.w	r2, [r3, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5982:	strb.w	r2, [r3, #153]	; 0x99
      _s = s;
    5986:	strb.w	r2, [r3, #154]	; 0x9a
      _b = b;
    598a:	strb.w	ip, [r3, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    598e:	strb.w	r1, [r3, #156]	; 0x9c
      _s = s;
      _b = b;
    5992:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5996:	strb.w	r6, [r3, #163]	; 0xa3
      _b = b;
    599a:	movs	r6, #214	; 0xd6
    599c:	strb.w	r1, [r3, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59a0:	mov.w	r1, #51	; 0x33
    59a4:	strb.w	fp, [r3, #171]	; 0xab
    59a8:	mov.w	fp, #143	; 0x8f
    59ac:	strb.w	r1, [r3, #159]	; 0x9f
      _s = s;
    59b0:	mov.w	r1, #10
      _b = b;
    59b4:	strb.w	r0, [r3, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59b8:	strb.w	r1, [r3, #160]	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59bc:	mov.w	r1, #121	; 0x79
      _s = s;
    59c0:	strb.w	r5, [r3, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59c4:	strb.w	r1, [r3, #162]	; 0xa2
    59c8:	mov.w	r1, #32
    59cc:	strb.w	r5, [r3, #177]	; 0xb1
      _s = s;
    59d0:	movs	r5, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59d2:	strb.w	r1, [r3, #165]	; 0xa5
      _s = s;
    59d6:	mvn.w	r1, #82	; 0x52
    59da:	strb.w	r4, [r3, #175]	; 0xaf
    59de:	strb.w	r1, [r3, #166]	; 0xa6
      _b = b;
    59e2:	mvn.w	r1, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59e6:	strb.w	r4, [r3, #181]	; 0xb5
    59ea:	movs	r4, #90	; 0x5a
      _b = b;
    59ec:	strb.w	r1, [r3, #167]	; 0xa7
    59f0:	mov.w	r1, #85	; 0x55
    59f4:	strb.w	r1, [r3, #176]	; 0xb0
    59f8:	ldrb.w	r1, [sp, #4]
    59fc:	strb.w	r1, [r3, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a00:	mov.w	r1, #121	; 0x79
    5a04:	strb.w	r1, [r3, #180]	; 0xb4
      _s = s;
    5a08:	mov.w	r1, #3
    5a0c:	strb.w	r1, [r3, #157]	; 0x9d
      _b = b;
    5a10:	mov.w	r1, #123	; 0x7b
    5a14:	strb.w	r1, [r3, #164]	; 0xa4
    5a18:	strb.w	r1, [r3, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a1c:	mov.w	r1, #54	; 0x36
    5a20:	strb.w	r1, [r3, #168]	; 0xa8
      _s = s;
      _b = b;
    5a24:	ldrb.w	r1, [sp, #12]
    5a28:	strb.w	r1, [r3, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a2c:	mvn.w	r1, #67	; 0x43
    5a30:	strb.w	r1, [r3, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a34:	mov.w	r1, #28
    5a38:	strb.w	r1, [r3, #174]	; 0xae
      _s = s;
    5a3c:	mvn.w	r1, #81	; 0x51
    5a40:	strb.w	r1, [r3, #178]	; 0xb2
      _b = b;
    5a44:	mvn.w	r1, #101	; 0x65
    5a48:	strb.w	r1, [r3, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a4c:	mvn.w	r1, #39	; 0x27
    5a50:	strb.w	r1, [r3, #183]	; 0xb7
      _s = s;
    5a54:	mvn.w	r1, #104	; 0x68
    5a58:	strb.w	r1, [r3, #187]	; 0xbb
      _b = b;
    5a5c:	mov.w	r1, #59	; 0x3b
    5a60:	strb.w	r1, [r3, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a64:	ldrb.w	r1, [sp, #4]
    5a68:	strb.w	r9, [r3, #195]	; 0xc3
    5a6c:	strb.w	r1, [r3, #189]	; 0xbd
      _s = s;
    5a70:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a74:	strb.w	sl, [r3, #198]	; 0xc6
      _s = s;
    5a78:	strb.w	r1, [r3, #190]	; 0xbe
      _b = b;
    5a7c:	mov.w	r1, #57	; 0x39
    5a80:	strb.w	r0, [r3, #200]	; 0xc8
    5a84:	strb.w	r1, [r3, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a88:	mvn.w	r1, #119	; 0x77
    5a8c:	strb.w	sl, [r3, #201]	; 0xc9
    5a90:	strb.w	r1, [r3, #192]	; 0xc0
      _s = s;
    5a94:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a98:	strb.w	sl, [r3, #204]	; 0xcc
      _s = s;
    5a9c:	strb.w	r1, [r3, #193]	; 0xc1
      _b = b;
    5aa0:	mov.w	r1, #59	; 0x3b
    5aa4:	strb.w	r8, [r3, #185]	; 0xb9
    5aa8:	mov.w	r8, #110	; 0x6e
    5aac:	strb.w	r1, [r3, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ab0:	mvn.w	r1, #117	; 0x75
      _b = b;
    5ab4:	strb.w	lr, [r3, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ab8:	mov.w	lr, #1
    5abc:	strb.w	r1, [r3, #196]	; 0xc4
    5ac0:	mov.w	r1, #57	; 0x39
    5ac4:	strb.w	r7, [r3, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ac8:	movs	r7, #33	; 0x21
      _s = s;
    5aca:	strb.w	r1, [r3, #199]	; 0xc7
    5ace:	mvn.w	r1, #65	; 0x41
      _b = b;
    5ad2:	strb.w	r6, [r3, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ad6:	movs	r6, #31
      _s = s;
    5ad8:	strb.w	r1, [r3, #202]	; 0xca
      _b = b;
    5adc:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ae0:	strb.w	fp, [r3, #186]	; 0xba
      _s = s;
      _b = b;
    5ae4:	strb.w	r1, [r3, #203]	; 0xcb
    5ae8:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5aec:	strb.w	fp, [r3, #210]	; 0xd2
      _s = s;
      _b = b;
    5af0:	strb.w	r1, [r3, #206]	; 0xce
    5af4:	mvn.w	r1, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5af8:	strb.w	r4, [r3, #208]	; 0xd0
      _b = b;
    5afc:	strb.w	r1, [r3, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b00:	mvn.w	r1, #96	; 0x60
      _s = s;
    5b04:	strb.w	r5, [r3, #214]	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b08:	strb.w	r1, [r3, #213]	; 0xd5
    5b0c:	mvn.w	r1, #122	; 0x7a
    5b10:	strb.w	r1, [r3, #207]	; 0xcf
      _s = s;
    5b14:	mov.w	r1, #93	; 0x5d
    5b18:	strb.w	r1, [r3, #184]	; 0xb8
    5b1c:	mvn.w	r1, #51	; 0x33
    5b20:	strb.w	r1, [r3, #205]	; 0xcd
      _b = b;
    5b24:	mvn.w	r1, #74	; 0x4a
    5b28:	strb.w	r1, [r3, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b2c:	mov.w	r1, #26
    5b30:	strb.w	r1, [r3, #217]	; 0xd9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b34:	mvn.w	r1, #105	; 0x69
    5b38:	strb.w	r1, [r3, #216]	; 0xd8
      _s = s;
      _b = b;
    5b3c:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b40:	strb.w	lr, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b44:	mov.w	lr, #127	; 0x7f
      _s = s;
      _b = b;
    5b48:	strb.w	r1, [r3, #221]	; 0xdd
    5b4c:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b50:	strb.w	lr, [r3, #219]	; 0xdb
      _s = s;
    5b54:	mov.w	lr, #66	; 0x42
      _b = b;
    5b58:	strb.w	r1, [r3, #224]	; 0xe0
    5b5c:	strb.w	r1, [r3, #227]	; 0xe3
    5b60:	strb.w	r1, [r3, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b64:	mov.w	r1, #106	; 0x6a
      _s = s;
    5b68:	strb.w	lr, [r3, #235]	; 0xeb
      _b = b;
    5b6c:	mvn.w	lr, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b70:	strb.w	r1, [r3, #234]	; 0xea
      _s = s;
      _b = b;
    5b74:	mvn.w	r1, #29
    5b78:	strb.w	lr, [r3, #236]	; 0xec
    5b7c:	strb.w	r1, [r3, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b80:	mvn.w	r1, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b84:	ldrb.w	lr, [sp, #16]
      _s = s;
    5b88:	strb.w	r1, [r3, #241]	; 0xf1
      _b = b;
    5b8c:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b90:	strb.w	lr, [r3, #237]	; 0xed
      _s = s;
    5b94:	mov.w	lr, #72	; 0x48
      _b = b;
    5b98:	strb.w	r1, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b9c:	mvn.w	r1, #62	; 0x3e
    5ba0:	strb.w	lr, [r3, #238]	; 0xee
    5ba4:	mvn.w	lr, #113	; 0x71
    5ba8:	strb.w	r1, [r3, #247]	; 0xf7
      _b = b;
    5bac:	mvn.w	r1, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bb0:	strb.w	lr, [r3, #244]	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bb4:	mov.w	lr, #29
      _s = s;
      _b = b;
    5bb8:	strb.w	r1, [r3, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bbc:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bc0:	strb.w	lr, [r3, #246]	; 0xf6
      _s = s;
      _b = b;
    5bc4:	mvn.w	lr, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bc8:	strb.w	r2, [r3, #222]	; 0xde
      _s = s;
    5bcc:	strb.w	r2, [r3, #223]	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bd0:	strb.w	r2, [r3, #225]	; 0xe1
      _s = s;
    5bd4:	strb.w	r2, [r3, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bd8:	strb.w	r2, [r3, #228]	; 0xe4
      _s = s;
    5bdc:	strb.w	r2, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5be0:	strb.w	r2, [r3, #231]	; 0xe7
      _s = s;
    5be4:	strb.w	r2, [r3, #232]	; 0xe8
      _b = b;
    5be8:	strb.w	ip, [r3, #233]	; 0xe9
    5bec:	strb.w	r0, [r3, #242]	; 0xf2
    5bf0:	movs	r0, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bf2:	strb.w	r7, [r3, #243]	; 0xf3
    5bf6:	movs	r7, #55	; 0x37
    5bf8:	strb.w	r6, [r3, #240]	; 0xf0
      _s = s;
      _b = b;
    5bfc:	strb.w	lr, [r3, #248]	; 0xf8
    5c00:	mov.w	lr, #170	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c04:	strb.w	r1, [r3, #250]	; 0xfa
      _b = b;
    5c08:	mvn.w	r1, #92	; 0x5c
    5c0c:	strb.w	r4, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c10:	movs	r4, #237	; 0xed
      _b = b;
    5c12:	strb.w	r1, [r3, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c16:	mvn.w	r1, #113	; 0x71
      _b = b;
    5c1a:	strb.w	r0, [r3, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c1e:	movs	r0, #69	; 0x45
    5c20:	strb.w	r1, [r3, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c24:	mov.w	r1, #77	; 0x4d
    5c28:	strb.w	sl, [r3, #264]	; 0x108
    5c2c:	strb.w	r1, [r3, #255]	; 0xff
      _s = s;
    5c30:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c34:	strb.w	r9, [r3, #276]	; 0x114
      _s = s;
    5c38:	strb.w	r1, [r3, #259]	; 0x103
      _b = b;
    5c3c:	mvn.w	r1, #74	; 0x4a
    5c40:	strb.w	r8, [r3, #266]	; 0x10a
    5c44:	mov.w	r8, #228	; 0xe4
    5c48:	strb.w	r1, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c4c:	mvn.w	r1, #43	; 0x2b
    5c50:	strb.w	r7, [r3, #252]	; 0xfc
    5c54:	strb.w	r1, [r3, #261]	; 0x105
      _s = s;
    5c58:	mov.w	r1, #87	; 0x57
      _b = b;
    5c5c:	strb.w	lr, [r3, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c60:	strb.w	r1, [r3, #262]	; 0x106
      _b = b;
    5c64:	mov.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c68:	strb.w	lr, [r3, #256]	; 0x100
    5c6c:	mov.w	lr, #17
      _b = b;
    5c70:	strb.w	r1, [r3, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c74:	mvn.w	r1, #117	; 0x75
      _s = s;
    5c78:	strb.w	r4, [r3, #271]	; 0x10f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c7c:	strb.w	r1, [r3, #267]	; 0x10b
    5c80:	mvn.w	r1, #120	; 0x78
      _s = s;
    5c84:	strb.w	r0, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c88:	strb.w	r1, [r3, #270]	; 0x10e
    5c8c:	ldrb.w	r1, [sp, #4]
    5c90:	strb.w	r1, [r3, #273]	; 0x111
      _s = s;
    5c94:	mvn.w	r1, #30
    5c98:	strb.w	r1, [r3, #274]	; 0x112
      _b = b;
    5c9c:	mov.w	r1, #51	; 0x33
    5ca0:	strb.w	r1, [r3, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ca4:	mov.w	r1, #48	; 0x30
    5ca8:	strb.w	r1, [r3, #280]	; 0x118
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cac:	mvn.w	r1, #122	; 0x7a
    5cb0:	strb.w	r1, [r3, #279]	; 0x117
    5cb4:	mov.w	r1, #22
    5cb8:	strb.w	r1, [r3, #249]	; 0xf9
      _s = s;
      _b = b;
    5cbc:	mvn.w	r1, #86	; 0x56
    5cc0:	strb.w	r1, [r3, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cc4:	mov.w	r1, #112	; 0x70
    5cc8:	strb.w	r1, [r3, #258]	; 0x102
      _s = s;
    5ccc:	mov.w	r1, #34	; 0x22
    5cd0:	strb.w	r1, [r3, #265]	; 0x109
    5cd4:	mvn.w	r1, #108	; 0x6c
    5cd8:	strb.w	r1, [r3, #268]	; 0x10c
      _b = b;
    5cdc:	mov.w	r1, #99	; 0x63
    5ce0:	strb.w	r1, [r3, #278]	; 0x116
    5ce4:	mvn.w	r1, #62	; 0x3e
    5ce8:	strb.w	r1, [r3, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cec:	mvn.w	r1, #119	; 0x77
      _s = s;
    5cf0:	strb.w	r7, [r3, #283]	; 0x11b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cf4:	movs	r7, #149	; 0x95
    5cf6:	strb.w	r1, [r3, #282]	; 0x11a
      _s = s;
      _b = b;
    5cfa:	mvn.w	r1, #24
    5cfe:	strb.w	r4, [r3, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d02:	movs	r4, #65	; 0x41
      _b = b;
    5d04:	strb.w	r1, [r3, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d08:	mvn.w	r1, #120	; 0x78
      _s = s;
    5d0c:	strb.w	r0, [r3, #289]	; 0x121
      _b = b;
    5d10:	movs	r0, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d12:	strb.w	r1, [r3, #285]	; 0x11d
      _s = s;
    5d16:	mov.w	r1, #72	; 0x48
    5d1a:	strb.w	r5, [r3, #295]	; 0x127
      _b = b;
    5d1e:	movs	r5, #201	; 0xc9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d20:	strb.w	r1, [r3, #292]	; 0x124
      _b = b;
    5d24:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d28:	strb.w	r9, [r3, #300]	; 0x12c
      _s = s;
      _b = b;
    5d2c:	strb.w	r1, [r3, #293]	; 0x125
    5d30:	mvn.w	r1, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d34:	strb.w	r2, [r3, #306]	; 0x132
      _s = s;
      _b = b;
    5d38:	strb.w	r1, [r3, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d3c:	mvn.w	r1, #124	; 0x7c
      _s = s;
    5d40:	strb.w	r2, [r3, #307]	; 0x133
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d44:	strb.w	r1, [r3, #297]	; 0x129
      _s = s;
    5d48:	mov.w	r1, #66	; 0x42
      _b = b;
    5d4c:	strb.w	ip, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d50:	strb.w	r1, [r3, #298]	; 0x12a
      _b = b;
    5d54:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d58:	strb.w	r2, [r3, #309]	; 0x135
      _s = s;
      _b = b;
    5d5c:	strb.w	r1, [r3, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d60:	mov.w	r1, #59	; 0x3b
    5d64:	strb.w	r2, [r3, #310]	; 0x136
    5d68:	strb.w	r1, [r3, #301]	; 0x12d
      _b = b;
    5d6c:	mvn.w	r1, #22
    5d70:	strb.w	ip, [r3, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d74:	mov.w	ip, #125	; 0x7d
      _s = s;
      _b = b;
    5d78:	strb.w	r1, [r3, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d7c:	mvn.w	r1, #111	; 0x6f
      _s = s;
    5d80:	strb.w	lr, [r3, #286]	; 0x11e
    5d84:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d88:	strb.w	r1, [r3, #303]	; 0x12f
      _s = s;
    5d8c:	mov.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d90:	strb.w	r7, [r3, #294]	; 0x126
      _s = s;
    5d94:	movs	r7, #45	; 0x2d
    5d96:	strb.w	r1, [r3, #304]	; 0x130
      _b = b;
    5d9a:	mvn.w	r1, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d9e:	strb.w	r4, [r3, #313]	; 0x139
    5da2:	movs	r4, #61	; 0x3d
      _b = b;
    5da4:	strb.w	r1, [r3, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5da8:	mvn.w	r1, #32
      _s = s;
      _b = b;
    5dac:	strb.w	r5, [r3, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5db0:	strb.w	r1, [r3, #312]	; 0x138
    5db4:	mvn.w	r1, #109	; 0x6d
    5db8:	strb.w	r1, [r3, #288]	; 0x120
    5dbc:	strb.w	r1, [r3, #291]	; 0x123
    5dc0:	mov.w	r1, #77	; 0x4d
      _s = s;
      _b = b;
    5dc4:	strb.w	r0, [r3, #314]	; 0x13a
    5dc8:	movs	r0, #183	; 0xb7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dca:	strb.w	r1, [r3, #315]	; 0x13b
      _s = s;
    5dce:	mov.w	r1, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd2:	strb.w	r6, [r3, #321]	; 0x141
      _s = s;
    5dd6:	movs	r6, #41	; 0x29
    5dd8:	strb.w	r1, [r3, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ddc:	mov.w	r1, #34	; 0x22
      _s = s;
    5de0:	strb.w	fp, [r3, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5de4:	strb.w	r1, [r3, #318]	; 0x13e
      _s = s;
      _b = b;
    5de8:	mvn.w	r1, #22
    5dec:	strb.w	r5, [r3, #329]	; 0x149
    5df0:	movs	r5, #232	; 0xe8
    5df2:	strb.w	r1, [r3, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5df6:	mov.w	r1, #28
    5dfa:	strb.w	sl, [r3, #345]	; 0x159
    5dfe:	strb.w	r1, [r3, #324]	; 0x144
      _s = s;
    5e02:	mvn.w	r1, #59	; 0x3b
      _b = b;
    5e06:	strb.w	r8, [r3, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e0a:	mov.w	r8, #24
    5e0e:	strb.w	r1, [r3, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e12:	mov.w	r1, #20
      _s = s;
      _b = b;
    5e16:	strb.w	r0, [r3, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e1a:	strb.w	r1, [r3, #327]	; 0x147
      _s = s;
    5e1e:	mvn.w	r1, #120	; 0x78
    5e22:	strb.w	r4, [r3, #334]	; 0x14e
    5e26:	strb.w	r1, [r3, #328]	; 0x148
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e2a:	mov.w	r1, #29
      _s = s;
    5e2e:	strb.w	r4, [r3, #346]	; 0x15a
    5e32:	movs	r4, #192	; 0xc0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e34:	strb.w	r1, [r3, #330]	; 0x14a
      _s = s;
    5e38:	mvn.w	r1, #96	; 0x60
    5e3c:	strb.w	r1, [r3, #331]	; 0x14b
      _b = b;
    5e40:	mvn.w	r1, #62	; 0x3e
    5e44:	strb.w	r1, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e48:	mov.w	r1, #112	; 0x70
    5e4c:	strb.w	r1, [r3, #336]	; 0x150
      _s = s;
    5e50:	mov.w	r1, #48	; 0x30
    5e54:	strb.w	r1, [r3, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e58:	mov.w	r1, #123	; 0x7b
    5e5c:	strb.w	r1, [r3, #339]	; 0x153
      _s = s;
    5e60:	mov.w	r1, #22
    5e64:	strb.w	r1, [r3, #340]	; 0x154
      _b = b;
    5e68:	mvn.w	r1, #120	; 0x78
    5e6c:	strb.w	r1, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e70:	mov.w	r1, #123	; 0x7b
    5e74:	strb.w	r1, [r3, #342]	; 0x156
      _s = s;
    5e78:	mov.w	r1, #22
    5e7c:	strb.w	r1, [r3, #343]	; 0x157
    5e80:	mvn.w	r1, #40	; 0x28
    5e84:	strb.w	r1, [r3, #319]	; 0x13f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e88:	mov.w	r1, #88	; 0x58
    5e8c:	strb.w	r1, [r3, #333]	; 0x14d
      _s = s;
      _b = b;
    5e90:	mvn.w	r1, #61	; 0x3d
    5e94:	strb.w	r1, [r3, #335]	; 0x14f
    5e98:	mvn.w	r1, #49	; 0x31
    5e9c:	strb.w	r1, [r3, #317]	; 0x13d
    5ea0:	mvn.w	r1, #31
    5ea4:	strb.w	r1, [r3, #323]	; 0x143
    5ea8:	mvn.w	r1, #78	; 0x4e
    5eac:	strb.w	r1, [r3, #338]	; 0x152
    5eb0:	mvn.w	r1, #73	; 0x49
    5eb4:	strb.w	r1, [r3, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5eb8:	mvn.w	r1, #4
    5ebc:	strb.w	r6, [r3, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ec0:	movs	r6, #142	; 0x8e
      _s = s;
    5ec2:	strb.w	r1, [r3, #349]	; 0x15d
    5ec6:	mov.w	r1, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eca:	strb.w	r9, [r3, #348]	; 0x15c
      _s = s;
    5ece:	strb.w	r1, [r3, #352]	; 0x160
      _b = b;
    5ed2:	mvn.w	r1, #102	; 0x66
    5ed6:	strb.w	fp, [r3, #350]	; 0x15e
    5eda:	strb.w	r1, [r3, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ede:	mov.w	r1, #127	; 0x7f
    5ee2:	strb.w	r9, [r3, #357]	; 0x165
    5ee6:	strb.w	r1, [r3, #354]	; 0x162
      _s = s;
    5eea:	mov.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eee:	strb.w	fp, [r3, #363]	; 0x16b
      _s = s;
    5ef2:	strb.w	r1, [r3, #355]	; 0x163
      _b = b;
    5ef6:	mvn.w	r1, #86	; 0x56
    5efa:	strb.w	r0, [r3, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5efe:	movs	r0, #166	; 0xa6
      _b = b;
    5f00:	strb.w	r1, [r3, #356]	; 0x164
    5f04:	ldrb.w	r1, [sp, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f08:	strb.w	r9, [r3, #375]	; 0x177
      _s = s;
      _b = b;
    5f0c:	strb.w	r1, [r3, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f10:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f14:	strb.w	ip, [r3, #351]	; 0x15f
      _s = s;
    5f18:	mov.w	ip, #139	; 0x8b
    5f1c:	strb.w	r1, [r3, #361]	; 0x169
      _b = b;
    5f20:	mov.w	r1, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f24:	strb.w	lr, [r3, #358]	; 0x166
    5f28:	mvn.w	lr, #32
      _b = b;
    5f2c:	strb.w	r1, [r3, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f30:	mov.w	r1, #115	; 0x73
    5f34:	strb.w	r7, [r3, #370]	; 0x172
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f38:	movs	r7, #140	; 0x8c
      _s = s;
    5f3a:	strb.w	r1, [r3, #364]	; 0x16c
      _b = b;
    5f3e:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f42:	str	r6, [sp, #28]
    5f44:	mov	r6, r3
      _s = s;
      _b = b;
    5f46:	strb.w	r1, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f4a:	mvn.w	r1, #107	; 0x6b
    5f4e:	strb.w	r1, [r3, #366]	; 0x16e
      _s = s;
    5f52:	mov.w	r1, #94	; 0x5e
    5f56:	strb.w	r1, [r3, #367]	; 0x16f
      _b = b;
    5f5a:	mvn.w	r1, #74	; 0x4a
    5f5e:	strb.w	r1, [r3, #371]	; 0x173
    5f62:	mvn.w	r1, #12
    5f66:	strb.w	r1, [r3, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f6a:	mov.w	r1, #85	; 0x55
    5f6e:	strb.w	r1, [r3, #376]	; 0x178
      _b = b;
    5f72:	mvn.w	r1, #13
    5f76:	strb.w	r1, [r3, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f7a:	mvn.w	r1, #124	; 0x7c
    5f7e:	strb.w	r1, [r3, #378]	; 0x17a
      _s = s;
    5f82:	mvn.w	r1, #79	; 0x4f
    5f86:	strb.w	r1, [r3, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f8a:	mvn.w	r1, #122	; 0x7a
    5f8e:	strb.w	r1, [r3, #372]	; 0x174
    5f92:	mvn.w	r1, #114	; 0x72
    5f96:	strb.w	r1, [r3, #360]	; 0x168
    5f9a:	mvn.w	r1, #100	; 0x64
    5f9e:	strb.w	r2, [r3, #387]	; 0x183
      _s = s;
    5fa2:	strb.w	r2, [r3, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fa6:	mov.w	r2, #22
    5faa:	strb.w	r1, [r3, #369]	; 0x171
      _s = s;
      _b = b;
    5fae:	mvn.w	r1, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fb2:	strb.w	r2, [r3, #399]	; 0x18f
      _s = s;
      _b = b;
    5fb6:	mvn.w	r2, #46	; 0x2e
    5fba:	strb.w	r1, [r3, #386]	; 0x182
    5fbe:	mvn.w	r1, #5
    5fc2:	strb.w	r2, [r3, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fc6:	mov.w	r2, #54	; 0x36
      _s = s;
      _b = b;
    5fca:	strb.w	r1, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fce:	mvn.w	r1, #37	; 0x25
    5fd2:	strb.w	r2, [r3, #408]	; 0x198
      _s = s;
      _b = b;
    5fd6:	mvn.w	r2, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fda:	strb.w	r1, [r3, #390]	; 0x186
      _s = s;
      _b = b;
    5fde:	mov.w	r1, #50	; 0x32
    5fe2:	strb.w	r2, [r3, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fe6:	mov.w	r2, #76	; 0x4c
      _b = b;
    5fea:	strb.w	r1, [r3, #392]	; 0x188
    5fee:	movs	r1, #177	; 0xb1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ff0:	strb.w	r2, [r3, #391]	; 0x187
    5ff4:	mov.w	r2, #92	; 0x5c
      _b = b;
    5ff8:	str	r1, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ffa:	mov.w	r1, #101	; 0x65
      _s = s;
    5ffe:	strb.w	r2, [r3, #394]	; 0x18a
    6002:	movs	r2, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6004:	strb.w	r1, [r3, #393]	; 0x189
    6008:	movs	r1, #121	; 0x79
      _s = s;
    600a:	str	r2, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    600c:	mov.w	r2, #40	; 0x28
      _s = s;
    6010:	strb.w	lr, [r3, #400]	; 0x190
      _b = b;
    6014:	mvn.w	lr, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6018:	strb.w	r2, [r3, #396]	; 0x18c
    601c:	mov.w	r2, #21
    6020:	str	r1, [sp, #24]
      _s = s;
      _b = b;
    6022:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6026:	strb.w	r2, [r3, #402]	; 0x192
      _s = s;
      _b = b;
    602a:	movs	r2, #225	; 0xe1
    602c:	strb.w	lr, [r3, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6030:	mvn.w	lr, #12
      _b = b;
    6034:	str	r2, [sp, #44]	; 0x2c
    6036:	mvn.w	r2, #71	; 0x47
    603a:	strb.w	r1, [r3, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    603e:	movs	r1, #144	; 0x90
      _s = s;
    6040:	strb.w	lr, [r3, #403]	; 0x193
    6044:	mvn.w	lr, #4
      _b = b;
    6048:	strb.w	r2, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    604c:	mov.w	r2, #111	; 0x6f
      _s = s;
      _b = b;
    6050:	strb.w	r5, [r3, #380]	; 0x17c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6054:	movs	r5, #127	; 0x7f
    6056:	str	r1, [sp, #48]	; 0x30
    6058:	movs	r1, #138	; 0x8a
      _s = s;
    605a:	strb.w	lr, [r3, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    605e:	mov.w	lr, #141	; 0x8d
    6062:	strb.w	r2, [r3, #411]	; 0x19b
      _s = s;
      _b = b;
    6066:	movs	r2, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6068:	str	r5, [sp, #8]
      _s = s;
      _b = b;
    606a:	mov	r5, r3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    606c:	str	r1, [sp, #36]	; 0x24
    606e:	mov	r1, r3
    6070:	str.w	lr, [sp, #52]	; 0x34
      _s = s;
      _b = b;
    6074:	mov.w	lr, #62	; 0x3e
    6078:	str	r2, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    607a:	mvn.w	r2, #77	; 0x4d
    607e:	strb.w	r0, [r3, #397]	; 0x18d
    6082:	strb.w	r2, [r3, #412]	; 0x19c
      _b = b;
    6086:	movs	r2, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6088:	strb.w	r0, [r3, #409]	; 0x199
    608c:	mov.w	r0, #87	; 0x57
      _b = b;
    6090:	str	r2, [sp, #0]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6092:	mvn.w	r2, #122	; 0x7a
      _s = s;
    6096:	strb.w	r0, [r3, #415]	; 0x19f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    609a:	mov.w	r0, #95	; 0x5f
    609e:	strb.w	r2, [r3, #381]	; 0x17d
    60a2:	strb.w	r2, [r3, #384]	; 0x180
      _s = s;
    60a6:	mov.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60aa:	strb.w	r0, [r3, #414]	; 0x19e
      _s = s;
      _b = b;
    60ae:	mov.w	r0, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60b2:	strb.w	r2, [r3, #427]	; 0x1ab
      _b = b;
    60b6:	mvn.w	r2, #51	; 0x33
    60ba:	strb.w	r0, [r3, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60be:	mov.w	r0, #123	; 0x7b
      _s = s;
      _b = b;
    60c2:	strb.w	r2, [r3, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60c6:	mov.w	r2, #57	; 0x39
    60ca:	strb.w	r4, [r3, #382]	; 0x17e
    60ce:	strb.w	r2, [r3, #430]	; 0x1ae
      _b = b;
    60d2:	mvn.w	r2, #24
    60d6:	strb.w	r4, [r3, #383]	; 0x17f
    60da:	mvn.w	r4, #95	; 0x5f
    60de:	strb.w	r2, [r3, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60e2:	mov.w	r2, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60e6:	strb.w	r0, [r3, #417]	; 0x1a1
      _s = s;
    60ea:	mov.w	r0, #105	; 0x69
    60ee:	strb.w	r2, [r3, #433]	; 0x1b1
      _b = b;
    60f2:	mvn.w	r2, #28
    60f6:	strb.w	r4, [r3, #395]	; 0x18b
    60fa:	movs	r4, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60fc:	strb.w	r0, [r3, #418]	; 0x1a2
    6100:	mvn.w	r0, #83	; 0x53
      _b = b;
    6104:	strb.w	r2, [r3, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6108:	ldrb.w	r2, [sp, #36]	; 0x24
      _s = s;
      _b = b;
    610c:	strb.w	r4, [r1, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6110:	strb.w	r4, [r3, #420]	; 0x1a4
      _s = s;
      _b = b;
    6114:	mvn.w	r4, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6118:	strb.w	r0, [r3, #424]	; 0x1a8
      _b = b;
    611c:	mvn.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6120:	strb.w	r2, [r3, #435]	; 0x1b3
      _s = s;
    6124:	mov.w	r2, #95	; 0x5f
    6128:	strb.w	r8, [r3, #385]	; 0x181
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    612c:	strb.w	r8, [r3, #405]	; 0x195
      _s = s;
      _b = b;
    6130:	strb.w	r4, [r3, #422]	; 0x1a6
    6134:	movs	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6136:	strb.w	r9, [r3, #423]	; 0x1a7
      _s = s;
      _b = b;
    613a:	strb.w	r0, [r3, #425]	; 0x1a9
    613e:	movs	r0, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6140:	strb.w	r9, [r3, #429]	; 0x1ad
    6144:	strb.w	ip, [r3, #432]	; 0x1b0
      _s = s;
    6148:	strb.w	r2, [r3, #436]	; 0x1b4
      _b = b;
    614c:	mvn.w	r2, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6150:	strb.w	r9, [r3, #459]	; 0x1cb
      _s = s;
    6154:	mvn.w	r9, #96	; 0x60
      _b = b;
    6158:	strb.w	r2, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    615c:	mov.w	r2, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6160:	strb.w	sl, [r3, #453]	; 0x1c5
      _s = s;
    6164:	strb.w	r2, [r3, #439]	; 0x1b7
      _b = b;
    6168:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    616c:	ldrb.w	sl, [sp, #40]	; 0x28
      _b = b;
    6170:	strb.w	r2, [r3, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6174:	mov.w	r2, #98	; 0x62
    6178:	strb.w	r9, [r3, #460]	; 0x1cc
      _b = b;
    617c:	mvn.w	r9, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6180:	strb.w	r2, [r3, #442]	; 0x1ba
      _b = b;
    6184:	mvn.w	r2, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6188:	strb.w	sl, [r3, #454]	; 0x1c6
      _b = b;
    618c:	mvn.w	sl, #22
    6190:	strb.w	r2, [r3, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6194:	mov.w	r2, #116	; 0x74
      _b = b;
    6198:	strb.w	r9, [r3, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    619c:	mov.w	r9, #29
    61a0:	strb.w	r2, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61a4:	mvn.w	r2, #122	; 0x7a
    61a8:	strb.w	r7, [r3, #444]	; 0x1bc
    61ac:	strb.w	r2, [r3, #438]	; 0x1b6
      _s = s;
      _b = b;
    61b0:	mov.w	r2, #70	; 0x46
    61b4:	strb.w	r7, [r3, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61b8:	mov.w	r7, #73	; 0x49
      _b = b;
    61bc:	strb.w	r2, [r3, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61c0:	mov.w	r2, #47	; 0x2f
      _b = b;
    61c4:	strb.w	sl, [r3, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61c8:	mvn.w	sl, #49	; 0x31
    61cc:	strb.w	r2, [r3, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61d0:	mov.w	r2, #126	; 0x7e
      _s = s;
    61d4:	strb.w	r9, [r3, #466]	; 0x1d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61d8:	mvn.w	r9, #95	; 0x5f
    61dc:	strb.w	r2, [r3, #426]	; 0x1aa
      _s = s;
      _b = b;
    61e0:	mov.w	r2, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61e4:	strb.w	r7, [r3, #451]	; 0x1c3
      _b = b;
    61e8:	mvn.w	r7, #21
    61ec:	strb.w	r2, [r3, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61f0:	mvn.w	r2, #108	; 0x6c
      _s = s;
    61f4:	strb.w	sl, [r3, #457]	; 0x1c9
      _b = b;
    61f8:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61fc:	strb.w	r2, [r3, #447]	; 0x1bf
      _s = s;
    6200:	mov.w	r2, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6204:	strb.w	r9, [r3, #468]	; 0x1d4
      _s = s;
    6208:	mov.w	r9, #37	; 0x25
    620c:	strb.w	r2, [r3, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6210:	mvn.w	r2, #124	; 0x7c
    6214:	strb.w	ip, [r3, #441]	; 0x1b9
    6218:	strb.w	r2, [r3, #450]	; 0x1c2
      _s = s;
      _b = b;
    621c:	strb.w	r7, [r3, #452]	; 0x1c4
    6220:	mvn.w	r7, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6224:	strb.w	r2, [r3, #456]	; 0x1c8
      _s = s;
      _b = b;
    6228:	strb.w	sl, [r3, #458]	; 0x1ca
    622c:	mov.w	sl, #130	; 0x82
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6230:	strb.w	ip, [r3, #465]	; 0x1d1
      _s = s;
    6234:	strb.w	r9, [r3, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6238:	mov.w	r9, #116	; 0x74
      _s = s;
      _b = b;
    623c:	strb.w	fp, [r3, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6240:	strb.w	r9, [r3, #471]	; 0x1d7
      _s = s;
    6244:	mov.w	r9, #123	; 0x7b
      _b = b;
    6248:	strb.w	lr, [r3, #470]	; 0x1d6
    624c:	mov.w	lr, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6250:	strb.w	r9, [r3, #472]	; 0x1d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6254:	mov.w	r9, #114	; 0x72
      _s = s;
      _b = b;
    6258:	strb.w	r8, [r3, #497]	; 0x1f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    625c:	strb.w	r9, [r3, #474]	; 0x1da
      _s = s;
    6260:	mov.w	r9, #96	; 0x60
    6264:	strb.w	r9, [r3, #475]	; 0x1db
      _b = b;
    6268:	mvn.w	r9, #39	; 0x27
    626c:	strb.w	r9, [r3, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6270:	mov.w	r9, #106	; 0x6a
    6274:	strb.w	r9, [r3, #477]	; 0x1dd
      _s = s;
    6278:	mov.w	r9, #66	; 0x42
    627c:	strb.w	r9, [r3, #478]	; 0x1de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6280:	mvn.w	r9, #122	; 0x7a
    6284:	strb.w	r9, [r3, #462]	; 0x1ce
      _s = s;
      _b = b;
    6288:	mvn.w	r9, #55	; 0x37
    628c:	strb.w	r9, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6290:	mvn.w	r9, #103	; 0x67
    6294:	strb.w	r9, [r3, #463]	; 0x1cf
      _b = b;
    6298:	mvn.w	r9, #97	; 0x61
    629c:	strb.w	r9, [r3, #467]	; 0x1d3
    62a0:	mvn.w	r9, #30
    62a4:	strb.w	r9, [r3, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62a8:	mov.w	r9, #38	; 0x26
    62ac:	strb.w	r9, [r3, #480]	; 0x1e0
      _s = s;
    62b0:	mvn.w	r9, #102	; 0x66
    62b4:	strb.w	r9, [r3, #481]	; 0x1e1
      _b = b;
    62b8:	mvn.w	r9, #79	; 0x4f
    62bc:	strb.w	r9, [r3, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62c0:	mov.w	r9, #112	; 0x70
    62c4:	strb.w	r9, [r3, #483]	; 0x1e3
      _s = s;
    62c8:	mov.w	r9, #118	; 0x76
    62cc:	strb.w	r9, [r3, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62d0:	mov.w	r9, #116	; 0x74
    62d4:	strb.w	r9, [r3, #486]	; 0x1e6
      _s = s;
    62d8:	mvn.w	r9, #34	; 0x22
    62dc:	strb.w	r9, [r3, #487]	; 0x1e7
      _b = b;
    62e0:	ldrb.w	r9, [sp, #12]
    62e4:	strb.w	r9, [r3, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62e8:	mov.w	r9, #98	; 0x62
    62ec:	strb.w	r9, [r3, #489]	; 0x1e9
      _s = s;
    62f0:	mvn.w	r9, #110	; 0x6e
    62f4:	strb.w	r9, [r3, #490]	; 0x1ea
      _b = b;
    62f8:	ldrb.w	r9, [sp, #16]
    62fc:	strb.w	r9, [r3, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6300:	mov.w	r9, #105	; 0x69
    6304:	strb.w	r9, [r3, #492]	; 0x1ec
      _s = s;
    6308:	mov.w	r9, #95	; 0x5f
    630c:	strb.w	r9, [r3, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6310:	ldrb.w	r9, [sp, #24]
    6314:	strb.w	r9, [r3, #498]	; 0x1f2
      _s = s;
    6318:	mvn.w	r9, #121	; 0x79
    631c:	strb.w	r9, [r3, #499]	; 0x1f3
      _b = b;
    6320:	mov.w	r9, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6324:	strb.w	fp, [r3, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6328:	ldrb.w	fp, [sp, #52]	; 0x34
      _s = s;
      _b = b;
    632c:	strb.w	r7, [r3, #503]	; 0x1f7
    6330:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6334:	strb.w	fp, [r3, #513]	; 0x201
    6338:	ldrb.w	fp, [sp, #48]	; 0x30
      _s = s;
      _b = b;
    633c:	strb.w	r7, [r3, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6340:	strb.w	fp, [r3, #516]	; 0x204
      _s = s;
    6344:	mvn.w	fp, #81	; 0x51
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6348:	ldrb.w	r7, [sp, #28]
      _s = s;
    634c:	strb.w	fp, [r3, #517]	; 0x205
      _b = b;
    6350:	mvn.w	fp, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6354:	strb.w	r7, [r3, #507]	; 0x1fb
      _s = s;
    6358:	mvn.w	r7, #45	; 0x2d
      _b = b;
    635c:	strb.w	fp, [r3, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6360:	mvn.w	fp, #109	; 0x6d
      _s = s;
    6364:	strb.w	r7, [r3, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6368:	strb.w	fp, [r3, #519]	; 0x207
      _s = s;
    636c:	mvn.w	fp, #101	; 0x65
      _b = b;
    6370:	strb.w	r7, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6374:	mvn.w	r7, #109	; 0x6d
      _s = s;
    6378:	strb.w	fp, [r3, #520]	; 0x208
      _b = b;
    637c:	mvn.w	fp, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6380:	strb.w	r7, [r3, #510]	; 0x1fe
      _s = s;
    6384:	mvn.w	r7, #110	; 0x6e
      _b = b;
    6388:	strb.w	r4, [r3, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    638c:	mov.w	r4, #124	; 0x7c
      _b = b;
    6390:	strb.w	fp, [r3, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6394:	ldrb.w	fp, [sp, #36]	; 0x24
      _s = s;
      _b = b;
    6398:	strb.w	r9, [r3, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    639c:	mvn.w	r9, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a0:	strb.w	r2, [r3, #501]	; 0x1f5
      _s = s;
    63a4:	strb.w	r7, [r3, #511]	; 0x1ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a8:	mvn.w	r7, #52	; 0x34
    63ac:	ldr	r2, [sp, #4]
      _s = s;
    63ae:	strb.w	r4, [r3, #493]	; 0x1ed
      _b = b;
    63b2:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63b6:	strb.w	fp, [r3, #522]	; 0x20a
      _s = s;
    63ba:	mov.w	fp, #37	; 0x25
    63be:	strb.w	r9, [r3, #502]	; 0x1f6
    63c2:	mov.w	r9, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c6:	strb.w	r2, [r1, #504]	; 0x1f8
      _s = s;
    63ca:	strb.w	ip, [r3, #505]	; 0x1f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63ce:	strb.w	r7, [r3, #495]	; 0x1ef
      _s = s;
    63d2:	movs	r7, #122	; 0x7a
      _b = b;
    63d4:	strb.w	r0, [r3, #485]	; 0x1e5
    63d8:	strb.w	r4, [r3, #512]	; 0x200
    63dc:	strb.w	r4, [r1, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63e0:	mvn.w	r4, #124	; 0x7c
      _s = s;
    63e4:	strb.w	fp, [r3, #526]	; 0x20e
      _b = b;
    63e8:	mvn.w	fp, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63ec:	strb.w	r9, [r3, #544]	; 0x220
    63f0:	mov.w	r9, #125	; 0x7d
      _b = b;
    63f4:	strb.w	fp, [r3, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63f8:	mov.w	fp, #113	; 0x71
      _s = s;
    63fc:	strb.w	r9, [r3, #541]	; 0x21d
      _b = b;
    6400:	mvn.w	r9, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6404:	strb.w	fp, [r3, #528]	; 0x210
      _s = s;
    6408:	mov.w	fp, #52	; 0x34
      _b = b;
    640c:	strb.w	r9, [r3, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6410:	mvn.w	r9, #120	; 0x78
      _s = s;
    6414:	strb.w	fp, [r3, #529]	; 0x211
      _b = b;
    6418:	mvn.w	fp, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    641c:	strb.w	r4, [r3, #540]	; 0x21c
      _s = s;
      _b = b;
    6420:	mvn.w	r4, #44	; 0x2c
    6424:	strb.w	fp, [r3, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6428:	ldrb.w	fp, [sp, #24]
    642c:	strb.w	r9, [r3, #543]	; 0x21f
    6430:	mov.w	r9, #119	; 0x77
    6434:	strb.w	fp, [r3, #531]	; 0x213
      _s = s;
    6438:	mov.w	fp, #126	; 0x7e
      _b = b;
    643c:	strb.w	r4, [r3, #515]	; 0x203
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6440:	mov.w	r4, #79	; 0x4f
    6444:	strb.w	fp, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6448:	strb.w	fp, [r3, #534]	; 0x216
      _s = s;
    644c:	mvn.w	fp, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6450:	strb.w	r9, [r3, #525]	; 0x20d
      _s = s;
      _b = b;
    6454:	mvn.w	r9, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6458:	strb.w	fp, [r3, #535]	; 0x217
      _b = b;
    645c:	mvn.w	fp, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6460:	strb.w	r4, [r3, #523]	; 0x20b
    6464:	movs	r4, #110	; 0x6e
      _b = b;
    6466:	strb.w	fp, [r3, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    646a:	ldrb.w	fp, [sp, #8]
      _s = s;
      _b = b;
    646e:	strb.w	r9, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6472:	mov.w	r9, #127	; 0x7f
    6476:	strb.w	fp, [r3, #537]	; 0x219
      _s = s;
    647a:	mvn.w	fp, #107	; 0x6b
      _b = b;
    647e:	strb.w	sl, [r3, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6482:	strb.w	fp, [r3, #538]	; 0x21a
      _b = b;
    6486:	ldrb.w	fp, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    648a:	strb.w	sl, [r1, #546]	; 0x222
      _s = s;
      _b = b;
    648e:	strb.w	fp, [r3, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6492:	mvn.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6496:	strb.w	r9, [r1, #549]	; 0x225
    649a:	mov.w	fp, #140	; 0x8c
      _s = s;
    649e:	strb.w	r3, [r1, #553]	; 0x229
    64a2:	mvn.w	r3, #124	; 0x7c
    64a6:	strb.w	r3, [r1, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64aa:	strb.w	r3, [r1, #552]	; 0x228
      _s = s;
      _b = b;
    64ae:	mvn.w	r3, #110	; 0x6e
    64b2:	strb.w	r3, [r1, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64b6:	mvn.w	r3, #120	; 0x78
    64ba:	strb.w	r3, [r1, #555]	; 0x22b
    64be:	strb.w	r3, [r1, #558]	; 0x22e
    64c2:	strb.w	r9, [r1, #576]	; 0x240
      _s = s;
      _b = b;
    64c6:	mvn.w	r9, #96	; 0x60
    64ca:	strb.w	r8, [r1, #572]	; 0x23c
    64ce:	strb.w	r9, [r1, #548]	; 0x224
    64d2:	mvn.w	r9, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64d6:	ldrb.w	r8, [sp, #16]
      _b = b;
    64da:	strb.w	r9, [r1, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64de:	mvn.w	r9, #28
    64e2:	strb.w	r8, [r1, #574]	; 0x23e
      _b = b;
    64e6:	mvn.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64ea:	strb.w	r9, [r1, #556]	; 0x22c
      _b = b;
    64ee:	mvn.w	r9, #53	; 0x35
    64f2:	ldrb.w	r3, [sp, #40]	; 0x28
    64f6:	strb.w	r9, [r1, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64fa:	mvn.w	r9, #119	; 0x77
    64fe:	strb.w	r0, [r1, #570]	; 0x23a
    6502:	strb.w	r9, [r1, #561]	; 0x231
      _s = s;
      _b = b;
    6506:	strb.w	r9, [r1, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    650a:	mvn.w	r9, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    650e:	strb.w	r0, [r1, #573]	; 0x23d
      _s = s;
    6512:	mvn.w	r0, #3
    6516:	strb.w	r9, [r1, #562]	; 0x232
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    651a:	mov.w	r9, #111	; 0x6f
      _s = s;
      _b = b;
    651e:	strb.w	r8, [r1, #560]	; 0x230
    6522:	mov.w	r8, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6526:	strb.w	r9, [r1, #564]	; 0x234
      _s = s;
    652a:	mvn.w	r9, #104	; 0x68
      _b = b;
    652e:	strb.w	r3, [r1, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6532:	mov.w	r3, #106	; 0x6a
    6536:	strb.w	r9, [r1, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    653a:	ldrb.w	r9, [sp, #32]
      _s = s;
      _b = b;
    653e:	strb.w	r8, [r1, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6542:	mov.w	r8, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6546:	strb.w	r9, [r1, #567]	; 0x237
      _s = s;
    654a:	mov.w	r9, #114	; 0x72
    654e:	strb.w	r0, [r1, #559]	; 0x22f
    6552:	strb.w	r9, [r1, #568]	; 0x238
    6556:	mov.w	r9, #115	; 0x73
    655a:	strb.w	r0, [r1, #583]	; 0x247
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    655e:	movs	r0, #142	; 0x8e
      _s = s;
    6560:	strb.w	r9, [r1, #577]	; 0x241
      _b = b;
    6564:	ldrb.w	r9, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6568:	strb.w	r3, [r1, #571]	; 0x23b
      _b = b;
    656c:	movs	r3, #161	; 0xa1
    656e:	strb.w	r9, [r1, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6572:	ldrb.w	r9, [sp, #48]	; 0x30
      _s = s;
      _b = b;
    6576:	strb.w	lr, [r1, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    657a:	mov.w	lr, #83	; 0x53
    657e:	strb.w	r8, [r1, #547]	; 0x223
    6582:	mov.w	r8, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6586:	strb.w	r9, [r1, #582]	; 0x246
    658a:	strb.w	r0, [r1, #585]	; 0x249
      _s = s;
    658e:	ldrb.w	r9, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6592:	strb.w	r0, [r1, #600]	; 0x258
      _s = s;
    6596:	strb.w	r9, [r1, #586]	; 0x24a
    659a:	mov.w	r9, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    659e:	ldr	r0, [sp, #12]
      _s = s;
    65a0:	strb.w	r9, [r1, #589]	; 0x24d
    65a4:	mov.w	r9, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65a8:	strb.w	ip, [r1, #591]	; 0x24f
      _s = s;
    65ac:	strb.w	r9, [r1, #595]	; 0x253
      _b = b;
    65b0:	mvn.w	r9, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65b4:	strb.w	sl, [r1, #601]	; 0x259
      _b = b;
    65b8:	strb.w	r9, [r1, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65bc:	mov.w	r9, #78	; 0x4e
      _b = b;
    65c0:	strb.w	ip, [r1, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65c4:	strb.w	r9, [r1, #604]	; 0x25c
      _b = b;
    65c8:	mvn.w	r9, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65cc:	strb.w	r0, [r1, #609]	; 0x261
      _s = s;
      _b = b;
    65d0:	strb.w	r9, [r1, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65d4:	mvn.w	r9, #122	; 0x7a
      _s = s;
    65d8:	strb.w	r7, [r1, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65dc:	movs	r7, #1
    65de:	strb.w	r9, [r1, #579]	; 0x243
    65e2:	strb.w	r9, [r1, #603]	; 0x25b
      _s = s;
    65e6:	mvn.w	r9, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ea:	strb.w	fp, [r1, #588]	; 0x24c
      _s = s;
    65ee:	strb.w	r9, [r1, #580]	; 0x244
      _b = b;
    65f2:	mvn.w	r9, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65f6:	strb.w	fp, [r1, #594]	; 0x252
      _s = s;
      _b = b;
    65fa:	strb.w	r9, [r1, #584]	; 0x248
    65fe:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6602:	strb.w	fp, [r1, #597]	; 0x255
      _s = s;
      _b = b;
    6606:	strb.w	r9, [r1, #587]	; 0x24b
    660a:	mvn.w	r9, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    660e:	strb.w	r4, [r1, #598]	; 0x256
      _b = b;
    6612:	strb.w	r9, [r1, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6616:	mvn.w	r9, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    661a:	strb.w	r4, [r1, #606]	; 0x25e
      _s = s;
      _b = b;
    661e:	movs	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6620:	strb.w	r9, [r1, #592]	; 0x250
      _b = b;
    6624:	mvn.w	r9, #38	; 0x26
    6628:	strb.w	fp, [r1, #611]	; 0x263
    662c:	strb.w	r9, [r1, #593]	; 0x251
    6630:	mvn.w	r9, #25
    6634:	strb.w	r9, [r1, #596]	; 0x254
    6638:	strb.w	r9, [r1, #602]	; 0x25a
    663c:	mvn.w	r9, #19
    6640:	strb.w	r9, [r1, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6644:	mov.w	r9, #93	; 0x5d
    6648:	strb.w	r9, [r1, #607]	; 0x25f
    664c:	mov.w	r9, #124	; 0x7c
    6650:	strb.w	r9, [r1, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6654:	mov.w	r9, #126	; 0x7e
      _s = s;
      _b = b;
    6658:	strb.w	r3, [r1, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    665c:	strb.w	r9, [r1, #615]	; 0x267
      _s = s;
    6660:	mov.w	r9, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6664:	strb.w	r3, [r1, #642]	; 0x282
    6668:	mov.w	r3, #123	; 0x7b
      _s = s;
    666c:	strb.w	r9, [r1, #616]	; 0x268
      _b = b;
    6670:	mvn.w	r9, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6674:	strb.w	r3, [r1, #618]	; 0x26a
      _s = s;
    6678:	mov.w	r3, #42	; 0x2a
      _b = b;
    667c:	strb.w	r9, [r1, #620]	; 0x26c
    6680:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6684:	strb.w	r3, [r1, #619]	; 0x26b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6688:	mvn.w	r3, #126	; 0x7e
      _s = s;
      _b = b;
    668c:	strb.w	r9, [r1, #623]	; 0x26f
    6690:	mvn.w	r9, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6694:	strb.w	r3, [r1, #621]	; 0x26d
      _s = s;
    6698:	mov.w	r3, #45	; 0x2d
      _b = b;
    669c:	strb.w	r9, [r1, #629]	; 0x275
    66a0:	mvn.w	r9, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66a4:	strb.w	r3, [r1, #625]	; 0x271
      _b = b;
    66a8:	mvn.w	r3, #66	; 0x42
    66ac:	strb.w	r9, [r1, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66b0:	mvn.w	r9, #5
      _b = b;
    66b4:	strb.w	r3, [r1, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66b8:	mvn.w	r3, #55	; 0x37
    66bc:	strb.w	r9, [r1, #634]	; 0x27a
    66c0:	strb.w	r3, [r1, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c4:	mvn.w	r3, #123	; 0x7b
    66c8:	ldrb.w	r9, [sp, #36]	; 0x24
    66cc:	strb.w	r3, [r1, #630]	; 0x276
      _s = s;
    66d0:	mvn.w	r3, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66d4:	strb.w	r9, [r1, #639]	; 0x27f
      _s = s;
      _b = b;
    66d8:	mvn.w	r9, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66dc:	strb.w	r3, [r1, #631]	; 0x277
      _b = b;
    66e0:	mvn.w	r3, #90	; 0x5a
    66e4:	strb.w	r9, [r1, #638]	; 0x27e
    66e8:	ldrb.w	r9, [sp, #48]	; 0x30
    66ec:	strb.w	r3, [r1, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66f0:	mvn.w	r3, #17
      _b = b;
    66f4:	strb.w	r9, [r1, #641]	; 0x281
    66f8:	mvn.w	r9, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66fc:	strb.w	r0, [r1, #612]	; 0x264
    6700:	strb.w	r0, [r1, #624]	; 0x270
    6704:	mvn.w	r0, #124	; 0x7c
      _s = s;
      _b = b;
    6708:	strb.w	r9, [r1, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    670c:	mvn.w	r9, #35	; 0x23
    6710:	strb.w	r3, [r1, #637]	; 0x27d
    6714:	mvn.w	r3, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6718:	strb.w	sl, [r1, #627]	; 0x273
    671c:	strb.w	r0, [r1, #633]	; 0x279
    6720:	strb.w	r0, [r1, #636]	; 0x27c
      _s = s;
      _b = b;
    6724:	movs	r0, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6726:	strb.w	r8, [r1, #622]	; 0x26e
    672a:	strb.w	r3, [r1, #640]	; 0x280
      _b = b;
    672e:	mvn.w	r3, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6732:	strb.w	lr, [r1, #643]	; 0x283
    6736:	strb.w	r9, [r1, #655]	; 0x28f
    673a:	mvn.w	r9, #45	; 0x2d
      _b = b;
    673e:	strb.w	r3, [r1, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6742:	mov.w	r3, #119	; 0x77
    6746:	strb.w	r9, [r1, #658]	; 0x292
      _b = b;
    674a:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    674e:	strb.w	r3, [r1, #646]	; 0x286
      _b = b;
    6752:	strb.w	r9, [r1, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6756:	mvn.w	r9, #120	; 0x78
      _s = s;
    675a:	ldrb.w	r3, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    675e:	strb.w	r9, [r1, #663]	; 0x297
      _s = s;
      _b = b;
    6762:	mvn.w	r9, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6766:	strb.w	r3, [r1, #649]	; 0x289
      _b = b;
    676a:	mov.w	r3, #112	; 0x70
    676e:	strb.w	r9, [r1, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6772:	mvn.w	r9, #121	; 0x79
      _s = s;
      _b = b;
    6776:	strb.w	lr, [r1, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    677a:	mov.w	lr, #141	; 0x8d
    677e:	strb.w	r9, [r1, #666]	; 0x29a
      _s = s;
    6782:	mvn.w	r9, #8
      _b = b;
    6786:	strb.w	r3, [r1, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    678a:	mvn.w	r3, #123	; 0x7b
    678e:	strb.w	r9, [r1, #667]	; 0x29b
    6792:	mvn.w	r9, #81	; 0x51
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6796:	strb.w	lr, [r1, #651]	; 0x28b
      _s = s;
    679a:	strb.w	r9, [r1, #670]	; 0x29e
      _b = b;
    679e:	mvn.w	r9, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67a2:	strb.w	r3, [r1, #652]	; 0x28c
      _b = b;
    67a6:	strb.w	r9, [r1, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67aa:	mvn.w	r9, #119	; 0x77
      _b = b;
    67ae:	ldrb.w	r3, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67b2:	strb.w	r9, [r1, #673]	; 0x2a1
    67b6:	mvn.w	r9, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67ba:	strb.w	lr, [r1, #654]	; 0x28e
      _s = s;
    67be:	strb.w	r9, [r1, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67c2:	mvn.w	r9, #15
    67c6:	strb.w	lr, [r1, #657]	; 0x291
    67ca:	mov	lr, r2
    67cc:	strb.w	r9, [r1, #645]	; 0x285
      _s = s;
      _b = b;
    67d0:	mvn.w	r9, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67d4:	strb.w	r2, [r1, #660]	; 0x294
      _s = s;
    67d8:	movs	r2, #142	; 0x8e
      _b = b;
    67da:	strb.w	r9, [r1, #656]	; 0x290
    67de:	mvn.w	r9, #56	; 0x38
    67e2:	strb.w	r3, [r1, #653]	; 0x28d
    67e6:	movs	r3, #249	; 0xf9
    67e8:	strb.w	r9, [r1, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67ec:	mvn.w	r9, #92	; 0x5c
    67f0:	strb.w	r2, [r1, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67f4:	strb.w	lr, [r1, #669]	; 0x29d
    67f8:	mov.w	lr, #138	; 0x8a
    67fc:	strb.w	r2, [r1, #672]	; 0x2a0
      _s = s;
    6800:	movs	r2, #246	; 0xf6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6802:	strb.w	fp, [r1, #675]	; 0x2a3
    6806:	strb.w	r7, [r1, #648]	; 0x288
      _s = s;
      _b = b;
    680a:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    680e:	strb.w	r9, [r1, #664]	; 0x298
      _b = b;
    6812:	mvn.w	r9, #29
    6816:	strb.w	r0, [r1, #689]	; 0x2b1
    681a:	strb.w	r9, [r1, #668]	; 0x29c
    681e:	mvn.w	r9, #50	; 0x32
    6822:	strb.w	r0, [r1, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6826:	mov.w	r0, #90	; 0x5a
      _b = b;
    682a:	strb.w	r9, [r1, #674]	; 0x2a2
    682e:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6832:	strb.w	lr, [r1, #678]	; 0x2a6
      _s = s;
      _b = b;
    6836:	strb.w	r9, [r1, #677]	; 0x2a5
    683a:	mvn.w	r9, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    683e:	strb.w	lr, [r1, #681]	; 0x2a9
      _s = s;
    6842:	mov.w	lr, #177	; 0xb1
      _b = b;
    6846:	strb.w	r9, [r1, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    684a:	mov.w	r9, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    684e:	strb.w	sl, [r1, #684]	; 0x2ac
      _s = s;
    6852:	strb.w	r9, [r1, #682]	; 0x2aa
      _b = b;
    6856:	mov.w	r9, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    685a:	strb.w	r0, [r1, #691]	; 0x2b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    685e:	movs	r0, #150	; 0x96
      _s = s;
      _b = b;
    6860:	strb.w	r9, [r1, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6864:	mvn.w	r9, #50	; 0x32
      _s = s;
      _b = b;
    6868:	strb.w	r4, [r1, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    686c:	strb.w	r9, [r1, #687]	; 0x2af
    6870:	strb.w	r9, [r1, #690]	; 0x2b2
    6874:	mov.w	r9, #97	; 0x61
    6878:	strb.w	r9, [r1, #696]	; 0x2b8
      _s = s;
    687c:	mov.w	r9, #42	; 0x2a
    6880:	strb.w	r9, [r1, #697]	; 0x2b9
      _b = b;
    6884:	mov.w	r9, #125	; 0x7d
    6888:	strb.w	r9, [r1, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    688c:	ldrb.w	r9, [sp, #12]
    6890:	strb.w	r9, [r1, #699]	; 0x2bb
      _s = s;
      _b = b;
    6894:	mvn.w	r9, #38	; 0x26
    6898:	strb.w	r9, [r1, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    689c:	mov.w	r9, #95	; 0x5f
    68a0:	strb.w	r9, [r1, #702]	; 0x2be
      _s = s;
      _b = b;
    68a4:	mvn.w	r9, #29
    68a8:	strb.w	r9, [r1, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68ac:	mvn.w	r9, #122	; 0x7a
    68b0:	strb.w	r9, [r1, #705]	; 0x2c1
    68b4:	strb.w	r9, [r1, #708]	; 0x2c4
      _s = s;
    68b8:	mvn.w	r9, #40	; 0x28
    68bc:	strb.w	r9, [r1, #685]	; 0x2ad
    68c0:	mov.w	r9, #70	; 0x46
    68c4:	strb.w	r9, [r1, #694]	; 0x2b6
    68c8:	mov.w	r9, #34	; 0x22
    68cc:	strb.w	r9, [r1, #700]	; 0x2bc
    68d0:	mov.w	r9, #13
    68d4:	strb.w	r9, [r1, #703]	; 0x2bf
    68d8:	mov.w	r9, #86	; 0x56
    68dc:	strb.w	r9, [r1, #679]	; 0x2a7
      _b = b;
    68e0:	mvn.w	r9, #32
    68e4:	strb.w	r9, [r1, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68e8:	mov.w	r9, #85	; 0x55
    68ec:	strb.w	r9, [r1, #688]	; 0x2b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68f0:	mvn.w	r9, #51	; 0x33
    68f4:	strb.w	r9, [r1, #693]	; 0x2b5
      _s = s;
    68f8:	mov.w	r9, #87	; 0x57
    68fc:	strb.w	lr, [r1, #715]	; 0x2cb
    6900:	strb.w	r9, [r1, #706]	; 0x2c2
      _b = b;
    6904:	mvn.w	r9, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6908:	strb.w	lr, [r1, #720]	; 0x2d0
      _s = s;
    690c:	mvn.w	lr, #66	; 0x42
      _b = b;
    6910:	strb.w	r9, [r1, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6914:	mvn.w	r9, #7
    6918:	strb.w	lr, [r1, #721]	; 0x2d1
    691c:	mov.w	lr, #115	; 0x73
    6920:	strb.w	r9, [r1, #709]	; 0x2c5
      _b = b;
    6924:	mvn.w	r9, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6928:	strb.w	ip, [r1, #714]	; 0x2ca
      _s = s;
      _b = b;
    692c:	mvn.w	ip, #30
    6930:	strb.w	r9, [r1, #710]	; 0x2c6
    6934:	mvn.w	r9, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6938:	strb.w	lr, [r1, #724]	; 0x2d4
      _b = b;
    693c:	mvn.w	lr, #5
    6940:	strb.w	r9, [r1, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6944:	mvn.w	r9, #123	; 0x7b
      _s = s;
      _b = b;
    6948:	strb.w	ip, [r1, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    694c:	mov.w	ip, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6950:	strb.w	r9, [r1, #711]	; 0x2c7
    6954:	mvn.w	r9, #72	; 0x48
      _s = s;
      _b = b;
    6958:	strb.w	r7, [r1, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    695c:	movs	r7, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    695e:	strb.w	r9, [r1, #723]	; 0x2d3
      _s = s;
    6962:	mvn.w	r9, #106	; 0x6a
      _b = b;
    6966:	strb.w	lr, [r1, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    696a:	mov.w	lr, #176	; 0xb0
      _s = s;
    696e:	strb.w	r9, [r1, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6972:	mvn.w	r9, #99	; 0x63
      _s = s;
    6976:	strb.w	sl, [r1, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    697a:	strb.w	r9, [r1, #717]	; 0x2cd
      _s = s;
    697e:	mov.w	r9, #91	; 0x5b
      _b = b;
    6982:	strb.w	r3, [r1, #722]	; 0x2d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6986:	strb.w	r9, [r1, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    698a:	mvn.w	r9, #71	; 0x47
      _s = s;
    698e:	strb.w	r3, [r6, #742]	; 0x2e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6992:	strb.w	r9, [r1, #726]	; 0x2d6
      _s = s;
    6996:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    699a:	mvn.w	r9, #114	; 0x72
      _s = s;
    699e:	strb.w	r1, [r6, #730]	; 0x2da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69a2:	mvn.w	r1, #93	; 0x5d
    69a6:	strb.w	r9, [r6, #735]	; 0x2df
      _s = s;
    69aa:	mvn.w	r9, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69ae:	strb.w	r1, [r6, #732]	; 0x2dc
      _s = s;
    69b2:	mvn.w	r1, #3
    69b6:	strb.w	r1, [r6, #733]	; 0x2dd
      _b = b;
    69ba:	mvn.w	r1, #54	; 0x36
    69be:	strb.w	r1, [r6, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69c2:	mvn.w	r1, #120	; 0x78
    69c6:	strb.w	r1, [r6, #741]	; 0x2e5
      _s = s;
      _b = b;
    69ca:	mvn.w	r1, #14
    69ce:	strb.w	r1, [r6, #728]	; 0x2d8
    69d2:	mvn.w	r1, #31
    69d6:	strb.w	r1, [r6, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69da:	mvn.w	r1, #103	; 0x67
    69de:	strb.w	r1, [r6, #729]	; 0x2d9
      _s = s;
      _b = b;
    69e2:	mvn.w	r1, #20
    69e6:	strb.w	r1, [r6, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69ea:	movs	r1, #121	; 0x79
    69ec:	strb.w	r9, [r6, #736]	; 0x2e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69f0:	mvn.w	r9, #124	; 0x7c
      _s = s;
      _b = b;
    69f4:	strb.w	r8, [r6, #773]	; 0x305
    69f8:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69fc:	strb.w	r9, [r6, #738]	; 0x2e2
      _s = s;
    6a00:	mvn.w	r9, #95	; 0x5f
      _b = b;
    6a04:	strb.w	r8, [r6, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a08:	mvn.w	r8, #64	; 0x40
      _s = s;
    6a0c:	strb.w	r9, [r6, #739]	; 0x2e3
      _b = b;
    6a10:	mvn.w	r9, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a14:	strb.w	r8, [r6, #765]	; 0x2fd
      _s = s;
      _b = b;
    6a18:	mov.w	r8, #21
    6a1c:	strb.w	r9, [r6, #740]	; 0x2e4
    6a20:	mvn.w	r9, #36	; 0x24
    6a24:	strb.w	r8, [r6, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a28:	mov.w	r8, #120	; 0x78
      _s = s;
      _b = b;
    6a2c:	strb.w	r9, [r6, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a30:	mov.w	r9, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a34:	strb.w	r8, [r6, #774]	; 0x306
      _s = s;
    6a38:	mov.w	r8, #71	; 0x47
    6a3c:	strb.w	r9, [r6, #754]	; 0x2f2
    6a40:	mov.w	r9, #85	; 0x55
    6a44:	strb.w	r8, [r6, #775]	; 0x307
    6a48:	mvn.w	r8, #38	; 0x26
    6a4c:	strb.w	r9, [r6, #757]	; 0x2f5
      _b = b;
    6a50:	mvn.w	r9, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a54:	strb.w	r8, [r6, #751]	; 0x2ef
      _b = b;
    6a58:	mvn.w	r8, #28
    6a5c:	strb.w	r9, [r6, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a60:	mvn.w	r9, #126	; 0x7e
      _b = b;
    6a64:	strb.w	r4, [r6, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a68:	mvn.w	r4, #50	; 0x32
      _s = s;
    6a6c:	strb.w	r9, [r6, #760]	; 0x2f8
      _b = b;
    6a70:	mvn.w	r9, #20
    6a74:	strb.w	r8, [r6, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a78:	mov.w	r8, #97	; 0x61
      _b = b;
    6a7c:	strb.w	r9, [r6, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a80:	mov.w	r9, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a84:	strb.w	r4, [r6, #771]	; 0x303
      _s = s;
      _b = b;
    6a88:	movs	r4, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a8a:	strb.w	r9, [r6, #769]	; 0x301
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a8e:	mvn.w	r9, #118	; 0x76
    6a92:	strb.w	fp, [r6, #750]	; 0x2ee
    6a96:	strb.w	r9, [r6, #744]	; 0x2e8
    6a9a:	strb.w	r9, [r6, #747]	; 0x2eb
      _s = s;
    6a9e:	mvn.w	r9, #62	; 0x3e
    6aa2:	strb.w	r8, [r6, #766]	; 0x2fe
      _b = b;
    6aa6:	mov.w	r8, #207	; 0xcf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6aaa:	strb.w	r9, [r6, #748]	; 0x2ec
      _b = b;
    6aae:	mvn.w	r9, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ab2:	strb.w	r2, [r6, #745]	; 0x2e9
      _b = b;
    6ab6:	strb.w	r9, [r6, #749]	; 0x2ed
    6aba:	mvn.w	r9, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6abe:	strb.w	r0, [r6, #756]	; 0x2f4
      _s = s;
      _b = b;
    6ac2:	strb.w	r9, [r6, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ac6:	strb.w	r9, [r6, #768]	; 0x300
    6aca:	mvn.w	r9, #112	; 0x70
    6ace:	strb.w	r9, [r6, #753]	; 0x2f1
    6ad2:	strb.w	r9, [r6, #759]	; 0x2f7
      _s = s;
    6ad6:	mvn.w	r9, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ada:	strb.w	r0, [r6, #762]	; 0x2fa
    6ade:	strb.w	lr, [r6, #798]	; 0x31e
      _s = s;
      _b = b;
    6ae2:	mvn.w	lr, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ae6:	strb.w	r9, [r6, #763]	; 0x2fb
      _b = b;
    6aea:	mvn.w	r9, #59	; 0x3b
    6aee:	strb.w	lr, [r6, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6af2:	mov.w	lr, #97	; 0x61
      _b = b;
    6af6:	strb.w	r9, [r6, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6afa:	mov.w	r9, #76	; 0x4c
    6afe:	strb.w	lr, [r6, #784]	; 0x310
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b02:	mvn.w	lr, #122	; 0x7a
      _s = s;
    6b06:	strb.w	r9, [r6, #772]	; 0x304
      _b = b;
    6b0a:	mvn.w	r9, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b0e:	strb.w	lr, [r6, #786]	; 0x312
      _s = s;
      _b = b;
    6b12:	mvn.w	lr, #5
    6b16:	strb.w	r9, [r6, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b1a:	mvn.w	r9, #126	; 0x7e
      _s = s;
      _b = b;
    6b1e:	strb.w	lr, [r6, #791]	; 0x317
    6b22:	strb.w	lr, [r6, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b26:	mov.w	lr, #113	; 0x71
    6b2a:	strb.w	r9, [r6, #783]	; 0x30f
      _s = s;
    6b2e:	mvn.w	r9, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b32:	strb.w	lr, [r6, #780]	; 0x30c
      _s = s;
    6b36:	mov.w	lr, #69	; 0x45
    6b3a:	strb.w	r9, [r6, #778]	; 0x30a
      _b = b;
    6b3e:	mvn.w	r9, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b42:	strb.w	lr, [r6, #781]	; 0x30d
    6b46:	strb.w	lr, [r6, #805]	; 0x325
      _b = b;
    6b4a:	mvn.w	lr, #117	; 0x75
    6b4e:	strb.w	r9, [r6, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b52:	mov.w	r9, #90	; 0x5a
      _b = b;
    6b56:	strb.w	lr, [r6, #785]	; 0x311
    6b5a:	mvn.w	lr, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b5e:	strb.w	r9, [r6, #787]	; 0x313
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b62:	mvn.w	r9, #91	; 0x5b
      _s = s;
      _b = b;
    6b66:	strb.w	lr, [r6, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b6a:	mvn.w	lr, #111	; 0x6f
    6b6e:	strb.w	r9, [r6, #795]	; 0x31b
      _s = s;
    6b72:	mov.w	r9, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b76:	strb.w	lr, [r6, #789]	; 0x315
    6b7a:	mvn.w	lr, #107	; 0x6b
      _s = s;
    6b7e:	strb.w	r9, [r6, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b82:	mvn.w	r9, #71	; 0x47
    6b86:	strb.w	lr, [r6, #792]	; 0x318
      _s = s;
    6b8a:	mov.w	lr, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b8e:	strb.w	r9, [r6, #804]	; 0x324
    6b92:	mvn.w	r9, #68	; 0x44
      _s = s;
    6b96:	strb.w	ip, [r6, #790]	; 0x316
    6b9a:	mvn.w	ip, #42	; 0x2a
    6b9e:	strb.w	lr, [r6, #793]	; 0x319
      _b = b;
    6ba2:	mvn.w	lr, #4
    6ba6:	strb.w	r3, [r6, #803]	; 0x323
    6baa:	strb.w	r2, [r6, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bae:	strb.w	r9, [r6, #807]	; 0x327
    6bb2:	mvn.w	r9, #95	; 0x5f
      _s = s;
    6bb6:	strb.w	r7, [r6, #808]	; 0x328
    6bba:	movs	r7, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bbc:	strb.w	sl, [r6, #777]	; 0x309
      _s = s;
      _b = b;
    6bc0:	strb.w	lr, [r6, #794]	; 0x31a
    6bc4:	strb.w	lr, [r6, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bc8:	mvn.w	lr, #69	; 0x45
      _s = s;
    6bcc:	strb.w	ip, [r6, #814]	; 0x32e
      _b = b;
    6bd0:	mvn.w	ip, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bd4:	strb.w	lr, [r6, #801]	; 0x321
      _s = s;
    6bd8:	mov.w	lr, #103	; 0x67
      _b = b;
    6bdc:	strb.w	ip, [r6, #815]	; 0x32f
    6be0:	mvn.w	ip, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6be4:	strb.w	lr, [r6, #802]	; 0x322
      _b = b;
    6be8:	mvn.w	lr, #10
    6bec:	strb.w	ip, [r6, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bf0:	mvn.w	ip, #120	; 0x78
      _s = s;
      _b = b;
    6bf4:	strb.w	lr, [r6, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bf8:	mvn.w	lr, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bfc:	strb.w	ip, [r6, #819]	; 0x333
      _s = s;
    6c00:	mvn.w	ip, #104	; 0x68
    6c04:	strb.w	lr, [r6, #817]	; 0x331
    6c08:	mvn.w	lr, #51	; 0x33
    6c0c:	strb.w	ip, [r6, #820]	; 0x334
    6c10:	mvn.w	ip, #70	; 0x46
    6c14:	strb.w	lr, [r6, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c18:	mvn.w	lr, #117	; 0x75
      _s = s;
    6c1c:	strb.w	ip, [r6, #826]	; 0x33a
      _b = b;
    6c20:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c24:	strb.w	lr, [r6, #828]	; 0x33c
    6c28:	mvn.w	lr, #112	; 0x70
      _s = s;
      _b = b;
    6c2c:	strb.w	ip, [r6, #833]	; 0x341
    6c30:	mvn.w	ip, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c34:	strb.w	lr, [r6, #831]	; 0x33f
      _s = s;
    6c38:	mov.w	lr, #91	; 0x5b
      _b = b;
    6c3c:	strb.w	ip, [r6, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c40:	mvn.w	ip, #3
    6c44:	strb.w	lr, [r6, #832]	; 0x340
      _b = b;
    6c48:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c4c:	strb.w	ip, [r6, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c50:	mvn.w	ip, #109	; 0x6d
      _s = s;
    6c54:	strb.w	r0, [r6, #811]	; 0x32b
      _b = b;
    6c58:	mvn.w	r0, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c5c:	strb.w	ip, [r6, #813]	; 0x32d
    6c60:	mvn.w	ip, #116	; 0x74
      _s = s;
      _b = b;
    6c64:	strb.w	lr, [r6, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c68:	mvn.w	lr, #103	; 0x67
    6c6c:	strb.w	ip, [r6, #822]	; 0x336
    6c70:	strb.w	ip, [r6, #837]	; 0x345
      _s = s;
      _b = b;
    6c74:	mvn.w	ip, #58	; 0x3a
    6c78:	strb.w	r0, [r6, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c7c:	mvn.w	r0, #123	; 0x7b
    6c80:	strb.w	lr, [r6, #840]	; 0x348
    6c84:	mvn.w	lr, #87	; 0x57
      _s = s;
      _b = b;
    6c88:	strb.w	ip, [r6, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c8c:	mvn.w	ip, #113	; 0x71
      _s = s;
    6c90:	strb.w	r1, [r6, #799]	; 0x31f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c94:	strb.w	r0, [r6, #816]	; 0x330
    6c98:	movs	r0, #181	; 0xb5
    6c9a:	strb.w	lr, [r6, #810]	; 0x32a
      _s = s;
    6c9e:	mov.w	lr, #68	; 0x44
      _b = b;
    6ca2:	strb.w	r4, [r6, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ca6:	movs	r4, #88	; 0x58
    6ca8:	strb.w	r7, [r6, #835]	; 0x343
      _b = b;
    6cac:	strb.w	r8, [r6, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cb0:	strb.w	ip, [r6, #825]	; 0x339
      _s = s;
    6cb4:	strb.w	ip, [r6, #838]	; 0x346
      _b = b;
    6cb8:	mvn.w	ip, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cbc:	strb.w	r9, [r6, #867]	; 0x363
      _s = s;
      _b = b;
    6cc0:	mvn.w	r9, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cc4:	strb.w	r1, [r6, #858]	; 0x35a
    6cc8:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    6ccc:	strb.w	r9, [r6, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cd0:	mvn.w	r9, #107	; 0x6b
    6cd4:	strb.w	r1, [r6, #843]	; 0x34b
      _s = s;
    6cd8:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cdc:	strb.w	r9, [r6, #870]	; 0x366
    6ce0:	mvn.w	r9, #90	; 0x5a
      _s = s;
    6ce4:	strb.w	r1, [r6, #844]	; 0x34c
      _b = b;
    6ce8:	mvn.w	r1, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cec:	strb.w	r9, [r6, #873]	; 0x369
    6cf0:	mvn.w	r9, #100	; 0x64
      _s = s;
      _b = b;
    6cf4:	strb.w	r1, [r6, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cf8:	mvn.w	r1, #107	; 0x6b
    6cfc:	strb.w	r9, [r6, #864]	; 0x360
    6d00:	mvn.w	r9, #122	; 0x7a
    6d04:	strb.w	r1, [r6, #846]	; 0x34e
    6d08:	strb.w	r9, [r6, #849]	; 0x351
      _s = s;
      _b = b;
    6d0c:	mvn.w	r9, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d10:	strb.w	r1, [r6, #847]	; 0x34f
    6d14:	strb.w	r1, [r6, #850]	; 0x352
      _b = b;
    6d18:	mov.w	r1, #103	; 0x67
    6d1c:	strb.w	r9, [r6, #854]	; 0x356
    6d20:	mvn.w	r9, #23
    6d24:	strb.w	r1, [r6, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d28:	mvn.w	r1, #55	; 0x37
      _b = b;
    6d2c:	strb.w	r9, [r6, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d30:	mvn.w	r9, #119	; 0x77
      _s = s;
    6d34:	strb.w	r1, [r6, #856]	; 0x358
      _b = b;
    6d38:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d3c:	strb.w	r9, [r6, #861]	; 0x35d
      _s = s;
      _b = b;
    6d40:	mvn.w	r9, #5
    6d44:	strb.w	ip, [r6, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d48:	mvn.w	ip, #80	; 0x50
      _b = b;
    6d4c:	strb.w	r1, [r6, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d50:	mvn.w	r1, #50	; 0x32
      _b = b;
    6d54:	strb.w	r9, [r6, #866]	; 0x362
    6d58:	mvn.w	r9, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d5c:	strb.w	ip, [r6, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d60:	mvn.w	ip, #97	; 0x61
      _s = s;
    6d64:	strb.w	r1, [r6, #862]	; 0x35e
      _b = b;
    6d68:	mvn.w	r1, #11
    6d6c:	strb.w	r9, [r6, #872]	; 0x368
    6d70:	mov.w	r9, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d74:	strb.w	ip, [r6, #834]	; 0x342
      _s = s;
      _b = b;
    6d78:	mvn.w	ip, #18
    6d7c:	strb.w	r1, [r6, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d80:	mov.w	r1, #45	; 0x2d
      _b = b;
    6d84:	strb.w	r9, [r6, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d88:	mvn.w	r9, #127	; 0x7f
      _s = s;
      _b = b;
    6d8c:	strb.w	ip, [r6, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d90:	mov.w	ip, #75	; 0x4b
    6d94:	strb.w	r1, [r6, #865]	; 0x361
      _b = b;
    6d98:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d9a:	strb.w	sl, [r6, #852]	; 0x354
      _s = s;
    6d9e:	strb.w	r7, [r6, #853]	; 0x355
    6da2:	strb.w	fp, [r6, #874]	; 0x36a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6da6:	strb.w	r9, [r6, #855]	; 0x357
      _s = s;
    6daa:	mov.w	r9, #119	; 0x77
      _b = b;
    6dae:	strb.w	r3, [r6, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6db2:	strb.w	r9, [r6, #859]	; 0x35b
    6db6:	mov.w	r9, #79	; 0x4f
      _b = b;
    6dba:	strb.w	r2, [r6, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6dbe:	strb.w	r9, [r6, #868]	; 0x364
    6dc2:	mov.w	r9, #124	; 0x7c
    6dc6:	strb.w	r3, [r6, #895]	; 0x37f
    6dca:	strb.w	r9, [r6, #871]	; 0x367
      _b = b;
    6dce:	mvn.w	r9, #7
    6dd2:	strb.w	r8, [r6, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dd6:	mov.w	r8, #153	; 0x99
      _s = s;
      _b = b;
    6dda:	strb.w	r9, [r6, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dde:	mvn.w	r9, #62	; 0x3e
    6de2:	strb.w	r0, [r6, #876]	; 0x36c
      _s = s;
    6de6:	movs	r0, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6de8:	strb.w	r9, [r6, #879]	; 0x36f
    6dec:	mvn.w	r9, #59	; 0x3b
    6df0:	strb.w	fp, [r6, #897]	; 0x381
    6df4:	strb.w	r9, [r6, #882]	; 0x372
    6df8:	mvn.w	r9, #57	; 0x39
      _s = s;
    6dfc:	strb.w	lr, [r6, #877]	; 0x36d
    6e00:	mov.w	lr, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e04:	strb.w	r9, [r6, #885]	; 0x375
    6e08:	mvn.w	r9, #73	; 0x49
      _s = s;
    6e0c:	strb.w	r4, [r6, #880]	; 0x370
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e10:	movs	r4, #145	; 0x91
    6e12:	strb.w	r9, [r6, #888]	; 0x378
      _s = s;
      _b = b;
    6e16:	mvn.w	r9, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e1a:	strb.w	ip, [r6, #883]	; 0x373
      _b = b;
    6e1e:	mov.w	ip, #233	; 0xe9
    6e22:	strb.w	r9, [r6, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e26:	mvn.w	r9, #95	; 0x5f
    6e2a:	strb.w	r9, [r6, #891]	; 0x37b
      _s = s;
    6e2e:	mvn.w	r9, #10
    6e32:	strb.w	r9, [r6, #892]	; 0x37c
      _b = b;
    6e36:	mvn.w	r9, #58	; 0x3a
    6e3a:	strb.w	r9, [r6, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e3e:	mvn.w	r9, #26
    6e42:	strb.w	r9, [r6, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e46:	mvn.w	r9, #118	; 0x76
    6e4a:	strb.w	r9, [r6, #900]	; 0x384
      _s = s;
    6e4e:	mvn.w	r9, #51	; 0x33
    6e52:	strb.w	r9, [r6, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e56:	mvn.w	r9, #114	; 0x72
    6e5a:	strb.w	r9, [r6, #903]	; 0x387
      _s = s;
    6e5e:	mvn.w	r9, #68	; 0x44
    6e62:	strb.w	r9, [r6, #904]	; 0x388
      _b = b;
    6e66:	mvn.w	r9, #66	; 0x42
    6e6a:	strb.w	r9, [r6, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e6e:	mvn.w	r9, #116	; 0x74
    6e72:	strb.w	r9, [r6, #906]	; 0x38a
      _s = s;
    6e76:	mvn.w	r9, #124	; 0x7c
    6e7a:	strb.w	r9, [r6, #907]	; 0x38b
      _b = b;
    6e7e:	mvn.w	r9, #3
    6e82:	strb.w	r9, [r6, #878]	; 0x36e
    6e86:	mvn.w	r9, #5
    6e8a:	strb.w	r9, [r6, #881]	; 0x371
    6e8e:	mvn.w	r9, #42	; 0x2a
    6e92:	strb.w	r9, [r6, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e96:	mov.w	r9, #177	; 0xb1
      _s = s;
      _b = b;
    6e9a:	strb.w	r1, [r6, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e9e:	mov.w	r1, #58	; 0x3a
    6ea2:	strb.w	r0, [r6, #913]	; 0x391
    6ea6:	mov.w	r0, #98	; 0x62
    6eaa:	strb.w	r1, [r6, #886]	; 0x376
    6eae:	mov.w	r1, #74	; 0x4a
    6eb2:	strb.w	r0, [r6, #940]	; 0x3ac
    6eb6:	mvn.w	r0, #37	; 0x25
    6eba:	strb.w	r1, [r6, #889]	; 0x379
      _b = b;
    6ebe:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ec2:	strb.w	r0, [r6, #916]	; 0x394
      _b = b;
    6ec6:	mvn.w	r0, #16
    6eca:	strb.w	r1, [r6, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ece:	mov.w	r1, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ed2:	strb.w	r8, [r6, #894]	; 0x37e
      _s = s;
    6ed6:	strb.w	r1, [r6, #910]	; 0x38e
      _b = b;
    6eda:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ede:	strb.w	fp, [r6, #909]	; 0x38d
      _s = s;
      _b = b;
    6ee2:	strb.w	r1, [r6, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ee6:	mvn.w	r1, #103	; 0x67
    6eea:	strb.w	sl, [r6, #930]	; 0x3a2
    6eee:	strb.w	r1, [r6, #912]	; 0x390
      _s = s;
      _b = b;
    6ef2:	mvn.w	r1, #26
    6ef6:	strb.w	r2, [r6, #938]	; 0x3aa
    6efa:	strb.w	r1, [r6, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6efe:	mvn.w	r1, #107	; 0x6b
      _s = s;
    6f02:	strb.w	lr, [r6, #922]	; 0x39a
    6f06:	mov.w	lr, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f0a:	strb.w	r1, [r6, #918]	; 0x396
      _s = s;
    6f0e:	mvn.w	r1, #20
      _b = b;
    6f12:	strb.w	ip, [r6, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f16:	strb.w	r1, [r6, #919]	; 0x397
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f1a:	mvn.w	r1, #112	; 0x70
    6f1e:	strb.w	r4, [r6, #915]	; 0x393
    6f22:	strb.w	r1, [r6, #921]	; 0x399
      _s = s;
      _b = b;
    6f26:	mvn.w	r1, #32
    6f2a:	strb.w	r1, [r6, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f2e:	mvn.w	r1, #112	; 0x70
    6f32:	strb.w	r1, [r6, #924]	; 0x39c
      _s = s;
    6f36:	mvn.w	r1, #66	; 0x42
    6f3a:	strb.w	r1, [r6, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f3e:	mvn.w	r1, #113	; 0x71
    6f42:	strb.w	r1, [r6, #927]	; 0x39f
      _s = s;
    6f46:	mvn.w	r1, #3
    6f4a:	strb.w	r1, [r6, #928]	; 0x3a0
      _b = b;
    6f4e:	mvn.w	r1, #57	; 0x39
    6f52:	strb.w	r1, [r6, #929]	; 0x3a1
    6f56:	mvn.w	r1, #29
    6f5a:	strb.w	r1, [r6, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f5e:	mvn.w	r1, #127	; 0x7f
    6f62:	strb.w	r1, [r6, #933]	; 0x3a5
    6f66:	mvn.w	r1, #123	; 0x7b
    6f6a:	strb.w	r1, [r6, #936]	; 0x3a8
      _s = s;
    6f6e:	mvn.w	r1, #127	; 0x7f
    6f72:	strb.w	r1, [r6, #937]	; 0x3a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f76:	mvn.w	r1, #98	; 0x62
    6f7a:	strb.w	r1, [r6, #939]	; 0x3ab
      _s = s;
    6f7e:	mvn.w	r1, #60	; 0x3c
    6f82:	strb.w	r1, [r6, #934]	; 0x3a6
    6f86:	movs	r1, #116	; 0x74
      _b = b;
    6f88:	strb.w	r0, [r6, #920]	; 0x398
    6f8c:	mov.w	r0, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f90:	strb.w	r1, [r6, #931]	; 0x3a3
      _b = b;
    6f94:	strb.w	r0, [r6, #926]	; 0x39e
    6f98:	mvn.w	r0, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f9c:	strb.w	r1, [r6, #949]	; 0x3b5
    6fa0:	mvn.w	r1, #106	; 0x6a
      _b = b;
    6fa4:	strb.w	r0, [r6, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fa8:	mvn.w	r0, #91	; 0x5b
      _s = s;
    6fac:	strb.w	r1, [r6, #952]	; 0x3b8
    6fb0:	mov.w	r1, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fb4:	strb.w	r0, [r6, #945]	; 0x3b1
      _s = s;
    6fb8:	mov.w	r0, #115	; 0x73
    6fbc:	strb.w	r1, [r6, #955]	; 0x3bb
      _b = b;
    6fc0:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6fc4:	strb.w	r0, [r6, #946]	; 0x3b2
      _b = b;
    6fc8:	mvn.w	r0, #18
    6fcc:	strb.w	r1, [r6, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fd0:	mvn.w	r1, #68	; 0x44
      _s = s;
      _b = b;
    6fd4:	strb.w	r0, [r6, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fd8:	mvn.w	r0, #90	; 0x5a
    6fdc:	strb.w	r1, [r6, #957]	; 0x3bd
      _s = s;
      _b = b;
    6fe0:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fe4:	strb.w	r0, [r6, #948]	; 0x3b4
    6fe8:	mvn.w	r0, #61	; 0x3d
      _s = s;
    6fec:	strb.w	r7, [r6, #958]	; 0x3be
      _b = b;
    6ff0:	mvn.w	r7, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ff4:	strb.w	r0, [r6, #960]	; 0x3c0
      _s = s;
    6ff8:	mov.w	r0, #79	; 0x4f
      _b = b;
    6ffc:	strb.w	r2, [r6, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7000:	strb.w	r0, [r6, #961]	; 0x3c1
    7004:	strb.w	r0, [r6, #964]	; 0x3c4
      _b = b;
    7008:	mvn.w	r0, #15
    700c:	strb.w	r1, [r6, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7010:	movs	r1, #173	; 0xad
      _s = s;
      _b = b;
    7012:	strb.w	r0, [r6, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7016:	mvn.w	r0, #122	; 0x7a
      _b = b;
    701a:	strb.w	r2, [r6, #962]	; 0x3c2
    701e:	movs	r2, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7020:	strb.w	r0, [r6, #967]	; 0x3c7
      _b = b;
    7024:	mvn.w	r0, #16
    7028:	strb.w	r7, [r6, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    702c:	mvn.w	r7, #99	; 0x63
      _s = s;
      _b = b;
    7030:	strb.w	r0, [r6, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7034:	mvn.w	r0, #97	; 0x61
      _s = s;
      _b = b;
    7038:	strb.w	r3, [r6, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    703c:	strb.w	r0, [r6, #969]	; 0x3c9
      _s = s;
    7040:	mvn.w	r0, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7044:	strb.w	r7, [r6, #972]	; 0x3cc
    7048:	mvn.w	r7, #63	; 0x3f
      _s = s;
    704c:	strb.w	r0, [r6, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7050:	movs	r0, #166	; 0xa6
      _s = s;
    7052:	strb.w	r3, [r6, #973]	; 0x3cd
    7056:	strb.w	lr, [r6, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    705a:	mov.w	lr, #178	; 0xb2
    705e:	strb.w	r9, [r6, #954]	; 0x3ba
      _s = s;
      _b = b;
    7062:	mov.w	r9, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7066:	strb.w	r1, [r6, #942]	; 0x3ae
      _s = s;
      _b = b;
    706a:	strb.w	r2, [r6, #950]	; 0x3b6
    706e:	strb.w	r2, [r6, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7072:	strb.w	r3, [r6, #976]	; 0x3d0
      _b = b;
    7076:	mvn.w	r3, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    707a:	strb.w	r7, [r6, #963]	; 0x3c3
      _s = s;
      _b = b;
    707e:	mvn.w	r7, #71	; 0x47
    7082:	strb.w	r3, [r6, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7086:	mvn.w	r3, #118	; 0x76
      _s = s;
      _b = b;
    708a:	strb.w	r9, [r6, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    708e:	mvn.w	r9, #104	; 0x68
    7092:	strb.w	r3, [r6, #978]	; 0x3d2
      _s = s;
      _b = b;
    7096:	mvn.w	r3, #75	; 0x4b
    709a:	strb.w	r7, [r6, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    709e:	mvn.w	r7, #111	; 0x6f
      _s = s;
      _b = b;
    70a2:	strb.w	r3, [r6, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70a6:	mvn.w	r3, #124	; 0x7c
    70aa:	strb.w	r9, [r6, #987]	; 0x3db
      _s = s;
    70ae:	mov.w	r9, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70b2:	strb.w	r3, [r6, #981]	; 0x3d5
      _s = s;
      _b = b;
    70b6:	mvn.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ba:	strb.w	r7, [r6, #975]	; 0x3cf
      _s = s;
    70be:	mov.w	r7, #58	; 0x3a
      _b = b;
    70c2:	strb.w	r3, [r6, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70c6:	mvn.w	r3, #117	; 0x75
      _s = s;
    70ca:	strb.w	r9, [r6, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ce:	mvn.w	r9, #104	; 0x68
    70d2:	strb.w	r3, [r6, #984]	; 0x3d8
      _s = s;
      _b = b;
    70d6:	mvn.w	r3, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70da:	strb.w	r7, [r6, #1003]	; 0x3eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70de:	mvn.w	r7, #112	; 0x70
      _s = s;
      _b = b;
    70e2:	strb.w	r3, [r6, #986]	; 0x3da
    70e6:	mvn.w	r3, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ea:	strb.w	r9, [r6, #990]	; 0x3de
      _s = s;
    70ee:	mvn.w	r9, #61	; 0x3d
      _b = b;
    70f2:	strb.w	r3, [r6, #992]	; 0x3e0
    70f6:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70fa:	strb.w	r7, [r6, #1005]	; 0x3ed
      _s = s;
    70fe:	mov.w	r7, #105	; 0x69
      _b = b;
    7102:	strb.w	r3, [r6, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7106:	mvn.w	r3, #113	; 0x71
      _s = s;
    710a:	strb.w	r9, [r6, #991]	; 0x3df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    710e:	mvn.w	r9, #104	; 0x68
      _s = s;
      _b = b;
    7112:	strb.w	ip, [r6, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7116:	mov.w	ip, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    711a:	strb.w	r3, [r6, #999]	; 0x3e7
      _s = s;
    711e:	mov.w	r3, #91	; 0x5b
    7122:	strb.w	r7, [r6, #985]	; 0x3d9
    7126:	movs	r7, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7128:	strb.w	r9, [r6, #996]	; 0x3e4
      _s = s;
      _b = b;
    712c:	mvn.w	r9, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7130:	strb.w	r0, [r6, #951]	; 0x3b7
    7134:	strb.w	lr, [r6, #966]	; 0x3c6
    7138:	strb.w	r8, [r6, #993]	; 0x3e1
      _s = s;
    713c:	mov.w	r8, #52	; 0x34
    7140:	strb.w	ip, [r6, #997]	; 0x3e5
    7144:	mov.w	ip, #174	; 0xae
    7148:	strb.w	r3, [r6, #1000]	; 0x3e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    714c:	movs	r3, #170	; 0xaa
      _s = s;
      _b = b;
    714e:	strb.w	r1, [r6, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7152:	strb.w	fp, [r6, #979]	; 0x3d3
    7156:	str	r7, [sp, #4]
    7158:	mvn.w	r7, #127	; 0x7f
      _b = b;
    715c:	strb.w	r9, [r6, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7160:	mvn.w	r9, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7164:	strb.w	r4, [r6, #1026]	; 0x402
      _s = s;
    7168:	mvn.w	r4, #80	; 0x50
    716c:	strb.w	r9, [r6, #1006]	; 0x3ee
    7170:	mov.w	r9, #108	; 0x6c
    7174:	strb.w	r4, [r6, #1027]	; 0x403
      _b = b;
    7178:	mvn.w	r4, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    717c:	strb.w	r9, [r6, #982]	; 0x3d6
    7180:	mvn.w	r9, #39	; 0x27
      _b = b;
    7184:	strb.w	r4, [r6, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7188:	mvn.w	r4, #106	; 0x6a
      _s = s;
    718c:	strb.w	r9, [r6, #994]	; 0x3e2
      _b = b;
    7190:	mvn.w	r9, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7194:	strb.w	r4, [r6, #1029]	; 0x405
      _s = s;
    7198:	mvn.w	r4, #109	; 0x6d
      _b = b;
    719c:	strb.w	r9, [r6, #1007]	; 0x3ef
    71a0:	mvn.w	r9, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71a4:	strb.w	r4, [r6, #1030]	; 0x406
      _b = b;
    71a8:	mvn.w	r4, #10
    71ac:	strb.w	r9, [r6, #1013]	; 0x3f5
    71b0:	mvn.w	r9, #36	; 0x24
    71b4:	strb.w	r4, [r6, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71b8:	mvn.w	r4, #92	; 0x5c
      _b = b;
    71bc:	strb.w	r9, [r6, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71c0:	mvn.w	r9, #93	; 0x5d
    71c4:	strb.w	r4, [r6, #1033]	; 0x409
      _b = b;
    71c8:	mvn.w	r4, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71cc:	strb.w	r9, [r6, #1012]	; 0x3f4
      _b = b;
    71d0:	mvn.w	r9, #4
    71d4:	strb.w	r4, [r6, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71d8:	mvn.w	r4, #73	; 0x49
      _s = s;
      _b = b;
    71dc:	strb.w	r9, [r6, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71e0:	mvn.w	r9, #97	; 0x61
      _s = s;
    71e4:	strb.w	lr, [r6, #1024]	; 0x400
      _b = b;
    71e8:	mvn.w	lr, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71ec:	strb.w	r9, [r6, #1017]	; 0x3f9
      _s = s;
      _b = b;
    71f0:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71f4:	strb.w	r4, [r6, #1035]	; 0x40b
      _s = s;
    71f8:	mvn.w	r4, #57	; 0x39
      _b = b;
    71fc:	strb.w	r9, [r6, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7200:	mvn.w	r9, #114	; 0x72
    7204:	strb.w	fp, [r6, #1002]	; 0x3ea
    7208:	strb.w	r9, [r6, #1020]	; 0x3fc
      _s = s;
      _b = b;
    720c:	mvn.w	r9, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7210:	strb.w	r7, [r6, #1009]	; 0x3f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7214:	mvn.w	r7, #97	; 0x61
      _s = s;
      _b = b;
    7218:	strb.w	r9, [r6, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    721c:	mvn.w	r9, #116	; 0x74
      _s = s;
      _b = b;
    7220:	strb.w	lr, [r6, #1025]	; 0x401
    7224:	mov.w	lr, #221	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7228:	strb.w	r9, [r6, #1023]	; 0x3ff
      _s = s;
      _b = b;
    722c:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7230:	strb.w	r4, [r6, #1036]	; 0x40c
      _b = b;
    7234:	movs	r4, #225	; 0xe1
    7236:	strb.w	r9, [r6, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    723a:	mvn.w	r9, #55	; 0x37
    723e:	strb.w	sl, [r6, #1011]	; 0x3f3
    7242:	strb.w	r9, [r6, #1038]	; 0x40e
    7246:	mvn.w	r9, #120	; 0x78
    724a:	strb.w	r9, [r6, #1008]	; 0x3f0
    724e:	mvn.w	r9, #122	; 0x7a
    7252:	strb.w	r9, [r6, #1014]	; 0x3f6
    7256:	mov.w	r9, #200	; 0xc8
    725a:	str.w	r9, [sp, #24]
      _s = s;
      _b = b;
    725e:	strb.w	r0, [r6, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7262:	mvn.w	r0, #111	; 0x6f
    7266:	ldrb.w	r9, [sp, #32]
    726a:	strb.w	r0, [r6, #1054]	; 0x41e
      _b = b;
    726e:	mvn.w	r0, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7272:	strb.w	r9, [r6, #1018]	; 0x3fa
      _b = b;
    7276:	mov.w	r9, #229	; 0xe5
    727a:	strb.w	r0, [r6, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    727e:	mvn.w	r0, #90	; 0x5a
      _b = b;
    7282:	str.w	r9, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7286:	mov.w	r9, #114	; 0x72
    728a:	strb.w	r0, [r6, #1057]	; 0x421
      _b = b;
    728e:	mvn.w	r0, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7292:	strb.w	r9, [r6, #1039]	; 0x40f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7296:	mov.w	r9, #234	; 0xea
      _s = s;
      _b = b;
    729a:	strb.w	r0, [r6, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    729e:	mvn.w	r0, #103	; 0x67
      _s = s;
    72a2:	strb.w	r8, [r6, #1015]	; 0x3f7
    72a6:	mov.w	r8, #236	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72aa:	strb.w	r0, [r6, #1059]	; 0x423
      _s = s;
    72ae:	mvn.w	r0, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72b2:	str.w	r9, [sp, #8]
      _s = s;
    72b6:	mvn.w	r9, #95	; 0x5f
    72ba:	str.w	r8, [sp, #28]
      _b = b;
    72be:	mvn.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72c2:	strb.w	r0, [r6, #1060]	; 0x424
      _b = b;
    72c6:	mvn.w	r0, #59	; 0x3b
    72ca:	strb.w	r8, [r6, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72ce:	mvn.w	r8, #54	; 0x36
      _s = s;
    72d2:	strb.w	r9, [r6, #1045]	; 0x415
      _b = b;
    72d6:	mvn.w	r9, #50	; 0x32
    72da:	strb.w	r0, [r6, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72de:	mvn.w	r0, #109	; 0x6d
    72e2:	strb.w	r8, [r6, #1041]	; 0x411
      _s = s;
    72e6:	mov.w	r8, #104	; 0x68
      _b = b;
    72ea:	strb.w	r9, [r6, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72ee:	mov.w	r9, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72f2:	strb.w	r0, [r6, #1062]	; 0x426
      _s = s;
    72f6:	mvn.w	r0, #127	; 0x7f
    72fa:	strb.w	ip, [r6, #1021]	; 0x3fd
      _b = b;
    72fe:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7302:	strb.w	r8, [r6, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7306:	mvn.w	r8, #75	; 0x4b
      _s = s;
    730a:	strb.w	r9, [r6, #1048]	; 0x418
      _b = b;
    730e:	mvn.w	r9, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7312:	strb.w	r7, [r6, #1050]	; 0x41a
      _s = s;
    7316:	mvn.w	r7, #70	; 0x46
    731a:	strb.w	r0, [r6, #1063]	; 0x427
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    731e:	mvn.w	r0, #97	; 0x61
      _s = s;
      _b = b;
    7322:	str.w	ip, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7326:	mov.w	ip, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    732a:	strb.w	r3, [r6, #1032]	; 0x408
    732e:	strb.w	r8, [r6, #1044]	; 0x414
      _s = s;
    7332:	mov.w	r8, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7336:	strb.w	sl, [r6, #1047]	; 0x417
      _s = s;
      _b = b;
    733a:	strb.w	r9, [r6, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    733e:	mov.w	r9, #117	; 0x75
      _s = s;
    7342:	strb.w	r7, [r6, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7346:	strb.w	r7, [r6, #1053]	; 0x41d
      _s = s;
    734a:	movs	r7, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    734c:	strb.w	r0, [r6, #1065]	; 0x429
      _s = s;
    7350:	mvn.w	r0, #4
    7354:	strb.w	fp, [r6, #1072]	; 0x430
      _b = b;
    7358:	mvn.w	fp, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    735c:	strb.w	r0, [r6, #1066]	; 0x42a
      _b = b;
    7360:	mvn.w	r0, #41	; 0x29
    7364:	strb.w	fp, [r6, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7368:	mvn.w	fp, #112	; 0x70
      _s = s;
      _b = b;
    736c:	strb.w	r0, [r6, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7370:	mvn.w	r0, #97	; 0x61
    7374:	strb.w	fp, [r6, #1086]	; 0x43e
      _s = s;
    7378:	mvn.w	fp, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    737c:	strb.w	r0, [r6, #1068]	; 0x42c
      _s = s;
    7380:	mvn.w	r0, #4
    7384:	strb.w	fp, [r6, #1087]	; 0x43f
      _b = b;
    7388:	mvn.w	fp, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    738c:	strb.w	r0, [r6, #1069]	; 0x42d
      _b = b;
    7390:	mvn.w	r0, #28
    7394:	strb.w	fp, [r6, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7398:	mvn.w	fp, #124	; 0x7c
      _s = s;
      _b = b;
    739c:	strb.w	r0, [r6, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73a0:	mvn.w	r0, #92	; 0x5c
    73a4:	strb.w	fp, [r6, #1089]	; 0x441
      _s = s;
    73a8:	mov.w	fp, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73ac:	strb.w	r0, [r6, #1071]	; 0x42f
      _s = s;
      _b = b;
    73b0:	mvn.w	r0, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73b4:	strb.w	fp, [r6, #1090]	; 0x442
      _b = b;
    73b8:	mvn.w	fp, #51	; 0x33
    73bc:	strb.w	r0, [r6, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73c0:	mvn.w	r0, #86	; 0x56
      _s = s;
      _b = b;
    73c4:	strb.w	fp, [r6, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73c8:	mvn.w	fp, #120	; 0x78
    73cc:	strb.w	r0, [r6, #1056]	; 0x420
      _s = s;
      _b = b;
    73d0:	mvn.w	r0, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73d4:	strb.w	fp, [r6, #1092]	; 0x444
      _s = s;
    73d8:	mov.w	fp, #90	; 0x5a
      _b = b;
    73dc:	strb.w	r0, [r6, #1064]	; 0x428
    73e0:	mvn.w	r0, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73e4:	strb.w	fp, [r6, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e8:	mvn.w	fp, #111	; 0x6f
      _s = s;
      _b = b;
    73ec:	strb.w	r0, [r6, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73f0:	mov.w	r0, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73f4:	strb.w	fp, [r6, #1095]	; 0x447
      _s = s;
    73f8:	mvn.w	fp, #37	; 0x25
    73fc:	strb.w	r0, [r6, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7400:	mvn.w	r0, #75	; 0x4b
      _s = s;
    7404:	strb.w	fp, [r6, #1096]	; 0x448
      _b = b;
    7408:	mvn.w	fp, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    740c:	strb.w	r0, [r6, #1074]	; 0x432
      _s = s;
      _b = b;
    7410:	mvn.w	r0, #17
    7414:	strb.w	fp, [r6, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7418:	mvn.w	fp, #117	; 0x75
      _s = s;
      _b = b;
    741c:	strb.w	r0, [r6, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7420:	mvn.w	r0, #91	; 0x5b
      _s = s;
      _b = b;
    7424:	strb.w	r2, [r6, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7428:	strb.w	r0, [r6, #1077]	; 0x435
    742c:	mvn.w	r0, #113	; 0x71
    7430:	strb.w	r0, [r6, #1080]	; 0x438
      _s = s;
    7434:	mov.w	r0, #74	; 0x4a
    7438:	strb.w	r0, [r6, #1081]	; 0x439
      _b = b;
    743c:	mvn.w	r0, #18
    7440:	strb.w	r0, [r6, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7444:	mvn.w	r0, #117	; 0x75
    7448:	strb.w	r0, [r6, #1083]	; 0x43b
    744c:	movs	r0, #190	; 0xbe
    744e:	strb.w	fp, [r6, #1098]	; 0x44a
      _s = s;
    7452:	mvn.w	fp, #84	; 0x54
      _b = b;
    7456:	strb.w	r4, [r6, #1094]	; 0x446
    745a:	strb.w	r4, [r6, #1112]	; 0x458
    745e:	mvn.w	r4, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7462:	strb.w	fp, [r6, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7466:	mvn.w	fp, #117	; 0x75
      _s = s;
      _b = b;
    746a:	strb.w	r4, [r6, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    746e:	mov.w	r4, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7472:	strb.w	fp, [r6, #1101]	; 0x44d
      _s = s;
    7476:	mvn.w	fp, #25
    747a:	strb.w	r4, [r6, #1117]	; 0x45d
      _b = b;
    747e:	mvn.w	r4, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7482:	strb.w	fp, [r6, #1102]	; 0x44e
      _b = b;
    7486:	mvn.w	fp, #43	; 0x2b
    748a:	strb.w	r4, [r6, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    748e:	mvn.w	r4, #70	; 0x46
      _s = s;
      _b = b;
    7492:	strb.w	fp, [r6, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7496:	mvn.w	fp, #116	; 0x74
    749a:	strb.w	r4, [r6, #1119]	; 0x45f
      _s = s;
    749e:	mov.w	r4, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74a2:	strb.w	fp, [r6, #1104]	; 0x450
      _s = s;
    74a6:	mvn.w	fp, #84	; 0x54
    74aa:	strb.w	r4, [r6, #1120]	; 0x460
    74ae:	mov.w	r4, #31
    74b2:	strb.w	fp, [r6, #1105]	; 0x451
    74b6:	mov.w	fp, #109	; 0x6d
    74ba:	strb.w	r4, [r6, #1123]	; 0x463
      _b = b;
    74be:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74c2:	strb.w	fp, [r6, #1078]	; 0x436
    74c6:	mov.w	fp, #73	; 0x49
      _b = b;
    74ca:	strb.w	r4, [r6, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ce:	mvn.w	r4, #104	; 0x68
      _s = s;
    74d2:	strb.w	fp, [r6, #1084]	; 0x43c
      _b = b;
    74d6:	mvn.w	fp, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74da:	strb.w	r4, [r6, #1125]	; 0x465
      _s = s;
      _b = b;
    74de:	mov.w	r4, #111	; 0x6f
    74e2:	strb.w	fp, [r6, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74e6:	mvn.w	fp, #106	; 0x6a
      _s = s;
      _b = b;
    74ea:	strb.w	r4, [r6, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ee:	mvn.w	r4, #96	; 0x60
    74f2:	strb.w	fp, [r6, #1110]	; 0x456
    74f6:	mvn.w	fp, #113	; 0x71
    74fa:	strb.w	r4, [r6, #1128]	; 0x468
      _s = s;
      _b = b;
    74fe:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7502:	strb.w	fp, [r6, #1107]	; 0x453
      _s = s;
    7506:	mvn.w	fp, #84	; 0x54
      _b = b;
    750a:	strb.w	r4, [r6, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    750e:	mvn.w	r4, #53	; 0x35
      _s = s;
    7512:	strb.w	fp, [r6, #1108]	; 0x454
    7516:	mvn.w	fp, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    751a:	strb.w	r4, [r6, #1131]	; 0x46b
      _s = s;
    751e:	mov.w	r4, #47	; 0x2f
      _b = b;
    7522:	strb.w	lr, [r6, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7526:	mov.w	lr, #102	; 0x66
      _s = s;
    752a:	strb.w	r4, [r6, #1132]	; 0x46c
      _b = b;
    752e:	mvn.w	r4, #51	; 0x33
    7532:	strb.w	r2, [r6, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7536:	strb.w	fp, [r6, #1111]	; 0x457
    753a:	mov.w	fp, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    753e:	strb.w	r3, [r6, #1113]	; 0x459
    7542:	movs	r3, #80	; 0x50
    7544:	strb.w	r1, [r6, #1116]	; 0x45c
      _s = s;
      _b = b;
    7548:	movs	r1, #179	; 0xb3
    754a:	strb.w	r4, [r6, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    754e:	mvn.w	r4, #56	; 0x38
      _s = s;
    7552:	strb.w	r8, [r6, #1129]	; 0x469
      _b = b;
    7556:	mvn.w	r8, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    755a:	strb.w	r4, [r6, #1134]	; 0x46e
      _s = s;
      _b = b;
    755e:	mvn.w	r4, #28
    7562:	strb.w	r8, [r6, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7566:	mvn.w	r8, #92	; 0x5c
      _s = s;
      _b = b;
    756a:	strb.w	r4, [r6, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    756e:	mvn.w	r4, #73	; 0x49
    7572:	strb.w	r8, [r6, #1140]	; 0x474
      _s = s;
    7576:	mvn.w	r8, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    757a:	strb.w	r4, [r6, #1137]	; 0x471
      _s = s;
    757e:	mvn.w	r4, #86	; 0x56
    7582:	strb.w	r8, [r6, #1141]	; 0x475
      _b = b;
    7586:	mvn.w	r8, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    758a:	strb.w	sl, [r6, #1135]	; 0x46f
      _b = b;
    758e:	strb.w	r8, [r6, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7592:	mvn.w	r8, #90	; 0x5a
      _s = s;
    7596:	strb.w	r4, [r6, #1138]	; 0x472
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    759a:	movs	r4, #17
    759c:	strb.w	r8, [r6, #1143]	; 0x477
      _s = s;
    75a0:	mvn.w	r8, #32
    75a4:	strb.w	fp, [r6, #1126]	; 0x466
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75a8:	mvn.w	fp, #122	; 0x7a
      _s = s;
    75ac:	strb.w	r8, [r6, #1144]	; 0x478
      _b = b;
    75b0:	mvn.w	r8, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    75b4:	strb.w	ip, [r6, #1114]	; 0x45a
      _b = b;
    75b8:	strb.w	r8, [r6, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75bc:	mvn.w	r8, #97	; 0x61
      _s = s;
      _b = b;
    75c0:	strb.w	ip, [r6, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75c4:	strb.w	r8, [r6, #1146]	; 0x47a
      _s = s;
    75c8:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75cc:	strb.w	r9, [r6, #1122]	; 0x462
      _s = s;
    75d0:	strb.w	r8, [r6, #1147]	; 0x47b
      _b = b;
    75d4:	mvn.w	r8, #19
    75d8:	strb.w	r2, [r6, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75dc:	movs	r2, #203	; 0xcb
      _s = s;
      _b = b;
    75de:	strb.w	r8, [r6, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    75e2:	mov.w	r8, #119	; 0x77
    75e6:	strb.w	r8, [r6, #1150]	; 0x47e
      _b = b;
    75ea:	mvn.w	r8, #16
    75ee:	strb.w	r8, [r6, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75f2:	mvn.w	r8, #66	; 0x42
    75f6:	strb.w	r8, [r6, #1152]	; 0x480
      _s = s;
    75fa:	mvn.w	r8, #92	; 0x5c
    75fe:	strb.w	r8, [r6, #1153]	; 0x481
      _b = b;
    7602:	mvn.w	r8, #21
    7606:	strb.w	r8, [r6, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    760a:	mvn.w	r8, #71	; 0x47
    760e:	strb.w	r8, [r6, #1155]	; 0x483
      _s = s;
    7612:	mvn.w	r8, #80	; 0x50
    7616:	strb.w	r8, [r6, #1156]	; 0x484
      _b = b;
    761a:	mvn.w	r8, #10
    761e:	strb.w	r8, [r6, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7622:	mvn.w	r8, #119	; 0x77
    7626:	strb.w	r8, [r6, #1161]	; 0x489
      _s = s;
    762a:	mov.w	r8, #42	; 0x2a
    762e:	strb.w	r8, [r6, #1162]	; 0x48a
      _b = b;
    7632:	mvn.w	r8, #19
    7636:	strb.w	r8, [r6, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    763a:	mvn.w	r8, #114	; 0x72
    763e:	strb.w	r8, [r6, #1164]	; 0x48c
      _s = s;
    7642:	mov.w	r8, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7646:	strb.w	r0, [r6, #1149]	; 0x47d
      _s = s;
    764a:	strb.w	r8, [r6, #1165]	; 0x48d
      _b = b;
    764e:	mvn.w	r8, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7652:	strb.w	r0, [r6, #1186]	; 0x4a2
      _b = b;
    7656:	mvn.w	r0, #19
    765a:	strb.w	r8, [r6, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    765e:	mvn.w	r8, #116	; 0x74
      _s = s;
      _b = b;
    7662:	strb.w	r0, [r6, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7666:	mvn.w	r0, #109	; 0x6d
    766a:	strb.w	r8, [r6, #1167]	; 0x48f
      _s = s;
    766e:	mvn.w	r8, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7672:	strb.w	r0, [r6, #1188]	; 0x4a4
      _s = s;
    7676:	mvn.w	r0, #103	; 0x67
    767a:	strb.w	r8, [r6, #1168]	; 0x490
      _b = b;
    767e:	mvn.w	r8, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7682:	strb.w	r0, [r6, #1189]	; 0x4a5
      _b = b;
    7686:	mvn.w	r0, #21
    768a:	strb.w	r8, [r6, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    768e:	mvn.w	r8, #88	; 0x58
      _s = s;
      _b = b;
    7692:	strb.w	r0, [r6, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7696:	mvn.w	r0, #93	; 0x5d
    769a:	strb.w	r8, [r6, #1158]	; 0x486
      _s = s;
    769e:	mov.w	r8, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76a2:	strb.w	r0, [r6, #1191]	; 0x4a7
      _s = s;
    76a6:	mvn.w	r0, #51	; 0x33
    76aa:	strb.w	r8, [r6, #1159]	; 0x487
      _b = b;
    76ae:	mvn.w	r8, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76b2:	strb.w	r0, [r6, #1192]	; 0x4a8
      _b = b;
    76b6:	mvn.w	r0, #46	; 0x2e
    76ba:	strb.w	r8, [r6, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76be:	mvn.w	r8, #123	; 0x7b
      _s = s;
      _b = b;
    76c2:	strb.w	r0, [r6, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76c6:	mov.w	r0, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ca:	strb.w	r8, [r6, #1173]	; 0x495
      _s = s;
    76ce:	mvn.w	r8, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76d2:	strb.w	sl, [r6, #1170]	; 0x492
      _s = s;
      _b = b;
    76d6:	mov.w	sl, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76da:	strb.w	r8, [r6, #1174]	; 0x496
      _b = b;
    76de:	mvn.w	r8, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76e2:	strb.w	r7, [r6, #1171]	; 0x493
      _b = b;
    76e6:	movs	r7, #166	; 0xa6
    76e8:	strb.w	r8, [r6, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ec:	mvn.w	r8, #113	; 0x71
    76f0:	strb.w	r8, [r6, #1176]	; 0x498
      _s = s;
    76f4:	mvn.w	r8, #116	; 0x74
    76f8:	strb.w	r8, [r6, #1177]	; 0x499
      _b = b;
    76fc:	mvn.w	r8, #15
    7700:	strb.w	r8, [r6, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7704:	mvn.w	r8, #107	; 0x6b
    7708:	strb.w	r8, [r6, #1179]	; 0x49b
      _s = s;
    770c:	mvn.w	r8, #117	; 0x75
    7710:	strb.w	r8, [r6, #1180]	; 0x49c
      _b = b;
    7714:	mvn.w	r8, #20
    7718:	strb.w	r8, [r6, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    771c:	mvn.w	r8, #113	; 0x71
    7720:	strb.w	r8, [r6, #1182]	; 0x49e
      _s = s;
    7724:	mvn.w	r8, #59	; 0x3b
    7728:	strb.w	r8, [r6, #1183]	; 0x49f
      _b = b;
    772c:	mvn.w	r8, #42	; 0x2a
    7730:	strb.w	r8, [r6, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7734:	mvn.w	r8, #118	; 0x76
    7738:	strb.w	r8, [r6, #1185]	; 0x4a1
    773c:	strb.w	ip, [r6, #1194]	; 0x4aa
      _s = s;
      _b = b;
    7740:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7744:	strb.w	r0, [r6, #1195]	; 0x4ab
      _b = b;
    7748:	mvn.w	r0, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    774c:	strb.w	r3, [r6, #1200]	; 0x4b0
      _s = s;
    7750:	movs	r3, #99	; 0x63
      _b = b;
    7752:	strb.w	r0, [r6, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7756:	mov.w	r0, #103	; 0x67
    775a:	strb.w	r3, [r6, #1213]	; 0x4bd
    775e:	strb.w	r0, [r6, #1198]	; 0x4ae
      _b = b;
    7762:	mov.w	r0, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7766:	strb.w	r3, [r6, #1225]	; 0x4c9
      _b = b;
    776a:	mvn.w	r3, #15
    776e:	strb.w	r0, [r6, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7772:	mov.w	r0, #111	; 0x6f
      _b = b;
    7776:	strb.w	r3, [r6, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    777a:	mvn.w	r3, #55	; 0x37
      _s = s;
    777e:	strb.w	r0, [r6, #1201]	; 0x4b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7782:	mvn.w	r0, #113	; 0x71
    7786:	strb.w	r3, [r6, #1227]	; 0x4cb
      _s = s;
    778a:	mov.w	r3, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    778e:	strb.w	r0, [r6, #1203]	; 0x4b3
      _s = s;
    7792:	mov.w	r0, #58	; 0x3a
    7796:	strb.w	r3, [r6, #1216]	; 0x4c0
    779a:	mov.w	r3, #67	; 0x43
    779e:	strb.w	r0, [r6, #1204]	; 0x4b4
      _b = b;
    77a2:	mov.w	r0, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    77a6:	strb.w	r3, [r6, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77aa:	mov.w	r3, #18
      _s = s;
      _b = b;
    77ae:	strb.w	r0, [r6, #1205]	; 0x4b5
    77b2:	mvn.w	r0, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77b6:	strb.w	r3, [r6, #1206]	; 0x4b6
      _s = s;
    77ba:	mov.w	r3, #94	; 0x5e
      _b = b;
    77be:	strb.w	r0, [r6, #1220]	; 0x4c4
    77c2:	mvn.w	r0, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    77c6:	strb.w	r3, [r6, #1210]	; 0x4ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ca:	mvn.w	r3, #83	; 0x53
      _s = s;
      _b = b;
    77ce:	strb.w	r0, [r6, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    77d2:	mov.w	r0, #74	; 0x4a
      _b = b;
    77d6:	strb.w	r9, [r6, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77da:	mov.w	r9, #85	; 0x55
      _s = s;
    77de:	strb.w	r0, [r6, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77e2:	mvn.w	r0, #51	; 0x33
    77e6:	strb.w	lr, [r6, #1197]	; 0x4ad
      _s = s;
      _b = b;
    77ea:	mov.w	lr, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77ee:	strb.w	r0, [r6, #1212]	; 0x4bc
      _s = s;
      _b = b;
    77f2:	mvn.w	r0, #37	; 0x25
    77f6:	strb.w	r1, [r6, #1208]	; 0x4b8
    77fa:	movs	r1, #226	; 0xe2
    77fc:	strb.w	r0, [r6, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7800:	mvn.w	r0, #43	; 0x2b
    7804:	strb.w	r4, [r6, #1209]	; 0x4b9
    7808:	movs	r4, #55	; 0x37
    780a:	strb.w	r0, [r6, #1215]	; 0x4bf
      _s = s;
      _b = b;
    780e:	mvn.w	r0, #25
    7812:	strb.w	r0, [r6, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7816:	mvn.w	r0, #70	; 0x46
    781a:	strb.w	r0, [r6, #1218]	; 0x4c2
    781e:	mvn.w	r0, #96	; 0x60
    7822:	strb.w	r0, [r6, #1221]	; 0x4c5
      _s = s;
    7826:	mvn.w	r0, #18
    782a:	strb.w	r0, [r6, #1222]	; 0x4c6
      _b = b;
    782e:	mvn.w	r0, #24
    7832:	strb.w	r0, [r6, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7836:	movs	r0, #213	; 0xd5
    7838:	strb.w	r3, [r6, #1224]	; 0x4c8
      _s = s;
    783c:	mov.w	r3, #60	; 0x3c
      _b = b;
    7840:	strb.w	ip, [r5, #1232]	; 0x4d0
    7844:	strb.w	ip, [r5, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7848:	mvn.w	ip, #75	; 0x4b
    784c:	strb.w	r3, [r6, #1228]	; 0x4cc
      _b = b;
    7850:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7854:	strb.w	ip, [r5, #1267]	; 0x4f3
      _b = b;
    7858:	mvn.w	ip, #18
    785c:	strb.w	r3, [r6, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7860:	mvn.w	r3, #49	; 0x31
      _s = s;
      _b = b;
    7864:	strb.w	ip, [r5, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7868:	mov.w	ip, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    786c:	strb.w	r3, [r6, #1230]	; 0x4ce
      _s = s;
    7870:	mov.w	r3, #58	; 0x3a
    7874:	strb.w	ip, [r5, #1270]	; 0x4f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7878:	mvn.w	ip, #112	; 0x70
      _s = s;
    787c:	strb.w	r3, [r6, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7880:	mvn.w	r3, #62	; 0x3e
    7884:	strb.w	ip, [r5, #1239]	; 0x4d7
      _s = s;
    7888:	mov.w	ip, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    788c:	strb.w	r3, [r6, #1233]	; 0x4d1
      _s = s;
    7890:	mvn.w	r3, #18
    7894:	strb.w	ip, [r5, #1240]	; 0x4d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7898:	mvn.w	ip, #120	; 0x78
      _s = s;
    789c:	strb.w	r3, [r6, #1234]	; 0x4d2
      _b = b;
    78a0:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78a4:	strb.w	ip, [r5, #1242]	; 0x4da
      _s = s;
    78a8:	mov.w	ip, #40	; 0x28
      _b = b;
    78ac:	strb.w	r3, [r5, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78b0:	mvn.w	r3, #75	; 0x4b
      _s = s;
    78b4:	strb.w	ip, [r5, #1243]	; 0x4db
      _b = b;
    78b8:	mvn.w	ip, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78bc:	strb.w	r3, [r5, #1236]	; 0x4d4
      _s = s;
    78c0:	mov.w	r3, #78	; 0x4e
      _b = b;
    78c4:	strb.w	ip, [r5, #1244]	; 0x4dc
    78c8:	movs	r6, #47	; 0x2f
    78ca:	strb.w	ip, [r5, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78ce:	mvn.w	ip, #6
    78d2:	strb.w	r3, [r5, #1237]	; 0x4d5
      _b = b;
    78d6:	mvn.w	r3, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78da:	strb.w	ip, [r5, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78de:	mvn.w	ip, #126	; 0x7e
      _s = s;
      _b = b;
    78e2:	strb.w	r3, [r5, #1238]	; 0x4d6
    78e6:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78ea:	strb.w	ip, [r5, #1248]	; 0x4e0
      _s = s;
    78ee:	mvn.w	ip, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78f2:	strb.w	fp, [r5, #1251]	; 0x4e3
      _s = s;
    78f6:	mov.w	fp, #100	; 0x64
    78fa:	strb.w	ip, [r5, #1249]	; 0x4e1
      _b = b;
    78fe:	ldrb.w	ip, [sp, #28]
    7902:	strb.w	r3, [r5, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7906:	movs	r3, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7908:	strb.w	r8, [r5, #1245]	; 0x4dd
    790c:	strb.w	r8, [r5, #1263]	; 0x4ef
      _s = s;
      _b = b;
    7910:	mvn.w	r8, #22
    7914:	strb.w	sl, [r5, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7918:	strb.w	sl, [r5, #1258]	; 0x4ea
      _b = b;
    791c:	strb.w	ip, [r5, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7920:	mov.w	ip, #177	; 0xb1
      _s = s;
    7924:	strb.w	fp, [r5, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7928:	mvn.w	fp, #111	; 0x6f
    792c:	strb.w	r9, [r5, #1278]	; 0x4fe
      _s = s;
      _b = b;
    7930:	mov.w	r9, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7934:	strb.w	fp, [r5, #1254]	; 0x4e6
    7938:	strb.w	fp, [r5, #1269]	; 0x4f5
      _s = s;
    793c:	mov.w	fp, #125	; 0x7d
      _b = b;
    7940:	strb.w	r9, [r5, #1286]	; 0x506
    7944:	mvn.w	r9, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7948:	strb.w	fp, [r5, #1255]	; 0x4e7
      _b = b;
    794c:	mvn.w	fp, #28
    7950:	strb.w	r9, [r5, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7954:	mov.w	r9, #44	; 0x2c
      _s = s;
      _b = b;
    7958:	strb.w	fp, [r5, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    795c:	mvn.w	fp, #108	; 0x6c
    7960:	strb.w	r9, [r5, #1275]	; 0x4fb
      _s = s;
      _b = b;
    7964:	mov.w	r9, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7968:	strb.w	fp, [r5, #1257]	; 0x4e9
    796c:	mvn.w	fp, #103	; 0x67
      _s = s;
      _b = b;
    7970:	strb.w	r9, [r5, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7974:	mov.w	r9, #108	; 0x6c
    7978:	strb.w	fp, [r5, #1260]	; 0x4ec
      _s = s;
    797c:	mvn.w	fp, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7980:	strb.w	r9, [r5, #1281]	; 0x501
      _s = s;
    7984:	mvn.w	r9, #82	; 0x52
    7988:	strb.w	fp, [r5, #1261]	; 0x4ed
    798c:	mvn.w	fp, #95	; 0x5f
      _b = b;
    7990:	strb.w	r8, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7994:	strb.w	fp, [r5, #1264]	; 0x4f0
      _b = b;
    7998:	mvn.w	fp, #16
    799c:	strb.w	r8, [r5, #1301]	; 0x515
    79a0:	strb.w	fp, [r5, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79a4:	mvn.w	fp, #109	; 0x6d
      _s = s;
      _b = b;
    79a8:	strb.w	r7, [r5, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79ac:	movs	r7, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79ae:	strb.w	fp, [r5, #1266]	; 0x4f2
      _s = s;
      _b = b;
    79b2:	mvn.w	fp, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79b6:	strb.w	r0, [r5, #1290]	; 0x50a
    79ba:	movs	r0, #12
      _s = s;
      _b = b;
    79bc:	strb.w	fp, [r5, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79c0:	mov.w	fp, #94	; 0x5e
      _b = b;
    79c4:	strb.w	r1, [r5, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79c8:	movs	r1, #207	; 0xcf
    79ca:	strb.w	fp, [r5, #1273]	; 0x4f9
    79ce:	mvn.w	fp, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79d2:	strb.w	r2, [r5, #1296]	; 0x510
      _s = s;
      _b = b;
    79d6:	movs	r2, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79d8:	strb.w	fp, [r5, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79dc:	mov.w	fp, #18
    79e0:	strb.w	r4, [r5, #1272]	; 0x4f8
    79e4:	strb.w	fp, [r5, #1284]	; 0x504
    79e8:	mvn.w	fp, #95	; 0x5f
      _s = s;
      _b = b;
    79ec:	strb.w	lr, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79f0:	strb.w	fp, [r5, #1299]	; 0x513
      _s = s;
    79f4:	mvn.w	fp, #75	; 0x4b
    79f8:	strb.w	lr, [r5, #1303]	; 0x517
      _b = b;
    79fc:	mvn.w	lr, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a00:	strb.w	fp, [r5, #1300]	; 0x514
    7a04:	mvn.w	fp, #33	; 0x21
    7a08:	strb.w	fp, [r5, #1276]	; 0x4fc
    7a0c:	mvn.w	fp, #94	; 0x5e
    7a10:	strb.w	r9, [r5, #1282]	; 0x502
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a14:	mov.w	r9, #142	; 0x8e
      _s = s;
    7a18:	strb.w	fp, [r5, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a1c:	ldrb.w	fp, [sp, #44]	; 0x2c
      _s = s;
    7a20:	strb.w	r4, [r5, #1318]	; 0x526
      _b = b;
    7a24:	mvn.w	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a28:	strb.w	fp, [r5, #1287]	; 0x507
      _s = s;
    7a2c:	mov.w	fp, #95	; 0x5f
      _b = b;
    7a30:	strb.w	r4, [r5, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a34:	mvn.w	r4, #126	; 0x7e
      _s = s;
    7a38:	strb.w	fp, [r5, #1288]	; 0x508
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a3c:	mvn.w	fp, #39	; 0x27
    7a40:	strb.w	r4, [r5, #1320]	; 0x528
      _s = s;
      _b = b;
    7a44:	mvn.w	r4, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a48:	strb.w	fp, [r5, #1293]	; 0x50d
      _s = s;
    7a4c:	mov.w	fp, #33	; 0x21
      _b = b;
    7a50:	strb.w	r4, [r5, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a54:	mvn.w	r4, #126	; 0x7e
      _s = s;
    7a58:	strb.w	fp, [r5, #1294]	; 0x50e
      _b = b;
    7a5c:	ldrb.w	fp, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a60:	strb.w	r4, [r5, #1326]	; 0x52e
      _s = s;
    7a64:	mvn.w	r4, #95	; 0x5f
      _b = b;
    7a68:	strb.w	fp, [r5, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a6c:	mov.w	fp, #41	; 0x29
    7a70:	strb.w	r4, [r5, #1327]	; 0x52f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a74:	mvn.w	r4, #108	; 0x6c
      _s = s;
    7a78:	strb.w	fp, [r5, #1297]	; 0x511
      _b = b;
    7a7c:	ldrb.w	fp, [sp, #16]
    7a80:	strb.w	r6, [r5, #1283]	; 0x503
    7a84:	strb.w	fp, [r5, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a88:	mvn.w	fp, #59	; 0x3b
      _s = s;
    7a8c:	strb.w	r3, [r5, #1291]	; 0x50b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a90:	strb.w	fp, [r5, #1302]	; 0x516
      _s = s;
      _b = b;
    7a94:	mvn.w	fp, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a98:	strb.w	r3, [r5, #1309]	; 0x51d
      _b = b;
    7a9c:	strb.w	fp, [r5, #1304]	; 0x518
    7aa0:	strb.w	fp, [r5, #1307]	; 0x51b
    7aa4:	mvn.w	fp, #17
    7aa8:	strb.w	lr, [r5, #1313]	; 0x521
    7aac:	strb.w	fp, [r5, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab0:	mvn.w	fp, #59	; 0x3b
      _s = s;
      _b = b;
    7ab4:	strb.w	lr, [r5, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab8:	strb.w	fp, [r5, #1311]	; 0x51f
    7abc:	mvn.w	fp, #109	; 0x6d
      _s = s;
      _b = b;
    7ac0:	strb.w	lr, [r5, #1331]	; 0x533
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ac4:	strb.w	fp, [r5, #1317]	; 0x525
    7ac8:	mvn.w	fp, #65	; 0x41
      _s = s;
      _b = b;
    7acc:	strb.w	lr, [r5, #1334]	; 0x536
    7ad0:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ad4:	strb.w	r4, [r5, #1335]	; 0x537
      _s = s;
    7ad8:	movs	r4, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ada:	strb.w	ip, [r5, #1314]	; 0x522
      _s = s;
    7ade:	mov.w	ip, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ae2:	strb.w	fp, [r5, #1305]	; 0x519
      _s = s;
    7ae6:	mov.w	fp, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7aea:	strb.w	r6, [r5, #1350]	; 0x546
      _s = s;
    7aee:	mvn.w	r6, #84	; 0x54
    7af2:	strb.w	fp, [r5, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7af6:	mvn.w	fp, #41	; 0x29
      _s = s;
    7afa:	strb.w	r6, [r5, #1354]	; 0x54a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7afe:	mvn.w	r6, #22
    7b02:	strb.w	fp, [r5, #1308]	; 0x51c
      _s = s;
    7b06:	strb.w	fp, [r5, #1312]	; 0x520
    7b0a:	mov.w	fp, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b0e:	strb.w	r6, [r5, #1359]	; 0x54f
    7b12:	mov.w	r6, #18
      _s = s;
    7b16:	strb.w	fp, [r5, #1315]	; 0x523
    7b1a:	mov.w	fp, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b1e:	strb.w	r6, [r5, #1362]	; 0x552
      _s = s;
    7b22:	mvn.w	r6, #49	; 0x31
    7b26:	strb.w	fp, [r5, #1321]	; 0x529
      _b = b;
    7b2a:	ldrb.w	fp, [sp, #20]
    7b2e:	ldr.w	r8, [sp]
    7b32:	strb.w	fp, [r5, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b36:	mvn.w	fp, #121	; 0x79
      _s = s;
    7b3a:	strb.w	r6, [r5, #1363]	; 0x553
    7b3e:	mov.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b42:	strb.w	fp, [r5, #1323]	; 0x52b
      _s = s;
    7b46:	mvn.w	fp, #5
    7b4a:	strb.w	r3, [r5, #1369]	; 0x559
      _b = b;
    7b4e:	mov.w	r3, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b52:	strb.w	fp, [r5, #1324]	; 0x52c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b56:	mvn.w	fp, #124	; 0x7c
      _s = s;
      _b = b;
    7b5a:	strb.w	r8, [r5, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b5e:	strb.w	fp, [r5, #1329]	; 0x531
      _s = s;
    7b62:	mov.w	fp, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b66:	strb.w	sl, [r5, #1341]	; 0x53d
      _s = s;
    7b6a:	strb.w	fp, [r5, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b6e:	mvn.w	fp, #119	; 0x77
      _s = s;
    7b72:	strb.w	r6, [r5, #1366]	; 0x556
    7b76:	movs	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b78:	strb.w	fp, [r5, #1332]	; 0x534
      _s = s;
    7b7c:	mov.w	fp, #99	; 0x63
    7b80:	strb.w	r7, [r5, #1342]	; 0x53e
    7b84:	movs	r7, #96	; 0x60
    7b86:	strb.w	fp, [r5, #1333]	; 0x535
    7b8a:	mov.w	fp, #103	; 0x67
      _b = b;
    7b8e:	strb.w	r3, [r5, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b92:	movs	r3, #114	; 0x72
      _s = s;
    7b94:	strb.w	fp, [r5, #1336]	; 0x538
      _b = b;
    7b98:	mvn.w	fp, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b9c:	strb.w	r0, [r5, #1356]	; 0x54c
      _s = s;
      _b = b;
    7ba0:	mvn.w	r0, #22
    7ba4:	strb.w	fp, [r5, #1337]	; 0x539
    7ba8:	mvn.w	fp, #18
    7bac:	strb.w	fp, [r5, #1340]	; 0x53c
    7bb0:	mvn.w	fp, #11
    7bb4:	strb.w	fp, [r5, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bb8:	mvn.w	fp, #103	; 0x67
    7bbc:	strb.w	fp, [r5, #1345]	; 0x541
      _b = b;
    7bc0:	mvn.w	fp, #18
    7bc4:	strb.w	fp, [r5, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bc8:	mvn.w	fp, #104	; 0x68
      _s = s;
    7bcc:	strb.w	r1, [r5, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bd0:	movs	r1, #165	; 0xa5
    7bd2:	strb.w	fp, [r5, #1338]	; 0x53a
      _s = s;
    7bd6:	mov.w	fp, #79	; 0x4f
      _b = b;
    7bda:	strb.w	r0, [r5, #1373]	; 0x55d
    7bde:	movs	r0, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7be0:	strb.w	fp, [r5, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7be4:	mvn.w	fp, #100	; 0x64
      _s = s;
      _b = b;
    7be8:	strb.w	r8, [r5, #1379]	; 0x563
    7bec:	mov.w	r8, #234	; 0xea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bf0:	strb.w	fp, [r5, #1344]	; 0x540
      _s = s;
    7bf4:	mov.w	fp, #88	; 0x58
      _b = b;
    7bf8:	strb.w	r2, [r5, #1358]	; 0x54e
    7bfc:	movs	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bfe:	strb.w	fp, [r5, #1348]	; 0x544
      _b = b;
    7c02:	mvn.w	fp, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c06:	strb.w	r9, [r5, #1347]	; 0x543
      _s = s;
      _b = b;
    7c0a:	strb.w	fp, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c0e:	mov.w	fp, #124	; 0x7c
      _b = b;
    7c12:	strb.w	r0, [r5, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c16:	strb.w	fp, [r5, #1351]	; 0x547
      _b = b;
    7c1a:	mov.w	fp, #117	; 0x75
    7c1e:	strb.w	r8, [r5, #1385]	; 0x569
    7c22:	strb.w	fp, [r5, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c26:	mov.w	fp, #52	; 0x34
    7c2a:	strb.w	fp, [r5, #1353]	; 0x549
      _s = s;
    7c2e:	mov.w	fp, #36	; 0x24
    7c32:	strb.w	fp, [r5, #1360]	; 0x550
      _b = b;
    7c36:	mov.w	fp, #14
    7c3a:	strb.w	fp, [r5, #1361]	; 0x551
    7c3e:	mov.w	fp, #116	; 0x74
    7c42:	strb.w	fp, [r5, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c46:	mvn.w	fp, #34	; 0x22
    7c4a:	strb.w	fp, [r5, #1365]	; 0x555
      _s = s;
      _b = b;
    7c4e:	mvn.w	fp, #43	; 0x2b
    7c52:	strb.w	fp, [r5, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c56:	strb.w	fp, [r5, #1368]	; 0x558
      _s = s;
      _b = b;
    7c5a:	ldrb.w	fp, [sp, #20]
    7c5e:	strb.w	fp, [r5, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c62:	mvn.w	fp, #39	; 0x27
    7c66:	strb.w	fp, [r5, #1371]	; 0x55b
      _s = s;
    7c6a:	mov.w	fp, #33	; 0x21
    7c6e:	strb.w	fp, [r5, #1372]	; 0x55c
    7c72:	mov.w	fp, #122	; 0x7a
    7c76:	strb.w	fp, [r5, #1381]	; 0x565
      _b = b;
    7c7a:	ldrb.w	fp, [sp, #28]
    7c7e:	strb.w	fp, [r5, #1388]	; 0x56c
    7c82:	mvn.w	fp, #12
    7c86:	strb.w	fp, [r5, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c8a:	mvn.w	fp, #82	; 0x52
    7c8e:	strb.w	fp, [r5, #1392]	; 0x570
      _s = s;
    7c92:	mov.w	fp, #124	; 0x7c
    7c96:	strb.w	fp, [r5, #1393]	; 0x571
      _b = b;
    7c9a:	mvn.w	fp, #12
    7c9e:	strb.w	fp, [r5, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ca2:	mvn.w	fp, #108	; 0x6c
    7ca6:	strb.w	fp, [r5, #1395]	; 0x573
      _s = s;
      _b = b;
    7caa:	mvn.w	fp, #22
    7cae:	strb.w	fp, [r5, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cb2:	mvn.w	fp, #120	; 0x78
      _s = s;
      _b = b;
    7cb6:	strb.w	r8, [r5, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cba:	strb.w	fp, [r5, #1401]	; 0x579
    7cbe:	mvn.w	fp, #72	; 0x48
      _s = s;
      _b = b;
    7cc2:	strb.w	r8, [r5, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cc6:	strb.w	fp, [r5, #1380]	; 0x564
      _s = s;
    7cca:	mov.w	fp, #56	; 0x38
      _b = b;
    7cce:	strb.w	r8, [r5, #1421]	; 0x58d
    7cd2:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cd6:	strb.w	fp, [r5, #1396]	; 0x574
    7cda:	mvn.w	fp, #4
    7cde:	strb.w	r4, [r5, #1384]	; 0x568
      _b = b;
    7ce2:	movs	r4, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ce4:	strb.w	fp, [r5, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ce8:	mvn.w	fp, #60	; 0x3c
      _s = s;
    7cec:	strb.w	ip, [r5, #1399]	; 0x577
    7cf0:	mov.w	ip, #188	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cf4:	strb.w	fp, [r5, #1374]	; 0x55e
      _s = s;
    7cf8:	mov.w	fp, #59	; 0x3b
      _b = b;
    7cfc:	strb.w	lr, [r5, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d00:	mov.w	lr, #26
      _s = s;
    7d04:	strb.w	fp, [r5, #1375]	; 0x55f
      _b = b;
    7d08:	mvn.w	fp, #25
    7d0c:	strb.w	fp, [r5, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d10:	mvn.w	fp, #105	; 0x69
    7d14:	strb.w	fp, [r5, #1377]	; 0x561
      _s = s;
    7d18:	mvn.w	fp, #101	; 0x65
    7d1c:	strb.w	fp, [r5, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d20:	mvn.w	fp, #54	; 0x36
    7d24:	strb.w	fp, [r5, #1383]	; 0x567
    7d28:	mvn.w	fp, #51	; 0x33
    7d2c:	strb.w	fp, [r5, #1386]	; 0x56a
      _s = s;
    7d30:	mov.w	fp, #75	; 0x4b
    7d34:	strb.w	fp, [r5, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d38:	mvn.w	fp, #57	; 0x39
    7d3c:	strb.w	fp, [r5, #1389]	; 0x56d
      _s = s;
    7d40:	ldrb.w	fp, [sp, #24]
    7d44:	strb.w	fp, [r5, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d48:	mvn.w	fp, #125	; 0x7d
    7d4c:	strb.w	fp, [r5, #1398]	; 0x576
      _s = s;
      _b = b;
    7d50:	mvn.w	fp, #88	; 0x58
    7d54:	strb.w	fp, [r5, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d58:	mvn.w	fp, #99	; 0x63
    7d5c:	strb.w	fp, [r5, #1410]	; 0x582
      _s = s;
    7d60:	mov.w	fp, #105	; 0x69
    7d64:	strb.w	fp, [r5, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d68:	mvn.w	fp, #124	; 0x7c
    7d6c:	strb.w	fp, [r5, #1407]	; 0x57f
      _s = s;
    7d70:	mvn.w	fp, #100	; 0x64
    7d74:	strb.w	fp, [r5, #1408]	; 0x580
      _b = b;
    7d78:	ldrb.w	fp, [sp, #16]
    7d7c:	strb.w	fp, [r5, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d80:	mov.w	fp, #99	; 0x63
    7d84:	strb.w	fp, [r5, #1414]	; 0x586
    7d88:	mvn.w	fp, #112	; 0x70
    7d8c:	strb.w	fp, [r5, #1420]	; 0x58c
    7d90:	mvn.w	fp, #62	; 0x3e
    7d94:	strb.w	fp, [r5, #1423]	; 0x58f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d98:	mvn.w	fp, #111	; 0x6f
      _s = s;
      _b = b;
    7d9c:	strb.w	r8, [r5, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7da0:	strb.w	r6, [r5, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7da4:	mvn.w	r6, #127	; 0x7f
    7da8:	strb.w	fp, [r5, #1425]	; 0x591
    7dac:	mov.w	fp, #36	; 0x24
    7db0:	strb.w	r6, [r5, #1404]	; 0x57c
      _s = s;
      _b = b;
    7db4:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7db8:	strb.w	fp, [r5, #1431]	; 0x597
      _s = s;
    7dbc:	mvn.w	fp, #49	; 0x31
      _b = b;
    7dc0:	strb.w	r6, [r5, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dc4:	mvn.w	r6, #61	; 0x3d
    7dc8:	strb.w	fp, [r5, #1432]	; 0x598
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dcc:	mov.w	fp, #105	; 0x69
      _s = s;
    7dd0:	strb.w	r6, [r5, #1411]	; 0x583
      _b = b;
    7dd4:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dd8:	strb.w	fp, [r5, #1434]	; 0x59a
      _s = s;
      _b = b;
    7ddc:	mvn.w	fp, #49	; 0x31
    7de0:	strb.w	r6, [r5, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7de4:	mvn.w	r6, #98	; 0x62
      _s = s;
      _b = b;
    7de8:	strb.w	fp, [r5, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dec:	mov.w	fp, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7df0:	strb.w	r6, [r5, #1422]	; 0x58e
      _s = s;
      _b = b;
    7df4:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7df8:	strb.w	fp, [r5, #1450]	; 0x5aa
      _b = b;
    7dfc:	mvn.w	fp, #25
    7e00:	strb.w	r6, [r5, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e04:	mvn.w	r6, #85	; 0x55
      _b = b;
    7e08:	strb.w	fp, [r5, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e0c:	mov.w	fp, #78	; 0x4e
    7e10:	strb.w	r6, [r5, #1435]	; 0x59b
      _b = b;
    7e14:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e18:	strb.w	fp, [r5, #1453]	; 0x5ad
      _b = b;
    7e1c:	mvn.w	fp, #25
    7e20:	strb.w	r6, [r5, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e24:	mov.w	r6, #108	; 0x6c
      _s = s;
      _b = b;
    7e28:	ldr.w	r8, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e2c:	strb.w	r6, [r5, #1437]	; 0x59d
      _s = s;
    7e30:	mov.w	r6, #116	; 0x74
      _b = b;
    7e34:	strb.w	r2, [r5, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e38:	mvn.w	r2, #96	; 0x60
      _s = s;
    7e3c:	strb.w	r6, [r5, #1441]	; 0x5a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e40:	mvn.w	r6, #6
      _s = s;
      _b = b;
    7e44:	strb.w	fp, [r5, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e48:	mvn.w	fp, #103	; 0x67
    7e4c:	strb.w	r6, [r5, #1443]	; 0x5a3
      _s = s;
    7e50:	mov.w	r6, #53	; 0x35
    7e54:	strb.w	r7, [r5, #1417]	; 0x589
      _b = b;
    7e58:	movs	r7, #241	; 0xf1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e5a:	strb.w	r3, [r5, #1428]	; 0x594
      _s = s;
    7e5e:	movs	r3, #174	; 0xae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e60:	strb.w	r2, [r5, #1413]	; 0x585
    7e64:	strb.w	r2, [r5, #1416]	; 0x588
      _s = s;
    7e68:	strb.w	r2, [r5, #1426]	; 0x592
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e6c:	movs	r2, #132	; 0x84
    7e6e:	strb.w	r1, [r5, #1419]	; 0x58b
      _s = s;
      _b = b;
    7e72:	strb.w	r4, [r5, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e76:	strb.w	r6, [r5, #1444]	; 0x5a4
    7e7a:	movs	r6, #28
      _b = b;
    7e7c:	strb.w	r8, [r5, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e80:	strb.w	fp, [r5, #1455]	; 0x5af
      _s = s;
      _b = b;
    7e84:	mvn.w	fp, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e88:	strb.w	lr, [r5, #1440]	; 0x5a0
      _s = s;
      _b = b;
    7e8c:	mvn.w	lr, #11
    7e90:	strb.w	fp, [r5, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e94:	mvn.w	fp, #65	; 0x41
      _s = s;
      _b = b;
    7e98:	strb.w	lr, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e9c:	strb.w	fp, [r5, #1458]	; 0x5b2
      _s = s;
      _b = b;
    7ea0:	mvn.w	fp, #16
    7ea4:	strb.w	lr, [r5, #1472]	; 0x5c0
    7ea8:	mov.w	lr, #236	; 0xec
    7eac:	strb.w	fp, [r5, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eb0:	mvn.w	fp, #57	; 0x39
      _s = s;
    7eb4:	strb.w	ip, [r5, #1438]	; 0x59e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eb8:	mvn.w	ip, #96	; 0x60
    7ebc:	strb.w	fp, [r5, #1461]	; 0x5b5
      _s = s;
    7ec0:	mvn.w	fp, #82	; 0x52
    7ec4:	strb.w	r3, [r5, #1459]	; 0x5b3
    7ec8:	strb.w	fp, [r5, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ecc:	mvn.w	fp, #54	; 0x36
      _s = s;
      _b = b;
    7ed0:	strb.w	r7, [r5, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ed4:	strb.w	fp, [r5, #1464]	; 0x5b8
      _s = s;
    7ed8:	mov.w	fp, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7edc:	strb.w	r3, [r5, #1470]	; 0x5be
      _s = s;
    7ee0:	strb.w	fp, [r5, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ee4:	mvn.w	fp, #59	; 0x3b
    7ee8:	strb.w	sl, [r5, #1473]	; 0x5c1
    7eec:	strb.w	fp, [r5, #1467]	; 0x5bb
      _s = s;
    7ef0:	mvn.w	fp, #64	; 0x40
      _b = b;
    7ef4:	strb.w	lr, [r5, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ef8:	strb.w	fp, [r5, #1468]	; 0x5bc
      _b = b;
    7efc:	mov.w	fp, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f00:	strb.w	r9, [r5, #1476]	; 0x5c4
      _s = s;
      _b = b;
    7f04:	strb.w	fp, [r5, #1439]	; 0x59f
    7f08:	mov.w	fp, #92	; 0x5c
    7f0c:	strb.w	fp, [r5, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f10:	mvn.w	fp, #38	; 0x26
    7f14:	strb.w	fp, [r5, #1446]	; 0x5a6
      _s = s;
    7f18:	mov.w	fp, #37	; 0x25
    7f1c:	strb.w	fp, [r5, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f20:	mvn.w	fp, #45	; 0x2d
    7f24:	strb.w	fp, [r5, #1449]	; 0x5a9
    7f28:	mvn.w	fp, #69	; 0x45
    7f2c:	strb.w	fp, [r5, #1452]	; 0x5ac
      _s = s;
    7f30:	mvn.w	fp, #56	; 0x38
    7f34:	strb.w	fp, [r5, #1456]	; 0x5b0
      _b = b;
    7f38:	mvn.w	fp, #15
    7f3c:	strb.w	fp, [r5, #1463]	; 0x5b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f40:	mvn.w	fp, #75	; 0x4b
    7f44:	strb.w	fp, [r5, #1497]	; 0x5d9
      _s = s;
    7f48:	mvn.w	fp, #121	; 0x79
    7f4c:	strb.w	fp, [r5, #1471]	; 0x5bf
    7f50:	mov.w	fp, #46	; 0x2e
    7f54:	strb.w	fp, [r5, #1474]	; 0x5c2
      _b = b;
    7f58:	mvn.w	fp, #80	; 0x50
    7f5c:	strb.w	fp, [r5, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f60:	mvn.w	fp, #59	; 0x3b
    7f64:	strb.w	fp, [r5, #1483]	; 0x5cb
      _b = b;
    7f68:	mvn.w	fp, #12
    7f6c:	strb.w	fp, [r5, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f70:	mvn.w	fp, #125	; 0x7d
      _s = s;
    7f74:	strb.w	r1, [r5, #1489]	; 0x5d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f78:	strb.w	fp, [r5, #1485]	; 0x5cd
    7f7c:	mvn.w	fp, #101	; 0x65
      _s = s;
      _b = b;
    7f80:	strb.w	lr, [r5, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f84:	strb.w	fp, [r5, #1488]	; 0x5d0
      _s = s;
      _b = b;
    7f88:	mvn.w	fp, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f8c:	strb.w	ip, [r5, #1491]	; 0x5d3
      _s = s;
      _b = b;
    7f90:	mov.w	ip, #82	; 0x52
    7f94:	strb.w	fp, [r5, #1499]	; 0x5db
    7f98:	mvn.w	fp, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f9c:	strb.w	sl, [r5, #1492]	; 0x5d4
      _b = b;
    7fa0:	strb.w	fp, [r5, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fa4:	mvn.w	fp, #114	; 0x72
      _s = s;
      _b = b;
    7fa8:	strb.w	lr, [r5, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fac:	mov.w	lr, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fb0:	strb.w	fp, [r5, #1479]	; 0x5c7
      _s = s;
    7fb4:	ldrb.w	fp, [sp, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fb8:	strb.w	r3, [r5, #1500]	; 0x5dc
      _s = s;
    7fbc:	strb.w	fp, [r5, #1480]	; 0x5c8
    7fc0:	mvn.w	fp, #102	; 0x66
    7fc4:	strb.w	r6, [r5, #1477]	; 0x5c5
    7fc8:	strb.w	fp, [r5, #1486]	; 0x5ce
      _b = b;
    7fcc:	mvn.w	fp, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fd0:	strb.w	r2, [r5, #1482]	; 0x5ca
      _s = s;
      _b = b;
    7fd4:	strb.w	fp, [r5, #1487]	; 0x5cf
    7fd8:	mvn.w	fp, #13
    7fdc:	strb.w	r0, [r5, #1502]	; 0x5de
    7fe0:	strb.w	fp, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fe4:	mvn.w	fp, #77	; 0x4d
    7fe8:	strb.w	r4, [r5, #1512]	; 0x5e8
      _s = s;
      _b = b;
    7fec:	movs	r4, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fee:	strb.w	fp, [r5, #1494]	; 0x5d6
      _s = s;
    7ff2:	mvn.w	fp, #66	; 0x42
    7ff6:	strb.w	fp, [r5, #1495]	; 0x5d7
    7ffa:	mvn.w	fp, #106	; 0x6a
    7ffe:	strb.w	fp, [r5, #1498]	; 0x5da
    8002:	mov.w	fp, #113	; 0x71
    8006:	strb.w	fp, [r5, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    800a:	mvn.w	fp, #100	; 0x64
    800e:	strb.w	fp, [r5, #1503]	; 0x5df
      _s = s;
    8012:	mvn.w	fp, #94	; 0x5e
    8016:	strb.w	fp, [r5, #1504]	; 0x5e0
      _b = b;
    801a:	mvn.w	fp, #39	; 0x27
    801e:	strb.w	fp, [r5, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8022:	mov.w	fp, #103	; 0x67
    8026:	strb.w	fp, [r5, #1506]	; 0x5e2
      _s = s;
    802a:	mov.w	fp, #95	; 0x5f
    802e:	strb.w	fp, [r5, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8032:	strb.w	fp, [r5, #1509]	; 0x5e5
      _s = s;
    8036:	mov.w	fp, #88	; 0x58
    803a:	strb.w	fp, [r5, #1510]	; 0x5e6
      _b = b;
    803e:	mvn.w	fp, #114	; 0x72
    8042:	strb.w	fp, [r5, #1511]	; 0x5e7
    8046:	mvn.w	fp, #127	; 0x7f
    804a:	strb.w	fp, [r5, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    804e:	mov.w	fp, #95	; 0x5f
      _s = s;
      _b = b;
    8052:	strb.w	r1, [r5, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8056:	mvn.w	r1, #96	; 0x60
    805a:	strb.w	fp, [r5, #1515]	; 0x5eb
      _s = s;
    805e:	mvn.w	fp, #84	; 0x54
    8062:	strb.w	lr, [r5, #1522]	; 0x5f2
      _b = b;
    8066:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    806a:	strb.w	fp, [r5, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    806e:	mov.w	fp, #113	; 0x71
    8072:	strb.w	r1, [r5, #1530]	; 0x5fa
      _s = s;
    8076:	movs	r1, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8078:	strb.w	fp, [r5, #1518]	; 0x5ee
      _s = s;
    807c:	mvn.w	fp, #126	; 0x7e
      _b = b;
    8080:	strb.w	r8, [r5, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8084:	strb.w	fp, [r5, #1519]	; 0x5ef
      _b = b;
    8088:	mvn.w	fp, #127	; 0x7f
    808c:	strb.w	ip, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8090:	mov.w	ip, #187	; 0xbb
      _s = s;
      _b = b;
    8094:	strb.w	fp, [r5, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8098:	mvn.w	fp, #34	; 0x22
      _s = s;
      _b = b;
    809c:	strb.w	r4, [r5, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80a0:	strb.w	fp, [r5, #1521]	; 0x5f1
      _s = s;
    80a4:	mov.w	fp, #72	; 0x48
      _b = b;
    80a8:	strb.w	lr, [r5, #1535]	; 0x5ff
    80ac:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80b0:	strb.w	fp, [r5, #1525]	; 0x5f5
      _b = b;
    80b4:	ldrb.w	fp, [sp, #20]
    80b8:	strb.w	fp, [r5, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80bc:	mvn.w	fp, #65	; 0x41
    80c0:	strb.w	fp, [r5, #1527]	; 0x5f7
      _s = s;
    80c4:	mov.w	fp, #108	; 0x6c
    80c8:	strb.w	fp, [r5, #1528]	; 0x5f8
      _b = b;
    80cc:	ldrb.w	fp, [sp, #8]
    80d0:	strb.w	fp, [r5, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80d4:	mvn.w	fp, #102	; 0x66
    80d8:	strb.w	fp, [r5, #1531]	; 0x5fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80dc:	mvn.w	fp, #119	; 0x77
    80e0:	strb.w	fp, [r5, #1533]	; 0x5fd
      _s = s;
    80e4:	mvn.w	fp, #85	; 0x55
    80e8:	strb.w	fp, [r5, #1534]	; 0x5fe
    80ec:	mvn.w	fp, #58	; 0x3a
    80f0:	strb.w	fp, [r5, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80f4:	strb.w	fp, [r5, #1524]	; 0x5f4
      _s = s;
      _b = b;
    80f8:	mvn.w	fp, #17
    80fc:	strb.w	fp, [r5, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8100:	mvn.w	fp, #56	; 0x38
    8104:	strb.w	fp, [r5, #1539]	; 0x603
      _s = s;
    8108:	mvn.w	fp, #66	; 0x42
    810c:	strb.w	fp, [r5, #1540]	; 0x604
      _b = b;
    8110:	mvn.w	fp, #16
    8114:	strb.w	fp, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8118:	ldrb.w	fp, [sp, #24]
    811c:	strb.w	fp, [r5, #1542]	; 0x606
      _s = s;
    8120:	mvn.w	fp, #124	; 0x7c
    8124:	strb.w	fp, [r5, #1543]	; 0x607
      _b = b;
    8128:	mvn.w	fp, #13
    812c:	strb.w	r7, [r5, #1544]	; 0x608
    8130:	movs	r7, #118	; 0x76
    8132:	strb.w	fp, [r5, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8136:	mov.w	fp, #124	; 0x7c
    813a:	strb.w	r6, [r5, #1552]	; 0x610
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    813e:	mvn.w	r6, #108	; 0x6c
      _s = s;
    8142:	strb.w	fp, [r5, #1549]	; 0x60d
      _b = b;
    8146:	mvn.w	fp, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    814a:	strb.w	r6, [r5, #1554]	; 0x612
      _s = s;
      _b = b;
    814e:	mvn.w	r6, #85	; 0x55
    8152:	strb.w	fp, [r5, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8156:	mvn.w	fp, #118	; 0x76
      _s = s;
      _b = b;
    815a:	strb.w	r6, [r5, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    815e:	mvn.w	r6, #121	; 0x79
    8162:	strb.w	fp, [r5, #1551]	; 0x60f
    8166:	mvn.w	fp, #63	; 0x3f
    816a:	strb.w	r6, [r5, #1560]	; 0x618
      _s = s;
    816e:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8172:	strb.w	fp, [r5, #1545]	; 0x609
      _s = s;
    8176:	mov.w	fp, #62	; 0x3e
    817a:	strb.w	r6, [r5, #1561]	; 0x619
    817e:	mvn.w	r6, #38	; 0x26
    8182:	strb.w	fp, [r5, #1555]	; 0x613
      _b = b;
    8186:	mvn.w	fp, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    818a:	strb.w	r6, [r5, #1564]	; 0x61c
      _b = b;
    818e:	mvn.w	r6, #15
    8192:	strb.w	fp, [r5, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8196:	mvn.w	fp, #109	; 0x6d
      _s = s;
      _b = b;
    819a:	strb.w	r6, [r5, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    819e:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81a2:	strb.w	fp, [r5, #1569]	; 0x621
      _s = s;
    81a6:	mvn.w	fp, #124	; 0x7c
    81aa:	strb.w	r3, [r5, #1546]	; 0x60a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81ae:	mvn.w	r3, #96	; 0x60
      _s = s;
    81b2:	strb.w	fp, [r5, #1570]	; 0x622
      _b = b;
    81b6:	mvn.w	fp, #6
    81ba:	strb.w	r8, [r5, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    81be:	mov.w	r8, #252	; 0xfc
      _b = b;
    81c2:	strb.w	fp, [r5, #1571]	; 0x623
    81c6:	mvn.w	fp, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    81ca:	strb.w	r6, [r5, #1567]	; 0x61f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81ce:	mvn.w	r6, #73	; 0x49
      _s = s;
      _b = b;
    81d2:	strb.w	fp, [r5, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    81d6:	mov.w	fp, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81da:	strb.w	r3, [r5, #1548]	; 0x60c
    81de:	movs	r3, #158	; 0x9e
      _s = s;
    81e0:	strb.w	fp, [r5, #1576]	; 0x628
      _b = b;
    81e4:	mvn.w	fp, #8
    81e8:	strb.w	r0, [r5, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81ec:	strb.w	r9, [r5, #1557]	; 0x615
      _s = s;
    81f0:	strb.w	r8, [r5, #1558]	; 0x616
      _b = b;
    81f4:	strb.w	r0, [r5, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81f8:	strb.w	r2, [r5, #1563]	; 0x61b
    81fc:	strb.w	sl, [r5, #1566]	; 0x61e
    8200:	strb.w	r6, [r5, #1536]	; 0x600
      _s = s;
      _b = b;
    8204:	movs	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8206:	strb.w	r1, [r5, #1537]	; 0x601
      _b = b;
    820a:	movs	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    820c:	strb.w	r4, [r5, #1573]	; 0x625
    8210:	movs	r4, #115	; 0x73
      _b = b;
    8212:	strb.w	fp, [r5, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8216:	mvn.w	fp, #50	; 0x32
      _s = s;
      _b = b;
    821a:	strb.w	r6, [r5, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    821e:	mvn.w	r6, #53	; 0x35
    8222:	strb.w	fp, [r5, #1578]	; 0x62a
      _s = s;
    8226:	mov.w	fp, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    822a:	strb.w	r6, [r5, #1575]	; 0x627
      _s = s;
    822e:	strb.w	fp, [r5, #1579]	; 0x62b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8232:	mvn.w	fp, #77	; 0x4d
      _s = s;
    8236:	strb.w	r6, [r5, #1594]	; 0x63a
      _b = b;
    823a:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    823e:	strb.w	fp, [r5, #1581]	; 0x62d
      _s = s;
      _b = b;
    8242:	mvn.w	fp, #34	; 0x22
    8246:	strb.w	r6, [r5, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    824a:	mvn.w	r6, #46	; 0x2e
      _b = b;
    824e:	strb.w	fp, [r5, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8252:	mvn.w	fp, #63	; 0x3f
    8256:	strb.w	r6, [r5, #1585]	; 0x631
      _b = b;
    825a:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    825e:	strb.w	fp, [r5, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8262:	mvn.w	fp, #124	; 0x7c
      _s = s;
      _b = b;
    8266:	strb.w	r6, [r5, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    826a:	mvn.w	r6, #95	; 0x5f
    826e:	strb.w	fp, [r5, #1590]	; 0x636
      _s = s;
      _b = b;
    8272:	mvn.w	fp, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8276:	strb.w	r6, [r5, #1602]	; 0x642
      _s = s;
    827a:	mvn.w	r6, #28
      _b = b;
    827e:	strb.w	fp, [r5, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8282:	mvn.w	fp, #124	; 0x7c
      _s = s;
      _b = b;
    8286:	strb.w	r1, [r5, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    828a:	mvn.w	r1, #96	; 0x60
    828e:	strb.w	fp, [r5, #1593]	; 0x639
    8292:	mov.w	fp, #110	; 0x6e
      _s = s;
    8296:	strb.w	r6, [r5, #1603]	; 0x643
      _b = b;
    829a:	ldrb.w	r6, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    829e:	strb.w	ip, [r5, #1572]	; 0x624
      _s = s;
    82a2:	mov.w	ip, #176	; 0xb0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82a6:	strb.w	fp, [r5, #1587]	; 0x633
      _s = s;
      _b = b;
    82aa:	mvn.w	fp, #28
    82ae:	strb.w	r6, [r5, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82b2:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82b6:	strb.w	r1, [r5, #1605]	; 0x645
      _s = s;
      _b = b;
    82ba:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82be:	strb.w	r2, [r5, #1582]	; 0x62e
    82c2:	movs	r2, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82c4:	strb.w	r9, [r5, #1584]	; 0x630
      _s = s;
    82c8:	strb.w	r0, [r5, #1591]	; 0x637
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82cc:	strb.w	sl, [r5, #1596]	; 0x63c
      _s = s;
    82d0:	strb.w	r9, [r5, #1597]	; 0x63d
      _b = b;
    82d4:	strb.w	lr, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82d8:	mov.w	lr, #81	; 0x51
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82dc:	strb.w	r3, [r5, #1599]	; 0x63f
      _s = s;
      _b = b;
    82e0:	movs	r3, #148	; 0x94
    82e2:	strb.w	r7, [r5, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82e6:	strb.w	ip, [r5, #1600]	; 0x640
    82ea:	strb.w	r6, [r5, #1606]	; 0x646
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82ee:	mvn.w	r6, #98	; 0x62
      _s = s;
      _b = b;
    82f2:	strb.w	r1, [r5, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82f6:	movs	r1, #208	; 0xd0
      _s = s;
      _b = b;
    82f8:	strb.w	fp, [r5, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82fc:	mvn.w	fp, #108	; 0x6c
      _s = s;
    8300:	strb.w	r8, [r5, #1609]	; 0x649
      _b = b;
    8304:	mov	r8, r0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8306:	strb.w	fp, [r5, #1611]	; 0x64b
      _s = s;
    830a:	mvn.w	fp, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    830e:	strb.w	r6, [r5, #1608]	; 0x648
      _s = s;
      _b = b;
    8312:	movs	r6, #168	; 0xa8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8314:	strb.w	fp, [r5, #1612]	; 0x64c
      _b = b;
    8318:	ldrb.w	fp, [sp, #16]
    831c:	strb.w	r0, [r5, #1616]	; 0x650
    8320:	movs	r0, #196	; 0xc4
    8322:	strb.w	fp, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8326:	mvn.w	fp, #101	; 0x65
      _s = s;
    832a:	strb.w	r9, [r5, #1618]	; 0x652
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    832e:	strb.w	fp, [r5, #1614]	; 0x64e
    8332:	mvn.w	fp, #66	; 0x42
    8336:	strb.w	r9, [r5, #1632]	; 0x660
    833a:	strb.w	fp, [r5, #1617]	; 0x651
      _s = s;
      _b = b;
    833e:	mvn.w	fp, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8342:	strb.w	ip, [r5, #1633]	; 0x661
    8346:	mov.w	ip, #215	; 0xd7
      _b = b;
    834a:	strb.w	fp, [r5, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    834e:	mvn.w	fp, #61	; 0x3d
      _s = s;
    8352:	strb.w	r4, [r5, #1621]	; 0x655
      _b = b;
    8356:	movs	r4, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8358:	strb.w	fp, [r5, #1620]	; 0x654
      _s = s;
      _b = b;
    835c:	mvn.w	fp, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8360:	strb.w	r2, [r5, #1630]	; 0x65e
      _b = b;
    8364:	strb.w	fp, [r5, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8368:	mvn.w	fp, #88	; 0x58
      _s = s;
      _b = b;
    836c:	strb.w	r8, [r5, #1634]	; 0x662
    8370:	mvn.w	r8, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8374:	strb.w	fp, [r5, #1623]	; 0x657
      _s = s;
    8378:	mvn.w	fp, #124	; 0x7c
    837c:	strb.w	fp, [r5, #1624]	; 0x658
      _b = b;
    8380:	mvn.w	fp, #15
    8384:	strb.w	fp, [r5, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8388:	mvn.w	fp, #111	; 0x6f
    838c:	strb.w	fp, [r5, #1626]	; 0x65a
      _s = s;
    8390:	mov.w	fp, #113	; 0x71
    8394:	strb.w	fp, [r5, #1627]	; 0x65b
      _b = b;
    8398:	mvn.w	fp, #17
    839c:	strb.w	fp, [r5, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83a0:	mvn.w	fp, #120	; 0x78
    83a4:	strb.w	fp, [r5, #1629]	; 0x65d
      _s = s;
      _b = b;
    83a8:	ldrb.w	fp, [sp, #8]
    83ac:	strb.w	fp, [r5, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    83b0:	mvn.w	fp, #116	; 0x74
    83b4:	strb.w	fp, [r5, #1615]	; 0x64f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83b8:	mvn.w	fp, #114	; 0x72
    83bc:	strb.w	fp, [r5, #1635]	; 0x663
      _s = s;
    83c0:	mvn.w	fp, #88	; 0x58
    83c4:	strb.w	fp, [r5, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83c8:	mov.w	fp, #94	; 0x5e
    83cc:	strb.w	fp, [r5, #1638]	; 0x666
      _s = s;
    83d0:	mov.w	fp, #40	; 0x28
    83d4:	strb.w	fp, [r5, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83d8:	mov.w	fp, #122	; 0x7a
      _s = s;
      _b = b;
    83dc:	strb.w	r8, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83e0:	mvn.w	r8, #94	; 0x5e
    83e4:	strb.w	fp, [r5, #1641]	; 0x669
      _s = s;
    83e8:	mov.w	fp, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83ec:	strb.w	r8, [r5, #1662]	; 0x67e
      _s = s;
      _b = b;
    83f0:	mvn.w	r8, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    83f4:	strb.w	fp, [r5, #1642]	; 0x66a
      _b = b;
    83f8:	mvn.w	fp, #65	; 0x41
    83fc:	strb.w	r8, [r5, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8400:	mvn.w	r8, #93	; 0x5d
      _b = b;
    8404:	strb.w	fp, [r5, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8408:	mvn.w	fp, #118	; 0x76
      _s = s;
    840c:	strb.w	r8, [r5, #1648]	; 0x670
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8410:	mov.w	r8, #84	; 0x54
    8414:	strb.w	fp, [r5, #1644]	; 0x66c
      _s = s;
    8418:	mvn.w	fp, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    841c:	strb.w	r8, [r5, #1665]	; 0x681
      _s = s;
    8420:	mov.w	r8, #91	; 0x5b
    8424:	strb.w	fp, [r5, #1645]	; 0x66d
      _b = b;
    8428:	mvn.w	fp, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    842c:	strb.w	r8, [r5, #1666]	; 0x682
      _b = b;
    8430:	mvn.w	r8, #104	; 0x68
    8434:	strb.w	fp, [r5, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8438:	mvn.w	fp, #103	; 0x67
      _s = s;
      _b = b;
    843c:	strb.w	r8, [r5, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8440:	mov.w	r8, #100	; 0x64
    8444:	strb.w	fp, [r5, #1647]	; 0x66f
      _s = s;
      _b = b;
    8448:	mvn.w	fp, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    844c:	strb.w	r8, [r5, #1671]	; 0x687
      _s = s;
    8450:	mvn.w	r8, #63	; 0x3f
      _b = b;
    8454:	strb.w	fp, [r5, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8458:	mvn.w	fp, #71	; 0x47
      _s = s;
    845c:	strb.w	r8, [r5, #1669]	; 0x685
      _b = b;
    8460:	mvn.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8464:	strb.w	fp, [r5, #1650]	; 0x672
      _s = s;
    8468:	mov.w	fp, #108	; 0x6c
      _b = b;
    846c:	strb.w	r3, [r5, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8470:	strb.w	fp, [r5, #1651]	; 0x673
      _b = b;
    8474:	mvn.w	fp, #6
    8478:	strb.w	r6, [r5, #1640]	; 0x668
    847c:	strb.w	fp, [r5, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8480:	mvn.w	fp, #51	; 0x33
    8484:	strb.w	r1, [r5, #1656]	; 0x678
    8488:	strb.w	fp, [r5, #1653]	; 0x675
      _s = s;
    848c:	mov.w	fp, #59	; 0x3b
    8490:	strb.w	lr, [r5, #1657]	; 0x679
    8494:	strb.w	fp, [r5, #1654]	; 0x676
      _b = b;
    8498:	mvn.w	fp, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    849c:	strb.w	lr, [r5, #1663]	; 0x67f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84a0:	mov.w	lr, #42	; 0x2a
      _s = s;
      _b = b;
    84a4:	strb.w	fp, [r5, #1655]	; 0x677
    84a8:	mvn.w	fp, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84ac:	strb.w	r7, [r5, #1668]	; 0x684
    84b0:	movs	r7, #34	; 0x22
      _s = s;
      _b = b;
    84b2:	strb.w	fp, [r5, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84b6:	mvn.w	fp, #38	; 0x26
    84ba:	strb.w	fp, [r5, #1659]	; 0x67b
      _s = s;
    84be:	mov.w	fp, #37	; 0x25
    84c2:	strb.w	fp, [r5, #1660]	; 0x67c
    84c6:	mov.w	fp, #43	; 0x2b
      _b = b;
    84ca:	strb.w	r8, [r5, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84ce:	mvn.w	r8, #65	; 0x41
    84d2:	strb.w	ip, [r5, #1696]	; 0x6a0
      _b = b;
    84d6:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84da:	strb.w	r8, [r5, #1672]	; 0x688
    84de:	mvn.w	r8, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84e2:	strb.w	sl, [r5, #1674]	; 0x68a
      _s = s;
    84e6:	strb.w	r8, [r5, #1675]	; 0x68b
    84ea:	ldrb.w	r8, [sp, #4]
      _b = b;
    84ee:	strb.w	r9, [r5, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84f2:	strb.w	r8, [r5, #1678]	; 0x68e
      _b = b;
    84f6:	mvn.w	r8, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84fa:	strb.w	r3, [r5, #1677]	; 0x68d
      _s = s;
      _b = b;
    84fe:	strb.w	r8, [r5, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8502:	mvn.w	r8, #101	; 0x65
    8506:	strb.w	r3, [r5, #1686]	; 0x696
    850a:	strb.w	r8, [r5, #1680]	; 0x690
      _s = s;
    850e:	mvn.w	r8, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8512:	strb.w	sl, [r5, #1692]	; 0x69c
      _s = s;
    8516:	strb.w	r8, [r5, #1681]	; 0x691
      _b = b;
    851a:	mvn.w	r8, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    851e:	strb.w	r1, [r5, #1693]	; 0x69d
      _b = b;
    8522:	strb.w	r8, [r5, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8526:	mvn.w	r8, #115	; 0x73
    852a:	strb.w	sl, [r5, #1695]	; 0x69f
    852e:	strb.w	r8, [r5, #1683]	; 0x693
      _s = s;
    8532:	mov.w	r8, #75	; 0x4b
    8536:	str	r0, [sp, #32]
    8538:	strb.w	r8, [r5, #1684]	; 0x694
      _b = b;
    853c:	mvn.w	r8, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8540:	strb.w	r0, [r5, #1699]	; 0x6a3
      _b = b;
    8544:	mvn.w	r0, #22
    8548:	strb.w	r8, [r5, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    854c:	mvn.w	r8, #121	; 0x79
      _b = b;
    8550:	strb.w	r4, [r5, #1673]	; 0x689
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8554:	strb.w	r8, [r5, #1687]	; 0x697
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8558:	mvn.w	r8, #96	; 0x60
    855c:	strb.w	r8, [r5, #1689]	; 0x699
      _s = s;
    8560:	ldrb.w	r8, [sp, #4]
    8564:	strb.w	r8, [r5, #1690]	; 0x69a
      _b = b;
    8568:	mvn.w	r8, #39	; 0x27
    856c:	strb.w	r8, [r5, #1691]	; 0x69b
    8570:	ldrb.w	r8, [sp]
    8574:	strb.w	r8, [r5, #1694]	; 0x69e
    8578:	mvn.w	r8, #23
    857c:	strb.w	r8, [r5, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8580:	mvn.w	r8, #106	; 0x6a
    8584:	strb.w	r8, [r5, #1698]	; 0x6a2
      _s = s;
      _b = b;
    8588:	mvn.w	r8, #32
    858c:	strb.w	r8, [r5, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8590:	mvn.w	r8, #103	; 0x67
      _s = s;
      _b = b;
    8594:	strb.w	ip, [r5, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8598:	strb.w	r8, [r5, #1710]	; 0x6ae
      _s = s;
    859c:	mov.w	r8, #58	; 0x3a
    85a0:	strb.w	r6, [r5, #1702]	; 0x6a6
      _b = b;
    85a4:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    85a8:	strb.w	r8, [r5, #1711]	; 0x6af
      _b = b;
    85ac:	mvn.w	r8, #28
    85b0:	strb.w	r6, [r5, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85b4:	mvn.w	r6, #115	; 0x73
      _s = s;
      _b = b;
    85b8:	strb.w	r8, [r5, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85bc:	mvn.w	r8, #22
    85c0:	strb.w	r3, [r5, #1701]	; 0x6a5
    85c4:	strb.w	r8, [r5, #1713]	; 0x6b1
      _s = s;
      _b = b;
    85c8:	mvn.w	r8, #58	; 0x3a
    85cc:	strb.w	ip, [r5, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85d0:	mov.w	ip, #1
      _s = s;
      _b = b;
    85d4:	strb.w	r8, [r5, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85d8:	mvn.w	r8, #12
    85dc:	strb.w	r6, [r5, #1707]	; 0x6ab
      _s = s;
    85e0:	movs	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85e2:	strb.w	r8, [r5, #1716]	; 0x6b4
      _s = s;
    85e6:	mov.w	r8, #88	; 0x58
    85ea:	strb.w	r4, [r5, #1708]	; 0x6ac
      _b = b;
    85ee:	movs	r4, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    85f0:	strb.w	r8, [r5, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85f4:	mov.w	r8, #59	; 0x3b
      _s = s;
      _b = b;
    85f8:	strb.w	r0, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    85fc:	movs	r0, #253	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85fe:	strb.w	r8, [r5, #1719]	; 0x6b7
      _s = s;
    8602:	mov.w	r8, #44	; 0x2c
      _b = b;
    8606:	strb.w	r2, [r5, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    860a:	strb.w	r8, [r5, #1720]	; 0x6b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    860e:	mov.w	r8, #125	; 0x7d
      _s = s;
      _b = b;
    8612:	strb.w	r1, [r5, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8616:	strb.w	r8, [r5, #1722]	; 0x6ba
      _s = s;
    861a:	mov.w	r8, #79	; 0x4f
      _b = b;
    861e:	strb.w	fp, [r5, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8622:	strb.w	r8, [r5, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8626:	mvn.w	r8, #121	; 0x79
    862a:	strb.w	r8, [r5, #1725]	; 0x6bd
      _s = s;
    862e:	mov.w	r8, #95	; 0x5f
    8632:	strb.w	r8, [r5, #1726]	; 0x6be
      _b = b;
    8636:	mvn.w	r8, #9
    863a:	strb.w	r8, [r5, #1727]	; 0x6bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    863e:	mvn.w	r8, #66	; 0x42
    8642:	strb.w	r8, [r5, #1728]	; 0x6c0
      _s = s;
    8646:	mov.w	r8, #116	; 0x74
    864a:	strb.w	r8, [r5, #1729]	; 0x6c1
      _b = b;
    864e:	mvn.w	r8, #5
    8652:	strb.w	r8, [r5, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8656:	mvn.w	r8, #64	; 0x40
    865a:	strb.w	r8, [r5, #1731]	; 0x6c3
      _s = s;
    865e:	mov.w	r8, #61	; 0x3d
    8662:	strb.w	r8, [r5, #1705]	; 0x6a9
    8666:	mov.w	r8, #86	; 0x56
    866a:	strb.w	r8, [r5, #1714]	; 0x6b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    866e:	mvn.w	r8, #117	; 0x75
    8672:	strb.w	r8, [r5, #1704]	; 0x6a8
      _s = s;
    8676:	mov.w	r8, #50	; 0x32
    867a:	strb.w	r8, [r5, #1732]	; 0x6c4
      _b = b;
    867e:	mvn.w	r8, #6
    8682:	strb.w	r8, [r5, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8686:	mvn.w	r8, #45	; 0x2d
      _s = s;
    868a:	strb.w	r2, [r5, #1735]	; 0x6c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    868e:	strb.w	r8, [r5, #1734]	; 0x6c6
      _s = s;
      _b = b;
    8692:	mvn.w	r8, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8696:	strb.w	r2, [r5, #1755]	; 0x6db
      _s = s;
      _b = b;
    869a:	strb.w	r8, [r5, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    869e:	mvn.w	r8, #50	; 0x32
    86a2:	strb.w	lr, [r5, #1758]	; 0x6de
      _s = s;
      _b = b;
    86a6:	mov.w	lr, #189	; 0xbd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86aa:	strb.w	r8, [r5, #1737]	; 0x6c9
      _s = s;
    86ae:	mov.w	r8, #41	; 0x29
    86b2:	strb.w	r8, [r5, #1738]	; 0x6ca
      _b = b;
    86b6:	mvn.w	r8, #15
    86ba:	strb.w	r8, [r5, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86be:	mvn.w	r8, #94	; 0x5e
    86c2:	strb.w	r8, [r5, #1740]	; 0x6cc
      _s = s;
    86c6:	mov.w	r8, #117	; 0x75
    86ca:	strb.w	r8, [r5, #1741]	; 0x6cd
      _b = b;
    86ce:	mvn.w	r8, #28
    86d2:	strb.w	r8, [r5, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86d6:	mvn.w	r8, #121	; 0x79
    86da:	strb.w	r8, [r5, #1743]	; 0x6cf
      _s = s;
    86de:	mvn.w	r8, #12
    86e2:	strb.w	r8, [r5, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86e6:	mvn.w	r8, #118	; 0x76
    86ea:	strb.w	r8, [r5, #1746]	; 0x6d2
      _s = s;
    86ee:	ldrb.w	r8, [sp, #28]
    86f2:	strb.w	r8, [r5, #1747]	; 0x6d3
      _b = b;
    86f6:	mvn.w	r8, #46	; 0x2e
    86fa:	strb.w	r8, [r5, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86fe:	mvn.w	r8, #108	; 0x6c
    8702:	strb.w	r8, [r5, #1749]	; 0x6d5
      _s = s;
    8706:	mvn.w	r8, #43	; 0x2b
    870a:	strb.w	r8, [r5, #1750]	; 0x6d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    870e:	mvn.w	r8, #122	; 0x7a
    8712:	strb.w	r8, [r5, #1752]	; 0x6d8
      _s = s;
    8716:	mvn.w	r8, #25
    871a:	strb.w	r8, [r5, #1753]	; 0x6d9
      _b = b;
    871e:	mvn.w	r8, #100	; 0x64
    8722:	strb.w	r8, [r5, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8726:	mov.w	r8, #99	; 0x63
    872a:	strb.w	r8, [r5, #1756]	; 0x6dc
      _b = b;
    872e:	mvn.w	r8, #43	; 0x2b
    8732:	strb.w	r8, [r5, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8736:	mvn.w	r8, #117	; 0x75
    873a:	strb.w	r8, [r5, #1759]	; 0x6df
      _b = b;
    873e:	mvn.w	r8, #39	; 0x27
    8742:	strb.w	r8, [r5, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8746:	mov.w	r8, #33	; 0x21
    874a:	strb.w	r8, [r5, #1761]	; 0x6e1
      _s = s;
    874e:	mvn.w	r8, #84	; 0x54
    8752:	strb.w	r8, [r5, #1762]	; 0x6e2
      _b = b;
    8756:	ldrb.w	r8, [sp, #44]	; 0x2c
    875a:	strb.w	r8, [r5, #1763]	; 0x6e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    875e:	mov.w	r8, #91	; 0x5b
    8762:	strb.w	r8, [r5, #1765]	; 0x6e5
      _b = b;
    8766:	mov.w	r8, #89	; 0x59
    876a:	strb.w	r8, [r5, #1751]	; 0x6d7
    876e:	mvn.w	r8, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8772:	strb.w	r7, [r5, #1764]	; 0x6e4
    8776:	movs	r7, #237	; 0xed
      _s = s;
      _b = b;
    8778:	strb.w	r8, [r5, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    877c:	mvn.w	r8, #102	; 0x66
      _s = s;
      _b = b;
    8780:	strb.w	r1, [r5, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8784:	movs	r1, #22
    8786:	strb.w	r8, [r5, #1767]	; 0x6e7
      _s = s;
    878a:	mvn.w	r8, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    878e:	strb.w	r9, [r5, #1773]	; 0x6ed
    8792:	mov.w	r9, #65	; 0x41
      _s = s;
    8796:	strb.w	r8, [r5, #1768]	; 0x6e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    879a:	mvn.w	r8, #101	; 0x65
      _s = s;
    879e:	strb.w	r2, [r5, #1777]	; 0x6f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87a2:	movs	r2, #26
    87a4:	strb.w	r8, [r5, #1770]	; 0x6ea
      _s = s;
    87a8:	mvn.w	r8, #57	; 0x39
    87ac:	strb.w	r8, [r5, #1774]	; 0x6ee
      _b = b;
    87b0:	mvn.w	r8, #23
    87b4:	strb.w	r8, [r5, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87b8:	mvn.w	r8, #116	; 0x74
    87bc:	strb.w	r8, [r5, #1776]	; 0x6f0
      _s = s;
      _b = b;
    87c0:	ldrb.w	r8, [sp, #16]
    87c4:	strb.w	r8, [r5, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87c8:	mvn.w	r8, #124	; 0x7c
    87cc:	strb.w	r8, [r5, #1779]	; 0x6f3
      _s = s;
    87d0:	mov.w	r8, #24
    87d4:	strb.w	r8, [r5, #1780]	; 0x6f4
      _b = b;
    87d8:	ldrb.w	r8, [sp, #20]
    87dc:	strb.w	r8, [r5, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87e0:	mvn.w	r8, #114	; 0x72
    87e4:	strb.w	r8, [r5, #1782]	; 0x6f6
      _s = s;
      _b = b;
    87e8:	mvn.w	r8, #25
    87ec:	strb.w	r8, [r5, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87f0:	mvn.w	r8, #43	; 0x2b
    87f4:	strb.w	r8, [r5, #1785]	; 0x6f9
      _s = s;
    87f8:	mov.w	r8, #14
    87fc:	strb.w	r8, [r5, #1786]	; 0x6fa
      _b = b;
    8800:	mvn.w	r8, #41	; 0x29
    8804:	strb.w	r8, [r5, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8808:	ldrb.w	r8, [sp, #8]
    880c:	strb.w	r8, [r5, #1788]	; 0x6fc
      _s = s;
    8810:	mvn.w	r8, #119	; 0x77
    8814:	strb.w	r8, [r5, #1789]	; 0x6fd
      _b = b;
    8818:	mvn.w	r8, #38	; 0x26
    881c:	strb.w	r8, [r5, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8820:	mvn.w	r8, #56	; 0x38
    8824:	strb.w	r8, [r5, #1792]	; 0x700
      _b = b;
    8828:	ldrb.w	r8, [sp, #32]
    882c:	strb.w	r8, [r5, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8830:	mvn.w	r8, #8
    8834:	strb.w	r8, [r5, #1794]	; 0x702
      _s = s;
    8838:	mov.w	r8, #94	; 0x5e
    883c:	strb.w	r8, [r5, #1795]	; 0x703
      _b = b;
    8840:	mov.w	r8, #46	; 0x2e
    8844:	strb.w	r8, [r5, #1796]	; 0x704
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8848:	mov.w	r8, #83	; 0x53
    884c:	strb.w	r8, [r5, #1783]	; 0x6f7
    8850:	mov.w	r8, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8854:	strb.w	ip, [r5, #1797]	; 0x705
      _s = s;
    8858:	mov.w	ip, #77	; 0x4d
    885c:	strb.w	r6, [r5, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8860:	mvn.w	r6, #10
      _s = s;
      _b = b;
    8864:	strb.w	r4, [r5, #1769]	; 0x6e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8868:	strb.w	r6, [r5, #1791]	; 0x6ff
      _s = s;
      _b = b;
    886c:	mov.w	r6, #62	; 0x3e
    8870:	strb.w	r4, [r5, #1772]	; 0x6ec
    8874:	strb.w	r6, [r5, #1799]	; 0x707
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8878:	mov.w	r6, #95	; 0x5f
    887c:	strb.w	r0, [r5, #1771]	; 0x6eb
    8880:	strb.w	r6, [r5, #1801]	; 0x709
      _b = b;
    8884:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8888:	strb.w	r3, [r5, #1800]	; 0x708
    888c:	movs	r3, #224	; 0xe0
      _s = s;
      _b = b;
    888e:	strb.w	r6, [r5, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8892:	mvn.w	r6, #119	; 0x77
      _s = s;
    8896:	strb.w	fp, [r5, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    889a:	strb.w	r6, [r5, #1803]	; 0x70b
      _s = s;
    889e:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88a2:	strb.w	sl, [r5, #1818]	; 0x71a
      _s = s;
    88a6:	strb.w	r6, [r5, #1804]	; 0x70c
      _b = b;
    88aa:	mvn.w	r6, #53	; 0x35
    88ae:	strb.w	r6, [r5, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88b2:	mvn.w	r6, #111	; 0x6f
    88b6:	strb.w	r6, [r5, #1806]	; 0x70e
      _s = s;
    88ba:	mov.w	r6, #95	; 0x5f
    88be:	strb.w	r6, [r5, #1807]	; 0x70f
      _b = b;
    88c2:	ldrb.w	r6, [sp, #12]
    88c6:	strb.w	r6, [r5, #1808]	; 0x710
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88ca:	mvn.w	r6, #103	; 0x67
    88ce:	strb.w	r6, [r5, #1809]	; 0x711
      _s = s;
      _b = b;
    88d2:	mvn.w	r6, #8
    88d6:	strb.w	r6, [r5, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88da:	ldrb.w	r6, [sp, #24]
    88de:	strb.w	r6, [r5, #1812]	; 0x714
      _s = s;
      _b = b;
    88e2:	mvn.w	r6, #7
    88e6:	strb.w	r6, [r5, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88ea:	mvn.w	r6, #58	; 0x3a
    88ee:	strb.w	r6, [r5, #1815]	; 0x717
      _s = s;
    88f2:	mov.w	r6, #92	; 0x5c
    88f6:	strb.w	r6, [r5, #1816]	; 0x718
      _b = b;
    88fa:	mvn.w	r6, #8
    88fe:	strb.w	r6, [r5, #1817]	; 0x719
    8902:	ldrb.w	r6, [sp]
    8906:	strb.w	r6, [r5, #1820]	; 0x71c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    890a:	mvn.w	r6, #117	; 0x75
    890e:	strb.w	r6, [r5, #1821]	; 0x71d
      _s = s;
    8912:	mvn.w	r6, #7
    8916:	strb.w	r6, [r5, #1822]	; 0x71e
      _b = b;
    891a:	mvn.w	r6, #71	; 0x47
    891e:	strb.w	r6, [r5, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8922:	mvn.w	r6, #109	; 0x6d
    8926:	strb.w	r6, [r5, #1824]	; 0x720
      _s = s;
    892a:	ldrb.w	r6, [sp, #4]
    892e:	strb.w	r8, [r5, #1810]	; 0x712
    8932:	mov.w	r8, #107	; 0x6b
    8936:	strb.w	r6, [r5, #1825]	; 0x721
      _b = b;
    893a:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    893e:	strb.w	r8, [r5, #1819]	; 0x71b
      _b = b;
    8942:	mvn.w	r8, #61	; 0x3d
    8946:	strb.w	r6, [r5, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    894a:	mvn.w	r6, #121	; 0x79
      _s = s;
      _b = b;
    894e:	strb.w	r8, [r5, #1832]	; 0x728
    8952:	ldrb.w	r8, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8956:	strb.w	r6, [r5, #1827]	; 0x723
      _s = s;
    895a:	mvn.w	r6, #6
      _b = b;
    895e:	strb.w	r8, [r5, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8962:	mov.w	r8, #37	; 0x25
      _s = s;
    8966:	strb.w	r6, [r5, #1828]	; 0x724
      _b = b;
    896a:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    896e:	strb.w	r8, [r5, #1833]	; 0x729
      _s = s;
    8972:	ldrb.w	r8, [sp, #4]
      _b = b;
    8976:	strb.w	r6, [r5, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    897a:	mov.w	r6, #60	; 0x3c
      _s = s;
    897e:	strb.w	r8, [r5, #1834]	; 0x72a
    8982:	mvn.w	r8, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8986:	strb.w	r6, [r5, #1830]	; 0x726
      _s = s;
    898a:	mov.w	r6, #124	; 0x7c
    898e:	strb.w	r8, [r5, #1837]	; 0x72d
      _b = b;
    8992:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8996:	strb.w	r4, [r5, #1848]	; 0x738
      _s = s;
      _b = b;
    899a:	strb.w	r8, [r5, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    899e:	mvn.w	r8, #71	; 0x47
      _b = b;
    89a2:	ldr	r4, [sp, #0]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89a4:	strb.w	r8, [r5, #1843]	; 0x733
      _b = b;
    89a8:	ldrb.w	r8, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89ac:	strb.w	r6, [r5, #1831]	; 0x727
    89b0:	movs	r6, #105	; 0x69
      _b = b;
    89b2:	strb.w	r8, [r5, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89b6:	mov.w	r8, #62	; 0x3e
      _b = b;
    89ba:	strb.w	r4, [r5, #1859]	; 0x743
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89be:	strb.w	r8, [r5, #1849]	; 0x739
      _b = b;
    89c2:	mvn.w	r8, #43	; 0x2b
    89c6:	strb.w	r8, [r5, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89ca:	mov.w	r8, #24
    89ce:	strb.w	r8, [r5, #1855]	; 0x73f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89d2:	mvn.w	r8, #15
    89d6:	strb.w	r8, [r5, #1860]	; 0x744
      _s = s;
      _b = b;
    89da:	mvn.w	r8, #35	; 0x23
    89de:	strb.w	r8, [r5, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89e2:	ldrb.w	r8, [sp, #16]
    89e6:	strb.w	r8, [r5, #1863]	; 0x747
      _s = s;
    89ea:	ldrb.w	r8, [sp, #4]
    89ee:	strb.w	r8, [r5, #1864]	; 0x748
      _b = b;
    89f2:	mvn.w	r8, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89f6:	strb.w	r1, [r5, #1842]	; 0x732
      _s = s;
      _b = b;
    89fa:	strb.w	r8, [r5, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89fe:	mov.w	r8, #31
    8a02:	strb.w	r1, [r5, #1872]	; 0x750
    8a06:	strb.w	r8, [r5, #1836]	; 0x72c
      _s = s;
    8a0a:	mvn.w	r8, #51	; 0x33
      _b = b;
    8a0e:	ldr	r1, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8a10:	strb.w	r8, [r5, #1840]	; 0x730
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a14:	mov.w	r8, #13
    8a18:	strb.w	r2, [r5, #1839]	; 0x72f
    8a1c:	strb.w	r8, [r5, #1845]	; 0x735
      _s = s;
    8a20:	mov.w	r8, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a24:	strb.w	r7, [r5, #1857]	; 0x741
      _s = s;
    8a28:	strb.w	r8, [r5, #1846]	; 0x736
      _b = b;
    8a2c:	mvn.w	r8, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8a30:	strb.w	r0, [r5, #1867]	; 0x74b
      _b = b;
    8a34:	strb.w	r8, [r5, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8a38:	mov.w	r8, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a3c:	strb.w	r4, [r5, #1869]	; 0x74d
    8a40:	mov.w	r4, #101	; 0x65
      _s = s;
    8a44:	strb.w	r8, [r5, #1852]	; 0x73c
    8a48:	mvn.w	r8, #127	; 0x7f
    8a4c:	strb.w	r0, [r5, #1870]	; 0x74e
    8a50:	strb.w	r8, [r5, #1858]	; 0x742
    8a54:	mov.w	r8, #114	; 0x72
    8a58:	strb.w	fp, [r5, #1873]	; 0x751
    8a5c:	strb.w	r8, [r5, #1861]	; 0x745
      _b = b;
    8a60:	mvn.w	r8, #40	; 0x28
    8a64:	strb.w	r1, [r5, #1886]	; 0x75e
    8a68:	strb.w	r8, [r5, #1841]	; 0x731
    8a6c:	strb.w	r8, [r5, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a70:	mvn.w	r8, #16
      _s = s;
    8a74:	strb.w	sl, [r5, #1888]	; 0x760
      _b = b;
    8a78:	mvn.w	sl, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8a7c:	strb.w	r8, [r5, #1851]	; 0x73b
    8a80:	mvn.w	r8, #13
    8a84:	strb.w	r8, [r5, #1854]	; 0x73e
      _s = s;
      _b = b;
    8a88:	mvn.w	r8, #35	; 0x23
    8a8c:	strb.w	r8, [r5, #1865]	; 0x749
    8a90:	ldrb.w	r8, [sp, #20]
    8a94:	strb.w	r8, [r5, #1868]	; 0x74c
    8a98:	ldrb.w	r8, [sp, #8]
    8a9c:	strb.w	r8, [r5, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8aa0:	mov.w	r8, #41	; 0x29
    8aa4:	strb.w	r8, [r5, #1879]	; 0x757
      _b = b;
    8aa8:	ldrb.w	r8, [sp, #16]
    8aac:	strb.w	r8, [r5, #1883]	; 0x75b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ab0:	mov.w	r8, #124	; 0x7c
      _b = b;
    8ab4:	strb.w	r1, [r5, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ab8:	movs	r1, #49	; 0x31
      _s = s;
    8aba:	strb.w	r8, [r5, #1894]	; 0x766
      _b = b;
    8abe:	mvn.w	r8, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ac2:	strb.w	r4, [r5, #1887]	; 0x75f
      _s = s;
    8ac6:	mvn.w	r4, #4
      _b = b;
    8aca:	strb.w	r8, [r5, #1895]	; 0x767
    8ace:	mov.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ad2:	strb.w	r4, [r5, #1897]	; 0x769
      _b = b;
    8ad6:	mvn.w	r4, #53	; 0x35
    8ada:	strb.w	r8, [r5, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ade:	mov.w	r8, #51	; 0x33
      _b = b;
    8ae2:	strb.w	r4, [r5, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8ae6:	mvn.w	r4, #5
    8aea:	strb.w	r8, [r5, #1876]	; 0x754
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8aee:	mov.w	r8, #40	; 0x28
      _s = s;
    8af2:	strb.w	r4, [r5, #1900]	; 0x76c
      _b = b;
    8af6:	mvn.w	r4, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8afa:	strb.w	r8, [r5, #1878]	; 0x756
      _s = s;
      _b = b;
    8afe:	mvn.w	r8, #44	; 0x2c
    8b02:	strb.w	sl, [r5, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b06:	mvn.w	sl, #58	; 0x3a
      _b = b;
    8b0a:	strb.w	r8, [r5, #1880]	; 0x758
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b0e:	mov.w	r8, #113	; 0x71
    8b12:	strb.w	r9, [r5, #1884]	; 0x75c
      _s = s;
    8b16:	mov.w	r9, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b1a:	strb.w	r8, [r5, #1881]	; 0x759
      _s = s;
    8b1e:	mov.w	r8, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b22:	strb.w	r3, [r5, #1866]	; 0x74a
      _s = s;
    8b26:	strb.w	r8, [r5, #1882]	; 0x75a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b2a:	mvn.w	r8, #106	; 0x6a
      _s = s;
      _b = b;
    8b2e:	strb.w	r3, [r5, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b32:	movs	r3, #236	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b34:	strb.w	r8, [r5, #1893]	; 0x765
    8b38:	mvn.w	r8, #115	; 0x73
      _s = s;
      _b = b;
    8b3c:	strb.w	r4, [r5, #1904]	; 0x770
    8b40:	mvn.w	r4, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b44:	strb.w	r8, [r5, #1896]	; 0x768
    8b48:	mov.w	r8, #32
      _s = s;
    8b4c:	strb.w	sl, [r5, #1915]	; 0x77b
      _b = b;
    8b50:	ldr.w	sl, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b54:	strb.w	ip, [r5, #1891]	; 0x763
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b58:	strb.w	r8, [r5, #1875]	; 0x753
    8b5c:	mov.w	r8, #53	; 0x35
      _s = s;
      _b = b;
    8b60:	strb.w	lr, [r5, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b64:	strb.w	r6, [r5, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b68:	strb.w	r6, [r5, #1890]	; 0x762
      _s = s;
      _b = b;
    8b6c:	strb.w	r4, [r5, #1907]	; 0x773
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b70:	mov	r4, r5
      _s = s;
    8b72:	strb.w	r3, [r5, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b76:	strb.w	r2, [r5, #1911]	; 0x777
      _s = s;
    8b7a:	strb.w	r9, [r5, #1912]	; 0x778
      _b = b;
    8b7e:	strb.w	sl, [r5, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b82:	strb.w	r2, [r5, #1917]	; 0x77d
      _s = s;
      _b = b;
    8b86:	strb.w	sl, [r5, #1919]	; 0x77f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b8a:	strb.w	r2, [r5, #1920]	; 0x780
    8b8e:	strb.w	r2, [r5, #1923]	; 0x783
      _s = s;
    8b92:	mov.w	r2, #66	; 0x42
      _b = b;
    8b96:	ldr.w	ip, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8b9a:	strb.w	r2, [r5, #1906]	; 0x772
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8b9e:	mov.w	r2, #30
      _s = s;
      _b = b;
    8ba2:	strb.w	ip, [r5, #1922]	; 0x782
    8ba6:	strb.w	ip, [r5, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8baa:	mvn.w	ip, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bae:	strb.w	r2, [r5, #1914]	; 0x77a
      _s = s;
    8bb2:	mvn.w	r2, #83	; 0x53
    8bb6:	strb.w	ip, [r5, #1930]	; 0x78a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bba:	mvn.w	ip, #108	; 0x6c
      _s = s;
    8bbe:	strb.w	r2, [r5, #1918]	; 0x77e
    8bc2:	mov.w	r2, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bc6:	strb.w	ip, [r5, #1899]	; 0x76b
      _s = s;
      _b = b;
    8bca:	mvn.w	ip, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8bce:	strb.w	r2, [r5, #1927]	; 0x787
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bd2:	mov.w	r2, #35	; 0x23
      _s = s;
      _b = b;
    8bd6:	strb.w	ip, [r5, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8bda:	mvn.w	ip, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bde:	strb.w	r2, [r5, #1908]	; 0x774
    8be2:	mov.w	r2, #10
      _s = s;
    8be6:	strb.w	ip, [r5, #1924]	; 0x784
      _b = b;
    8bea:	mvn.w	ip, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bee:	strb.w	r2, [r5, #1926]	; 0x786
      _s = s;
      _b = b;
    8bf2:	mvn.w	r2, #46	; 0x2e
    8bf6:	strb.w	ip, [r5, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8bfa:	mvn.w	ip, #112	; 0x70
      _s = s;
      _b = b;
    8bfe:	strb.w	r2, [r5, #1931]	; 0x78b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c02:	mov	r2, r9
    8c04:	strb.w	r9, [r5, #1933]	; 0x78d
    8c08:	ldrb.w	r9, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c0c:	strb.w	ip, [r5, #1902]	; 0x76e
      _s = s;
    8c10:	mvn.w	ip, #73	; 0x49
    8c14:	strb.w	r9, [r5, #1936]	; 0x790
      _b = b;
    8c18:	ldrb.w	r9, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c1c:	ldrb.w	sl, [sp, #24]
      _b = b;
    8c20:	strb.w	r3, [r5, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c24:	movs	r3, #235	; 0xeb
      _s = s;
    8c26:	strb.w	ip, [r5, #1903]	; 0x76f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c2a:	mov.w	ip, #67	; 0x43
      _s = s;
      _b = b;
    8c2e:	strb.w	r9, [r5, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c32:	ldrb.w	r9, [sp]
      _s = s;
    8c36:	strb.w	sl, [r5, #1921]	; 0x781
      _b = b;
    8c3a:	mov.w	sl, #230	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c3e:	strb.w	r3, [r5, #1929]	; 0x789
    8c42:	strb.w	ip, [r5, #1905]	; 0x771
      _s = s;
    8c46:	mov	ip, r0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c48:	strb.w	r3, [r5, #1935]	; 0x78f
    8c4c:	strb.w	r9, [r5, #1938]	; 0x792
      _s = s;
      _b = b;
    8c50:	mvn.w	r9, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c54:	strb.w	r3, [r5, #1939]	; 0x793
      _b = b;
    8c58:	ldrb.w	r3, [sp, #32]
    8c5c:	strb.w	r2, [r5, #1958]	; 0x7a6
    8c60:	strb.w	r3, [r5, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c64:	ldrb.w	r3, [sp, #16]
      _s = s;
    8c68:	strb.w	r0, [r5, #1942]	; 0x796
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c6c:	strb.w	r3, [r5, #1941]	; 0x795
    8c70:	mvn.w	r3, #28
      _s = s;
      _b = b;
    8c74:	strb.w	lr, [r5, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c78:	mov.w	lr, #226	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c7c:	strb.w	r3, [r5, #1944]	; 0x798
      _s = s;
      _b = b;
    8c80:	mvn.w	r3, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8c84:	strb.w	r0, [r5, #1945]	; 0x799
      _b = b;
    8c88:	strb.w	r3, [r5, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c8c:	ldrb.w	r3, [sp, #44]	; 0x2c
      _s = s;
    8c90:	strb.w	r0, [r5, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c94:	strb.w	r3, [r5, #1947]	; 0x79b
      _s = s;
      _b = b;
    8c98:	ldrb.w	r3, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8c9c:	strb.w	fp, [r5, #1962]	; 0x7aa
    8ca0:	mov.w	fp, #243	; 0xf3
      _s = s;
      _b = b;
    8ca4:	strb.w	r3, [r5, #1949]	; 0x79d
    8ca8:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cac:	strb.w	r1, [r5, #1959]	; 0x7a7
      _s = s;
      _b = b;
    8cb0:	strb.w	r3, [r5, #1952]	; 0x7a0
    8cb4:	mvn.w	r3, #7
// Pin layouts on the teensy 4
//First: 1,0,24,25, 19,18,14,15,17,16,22,23,20,21,26,27
//Second: 10,12,11,13,6,9,32,8,7
//Third: 37, 36, 35, 34, 39, 38, 28, 31, 30

Adafruit_NeoPixel screen_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    8cb8:	ldr	r0, [pc, #952]	; (9074 <_GLOBAL__sub_I_nextTime1+0x73e0>)
    8cba:	strb.w	r3, [r5, #1955]	; 0x7a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cbe:	mov.w	r3, #37	; 0x25
    8cc2:	strb.w	r3, [r5, #1956]	; 0x7a4
      _s = s;
    8cc6:	mov.w	r3, #50	; 0x32
    8cca:	strb.w	r3, [r5, #1957]	; 0x7a5
      _b = b;
    8cce:	mov	r3, r2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8cd0:	mov.w	r2, #91	; 0x5b
    8cd4:	strb.w	r3, [r5, #1966]	; 0x7ae
    8cd8:	movs	r3, #82	; 0x52
    8cda:	strb.w	r2, [r5, #1960]	; 0x7a8
      _b = b;
    8cde:	mvn.w	r2, #9
    8ce2:	strb.w	r2, [r5, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ce6:	mov.w	r2, #33	; 0x21
    8cea:	strb.w	r2, [r5, #1950]	; 0x79e
      _s = s;
      _b = b;
    8cee:	mvn.w	r2, #82	; 0x52
    8cf2:	strb.w	r2, [r5, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8cf6:	mov.w	r2, #59	; 0x3b
    8cfa:	strb.w	r2, [r5, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8cfe:	mov.w	r2, #38	; 0x26
    8d02:	strb.w	r2, [r5, #1953]	; 0x7a1
      _s = s;
    8d06:	mov.w	r2, #63	; 0x3f
    8d0a:	strb.w	r2, [r5, #1954]	; 0x7a2
    8d0e:	mvn.w	r2, #60	; 0x3c
    8d12:	strb.w	r2, [r5, #1963]	; 0x7ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d16:	mvn.w	r2, #14
    8d1a:	strb.w	r2, [r5, #1932]	; 0x78c
      _s = s;
      _b = b;
    8d1e:	mvn.w	r2, #10
    8d22:	strb.w	r2, [r5, #1964]	; 0x7ac
    8d26:	mvn.w	r2, #14
    8d2a:	strb.w	r2, [r5, #1967]	; 0x7af
    8d2e:	movs	r2, #7
    8d30:	strb.w	r9, [r5, #1970]	; 0x7b2
    8d34:	mvn.w	r9, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8d38:	strb.w	r6, [r5, #1972]	; 0x7b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d3c:	mvn.w	r6, #102	; 0x66
      _s = s;
      _b = b;
    8d40:	strb.w	r9, [r5, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d44:	mov.w	r9, #48	; 0x30
      _s = s;
    8d48:	ldrb.w	r1, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d4c:	strb.w	r9, [r5, #1968]	; 0x7b0
    8d50:	mov.w	r9, #52	; 0x34
    8d54:	strb.w	r6, [r5, #1977]	; 0x7b9
    8d58:	strb.w	r9, [r5, #1971]	; 0x7b3
    8d5c:	mvn.w	r9, #104	; 0x68
      _s = s;
    8d60:	ldrb.w	r6, [sp, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d64:	strb.w	r9, [r5, #1974]	; 0x7b6
      _s = s;
    8d68:	mvn.w	r9, #105	; 0x69
    8d6c:	strb.w	r1, [r5, #1969]	; 0x7b1
    8d70:	mov.w	r1, #676	; 0x2a4
    8d74:	strb.w	r9, [r5, #1975]	; 0x7b7
      _b = b;
    8d78:	mvn.w	r9, #37	; 0x25
    8d7c:	strb.w	r7, [r5, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8d80:	strb.w	r6, [r5, #1978]	; 0x7ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d84:	strb.w	r8, [r5, #1965]	; 0x7ad
      _s = s;
      _b = b;
    8d88:	strb.w	r9, [r5, #1976]	; 0x7b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d8c:	mov.w	r5, #32
      _s = s;
    8d90:	strb.w	ip, [r4, #1993]	; 0x7c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8d94:	strb.w	r5, [r4, #1986]	; 0x7c2
    8d98:	mov.w	r5, #69	; 0x45
      _s = s;
      _b = b;
    8d9c:	strb.w	sl, [r4, #1994]	; 0x7ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8da0:	strb.w	r5, [r4, #1980]	; 0x7bc
      _s = s;
    8da4:	mov.w	r5, #43	; 0x2b
    8da8:	ldr	r7, [pc, #716]	; (9078 <_GLOBAL__sub_I_nextTime1+0x73e4>)
    8daa:	strb.w	r5, [r4, #1981]	; 0x7bd
      _b = b;
    8dae:	mvn.w	r5, #52	; 0x34
    8db2:	ldr	r6, [pc, #712]	; (907c <_GLOBAL__sub_I_nextTime1+0x73e8>)
    8db4:	strb.w	r5, [r4, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8db8:	mvn.w	r5, #68	; 0x44
Adafruit_NeoPixel screen_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8dbc:	ldr.w	r8, [pc, #740]	; 90a4 <_GLOBAL__sub_I_nextTime1+0x7410>
    8dc0:	strb.w	r5, [r4, #1984]	; 0x7c0
    8dc4:	mvn.w	r5, #3
    8dc8:	strb.w	r5, [r4, #1990]	; 0x7c6
    8dcc:	mvn.w	r5, #6
    8dd0:	strb.w	r5, [r4, #1996]	; 0x7cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8dd4:	mov.w	r5, #33	; 0x21
    8dd8:	strb.w	r5, [r4, #1983]	; 0x7bf
    8ddc:	strb.w	r5, [r4, #1989]	; 0x7c5
      _s = s;
      _b = b;
    8de0:	mvn.w	r5, #21
    8de4:	strb.w	r5, [r4, #1985]	; 0x7c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8de8:	mvn.w	r5, #26
    8dec:	strb.w	r5, [r4, #1987]	; 0x7c3
      _b = b;
    8df0:	mvn.w	r5, #27
    8df4:	strb.w	r5, [r4, #1988]	; 0x7c4
    8df8:	strb.w	r5, [r4, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8dfc:	mov.w	r5, #37	; 0x25
    8e00:	strb.w	r5, [r4, #1992]	; 0x7c8
    8e04:	strb.w	r5, [r4, #1995]	; 0x7cb
    8e08:	mov.w	r5, #35	; 0x23
      _s = s;
      _b = b;
    8e0c:	strb.w	sl, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e10:	strb.w	r5, [r4, #1998]	; 0x7ce
    8e14:	mov.w	r5, #32
      _s = s;
    8e18:	strb.w	ip, [r4, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e1c:	strb.w	r5, [r4, #2001]	; 0x7d1
      _s = s;
      _b = b;
    8e20:	mvn.w	r5, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e24:	strb.w	ip, [r4, #2023]	; 0x7e7
      _b = b;
    8e28:	strb.w	r5, [r4, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e2c:	mvn.w	r5, #14
      _s = s;
    8e30:	strb.w	lr, [r4, #1999]	; 0x7cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e34:	strb.w	r5, [r4, #2013]	; 0x7dd
      _s = s;
    8e38:	mvn.w	r5, #4
      _b = b;
    8e3c:	strb.w	lr, [r4, #2003]	; 0x7d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e40:	strb.w	r5, [r4, #2017]	; 0x7e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e44:	mvn.w	r5, #26
      _s = s;
      _b = b;
    8e48:	strb.w	lr, [r4, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e4c:	strb.w	r5, [r4, #2025]	; 0x7e9
      _s = s;
      _b = b;
    8e50:	mvn.w	r5, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e54:	strb.w	r9, [r4, #2002]	; 0x7d2
      _b = b;
    8e58:	strb.w	r5, [r4, #2027]	; 0x7eb
    8e5c:	mvn.w	r5, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e60:	strb.w	sl, [r4, #2022]	; 0x7e6
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8e64:	movw	sl, #5432	; 0x1538
      _s = s;
      _b = b;
    8e68:	strb.w	r5, [r4, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e6c:	mov.w	r5, #12
    8e70:	strb.w	fp, [r4, #2007]	; 0x7d7
    8e74:	strb.w	r5, [r4, #2004]	; 0x7d4
      _s = s;
    8e78:	mov.w	r5, #116	; 0x74
      _b = b;
    8e7c:	strb.w	fp, [r4, #2009]	; 0x7d9
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8e80:	mov.w	fp, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8e84:	strb.w	r5, [r4, #2005]	; 0x7d5
    8e88:	mov.w	r5, #57	; 0x39


//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    8e8c:	ldr.w	r9, [pc, #536]	; 90a8 <_GLOBAL__sub_I_nextTime1+0x7414>
    8e90:	strb.w	r5, [r4, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8e94:	mvn.w	r5, #15
    8e98:	strb.w	r5, [r4, #2010]	; 0x7da
      _s = s;
    8e9c:	mvn.w	r5, #74	; 0x4a
    8ea0:	strb.w	r5, [r4, #2011]	; 0x7db
    8ea4:	mvn.w	r5, #17
    8ea8:	strb.w	r5, [r4, #2014]	; 0x7de
      _b = b;
    8eac:	mvn.w	r5, #56	; 0x38
    8eb0:	strb.w	r5, [r4, #2015]	; 0x7df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8eb4:	mvn.w	r5, #20
    8eb8:	strb.w	r5, [r4, #2016]	; 0x7e0
      _s = s;
      _b = b;
    8ebc:	mvn.w	r5, #57	; 0x39
    8ec0:	strb.w	r5, [r4, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8ec4:	mvn.w	r5, #24
    8ec8:	strb.w	r5, [r4, #2019]	; 0x7e3
      _s = s;
      _b = b;
    8ecc:	mvn.w	r5, #62	; 0x3e
    8ed0:	strb.w	r5, [r4, #2021]	; 0x7e5
    8ed4:	mvn.w	r5, #65	; 0x41
    8ed8:	strb.w	r5, [r4, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8edc:	mvn.w	r5, #5
    8ee0:	strb.w	r5, [r4, #2026]	; 0x7ea
// Pin layouts on the teensy 4
//First: 1,0,24,25, 19,18,14,15,17,16,22,23,20,21,26,27
//Second: 10,12,11,13,6,9,32,8,7
//Third: 37, 36, 35, 34, 39, 38, 28, 31, 30

Adafruit_NeoPixel screen_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    8ee4:	bl	93e8 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8ee8:	mov	r2, r7
    8eea:	mov	r1, r6
    8eec:	ldr	r0, [pc, #388]	; (9074 <_GLOBAL__sub_I_nextTime1+0x73e0>)
    8eee:	bl	b154 <__aeabi_atexit>
Adafruit_NeoPixel screen_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8ef2:	movs	r3, #82	; 0x52
    8ef4:	mov	r0, r8
    8ef6:	movs	r2, #8
    8ef8:	mov.w	r1, #676	; 0x2a4


//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    8efc:	ldr	r5, [pc, #384]	; (9080 <_GLOBAL__sub_I_nextTime1+0x73ec>)
//First: 1,0,24,25, 19,18,14,15,17,16,22,23,20,21,26,27
//Second: 10,12,11,13,6,9,32,8,7
//Third: 37, 36, 35, 34, 39, 38, 28, 31, 30

Adafruit_NeoPixel screen_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel screen_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8efe:	bl	93e8 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8f02:	mov	r2, r7
    8f04:	mov	r1, r6
    8f06:	mov	r0, r8
    8f08:	bl	b154 <__aeabi_atexit>


//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    8f0c:	movs	r3, #82	; 0x52
    8f0e:	mov	r0, r9
    8f10:	movs	r2, #2
    8f12:	movs	r1, #120	; 0x78
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8f14:	ldr.w	r8, [pc, #404]	; 90ac <_GLOBAL__sub_I_nextTime1+0x7418>
    8f18:	bl	93e8 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8f1c:	mov	r2, r7
    8f1e:	mov	r1, r6
    8f20:	mov	r0, r9
    8f22:	bl	b154 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    8f26:	movs	r3, #82	; 0x52
    8f28:	mov	r0, r5
    8f2a:	movs	r2, #14
    8f2c:	movs	r1, #120	; 0x78
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8f2e:	movw	r9, #5436	; 0x153c
    8f32:	bl	93e8 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8f36:	mov	r2, r7
    8f38:	mov	r1, r6
    8f3a:	mov	r0, r5
    8f3c:	bl	b154 <__aeabi_atexit>
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8f40:	movs	r7, #4
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8f42:	ldr.w	ip, [pc, #364]	; 90b0 <_GLOBAL__sub_I_nextTime1+0x741c>
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8f46:	mov.w	r6, #10
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8f4a:	ldr.w	lr, [pc, #360]	; 90b4 <_GLOBAL__sub_I_nextTime1+0x7420>
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8f4e:	movs	r3, #0
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8f50:	str.w	r7, [ip]
      _penalty = penalty;
      _reward = reward;
    8f54:	movs	r2, #1
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8f56:	ldr	r7, [pc, #300]	; (9084 <_GLOBAL__sub_I_nextTime1+0x73f0>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8f58:	strb.w	r6, [r8, #8]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8f5c:	mov.w	r6, #4
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8f60:	str.w	r7, [ip, sl]
    8f64:	str.w	r7, [r8, sl]
      _background = current_bg;
    8f68:	ldr	r7, [pc, #284]	; (9088 <_GLOBAL__sub_I_nextTime1+0x73f4>)
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8f6a:	strb.w	r6, [ip, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8f6e:	mov.w	r6, #10
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8f72:	str.w	r7, [ip, r9]
    8f76:	str.w	r7, [r8, r9]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8f7a:	ldr	r7, [pc, #264]	; (9084 <_GLOBAL__sub_I_nextTime1+0x73f0>)
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8f7c:	strb.w	r6, [lr, #7]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8f80:	mov.w	r6, #3
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8f84:	str.w	r7, [lr, sl]
      _background = current_bg;
    8f88:	ldr	r7, [pc, #252]	; (9088 <_GLOBAL__sub_I_nextTime1+0x73f4>)
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8f8a:	strb.w	r6, [lr, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8f8e:	mov.w	r6, #20
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8f92:	str.w	r7, [lr, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8f96:	movs	r7, #3
    8f98:	ldr	r1, [pc, #240]	; (908c <_GLOBAL__sub_I_nextTime1+0x73f8>)
    8f9a:	str.w	r7, [lr]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8f9e:	movs	r7, #0
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8fa0:	strb.w	r6, [lr, #8]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8fa4:	movs	r6, #0
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8fa6:	strb.w	r2, [ip, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8faa:	strb.w	r2, [ip, #8]
      _isBg = isBg;
    8fae:	strb.w	r2, [ip, #9]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8fb2:	strb.w	r2, [r8, #4]
      _floorInit = floorInit;
    8fb6:	strb.w	r3, [ip, #6]
      _minInit = minInit;
    8fba:	strb.w	r3, [ip, #7]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8fbe:	strb.w	r3, [r8, #6]
      _minInit = minInit;
    8fc2:	strb.w	r3, [r8, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    8fc6:	strb.w	r3, [r8, #9]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8fca:	strb.w	r2, [lr, #4]
      _floorInit = floorInit;
    8fce:	strb.w	r3, [lr, #6]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8fd2:	strb.w	r3, [lr, #9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8fd6:	str.w	fp, [r1]
    8fda:	str.w	fp, [r8]
      _penalty = penalty;
    8fde:	strb.w	fp, [r8, #5]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8fe2:	ldr	r0, [pc, #172]	; (9090 <_GLOBAL__sub_I_nextTime1+0x73fc>)
    8fe4:	ldr	r5, [pc, #172]	; (9094 <_GLOBAL__sub_I_nextTime1+0x7400>)
    8fe6:	strd	r6, r7, [r8, #16]
    8fea:	strd	r6, r7, [ip, #16]
    8fee:	strd	r6, r7, [lr, #16]
    8ff2:	strd	r6, r7, [r1, #16]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8ff6:	ldr	r7, [pc, #140]	; (9084 <_GLOBAL__sub_I_nextTime1+0x73f0>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8ff8:	mov.w	r6, #10
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8ffc:	strb	r2, [r1, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8ffe:	str.w	r7, [r1, sl]
      _background = current_bg;
    9002:	ldr	r7, [pc, #132]	; (9088 <_GLOBAL__sub_I_nextTime1+0x73f4>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    9004:	strb	r6, [r1, #8]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    9006:	mov.w	r6, #3
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    900a:	str.w	r7, [r1, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    900e:	movs	r7, #3
      _penalty = penalty;
      _reward = reward;
    9010:	strb	r2, [r1, #4]
      _floorInit = floorInit;
    9012:	strb	r3, [r1, #6]
      _minInit = minInit;
    9014:	strb	r2, [r1, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    9016:	strb	r3, [r1, #9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    9018:	str	r7, [r0, #0]
    901a:	movs	r7, #4
    901c:	ldr	r1, [pc, #120]	; (9098 <_GLOBAL__sub_I_nextTime1+0x7404>)
      _penalty = penalty;
    901e:	strb	r6, [r0, #5]
    9020:	mov.w	r6, #4
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    9024:	str	r7, [r1, #0]
      _penalty = penalty;
    9026:	strb	r6, [r1, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    9028:	mov.w	r6, #10
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    902c:	ldr	r7, [pc, #108]	; (909c <_GLOBAL__sub_I_nextTime1+0x7408>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    902e:	strb	r6, [r5, #8]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    9030:	movs	r6, #0
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    9032:	str.w	r7, [r1, r9]
    9036:	str.w	r7, [r5, r9]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    903a:	movs	r7, #0
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    903c:	str.w	r4, [r1, sl]
    9040:	str.w	r4, [r5, sl]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    9044:	strb	r2, [r1, #4]
      _floorInit = floorInit;
    9046:	strb	r3, [r1, #6]
      _minInit = minInit;
    9048:	strb	r3, [r1, #7]
      _maxInit = maxInit;
    904a:	strb	r2, [r1, #8]
      _isBg = isBg;
    904c:	strb	r2, [r1, #9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    904e:	str.w	fp, [r5]
      _penalty = penalty;
    9052:	strb.w	fp, [r5, #5]
      _reward = reward;
    9056:	strb	r2, [r5, #4]
      _floorInit = floorInit;
    9058:	strb	r3, [r5, #6]
      _minInit = minInit;
    905a:	strb	r3, [r5, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    905c:	strb	r3, [r5, #9]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    905e:	strb	r2, [r0, #4]
      _floorInit = floorInit;
    9060:	strb	r3, [r0, #6]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    9062:	strd	r6, r7, [r1, #16]
    9066:	strd	r6, r7, [r5, #16]
      _target = target;
    906a:	ldr	r1, [pc, #52]	; (90a0 <_GLOBAL__sub_I_nextTime1+0x740c>)
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    906c:	mov.w	r5, #10
    9070:	b.n	90b8 <_GLOBAL__sub_I_nextTime1+0x7424>
    9072:	nop
    9074:	.word	0x2000af28
    9078:	.word	0x20000744
    907c:	.word	0x00009101
    9080:	.word	0x2000f9a4
    9084:	.word	0x20009f50
    9088:	.word	0x20000748
    908c:	.word	0x2000e450
    9090:	.word	0x20010ef8
    9094:	.word	0x20008a10
    9098:	.word	0x20013978
    909c:	.word	0x200009ec
    90a0:	.word	0x2000af50
    90a4:	.word	0x2000af3c
    90a8:	.word	0x2000f990
    90ac:	.word	0x200074d0
    90b0:	.word	0x20012438
    90b4:	.word	0x2000f9b8
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    90b8:	strd	r6, r7, [r0, #16]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    90bc:	strb	r5, [r0, #7]
      _maxInit = maxInit;
    90be:	mov.w	r5, #20
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    90c2:	strb	r2, [r1, #5]
      _reward = reward;
    90c4:	strb	r2, [r1, #4]
      _floorInit = floorInit;
      _minInit = minInit;
    90c6:	strb	r2, [r1, #7]
      _maxInit = maxInit;
    90c8:	mov.w	r2, #10
    90cc:	strb	r5, [r0, #8]
      _isBg = isBg;
    90ce:	strb	r3, [r0, #9]
      _cellmask = current_mask;
      _background = current_bg;
    90d0:	ldr	r5, [pc, #40]	; (90fc <_GLOBAL__sub_I_nextTime1+0x7468>)
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    90d2:	str.w	r4, [r0, sl]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    90d6:	strb	r3, [r1, #6]
      _minInit = minInit;
      _maxInit = maxInit;
    90d8:	strb	r2, [r1, #8]
      _isBg = isBg;
    90da:	mov	r2, r1
    90dc:	strb	r3, [r1, #9]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    90de:	mov	r3, r6
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    90e0:	str.w	r4, [r1, sl]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    90e4:	mov	r4, r7
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    90e6:	str.w	r5, [r0, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    90ea:	str.w	fp, [r1]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    90ee:	str.w	r5, [r2, r9]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    90f2:	strd	r3, r4, [r1, #16]

  //test_screen();
  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
   
}
    90f6:	add	sp, #60	; 0x3c
    90f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90fc:	.word	0x200009ec

00009100 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    9100:	push	{r4, lr}
    9102:	mov	r4, r0
  if(pixels)   free(pixels);
    9104:	ldr	r0, [r0, #8]
    9106:	cbz	r0, 910c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    9108:	bl	b248 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    910c:	ldrsb.w	r0, [r4, #6]
    9110:	cmp	r0, #0
    9112:	blt.n	911c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    9114:	uxtb	r0, r0
    9116:	movs	r1, #0
    9118:	bl	98fc <pinMode>
}
    911c:	mov	r0, r4
    911e:	pop	{r4, pc}

00009120 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    9120:	push	{r4, lr}
    9122:	mov	r4, r0
  if(pin >= 0) {
    9124:	ldrsb.w	r0, [r0, #6]
    9128:	cmp	r0, #0
    912a:	blt.n	913c <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    912c:	uxtb	r0, r0
    912e:	movs	r1, #1
    9130:	bl	98fc <pinMode>
    digitalWrite(pin, LOW);
    9134:	movs	r1, #0
    9136:	ldrb	r0, [r4, #6]
    9138:	bl	98f0 <digitalWrite>
  }
  begun = true;
    913c:	movs	r3, #1
    913e:	strb	r3, [r4, #1]
    9140:	pop	{r4, pc}
    9142:	nop

00009144 <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    9144:	push	{r3, r4, r5, lr}
    9146:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    9148:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    914a:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    914c:	cbz	r0, 9152 <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    914e:	bl	b248 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    9152:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    9154:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    9156:	ldrb	r0, [r4, #12]
    9158:	cmp	r3, r0
    915a:	ite	eq
    915c:	moveq	r0, #3
    915e:	movne	r0, #4
    9160:	smulbb	r0, r0, r5
    9164:	uxth	r0, r0
    9166:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    9168:	bl	b160 <calloc>
    916c:	str	r0, [r4, #8]
    916e:	cbz	r0, 9174 <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    9170:	strh	r5, [r4, #2]
    9172:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    9174:	strh	r0, [r4, #4]
    9176:	strh	r0, [r4, #2]
    9178:	pop	{r3, r4, r5, pc}
    917a:	nop

0000917c <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    917c:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    917e:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    9180:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    9184:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    9188:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    918a:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    918e:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    9192:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    9196:	ite	hi
    9198:	movhi	r6, #0
    919a:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    919c:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    91a0:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    91a4:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    91a6:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    91a8:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    91aa:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    91ac:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    91ae:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    91b0:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    91b2:	cbz	r5, 91ca <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    91b4:	subs	r1, r2, r1
    91b6:	clz	r1, r1
    91ba:	lsrs	r1, r1, #5
    91bc:	cmp	r1, r4
    91be:	beq.n	91ca <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    91c0:	ldrh	r1, [r0, #2]
  }
}
    91c2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    91c6:	b.w	9144 <Adafruit_NeoPixel::updateLength(unsigned short)>
    91ca:	pop	{r4, r5, r6, r7, pc}

000091cc <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    91cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    91d0:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    91d2:	sub	sp, #20
    91d4:	str	r0, [sp, #12]

  if(!pixels) return;
    91d6:	cmp	r3, #0
    91d8:	beq.n	92be <Adafruit_NeoPixel::show()+0xf2>
    91da:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    91dc:	bl	981c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    91e0:	ldr	r3, [r4, #16]
    91e2:	subs	r0, r0, r3
    91e4:	cmp.w	r0, #300	; 0x12c
    91e8:	bcc.n	91dc <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    91ea:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    91ec:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    91ee:	ldr	r0, [pc, #408]	; (9388 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    91f0:	ldrsb.w	r3, [r6, #6]
    91f4:	ldr	r4, [pc, #404]	; (938c <Adafruit_NeoPixel::show()+0x1c0>)
    91f6:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    91f8:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    91fa:	ldr	r1, [pc, #404]	; (9390 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    91fc:	ldr.w	ip, [r4, r3]
    9200:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    9202:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9204:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    9208:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    920c:	mov	r5, r6
    920e:	mov	r6, r3
    9210:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    9212:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9214:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9216:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9218:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    921a:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    921c:	ldr	r4, [pc, #372]	; (9394 <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    921e:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9222:	str	r2, [sp, #8]
    9224:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    9226:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9228:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    922a:	ldr	r1, [pc, #364]	; (9398 <Adafruit_NeoPixel::show()+0x1cc>)
    922c:	ldr	r0, [r4, #0]
    922e:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    9230:	cmp	r2, #0
    9232:	beq.n	92c4 <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9234:	ldr	r5, [pc, #356]	; (939c <Adafruit_NeoPixel::show()+0x1d0>)
    9236:	lsrs	r3, r3, #8
    while(p < end) {
    9238:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    923a:	umull	r2, r3, r5, r3
    923e:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    9242:	bcs.n	929e <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    9244:	ldr	r7, [pc, #344]	; (93a0 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    9246:	ldr	r6, [pc, #348]	; (93a4 <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9248:	ldr	r3, [sp, #4]
    924a:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    924e:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9252:	ldrb.w	sl, [r3], #1
    9256:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    9258:	ldr	r2, [r4, #0]
    925a:	ldr	r3, [r1, #0]
    925c:	subs	r2, r2, r0
    925e:	lsrs	r3, r3, #8
    9260:	umull	fp, r3, r5, r3
    9264:	cmp.w	r2, r3, lsr #4
    9268:	bcc.n	9258 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    926a:	ldr	r3, [pc, #296]	; (9394 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    926c:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    9270:	ldr	r0, [r3, #0]
        *set = msk;
    9272:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    9276:	beq.n	9376 <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    9278:	ldr	r3, [r4, #0]
    927a:	ldr	r2, [r1, #0]
    927c:	subs	r3, r3, r0
    927e:	umull	fp, r2, r7, r2
    9282:	cmp.w	r3, r2, lsr #19
    9286:	bcc.n	9278 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9288:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    928c:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9290:	mov.w	lr, lr, lsr #1
    9294:	bne.n	9258 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    9296:	ldr	r3, [sp, #8]
    9298:	ldr	r2, [sp, #4]
    929a:	cmp	r3, r2
    929c:	bne.n	9248 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    929e:	ldr	r5, [pc, #244]	; (9394 <Adafruit_NeoPixel::show()+0x1c8>)
    92a0:	ldr	r4, [pc, #248]	; (939c <Adafruit_NeoPixel::show()+0x1d0>)
    92a2:	ldr	r2, [r5, #0]
    92a4:	ldr	r3, [r1, #0]
    92a6:	subs	r2, r2, r0
    92a8:	lsrs	r3, r3, #8
    92aa:	umull	r6, r3, r4, r3
    92ae:	cmp.w	r2, r3, lsr #4
    92b2:	bcc.n	92a2 <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    92b4:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    92b6:	bl	981c <micros>
    92ba:	ldr	r3, [sp, #12]
    92bc:	str	r0, [r3, #16]
}
    92be:	add	sp, #20
    92c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    92c4:	ldr	r6, [pc, #212]	; (939c <Adafruit_NeoPixel::show()+0x1d0>)
    92c6:	lsrs	r3, r3, #7
    92c8:	umull	r2, r3, r6, r3
    while(p < end) {
    92cc:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    92ce:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    92d2:	ldr	r3, [sp, #4]
    92d4:	cmp	r3, r2
    92d6:	bcs.n	9342 <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    92d8:	ldr.w	lr, [pc, #204]	; 93a8 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    92dc:	ldr	r7, [pc, #196]	; (93a4 <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    92de:	ldr	r3, [sp, #4]
    92e0:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    92e4:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    92e8:	ldrb.w	fp, [r3], #1
    92ec:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    92ee:	ldr	r2, [r4, #0]
    92f0:	ldr	r3, [r1, #0]
    92f2:	subs	r2, r2, r0
    92f4:	lsrs	r3, r3, #7
    92f6:	umull	r5, r3, r6, r3
    92fa:	cmp.w	r2, r3, lsr #4
    92fe:	bcc.n	92ee <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    9300:	ldr	r3, [pc, #144]	; (9394 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    9302:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    9306:	ldr	r0, [r3, #0]
        *set = msk;
    9308:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    930c:	beq.n	9364 <Adafruit_NeoPixel::show()+0x198>
    930e:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    9312:	ldr	r2, [r4, #0]
    9314:	ldr	r5, [r1, #0]
    9316:	subs	r2, r2, r0
    9318:	umull	ip, r3, lr, r5
    931c:	subs	r5, r5, r3
    931e:	add.w	r3, r3, r5, lsr #1
    9322:	cmp.w	r2, r3, lsr #19
    9326:	bcc.n	9312 <Adafruit_NeoPixel::show()+0x146>
    9328:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    932c:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    9330:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9334:	mov.w	r9, r9, lsr #1
    9338:	bne.n	92ee <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    933a:	ldr	r3, [sp, #8]
    933c:	ldr	r2, [sp, #4]
    933e:	cmp	r3, r2
    9340:	bne.n	92de <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    9342:	ldr	r5, [pc, #80]	; (9394 <Adafruit_NeoPixel::show()+0x1c8>)
    9344:	ldr	r4, [pc, #84]	; (939c <Adafruit_NeoPixel::show()+0x1d0>)
    9346:	ldr	r2, [r5, #0]
    9348:	ldr	r3, [r1, #0]
    934a:	subs	r2, r2, r0
    934c:	lsrs	r3, r3, #7
    934e:	umull	r6, r3, r4, r3
    9352:	cmp.w	r2, r3, lsr #4
    9356:	bcc.n	9346 <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    9358:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    935a:	bl	981c <micros>
    935e:	ldr	r3, [sp, #12]
    9360:	str	r0, [r3, #16]
    9362:	b.n	92be <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    9364:	ldr	r3, [r4, #0]
    9366:	ldr	r2, [r1, #0]
    9368:	subs	r3, r3, r0
    936a:	umull	r5, r2, r7, r2
    936e:	cmp.w	r3, r2, lsr #19
    9372:	bcc.n	9364 <Adafruit_NeoPixel::show()+0x198>
    9374:	b.n	932c <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    9376:	ldr	r3, [r4, #0]
    9378:	ldr	r2, [r1, #0]
    937a:	subs	r3, r3, r0
    937c:	umull	fp, r2, r6, r2
    9380:	cmp.w	r3, r2, lsr #20
    9384:	bcc.n	9376 <Adafruit_NeoPixel::show()+0x1aa>
    9386:	b.n	9288 <Adafruit_NeoPixel::show()+0xbc>
    9388:	.word	0xe000edfc
    938c:	.word	0x2000041c
    9390:	.word	0xe0001000
    9394:	.word	0xe0001004
    9398:	.word	0x20000c94
    939c:	.word	0x014f8b59
    93a0:	.word	0x6b5fca6b
    93a4:	.word	0x431bde83
    93a8:	.word	0x421f67b3

000093ac <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    93ac:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    93ae:	ldrb	r3, [r0, #1]
    93b0:	cbz	r3, 93ce <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    93b2:	mov	r4, r0
    93b4:	ldrsb.w	r0, [r0, #6]
    93b8:	mov	r5, r1
    93ba:	cmp	r0, #0
    93bc:	blt.n	93d2 <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    93be:	uxtb	r0, r0
    93c0:	movs	r1, #0
    93c2:	bl	98fc <pinMode>
    93c6:	ldrb	r3, [r4, #1]
    pin = p;
    93c8:	strb	r5, [r4, #6]
    if(begun) {
    93ca:	cbnz	r3, 93d4 <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    93cc:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    93ce:	strb	r1, [r0, #6]
    93d0:	pop	{r3, r4, r5, pc}
    93d2:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    93d4:	mov	r0, r5
    93d6:	movs	r1, #1
    93d8:	bl	98fc <pinMode>
      digitalWrite(p, LOW);
    93dc:	mov	r0, r5
    93de:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    93e0:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    93e4:	b.w	98f0 <digitalWrite>

000093e8 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    93e8:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    93ea:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    93ec:	mov	r4, r0
    93ee:	mov	r7, r1
    93f0:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    93f2:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    93f4:	strb	r5, [r0, #1]
    93f6:	strb	r5, [r0, #7]
    93f8:	str	r5, [r0, #8]
    93fa:	str	r5, [r0, #16]
{
  updateType(t);
    93fc:	bl	917c <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    9400:	mov	r1, r7
    9402:	mov	r0, r4
    9404:	bl	9144 <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    9408:	mov	r0, r4
    940a:	mov	r1, r6
    940c:	bl	93ac <Adafruit_NeoPixel::setPin(unsigned char)>
}
    9410:	mov	r0, r4
    9412:	pop	{r3, r4, r5, r6, r7, pc}

00009414 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9414:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    9416:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9418:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    941c:	cmp	r4, r1
    941e:	bls.n	9454 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    9420:	ldrb	r4, [r0, #7]
    9422:	cbz	r4, 9436 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    9424:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    9428:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    942c:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9430:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    9432:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    9434:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    9436:	ldrb	r5, [r0, #15]
    9438:	ldrb	r4, [r0, #12]
    943a:	cmp	r4, r5
    943c:	beq.n	9458 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    943e:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9440:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9442:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9446:	strb	r7, [r1, r5]
    9448:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    944a:	strb	r2, [r1, r5]
    p[gOffset] = g;
    944c:	ldrb	r2, [r0, #13]
    944e:	strb	r3, [r1, r2]
    p[bOffset] = b;
    9450:	ldrb	r3, [r0, #14]
    9452:	strb	r6, [r1, r3]
  }
}
    9454:	pop	{r4, r5, r6, r7}
    9456:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    9458:	add.w	r1, r1, r1, lsl #1
    945c:	ldr	r4, [r0, #8]
    945e:	add	r1, r4
    9460:	b.n	944a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    9462:	nop

00009464 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9464:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9466:	movs	r1, #0
    9468:	mov	r3, r0
    946a:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    946e:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9470:	movs	r4, #0
    9472:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9474:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    9478:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    947a:	bfc	r2, #0, #4
    947e:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    9480:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9484:	cmp	r3, r5
    9486:	bne.n	946e <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    9488:	mov	r2, r4
    948a:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    948c:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    948e:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9492:	add.w	r3, r0, r2, lsl #4
    9496:	adds	r3, #8
    9498:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    949a:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    949e:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    94a2:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    94a6:	beq.n	94b0 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    94a8:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    94aa:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    94ac:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    94ae:	str	r6, [r1, #8]
    94b0:	adds	r2, #1
    94b2:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    94b4:	cmp	r2, #12
    94b6:	bne.n	9492 <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    94b8:	pop	{r4, r5, r6}
    94ba:	bx	lr

000094bc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    94bc:	ldr	r0, [pc, #4]	; (94c4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    94be:	b.w	9464 <TimeAlarmsClass::TimeAlarmsClass()>
    94c2:	nop
    94c4:	.word	0x20014eb8

000094c8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    94c8:	ldr	r2, [pc, #560]	; (96fc <set_arm_clock+0x234>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    94ca:	ldr	r3, [pc, #564]	; (9700 <set_arm_clock+0x238>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    94cc:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    94ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    94d2:	ldr	r5, [pc, #560]	; (9704 <set_arm_clock+0x23c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    94d4:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    94d6:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    94d8:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    94da:	bls.n	9518 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    94dc:	ldr	r3, [pc, #552]	; (9708 <set_arm_clock+0x240>)
    94de:	cmp	r0, r3
    94e0:	bls.w	96e6 <set_arm_clock+0x21e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    94e4:	ldr	r3, [pc, #548]	; (970c <set_arm_clock+0x244>)
    94e6:	movw	r6, #1575	; 0x627
    94ea:	ldr.w	lr, [pc, #608]	; 974c <set_arm_clock+0x284>
    94ee:	add	r3, r0
    94f0:	ldr	r5, [pc, #540]	; (9710 <set_arm_clock+0x248>)
    94f2:	lsrs	r2, r3, #8
    94f4:	umull	r3, r2, lr, r2
    94f8:	lsrs	r3, r2, #7
    94fa:	add.w	r3, r3, r3, lsl #2
    94fe:	add.w	r2, r3, r3, lsl #2
    9502:	addw	r3, r2, #1250	; 0x4e2
    9506:	cmp	r3, r6
    9508:	it	cs
    950a:	movcs	r3, r6
    950c:	sub.w	r3, r3, #800	; 0x320
    9510:	umull	r3, r6, r5, r3
    9514:	lsrs	r6, r6, #3
    9516:	b.n	9522 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    9518:	ldr	r6, [pc, #504]	; (9714 <set_arm_clock+0x24c>)
    951a:	cmp	r0, r6
    951c:	ite	ls
    951e:	movls	r6, #6
    9520:	movhi	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9522:	ldr	r2, [pc, #476]	; (9700 <set_arm_clock+0x238>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9524:	and.w	lr, r7, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9528:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    952c:	cmp	lr, r6
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    952e:	orr.w	r3, r3, #192	; 0xc0
    9532:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9536:	bcs.n	954e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9538:	ldr	r3, [pc, #456]	; (9704 <set_arm_clock+0x23c>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    953a:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    953e:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9540:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    9542:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9544:	ldr	r3, [r2, #0]
    9546:	cmp	r3, #0
    9548:	bge.n	9544 <set_arm_clock+0x7c>
    954a:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    954e:	ands.w	r3, r4, #33554432	; 0x2000000
    9552:	bne.n	95b2 <set_arm_clock+0xea>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    9554:	ldr	r5, [pc, #448]	; (9718 <set_arm_clock+0x250>)
    9556:	ldr	r2, [pc, #452]	; (971c <set_arm_clock+0x254>)
    9558:	ldr.w	ip, [r5, #16]
    955c:	mov	r5, r2
    955e:	and.w	r2, ip, r2
    9562:	cmp	r2, r5
    9564:	itet	eq
    9566:	moveq.w	r3, #402653184	; 0x18000000
    956a:	movne.w	r2, #4096	; 0x1000
    956e:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    9570:	eor.w	r5, r4, r3
    9574:	tst.w	r5, #939524096	; 0x38000000
    9578:	beq.n	9588 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    957a:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    957e:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    9582:	ldr	r5, [pc, #380]	; (9700 <set_arm_clock+0x238>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    9584:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    9586:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    9588:	eor.w	r3, r1, r2
    958c:	tst.w	r3, #12288	; 0x3000
    9590:	beq.n	95a4 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    9592:	ldr	r3, [pc, #364]	; (9700 <set_arm_clock+0x238>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    9594:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    9598:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    959a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    959c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    959e:	ldr	r3, [r2, #72]	; 0x48
    95a0:	lsls	r5, r3, #28
    95a2:	bmi.n	959e <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    95a4:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    95a8:	ldr	r2, [pc, #340]	; (9700 <set_arm_clock+0x238>)
    95aa:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    95ac:	ldr	r3, [r2, #72]	; 0x48
    95ae:	lsls	r1, r3, #26
    95b0:	bmi.n	95ac <set_arm_clock+0xe4>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    95b2:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    95b4:	ldr	r5, [pc, #360]	; (9720 <set_arm_clock+0x258>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    95b6:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    95b8:	mul.w	r3, r1, r2
    95bc:	mul.w	r3, r0, r3
    95c0:	cmp	r3, r5
    95c2:	bhi.n	95d8 <set_arm_clock+0x110>
		if (div_arm < 8) {
    95c4:	cmp	r2, #7
    95c6:	bhi.w	96d2 <set_arm_clock+0x20a>
			div_arm = div_arm + 1;
    95ca:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    95cc:	mul.w	r3, r1, r2
    95d0:	mul.w	r3, r0, r3
    95d4:	cmp	r3, r5
    95d6:	bls.n	95c4 <set_arm_clock+0xfc>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    95d8:	ldr	r0, [pc, #328]	; (9724 <set_arm_clock+0x25c>)
    95da:	ldr	r5, [pc, #332]	; (9728 <set_arm_clock+0x260>)
    95dc:	add	r0, r3
    95de:	umull	r3, r0, r5, r0
    95e2:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    95e4:	cmp	r3, #108	; 0x6c
    95e6:	bhi.n	96dc <set_arm_clock+0x214>
	if (mult < 54) mult = 54;
    95e8:	cmp	r3, #53	; 0x35
    95ea:	bhi.n	96ea <set_arm_clock+0x222>
    95ec:	ldr.w	r8, [pc, #352]	; 9750 <set_arm_clock+0x288>
    95f0:	movs	r3, #54	; 0x36
    95f2:	ldr	r0, [pc, #312]	; (972c <set_arm_clock+0x264>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    95f4:	ldr.w	ip, [pc, #288]	; 9718 <set_arm_clock+0x250>
    95f8:	ldr	r5, [pc, #308]	; (9730 <set_arm_clock+0x268>)
    95fa:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    95fe:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9602:	and.w	r5, r9, r5
    9606:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    9608:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    960c:	beq.n	9626 <set_arm_clock+0x15e>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    960e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9612:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9616:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9618:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    961c:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9620:	ldr	r3, [r5, #0]
    9622:	cmp	r3, #0
    9624:	bge.n	9620 <set_arm_clock+0x158>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    9626:	ldr.w	ip, [pc, #216]	; 9700 <set_arm_clock+0x238>
    962a:	subs	r2, #1
    962c:	ldr.w	r3, [ip, #16]
    9630:	and.w	r3, r3, #7
    9634:	cmp	r3, r2
    9636:	beq.n	9648 <set_arm_clock+0x180>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9638:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    963c:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    963e:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9642:	ldr	r3, [r5, #72]	; 0x48
    9644:	lsls	r3, r3, #15
    9646:	bmi.n	9642 <set_arm_clock+0x17a>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9648:	subs	r1, #1
    964a:	lsls	r1, r1, #10
    964c:	eor.w	r3, r4, r1
    9650:	tst.w	r3, #7168	; 0x1c00
    9654:	beq.n	966c <set_arm_clock+0x1a4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    9656:	ldr	r3, [pc, #168]	; (9700 <set_arm_clock+0x238>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    9658:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    965c:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9660:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9662:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    9664:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9666:	ldr	r3, [r2, #72]	; 0x48
    9668:	lsls	r1, r3, #30
    966a:	bmi.n	9666 <set_arm_clock+0x19e>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    966c:	ldr	r3, [pc, #196]	; (9734 <set_arm_clock+0x26c>)
    966e:	ldr	r1, [pc, #200]	; (9738 <set_arm_clock+0x270>)
    9670:	add	r3, r0
    9672:	lsrs	r3, r3, #7
    9674:	umull	r3, r1, r1, r3
    9678:	lsrs	r1, r1, #12
    967a:	cmp	r1, #4
    967c:	it	cs
    967e:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    9680:	subs	r3, r1, #1
    9682:	lsls	r3, r3, #8
    9684:	eor.w	r2, r4, r3
    9688:	tst.w	r2, #768	; 0x300
    968c:	beq.n	969c <set_arm_clock+0x1d4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    968e:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    9692:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9696:	ldr	r2, [pc, #104]	; (9700 <set_arm_clock+0x238>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    9698:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    969a:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    969c:	ldr	r3, [pc, #96]	; (9700 <set_arm_clock+0x238>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    969e:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    96a2:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    96a4:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    96a6:	ldr	r3, [r2, #72]	; 0x48
    96a8:	lsls	r3, r3, #26
    96aa:	bmi.n	96a6 <set_arm_clock+0x1de>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    96ac:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    96b0:	ldr	r2, [pc, #136]	; (973c <set_arm_clock+0x274>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    96b2:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    96b4:	ldr	r3, [pc, #136]	; (9740 <set_arm_clock+0x278>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    96b6:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    96b8:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    96ba:	bcs.n	96ce <set_arm_clock+0x206>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    96bc:	ldr	r3, [pc, #68]	; (9704 <set_arm_clock+0x23c>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    96be:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    96c2:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    96c4:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    96c6:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    96c8:	ldr	r3, [r2, #0]
    96ca:	cmp	r3, #0
    96cc:	bge.n	96c8 <set_arm_clock+0x200>
	}

	return frequency;
}
    96ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    96d2:	cmp	r1, #4
    96d4:	bhi.n	95d8 <set_arm_clock+0x110>
				div_ahb = div_ahb + 1;
    96d6:	adds	r1, #1
				div_arm = 1;
    96d8:	movs	r2, #1
    96da:	b.n	95b8 <set_arm_clock+0xf0>
    96dc:	ldr.w	r8, [pc, #116]	; 9754 <set_arm_clock+0x28c>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    96e0:	movs	r3, #108	; 0x6c
    96e2:	ldr	r0, [pc, #96]	; (9744 <set_arm_clock+0x27c>)
    96e4:	b.n	95f4 <set_arm_clock+0x12c>
    96e6:	movs	r6, #18
    96e8:	b.n	9522 <set_arm_clock+0x5a>
    96ea:	ldr	r0, [pc, #92]	; (9748 <set_arm_clock+0x280>)
    96ec:	ldr.w	r8, [pc, #104]	; 9758 <set_arm_clock+0x290>
    96f0:	mul.w	r0, r0, r3
    96f4:	orr.w	r8, r3, r8
    96f8:	b.n	95f4 <set_arm_clock+0x12c>
    96fa:	nop
    96fc:	.word	0x1f78a400
    9700:	.word	0x400fc000
    9704:	.word	0x40080000
    9708:	.word	0x23c34600
    970c:	.word	0xdc3cba00
    9710:	.word	0x51eb851f
    9714:	.word	0x016e3600
    9718:	.word	0x400d8000
    971c:	.word	0x80003040
    9720:	.word	0x269fb1ff
    9724:	.word	0x005b8d80
    9728:	.word	0x165e9f81
    972c:	.word	0x269fb200
    9730:	.word	0x8001307f
    9734:	.word	0x08f0d17f
    9738:	.word	0x00e5109f
    973c:	.word	0x20000c94
    9740:	.word	0x20000c90
    9744:	.word	0x4d3f6400
    9748:	.word	0x00b71b00
    974c:	.word	0x004cb223
    9750:	.word	0x80002036
    9754:	.word	0x8000206c
    9758:	.word	0x80002000

0000975c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    975c:	cmp	r0, #0
    975e:	beq.n	9806 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    9760:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9764:	mov	r9, r0
    9766:	sub	sp, #12
    9768:	ldr	r4, [pc, #156]	; (9808 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    976a:	movs	r0, #1
    976c:	ldr	r5, [pc, #156]	; (980c <delay+0xb0>)
    976e:	ldr	r6, [pc, #160]	; (9810 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9770:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9774:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9776:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9778:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    977c:	cmp	r3, #0
    977e:	bne.n	9770 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9780:	ldr	r7, [pc, #144]	; (9814 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9782:	mov.w	lr, #1000	; 0x3e8
    9786:	ldr	r0, [pc, #144]	; (9818 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    9788:	ldr.w	ip, [r7]
    978c:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    978e:	add.w	r7, r7, #1660944384	; 0x63000000
    9792:	ldr	r3, [r0, #0]
    9794:	rsb	r1, r1, ip
    9798:	add.w	r7, r7, #1818624	; 0x1bc000
    979c:	addw	r7, r7, #3711	; 0xe7f
    97a0:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    97a4:	mov	sl, r7
    97a6:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    97a8:	lsrs	r3, r3, #18
    97aa:	udiv	r3, r1, r3
    97ae:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    97b2:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    97b6:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    97b8:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    97ba:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    97be:	cmp	r3, #0
    97c0:	bne.n	97b2 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    97c2:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    97c6:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    97ca:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    97cc:	mul.w	r2, lr, r2
    97d0:	rsb	r1, r1, ip
    97d4:	umull	r3, lr, sl, r3
    97d8:	rsb	r3, r8, r2
    97dc:	mov.w	r2, lr, lsr #18
    97e0:	udiv	r1, r1, r2
    97e4:	adds	r2, r1, r3
    97e6:	cmp.w	r2, #1000	; 0x3e8
    97ea:	bcc.n	97fc <delay+0xa0>
			if (--msec == 0) return;
    97ec:	subs.w	r9, r9, #1
			start += 1000;
    97f0:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    97f4:	bne.n	97b2 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    97f6:	add	sp, #12
    97f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97fc:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    97fe:	bl	997c <yield>
	}
    9802:	ldr	r0, [sp, #4]
    9804:	b.n	97b2 <delay+0x56>
    9806:	bx	lr
    9808:	.word	0x20015978
    980c:	.word	0x20014f80
    9810:	.word	0x20014f7c
    9814:	.word	0xe0001004
    9818:	.word	0x20000c94

0000981c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    981c:	push	{r4, r5, r6}
    981e:	ldr	r3, [pc, #56]	; (9858 <micros+0x3c>)
    9820:	movs	r6, #1
    9822:	ldr	r5, [pc, #56]	; (985c <micros+0x40>)
    9824:	ldr	r0, [pc, #56]	; (9860 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9826:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    982a:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    982c:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    982e:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    9832:	cmp	r2, #0
    9834:	bne.n	9826 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9836:	ldr	r3, [pc, #44]	; (9864 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9838:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    983c:	ldr	r2, [pc, #40]	; (9868 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    983e:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9840:	ldr	r5, [pc, #40]	; (986c <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9842:	ldr	r2, [r2, #0]
	return usec;
    9844:	subs	r4, r3, r4
    9846:	umull	r2, r3, r5, r2
    984a:	lsrs	r3, r3, #18
    984c:	udiv	r4, r4, r3
}
    9850:	mla	r0, r0, r1, r4
    9854:	pop	{r4, r5, r6}
    9856:	bx	lr
    9858:	.word	0x20015978
    985c:	.word	0x20014f80
    9860:	.word	0x20014f7c
    9864:	.word	0xe0001004
    9868:	.word	0x20000c94
    986c:	.word	0x431bde83

00009870 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    9870:	cmp	r0, #28
    9872:	bhi.n	98a0 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    9874:	ldr	r1, [pc, #68]	; (98bc <analogRead+0x4c>)
    9876:	ldrb	r3, [r1, #0]
    9878:	cbz	r3, 9886 <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    987a:	ldr	r2, [pc, #68]	; (98c0 <analogRead+0x50>)
    987c:	ldr	r3, [r2, #72]	; 0x48
    987e:	ands.w	r3, r3, #128	; 0x80
    9882:	bne.n	987c <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    9884:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    9886:	ldr	r3, [pc, #60]	; (98c4 <analogRead+0x54>)
    9888:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    988a:	lsls	r2, r3, #24
    988c:	bmi.n	98a4 <analogRead+0x34>
		ADC1_HC0 = ch;
    988e:	ldr	r2, [pc, #48]	; (98c0 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9890:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    9892:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    9894:	ldr	r3, [r1, #32]
    9896:	ldr	r2, [pc, #40]	; (98c0 <analogRead+0x50>)
    9898:	lsls	r0, r3, #31
    989a:	bpl.n	9894 <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    989c:	ldr	r0, [r2, #36]	; 0x24
    989e:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    98a0:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    98a2:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    98a4:	ldr	r2, [pc, #32]	; (98c8 <analogRead+0x58>)
    98a6:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    98aa:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    98ac:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    98ae:	ldr	r3, [r1, #32]
    98b0:	ldr	r2, [pc, #20]	; (98c8 <analogRead+0x58>)
    98b2:	lsls	r3, r3, #31
    98b4:	bpl.n	98ae <analogRead+0x3e>
		return ADC2_R0;
    98b6:	ldr	r0, [r2, #36]	; 0x24
    98b8:	bx	lr
    98ba:	nop
    98bc:	.word	0x20014f84
    98c0:	.word	0x400c4000
    98c4:	.word	0x20000400
    98c8:	.word	0x400c8000

000098cc <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    98cc:	lsls	r0, r0, #4
    98ce:	ldr	r3, [pc, #28]	; (98ec <digitalWrite.part.0+0x20>)
    98d0:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    98d2:	ldr	r3, [r3, r0]
	mask = p->mask;
    98d4:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    98d6:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    98d8:	tst	r0, r2
    98da:	beq.n	98e2 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    98dc:	cbnz	r1, 98e4 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    98de:	str.w	r2, [r3, #136]	; 0x88
    98e2:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    98e4:	str.w	r2, [r3, #132]	; 0x84
    98e8:	bx	lr
    98ea:	nop
    98ec:	.word	0x2000041c

000098f0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    98f0:	cmp	r0, #39	; 0x27
    98f2:	bhi.n	98f8 <digitalWrite+0x8>
    98f4:	b.w	98cc <digitalWrite.part.0>
    98f8:	bx	lr
    98fa:	nop

000098fc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    98fc:	cmp	r0, #39	; 0x27
    98fe:	bhi.n	993a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9900:	lsls	r0, r0, #4
    9902:	ldr	r2, [pc, #104]	; (996c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9904:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9906:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    990a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    990c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    990e:	beq.n	993c <pinMode+0x40>
    9910:	cmp	r1, #4
    9912:	beq.n	993c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9914:	ldr	r4, [r3, #12]
    9916:	ldr	r2, [r0, #4]
    9918:	bic.w	r2, r2, r4
    991c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    991e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9920:	cbz	r1, 995e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9922:	cmp	r1, #2
    9924:	beq.n	9964 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9926:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9928:	ldr	r3, [r3, #4]
}
    992a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    992e:	ite	eq
    9930:	ldreq	r1, [pc, #60]	; (9970 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9932:	ldrne	r1, [pc, #64]	; (9974 <pinMode+0x78>)
    9934:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9936:	movs	r2, #21
    9938:	str	r2, [r3, #0]
}
    993a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    993c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    993e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9940:	ldr	r4, [r0, #4]
    9942:	orr.w	r2, r2, r4
    9946:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9948:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    994a:	beq.n	995e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    994c:	movw	r1, #2104	; 0x838
    9950:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9952:	ldr	r3, [r3, #4]
    9954:	movs	r2, #21
}
    9956:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    995a:	str	r2, [r3, #0]
}
    995c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    995e:	movs	r1, #56	; 0x38
    9960:	str	r1, [r2, #0]
    9962:	b.n	9952 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9964:	ldr	r1, [pc, #16]	; (9978 <pinMode+0x7c>)
    9966:	str	r1, [r2, #0]
    9968:	b.n	9952 <pinMode+0x56>
    996a:	nop
    996c:	.word	0x2000041c
    9970:	.word	0x00013038
    9974:	.word	0x00010038
    9978:	.word	0x0001f038

0000997c <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    997c:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    997e:	ldr	r4, [pc, #132]	; (9a04 <yield+0x88>)
    9980:	ldrb	r3, [r4, #0]
    9982:	cbnz	r3, 99a6 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9984:	ldr	r3, [pc, #128]	; (9a08 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9986:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9988:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    998a:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    998c:	cbnz	r3, 99d6 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    998e:	ldr	r3, [pc, #124]	; (9a0c <yield+0x90>)
    9990:	ldrb	r3, [r3, #0]
    9992:	cmp	r3, #0
    9994:	bne.n	99ea <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    9996:	ldr	r3, [pc, #120]	; (9a10 <yield+0x94>)

	running = 0;
    9998:	movs	r1, #0
    999a:	ldr	r2, [r3, #0]
    999c:	strb	r1, [r4, #0]
    999e:	cbz	r2, 99a6 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    99a0:	mrs	r2, IPSR
		if (ipsr != 0) return;
    99a4:	cbz	r2, 99a8 <yield+0x2c>
    99a6:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99a8:	mrs	r0, PRIMASK
		__disable_irq();
    99ac:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    99ae:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    99b0:	cbz	r2, 99f0 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    99b2:	ldr	r4, [pc, #96]	; (9a14 <yield+0x98>)
    99b4:	ldrb	r1, [r4, #0]
    99b6:	cbnz	r1, 99f0 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    99b8:	movs	r6, #1
		firstYield = first->_next;
    99ba:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    99bc:	strb	r6, [r4, #0]
		firstYield = first->_next;
    99be:	str	r5, [r3, #0]
		if (firstYield) {
    99c0:	cbz	r5, 99f8 <yield+0x7c>
			firstYield->_prev = nullptr;
    99c2:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99c4:	cbnz	r0, 99c8 <yield+0x4c>
    99c6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    99c8:	movs	r5, #0
		(*(first->_function))(*first);
    99ca:	ldr	r3, [r2, #8]
    99cc:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    99ce:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    99d0:	blx	r3
		runningFromYield = false;
    99d2:	strb	r5, [r4, #0]
    99d4:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    99d6:	bl	a2f4 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    99da:	cmp	r0, #0
    99dc:	beq.n	998e <yield+0x12>
    99de:	bl	9cd8 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    99e2:	ldr	r3, [pc, #40]	; (9a0c <yield+0x90>)
    99e4:	ldrb	r3, [r3, #0]
    99e6:	cmp	r3, #0
    99e8:	beq.n	9996 <yield+0x1a>
    99ea:	bl	afa8 <HardwareSerial::processSerialEvents()>
    99ee:	b.n	9996 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99f0:	cmp	r0, #0
    99f2:	bne.n	99a6 <yield+0x2a>
    99f4:	cpsie	i
    99f6:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    99f8:	ldr	r3, [pc, #28]	; (9a18 <yield+0x9c>)
    99fa:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99fc:	cmp	r0, #0
    99fe:	bne.n	99c8 <yield+0x4c>
    9a00:	b.n	99c6 <yield+0x4a>
    9a02:	nop
    9a04:	.word	0x20014f85
    9a08:	.word	0x20000c98
    9a0c:	.word	0x20015940
    9a10:	.word	0x20014f9c
    9a14:	.word	0x20014fa0
    9a18:	.word	0x20014f98

00009a1c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    9a1c:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    9a1e:	ldr	r4, [pc, #100]	; (9a84 <random(unsigned long) [clone .part.0]+0x68>)
    9a20:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    9a22:	cbz	r3, 9a68 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    9a24:	ldr	r1, [pc, #96]	; (9a88 <random(unsigned long) [clone .part.0]+0x6c>)
    9a26:	asrs	r5, r3, #31
    9a28:	ldr.w	lr, [pc, #104]	; 9a94 <random(unsigned long) [clone .part.0]+0x78>
    9a2c:	smull	r6, r7, r3, r1
    9a30:	ldr	r6, [pc, #88]	; (9a8c <random(unsigned long) [clone .part.0]+0x70>)
    9a32:	smull	r2, r1, r1, r3
    9a36:	adds	r2, r3, r7
    9a38:	add	r1, r3
    9a3a:	rsb	r2, r5, r2, asr #16
    9a3e:	rsb	r1, r5, r1, asr #16
    9a42:	movw	r5, #16807	; 0x41a7
    9a46:	mls	r2, lr, r2, r3
    9a4a:	mul.w	r1, r6, r1
    9a4e:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    9a52:	cmp	r3, #0
    9a54:	bge.n	9a76 <random(unsigned long) [clone .part.0]+0x5a>
    9a56:	mvn.w	r2, #2147483648	; 0x80000000
    9a5a:	add	r2, r3
    9a5c:	udiv	r3, r2, r0
	seed = x;
    9a60:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9a62:	mls	r0, r0, r3, r2
    9a66:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    9a68:	ldr	r2, [pc, #36]	; (9a90 <random(unsigned long) [clone .part.0]+0x74>)
    9a6a:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    9a6e:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9a70:	mls	r0, r0, r3, r2
    9a74:	pop	{r4, r5, r6, r7, pc}
    9a76:	mov	r2, r3
    9a78:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    9a7c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    9a7e:	mls	r0, r0, r3, r2
    9a82:	pop	{r4, r5, r6, r7, pc}
    9a84:	.word	0x20014f88
    9a88:	.word	0x834e0b5f
    9a8c:	.word	0xfffff4ec
    9a90:	.word	0x1f0cce42
    9a94:	.word	0x0001f31d

00009a98 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    9a98:	cbz	r0, 9a9e <randomSeed(unsigned long)+0x6>
    9a9a:	ldr	r3, [pc, #4]	; (9aa0 <randomSeed(unsigned long)+0x8>)
    9a9c:	str	r0, [r3, #0]
    9a9e:	bx	lr
    9aa0:	.word	0x20014f88

00009aa4 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    9aa4:	cbz	r0, 9aaa <random(unsigned long)+0x6>
    9aa6:	b.w	9a1c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    9aaa:	bx	lr

00009aac <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9aac:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9aae:	mrs	r2, PRIMASK
		__disable_irq();
    9ab2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9ab4:	ldrb	r3, [r0, #29]
    9ab6:	cbnz	r3, 9ac6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9ab8:	ldrb	r1, [r0, #28]
    9aba:	cmp	r1, #1
    9abc:	beq.n	9ad0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9abe:	cmp	r1, #3
    9ac0:	beq.n	9ae4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9ac2:	movs	r3, #1
    9ac4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ac6:	cbnz	r2, 9aca <EventResponder::triggerEventNotImmediate()+0x1e>
    9ac8:	cpsie	i
	}
	enableInterrupts(irq);
}
    9aca:	ldr.w	r4, [sp], #4
    9ace:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9ad0:	ldr	r4, [pc, #68]	; (9b18 <EventResponder::triggerEventNotImmediate()+0x6c>)
    9ad2:	ldr	r1, [r4, #0]
    9ad4:	cbz	r1, 9b00 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9ad6:	ldr	r1, [pc, #68]	; (9b1c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9ad8:	str	r3, [r0, #20]
				_prev = lastYield;
    9ada:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    9adc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9ade:	str	r3, [r0, #24]
				_prev->_next = this;
    9ae0:	str	r0, [r3, #20]
    9ae2:	b.n	9ac2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9ae4:	ldr	r4, [pc, #56]	; (9b20 <EventResponder::triggerEventNotImmediate()+0x74>)
    9ae6:	ldr	r1, [r4, #0]
    9ae8:	cbz	r1, 9b0c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9aea:	ldr	r1, [pc, #56]	; (9b24 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9aec:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9aee:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    9af0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9af2:	str	r3, [r0, #24]
				_prev->_next = this;
    9af4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9af6:	ldr	r3, [pc, #48]	; (9b28 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9af8:	mov.w	r1, #268435456	; 0x10000000
    9afc:	str	r1, [r3, #0]
    9afe:	b.n	9ac2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9b00:	ldr	r3, [pc, #24]	; (9b1c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9b02:	str	r1, [r0, #20]
				_prev = nullptr;
    9b04:	str	r1, [r0, #24]
				firstYield = this;
    9b06:	str	r0, [r4, #0]
				lastYield = this;
    9b08:	str	r0, [r3, #0]
    9b0a:	b.n	9ac2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9b0c:	ldr	r3, [pc, #20]	; (9b24 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9b0e:	str	r1, [r0, #20]
				_prev = nullptr;
    9b10:	str	r1, [r0, #24]
				firstInterrupt = this;
    9b12:	str	r0, [r4, #0]
				lastInterrupt = this;
    9b14:	str	r0, [r3, #0]
    9b16:	b.n	9af6 <EventResponder::triggerEventNotImmediate()+0x4a>
    9b18:	.word	0x20014f9c
    9b1c:	.word	0x20014f98
    9b20:	.word	0x20014f8c
    9b24:	.word	0x20014f90
    9b28:	.word	0xe000ed04

00009b2c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    9b2c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9b2e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9b30:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9b32:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9b34:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9b36:	beq.n	9b40 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    9b38:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9b3c:	b.w	9aac <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9b40:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    9b42:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9b46:	bx	r3

00009b48 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9b48:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b4a:	mrs	r1, PRIMASK
		__disable_irq();
    9b4e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9b50:	ldr	r4, [pc, #48]	; (9b84 <EventResponder::runFromInterrupt()+0x3c>)
    9b52:	ldr	r3, [r4, #0]
		if (first) {
    9b54:	cbz	r3, 9b7a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9b56:	ldr	r6, [pc, #48]	; (9b88 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9b58:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9b5a:	ldr	r2, [r3, #20]
    9b5c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    9b5e:	cbz	r2, 9b80 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9b60:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9b62:	cbnz	r1, 9b66 <EventResponder::runFromInterrupt()+0x1e>
    9b64:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9b66:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9b68:	mov	r0, r3
    9b6a:	ldr	r3, [r3, #8]
    9b6c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b6e:	mrs	r1, PRIMASK
		__disable_irq();
    9b72:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9b74:	ldr	r3, [r4, #0]
		if (first) {
    9b76:	cmp	r3, #0
    9b78:	bne.n	9b5a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9b7a:	cbnz	r1, 9b7e <EventResponder::runFromInterrupt()+0x36>
    9b7c:	cpsie	i
    9b7e:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9b80:	str	r2, [r6, #0]
    9b82:	b.n	9b62 <EventResponder::runFromInterrupt()+0x1a>
    9b84:	.word	0x20014f8c
    9b88:	.word	0x20014f90

00009b8c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9b8c:	b.w	9b48 <EventResponder::runFromInterrupt()>

00009b90 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9b90:	ldr	r2, [pc, #96]	; (9bf4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9b92:	push	{r4, r5}
	if (listActive == nullptr) {
    9b94:	ldr	r4, [r2, #0]
    9b96:	cmp	r4, #0
    9b98:	beq.n	9bec <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9b9a:	ldr	r3, [r0, #0]
    9b9c:	ldr	r1, [r4, #0]
    9b9e:	cmp	r3, r1
    9ba0:	bcs.n	9bc2 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9ba2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9ba4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9ba6:	str	r4, [r0, #8]
		_prev = nullptr;
    9ba8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9baa:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9bac:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9bae:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9bb0:	movs	r3, #2
}
    9bb2:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9bb4:	strb	r3, [r0, #20]
}
    9bb6:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    9bb8:	str	r3, [r0, #0]
    9bba:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9bbc:	ldr	r1, [r2, #0]
    9bbe:	cmp	r3, r1
    9bc0:	bcc.n	9bd4 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9bc2:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9bc4:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9bc6:	cmp	r2, #0
    9bc8:	bne.n	9bb8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9bca:	str	r2, [r0, #8]
		_prev = timer;
    9bcc:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9bce:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    9bd0:	str	r0, [r4, #8]
    9bd2:	b.n	9bb0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9bd4:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    9bd6:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9bd8:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    9bda:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9bdc:	str	r5, [r0, #12]
				timer->_prev = this;
    9bde:	str	r0, [r4, #12]
				_prev->_next = this;
    9be0:	ldr	r1, [r0, #12]
    9be2:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    9be4:	str	r3, [r4, #0]
				_state = TimerActive;
    9be6:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9be8:	pop	{r4, r5}
    9bea:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9bec:	str	r4, [r0, #8]
		_prev = nullptr;
    9bee:	str	r4, [r0, #12]
		listActive = this;
    9bf0:	str	r0, [r2, #0]
    9bf2:	b.n	9bb0 <MillisTimer::addToActiveList()+0x20>
    9bf4:	.word	0x20014f94

00009bf8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9bf8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9bfa:	ldr	r6, [pc, #136]	; (9c84 <MillisTimer::runFromTimer()+0x8c>)
    9bfc:	ldr	r4, [r6, #0]
	while (timer) {
    9bfe:	cbz	r4, 9c4c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9c00:	ldr	r3, [r4, #0]
    9c02:	cmp	r3, #0
    9c04:	bne.n	9c7c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9c06:	mov	r5, r3
    9c08:	ldr	r7, [pc, #124]	; (9c88 <MillisTimer::runFromTimer()+0x90>)
    9c0a:	b.n	9c16 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9c0c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9c0e:	cbz	r4, 9c4c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9c10:	ldr	r3, [r4, #0]
    9c12:	cmp	r3, #0
    9c14:	bne.n	9c7c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9c16:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9c18:	cbz	r3, 9c1c <MillisTimer::runFromTimer()+0x24>
    9c1a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9c1c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9c1e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c20:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9c22:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c24:	ldr	r3, [r3, #0]
    9c26:	cmp	r3, r7
    9c28:	bne.n	9c6e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9c2a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9c2c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9c2e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9c30:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9c32:	beq.n	9c76 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9c34:	bl	9aac <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9c38:	ldr	r3, [r4, #4]
    9c3a:	cmp	r3, #0
    9c3c:	beq.n	9c0c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9c3e:	str	r3, [r4, #0]
				timer->addToActiveList();
    9c40:	mov	r0, r4
    9c42:	bl	9b90 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9c46:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9c48:	cmp	r4, #0
    9c4a:	bne.n	9c10 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c4c:	mrs	r3, PRIMASK
		__disable_irq();
    9c50:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9c52:	ldr	r2, [pc, #56]	; (9c8c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9c54:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9c56:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9c58:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9c5a:	cbnz	r3, 9c5e <MillisTimer::runFromTimer()+0x66>
    9c5c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9c5e:	cbz	r0, 9c6c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9c60:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9c62:	bl	9b90 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9c66:	mov	r0, r4
    9c68:	cmp	r0, #0
    9c6a:	bne.n	9c60 <MillisTimer::runFromTimer()+0x68>
    9c6c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c6e:	mov	r2, r4
    9c70:	movs	r1, #0
    9c72:	blx	r3
    9c74:	b.n	9c38 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9c76:	ldr	r3, [r0, #8]
    9c78:	blx	r3
    9c7a:	b.n	9c38 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9c7c:	subs	r3, #1
    9c7e:	str	r3, [r4, #0]
			break;
    9c80:	b.n	9c4c <MillisTimer::runFromTimer()+0x54>
    9c82:	nop
    9c84:	.word	0x20014f94
    9c88:	.word	0x00009b2d
    9c8c:	.word	0x20014fa4

00009c90 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9c90:	ldr	r2, [pc, #16]	; (9ca4 <systick_isr+0x14>)
    9c92:	ldr	r3, [pc, #20]	; (9ca8 <systick_isr+0x18>)
    9c94:	ldr	r1, [r2, #0]
	systick_millis_count++;
    9c96:	ldr	r2, [pc, #20]	; (9cac <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9c98:	str	r1, [r3, #0]
	systick_millis_count++;
    9c9a:	ldr	r3, [r2, #0]
    9c9c:	adds	r3, #1
    9c9e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9ca0:	b.w	9bf8 <MillisTimer::runFromTimer()>
    9ca4:	.word	0xe0001004
    9ca8:	.word	0x20014f7c
    9cac:	.word	0x20014f80

00009cb0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9cb0:	b.w	a308 <usb_serial_flush_input>

00009cb4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9cb4:	b.w	a2d0 <usb_serial_peekchar>

00009cb8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9cb8:	b.w	a284 <usb_serial_getchar>

00009cbc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9cbc:	b.w	a2f4 <usb_serial_available>

00009cc0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9cc0:	b.w	a3d4 <usb_serial_flush_output>

00009cc4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9cc4:	b.w	a388 <usb_serial_write_buffer_free>

00009cc8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9cc8:	mov	r0, r1
    9cca:	mov	r1, r2
    9ccc:	b.w	a370 <usb_serial_write>

00009cd0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9cd0:	mov	r0, r1
    9cd2:	b.w	a344 <usb_serial_putchar>
    9cd6:	nop

00009cd8 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    9cd8:	ldr	r3, [pc, #4]	; (9ce0 <serialEvent()+0x8>)
    9cda:	movs	r2, #0
    9cdc:	strb	r2, [r3, #0]
    9cde:	bx	lr
    9ce0:	.word	0x20000c98

00009ce4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9ce4:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    9ce6:	ldr	r4, [pc, #24]	; (9d00 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9ce8:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9cea:	ldr	r3, [r0, #0]
    9cec:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cee:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    9cf0:	add	r1, sp, #4
    9cf2:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cf4:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    9cf8:	blx	r3
}
    9cfa:	add	sp, #8
    9cfc:	pop	{r4, pc}
    9cfe:	nop
    9d00:	.word	0x200006c4

00009d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9d04:	push	{r4, r5, r6, r7, lr}
    9d06:	mov	r6, r0
    9d08:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9d0a:	cmp	r2, #0
    9d0c:	beq.n	9d76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9d0e:	cmp	r2, #1
    9d10:	it	eq
    9d12:	moveq	r2, #10
	}


	if (n == 0) {
    9d14:	cbz	r1, 9d6c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    9d16:	movs	r5, #33	; 0x21
    9d18:	b.n	9d1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9d1a:	uxtb	r5, r7
    9d1c:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9d1e:	udiv	r4, r1, r2
    9d22:	mls	r1, r2, r4, r1
    9d26:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d28:	cmp	r1, #9
    9d2a:	add.w	r1, r0, #55	; 0x37
    9d2e:	add.w	r0, r0, #48	; 0x30
    9d32:	it	hi
    9d34:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    9d36:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d38:	add	r4, sp, #40	; 0x28
    9d3a:	it	ls
    9d3c:	uxtbls	r0, r0
    9d3e:	add	r4, r5
    9d40:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    9d44:	cmp	r1, #0
    9d46:	bne.n	9d1a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    9d48:	cbz	r3, 9d58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    9d4a:	subs	r5, #1
		buf[i] = '-';
    9d4c:	add	r3, sp, #40	; 0x28
    9d4e:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    9d50:	uxtb	r5, r5
		buf[i] = '-';
    9d52:	add	r3, r5
    9d54:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9d58:	ldr	r3, [r6, #0]
    9d5a:	add	r1, sp, #4
    9d5c:	rsb	r2, r5, #34	; 0x22
    9d60:	mov	r0, r6
    9d62:	add	r1, r5
    9d64:	ldr	r3, [r3, #4]
    9d66:	blx	r3
}
    9d68:	add	sp, #44	; 0x2c
    9d6a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9d6c:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    9d6e:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9d70:	strb.w	r2, [sp, #37]	; 0x25
    9d74:	b.n	9d48 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    9d76:	ldr	r3, [r0, #0]
    9d78:	uxtb	r1, r1
    9d7a:	ldr	r3, [r3, #0]
    9d7c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9d7e:	add	sp, #44	; 0x2c
    9d80:	pop	{r4, r5, r6, r7, pc}
    9d82:	nop
    9d84:	movs	r0, r0
	...

00009d88 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9d88:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9d8c:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9d8e:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9d92:	mov	r5, r0
    9d94:	vpush	{d8}
    9d98:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9d9a:	bvs.w	9ec0 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    9d9e:	vabs.f64	d7, d0
    9da2:	vldr	d6, [pc, #300]	; 9ed0 <Print::printFloat(double, unsigned char)+0x148>
    9da6:	vcmp.f64	d7, d6
    9daa:	vmrs	APSR_nzcv, fpscr
    9dae:	ble.n	9dc6 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    9db0:	ldr	r3, [r0, #0]
    9db2:	movs	r2, #3
    9db4:	ldr	r1, [pc, #312]	; (9ef0 <Print::printFloat(double, unsigned char)+0x168>)
    9db6:	ldr	r3, [r3, #4]
    9db8:	blx	r3
    9dba:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    9dbc:	mov	r0, r6
    9dbe:	add	sp, #24
    9dc0:	vpop	{d8}
    9dc4:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    9dc6:	vldr	d7, [pc, #272]	; 9ed8 <Print::printFloat(double, unsigned char)+0x150>
    9dca:	vcmpe.f64	d0, d7
    9dce:	vmrs	APSR_nzcv, fpscr
    9dd2:	bgt.n	9e86 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9dd4:	vldr	d7, [pc, #264]	; 9ee0 <Print::printFloat(double, unsigned char)+0x158>
    9dd8:	vcmpe.f64	d0, d7
    9ddc:	vmrs	APSR_nzcv, fpscr
    9de0:	bmi.n	9e86 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    9de2:	vcmpe.f64	d0, #0.0
    9de6:	mov	r4, r1
    9de8:	vmrs	APSR_nzcv, fpscr
    9dec:	bmi.n	9e9c <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    9dee:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    9df0:	cmp	r4, #0
    9df2:	beq.n	9ea4 <Print::printFloat(double, unsigned char)+0x11c>
    9df4:	vmov.f64	d8, #96	; 0x3f000000  0.5
    9df8:	movs	r2, #0
		rounding *= 0.1;
    9dfa:	vldr	d7, [pc, #236]	; 9ee8 <Print::printFloat(double, unsigned char)+0x160>
    9dfe:	adds	r2, #1
    9e00:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    9e04:	uxtb	r1, r2
    9e06:	cmp	r4, r1
    9e08:	bhi.n	9dfe <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    9e0a:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    9e0e:	movs	r2, #10
    9e10:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    9e12:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    9e16:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    9e1a:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    9e1e:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    9e22:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    9e26:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9e28:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    9e2c:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9e30:	mov.w	r3, #46	; 0x2e
    9e34:	it	cs
    9e36:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    9e38:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9e3a:	strb.w	r3, [sp, #8]
    9e3e:	add	r4, r2
    9e40:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    9e42:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    9e46:	adds	r3, r2, #1
    9e48:	add	r1, sp, #24
    9e4a:	add	r1, r2
    9e4c:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    9e4e:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    9e50:	vcvt.u32.f64	s13, d0
    9e54:	vstr	s13, [sp, #4]
    9e58:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    9e5c:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    9e60:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    9e64:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    9e68:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    9e6c:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    9e70:	bne.n	9e42 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    9e72:	ldr	r3, [r5, #0]
    9e74:	mov	r0, r5
    9e76:	add	r1, sp, #8
    9e78:	ldr	r3, [r3, #4]
    9e7a:	blx	r3
	}
	return count;
}
    9e7c:	mov	r0, r6
    9e7e:	add	sp, #24
    9e80:	vpop	{d8}
    9e84:	pop	{r4, r5, r6, pc}
    9e86:	ldr	r3, [r5, #0]
    9e88:	movs	r2, #3
    9e8a:	ldr	r1, [pc, #104]	; (9ef4 <Print::printFloat(double, unsigned char)+0x16c>)
    9e8c:	ldr	r3, [r3, #4]
    9e8e:	blx	r3
    9e90:	mov	r6, r0
    9e92:	mov	r0, r6
    9e94:	add	sp, #24
    9e96:	vpop	{d8}
    9e9a:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    9e9c:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    9ea0:	movs	r3, #1
    9ea2:	b.n	9df0 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    9ea4:	vmov.f64	d7, #96	; 0x3f000000  0.5
    9ea8:	mov	r0, r5
    9eaa:	movs	r2, #10
    9eac:	vadd.f64	d0, d0, d7
    9eb0:	vcvt.u32.f64	s15, d0
    9eb4:	vmov	r1, s15
    9eb8:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    9ebc:	mov	r6, r0
    9ebe:	b.n	9dbc <Print::printFloat(double, unsigned char)+0x34>
    9ec0:	ldr	r3, [r0, #0]
    9ec2:	movs	r2, #3
    9ec4:	ldr	r1, [pc, #48]	; (9ef8 <Print::printFloat(double, unsigned char)+0x170>)
    9ec6:	ldr	r3, [r3, #4]
    9ec8:	blx	r3
    9eca:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9ecc:	b.n	9dbc <Print::printFloat(double, unsigned char)+0x34>
    9ece:	nop
    9ed0:	.word	0xffffffff
    9ed4:	.word	0x7fefffff
    9ed8:	.word	0xe0000000
    9edc:	.word	0x41efffff
    9ee0:	.word	0xe0000000
    9ee4:	.word	0xc1efffff
    9ee8:	.word	0x9999999a
    9eec:	.word	0x3fb99999
    9ef0:	.word	0x200006d0
    9ef4:	.word	0x200006cc
    9ef8:	.word	0x200006c8

00009efc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    9efc:	movs	r0, #4
    9efe:	mov	r1, lr
    9f00:	tst	r0, r1
    9f02:	beq.n	9f0c <_MSP>
    9f04:	mrs	r0, PSP
    9f08:	b.w	9f1c <HardFault_HandlerC>

00009f0c <_MSP>:
    9f0c:	mrs	r0, MSP
    9f10:	b.w	9f1c <HardFault_HandlerC>

00009f14 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    9f14:	bx	lr
    9f16:	nop

00009f18 <startup_default_late_hook>:
extern void __libc_init_array(void); // C++ standard library


void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    9f18:	bx	lr
    9f1a:	nop

00009f1c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9f1c:	ldr	r3, [pc, #108]	; (9f8c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9f1e:	movs	r1, #5
    9f20:	ldr	r2, [pc, #108]	; (9f90 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9f22:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9f24:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9f26:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    9f2a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9f2c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9f30:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9f32:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9f34:	ldr	r4, [pc, #92]	; (9f94 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9f36:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9f38:	ldr	r0, [pc, #92]	; (9f98 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9f3a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    9f3c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9f40:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    9f44:	ldr	r3, [r4, #0]
    9f46:	cmp	r3, r0
    9f48:	bls.n	9f50 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    9f4a:	ldr	r0, [pc, #80]	; (9f9c <HardFault_HandlerC+0x80>)
    9f4c:	bl	94c8 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9f50:	ldr	r5, [pc, #56]	; (9f8c <HardFault_HandlerC+0x70>)
    9f52:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9f54:	movs	r0, #0
    9f56:	ldr	r2, [pc, #72]	; (9fa0 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9f58:	ldr	r1, [pc, #72]	; (9fa4 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9f5a:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9f5e:	str	r0, [sp, #4]
    9f60:	ldr	r3, [sp, #4]
    9f62:	cmp	r3, r2
    9f64:	bhi.n	9f72 <HardFault_HandlerC+0x56>
    9f66:	ldr	r3, [sp, #4]
    9f68:	adds	r3, #1
    9f6a:	str	r3, [sp, #4]
    9f6c:	ldr	r3, [sp, #4]
    9f6e:	cmp	r3, r2
    9f70:	bls.n	9f66 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9f72:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9f76:	str	r0, [sp, #4]
    9f78:	ldr	r3, [sp, #4]
    9f7a:	cmp	r3, r1
    9f7c:	bhi.n	9f5a <HardFault_HandlerC+0x3e>
    9f7e:	ldr	r3, [sp, #4]
    9f80:	adds	r3, #1
    9f82:	str	r3, [sp, #4]
    9f84:	ldr	r3, [sp, #4]
    9f86:	cmp	r3, r1
    9f88:	bls.n	9f7e <HardFault_HandlerC+0x62>
    9f8a:	b.n	9f5a <HardFault_HandlerC+0x3e>
    9f8c:	.word	0x401bc000
    9f90:	.word	0x401f8000
    9f94:	.word	0x20000c94
    9f98:	.word	0x23c345ff
    9f9c:	.word	0x11e1a300
    9fa0:	.word	0x000f423f
    9fa4:	.word	0x0089543f

00009fa8 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9fa8:	ldr	r2, [pc, #36]	; (9fd0 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9faa:	push	{r3, lr}
        char *prev = __brkval;
    9fac:	ldr	r3, [r2, #0]
        if (incr != 0) {
    9fae:	cbz	r0, 9fba <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    9fb0:	add	r0, r3
    9fb2:	ldr	r1, [pc, #32]	; (9fd4 <_sbrk+0x2c>)
    9fb4:	cmp	r0, r1
    9fb6:	bhi.n	9fbe <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    9fb8:	str	r0, [r2, #0]
        }
        return prev;
}
    9fba:	mov	r0, r3
    9fbc:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9fbe:	bl	b1dc <__errno>
    9fc2:	movs	r2, #12
                        return (void *)-1;
    9fc4:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9fc8:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9fca:	mov	r0, r3
    9fcc:	pop	{r3, pc}
    9fce:	nop
    9fd0:	.word	0x20000cac
    9fd4:	.word	0x20280000

00009fd8 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    9fd8:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    9fda:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9fdc:	ubfx	r3, r3, #16, #15
    9fe0:	ldr	r1, [pc, #20]	; (9ff8 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    9fe2:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9fe4:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    9fe8:	ldr	r4, [pc, #16]	; (9ffc <rx_event+0x24>)
    9fea:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9fec:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    9ff0:	strh.w	r5, [r4, r2, lsl #1]
}
    9ff4:	pop	{r4, r5}
    9ff6:	bx	lr
    9ff8:	.word	0x20015774
    9ffc:	.word	0x2001576c

0000a000 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    a000:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    a002:	ldr	r3, [pc, #84]	; (a058 <usb_serial_flush_callback+0x58>)
    a004:	ldrb	r3, [r3, #0]
    a006:	cbnz	r3, a018 <usb_serial_flush_callback+0x18>
    a008:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    a00c:	ldr	r3, [pc, #76]	; (a05c <usb_serial_flush_callback+0x5c>)
    a00e:	ldrb	r3, [r3, #0]
    a010:	cbz	r3, a018 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    a012:	ldr	r5, [pc, #76]	; (a060 <usb_serial_flush_callback+0x60>)
    a014:	ldrh	r2, [r5, #0]
    a016:	cbnz	r2, a01a <usb_serial_flush_callback+0x1a>
    a018:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a01a:	ldr	r7, [pc, #72]	; (a064 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a01c:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a01e:	ldr	r6, [pc, #72]	; (a068 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a020:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a024:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a026:	ldr	r0, [pc, #68]	; (a06c <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a028:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a02c:	add.w	r1, r0, r1, lsl #8
    a030:	mov	r0, r6
    a032:	bl	abf4 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a036:	mov	r1, r6
    a038:	movs	r0, #4
    a03a:	bl	ac24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a03e:	ldrb	r3, [r7, #0]
    a040:	adds	r3, #1
    a042:	uxtb	r3, r3
    a044:	cmp	r3, #6
    a046:	it	ls
    a048:	strbls	r3, [r7, #0]
	tx_available = 0;
    a04a:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    a04e:	it	hi
    a050:	strbhi	r4, [r7, #0]
	tx_available = 0;
    a052:	strh	r3, [r5, #0]
    a054:	pop	{r3, r4, r5, r6, r7, pc}
    a056:	nop
    a058:	.word	0x200156a8
    a05c:	.word	0x20015910
    a060:	.word	0x200157e0
    a064:	.word	0x200156a9
    a068:	.word	0x20015800
    a06c:	.word	0x20014fa8

0000a070 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a070:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a074:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a076:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a078:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a07a:	cmp	r1, #0
    a07c:	beq.w	a1a8 <usb_serial_write.part.1+0x138>
    a080:	movs	r3, #0
    a082:	ldr.w	r8, [pc, #320]	; a1c4 <usb_serial_write.part.1+0x154>
    a086:	ldr.w	r9, [pc, #304]	; a1b8 <usb_serial_write.part.1+0x148>
    a08a:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    a08c:	ldr	r6, [pc, #284]	; (a1ac <usb_serial_write.part.1+0x13c>)
    a08e:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a092:	ldr.w	sl, [pc, #308]	; a1c8 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    a096:	ldr	r2, [pc, #280]	; (a1b0 <usb_serial_write.part.1+0x140>)
    a098:	ldrb	r4, [r2, #0]
    a09a:	ldr	r2, [pc, #280]	; (a1b4 <usb_serial_write.part.1+0x144>)
    a09c:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a0a0:	cmp	r3, #0
    a0a2:	bne.n	a160 <usb_serial_write.part.1+0xf0>
    a0a4:	mov	r5, r3
    a0a6:	mov	r4, r3
    a0a8:	b.n	a0d4 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a0aa:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    a0ae:	cbnz	r4, a0b2 <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    a0b0:	ldr	r5, [r6, #0]
    a0b2:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a0b4:	cmp	r3, #0
    a0b6:	bne.n	a154 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a0b8:	ldr	r3, [r6, #0]
    a0ba:	subs	r3, r3, r5
    a0bc:	cmp	r3, #120	; 0x78
    a0be:	bhi.n	a19c <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a0c0:	ldrb.w	r3, [sl]
    a0c4:	cmp	r3, #0
    a0c6:	beq.n	a154 <usb_serial_write.part.1+0xe4>
			yield();
    a0c8:	bl	997c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a0cc:	ldrh.w	r3, [r8]
    a0d0:	cmp	r3, #0
    a0d2:	bne.n	a15c <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    a0d4:	mov	r0, r7
    a0d6:	bl	ac70 <usb_transfer_status>
			if (!(status & 0x80)) {
    a0da:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a0de:	ldr	r2, [pc, #216]	; (a1b8 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    a0e0:	bne.n	a0aa <usb_serial_write.part.1+0x3a>
    a0e2:	ldr	r2, [pc, #204]	; (a1b0 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a0e4:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    a0e8:	strb.w	r0, [r9]
    a0ec:	ldrb	r4, [r2, #0]
    a0ee:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a0f0:	ldr	r1, [pc, #200]	; (a1bc <usb_serial_write.part.1+0x14c>)
    a0f2:	lsls	r4, r4, #8
		if (size >= tx_available) {
    a0f4:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a0f6:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a0fa:	add	r0, r4
    a0fc:	add	r0, r1
		if (size >= tx_available) {
    a0fe:	bcc.n	a172 <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    a100:	ldr	r1, [sp, #8]
    a102:	bl	afd0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    a106:	ldr	r3, [pc, #180]	; (a1bc <usb_serial_write.part.1+0x14c>)
    a108:	mov.w	r2, #256	; 0x100
    a10c:	mov	r0, r7
    a10e:	adds	r1, r3, r4
    a110:	movs	r3, #0
    a112:	bl	abf4 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a116:	mov	r1, r7
    a118:	movs	r0, #4
    a11a:	bl	ac24 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a11e:	ldr	r3, [pc, #144]	; (a1b0 <usb_serial_write.part.1+0x140>)
    a120:	ldr	r2, [pc, #140]	; (a1b0 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a122:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a124:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a126:	ldr	r0, [pc, #152]	; (a1c0 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a128:	adds	r3, #1
    a12a:	uxtb	r3, r3
    a12c:	cmp	r3, #6
    a12e:	it	hi
    a130:	movhi	r3, #0
    a132:	strb	r3, [r2, #0]
			size -= tx_available;
    a134:	ldrh.w	r2, [r8]
			sent += tx_available;
    a138:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a13a:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a13e:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    a142:	add	r3, r2
    a144:	str	r3, [sp, #4]
			data += tx_available;
    a146:	ldr	r3, [sp, #8]
    a148:	add	r3, r2
    a14a:	str	r3, [sp, #8]
    a14c:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a14e:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a152:	bne.n	a096 <usb_serial_write.part.1+0x26>
    a154:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a156:	add	sp, #20
    a158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a15c:	ldr	r2, [pc, #80]	; (a1b0 <usb_serial_write.part.1+0x140>)
    a15e:	ldrb	r4, [r2, #0]
    a160:	mov	r2, r3
    a162:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a166:	lsls	r4, r4, #8
    a168:	ldr	r1, [pc, #80]	; (a1bc <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    a16a:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a16c:	add	r0, r4
    a16e:	add	r0, r1
		if (size >= tx_available) {
    a170:	bcs.n	a100 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    a172:	ldr	r1, [sp, #8]
    a174:	mov	r2, fp
    a176:	str	r3, [sp, #12]
    a178:	bl	afd0 <memcpy>
			tx_available -= size;
    a17c:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a17e:	mov.w	r1, #3221225472	; 0xc0000000
    a182:	ldr	r2, [pc, #60]	; (a1c0 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    a184:	rsb	r3, fp, r3
    a188:	strh.w	r3, [r8]
    a18c:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a18e:	str.w	r1, [r2, #132]	; 0x84
    a192:	add	r3, fp
    a194:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a196:	add	sp, #20
    a198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a19c:	movs	r3, #1
				return sent;
    a19e:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a1a0:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a1a2:	add	sp, #20
    a1a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a1a8:	mov	r0, r1
    a1aa:	b.n	a156 <usb_serial_write.part.1+0xe6>
    a1ac:	.word	0x20014f80
    a1b0:	.word	0x200156a9
    a1b4:	.word	0x20015800
    a1b8:	.word	0x200158e0
    a1bc:	.word	0x20014fa8
    a1c0:	.word	0x402e0000
    a1c4:	.word	0x200157e0
    a1c8:	.word	0x20015910

0000a1cc <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    a1cc:	bx	lr
    a1ce:	nop

0000a1d0 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a1d0:	movs	r1, #0
    a1d2:	movs	r2, #224	; 0xe0
    a1d4:	ldr	r0, [pc, #128]	; (a258 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    a1d6:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a1d8:	mov	r4, r1
    a1da:	ldr	r6, [pc, #128]	; (a25c <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1dc:	ldr	r5, [pc, #128]	; (a260 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a1de:	bl	b7c8 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a1e2:	ldr	r7, [pc, #128]	; (a264 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1e4:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a1e6:	ldr	r3, [pc, #128]	; (a268 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1e8:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a1ea:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1ec:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a1ee:	ldr	r6, [pc, #124]	; (a26c <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a1f0:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1f2:	bl	b7c8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a1f6:	mov	r3, r4
    a1f8:	mov	r2, r4
    a1fa:	movs	r1, #16
    a1fc:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a1fe:	str	r4, [r7, #0]
    a200:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    a202:	str	r4, [r6, #0]
    a204:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a206:	bl	ab8c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    a20a:	mov	r2, r4
    a20c:	ldr	r3, [pc, #96]	; (a270 <usb_serial_configure+0xa0>)
    a20e:	movs	r1, #64	; 0x40
    a210:	movs	r0, #3
    a212:	bl	ab28 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    a216:	mov	r3, r4
    a218:	mov	r2, r4
    a21a:	movs	r1, #64	; 0x40
    a21c:	movs	r0, #4
    a21e:	bl	ab8c <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a222:	mov	r3, r4
    a224:	movs	r2, #64	; 0x40
    a226:	mov	r0, r5
    a228:	ldr	r1, [pc, #72]	; (a274 <usb_serial_configure+0xa4>)
    a22a:	bl	abf4 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a22e:	mov	r1, r5
    a230:	movs	r0, #3
    a232:	bl	ac4c <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    a236:	ldr	r3, [pc, #64]	; (a278 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    a238:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a23a:	ldr	r1, [pc, #64]	; (a27c <usb_serial_configure+0xac>)
    a23c:	ldr	r0, [pc, #64]	; (a280 <usb_serial_configure+0xb0>)
    a23e:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    a240:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a244:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a248:	ldr.w	r2, [r3, #328]	; 0x148
    a24c:	orr.w	r2, r2, #16777216	; 0x1000000
    a250:	str.w	r2, [r3, #328]	; 0x148
    a254:	pop	{r3, r4, r5, r6, r7, pc}
    a256:	nop
    a258:	.word	0x20015800
    a25c:	.word	0x200156a9
    a260:	.word	0x20015780
    a264:	.word	0x20015774
    a268:	.word	0x200157e0
    a26c:	.word	0x2001576c
    a270:	.word	0x00009fd9
    a274:	.word	0x200156ac
    a278:	.word	0x402e0000
    a27c:	.word	0x200158e4
    a280:	.word	0x0000a001

0000a284 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a284:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a286:	ldr	r5, [pc, #56]	; (a2c0 <usb_serial_getchar+0x3c>)
    a288:	ldr	r3, [pc, #56]	; (a2c4 <usb_serial_getchar+0x40>)
    a28a:	ldrh	r2, [r5, #0]
    a28c:	ldrh	r0, [r3, #0]
    a28e:	cmp	r2, r0
    a290:	bcs.n	a2ba <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    a292:	adds	r3, r2, #1
    a294:	ldr	r1, [pc, #48]	; (a2c8 <usb_serial_getchar+0x44>)
    a296:	uxth	r3, r3
    a298:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    a29a:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    a29c:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    a29e:	bls.n	a2a4 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    a2a0:	mov	r0, r4
	}
	return -1;
}
    a2a2:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a2a4:	movs	r3, #0
    a2a6:	movs	r2, #64	; 0x40
    a2a8:	ldr	r0, [pc, #32]	; (a2cc <usb_serial_getchar+0x48>)
    a2aa:	bl	abf4 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a2ae:	ldr	r1, [pc, #28]	; (a2cc <usb_serial_getchar+0x48>)
    a2b0:	movs	r0, #3
    a2b2:	bl	ac4c <usb_receive>
		}
		return c;
    a2b6:	mov	r0, r4
    a2b8:	pop	{r3, r4, r5, pc}
	}
	return -1;
    a2ba:	mov.w	r0, #4294967295
    a2be:	pop	{r3, r4, r5, pc}
    a2c0:	.word	0x2001576c
    a2c4:	.word	0x20015774
    a2c8:	.word	0x200156ac
    a2cc:	.word	0x20015780

0000a2d0 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    a2d0:	ldr	r3, [pc, #20]	; (a2e8 <usb_serial_peekchar+0x18>)
    a2d2:	ldr	r2, [pc, #24]	; (a2ec <usb_serial_peekchar+0x1c>)
    a2d4:	ldrh	r3, [r3, #0]
    a2d6:	ldrh	r2, [r2, #0]
    a2d8:	cmp	r2, r3
    a2da:	bls.n	a2e2 <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    a2dc:	ldr	r2, [pc, #16]	; (a2f0 <usb_serial_peekchar+0x20>)
    a2de:	ldrb	r0, [r2, r3]
    a2e0:	bx	lr
	}

	return -1;
    a2e2:	mov.w	r0, #4294967295
}
    a2e6:	bx	lr
    a2e8:	.word	0x2001576c
    a2ec:	.word	0x20015774
    a2f0:	.word	0x200156ac

0000a2f4 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    a2f4:	ldr	r2, [pc, #8]	; (a300 <usb_serial_available+0xc>)
    a2f6:	ldr	r3, [pc, #12]	; (a304 <usb_serial_available+0x10>)
    a2f8:	ldrh	r0, [r2, #0]
    a2fa:	ldrh	r3, [r3, #0]
}
    a2fc:	subs	r0, r0, r3
    a2fe:	bx	lr
    a300:	.word	0x20015774
    a304:	.word	0x2001576c

0000a308 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    a308:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a30a:	ldr	r3, [pc, #40]	; (a334 <usb_serial_flush_input+0x2c>)
    a30c:	ldr	r4, [pc, #40]	; (a338 <usb_serial_flush_input+0x30>)
    a30e:	ldrh	r5, [r3, #0]
    a310:	ldrh	r3, [r4, #0]
    a312:	cmp	r3, r5
    a314:	bcc.n	a318 <usb_serial_flush_input+0x10>
    a316:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a318:	movs	r3, #0
    a31a:	ldr	r1, [pc, #32]	; (a33c <usb_serial_flush_input+0x34>)
    a31c:	ldr	r0, [pc, #32]	; (a340 <usb_serial_flush_input+0x38>)
    a31e:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    a320:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a322:	bl	abf4 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a326:	ldr	r1, [pc, #24]	; (a340 <usb_serial_flush_input+0x38>)
    a328:	movs	r0, #3
	}
}
    a32a:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a32e:	b.w	ac4c <usb_receive>
    a332:	nop
    a334:	.word	0x20015774
    a338:	.word	0x2001576c
    a33c:	.word	0x200156ac
    a340:	.word	0x20015780

0000a344 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a344:	ldr	r3, [pc, #36]	; (a36c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a346:	push	{lr}
    a348:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a34a:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a34c:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a350:	cbnz	r3, a35c <usb_serial_putchar+0x18>
    a352:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a356:	add	sp, #12
    a358:	ldr.w	pc, [sp], #4
    a35c:	movs	r1, #1
    a35e:	add.w	r0, sp, #7
    a362:	bl	a070 <usb_serial_write.part.1>
    a366:	add	sp, #12
    a368:	ldr.w	pc, [sp], #4
    a36c:	.word	0x20015910

0000a370 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a370:	ldr	r3, [pc, #16]	; (a384 <usb_serial_write+0x14>)
    a372:	ldrb	r3, [r3, #0]
    a374:	and.w	r2, r3, #255	; 0xff
    a378:	cbz	r3, a37e <usb_serial_write+0xe>
    a37a:	b.w	a070 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a37e:	mov	r0, r2
    a380:	bx	lr
    a382:	nop
    a384:	.word	0x20015910

0000a388 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a388:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a38c:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a38e:	ldr.w	r8, [pc, #64]	; a3d0 <usb_serial_write_buffer_free+0x48>
    a392:	movs	r3, #1
    a394:	ldr	r5, [pc, #48]	; (a3c8 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a396:	mov	r7, r4
    a398:	ldr	r6, [pc, #48]	; (a3cc <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a39a:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a39e:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a3a0:	mov	r0, r5
    a3a2:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a3a4:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a3a6:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a3aa:	beq.n	a3b8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a3ac:	bl	ac70 <usb_transfer_status>
    a3b0:	lsls	r3, r0, #24
    a3b2:	it	pl
    a3b4:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a3b8:	cmp	r4, #7
    a3ba:	bne.n	a39e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a3bc:	movs	r3, #0
	return sum;
}
    a3be:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a3c0:	strb.w	r3, [r8]
	return sum;
}
    a3c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3c8:	.word	0x20015800
    a3cc:	.word	0x200156a9
    a3d0:	.word	0x200156a8

0000a3d4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a3d4:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    a3d6:	ldr	r3, [pc, #80]	; (a428 <usb_serial_flush_output+0x54>)
    a3d8:	ldrb	r3, [r3, #0]
    a3da:	cbz	r3, a3e2 <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    a3dc:	ldr	r4, [pc, #76]	; (a42c <usb_serial_flush_output+0x58>)
    a3de:	ldrh	r2, [r4, #0]
    a3e0:	cbnz	r2, a3e4 <usb_serial_flush_output+0x10>
    a3e2:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a3e4:	ldr	r6, [pc, #72]	; (a430 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a3e6:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a3ea:	ldr	r5, [pc, #72]	; (a434 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a3ec:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a3ee:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a3f0:	rsb	r2, r2, #256	; 0x100
    a3f4:	ldr	r0, [pc, #64]	; (a438 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a3f6:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a3fa:	ldr	r7, [pc, #64]	; (a43c <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a3fc:	add.w	r1, r0, r1, lsl #8
    a400:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a402:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a406:	bl	abf4 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a40a:	mov	r1, r5
    a40c:	movs	r0, #4
    a40e:	bl	ac24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a412:	ldrb	r3, [r6, #0]
    a414:	adds	r3, #1
    a416:	uxtb	r3, r3
    a418:	cmp	r3, #6
    a41a:	it	hi
    a41c:	movhi	r3, #0
    a41e:	strb	r3, [r6, #0]
	tx_available = 0;
    a420:	movs	r3, #0
    a422:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    a424:	strb	r3, [r7, #0]
    a426:	pop	{r3, r4, r5, r6, r7, pc}
    a428:	.word	0x20015910
    a42c:	.word	0x200157e0
    a430:	.word	0x200156a9
    a434:	.word	0x20015800
    a438:	.word	0x20014fa8
    a43c:	.word	0x200156a8

0000a440 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a440:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a442:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a444:	cbz	r3, a44e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a446:	ldr	r3, [r2, #4]
    a448:	orr.w	r3, r3, #32768	; 0x8000
    a44c:	str	r3, [r2, #4]
	}
	__disable_irq();
    a44e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a450:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a452:	cbz	r4, a47c <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a454:	ldr	r3, [pc, #64]	; (a498 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a456:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a458:	ldr.w	r4, [r3, #432]	; 0x1b0
    a45c:	tst	r4, r1
    a45e:	bne.n	a490 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a460:	ldr.w	r4, [r3, #320]	; 0x140
    a464:	orr.w	r4, r4, #16384	; 0x4000
    a468:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a46c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    a470:	ldr.w	r4, [r3, #320]	; 0x140
    a474:	lsls	r4, r4, #17
    a476:	bpl.n	a460 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a478:	tst	r1, r5
    a47a:	bne.n	a490 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a47c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a47e:	ldr	r4, [pc, #24]	; (a498 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a480:	str	r2, [r0, #8]
	endpoint->status = 0;
    a482:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a484:	ldr.w	r3, [r4, #432]	; 0x1b0
    a488:	orrs	r1, r3
    a48a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a48e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a490:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a492:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a494:	pop	{r4, r5}
    a496:	bx	lr
    a498:	.word	0x402e0000

0000a49c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a49c:	push	{r3, r4, r5, lr}
    a49e:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    a4a0:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    a4a2:	b.n	a4b2 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a4a4:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    a4a6:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    a4a8:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    a4aa:	ldr	r2, [r5, #52]	; 0x34
    a4ac:	mov	r3, r4
    a4ae:	cmp	r4, r2
    a4b0:	beq.n	a4c4 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a4b2:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    a4b4:	cbz	r3, a4c4 <run_callbacks+0x28>
    a4b6:	cmp	r3, #1
    a4b8:	beq.n	a4c4 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    a4ba:	ldr	r2, [r3, #4]
    a4bc:	lsls	r2, r2, #24
    a4be:	bpl.n	a4a4 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    a4c0:	str	r3, [r5, #48]	; 0x30
			return;
    a4c2:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    a4c4:	movs	r3, #0
    a4c6:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    a4c8:	str	r3, [r5, #52]	; 0x34
    a4ca:	pop	{r3, r4, r5, pc}

0000a4cc <endpoint0_transmit.constprop.0>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a4cc:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a4ce:	cbnz	r1, a50e <endpoint0_transmit.constprop.0+0x42>
    a4d0:	ldr	r4, [pc, #136]	; (a55c <endpoint0_transmit.constprop.0+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4d2:	ldr	r1, [pc, #140]	; (a560 <endpoint0_transmit.constprop.0+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a4d4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a4d6:	ldr	r3, [pc, #140]	; (a564 <endpoint0_transmit.constprop.0+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4d8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a4da:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a4dc:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4de:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a4e0:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a4e2:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a4e4:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a4e6:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a4ea:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a4ec:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a4f0:	ldr	r5, [pc, #116]	; (a568 <endpoint0_transmit.constprop.0+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a4f2:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a4f6:	ldr.w	r1, [r3, #432]	; 0x1b0
    a4fa:	orr.w	r1, r1, #1
    a4fe:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a502:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a504:	ldr.w	r3, [r2, #432]	; 0x1b0
    a508:	cmp	r3, #0
    a50a:	bne.n	a504 <endpoint0_transmit.constprop.0+0x38>
}
    a50c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a50e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a510:	ldr	r3, [pc, #88]	; (a56c <endpoint0_transmit.constprop.0+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a512:	ldr	r5, [pc, #80]	; (a564 <endpoint0_transmit.constprop.0+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a514:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a516:	ldr	r4, [pc, #68]	; (a55c <endpoint0_transmit.constprop.0+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a518:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a51c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a51e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a520:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a522:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a526:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a528:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a52c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a52e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a532:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a536:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a53a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a53c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a53e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a542:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a546:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a54a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a54c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a54e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a552:	ldr.w	r3, [r2, #432]	; 0x1b0
    a556:	cmp	r3, #0
    a558:	bne.n	a552 <endpoint0_transmit.constprop.0+0x86>
    a55a:	b.n	a4d2 <endpoint0_transmit.constprop.0+0x6>
    a55c:	.word	0x20017000
    a560:	.word	0x20016020
    a564:	.word	0x402e0000
    a568:	.word	0x200158f0
    a56c:	.word	0x20016000

0000a570 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    a570:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a574:	ldr	r4, [pc, #748]	; (a864 <isr+0x2f4>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    a576:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a578:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a57c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a580:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a584:	beq.n	a644 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a586:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a58a:	cmp	r3, #0
    a58c:	beq.n	a63a <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a58e:	mov.w	r9, #65537	; 0x10001
    a592:	ldr.w	fp, [pc, #752]	; a884 <isr+0x314>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a596:	mov	r6, r4
    a598:	ldr	r7, [pc, #716]	; (a868 <isr+0x2f8>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a59a:	mov	sl, r9
    a59c:	ldr	r1, [r7, #40]	; 0x28
    a59e:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a5a0:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a5a4:	ldr.w	r3, [r4, #320]	; 0x140
    a5a8:	orr.w	r3, r3, #8192	; 0x2000
    a5ac:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a5b0:	ldr.w	r3, [r4, #320]	; 0x140
    a5b4:	lsls	r5, r3, #18
    a5b6:	bpl.n	a5a4 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a5b8:	ldr.w	r3, [r6, #320]	; 0x140
    a5bc:	bic.w	r3, r3, #8192	; 0x2000
    a5c0:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a5c4:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a5c8:	ldr.w	r3, [r4, #436]	; 0x1b4
    a5cc:	ands.w	r3, r3, #65537	; 0x10001
    a5d0:	bne.n	a5c8 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a5d2:	uxth	r0, r1
    a5d4:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a5d8:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a5dc:	cmp	r0, r5
    a5de:	bhi.w	a70e <isr+0x19e>
    a5e2:	cmp.w	r0, #1664	; 0x680
    a5e6:	bcs.w	a99a <isr+0x42a>
    a5ea:	cmp.w	r0, #258	; 0x102
    a5ee:	beq.w	a8a0 <isr+0x330>
    a5f2:	bhi.w	a7a0 <isr+0x230>
    a5f6:	cmp	r0, #128	; 0x80
    a5f8:	beq.w	a848 <isr+0x2d8>
    a5fc:	cmp	r0, #130	; 0x82
    a5fe:	bne.w	a790 <isr+0x220>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a602:	uxth	r2, r2
    a604:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a608:	cmp	r1, #7
    a60a:	bhi.w	a790 <isr+0x220>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a60e:	lsls	r1, r1, #2
    a610:	ldr	r0, [pc, #600]	; (a86c <isr+0x2fc>)
		reply_buffer[0] = 0;
    a612:	ldr	r5, [pc, #604]	; (a870 <isr+0x300>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a614:	add	r0, r1
    a616:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a618:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a61a:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    a61c:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a61e:	bpl.w	a9ec <isr+0x47c>
    a622:	lsls	r1, r1, #15
    a624:	bpl.n	a62a <isr+0xba>
			reply_buffer[0] = 1;
    a626:	movs	r3, #1
    a628:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a62a:	movs	r1, #2
    a62c:	ldr	r0, [pc, #576]	; (a870 <isr+0x300>)
    a62e:	bl	a4cc <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a632:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a636:	cmp	r3, #0
    a638:	bne.n	a59c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a63a:	ldr	r2, [pc, #552]	; (a864 <isr+0x2f4>)
    a63c:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a640:	cmp	r3, #0
    a642:	bne.n	a6ce <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a644:	tst.w	r8, #64	; 0x40
    a648:	beq.n	a67c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a64a:	ldr	r3, [pc, #536]	; (a864 <isr+0x2f4>)
    a64c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a650:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a652:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a656:	ldr.w	r1, [r3, #444]	; 0x1bc
    a65a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a65e:	ldr.w	r4, [r2, #432]	; 0x1b0
    a662:	ldr	r3, [pc, #512]	; (a864 <isr+0x2f4>)
    a664:	cmp	r4, #0
    a666:	bne.n	a65e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a668:	mov.w	r2, #4294967295
    a66c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a670:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a674:	bl	a1cc <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a678:	ldr	r3, [pc, #504]	; (a874 <isr+0x304>)
    a67a:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a67c:	tst.w	r8, #16777216	; 0x1000000
    a680:	beq.n	a68a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a682:	ldr	r3, [pc, #500]	; (a878 <isr+0x308>)
    a684:	ldr	r3, [r3, #0]
    a686:	cbz	r3, a68a <isr+0x11a>
    a688:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a68a:	tst.w	r8, #33554432	; 0x2000000
    a68e:	beq.n	a698 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a690:	ldr	r3, [pc, #488]	; (a87c <isr+0x30c>)
    a692:	ldr	r3, [r3, #0]
    a694:	cbz	r3, a698 <isr+0x128>
    a696:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a698:	tst.w	r8, #4
    a69c:	beq.n	a6a4 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a69e:	ldr	r3, [pc, #452]	; (a864 <isr+0x2f4>)
    a6a0:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a6a4:	ldr	r3, [pc, #444]	; (a864 <isr+0x2f4>)
    a6a6:	ldr.w	r2, [r3, #328]	; 0x148
    a6aa:	lsls	r2, r2, #24
    a6ac:	bpl.n	a6c8 <isr+0x158>
    a6ae:	tst.w	r8, #128	; 0x80
    a6b2:	beq.n	a6c8 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a6b4:	ldr	r1, [pc, #456]	; (a880 <isr+0x310>)
    a6b6:	ldrb	r2, [r1, #0]
    a6b8:	cmp	r2, #0
    a6ba:	beq.w	a9da <isr+0x46a>
			if (--usb_reboot_timer == 0) {
    a6be:	subs	r3, r2, #1
    a6c0:	uxtb	r3, r3
    a6c2:	strb	r3, [r1, #0]
    a6c4:	cbnz	r3, a6c8 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    a6c6:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    a6c8:	add	sp, #12
    a6ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a6ce:	ldr	r1, [pc, #436]	; (a884 <isr+0x314>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a6d0:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a6d4:	ldr	r0, [r1, #0]
    a6d6:	tst	r3, r0
    a6d8:	bne.w	aa74 <isr+0x504>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a6dc:	ldr	r2, [pc, #404]	; (a874 <isr+0x304>)
    a6de:	ldr	r4, [r2, #0]
			if (completestatus) {
    a6e0:	ands	r4, r3
    a6e2:	beq.n	a644 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a6e4:	lsls	r3, r4, #29
    a6e6:	bmi.w	aaae <isr+0x53e>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a6ea:	lsls	r7, r4, #13
    a6ec:	bmi.w	aace <isr+0x55e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a6f0:	lsls	r6, r4, #28
    a6f2:	bmi.w	aac6 <isr+0x556>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a6f6:	lsls	r5, r4, #12
    a6f8:	bmi.w	aabe <isr+0x54e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a6fc:	lsls	r0, r4, #27
    a6fe:	bmi.w	aab6 <isr+0x546>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a702:	lsls	r1, r4, #11
    a704:	bpl.n	a644 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    a706:	ldr	r0, [pc, #384]	; (a888 <isr+0x318>)
    a708:	bl	a49c <run_callbacks>
    a70c:	b.n	a644 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a70e:	movw	r5, #8225	; 0x2021
    a712:	cmp	r0, r5
    a714:	beq.n	a788 <isr+0x218>
    a716:	bhi.n	a7f8 <isr+0x288>
    a718:	cmp.w	r0, #2176	; 0x880
    a71c:	beq.w	a97e <isr+0x40e>
    a720:	cmp.w	r0, #2304	; 0x900
    a724:	bne.n	a790 <isr+0x220>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a726:	ubfx	r1, r1, #16, #8
    a72a:	ldr	r2, [pc, #352]	; (a88c <isr+0x31c>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a72c:	ldr	r0, [pc, #352]	; (a890 <isr+0x320>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a72e:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a730:	ldr	r1, [pc, #352]	; (a894 <isr+0x324>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a732:	ldr	r2, [pc, #356]	; (a898 <isr+0x328>)
    a734:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a736:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a73a:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a73e:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a742:	bl	a1d0 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a746:	ldr	r2, [pc, #340]	; (a89c <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a748:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a74a:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a74c:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a74e:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a750:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a752:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a754:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a758:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a75a:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a75e:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a760:	str.w	r1, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a764:	ldr.w	r2, [r6, #432]	; 0x1b0
    a768:	orr.w	r2, r2, #65536	; 0x10000
    a76c:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a770:	ldr	r2, [pc, #272]	; (a884 <isr+0x314>)
    a772:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a774:	ldr.w	r3, [r4, #432]	; 0x1b0
    a778:	cmp	r3, #0
    a77a:	bne.n	a774 <isr+0x204>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a77c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a780:	cmp	r3, #0
    a782:	bne.w	a59c <isr+0x2c>
    a786:	b.n	a63a <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a788:	lsrs	r0, r2, #16
    a78a:	cmp	r0, #7
    a78c:	beq.w	a9f4 <isr+0x484>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a790:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a794:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a798:	cmp	r3, #0
    a79a:	bne.w	a59c <isr+0x2c>
    a79e:	b.n	a63a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7a0:	movw	r5, #770	; 0x302
    a7a4:	cmp	r0, r5
    a7a6:	beq.w	a918 <isr+0x3a8>
    a7aa:	cmp.w	r0, #1280	; 0x500
    a7ae:	bne.n	a790 <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7b0:	ldr	r2, [pc, #232]	; (a89c <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a7b2:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7b4:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a7b6:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a7b8:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7ba:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a7bc:	ldr.w	r0, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a7c0:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a7c2:	orr.w	r3, r0, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a7c6:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a7c8:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a7cc:	ldr.w	r3, [r6, #432]	; 0x1b0
    a7d0:	orr.w	r3, r3, #65536	; 0x10000
    a7d4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a7d8:	ldr.w	r3, [r4, #432]	; 0x1b0
    a7dc:	cmp	r3, #0
    a7de:	bne.n	a7d8 <isr+0x268>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a7e0:	lsrs	r3, r1, #16
    a7e2:	lsls	r3, r3, #25
    a7e4:	orr.w	r3, r3, #16777216	; 0x1000000
    a7e8:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a7ec:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a7f0:	cmp	r3, #0
    a7f2:	bne.w	a59c <isr+0x2c>
    a7f6:	b.n	a63a <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7f8:	movw	r3, #8737	; 0x2221
    a7fc:	cmp	r0, r3
    a7fe:	beq.w	a906 <isr+0x396>
    a802:	movw	r3, #8993	; 0x2321
    a806:	cmp	r0, r3
    a808:	bne.n	a790 <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a80a:	ldr	r3, [pc, #144]	; (a89c <isr+0x32c>)
    a80c:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a80e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a810:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a812:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a814:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a816:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a81a:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a81c:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a820:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a822:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a824:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a828:	ldr.w	r3, [r4, #432]	; 0x1b0
    a82c:	orr.w	r3, r3, #65536	; 0x10000
    a830:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a834:	ldr.w	r3, [r4, #432]	; 0x1b0
    a838:	cmp	r3, #0
    a83a:	bne.n	a834 <isr+0x2c4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a83c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a840:	cmp	r3, #0
    a842:	bne.w	a59c <isr+0x2c>
    a846:	b.n	a63a <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a848:	ldr	r2, [pc, #36]	; (a870 <isr+0x300>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    a84a:	movs	r1, #2
    a84c:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a84e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a850:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a852:	bl	a4cc <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a856:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a85a:	cmp	r3, #0
    a85c:	bne.w	a59c <isr+0x2c>
    a860:	b.n	a63a <isr+0xca>
    a862:	nop
    a864:	.word	0x402e0000
    a868:	.word	0x20017000
    a86c:	.word	0x402e01c0
    a870:	.word	0x20015900
    a874:	.word	0x200158e8
    a878:	.word	0x200158e4
    a87c:	.word	0x200158ec
    a880:	.word	0x200158f4
    a884:	.word	0x200158f0
    a888:	.word	0x20017240
    a88c:	.word	0x20015910
    a890:	.word	0x00cc0002
    a894:	.word	0x000200c8
    a898:	.word	0x00c80002
    a89c:	.word	0x20016020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a8a0:	uxth	r2, r2
    a8a2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a8a6:	cmp	r3, #7
    a8a8:	bhi.w	a790 <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a8ac:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a8b0:	mov.w	r3, r3, lsl #2
    a8b4:	ldr	r2, [pc, #544]	; (aad8 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8b6:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a8ba:	add	r2, r3
    a8bc:	ldr	r3, [r2, #0]
    a8be:	ite	ne
    a8c0:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a8c4:	biceq.w	r3, r3, #1
    a8c8:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8ca:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8cc:	ldr	r3, [pc, #524]	; (aadc <isr+0x56c>)
    a8ce:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a8d0:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8d2:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a8d4:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a8d8:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a8da:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a8de:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a8e0:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a8e2:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8ea:	orr.w	r3, r3, #65536	; 0x10000
    a8ee:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a8f2:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8f6:	cmp	r3, #0
    a8f8:	bne.n	a8f2 <isr+0x382>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8fa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8fe:	cmp	r3, #0
    a900:	bne.w	a59c <isr+0x2c>
    a904:	b.n	a63a <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a906:	ldr	r3, [pc, #472]	; (aae0 <isr+0x570>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a908:	ubfx	r1, r1, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a90c:	ldr	r2, [pc, #468]	; (aae4 <isr+0x574>)
    a90e:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a910:	ldr	r3, [pc, #468]	; (aae8 <isr+0x578>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a912:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a914:	strb	r1, [r3, #0]
    a916:	b.n	a80a <isr+0x29a>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a918:	uxth	r2, r2
    a91a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a91e:	cmp	r3, #7
    a920:	bhi.w	a790 <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a924:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a928:	mov.w	r3, r3, lsl #2
    a92c:	ldr	r2, [pc, #424]	; (aad8 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a92e:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a932:	add	r2, r3
    a934:	ldr	r3, [r2, #0]
    a936:	ite	ne
    a938:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a93c:	orreq.w	r3, r3, #1
    a940:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a942:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a944:	ldr	r3, [pc, #404]	; (aadc <isr+0x56c>)
    a946:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a948:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a94a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a94c:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a950:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a952:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a956:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a958:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    a95a:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a95e:	ldr.w	r3, [r4, #432]	; 0x1b0
    a962:	orr.w	r3, r3, #65536	; 0x10000
    a966:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a96a:	ldr.w	r3, [r4, #432]	; 0x1b0
    a96e:	cmp	r3, #0
    a970:	bne.n	a96a <isr+0x3fa>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a972:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a976:	cmp	r3, #0
    a978:	bne.w	a59c <isr+0x2c>
    a97c:	b.n	a63a <isr+0xca>
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a97e:	ldr	r2, [pc, #364]	; (aaec <isr+0x57c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a980:	movs	r1, #1
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a982:	ldr	r3, [pc, #364]	; (aaf0 <isr+0x580>)
    a984:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a986:	mov	r0, r3
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a988:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a98a:	bl	a4cc <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a98e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a992:	cmp	r3, #0
    a994:	bne.w	a59c <isr+0x2c>
    a998:	b.n	a63a <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a99a:	ldr	r3, [pc, #344]	; (aaf4 <isr+0x584>)
    a99c:	ldr	r0, [r3, #4]
    a99e:	cmp	r0, #0
    a9a0:	beq.w	a790 <isr+0x220>
    a9a4:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a9a6:	uxth.w	lr, r2
    a9aa:	b.n	a9b6 <isr+0x446>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a9ac:	adds	r3, #12
    a9ae:	ldr	r0, [r3, #4]
    a9b0:	cmp	r0, #0
    a9b2:	beq.w	a790 <isr+0x220>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a9b6:	ldrh	r5, [r3, #0]
    a9b8:	cmp	r5, r1
    a9ba:	bne.n	a9ac <isr+0x43c>
    a9bc:	ldrh	r5, [r3, #2]
    a9be:	cmp	r5, lr
    a9c0:	bne.n	a9ac <isr+0x43c>
				if ((setup.wValue >> 8) == 3) {
    a9c2:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    a9c4:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    a9c6:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    a9c8:	ite	eq
    a9ca:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    a9cc:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    a9ce:	cmp	r1, r2
    a9d0:	it	cs
    a9d2:	movcs	r1, r2
    a9d4:	bl	a4cc <endpoint0_transmit.constprop.0>
    a9d8:	b.n	a632 <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    a9da:	ldr.w	r2, [r3, #328]	; 0x148
    a9de:	bic.w	r2, r2, #128	; 0x80
    a9e2:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    a9e6:	add	sp, #12
    a9e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a9ec:	lsls	r2, r1, #31
    a9ee:	bpl.w	a62a <isr+0xba>
    a9f2:	b.n	a626 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    a9f4:	ldr	r5, [pc, #256]	; (aaf8 <isr+0x588>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a9f6:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    a9f8:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    a9fa:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a9fc:	ldr	r3, [pc, #252]	; (aafc <isr+0x58c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a9fe:	ldr	r1, [pc, #256]	; (ab00 <isr+0x590>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aa00:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa02:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa04:	ldr	r1, [pc, #252]	; (ab04 <isr+0x594>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa06:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aa0a:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa0c:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa10:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa14:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa18:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aa1c:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa1e:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa20:	sub.w	r0, r1, #4096	; 0x1000
    aa24:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aa26:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa2a:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa2c:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa2e:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    aa32:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa36:	cmp	r3, #0
    aa38:	bne.n	aa32 <isr+0x4c2>
	}
	endpoint0_transfer_ack.next = 1;
    aa3a:	ldr	r2, [pc, #160]	; (aadc <isr+0x56c>)
    aa3c:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa3e:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa42:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa44:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa46:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa4a:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aa4c:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa50:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aa52:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa56:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    aa58:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa5c:	ldr.w	r3, [r6, #432]	; 0x1b0
    aa60:	orrs	r3, r0
    aa62:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa66:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    aa6a:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa6e:	cmp	r3, #0
    aa70:	bne.n	aa6a <isr+0x4fa>
    aa72:	b.n	a632 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    aa74:	ldr	r4, [pc, #128]	; (aaf8 <isr+0x588>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa76:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aa7a:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa7c:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aa7e:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa80:	cmp	r4, r0
    aa82:	bne.w	a6dc <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa86:	ldr	r1, [pc, #128]	; (ab08 <isr+0x598>)
    aa88:	ldr	r4, [pc, #128]	; (ab0c <isr+0x59c>)
    aa8a:	ldmia	r1, {r0, r1}
    aa8c:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aa8e:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa90:	str	r0, [r4, #0]
    aa92:	strh	r1, [r4, #4]
    aa94:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aa96:	bne.w	a6dc <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    aa9a:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aa9e:	movs	r4, #80	; 0x50
    aaa0:	ldr	r0, [pc, #108]	; (ab10 <isr+0x5a0>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    aaa2:	orr.w	r1, r1, #128	; 0x80
    aaa6:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aaaa:	strb	r4, [r0, #0]
    aaac:	b.n	a6dc <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    aaae:	ldr	r0, [pc, #100]	; (ab14 <isr+0x5a4>)
    aab0:	bl	a49c <run_callbacks>
    aab4:	b.n	a6ea <isr+0x17a>
    aab6:	ldr	r0, [pc, #96]	; (ab18 <isr+0x5a8>)
    aab8:	bl	a49c <run_callbacks>
    aabc:	b.n	a702 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    aabe:	ldr	r0, [pc, #92]	; (ab1c <isr+0x5ac>)
    aac0:	bl	a49c <run_callbacks>
    aac4:	b.n	a6fc <isr+0x18c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    aac6:	ldr	r0, [pc, #88]	; (ab20 <isr+0x5b0>)
    aac8:	bl	a49c <run_callbacks>
    aacc:	b.n	a6f6 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    aace:	ldr	r0, [pc, #84]	; (ab24 <isr+0x5b4>)
    aad0:	bl	a49c <run_callbacks>
    aad4:	b.n	a6f0 <isr+0x180>
    aad6:	nop
    aad8:	.word	0x402e01c0
    aadc:	.word	0x20016020
    aae0:	.word	0x20014f80
    aae4:	.word	0x20015ec8
    aae8:	.word	0x200158e1
    aaec:	.word	0x20015910
    aaf0:	.word	0x20015900
    aaf4:	.word	0x200006d4
    aaf8:	.word	0x200158f8
    aafc:	.word	0x20016000
    ab00:	.word	0x00070080
    ab04:	.word	0x20017908
    ab08:	.word	0x20015908
    ab0c:	.word	0x20015ec0
    ab10:	.word	0x200158f4
    ab14:	.word	0x20017100
    ab18:	.word	0x20017200
    ab1c:	.word	0x200171c0
    ab20:	.word	0x20017180
    ab24:	.word	0x20017140

0000ab28 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab28:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab2a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ab2e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab32:	ite	ne
    ab34:	movne	r7, #0
    ab36:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab3a:	cmp	r2, #2
    ab3c:	bls.n	ab42 <usb_config_rx+0x1a>
    ab3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ab42:	mov.w	sl, r0, lsl #7
    ab46:	ldr.w	r9, [pc, #64]	; ab88 <usb_config_rx+0x60>
    ab4a:	mov	r5, r1
    ab4c:	mov	r4, r0
    ab4e:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ab52:	movs	r1, #0
    ab54:	movs	r2, #64	; 0x40
    ab56:	mov	r8, r3
    ab58:	mov	r0, r6
    ab5a:	bl	b7c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab5e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ab60:	orr.w	r1, r7, r5, lsl #16
    ab64:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ab68:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab6c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ab6e:	cmp.w	r8, #0
    ab72:	beq.n	ab3e <usb_config_rx+0x16>
    ab74:	ldr	r3, [pc, #12]	; (ab84 <usb_config_rx+0x5c>)
    ab76:	lsls	r0, r4
    ab78:	ldr	r4, [r3, #0]
    ab7a:	orrs	r0, r4
    ab7c:	str	r0, [r3, #0]
    ab7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab82:	nop
    ab84:	.word	0x200158e8
    ab88:	.word	0x20017000

0000ab8c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab8c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab8e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ab92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab96:	ite	ne
    ab98:	movne	r7, #0
    ab9a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab9e:	cmp	r2, #2
    aba0:	bls.n	aba6 <usb_config_tx+0x1a>
    aba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    aba6:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    aba8:	lsls	r5, r0, #7
    abaa:	ldr.w	r9, [pc, #68]	; abf0 <usb_config_tx+0x64>
    abae:	mov	r8, r1
    abb0:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    abb2:	movs	r1, #0
    abb4:	mov	r4, r0
    abb6:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    abb8:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    abbc:	mov	r0, sl
    abbe:	bl	b7c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    abc2:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    abc4:	orr.w	r1, r7, r8, lsl #16
    abc8:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    abcc:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    abd0:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    abd4:	cmp	r6, #0
    abd6:	beq.n	aba2 <usb_config_tx+0x16>
    abd8:	add.w	r0, r4, #16
    abdc:	ldr	r3, [pc, #12]	; (abec <usb_config_tx+0x60>)
    abde:	lsls	r2, r0
    abe0:	ldr	r0, [r3, #0]
    abe2:	orrs	r2, r0
    abe4:	str	r2, [r3, #0]
    abe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abea:	nop
    abec:	.word	0x200158e8
    abf0:	.word	0x20017000

0000abf4 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    abf4:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    abf6:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    abf8:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    abfa:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    abfe:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ac00:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ac02:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ac04:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ac08:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ac0c:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ac10:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ac14:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ac16:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ac18:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ac1a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ac1c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    ac1e:	pop	{r4, r5, r6, r7}
    ac20:	bx	lr
    ac22:	nop

0000ac24 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac24:	subs	r3, r0, #2
    ac26:	cmp	r3, #2
    ac28:	bls.n	ac2c <usb_transmit+0x8>
    ac2a:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ac2c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ac2e:	ldr	r3, [pc, #24]	; (ac48 <usb_transmit+0x24>)
    ac30:	add.w	r4, r0, #16
    ac34:	movs	r5, #1
    ac36:	mov	r2, r1
    ac38:	add.w	r0, r3, r0, lsl #7
    ac3c:	lsl.w	r1, r5, r4
}
    ac40:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ac42:	b.w	a440 <schedule_transfer>
    ac46:	nop
    ac48:	.word	0x20017040

0000ac4c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac4c:	subs	r3, r0, #2
    ac4e:	cmp	r3, #2
    ac50:	bls.n	ac54 <usb_receive+0x8>
    ac52:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ac54:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ac56:	ldr	r3, [pc, #20]	; (ac6c <usb_receive+0x20>)
    ac58:	movs	r4, #1
    ac5a:	mov	r2, r1
    ac5c:	lsl.w	r1, r4, r0
    ac60:	add.w	r0, r3, r0, lsl #7
}
    ac64:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ac68:	b.w	a440 <schedule_transfer>
    ac6c:	.word	0x20017000

0000ac70 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ac70:	ldr	r2, [pc, #32]	; (ac94 <usb_transfer_status+0x24>)
    ac72:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ac76:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ac78:	orr.w	r3, r3, #16384	; 0x4000
    ac7c:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ac80:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ac82:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ac86:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    ac88:	tst.w	r3, #16384	; 0x4000
    ac8c:	beq.n	ac76 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    ac8e:	mov	r0, r1
    ac90:	bx	lr
    ac92:	nop
    ac94:	.word	0x402e0000

0000ac98 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ac98:	ldr	r0, [pc, #656]	; (af2c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ac9a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ac9e:	ldr	r3, [pc, #656]	; (af30 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    aca0:	ldr	r2, [r0, #120]	; 0x78
    aca2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    aca6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    aca8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    acaa:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    acac:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    acb0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    acb4:	ldr	r4, [pc, #636]	; (af34 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    acb6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    acba:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    acbc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    acc0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    acc2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    acc4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    acc8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    accc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    acd0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    acd4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    acd8:	ldrh.w	r0, [r3, #392]	; 0x188
    acdc:	uxth	r0, r0
    acde:	orr.w	r0, r0, #240	; 0xf0
    ace2:	strh.w	r0, [r3, #392]	; 0x188
    ace6:	add.w	r0, r1, r1, lsl #1
    acea:	ldr	r3, [pc, #580]	; (af30 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    acec:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    acee:	movs	r5, #0
    acf0:	lsls	r0, r0, #5
    acf2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    acf4:	cmp	r1, #4
    acf6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    acf8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    acfc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    acfe:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ad00:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ad02:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ad04:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ad06:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ad08:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ad0a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ad0c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ad0e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ad10:	bne.n	ace6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad12:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ad16:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ad1a:	ldr	r3, [pc, #540]	; (af38 <pwm_init+0x2a0>)
    ad1c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad20:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ad22:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ad24:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ad28:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad2a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ad2e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad32:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ad36:	ldrh.w	r0, [r4, #392]	; 0x188
    ad3a:	uxth	r0, r0
    ad3c:	orr.w	r0, r0, #3840	; 0xf00
    ad40:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ad44:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ad48:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ad4c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ad50:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ad54:	ldrh.w	r0, [r3, #392]	; 0x188
    ad58:	uxth	r0, r0
    ad5a:	orr.w	r0, r0, #240	; 0xf0
    ad5e:	strh.w	r0, [r3, #392]	; 0x188
    ad62:	add.w	r0, r1, r1, lsl #1
    ad66:	ldr	r3, [pc, #464]	; (af38 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    ad68:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ad6a:	movs	r5, #0
    ad6c:	lsls	r0, r0, #5
    ad6e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ad70:	cmp	r1, #4
    ad72:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ad74:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ad76:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ad7a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ad7c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ad7e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ad80:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ad82:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ad84:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ad86:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ad88:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ad8a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ad8c:	bne.n	ad62 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad8e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ad92:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ad96:	ldr	r3, [pc, #420]	; (af3c <pwm_init+0x2a4>)
    ad98:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ad9c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ad9e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ada0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ada4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ada6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    adaa:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    adae:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    adb2:	ldrh.w	r0, [r4, #392]	; 0x188
    adb6:	uxth	r0, r0
    adb8:	orr.w	r0, r0, #3840	; 0xf00
    adbc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    adc0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    adc4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    adc8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    adcc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    add0:	ldrh.w	r0, [r3, #392]	; 0x188
    add4:	uxth	r0, r0
    add6:	orr.w	r0, r0, #240	; 0xf0
    adda:	strh.w	r0, [r3, #392]	; 0x188
    adde:	add.w	r0, r1, r1, lsl #1
    ade2:	ldr	r3, [pc, #344]	; (af3c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    ade4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ade6:	movs	r5, #0
    ade8:	lsls	r0, r0, #5
    adea:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    adec:	cmp	r1, #4
    adee:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    adf0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    adf2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    adf6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    adf8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    adfa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    adfc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    adfe:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ae00:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ae02:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ae04:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ae06:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ae08:	bne.n	adde <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae0a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ae0e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ae12:	ldr	r3, [pc, #300]	; (af40 <pwm_init+0x2a8>)
    ae14:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae18:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ae1a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae1c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ae20:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae22:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae26:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae2a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ae2e:	ldrh.w	r0, [r4, #392]	; 0x188
    ae32:	uxth	r0, r0
    ae34:	orr.w	r0, r0, #3840	; 0xf00
    ae38:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ae3c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ae40:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ae44:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ae48:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ae4c:	ldrh.w	r0, [r3, #392]	; 0x188
    ae50:	uxth	r0, r0
    ae52:	orr.w	r0, r0, #240	; 0xf0
    ae56:	strh.w	r0, [r3, #392]	; 0x188
    ae5a:	add.w	r0, r1, r1, lsl #1
    ae5e:	ldr	r3, [pc, #224]	; (af40 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    ae60:	adds	r1, #1
    ae62:	lsls	r0, r0, #5
    ae64:	mov	r4, r3
    ae66:	cmp	r1, #4
    ae68:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae6a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae6c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ae70:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ae72:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ae74:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ae76:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ae78:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    ae7a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ae7c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ae7e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ae80:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ae82:	bne.n	ae5a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae84:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ae88:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ae8a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ae8c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae90:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ae92:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ae96:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ae98:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae9c:	orrs	r3, r7
    ae9e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    aea2:	ldrh.w	r3, [r4, #392]	; 0x188
    aea6:	uxth	r3, r3
    aea8:	orr.w	r3, r3, #3840	; 0xf00
    aeac:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    aeb0:	lsls	r0, r2, #5
    aeb2:	ldr	r3, [pc, #144]	; (af44 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aeb4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    aeb6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aeb8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    aeba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    aebc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    aebe:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    aec0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    aec2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    aec6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    aec8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    aeca:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aecc:	bne.n	aeb0 <pwm_init+0x218>
    aece:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    aed0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    aed2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    aed6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    aeda:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    aedc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    aee0:	lsls	r0, r2, #5
    aee2:	ldr	r3, [pc, #100]	; (af48 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aee4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    aee6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aee8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    aeea:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    aeec:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    aeee:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    aef0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    aef2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    aef4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    aef6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    aef8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aefa:	bne.n	aee0 <pwm_init+0x248>
    aefc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    aefe:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    af00:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    af04:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    af08:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    af0a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    af0e:	lsls	r0, r2, #5
    af10:	ldr	r3, [pc, #56]	; (af4c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    af12:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    af14:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    af16:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    af18:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    af1a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    af1c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    af1e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    af20:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    af22:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    af24:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    af26:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    af28:	bne.n	af0e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    af2a:	pop	{r4, r5, r6, r7, pc}
    af2c:	.word	0x400fc000
    af30:	.word	0x403dc000
    af34:	.word	0xfc030000
    af38:	.word	0x403e0000
    af3c:	.word	0x403e4000
    af40:	.word	0x403e8000
    af44:	.word	0x401dc000
    af48:	.word	0x401e0000
    af4c:	.word	0x401e4000

0000af50 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    af50:	ldr	r2, [pc, #72]	; (af9c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    af52:	ldr	r3, [pc, #76]	; (afa0 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    af54:	ldr.w	r0, [r2, #544]	; 0x220
    af58:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    af5c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    af5e:	push	{r4, lr}
    af60:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    af62:	bhi.n	af6a <usb_init_serialnumber+0x1a>
    af64:	add.w	r0, r0, r0, lsl #2
    af68:	lsls	r0, r0, #1
    af6a:	ldr	r4, [pc, #56]	; (afa4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    af6c:	add	r1, sp, #4
    af6e:	movs	r2, #10
    af70:	bl	b104 <ultoa>
    af74:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    af76:	movs	r3, #0
    af78:	mov	r0, r4
		char c = buf[i];
    af7a:	ldrb.w	r2, [r1], #1
    af7e:	adds	r3, #1
		if (!c) break;
    af80:	cbz	r2, af92 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    af82:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    af84:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    af88:	bne.n	af7a <usb_init_serialnumber+0x2a>
    af8a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    af8c:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    af8e:	add	sp, #16
    af90:	pop	{r4, pc}
    af92:	lsls	r3, r3, #1
    af94:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    af96:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    af98:	add	sp, #16
    af9a:	pop	{r4, pc}
    af9c:	.word	0x401f4400
    afa0:	.word	0x0098967f
    afa4:	.word	0x20000d48

0000afa8 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    afa8:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    afaa:	ldr	r3, [pc, #28]	; (afc8 <HardwareSerial::processSerialEvents()+0x20>)
    afac:	ldrb	r4, [r3, #0]
    afae:	cbz	r4, afc4 <HardwareSerial::processSerialEvents()+0x1c>
    afb0:	ldr	r5, [pc, #24]	; (afcc <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    afb2:	ldr.w	r3, [r5, #4]!
    afb6:	cmp	r3, #0
    afb8:	beq.n	afb2 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    afba:	blx	r3
			if (--handlers_still_to_process == 0) return;
    afbc:	subs	r3, r4, #1
    afbe:	ands.w	r4, r3, #255	; 0xff
    afc2:	bne.n	afb2 <HardwareSerial::processSerialEvents()+0xa>
    afc4:	pop	{r3, r4, r5, pc}
    afc6:	nop
    afc8:	.word	0x20015940
    afcc:	.word	0x20015920

0000afd0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    afd0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    afd2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    afd6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    afda:	bne.n	b0b8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    afdc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    afde:	bcc.n	b064 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    afe0:	ldr.w	r3, [r1], #4
    afe4:	str.w	r3, [r0], #4
    afe8:	ldr.w	r3, [r1], #4
    afec:	str.w	r3, [r0], #4
    aff0:	ldr.w	r3, [r1], #4
    aff4:	str.w	r3, [r0], #4
    aff8:	ldr.w	r3, [r1], #4
    affc:	str.w	r3, [r0], #4
    b000:	ldr.w	r3, [r1], #4
    b004:	str.w	r3, [r0], #4
    b008:	ldr.w	r3, [r1], #4
    b00c:	str.w	r3, [r0], #4
    b010:	ldr.w	r3, [r1], #4
    b014:	str.w	r3, [r0], #4
    b018:	ldr.w	r3, [r1], #4
    b01c:	str.w	r3, [r0], #4
    b020:	ldr.w	r3, [r1], #4
    b024:	str.w	r3, [r0], #4
    b028:	ldr.w	r3, [r1], #4
    b02c:	str.w	r3, [r0], #4
    b030:	ldr.w	r3, [r1], #4
    b034:	str.w	r3, [r0], #4
    b038:	ldr.w	r3, [r1], #4
    b03c:	str.w	r3, [r0], #4
    b040:	ldr.w	r3, [r1], #4
    b044:	str.w	r3, [r0], #4
    b048:	ldr.w	r3, [r1], #4
    b04c:	str.w	r3, [r0], #4
    b050:	ldr.w	r3, [r1], #4
    b054:	str.w	r3, [r0], #4
    b058:	ldr.w	r3, [r1], #4
    b05c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b060:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    b062:	bcs.n	afe0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    b064:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    b066:	bcc.n	b08c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b068:	ldr.w	r3, [r1], #4
    b06c:	str.w	r3, [r0], #4
    b070:	ldr.w	r3, [r1], #4
    b074:	str.w	r3, [r0], #4
    b078:	ldr.w	r3, [r1], #4
    b07c:	str.w	r3, [r0], #4
    b080:	ldr.w	r3, [r1], #4
    b084:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    b088:	subs	r2, #16
	bhs	.Lmid_block_loop
    b08a:	bcs.n	b068 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    b08c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    b08e:	bcc.n	b09c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    b090:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    b094:	str.w	r3, [r0], #4
	subs	r2, #4
    b098:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    b09a:	bcs.n	b090 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    b09c:	adds	r2, #4
	beq	.Ldone
    b09e:	beq.n	b0b2 <memcpy+0xe2>

	lsls	r2, r2, #31
    b0a0:	lsls	r2, r2, #31
	itt ne
    b0a2:	itt	ne
	ldrbne  r3, [r1], #1
    b0a4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b0a8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    b0ac:	bcc.n	b0b2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    b0ae:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    b0b0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b0b2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b0b4:	bx	lr
    b0b6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    b0b8:	cmp	r2, #8
	blo	.Lbyte_copy
    b0ba:	bcc.n	b0e4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    b0bc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    b0be:	beq.n	afdc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    b0c0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    b0c4:	beq.n	afdc <memcpy+0xc>

	rsb	r3, #4
    b0c6:	rsb	r3, r3, #4
	subs	r2, r3
    b0ca:	subs	r2, r2, r3

	lsls    r3, r3, #31
    b0cc:	lsls	r3, r3, #31
	itt ne
    b0ce:	itt	ne
	ldrbne  r3, [r1], #1
    b0d0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b0d4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    b0d8:	bcc.n	afdc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    b0da:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    b0de:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    b0e2:	b.n	afdc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    b0e4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    b0e6:	bcc.n	b09c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    b0e8:	subs	r2, #1
	ldrb    r3, [r1], #1
    b0ea:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    b0ee:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    b0f2:	bcs.n	b0e8 <memcpy+0x118>

	ldrb	r3, [r1]
    b0f4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    b0f6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    b0f8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    b0fa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    b0fc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    b0fe:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b100:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b102:	bx	lr

0000b104 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b104:	push	{r4, r5, r6, r7}
    b106:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    b108:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b10a:	mov	r7, r6
    b10c:	b.n	b110 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b10e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b110:	udiv	r3, r0, r2
    b114:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b118:	add.w	r4, r0, #55	; 0x37
    b11c:	cmp	r0, #9
    b11e:	add.w	r0, r0, #48	; 0x30
    b122:	uxtb	r4, r4
    b124:	it	ls
    b126:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    b128:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b12a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    b12e:	cmp	r3, #0
    b130:	bne.n	b10e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b132:	adds	r2, r1, r5
    b134:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b136:	cbz	r5, b14c <ultoa+0x48>
    b138:	adds	r3, #1
		t = buf[j];
    b13a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    b13e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b140:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    b142:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b144:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b146:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b14a:	blt.n	b138 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b14c:	mov	r0, r1
    b14e:	pop	{r4, r5, r6, r7}
    b150:	bx	lr
    b152:	nop

0000b154 <__aeabi_atexit>:
    b154:	mov	r3, r1
    b156:	mov	r1, r0
    b158:	mov	r0, r3
    b15a:	b.w	b1d0 <__cxa_atexit>
    b15e:	nop

0000b160 <calloc>:
    b160:	ldr	r3, [pc, #8]	; (b16c <calloc+0xc>)
    b162:	mov	r2, r1
    b164:	mov	r1, r0
    b166:	ldr	r0, [r3, #0]
    b168:	b.w	b170 <_calloc_r>
    b16c:	.word	0x20001188

0000b170 <_calloc_r>:
    b170:	push	{r4, lr}
    b172:	mul.w	r1, r2, r1
    b176:	bl	b258 <_malloc_r>
    b17a:	mov	r4, r0
    b17c:	cbz	r0, b1b6 <_calloc_r+0x46>
    b17e:	ldr.w	r2, [r0, #-4]
    b182:	bic.w	r2, r2, #3
    b186:	subs	r2, #4
    b188:	cmp	r2, #36	; 0x24
    b18a:	bhi.n	b1be <_calloc_r+0x4e>
    b18c:	cmp	r2, #19
    b18e:	bls.n	b1ba <_calloc_r+0x4a>
    b190:	movs	r3, #0
    b192:	cmp	r2, #27
    b194:	str	r3, [r0, #0]
    b196:	str	r3, [r0, #4]
    b198:	bls.n	b1c8 <_calloc_r+0x58>
    b19a:	cmp	r2, #36	; 0x24
    b19c:	str	r3, [r0, #8]
    b19e:	str	r3, [r0, #12]
    b1a0:	iteee	ne
    b1a2:	addne.w	r2, r0, #16
    b1a6:	streq	r3, [r0, #16]
    b1a8:	streq	r3, [r0, #20]
    b1aa:	addeq.w	r2, r0, #24
    b1ae:	movs	r3, #0
    b1b0:	str	r3, [r2, #0]
    b1b2:	str	r3, [r2, #4]
    b1b4:	str	r3, [r2, #8]
    b1b6:	mov	r0, r4
    b1b8:	pop	{r4, pc}
    b1ba:	mov	r2, r0
    b1bc:	b.n	b1ae <_calloc_r+0x3e>
    b1be:	movs	r1, #0
    b1c0:	bl	b7c8 <memset>
    b1c4:	mov	r0, r4
    b1c6:	pop	{r4, pc}
    b1c8:	add.w	r2, r0, #8
    b1cc:	b.n	b1ae <_calloc_r+0x3e>
    b1ce:	nop

0000b1d0 <__cxa_atexit>:
    b1d0:	mov	r3, r2
    b1d2:	mov	r2, r1
    b1d4:	mov	r1, r0
    b1d6:	movs	r0, #2
    b1d8:	b.w	b890 <__register_exitproc>

0000b1dc <__errno>:
    b1dc:	ldr	r3, [pc, #4]	; (b1e4 <__errno+0x8>)
    b1de:	ldr	r0, [r3, #0]
    b1e0:	bx	lr
    b1e2:	nop
    b1e4:	.word	0x20001188

0000b1e8 <__libc_init_array>:
    b1e8:	push	{r4, r5, r6, lr}
    b1ea:	ldr	r6, [pc, #60]	; (b228 <__libc_init_array+0x40>)
    b1ec:	ldr	r5, [pc, #60]	; (b22c <__libc_init_array+0x44>)
    b1ee:	subs	r6, r6, r5
    b1f0:	asrs	r6, r6, #2
    b1f2:	it	ne
    b1f4:	movne	r4, #0
    b1f6:	beq.n	b204 <__libc_init_array+0x1c>
    b1f8:	adds	r4, #1
    b1fa:	ldr.w	r3, [r5], #4
    b1fe:	blx	r3
    b200:	cmp	r6, r4
    b202:	bne.n	b1f8 <__libc_init_array+0x10>
    b204:	ldr	r6, [pc, #40]	; (b230 <__libc_init_array+0x48>)
    b206:	ldr	r5, [pc, #44]	; (b234 <__libc_init_array+0x4c>)
    b208:	subs	r6, r6, r5
    b20a:	bl	bba0 <___init_veneer>
    b20e:	asrs	r6, r6, #2
    b210:	it	ne
    b212:	movne	r4, #0
    b214:	beq.n	b224 <__libc_init_array+0x3c>
    b216:	adds	r4, #1
    b218:	ldr.w	r3, [r5], #4
    b21c:	blx	r3
    b21e:	cmp	r6, r4
    b220:	bne.n	b216 <__libc_init_array+0x2e>
    b222:	pop	{r4, r5, r6, pc}
    b224:	pop	{r4, r5, r6, pc}
    b226:	nop
    b228:	.word	0x60001648
    b22c:	.word	0x60001648
    b230:	.word	0x60001654
    b234:	.word	0x60001648

0000b238 <malloc>:
    b238:	ldr	r3, [pc, #8]	; (b244 <malloc+0xc>)
    b23a:	mov	r1, r0
    b23c:	ldr	r0, [r3, #0]
    b23e:	b.w	b258 <_malloc_r>
    b242:	nop
    b244:	.word	0x20001188

0000b248 <free>:
    b248:	ldr	r3, [pc, #8]	; (b254 <free+0xc>)
    b24a:	mov	r1, r0
    b24c:	ldr	r0, [r3, #0]
    b24e:	b.w	b9d0 <_free_r>
    b252:	nop
    b254:	.word	0x20001188

0000b258 <_malloc_r>:
    b258:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b25c:	add.w	r5, r1, #11
    b260:	cmp	r5, #22
    b262:	sub	sp, #12
    b264:	mov	r6, r0
    b266:	bls.w	b3a8 <_malloc_r+0x150>
    b26a:	bics.w	r5, r5, #7
    b26e:	bmi.w	b3f0 <_malloc_r+0x198>
    b272:	cmp	r1, r5
    b274:	bhi.w	b3f0 <_malloc_r+0x198>
    b278:	bl	b864 <__malloc_lock>
    b27c:	cmp.w	r5, #504	; 0x1f8
    b280:	bcc.w	b7bc <_malloc_r+0x564>
    b284:	lsrs	r3, r5, #9
    b286:	beq.w	b3fe <_malloc_r+0x1a6>
    b28a:	cmp	r3, #4
    b28c:	bhi.w	b596 <_malloc_r+0x33e>
    b290:	lsrs	r0, r5, #6
    b292:	add.w	lr, r0, #57	; 0x39
    b296:	mov.w	r3, lr, lsl #1
    b29a:	adds	r0, #56	; 0x38
    b29c:	ldr	r7, [pc, #784]	; (b5b0 <_malloc_r+0x358>)
    b29e:	add.w	r3, r7, r3, lsl #2
    b2a2:	sub.w	r1, r3, #8
    b2a6:	ldr	r4, [r3, #4]
    b2a8:	cmp	r1, r4
    b2aa:	bne.n	b2bc <_malloc_r+0x64>
    b2ac:	b.n	b408 <_malloc_r+0x1b0>
    b2ae:	cmp	r2, #0
    b2b0:	bge.w	b40c <_malloc_r+0x1b4>
    b2b4:	ldr	r4, [r4, #12]
    b2b6:	cmp	r1, r4
    b2b8:	beq.w	b408 <_malloc_r+0x1b0>
    b2bc:	ldr	r3, [r4, #4]
    b2be:	bic.w	r3, r3, #3
    b2c2:	subs	r2, r3, r5
    b2c4:	cmp	r2, #15
    b2c6:	ble.n	b2ae <_malloc_r+0x56>
    b2c8:	ldr	r1, [pc, #740]	; (b5b0 <_malloc_r+0x358>)
    b2ca:	ldr	r4, [r7, #16]
    b2cc:	add.w	lr, r1, #8
    b2d0:	cmp	r4, lr
    b2d2:	beq.w	b63c <_malloc_r+0x3e4>
    b2d6:	ldr	r3, [r4, #4]
    b2d8:	bic.w	r3, r3, #3
    b2dc:	subs	r2, r3, r5
    b2de:	cmp	r2, #15
    b2e0:	bgt.w	b616 <_malloc_r+0x3be>
    b2e4:	cmp	r2, #0
    b2e6:	str.w	lr, [r1, #20]
    b2ea:	str.w	lr, [r1, #16]
    b2ee:	bge.w	b42e <_malloc_r+0x1d6>
    b2f2:	cmp.w	r3, #512	; 0x200
    b2f6:	bcs.w	b5c8 <_malloc_r+0x370>
    b2fa:	lsrs	r3, r3, #3
    b2fc:	add.w	ip, r3, #1
    b300:	movs	r2, #1
    b302:	asrs	r3, r3, #2
    b304:	lsl.w	r3, r2, r3
    b308:	ldr	r2, [r1, #4]
    b30a:	ldr.w	r8, [r1, ip, lsl #3]
    b30e:	str.w	r8, [r4, #8]
    b312:	add.w	r9, r1, ip, lsl #3
    b316:	orrs	r2, r3
    b318:	sub.w	r3, r9, #8
    b31c:	str	r3, [r4, #12]
    b31e:	str	r2, [r1, #4]
    b320:	str.w	r4, [r1, ip, lsl #3]
    b324:	str.w	r4, [r8, #12]
    b328:	asrs	r3, r0, #2
    b32a:	movs	r4, #1
    b32c:	lsls	r4, r3
    b32e:	cmp	r4, r2
    b330:	bhi.w	b448 <_malloc_r+0x1f0>
    b334:	tst	r4, r2
    b336:	bne.n	b346 <_malloc_r+0xee>
    b338:	bic.w	r0, r0, #3
    b33c:	lsls	r4, r4, #1
    b33e:	tst	r4, r2
    b340:	add.w	r0, r0, #4
    b344:	beq.n	b33c <_malloc_r+0xe4>
    b346:	add.w	r9, r7, r0, lsl #3
    b34a:	mov	ip, r9
    b34c:	mov	r8, r0
    b34e:	ldr.w	r1, [ip, #12]
    b352:	cmp	ip, r1
    b354:	bne.n	b366 <_malloc_r+0x10e>
    b356:	b.n	b640 <_malloc_r+0x3e8>
    b358:	cmp	r2, #0
    b35a:	bge.w	b660 <_malloc_r+0x408>
    b35e:	ldr	r1, [r1, #12]
    b360:	cmp	ip, r1
    b362:	beq.w	b640 <_malloc_r+0x3e8>
    b366:	ldr	r3, [r1, #4]
    b368:	bic.w	r3, r3, #3
    b36c:	subs	r2, r3, r5
    b36e:	cmp	r2, #15
    b370:	ble.n	b358 <_malloc_r+0x100>
    b372:	mov	r4, r1
    b374:	ldr.w	ip, [r1, #12]
    b378:	ldr.w	r8, [r4, #8]!
    b37c:	adds	r3, r1, r5
    b37e:	orr.w	r5, r5, #1
    b382:	str	r5, [r1, #4]
    b384:	orr.w	r1, r2, #1
    b388:	str.w	ip, [r8, #12]
    b38c:	mov	r0, r6
    b38e:	str.w	r8, [ip, #8]
    b392:	str	r3, [r7, #20]
    b394:	str	r3, [r7, #16]
    b396:	str.w	lr, [r3, #12]
    b39a:	str.w	lr, [r3, #8]
    b39e:	str	r1, [r3, #4]
    b3a0:	str	r2, [r3, r2]
    b3a2:	bl	b868 <__malloc_unlock>
    b3a6:	b.n	b3e8 <_malloc_r+0x190>
    b3a8:	cmp	r1, #16
    b3aa:	bhi.n	b3f0 <_malloc_r+0x198>
    b3ac:	bl	b864 <__malloc_lock>
    b3b0:	movs	r5, #16
    b3b2:	movs	r3, #6
    b3b4:	movs	r0, #2
    b3b6:	ldr	r7, [pc, #504]	; (b5b0 <_malloc_r+0x358>)
    b3b8:	add.w	r3, r7, r3, lsl #2
    b3bc:	sub.w	r2, r3, #8
    b3c0:	ldr	r4, [r3, #4]
    b3c2:	cmp	r4, r2
    b3c4:	beq.w	b652 <_malloc_r+0x3fa>
    b3c8:	ldr	r3, [r4, #4]
    b3ca:	ldr	r1, [r4, #12]
    b3cc:	ldr	r5, [r4, #8]
    b3ce:	bic.w	r3, r3, #3
    b3d2:	add	r3, r4
    b3d4:	mov	r0, r6
    b3d6:	ldr	r2, [r3, #4]
    b3d8:	str	r1, [r5, #12]
    b3da:	orr.w	r2, r2, #1
    b3de:	str	r5, [r1, #8]
    b3e0:	str	r2, [r3, #4]
    b3e2:	bl	b868 <__malloc_unlock>
    b3e6:	adds	r4, #8
    b3e8:	mov	r0, r4
    b3ea:	add	sp, #12
    b3ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3f0:	movs	r4, #0
    b3f2:	movs	r3, #12
    b3f4:	mov	r0, r4
    b3f6:	str	r3, [r6, #0]
    b3f8:	add	sp, #12
    b3fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3fe:	movs	r3, #128	; 0x80
    b400:	mov.w	lr, #64	; 0x40
    b404:	movs	r0, #63	; 0x3f
    b406:	b.n	b29c <_malloc_r+0x44>
    b408:	mov	r0, lr
    b40a:	b.n	b2c8 <_malloc_r+0x70>
    b40c:	add	r3, r4
    b40e:	ldr	r1, [r4, #12]
    b410:	ldr	r2, [r3, #4]
    b412:	ldr	r5, [r4, #8]
    b414:	orr.w	r2, r2, #1
    b418:	str	r1, [r5, #12]
    b41a:	mov	r0, r6
    b41c:	str	r5, [r1, #8]
    b41e:	str	r2, [r3, #4]
    b420:	bl	b868 <__malloc_unlock>
    b424:	adds	r4, #8
    b426:	mov	r0, r4
    b428:	add	sp, #12
    b42a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b42e:	add	r3, r4
    b430:	mov	r0, r6
    b432:	ldr	r2, [r3, #4]
    b434:	orr.w	r2, r2, #1
    b438:	str	r2, [r3, #4]
    b43a:	bl	b868 <__malloc_unlock>
    b43e:	adds	r4, #8
    b440:	mov	r0, r4
    b442:	add	sp, #12
    b444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b448:	ldr	r4, [r7, #8]
    b44a:	ldr	r3, [r4, #4]
    b44c:	bic.w	r8, r3, #3
    b450:	cmp	r8, r5
    b452:	bcc.n	b45e <_malloc_r+0x206>
    b454:	rsb	r3, r5, r8
    b458:	cmp	r3, #15
    b45a:	bgt.w	b576 <_malloc_r+0x31e>
    b45e:	ldr	r3, [pc, #340]	; (b5b4 <_malloc_r+0x35c>)
    b460:	ldr.w	r9, [pc, #352]	; b5c4 <_malloc_r+0x36c>
    b464:	ldr	r2, [r3, #0]
    b466:	ldr.w	r3, [r9]
    b46a:	adds	r3, #1
    b46c:	add	r2, r5
    b46e:	add.w	sl, r4, r8
    b472:	beq.w	b736 <_malloc_r+0x4de>
    b476:	add.w	r2, r2, #4096	; 0x1000
    b47a:	adds	r2, #15
    b47c:	bic.w	r2, r2, #4080	; 0xff0
    b480:	bic.w	r2, r2, #15
    b484:	mov	r1, r2
    b486:	mov	r0, r6
    b488:	str	r2, [sp, #4]
    b48a:	bl	b86c <_sbrk_r>
    b48e:	cmp.w	r0, #4294967295
    b492:	mov	fp, r0
    b494:	ldr	r2, [sp, #4]
    b496:	beq.w	b74a <_malloc_r+0x4f2>
    b49a:	cmp	sl, r0
    b49c:	bhi.w	b698 <_malloc_r+0x440>
    b4a0:	ldr	r3, [pc, #276]	; (b5b8 <_malloc_r+0x360>)
    b4a2:	ldr	r1, [r3, #0]
    b4a4:	cmp	sl, fp
    b4a6:	add	r1, r2
    b4a8:	str	r1, [r3, #0]
    b4aa:	beq.w	b754 <_malloc_r+0x4fc>
    b4ae:	ldr.w	r0, [r9]
    b4b2:	ldr.w	lr, [pc, #272]	; b5c4 <_malloc_r+0x36c>
    b4b6:	adds	r0, #1
    b4b8:	ittet	ne
    b4ba:	rsbne	sl, sl, fp
    b4be:	addne	r1, sl
    b4c0:	streq.w	fp, [lr]
    b4c4:	strne	r1, [r3, #0]
    b4c6:	ands.w	r1, fp, #7
    b4ca:	beq.w	b6fc <_malloc_r+0x4a4>
    b4ce:	rsb	r0, r1, #8
    b4d2:	rsb	r1, r1, #4096	; 0x1000
    b4d6:	add	fp, r0
    b4d8:	adds	r1, #8
    b4da:	add	r2, fp
    b4dc:	ubfx	r2, r2, #0, #12
    b4e0:	rsb	r9, r2, r1
    b4e4:	mov	r1, r9
    b4e6:	mov	r0, r6
    b4e8:	str	r3, [sp, #4]
    b4ea:	bl	b86c <_sbrk_r>
    b4ee:	adds	r3, r0, #1
    b4f0:	ldr	r3, [sp, #4]
    b4f2:	beq.w	b774 <_malloc_r+0x51c>
    b4f6:	rsb	r2, fp, r0
    b4fa:	add	r2, r9
    b4fc:	orr.w	r2, r2, #1
    b500:	ldr	r1, [r3, #0]
    b502:	str.w	fp, [r7, #8]
    b506:	add	r1, r9
    b508:	cmp	r4, r7
    b50a:	str.w	r2, [fp, #4]
    b50e:	str	r1, [r3, #0]
    b510:	ldr.w	r9, [pc, #164]	; b5b8 <_malloc_r+0x360>
    b514:	beq.n	b544 <_malloc_r+0x2ec>
    b516:	cmp.w	r8, #15
    b51a:	bls.w	b718 <_malloc_r+0x4c0>
    b51e:	ldr	r2, [r4, #4]
    b520:	sub.w	r3, r8, #12
    b524:	bic.w	r3, r3, #7
    b528:	adds	r0, r4, r3
    b52a:	and.w	r2, r2, #1
    b52e:	mov.w	lr, #5
    b532:	orrs	r2, r3
    b534:	cmp	r3, #15
    b536:	str	r2, [r4, #4]
    b538:	str.w	lr, [r0, #4]
    b53c:	str.w	lr, [r0, #8]
    b540:	bhi.w	b77c <_malloc_r+0x524>
    b544:	ldr	r3, [pc, #116]	; (b5bc <_malloc_r+0x364>)
    b546:	ldr	r4, [r7, #8]
    b548:	ldr	r2, [r3, #0]
    b54a:	cmp	r1, r2
    b54c:	it	hi
    b54e:	strhi	r1, [r3, #0]
    b550:	ldr	r3, [pc, #108]	; (b5c0 <_malloc_r+0x368>)
    b552:	ldr	r2, [r3, #0]
    b554:	cmp	r1, r2
    b556:	ldr	r2, [r4, #4]
    b558:	it	hi
    b55a:	strhi	r1, [r3, #0]
    b55c:	bic.w	r2, r2, #3
    b560:	cmp	r5, r2
    b562:	sub.w	r3, r2, r5
    b566:	bhi.n	b56c <_malloc_r+0x314>
    b568:	cmp	r3, #15
    b56a:	bgt.n	b576 <_malloc_r+0x31e>
    b56c:	mov	r0, r6
    b56e:	bl	b868 <__malloc_unlock>
    b572:	movs	r4, #0
    b574:	b.n	b3e8 <_malloc_r+0x190>
    b576:	adds	r2, r4, r5
    b578:	orr.w	r3, r3, #1
    b57c:	orr.w	r5, r5, #1
    b580:	str	r5, [r4, #4]
    b582:	mov	r0, r6
    b584:	str	r2, [r7, #8]
    b586:	str	r3, [r2, #4]
    b588:	bl	b868 <__malloc_unlock>
    b58c:	adds	r4, #8
    b58e:	mov	r0, r4
    b590:	add	sp, #12
    b592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b596:	cmp	r3, #20
    b598:	bls.n	b67e <_malloc_r+0x426>
    b59a:	cmp	r3, #84	; 0x54
    b59c:	bhi.w	b6e8 <_malloc_r+0x490>
    b5a0:	lsrs	r0, r5, #12
    b5a2:	add.w	lr, r0, #111	; 0x6f
    b5a6:	mov.w	r3, lr, lsl #1
    b5aa:	adds	r0, #110	; 0x6e
    b5ac:	b.n	b29c <_malloc_r+0x44>
    b5ae:	nop
    b5b0:	.word	0x2000118c
    b5b4:	.word	0x2001594c
    b5b8:	.word	0x20015950
    b5bc:	.word	0x20015948
    b5c0:	.word	0x20015944
    b5c4:	.word	0x20001598
    b5c8:	lsrs	r2, r3, #9
    b5ca:	cmp	r2, #4
    b5cc:	bls.n	b68c <_malloc_r+0x434>
    b5ce:	cmp	r2, #20
    b5d0:	bhi.w	b73a <_malloc_r+0x4e2>
    b5d4:	add.w	r1, r2, #92	; 0x5c
    b5d8:	lsls	r1, r1, #1
    b5da:	adds	r2, #91	; 0x5b
    b5dc:	add.w	ip, r7, r1, lsl #2
    b5e0:	ldr.w	r1, [r7, r1, lsl #2]
    b5e4:	ldr.w	r8, [pc, #476]	; b7c4 <_malloc_r+0x56c>
    b5e8:	sub.w	ip, ip, #8
    b5ec:	cmp	ip, r1
    b5ee:	beq.w	b702 <_malloc_r+0x4aa>
    b5f2:	ldr	r2, [r1, #4]
    b5f4:	bic.w	r2, r2, #3
    b5f8:	cmp	r3, r2
    b5fa:	bcs.n	b602 <_malloc_r+0x3aa>
    b5fc:	ldr	r1, [r1, #8]
    b5fe:	cmp	ip, r1
    b600:	bne.n	b5f2 <_malloc_r+0x39a>
    b602:	ldr.w	ip, [r1, #12]
    b606:	ldr	r2, [r7, #4]
    b608:	str.w	ip, [r4, #12]
    b60c:	str	r1, [r4, #8]
    b60e:	str.w	r4, [ip, #8]
    b612:	str	r4, [r1, #12]
    b614:	b.n	b328 <_malloc_r+0xd0>
    b616:	adds	r3, r4, r5
    b618:	orr.w	r7, r2, #1
    b61c:	orr.w	r5, r5, #1
    b620:	str	r5, [r4, #4]
    b622:	mov	r0, r6
    b624:	str	r3, [r1, #20]
    b626:	str	r3, [r1, #16]
    b628:	str.w	lr, [r3, #12]
    b62c:	str.w	lr, [r3, #8]
    b630:	str	r7, [r3, #4]
    b632:	str	r2, [r3, r2]
    b634:	adds	r4, #8
    b636:	bl	b868 <__malloc_unlock>
    b63a:	b.n	b3e8 <_malloc_r+0x190>
    b63c:	ldr	r2, [r1, #4]
    b63e:	b.n	b328 <_malloc_r+0xd0>
    b640:	add.w	r8, r8, #1
    b644:	tst.w	r8, #3
    b648:	add.w	ip, ip, #8
    b64c:	bne.w	b34e <_malloc_r+0xf6>
    b650:	b.n	b6b4 <_malloc_r+0x45c>
    b652:	ldr	r4, [r3, #12]
    b654:	cmp	r3, r4
    b656:	it	eq
    b658:	addeq	r0, #2
    b65a:	beq.w	b2c8 <_malloc_r+0x70>
    b65e:	b.n	b3c8 <_malloc_r+0x170>
    b660:	add	r3, r1
    b662:	mov	r4, r1
    b664:	ldr	r2, [r3, #4]
    b666:	ldr	r1, [r1, #12]
    b668:	ldr.w	r5, [r4, #8]!
    b66c:	orr.w	r2, r2, #1
    b670:	str	r2, [r3, #4]
    b672:	mov	r0, r6
    b674:	str	r1, [r5, #12]
    b676:	str	r5, [r1, #8]
    b678:	bl	b868 <__malloc_unlock>
    b67c:	b.n	b3e8 <_malloc_r+0x190>
    b67e:	add.w	lr, r3, #92	; 0x5c
    b682:	add.w	r0, r3, #91	; 0x5b
    b686:	mov.w	r3, lr, lsl #1
    b68a:	b.n	b29c <_malloc_r+0x44>
    b68c:	lsrs	r2, r3, #6
    b68e:	add.w	r1, r2, #57	; 0x39
    b692:	lsls	r1, r1, #1
    b694:	adds	r2, #56	; 0x38
    b696:	b.n	b5dc <_malloc_r+0x384>
    b698:	cmp	r4, r7
    b69a:	ldr	r3, [pc, #296]	; (b7c4 <_malloc_r+0x56c>)
    b69c:	beq.w	b4a0 <_malloc_r+0x248>
    b6a0:	ldr	r4, [r3, #8]
    b6a2:	ldr	r2, [r4, #4]
    b6a4:	bic.w	r2, r2, #3
    b6a8:	b.n	b560 <_malloc_r+0x308>
    b6aa:	ldr.w	r3, [r9], #-8
    b6ae:	cmp	r9, r3
    b6b0:	bne.w	b7b8 <_malloc_r+0x560>
    b6b4:	tst.w	r0, #3
    b6b8:	add.w	r0, r0, #4294967295
    b6bc:	bne.n	b6aa <_malloc_r+0x452>
    b6be:	ldr	r3, [r7, #4]
    b6c0:	bic.w	r3, r3, r4
    b6c4:	str	r3, [r7, #4]
    b6c6:	lsls	r4, r4, #1
    b6c8:	cmp	r4, r3
    b6ca:	bhi.w	b448 <_malloc_r+0x1f0>
    b6ce:	cmp	r4, #0
    b6d0:	beq.w	b448 <_malloc_r+0x1f0>
    b6d4:	tst	r4, r3
    b6d6:	mov	r0, r8
    b6d8:	bne.w	b346 <_malloc_r+0xee>
    b6dc:	lsls	r4, r4, #1
    b6de:	tst	r4, r3
    b6e0:	add.w	r0, r0, #4
    b6e4:	beq.n	b6dc <_malloc_r+0x484>
    b6e6:	b.n	b346 <_malloc_r+0xee>
    b6e8:	cmp.w	r3, #340	; 0x154
    b6ec:	bhi.n	b720 <_malloc_r+0x4c8>
    b6ee:	lsrs	r0, r5, #15
    b6f0:	add.w	lr, r0, #120	; 0x78
    b6f4:	mov.w	r3, lr, lsl #1
    b6f8:	adds	r0, #119	; 0x77
    b6fa:	b.n	b29c <_malloc_r+0x44>
    b6fc:	mov.w	r1, #4096	; 0x1000
    b700:	b.n	b4da <_malloc_r+0x282>
    b702:	movs	r1, #1
    b704:	ldr.w	r3, [r8, #4]
    b708:	asrs	r2, r2, #2
    b70a:	lsl.w	r2, r1, r2
    b70e:	orrs	r2, r3
    b710:	str.w	r2, [r8, #4]
    b714:	mov	r1, ip
    b716:	b.n	b608 <_malloc_r+0x3b0>
    b718:	movs	r3, #1
    b71a:	str.w	r3, [fp, #4]
    b71e:	b.n	b56c <_malloc_r+0x314>
    b720:	movw	r2, #1364	; 0x554
    b724:	cmp	r3, r2
    b726:	bhi.n	b76a <_malloc_r+0x512>
    b728:	lsrs	r0, r5, #18
    b72a:	add.w	lr, r0, #125	; 0x7d
    b72e:	mov.w	r3, lr, lsl #1
    b732:	adds	r0, #124	; 0x7c
    b734:	b.n	b29c <_malloc_r+0x44>
    b736:	adds	r2, #16
    b738:	b.n	b484 <_malloc_r+0x22c>
    b73a:	cmp	r2, #84	; 0x54
    b73c:	bhi.n	b78c <_malloc_r+0x534>
    b73e:	lsrs	r2, r3, #12
    b740:	add.w	r1, r2, #111	; 0x6f
    b744:	lsls	r1, r1, #1
    b746:	adds	r2, #110	; 0x6e
    b748:	b.n	b5dc <_malloc_r+0x384>
    b74a:	ldr	r4, [r7, #8]
    b74c:	ldr	r2, [r4, #4]
    b74e:	bic.w	r2, r2, #3
    b752:	b.n	b560 <_malloc_r+0x308>
    b754:	ubfx	r0, sl, #0, #12
    b758:	cmp	r0, #0
    b75a:	bne.w	b4ae <_malloc_r+0x256>
    b75e:	add	r2, r8
    b760:	ldr	r3, [r7, #8]
    b762:	orr.w	r2, r2, #1
    b766:	str	r2, [r3, #4]
    b768:	b.n	b544 <_malloc_r+0x2ec>
    b76a:	movs	r3, #254	; 0xfe
    b76c:	mov.w	lr, #127	; 0x7f
    b770:	movs	r0, #126	; 0x7e
    b772:	b.n	b29c <_malloc_r+0x44>
    b774:	movs	r2, #1
    b776:	mov.w	r9, #0
    b77a:	b.n	b500 <_malloc_r+0x2a8>
    b77c:	add.w	r1, r4, #8
    b780:	mov	r0, r6
    b782:	bl	b9d0 <_free_r>
    b786:	ldr.w	r1, [r9]
    b78a:	b.n	b544 <_malloc_r+0x2ec>
    b78c:	cmp.w	r2, #340	; 0x154
    b790:	bhi.n	b79e <_malloc_r+0x546>
    b792:	lsrs	r2, r3, #15
    b794:	add.w	r1, r2, #120	; 0x78
    b798:	lsls	r1, r1, #1
    b79a:	adds	r2, #119	; 0x77
    b79c:	b.n	b5dc <_malloc_r+0x384>
    b79e:	movw	r1, #1364	; 0x554
    b7a2:	cmp	r2, r1
    b7a4:	bhi.n	b7b2 <_malloc_r+0x55a>
    b7a6:	lsrs	r2, r3, #18
    b7a8:	add.w	r1, r2, #125	; 0x7d
    b7ac:	lsls	r1, r1, #1
    b7ae:	adds	r2, #124	; 0x7c
    b7b0:	b.n	b5dc <_malloc_r+0x384>
    b7b2:	movs	r1, #254	; 0xfe
    b7b4:	movs	r2, #126	; 0x7e
    b7b6:	b.n	b5dc <_malloc_r+0x384>
    b7b8:	ldr	r3, [r7, #4]
    b7ba:	b.n	b6c6 <_malloc_r+0x46e>
    b7bc:	lsrs	r0, r5, #3
    b7be:	adds	r3, r0, #1
    b7c0:	lsls	r3, r3, #1
    b7c2:	b.n	b3b6 <_malloc_r+0x15e>
    b7c4:	.word	0x2000118c

0000b7c8 <memset>:
    b7c8:	push	{r4, r5, r6}
    b7ca:	lsls	r4, r0, #30
    b7cc:	beq.n	b85c <memset+0x94>
    b7ce:	subs	r4, r2, #1
    b7d0:	cmp	r2, #0
    b7d2:	beq.n	b858 <memset+0x90>
    b7d4:	uxtb	r5, r1
    b7d6:	mov	r3, r0
    b7d8:	b.n	b7e0 <memset+0x18>
    b7da:	subs	r2, r4, #1
    b7dc:	cbz	r4, b858 <memset+0x90>
    b7de:	mov	r4, r2
    b7e0:	strb.w	r5, [r3], #1
    b7e4:	lsls	r2, r3, #30
    b7e6:	bne.n	b7da <memset+0x12>
    b7e8:	cmp	r4, #3
    b7ea:	bls.n	b84a <memset+0x82>
    b7ec:	uxtb	r5, r1
    b7ee:	orr.w	r5, r5, r5, lsl #8
    b7f2:	cmp	r4, #15
    b7f4:	orr.w	r5, r5, r5, lsl #16
    b7f8:	bls.n	b82e <memset+0x66>
    b7fa:	add.w	r2, r3, #16
    b7fe:	mov	r6, r4
    b800:	subs	r6, #16
    b802:	cmp	r6, #15
    b804:	str.w	r5, [r2, #-16]
    b808:	str.w	r5, [r2, #-12]
    b80c:	str.w	r5, [r2, #-8]
    b810:	str.w	r5, [r2, #-4]
    b814:	add.w	r2, r2, #16
    b818:	bhi.n	b800 <memset+0x38>
    b81a:	sub.w	r2, r4, #16
    b81e:	bic.w	r2, r2, #15
    b822:	and.w	r4, r4, #15
    b826:	adds	r2, #16
    b828:	cmp	r4, #3
    b82a:	add	r3, r2
    b82c:	bls.n	b84a <memset+0x82>
    b82e:	mov	r6, r3
    b830:	mov	r2, r4
    b832:	subs	r2, #4
    b834:	cmp	r2, #3
    b836:	str.w	r5, [r6], #4
    b83a:	bhi.n	b832 <memset+0x6a>
    b83c:	subs	r2, r4, #4
    b83e:	bic.w	r2, r2, #3
    b842:	adds	r2, #4
    b844:	add	r3, r2
    b846:	and.w	r4, r4, #3
    b84a:	cbz	r4, b858 <memset+0x90>
    b84c:	uxtb	r1, r1
    b84e:	add	r4, r3
    b850:	strb.w	r1, [r3], #1
    b854:	cmp	r3, r4
    b856:	bne.n	b850 <memset+0x88>
    b858:	pop	{r4, r5, r6}
    b85a:	bx	lr
    b85c:	mov	r4, r2
    b85e:	mov	r3, r0
    b860:	b.n	b7e8 <memset+0x20>
    b862:	nop

0000b864 <__malloc_lock>:
    b864:	bx	lr
    b866:	nop

0000b868 <__malloc_unlock>:
    b868:	bx	lr
    b86a:	nop

0000b86c <_sbrk_r>:
    b86c:	push	{r3, r4, r5, lr}
    b86e:	ldr	r4, [pc, #28]	; (b88c <_sbrk_r+0x20>)
    b870:	movs	r3, #0
    b872:	mov	r5, r0
    b874:	mov	r0, r1
    b876:	str	r3, [r4, #0]
    b878:	bl	9fa8 <_sbrk>
    b87c:	adds	r3, r0, #1
    b87e:	beq.n	b882 <_sbrk_r+0x16>
    b880:	pop	{r3, r4, r5, pc}
    b882:	ldr	r3, [r4, #0]
    b884:	cmp	r3, #0
    b886:	beq.n	b880 <_sbrk_r+0x14>
    b888:	str	r3, [r5, #0]
    b88a:	pop	{r3, r4, r5, pc}
    b88c:	.word	0x20017280

0000b890 <__register_exitproc>:
    b890:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b894:	ldr	r4, [pc, #148]	; (b92c <__register_exitproc+0x9c>)
    b896:	ldr	r5, [r4, #0]
    b898:	ldr.w	r4, [r5, #328]	; 0x148
    b89c:	mov	r6, r0
    b89e:	mov	r8, r1
    b8a0:	mov	sl, r2
    b8a2:	mov	r9, r3
    b8a4:	cbz	r4, b918 <__register_exitproc+0x88>
    b8a6:	ldr	r0, [r4, #4]
    b8a8:	cmp	r0, #31
    b8aa:	bgt.n	b8dc <__register_exitproc+0x4c>
    b8ac:	adds	r3, r0, #1
    b8ae:	cbz	r6, b8ce <__register_exitproc+0x3e>
    b8b0:	add.w	r5, r4, r0, lsl #2
    b8b4:	movs	r2, #1
    b8b6:	str.w	sl, [r5, #136]	; 0x88
    b8ba:	ldr.w	r1, [r4, #392]	; 0x188
    b8be:	lsls	r2, r0
    b8c0:	orrs	r1, r2
    b8c2:	cmp	r6, #2
    b8c4:	str.w	r1, [r4, #392]	; 0x188
    b8c8:	str.w	r9, [r5, #264]	; 0x108
    b8cc:	beq.n	b90c <__register_exitproc+0x7c>
    b8ce:	adds	r0, #2
    b8d0:	str	r3, [r4, #4]
    b8d2:	str.w	r8, [r4, r0, lsl #2]
    b8d6:	movs	r0, #0
    b8d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8dc:	ldr	r3, [pc, #80]	; (b930 <__register_exitproc+0xa0>)
    b8de:	cbz	r3, b922 <__register_exitproc+0x92>
    b8e0:	mov.w	r0, #400	; 0x190
    b8e4:	bl	b238 <malloc>
    b8e8:	mov	r4, r0
    b8ea:	cbz	r0, b922 <__register_exitproc+0x92>
    b8ec:	ldr.w	r3, [r5, #328]	; 0x148
    b8f0:	movs	r7, #0
    b8f2:	stmia.w	r0, {r3, r7}
    b8f6:	str.w	r4, [r5, #328]	; 0x148
    b8fa:	mov	r0, r7
    b8fc:	movs	r3, #1
    b8fe:	str.w	r7, [r4, #392]	; 0x188
    b902:	str.w	r7, [r4, #396]	; 0x18c
    b906:	cmp	r6, #0
    b908:	beq.n	b8ce <__register_exitproc+0x3e>
    b90a:	b.n	b8b0 <__register_exitproc+0x20>
    b90c:	ldr.w	r1, [r4, #396]	; 0x18c
    b910:	orrs	r2, r1
    b912:	str.w	r2, [r4, #396]	; 0x18c
    b916:	b.n	b8ce <__register_exitproc+0x3e>
    b918:	add.w	r4, r5, #332	; 0x14c
    b91c:	str.w	r4, [r5, #328]	; 0x148
    b920:	b.n	b8a6 <__register_exitproc+0x16>
    b922:	mov.w	r0, #4294967295
    b926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b92a:	nop
    b92c:	.word	0x20000740
    b930:	.word	0x0000b239

0000b934 <_malloc_trim_r>:
    b934:	push	{r3, r4, r5, r6, r7, lr}
    b936:	ldr	r7, [pc, #140]	; (b9c4 <_malloc_trim_r+0x90>)
    b938:	mov	r4, r1
    b93a:	mov	r6, r0
    b93c:	bl	b864 <__malloc_lock>
    b940:	ldr	r3, [r7, #8]
    b942:	ldr	r5, [r3, #4]
    b944:	bic.w	r5, r5, #3
    b948:	subs	r1, r5, r4
    b94a:	addw	r1, r1, #4079	; 0xfef
    b94e:	bic.w	r1, r1, #4080	; 0xff0
    b952:	bic.w	r1, r1, #15
    b956:	sub.w	r4, r1, #4096	; 0x1000
    b95a:	cmp.w	r4, #4096	; 0x1000
    b95e:	blt.n	b970 <_malloc_trim_r+0x3c>
    b960:	movs	r1, #0
    b962:	mov	r0, r6
    b964:	bl	b86c <_sbrk_r>
    b968:	ldr	r3, [r7, #8]
    b96a:	add	r3, r5
    b96c:	cmp	r0, r3
    b96e:	beq.n	b97a <_malloc_trim_r+0x46>
    b970:	mov	r0, r6
    b972:	bl	b868 <__malloc_unlock>
    b976:	movs	r0, #0
    b978:	pop	{r3, r4, r5, r6, r7, pc}
    b97a:	negs	r1, r4
    b97c:	mov	r0, r6
    b97e:	bl	b86c <_sbrk_r>
    b982:	adds	r0, #1
    b984:	beq.n	b9a2 <_malloc_trim_r+0x6e>
    b986:	ldr	r3, [pc, #64]	; (b9c8 <_malloc_trim_r+0x94>)
    b988:	ldr	r2, [r7, #8]
    b98a:	ldr	r1, [r3, #0]
    b98c:	subs	r5, r5, r4
    b98e:	orr.w	r5, r5, #1
    b992:	mov	r0, r6
    b994:	subs	r1, r1, r4
    b996:	str	r5, [r2, #4]
    b998:	str	r1, [r3, #0]
    b99a:	bl	b868 <__malloc_unlock>
    b99e:	movs	r0, #1
    b9a0:	pop	{r3, r4, r5, r6, r7, pc}
    b9a2:	movs	r1, #0
    b9a4:	mov	r0, r6
    b9a6:	bl	b86c <_sbrk_r>
    b9aa:	ldr	r2, [r7, #8]
    b9ac:	subs	r3, r0, r2
    b9ae:	cmp	r3, #15
    b9b0:	ble.n	b970 <_malloc_trim_r+0x3c>
    b9b2:	ldr	r4, [pc, #24]	; (b9cc <_malloc_trim_r+0x98>)
    b9b4:	ldr	r1, [pc, #16]	; (b9c8 <_malloc_trim_r+0x94>)
    b9b6:	ldr	r4, [r4, #0]
    b9b8:	orr.w	r3, r3, #1
    b9bc:	subs	r0, r0, r4
    b9be:	str	r3, [r2, #4]
    b9c0:	str	r0, [r1, #0]
    b9c2:	b.n	b970 <_malloc_trim_r+0x3c>
    b9c4:	.word	0x2000118c
    b9c8:	.word	0x20015950
    b9cc:	.word	0x20001598

0000b9d0 <_free_r>:
    b9d0:	cmp	r1, #0
    b9d2:	beq.n	ba60 <_free_r+0x90>
    b9d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9d8:	mov	r5, r1
    b9da:	mov	r8, r0
    b9dc:	bl	b864 <__malloc_lock>
    b9e0:	ldr.w	r7, [r5, #-4]
    b9e4:	ldr	r1, [pc, #424]	; (bb90 <_free_r+0x1c0>)
    b9e6:	bic.w	r3, r7, #1
    b9ea:	sub.w	r4, r5, #8
    b9ee:	adds	r2, r4, r3
    b9f0:	ldr	r6, [r1, #8]
    b9f2:	ldr	r0, [r2, #4]
    b9f4:	cmp	r2, r6
    b9f6:	bic.w	r0, r0, #3
    b9fa:	beq.n	bac2 <_free_r+0xf2>
    b9fc:	lsls	r6, r7, #31
    b9fe:	str	r0, [r2, #4]
    ba00:	bmi.n	ba1a <_free_r+0x4a>
    ba02:	ldr.w	r7, [r5, #-8]
    ba06:	subs	r4, r4, r7
    ba08:	add.w	lr, r1, #8
    ba0c:	ldr	r5, [r4, #8]
    ba0e:	cmp	r5, lr
    ba10:	add	r3, r7
    ba12:	beq.n	baf4 <_free_r+0x124>
    ba14:	ldr	r7, [r4, #12]
    ba16:	str	r7, [r5, #12]
    ba18:	str	r5, [r7, #8]
    ba1a:	adds	r5, r2, r0
    ba1c:	ldr	r5, [r5, #4]
    ba1e:	lsls	r5, r5, #31
    ba20:	bpl.n	baa8 <_free_r+0xd8>
    ba22:	orr.w	r2, r3, #1
    ba26:	str	r2, [r4, #4]
    ba28:	str	r3, [r4, r3]
    ba2a:	cmp.w	r3, #512	; 0x200
    ba2e:	bcs.n	ba62 <_free_r+0x92>
    ba30:	lsrs	r3, r3, #3
    ba32:	adds	r2, r3, #1
    ba34:	ldr	r5, [r1, #4]
    ba36:	ldr.w	r7, [r1, r2, lsl #3]
    ba3a:	str	r7, [r4, #8]
    ba3c:	movs	r0, #1
    ba3e:	asrs	r3, r3, #2
    ba40:	lsl.w	r3, r0, r3
    ba44:	add.w	r0, r1, r2, lsl #3
    ba48:	orrs	r5, r3
    ba4a:	subs	r0, #8
    ba4c:	str	r0, [r4, #12]
    ba4e:	str	r5, [r1, #4]
    ba50:	str.w	r4, [r1, r2, lsl #3]
    ba54:	str	r4, [r7, #12]
    ba56:	mov	r0, r8
    ba58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba5c:	b.w	b868 <__malloc_unlock>
    ba60:	bx	lr
    ba62:	lsrs	r2, r3, #9
    ba64:	cmp	r2, #4
    ba66:	bhi.n	bb10 <_free_r+0x140>
    ba68:	lsrs	r2, r3, #6
    ba6a:	add.w	r7, r2, #57	; 0x39
    ba6e:	lsls	r7, r7, #1
    ba70:	add.w	r5, r2, #56	; 0x38
    ba74:	add.w	r0, r1, r7, lsl #2
    ba78:	ldr.w	r2, [r1, r7, lsl #2]
    ba7c:	ldr	r1, [pc, #272]	; (bb90 <_free_r+0x1c0>)
    ba7e:	subs	r0, #8
    ba80:	cmp	r0, r2
    ba82:	beq.n	bb20 <_free_r+0x150>
    ba84:	ldr	r1, [r2, #4]
    ba86:	bic.w	r1, r1, #3
    ba8a:	cmp	r3, r1
    ba8c:	bcs.n	ba94 <_free_r+0xc4>
    ba8e:	ldr	r2, [r2, #8]
    ba90:	cmp	r0, r2
    ba92:	bne.n	ba84 <_free_r+0xb4>
    ba94:	ldr	r0, [r2, #12]
    ba96:	str	r0, [r4, #12]
    ba98:	str	r2, [r4, #8]
    ba9a:	str	r4, [r0, #8]
    ba9c:	str	r4, [r2, #12]
    ba9e:	mov	r0, r8
    baa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    baa4:	b.w	b868 <__malloc_unlock>
    baa8:	ldr	r5, [r2, #8]
    baaa:	ldr	r7, [pc, #232]	; (bb94 <_free_r+0x1c4>)
    baac:	cmp	r5, r7
    baae:	add	r3, r0
    bab0:	beq.n	bb32 <_free_r+0x162>
    bab2:	ldr	r0, [r2, #12]
    bab4:	str	r0, [r5, #12]
    bab6:	orr.w	r2, r3, #1
    baba:	str	r5, [r0, #8]
    babc:	str	r2, [r4, #4]
    babe:	str	r3, [r4, r3]
    bac0:	b.n	ba2a <_free_r+0x5a>
    bac2:	lsls	r7, r7, #31
    bac4:	add	r3, r0
    bac6:	bmi.n	bad8 <_free_r+0x108>
    bac8:	ldr.w	r2, [r5, #-8]
    bacc:	subs	r4, r4, r2
    bace:	add	r3, r2
    bad0:	ldr	r0, [r4, #8]
    bad2:	ldr	r2, [r4, #12]
    bad4:	str	r2, [r0, #12]
    bad6:	str	r0, [r2, #8]
    bad8:	ldr	r2, [pc, #188]	; (bb98 <_free_r+0x1c8>)
    bada:	ldr	r2, [r2, #0]
    badc:	orr.w	r0, r3, #1
    bae0:	cmp	r3, r2
    bae2:	str	r0, [r4, #4]
    bae4:	str	r4, [r1, #8]
    bae6:	bcc.n	ba56 <_free_r+0x86>
    bae8:	ldr	r3, [pc, #176]	; (bb9c <_free_r+0x1cc>)
    baea:	mov	r0, r8
    baec:	ldr	r1, [r3, #0]
    baee:	bl	b934 <_malloc_trim_r>
    baf2:	b.n	ba56 <_free_r+0x86>
    baf4:	adds	r1, r2, r0
    baf6:	ldr	r1, [r1, #4]
    baf8:	lsls	r1, r1, #31
    bafa:	bmi.n	bb86 <_free_r+0x1b6>
    bafc:	ldr	r1, [r2, #8]
    bafe:	ldr	r2, [r2, #12]
    bb00:	str	r2, [r1, #12]
    bb02:	add	r3, r0
    bb04:	orr.w	r0, r3, #1
    bb08:	str	r1, [r2, #8]
    bb0a:	str	r0, [r4, #4]
    bb0c:	str	r3, [r4, r3]
    bb0e:	b.n	ba56 <_free_r+0x86>
    bb10:	cmp	r2, #20
    bb12:	bhi.n	bb44 <_free_r+0x174>
    bb14:	add.w	r7, r2, #92	; 0x5c
    bb18:	lsls	r7, r7, #1
    bb1a:	add.w	r5, r2, #91	; 0x5b
    bb1e:	b.n	ba74 <_free_r+0xa4>
    bb20:	asrs	r2, r5, #2
    bb22:	ldr	r3, [r1, #4]
    bb24:	movs	r5, #1
    bb26:	lsl.w	r2, r5, r2
    bb2a:	orrs	r3, r2
    bb2c:	str	r3, [r1, #4]
    bb2e:	mov	r2, r0
    bb30:	b.n	ba96 <_free_r+0xc6>
    bb32:	orr.w	r2, r3, #1
    bb36:	str	r4, [r1, #20]
    bb38:	str	r4, [r1, #16]
    bb3a:	str	r5, [r4, #12]
    bb3c:	str	r5, [r4, #8]
    bb3e:	str	r2, [r4, #4]
    bb40:	str	r3, [r4, r3]
    bb42:	b.n	ba56 <_free_r+0x86>
    bb44:	cmp	r2, #84	; 0x54
    bb46:	bhi.n	bb56 <_free_r+0x186>
    bb48:	lsrs	r2, r3, #12
    bb4a:	add.w	r7, r2, #111	; 0x6f
    bb4e:	lsls	r7, r7, #1
    bb50:	add.w	r5, r2, #110	; 0x6e
    bb54:	b.n	ba74 <_free_r+0xa4>
    bb56:	cmp.w	r2, #340	; 0x154
    bb5a:	bhi.n	bb6a <_free_r+0x19a>
    bb5c:	lsrs	r2, r3, #15
    bb5e:	add.w	r7, r2, #120	; 0x78
    bb62:	lsls	r7, r7, #1
    bb64:	add.w	r5, r2, #119	; 0x77
    bb68:	b.n	ba74 <_free_r+0xa4>
    bb6a:	movw	r0, #1364	; 0x554
    bb6e:	cmp	r2, r0
    bb70:	bhi.n	bb80 <_free_r+0x1b0>
    bb72:	lsrs	r2, r3, #18
    bb74:	add.w	r7, r2, #125	; 0x7d
    bb78:	lsls	r7, r7, #1
    bb7a:	add.w	r5, r2, #124	; 0x7c
    bb7e:	b.n	ba74 <_free_r+0xa4>
    bb80:	movs	r7, #254	; 0xfe
    bb82:	movs	r5, #126	; 0x7e
    bb84:	b.n	ba74 <_free_r+0xa4>
    bb86:	orr.w	r2, r3, #1
    bb8a:	str	r2, [r4, #4]
    bb8c:	str	r3, [r4, r3]
    bb8e:	b.n	ba56 <_free_r+0x86>
    bb90:	.word	0x2000118c
    bb94:	.word	0x20001194
    bb98:	.word	0x20001594
    bb9c:	.word	0x2001594c

0000bba0 <___init_veneer>:
    bba0:	ldr.w	pc, [pc]	; bba4 <___init_veneer+0x4>
    bba4:	.word	0x600015e1
	...

Disassembly of section .fini:

0000bbb0 <_fini>:
    bbb0:	push	{r3, r4, r5, r6, r7, lr}
    bbb2:	nop
