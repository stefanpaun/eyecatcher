
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000dbb0 l    d  .fini	00000000 .fini
0000dbb4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001810 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000bf74 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000afc4 l     F .text.itcm	0000005c schedule_transfer
0000b020 l     F .text.itcm	00000030 run_callbacks
0000b050 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000b0e8 l     F .text.itcm	00000544 isr
20015ca8 l     O .bss	00000004 endpointN_notify_mask
20015cb0 l     O .bss	00000004 endpoint0_notify_mask
20015cb4 l     O .bss	00000001 usb_reboot_timer
20015cb8 l     O .bss	00000008 endpoint0_setupdata
20015cc0 l     O .bss	00000008 reply_buffer
20015cc8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20015cdc l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20015d00 l     O .bss	00000004 s_hotTemp
20015d04 l     O .bss	00000004 s_hot_ROOM
20015d08 l     O .bss	00000004 s_roomC_hotC
20015d0c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001810 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001814 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000007c l     F .text.itcm	00000164 getRGB(int, int, int, int*, int*, int*)
00000f5c l     F .text.itcm	00007554 _GLOBAL__sub_I_nextTime3
200009b8 l     O .data	000002a4 background_A
20000c5c l     O .data	000002a4 background_B
20004344 l     O .bss	000007ec mask_A
20004b30 l     O .bss	000007ec mask_B
20000000 l     O .data	00000400 dim_curve
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
0000a8c4 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Segment.cpp
00000000 l    df *ABS*	00000000 Colore.cpp
00000000 l    df *ABS*	00000000 Beam.cpp
00000000 l    df *ABS*	00000000 Neural.cpp
00000000 l    df *ABS*	00000000 BeamControl.cpp
00000000 l    df *ABS*	00000000 Color.cpp
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
0000a8d0 l     F .text.itcm	00000028 rx_event
0000a8f8 l     F .text.itcm	00000070 usb_serial_flush_callback
0000a968 l     F .text.itcm	0000015c usb_serial_write.part.1
20015364 l     O .bss	00000700 txbuffer
20015a64 l     O .bss	00000001 tx_noautoflush
20015a65 l     O .bss	00000001 tx_head
20015a68 l     O .bss	000000c0 rx_buffer
20015b28 l     O .bss	00000006 rx_index
20015b30 l     O .bss	00000006 rx_count
20015b40 l     O .bss	00000060 rx_transfer
20015ba0 l     O .bss	00000002 tx_available
20015bc0 l     O .bss	000000e0 tx_transfer
20015ca0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000b90c l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000f0c l     O .data	0000000a qualifier_descriptor
20000f30 l     O .data	00000043 config_descriptor
20000f74 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
20015cdd l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000bab4 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
20015ce0 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
200007d8 l     O .data	00000080 npio2_hw
20000858 l     O .data	00000108 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
20000960 l     O .data	00000010 init_jk
20000970 l     O .data	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000fd0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __loop_veneer
600015c0 l     F .text.progmem	00000008 __delay_veneer
600015c8 l     F .text.progmem	00000008 __setup_veneer
600015d0 l     F .text.progmem	00000008 __yield_veneer
600015d8 l     F .text.progmem	00000008 __memset_veneer
600015e0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015e8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015f0 l     F .text.progmem	00000008 __pwm_init_veneer
600015f8 l     F .text.progmem	00000008 __set_arm_clock_veneer
0000dba8 l     F .text.itcm	00000008 ___init_veneer
0000931c g     F .text.itcm	00000006 Beam::isActive()
0000abec g     F .text.itcm	00000014 usb_serial_available
000001e0 g     F .text.itcm	0000001c set_ledLib(int, unsigned char, unsigned char, unsigned char)
0000cef8 g     F .text.itcm	0000000e fabs
0000ba14  w    F .text.itcm	000000a0 yield
00009f60 g     F .text.itcm	00000080 Color::multiply(float)
00009198 g     F .text.itcm	00000010 Beam::isNeuralMode()
20015cac g     O .bss	00000004 usb_timer1_callback
20000f00 g     O .data	00000001 segAm
20000f18 g     O .data	00000018 usb_string_manufacturer_name_default
0000859c g     F .text.itcm	0000005a Segment::setFadeInOut(Color, Color, float, float)
20015d10 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000902c g     F .text.itcm	000000c0 Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)
00009018 g     F .text.itcm	00000014 Beam::Beam()
0000bd90 g     F .text.itcm	00000020 Print::println()
00000d00 g     F .text.itcm	000001d0 init_B()
0000bb44 g     F .text.itcm	00000014 random(long, long)
000097ec g     F .text.itcm	00000032 BeamControl::freeBeam()
00008ee4 g     F .text.itcm	0000008c Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())
0000a86c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000d86c g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
00009ad4 g     F .text.itcm	0000015e Color::add(Color)
00000b30 g     F .text.itcm	000001d0 init_A()
20000f08 g     O .data	00000004 F_CPU_ACTUAL
0000c340 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000935c g     F .text.itcm	000001dc Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)
0000bca4 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20015cf8 g     O .bss	00000001 EventResponder::runningFromYield
200152a0 g     O .bss	000000c4 Alarm
00009a68 g     F .text.itcm	00000024 Color::red()
0000d1e0 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
20015ce4 g     O .bss	00000004 EventResponder::firstInterrupt
0000b774 g     F .text.itcm	00000028 usb_transfer_status
00009880 g     F .text.itcm	00000030 Color::setHSB(unsigned int, unsigned char, unsigned char)
20000fba g     O .data	00000001 usb_enable_serial_event_processing
000086f0 g     F .text.itcm	0000016c Segment::move(float)
0000bd74  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200004c0 g     O .data	00000280 digital_pin_to_info_PGM
0000885c g     F .text.itcm	000000f2 Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))
200176c0 g     O .bss	00000004 errno
0000cf08 g     F .text.itcm	00000118 floor
0000dbb0 g       .text.itcm	00000000 _etext
0000a76c g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001810 g       .bss	00000000 _sbss
000001fc g     F .text.itcm	00000024 reset_ledLib()
0000a478 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
00008ee4 g     F .text.itcm	0000008c Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())
00009820 g     F .text.itcm	00000008 Color::Color()
60001610 g       *ABS*	00000000 _stextload
00000f24 g     F .text.itcm	00000038 loop
2000d26c g     O .bss	00001544 sat_automaton_B
2000fd68 g     O .bss	00000014 synapse_A
0000b62c g     F .text.itcm	00000064 usb_config_rx
0000bc3c g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000a524 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000c408 g     F .text.itcm	0000029c __ieee754_rem_pio2
20015ce8 g     O .bss	00000004 EventResponder::lastInterrupt
0000be30 g     F .text.itcm	00000134 memcpy
20015cd8 g     O .bss	00000004 systick_millis_count
20015cd0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
2000182c g     O .bss	0000007c seg
20000f18  w    O .data	00000018 usb_string_manufacturer_name
0000d23c g     F .text.itcm	00000010 malloc
00009190 g     F .text.itcm	00000008 Beam::arrive()
2000fd7c g     O .bss	00000014 synapse_B
0000bbd8  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
0000c6a8 g     F .text.itcm	00000120 __kernel_cos
00008fa8 g     F .text.itcm	00000066 Colore::update(bool, bool)
20015d38 g     O .bss	00000004 __malloc_top_pad
00000220 g     F .text.itcm	0000000c show_ledLib()
20017280 g     O .bss	00000004 systick_safe_read
000084b0 g     F .text.itcm	00000056 Segment::Segment(unsigned short, unsigned short)
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
200009b4 g     O .data	00000000 .hidden __dso_handle
0000a49c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000d870 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000ab7c g     F .text.itcm	0000004c usb_serial_getchar
20015d64 g     O .bss	00000008 usb_cdc_line_coding
0000b930 g     F .text.itcm	0000000a digitalWrite
20015cf0 g     O .bss	00000004 EventResponder::lastYield
20015d34 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b93c g     F .text.itcm	00000080 pinMode
0000ce48 g     F .text.itcm	000000b0 __kernel_sin
20280000 g       .bss	00000000 _heap_end
20015cf4 g     O .bss	00000004 EventResponder::firstYield
200009b0 g     O .data	00000004 _global_impure_ptr
00009e68 g     F .text.itcm	000000f8 Color::multiply(Color)
0000d1ec g     F .text.itcm	00000050 __libc_init_array
0000bf7c  w    F .text.itcm	0000008c HardFault_HandlerC
0000bd5c  w    F .text.itcm	00000004 usb_serial_class::clear()
0000c008 g     F .text.itcm	00000030 _sbrk
6000f1cc g       *ABS*	00000000 _sdataload
20015cfc g     O .bss	00000004 MillisTimer::listWaiting
20000fcc g     O .data	00000004 __brkval
20015ca1 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015a8 g     F .text.progmem	00000000 _init
0000aac4 g     F .text.itcm	00000002 usb_serial_reset
0000986c g     F .text.itcm	00000014 Color::setRGB(unsigned char, unsigned char, unsigned char)
00009fe0 g     F .text.itcm	00000270 Color::fade(Color, float)
0000c7c8 g     F .text.itcm	0000067c __kernel_rem_pio2
20017700 g       .bss	00000000 _ebss
0000d164 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
000086b4 g     F .text.itcm	0000003c Segment::updateBeams(float)
00009010 g     F .text.itcm	00000008 Colore::update()
20012818 g     O .bss	00001544 bg_automaton_A
0000a4d4 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
000097dc g     F .text.itcm	00000002 BeamControl::BeamControl()
00008644 g     F .text.itcm	00000070 Segment::setNNBeam(bool, float, unsigned char, float, Color, int)
000090ec g     F .text.itcm	00000050 Beam::move(float)
00000002 g       *ABS*	00000000 _itcm_block_count
20016000 g     O .bss	00000020 endpoint0_transfer_data
0000c088 g     F .text.itcm	000002b8 pwm_init
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000025c  w    F .text.itcm	000008d4 Screen::iterate_animation()
00008508 g     F .text.itcm	00000092 Segment::setStaticColor(Color)
0000a7bc g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00008950 g     F .text.itcm	00000594 Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))
00000000  w      *UND*	00000000 __deregister_frame_info
20016020 g     O .bss	00000020 endpoint0_transfer_ack
20015d6c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b728 g     F .text.itcm	00000028 usb_transmit
0000bd3c g     F .text.itcm	00000020 systick_isr
20000fbc g     O .data	00000010 Serial
20015d2c g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
000091a8 g     F .text.itcm	00000174 Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))
0000bd7c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000a250 g     F .text.itcm	0000006a Color::fade(Color, Color, float)
0000abc8 g     F .text.itcm	00000024 usb_serial_peekchar
0000ad38 g     F .text.itcm	0000028c set_arm_clock
20015cd4 g     O .bss	00000004 systick_cycle_count
20000fa4 g     O .data	00000016 usb_string_serial_number_default
0000d9d4 g     F .text.itcm	000001d0 _free_r
0000bd6c  w    F .text.itcm	00000004 usb_serial_class::flush()
20001808 g     O .data	00000004 __malloc_sbrk_base
0000bd64  w    F .text.itcm	00000004 usb_serial_class::read()
0000c368 g     F .text.itcm	000000a0 sin
0000b6f8 g     F .text.itcm	0000002e usb_prepare_transfer
2000fd08 g     O .bss	00000060 colore
0000bf64 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
20015ca4 g     O .bss	00000004 usb_timer0_callback
00009ab0 g     F .text.itcm	00000024 Color::blue()
0000bd84  w    F .text.itcm	0000000c serialEvent()
0000d894 g     F .text.itcm	000000a4 __register_exitproc
0000a86c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000ac00 g     F .text.itcm	0000003c usb_serial_flush_input
0000ac3c g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20015d3c g     O .bss	00000028 __malloc_current_mallinfo
0000a408 g     F .text.itcm	00000028 Color::saturation()
00009828 g     F .text.itcm	00000044 Color::Color(int, unsigned char, unsigned char, unsigned char)
2000fd90 g     O .bss	00001544 grow_automaton_A
0000977c g     F .text.itcm	0000005e Neural::update()
0000a3e0 g     F .text.itcm	00000028 Color::hue()
0000d1d4 g     F .text.itcm	0000000c __cxa_atexit
2000e7c4 g     O .bss	00001544 sat_automaton_A
0000bb3c g     F .text.itcm	00000008 random(unsigned long)
200007ac  w    O .data	00000028 vtable for usb_serial_class
0000862c g     F .text.itcm	00000014 Segment::getCurrentColor()
2000e7b0 g     O .bss	00000014 matrix_B
20015cec g     O .bss	00000004 MillisTimer::listActive
00008640 g     F .text.itcm	00000004 Segment::setBeamControl(BeamControl*)
200013fc g     O .data	00000408 __malloc_av_
0000accc g     F .text.itcm	0000006c usb_serial_flush_output
0000d868 g     F .text.itcm	00000002 __malloc_lock
20017400 g     O .bss	000002c0 _VectorsRam
0000d174 g     F .text.itcm	0000005e _calloc_r
0000d7cc g     F .text.itcm	0000009a memset
20015d30 g     O .bss	00000004 __malloc_max_total_mem
000098b0 g     F .text.itcm	000001b8 Color::HSBtoRGB(HSB*)
0000b9bc g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000d25c g     F .text.itcm	00000570 _malloc_r
0000bb58 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20004330 g     O .bss	00000014 matrix_A
0000b85c g     F .text.itcm	00000054 micros
0000d938 g     F .text.itcm	0000009c _malloc_trim_r
200018a8 g     O .bss	00001544 fg_automaton_A
20000fa0 g     O .data	00000004 string0
0000ac68 g     F .text.itcm	00000018 usb_serial_write
000084b0 g     F .text.itcm	00000056 Segment::Segment(unsigned short, unsigned short)
0000bd68  w    F .text.itcm	00000004 usb_serial_class::available()
00009324 g     F .text.itcm	00000038 Neural::Neural()
20017000 g     O .bss	00000280 endpoint_queue_head
20000f88  w    O .data	00000016 usb_string_product_name
0000d13c g     F .text.itcm	0000001a copysign
0000b79c g     F .text.itcm	000000c0 delay
0000dbb0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
000085f8 g     F .text.itcm	00000034 Segment::setPulsate(Color, float)
20013d5c g     O .bss	00001544 bg_automaton_B
200013f8 g     O .data	00000004 _impure_ptr
0000a2c0 g     F .text.itcm	00000120 Color::RGBtoHSB(RGB*)
0000d020 g     F .text.itcm	0000011c scalbn
60001600 g       .text.progmem	00000000 __preinit_array_end
0000a704 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000bb30 g     F .text.itcm	0000000c randomSeed(unsigned long)
00009648 g     F .text.itcm	00000134 Neural::arriveBeam(Beam*)
0000913c g     F .text.itcm	00000054 Beam::justArrived()
00000ed0 g     F .text.itcm	00000054 setup
20000740 g     O .data	0000006c usb_descriptor_list
200092a0 g     O .bss	00003f84 screen_B
200112d4 g     O .bss	00001544 grow_automaton_B
00009584 g     F .text.itcm	000000c4 Neural::neuronDischarge(Segment*, int)
20070000 g       .bss	00000000 _estack
0000ac80 g     F .text.itcm	0000004c usb_serial_write_buffer_free
20002dec g     O .bss	00001544 fg_automaton_B
2000531c g     O .bss	00003f84 screen_A
0000aac8 g     F .text.itcm	000000b4 usb_serial_configure
20001810 g       .data	00000000 _edata
00009c38 g     F .text.itcm	00000230 Color::addHDR(Color, float)
000097e0 g     F .text.itcm	0000000a BeamControl::begin(Beam*, unsigned short)
0000a740 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000bd70  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000c038 g     F .text.itcm	0000004e ultoa
2000d224 g     O .bss	00000048 beams
0000bbf4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001804 g     O .data	00000004 __malloc_trim_threshold
0000bd60  w    F .text.itcm	00000004 usb_serial_class::peek()
00008f70 g     F .text.itcm	00000038 Colore::calcDt()
0000022c g     F .text.itcm	00000030 get_ledLib(int)
60001600 g       .text.progmem	00000000 __init_array_start
00009538 g     F .text.itcm	0000004c Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)
0000b8b0 g     F .text.itcm	0000005c analogRead
20000f04 g     O .data	00000004 F_BUS_ACTUAL
0000a430 g     F .text.itcm	00000028 Color::brightness()
200004a4 g     O .data	0000001c pin_to_channel
000097dc g     F .text.itcm	00000002 BeamControl::BeamControl()
0000a740 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
00009018 g     F .text.itcm	00000014 Beam::Beam()
20000f88 g     O .data	00000016 usb_string_product_name_default
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00009820 g     F .text.itcm	00000008 Color::Color()
60001600 g       .text.progmem	00000000 __preinit_array_start
0000b750 g     F .text.itcm	00000024 usb_receive
00009828 g     F .text.itcm	00000044 Color::Color(int, unsigned char, unsigned char, unsigned char)
0000a458 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000a458 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
000109d0 g       *ABS*	00000000 _flashimagelen
0000d158 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000bc38 g     F .text.itcm	00000004 pendablesrvreq_isr
00009a8c g     F .text.itcm	00000024 Color::green()
0000bdb0 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b690 g     F .text.itcm	00000068 usb_config_tx
0000d24c g     F .text.itcm	00000010 free
20000fa4  w    O .data	00000016 usb_string_serial_number
00009324 g     F .text.itcm	00000038 Neural::Neural()



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015f8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015f0 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015e0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015c8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015b8 <__loop_veneer>
		yield();
600011da:	bl	600015d0 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000dbb0
600011f8:	.word	0x20000000
600011fc:	.word	0x6000f1cc
60001200:	.word	0x20001810
60001204:	.word	0x20001810
60001208:	.word	0x20017700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200173fc
60001214:	.word	0x0000bf65
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000bc39
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000bd3d
6000124c:	.word	0xe0001004
60001250:	.word	0x20015cd4
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x20015cd8
60001264:	.word	0x20017400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015e8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015c0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015d8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20017000
60001348:	.word	0x20017400
6000134c:	.word	0x0000b0e9
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x20015cdc

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x20015d08
60001598:	.word	0x20015d04
6000159c:	.word	0x20015d0c
600015a0:	.word	0x0fff0000
600015a4:	.word	0x20015d00

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__loop_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__loop_veneer+0x4>
600015bc:	.word	0x00000f25

600015c0 <__delay_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__delay_veneer+0x4>
600015c4:	.word	0x0000b79d

600015c8 <__setup_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__setup_veneer+0x4>
600015cc:	.word	0x00000ed1

600015d0 <__yield_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__yield_veneer+0x4>
600015d4:	.word	0x0000ba15

600015d8 <__memset_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__memset_veneer+0x4>
600015dc:	.word	0x0000d7cd

600015e0 <____libc_init_array_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <____libc_init_array_veneer+0x4>
600015e4:	.word	0x0000d1ed

600015e8 <__usb_init_serialnumber_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__usb_init_serialnumber_veneer+0x4>
600015ec:	.word	0x0000b9bd

600015f0 <__pwm_init_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__pwm_init_veneer+0x4>
600015f4:	.word	0x0000c089

600015f8 <__set_arm_clock_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__set_arm_clock_veneer+0x4>
600015fc:	.word	0x0000ad39

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x00000f5d
60001608:	.word	0x0000a8c5

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	adds	r0, r2, r0
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	blt.n	ffffffac <_flexram_bank_config+0x555554fd>
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      68:	.word	0x00000000
      6c:	adds	r4, r2, r0
      6e:	.short	0x2000
      70:	blt.n	ffffffdc <_flexram_bank_config+0x5555552d>
      72:	movs	r0, r0
      74:	.word	0x20001810
      78:	movs	r0, r0
	...

0000007c <getRGB(int, int, int, int*, int*, int*)>:
      7c:	.word	0xf1c1b5f0
      80:	lsls	r7, r7, #7
      82:	.short	0x4d55
      84:	ldr.w	r4, [r5, r1, lsl #2]
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	.word	0xd02f2cff
      8c:	ldr	r1, [pc, #332]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
  
  if(num >= 4){
      8e:	.short	0x17c6
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	ldr.w	r5, [r5, r2, lsl #2]
      94:	.word	0x2100fb81
      98:	mul.w	r2, r4, r5
    getRGB(hue, sat, bri, &r, &g, &b);
    (*synapse).setPixelColor(pixel, r, g, b);
    (*synapse).setPixelColor(pixel+1, r, g, b);
    (*synapse).setPixelColor(pixel+2, r, g, b);
    (*synapse).setPixelColor(pixel+3, r, g, b);
    (*synapse).setPixelColor(pixel+4, r, g, b);
      9c:	.word	0x12124401
      a0:	rsb	r1, r6, r1, asr #5
    (*synapse).show();
      a4:	.word	0xf2002905
    (*synapse).clear();
      a8:	strh	r3, [r2, #4]
      aa:	.short	0xe8df
      ac:	and.w	lr, r1, #536879104	; 0x20002000
    (*synapse).show();
      b0:	.word	0x037b6249

void send_pulse_full(Adafruit_NeoPixel * synapse, int hue){
  int r, g, b;
  int sat = 255;
  int bri = 255;
  for (int pixel = 0; pixel < NUM_LEDS_SYNAPSE; pixel++){
      b4:	ldr	r7, [pc, #292]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
      b6:	subs	r4, r5, r2
    (*synapse).show();
    (*synapse).clear();
    (*synapse).show();
  }

}
      b8:	.word	0xfb874629
      bc:	b.n	fffffac0 <_flexram_bank_config+0x55555011>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
      be:	.short	0x4405
      c0:	rsb	r6, r6, r5, asr #5
      c4:	rsb	r6, r6, r6, lsl #4
      c8:	sub.w	r0, r0, r6, lsl #2
      cc:	rsb	r0, r0, #60	; 0x3c
      d0:	.word	0xf000fb04
      d4:	smull	r4, r7, r7, r0
      d8:	.word	0x443817c5
      dc:	rsb	r0, r5, r0, asr #5
      e0:	adds	r5, r2, r0
    break;
    }
    *r = colors[0];
      e2:	str	r1, [r3, #0]
    *g = colors[1];
      e4:	ldr	r3, [sp, #20]
      e6:	str	r2, [r3, #0]
    *b = colors[2]; 
      e8:	ldr	r3, [sp, #24]
      ea:	str	r5, [r3, #0]
      ec:	pop	{r4, r5, r6, r7, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
      ee:	subs	r4, r5, r2
      f0:	.word	0x46294e3a
        colors[2] = base;
      f4:	mov	r5, r2
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
      f6:	.short	0xfb00
      f8:	bl	4808 <_GLOBAL__sub_I_nextTime3+0x38ac>
      fc:	.word	0x17c44600
     100:	add	r0, r6
     102:	rsb	r0, r4, r0, asr #5
     106:	.short	0x4402
        colors[2] = base;
    break;
     108:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     10a:	ldr	r7, [pc, #208]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
     10c:	.word	0x0e05ebc2
     110:	smull	r4, r1, r7, r0
        colors[1] = val;
        colors[2] = base;
    break;
     114:	mov	r4, r2
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     116:	add	r1, r0
     118:	.word	0x1661ebc6
     11c:	rsb	r6, r6, r6, lsl #4
     120:	.word	0x0086eba0
     124:	rsb	r0, r0, #60	; 0x3c
     128:	.word	0xf000fb0e
     12c:	smull	r1, r7, r7, r0
     130:	.word	0x443817c1
     134:	rsb	r0, r1, r0, asr #5
     138:	.word	0x462a1811
        colors[1] = val;
        colors[2] = base;
     13c:	mov	r5, r4
    break;
     13e:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     140:	.word	0xebc24f26
     144:	lsrs	r5, r0, #24
     146:	.short	0xfb87
     148:	asrs	r0, r0, #16
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
     14a:	.short	0x4611
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     14c:	add	r4, r0
     14e:	.short	0xebc6
     150:	asrs	r4, r4, #25
     152:	.short	0xebc6
     154:	asrs	r6, r0, #24
     156:	.short	0xeba0
     158:	lsls	r6, r0, #2
     15a:	.short	0xfb00
     15c:	bl	e86e <_etext+0xcbe>
     160:	bx	r0
     162:	.short	0x17c4
     164:	add	r0, r7
     166:	.short	0xebc4
     168:	asrs	r0, r4, #1
     16a:	.short	0x4410
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
     16c:	mov	r2, r5
        colors[2] = (((val-base)*(hue%60))/60)+base;
     16e:	.short	0x4605
    break;
     170:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     172:	.short	0x4f1a
     174:	rsb	lr, r2, r5
     178:	smull	r1, r4, r7, r0
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
     17c:	.word	0x44044611
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     180:	rsb	r6, r6, r4, asr #5
     184:	.word	0x1606ebc6
     188:	sub.w	r0, r0, r6, lsl #2
     18c:	.word	0x003cf1c0
     190:	mul.w	r0, lr, r0
     194:	.word	0x4700fb87
     198:	asrs	r4, r0, #31
     19a:	.short	0x4438
     19c:	rsb	r0, r4, r0, asr #5
     1a0:	.word	0xe79e4402
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
     1a4:	ldr	r7, [pc, #52]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
     1a6:	.short	0x1aa9
     1a8:	smull	lr, r4, r7, r0
     1ac:	.word	0xebc64404
     1b0:	asrs	r4, r4, #25
     1b2:	.short	0xebc6
     1b4:	asrs	r6, r0, #24
     1b6:	.short	0xeba0
     1b8:	lsls	r6, r0, #26
     1ba:	.short	0x4608
     1bc:	mul.w	r0, r6, r0
     1c0:	smull	r1, r7, r7, r0
     1c4:	.word	0x443817c1
     1c8:	rsb	r0, r1, r0, asr #5
     1cc:	.word	0xe7881811
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
     1d0:	movs	r5, #0
     1d2:	.short	0x462a
     1d4:	mov	r1, r5
     1d6:	.short	0xe784
     1d8:	movs	r0, r0
     1da:	movs	r0, #0
     1dc:	ldrh	r1, [r1, #4]
     1de:	ldrh	r0, [r1, #4]

000001e0 <set_ledLib(int, unsigned char, unsigned char, unsigned char)>:
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);



void set_ledLib(int pixel, byte r, byte g, byte b){
     1e0:	push	{lr}
     1e2:	sub	sp, #12
  synapse_A.setPixelColor(pixel, r, g, b);
     1e4:	.word	0x46139300
     1e8:	mov	r2, r1
     1ea:	uxth	r1, r0
     1ec:	ldr	r0, [pc, #8]	; (1f8 <set_ledLib(int, unsigned char, unsigned char, unsigned char)+0x18>)
     1ee:	bl	a76c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
}
     1f2:	add	sp, #12
     1f4:	ldr.w	pc, [sp], #4
     1f8:	stc2l	0, cr2, [r8, #-0]

000001fc <reset_ledLib()>:

void show_ledLib(){
  synapse_A.show();
}

void reset_ledLib(){
     1fc:	push	{r4, r5, lr}
  for(int i=0; i<LED_AM; i++){
     1fe:	.short	0x2400

void show_ledLib(){
  synapse_A.show();
}

void reset_ledLib(){
     200:	sub	sp, #12
  for(int i=0; i<LED_AM; i++){
    synapse_A.setPixelColor(i,0,0,0);
     202:	mov	r5, r4
     204:	.word	0xb2a12300
void show_ledLib(){
  synapse_A.show();
}

void reset_ledLib(){
  for(int i=0; i<LED_AM; i++){
     208:	adds	r4, #1
    synapse_A.setPixelColor(i,0,0,0);
     20a:	str	r5, [sp, #0]
     20c:	.word	0x4803461a
     210:	bl	a76c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
void show_ledLib(){
  synapse_A.show();
}

void reset_ledLib(){
  for(int i=0; i<LED_AM; i++){
     214:	.word	0xd1f52c78
    synapse_A.setPixelColor(i,0,0,0);
  }
}
     218:	add	sp, #12
     21a:	pop	{r4, r5, pc}
     21c:	stc2l	0, cr2, [r8, #-0]

00000220 <show_ledLib()>:
void set_ledLib(int pixel, byte r, byte g, byte b){
  synapse_A.setPixelColor(pixel, r, g, b);
}

void show_ledLib(){
  synapse_A.show();
     220:	ldr	r0, [pc, #4]	; (228 <show_ledLib()+0x8>)
     222:	b.w	a524 <Adafruit_NeoPixel::show()>
     226:	.short	0xbf00
     228:	stc2l	0, cr2, [r8, #-0]

0000022c <get_ledLib(int)>:
  for(int i=0; i<LED_AM; i++){
    synapse_A.setPixelColor(i,0,0,0);
  }
}

Color get_ledLib(int pixel){
     22c:	.word	0xb289b530
     230:	sub	sp, #12
     232:	.short	0x4604
  uint32_t conn = synapse_A.getPixelColor(pixel);  // retrieve the color that has already been saved
     234:	ldr	r0, [pc, #32]	; (258 <get_ledLib(int)+0x2c>)
     236:	bl	a7bc <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
  byte b = conn & 255;       // unpack the color
  byte g = conn >> 8 & 255;
  byte r = conn >> 16 & 255;
  Color pixelCol(r,g,b,RGB_MODE);
     23a:	.short	0x2500
    synapse_A.setPixelColor(i,0,0,0);
  }
}

Color get_ledLib(int pixel){
  uint32_t conn = synapse_A.getPixelColor(pixel);  // retrieve the color that has already been saved
     23c:	mov	r1, r0
  byte b = conn & 255;       // unpack the color
  byte g = conn >> 8 & 255;
  byte r = conn >> 16 & 255;
  Color pixelCol(r,g,b,RGB_MODE);
     23e:	mov	r0, r4
     240:	str	r5, [sp, #0]
     242:	uxtb	r3, r1
     244:	ubfx	r2, r1, #8, #8
     248:	ubfx	r1, r1, #16, #8
     24c:	.word	0xfaecf009
  return pixelCol;
}
     250:	mov	r0, r4
     252:	add	sp, #12
     254:	.word	0xbf00bd30
     258:	stc2l	0, cr2, [r8, #-0]

0000025c <Screen::iterate_animation()>:
        }
       
        
    }   

    void iterate_animation(){
     25c:	.word	0x4ff0e92d
        if (makeNewFrame){
     260:	ldrb	r3, [r0, #20]
        }
       
        
    }   

    void iterate_animation(){
     262:	.short	0xed2d
     264:	ldrh	r2, [r0, #24]
     266:	sub	sp, #92	; 0x5c
     268:	.word	0x2b009005
        if (makeNewFrame){
     26c:	beq.w	3ec <Screen::iterate_animation()+0x190>
            if (millis() >= nextTime1){
     270:	ldr	r3, [sp, #20]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     272:	add.w	r8, sp, #56	; 0x38
     276:	.short	0x69da
     278:	ldr	r3, [pc, #624]	; (4ec <Screen::iterate_animation()+0x290>)
     27a:	ldr	r3, [r3, #0]
     27c:	.word	0xf240429a
     280:	strh	r3, [r5, #20]
     282:	ldr	r3, [pc, #616]	; (4ec <Screen::iterate_animation()+0x290>)
                (*_fg_automaton).iterate();
                (*_bg_automaton).iterate();
                nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
                Serial.println(nextTime1);
            }
            if (millis() >= nextTime2){
     284:	ldr	r1, [sp, #20]
     286:	ldr	r2, [r3, #0]
     288:	.word	0x429a6a0b
     28c:	bcs.w	500 <Screen::iterate_animation()+0x2a4>
     290:	.word	0xa008f8d1
     294:	ldr.w	fp, [r1, #12]
     298:	.word	0xf8cd9a05
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     29c:	strh	r4, [r5, #0]
     29e:	.short	0x6853
     2a0:	addw	r2, r2, #2740	; 0xab4
     2a4:	mov	r1, r2
     2a6:	str	r2, [sp, #40]	; 0x28
     2a8:	.word	0x0218f10a
     2ac:	.word	0x91087e18
     2b0:	str	r2, [sp, #28]
     2b2:	add.w	r2, fp, #24
     2b6:	str	r0, [sp, #12]
     2b8:	str	r2, [sp, #24]
     2ba:	add.w	r2, r3, #5440	; 0x1540
     2be:	adds	r3, #28
     2c0:	str	r3, [sp, #16]
     2c2:	ldr	r3, [r2, #0]
     2c4:	str	r3, [sp, #8]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     2c6:	.short	0x2300
     2c8:	str	r3, [sp, #36]	; 0x24
     2ca:	.short	0x9808
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     2cc:	movs	r5, #26
     2ce:	.short	0x9c09
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     2d0:	movs	r3, #0
     2d2:	.short	0xf6a0
     2d4:	movs	r2, #180	; 0xb4
     2d6:	.short	0x9904
     2d8:	ldr.w	ip, [sp, #24]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     2dc:	.word	0xf804fb05
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     2e0:	ldr.w	lr, [sp, #28]
     2e4:	.word	0x9c02e052
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     2e8:	add.w	r5, r8, r3
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     2ec:	.word	0x2c005ce4

    void gen_color_matrix(){
        int hue = 0, sat = 0, bri = 0;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                if ((*_fg_automaton).can_color(x, y)){
     2f0:	beq.n	3a2 <Screen::iterate_animation()+0x146>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     2f2:	ldr	r6, [r1, #0]
     2f4:	.word	0xeddf4c7e
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     2f8:	ldrb	r7, [r7, #9]
     2fa:	.short	0xfb86
     2fc:	cmp	r4, r0
     2fe:	asrs	r4, r6, #31
     300:	add.w	sl, r6, r5
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     304:	ldr.w	r5, [ip, #4]!
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     308:	rsb	sl, r4, sl, asr #8
     30c:	mov.w	r4, #360	; 0x168
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     310:	add.w	fp, r5, #150	; 0x96
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     314:	mls	sl, r4, sl, r6
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     318:	ldr.w	r4, [lr, #4]!
     31c:	add.w	r4, r4, r4, lsl #2
     320:	mov.w	r9, r4, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     324:	ldr	r4, [pc, #464]	; (4f8 <Screen::iterate_animation()+0x29c>)
     326:	smull	r6, r7, fp, r4
     32a:	mov.w	r6, fp, asr #31
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     32e:	smull	r4, r5, r9, r4
     332:	mov.w	r4, r9, asr #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     336:	add	r7, fp
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     338:	add	r5, r9
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     33a:	rsb	r6, r6, r7, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     33e:	rsb	r4, r4, r5, asr #7
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     342:	rsb	r6, r6, r6, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     346:	rsb	r4, r4, r4, lsl #8
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y] + 150) % 255, 100);
     34a:	rsb	r6, r6, fp
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y] * 20) % 255;
     34e:	rsb	r4, r4, r9
     352:	cmp	r6, #99	; 0x63
     354:	ble.n	35e <Screen::iterate_animation()+0x102>
     356:	vmov	s15, r6
     35a:	vcvt.f32.s32	s15, s15
                //hue = filter_hue(hue);
                //bri = shift_bri(bri);
                
                next_colors.hue[x][y] = hue;
                next_colors.sat[x][y] = sat;
                next_colors.bri[x][y] = bri;
     35e:	vmov	s14, r4
                sat = (*_sat_automaton).saturationMap(x,y);

                //hue = filter_hue(hue);
                //bri = shift_bri(bri);
                
                next_colors.hue[x][y] = hue;
     362:	vmov	s13, sl
                next_colors.sat[x][y] = sat;
                next_colors.bri[x][y] = bri;
     366:	movw	r5, #5444	; 0x1544


    void gen_color_matrix(){
        int hue = 0, sat = 0, bri = 0;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
     36a:	adds	r3, #1
                //hue = filter_hue(hue);
                //bri = shift_bri(bri);
                
                next_colors.hue[x][y] = hue;
                next_colors.sat[x][y] = sat;
                next_colors.bri[x][y] = bri;
     36c:	vcvt.f32.s32	s14, s14
     370:	adds	r1, #4
                sat = (*_sat_automaton).saturationMap(x,y);

                //hue = filter_hue(hue);
                //bri = shift_bri(bri);
                
                next_colors.hue[x][y] = hue;
     372:	vcvt.f32.s32	s13, s13
                next_colors.sat[x][y] = sat;
                next_colors.bri[x][y] = bri;
     376:	add	r5, r2


    void gen_color_matrix(){
        int hue = 0, sat = 0, bri = 0;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
     378:	cmp	r3, #26
     37a:	add.w	r2, r2, #4
                sat = (*_sat_automaton).saturationMap(x,y);

                //hue = filter_hue(hue);
                //bri = shift_bri(bri);
                
                next_colors.hue[x][y] = hue;
     37e:	vstr	s13, [r2, #32]
                next_colors.sat[x][y] = sat;
     382:	vstmia	r0!, {s15}
                next_colors.bri[x][y] = bri;
     386:	vstr	s14, [r5]


    void gen_color_matrix(){
        int hue = 0, sat = 0, bri = 0;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
     38a:	beq.n	3ae <Screen::iterate_animation()+0x152>
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     38c:	ldr	r4, [sp, #12]
     38e:	cmp	r4, #0
     390:	bne.n	2e6 <Screen::iterate_animation()+0x8a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     392:	ldr	r4, [sp, #8]
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     394:	add.w	r5, r8, r3

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     398:	ldrb	r4, [r4, r3]
     39a:	eor.w	r4, r4, #1
                if ((*_fg_automaton).can_color(x, y)){
     39e:	cmp	r4, #0
     3a0:	bne.n	2f2 <Screen::iterate_animation()+0x96>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y] % 360;
     3a2:	ldr	r4, [sp, #20]
     3a4:	ldr	r4, [r4, #0]
     3a6:	add.w	r4, r4, r5, lsl #2
     3aa:	ldr	r6, [r4, #28]
     3ac:	b.n	2f4 <Screen::iterate_animation()+0x98>
     3ae:	ldr	r2, [sp, #8]
        ColorMatrix prev_colors = {{{0}}};


    void gen_color_matrix(){
        int hue = 0, sat = 0, bri = 0;
        for(int x = 0; x < SIZE_SCREEN; x++) {
     3b0:	ldr	r3, [sp, #36]	; 0x24
     3b2:	adds	r2, #26
     3b4:	adds	r3, #1
     3b6:	str	r2, [sp, #8]
     3b8:	ldr	r2, [sp, #32]
     3ba:	cmp	r3, #26
     3bc:	str	r3, [sp, #36]	; 0x24
     3be:	add.w	r2, r2, #104	; 0x68
     3c2:	str	r2, [sp, #32]
     3c4:	ldr	r2, [sp, #28]
     3c6:	add.w	r2, r2, #104	; 0x68
     3ca:	str	r2, [sp, #28]
     3cc:	ldr	r2, [sp, #24]
     3ce:	add.w	r2, r2, #104	; 0x68
     3d2:	str	r2, [sp, #24]
     3d4:	ldr	r2, [sp, #16]
     3d6:	add.w	r2, r2, #104	; 0x68
     3da:	str	r2, [sp, #16]
     3dc:	bne.w	2ca <Screen::iterate_animation()+0x6e>
                next_colors.hue[x][y] = hue;
                next_colors.sat[x][y] = sat;
                next_colors.bri[x][y] = bri;
            }
        }   
        makeNewFrame = false;
     3e0:	movs	r3, #0
     3e2:	ldr	r2, [sp, #20]
     3e4:	ldr.w	r8, [sp, #44]	; 0x2c
     3e8:	strb	r3, [r2, #20]
     3ea:	b.n	3f6 <Screen::iterate_animation()+0x19a>
     3ec:	addw	r3, r0, #2740	; 0xab4
     3f0:	add.w	r8, sp, #56	; 0x38
     3f4:	str	r3, [sp, #40]	; 0x28
     3f6:	ldr	r1, [sp, #20]
    float interpolate_function(float big_val, float small_val, float step){
        return (big_val - small_val) * (1/step) + small_val;
    }

    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
     3f8:	movs	r3, #0
        makeNewFrame = false;
       
    }

    float interpolate_function(float big_val, float small_val, float step){
        return (big_val - small_val) * (1/step) + small_val;
     3fa:	vldr	s16, [pc, #256]	; 4fc <Screen::iterate_animation()+0x2a0>
     3fe:	mov	r2, r1
    }

    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
     400:	mov	fp, r1
     402:	str	r3, [sp, #12]
     404:	adds	r2, #36	; 0x24
     406:	str	r3, [sp, #48]	; 0x30
     408:	str	r3, [sp, #52]	; 0x34
     40a:	str	r2, [sp, #24]
     40c:	str	r3, [sp, #56]	; 0x38
     40e:	str.w	r8, [sp, #16]
     412:	ldr	r2, [sp, #24]
     414:	movw	r6, #8112	; 0x1fb0
     418:	movw	r5, #13520	; 0x34d0
     41c:	movs	r4, #0
     41e:	add.w	sl, r2, #2704	; 0xa90
     422:	add.w	r7, r2, #10816	; 0x2a40
     426:	add	r5, r2
     428:	add	r6, r2
     42a:	add.w	r9, r2, #5408	; 0x1520
     42e:	mov	r8, r2
     430:	str	r5, [sp, #8]
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));
     432:	ldr	r2, [sp, #8]

                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     434:	add	r3, sp, #48	; 0x30
    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
     436:	vldr	s13, [r6]
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));
     43a:	vldr	s15, [r2]
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
     43e:	vldr	s14, [r7]
    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
     442:	vldmia	r8!, {s10}
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
     446:	vldmia	sl!, {s11}
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));
     44a:	vldmia	r9!, {s12}
        makeNewFrame = false;
       
    }

    float interpolate_function(float big_val, float small_val, float step){
        return (big_val - small_val) * (1/step) + small_val;
     44e:	vsub.f32	s10, s10, s13
     452:	vsub.f32	s11, s11, s14

                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     456:	ldr	r5, [sp, #16]
        makeNewFrame = false;
       
    }

    float interpolate_function(float big_val, float small_val, float step){
        return (big_val - small_val) * (1/step) + small_val;
     458:	vsub.f32	s12, s12, s15
     45c:	vfma.f32	s13, s10, s16
     460:	vfma.f32	s14, s11, s16
     464:	vfma.f32	s15, s12, s16
            for(int y = 0; y < SIZE_SCREEN; y++) { 
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));

                prev_colors.hue[x][y] = current_hue;
     468:	vstmia	r6!, {s13}
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     46c:	vcvt.s32.f32	s13, s13
                current_hue = interpolate_function(next_colors.hue[x][y], prev_colors.hue[x][y],float(STEP_SIZE));
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));

                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
     470:	vstmia	r7!, {s14}
                prev_colors.bri[x][y] = current_bri;  

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     474:	vcvt.s32.f32	s14, s14
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));

                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  
     478:	vstmia	r2!, {s15}

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     47c:	vcvt.s32.f32	s15, s15
     480:	str	r5, [sp, #4]
     482:	add	r5, sp, #52	; 0x34
     484:	vmov	r0, s13
     488:	vmov	r1, s14
                current_sat = interpolate_function(next_colors.sat[x][y], prev_colors.sat[x][y],float(STEP_SIZE)); 
                current_bri = interpolate_function(next_colors.bri[x][y], prev_colors.bri[x][y],float(STEP_SIZE));

                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  
     48c:	str	r2, [sp, #8]

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     48e:	vmov	r2, s15
     492:	str	r5, [sp, #0]
     494:	bl	7c <getRGB(int, int, int, int*, int*, int*)>
                (*_screen).setPixelColor((x*SIZE_SCREEN + y), r, g, b);
     498:	ldr	r1, [sp, #12]
     49a:	ldrb.w	lr, [sp, #56]	; 0x38
     49e:	add	r1, r4

    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
     4a0:	adds	r4, #1
                prev_colors.hue[x][y] = current_hue;
                prev_colors.sat[x][y] = current_sat;
                prev_colors.bri[x][y] = current_bri;  

                getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
                (*_screen).setPixelColor((x*SIZE_SCREEN + y), r, g, b);
     4a2:	ldr.w	r0, [fp, #16]
     4a6:	ldrb.w	r3, [sp, #52]	; 0x34
     4aa:	uxth	r1, r1
     4ac:	ldrb.w	r2, [sp, #48]	; 0x30
     4b0:	str.w	lr, [sp]
     4b4:	bl	a76c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>

    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
            for(int y = 0; y < SIZE_SCREEN; y++) { 
     4b8:	cmp	r4, #26
     4ba:	bne.n	432 <Screen::iterate_animation()+0x1d6>
     4bc:	ldr	r3, [sp, #12]
     4be:	ldr	r2, [sp, #24]
     4c0:	adds	r3, #26
     4c2:	adds	r2, #104	; 0x68
     4c4:	uxth	r3, r3
     4c6:	str	r2, [sp, #24]
     4c8:	str	r3, [sp, #12]
    }

    void interpolate_colors(int step){
        int r = 0, g = 0, b = 0;
        float current_hue, current_sat, current_bri;
        for(int x = 0; x < SIZE_SCREEN; x++) {
     4ca:	ldr	r3, [sp, #40]	; 0x28
     4cc:	cmp	r3, r2
     4ce:	bne.n	412 <Screen::iterate_animation()+0x1b6>
            }
            
            gen_color_matrix();
        }
        interpolate_colors(step);
        if (step == STEP_SIZE){
     4d0:	ldr	r3, [sp, #20]
     4d2:	ldr	r3, [r3, #24]
     4d4:	cmp	r3, #10
     4d6:	beq.w	afa <Screen::iterate_animation()+0x89e>
     4da:	adds	r3, #1
            makeNewFrame = true;
            step = step % STEP_SIZE;
        }
        step = (step + 1);
     4dc:	ldr	r2, [sp, #20]
     4de:	str	r3, [r2, #24]
    }
     4e0:	add	sp, #92	; 0x5c
     4e2:	vpop	{d8}
     4e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4ea:	nop
     4ec:	.word	0x20015cd8
     4f0:	.word	0xb60b60b7
     4f4:	.word	0x42c80000
     4f8:	.word	0x80808081
     4fc:	.word	0x3dcccccd
                (*_bg_automaton).iterate();
                nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
                Serial.println(nextTime1);
            }
            if (millis() >= nextTime2){
                (*_grow_automaton).iterate_growth();
     500:	ldr	r3, [sp, #20]
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     502:	movs	r2, #32
     504:	movs	r1, #0
     506:	mov	r0, r8
     508:	ldr.w	sl, [r3, #8]
     50c:	bl	d7cc <memset>
     510:	ldr.w	r9, [pc, #1484]	; ae0 <Screen::iterate_animation()+0x884>
     514:	mov.w	fp, #26
     518:	ldr.w	r3, [sl]
     51c:	str	r3, [sp, #24]
     51e:	ldr.w	r3, [sl, #12]
     522:	str	r3, [sp, #28]
     524:	addw	r3, sl, #2732	; 0xaac
     528:	str	r3, [sp, #36]	; 0x24
     52a:	movs	r3, #2
     52c:	str	r3, [sp, #12]
     52e:	ldr	r2, [sp, #36]	; 0x24
     530:	mov.w	ip, #4294967295
     534:	subw	r3, r2, #2708	; 0xa94
     538:	str	r2, [sp, #8]
     53a:	str	r3, [sp, #16]
     53c:	ldr	r3, [sp, #12]
     53e:	subs	r3, #3
     540:	str	r3, [sp, #32]
     542:	ldr	r6, [sp, #32]
     544:	mov	lr, r8
     546:	add.w	r7, ip, #3
     54a:	smull	r3, r2, r9, r6
     54e:	asrs	r3, r6, #31
     550:	mov	r5, lr
     552:	mov	r0, ip
     554:	rsb	r3, r3, r2, asr #3
     558:	mls	r3, fp, r3, r6
     55c:	adds	r3, #26
     55e:	smull	r2, r4, r9, r3
     562:	asrs	r2, r3, #31
     564:	rsb	r4, r2, r4, asr #3
     568:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     56c:	mul.w	r4, fp, r4
     570:	smull	r3, r1, r9, r0
     574:	asrs	r3, r0, #31
     576:	rsb	r3, r3, r1, asr #3
     57a:	mls	r3, fp, r3, r0
     57e:	adds	r0, #1
     580:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     584:	cmp	r0, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     586:	smull	r2, r3, r9, r1
     58a:	mov.w	r2, r1, asr #31
     58e:	rsb	r3, r2, r3, asr #3
     592:	mls	r3, fp, r3, r1
     596:	add	r3, r4
     598:	add.w	r3, sl, r3, lsl #2
     59c:	ldr	r3, [r3, #28]
     59e:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     5a2:	bne.n	570 <Screen::iterate_animation()+0x314>
     5a4:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
     5a6:	ldr	r3, [sp, #12]
     5a8:	add.w	lr, lr, #12
     5ac:	cmp	r3, r6
     5ae:	bne.n	54a <Screen::iterate_animation()+0x2ee>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     5b0:	ldr	r3, [sp, #16]
     5b2:	movs	r1, #1
     5b4:	ldr.w	r5, [r3, #4]!
     5b8:	str	r3, [sp, #16]
     5ba:	ldr	r3, [sp, #24]
     5bc:	adds	r4, r5, r3
     5be:	movs	r0, #0
     5c0:	mov	r3, r0
     5c2:	b.n	5ca <Screen::iterate_animation()+0x36e>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     5c4:	adds	r3, #1
     5c6:	cmp	r3, #8
     5c8:	beq.n	5de <Screen::iterate_animation()+0x382>
          if ((i >> j) % 2 == 1){
     5ca:	asr.w	r2, r1, r3
     5ce:	lsls	r6, r2, #31
     5d0:	bpl.n	5c4 <Screen::iterate_animation()+0x368>
            sum += neighbours[j];
     5d2:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     5d6:	adds	r3, #1
     5d8:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     5da:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     5dc:	bne.n	5ca <Screen::iterate_animation()+0x36e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     5de:	cmp	r4, r0
     5e0:	beq.w	7cc <Screen::iterate_animation()+0x570>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     5e4:	adds	r1, #1
     5e6:	cmp.w	r1, #256	; 0x100
     5ea:	bne.n	5be <Screen::iterate_animation()+0x362>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     5ec:	ldr.w	r3, [sl, #8]
     5f0:	ldr	r2, [sp, #8]
     5f2:	subs	r3, r5, r3
     5f4:	str	r3, [r2, #0]
          }
          if (nextCells[x][y] < _floorInit){
     5f6:	ldr	r1, [sp, #28]
     5f8:	cmp	r1, r3
     5fa:	ble.n	600 <Screen::iterate_animation()+0x3a4>
            nextCells[x][y] = _floorInit;
     5fc:	ldr	r3, [sp, #8]
     5fe:	str	r1, [r3, #0]
     600:	ldr	r3, [sp, #8]
     602:	add.w	ip, ip, #1
     606:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     608:	cmp.w	ip, #25
     60c:	str	r3, [sp, #8]
     60e:	bne.n	542 <Screen::iterate_animation()+0x2e6>
     610:	ldr	r3, [sp, #12]
     612:	ldr	r2, [sp, #36]	; 0x24
     614:	adds	r3, #1
     616:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     618:	cmp	r3, #28
     61a:	str	r3, [sp, #12]
     61c:	str	r2, [sp, #36]	; 0x24
     61e:	bne.n	52e <Screen::iterate_animation()+0x2d2>
     620:	movw	r5, #5432	; 0x1538
     624:	addw	r4, sl, #2728	; 0xaa8
     628:	add	r5, sl
     62a:	sub.w	r3, r4, #2704	; 0xa90
     62e:	subw	r0, r4, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     632:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     634:	ldr.w	r1, [r2, #4]!
     638:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     63c:	cmp	r0, r3
     63e:	bne.n	634 <Screen::iterate_animation()+0x3d8>
     640:	adds	r4, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     642:	cmp	r5, r4
     644:	bne.n	62a <Screen::iterate_animation()+0x3ce>
                (*_sat_automaton).iterate();
     646:	ldr	r3, [sp, #20]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     648:	movs	r2, #32
     64a:	movs	r1, #0
     64c:	mov	r0, r8
     64e:	ldr.w	fp, [r3, #12]
     652:	bl	d7cc <memset>
     656:	mov.w	r9, #26
     65a:	ldr.w	ip, [pc, #1156]	; ae0 <Screen::iterate_animation()+0x884>
     65e:	add.w	r3, fp, #5440	; 0x1540
     662:	ldrb.w	r2, [fp, #24]
     666:	str.w	sl, [sp, #44]	; 0x2c
     66a:	ldr	r3, [r3, #0]
     66c:	str	r2, [sp, #36]	; 0x24
     66e:	addw	r2, fp, #2836	; 0xb14
     672:	str	r3, [sp, #40]	; 0x28
     674:	movs	r3, #2
     676:	str	r2, [sp, #32]
     678:	str	r3, [sp, #24]
     67a:	ldr	r2, [sp, #32]
     67c:	movs	r7, #2
     67e:	subw	r3, r2, #2808	; 0xaf8
     682:	sub.w	sl, r2, #104	; 0x68
     686:	str	r3, [sp, #16]
     688:	ldr	r3, [sp, #40]	; 0x28
     68a:	str	r3, [sp, #8]
     68c:	str	r3, [sp, #12]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     68e:	ldr	r3, [sp, #36]	; 0x24
     690:	cmp	r3, #0
     692:	beq.w	b04 <Screen::iterate_animation()+0x8a8>
      return _background[x][y];
     696:	ldr	r3, [sp, #12]
     698:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     69a:	cmp	r3, #0
     69c:	beq.n	75e <Screen::iterate_animation()+0x502>
     69e:	ldr	r3, [sp, #24]
     6a0:	mov	lr, r8
     6a2:	subs	r6, r3, #3
     6a4:	subs	r3, r7, #3
     6a6:	str	r3, [sp, #28]
     6a8:	smull	r3, r2, ip, r6
     6ac:	asrs	r3, r6, #31
     6ae:	ldr	r0, [sp, #28]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     6b0:	mov	r5, lr
     6b2:	rsb	r3, r3, r2, asr #3
     6b6:	mls	r3, r9, r3, r6
     6ba:	adds	r3, #26
     6bc:	smull	r2, r1, ip, r3
     6c0:	asrs	r2, r3, #31
     6c2:	rsb	r2, r2, r1, asr #3
     6c6:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     6ca:	mul.w	r4, r9, r2
     6ce:	smull	r3, r1, ip, r0
     6d2:	asrs	r3, r0, #31
     6d4:	rsb	r3, r3, r1, asr #3
     6d8:	mls	r3, r9, r3, r0
     6dc:	adds	r0, #1
     6de:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     6e2:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     6e4:	smull	r2, r3, ip, r1
     6e8:	mov.w	r2, r1, asr #31
     6ec:	rsb	r3, r2, r3, asr #3
     6f0:	mls	r3, r9, r3, r1
     6f4:	add	r3, r4
     6f6:	add.w	r3, fp, r3, lsl #2
     6fa:	ldr	r3, [r3, #28]
     6fc:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     700:	bne.n	6ce <Screen::iterate_animation()+0x472>
     702:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     704:	ldr	r3, [sp, #24]
     706:	add.w	lr, lr, #12
     70a:	cmp	r6, r3
     70c:	bne.n	6a8 <Screen::iterate_animation()+0x44c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     70e:	ldr	r3, [sp, #16]
     710:	movs	r1, #1
     712:	ldr	r4, [r3, #0]
     714:	ldr.w	r3, [fp]
     718:	adds	r5, r4, r3
     71a:	movs	r0, #0
     71c:	mov	r3, r0
     71e:	b.n	726 <Screen::iterate_animation()+0x4ca>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     720:	adds	r3, #1
     722:	cmp	r3, #8
     724:	beq.n	73a <Screen::iterate_animation()+0x4de>
          if ((i >> j) % 2 == 1){
     726:	asr.w	r2, r1, r3
     72a:	lsls	r2, r2, #31
     72c:	bpl.n	720 <Screen::iterate_animation()+0x4c4>
            sum += neighbours[j];
     72e:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     732:	adds	r3, #1
     734:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     736:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     738:	bne.n	726 <Screen::iterate_animation()+0x4ca>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     73a:	cmp	r5, r0
     73c:	beq.w	b0e <Screen::iterate_animation()+0x8b2>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     740:	adds	r1, #1
     742:	cmp.w	r1, #256	; 0x100
     746:	bne.n	71a <Screen::iterate_animation()+0x4be>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     748:	ldr.w	r3, [fp, #8]
     74c:	subs	r3, r4, r3
     74e:	str.w	r3, [sl]
          }
          if (nextCells[x][y] < _floorInit){
     752:	ldr.w	r2, [fp, #12]
     756:	cmp	r2, r3
            nextCells[x][y] = _floorInit;
     758:	it	gt
     75a:	strgt.w	r2, [sl]
     75e:	ldr	r3, [sp, #16]
     760:	add.w	sl, sl, #4
     764:	adds	r7, #1
     766:	adds	r3, #4
     768:	str	r3, [sp, #16]
     76a:	ldr	r3, [sp, #12]
     76c:	adds	r3, #1
     76e:	str	r3, [sp, #12]
     770:	ldr	r3, [sp, #8]
     772:	adds	r3, #1
     774:	str	r3, [sp, #8]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     776:	ldr	r3, [sp, #32]
     778:	cmp	r3, sl
     77a:	bne.n	68e <Screen::iterate_animation()+0x432>
     77c:	ldr	r2, [sp, #32]
     77e:	ldr	r3, [sp, #24]
     780:	adds	r2, #104	; 0x68
     782:	adds	r3, #1
     784:	str	r2, [sp, #32]
     786:	ldr	r2, [sp, #40]	; 0x28
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     788:	cmp	r3, #28
     78a:	str	r3, [sp, #24]
     78c:	add.w	r2, r2, #26
     790:	str	r2, [sp, #40]	; 0x28
     792:	bne.w	67a <Screen::iterate_animation()+0x41e>
     796:	movw	r5, #5432	; 0x1538
     79a:	ldr.w	sl, [sp, #44]	; 0x2c
     79e:	addw	r4, fp, #2728	; 0xaa8
     7a2:	add	r5, fp
     7a4:	sub.w	r3, r4, #2704	; 0xa90
     7a8:	subw	r0, r4, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     7ac:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     7ae:	ldr.w	r1, [r2, #4]!
     7b2:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     7b6:	cmp	r0, r3
     7b8:	bne.n	7ae <Screen::iterate_animation()+0x552>
     7ba:	adds	r4, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     7bc:	cmp	r5, r4
     7be:	bne.n	7a4 <Screen::iterate_animation()+0x548>
     7c0:	ldr	r3, [pc, #788]	; (ad8 <Screen::iterate_animation()+0x87c>)
                nextTime2 = millis() + (1000/FRAMERATE_GROW);
     7c2:	ldr	r2, [sp, #20]
     7c4:	ldr	r3, [r3, #0]
     7c6:	adds	r3, #166	; 0xa6
     7c8:	str	r3, [r2, #32]
     7ca:	b.n	298 <Screen::iterate_animation()+0x3c>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     7cc:	ldr.w	r3, [sl, #4]
     7d0:	ldr	r2, [sp, #8]
     7d2:	add	r3, r5
     7d4:	str	r3, [r2, #0]
     7d6:	b.n	5f6 <Screen::iterate_animation()+0x39a>
    }   

    void iterate_animation(){
        if (makeNewFrame){
            if (millis() >= nextTime1){
                (*_fg_automaton).iterate();
     7d8:	ldr	r3, [sp, #20]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     7da:	movs	r2, #32
     7dc:	movs	r1, #0
     7de:	mov	r0, r8
     7e0:	ldr.w	fp, [r3, #4]
     7e4:	bl	d7cc <memset>
     7e8:	ldr.w	sl, [pc, #756]	; ae0 <Screen::iterate_animation()+0x884>
     7ec:	mov.w	r9, #26
     7f0:	add.w	r3, fp, #5440	; 0x1540
     7f4:	ldrb.w	r2, [fp, #24]
     7f8:	ldr	r3, [r3, #0]
     7fa:	str	r2, [sp, #36]	; 0x24
     7fc:	addw	r2, fp, #2836	; 0xb14
     800:	str	r3, [sp, #40]	; 0x28
     802:	movs	r3, #2
     804:	str	r2, [sp, #32]
     806:	str	r3, [sp, #24]
     808:	ldr	r2, [sp, #32]
     80a:	movs	r7, #2
     80c:	subw	r3, r2, #2808	; 0xaf8
     810:	sub.w	ip, r2, #104	; 0x68
     814:	str	r3, [sp, #12]
     816:	ldr	r3, [sp, #40]	; 0x28
     818:	str	r3, [sp, #16]
     81a:	str	r3, [sp, #8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     81c:	ldr	r3, [sp, #36]	; 0x24
     81e:	cmp	r3, #0
     820:	beq.w	ae4 <Screen::iterate_animation()+0x888>
      return _background[x][y];
     824:	ldr	r3, [sp, #8]
     826:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     828:	cmp	r3, #0
     82a:	beq.n	8ec <Screen::iterate_animation()+0x690>
     82c:	ldr	r3, [sp, #24]
     82e:	mov	lr, r8
     830:	subs	r6, r3, #3
     832:	subs	r3, r7, #3
     834:	str	r3, [sp, #28]
     836:	smull	r3, r2, sl, r6
     83a:	asrs	r3, r6, #31
     83c:	ldr	r0, [sp, #28]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     83e:	mov	r5, lr
     840:	rsb	r3, r3, r2, asr #3
     844:	mls	r3, r9, r3, r6
     848:	adds	r3, #26
     84a:	smull	r2, r1, sl, r3
     84e:	asrs	r2, r3, #31
     850:	rsb	r2, r2, r1, asr #3
     854:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     858:	mul.w	r4, r9, r2
     85c:	smull	r3, r1, sl, r0
     860:	asrs	r3, r0, #31
     862:	rsb	r3, r3, r1, asr #3
     866:	mls	r3, r9, r3, r0
     86a:	adds	r0, #1
     86c:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     870:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     872:	smull	r2, r3, sl, r1
     876:	mov.w	r2, r1, asr #31
     87a:	rsb	r3, r2, r3, asr #3
     87e:	mls	r3, r9, r3, r1
     882:	add	r3, r4
     884:	add.w	r3, fp, r3, lsl #2
     888:	ldr	r3, [r3, #28]
     88a:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     88e:	bne.n	85c <Screen::iterate_animation()+0x600>
     890:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     892:	ldr	r3, [sp, #24]
     894:	add.w	lr, lr, #12
     898:	cmp	r3, r6
     89a:	bne.n	836 <Screen::iterate_animation()+0x5da>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     89c:	ldr	r3, [sp, #12]
     89e:	movs	r1, #1
     8a0:	ldr	r4, [r3, #0]
     8a2:	ldr.w	r3, [fp]
     8a6:	adds	r5, r4, r3
     8a8:	movs	r0, #0
     8aa:	mov	r3, r0
     8ac:	b.n	8b4 <Screen::iterate_animation()+0x658>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     8ae:	adds	r3, #1
     8b0:	cmp	r3, #8
     8b2:	beq.n	8c8 <Screen::iterate_animation()+0x66c>
          if ((i >> j) % 2 == 1){
     8b4:	asr.w	r2, r1, r3
     8b8:	lsls	r6, r2, #31
     8ba:	bpl.n	8ae <Screen::iterate_animation()+0x652>
            sum += neighbours[j];
     8bc:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     8c0:	adds	r3, #1
     8c2:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     8c4:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     8c6:	bne.n	8b4 <Screen::iterate_animation()+0x658>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     8c8:	cmp	r5, r0
     8ca:	beq.w	aee <Screen::iterate_animation()+0x892>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     8ce:	adds	r1, #1
     8d0:	cmp.w	r1, #256	; 0x100
     8d4:	bne.n	8a8 <Screen::iterate_animation()+0x64c>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     8d6:	ldr.w	r3, [fp, #8]
     8da:	subs	r3, r4, r3
     8dc:	str.w	r3, [ip]
          }
          if (nextCells[x][y] < _floorInit){
     8e0:	ldr.w	r2, [fp, #12]
     8e4:	cmp	r2, r3
            nextCells[x][y] = _floorInit;
     8e6:	it	gt
     8e8:	strgt.w	r2, [ip]
     8ec:	ldr	r3, [sp, #12]
     8ee:	add.w	ip, ip, #4
     8f2:	adds	r7, #1
     8f4:	adds	r3, #4
     8f6:	str	r3, [sp, #12]
     8f8:	ldr	r3, [sp, #8]
     8fa:	adds	r3, #1
     8fc:	str	r3, [sp, #8]
     8fe:	ldr	r3, [sp, #16]
     900:	adds	r3, #1
     902:	str	r3, [sp, #16]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     904:	ldr	r3, [sp, #32]
     906:	cmp	ip, r3
     908:	bne.n	81c <Screen::iterate_animation()+0x5c0>
     90a:	ldr	r3, [sp, #24]
     90c:	add.w	r2, ip, #104	; 0x68
     910:	adds	r3, #1
     912:	str	r2, [sp, #32]
     914:	ldr	r2, [sp, #40]	; 0x28
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     916:	cmp	r3, #28
     918:	str	r3, [sp, #24]
     91a:	add.w	r2, r2, #26
     91e:	str	r2, [sp, #40]	; 0x28
     920:	bne.w	808 <Screen::iterate_animation()+0x5ac>
     924:	movw	r5, #5432	; 0x1538
     928:	addw	r4, fp, #2728	; 0xaa8
     92c:	add	r5, fp
     92e:	sub.w	r3, r4, #2704	; 0xa90
     932:	subw	r0, r4, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     936:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     938:	ldr.w	r1, [r2, #4]!
     93c:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     940:	cmp	r3, r0
     942:	bne.n	938 <Screen::iterate_animation()+0x6dc>
     944:	adds	r4, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     946:	cmp	r4, r5
     948:	bne.n	92e <Screen::iterate_animation()+0x6d2>
                (*_bg_automaton).iterate();
     94a:	ldr	r3, [sp, #20]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     94c:	movs	r2, #32
     94e:	movs	r1, #0
     950:	mov	r0, r8
     952:	ldr.w	fp, [r3]
     956:	bl	d7cc <memset>
     95a:	ldr.w	sl, [pc, #388]	; ae0 <Screen::iterate_animation()+0x884>
     95e:	mov.w	r9, #26
     962:	add.w	r3, fp, #5440	; 0x1540
     966:	ldrb.w	r2, [fp, #24]
     96a:	ldr	r3, [r3, #0]
     96c:	str	r2, [sp, #36]	; 0x24
     96e:	addw	r2, fp, #2836	; 0xb14
     972:	str	r3, [sp, #40]	; 0x28
     974:	movs	r3, #2
     976:	str	r2, [sp, #32]
     978:	str	r3, [sp, #24]
     97a:	ldr	r2, [sp, #32]
     97c:	movs	r7, #2
     97e:	subw	r3, r2, #2808	; 0xaf8
     982:	sub.w	ip, r2, #104	; 0x68
     986:	str	r3, [sp, #16]
     988:	ldr	r3, [sp, #40]	; 0x28
     98a:	str	r3, [sp, #8]
     98c:	str	r3, [sp, #12]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     98e:	ldr	r3, [sp, #36]	; 0x24
     990:	cmp	r3, #0
     992:	beq.w	b1a <Screen::iterate_animation()+0x8be>
      return _background[x][y];
     996:	ldr	r3, [sp, #12]
     998:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     99a:	cmp	r3, #0
     99c:	beq.n	a5c <Screen::iterate_animation()+0x800>
     99e:	ldr	r3, [sp, #24]
     9a0:	mov	lr, r8
     9a2:	subs	r6, r3, #3
     9a4:	subs	r3, r7, #3
     9a6:	str	r3, [sp, #28]
     9a8:	smull	r3, r2, sl, r6
     9ac:	asrs	r3, r6, #31
     9ae:	ldr	r0, [sp, #28]
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     9b0:	mov	r5, lr
     9b2:	rsb	r3, r3, r2, asr #3
     9b6:	mls	r3, r9, r3, r6
     9ba:	adds	r3, #26
     9bc:	smull	r2, r1, sl, r3
     9c0:	asrs	r2, r3, #31
     9c2:	rsb	r2, r2, r1, asr #3
     9c6:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     9ca:	mul.w	r4, r9, r2
     9ce:	smull	r3, r1, sl, r0
     9d2:	asrs	r3, r0, #31
     9d4:	rsb	r3, r3, r1, asr #3
     9d8:	mls	r3, r9, r3, r0
     9dc:	adds	r0, #1
     9de:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     9e2:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     9e4:	smull	r2, r3, sl, r1
     9e8:	mov.w	r2, r1, asr #31
     9ec:	rsb	r3, r2, r3, asr #3
     9f0:	mls	r3, r9, r3, r1
     9f4:	add	r3, r4
     9f6:	add.w	r3, fp, r3, lsl #2
     9fa:	ldr	r3, [r3, #28]
     9fc:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     a00:	bne.n	9ce <Screen::iterate_animation()+0x772>
     a02:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     a04:	ldr	r3, [sp, #24]
     a06:	add.w	lr, lr, #12
     a0a:	cmp	r3, r6
     a0c:	bne.n	9a8 <Screen::iterate_animation()+0x74c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     a0e:	ldr	r3, [sp, #16]
     a10:	movs	r1, #1
     a12:	ldr	r4, [r3, #0]
     a14:	ldr.w	r3, [fp]
     a18:	adds	r5, r4, r3
     a1a:	movs	r0, #0
     a1c:	mov	r3, r0
     a1e:	b.n	a26 <Screen::iterate_animation()+0x7ca>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a20:	adds	r3, #1
     a22:	cmp	r3, #8
     a24:	beq.n	a3a <Screen::iterate_animation()+0x7de>
          if ((i >> j) % 2 == 1){
     a26:	asr.w	r2, r1, r3
     a2a:	lsls	r2, r2, #31
     a2c:	bpl.n	a20 <Screen::iterate_animation()+0x7c4>
            sum += neighbours[j];
     a2e:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a32:	adds	r3, #1
     a34:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     a36:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a38:	bne.n	a26 <Screen::iterate_animation()+0x7ca>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     a3a:	cmp	r5, r0
     a3c:	beq.n	b24 <Screen::iterate_animation()+0x8c8>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     a3e:	adds	r1, #1
     a40:	cmp.w	r1, #256	; 0x100
     a44:	bne.n	a1a <Screen::iterate_animation()+0x7be>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     a46:	ldr.w	r3, [fp, #8]
     a4a:	subs	r3, r4, r3
     a4c:	str.w	r3, [ip]
          }
          if (nextCells[x][y] < _floorInit){
     a50:	ldr.w	r2, [fp, #12]
     a54:	cmp	r2, r3
            nextCells[x][y] = _floorInit;
     a56:	it	gt
     a58:	strgt.w	r2, [ip]
     a5c:	ldr	r3, [sp, #16]
     a5e:	add.w	ip, ip, #4
     a62:	adds	r7, #1
     a64:	adds	r3, #4
     a66:	str	r3, [sp, #16]
     a68:	ldr	r3, [sp, #12]
     a6a:	adds	r3, #1
     a6c:	str	r3, [sp, #12]
     a6e:	ldr	r3, [sp, #8]
     a70:	adds	r3, #1
     a72:	str	r3, [sp, #8]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     a74:	ldr	r3, [sp, #32]
     a76:	cmp	r3, ip
     a78:	bne.n	98e <Screen::iterate_animation()+0x732>
     a7a:	ldr	r2, [sp, #32]
     a7c:	ldr	r3, [sp, #24]
     a7e:	adds	r2, #104	; 0x68
     a80:	adds	r3, #1
     a82:	str	r2, [sp, #32]
     a84:	ldr	r2, [sp, #40]	; 0x28
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     a86:	cmp	r3, #28
     a88:	str	r3, [sp, #24]
     a8a:	add.w	r2, r2, #26
     a8e:	str	r2, [sp, #40]	; 0x28
     a90:	bne.w	97a <Screen::iterate_animation()+0x71e>
     a94:	movw	r5, #5432	; 0x1538
     a98:	addw	r4, fp, #2728	; 0xaa8
     a9c:	add	r5, fp
     a9e:	sub.w	r3, r4, #2704	; 0xa90
     aa2:	subw	r0, r4, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     aa6:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     aa8:	ldr.w	r1, [r2, #4]!
     aac:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     ab0:	cmp	r0, r3
     ab2:	bne.n	aa8 <Screen::iterate_animation()+0x84c>
     ab4:	adds	r4, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     ab6:	cmp	r5, r4
     ab8:	bne.n	a9e <Screen::iterate_animation()+0x842>
     aba:	ldr	r3, [pc, #28]	; (ad8 <Screen::iterate_animation()+0x87c>)

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     abc:	movs	r2, #10
                nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
     abe:	ldr	r4, [sp, #20]
     ac0:	ldr	r1, [r3, #0]
     ac2:	movs	r3, #0
     ac4:	ldr	r0, [pc, #20]	; (adc <Screen::iterate_animation()+0x880>)
     ac6:	adds	r1, #100	; 0x64
     ac8:	str	r1, [r4, #28]
     aca:	bl	bdb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ace:	ldr	r0, [pc, #12]	; (adc <Screen::iterate_animation()+0x880>)
     ad0:	bl	bd90 <Print::println()>
     ad4:	b.w	282 <Screen::iterate_animation()+0x26>
     ad8:	.word	0x20015cd8
     adc:	.word	0x20000fbc
     ae0:	.word	0x4ec4ec4f

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     ae4:	ldr	r3, [sp, #16]
     ae6:	ldrb	r3, [r3, #0]
     ae8:	eor.w	r3, r3, #1
     aec:	b.n	828 <Screen::iterate_animation()+0x5cc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     aee:	ldr.w	r3, [fp, #4]
     af2:	add	r3, r4
     af4:	str.w	r3, [ip]
     af8:	b.n	8e0 <Screen::iterate_animation()+0x684>
            
            gen_color_matrix();
        }
        interpolate_colors(step);
        if (step == STEP_SIZE){
            makeNewFrame = true;
     afa:	movs	r2, #1
     afc:	ldr	r1, [sp, #20]
     afe:	mov	r3, r2
     b00:	strb	r2, [r1, #20]
     b02:	b.n	4dc <Screen::iterate_animation()+0x280>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     b04:	ldr	r3, [sp, #8]
     b06:	ldrb	r3, [r3, #0]
     b08:	eor.w	r3, r3, #1
     b0c:	b.n	69a <Screen::iterate_animation()+0x43e>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     b0e:	ldr.w	r3, [fp, #4]
     b12:	add	r3, r4
     b14:	str.w	r3, [sl]
     b18:	b.n	752 <Screen::iterate_animation()+0x4f6>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     b1a:	ldr	r3, [sp, #8]
     b1c:	ldrb	r3, [r3, #0]
     b1e:	eor.w	r3, r3, #1
     b22:	b.n	99a <Screen::iterate_animation()+0x73e>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     b24:	ldr.w	r3, [fp, #4]
     b28:	add	r3, r4
     b2a:	str.w	r3, [ip]
     b2e:	b.n	a50 <Screen::iterate_animation()+0x7f4>

00000b30 <init_A()>:
    (*synapse).show();
  }

}

void init_A(){
     b30:	ldr	r3, [pc, #440]	; (cec <init_A()+0x1bc>)
  matrix_A.begin();
     b32:	ldr	r0, [pc, #444]	; (cf0 <init_A()+0x1c0>)
    (*synapse).show();
  }

}

void init_A(){
     b34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b38:	sub.w	r6, r3, #28
     b3c:	sub	sp, #12
  matrix_A.begin();
     b3e:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b42:	add.w	r8, r3, #5408	; 0x1520
     b46:	add.w	sl, r6, #5440	; 0x1540
     b4a:	str	r3, [sp, #4]
     b4c:	bl	a478 <Adafruit_NeoPixel::begin()>
     b50:	add.w	r7, r9, r9, lsl #1
     b54:	ldr	r5, [sp, #4]
     b56:	movs	r4, #0
     b58:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b5c:	ldrb	r2, [r6, #24]
      return _background[x][y];
     b5e:	add	r3, r4
     b60:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     b64:	cbnz	r2, b6a <init_A()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     b66:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     b6a:	cmp	r3, #0
     b6c:	bne.w	cc4 <init_A()+0x194>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     b70:	adds	r4, #1
     b72:	adds	r5, #4
     b74:	cmp	r4, #26
     b76:	bne.n	b58 <init_A()+0x28>
     b78:	ldr	r3, [sp, #4]
     b7a:	add.w	r9, r9, #26
     b7e:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     b80:	cmp.w	r9, #676	; 0x2a4
     b84:	str	r3, [sp, #4]
     b86:	bne.n	b50 <init_A()+0x20>
     b88:	ldr	r3, [pc, #360]	; (cf4 <init_A()+0x1c4>)
     b8a:	movs	r7, #0
     b8c:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     b90:	add.w	sl, r3, #5408	; 0x1520
     b94:	str	r3, [sp, #4]
     b96:	add.w	r9, r6, #5440	; 0x1540
     b9a:	add.w	r8, r7, r7, lsl #1
     b9e:	ldr	r5, [sp, #4]
     ba0:	movs	r4, #0
     ba2:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     ba6:	ldrb	r2, [r6, #24]
      return _background[x][y];
     ba8:	add	r3, r4
     baa:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     bac:	cbnz	r2, bb2 <init_A()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     bae:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     bb2:	cmp	r3, #0
     bb4:	bne.n	c9c <init_A()+0x16c>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     bb6:	adds	r4, #1
     bb8:	adds	r5, #4
     bba:	cmp	r4, #26
     bbc:	bne.n	ba2 <init_A()+0x72>
     bbe:	ldr	r3, [sp, #4]
     bc0:	adds	r7, #26
     bc2:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     bc4:	cmp.w	r7, #676	; 0x2a4
     bc8:	str	r3, [sp, #4]
     bca:	bne.n	b9a <init_A()+0x6a>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     bcc:	movs	r0, #10
     bce:	bl	bb3c <random(unsigned long)>
     bd2:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     bd4:	movs	r0, #10
     bd6:	bl	bb3c <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     bda:	adds	r6, r0, #4
     bdc:	add.w	r7, r0, #9
     be0:	cmp	r6, r7
     be2:	bgt.n	c30 <init_A()+0x100>
     be4:	mla	r4, r4, r5, r6
     be8:	ldr.w	sl, [pc, #268]	; cf8 <init_A()+0x1c8>
     bec:	add.w	r8, r5, #4
     bf0:	adds	r5, #9
     bf2:	add.w	r4, sl, r4, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     bf6:	cmp	r8, r5
     bf8:	bgt.n	c28 <init_A()+0xf8>
     bfa:	ldr.w	r2, [sl, #16]
     bfe:	mov	fp, r4
     c00:	mov	r9, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c02:	ldr.w	r0, [sl, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c06:	add.w	r9, r9, #1
     c0a:	add.w	fp, fp, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c0e:	subs	r0, r0, r2
     c10:	adds	r0, #2
     c12:	bl	bb3c <random(unsigned long)>
     c16:	ldr.w	r2, [sl, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c1a:	cmp	r9, r5
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c1c:	add.w	r3, r2, #4294967295
     c20:	add	r0, r3
     c22:	str.w	r0, [fp, #340]	; 0x154
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c26:	ble.n	c02 <init_A()+0xd2>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     c28:	adds	r6, #1
     c2a:	adds	r4, #4
     c2c:	cmp	r6, r7
     c2e:	ble.n	bf6 <init_A()+0xc6>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     c30:	movs	r0, #10
     c32:	bl	bb3c <random(unsigned long)>
     c36:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     c38:	movs	r0, #10
     c3a:	bl	bb3c <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     c3e:	adds	r6, r0, #4
     c40:	add.w	r8, r0, #9
     c44:	cmp	r8, r6
     c46:	blt.n	c96 <init_A()+0x166>
     c48:	movs	r3, #26
     c4a:	ldr.w	fp, [pc, #176]	; cfc <init_A()+0x1cc>
     c4e:	adds	r7, r5, #4
     c50:	add.w	r4, r5, #9
     c54:	mla	r5, r3, r5, r6
     c58:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     c5c:	cmp	r7, r4
     c5e:	bgt.n	c8e <init_A()+0x15e>
     c60:	ldr.w	r2, [fp, #16]
     c64:	mov	sl, r5
     c66:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c68:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c6c:	add.w	r9, r9, #1
     c70:	add.w	sl, sl, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c74:	subs	r0, r0, r2
     c76:	adds	r0, #2
     c78:	bl	bb3c <random(unsigned long)>
     c7c:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c80:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c82:	add.w	r3, r2, #4294967295
     c86:	add	r0, r3
     c88:	str.w	r0, [sl, #340]	; 0x154
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     c8c:	ble.n	c68 <init_A()+0x138>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     c8e:	adds	r6, #1
     c90:	adds	r5, #4
     c92:	cmp	r8, r6
     c94:	bge.n	c5c <init_A()+0x12c>
  fg_automaton_A.init();
  bg_automaton_A.init();
  grow_automaton_A.init_square();
  sat_automaton_A.init_square();
}
     c96:	add	sp, #12
     c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     c9c:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     c9e:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ca2:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ca4:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ca8:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     caa:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cac:	adds	r0, #2
     cae:	ldrb.w	fp, [r3, r1]
     cb2:	bl	bb3c <random(unsigned long)>
     cb6:	ldr	r3, [r6, #16]
     cb8:	rsb	r3, r3, fp
     cbc:	adds	r3, #1
     cbe:	subs	r0, r3, r0
     cc0:	str	r0, [r5, #0]
     cc2:	b.n	bb6 <init_A()+0x86>
     cc4:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cc6:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cca:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ccc:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cd0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     cd2:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     cd4:	adds	r0, #2
     cd6:	ldrb.w	fp, [r3, r1]
     cda:	bl	bb3c <random(unsigned long)>
     cde:	ldr	r3, [r6, #16]
     ce0:	rsb	r3, r3, fp
     ce4:	adds	r3, #1
     ce6:	subs	r0, r3, r0
     ce8:	str	r0, [r5, #0]
     cea:	b.n	b70 <init_A()+0x40>
     cec:	.word	0x200018c4
     cf0:	.word	0x20004330
     cf4:	.word	0x20012834
     cf8:	.word	0x2000fd90
     cfc:	.word	0x2000e7c4

00000d00 <init_B()>:

void init_B(){
     d00:	ldr	r3, [pc, #440]	; (ebc <init_B()+0x1bc>)
  matrix_B.begin();
     d02:	ldr	r0, [pc, #444]	; (ec0 <init_B()+0x1c0>)
  bg_automaton_A.init();
  grow_automaton_A.init_square();
  sat_automaton_A.init_square();
}

void init_B(){
     d04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d08:	sub.w	r6, r3, #28
     d0c:	sub	sp, #12
  matrix_B.begin();
     d0e:	mov.w	r9, #0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d12:	add.w	r8, r3, #5408	; 0x1520
     d16:	add.w	sl, r6, #5440	; 0x1540
     d1a:	str	r3, [sp, #4]
     d1c:	bl	a478 <Adafruit_NeoPixel::begin()>
     d20:	add.w	r7, r9, r9, lsl #1
     d24:	ldr	r5, [sp, #4]
     d26:	movs	r4, #0
     d28:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d2c:	ldrb	r2, [r6, #24]
      return _background[x][y];
     d2e:	add	r3, r4
     d30:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d34:	cbnz	r2, d3a <init_B()+0x3a>
      return _background[x][y];
    } else {
      return !_background[x][y];
     d36:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     d3a:	cmp	r3, #0
     d3c:	bne.w	e94 <init_B()+0x194>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d40:	adds	r4, #1
     d42:	adds	r5, #4
     d44:	cmp	r4, #26
     d46:	bne.n	d28 <init_B()+0x28>
     d48:	ldr	r3, [sp, #4]
     d4a:	add.w	r9, r9, #26
     d4e:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     d50:	cmp.w	r9, #676	; 0x2a4
     d54:	str	r3, [sp, #4]
     d56:	bne.n	d20 <init_B()+0x20>
     d58:	ldr	r3, [pc, #360]	; (ec4 <init_B()+0x1c4>)
     d5a:	movs	r7, #0
     d5c:	sub.w	r6, r3, #28
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     d60:	add.w	sl, r3, #5408	; 0x1520
     d64:	str	r3, [sp, #4]
     d66:	add.w	r9, r6, #5440	; 0x1540
     d6a:	add.w	r8, r7, r7, lsl #1
     d6e:	ldr	r5, [sp, #4]
     d70:	movs	r4, #0
     d72:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d76:	ldrb	r2, [r6, #24]
      return _background[x][y];
     d78:	add	r3, r4
     d7a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     d7c:	cbnz	r2, d82 <init_B()+0x82>
      return _background[x][y];
    } else {
      return !_background[x][y];
     d7e:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     d82:	cmp	r3, #0
     d84:	bne.n	e6c <init_B()+0x16c>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d86:	adds	r4, #1
     d88:	adds	r5, #4
     d8a:	cmp	r4, #26
     d8c:	bne.n	d72 <init_B()+0x72>
     d8e:	ldr	r3, [sp, #4]
     d90:	adds	r7, #26
     d92:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     d94:	cmp.w	r7, #676	; 0x2a4
     d98:	str	r3, [sp, #4]
     d9a:	bne.n	d6a <init_B()+0x6a>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     d9c:	movs	r0, #10
     d9e:	bl	bb3c <random(unsigned long)>
     da2:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     da4:	movs	r0, #10
     da6:	bl	bb3c <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     daa:	adds	r6, r0, #4
     dac:	add.w	r7, r0, #9
     db0:	cmp	r6, r7
     db2:	bgt.n	e00 <init_B()+0x100>
     db4:	mla	r4, r4, r5, r6
     db8:	ldr.w	sl, [pc, #268]	; ec8 <init_B()+0x1c8>
     dbc:	add.w	r8, r5, #4
     dc0:	adds	r5, #9
     dc2:	add.w	r4, sl, r4, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     dc6:	cmp	r8, r5
     dc8:	bgt.n	df8 <init_B()+0xf8>
     dca:	ldr.w	r2, [sl, #16]
     dce:	mov	fp, r4
     dd0:	mov	r9, r8
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     dd2:	ldr.w	r0, [sl, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     dd6:	add.w	r9, r9, #1
     dda:	add.w	fp, fp, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     dde:	subs	r0, r0, r2
     de0:	adds	r0, #2
     de2:	bl	bb3c <random(unsigned long)>
     de6:	ldr.w	r2, [sl, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     dea:	cmp	r9, r5
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     dec:	add.w	r3, r2, #4294967295
     df0:	add	r0, r3
     df2:	str.w	r0, [fp, #340]	; 0x154
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     df6:	ble.n	dd2 <init_B()+0xd2>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     df8:	adds	r6, #1
     dfa:	adds	r4, #4
     dfc:	cmp	r6, r7
     dfe:	ble.n	dc6 <init_B()+0xc6>

  void init_square(){
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
     e00:	movs	r0, #10
     e02:	bl	bb3c <random(unsigned long)>
     e06:	mov	r5, r0
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
     e08:	movs	r0, #10
     e0a:	bl	bb3c <random(unsigned long)>
    for (int y = cy - 3 ; y < cy + 3; y++){
     e0e:	adds	r6, r0, #4
     e10:	add.w	r8, r0, #9
     e14:	cmp	r8, r6
     e16:	blt.n	e66 <init_B()+0x166>
     e18:	movs	r3, #26
     e1a:	ldr.w	fp, [pc, #176]	; ecc <init_B()+0x1cc>
     e1e:	adds	r7, r5, #4
     e20:	add.w	r4, r5, #9
     e24:	mla	r5, r3, r5, r6
     e28:	add.w	r5, fp, r5, lsl #2
      for (int x = cx - 3; x < cx + 3; x++){
     e2c:	cmp	r7, r4
     e2e:	bgt.n	e5e <init_B()+0x15e>
     e30:	ldr.w	r2, [fp, #16]
     e34:	mov	sl, r5
     e36:	mov	r9, r7
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e38:	ldr.w	r0, [fp, #20]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e3c:	add.w	r9, r9, #1
     e40:	add.w	sl, sl, #104	; 0x68
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e44:	subs	r0, r0, r2
     e46:	adds	r0, #2
     e48:	bl	bb3c <random(unsigned long)>
     e4c:	ldr.w	r2, [fp, #16]
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e50:	cmp	r9, r4
        cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e52:	add.w	r3, r2, #4294967295
     e56:	add	r0, r3
     e58:	str.w	r0, [sl, #340]	; 0x154
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
      for (int x = cx - 3; x < cx + 3; x++){
     e5c:	ble.n	e38 <init_B()+0x138>
    int maxInit = 16;
    int minInit = 8;
    int cx, cy;
    cx = int(random(maxInit - minInit + 2) + minInit - 1);
    cy = int(random(maxInit - minInit + 2) + minInit - 1);
    for (int y = cy - 3 ; y < cy + 3; y++){
     e5e:	adds	r6, #1
     e60:	adds	r5, #4
     e62:	cmp	r8, r6
     e64:	bge.n	e2c <init_B()+0x12c>
  fg_automaton_B.init();
  bg_automaton_B.init();
  grow_automaton_B.init_square();
  sat_automaton_B.init_square();
}
     e66:	add	sp, #12
     e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e6c:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e6e:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e72:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e74:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e78:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e7a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e7c:	adds	r0, #2
     e7e:	ldrb.w	fp, [r3, r1]
     e82:	bl	bb3c <random(unsigned long)>
     e86:	ldr	r3, [r6, #16]
     e88:	rsb	r3, r3, fp
     e8c:	adds	r3, #1
     e8e:	subs	r0, r3, r0
     e90:	str	r0, [r5, #0]
     e92:	b.n	d86 <init_B()+0x86>
     e94:	ldr	r2, [r6, #20]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e96:	add.w	r1, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     e9a:	ldr	r0, [r6, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     e9c:	ldr.w	r3, [r8]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ea0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     ea2:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     ea4:	adds	r0, #2
     ea6:	ldrb.w	fp, [r3, r1]
     eaa:	bl	bb3c <random(unsigned long)>
     eae:	ldr	r3, [r6, #16]
     eb0:	rsb	r3, r3, fp
     eb4:	adds	r3, #1
     eb6:	subs	r0, r3, r0
     eb8:	str	r0, [r5, #0]
     eba:	b.n	d40 <init_B()+0x40>
     ebc:	.word	0x20002e08
     ec0:	.word	0x2000e7b0
     ec4:	.word	0x20013d78
     ec8:	.word	0x200112d4
     ecc:	.word	0x2000d26c

00000ed0 <setup>:



void setup() {
     ed0:	push	{r4, lr}
  randomSeed(analogRead(17));
     ed2:	movs	r0, #17
  sat_automaton_B.init_square();
}



void setup() {
     ed4:	sub	sp, #24
  randomSeed(analogRead(17));
     ed6:	bl	b8b0 <analogRead>
     eda:	bl	bb30 <randomSeed(unsigned long)>
  init_A();
  init_B();
  synapse_A.begin();
  seg[0].setPulsate(Color(100, 20, 30, RGB_MODE), 2);
     ede:	add	r4, sp, #8



void setup() {
  randomSeed(analogRead(17));
  init_A();
     ee0:	bl	b30 <init_A()>
  init_B();
     ee4:	bl	d00 <init_B()>
  synapse_A.begin();
     ee8:	ldr	r0, [pc, #48]	; (f1c <setup+0x4c>)
     eea:	bl	a478 <Adafruit_NeoPixel::begin()>
  seg[0].setPulsate(Color(100, 20, 30, RGB_MODE), 2);
     eee:	movs	r2, #0
     ef0:	mov	r0, r4
     ef2:	movs	r3, #30
     ef4:	str	r2, [sp, #0]
     ef6:	movs	r1, #100	; 0x64
     ef8:	movs	r2, #20
     efa:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
     efe:	ldr	r3, [sp, #20]
     f00:	vmov.f32	s0, #0	; 0x40000000  2.0
     f04:	ldr	r0, [pc, #24]	; (f20 <setup+0x50>)
     f06:	str	r3, [sp, #0]
     f08:	ldmia.w	r4, {r1, r2, r3}
     f0c:	bl	85f8 <Segment::setPulsate(Color, float)>
  delay(1000);
     f10:	mov.w	r0, #1000	; 0x3e8
     f14:	bl	b79c <delay>
  
}
     f18:	add	sp, #24
     f1a:	pop	{r4, pc}
     f1c:	.word	0x2000fd68
     f20:	.word	0x2000182c

00000f24 <loop>:

int pixel = 0;
void loop() {
     f24:	push	{r3, lr}
  //   send_pulse_full(&synapse_A, 200);
  // }
 
  //iterate();
  //iterate_growth_automaton();
  screen_A.iterate_animation();
     f26:	ldr	r0, [pc, #32]	; (f48 <loop+0x24>)
     f28:	bl	25c <Screen::iterate_animation()>
  screen_B.iterate_animation();
     f2c:	ldr	r0, [pc, #28]	; (f4c <loop+0x28>)
     f2e:	bl	25c <Screen::iterate_animation()>
  
  colore.update();
     f32:	ldr	r0, [pc, #28]	; (f50 <loop+0x2c>)
     f34:	bl	9010 <Colore::update()>
  matrix_A.show();
     f38:	ldr	r0, [pc, #24]	; (f54 <loop+0x30>)
     f3a:	bl	a524 <Adafruit_NeoPixel::show()>
  matrix_B.show();
     f3e:	ldr	r0, [pc, #24]	; (f58 <loop+0x34>)
  //synapse_A.show();
   
   

  // synapse_A.show();
}
     f40:	ldmia.w	sp!, {r3, lr}
  screen_A.iterate_animation();
  screen_B.iterate_animation();
  
  colore.update();
  matrix_A.show();
  matrix_B.show();
     f44:	b.w	a524 <Adafruit_NeoPixel::show()>
     f48:	.word	0x2000531c
     f4c:	.word	0x200092a0
     f50:	.word	0x2000fd08
     f54:	.word	0x20004330
     f58:	.word	0x2000e7b0

00000f5c <_GLOBAL__sub_I_nextTime3>:
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f5c:	ldr	r2, [pc, #1008]	; (1350 <_GLOBAL__sub_I_nextTime3+0x3f4>)
      _s = s;
      _b = b;
     f5e:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f62:	movs	r0, #0
      _s = s;
      _b = b;
     f64:	mov.w	ip, #207	; 0xcf
     f68:	mov	r3, r2
  //synapse_A.show();
   
   

  // synapse_A.show();
}
     f6a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f6e:	strb	r1, [r2, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f70:	mov.w	r1, #106	; 0x6a
      _s = s;
     f74:	movs	r4, #2
      _b = b;
     f76:	mov.w	fp, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f7a:	strb	r1, [r2, #3]
      _s = s;
     f7c:	mov.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f80:	strb	r1, [r2, #18]
      _s = s;
      _b = b;
     f82:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f86:	mov.w	lr, #109	; 0x6d
     f8a:	strb	r0, [r2, #0]
      _s = s;
      _b = b;
     f8c:	strb	r1, [r2, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     f8e:	mov.w	r1, #85	; 0x55
     f92:	strb.w	lr, [r2, #21]
     f96:	mov.w	sl, #131	; 0x83
     f9a:	strb	r1, [r2, #6]
      _s = s;
     f9c:	mov.w	r1, #5
     fa0:	strb	r0, [r2, #1]
     fa2:	movs	r7, #63	; 0x3f
     fa4:	strb	r1, [r2, #7]
      _b = b;
     fa6:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     faa:	strb	r0, [r2, #9]
      _s = s;
     fac:	movs	r6, #244	; 0xf4
      _b = b;
     fae:	strb	r1, [r2, #8]
     fb0:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
     fb4:	strb	r0, [r2, #10]
     fb6:	movs	r5, #8
      _b = b;
     fb8:	strb	r1, [r2, #14]
     fba:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     fbe:	strb	r0, [r2, #12]
      _s = s;
      _b = b;
     fc0:	mov.w	r9, #198	; 0xc6
     fc4:	strb	r1, [r2, #17]
     fc6:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
     fca:	strb	r0, [r2, #13]
     fcc:	mov.w	lr, #14
      _b = b;
     fd0:	strb	r1, [r2, #20]
     fd2:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     fd6:	strb	r0, [r2, #15]
     fd8:	sub	sp, #84	; 0x54
      _s = s;
      _b = b;
     fda:	strb	r1, [r2, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     fdc:	mov.w	r1, #114	; 0x72
      _s = s;
     fe0:	strb	r0, [r2, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     fe2:	strb	r1, [r2, #24]
      _s = s;
     fe4:	mov.w	r1, #20
     fe8:	strb	r4, [r2, #4]
     fea:	strb	r1, [r2, #25]
      _b = b;
     fec:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
     ff0:	strb	r4, [r2, #19]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     ff2:	movs	r4, #46	; 0x2e
      _s = s;
      _b = b;
     ff4:	strb	r1, [r2, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     ff6:	mov.w	r1, #115	; 0x73
      _s = s;
      _b = b;
     ffa:	strb.w	fp, [r2, #11]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
     ffe:	strb	r1, [r2, #27]
      _s = s;
    1000:	mov.w	r1, #26
    1004:	strb.w	r8, [r2, #22]
    1008:	strb	r1, [r2, #28]
      _b = b;
    100a:	mvn.w	r1, #119	; 0x77
    100e:	strb	r1, [r2, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1010:	mvn.w	r1, #116	; 0x74
    1014:	strb	r1, [r2, #30]
      _s = s;
    1016:	mov.w	r1, #48	; 0x30
    101a:	strb	r1, [r2, #31]
      _b = b;
    101c:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1020:	strb.w	r0, [r2, #57]	; 0x39
      _s = s;
      _b = b;
    1024:	strb.w	r1, [r2, #32]
    1028:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    102c:	strb.w	r0, [r2, #58]	; 0x3a
      _b = b;
    1030:	strb.w	r1, [r2, #50]	; 0x32
    1034:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1038:	strb.w	r0, [r2, #60]	; 0x3c
      _s = s;
      _b = b;
    103c:	strb.w	r1, [r2, #53]	; 0x35
    1040:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1044:	strb.w	r0, [r2, #61]	; 0x3d
      _b = b;
    1048:	strb.w	r1, [r2, #59]	; 0x3b
    104c:	mov.w	r1, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1050:	strb.w	r0, [r2, #63]	; 0x3f
      _s = s;
      _b = b;
    1054:	strb.w	r1, [r2, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1058:	mvn.w	r1, #117	; 0x75
      _s = s;
    105c:	strb.w	r0, [r2, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1060:	strb.w	r1, [r2, #33]	; 0x21
    1064:	strb.w	r1, [r2, #54]	; 0x36
      _s = s;
    1068:	mvn.w	r1, #70	; 0x46
    106c:	strb.w	r7, [r2, #40]	; 0x28
      _b = b;
    1070:	movs	r7, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1072:	strb.w	r1, [r2, #34]	; 0x22
      _b = b;
    1076:	mov.w	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    107a:	strb.w	r6, [r2, #46]	; 0x2e
      _b = b;
    107e:	movs	r6, #167	; 0xa7
    1080:	strb.w	r1, [r2, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1084:	mvn.w	r1, #121	; 0x79
      _s = s;
    1088:	strb.w	r5, [r2, #55]	; 0x37
      _b = b;
    108c:	movs	r5, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    108e:	strb.w	r1, [r2, #36]	; 0x24
      _s = s;
    1092:	mvn.w	r1, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1096:	strb.w	sl, [r2, #42]	; 0x2a
      _s = s;
    109a:	strb.w	r1, [r2, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    109e:	mvn.w	r1, #125	; 0x7d
    10a2:	strb.w	r1, [r2, #39]	; 0x27
    10a6:	strb.w	r1, [r2, #45]	; 0x2d
    10aa:	strb.w	r1, [r2, #48]	; 0x30
      _s = s;
      _b = b;
    10ae:	mvn.w	r1, #122	; 0x7a
    10b2:	strb.w	r1, [r2, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    10b6:	mvn.w	r1, #83	; 0x53
    10ba:	strb.w	r1, [r2, #43]	; 0x2b
      _b = b;
    10be:	mvn.w	r1, #45	; 0x2d
    10c2:	strb.w	r1, [r2, #44]	; 0x2c
    10c6:	mvn.w	r1, #33	; 0x21
    10ca:	strb.w	r1, [r2, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    10ce:	mvn.w	r1, #96	; 0x60
    10d2:	strb.w	r1, [r2, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    10d6:	mvn.w	r1, #120	; 0x78
    10da:	strb.w	r1, [r2, #51]	; 0x33
      _s = s;
    10de:	mov.w	r1, #51	; 0x33
    10e2:	strb.w	r1, [r2, #52]	; 0x34
      _b = b;
    10e6:	mvn.w	r1, #9
    10ea:	strb.w	r1, [r2, #56]	; 0x38
    10ee:	mvn.w	r1, #3
    10f2:	strb.w	r1, [r2, #62]	; 0x3e
    10f6:	strb.w	r1, [r2, #65]	; 0x41
    10fa:	strb.w	r1, [r2, #68]	; 0x44
    10fe:	strb.w	r1, [r2, #71]	; 0x47
    1102:	strb.w	r1, [r2, #74]	; 0x4a
    1106:	strb.w	r1, [r2, #77]	; 0x4d
    110a:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    110e:	strb.w	r0, [r2, #66]	; 0x42
      _s = s;
      _b = b;
    1112:	strb.w	r1, [r2, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1116:	mov.w	r1, #5
    111a:	strb.w	r0, [r2, #67]	; 0x43
    111e:	strb.w	r1, [r2, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1122:	mvn.w	r1, #116	; 0x74
    1126:	strb.w	r0, [r2, #69]	; 0x45
    112a:	strb.w	r1, [r2, #84]	; 0x54
      _s = s;
    112e:	mov.w	r1, #11
    1132:	strb.w	r0, [r2, #70]	; 0x46
    1136:	strb.w	r1, [r2, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    113a:	mov.w	r1, #95	; 0x5f
    113e:	strb.w	r0, [r2, #72]	; 0x48
    1142:	strb.w	r1, [r2, #81]	; 0x51
      _s = s;
    1146:	mvn.w	r1, #118	; 0x76
    114a:	strb.w	r0, [r2, #73]	; 0x49
    114e:	strb.w	r1, [r2, #85]	; 0x55
      _b = b;
    1152:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1156:	strb.w	r0, [r2, #75]	; 0x4b
      _s = s;
      _b = b;
    115a:	strb.w	r1, [r2, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    115e:	mov.w	r1, #94	; 0x5e
      _s = s;
    1162:	strb.w	r0, [r2, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1166:	strb.w	r1, [r2, #87]	; 0x57
    116a:	mov.w	r1, #96	; 0x60
    116e:	strb.w	r0, [r2, #78]	; 0x4e
    1172:	strb.w	r1, [r2, #90]	; 0x5a
      _s = s;
      _b = b;
    1176:	mvn.w	r1, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    117a:	strb.w	r0, [r2, #79]	; 0x4f
      _b = b;
    117e:	strb.w	r1, [r2, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1182:	mov.w	r1, #37	; 0x25
      _b = b;
    1186:	strb.w	r9, [r2, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    118a:	mov.w	r9, #3
    118e:	strb.w	r1, [r2, #94]	; 0x5e
      _b = b;
    1192:	mvn.w	r1, #99	; 0x63
    1196:	strb.w	ip, [r2, #89]	; 0x59
    119a:	mov.w	ip, #103	; 0x67
    119e:	strb.w	r1, [r2, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    11a2:	mov.w	r1, #60	; 0x3c
      _s = s;
    11a6:	strb.w	lr, [r2, #91]	; 0x5b
      _b = b;
    11aa:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    11ae:	strb.w	r1, [r2, #96]	; 0x60
      _s = s;
    11b2:	mov.w	r1, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    11b6:	strb.w	r4, [r2, #93]	; 0x5d
      _s = s;
      _b = b;
    11ba:	movs	r4, #253	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    11bc:	strb.w	r1, [r2, #97]	; 0x61
      _b = b;
    11c0:	mov.w	r1, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    11c4:	strb.w	sl, [r2, #120]	; 0x78
      _s = s;
      _b = b;
    11c8:	strb.w	r1, [r2, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    11cc:	mvn.w	r1, #39	; 0x27
    11d0:	strb.w	fp, [r2, #124]	; 0x7c
    11d4:	mov.w	fp, #44	; 0x2c
    11d8:	strb.w	r1, [r2, #103]	; 0x67
      _b = b;
    11dc:	mov.w	r1, #106	; 0x6a
    11e0:	strb.w	r7, [r2, #110]	; 0x6e
    11e4:	movs	r7, #59	; 0x3b
    11e6:	strb.w	r1, [r2, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    11ea:	mov.w	r1, #95	; 0x5f
      _b = b;
    11ee:	strb.w	r6, [r2, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    11f2:	movs	r6, #1
    11f4:	strb.w	r1, [r2, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    11f8:	mvn.w	r1, #116	; 0x74
      _s = s;
      _b = b;
    11fc:	strb.w	r5, [r2, #116]	; 0x74
    1200:	movs	r5, #214	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1202:	strb.w	r1, [r2, #108]	; 0x6c
    1206:	mvn.w	r1, #121	; 0x79
    120a:	strb.w	r1, [r2, #111]	; 0x6f
      _s = s;
    120e:	mvn.w	r1, #3
    1212:	strb.w	r1, [r2, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1216:	mvn.w	r1, #122	; 0x7a
    121a:	strb.w	r1, [r2, #117]	; 0x75
      _s = s;
    121e:	mov.w	r1, #106	; 0x6a
    1222:	strb.w	r1, [r2, #118]	; 0x76
      _b = b;
    1226:	mvn.w	r1, #34	; 0x22
    122a:	strb.w	r1, [r2, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    122e:	mvn.w	r1, #125	; 0x7d
    1232:	strb.w	r1, [r2, #123]	; 0x7b
    1236:	strb.w	r1, [r2, #126]	; 0x7e
    123a:	strb.w	r1, [r2, #129]	; 0x81
    123e:	mov.w	r1, #105	; 0x69
    1242:	strb.w	r1, [r2, #99]	; 0x63
      _s = s;
    1246:	mvn.w	r1, #69	; 0x45
    124a:	strb.w	r1, [r2, #100]	; 0x64
      _b = b;
    124e:	mov.w	r1, #101	; 0x65
    1252:	strb.w	r1, [r2, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1256:	mov.w	r1, #118	; 0x76
    125a:	strb.w	r1, [r2, #102]	; 0x66
    125e:	mvn.w	r1, #43	; 0x2b
    1262:	strb.w	r1, [r2, #105]	; 0x69
      _s = s;
      _b = b;
    1266:	mov.w	r1, #32
    126a:	strb.w	r1, [r2, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    126e:	mvn.w	r1, #104	; 0x68
    1272:	strb.w	r1, [r2, #109]	; 0x6d
    1276:	mvn.w	r1, #5
    127a:	strb.w	r1, [r2, #112]	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    127e:	mvn.w	r1, #123	; 0x7b
    1282:	strb.w	r1, [r2, #114]	; 0x72
      _s = s;
      _b = b;
    1286:	mvn.w	r1, #80	; 0x50
    128a:	strb.w	r1, [r2, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    128e:	mvn.w	r1, #111	; 0x6f
    1292:	strb.w	r1, [r2, #121]	; 0x79
      _b = b;
    1296:	mvn.w	r1, #29
    129a:	strb.w	r1, [r2, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    129e:	mvn.w	r1, #37	; 0x25
    12a2:	strb.w	r1, [r2, #127]	; 0x7f
      _b = b;
    12a6:	mvn.w	r1, #30
    12aa:	strb.w	r1, [r2, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    12ae:	mvn.w	r1, #59	; 0x3b
    12b2:	strb.w	r1, [r2, #130]	; 0x82
      _b = b;
    12b6:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12ba:	strb.w	sl, [r2, #132]	; 0x84
      _s = s;
      _b = b;
    12be:	strb.w	r1, [r2, #131]	; 0x83
    12c2:	strb.w	r1, [r2, #137]	; 0x89
    12c6:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12ca:	strb.w	r0, [r2, #138]	; 0x8a
      _s = s;
      _b = b;
    12ce:	strb.w	r1, [r2, #140]	; 0x8c
    12d2:	strb.w	r1, [r2, #143]	; 0x8f
    12d6:	strb.w	r1, [r2, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12da:	mov.w	r1, #113	; 0x71
      _s = s;
    12de:	strb.w	r0, [r2, #139]	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12e2:	strb.w	r1, [r2, #156]	; 0x9c
      _s = s;
      _b = b;
    12e6:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12ea:	strb.w	r0, [r2, #141]	; 0x8d
      _s = s;
      _b = b;
    12ee:	strb.w	r1, [r2, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12f2:	mov.w	r1, #51	; 0x33
      _s = s;
    12f6:	strb.w	r0, [r2, #142]	; 0x8e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    12fa:	strb.w	r1, [r2, #159]	; 0x9f
    12fe:	mov.w	r1, #121	; 0x79
    1302:	strb.w	r0, [r2, #144]	; 0x90
    1306:	strb.w	r1, [r2, #162]	; 0xa2
      _s = s;
    130a:	mov.w	r1, #60	; 0x3c
    130e:	strb.w	r0, [r2, #145]	; 0x91
    1312:	strb.w	r1, [r2, #163]	; 0xa3
    1316:	mov.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    131a:	strb.w	r0, [r2, #147]	; 0x93
      _s = s;
    131e:	strb.w	r1, [r2, #136]	; 0x88
    1322:	mov.w	r1, #87	; 0x57
    1326:	strb.w	r0, [r2, #148]	; 0x94
    132a:	strb.w	r1, [r2, #133]	; 0x85
      _b = b;
    132e:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1332:	strb.w	r0, [r2, #150]	; 0x96
      _s = s;
      _b = b;
    1336:	strb.w	r1, [r2, #134]	; 0x86
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    133a:	mvn.w	r1, #107	; 0x6b
      _s = s;
    133e:	strb.w	r0, [r2, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1342:	strb.w	r1, [r2, #135]	; 0x87
      _s = s;
      _b = b;
    1346:	mov.w	r1, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    134a:	strb.w	r0, [r2, #153]	; 0x99
    134e:	b.n	1354 <_GLOBAL__sub_I_nextTime3+0x3f8>
    1350:	.word	0x20004344
      _s = s;
    1354:	strb.w	r0, [r2, #154]	; 0x9a
    1358:	strb.w	r8, [r2, #160]	; 0xa0
    135c:	mov.w	r8, #90	; 0x5a
    1360:	strb.w	r9, [r2, #157]	; 0x9d
      _b = b;
    1364:	mov.w	r9, #240	; 0xf0
    1368:	strb.w	r4, [r2, #146]	; 0x92
    136c:	strb.w	r4, [r2, #149]	; 0x95
    1370:	strb.w	r4, [r2, #152]	; 0x98
    1374:	strb.w	lr, [r2, #161]	; 0xa1
    1378:	strb.w	r1, [r2, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    137c:	mov.w	r1, #32
      _s = s;
      _b = b;
    1380:	strb.w	r7, [r2, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1384:	strb.w	r1, [r2, #165]	; 0xa5
      _s = s;
      _b = b;
    1388:	mov.w	r1, #123	; 0x7b
    138c:	strb.w	r7, [r2, #194]	; 0xc2
    1390:	strb.w	r1, [r2, #173]	; 0xad
    1394:	mov.w	r1, #85	; 0x55
    1398:	strb.w	r1, [r2, #176]	; 0xb0
    139c:	mvn.w	r1, #118	; 0x76
    13a0:	strb.w	r1, [r2, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    13a4:	mov.w	r1, #121	; 0x79
    13a8:	strb.w	r1, [r2, #180]	; 0xb4
    13ac:	mvn.w	r1, #39	; 0x27
    13b0:	strb.w	r1, [r2, #183]	; 0xb7
      _s = s;
    13b4:	mvn.w	r1, #104	; 0x68
    13b8:	strb.w	r1, [r2, #187]	; 0xbb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    13bc:	mvn.w	r1, #118	; 0x76
    13c0:	strb.w	r1, [r2, #189]	; 0xbd
      _s = s;
    13c4:	mvn.w	r1, #32
    13c8:	strb.w	r1, [r2, #190]	; 0xbe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    13cc:	mvn.w	r1, #119	; 0x77
    13d0:	strb.w	r1, [r2, #192]	; 0xc0
    13d4:	mvn.w	r1, #123	; 0x7b
    13d8:	strb.w	r1, [r2, #195]	; 0xc3
      _s = s;
    13dc:	mvn.w	r1, #117	; 0x75
    13e0:	strb.w	r1, [r2, #196]	; 0xc4
      _b = b;
    13e4:	mov.w	r1, #30
    13e8:	strb.w	r1, [r2, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    13ec:	mvn.w	r1, #82	; 0x52
    13f0:	strb.w	r1, [r2, #166]	; 0xa6
      _b = b;
    13f4:	mvn.w	r1, #105	; 0x69
    13f8:	strb.w	r1, [r2, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    13fc:	mov.w	r1, #54	; 0x36
    1400:	strb.w	r1, [r2, #168]	; 0xa8
      _s = s;
    1404:	mov.w	r1, #97	; 0x61
    1408:	strb.w	r1, [r2, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    140c:	strb.w	r1, [r2, #177]	; 0xb1
      _s = s;
      _b = b;
    1410:	mov.w	r1, #120	; 0x78
    1414:	strb.w	r1, [r2, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1418:	mov.w	r1, #25
    141c:	strb.w	r1, [r2, #171]	; 0xab
      _s = s;
    1420:	mvn.w	r1, #67	; 0x43
    1424:	strb.w	r1, [r2, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1428:	mov.w	r1, #28
    142c:	strb.w	r1, [r2, #174]	; 0xae
      _s = s;
    1430:	mvn.w	r1, #93	; 0x5d
    1434:	strb.w	r1, [r2, #175]	; 0xaf
    1438:	strb.w	r1, [r2, #181]	; 0xb5
    143c:	mvn.w	r1, #81	; 0x51
    1440:	strb.w	r1, [r2, #178]	; 0xb2
      _b = b;
    1444:	mvn.w	r1, #101	; 0x65
    1448:	strb.w	r1, [r2, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    144c:	mov.w	r1, #93	; 0x5d
    1450:	strb.w	r1, [r2, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1454:	mvn.w	r1, #112	; 0x70
    1458:	strb.w	r1, [r2, #186]	; 0xba
      _s = s;
      _b = b;
    145c:	mov.w	r1, #57	; 0x39
    1460:	strb.w	r1, [r2, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1464:	mvn.w	r1, #22
    1468:	strb.w	r1, [r2, #193]	; 0xc1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    146c:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    1470:	strb.w	ip, [r2, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1474:	mov.w	ip, #31
    1478:	strb.w	r1, [r2, #198]	; 0xc6
      _s = s;
    147c:	mov.w	r1, #57	; 0x39
      _b = b;
    1480:	strb.w	lr, [r2, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1484:	strb.w	r1, [r2, #199]	; 0xc7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1488:	mvn.w	r1, #125	; 0x7d
    148c:	strb.w	r0, [r2, #222]	; 0xde
    1490:	strb.w	r1, [r2, #201]	; 0xc9
      _s = s;
      _b = b;
    1494:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1498:	strb.w	r0, [r2, #223]	; 0xdf
      _b = b;
    149c:	strb.w	r1, [r2, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    14a0:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    14a4:	strb.w	r4, [r2, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    14a8:	strb.w	r1, [r2, #204]	; 0xcc
    14ac:	mvn.w	r1, #122	; 0x7a
    14b0:	strb.w	r0, [r2, #225]	; 0xe1
    14b4:	strb.w	r1, [r2, #207]	; 0xcf
    14b8:	mvn.w	r1, #112	; 0x70
      _s = s;
    14bc:	strb.w	r0, [r2, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    14c0:	strb.w	r1, [r2, #210]	; 0xd2
    14c4:	mvn.w	r1, #96	; 0x60
      _s = s;
      _b = b;
    14c8:	strb.w	r4, [r2, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    14cc:	strb.w	r1, [r2, #213]	; 0xd5
    14d0:	mvn.w	r1, #105	; 0x69
    14d4:	strb.w	r0, [r2, #228]	; 0xe4
    14d8:	strb.w	r1, [r2, #216]	; 0xd8
      _s = s;
    14dc:	mov.w	r1, #26
    14e0:	strb.w	r0, [r2, #229]	; 0xe5
    14e4:	strb.w	r1, [r2, #217]	; 0xd9
      _b = b;
    14e8:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    14ec:	strb.w	fp, [r2, #211]	; 0xd3
      _b = b;
    14f0:	mov.w	fp, #170	; 0xaa
    14f4:	strb.w	r1, [r2, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    14f8:	mvn.w	r1, #65	; 0x41
      _b = b;
    14fc:	strb.w	r5, [r2, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1500:	movs	r5, #193	; 0xc1
    1502:	strb.w	r1, [r2, #202]	; 0xca
    1506:	mvn.w	r1, #51	; 0x33
    150a:	strb.w	r6, [r2, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    150e:	movs	r6, #22
      _s = s;
    1510:	strb.w	r1, [r2, #205]	; 0xcd
      _b = b;
    1514:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1518:	strb.w	r8, [r2, #208]	; 0xd0
      _b = b;
    151c:	strb.w	r1, [r2, #206]	; 0xce
    1520:	mvn.w	r1, #21
    1524:	strb.w	r1, [r2, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1528:	mov.w	r1, #35	; 0x23
    152c:	strb.w	r1, [r2, #214]	; 0xd6
      _b = b;
    1530:	mvn.w	r1, #74	; 0x4a
    1534:	strb.w	r1, [r2, #215]	; 0xd7
    1538:	mvn.w	r1, #66	; 0x42
    153c:	strb.w	r1, [r2, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1540:	mov.w	r1, #127	; 0x7f
    1544:	strb.w	r1, [r2, #219]	; 0xdb
      _s = s;
      _b = b;
    1548:	mvn.w	r1, #3
    154c:	strb.w	r4, [r2, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1550:	movs	r4, #55	; 0x37
      _s = s;
      _b = b;
    1552:	strb.w	r1, [r2, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1556:	mov.w	r1, #106	; 0x6a
      _s = s;
      _b = b;
    155a:	strb.w	lr, [r2, #242]	; 0xf2
    155e:	mov.w	lr, #169	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1562:	strb.w	r1, [r2, #234]	; 0xea
      _s = s;
      _b = b;
    1566:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    156a:	strb.w	r0, [r2, #231]	; 0xe7
      _s = s;
      _b = b;
    156e:	strb.w	r1, [r2, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1572:	mvn.w	r1, #82	; 0x52
    1576:	strb.w	r0, [r2, #232]	; 0xe8
    157a:	strb.w	r1, [r2, #241]	; 0xf1
      _b = b;
    157e:	mvn.w	r1, #67	; 0x43
    1582:	strb.w	r9, [r2, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1586:	mov.w	r9, #17
      _b = b;
    158a:	strb.w	r1, [r2, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    158e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1592:	strb.w	ip, [r2, #240]	; 0xf0
      _s = s;
    1596:	strb.w	r1, [r2, #250]	; 0xfa
      _b = b;
    159a:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    159e:	strb.w	r5, [r2, #247]	; 0xf7
      _b = b;
    15a2:	strb.w	r1, [r2, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15a6:	mov.w	r1, #77	; 0x4d
    15aa:	strb.w	r6, [r2, #249]	; 0xf9
    15ae:	strb.w	r1, [r2, #255]	; 0xff
      _s = s;
    15b2:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15b6:	strb.w	r4, [r2, #252]	; 0xfc
      _s = s;
    15ba:	strb.w	r1, [r2, #259]	; 0x103
      _b = b;
    15be:	mvn.w	r1, #74	; 0x4a
    15c2:	strb.w	fp, [r2, #254]	; 0xfe
    15c6:	strb.w	r1, [r2, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15ca:	mvn.w	r1, #43	; 0x2b
      _s = s;
    15ce:	strb.w	fp, [r2, #256]	; 0x100
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15d2:	mov.w	fp, #149	; 0x95
    15d6:	strb.w	r1, [r2, #261]	; 0x105
      _s = s;
    15da:	mov.w	r1, #87	; 0x57
      _b = b;
    15de:	strb.w	lr, [r2, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    15e2:	strb.w	r1, [r2, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15e6:	mov.w	r1, #33	; 0x21
    15ea:	strb.w	r1, [r2, #243]	; 0xf3
      _s = s;
    15ee:	mov.w	r1, #66	; 0x42
    15f2:	strb.w	r1, [r2, #235]	; 0xeb
      _b = b;
    15f6:	mvn.w	r1, #110	; 0x6e
    15fa:	strb.w	r1, [r2, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    15fe:	mov.w	r1, #102	; 0x66
    1602:	strb.w	r1, [r2, #237]	; 0xed
      _s = s;
    1606:	mov.w	r1, #72	; 0x48
    160a:	strb.w	r1, [r2, #238]	; 0xee
    160e:	mvn.w	r1, #113	; 0x71
    1612:	strb.w	r1, [r2, #244]	; 0xf4
    1616:	strb.w	r1, [r2, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    161a:	mov.w	r1, #29
    161e:	strb.w	r1, [r2, #246]	; 0xf6
    1622:	mov.w	r1, #112	; 0x70
    1626:	strb.w	r1, [r2, #258]	; 0x102
      _s = s;
      _b = b;
    162a:	mov.w	r1, #32
    162e:	strb.w	r8, [r2, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1632:	mov.w	r8, #69	; 0x45
      _b = b;
    1636:	strb.w	r1, [r2, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    163a:	mvn.w	r1, #125	; 0x7d
      _s = s;
    163e:	strb.w	r4, [r2, #283]	; 0x11b
    1642:	movs	r4, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1644:	strb.w	r1, [r2, #264]	; 0x108
    1648:	mvn.w	r1, #117	; 0x75
      _s = s;
    164c:	strb.w	r9, [r2, #286]	; 0x11e
      _b = b;
    1650:	mov.w	r9, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1654:	strb.w	r1, [r2, #267]	; 0x10b
    1658:	mvn.w	r1, #120	; 0x78
    165c:	strb.w	fp, [r2, #294]	; 0x126
    1660:	mov.w	fp, #146	; 0x92
    1664:	strb.w	r1, [r2, #270]	; 0x10e
    1668:	mvn.w	r1, #118	; 0x76
      _s = s;
      _b = b;
    166c:	strb.w	r5, [r2, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1670:	strb.w	r1, [r2, #273]	; 0x111
      _s = s;
    1674:	mvn.w	r1, #30
    1678:	strb.w	r4, [r2, #271]	; 0x10f
    167c:	strb.w	r1, [r2, #274]	; 0x112
      _b = b;
    1680:	mov.w	r1, #51	; 0x33
    1684:	strb.w	r4, [r2, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1688:	movs	r4, #215	; 0xd7
      _b = b;
    168a:	strb.w	r1, [r2, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    168e:	mvn.w	r1, #123	; 0x7b
      _s = s;
    1692:	strb.w	r8, [r2, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1696:	strb.w	r1, [r2, #276]	; 0x114
    169a:	mvn.w	r1, #122	; 0x7a
      _s = s;
    169e:	strb.w	r8, [r2, #289]	; 0x121
      _b = b;
    16a2:	mov.w	r8, #209	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    16a6:	strb.w	r1, [r2, #279]	; 0x117
      _s = s;
    16aa:	mov.w	r1, #48	; 0x30
      _b = b;
    16ae:	strb.w	r9, [r2, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    16b2:	strb.w	r1, [r2, #280]	; 0x118
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    16b6:	mvn.w	r1, #119	; 0x77
    16ba:	strb.w	fp, [r2, #288]	; 0x120
    16be:	strb.w	r1, [r2, #282]	; 0x11a
    16c2:	mvn.w	r1, #120	; 0x78
    16c6:	strb.w	fp, [r2, #291]	; 0x123
    16ca:	strb.w	r1, [r2, #285]	; 0x11d
      _s = s;
    16ce:	mov.w	r1, #72	; 0x48
    16d2:	strb.w	r1, [r2, #292]	; 0x124
      _b = b;
    16d6:	mvn.w	r1, #52	; 0x34
    16da:	strb.w	r1, [r2, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    16de:	mov.w	r1, #35	; 0x23
    16e2:	strb.w	r1, [r2, #295]	; 0x127
      _b = b;
    16e6:	mov.w	r1, #71	; 0x47
    16ea:	strb.w	r1, [r2, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    16ee:	mov.w	r1, #34	; 0x22
    16f2:	strb.w	r1, [r2, #265]	; 0x109
      _b = b;
    16f6:	mov.w	r1, #110	; 0x6e
    16fa:	strb.w	r1, [r2, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    16fe:	mvn.w	r1, #108	; 0x6c
    1702:	strb.w	r1, [r2, #268]	; 0x10c
      _b = b;
    1706:	mov.w	r1, #99	; 0x63
    170a:	strb.w	r1, [r2, #278]	; 0x116
    170e:	mvn.w	r1, #54	; 0x36
    1712:	strb.w	r1, [r2, #290]	; 0x122
    1716:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    171a:	strb.w	r7, [r2, #301]	; 0x12d
      _b = b;
    171e:	strb.w	r1, [r2, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1722:	mov.w	r1, #66	; 0x42
    1726:	strb.w	r7, [r2, #316]	; 0x13c
      _b = b;
    172a:	movs	r7, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    172c:	strb.w	r1, [r2, #298]	; 0x12a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1730:	mvn.w	r1, #123	; 0x7b
    1734:	strb.w	ip, [r2, #321]	; 0x141
      _s = s;
    1738:	mov.w	ip, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    173c:	strb.w	r1, [r2, #300]	; 0x12c
      _s = s;
      _b = b;
    1740:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1744:	strb.w	r4, [r2, #319]	; 0x13f
      _b = b;
    1748:	movs	r4, #183	; 0xb7
    174a:	strb.w	r1, [r2, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    174e:	mvn.w	r1, #111	; 0x6f
      _s = s;
      _b = b;
    1752:	strb.w	r8, [r2, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1756:	strb.w	r1, [r2, #303]	; 0x12f
      _s = s;
    175a:	mov.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    175e:	strb.w	sl, [r2, #297]	; 0x129
      _s = s;
    1762:	strb.w	r1, [r2, #304]	; 0x130
      _b = b;
    1766:	mvn.w	r1, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    176a:	strb.w	r0, [r2, #306]	; 0x132
      _s = s;
      _b = b;
    176e:	strb.w	r1, [r2, #305]	; 0x131
    1772:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1776:	strb.w	r0, [r2, #307]	; 0x133
      _b = b;
    177a:	strb.w	r1, [r2, #308]	; 0x134
    177e:	strb.w	r1, [r2, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1782:	mvn.w	r1, #32
    1786:	strb.w	r0, [r2, #309]	; 0x135
    178a:	strb.w	r1, [r2, #312]	; 0x138
    178e:	mov.w	r1, #77	; 0x4d
      _s = s;
    1792:	strb.w	r0, [r2, #310]	; 0x136
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1796:	strb.w	r1, [r2, #315]	; 0x13b
    179a:	mov.w	r1, #34	; 0x22
      _s = s;
    179e:	strb.w	ip, [r2, #313]	; 0x139
    17a2:	mov.w	ip, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17a6:	strb.w	r1, [r2, #318]	; 0x13e
      _s = s;
      _b = b;
    17aa:	mvn.w	r1, #22
    17ae:	strb.w	r7, [r2, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17b2:	movs	r7, #88	; 0x58
      _s = s;
      _b = b;
    17b4:	strb.w	r1, [r2, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    17b8:	mvn.w	r1, #112	; 0x70
    17bc:	strb.w	r1, [r2, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17c0:	mov.w	r1, #28
    17c4:	strb.w	r1, [r2, #324]	; 0x144
      _s = s;
    17c8:	mvn.w	r1, #59	; 0x3b
    17cc:	strb.w	r1, [r2, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17d0:	mov.w	r1, #20
    17d4:	strb.w	r1, [r2, #327]	; 0x147
      _s = s;
    17d8:	mvn.w	r1, #120	; 0x78
    17dc:	strb.w	r1, [r2, #328]	; 0x148
      _b = b;
    17e0:	mvn.w	r1, #49	; 0x31
    17e4:	strb.w	r1, [r2, #317]	; 0x13d
    17e8:	mvn.w	r1, #31
    17ec:	strb.w	r1, [r2, #323]	; 0x143
    17f0:	mvn.w	r1, #54	; 0x36
    17f4:	strb.w	r4, [r2, #326]	; 0x146
    17f8:	strb.w	r1, [r2, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17fc:	mov.w	r1, #29
      _s = s;
      _b = b;
    1800:	strb.w	r5, [r2, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1804:	strb.w	r1, [r2, #330]	; 0x14a
      _s = s;
    1808:	mvn.w	r1, #96	; 0x60
      _b = b;
    180c:	strb.w	lr, [r2, #356]	; 0x164
    1810:	mov.w	lr, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1814:	strb.w	r1, [r2, #331]	; 0x14b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1818:	mov.w	r1, #112	; 0x70
      _s = s;
    181c:	strb.w	r5, [r2, #361]	; 0x169
    1820:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1822:	strb.w	r1, [r2, #336]	; 0x150
      _s = s;
    1826:	mov.w	r1, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    182a:	strb.w	r7, [r2, #333]	; 0x14d
      _s = s;
    182e:	movs	r7, #61	; 0x3d
    1830:	strb.w	r1, [r2, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1834:	mov.w	r1, #123	; 0x7b
      _s = s;
    1838:	strb.w	r6, [r2, #340]	; 0x154
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    183c:	strb.w	r1, [r2, #339]	; 0x153
      _s = s;
      _b = b;
    1840:	mvn.w	r1, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1844:	strb.w	r6, [r2, #343]	; 0x157
      _b = b;
    1848:	strb.w	r1, [r2, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    184c:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    1850:	strb.w	lr, [r2, #344]	; 0x158
    1854:	mov.w	lr, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1858:	strb.w	r1, [r2, #342]	; 0x156
    185c:	mvn.w	r1, #125	; 0x7d
      _s = s;
    1860:	strb.w	r5, [r2, #358]	; 0x166
      _b = b;
    1864:	movs	r5, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1866:	strb.w	r1, [r2, #345]	; 0x159
    186a:	mvn.w	r1, #123	; 0x7b
      _s = s;
    186e:	strb.w	r7, [r2, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1872:	strb.w	r1, [r2, #348]	; 0x15c
      _s = s;
    1876:	mvn.w	r1, #4
    187a:	strb.w	r7, [r2, #346]	; 0x15a
    187e:	movs	r7, #76	; 0x4c
    1880:	strb.w	r1, [r2, #349]	; 0x15d
      _b = b;
    1884:	mvn.w	r1, #112	; 0x70
    1888:	strb.w	r1, [r2, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    188c:	mov.w	r1, #115	; 0x73
    1890:	strb.w	r1, [r2, #352]	; 0x160
      _b = b;
    1894:	mvn.w	r1, #102	; 0x66
    1898:	strb.w	r1, [r2, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    189c:	mov.w	r1, #127	; 0x7f
    18a0:	strb.w	r1, [r2, #354]	; 0x162
      _s = s;
    18a4:	mov.w	r1, #57	; 0x39
    18a8:	strb.w	r1, [r2, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18ac:	mvn.w	r1, #123	; 0x7b
    18b0:	strb.w	r1, [r2, #357]	; 0x165
      _s = s;
      _b = b;
    18b4:	mvn.w	r1, #118	; 0x76
    18b8:	strb.w	r1, [r2, #359]	; 0x167
    18bc:	mvn.w	r1, #61	; 0x3d
    18c0:	strb.w	r1, [r2, #335]	; 0x14f
    18c4:	mvn.w	r1, #78	; 0x4e
    18c8:	strb.w	r1, [r2, #338]	; 0x152
    18cc:	mvn.w	r1, #73	; 0x49
    18d0:	strb.w	r1, [r2, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18d4:	mov.w	r1, #125	; 0x7d
    18d8:	strb.w	r1, [r2, #351]	; 0x15f
    18dc:	mvn.w	r1, #114	; 0x72
    18e0:	strb.w	r1, [r2, #360]	; 0x168
      _s = s;
      _b = b;
    18e4:	mov.w	r1, #121	; 0x79
    18e8:	strb.w	r4, [r2, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    18ec:	movs	r4, #92	; 0x5c
      _b = b;
    18ee:	strb.w	r1, [r2, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    18f2:	mov.w	r1, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18f6:	strb.w	r0, [r2, #387]	; 0x183
      _s = s;
    18fa:	strb.w	r1, [r2, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18fe:	mvn.w	r1, #112	; 0x70
      _s = s;
    1902:	strb.w	r0, [r2, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1906:	movs	r0, #155	; 0x9b
    1908:	strb.w	r1, [r2, #363]	; 0x16b
      _s = s;
    190c:	mov.w	r1, #115	; 0x73
      _b = b;
    1910:	strb.w	lr, [r2, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1914:	mov.w	lr, #192	; 0xc0
    1918:	strb.w	r1, [r2, #364]	; 0x16c
      _b = b;
    191c:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1920:	strb.w	r7, [r2, #391]	; 0x187
      _b = b;
    1924:	movs	r7, #243	; 0xf3
    1926:	strb.w	r1, [r2, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    192a:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    192e:	strb.w	r5, [r2, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1932:	movs	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1934:	strb.w	r1, [r2, #366]	; 0x16e
      _s = s;
      _b = b;
    1938:	mvn.w	r1, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    193c:	strb.w	sl, [r2, #378]	; 0x17a
      _s = s;
      _b = b;
    1940:	strb.w	r1, [r2, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1944:	mvn.w	r1, #122	; 0x7a
      _s = s;
    1948:	strb.w	ip, [r2, #373]	; 0x175
      _b = b;
    194c:	mov.w	ip, #184	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1950:	strb.w	r1, [r2, #372]	; 0x174
    1954:	mvn.w	r1, #123	; 0x7b
      _s = s;
    1958:	strb.w	r4, [r2, #394]	; 0x18a
      _b = b;
    195c:	movs	r4, #160	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    195e:	strb.w	r1, [r2, #375]	; 0x177
      _s = s;
    1962:	mov.w	r1, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1966:	strb.w	r0, [r2, #369]	; 0x171
      _s = s;
    196a:	strb.w	r1, [r2, #376]	; 0x178
    196e:	mvn.w	r1, #79	; 0x4f
      _b = b;
    1972:	strb.w	r7, [r2, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1976:	strb.w	r1, [r2, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    197a:	mvn.w	r1, #122	; 0x7a
      _s = s;
    197e:	strb.w	lr, [r2, #382]	; 0x17e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1982:	strb.w	r1, [r2, #381]	; 0x17d
    1986:	strb.w	r1, [r2, #384]	; 0x180
      _s = s;
      _b = b;
    198a:	mvn.w	r1, #43	; 0x2b
    198e:	strb.w	lr, [r2, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1992:	mov.w	lr, #178	; 0xb2
      _b = b;
    1996:	strb.w	r1, [r2, #386]	; 0x182
    199a:	mvn.w	r1, #5
    199e:	strb.w	r1, [r2, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19a2:	mvn.w	r1, #37	; 0x25
    19a6:	strb.w	r1, [r2, #390]	; 0x186
    19aa:	mov.w	r1, #101	; 0x65
    19ae:	strb.w	r1, [r2, #393]	; 0x189
      _s = s;
    19b2:	mov.w	r1, #45	; 0x2d
    19b6:	strb.w	r1, [r2, #370]	; 0x172
      _b = b;
    19ba:	mvn.w	r1, #23
    19be:	strb.w	r1, [r2, #380]	; 0x17c
    19c2:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19c6:	strb.w	r5, [r2, #385]	; 0x181
      _b = b;
    19ca:	strb.w	r1, [r2, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19ce:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19d2:	strb.w	r6, [r2, #399]	; 0x18f
    19d6:	movs	r6, #21
      _s = s;
    19d8:	strb.w	r1, [r2, #400]	; 0x190
      _b = b;
    19dc:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19e0:	strb.w	r7, [r2, #403]	; 0x193
      _b = b;
    19e4:	movs	r7, #70	; 0x46
    19e6:	strb.w	r1, [r2, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19ea:	mvn.w	r1, #4
      _b = b;
    19ee:	strb.w	r8, [r2, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19f2:	mov.w	r8, #40	; 0x28
      _s = s;
    19f6:	strb.w	r1, [r2, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19fa:	mov.w	r1, #54	; 0x36
      _s = s;
      _b = b;
    19fe:	strb.w	r0, [r2, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a02:	movs	r0, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a04:	strb.w	r1, [r2, #408]	; 0x198
      _s = s;
      _b = b;
    1a08:	mvn.w	r1, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a0c:	strb.w	r6, [r2, #402]	; 0x192
      _s = s;
    1a10:	movs	r6, #166	; 0xa6
      _b = b;
    1a12:	strb.w	r1, [r2, #410]	; 0x19a
    1a16:	mov.w	r1, #127	; 0x7f
    1a1a:	strb.w	r4, [r2, #395]	; 0x18b
    1a1e:	strb.w	r1, [r2, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a22:	mov.w	r1, #95	; 0x5f
    1a26:	strb.w	r5, [r2, #405]	; 0x195
    1a2a:	strb.w	r1, [r2, #414]	; 0x19e
      _s = s;
    1a2e:	mov.w	r1, #87	; 0x57
      _b = b;
    1a32:	strb.w	fp, [r2, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a36:	strb.w	r1, [r2, #415]	; 0x19f
      _b = b;
    1a3a:	mov.w	r1, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a3e:	strb.w	r8, [r2, #396]	; 0x18c
    1a42:	mvn.w	r8, #125	; 0x7d
      _s = s;
      _b = b;
    1a46:	strb.w	r1, [r2, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a4a:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    1a4e:	strb.w	ip, [r2, #404]	; 0x194
    1a52:	mov.w	ip, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a56:	strb.w	r1, [r2, #417]	; 0x1a1
      _s = s;
    1a5a:	mov.w	r1, #105	; 0x69
    1a5e:	strb.w	lr, [r2, #412]	; 0x19c
      _b = b;
    1a62:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a66:	strb.w	r1, [r2, #418]	; 0x1a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a6a:	mov.w	r1, #127	; 0x7f
      _s = s;
      _b = b;
    1a6e:	strb.w	r7, [r2, #419]	; 0x1a3
    1a72:	movs	r7, #229	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a74:	strb.w	r1, [r2, #420]	; 0x1a4
    1a78:	mvn.w	r1, #123	; 0x7b
      _s = s;
    1a7c:	strb.w	r0, [r2, #421]	; 0x1a5
    1a80:	movs	r0, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a82:	strb.w	r1, [r2, #423]	; 0x1a7
      _s = s;
    1a86:	mvn.w	r1, #83	; 0x53
    1a8a:	strb.w	r6, [r2, #397]	; 0x18d
    1a8e:	strb.w	r1, [r2, #424]	; 0x1a8
    1a92:	mov.w	r1, #72	; 0x48
    1a96:	strb.w	r6, [r2, #409]	; 0x199
      _b = b;
    1a9a:	movs	r6, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a9c:	strb.w	r1, [r2, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1aa0:	mov.w	r1, #111	; 0x6f
    1aa4:	strb.w	r1, [r2, #411]	; 0x19b
    1aa8:	mov.w	r1, #126	; 0x7e
    1aac:	strb.w	r1, [r2, #426]	; 0x1aa
      _s = s;
      _b = b;
    1ab0:	mvn.w	r1, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ab4:	strb.w	r8, [r2, #453]	; 0x1c5
      _s = s;
    1ab8:	mvn.w	r8, #78	; 0x4e
      _b = b;
    1abc:	strb.w	r1, [r2, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ac0:	mvn.w	r1, #123	; 0x7b
      _s = s;
    1ac4:	strb.w	r8, [r2, #454]	; 0x1c6
      _b = b;
    1ac8:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1acc:	strb.w	r1, [r2, #429]	; 0x1ad
      _s = s;
    1ad0:	mov.w	r1, #57	; 0x39
      _b = b;
    1ad4:	strb.w	r8, [r2, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ad8:	mov.w	r8, #138	; 0x8a
      _s = s;
    1adc:	strb.w	r1, [r2, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ae0:	mvn.w	r1, #116	; 0x74
    1ae4:	str.w	r8, [sp, #36]	; 0x24
      _s = s;
    1ae8:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1aec:	strb.w	r1, [r2, #432]	; 0x1b0
      _s = s;
    1af0:	mov.w	r1, #99	; 0x63
    1af4:	strb.w	r8, [r2, #457]	; 0x1c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1af8:	mvn.w	r8, #123	; 0x7b
      _s = s;
    1afc:	strb.w	r1, [r2, #433]	; 0x1b1
      _b = b;
    1b00:	mvn.w	r1, #28
    1b04:	strb.w	lr, [r2, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b08:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    1b0c:	strb.w	r1, [r2, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b10:	mvn.w	r1, #117	; 0x75
    1b14:	strb.w	r8, [r2, #459]	; 0x1cb
      _s = s;
    1b18:	mvn.w	r8, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b1c:	strb.w	r1, [r2, #435]	; 0x1b3
      _s = s;
    1b20:	mov.w	r1, #95	; 0x5f
      _b = b;
    1b24:	strb.w	r9, [r2, #431]	; 0x1af
    1b28:	mov.w	r9, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b2c:	strb.w	r1, [r2, #436]	; 0x1b4
      _b = b;
    1b30:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b34:	strb.w	sl, [r2, #450]	; 0x1c2
      _s = s;
      _b = b;
    1b38:	strb.w	r1, [r2, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b3c:	mvn.w	r1, #122	; 0x7a
    1b40:	str.w	lr, [sp, #32]
      _s = s;
      _b = b;
    1b44:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b48:	strb.w	r1, [r2, #438]	; 0x1b6
      _s = s;
    1b4c:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b50:	strb.w	sl, [r2, #456]	; 0x1c8
      _s = s;
    1b54:	strb.w	r1, [r2, #439]	; 0x1b7
      _b = b;
    1b58:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1b5c:	strb.w	r8, [r2, #460]	; 0x1cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b60:	mvn.w	r8, #116	; 0x74
      _s = s;
      _b = b;
    1b64:	strb.w	r1, [r2, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b68:	mvn.w	r1, #116	; 0x74
    1b6c:	strb.w	r1, [r2, #441]	; 0x1b9
      _s = s;
    1b70:	mov.w	r1, #98	; 0x62
    1b74:	strb.w	r1, [r2, #442]	; 0x1ba
      _b = b;
    1b78:	mvn.w	r1, #69	; 0x45
    1b7c:	strb.w	r1, [r2, #443]	; 0x1bb
    1b80:	mov.w	r1, #114	; 0x72
    1b84:	strb.w	r1, [r2, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b88:	mvn.w	r1, #108	; 0x6c
    1b8c:	strb.w	r1, [r2, #447]	; 0x1bf
      _s = s;
    1b90:	mov.w	r1, #34	; 0x22
    1b94:	strb.w	r1, [r2, #448]	; 0x1c0
    1b98:	mov.w	r1, #73	; 0x49
    1b9c:	strb.w	r1, [r2, #451]	; 0x1c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ba0:	movs	r1, #137	; 0x89
    1ba2:	str	r1, [sp, #28]
      _s = s;
    1ba4:	mvn.w	r1, #110	; 0x6e
      _b = b;
    1ba8:	strb.w	r7, [r2, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bac:	mvn.w	r7, #115	; 0x73
    1bb0:	strb.w	r4, [r2, #468]	; 0x1d4
      _s = s;
      _b = b;
    1bb4:	mvn.w	r4, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bb8:	strb.w	r8, [r2, #465]	; 0x1d1
      _s = s;
    1bbc:	mov.w	r8, #29
      _b = b;
    1bc0:	strb.w	r4, [r2, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bc4:	mov.w	r4, #106	; 0x6a
      _s = s;
    1bc8:	strb.w	r8, [r2, #466]	; 0x1d2
    1bcc:	mov.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bd0:	strb.w	r4, [r2, #477]	; 0x1dd
      _s = s;
    1bd4:	mov.w	r4, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bd8:	strb.w	r7, [r2, #444]	; 0x1bc
      _s = s;
    1bdc:	strb.w	r4, [r2, #478]	; 0x1de
      _b = b;
    1be0:	mvn.w	r4, #30
    1be4:	strb.w	r7, [r2, #449]	; 0x1c1
    1be8:	mvn.w	r7, #55	; 0x37
    1bec:	strb.w	r4, [r2, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1bf0:	mvn.w	r4, #102	; 0x66
    1bf4:	strb.w	r8, [r2, #469]	; 0x1d5
    1bf8:	mov.w	r8, #123	; 0x7b
    1bfc:	strb.w	r4, [r2, #481]	; 0x1e1
      _b = b;
    1c00:	mvn.w	r4, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c04:	strb.w	r0, [r2, #445]	; 0x1bd
      _b = b;
    1c08:	strb.w	r4, [r2, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c0c:	movs	r4, #97	; 0x61
      _b = b;
    1c0e:	strb.w	r7, [r2, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c12:	mvn.w	r7, #122	; 0x7a
    1c16:	strb.w	r0, [r2, #471]	; 0x1d7
      _s = s;
    1c1a:	strb.w	r8, [r2, #472]	; 0x1d8
      _b = b;
    1c1e:	mvn.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c22:	str	r4, [sp, #48]	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c24:	mov.w	r4, #112	; 0x70
    1c28:	strb.w	r0, [r2, #486]	; 0x1e6
      _s = s;
    1c2c:	mvn.w	r0, #34	; 0x22
    1c30:	strb.w	r1, [r2, #490]	; 0x1ea
      _b = b;
    1c34:	mov.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c38:	strb.w	r7, [r2, #462]	; 0x1ce
      _s = s;
      _b = b;
    1c3c:	mvn.w	r7, #74	; 0x4a
    1c40:	strb.w	r8, [r2, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c44:	mov.w	r8, #114	; 0x72
    1c48:	strb.w	r4, [r2, #483]	; 0x1e3
      _s = s;
    1c4c:	mov.w	r4, #118	; 0x76
    1c50:	strb.w	r0, [r2, #487]	; 0x1e7
      _b = b;
    1c54:	mov.w	r0, #120	; 0x78
    1c58:	strb.w	r1, [r2, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c5c:	mov.w	r1, #105	; 0x69
      _s = s;
      _b = b;
    1c60:	strb.w	r7, [r2, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c64:	mov.w	r7, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c68:	strb.w	r8, [r2, #474]	; 0x1da
      _s = s;
    1c6c:	mov.w	r8, #96	; 0x60
    1c70:	strb.w	r4, [r2, #484]	; 0x1e4
      _b = b;
    1c74:	movs	r4, #232	; 0xe8
    1c76:	strb.w	r0, [r2, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c7a:	mov.w	r0, #98	; 0x62
    1c7e:	strb.w	r1, [r2, #492]	; 0x1ec
      _s = s;
      _b = b;
    1c82:	movs	r1, #177	; 0xb1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c84:	strb.w	r8, [r2, #475]	; 0x1db
    1c88:	mov.w	r8, #252	; 0xfc
      _b = b;
    1c8c:	str	r4, [sp, #56]	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c8e:	movs	r4, #142	; 0x8e
    1c90:	strb.w	r0, [r2, #489]	; 0x1e9
    1c94:	movs	r0, #140	; 0x8c
      _s = s;
      _b = b;
    1c96:	str	r1, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c98:	mvn.w	r1, #103	; 0x67
    1c9c:	strb.w	r7, [r2, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ca0:	mvn.w	r7, #52	; 0x34
      _s = s;
    1ca4:	strb.w	r1, [r2, #463]	; 0x1cf
      _b = b;
    1ca8:	mvn.w	r1, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cac:	strb.w	r7, [r2, #495]	; 0x1ef
      _s = s;
    1cb0:	mov.w	r7, #95	; 0x5f
      _b = b;
    1cb4:	strb.w	r1, [r2, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cb8:	mov.w	r1, #38	; 0x26
      _s = s;
    1cbc:	strb.w	r7, [r2, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cc0:	mov.w	r7, #121	; 0x79
      _s = s;
      _b = b;
    1cc4:	strb.w	r9, [r2, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cc8:	mov.w	r9, #132	; 0x84
    1ccc:	strb.w	r7, [r2, #498]	; 0x1f2
      _s = s;
    1cd0:	mvn.w	r7, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cd4:	strb.w	r1, [r2, #480]	; 0x1e0
      _s = s;
      _b = b;
    1cd8:	movs	r1, #130	; 0x82
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cda:	strb.w	r7, [r2, #499]	; 0x1f3
      _b = b;
    1cde:	mov.w	r7, #106	; 0x6a
    1ce2:	strb.w	r6, [r2, #485]	; 0x1e5
    1ce6:	strb.w	r7, [r2, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cea:	mvn.w	r7, #73	; 0x49
      _b = b;
    1cee:	strb.w	ip, [r2, #494]	; 0x1ee
    1cf2:	mov.w	ip, #220	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cf6:	strb.w	r7, [r2, #502]	; 0x1f6
      _b = b;
    1cfa:	mvn.w	r7, #80	; 0x50
    1cfe:	strb.w	r5, [r2, #497]	; 0x1f1
    1d02:	strb.w	r7, [r2, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d06:	ldrb.w	r7, [sp, #28]
    1d0a:	strb.w	sl, [r2, #501]	; 0x1f5
    1d0e:	strb.w	r7, [r2, #504]	; 0x1f8
      _s = s;
    1d12:	mvn.w	r7, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d16:	strb.w	r4, [r2, #507]	; 0x1fb
      _s = s;
    1d1a:	strb.w	r7, [r2, #505]	; 0x1f9
      _b = b;
    1d1e:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d22:	strb.w	fp, [r2, #510]	; 0x1fe
      _s = s;
      _b = b;
    1d26:	strb.w	r7, [r2, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d2a:	mvn.w	r7, #45	; 0x2d
    1d2e:	strb.w	r7, [r2, #508]	; 0x1fc
      _b = b;
    1d32:	strb.w	r7, [r2, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d36:	mvn.w	r7, #110	; 0x6e
    1d3a:	strb.w	r7, [r2, #511]	; 0x1ff
      _b = b;
    1d3e:	mvn.w	r7, #37	; 0x25
    1d42:	strb.w	r7, [r2, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d46:	ldrb.w	r7, [sp, #32]
    1d4a:	strb.w	r7, [r2, #513]	; 0x201
      _s = s;
    1d4e:	mvn.w	r7, #112	; 0x70
    1d52:	strb.w	r7, [r2, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d56:	mvn.w	r7, #111	; 0x6f
    1d5a:	strb.w	r7, [r2, #516]	; 0x204
      _s = s;
    1d5e:	mvn.w	r7, #81	; 0x51
    1d62:	strb.w	r7, [r2, #517]	; 0x205
      _b = b;
    1d66:	mvn.w	r7, #31
    1d6a:	strb.w	r7, [r2, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d6e:	mvn.w	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d72:	strb.w	fp, [r2, #519]	; 0x207
      _s = s;
      _b = b;
    1d76:	mvn.w	fp, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d7a:	strb.w	r7, [r2, #520]	; 0x208
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d7e:	ldrb.w	r7, [sp, #36]	; 0x24
      _s = s;
      _b = b;
    1d82:	strb.w	fp, [r2, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d86:	mov.w	fp, #127	; 0x7f
    1d8a:	strb.w	r7, [r2, #522]	; 0x20a
      _s = s;
      _b = b;
    1d8e:	mvn.w	r7, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d92:	strb.w	fp, [r2, #549]	; 0x225
      _s = s;
      _b = b;
    1d96:	mvn.w	fp, #67	; 0x43
    1d9a:	strb.w	r7, [r2, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d9e:	mov.w	r7, #37	; 0x25
      _b = b;
    1da2:	strb.w	fp, [r2, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1da6:	mvn.w	fp, #34	; 0x22
    1daa:	strb.w	r7, [r2, #526]	; 0x20e
    1dae:	mov.w	r7, #79	; 0x4f
      _b = b;
    1db2:	strb.w	lr, [r2, #515]	; 0x203
    1db6:	mov.w	lr, #230	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dba:	strb.w	r7, [r2, #523]	; 0x20b
      _b = b;
    1dbe:	mvn.w	r7, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dc2:	strb.w	sl, [r2, #540]	; 0x21c
      _s = s;
      _b = b;
    1dc6:	strb.w	r7, [r2, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dca:	mov.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    1dce:	strb.w	r1, [r2, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dd2:	strb.w	r7, [r2, #525]	; 0x20d
      _s = s;
      _b = b;
    1dd6:	mvn.w	r7, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dda:	strb.w	r1, [r2, #546]	; 0x222
      _s = s;
      _b = b;
    1dde:	strb.w	r7, [r2, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1de2:	mov.w	r7, #113	; 0x71
      _s = s;
    1de6:	strb.w	sl, [r2, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dea:	strb.w	r7, [r2, #528]	; 0x210
      _s = s;
      _b = b;
    1dee:	mvn.w	r7, #43	; 0x2b
    1df2:	strb.w	r7, [r2, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1df6:	mov.w	r7, #121	; 0x79
    1dfa:	strb.w	r7, [r2, #531]	; 0x213
      _s = s;
    1dfe:	mov.w	r7, #126	; 0x7e
    1e02:	strb.w	r7, [r2, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e06:	strb.w	r7, [r2, #534]	; 0x216
      _s = s;
    1e0a:	mvn.w	r7, #58	; 0x3a
    1e0e:	strb.w	r7, [r2, #535]	; 0x217
      _b = b;
    1e12:	mvn.w	r7, #65	; 0x41
    1e16:	strb.w	r7, [r2, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e1a:	mov.w	r7, #127	; 0x7f
    1e1e:	strb.w	r7, [r2, #537]	; 0x219
      _s = s;
    1e22:	mvn.w	r7, #107	; 0x6b
    1e26:	strb.w	r7, [r2, #538]	; 0x21a
      _b = b;
    1e2a:	ldrb.w	r7, [sp, #40]	; 0x28
    1e2e:	strb.w	r7, [r2, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e32:	mov.w	r7, #125	; 0x7d
    1e36:	strb.w	r7, [r2, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e3a:	mvn.w	r7, #120	; 0x78
    1e3e:	strb.w	r7, [r2, #543]	; 0x21f
      _s = s;
    1e42:	ldrb.w	r7, [sp, #48]	; 0x30
    1e46:	strb.w	r7, [r2, #547]	; 0x223
      _b = b;
    1e4a:	movs	r7, #161	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e4c:	strb.w	sl, [r2, #552]	; 0x228
      _s = s;
    1e50:	strb.w	fp, [r2, #553]	; 0x229
      _b = b;
    1e54:	mvn.w	fp, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e58:	strb.w	r8, [r2, #559]	; 0x22f
      _b = b;
    1e5c:	strb.w	fp, [r2, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e60:	mvn.w	fp, #120	; 0x78
    1e64:	strb.w	r6, [r2, #570]	; 0x23a
    1e68:	strb.w	fp, [r2, #555]	; 0x22b
      _s = s;
    1e6c:	mvn.w	fp, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e70:	strb.w	r6, [r2, #573]	; 0x23d
    1e74:	movs	r6, #133	; 0x85
      _s = s;
    1e76:	strb.w	fp, [r2, #556]	; 0x22c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e7a:	mvn.w	fp, #120	; 0x78
      _s = s;
      _b = b;
    1e7e:	strb.w	r5, [r2, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e82:	movs	r5, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e84:	strb.w	fp, [r2, #558]	; 0x22e
      _s = s;
    1e88:	mov	fp, r8
    1e8a:	mov.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e8e:	strb.w	r6, [r2, #579]	; 0x243
      _s = s;
    1e92:	strb.w	r8, [r2, #529]	; 0x211
      _b = b;
    1e96:	mvn.w	r8, #42	; 0x2a
    1e9a:	strb.w	r8, [r2, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e9e:	mov.w	r8, #82	; 0x52
    1ea2:	strb.w	r8, [r2, #544]	; 0x220
      _b = b;
    1ea6:	mvn.w	r8, #53	; 0x35
    1eaa:	strb.w	r8, [r2, #557]	; 0x22d
    1eae:	mvn.w	r8, #47	; 0x2f
    1eb2:	strb.w	r8, [r2, #533]	; 0x215
    1eb6:	mvn.w	r8, #52	; 0x34
    1eba:	strb.w	r8, [r2, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ebe:	mvn.w	r8, #119	; 0x77
    1ec2:	strb.w	r8, [r2, #561]	; 0x231
      _s = s;
    1ec6:	mvn.w	r8, #5
    1eca:	strb.w	r8, [r2, #562]	; 0x232
      _b = b;
    1ece:	ldrb.w	r8, [sp, #40]	; 0x28
    1ed2:	strb.w	r8, [r2, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ed6:	mov.w	r8, #111	; 0x6f
    1eda:	strb.w	r8, [r2, #564]	; 0x234
      _s = s;
    1ede:	mvn.w	r8, #104	; 0x68
    1ee2:	strb.w	r8, [r2, #565]	; 0x235
      _b = b;
    1ee6:	mvn.w	r8, #119	; 0x77
    1eea:	strb.w	r8, [r2, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1eee:	mov.w	r8, #99	; 0x63
    1ef2:	strb.w	r8, [r2, #567]	; 0x237
      _s = s;
    1ef6:	mov.w	r8, #114	; 0x72
    1efa:	strb.w	r8, [r2, #568]	; 0x238
      _b = b;
    1efe:	mov.w	r8, #60	; 0x3c
    1f02:	strb.w	r8, [r2, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f06:	mov.w	r8, #106	; 0x6a
    1f0a:	strb.w	r8, [r2, #571]	; 0x23b
    1f0e:	mov.w	r8, #102	; 0x66
    1f12:	strb.w	r8, [r2, #574]	; 0x23e
      _b = b;
    1f16:	mov.w	r8, #25
    1f1a:	strb.w	r8, [r2, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f1e:	mov.w	r8, #127	; 0x7f
    1f22:	strb.w	r8, [r2, #576]	; 0x240
      _s = s;
    1f26:	mov.w	r8, #115	; 0x73
    1f2a:	strb.w	r8, [r2, #577]	; 0x241
      _b = b;
    1f2e:	mov.w	r8, #121	; 0x79
    1f32:	strb.w	r8, [r2, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f36:	mvn.w	r8, #61	; 0x3d
    1f3a:	strb.w	r8, [r2, #580]	; 0x244
      _b = b;
    1f3e:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f42:	str.w	fp, [sp, #52]	; 0x34
      _b = b;
    1f46:	strb.w	r8, [r2, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f4a:	mvn.w	r8, #111	; 0x6f
      _s = s;
    1f4e:	strb.w	fp, [r2, #583]	; 0x247
    1f52:	mov.w	fp, #215	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f56:	strb.w	r8, [r2, #582]	; 0x246
      _s = s;
      _b = b;
    1f5a:	mvn.w	r8, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f5e:	strb.w	r4, [r2, #585]	; 0x249
      _s = s;
      _b = b;
    1f62:	strb.w	r8, [r2, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f66:	mov.w	r8, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f6a:	strb.w	r0, [r2, #588]	; 0x24c
      _s = s;
    1f6e:	strb.w	r8, [r2, #586]	; 0x24a
    1f72:	mov.w	r8, #114	; 0x72
      _b = b;
    1f76:	strb.w	ip, [r2, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f7a:	strb.w	r8, [r2, #589]	; 0x24d
      _b = b;
    1f7e:	ldrb.w	r8, [sp, #56]	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f82:	strb.w	r0, [r2, #594]	; 0x252
      _s = s;
      _b = b;
    1f86:	strb.w	r8, [r2, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f8a:	mvn.w	r8, #116	; 0x74
    1f8e:	strb.w	r0, [r2, #597]	; 0x255
    1f92:	strb.w	r8, [r2, #591]	; 0x24f
      _s = s;
    1f96:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f9a:	strb.w	r4, [r2, #600]	; 0x258
      _s = s;
    1f9e:	strb.w	r8, [r2, #592]	; 0x250
      _b = b;
    1fa2:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fa6:	strb.w	r1, [r2, #601]	; 0x259
      _b = b;
    1faa:	strb.w	r8, [r2, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fae:	mov.w	r8, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fb2:	strb.w	r6, [r2, #603]	; 0x25b
    1fb6:	movs	r6, #134	; 0x86
      _s = s;
    1fb8:	strb.w	r8, [r2, #595]	; 0x253
    1fbc:	mov.w	r8, #110	; 0x6e
      _b = b;
    1fc0:	strb.w	r0, [r2, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fc4:	strb.w	r8, [r2, #598]	; 0x256
      _b = b;
    1fc8:	mvn.w	r8, #58	; 0x3a
    1fcc:	strb.w	r8, [r2, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fd0:	mov.w	r8, #110	; 0x6e
    1fd4:	strb.w	r8, [r2, #606]	; 0x25e
      _s = s;
    1fd8:	mov.w	r8, #93	; 0x5d
    1fdc:	strb.w	r8, [r2, #607]	; 0x25f
      _b = b;
    1fe0:	mvn.w	r8, #116	; 0x74
    1fe4:	strb.w	r8, [r2, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fe8:	mov.w	r8, #120	; 0x78
    1fec:	strb.w	r8, [r2, #609]	; 0x261
    1ff0:	strb.w	r8, [r2, #612]	; 0x264
      _s = s;
    1ff4:	mov.w	r8, #124	; 0x7c
    1ff8:	strb.w	r8, [r2, #613]	; 0x265
      _b = b;
    1ffc:	mvn.w	r8, #93	; 0x5d
    2000:	strb.w	r8, [r2, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2004:	mov.w	r8, #126	; 0x7e
    2008:	strb.w	r8, [r2, #615]	; 0x267
      _s = s;
    200c:	mov.w	r8, #115	; 0x73
    2010:	strb.w	r8, [r2, #616]	; 0x268
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2014:	mov.w	r8, #123	; 0x7b
      _s = s;
      _b = b;
    2018:	strb.w	r7, [r2, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    201c:	strb.w	r8, [r2, #618]	; 0x26a
      _s = s;
      _b = b;
    2020:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2024:	strb.w	r7, [r2, #642]	; 0x282
      _s = s;
      _b = b;
    2028:	mvn.w	r7, #120	; 0x78
    202c:	strb.w	r8, [r2, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2030:	mov.w	r8, #20
      _b = b;
    2034:	strb.w	r7, [r2, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2038:	mov.w	r7, #119	; 0x77
    203c:	strb.w	r8, [r2, #622]	; 0x26e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2040:	mov.w	r8, #120	; 0x78
      _s = s;
    2044:	strb.w	r7, [r2, #646]	; 0x286
    2048:	mov.w	r7, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    204c:	strb.w	r8, [r2, #624]	; 0x270
      _s = s;
    2050:	mov.w	r8, #45	; 0x2d
      _b = b;
    2054:	strb.w	lr, [r2, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2058:	strb.w	r8, [r2, #625]	; 0x271
      _b = b;
    205c:	mvn.w	r8, #19
    2060:	strb.w	lr, [r2, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2064:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    2068:	strb.w	r8, [r2, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    206c:	mov.w	r8, #78	; 0x4e
    2070:	strb.w	r7, [r2, #649]	; 0x289
      _b = b;
    2074:	mov.w	r7, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2078:	strb.w	r8, [r2, #604]	; 0x25c
    207c:	mov.w	r8, #122	; 0x7a
      _b = b;
    2080:	strb.w	ip, [r2, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2084:	strb.w	r8, [r2, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2088:	mvn.w	r8, #126	; 0x7e
    208c:	strb.w	lr, [r2, #651]	; 0x28b
    2090:	strb.w	r8, [r2, #621]	; 0x26d
      _s = s;
    2094:	mov.w	r8, #42	; 0x2a
      _b = b;
    2098:	strb.w	r7, [r2, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    209c:	movs	r7, #183	; 0xb7
      _s = s;
    209e:	strb.w	r8, [r2, #619]	; 0x26b
      _b = b;
    20a2:	mvn.w	r8, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20a6:	strb.w	lr, [r2, #654]	; 0x28e
      _s = s;
      _b = b;
    20aa:	strb.w	r8, [r2, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20ae:	mvn.w	r8, #45	; 0x2d
    20b2:	strb.w	ip, [r2, #655]	; 0x28f
    20b6:	strb.w	r8, [r2, #658]	; 0x292
      _b = b;
    20ba:	mvn.w	r8, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20be:	strb.w	lr, [r2, #657]	; 0x291
    20c2:	mvn.w	lr, #120	; 0x78
      _s = s;
      _b = b;
    20c6:	strb.w	r8, [r2, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20ca:	ldrb.w	r8, [sp, #36]	; 0x24
    20ce:	strb.w	r1, [r2, #627]	; 0x273
    20d2:	strb.w	r8, [r2, #639]	; 0x27f
      _s = s;
      _b = b;
    20d6:	mvn.w	r8, #111	; 0x6f
    20da:	strb.w	r8, [r2, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20de:	mov.w	r8, #1
    20e2:	strb.w	r8, [r2, #648]	; 0x288
      _s = s;
      _b = b;
    20e6:	mov.w	r8, #112	; 0x70
    20ea:	strb.w	r8, [r2, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20ee:	mvn.w	r8, #55	; 0x37
    20f2:	strb.w	r8, [r2, #628]	; 0x274
      _b = b;
    20f6:	mvn.w	r8, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20fa:	strb.w	r5, [r2, #643]	; 0x283
      _b = b;
    20fe:	strb.w	r8, [r2, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2102:	mvn.w	r8, #8
      _b = b;
    2106:	strb.w	r5, [r2, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    210a:	movs	r5, #137	; 0x89
      _s = s;
    210c:	strb.w	r8, [r2, #631]	; 0x277
      _b = b;
    2110:	mvn.w	r8, #119	; 0x77
    2114:	strb.w	ip, [r2, #662]	; 0x296
    2118:	mov.w	ip, #232	; 0xe8
    211c:	strb.w	r8, [r2, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2120:	mvn.w	r8, #5
    2124:	strb.w	r4, [r2, #661]	; 0x295
    2128:	strb.w	r8, [r2, #634]	; 0x27a
      _b = b;
    212c:	mvn.w	r8, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2130:	strb.w	r4, [r2, #672]	; 0x2a0
    2134:	movs	r4, #138	; 0x8a
      _s = s;
      _b = b;
    2136:	strb.w	r8, [r2, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    213a:	mvn.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    213e:	strb.w	r9, [r2, #630]	; 0x276
      _s = s;
    2142:	strb.w	r8, [r2, #637]	; 0x27d
    2146:	mvn.w	r8, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    214a:	strb.w	sl, [r2, #633]	; 0x279
      _s = s;
    214e:	strb.w	r8, [r2, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2152:	mvn.w	r8, #15
    2156:	strb.w	sl, [r2, #636]	; 0x27c
    215a:	strb.w	r8, [r2, #645]	; 0x285
      _s = s;
      _b = b;
    215e:	mvn.w	r8, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2162:	strb.w	r9, [r2, #652]	; 0x28c
      _b = b;
    2166:	strb.w	r8, [r2, #656]	; 0x290
    216a:	mvn.w	r8, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    216e:	strb.w	r5, [r2, #660]	; 0x294
      _s = s;
      _b = b;
    2172:	strb.w	r8, [r2, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2176:	mvn.w	r8, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    217a:	strb.w	lr, [r2, #663]	; 0x297
      _s = s;
      _b = b;
    217e:	mov.w	lr, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2182:	strb.w	r8, [r2, #667]	; 0x29b
    2186:	mvn.w	r8, #81	; 0x51
      _b = b;
    218a:	strb.w	ip, [r2, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    218e:	strb.w	r8, [r2, #670]	; 0x29e
      _b = b;
    2192:	mvn.w	r8, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2196:	strb.w	r5, [r2, #669]	; 0x29d
    219a:	movs	r5, #150	; 0x96
      _s = s;
      _b = b;
    219c:	strb.w	r8, [r2, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21a0:	mvn.w	r8, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21a4:	strb.w	r0, [r2, #675]	; 0x2a3
      _s = s;
    21a8:	strb.w	r8, [r2, #673]	; 0x2a1
      _b = b;
    21ac:	mvn.w	r8, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21b0:	strb.w	r4, [r2, #678]	; 0x2a6
      _s = s;
      _b = b;
    21b4:	strb.w	r8, [r2, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21b8:	mov.w	r8, #114	; 0x72
      _b = b;
    21bc:	strb.w	ip, [r2, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21c0:	mov.w	ip, #133	; 0x85
    21c4:	strb.w	r4, [r2, #681]	; 0x2a9
      _s = s;
    21c8:	mvn.w	r4, #92	; 0x5c
    21cc:	strb.w	r8, [r2, #682]	; 0x2aa
      _b = b;
    21d0:	mvn.w	r8, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21d4:	strb.w	r6, [r2, #666]	; 0x29a
      _s = s;
    21d8:	movs	r6, #177	; 0xb1
      _b = b;
    21da:	strb.w	r8, [r2, #668]	; 0x29c
    21de:	mvn.w	r8, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21e2:	strb.w	ip, [r2, #705]	; 0x2c1
      _s = s;
      _b = b;
    21e6:	strb.w	r8, [r2, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21ea:	strb.w	r8, [r2, #687]	; 0x2af
    21ee:	strb.w	r8, [r2, #690]	; 0x2b2
      _s = s;
    21f2:	mvn.w	r8, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21f6:	strb.w	ip, [r2, #708]	; 0x2c4
      _s = s;
      _b = b;
    21fa:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21fe:	strb.w	r8, [r2, #676]	; 0x2a4
    2202:	mov.w	r8, #86	; 0x56
      _b = b;
    2206:	strb.w	ip, [r2, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    220a:	mvn.w	ip, #116	; 0x74
      _s = s;
    220e:	strb.w	r8, [r2, #679]	; 0x2a7
      _b = b;
    2212:	mvn.w	r8, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2216:	strb.w	r6, [r2, #715]	; 0x2cb
      _b = b;
    221a:	strb.w	r8, [r2, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    221e:	mov.w	r8, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2222:	strb.w	r6, [r2, #720]	; 0x2d0
      _s = s;
    2226:	mvn.w	r6, #66	; 0x42
    222a:	strb.w	r8, [r2, #688]	; 0x2b0
      _b = b;
    222e:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2232:	strb.w	r1, [r2, #684]	; 0x2ac
      _s = s;
      _b = b;
    2236:	strb.w	r8, [r2, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    223a:	mov.w	r8, #90	; 0x5a
      _b = b;
    223e:	strb.w	lr, [r2, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2242:	strb.w	r8, [r2, #691]	; 0x2b3
      _b = b;
    2246:	mov.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    224a:	strb.w	fp, [r2, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    224e:	mov.w	fp, #143	; 0x8f
      _s = s;
      _b = b;
    2252:	strb.w	r8, [r2, #692]	; 0x2b4
    2256:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    225a:	strb.w	r4, [r2, #664]	; 0x298
    225e:	movs	r4, #246	; 0xf6
      _b = b;
    2260:	strb.w	r8, [r2, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2264:	mov.w	r8, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2268:	strb.w	lr, [r2, #696]	; 0x2b8
      _s = s;
    226c:	mov.w	lr, #71	; 0x47
    2270:	strb.w	r8, [r2, #697]	; 0x2b9
      _b = b;
    2274:	mov.w	r8, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2278:	strb.w	r9, [r2, #711]	; 0x2c7
      _s = s;
      _b = b;
    227c:	mov.w	r9, #20
    2280:	strb.w	r8, [r2, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2284:	mov.w	r8, #120	; 0x78
    2288:	strb.w	ip, [r2, #714]	; 0x2ca
    228c:	mov.w	ip, #120	; 0x78
    2290:	strb.w	r8, [r2, #699]	; 0x2bb
      _s = s;
      _b = b;
    2294:	mvn.w	r8, #38	; 0x26
    2298:	strb.w	r8, [r2, #701]	; 0x2bd
    229c:	mvn.w	r8, #29
    22a0:	strb.w	r8, [r2, #704]	; 0x2c0
    22a4:	ldrb.w	r8, [sp, #52]	; 0x34
    22a8:	strb.w	r8, [r2, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22ac:	mov.w	r8, #115	; 0x73
    22b0:	strb.w	r6, [r2, #721]	; 0x2d1
    22b4:	movs	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22b6:	strb.w	r7, [r2, #723]	; 0x2d3
    22ba:	mvn.w	r7, #51	; 0x33
      _s = s;
    22be:	strb.w	r8, [r2, #724]	; 0x2d4
    22c2:	mov.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22c6:	strb.w	r7, [r2, #693]	; 0x2b5
    22ca:	mov.w	r7, #95	; 0x5f
      _s = s;
    22ce:	strb.w	r1, [r2, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22d2:	mvn.w	r1, #120	; 0x78
    22d6:	strb.w	r7, [r2, #702]	; 0x2be
      _s = s;
    22da:	mov.w	r7, #87	; 0x57
    22de:	strb.w	r8, [r2, #694]	; 0x2b6
    22e2:	mov.w	r8, #34	; 0x22
    22e6:	strb.w	r7, [r2, #706]	; 0x2c2
      _b = b;
    22ea:	mvn.w	r7, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ee:	strb.w	r1, [r2, #741]	; 0x2e5
    22f2:	movs	r1, #137	; 0x89
      _s = s;
      _b = b;
    22f4:	strb.w	r7, [r2, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22f8:	mvn.w	r7, #7
    22fc:	strb.w	r8, [r2, #700]	; 0x2bc
    2300:	mov.w	r8, #13
    2304:	strb.w	r7, [r2, #709]	; 0x2c5
      _b = b;
    2308:	mvn.w	r7, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    230c:	strb.w	r1, [r2, #744]	; 0x2e8
      _s = s;
      _b = b;
    2310:	strb.w	r7, [r2, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2314:	mvn.w	r7, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2318:	strb.w	r1, [r2, #747]	; 0x2eb
      _s = s;
      _b = b;
    231c:	mvn.w	r1, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2320:	strb.w	r7, [r2, #712]	; 0x2c8
      _b = b;
    2324:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2328:	strb.w	r8, [r2, #703]	; 0x2bf
      _b = b;
    232c:	mvn.w	r8, #49	; 0x31
    2330:	strb.w	r7, [r2, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2334:	mvn.w	r7, #99	; 0x63
    2338:	strb.w	sl, [r2, #738]	; 0x2e2
    233c:	mvn.w	sl, #111	; 0x6f
    2340:	strb.w	r7, [r2, #717]	; 0x2cd
      _s = s;
    2344:	mov.w	r7, #91	; 0x5b
    2348:	strb.w	r7, [r2, #718]	; 0x2ce
      _b = b;
    234c:	mvn.w	r7, #6
    2350:	strb.w	r7, [r2, #722]	; 0x2d2
    2354:	mvn.w	r7, #5
    2358:	strb.w	r7, [r2, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    235c:	mvn.w	r7, #56	; 0x38
    2360:	strb.w	r7, [r2, #730]	; 0x2da
      _b = b;
    2364:	mvn.w	r7, #20
    2368:	strb.w	r7, [r2, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    236c:	mvn.w	r7, #93	; 0x5d
    2370:	strb.w	r7, [r2, #732]	; 0x2dc
      _s = s;
    2374:	ldrb.w	r7, [sp, #52]	; 0x34
    2378:	strb.w	r7, [r2, #733]	; 0x2dd
      _b = b;
    237c:	mvn.w	r7, #31
    2380:	strb.w	r7, [r2, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2384:	ldrb.w	r7, [sp, #32]
    2388:	strb.w	r7, [r2, #735]	; 0x2df
      _s = s;
      _b = b;
    238c:	mvn.w	r7, #54	; 0x36
    2390:	strb.w	r7, [r2, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2394:	mvn.w	r7, #6
    2398:	strb.w	r7, [r2, #742]	; 0x2e6
    239c:	movs	r7, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    239e:	strb.w	r0, [r2, #750]	; 0x2ee
    23a2:	movs	r0, #168	; 0xa8
      _s = s;
      _b = b;
    23a4:	strb.w	r1, [r2, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23a8:	mov.w	r1, #85	; 0x55
      _b = b;
    23ac:	strb.w	r8, [r2, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23b0:	mvn.w	r8, #62	; 0x3e
    23b4:	strb.w	r1, [r2, #757]	; 0x2f5
    23b8:	mov.w	r1, #123	; 0x7b
    23bc:	strb.w	r8, [r2, #748]	; 0x2ec
      _b = b;
    23c0:	mvn.w	r8, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23c4:	strb.w	r1, [r2, #754]	; 0x2f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23c8:	mvn.w	r1, #71	; 0x47
      _s = s;
      _b = b;
    23cc:	strb.w	r8, [r2, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23d0:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23d4:	strb.w	r1, [r2, #726]	; 0x2d6
    23d8:	mvn.w	r1, #103	; 0x67
      _s = s;
    23dc:	strb.w	r4, [r2, #745]	; 0x2e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23e0:	strb.w	r1, [r2, #729]	; 0x2d9
      _s = s;
    23e4:	mvn.w	r1, #84	; 0x54
    23e8:	strb.w	r8, [r2, #751]	; 0x2ef
    23ec:	mov.w	r8, #151	; 0x97
    23f0:	strb.w	r1, [r2, #736]	; 0x2e0
    23f4:	mvn.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23f8:	strb.w	fp, [r3, #753]	; 0x2f1
      _s = s;
    23fc:	strb.w	r1, [r2, #739]	; 0x2e3
      _b = b;
    2400:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2404:	strb.w	r5, [r3, #756]	; 0x2f4
      _s = s;
      _b = b;
    2408:	strb.w	r1, [r2, #740]	; 0x2e4
    240c:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2410:	strb.w	fp, [r3, #759]	; 0x2f7
      _s = s;
      _b = b;
    2414:	strb.w	r1, [r2, #743]	; 0x2e7
    2418:	mvn.w	r2, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    241c:	strb.w	r5, [r3, #762]	; 0x2fa
      _s = s;
    2420:	movs	r1, #121	; 0x79
      _b = b;
    2422:	strb.w	r2, [r3, #752]	; 0x2f0
    2426:	mvn.w	r2, #28
    242a:	strb.w	fp, [r3, #782]	; 0x30e
    242e:	strb.w	r2, [r3, #755]	; 0x2f3
    2432:	mvn.w	r2, #17
    2436:	strb.w	r9, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    243a:	mov.w	r9, #142	; 0x8e
      _s = s;
      _b = b;
    243e:	strb.w	r2, [r3, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2442:	mvn.w	r2, #43	; 0x2b
    2446:	strb.w	ip, [r3, #774]	; 0x306
    244a:	mov.w	ip, #158	; 0x9e
    244e:	strb.w	r2, [r3, #768]	; 0x300
      _s = s;
    2452:	mov.w	r2, #90	; 0x5a
    2456:	strb.w	lr, [r3, #775]	; 0x307
      _b = b;
    245a:	mov.w	lr, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    245e:	strb.w	r2, [r3, #769]	; 0x301
      _b = b;
    2462:	mov.w	r2, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2466:	strb.w	r6, [r3, #790]	; 0x316
    246a:	movs	r6, #252	; 0xfc
      _b = b;
    246c:	strb.w	r2, [r3, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2470:	mvn.w	r2, #50	; 0x32
    2474:	strb.w	r2, [r3, #771]	; 0x303
      _s = s;
    2478:	mov.w	r2, #90	; 0x5a
    247c:	strb.w	r2, [r3, #787]	; 0x313
      _b = b;
    2480:	mov.w	r2, #21
    2484:	strb.w	r2, [r3, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2488:	mvn.w	r2, #126	; 0x7e
    248c:	strb.w	r2, [r3, #760]	; 0x2f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2490:	strb.w	r2, [r3, #783]	; 0x30f
      _s = s;
      _b = b;
    2494:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2498:	strb.w	sl, [r3, #789]	; 0x315
      _s = s;
      _b = b;
    249c:	mvn.w	sl, #5
    24a0:	strb.w	r2, [r3, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24a4:	mvn.w	r2, #41	; 0x29
      _b = b;
    24a8:	strb.w	sl, [r3, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24ac:	mvn.w	sl, #91	; 0x5b
      _s = s;
    24b0:	strb.w	r2, [r3, #763]	; 0x2fb
      _b = b;
    24b4:	mvn.w	r2, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24b8:	strb.w	sl, [r3, #795]	; 0x31b
      _s = s;
    24bc:	mov.w	sl, #85	; 0x55
      _b = b;
    24c0:	strb.w	r2, [r3, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24c4:	mvn.w	r2, #64	; 0x40
      _s = s;
    24c8:	strb.w	sl, [r3, #796]	; 0x31c
      _b = b;
    24cc:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24d0:	strb.w	r2, [r3, #765]	; 0x2fd
      _s = s;
    24d4:	mov.w	r2, #97	; 0x61
      _b = b;
    24d8:	strb.w	sl, [r3, #800]	; 0x320
    24dc:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24e0:	strb.w	r2, [r3, #766]	; 0x2fe
    24e4:	strb.w	r2, [r3, #784]	; 0x310
    24e8:	mov.w	r2, #76	; 0x4c
      _b = b;
    24ec:	strb.w	sl, [r3, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24f0:	mvn.w	sl, #71	; 0x47
      _s = s;
    24f4:	strb.w	r2, [r3, #772]	; 0x304
      _b = b;
    24f8:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24fc:	strb.w	r5, [r3, #811]	; 0x32b
      _b = b;
    2500:	mvn.w	r5, #17
    2504:	strb.w	r2, [r3, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2508:	mvn.w	r2, #125	; 0x7d
    250c:	strb.w	sl, [r3, #804]	; 0x324
      _s = s;
    2510:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2514:	strb.w	r2, [r3, #777]	; 0x309
      _s = s;
    2518:	mvn.w	r2, #118	; 0x76
      _b = b;
    251c:	strb.w	r5, [r3, #812]	; 0x32c
    2520:	mvn.w	r5, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2524:	strb.w	r2, [r3, #778]	; 0x30a
      _b = b;
    2528:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    252c:	strb.w	sl, [r3, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2530:	mvn.w	sl, #68	; 0x44
      _s = s;
      _b = b;
    2534:	strb.w	r2, [r3, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2538:	mov.w	r2, #113	; 0x71
      _s = s;
      _b = b;
    253c:	strb.w	r5, [r3, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2540:	mvn.w	r5, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2544:	strb.w	r2, [r3, #780]	; 0x30c
      _s = s;
    2548:	mov.w	r2, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    254c:	strb.w	sl, [r3, #807]	; 0x327
      _s = s;
      _b = b;
    2550:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2554:	strb.w	r2, [r3, #781]	; 0x30d
      _b = b;
    2558:	mvn.w	r2, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    255c:	strb.w	r5, [r3, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2560:	mvn.w	r5, #79	; 0x4f
      _s = s;
      _b = b;
    2564:	strb.w	r2, [r3, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2568:	mvn.w	r2, #122	; 0x7a
      _s = s;
      _b = b;
    256c:	strb.w	r4, [r3, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2570:	strb.w	r2, [r3, #786]	; 0x312
      _s = s;
      _b = b;
    2574:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2578:	strb.w	r5, [r3, #798]	; 0x31e
      _s = s;
    257c:	movs	r5, #88	; 0x58
      _b = b;
    257e:	strb.w	r2, [r3, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2582:	movs	r2, #128	; 0x80
      _s = s;
    2584:	strb.w	r7, [r3, #808]	; 0x328
    2588:	movs	r7, #68	; 0x44
      _b = b;
    258a:	strb.w	sl, [r3, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    258e:	mvn.w	sl, #109	; 0x6d
    2592:	strb.w	r0, [r3, #810]	; 0x32a
    2596:	mvn.w	r0, #107	; 0x6b
    259a:	strb.w	sl, [r3, #813]	; 0x32d
      _s = s;
    259e:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25a2:	strb.w	r0, [r3, #792]	; 0x318
      _s = s;
    25a6:	mov.w	r0, #104	; 0x68
    25aa:	strb.w	sl, [r3, #814]	; 0x32e
      _b = b;
    25ae:	mvn.w	sl, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25b2:	strb.w	r0, [r3, #793]	; 0x319
      _b = b;
    25b6:	mvn.w	r0, #4
    25ba:	strb.w	sl, [r3, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25be:	mvn.w	sl, #123	; 0x7b
      _s = s;
      _b = b;
    25c2:	strb.w	r0, [r3, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25c6:	strb.w	sl, [r3, #816]	; 0x330
      _s = s;
    25ca:	mvn.w	sl, #114	; 0x72
      _b = b;
    25ce:	strb.w	r0, [r3, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25d2:	mvn.w	r0, #69	; 0x45
      _s = s;
    25d6:	strb.w	sl, [r3, #817]	; 0x331
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25da:	mvn.w	sl, #120	; 0x78
    25de:	strb.w	r0, [r3, #801]	; 0x321
      _s = s;
    25e2:	mov.w	r0, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25e6:	strb.w	sl, [r3, #819]	; 0x333
      _s = s;
      _b = b;
    25ea:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25ee:	strb.w	r1, [r3, #799]	; 0x31f
      _b = b;
    25f2:	strb.w	sl, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25f6:	mvn.w	sl, #116	; 0x74
      _s = s;
    25fa:	strb.w	r0, [r3, #802]	; 0x322
    25fe:	movs	r0, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2600:	strb.w	sl, [r3, #822]	; 0x336
      _s = s;
      _b = b;
    2604:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2608:	strb.w	r8, [r3, #820]	; 0x334
      _b = b;
    260c:	strb.w	sl, [r3, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2610:	mvn.w	sl, #117	; 0x75
    2614:	strb.w	fp, [r3, #831]	; 0x33f
    2618:	strb.w	sl, [r3, #828]	; 0x33c
      _s = s;
    261c:	mov.w	sl, #91	; 0x5b
    2620:	strb.w	sl, [r3, #832]	; 0x340
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2624:	mvn.w	sl, #116	; 0x74
    2628:	strb.w	sl, [r3, #837]	; 0x345
      _s = s;
      _b = b;
    262c:	mvn.w	sl, #17
    2630:	strb.w	sl, [r3, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2634:	mvn.w	sl, #103	; 0x67
    2638:	strb.w	sl, [r3, #840]	; 0x348
    263c:	mvn.w	sl, #107	; 0x6b
    2640:	strb.w	sl, [r3, #843]	; 0x34b
      _s = s;
    2644:	mvn.w	sl, #15
    2648:	strb.w	sl, [r3, #844]	; 0x34c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    264c:	mvn.w	sl, #107	; 0x6b
    2650:	strb.w	sl, [r3, #846]	; 0x34e
      _s = s;
    2654:	strb.w	sl, [r3, #847]	; 0x34f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2658:	mvn.w	sl, #122	; 0x7a
    265c:	strb.w	sl, [r3, #849]	; 0x351
      _s = s;
    2660:	mvn.w	sl, #107	; 0x6b
    2664:	strb.w	sl, [r3, #850]	; 0x352
      _b = b;
    2668:	mov.w	sl, #103	; 0x67
    266c:	strb.w	sl, [r3, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2670:	mvn.w	sl, #125	; 0x7d
    2674:	strb.w	sl, [r3, #852]	; 0x354
      _s = s;
      _b = b;
    2678:	mvn.w	sl, #28
    267c:	strb.w	lr, [r3, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2680:	mvn.w	lr, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2684:	strb.w	r1, [r3, #858]	; 0x35a
      _s = s;
      _b = b;
    2688:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    268c:	strb.w	lr, [r3, #826]	; 0x33a
      _b = b;
    2690:	mvn.w	lr, #75	; 0x4b
    2694:	strb.w	r1, [r3, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2698:	mvn.w	r1, #50	; 0x32
      _b = b;
    269c:	strb.w	lr, [r3, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26a0:	mvn.w	lr, #80	; 0x50
    26a4:	strb.w	r1, [r3, #862]	; 0x35e
      _b = b;
    26a8:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26ac:	strb.w	lr, [r3, #829]	; 0x33d
      _b = b;
    26b0:	mvn.w	lr, #35	; 0x23
    26b4:	strb.w	r1, [r3, #863]	; 0x35f
    26b8:	mvn.w	r1, #5
    26bc:	strb.w	lr, [r3, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26c0:	mov.w	lr, #99	; 0x63
      _b = b;
    26c4:	strb.w	r1, [r3, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26c8:	mvn.w	r1, #95	; 0x5f
      _s = s;
    26cc:	strb.w	lr, [r3, #835]	; 0x343
    26d0:	strb.w	lr, [r3, #853]	; 0x355
      _b = b;
    26d4:	mvn.w	lr, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26d8:	strb.w	r1, [r3, #867]	; 0x363
    26dc:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    26e0:	strb.w	lr, [r3, #836]	; 0x344
    26e4:	mvn.w	lr, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26e8:	strb.w	r1, [r3, #870]	; 0x366
      _s = s;
      _b = b;
    26ec:	mvn.w	r1, #7
    26f0:	strb.w	lr, [r3, #842]	; 0x34a
    26f4:	mvn.w	lr, #93	; 0x5d
    26f8:	strb.w	r1, [r3, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26fc:	mvn.w	r1, #62	; 0x3e
      _s = s;
      _b = b;
    2700:	strb.w	lr, [r3, #845]	; 0x34d
    2704:	mov.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2708:	strb.w	r1, [r3, #879]	; 0x36f
      _s = s;
      _b = b;
    270c:	mvn.w	r1, #5
    2710:	strb.w	lr, [r3, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2714:	mvn.w	lr, #55	; 0x37
      _b = b;
    2718:	strb.w	r1, [r3, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    271c:	mvn.w	r1, #59	; 0x3b
      _s = s;
    2720:	strb.w	lr, [r3, #856]	; 0x358
      _b = b;
    2724:	mvn.w	lr, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2728:	strb.w	r1, [r3, #882]	; 0x372
      _s = s;
      _b = b;
    272c:	mvn.w	r1, #6
    2730:	strb.w	sl, [r3, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2734:	strb.w	r9, [r3, #825]	; 0x339
      _s = s;
    2738:	strb.w	r9, [r3, #838]	; 0x346
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    273c:	strb.w	ip, [r3, #834]	; 0x342
      _s = s;
    2740:	strb.w	r6, [r3, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2744:	strb.w	r2, [r3, #855]	; 0x357
      _s = s;
      _b = b;
    2748:	strb.w	lr, [r3, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    274c:	mvn.w	lr, #74	; 0x4a
      _s = s;
      _b = b;
    2750:	strb.w	r6, [r3, #872]	; 0x368
    2754:	strb.w	r6, [r3, #878]	; 0x36e
    2758:	strb.w	r1, [r3, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    275c:	mvn.w	r1, #57	; 0x39
      _s = s;
    2760:	strb.w	r5, [r3, #880]	; 0x370
    2764:	mov.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2768:	strb.w	r1, [r3, #885]	; 0x375
    276c:	mvn.w	r1, #73	; 0x49
      _s = s;
    2770:	strb.w	r5, [r3, #859]	; 0x35b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2774:	mvn.w	r5, #119	; 0x77
    2778:	strb.w	r1, [r3, #888]	; 0x378
    277c:	mvn.w	r1, #100	; 0x64
    2780:	strb.w	r5, [r3, #861]	; 0x35d
      _s = s;
    2784:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2788:	strb.w	r1, [r3, #864]	; 0x360
      _s = s;
    278c:	mov.w	r1, #45	; 0x2d
    2790:	strb.w	r5, [r3, #868]	; 0x364
    2794:	mov.w	r5, #124	; 0x7c
    2798:	strb.w	r1, [r3, #865]	; 0x361
      _b = b;
    279c:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27a0:	strb.w	r5, [r3, #871]	; 0x367
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27a4:	mvn.w	r5, #90	; 0x5a
      _s = s;
      _b = b;
    27a8:	strb.w	r4, [r3, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27ac:	strb.w	r5, [r3, #873]	; 0x369
      _s = s;
    27b0:	mvn.w	r5, #115	; 0x73
      _b = b;
    27b4:	strb.w	r1, [r3, #869]	; 0x365
    27b8:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27ba:	strb.w	r5, [r3, #874]	; 0x36a
    27be:	mov.w	r5, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27c2:	strb.w	lr, [r3, #876]	; 0x36c
      _s = s;
    27c6:	mov.w	lr, #126	; 0x7e
    27ca:	strb.w	r5, [r3, #886]	; 0x376
    27ce:	mov.w	r5, #74	; 0x4a
    27d2:	strb.w	r7, [r3, #877]	; 0x36d
    27d6:	movs	r7, #98	; 0x62
    27d8:	strb.w	r5, [r3, #889]	; 0x379
      _b = b;
    27dc:	mvn.w	r5, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27e0:	strb.w	r0, [r3, #883]	; 0x373
    27e4:	movs	r0, #115	; 0x73
      _b = b;
    27e6:	strb.w	r5, [r3, #890]	; 0x37a
    27ea:	mvn.w	r5, #48	; 0x30
    27ee:	strb.w	r5, [r3, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27f2:	mvn.w	r5, #95	; 0x5f
    27f6:	strb.w	r5, [r3, #891]	; 0x37b
      _s = s;
    27fa:	mvn.w	r5, #10
    27fe:	strb.w	r5, [r3, #892]	; 0x37c
      _b = b;
    2802:	mvn.w	r5, #42	; 0x2a
    2806:	strb.w	r5, [r3, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    280a:	mvn.w	r5, #102	; 0x66
    280e:	strb.w	r5, [r3, #894]	; 0x37e
      _s = s;
    2812:	mvn.w	r5, #6
    2816:	strb.w	r5, [r3, #895]	; 0x37f
      _b = b;
    281a:	mvn.w	r5, #58	; 0x3a
    281e:	strb.w	r5, [r3, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2822:	mvn.w	r5, #115	; 0x73
    2826:	strb.w	r5, [r3, #897]	; 0x381
      _s = s;
    282a:	mvn.w	r5, #26
    282e:	strb.w	r5, [r3, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2832:	mvn.w	r5, #118	; 0x76
    2836:	strb.w	r5, [r3, #900]	; 0x384
      _s = s;
    283a:	mvn.w	r5, #51	; 0x33
    283e:	strb.w	r5, [r3, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2842:	mvn.w	r5, #114	; 0x72
    2846:	strb.w	r5, [r3, #903]	; 0x387
      _s = s;
    284a:	mvn.w	r5, #68	; 0x44
    284e:	strb.w	r5, [r3, #904]	; 0x388
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2852:	mvn.w	r5, #116	; 0x74
    2856:	strb.w	r5, [r3, #906]	; 0x38a
      _s = s;
      _b = b;
    285a:	mvn.w	r5, #36	; 0x24
    285e:	strb.w	r1, [r3, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2862:	movs	r1, #195	; 0xc3
      _b = b;
    2864:	strb.w	r5, [r3, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2868:	mvn.w	r5, #115	; 0x73
    286c:	strb.w	fp, [r3, #921]	; 0x399
    2870:	strb.w	r5, [r3, #909]	; 0x38d
      _s = s;
      _b = b;
    2874:	mvn.w	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2878:	strb.w	lr, [r3, #913]	; 0x391
    287c:	mov.w	lr, #105	; 0x69
      _b = b;
    2880:	strb.w	r5, [r3, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2884:	mvn.w	r5, #103	; 0x67
      _s = s;
    2888:	strb.w	r0, [r3, #910]	; 0x38e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    288c:	strb.w	r5, [r3, #912]	; 0x390
      _s = s;
      _b = b;
    2890:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2894:	strb.w	fp, [r3, #924]	; 0x39c
      _s = s;
      _b = b;
    2898:	strb.w	r5, [r3, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    289c:	mvn.w	r5, #107	; 0x6b
    28a0:	strb.w	r9, [r3, #927]	; 0x39f
    28a4:	strb.w	r5, [r3, #918]	; 0x396
      _s = s;
    28a8:	mvn.w	r5, #20
    28ac:	strb.w	r6, [r3, #928]	; 0x3a0
    28b0:	movs	r6, #43	; 0x2b
    28b2:	strb.w	r5, [r3, #919]	; 0x397
      _b = b;
    28b6:	mvn.w	r5, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28ba:	strb.w	r2, [r3, #933]	; 0x3a5
      _s = s;
      _b = b;
    28be:	strb.w	r5, [r3, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28c2:	mvn.w	r5, #124	; 0x7c
    28c6:	strb.w	r2, [r3, #937]	; 0x3a9
    28ca:	strb.w	r5, [r3, #907]	; 0x38b
      _b = b;
    28ce:	mvn.w	r5, #22
    28d2:	strb.w	r4, [r3, #938]	; 0x3aa
    28d6:	strb.w	r5, [r3, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28da:	mvn.w	r5, #110	; 0x6e
      _s = s;
      _b = b;
    28de:	strb.w	r4, [r3, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28e2:	strb.w	r5, [r3, #915]	; 0x393
      _s = s;
    28e6:	mvn.w	r5, #37	; 0x25
    28ea:	strb.w	r5, [r3, #916]	; 0x394
      _b = b;
    28ee:	mvn.w	r5, #16
    28f2:	strb.w	r5, [r3, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28f6:	mov.w	r5, #100	; 0x64
    28fa:	strb.w	r5, [r3, #922]	; 0x39a
      _b = b;
    28fe:	mvn.w	r5, #32
    2902:	strb.w	r5, [r3, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2906:	mvn.w	r5, #98	; 0x62
    290a:	strb.w	r5, [r3, #939]	; 0x3ab
      _s = s;
    290e:	mvn.w	r5, #66	; 0x42
    2912:	strb.w	r5, [r3, #925]	; 0x39d
      _b = b;
    2916:	mvn.w	r5, #57	; 0x39
    291a:	strb.w	r5, [r3, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    291e:	mvn.w	r5, #125	; 0x7d
    2922:	strb.w	r5, [r3, #930]	; 0x3a2
      _s = s;
      _b = b;
    2926:	mvn.w	r5, #29
    292a:	strb.w	r5, [r3, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    292e:	mvn.w	r5, #123	; 0x7b
    2932:	strb.w	r5, [r3, #936]	; 0x3a8
      _s = s;
      _b = b;
    2936:	mvn.w	r5, #6
    293a:	strb.w	r5, [r3, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    293e:	mvn.w	r5, #91	; 0x5b
      _s = s;
    2942:	strb.w	r1, [r3, #934]	; 0x3a6
    2946:	movs	r1, #116	; 0x74
    2948:	strb.w	r0, [r3, #946]	; 0x3b2
      _b = b;
    294c:	mvn.w	r0, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2950:	strb.w	r1, [r3, #931]	; 0x3a3
    2954:	strb.w	r1, [r3, #949]	; 0x3b5
      _b = b;
    2958:	mvn.w	r1, #21
    295c:	strb.w	r0, [r3, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2960:	mvn.w	r0, #90	; 0x5a
      _s = s;
      _b = b;
    2964:	strb.w	r1, [r3, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2968:	mvn.w	r1, #82	; 0x52
      _s = s;
      _b = b;
    296c:	strb.w	r4, [r3, #962]	; 0x3c2
    2970:	mvn.w	r4, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2974:	strb.w	r1, [r3, #942]	; 0x3ae
      _s = s;
      _b = b;
    2978:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    297c:	strb.w	r0, [r3, #948]	; 0x3b4
      _s = s;
    2980:	mvn.w	r0, #106	; 0x6a
      _b = b;
    2984:	strb.w	r1, [r3, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2988:	mvn.w	r1, #68	; 0x44
      _s = s;
      _b = b;
    298c:	strb.w	r4, [r3, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2990:	mvn.w	r4, #99	; 0x63
    2994:	strb.w	r1, [r3, #957]	; 0x3bd
      _s = s;
    2998:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    299c:	strb.w	r5, [r3, #945]	; 0x3b1
    29a0:	movs	r5, #177	; 0xb1
      _s = s;
    29a2:	strb.w	r1, [r3, #958]	; 0x3be
      _b = b;
    29a6:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29aa:	strb.w	r0, [r3, #952]	; 0x3b8
    29ae:	mov.w	r0, #113	; 0x71
      _b = b;
    29b2:	strb.w	r1, [r3, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29b6:	mov.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29ba:	strb.w	r4, [r3, #972]	; 0x3cc
      _s = s;
    29be:	mvn.w	r4, #6
    29c2:	strb.w	r1, [r3, #961]	; 0x3c1
    29c6:	strb.w	r1, [r3, #964]	; 0x3c4
    29ca:	mvn.w	r1, #122	; 0x7a
    29ce:	strb.w	r0, [r3, #955]	; 0x3bb
      _b = b;
    29d2:	movs	r0, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29d4:	strb.w	r1, [r3, #967]	; 0x3c7
      _b = b;
    29d8:	mvn.w	r1, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29dc:	strb.w	r6, [r3, #943]	; 0x3af
      _b = b;
    29e0:	mov.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29e4:	strb.w	r5, [r3, #954]	; 0x3ba
    29e8:	movs	r5, #166	; 0xa6
      _s = s;
      _b = b;
    29ea:	strb.w	r1, [r3, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29ee:	mvn.w	r1, #38	; 0x26
    29f2:	strb.w	r4, [r3, #973]	; 0x3cd
      _b = b;
    29f6:	mvn.w	r4, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29fa:	strb.w	r7, [r3, #940]	; 0x3ac
    29fe:	movs	r7, #93	; 0x5d
      _b = b;
    2a00:	strb.w	r6, [r3, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a04:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    2a06:	strb.w	r0, [r3, #950]	; 0x3b6
    2a0a:	strb.w	r0, [r3, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a0e:	strb.w	r5, [r3, #951]	; 0x3b7
    2a12:	strb.w	ip, [r3, #969]	; 0x3c9
      _s = s;
    2a16:	strb.w	r1, [r3, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a1a:	movs	r1, #194	; 0xc2
      _s = s;
      _b = b;
    2a1c:	strb.w	r4, [r3, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a20:	mvn.w	r4, #111	; 0x6f
    2a24:	strb.w	r1, [r3, #960]	; 0x3c0
    2a28:	strb.w	r4, [r3, #975]	; 0x3cf
      _s = s;
    2a2c:	mvn.w	r4, #6
    2a30:	strb.w	r1, [r3, #991]	; 0x3df
      _b = b;
    2a34:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a38:	strb.w	r4, [r3, #976]	; 0x3d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a3c:	mvn.w	r4, #118	; 0x76
      _s = s;
      _b = b;
    2a40:	strb.w	r1, [r3, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a44:	mvn.w	r1, #102	; 0x66
    2a48:	strb.w	r4, [r3, #978]	; 0x3d2
      _s = s;
    2a4c:	mvn.w	r4, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a50:	strb.w	r1, [r3, #993]	; 0x3e1
      _s = s;
      _b = b;
    2a54:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a58:	strb.w	r4, [r3, #979]	; 0x3d3
      _b = b;
    2a5c:	mvn.w	r4, #75	; 0x4b
    2a60:	strb.w	r1, [r3, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a64:	mov.w	r1, #124	; 0x7c
      _b = b;
    2a68:	strb.w	r4, [r3, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a6c:	mvn.w	r4, #124	; 0x7c
      _s = s;
    2a70:	strb.w	r1, [r3, #997]	; 0x3e5
    2a74:	mov.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a78:	strb.w	r4, [r3, #981]	; 0x3d5
      _s = s;
      _b = b;
    2a7c:	mvn.w	r4, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a80:	strb.w	r1, [r3, #1000]	; 0x3e8
      _b = b;
    2a84:	mvn.w	r1, #19
    2a88:	strb.w	r4, [r3, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a8c:	mvn.w	r4, #117	; 0x75
      _s = s;
      _b = b;
    2a90:	strb.w	r1, [r3, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a94:	mvn.w	r1, #115	; 0x73
    2a98:	strb.w	r4, [r3, #984]	; 0x3d8
      _s = s;
      _b = b;
    2a9c:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aa0:	strb.w	r7, [r3, #988]	; 0x3dc
      _b = b;
    2aa4:	mvn.w	r7, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2aa8:	strb.w	r1, [r3, #1002]	; 0x3ea
      _s = s;
    2aac:	mov.w	r1, #58	; 0x3a
      _b = b;
    2ab0:	strb.w	r4, [r3, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ab4:	movs	r4, #178	; 0xb2
      _s = s;
      _b = b;
    2ab6:	strb.w	r7, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aba:	mov.w	r7, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2abe:	strb.w	r6, [r3, #963]	; 0x3c3
      _s = s;
      _b = b;
    2ac2:	strb.w	r6, [r3, #977]	; 0x3d1
    2ac6:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ac8:	strb.w	r1, [r3, #1003]	; 0x3eb
      _b = b;
    2acc:	mvn.w	r1, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ad0:	strb.w	r8, [r3, #987]	; 0x3db
      _s = s;
    2ad4:	strb.w	lr, [r3, #985]	; 0x3d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ad8:	mov.w	lr, #190	; 0xbe
    2adc:	strb.w	r4, [r3, #966]	; 0x3c6
      _s = s;
    2ae0:	strb.w	r7, [r3, #982]	; 0x3d6
      _b = b;
    2ae4:	strb.w	r6, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ae8:	mvn.w	r6, #122	; 0x7a
    2aec:	strb.w	r8, [r3, #990]	; 0x3de
    2af0:	strb.w	r8, [r3, #996]	; 0x3e4
    2af4:	strb.w	r9, [r3, #999]	; 0x3e7
      _s = s;
      _b = b;
    2af8:	strb.w	r1, [r3, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2afc:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b00:	strb.w	fp, [r3, #1005]	; 0x3ed
      _s = s;
    2b04:	strb.w	r4, [r3, #1024]	; 0x400
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b08:	mvn.w	r4, #116	; 0x74
      _s = s;
    2b0c:	strb.w	r1, [r3, #1006]	; 0x3ee
      _b = b;
    2b10:	mvn.w	r1, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b14:	strb.w	r4, [r3, #1023]	; 0x3ff
      _s = s;
      _b = b;
    2b18:	mvn.w	r4, #7
    2b1c:	strb.w	r1, [r3, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b20:	mvn.w	r1, #120	; 0x78
      _s = s;
      _b = b;
    2b24:	strb.w	r4, [r3, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b28:	mvn.w	r4, #110	; 0x6e
    2b2c:	strb.w	r6, [r3, #1014]	; 0x3f6
      _s = s;
      _b = b;
    2b30:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b34:	strb.w	r4, [r3, #1026]	; 0x402
      _s = s;
    2b38:	mvn.w	r4, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b3c:	strb.w	r1, [r3, #1008]	; 0x3f0
      _s = s;
      _b = b;
    2b40:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b44:	strb.w	r4, [r3, #1027]	; 0x403
      _b = b;
    2b48:	mvn.w	r4, #20
    2b4c:	strb.w	r6, [r3, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b50:	mov.w	r6, #99	; 0x63
      _b = b;
    2b54:	strb.w	r4, [r3, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b58:	mvn.w	r4, #106	; 0x6a
      _s = s;
      _b = b;
    2b5c:	strb.w	r1, [r3, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b60:	mvn.w	r1, #125	; 0x7d
    2b64:	strb.w	r4, [r3, #1029]	; 0x405
      _s = s;
    2b68:	mvn.w	r4, #109	; 0x6d
    2b6c:	strb.w	r6, [r3, #1018]	; 0x3fa
      _b = b;
    2b70:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b74:	strb.w	r4, [r3, #1030]	; 0x406
      _b = b;
    2b78:	mvn.w	r4, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b7c:	strb.w	r1, [r3, #1011]	; 0x3f3
      _s = s;
    2b80:	mvn.w	r1, #93	; 0x5d
      _b = b;
    2b84:	strb.w	r4, [r3, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b88:	mvn.w	r4, #92	; 0x5c
      _b = b;
    2b8c:	strb.w	r6, [r3, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b90:	mvn.w	r6, #114	; 0x72
      _s = s;
    2b94:	strb.w	r4, [r3, #1033]	; 0x409
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b98:	mvn.w	r4, #73	; 0x49
      _s = s;
    2b9c:	strb.w	r1, [r3, #1012]	; 0x3f4
      _b = b;
    2ba0:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ba4:	strb.w	r6, [r3, #1020]	; 0x3fc
      _s = s;
      _b = b;
    2ba8:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bac:	strb.w	r4, [r3, #1035]	; 0x40b
      _s = s;
    2bb0:	mvn.w	r4, #57	; 0x39
      _b = b;
    2bb4:	strb.w	r1, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bb8:	movs	r1, #52	; 0x34
      _b = b;
    2bba:	strb.w	r6, [r3, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bbe:	mvn.w	r6, #39	; 0x27
    2bc2:	strb.w	r4, [r3, #1036]	; 0x40c
      _b = b;
    2bc6:	mvn.w	r4, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bca:	strb.w	r1, [r3, #1015]	; 0x3f7
    2bce:	movs	r1, #174	; 0xae
    2bd0:	strb.w	r6, [r3, #994]	; 0x3e2
      _b = b;
    2bd4:	mvn.w	r6, #17
    2bd8:	strb.w	r4, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bdc:	mvn.w	r4, #55	; 0x37
      _s = s;
    2be0:	strb.w	r2, [r3, #1009]	; 0x3f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2be4:	strb.w	ip, [r3, #1017]	; 0x3f9
      _s = s;
    2be8:	strb.w	r1, [r3, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bec:	mov	r1, r3
      _s = s;
      _b = b;
    2bee:	strb.w	r6, [r3, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bf2:	strb.w	r4, [r3, #1038]	; 0x40e
      _s = s;
      _b = b;
    2bf6:	mvn.w	r4, #10
    2bfa:	strb.w	r5, [r3, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bfe:	movs	r5, #114	; 0x72
      _b = b;
    2c00:	strb.w	r4, [r3, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c04:	mvn.w	r4, #54	; 0x36
      _s = s;
    2c08:	strb.w	r5, [r3, #1039]	; 0x40f
      _b = b;
    2c0c:	mvn.w	r5, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c10:	strb.w	r4, [r3, #1041]	; 0x411
      _s = s;
    2c14:	mov.w	r4, #104	; 0x68
      _b = b;
    2c18:	strb.w	r5, [r3, #1043]	; 0x413
    2c1c:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c20:	strb.w	r4, [r3, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c24:	mvn.w	r4, #75	; 0x4b
      _s = s;
      _b = b;
    2c28:	strb.w	r5, [r3, #1055]	; 0x41f
    2c2c:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c30:	strb.w	r4, [r3, #1044]	; 0x414
      _s = s;
    2c34:	mvn.w	r4, #95	; 0x5f
      _b = b;
    2c38:	strb.w	r5, [r3, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c3c:	mvn.w	r5, #90	; 0x5a
    2c40:	strb.w	r4, [r3, #1045]	; 0x415
      _b = b;
    2c44:	mvn.w	r4, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c48:	strb.w	r5, [r3, #1057]	; 0x421
      _b = b;
    2c4c:	mvn.w	r5, #62	; 0x3e
    2c50:	strb.w	r4, [r3, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c54:	mvn.w	r4, #125	; 0x7d
      _s = s;
      _b = b;
    2c58:	strb.w	r5, [r3, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c5c:	mvn.w	r5, #103	; 0x67
    2c60:	strb.w	r4, [r3, #1047]	; 0x417
      _s = s;
    2c64:	mov.w	r4, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c68:	strb.w	r5, [r3, #1059]	; 0x423
      _s = s;
      _b = b;
    2c6c:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c70:	strb.w	r4, [r3, #1048]	; 0x418
      _b = b;
    2c74:	mvn.w	r4, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c78:	strb.w	r2, [r3, #1060]	; 0x424
      _b = b;
    2c7c:	strb.w	r4, [r3, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c80:	mvn.w	r4, #70	; 0x46
    2c84:	strb.w	r2, [r3, #1063]	; 0x427
    2c88:	mvn.w	r2, #4
    2c8c:	strb.w	r4, [r3, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c90:	strb.w	r4, [r3, #1053]	; 0x41d
      _s = s;
    2c94:	mvn.w	r4, #111	; 0x6f
      _b = b;
    2c98:	strb.w	r5, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c9c:	mvn.w	r5, #109	; 0x6d
      _s = s;
    2ca0:	strb.w	r4, [r3, #1054]	; 0x41e
      _b = b;
    2ca4:	mvn.w	r4, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ca8:	strb.w	r2, [r3, #1066]	; 0x42a
      _b = b;
    2cac:	strb.w	r4, [r3, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cb0:	movs	r4, #170	; 0xaa
      _s = s;
    2cb2:	strb.w	r2, [r3, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cb6:	mvn.w	r2, #92	; 0x5c
    2cba:	strb.w	ip, [r3, #1050]	; 0x41a
    2cbe:	strb.w	r4, [r3, #1032]	; 0x408
    2cc2:	strb.w	r5, [r3, #1062]	; 0x426
      _s = s;
    2cc6:	movs	r5, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cc8:	strb.w	ip, [r3, #1065]	; 0x429
    2ccc:	strb.w	ip, [r3, #1068]	; 0x42c
      _s = s;
      _b = b;
    2cd0:	strb.w	sl, [r3, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cd4:	strb.w	r2, [r3, #1071]	; 0x42f
      _s = s;
    2cd8:	mvn.w	r2, #115	; 0x73
      _b = b;
    2cdc:	strb.w	r6, [r3, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ce0:	mvn.w	r6, #91	; 0x5b
      _s = s;
    2ce4:	strb.w	r2, [r3, #1072]	; 0x430
      _b = b;
    2ce8:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cec:	strb.w	r6, [r3, #1077]	; 0x435
      _s = s;
    2cf0:	mov.w	r6, #74	; 0x4a
      _b = b;
    2cf4:	strb.w	r2, [r3, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cf8:	mvn.w	r2, #75	; 0x4b
      _s = s;
    2cfc:	strb.w	r6, [r3, #1081]	; 0x439
      _b = b;
    2d00:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d04:	strb.w	r2, [r3, #1074]	; 0x432
      _s = s;
    2d08:	mov.w	r2, #69	; 0x45
      _b = b;
    2d0c:	strb.w	r6, [r3, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d10:	mvn.w	r6, #117	; 0x75
      _s = s;
    2d14:	strb.w	r2, [r3, #1075]	; 0x433
    2d18:	movs	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d1a:	strb.w	r6, [r3, #1083]	; 0x43b
      _s = s;
      _b = b;
    2d1e:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d22:	strb.w	r2, [r3, #1084]	; 0x43c
      _b = b;
    2d26:	mvn.w	r2, #46	; 0x2e
    2d2a:	strb.w	r6, [r3, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d2e:	mvn.w	r6, #55	; 0x37
      _b = b;
    2d32:	strb.w	r2, [r3, #1064]	; 0x428
    2d36:	mvn.w	r2, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d3a:	strb.w	r6, [r3, #1087]	; 0x43f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d3e:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    2d40:	strb.w	r2, [r3, #1088]	; 0x440
    2d44:	mvn.w	r2, #58	; 0x3a
    2d48:	strb.w	r0, [r3, #1079]	; 0x437
    2d4c:	strb.w	r2, [r3, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d50:	mvn.w	r2, #124	; 0x7c
    2d54:	strb.w	r9, [r3, #1080]	; 0x438
    2d58:	strb.w	r2, [r3, #1089]	; 0x441
      _s = s;
      _b = b;
    2d5c:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d60:	strb.w	fp, [r3, #1086]	; 0x43e
      _s = s;
      _b = b;
    2d64:	strb.w	r2, [r3, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d68:	mvn.w	r2, #120	; 0x78
      _s = s;
    2d6c:	strb.w	r5, [r3, #1078]	; 0x436
    2d70:	movs	r5, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d72:	strb.w	r2, [r3, #1092]	; 0x444
      _s = s;
    2d76:	mov.w	r2, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d7a:	strb.w	r6, [r3, #1056]	; 0x420
      _s = s;
    2d7e:	strb.w	r2, [r3, #1093]	; 0x445
      _b = b;
    2d82:	mvn.w	r2, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d86:	strb.w	r7, [r3, #1090]	; 0x442
    2d8a:	mvn.w	r7, #125	; 0x7d
      _b = b;
    2d8e:	strb.w	r2, [r3, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d92:	mvn.w	r2, #111	; 0x6f
    2d96:	strb.w	r2, [r3, #1095]	; 0x447
      _s = s;
    2d9a:	mvn.w	r2, #37	; 0x25
    2d9e:	strb.w	r2, [r3, #1096]	; 0x448
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2da2:	mvn.w	r2, #117	; 0x75
    2da6:	strb.w	r2, [r3, #1098]	; 0x44a
      _s = s;
    2daa:	mvn.w	r2, #84	; 0x54
    2dae:	strb.w	r2, [r3, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2db2:	mvn.w	r2, #117	; 0x75
    2db6:	strb.w	r2, [r3, #1101]	; 0x44d
      _s = s;
    2dba:	mvn.w	r2, #25
    2dbe:	strb.w	r2, [r3, #1102]	; 0x44e
      _b = b;
    2dc2:	mvn.w	r2, #43	; 0x2b
    2dc6:	strb.w	r2, [r3, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dca:	mvn.w	r2, #116	; 0x74
    2dce:	strb.w	r4, [r3, #1113]	; 0x459
      _s = s;
    2dd2:	mov.w	r4, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dd6:	strb.w	r2, [r3, #1104]	; 0x450
      _s = s;
    2dda:	mvn.w	r2, #84	; 0x54
    2dde:	strb.w	r4, [r3, #1123]	; 0x463
      _b = b;
    2de2:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2de6:	strb.w	r2, [r3, #1105]	; 0x451
      _b = b;
    2dea:	mvn.w	r2, #17
    2dee:	strb.w	r4, [r3, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2df2:	mov.w	r4, #95	; 0x5f
      _b = b;
    2df6:	strb.w	r2, [r3, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2dfa:	mvn.w	r2, #84	; 0x54
    2dfe:	strb.w	r4, [r3, #1129]	; 0x469
      _b = b;
    2e02:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e06:	strb.w	r2, [r3, #1108]	; 0x454
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e0a:	mvn.w	r2, #106	; 0x6a
      _s = s;
      _b = b;
    2e0e:	strb.w	r4, [r3, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e12:	mov.w	r4, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e16:	strb.w	r2, [r3, #1110]	; 0x456
      _s = s;
    2e1a:	mvn.w	r2, #99	; 0x63
    2e1e:	strb.w	r4, [r3, #1132]	; 0x46c
      _b = b;
    2e22:	mvn.w	r4, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e26:	strb.w	r2, [r3, #1111]	; 0x457
      _b = b;
    2e2a:	mvn.w	r2, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e2e:	strb.w	r6, [r3, #1138]	; 0x472
      _b = b;
    2e32:	mvn.w	r6, #35	; 0x23
    2e36:	strb.w	r2, [r3, #1112]	; 0x458
    2e3a:	mvn.w	r2, #21
    2e3e:	strb.w	r4, [r3, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e42:	mvn.w	r4, #56	; 0x38
      _s = s;
      _b = b;
    2e46:	strb.w	r2, [r3, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e4a:	mvn.w	r2, #82	; 0x52
      _s = s;
    2e4e:	strb.w	r7, [r3, #1135]	; 0x46f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e52:	mvn.w	r7, #73	; 0x49
    2e56:	strb.w	r2, [r3, #1116]	; 0x45c
      _s = s;
    2e5a:	mov.w	r2, #103	; 0x67
      _b = b;
    2e5e:	strb.w	r6, [r3, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e62:	mvn.w	r6, #92	; 0x5c
      _s = s;
    2e66:	strb.w	r2, [r3, #1117]	; 0x45d
      _b = b;
    2e6a:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e6e:	strb.w	r9, [r3, #1107]	; 0x453
      _s = s;
      _b = b;
    2e72:	strb.w	r2, [r3, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e76:	mvn.w	r2, #70	; 0x46
      _s = s;
      _b = b;
    2e7a:	strb.w	r0, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e7e:	strb.w	r2, [r3, #1119]	; 0x45f
      _s = s;
    2e82:	mov.w	r2, #76	; 0x4c
    2e86:	strb.w	r5, [r3, #1114]	; 0x45a
    2e8a:	strb.w	r2, [r3, #1120]	; 0x460
      _b = b;
    2e8e:	movs	r2, #221	; 0xdd
    2e90:	strb.w	r5, [r3, #1121]	; 0x461
    2e94:	strb.w	r2, [r3, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e98:	strb.w	r8, [r3, #1125]	; 0x465
      _s = s;
      _b = b;
    2e9c:	mov.w	r8, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ea0:	strb.w	r4, [r3, #1134]	; 0x46e
    2ea4:	movs	r4, #202	; 0xca
      _s = s;
      _b = b;
    2ea6:	strb.w	sl, [r3, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2eaa:	mvn.w	sl, #118	; 0x76
    2eae:	strb.w	r7, [r3, #1137]	; 0x471
    2eb2:	movs	r7, #117	; 0x75
    2eb4:	strb.w	r6, [r3, #1140]	; 0x474
      _s = s;
    2eb8:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ebc:	strb.w	r4, [r3, #1131]	; 0x46b
    2ec0:	mvn.w	r4, #96	; 0x60
      _s = s;
    2ec4:	strb.w	r6, [r3, #1141]	; 0x475
      _b = b;
    2ec8:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ecc:	strb.w	r4, [r3, #1128]	; 0x468
      _s = s;
      _b = b;
    2ed0:	mvn.w	r4, #21
    2ed4:	strb.w	r6, [r3, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ed8:	mvn.w	r6, #90	; 0x5a
      _s = s;
      _b = b;
    2edc:	strb.w	r4, [r3, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ee0:	mvn.w	r4, #71	; 0x47
    2ee4:	strb.w	r6, [r3, #1143]	; 0x477
      _s = s;
    2ee8:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2eec:	strb.w	r4, [r3, #1155]	; 0x483
      _s = s;
    2ef0:	mvn.w	r4, #80	; 0x50
    2ef4:	strb.w	r6, [r3, #1144]	; 0x478
      _b = b;
    2ef8:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2efc:	strb.w	r4, [r3, #1156]	; 0x484
      _b = b;
    2f00:	mvn.w	r4, #10
    2f04:	strb.w	r6, [r3, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f08:	mvn.w	r6, #70	; 0x46
      _b = b;
    2f0c:	strb.w	r4, [r3, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f10:	mvn.w	r4, #114	; 0x72
      _s = s;
    2f14:	strb.w	r6, [r3, #1147]	; 0x47b
      _b = b;
    2f18:	mvn.w	r6, #19
    2f1c:	strb.w	r0, [r3, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f20:	mvn.w	r0, #119	; 0x77
      _s = s;
      _b = b;
    2f24:	strb.w	r6, [r3, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f28:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f2c:	strb.w	r0, [r3, #1161]	; 0x489
      _s = s;
    2f30:	movs	r0, #145	; 0x91
    2f32:	strb.w	r6, [r3, #1150]	; 0x47e
      _b = b;
    2f36:	mvn.w	r6, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f3a:	strb.w	r4, [r3, #1164]	; 0x48c
      _s = s;
    2f3e:	mov.w	r4, #90	; 0x5a
      _b = b;
    2f42:	strb.w	r6, [r3, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f46:	mvn.w	r6, #66	; 0x42
      _s = s;
    2f4a:	str	r0, [sp, #28]
      _b = b;
    2f4c:	mvn.w	r0, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f50:	strb.w	r6, [r3, #1152]	; 0x480
      _s = s;
    2f54:	mvn.w	r6, #92	; 0x5c
    2f58:	strb.w	r4, [r3, #1165]	; 0x48d
      _b = b;
    2f5c:	mvn.w	r4, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f60:	strb.w	r6, [r3, #1153]	; 0x481
    2f64:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f68:	strb.w	ip, [r3, #1146]	; 0x47a
      _s = s;
    2f6c:	strb.w	r6, [r3, #1126]	; 0x466
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f70:	mvn.w	r6, #116	; 0x74
    2f74:	strb.w	r7, [r3, #1122]	; 0x462
    2f78:	strb.w	r6, [r3, #1167]	; 0x48f
      _s = s;
    2f7c:	mvn.w	r6, #5
      _b = b;
    2f80:	strb.w	r8, [r3, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f84:	strb.w	r6, [r3, #1168]	; 0x490
      _b = b;
    2f88:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f8c:	strb.w	lr, [r3, #1149]	; 0x47d
      _s = s;
      _b = b;
    2f90:	strb.w	r6, [r3, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f94:	mvn.w	r6, #125	; 0x7d
      _s = s;
      _b = b;
    2f98:	strb.w	r0, [r3, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f9c:	movs	r0, #152	; 0x98
      _s = s;
      _b = b;
    2f9e:	strb.w	r4, [r3, #1166]	; 0x48e
    2fa2:	movs	r4, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fa4:	strb.w	r6, [r3, #1170]	; 0x492
      _s = s;
      _b = b;
    2fa8:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fac:	strb.w	lr, [r3, #1186]	; 0x4a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fb0:	mvn.w	lr, #88	; 0x58
      _s = s;
      _b = b;
    2fb4:	strb.w	r6, [r3, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fb8:	mvn.w	r6, #123	; 0x7b
    2fbc:	strb.w	lr, [r3, #1158]	; 0x486
      _s = s;
    2fc0:	mov.w	lr, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fc4:	strb.w	r6, [r3, #1173]	; 0x495
      _s = s;
    2fc8:	movs	r6, #160	; 0xa0
    2fca:	strb.w	lr, [r3, #1159]	; 0x487
    2fce:	mov.w	lr, #42	; 0x2a
    2fd2:	str	r6, [sp, #40]	; 0x28
    2fd4:	mvn.w	r6, #109	; 0x6d
    2fd8:	strb.w	lr, [r3, #1162]	; 0x48a
    2fdc:	mov.w	lr, #89	; 0x59
    2fe0:	strb.w	r6, [r3, #1174]	; 0x496
      _b = b;
    2fe4:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fe8:	strb.w	lr, [r3, #1171]	; 0x493
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fec:	mvn.w	lr, #109	; 0x6d
      _s = s;
      _b = b;
    2ff0:	strb.w	r6, [r3, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ff4:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ff8:	str	r0, [sp, #32]
      _s = s;
      _b = b;
    2ffa:	movs	r0, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ffc:	strb.w	r6, [r3, #1177]	; 0x499
      _b = b;
    3000:	movs	r6, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3002:	strb.w	lr, [r3, #1188]	; 0x4a4
      _s = s;
      _b = b;
    3006:	mov	ip, r4
    3008:	str	r6, [sp, #44]	; 0x2c
    300a:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    300e:	ldrb.w	lr, [sp, #32]
      _b = b;
    3012:	strb.w	r6, [r3, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3016:	mvn.w	r6, #107	; 0x6b
      _s = s;
    301a:	strb.w	lr, [r3, #1189]	; 0x4a5
      _b = b;
    301e:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3022:	strb.w	r6, [r3, #1179]	; 0x49b
      _s = s;
    3026:	movs	r6, #180	; 0xb4
      _b = b;
    3028:	strb.w	lr, [r3, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    302c:	mvn.w	lr, #93	; 0x5d
      _s = s;
    3030:	str	r6, [sp, #48]	; 0x30
    3032:	mvn.w	r6, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3036:	strb.w	lr, [r3, #1191]	; 0x4a7
      _s = s;
    303a:	mvn.w	lr, #51	; 0x33
    303e:	strb.w	r6, [r3, #1180]	; 0x49c
    3042:	mvn.w	r6, #59	; 0x3b
    3046:	strb.w	lr, [r3, #1192]	; 0x4a8
      _b = b;
    304a:	mvn.w	lr, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    304e:	strb.w	r6, [r3, #1183]	; 0x49f
      _b = b;
    3052:	mvn.w	r6, #42	; 0x2a
    3056:	strb.w	lr, [r3, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    305a:	mov.w	lr, #102	; 0x66
      _s = s;
      _b = b;
    305e:	strb.w	r6, [r3, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3062:	movs	r6, #173	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3064:	strb.w	r9, [r3, #1176]	; 0x498
      _s = s;
    3068:	str	r6, [sp, #52]	; 0x34
      _b = b;
    306a:	mvn.w	r6, #19
    306e:	strb.w	r4, [r3, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3072:	movs	r4, #129	; 0x81
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3074:	strb.w	r9, [r3, #1182]	; 0x49e
    3078:	strb.w	sl, [r3, #1185]	; 0x4a1
    307c:	mvn.w	sl, #62	; 0x3e
      _s = s;
      _b = b;
    3080:	strb.w	r6, [r3, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3084:	mvn.w	r6, #96	; 0x60
    3088:	strb.w	r5, [r3, #1194]	; 0x4aa
      _s = s;
    308c:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3090:	strb.w	lr, [r3, #1197]	; 0x4ad
    3094:	mov.w	lr, #80	; 0x50
      _s = s;
    3098:	strb.w	r5, [r3, #1195]	; 0x4ab
      _b = b;
    309c:	mvn.w	r5, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30a0:	strb.w	lr, [r3, #1200]	; 0x4b0
      _s = s;
      _b = b;
    30a4:	mvn.w	lr, #76	; 0x4c
    30a8:	strb.w	r5, [r3, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30ac:	mov.w	r5, #103	; 0x67
      _b = b;
    30b0:	strb.w	lr, [r3, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30b4:	mov.w	lr, #32
    30b8:	strb.w	r5, [r3, #1198]	; 0x4ae
      _b = b;
    30bc:	mov.w	r5, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30c0:	strb.w	lr, [r3, #1216]	; 0x4c0
    30c4:	mov.w	lr, #67	; 0x43
      _b = b;
    30c8:	strb.w	r5, [r3, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30cc:	mov.w	r5, #58	; 0x3a
    30d0:	strb.w	lr, [r3, #1219]	; 0x4c3
    30d4:	mov.w	lr, #94	; 0x5e
    30d8:	strb.w	r5, [r3, #1204]	; 0x4b4
      _b = b;
    30dc:	mov.w	r5, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30e0:	strb.w	lr, [r3, #1210]	; 0x4ba
      _b = b;
    30e4:	mvn.w	lr, #33	; 0x21
    30e8:	strb.w	r7, [r3, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30ec:	mov.w	r7, #99	; 0x63
      _b = b;
    30f0:	strb.w	r5, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30f4:	mov.w	r5, #18
      _s = s;
      _b = b;
    30f8:	strb.w	lr, [r3, #1220]	; 0x4c4
    30fc:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3100:	strb.w	r5, [r3, #1206]	; 0x4b6
      _s = s;
    3104:	mov.w	r5, #74	; 0x4a
    3108:	strb.w	r7, [r3, #1213]	; 0x4bd
      _b = b;
    310c:	mvn.w	r7, #37	; 0x25
    3110:	strb.w	lr, [r3, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3114:	mov.w	lr, #99	; 0x63
    3118:	strb.w	r5, [r3, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    311c:	mov.w	r5, #17
      _s = s;
      _b = b;
    3120:	strb.w	r7, [r3, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3124:	mvn.w	r7, #43	; 0x2b
      _s = s;
    3128:	strb.w	lr, [r3, #1225]	; 0x4c9
      _b = b;
    312c:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3130:	strb.w	r5, [r3, #1209]	; 0x4b9
      _s = s;
      _b = b;
    3134:	mvn.w	r5, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3138:	strb.w	r7, [r3, #1215]	; 0x4bf
      _s = s;
      _b = b;
    313c:	mvn.w	r7, #25
    3140:	strb.w	lr, [r3, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3144:	mvn.w	lr, #55	; 0x37
      _s = s;
      _b = b;
    3148:	strb.w	r5, [r3, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    314c:	mvn.w	r5, #51	; 0x33
      _s = s;
      _b = b;
    3150:	strb.w	r7, [r3, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3154:	mvn.w	r7, #70	; 0x46
    3158:	strb.w	lr, [r3, #1227]	; 0x4cb
      _s = s;
      _b = b;
    315c:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3160:	strb.w	r8, [r3, #1201]	; 0x4b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3164:	strb.w	r9, [r3, #1203]	; 0x4b3
    3168:	mov.w	r9, #44	; 0x2c
    316c:	strb.w	r5, [r3, #1212]	; 0x4bc
    3170:	movs	r5, #55	; 0x37
    3172:	strb.w	r7, [r3, #1218]	; 0x4c2
      _s = s;
      _b = b;
    3176:	movs	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3178:	strb.w	r6, [r3, #1221]	; 0x4c5
      _s = s;
    317c:	movs	r6, #39	; 0x27
    317e:	strb.w	r0, [r3, #1222]	; 0x4c6
      _b = b;
    3182:	strb.w	lr, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3186:	mvn.w	lr, #49	; 0x31
    318a:	strb.w	sl, [r3, #1233]	; 0x4d1
      _s = s;
      _b = b;
    318e:	mvn.w	sl, #11
    3192:	str.w	ip, [sp, #36]	; 0x24
    3196:	strb.w	sl, [r3, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    319a:	mvn.w	sl, #120	; 0x78
    319e:	strb.w	lr, [r3, #1230]	; 0x4ce
      _s = s;
    31a2:	mov.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31a6:	strb.w	sl, [r3, #1242]	; 0x4da
    31aa:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    31ae:	strb.w	ip, [r3, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31b2:	mov.w	ip, #180	; 0xb4
    31b6:	strb.w	sl, [r3, #1245]	; 0x4dd
      _s = s;
    31ba:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31be:	strb.w	fp, [r3, #1239]	; 0x4d7
      _s = s;
      _b = b;
    31c2:	mov.w	fp, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31c6:	strb.w	sl, [r3, #1246]	; 0x4de
    31ca:	mvn.w	sl, #84	; 0x54
    31ce:	strb.w	lr, [r3, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31d2:	mov.w	lr, #177	; 0xb1
      _s = s;
    31d6:	strb.w	sl, [r3, #1249]	; 0x4e1
      _b = b;
    31da:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31de:	strb.w	r0, [r3, #1234]	; 0x4d2
      _b = b;
    31e2:	strb.w	sl, [r3, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e6:	mvn.w	sl, #122	; 0x7a
    31ea:	strb.w	ip, [r3, #1236]	; 0x4d4
    31ee:	strb.w	sl, [r3, #1251]	; 0x4e3
      _s = s;
    31f2:	mov.w	sl, #100	; 0x64
      _b = b;
    31f6:	strb.w	r0, [r3, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31fa:	strb.w	sl, [r3, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31fe:	mvn.w	sl, #83	; 0x53
      _s = s;
      _b = b;
    3202:	strb.w	fp, [r3, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3206:	strb.w	sl, [r3, #1224]	; 0x4c8
      _s = s;
    320a:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    320e:	strb.w	r4, [r3, #1248]	; 0x4e0
      _s = s;
    3212:	strb.w	sl, [r3, #1228]	; 0x4cc
      _b = b;
    3216:	mvn.w	sl, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    321a:	strb.w	fp, [r3, #1258]	; 0x4ea
    321e:	mov.w	fp, #160	; 0xa0
      _b = b;
    3222:	strb.w	sl, [r3, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3226:	mov.w	sl, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    322a:	ldr	r2, [pc, #1016]	; (3624 <_GLOBAL__sub_I_nextTime3+0x26c8>)
      _s = s;
    322c:	strb.w	sl, [r3, #1237]	; 0x4d5
    3230:	mov.w	sl, #72	; 0x48
    3234:	strb.w	sl, [r3, #1240]	; 0x4d8
    3238:	mov.w	sl, #40	; 0x28
    323c:	strb.w	sl, [r3, #1243]	; 0x4db
      _b = b;
    3240:	mvn.w	sl, #31
    3244:	strb.w	sl, [r3, #1244]	; 0x4dc
    3248:	mvn.w	sl, #22
    324c:	strb.w	sl, [r3, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3250:	mvn.w	sl, #111	; 0x6f
    3254:	strb.w	sl, [r3, #1254]	; 0x4e6
      _s = s;
      _b = b;
    3258:	mvn.w	sl, #28
    325c:	strb.w	sl, [r3, #1256]	; 0x4e8
    3260:	ldrb.w	sl, [sp, #36]	; 0x24
    3264:	strb.w	sl, [r3, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3268:	ldrb.w	sl, [sp, #32]
      _s = s;
    326c:	strb.w	ip, [r3, #1267]	; 0x4f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3270:	strb.w	sl, [r3, #1260]	; 0x4ec
      _s = s;
    3274:	mvn.w	sl, #115	; 0x73
    3278:	strb.w	fp, [r3, #1264]	; 0x4f0
    327c:	strb.w	sl, [r3, #1261]	; 0x4ed
      _b = b;
    3280:	mvn.w	sl, #31
    3284:	strb.w	r0, [r3, #1268]	; 0x4f4
    3288:	strb.w	sl, [r3, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    328c:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    3290:	strb.w	r8, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3294:	strb.w	sl, [r3, #1263]	; 0x4ef
      _s = s;
      _b = b;
    3298:	ldrb.w	sl, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    329c:	strb.w	r4, [r3, #1279]	; 0x4ff
      _b = b;
    32a0:	strb.w	sl, [r3, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32a4:	mvn.w	sl, #109	; 0x6d
    32a8:	strb.w	r9, [r3, #1275]	; 0x4fb
    32ac:	mov.w	r9, #12
    32b0:	strb.w	sl, [r3, #1266]	; 0x4f2
      _s = s;
    32b4:	mov	sl, ip
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b6:	mvn.w	ip, #111	; 0x6f
    32ba:	strb.w	r5, [r3, #1272]	; 0x4f8
      _s = s;
      _b = b;
    32be:	strb.w	r7, [r3, #1286]	; 0x506
    32c2:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32c6:	strb.w	ip, [r3, #1269]	; 0x4f5
      _s = s;
    32ca:	mov.w	ip, #97	; 0x61
    32ce:	strb.w	ip, [r3, #1270]	; 0x4f6
      _b = b;
    32d2:	mvn.w	ip, #64	; 0x40
    32d6:	strb.w	ip, [r3, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32da:	mov.w	ip, #94	; 0x5e
    32de:	strb.w	ip, [r3, #1273]	; 0x4f9
      _b = b;
    32e2:	mvn.w	ip, #99	; 0x63
    32e6:	strb.w	ip, [r3, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32ea:	mvn.w	ip, #33	; 0x21
    32ee:	strb.w	ip, [r3, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32f2:	mov.w	ip, #108	; 0x6c
    32f6:	strb.w	ip, [r3, #1281]	; 0x501
      _s = s;
    32fa:	ldrb.w	ip, [sp, #52]	; 0x34
    32fe:	strb.w	ip, [r3, #1282]	; 0x502
      _b = b;
    3302:	mov.w	ip, #47	; 0x2f
    3306:	strb.w	ip, [r3, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    330a:	mov.w	ip, #18
    330e:	strb.w	ip, [r3, #1284]	; 0x504
    3312:	mov.w	ip, #85	; 0x55
    3316:	strb.w	ip, [r3, #1278]	; 0x4fe
      _s = s;
    331a:	mov.w	ip, #125	; 0x7d
    331e:	strb.w	ip, [r3, #1255]	; 0x4e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3322:	mvn.w	ip, #108	; 0x6c
    3326:	strb.w	ip, [r3, #1257]	; 0x4e9
      _s = s;
      _b = b;
    332a:	mov.w	ip, #53	; 0x35
    332e:	strb.w	ip, [r3, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3332:	mvn.w	ip, #94	; 0x5e
    3336:	strb.w	ip, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    333a:	mvn.w	ip, #30
    333e:	strb.w	ip, [r3, #1287]	; 0x507
    3342:	mvn.w	ip, #109	; 0x6d
      _s = s;
    3346:	strb.w	r5, [r3, #1318]	; 0x526
    334a:	mov.w	r5, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    334e:	strb.w	ip, [r3, #1317]	; 0x525
      _s = s;
    3352:	mov.w	ip, #41	; 0x29
    3356:	strb.w	r5, [r3, #1288]	; 0x508
      _b = b;
    335a:	mvn.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    335e:	strb.w	ip, [r3, #1297]	; 0x511
      _b = b;
    3362:	mvn.w	ip, #26
    3366:	strb.w	r5, [r3, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    336a:	mvn.w	r5, #42	; 0x2a
      _s = s;
      _b = b;
    336e:	strb.w	ip, [r3, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3372:	mvn.w	ip, #59	; 0x3b
    3376:	strb.w	r5, [r3, #1290]	; 0x50a
      _s = s;
      _b = b;
    337a:	mvn.w	r5, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    337e:	strb.w	ip, [r3, #1302]	; 0x516
    3382:	strb.w	ip, [r3, #1311]	; 0x51f
    3386:	mvn.w	ip, #65	; 0x41
      _s = s;
      _b = b;
    338a:	strb.w	r5, [r3, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    338e:	mvn.w	r5, #52	; 0x34
    3392:	strb.w	ip, [r3, #1305]	; 0x519
      _s = s;
    3396:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    339a:	strb.w	r5, [r3, #1296]	; 0x510
    339e:	mvn.w	r5, #39	; 0x27
      _s = s;
    33a2:	strb.w	ip, [r3, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33a6:	mvn.w	ip, #41	; 0x29
    33aa:	strb.w	r5, [r3, #1293]	; 0x50d
      _s = s;
    33ae:	mov.w	r5, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33b2:	strb.w	ip, [r3, #1308]	; 0x51c
      _s = s;
    33b6:	strb.w	ip, [r3, #1312]	; 0x520
      _b = b;
    33ba:	mvn.w	ip, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33be:	strb.w	r5, [r3, #1294]	; 0x50e
      _b = b;
    33c2:	mvn.w	r5, #21
    33c6:	strb.w	ip, [r3, #1310]	; 0x51e
    33ca:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33ce:	strb.w	r8, [r3, #1303]	; 0x517
      _b = b;
    33d2:	mov.w	r8, #70	; 0x46
    33d6:	strb.w	ip, [r3, #1313]	; 0x521
    33da:	strb.w	ip, [r3, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33de:	mov.w	ip, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e2:	strb.w	fp, [r3, #1299]	; 0x513
      _s = s;
      _b = b;
    33e6:	mov.w	fp, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33ea:	strb.w	ip, [r3, #1315]	; 0x523
      _b = b;
    33ee:	mvn.w	ip, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33f2:	strb.w	sl, [r3, #1300]	; 0x514
    33f6:	mov.w	sl, #207	; 0xcf
      _b = b;
    33fa:	strb.w	ip, [r3, #1319]	; 0x527
    33fe:	mvn.w	ip, #94	; 0x5e
    3402:	strb.w	r7, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3406:	movs	r7, #206	; 0xce
      _b = b;
    3408:	strb.w	r0, [r3, #1304]	; 0x518
    340c:	strb.w	r0, [r3, #1307]	; 0x51b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3410:	strb.w	lr, [r3, #1314]	; 0x522
      _s = s;
    3414:	mov.w	lr, #80	; 0x50
    3418:	strb.w	r6, [r3, #1291]	; 0x50b
    341c:	strb.w	r6, [r3, #1309]	; 0x51d
      _b = b;
    3420:	strb.w	r5, [r3, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3424:	movs	r5, #36	; 0x24
      _b = b;
    3426:	strb.w	ip, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    342a:	ldrb.w	ip, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    342e:	strb.w	r4, [r3, #1320]	; 0x528
      _s = s;
    3432:	strb.w	ip, [r3, #1327]	; 0x52f
      _b = b;
    3436:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    343a:	strb.w	r4, [r3, #1326]	; 0x52e
      _s = s;
      _b = b;
    343e:	mvn.w	r4, #22
    3442:	strb.w	ip, [r3, #1331]	; 0x533
    3446:	strb.w	ip, [r3, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    344a:	mvn.w	ip, #108	; 0x6c
      _s = s;
      _b = b;
    344e:	strb.w	r4, [r3, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3452:	movs	r4, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3454:	strb.w	ip, [r3, #1335]	; 0x537
    3458:	ldrb.w	ip, [sp, #28]
      _s = s;
      _b = b;
    345c:	strb.w	r0, [r3, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3460:	strb.w	ip, [r3, #1341]	; 0x53d
      _s = s;
      _b = b;
    3464:	mvn.w	ip, #11
    3468:	strb.w	r0, [r3, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    346c:	mvn.w	r0, #22
      _s = s;
      _b = b;
    3470:	strb.w	ip, [r3, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3474:	ldrb.w	ip, [sp, #32]
    3478:	strb.w	ip, [r3, #1345]	; 0x541
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    347c:	mov.w	ip, #47	; 0x2f
    3480:	strb.w	ip, [r3, #1350]	; 0x546
      _s = s;
    3484:	mov.w	ip, #119	; 0x77
    3488:	strb.w	ip, [r3, #1342]	; 0x53e
    348c:	mov.w	ip, #24
    3490:	strb.w	ip, [r3, #1321]	; 0x529
      _b = b;
    3494:	mvn.w	ip, #27
    3498:	strb.w	ip, [r3, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    349c:	mvn.w	ip, #121	; 0x79
    34a0:	strb.w	ip, [r3, #1323]	; 0x52b
      _s = s;
    34a4:	mvn.w	ip, #5
    34a8:	strb.w	ip, [r3, #1324]	; 0x52c
      _b = b;
    34ac:	mvn.w	ip, #24
    34b0:	strb.w	ip, [r3, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34b4:	mvn.w	ip, #124	; 0x7c
    34b8:	strb.w	ip, [r3, #1329]	; 0x531
      _s = s;
    34bc:	mov.w	ip, #105	; 0x69
    34c0:	strb.w	ip, [r3, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34c4:	mvn.w	ip, #119	; 0x77
    34c8:	strb.w	ip, [r3, #1332]	; 0x534
      _s = s;
    34cc:	mov.w	ip, #99	; 0x63
    34d0:	strb.w	ip, [r3, #1333]	; 0x535
    34d4:	mov.w	ip, #103	; 0x67
    34d8:	strb.w	ip, [r3, #1336]	; 0x538
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34dc:	mvn.w	ip, #104	; 0x68
    34e0:	strb.w	ip, [r3, #1338]	; 0x53a
      _s = s;
    34e4:	mov.w	ip, #79	; 0x4f
    34e8:	strb.w	ip, [r3, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34ec:	mvn.w	ip, #100	; 0x64
    34f0:	strb.w	ip, [r3, #1344]	; 0x540
    34f4:	mvn.w	ip, #113	; 0x71
    34f8:	strb.w	ip, [r3, #1347]	; 0x543
      _s = s;
    34fc:	mov.w	ip, #88	; 0x58
    3500:	strb.w	ip, [r3, #1348]	; 0x544
      _b = b;
    3504:	mvn.w	ip, #80	; 0x50
    3508:	strb.w	ip, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    350c:	mov.w	ip, #124	; 0x7c
    3510:	strb.w	lr, [r3, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3514:	mov.w	lr, #18
      _s = s;
    3518:	strb.w	ip, [r3, #1351]	; 0x547
      _b = b;
    351c:	mov.w	ip, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3520:	strb.w	lr, [r3, #1362]	; 0x552
    3524:	mov.w	lr, #52	; 0x34
      _s = s;
      _b = b;
    3528:	strb.w	ip, [r3, #1352]	; 0x548
    352c:	mvn.w	ip, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3530:	strb.w	lr, [r3, #1353]	; 0x549
      _s = s;
    3534:	mvn.w	lr, #84	; 0x54
      _b = b;
    3538:	strb.w	ip, [r3, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    353c:	mvn.w	ip, #39	; 0x27
      _s = s;
    3540:	strb.w	lr, [r3, #1354]	; 0x54a
      _b = b;
    3544:	mov.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3548:	strb.w	ip, [r3, #1371]	; 0x55b
      _s = s;
    354c:	mov.w	ip, #33	; 0x21
      _b = b;
    3550:	strb.w	lr, [r3, #1361]	; 0x551
    3554:	mov.w	lr, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3558:	strb.w	ip, [r3, #1372]	; 0x55c
      _b = b;
    355c:	mvn.w	ip, #24
    3560:	strb.w	lr, [r3, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3564:	mvn.w	lr, #34	; 0x22
      _s = s;
      _b = b;
    3568:	strb.w	ip, [r3, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    356c:	mov.w	ip, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3570:	strb.w	lr, [r3, #1365]	; 0x555
      _s = s;
    3574:	mov.w	lr, #40	; 0x28
    3578:	strb.w	ip, [r3, #1381]	; 0x565
    357c:	strb.w	lr, [r3, #1366]	; 0x556
      _b = b;
    3580:	mvn.w	lr, #43	; 0x2b
    3584:	ldrb.w	ip, [sp, #36]	; 0x24
    3588:	strb.w	lr, [r3, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    358c:	strb.w	lr, [r3, #1368]	; 0x558
    3590:	mvn.w	lr, #60	; 0x3c
      _s = s;
    3594:	strb.w	r6, [r3, #1369]	; 0x559
      _b = b;
    3598:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    359c:	strb.w	lr, [r3, #1374]	; 0x55e
      _s = s;
    35a0:	mov.w	lr, #59	; 0x3b
      _b = b;
    35a4:	strb.w	ip, [r3, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35a8:	mvn.w	ip, #72	; 0x48
      _s = s;
    35ac:	strb.w	lr, [r3, #1375]	; 0x55f
      _b = b;
    35b0:	mvn.w	lr, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35b4:	strb.w	r0, [r3, #1359]	; 0x54f
    35b8:	movs	r0, #159	; 0x9f
      _s = s;
      _b = b;
    35ba:	strb.w	lr, [r3, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35be:	mvn.w	lr, #105	; 0x69
      _s = s;
      _b = b;
    35c2:	strb.w	r6, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35c6:	movs	r6, #173	; 0xad
      _s = s;
      _b = b;
    35c8:	strb.w	fp, [r3, #1355]	; 0x54b
    35cc:	mov.w	fp, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35d0:	strb.w	r9, [r3, #1356]	; 0x54c
      _s = s;
    35d4:	mov.w	r9, #121	; 0x79
    35d8:	strb.w	sl, [r3, #1357]	; 0x54d
    35dc:	mov.w	sl, #193	; 0xc1
      _b = b;
    35e0:	strb.w	r8, [r3, #1358]	; 0x54e
    35e4:	mov.w	r8, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35e8:	strb.w	ip, [r3, #1380]	; 0x564
    35ec:	mvn.w	ip, #57	; 0x39
      _s = s;
    35f0:	strb.w	r5, [r3, #1360]	; 0x550
    35f4:	strb.w	r7, [r3, #1363]	; 0x553
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35f8:	strb.w	lr, [r3, #1377]	; 0x561
      _s = s;
    35fc:	mvn.w	lr, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3600:	strb.w	ip, [r3, #1389]	; 0x56d
      _s = s;
    3604:	mvn.w	ip, #55	; 0x37
    3608:	strb.w	lr, [r3, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    360c:	mvn.w	lr, #54	; 0x36
      _s = s;
    3610:	strb.w	ip, [r3, #1390]	; 0x56e
      _b = b;
    3614:	mvn.w	ip, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3618:	strb.w	lr, [r3, #1383]	; 0x567
      _s = s;
      _b = b;
    361c:	mvn.w	lr, #21
    3620:	b.n	3628 <_GLOBAL__sub_I_nextTime3+0x26cc>
    3622:	nop
    3624:	.word	0x20004b30
    3628:	strb.w	ip, [r3, #1391]	; 0x56f
    362c:	strb.w	lr, [r3, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3630:	mvn.w	lr, #108	; 0x6c
      _s = s;
      _b = b;
    3634:	strb.w	ip, [r3, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3638:	mov.w	ip, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    363c:	strb.w	lr, [r3, #1395]	; 0x573
      _s = s;
    3640:	mov.w	lr, #124	; 0x7c
    3644:	strb.w	ip, [r3, #1396]	; 0x574
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3648:	mvn.w	ip, #125	; 0x7d
      _s = s;
    364c:	strb.w	lr, [r3, #1393]	; 0x571
      _b = b;
    3650:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3654:	strb.w	ip, [r3, #1398]	; 0x576
      _s = s;
      _b = b;
    3658:	mvn.w	ip, #44	; 0x2c
    365c:	strb.w	lr, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3660:	mov.w	lr, #105	; 0x69
      _b = b;
    3664:	strb.w	ip, [r3, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3668:	mvn.w	ip, #120	; 0x78
      _s = s;
    366c:	strb.w	lr, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3670:	mvn.w	lr, #124	; 0x7c
    3674:	strb.w	ip, [r3, #1401]	; 0x579
      _s = s;
    3678:	mvn.w	ip, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    367c:	strb.w	lr, [r3, #1407]	; 0x57f
      _s = s;
    3680:	mvn.w	lr, #100	; 0x64
    3684:	strb.w	ip, [r3, #1402]	; 0x57a
      _b = b;
    3688:	mvn.w	ip, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    368c:	strb.w	lr, [r3, #1408]	; 0x580
      _b = b;
    3690:	mvn.w	lr, #21
    3694:	strb.w	ip, [r3, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3698:	mvn.w	ip, #127	; 0x7f
      _s = s;
      _b = b;
    369c:	strb.w	lr, [r3, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36a0:	mvn.w	lr, #99	; 0x63
    36a4:	strb.w	ip, [r3, #1404]	; 0x57c
      _s = s;
      _b = b;
    36a8:	mvn.w	ip, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ac:	strb.w	lr, [r3, #1410]	; 0x582
      _s = s;
      _b = b;
    36b0:	mvn.w	lr, #26
    36b4:	strb.w	ip, [r3, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36b8:	mvn.w	ip, #61	; 0x3d
      _b = b;
    36bc:	strb.w	lr, [r3, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36c0:	mov.w	lr, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36c4:	strb.w	r6, [r3, #1392]	; 0x570
      _s = s;
    36c8:	strb.w	lr, [r3, #1414]	; 0x586
      _b = b;
    36cc:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36d0:	strb.w	r4, [r3, #1399]	; 0x577
    36d4:	movs	r4, #174	; 0xae
      _b = b;
    36d6:	strb.w	lr, [r3, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36da:	mov.w	lr, #96	; 0x60
    36de:	strb.w	lr, [r3, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36e2:	mvn.w	lr, #51	; 0x33
    36e6:	strb.w	lr, [r3, #1386]	; 0x56a
      _s = s;
    36ea:	mov.w	lr, #75	; 0x4b
    36ee:	strb.w	lr, [r3, #1387]	; 0x56b
      _b = b;
    36f2:	mvn.w	lr, #19
    36f6:	strb.w	lr, [r3, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    36fa:	mov.w	lr, #78	; 0x4e
    36fe:	strb.w	ip, [r3, #1411]	; 0x583
      _b = b;
    3702:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3706:	strb.w	r5, [r3, #1431]	; 0x597
    370a:	mov.w	r5, #105	; 0x69
      _s = s;
      _b = b;
    370e:	strb.w	ip, [r3, #1418]	; 0x58a
    3712:	mvn.w	ip, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3716:	strb.w	r5, [r3, #1434]	; 0x59a
      _s = s;
      _b = b;
    371a:	mov.w	r5, #88	; 0x58
    371e:	strb.w	ip, [r3, #1421]	; 0x58d
    3722:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3726:	strb.w	r7, [r3, #1432]	; 0x598
      _b = b;
    372a:	strb.w	ip, [r3, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    372e:	mvn.w	ip, #111	; 0x6f
      _s = s;
      _b = b;
    3732:	strb.w	r5, [r3, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3736:	mov.w	r5, #108	; 0x6c
    373a:	strb.w	ip, [r3, #1425]	; 0x591
      _s = s;
    373e:	mov.w	ip, #116	; 0x74
      _b = b;
    3742:	strb.w	r7, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3746:	mvn.w	r7, #90	; 0x5a
      _s = s;
    374a:	strb.w	ip, [r3, #1441]	; 0x5a1
    374e:	mov.w	ip, #53	; 0x35
      _b = b;
    3752:	strb.w	r8, [r3, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3756:	mvn.w	r8, #54	; 0x36
      _s = s;
    375a:	strb.w	ip, [r3, #1444]	; 0x5a4
      _b = b;
    375e:	mvn.w	ip, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3762:	strb.w	r0, [r3, #1413]	; 0x585
      _s = s;
      _b = b;
    3766:	strb.w	ip, [r3, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    376a:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    376e:	strb.w	r0, [r3, #1416]	; 0x588
      _s = s;
    3772:	strb.w	ip, [r3, #1450]	; 0x5aa
    3776:	mvn.w	ip, #67	; 0x43
    377a:	strb.w	r0, [r3, #1426]	; 0x592
    377e:	strb.w	ip, [r3, #1438]	; 0x59e
    3782:	mvn.w	ip, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3786:	strb.w	r5, [r3, #1437]	; 0x59d
    378a:	movs	r5, #132	; 0x84
      _s = s;
    378c:	strb.w	ip, [r3, #1420]	; 0x58c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3790:	mvn.w	ip, #98	; 0x62
      _s = s;
    3794:	strb.w	sl, [r3, #1423]	; 0x58f
    3798:	mvn.w	sl, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    379c:	strb.w	ip, [r3, #1422]	; 0x58e
      _s = s;
      _b = b;
    37a0:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37a4:	strb.w	r9, [r3, #1429]	; 0x595
      _b = b;
    37a8:	mov.w	r9, #82	; 0x52
    37ac:	strb.w	ip, [r3, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37b0:	mov.w	ip, #114	; 0x72
    37b4:	strb.w	r7, [r3, #1419]	; 0x58b
      _s = s;
      _b = b;
    37b8:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37bc:	strb.w	ip, [r3, #1428]	; 0x594
      _s = s;
    37c0:	mvn.w	ip, #85	; 0x55
      _b = b;
    37c4:	strb.w	fp, [r3, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37c8:	strb.w	ip, [r3, #1435]	; 0x59b
      _b = b;
    37cc:	mov.w	ip, #46	; 0x2e
    37d0:	strb.w	ip, [r3, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37d4:	mov.w	ip, #26
    37d8:	strb.w	ip, [r3, #1440]	; 0x5a0
      _s = s;
      _b = b;
    37dc:	mov.w	ip, #92	; 0x5c
    37e0:	strb.w	ip, [r3, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37e4:	mvn.w	ip, #6
    37e8:	strb.w	ip, [r3, #1443]	; 0x5a3
    37ec:	mvn.w	ip, #38	; 0x26
    37f0:	strb.w	ip, [r3, #1446]	; 0x5a6
      _s = s;
    37f4:	mov.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37f8:	strb.w	r8, [r3, #1464]	; 0x5b8
      _s = s;
    37fc:	mov.w	r8, #117	; 0x75
    3800:	strb.w	ip, [r3, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3804:	mvn.w	ip, #45	; 0x2d
      _s = s;
    3808:	strb.w	r8, [r3, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    380c:	mvn.w	r8, #59	; 0x3b
    3810:	strb.w	ip, [r3, #1449]	; 0x5a9
      _s = s;
      _b = b;
    3814:	mvn.w	ip, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3818:	strb.w	r8, [r3, #1467]	; 0x5bb
      _s = s;
    381c:	mvn.w	r8, #64	; 0x40
    3820:	strb.w	lr, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3824:	mvn.w	lr, #69	; 0x45
      _s = s;
    3828:	strb.w	r8, [r3, #1468]	; 0x5bc
      _b = b;
    382c:	mvn.w	r8, #11
    3830:	strb.w	ip, [r3, #1451]	; 0x5ab
    3834:	strb.w	r8, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3838:	mvn.w	r8, #121	; 0x79
      _b = b;
    383c:	strb.w	ip, [r3, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3840:	strb.w	r8, [r3, #1471]	; 0x5bf
      _b = b;
    3844:	mvn.w	r8, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3848:	ldrb.w	ip, [sp, #32]
      _s = s;
      _b = b;
    384c:	strb.w	r8, [r3, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3850:	mov.w	r8, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3854:	strb.w	lr, [r3, #1452]	; 0x5ac
      _s = s;
    3858:	mvn.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    385c:	strb.w	ip, [r3, #1455]	; 0x5af
    3860:	mvn.w	ip, #65	; 0x41
      _s = s;
    3864:	strb.w	r8, [r3, #1474]	; 0x5c2
      _b = b;
    3868:	mvn.w	r8, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    386c:	strb.w	lr, [r3, #1456]	; 0x5b0
      _b = b;
    3870:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3874:	strb.w	ip, [r3, #1458]	; 0x5b2
      _s = s;
      _b = b;
    3878:	strb.w	r8, [r3, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    387c:	mvn.w	r8, #113	; 0x71
      _s = s;
      _b = b;
    3880:	ldrb.w	ip, [sp, #44]	; 0x2c
    3884:	strb.w	lr, [r3, #1463]	; 0x5b7
    3888:	mvn.w	lr, #14
    388c:	strb.w	r7, [r3, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3890:	movs	r7, #145	; 0x91
      _s = s;
      _b = b;
    3892:	strb.w	ip, [r3, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3896:	mvn.w	ip, #57	; 0x39
      _s = s;
    389a:	strb.w	r6, [r3, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    389e:	mvn.w	r6, #100	; 0x64
    38a2:	strb.w	r8, [r3, #1476]	; 0x5c4
      _s = s;
      _b = b;
    38a6:	mvn.w	r8, #80	; 0x50
    38aa:	strb.w	lr, [r3, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38ae:	mov.w	lr, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38b2:	strb.w	ip, [r3, #1461]	; 0x5b5
      _s = s;
      _b = b;
    38b6:	mov.w	ip, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38ba:	strb.w	r7, [r3, #1473]	; 0x5c1
      _s = s;
      _b = b;
    38be:	strb.w	r8, [r3, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38c2:	mov.w	r8, #129	; 0x81
    38c6:	strb.w	sl, [r3, #1483]	; 0x5cb
    38ca:	mov.w	sl, #64	; 0x40
    38ce:	strb.w	r4, [r3, #1459]	; 0x5b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38d2:	strb.w	r4, [r3, #1470]	; 0x5be
      _s = s;
    38d6:	strb.w	lr, [r3, #1477]	; 0x5c5
      _b = b;
    38da:	mvn.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38de:	strb.w	r6, [r3, #1503]	; 0x5df
      _s = s;
      _b = b;
    38e2:	mvn.w	r6, #39	; 0x27
    38e6:	strb.w	lr, [r3, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38ea:	mvn.w	lr, #114	; 0x72
      _s = s;
      _b = b;
    38ee:	strb.w	r6, [r3, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38f2:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38f6:	strb.w	lr, [r3, #1479]	; 0x5c7
      _s = s;
    38fa:	mvn.w	lr, #3
    38fe:	strb.w	r6, [r3, #1510]	; 0x5e6
      _b = b;
    3902:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3906:	strb.w	lr, [r3, #1480]	; 0x5c8
      _b = b;
    390a:	mvn.w	lr, #12
    390e:	strb.w	r6, [r3, #1511]	; 0x5e7
    3912:	mvn.w	r6, #127	; 0x7f
    3916:	strb.w	lr, [r3, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    391a:	mov.w	lr, #103	; 0x67
      _s = s;
      _b = b;
    391e:	strb.w	r6, [r3, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3922:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3926:	strb.w	r5, [r3, #1482]	; 0x5ca
      _s = s;
    392a:	strb.w	r6, [r3, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    392e:	mvn.w	r6, #125	; 0x7d
    3932:	strb.w	lr, [r3, #1506]	; 0x5e2
      _s = s;
    3936:	mov.w	lr, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    393a:	strb.w	r6, [r3, #1485]	; 0x5cd
    393e:	mvn.w	r6, #101	; 0x65
    3942:	strb.w	fp, [r3, #1512]	; 0x5e8
      _s = s;
    3946:	mov.w	fp, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    394a:	strb.w	r6, [r3, #1488]	; 0x5d0
      _s = s;
    394e:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3952:	strb.w	r0, [r3, #1491]	; 0x5d3
      _s = s;
    3956:	strb.w	r6, [r3, #1489]	; 0x5d1
      _b = b;
    395a:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    395e:	strb.w	r7, [r3, #1492]	; 0x5d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3962:	movs	r7, #192	; 0xc0
      _s = s;
      _b = b;
    3964:	strb.w	r6, [r3, #1490]	; 0x5d2
    3968:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    396c:	strb.w	r4, [r3, #1500]	; 0x5dc
      _s = s;
      _b = b;
    3970:	strb.w	r6, [r3, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3974:	ldrb.w	r6, [sp, #48]	; 0x30
    3978:	strb.w	r6, [r3, #1497]	; 0x5d9
      _s = s;
      _b = b;
    397c:	ldrb.w	r6, [sp, #44]	; 0x2c
    3980:	strb.w	r6, [r3, #1499]	; 0x5db
    3984:	ldrb.w	r6, [sp, #36]	; 0x24
    3988:	strb.w	r6, [r3, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    398c:	mvn.w	r6, #102	; 0x66
    3990:	strb.w	r6, [r3, #1486]	; 0x5ce
      _b = b;
    3994:	mvn.w	r6, #8
    3998:	strb.w	r6, [r3, #1487]	; 0x5cf
    399c:	mvn.w	r6, #13
    39a0:	strb.w	r6, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a4:	mvn.w	r6, #77	; 0x4d
    39a8:	strb.w	r6, [r3, #1494]	; 0x5d6
      _s = s;
    39ac:	mvn.w	r6, #66	; 0x42
    39b0:	strb.w	r6, [r3, #1495]	; 0x5d7
    39b4:	mvn.w	r6, #106	; 0x6a
    39b8:	strb.w	r6, [r3, #1498]	; 0x5da
    39bc:	mov.w	r6, #113	; 0x71
    39c0:	strb.w	r4, [r1, #1546]	; 0x60a
      _b = b;
    39c4:	mvn.w	r4, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39c8:	strb.w	r6, [r3, #1501]	; 0x5dd
    39cc:	mvn.w	r6, #94	; 0x5e
      _b = b;
    39d0:	strb.w	r4, [r1, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d4:	mvn.w	r4, #119	; 0x77
      _s = s;
    39d8:	strb.w	r6, [r1, #1504]	; 0x5e0
    39dc:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e0:	strb.w	r4, [r1, #1533]	; 0x5fd
    39e4:	movs	r3, #187	; 0xbb
      _s = s;
    39e6:	strb.w	r6, [r1, #1507]	; 0x5e3
      _b = b;
    39ea:	mvn.w	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39ee:	strb.w	r6, [r1, #1509]	; 0x5e5
    39f2:	strb.w	r6, [r1, #1515]	; 0x5eb
      _s = s;
    39f6:	mvn.w	r6, #58	; 0x3a
      _b = b;
    39fa:	strb.w	ip, [r1, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39fe:	strb.w	r6, [r1, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a02:	mov.w	r6, #113	; 0x71
      _s = s;
      _b = b;
    3a06:	strb.w	r9, [r1, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a0a:	mov.w	r9, #110	; 0x6e
    3a0e:	strb.w	r6, [r1, #1518]	; 0x5ee
      _s = s;
      _b = b;
    3a12:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a16:	strb.w	r0, [r1, #1530]	; 0x5fa
      _s = s;
      _b = b;
    3a1a:	strb.w	r6, [r1, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a1e:	mvn.w	r6, #34	; 0x22
    3a22:	strb.w	r0, [r1, #1548]	; 0x60c
    3a26:	strb.w	r6, [r1, #1521]	; 0x5f1
      _s = s;
      _b = b;
    3a2a:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a2e:	strb.w	r8, [r1, #1519]	; 0x5ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a32:	mov.w	r8, #145	; 0x91
      _s = s;
      _b = b;
    3a36:	strb.w	r6, [r1, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a3a:	mvn.w	r6, #58	; 0x3a
      _s = s;
    3a3e:	strb.w	sl, [r1, #1522]	; 0x5f2
    3a42:	mvn.w	sl, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a46:	strb.w	r6, [r1, #1524]	; 0x5f4
      _s = s;
      _b = b;
    3a4a:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a4e:	strb.w	lr, [r1, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a52:	mov.w	lr, #158	; 0x9e
      _s = s;
      _b = b;
    3a56:	strb.w	r6, [r1, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a5a:	mvn.w	r6, #65	; 0x41
      _s = s;
    3a5e:	strb.w	fp, [r1, #1537]	; 0x601
    3a62:	mov.w	fp, #139	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a66:	strb.w	r6, [r1, #1527]	; 0x5f7
      _s = s;
      _b = b;
    3a6a:	mvn.w	r6, #21
    3a6e:	strb.w	r6, [r1, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a72:	mvn.w	r6, #102	; 0x66
    3a76:	strb.w	r6, [r1, #1531]	; 0x5fb
      _b = b;
    3a7a:	mvn.w	r6, #24
    3a7e:	strb.w	r6, [r1, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a82:	mvn.w	r6, #85	; 0x55
    3a86:	strb.w	r6, [r1, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a8a:	mvn.w	r6, #56	; 0x38
    3a8e:	strb.w	r6, [r1, #1539]	; 0x603
      _s = s;
    3a92:	mvn.w	r6, #66	; 0x42
    3a96:	strb.w	r6, [r1, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a9a:	mvn.w	r6, #55	; 0x37
    3a9e:	strb.w	r6, [r1, #1542]	; 0x606
      _s = s;
      _b = b;
    3aa2:	mvn.w	r6, #14
    3aa6:	strb.w	r6, [r1, #1544]	; 0x608
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3aaa:	mvn.w	r6, #3
      _b = b;
    3aae:	strb.w	r4, [r1, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ab2:	mvn.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ab6:	strb.w	r3, [r1, #1572]	; 0x624
      _s = s;
      _b = b;
    3aba:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3abe:	strb.w	r6, [r1, #1558]	; 0x616
      _b = b;
    3ac2:	mvn.w	r6, #85	; 0x55
    3ac6:	strb.w	r3, [r1, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3aca:	mvn.w	r3, #113	; 0x71
      _s = s;
    3ace:	strb.w	r4, [r1, #1543]	; 0x607
    3ad2:	mov.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ad6:	strb.w	r3, [r1, #1557]	; 0x615
    3ada:	mvn.w	r3, #121	; 0x79
      _s = s;
      _b = b;
    3ade:	strb.w	r6, [r1, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ae2:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ae6:	strb.w	r3, [r1, #1560]	; 0x618
      _s = s;
    3aea:	mvn.w	r3, #124	; 0x7c
    3aee:	strb.w	r4, [r1, #1549]	; 0x60d
    3af2:	mov.w	r4, #108	; 0x6c
    3af6:	strb.w	r6, [r1, #1564]	; 0x61c
      _b = b;
    3afa:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3afe:	strb.w	r3, [r1, #1570]	; 0x622
      _b = b;
    3b02:	mvn.w	r3, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b06:	strb.w	r4, [r1, #1528]	; 0x5f8
      _b = b;
    3b0a:	mvn.w	r4, #22
    3b0e:	strb.w	r6, [r1, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b12:	mvn.w	r6, #58	; 0x3a
      _b = b;
    3b16:	strb.w	r3, [r1, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b1a:	mov.w	r3, #52	; 0x34
      _b = b;
    3b1e:	strb.w	r4, [r1, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b22:	mvn.w	r4, #73	; 0x49
      _s = s;
    3b26:	strb.w	r6, [r1, #1567]	; 0x61f
      _b = b;
    3b2a:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b2e:	strb.w	r3, [r1, #1576]	; 0x628
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b32:	mvn.w	r3, #118	; 0x76
    3b36:	strb.w	r4, [r1, #1536]	; 0x600
      _s = s;
      _b = b;
    3b3a:	mvn.w	r4, #16
    3b3e:	strb.w	r6, [r1, #1571]	; 0x623
    3b42:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b46:	strb.w	r3, [r1, #1551]	; 0x60f
      _s = s;
      _b = b;
    3b4a:	mvn.w	r3, #20
    3b4e:	strb.w	r4, [r1, #1541]	; 0x605
    3b52:	mvn.w	r4, #15
    3b56:	strb.w	r6, [r1, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b5a:	mvn.w	r6, #50	; 0x32
      _s = s;
      _b = b;
    3b5e:	strb.w	r3, [r1, #1553]	; 0x611
    3b62:	strb.w	r3, [r1, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b66:	mvn.w	r3, #108	; 0x6c
      _s = s;
      _b = b;
    3b6a:	strb.w	r4, [r1, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b6e:	mov.w	r4, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b72:	strb.w	r6, [r1, #1578]	; 0x62a
    3b76:	mvn.w	r6, #77	; 0x4d
    3b7a:	strb.w	r3, [r1, #1554]	; 0x612
      _s = s;
    3b7e:	mov.w	r3, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b82:	strb.w	r7, [r1, #1545]	; 0x609
      _s = s;
    3b86:	strb.w	r4, [r1, #1552]	; 0x610
      _b = b;
    3b8a:	movs	r4, #246	; 0xf6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b8c:	strb.w	r5, [r1, #1563]	; 0x61b
      _s = s;
    3b90:	strb.w	ip, [r1, #1573]	; 0x625
      _b = b;
    3b94:	mov.w	ip, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b98:	strb.w	r6, [r1, #1581]	; 0x62d
      _s = s;
      _b = b;
    3b9c:	movs	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b9e:	strb.w	r5, [r1, #1582]	; 0x62e
      _b = b;
    3ba2:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ba4:	strb.w	r3, [r1, #1555]	; 0x613
    3ba8:	strb.w	r3, [r1, #1579]	; 0x62b
    3bac:	mvn.w	r3, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bb0:	strb.w	lr, [r1, #1599]	; 0x63f
    3bb4:	mvn.w	lr, #113	; 0x71
      _s = s;
    3bb8:	strb.w	r3, [r1, #1561]	; 0x619
      _b = b;
    3bbc:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bc0:	strb.w	lr, [r1, #1584]	; 0x630
    3bc4:	mvn.w	lr, #124	; 0x7c
      _s = s;
      _b = b;
    3bc8:	strb.w	r3, [r1, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bcc:	mvn.w	r3, #109	; 0x6d
    3bd0:	strb.w	lr, [r1, #1590]	; 0x636
    3bd4:	strb.w	r3, [r1, #1569]	; 0x621
    3bd8:	mvn.w	r3, #53	; 0x35
    3bdc:	strb.w	lr, [r1, #1593]	; 0x639
      _s = s;
    3be0:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3be4:	strb.w	r3, [r1, #1575]	; 0x627
      _s = s;
      _b = b;
    3be8:	mvn.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3bec:	strb.w	lr, [r1, #1597]	; 0x63d
      _b = b;
    3bf0:	mvn.w	lr, #24
    3bf4:	strb.w	r3, [r1, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3bf8:	mvn.w	r3, #20
      _b = b;
    3bfc:	strb.w	lr, [r1, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c00:	mvn.w	lr, #5
    3c04:	strb.w	r3, [r1, #1591]	; 0x637
      _b = b;
    3c08:	mvn.w	r3, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c0c:	strb.w	sl, [r1, #1609]	; 0x649
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c10:	mvn.w	sl, #108	; 0x6c
      _s = s;
      _b = b;
    3c14:	strb.w	r3, [r1, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c18:	mvn.w	r3, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c1c:	strb.w	r9, [r1, #1587]	; 0x633
      _s = s;
      _b = b;
    3c20:	mvn.w	r9, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c24:	strb.w	r3, [r1, #1594]	; 0x63a
      _b = b;
    3c28:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c2c:	strb.w	lr, [r1, #1606]	; 0x646
    3c30:	mvn.w	lr, #60	; 0x3c
      _b = b;
    3c34:	strb.w	r3, [r1, #1601]	; 0x641
    3c38:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c3c:	strb.w	r8, [r1, #1566]	; 0x61e
      _s = s;
      _b = b;
    3c40:	strb.w	r3, [r1, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c44:	mvn.w	r3, #98	; 0x62
      _s = s;
      _b = b;
    3c48:	strb.w	r4, [r1, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c4c:	strb.w	r3, [r1, #1608]	; 0x648
    3c50:	movs	r3, #160	; 0xa0
      _s = s;
    3c52:	strb.w	r7, [r1, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c56:	strb.w	r8, [r1, #1596]	; 0x63c
    3c5a:	strb.w	r0, [r1, #1605]	; 0x645
    3c5e:	strb.w	sl, [r1, #1611]	; 0x64b
      _s = s;
    3c62:	mov.w	sl, #209	; 0xd1
      _b = b;
    3c66:	strb.w	r5, [r1, #1589]	; 0x635
    3c6a:	movs	r5, #118	; 0x76
    3c6c:	strb.w	ip, [r1, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c70:	mov.w	ip, #176	; 0xb0
      _b = b;
    3c74:	strb.w	r6, [r1, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c78:	movs	r6, #227	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c7a:	strb.w	r3, [r1, #1602]	; 0x642
      _s = s;
    3c7e:	movs	r3, #115	; 0x73
    3c80:	strb.w	lr, [r1, #1612]	; 0x64c
    3c84:	mov.w	lr, #162	; 0xa2
      _b = b;
    3c88:	strb.w	r9, [r1, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c8c:	mvn.w	r9, #101	; 0x65
      _s = s;
    3c90:	strb.w	lr, [r1, #1648]	; 0x670
    3c94:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c98:	strb.w	r9, [r1, #1614]	; 0x64e
      _s = s;
      _b = b;
    3c9c:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ca0:	strb.w	lr, [r1, #1618]	; 0x652
    3ca4:	mvn.w	lr, #124	; 0x7c
      _b = b;
    3ca8:	strb.w	r9, [r1, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cac:	mvn.w	r9, #66	; 0x42
      _s = s;
    3cb0:	strb.w	ip, [r1, #1600]	; 0x640
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cb4:	strb.w	r9, [r1, #1617]	; 0x651
      _s = s;
      _b = b;
    3cb8:	mvn.w	r9, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cbc:	strb.w	ip, [r1, #1633]	; 0x661
      _b = b;
    3cc0:	mvn.w	ip, #20
    3cc4:	strb.w	r9, [r1, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cc8:	mvn.w	r9, #61	; 0x3d
      _s = s;
    3ccc:	strb.w	lr, [r1, #1624]	; 0x658
      _b = b;
    3cd0:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cd4:	strb.w	r9, [r1, #1620]	; 0x654
      _s = s;
      _b = b;
    3cd8:	mvn.w	r9, #16
    3cdc:	strb.w	ip, [r1, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ce0:	mvn.w	ip, #114	; 0x72
      _s = s;
      _b = b;
    3ce4:	strb.w	lr, [r1, #1628]	; 0x65c
    3ce8:	mvn.w	lr, #21
    3cec:	strb.w	r9, [r1, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cf0:	mvn.w	r9, #88	; 0x58
    3cf4:	strb.w	ip, [r1, #1635]	; 0x663
      _s = s;
    3cf8:	mvn.w	ip, #88	; 0x58
      _b = b;
    3cfc:	strb.w	lr, [r1, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d00:	mvn.w	lr, #113	; 0x71
    3d04:	strb.w	r9, [r1, #1623]	; 0x657
      _s = s;
      _b = b;
    3d08:	mvn.w	r9, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d0c:	strb.w	ip, [r1, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d10:	mvn.w	ip, #118	; 0x76
    3d14:	strb.w	lr, [r1, #1632]	; 0x660
      _s = s;
    3d18:	mov.w	lr, #40	; 0x28
      _b = b;
    3d1c:	strb.w	r9, [r1, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d20:	mov.w	r9, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d24:	strb.w	ip, [r1, #1644]	; 0x66c
      _s = s;
    3d28:	mvn.w	ip, #50	; 0x32
    3d2c:	strb.w	lr, [r1, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d30:	mov.w	lr, #122	; 0x7a
      _s = s;
    3d34:	strb.w	r9, [r1, #1627]	; 0x65b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d38:	mvn.w	r9, #120	; 0x78
      _s = s;
    3d3c:	strb.w	ip, [r1, #1645]	; 0x66d
      _b = b;
    3d40:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d44:	strb.w	lr, [r1, #1641]	; 0x669
      _s = s;
    3d48:	mov.w	lr, #116	; 0x74
    3d4c:	strb.w	sl, [r1, #1585]	; 0x631
      _b = b;
    3d50:	strb.w	r5, [r1, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d54:	strb.w	r6, [r1, #1603]	; 0x643
      _b = b;
    3d58:	strb.w	r6, [r1, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d5c:	strb.w	fp, [r1, #1615]	; 0x64f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d60:	strb.w	r9, [r1, #1629]	; 0x65d
      _s = s;
    3d64:	mov.w	r9, #57	; 0x39
      _b = b;
    3d68:	strb.w	ip, [r1, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d6c:	strb.w	r3, [r1, #1621]	; 0x655
      _b = b;
    3d70:	movs	r3, #148	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d72:	strb.w	lr, [r1, #1642]	; 0x66a
      _b = b;
    3d76:	mvn.w	lr, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d7a:	strb.w	r7, [r1, #1669]	; 0x685
      _b = b;
    3d7e:	mvn.w	r7, #112	; 0x70
    3d82:	strb.w	lr, [r1, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d86:	mvn.w	lr, #111	; 0x6f
      _s = s;
      _b = b;
    3d8a:	strb.w	r7, [r1, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d8e:	mvn.w	r7, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d92:	strb.w	lr, [r1, #1626]	; 0x65a
    3d96:	mov.w	lr, #94	; 0x5e
      _s = s;
    3d9a:	strb.w	r7, [r1, #1675]	; 0x68b
    3d9e:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3da2:	strb.w	lr, [r1, #1638]	; 0x666
      _s = s;
      _b = b;
    3da6:	mvn.w	lr, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3daa:	strb.w	r7, [r1, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dae:	mvn.w	r7, #51	; 0x33
      _s = s;
      _b = b;
    3db2:	strb.w	lr, [r1, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3db6:	mvn.w	lr, #103	; 0x67
    3dba:	strb.w	r5, [r1, #1668]	; 0x684
    3dbe:	movs	r5, #84	; 0x54
    3dc0:	strb.w	lr, [r1, #1647]	; 0x66f
      _s = s;
    3dc4:	mov.w	lr, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dc8:	strb.w	r7, [r1, #1653]	; 0x675
      _s = s;
      _b = b;
    3dcc:	mvn.w	r7, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3dd0:	strb.w	lr, [r1, #1651]	; 0x673
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dd4:	mvn.w	lr, #71	; 0x47
    3dd8:	strb.w	r5, [r1, #1665]	; 0x681
    3ddc:	movs	r5, #100	; 0x64
    3dde:	strb.w	lr, [r1, #1650]	; 0x672
      _s = s;
      _b = b;
    3de2:	mvn.w	lr, #6
    3de6:	strb.w	r7, [r1, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3dea:	mvn.w	r7, #65	; 0x41
      _b = b;
    3dee:	strb.w	lr, [r1, #1652]	; 0x674
    3df2:	strb.w	lr, [r1, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3df6:	mvn.w	lr, #38	; 0x26
    3dfa:	strb.w	r5, [r1, #1671]	; 0x687
      _s = s;
    3dfe:	mov.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e02:	strb.w	lr, [r1, #1659]	; 0x67b
      _s = s;
    3e06:	mov.w	lr, #37	; 0x25
    3e0a:	strb.w	r7, [r1, #1672]	; 0x688
      _b = b;
    3e0e:	mvn.w	r7, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e12:	strb.w	lr, [r1, #1660]	; 0x67c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e16:	mvn.w	lr, #94	; 0x5e
      _s = s;
    3e1a:	strb.w	r5, [r1, #1654]	; 0x676
      _b = b;
    3e1e:	mvn.w	r5, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e22:	strb.w	lr, [r1, #1662]	; 0x67e
      _s = s;
      _b = b;
    3e26:	mvn.w	lr, #77	; 0x4d
    3e2a:	strb.w	r7, [r1, #1676]	; 0x68c
    3e2e:	mvn.w	r7, #65	; 0x41
    3e32:	strb.w	lr, [r1, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e36:	mov.w	lr, #81	; 0x51
    3e3a:	strb.w	r9, [r1, #1630]	; 0x65e
      _b = b;
    3e3e:	strb.w	r3, [r1, #1637]	; 0x665
    3e42:	strb.w	r4, [r1, #1649]	; 0x671
    3e46:	strb.w	r4, [r1, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e4a:	strb.w	r8, [r1, #1674]	; 0x68a
    3e4e:	strb.w	r3, [r1, #1677]	; 0x68d
      _s = s;
      _b = b;
    3e52:	strb.w	r5, [r1, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e56:	movs	r5, #208	; 0xd0
      _s = s;
      _b = b;
    3e58:	strb.w	r7, [r1, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e5c:	mvn.w	r7, #101	; 0x65
      _s = s;
    3e60:	strb.w	lr, [r1, #1657]	; 0x679
    3e64:	strb.w	lr, [r1, #1663]	; 0x67f
    3e68:	mov.w	lr, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e6c:	strb.w	r0, [r1, #1689]	; 0x699
      _s = s;
      _b = b;
    3e70:	movs	r0, #223	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e72:	strb.w	lr, [r1, #1666]	; 0x682
      _b = b;
    3e76:	mvn.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e7a:	strb.w	r7, [r1, #1680]	; 0x690
      _s = s;
    3e7e:	mvn.w	r7, #105	; 0x69
      _b = b;
    3e82:	strb.w	lr, [r1, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e86:	mov.w	lr, #75	; 0x4b
      _b = b;
    3e8a:	strb.w	r0, [r1, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e8e:	movs	r0, #86	; 0x56
    3e90:	strb.w	lr, [r1, #1684]	; 0x694
    3e94:	mvn.w	lr, #3
    3e98:	strb.w	r7, [r1, #1681]	; 0x691
      _b = b;
    3e9c:	movs	r7, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e9e:	strb.w	lr, [r1, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ea2:	mvn.w	lr, #106	; 0x6a
      _s = s;
    3ea6:	strb.w	r0, [r1, #1714]	; 0x6b2
      _b = b;
    3eaa:	mvn.w	r0, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eae:	strb.w	lr, [r1, #1698]	; 0x6a2
      _s = s;
      _b = b;
    3eb2:	mvn.w	lr, #20
    3eb6:	strb.w	r7, [r1, #1673]	; 0x689
    3eba:	strb.w	lr, [r1, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ebe:	mvn.w	lr, #87	; 0x57
    3ec2:	strb.w	r7, [r1, #1708]	; 0x6ac
    3ec6:	movs	r7, #61	; 0x3d
    3ec8:	strb.w	lr, [r1, #1702]	; 0x6a6
      _b = b;
    3ecc:	mvn.w	lr, #20
    3ed0:	strb.w	r0, [r1, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ed4:	mvn.w	r0, #121	; 0x79
      _b = b;
    3ed8:	strb.w	lr, [r1, #1703]	; 0x6a7
    3edc:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ee0:	strb.w	r5, [r1, #1656]	; 0x678
      _s = s;
      _b = b;
    3ee4:	strb.w	lr, [r1, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ee8:	mvn.w	lr, #103	; 0x67
    3eec:	strb.w	r3, [r1, #1686]	; 0x696
    3ef0:	strb.w	lr, [r1, #1710]	; 0x6ae
    3ef4:	mvn.w	lr, #22
    3ef8:	strb.w	r8, [r1, #1692]	; 0x69c
    3efc:	strb.w	lr, [r1, #1713]	; 0x6b1
      _s = s;
    3f00:	mov.w	lr, #58	; 0x3a
    3f04:	strb.w	r5, [r1, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f08:	strb.w	r8, [r1, #1695]	; 0x69f
      _s = s;
      _b = b;
    3f0c:	strb.w	ip, [r1, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f10:	strb.w	r3, [r1, #1701]	; 0x6a5
      _s = s;
      _b = b;
    3f14:	strb.w	ip, [r1, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f18:	mov.w	ip, #138	; 0x8a
      _s = s;
      _b = b;
    3f1c:	strb.w	r6, [r1, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f20:	strb.w	r7, [r1, #1705]	; 0x6a9
    3f24:	mvn.w	r7, #19
    3f28:	strb.w	lr, [r1, #1711]	; 0x6af
      _b = b;
    3f2c:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f30:	strb.w	r0, [r1, #1687]	; 0x697
      _b = b;
    3f34:	mvn.w	r0, #39	; 0x27
    3f38:	strb.w	r4, [r1, #1727]	; 0x6bf
    3f3c:	strb.w	r0, [r1, #1691]	; 0x69b
    3f40:	mvn.w	r0, #24
    3f44:	strb.w	r4, [r1, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f48:	movs	r4, #44	; 0x2c
      _b = b;
    3f4a:	strb.w	r0, [r1, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f4e:	mvn.w	r0, #59	; 0x3b
    3f52:	strb.w	r4, [r1, #1720]	; 0x6b8
    3f56:	movs	r4, #50	; 0x32
    3f58:	strb.w	r0, [r1, #1699]	; 0x6a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f5c:	mvn.w	r0, #115	; 0x73
      _s = s;
    3f60:	strb.w	r4, [r1, #1732]	; 0x6c4
    3f64:	mov.w	r4, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f68:	strb.w	r0, [r1, #1683]	; 0x693
    3f6c:	strb.w	r0, [r1, #1707]	; 0x6ab
      _s = s;
    3f70:	mvn.w	r0, #40	; 0x28
    3f74:	strb.w	r4, [r1, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f78:	mov.w	r4, #59	; 0x3b
      _s = s;
    3f7c:	strb.w	r0, [r1, #1696]	; 0x6a0
      _b = b;
    3f80:	mvn.w	r0, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f84:	strb.w	r4, [r1, #1719]	; 0x6b7
      _s = s;
    3f88:	mov.w	r4, #79	; 0x4f
      _b = b;
    3f8c:	strb.w	r0, [r1, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f90:	mvn.w	r0, #12
      _s = s;
      _b = b;
    3f94:	strb.w	r6, [r1, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f98:	movs	r6, #125	; 0x7d
    3f9a:	strb.w	r0, [r1, #1716]	; 0x6b4
      _s = s;
    3f9e:	mov.w	r0, #95	; 0x5f
    3fa2:	strb.w	r4, [r1, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa6:	mvn.w	r4, #121	; 0x79
      _s = s;
    3faa:	strb.w	r0, [r1, #1726]	; 0x6be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fae:	mvn.w	r0, #66	; 0x42
    3fb2:	strb.w	ip, [r1, #1704]	; 0x6a8
    3fb6:	strb.w	r0, [r1, #1728]	; 0x6c0
      _s = s;
      _b = b;
    3fba:	mvn.w	r0, #6
    3fbe:	strb.w	r9, [r1, #1721]	; 0x6b9
    3fc2:	strb.w	r0, [r1, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fc6:	mvn.w	r0, #45	; 0x2d
      _s = s;
      _b = b;
    3fca:	strb.w	r5, [r1, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fce:	strb.w	r0, [r1, #1734]	; 0x6c6
    3fd2:	mvn.w	r0, #50	; 0x32
      _s = s;
    3fd6:	strb.w	r9, [r1, #1735]	; 0x6c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fda:	strb.w	r0, [r1, #1737]	; 0x6c9
      _s = s;
      _b = b;
    3fde:	mvn.w	r0, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3fe2:	strb.w	r7, [r1, #1747]	; 0x6d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fe6:	movs	r7, #133	; 0x85
      _s = s;
      _b = b;
    3fe8:	strb.w	r0, [r1, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fec:	mvn.w	r0, #94	; 0x5e
    3ff0:	strb.w	r6, [r1, #1722]	; 0x6ba
    3ff4:	movs	r6, #42	; 0x2a
    3ff6:	strb.w	r0, [r1, #1740]	; 0x6cc
      _s = s;
    3ffa:	mvn.w	r0, #12
    3ffe:	strb.w	r0, [r1, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4002:	mvn.w	r0, #118	; 0x76
    4006:	strb.w	r0, [r1, #1746]	; 0x6d2
    400a:	movs	r0, #191	; 0xbf
    400c:	strb.w	r0, [r1, #1731]	; 0x6c3
      _s = s;
      _b = b;
    4010:	mov	r0, r1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4012:	strb.w	r4, [r1, #1725]	; 0x6bd
      _s = s;
    4016:	mov.w	r4, #116	; 0x74
      _b = b;
    401a:	strb.w	r5, [r1, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    401e:	mvn.w	r5, #84	; 0x54
    4022:	strb.w	r4, [r1, #1729]	; 0x6c1
      _b = b;
    4026:	mvn.w	r4, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    402a:	strb.w	r5, [r1, #1762]	; 0x6e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    402e:	mvn.w	r5, #101	; 0x65
      _s = s;
      _b = b;
    4032:	strb.w	r4, [r1, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4036:	mov.w	r4, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    403a:	strb.w	r5, [r1, #1770]	; 0x6ea
    403e:	mvn.w	r5, #113	; 0x71
      _s = s;
    4042:	strb.w	r4, [r1, #1738]	; 0x6ca
    4046:	mov.w	r4, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    404a:	strb.w	r5, [r1, #1773]	; 0x6ed
      _s = s;
      _b = b;
    404e:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4052:	strb.w	r4, [r1, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4056:	mvn.w	r4, #121	; 0x79
      _s = s;
      _b = b;
    405a:	strb.w	r5, [r1, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    405e:	mvn.w	r5, #124	; 0x7c
    4062:	strb.w	r4, [r1, #1743]	; 0x6cf
      _s = s;
      _b = b;
    4066:	mov.w	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    406a:	strb.w	r5, [r1, #1779]	; 0x6f3
      _s = s;
    406e:	mov.w	r5, #24
      _b = b;
    4072:	strb.w	r4, [r1, #1718]	; 0x6b6
    4076:	mvn.w	r4, #35	; 0x23
    407a:	strb.w	sl, [r1, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    407e:	mov.w	sl, #1
      _s = s;
      _b = b;
    4082:	strb.w	r4, [r1, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4086:	mvn.w	r4, #108	; 0x6c
    408a:	strb.w	r9, [r1, #1755]	; 0x6db
    408e:	strb.w	r4, [r1, #1749]	; 0x6d5
      _s = s;
    4092:	mov.w	r4, #91	; 0x5b
    4096:	strb.w	ip, [r1, #1759]	; 0x6df
    409a:	strb.w	r4, [r1, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    409e:	mvn.w	r4, #102	; 0x66
    40a2:	strb.w	fp, [r1, #1776]	; 0x6f0
      _s = s;
    40a6:	mov.w	fp, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40aa:	strb.w	r4, [r1, #1767]	; 0x6e7
      _s = s;
    40ae:	mvn.w	r4, #85	; 0x55
    40b2:	strb.w	r9, [r1, #1777]	; 0x6f1
    40b6:	mov.w	r9, #90	; 0x5a
    40ba:	strb.w	r4, [r1, #1768]	; 0x6e8
    40be:	mvn.w	r4, #57	; 0x39
    40c2:	strb.w	r4, [r1, #1774]	; 0x6ee
      _b = b;
    40c6:	mvn.w	r4, #23
    40ca:	strb.w	r4, [r1, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40ce:	mvn.w	r4, #43	; 0x2b
    40d2:	strb.w	r4, [r1, #1750]	; 0x6d6
    40d6:	mvn.w	r4, #25
    40da:	strb.w	r4, [r1, #1753]	; 0x6d9
      _b = b;
    40de:	mvn.w	r4, #100	; 0x64
    40e2:	strb.w	r4, [r1, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40e6:	mov.w	r4, #99	; 0x63
    40ea:	strb.w	r4, [r1, #1756]	; 0x6dc
      _b = b;
    40ee:	mvn.w	r4, #43	; 0x2b
    40f2:	strb.w	r4, [r1, #1757]	; 0x6dd
    40f6:	mvn.w	r4, #39	; 0x27
    40fa:	strb.w	r4, [r1, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40fe:	mov.w	r4, #33	; 0x21
    4102:	strb.w	r4, [r1, #1761]	; 0x6e1
    4106:	movs	r4, #33	; 0x21
    4108:	str	r4, [sp, #52]	; 0x34
    410a:	mov.w	r4, #34	; 0x22
      _s = s;
    410e:	strb.w	r5, [r1, #1780]	; 0x6f4
      _b = b;
    4112:	mov.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4116:	strb.w	r7, [r1, #1752]	; 0x6d8
    411a:	mvn.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    411e:	strb.w	r5, [r1, #1751]	; 0x6d7
    4122:	mvn.w	r5, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4126:	strb.w	r7, [r1, #1803]	; 0x70b
      _s = s;
    412a:	mvn.w	r7, #69	; 0x45
      _b = b;
    412e:	strb.w	r5, [r1, #1763]	; 0x6e3
    4132:	mvn.w	r5, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4136:	strb.w	r3, [r1, #1800]	; 0x708
      _s = s;
    413a:	mov.w	r3, #95	; 0x5f
      _b = b;
    413e:	strb.w	r5, [r1, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4142:	mvn.w	r5, #114	; 0x72
      _s = s;
    4146:	strb.w	r7, [r1, #1804]	; 0x70c
      _b = b;
    414a:	mvn.w	r7, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    414e:	strb.w	r5, [r1, #1782]	; 0x6f6
      _s = s;
      _b = b;
    4152:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4156:	strb.w	r3, [r1, #1801]	; 0x709
      _b = b;
    415a:	mov.w	r3, #88	; 0x58
    415e:	strb.w	r5, [r1, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4162:	mvn.w	r5, #43	; 0x2b
      _s = s;
      _b = b;
    4166:	strb.w	r7, [r1, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    416a:	mvn.w	r7, #111	; 0x6f
    416e:	strb.w	r5, [r1, #1785]	; 0x6f9
      _s = s;
    4172:	mov.w	r5, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4176:	strb.w	r6, [r1, #1758]	; 0x6de
      _s = s;
    417a:	movs	r6, #43	; 0x2b
    417c:	strb.w	r5, [r1, #1786]	; 0x6fa
      _b = b;
    4180:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4184:	strb.w	r4, [r1, #1764]	; 0x6e4
      _s = s;
    4188:	mvn.w	r4, #2
      _b = b;
    418c:	strb.w	r5, [r1, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4190:	mvn.w	r5, #21
      _s = s;
      _b = b;
    4194:	strb.w	r3, [r1, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4198:	movs	r3, #37	; 0x25
    419a:	strb.w	r5, [r1, #1788]	; 0x6fc
      _s = s;
    419e:	mvn.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41a2:	strb.w	r7, [r1, #1806]	; 0x70e
      _s = s;
    41a6:	movs	r7, #230	; 0xe6
    41a8:	strb.w	r5, [r1, #1789]	; 0x6fd
      _b = b;
    41ac:	mvn.w	r5, #38	; 0x26
    41b0:	strb.w	lr, [r1, #1769]	; 0x6e9
    41b4:	strb.w	r5, [r1, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41b8:	mvn.w	r5, #56	; 0x38
      _b = b;
    41bc:	strb.w	lr, [r1, #1772]	; 0x6ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41c0:	strb.w	r5, [r1, #1792]	; 0x700
      _b = b;
    41c4:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41c8:	strb.w	r4, [r1, #1771]	; 0x6eb
    41cc:	movs	r4, #252	; 0xfc
      _b = b;
    41ce:	strb.w	r5, [r1, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41d2:	mvn.w	r5, #8
      _s = s;
    41d6:	str	r6, [sp, #48]	; 0x30
      _b = b;
    41d8:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41da:	strb.w	r5, [r1, #1794]	; 0x702
      _s = s;
    41de:	mov.w	r5, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41e2:	str	r3, [sp, #56]	; 0x38
    41e4:	movs	r3, #200	; 0xc8
      _s = s;
    41e6:	strb.w	r5, [r1, #1795]	; 0x703
      _b = b;
    41ea:	mov.w	r5, #46	; 0x2e
    41ee:	strb.w	r5, [r1, #1796]	; 0x704
    41f2:	mov.w	r5, #62	; 0x3e
    41f6:	strb.w	r5, [r1, #1799]	; 0x707
    41fa:	mvn.w	r5, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41fe:	str	r7, [sp, #28]
    4200:	mov.w	r7, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4204:	strb.w	sl, [r1, #1797]	; 0x705
      _s = s;
      _b = b;
    4208:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    420c:	strb.w	ip, [r1, #1821]	; 0x71d
      _s = s;
    4210:	mvn.w	ip, #7
      _b = b;
    4214:	str.w	sl, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4218:	mov.w	sl, #137	; 0x89
      _s = s;
    421c:	strb.w	ip, [r1, #1822]	; 0x71e
      _b = b;
    4220:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4224:	str.w	sl, [sp, #32]
    4228:	mvn.w	sl, #10
      _s = s;
      _b = b;
    422c:	strb.w	ip, [r1, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4230:	mvn.w	ip, #109	; 0x6d
    4234:	strb.w	sl, [r1, #1791]	; 0x6ff
      _s = s;
    4238:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    423c:	strb.w	ip, [r1, #1824]	; 0x720
      _s = s;
      _b = b;
    4240:	mvn.w	ip, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4244:	strb.w	sl, [r1, #1810]	; 0x712
      _b = b;
    4248:	mvn.w	sl, #7
    424c:	strb.w	ip, [r1, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4250:	mvn.w	ip, #121	; 0x79
      _s = s;
      _b = b;
    4254:	strb.w	sl, [r1, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4258:	mov.w	sl, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    425c:	strb.w	ip, [r1, #1827]	; 0x723
      _s = s;
    4260:	mvn.w	ip, #6
    4264:	strb.w	r7, [r1, #1807]	; 0x70f
      _b = b;
    4268:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    426c:	strb.w	sl, [r1, #1816]	; 0x718
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4270:	mvn.w	sl, #58	; 0x3a
      _s = s;
    4274:	strb.w	ip, [r1, #1828]	; 0x724
      _b = b;
    4278:	mvn.w	ip, #120	; 0x78
    427c:	strb.w	r5, [r1, #1808]	; 0x710
    4280:	movs	r5, #229	; 0xe5
    4282:	strb.w	r7, [r1, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4286:	strb.w	sl, [r1, #1815]	; 0x717
      _s = s;
      _b = b;
    428a:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    428e:	ldrb.w	r7, [sp, #48]	; 0x30
      _b = b;
    4292:	strb.w	ip, [r1, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4296:	mov.w	ip, #124	; 0x7c
      _b = b;
    429a:	str	r5, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    429c:	mvn.w	r5, #103	; 0x67
      _s = s;
    42a0:	strb.w	r7, [r1, #1813]	; 0x715
    42a4:	mvn.w	r7, #71	; 0x47
    42a8:	strb.w	fp, [r1, #1783]	; 0x6f7
      _b = b;
    42ac:	mov.w	fp, #120	; 0x78
    42b0:	strb.w	sl, [r1, #1817]	; 0x719
    42b4:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42b8:	strb.w	ip, [r1, #1831]	; 0x727
      _b = b;
    42bc:	mvn.w	ip, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42c0:	strb.w	r5, [r1, #1809]	; 0x711
    42c4:	movs	r5, #234	; 0xea
    42c6:	strb.w	r3, [r1, #1812]	; 0x714
      _s = s;
      _b = b;
    42ca:	str.w	fp, [sp, #36]	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42ce:	mov.w	fp, #77	; 0x4d
    42d2:	strb.w	r9, [r1, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42d6:	mov.w	r9, #67	; 0x43
    42da:	strb.w	r8, [r1, #1818]	; 0x71a
      _s = s;
      _b = b;
    42de:	strb.w	sl, [r1, #1820]	; 0x71c
    42e2:	mov.w	sl, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42e6:	strb.w	r4, [r1, #1825]	; 0x721
      _b = b;
    42ea:	strb.w	ip, [r1, #1832]	; 0x728
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42ee:	strb.w	r7, [r1, #1843]	; 0x733
      _b = b;
    42f2:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42f6:	strb.w	lr, [r1, #1848]	; 0x738
      _s = s;
    42fa:	mov.w	lr, #62	; 0x3e
      _b = b;
    42fe:	strb.w	r7, [r1, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4302:	mov.w	r7, #107	; 0x6b
    4306:	strb.w	lr, [r1, #1849]	; 0x739
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    430a:	mvn.w	lr, #16
      _s = s;
    430e:	strb.w	r7, [r1, #1819]	; 0x71b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4312:	mov.w	r7, #60	; 0x3c
    4316:	strb.w	lr, [r1, #1851]	; 0x73b
      _s = s;
    431a:	mov.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    431e:	strb.w	r7, [r1, #1830]	; 0x726
      _s = s;
      _b = b;
    4322:	mvn.w	r7, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4326:	strb.w	lr, [r1, #1852]	; 0x73c
      _b = b;
    432a:	mvn.w	lr, #43	; 0x2b
    432e:	strb.w	r7, [r1, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4332:	mov.w	r7, #31
      _s = s;
      _b = b;
    4336:	strb.w	lr, [r1, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    433a:	mvn.w	lr, #13
    433e:	ldrb.w	ip, [sp, #56]	; 0x38
    4342:	strb.w	r7, [r1, #1836]	; 0x72c
    4346:	mov.w	r7, #13
    434a:	strb.w	lr, [r1, #1854]	; 0x73e
      _s = s;
    434e:	mov.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4352:	strb.w	ip, [r1, #1833]	; 0x729
    4356:	strb.w	r7, [r1, #1845]	; 0x735
      _s = s;
    435a:	mov.w	r7, #76	; 0x4c
    435e:	ldrb.w	ip, [sp, #28]
    4362:	strb.w	lr, [r1, #1855]	; 0x73f
      _b = b;
    4366:	mvn.w	lr, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    436a:	strb.w	ip, [r1, #1837]	; 0x72d
      _b = b;
    436e:	mvn.w	ip, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4372:	strb.w	r7, [r1, #1846]	; 0x736
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4376:	mov.w	r7, #22
      _s = s;
      _b = b;
    437a:	strb.w	lr, [r1, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    437e:	mvn.w	lr, #18
      _s = s;
      _b = b;
    4382:	strb.w	ip, [r1, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4386:	mov.w	ip, #26
    438a:	strb.w	r7, [r1, #1842]	; 0x732
      _s = s;
      _b = b;
    438e:	mvn.w	r7, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4392:	strb.w	lr, [r1, #1857]	; 0x741
      _s = s;
    4396:	mvn.w	lr, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    439a:	strb.w	ip, [r1, #1839]	; 0x72f
      _s = s;
    439e:	mvn.w	ip, #51	; 0x33
      _b = b;
    43a2:	strb.w	r7, [r1, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43a6:	mvn.w	r7, #15
      _s = s;
    43aa:	strb.w	lr, [r1, #1858]	; 0x742
      _b = b;
    43ae:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43b2:	strb.w	ip, [r1, #1840]	; 0x730
      _b = b;
    43b6:	mvn.w	ip, #40	; 0x28
    43ba:	strb.w	lr, [r1, #1859]	; 0x743
    43be:	mvn.w	lr, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43c2:	strb.w	r7, [r1, #1860]	; 0x744
      _s = s;
    43c6:	mov.w	r7, #114	; 0x72
    43ca:	strb.w	r4, [r1, #1834]	; 0x72a
      _b = b;
    43ce:	strb.w	ip, [r1, #1841]	; 0x731
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43d2:	mov.w	ip, #66	; 0x42
      _b = b;
    43d6:	strb.w	r6, [r1, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43da:	strb.w	r7, [r1, #1861]	; 0x745
      _b = b;
    43de:	mvn.w	r7, #35	; 0x23
    43e2:	strb.w	lr, [r1, #1865]	; 0x749
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43e6:	mvn.w	lr, #31
      _s = s;
      _b = b;
    43ea:	strb.w	r7, [r1, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43ee:	movs	r7, #229	; 0xe5
    43f0:	strb.w	lr, [r1, #1866]	; 0x74a
      _s = s;
    43f4:	mvn.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43f8:	strb.w	r7, [r0, #1863]	; 0x747
      _s = s;
    43fc:	strb.w	lr, [r1, #1867]	; 0x74b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4400:	mvn.w	lr, #24
      _s = s;
    4404:	strb.w	r4, [r1, #1864]	; 0x748
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4408:	strb.w	lr, [r1, #1869]	; 0x74d
      _s = s;
    440c:	mvn.w	lr, #2
      _b = b;
    4410:	strb.w	r6, [r1, #1868]	; 0x74c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4414:	strb.w	lr, [r1, #1870]	; 0x74e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4418:	mov.w	lr, #22
      _s = s;
      _b = b;
    441c:	strb.w	r5, [r0, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4420:	strb.w	lr, [r1, #1872]	; 0x750
      _s = s;
    4424:	ldrb.w	lr, [sp, #48]	; 0x30
      _b = b;
    4428:	strb.w	r7, [r0, #1883]	; 0x75b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    442c:	strb.w	lr, [r1, #1873]	; 0x751
      _b = b;
    4430:	mvn.w	lr, #66	; 0x42
    4434:	strb.w	r3, [r1, #1886]	; 0x75e
    4438:	strb.w	lr, [r1, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    443c:	mov.w	lr, #40	; 0x28
      _s = s;
    4440:	strb.w	r8, [r1, #1888]	; 0x760
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4444:	mov.w	r8, #49	; 0x31
    4448:	strb.w	lr, [r1, #1878]	; 0x756
      _s = s;
    444c:	mov.w	lr, #41	; 0x29
      _b = b;
    4450:	strb.w	r3, [r1, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4454:	strb.w	lr, [r1, #1879]	; 0x757
      _b = b;
    4458:	mov.w	lr, #112	; 0x70
    445c:	strb.w	lr, [r1, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4460:	mov.w	lr, #51	; 0x33
    4464:	strb.w	lr, [r1, #1876]	; 0x754
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4468:	mov.w	lr, #32
    446c:	strb.w	lr, [r1, #1875]	; 0x753
      _s = s;
      _b = b;
    4470:	mvn.w	lr, #44	; 0x2c
    4474:	strb.w	lr, [r1, #1880]	; 0x758
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4478:	mov.w	lr, #113	; 0x71
    447c:	strb.w	lr, [r1, #1881]	; 0x759
      _s = s;
    4480:	mov.w	lr, #105	; 0x69
    4484:	strb.w	lr, [r1, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4488:	strb.w	lr, [r1, #1890]	; 0x762
      _s = s;
      _b = b;
    448c:	mvn.w	lr, #31
    4490:	strb.w	lr, [r1, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4494:	mvn.w	lr, #106	; 0x6a
    4498:	strb.w	lr, [r1, #1893]	; 0x765
      _s = s;
    449c:	mov.w	lr, #124	; 0x7c
    44a0:	strb.w	lr, [r1, #1894]	; 0x766
      _b = b;
    44a4:	mvn.w	lr, #23
    44a8:	strb.w	lr, [r1, #1895]	; 0x767
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44ac:	mvn.w	lr, #115	; 0x73
    44b0:	strb.w	lr, [r1, #1896]	; 0x768
      _s = s;
    44b4:	mvn.w	lr, #4
    44b8:	strb.w	lr, [r1, #1897]	; 0x769
      _b = b;
    44bc:	mvn.w	lr, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44c0:	strb.w	r9, [r1, #1905]	; 0x771
      _s = s;
      _b = b;
    44c4:	mov.w	r9, #196	; 0xc4
    44c8:	strb.w	lr, [r1, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44cc:	mvn.w	lr, #108	; 0x6c
      _s = s;
    44d0:	strb.w	r4, [r1, #1912]	; 0x778
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44d4:	strb.w	lr, [r1, #1899]	; 0x76b
      _s = s;
    44d8:	mvn.w	lr, #5
    44dc:	strb.w	fp, [r1, #1891]	; 0x763
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e0:	mov.w	fp, #230	; 0xe6
      _s = s;
    44e4:	strb.w	lr, [r1, #1900]	; 0x76c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e8:	mvn.w	lr, #112	; 0x70
      _s = s;
      _b = b;
    44ec:	strb.w	sl, [r1, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44f0:	mov.w	sl, #12
    44f4:	strb.w	lr, [r1, #1902]	; 0x76e
      _s = s;
    44f8:	mvn.w	lr, #73	; 0x49
    44fc:	strb.w	ip, [r1, #1906]	; 0x772
      _b = b;
    4500:	mov.w	ip, #247	; 0xf7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4504:	strb.w	lr, [r1, #1903]	; 0x76f
      _b = b;
    4508:	mvn.w	lr, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    450c:	strb.w	r3, [r1, #1921]	; 0x781
      _b = b;
    4510:	strb.w	lr, [r1, #1904]	; 0x770
    4514:	mvn.w	lr, #57	; 0x39
    4518:	strb.w	r6, [r1, #1922]	; 0x782
    451c:	strb.w	lr, [r1, #1907]	; 0x773
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4520:	mvn.w	lr, #19
      _b = b;
    4524:	strb.w	r6, [r1, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4528:	strb.w	lr, [r1, #1909]	; 0x775
      _b = b;
    452c:	mvn.w	lr, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4530:	strb.w	r4, [r1, #1933]	; 0x78d
      _b = b;
    4534:	strb.w	lr, [r1, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4538:	mov.w	lr, #26
      _s = s;
    453c:	strb.w	r5, [r0, #1936]	; 0x790
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4540:	strb.w	lr, [r1, #1911]	; 0x777
      _s = s;
    4544:	mov.w	lr, #106	; 0x6a
      _b = b;
    4548:	strb.w	r9, [r0, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    454c:	strb.w	lr, [r1, #1882]	; 0x75a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4550:	mov.w	lr, #65	; 0x41
    4554:	strb.w	lr, [r1, #1884]	; 0x75c
    4558:	mov.w	lr, #101	; 0x65
    455c:	strb.w	lr, [r1, #1887]	; 0x75f
    4560:	mov.w	lr, #35	; 0x23
    4564:	strb.w	lr, [r1, #1908]	; 0x774
      _s = s;
      _b = b;
    4568:	mvn.w	lr, #45	; 0x2d
    456c:	strb.w	lr, [r1, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4570:	mov.w	lr, #26
    4574:	strb.w	lr, [r1, #1923]	; 0x783
      _s = s;
      _b = b;
    4578:	mvn.w	lr, #19
    457c:	strb.w	lr, [r1, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4580:	mvn.w	lr, #20
    4584:	strb.w	lr, [r1, #1929]	; 0x789
      _s = s;
    4588:	mvn.w	lr, #16
    458c:	strb.w	lr, [r1, #1930]	; 0x78a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4590:	mvn.w	lr, #20
    4594:	strb.w	lr, [r1, #1935]	; 0x78f
    4598:	mvn.w	lr, #24
    459c:	strb.w	lr, [r1, #1938]	; 0x792
      _s = s;
    45a0:	mvn.w	lr, #20
    45a4:	strb.w	lr, [r1, #1939]	; 0x793
    45a8:	mvn.w	lr, #2
      _b = b;
    45ac:	str	r5, [sp, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45ae:	strb.w	lr, [r1, #1942]	; 0x796
      _b = b;
    45b2:	mvn.w	lr, #66	; 0x42
    45b6:	strb.w	r5, [r0, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ba:	movs	r5, #37	; 0x25
      _s = s;
      _b = b;
    45bc:	strb.w	lr, [r1, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45c0:	mvn.w	lr, #2
      _b = b;
    45c4:	strb.w	r9, [r0, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45c8:	mov.w	r9, #238	; 0xee
    45cc:	strb.w	lr, [r1, #1945]	; 0x799
    45d0:	mvn.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45d4:	strb.w	r7, [r0, #1941]	; 0x795
      _s = s;
    45d8:	movs	r7, #4
    45da:	strb.w	lr, [r1, #1915]	; 0x77b
      _b = b;
    45de:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45e2:	strb.w	r5, [r0, #1956]	; 0x7a4
      _s = s;
      _b = b;
    45e6:	strb.w	lr, [r1, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ea:	mov.w	lr, #26
      _s = s;
      _b = b;
    45ee:	strb.w	r4, [r0, #1958]	; 0x7a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45f2:	strb.w	lr, [r1, #1917]	; 0x77d
      _s = s;
    45f6:	mvn.w	lr, #83	; 0x53
    45fa:	strb.w	r4, [r0, #1966]	; 0x7ae
    45fe:	strb.w	lr, [r1, #1918]	; 0x77e
      _b = b;
    4602:	mvn.w	lr, #24
    4606:	strb.w	lr, [r1, #1919]	; 0x77f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    460a:	mov.w	lr, #26
    460e:	strb.w	lr, [r1, #1920]	; 0x780
    4612:	mov.w	lr, #30
    4616:	strb.w	lr, [r1, #1914]	; 0x77a
      _s = s;
    461a:	mvn.w	r1, #122	; 0x7a
      _b = b;
    461e:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4622:	strb.w	r1, [r0, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4626:	mov.w	r1, #10
      _s = s;
      _b = b;
    462a:	strb.w	lr, [r0, #1964]	; 0x7ac
    462e:	mvn.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4632:	strb.w	r1, [r0, #1926]	; 0x786
      _s = s;
    4636:	mov.w	r1, #98	; 0x62
    463a:	strb.w	r1, [r0, #1927]	; 0x787
      _b = b;
    463e:	mvn.w	r1, #46	; 0x2e
    4642:	strb.w	r1, [r0, #1931]	; 0x78b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4646:	mvn.w	r1, #14
    464a:	strb.w	r1, [r0, #1932]	; 0x78c
      _s = s;
      _b = b;
    464e:	mvn.w	r1, #82	; 0x52
    4652:	strb.w	r1, [r0, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4656:	mvn.w	r1, #28
    465a:	strb.w	r1, [r0, #1944]	; 0x798
      _s = s;
      _b = b;
    465e:	mvn.w	r1, #61	; 0x3d
    4662:	strb.w	r1, [r0, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4666:	mov.w	r1, #91	; 0x5b
    466a:	strb.w	r1, [r0, #1960]	; 0x7a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    466e:	mvn.w	r1, #30
    4672:	strb.w	r1, [r0, #1947]	; 0x79b
      _s = s;
    4676:	mvn.w	r1, #2
    467a:	strb.w	r1, [r0, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    467e:	ldrb.w	r1, [sp, #52]	; 0x34
    4682:	strb.w	r1, [r0, #1950]	; 0x79e
    4686:	movs	r1, #43	; 0x2b
    4688:	strb.w	r1, [r0, #1962]	; 0x7aa
      _s = s;
      _b = b;
    468c:	strb.w	lr, [r0, #1967]	; 0x7af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4690:	mov.w	lr, #53	; 0x35
    4694:	strb.w	r8, [r0, #1959]	; 0x7a7
      _s = s;
      _b = b;
    4698:	mvn.w	r8, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    469c:	strb.w	r3, [r0, #1969]	; 0x7b1
      _b = b;
    46a0:	mvn.w	r3, #10
    46a4:	strb.w	r8, [r0, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a8:	mov.w	r8, #48	; 0x30
      _s = s;
      _b = b;
    46ac:	strb.w	r3, [r0, #1970]	; 0x7b2
    46b0:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46b4:	strb.w	r8, [r0, #1968]	; 0x7b0
    46b8:	mov.w	r8, #52	; 0x34
      _s = s;
      _b = b;
    46bc:	strb.w	r3, [r0, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46c0:	mvn.w	r3, #102	; 0x66
    46c4:	strb.w	r8, [r0, #1971]	; 0x7b3
    46c8:	mvn.w	r8, #104	; 0x68
    46cc:	strb.w	r3, [r0, #1977]	; 0x7b9
      _s = s;
      _b = b;
    46d0:	mvn.w	r3, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46d4:	strb.w	r8, [r0, #1974]	; 0x7b6
      _s = s;
    46d8:	mvn.w	r8, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46dc:	strb.w	lr, [r0, #1965]	; 0x7ad
      _s = s;
    46e0:	mov.w	lr, #59	; 0x3b
    46e4:	strb.w	r8, [r0, #1975]	; 0x7b7
      _b = b;
    46e8:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46ec:	strb.w	r1, [r0, #1981]	; 0x7bd
      _b = b;
    46f0:	ldrb.w	r1, [sp, #60]	; 0x3c
    46f4:	strb.w	r3, [r0, #1955]	; 0x7a3
    46f8:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46fc:	strb.w	lr, [r0, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4700:	mov.w	lr, #38	; 0x26
      _s = s;
      _b = b;
    4704:	strb.w	r8, [r0, #1976]	; 0x7b8
    4708:	mvn.w	r8, #40	; 0x28
    470c:	strb.w	r1, [r0, #1985]	; 0x7c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4710:	mov.w	r1, #32
      _s = s;
      _b = b;
    4714:	strb.w	r3, [r0, #1952]	; 0x7a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4718:	mov.w	r3, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    471c:	strb.w	lr, [r0, #1953]	; 0x7a1
      _s = s;
    4720:	mov.w	lr, #63	; 0x3f
      _b = b;
    4724:	strb.w	r8, [r0, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4728:	mov.w	r8, #69	; 0x45
    472c:	strb.w	r1, [r0, #1986]	; 0x7c2
      _s = s;
    4730:	ldrb.w	r1, [sp, #44]	; 0x2c
    4734:	strb.w	r3, [r0, #1972]	; 0x7b4
    4738:	mvn.w	r3, #60	; 0x3c
    473c:	strb.w	lr, [r0, #1954]	; 0x7a2
    4740:	mov.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4744:	strb.w	r8, [r0, #1980]	; 0x7bc
    4748:	mov.w	r8, #33	; 0x21
      _s = s;
    474c:	strb.w	r1, [r0, #1987]	; 0x7c3
    4750:	mvn.w	r1, #2
    4754:	strb.w	r4, [r0, #1978]	; 0x7ba
    4758:	strb.w	r3, [r0, #1963]	; 0x7ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    475c:	movs	r3, #0
      _s = s;
    475e:	strb.w	lr, [r0, #1957]	; 0x7a5
    4762:	mov.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4766:	strb.w	r8, [r0, #1983]	; 0x7bf
      _s = s;
      _b = b;
    476a:	strb.w	r6, [r0, #1988]	; 0x7c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    476e:	strb.w	r8, [r0, #1989]	; 0x7c5
    4772:	mov.w	r8, #109	; 0x6d
      _s = s;
    4776:	strb.w	r4, [r0, #1990]	; 0x7c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    477a:	mov	r4, r5
      _s = s;
    477c:	strb.w	r1, [r0, #1993]	; 0x7c9
      _b = b;
    4780:	ldrb.w	r1, [sp, #28]
    4784:	strb.w	r6, [r0, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4788:	movs	r6, #185	; 0xb9
      _b = b;
    478a:	strb.w	r1, [r0, #1994]	; 0x7ca
    478e:	ldrb.w	r1, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4792:	strb.w	r5, [r0, #1992]	; 0x7c8
      _s = s;
      _b = b;
    4796:	movs	r5, #100	; 0x64
    4798:	strb.w	r1, [r0, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    479c:	mov.w	r1, #35	; 0x23
    47a0:	strb.w	r4, [r0, #1995]	; 0x7cb
      _s = s;
    47a4:	movs	r4, #244	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47a6:	strb.w	r1, [r0, #1998]	; 0x7ce
    47aa:	mov.w	r1, #32
    47ae:	strb.w	sl, [r0, #2004]	; 0x7d4
    47b2:	mov.w	sl, #130	; 0x82
    47b6:	strb.w	r1, [r0, #2001]	; 0x7d1
      _s = s;
    47ba:	mvn.w	r1, #37	; 0x25
    47be:	strb.w	r9, [r0, #2014]	; 0x7de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47c2:	mov.w	r9, #132	; 0x84
      _s = s;
    47c6:	strb.w	r1, [r0, #2002]	; 0x7d2
    47ca:	mvn.w	r1, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47ce:	strb.w	fp, [r0, #2022]	; 0x7e6
      _s = s;
    47d2:	mov.w	fp, #11
    47d6:	strb.w	r1, [r0, #1996]	; 0x7cc
    47da:	mvn.w	r1, #68	; 0x44
    47de:	strb.w	r1, [r0, #1984]	; 0x7c0
      _b = b;
    47e2:	mvn.w	r1, #52	; 0x34
    47e6:	strb.w	r1, [r0, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47ea:	mvn.w	r1, #29
    47ee:	strb.w	r1, [r0, #1999]	; 0x7cf
      _b = b;
    47f2:	strb.w	r1, [r0, #2003]	; 0x7d3
    47f6:	mvn.w	r1, #22
    47fa:	strb.w	r1, [r0, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    47fe:	mov.w	r1, #116	; 0x74
    4802:	strb.w	r1, [r0, #2005]	; 0x7d5
      _b = b;
    4806:	mvn.w	r1, #21
    480a:	strb.w	r1, [r0, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    480e:	mvn.w	r1, #12
    4812:	strb.w	r1, [r0, #2007]	; 0x7d7
      _s = s;
      _b = b;
    4816:	strb.w	r1, [r0, #2009]	; 0x7d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    481a:	mov.w	r1, #57	; 0x39
    481e:	strb.w	r1, [r0, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4822:	mvn.w	r1, #15
    4826:	strb.w	r1, [r0, #2010]	; 0x7da
      _s = s;
    482a:	mvn.w	r1, #74	; 0x4a
    482e:	strb.w	r1, [r0, #2011]	; 0x7db
      _b = b;
    4832:	mvn.w	r1, #29
    4836:	strb.w	r1, [r0, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    483a:	mvn.w	r1, #14
    483e:	strb.w	r1, [r0, #2013]	; 0x7dd
      _s = s;
      _b = b;
    4842:	mvn.w	r1, #56	; 0x38
    4846:	strb.w	r1, [r0, #2015]	; 0x7df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    484a:	mvn.w	r1, #20
    484e:	strb.w	r1, [r0, #2016]	; 0x7e0
      _s = s;
    4852:	mvn.w	r1, #4
    4856:	strb.w	r1, [r0, #2017]	; 0x7e1
      _b = b;
    485a:	mvn.w	r1, #57	; 0x39
    485e:	strb.w	r1, [r0, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4862:	mvn.w	r1, #24
      _s = s;
      _b = b;
    4866:	strb.w	ip, [r2, #14]
    486a:	mov.w	ip, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    486e:	strb.w	r1, [r0, #2019]	; 0x7e3
      _s = s;
    4872:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4876:	strb	r3, [r2, #0]
      _s = s;
    4878:	strb.w	r1, [r0, #2020]	; 0x7e4
    487c:	strb.w	r1, [r0, #2023]	; 0x7e7
      _b = b;
    4880:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4884:	strb	r3, [r2, #1]
      _b = b;
    4886:	strb.w	r1, [r0, #2021]	; 0x7e5
    488a:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    488e:	strb	r3, [r2, #9]
      _s = s;
      _b = b;
    4890:	strb.w	r1, [r0, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4894:	mvn.w	r1, #26
      _s = s;
    4898:	strb	r3, [r2, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    489a:	strb.w	r1, [r0, #2025]	; 0x7e9
      _s = s;
    489e:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48a2:	strb	r3, [r2, #12]
      _s = s;
    48a4:	strb.w	r1, [r0, #2026]	; 0x7ea
      _b = b;
    48a8:	mvn.w	r1, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48ac:	strb	r3, [r2, #13]
      _b = b;
    48ae:	strb.w	r1, [r0, #2027]	; 0x7eb
    48b2:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48b6:	strb	r3, [r2, #15]
      _s = s;
    48b8:	movs	r0, #8
      _b = b;
    48ba:	strb	r1, [r2, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48bc:	mov.w	r1, #106	; 0x6a
      _s = s;
    48c0:	strb	r3, [r2, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48c2:	strb	r1, [r2, #3]
      _s = s;
      _b = b;
    48c4:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48c8:	strb.w	lr, [r2, #4]
      _b = b;
    48cc:	strb	r1, [r2, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48ce:	mov.w	r1, #85	; 0x55
      _s = s;
    48d2:	strb.w	lr, [r2, #19]
      _b = b;
    48d6:	mov.w	lr, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48da:	strb	r1, [r2, #6]
      _s = s;
    48dc:	mov.w	r1, #5
    48e0:	strb	r1, [r2, #7]
      _b = b;
    48e2:	mvn.w	r1, #102	; 0x66
    48e6:	strb	r1, [r2, #8]
    48e8:	mvn.w	r1, #16
    48ec:	strb	r1, [r2, #11]
    48ee:	mvn.w	r1, #10
    48f2:	strb	r1, [r2, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    48f4:	mov.w	r1, #63	; 0x3f
    48f8:	strb.w	r1, [r2, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48fc:	mov.w	r1, #106	; 0x6a
    4900:	strb	r1, [r2, #18]
      _s = s;
    4902:	mov.w	r1, #10
    4906:	strb	r1, [r2, #22]
    4908:	mov.w	r1, #48	; 0x30
    490c:	strb	r1, [r2, #31]
      _b = b;
    490e:	mvn.w	r1, #122	; 0x7a
    4912:	strb.w	r1, [r2, #41]	; 0x29
    4916:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    491a:	strb.w	r8, [r2, #21]
      _s = s;
    491e:	mov.w	r8, #14
      _b = b;
    4922:	strb	r1, [r2, #20]
    4924:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4928:	strb.w	r6, [r2, #34]	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    492c:	movs	r6, #60	; 0x3c
      _s = s;
      _b = b;
    492e:	strb	r1, [r2, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4930:	mov.w	r1, #114	; 0x72
      _s = s;
      _b = b;
    4934:	strb.w	r5, [r2, #38]	; 0x26
    4938:	movs	r5, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    493a:	strb	r1, [r2, #24]
      _s = s;
    493c:	mov.w	r1, #20
    4940:	strb.w	r4, [r2, #46]	; 0x2e
      _b = b;
    4944:	movs	r4, #167	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4946:	strb	r1, [r2, #25]
      _b = b;
    4948:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    494c:	strb.w	sl, [r2, #39]	; 0x27
      _s = s;
      _b = b;
    4950:	strb	r1, [r2, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4952:	mov.w	r1, #115	; 0x73
    4956:	strb.w	sl, [r2, #45]	; 0x2d
    495a:	strb	r1, [r2, #27]
      _s = s;
    495c:	mov.w	r1, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4960:	strb.w	sl, [r2, #48]	; 0x30
      _s = s;
    4964:	strb	r1, [r2, #28]
      _b = b;
    4966:	mvn.w	r1, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    496a:	strb.w	r3, [r2, #57]	; 0x39
      _s = s;
      _b = b;
    496e:	strb	r1, [r2, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4970:	mvn.w	r1, #116	; 0x74
      _s = s;
    4974:	strb.w	r3, [r2, #58]	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4978:	strb	r1, [r2, #30]
      _s = s;
      _b = b;
    497a:	mov.w	r1, #73	; 0x49
    497e:	strb.w	r1, [r2, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4982:	mvn.w	r1, #117	; 0x75
    4986:	strb.w	r1, [r2, #33]	; 0x21
      _s = s;
      _b = b;
    498a:	mov.w	r1, #77	; 0x4d
    498e:	strb.w	r1, [r2, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4992:	mvn.w	r1, #121	; 0x79
    4996:	strb.w	r1, [r2, #36]	; 0x24
      _s = s;
    499a:	mvn.w	r1, #34	; 0x22
    499e:	strb.w	r1, [r2, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49a2:	mvn.w	r1, #124	; 0x7c
    49a6:	strb.w	r1, [r2, #42]	; 0x2a
      _s = s;
    49aa:	mvn.w	r1, #83	; 0x53
    49ae:	strb.w	r1, [r2, #43]	; 0x2b
      _b = b;
    49b2:	mvn.w	r1, #45	; 0x2d
    49b6:	strb.w	r1, [r2, #44]	; 0x2c
    49ba:	mvn.w	r1, #33	; 0x21
    49be:	strb.w	r1, [r2, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49c2:	mvn.w	r1, #96	; 0x60
    49c6:	strb.w	r1, [r2, #49]	; 0x31
      _b = b;
    49ca:	mvn.w	r1, #39	; 0x27
    49ce:	strb.w	r1, [r2, #50]	; 0x32
    49d2:	mvn.w	r1, #32
    49d6:	strb.w	r1, [r2, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49da:	mvn.w	r1, #117	; 0x75
    49de:	strb.w	r1, [r2, #54]	; 0x36
      _s = s;
      _b = b;
    49e2:	mvn.w	r1, #9
    49e6:	strb.w	r1, [r2, #56]	; 0x38
    49ea:	mvn.w	r1, #4
    49ee:	strb.w	r1, [r2, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49f2:	strb.w	r3, [r2, #60]	; 0x3c
      _s = s;
      _b = b;
    49f6:	strb.w	r1, [r2, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49fa:	mov.w	r1, #5
    49fe:	strb.w	r3, [r2, #61]	; 0x3d
    4a02:	strb.w	r1, [r2, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a06:	mvn.w	r1, #120	; 0x78
    4a0a:	strb.w	r3, [r2, #63]	; 0x3f
    4a0e:	strb.w	r1, [r2, #51]	; 0x33
      _s = s;
    4a12:	mov.w	r1, #51	; 0x33
    4a16:	strb.w	r3, [r2, #64]	; 0x40
    4a1a:	strb.w	r1, [r2, #52]	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a1e:	mov.w	r1, #95	; 0x5f
    4a22:	strb.w	r3, [r2, #66]	; 0x42
    4a26:	strb.w	r1, [r2, #81]	; 0x51
      _s = s;
      _b = b;
    4a2a:	mvn.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a2e:	strb.w	r3, [r2, #67]	; 0x43
      _b = b;
    4a32:	strb.w	r1, [r2, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a36:	mvn.w	r1, #116	; 0x74
    4a3a:	strb.w	r3, [r2, #69]	; 0x45
    4a3e:	strb.w	r1, [r2, #84]	; 0x54
      _s = s;
      _b = b;
    4a42:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a46:	strb.w	r3, [r2, #70]	; 0x46
      _b = b;
    4a4a:	strb.w	r1, [r2, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a4e:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a52:	strb.w	r3, [r2, #72]	; 0x48
      _s = s;
    4a56:	strb.w	r1, [r2, #103]	; 0x67
      _b = b;
    4a5a:	mov.w	r1, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a5e:	strb.w	r3, [r2, #73]	; 0x49
      _b = b;
    4a62:	strb.w	r1, [r2, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a66:	mov.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a6a:	strb.w	r3, [r2, #75]	; 0x4b
      _s = s;
    4a6e:	strb.w	r1, [r2, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a72:	mvn.w	r1, #116	; 0x74
      _s = s;
    4a76:	strb.w	r3, [r2, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a7a:	strb.w	r1, [r2, #108]	; 0x6c
      _s = s;
    4a7e:	mvn.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a82:	strb.w	r3, [r2, #78]	; 0x4e
      _s = s;
    4a86:	strb.w	r3, [r2, #79]	; 0x4f
    4a8a:	strb.w	r0, [r2, #55]	; 0x37
      _b = b;
    4a8e:	movs	r0, #219	; 0xdb
    4a90:	strb.w	ip, [r2, #62]	; 0x3e
    4a94:	strb.w	ip, [r2, #65]	; 0x41
    4a98:	strb.w	ip, [r2, #68]	; 0x44
    4a9c:	strb.w	ip, [r2, #71]	; 0x47
    4aa0:	strb.w	ip, [r2, #74]	; 0x4a
    4aa4:	strb.w	ip, [r2, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4aa8:	strb.w	r1, [r2, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aac:	mvn.w	r1, #121	; 0x79
      _s = s;
    4ab0:	strb.w	ip, [r2, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ab4:	strb.w	r1, [r2, #111]	; 0x6f
      _s = s;
    4ab8:	mvn.w	r1, #5
    4abc:	strb.w	fp, [r2, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ac0:	mov.w	fp, #25
      _s = s;
    4ac4:	strb.w	r1, [r2, #112]	; 0x70
      _b = b;
    4ac8:	mvn.w	r1, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4acc:	strb.w	r8, [r2, #91]	; 0x5b
      _b = b;
    4ad0:	mov.w	r8, #30
    4ad4:	strb.w	r1, [r2, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ad8:	mov.w	r1, #46	; 0x2e
      _s = s;
      _b = b;
    4adc:	strb.w	r5, [r2, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ae0:	movs	r5, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ae2:	strb.w	r1, [r2, #93]	; 0x5d
      _s = s;
    4ae6:	ldrb.w	r1, [sp, #32]
      _b = b;
    4aea:	strb.w	r4, [r2, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4aee:	movs	r4, #162	; 0xa2
    4af0:	strb.w	r1, [r2, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4af4:	mov.w	r1, #94	; 0x5e
    4af8:	strb.w	r6, [r2, #96]	; 0x60
    4afc:	strb.w	r1, [r2, #87]	; 0x57
    4b00:	mov.w	r1, #96	; 0x60
    4b04:	strb.w	r9, [r2, #114]	; 0x72
    4b08:	strb.w	r1, [r2, #90]	; 0x5a
      _s = s;
      _b = b;
    4b0c:	mvn.w	r1, #58	; 0x3a
    4b10:	strb.w	lr, [r2, #116]	; 0x74
    4b14:	mov.w	lr, #103	; 0x67
    4b18:	strb.w	r1, [r2, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b1c:	mov.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b20:	strb.w	sl, [r2, #123]	; 0x7b
      _s = s;
    4b24:	strb.w	r1, [r2, #94]	; 0x5e
      _b = b;
    4b28:	mvn.w	r1, #99	; 0x63
    4b2c:	strb.w	r1, [r2, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b30:	mov.w	r1, #121	; 0x79
    4b34:	strb.w	r1, [r2, #97]	; 0x61
      _b = b;
    4b38:	mov.w	r1, #113	; 0x71
    4b3c:	strb.w	r1, [r2, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b40:	mov.w	r1, #105	; 0x69
    4b44:	strb.w	r1, [r2, #99]	; 0x63
      _s = s;
    4b48:	mvn.w	r1, #69	; 0x45
    4b4c:	strb.w	r1, [r2, #100]	; 0x64
      _b = b;
    4b50:	mov.w	r1, #101	; 0x65
    4b54:	strb.w	r1, [r2, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b58:	mov.w	r1, #118	; 0x76
    4b5c:	strb.w	r1, [r2, #102]	; 0x66
    4b60:	mvn.w	r1, #43	; 0x2b
    4b64:	strb.w	r1, [r2, #105]	; 0x69
      _s = s;
      _b = b;
    4b68:	mov.w	r1, #32
    4b6c:	strb.w	r1, [r2, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b70:	mvn.w	r1, #122	; 0x7a
    4b74:	strb.w	r1, [r2, #117]	; 0x75
      _s = s;
    4b78:	mov.w	r1, #106	; 0x6a
    4b7c:	strb.w	r1, [r2, #118]	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b80:	mvn.w	r1, #124	; 0x7c
    4b84:	strb.w	r1, [r2, #120]	; 0x78
      _s = s;
      _b = b;
    4b88:	mvn.w	r1, #34	; 0x22
    4b8c:	strb.w	r1, [r2, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b90:	mvn.w	r1, #16
    4b94:	strb.w	r1, [r2, #124]	; 0x7c
      _b = b;
    4b98:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b9c:	strb.w	sl, [r2, #126]	; 0x7e
      _s = s;
      _b = b;
    4ba0:	strb.w	r1, [r2, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ba4:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ba8:	strb.w	sl, [r2, #129]	; 0x81
      _s = s;
    4bac:	strb.w	r1, [r2, #127]	; 0x7f
      _b = b;
    4bb0:	strb.w	r1, [r2, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bb4:	mvn.w	r1, #124	; 0x7c
    4bb8:	strb.w	r3, [r2, #138]	; 0x8a
    4bbc:	strb.w	r1, [r2, #132]	; 0x84
      _s = s;
      _b = b;
    4bc0:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bc4:	strb.w	r3, [r2, #139]	; 0x8b
      _b = b;
    4bc8:	strb.w	r1, [r2, #134]	; 0x86
    4bcc:	mvn.w	r1, #37	; 0x25
    4bd0:	strb.w	ip, [r2, #140]	; 0x8c
    4bd4:	strb.w	r1, [r2, #137]	; 0x89
    4bd8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bdc:	strb.w	r3, [r2, #141]	; 0x8d
      _s = s;
      _b = b;
    4be0:	strb.w	r1, [r2, #146]	; 0x92
    4be4:	mvn.w	r1, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4be8:	strb.w	r3, [r2, #142]	; 0x8e
      _b = b;
    4bec:	strb.w	r1, [r2, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bf0:	mvn.w	r1, #111	; 0x6f
      _b = b;
    4bf4:	strb.w	ip, [r2, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bf8:	strb.w	r1, [r2, #121]	; 0x79
      _b = b;
    4bfc:	mvn.w	r1, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c00:	strb.w	r3, [r2, #144]	; 0x90
      _s = s;
      _b = b;
    4c04:	strb.w	r1, [r2, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c08:	mvn.w	r1, #59	; 0x3b
    4c0c:	strb.w	r3, [r2, #145]	; 0x91
    4c10:	strb.w	r1, [r2, #130]	; 0x82
    4c14:	mov.w	r1, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c18:	strb.w	r3, [r2, #147]	; 0x93
      _s = s;
    4c1c:	strb.w	r1, [r2, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c20:	mvn.w	r1, #107	; 0x6b
      _s = s;
    4c24:	strb.w	r3, [r2, #148]	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c28:	strb.w	r1, [r2, #135]	; 0x87
      _s = s;
      _b = b;
    4c2c:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c30:	strb.w	r7, [r2, #136]	; 0x88
    4c34:	movs	r7, #44	; 0x2c
      _b = b;
    4c36:	strb.w	r1, [r2, #149]	; 0x95
    4c3a:	strb.w	r1, [r2, #152]	; 0x98
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c3e:	mov.w	r1, #113	; 0x71
    4c42:	strb.w	r3, [r2, #150]	; 0x96
      _s = s;
    4c46:	strb.w	r3, [r2, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c4a:	strb.w	r3, [r2, #153]	; 0x99
      _s = s;
    4c4e:	strb.w	r3, [r2, #154]	; 0x9a
      _b = b;
    4c52:	strb.w	ip, [r2, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c56:	strb.w	r1, [r2, #156]	; 0x9c
      _s = s;
      _b = b;
    4c5a:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c5e:	strb.w	r6, [r2, #163]	; 0xa3
      _b = b;
    4c62:	movs	r6, #214	; 0xd6
    4c64:	strb.w	r1, [r2, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c68:	mov.w	r1, #51	; 0x33
    4c6c:	strb.w	fp, [r2, #171]	; 0xab
    4c70:	mov.w	fp, #143	; 0x8f
    4c74:	strb.w	r1, [r2, #159]	; 0x9f
      _s = s;
    4c78:	mov.w	r1, #10
      _b = b;
    4c7c:	strb.w	r0, [r2, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c80:	strb.w	r1, [r2, #160]	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c84:	mov.w	r1, #121	; 0x79
      _s = s;
    4c88:	strb.w	r5, [r2, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c8c:	strb.w	r1, [r2, #162]	; 0xa2
    4c90:	mov.w	r1, #32
    4c94:	strb.w	r5, [r2, #177]	; 0xb1
      _s = s;
    4c98:	movs	r5, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c9a:	strb.w	r1, [r2, #165]	; 0xa5
      _s = s;
    4c9e:	mvn.w	r1, #82	; 0x52
    4ca2:	strb.w	r4, [r2, #175]	; 0xaf
    4ca6:	strb.w	r1, [r2, #166]	; 0xa6
      _b = b;
    4caa:	mvn.w	r1, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cae:	strb.w	r4, [r2, #181]	; 0xb5
    4cb2:	movs	r4, #90	; 0x5a
      _b = b;
    4cb4:	strb.w	r1, [r2, #167]	; 0xa7
    4cb8:	mov.w	r1, #85	; 0x55
    4cbc:	strb.w	r1, [r2, #176]	; 0xb0
    4cc0:	ldrb.w	r1, [sp, #32]
    4cc4:	strb.w	r1, [r2, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cc8:	mov.w	r1, #121	; 0x79
    4ccc:	strb.w	r1, [r2, #180]	; 0xb4
      _s = s;
    4cd0:	mov.w	r1, #3
    4cd4:	strb.w	r1, [r2, #157]	; 0x9d
      _b = b;
    4cd8:	mov.w	r1, #123	; 0x7b
    4cdc:	strb.w	r1, [r2, #164]	; 0xa4
    4ce0:	strb.w	r1, [r2, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce4:	mov.w	r1, #54	; 0x36
    4ce8:	strb.w	r1, [r2, #168]	; 0xa8
      _s = s;
      _b = b;
    4cec:	ldrb.w	r1, [sp, #36]	; 0x24
    4cf0:	strb.w	r1, [r2, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cf4:	mvn.w	r1, #67	; 0x43
    4cf8:	strb.w	r1, [r2, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cfc:	mov.w	r1, #28
    4d00:	strb.w	r1, [r2, #174]	; 0xae
      _s = s;
    4d04:	mvn.w	r1, #81	; 0x51
    4d08:	strb.w	r1, [r2, #178]	; 0xb2
      _b = b;
    4d0c:	mvn.w	r1, #101	; 0x65
    4d10:	strb.w	r1, [r2, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d14:	mvn.w	r1, #39	; 0x27
    4d18:	strb.w	r1, [r2, #183]	; 0xb7
      _s = s;
    4d1c:	mvn.w	r1, #104	; 0x68
    4d20:	strb.w	r1, [r2, #187]	; 0xbb
      _b = b;
    4d24:	mov.w	r1, #59	; 0x3b
    4d28:	strb.w	r1, [r2, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d2c:	ldrb.w	r1, [sp, #32]
    4d30:	strb.w	r9, [r2, #195]	; 0xc3
    4d34:	strb.w	r1, [r2, #189]	; 0xbd
      _s = s;
    4d38:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d3c:	strb.w	sl, [r2, #198]	; 0xc6
      _s = s;
    4d40:	strb.w	r1, [r2, #190]	; 0xbe
      _b = b;
    4d44:	mov.w	r1, #57	; 0x39
    4d48:	strb.w	r0, [r2, #200]	; 0xc8
    4d4c:	strb.w	r1, [r2, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d50:	mvn.w	r1, #119	; 0x77
    4d54:	strb.w	sl, [r2, #201]	; 0xc9
    4d58:	strb.w	r1, [r2, #192]	; 0xc0
      _s = s;
    4d5c:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d60:	strb.w	sl, [r2, #204]	; 0xcc
      _s = s;
    4d64:	strb.w	r1, [r2, #193]	; 0xc1
      _b = b;
    4d68:	mov.w	r1, #59	; 0x3b
    4d6c:	strb.w	r8, [r2, #185]	; 0xb9
    4d70:	mov.w	r8, #110	; 0x6e
    4d74:	strb.w	r1, [r2, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d78:	mvn.w	r1, #117	; 0x75
      _b = b;
    4d7c:	strb.w	lr, [r2, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d80:	mov.w	lr, #1
    4d84:	strb.w	r1, [r2, #196]	; 0xc4
    4d88:	mov.w	r1, #57	; 0x39
    4d8c:	strb.w	r7, [r2, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d90:	movs	r7, #33	; 0x21
      _s = s;
    4d92:	strb.w	r1, [r2, #199]	; 0xc7
    4d96:	mvn.w	r1, #65	; 0x41
      _b = b;
    4d9a:	strb.w	r6, [r2, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d9e:	movs	r6, #31
      _s = s;
    4da0:	strb.w	r1, [r2, #202]	; 0xca
      _b = b;
    4da4:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4da8:	strb.w	fp, [r2, #186]	; 0xba
      _s = s;
      _b = b;
    4dac:	strb.w	r1, [r2, #203]	; 0xcb
    4db0:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4db4:	strb.w	fp, [r2, #210]	; 0xd2
      _s = s;
      _b = b;
    4db8:	strb.w	r1, [r2, #206]	; 0xce
    4dbc:	mvn.w	r1, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4dc0:	strb.w	r4, [r2, #208]	; 0xd0
      _b = b;
    4dc4:	strb.w	r1, [r2, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dc8:	mvn.w	r1, #96	; 0x60
      _s = s;
    4dcc:	strb.w	r5, [r2, #214]	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dd0:	strb.w	r1, [r2, #213]	; 0xd5
    4dd4:	mvn.w	r1, #122	; 0x7a
    4dd8:	strb.w	r1, [r2, #207]	; 0xcf
      _s = s;
    4ddc:	mov.w	r1, #93	; 0x5d
    4de0:	strb.w	r1, [r2, #184]	; 0xb8
    4de4:	mvn.w	r1, #51	; 0x33
    4de8:	strb.w	r1, [r2, #205]	; 0xcd
      _b = b;
    4dec:	mvn.w	r1, #74	; 0x4a
    4df0:	strb.w	r1, [r2, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4df4:	mov.w	r1, #26
    4df8:	strb.w	r1, [r2, #217]	; 0xd9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dfc:	mvn.w	r1, #105	; 0x69
    4e00:	strb.w	r1, [r2, #216]	; 0xd8
      _s = s;
      _b = b;
    4e04:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e08:	strb.w	lr, [r2, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e0c:	mov.w	lr, #127	; 0x7f
      _s = s;
      _b = b;
    4e10:	strb.w	r1, [r2, #221]	; 0xdd
    4e14:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e18:	strb.w	lr, [r2, #219]	; 0xdb
      _s = s;
    4e1c:	mov.w	lr, #66	; 0x42
      _b = b;
    4e20:	strb.w	r1, [r2, #224]	; 0xe0
    4e24:	strb.w	r1, [r2, #227]	; 0xe3
    4e28:	strb.w	r1, [r2, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e2c:	mov.w	r1, #106	; 0x6a
      _s = s;
    4e30:	strb.w	lr, [r2, #235]	; 0xeb
      _b = b;
    4e34:	mvn.w	lr, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e38:	strb.w	r1, [r2, #234]	; 0xea
      _s = s;
      _b = b;
    4e3c:	mvn.w	r1, #29
    4e40:	strb.w	lr, [r2, #236]	; 0xec
    4e44:	strb.w	r1, [r2, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e48:	mvn.w	r1, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e4c:	ldrb.w	lr, [sp, #40]	; 0x28
      _s = s;
    4e50:	strb.w	r1, [r2, #241]	; 0xf1
      _b = b;
    4e54:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e58:	strb.w	lr, [r2, #237]	; 0xed
      _s = s;
    4e5c:	mov.w	lr, #72	; 0x48
      _b = b;
    4e60:	strb.w	r1, [r2, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e64:	mvn.w	r1, #62	; 0x3e
    4e68:	strb.w	lr, [r2, #238]	; 0xee
    4e6c:	mvn.w	lr, #113	; 0x71
    4e70:	strb.w	r1, [r2, #247]	; 0xf7
      _b = b;
    4e74:	mvn.w	r1, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e78:	strb.w	lr, [r2, #244]	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e7c:	mov.w	lr, #29
      _s = s;
      _b = b;
    4e80:	strb.w	r1, [r2, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e84:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e88:	strb.w	lr, [r2, #246]	; 0xf6
      _s = s;
      _b = b;
    4e8c:	mvn.w	lr, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e90:	strb.w	r3, [r2, #222]	; 0xde
      _s = s;
    4e94:	strb.w	r3, [r2, #223]	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e98:	strb.w	r3, [r2, #225]	; 0xe1
      _s = s;
    4e9c:	strb.w	r3, [r2, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ea0:	strb.w	r3, [r2, #228]	; 0xe4
      _s = s;
    4ea4:	strb.w	r3, [r2, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ea8:	strb.w	r3, [r2, #231]	; 0xe7
      _s = s;
    4eac:	strb.w	r3, [r2, #232]	; 0xe8
      _b = b;
    4eb0:	strb.w	ip, [r2, #233]	; 0xe9
    4eb4:	strb.w	r0, [r2, #242]	; 0xf2
    4eb8:	movs	r0, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eba:	strb.w	r7, [r2, #243]	; 0xf3
    4ebe:	movs	r7, #55	; 0x37
    4ec0:	strb.w	r6, [r2, #240]	; 0xf0
      _s = s;
      _b = b;
    4ec4:	strb.w	lr, [r2, #248]	; 0xf8
    4ec8:	mov.w	lr, #170	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ecc:	strb.w	r1, [r2, #250]	; 0xfa
      _b = b;
    4ed0:	mvn.w	r1, #92	; 0x5c
    4ed4:	strb.w	r4, [r2, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ed8:	movs	r4, #237	; 0xed
      _b = b;
    4eda:	strb.w	r1, [r2, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ede:	mvn.w	r1, #113	; 0x71
      _b = b;
    4ee2:	strb.w	r0, [r2, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ee6:	movs	r0, #69	; 0x45
    4ee8:	strb.w	r1, [r2, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eec:	mov.w	r1, #77	; 0x4d
    4ef0:	strb.w	sl, [r2, #264]	; 0x108
    4ef4:	strb.w	r1, [r2, #255]	; 0xff
      _s = s;
    4ef8:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4efc:	strb.w	r9, [r2, #276]	; 0x114
      _s = s;
    4f00:	strb.w	r1, [r2, #259]	; 0x103
      _b = b;
    4f04:	mvn.w	r1, #74	; 0x4a
    4f08:	strb.w	r8, [r2, #266]	; 0x10a
    4f0c:	mov.w	r8, #228	; 0xe4
    4f10:	strb.w	r1, [r2, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f14:	mvn.w	r1, #43	; 0x2b
    4f18:	strb.w	r7, [r2, #252]	; 0xfc
    4f1c:	strb.w	r1, [r2, #261]	; 0x105
      _s = s;
    4f20:	mov.w	r1, #87	; 0x57
      _b = b;
    4f24:	strb.w	lr, [r2, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f28:	strb.w	r1, [r2, #262]	; 0x106
      _b = b;
    4f2c:	mov.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f30:	strb.w	lr, [r2, #256]	; 0x100
    4f34:	mov.w	lr, #17
      _b = b;
    4f38:	strb.w	r1, [r2, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f3c:	mvn.w	r1, #117	; 0x75
      _s = s;
    4f40:	strb.w	r4, [r2, #271]	; 0x10f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f44:	strb.w	r1, [r2, #267]	; 0x10b
    4f48:	mvn.w	r1, #120	; 0x78
      _s = s;
    4f4c:	strb.w	r0, [r2, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f50:	strb.w	r1, [r2, #270]	; 0x10e
    4f54:	ldrb.w	r1, [sp, #32]
    4f58:	strb.w	r1, [r2, #273]	; 0x111
      _s = s;
    4f5c:	mvn.w	r1, #30
    4f60:	strb.w	r1, [r2, #274]	; 0x112
      _b = b;
    4f64:	mov.w	r1, #51	; 0x33
    4f68:	strb.w	r1, [r2, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f6c:	mov.w	r1, #48	; 0x30
    4f70:	strb.w	r1, [r2, #280]	; 0x118
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f74:	mvn.w	r1, #122	; 0x7a
    4f78:	strb.w	r1, [r2, #279]	; 0x117
    4f7c:	mov.w	r1, #22
    4f80:	strb.w	r1, [r2, #249]	; 0xf9
      _s = s;
      _b = b;
    4f84:	mvn.w	r1, #86	; 0x56
    4f88:	strb.w	r1, [r2, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f8c:	mov.w	r1, #112	; 0x70
    4f90:	strb.w	r1, [r2, #258]	; 0x102
      _s = s;
    4f94:	mov.w	r1, #34	; 0x22
    4f98:	strb.w	r1, [r2, #265]	; 0x109
    4f9c:	mvn.w	r1, #108	; 0x6c
    4fa0:	strb.w	r1, [r2, #268]	; 0x10c
      _b = b;
    4fa4:	mov.w	r1, #99	; 0x63
    4fa8:	strb.w	r1, [r2, #278]	; 0x116
    4fac:	mvn.w	r1, #62	; 0x3e
    4fb0:	strb.w	r1, [r2, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fb4:	mvn.w	r1, #119	; 0x77
      _s = s;
    4fb8:	strb.w	r7, [r2, #283]	; 0x11b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fbc:	movs	r7, #149	; 0x95
    4fbe:	strb.w	r1, [r2, #282]	; 0x11a
      _s = s;
      _b = b;
    4fc2:	mvn.w	r1, #24
    4fc6:	strb.w	r4, [r2, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fca:	movs	r4, #65	; 0x41
      _b = b;
    4fcc:	strb.w	r1, [r2, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fd0:	mvn.w	r1, #120	; 0x78
      _s = s;
    4fd4:	strb.w	r0, [r2, #289]	; 0x121
      _b = b;
    4fd8:	movs	r0, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fda:	strb.w	r1, [r2, #285]	; 0x11d
      _s = s;
    4fde:	mov.w	r1, #72	; 0x48
    4fe2:	strb.w	r5, [r2, #295]	; 0x127
      _b = b;
    4fe6:	movs	r5, #201	; 0xc9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fe8:	strb.w	r1, [r2, #292]	; 0x124
      _b = b;
    4fec:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ff0:	strb.w	r9, [r2, #300]	; 0x12c
      _s = s;
      _b = b;
    4ff4:	strb.w	r1, [r2, #293]	; 0x125
    4ff8:	mvn.w	r1, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ffc:	strb.w	r3, [r2, #306]	; 0x132
      _s = s;
      _b = b;
    5000:	strb.w	r1, [r2, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5004:	mvn.w	r1, #124	; 0x7c
      _s = s;
    5008:	strb.w	r3, [r2, #307]	; 0x133
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    500c:	strb.w	r1, [r2, #297]	; 0x129
      _s = s;
    5010:	mov.w	r1, #66	; 0x42
      _b = b;
    5014:	strb.w	ip, [r2, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5018:	strb.w	r1, [r2, #298]	; 0x12a
      _b = b;
    501c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5020:	strb.w	r3, [r2, #309]	; 0x135
      _s = s;
      _b = b;
    5024:	strb.w	r1, [r2, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5028:	mov.w	r1, #59	; 0x3b
    502c:	strb.w	r3, [r2, #310]	; 0x136
    5030:	strb.w	r1, [r2, #301]	; 0x12d
      _b = b;
    5034:	mvn.w	r1, #22
    5038:	strb.w	ip, [r2, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    503c:	mov.w	ip, #125	; 0x7d
      _s = s;
      _b = b;
    5040:	strb.w	r1, [r2, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5044:	mvn.w	r1, #111	; 0x6f
      _s = s;
    5048:	strb.w	lr, [r2, #286]	; 0x11e
    504c:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5050:	strb.w	r1, [r2, #303]	; 0x12f
      _s = s;
    5054:	mov.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5058:	strb.w	r7, [r2, #294]	; 0x126
      _s = s;
    505c:	movs	r7, #45	; 0x2d
    505e:	strb.w	r1, [r2, #304]	; 0x130
      _b = b;
    5062:	mvn.w	r1, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5066:	strb.w	r4, [r2, #313]	; 0x139
    506a:	movs	r4, #61	; 0x3d
      _b = b;
    506c:	strb.w	r1, [r2, #305]	; 0x131
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5070:	mvn.w	r1, #32
      _s = s;
      _b = b;
    5074:	strb.w	r5, [r2, #290]	; 0x122
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5078:	strb.w	r1, [r2, #312]	; 0x138
    507c:	mvn.w	r1, #109	; 0x6d
    5080:	strb.w	r1, [r2, #288]	; 0x120
    5084:	strb.w	r1, [r2, #291]	; 0x123
    5088:	mov.w	r1, #77	; 0x4d
      _s = s;
      _b = b;
    508c:	strb.w	r0, [r2, #314]	; 0x13a
    5090:	movs	r0, #183	; 0xb7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5092:	strb.w	r1, [r2, #315]	; 0x13b
      _s = s;
    5096:	mov.w	r1, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    509a:	strb.w	r6, [r2, #321]	; 0x141
      _s = s;
    509e:	movs	r6, #41	; 0x29
    50a0:	strb.w	r1, [r2, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50a4:	mov.w	r1, #34	; 0x22
      _s = s;
    50a8:	strb.w	fp, [r2, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ac:	strb.w	r1, [r2, #318]	; 0x13e
      _s = s;
      _b = b;
    50b0:	mvn.w	r1, #22
    50b4:	strb.w	r5, [r2, #329]	; 0x149
    50b8:	movs	r5, #232	; 0xe8
    50ba:	strb.w	r1, [r2, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50be:	mov.w	r1, #28
    50c2:	strb.w	sl, [r2, #345]	; 0x159
    50c6:	strb.w	r1, [r2, #324]	; 0x144
      _s = s;
    50ca:	mvn.w	r1, #59	; 0x3b
      _b = b;
    50ce:	strb.w	r8, [r2, #344]	; 0x158
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50d2:	mov.w	r8, #24
    50d6:	strb.w	r1, [r2, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50da:	mov.w	r1, #20
      _s = s;
      _b = b;
    50de:	strb.w	r0, [r2, #326]	; 0x146
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50e2:	strb.w	r1, [r2, #327]	; 0x147
      _s = s;
    50e6:	mvn.w	r1, #120	; 0x78
    50ea:	strb.w	r4, [r2, #334]	; 0x14e
    50ee:	strb.w	r1, [r2, #328]	; 0x148
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50f2:	mov.w	r1, #29
      _s = s;
    50f6:	strb.w	r4, [r2, #346]	; 0x15a
    50fa:	movs	r4, #192	; 0xc0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50fc:	strb.w	r1, [r2, #330]	; 0x14a
      _s = s;
    5100:	mvn.w	r1, #96	; 0x60
    5104:	strb.w	r1, [r2, #331]	; 0x14b
      _b = b;
    5108:	mvn.w	r1, #62	; 0x3e
    510c:	strb.w	r1, [r2, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5110:	mov.w	r1, #112	; 0x70
    5114:	strb.w	r1, [r2, #336]	; 0x150
      _s = s;
    5118:	mov.w	r1, #48	; 0x30
    511c:	strb.w	r1, [r2, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5120:	mov.w	r1, #123	; 0x7b
    5124:	strb.w	r1, [r2, #339]	; 0x153
      _s = s;
    5128:	mov.w	r1, #22
    512c:	strb.w	r1, [r2, #340]	; 0x154
      _b = b;
    5130:	mvn.w	r1, #120	; 0x78
    5134:	strb.w	r1, [r2, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5138:	mov.w	r1, #123	; 0x7b
    513c:	strb.w	r1, [r2, #342]	; 0x156
      _s = s;
    5140:	mov.w	r1, #22
    5144:	strb.w	r1, [r2, #343]	; 0x157
    5148:	mvn.w	r1, #40	; 0x28
    514c:	strb.w	r1, [r2, #319]	; 0x13f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5150:	mov.w	r1, #88	; 0x58
    5154:	strb.w	r1, [r2, #333]	; 0x14d
      _s = s;
      _b = b;
    5158:	mvn.w	r1, #61	; 0x3d
    515c:	strb.w	r1, [r2, #335]	; 0x14f
    5160:	mvn.w	r1, #49	; 0x31
    5164:	strb.w	r1, [r2, #317]	; 0x13d
    5168:	mvn.w	r1, #31
    516c:	strb.w	r1, [r2, #323]	; 0x143
    5170:	mvn.w	r1, #78	; 0x4e
    5174:	strb.w	r1, [r2, #338]	; 0x152
    5178:	mvn.w	r1, #73	; 0x49
    517c:	strb.w	r1, [r2, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5180:	mvn.w	r1, #4
    5184:	strb.w	r6, [r2, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5188:	movs	r6, #142	; 0x8e
      _s = s;
    518a:	strb.w	r1, [r2, #349]	; 0x15d
    518e:	mov.w	r1, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5192:	strb.w	r9, [r2, #348]	; 0x15c
      _s = s;
    5196:	strb.w	r1, [r2, #352]	; 0x160
      _b = b;
    519a:	mvn.w	r1, #102	; 0x66
    519e:	strb.w	fp, [r2, #350]	; 0x15e
    51a2:	strb.w	r1, [r2, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51a6:	mov.w	r1, #127	; 0x7f
    51aa:	strb.w	r9, [r2, #357]	; 0x165
    51ae:	strb.w	r1, [r2, #354]	; 0x162
      _s = s;
    51b2:	mov.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51b6:	strb.w	fp, [r2, #363]	; 0x16b
      _s = s;
    51ba:	strb.w	r1, [r2, #355]	; 0x163
      _b = b;
    51be:	mvn.w	r1, #86	; 0x56
    51c2:	strb.w	r0, [r2, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    51c6:	movs	r0, #166	; 0xa6
      _b = b;
    51c8:	strb.w	r1, [r2, #356]	; 0x164
    51cc:	ldrb.w	r1, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51d0:	strb.w	r9, [r2, #375]	; 0x177
      _s = s;
      _b = b;
    51d4:	strb.w	r1, [r2, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    51d8:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51dc:	strb.w	ip, [r2, #351]	; 0x15f
    51e0:	mov.w	ip, #127	; 0x7f
      _s = s;
    51e4:	strb.w	r1, [r2, #361]	; 0x169
      _b = b;
    51e8:	mov.w	r1, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    51ec:	strb.w	lr, [r2, #358]	; 0x166
    51f0:	mov.w	lr, #139	; 0x8b
      _b = b;
    51f4:	strb.w	r1, [r2, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    51f8:	mov.w	r1, #115	; 0x73
    51fc:	strb.w	r7, [r2, #370]	; 0x172
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5200:	movs	r7, #140	; 0x8c
      _s = s;
    5202:	strb.w	r1, [r2, #364]	; 0x16c
      _b = b;
    5206:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    520a:	str	r6, [sp, #52]	; 0x34
      _s = s;
    520c:	mvn.w	r6, #12
      _b = b;
    5210:	strb.w	r1, [r2, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5214:	mvn.w	r1, #107	; 0x6b
    5218:	strb.w	r1, [r2, #366]	; 0x16e
      _s = s;
    521c:	mov.w	r1, #94	; 0x5e
    5220:	strb.w	r1, [r2, #367]	; 0x16f
      _b = b;
    5224:	mvn.w	r1, #74	; 0x4a
    5228:	strb.w	r1, [r2, #371]	; 0x173
    522c:	mvn.w	r1, #12
    5230:	strb.w	r1, [r2, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5234:	mov.w	r1, #85	; 0x55
    5238:	strb.w	r1, [r2, #376]	; 0x178
      _b = b;
    523c:	mvn.w	r1, #13
    5240:	strb.w	r1, [r2, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5244:	mvn.w	r1, #124	; 0x7c
    5248:	strb.w	r1, [r2, #378]	; 0x17a
      _s = s;
    524c:	mvn.w	r1, #79	; 0x4f
    5250:	strb.w	r1, [r2, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5254:	mvn.w	r1, #122	; 0x7a
    5258:	strb.w	r1, [r2, #372]	; 0x174
    525c:	mvn.w	r1, #114	; 0x72
    5260:	strb.w	r1, [r2, #360]	; 0x168
    5264:	mvn.w	r1, #100	; 0x64
      _s = s;
      _b = b;
    5268:	strb.w	r5, [r2, #380]	; 0x17c
    526c:	mvn.w	r5, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5270:	strb.w	r1, [r2, #369]	; 0x171
      _s = s;
      _b = b;
    5274:	mvn.w	r1, #43	; 0x2b
    5278:	strb.w	r5, [r2, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    527c:	mov.w	r5, #54	; 0x36
    5280:	strb.w	r3, [r2, #387]	; 0x183
    5284:	strb.w	r5, [r2, #408]	; 0x198
      _s = s;
      _b = b;
    5288:	mvn.w	r5, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    528c:	strb.w	r3, [r2, #388]	; 0x184
      _b = b;
    5290:	mvn.w	r3, #5
    5294:	strb.w	r5, [r2, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5298:	mov.w	r5, #76	; 0x4c
      _b = b;
    529c:	strb.w	r1, [r2, #386]	; 0x182
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52a0:	mov.w	r1, #101	; 0x65
      _s = s;
    52a4:	strb.w	r5, [r2, #391]	; 0x187
    52a8:	mov.w	r5, #92	; 0x5c
      _b = b;
    52ac:	strb.w	r3, [r2, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52b0:	mvn.w	r3, #37	; 0x25
      _s = s;
    52b4:	strb.w	r5, [r2, #394]	; 0x18a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52b8:	mov.w	r5, #40	; 0x28
    52bc:	strb.w	r3, [r2, #390]	; 0x186
      _s = s;
      _b = b;
    52c0:	mov.w	r3, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52c4:	strb.w	r5, [r2, #396]	; 0x18c
    52c8:	mov.w	r5, #21
    52cc:	strb.w	r1, [r2, #393]	; 0x189
      _s = s;
      _b = b;
    52d0:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52d4:	strb.w	r5, [r2, #402]	; 0x192
      _s = s;
      _b = b;
    52d8:	movs	r5, #225	; 0xe1
    52da:	strb.w	r3, [r2, #392]	; 0x188
    52de:	movs	r3, #177	; 0xb1
    52e0:	strb.w	r1, [r2, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52e4:	movs	r1, #144	; 0x90
      _s = s;
      _b = b;
    52e6:	str	r5, [sp, #68]	; 0x44
    52e8:	mvn.w	r5, #71	; 0x47
    52ec:	str	r3, [sp, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ee:	movs	r3, #121	; 0x79
    52f0:	str	r1, [sp, #72]	; 0x48
      _s = s;
    52f2:	mvn.w	r1, #32
      _b = b;
    52f6:	strb.w	r5, [r2, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52fa:	mov.w	r5, #111	; 0x6f
    52fe:	str	r3, [sp, #44]	; 0x2c
    5300:	mov.w	r3, #22
      _s = s;
    5304:	strb.w	r1, [r2, #400]	; 0x190
      _b = b;
    5308:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    530c:	strb.w	r6, [r2, #403]	; 0x193
    5310:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5314:	strb.w	r5, [r2, #411]	; 0x19b
      _s = s;
      _b = b;
    5318:	movs	r5, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    531a:	strb.w	r3, [r2, #399]	; 0x18f
      _s = s;
    531e:	movs	r3, #99	; 0x63
      _b = b;
    5320:	strb.w	r1, [r2, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5324:	movs	r1, #138	; 0x8a
      _s = s;
    5326:	strb.w	r6, [r2, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    532a:	movs	r6, #141	; 0x8d
      _s = s;
      _b = b;
    532c:	str	r5, [sp, #48]	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    532e:	mvn.w	r5, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5332:	str	r1, [sp, #56]	; 0x38
    5334:	mov	r1, r2
    5336:	str	r6, [sp, #76]	; 0x4c
    5338:	mov	r6, r2
      _s = s;
    533a:	str	r3, [sp, #60]	; 0x3c
      _b = b;
    533c:	mov	r3, r2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    533e:	strb.w	r5, [r2, #412]	; 0x19c
      _b = b;
    5342:	movs	r5, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5344:	strb.w	r4, [r2, #382]	; 0x17e
      _b = b;
    5348:	str	r5, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    534a:	mvn.w	r5, #122	; 0x7a
      _s = s;
      _b = b;
    534e:	strb.w	r4, [r2, #383]	; 0x17f
    5352:	mvn.w	r4, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5356:	strb.w	r5, [r2, #381]	; 0x17d
    535a:	strb.w	r5, [r2, #384]	; 0x180
      _s = s;
    535e:	mov.w	r5, #72	; 0x48
      _b = b;
    5362:	strb.w	r4, [r2, #395]	; 0x18b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5366:	mov.w	r4, #87	; 0x57
    536a:	strb.w	r5, [r2, #427]	; 0x1ab
      _b = b;
    536e:	mvn.w	r5, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5372:	strb.w	r4, [r2, #415]	; 0x19f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5376:	mov.w	r4, #95	; 0x5f
      _s = s;
      _b = b;
    537a:	strb.w	r5, [r2, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    537e:	mov.w	r5, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5382:	strb.w	r4, [r2, #414]	; 0x19e
      _s = s;
      _b = b;
    5386:	mov.w	r4, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    538a:	strb.w	r5, [r2, #430]	; 0x1ae
      _b = b;
    538e:	mvn.w	r5, #24
    5392:	strb.w	r4, [r2, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5396:	mov.w	r4, #123	; 0x7b
      _s = s;
      _b = b;
    539a:	strb.w	r5, [r2, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    539e:	mov.w	r5, #99	; 0x63
    53a2:	strb.w	r0, [r2, #397]	; 0x18d
    53a6:	strb.w	r5, [r2, #433]	; 0x1b1
      _b = b;
    53aa:	mvn.w	r5, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53ae:	strb.w	r0, [r2, #409]	; 0x199
    53b2:	mvn.w	r0, #83	; 0x53
      _b = b;
    53b6:	strb.w	r5, [r2, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53ba:	ldrb.w	r5, [sp, #56]	; 0x38
    53be:	strb.w	r4, [r2, #417]	; 0x1a1
      _s = s;
    53c2:	mov.w	r4, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53c6:	strb.w	r5, [r2, #435]	; 0x1b3
      _s = s;
    53ca:	mov.w	r5, #95	; 0x5f
    53ce:	strb.w	r4, [r2, #418]	; 0x1a2
      _b = b;
    53d2:	mvn.w	r4, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53d6:	strb.w	r0, [r2, #424]	; 0x1a8
      _b = b;
    53da:	mvn.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53de:	strb.w	r5, [r2, #436]	; 0x1b4
      _b = b;
    53e2:	mvn.w	r5, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53e6:	strb.w	r8, [r2, #385]	; 0x181
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53ea:	strb.w	r8, [r2, #405]	; 0x195
      _s = s;
      _b = b;
    53ee:	strb.w	ip, [r2, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53f2:	strb.w	ip, [r2, #420]	; 0x1a4
      _s = s;
      _b = b;
    53f6:	strb.w	r4, [r2, #422]	; 0x1a6
    53fa:	movs	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53fc:	strb.w	r9, [r2, #423]	; 0x1a7
      _s = s;
      _b = b;
    5400:	strb.w	r0, [r2, #425]	; 0x1a9
    5404:	movs	r0, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5406:	strb.w	r9, [r2, #429]	; 0x1ad
    540a:	strb.w	lr, [r2, #432]	; 0x1b0
      _s = s;
      _b = b;
    540e:	strb.w	r5, [r2, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5412:	mov.w	r5, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5416:	strb.w	r9, [r2, #459]	; 0x1cb
      _s = s;
    541a:	mvn.w	r9, #96	; 0x60
    541e:	strb.w	r5, [r2, #439]	; 0x1b7
      _b = b;
    5422:	mvn.w	r5, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5426:	strb.w	r9, [r2, #460]	; 0x1cc
      _b = b;
    542a:	mvn.w	r9, #74	; 0x4a
    542e:	strb.w	r5, [r2, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5432:	mov.w	r5, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5436:	strb.w	sl, [r2, #453]	; 0x1c5
      _s = s;
    543a:	strb.w	r5, [r2, #442]	; 0x1ba
      _b = b;
    543e:	mvn.w	r5, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5442:	ldrb.w	sl, [sp, #64]	; 0x40
      _b = b;
    5446:	strb.w	r5, [r2, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    544a:	mov.w	r5, #116	; 0x74
      _b = b;
    544e:	strb.w	r9, [r2, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5452:	mov.w	r9, #29
    5456:	strb.w	r5, [r2, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    545a:	mvn.w	r5, #122	; 0x7a
      _s = s;
    545e:	strb.w	sl, [r2, #454]	; 0x1c6
      _b = b;
    5462:	mvn.w	sl, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5466:	strb.w	r5, [r2, #438]	; 0x1b6
      _s = s;
      _b = b;
    546a:	mov.w	r5, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    546e:	strb.w	r9, [r2, #466]	; 0x1d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5472:	mvn.w	r9, #95	; 0x5f
      _s = s;
      _b = b;
    5476:	strb.w	r5, [r2, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    547a:	mov.w	r5, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    547e:	strb.w	r7, [r2, #444]	; 0x1bc
      _s = s;
    5482:	strb.w	r5, [r2, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5486:	mov.w	r5, #126	; 0x7e
      _s = s;
      _b = b;
    548a:	strb.w	r7, [r2, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    548e:	mov.w	r7, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5492:	strb.w	r5, [r2, #426]	; 0x1aa
      _s = s;
      _b = b;
    5496:	mov.w	r5, #114	; 0x72
    549a:	strb.w	sl, [r2, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    549e:	mvn.w	sl, #49	; 0x31
      _b = b;
    54a2:	strb.w	r5, [r2, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54a6:	mvn.w	r5, #108	; 0x6c
    54aa:	strb.w	r9, [r2, #468]	; 0x1d4
      _s = s;
    54ae:	mov.w	r9, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54b2:	strb.w	r5, [r2, #447]	; 0x1bf
      _s = s;
    54b6:	mov.w	r5, #34	; 0x22
    54ba:	strb.w	r7, [r2, #451]	; 0x1c3
      _b = b;
    54be:	mvn.w	r7, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54c2:	strb.w	r5, [r2, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54c6:	mvn.w	r5, #124	; 0x7c
      _s = s;
    54ca:	strb.w	sl, [r2, #457]	; 0x1c9
      _b = b;
    54ce:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54d2:	strb.w	r9, [r2, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54d6:	mov.w	r9, #116	; 0x74
    54da:	strb.w	lr, [r2, #441]	; 0x1b9
    54de:	strb.w	r5, [r2, #450]	; 0x1c2
      _s = s;
      _b = b;
    54e2:	strb.w	r7, [r2, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54e6:	mvn.w	r7, #124	; 0x7c
    54ea:	strb.w	r5, [r2, #456]	; 0x1c8
      _s = s;
      _b = b;
    54ee:	strb.w	sl, [r2, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54f2:	mov.w	sl, #119	; 0x77
    54f6:	strb.w	lr, [r2, #465]	; 0x1d1
    54fa:	strb.w	r9, [r2, #471]	; 0x1d7
      _s = s;
    54fe:	mov.w	r9, #123	; 0x7b
      _b = b;
    5502:	ldr	r5, [sp, #36]	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5504:	strb.w	r9, [r2, #472]	; 0x1d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5508:	mov.w	r9, #114	; 0x72
      _s = s;
      _b = b;
    550c:	strb.w	fp, [r2, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5510:	strb.w	r9, [r2, #474]	; 0x1da
      _s = s;
    5514:	mov.w	r9, #96	; 0x60
      _b = b;
    5518:	strb.w	r5, [r1, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    551c:	strb.w	r9, [r2, #475]	; 0x1db
      _b = b;
    5520:	mvn.w	r9, #39	; 0x27
    5524:	strb.w	r8, [r2, #497]	; 0x1f1
    5528:	strb.w	r9, [r2, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    552c:	mov.w	r9, #106	; 0x6a
    5530:	strb.w	r9, [r2, #477]	; 0x1dd
      _s = s;
    5534:	mov.w	r9, #66	; 0x42
    5538:	strb.w	r9, [r2, #478]	; 0x1de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    553c:	mvn.w	r9, #122	; 0x7a
    5540:	strb.w	r9, [r2, #462]	; 0x1ce
      _s = s;
      _b = b;
    5544:	mvn.w	r9, #55	; 0x37
    5548:	strb.w	r9, [r2, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    554c:	mvn.w	r9, #103	; 0x67
    5550:	strb.w	r9, [r2, #463]	; 0x1cf
      _b = b;
    5554:	mvn.w	r9, #97	; 0x61
    5558:	strb.w	r9, [r2, #467]	; 0x1d3
    555c:	mov.w	r9, #62	; 0x3e
    5560:	strb.w	r9, [r2, #470]	; 0x1d6
    5564:	mvn.w	r9, #30
    5568:	strb.w	r9, [r2, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    556c:	mov.w	r9, #38	; 0x26
    5570:	strb.w	r9, [r2, #480]	; 0x1e0
      _s = s;
    5574:	mvn.w	r9, #102	; 0x66
    5578:	strb.w	r9, [r2, #481]	; 0x1e1
      _b = b;
    557c:	mvn.w	r9, #79	; 0x4f
    5580:	strb.w	r9, [r2, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5584:	mov.w	r9, #112	; 0x70
    5588:	strb.w	r9, [r2, #483]	; 0x1e3
      _s = s;
    558c:	mov.w	r9, #118	; 0x76
    5590:	strb.w	r9, [r2, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5594:	mov.w	r9, #116	; 0x74
    5598:	strb.w	r9, [r2, #486]	; 0x1e6
      _s = s;
    559c:	mvn.w	r9, #34	; 0x22
    55a0:	strb.w	r9, [r2, #487]	; 0x1e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55a4:	mov.w	r9, #98	; 0x62
    55a8:	strb.w	r9, [r2, #489]	; 0x1e9
      _s = s;
    55ac:	mvn.w	r9, #110	; 0x6e
    55b0:	strb.w	r9, [r2, #490]	; 0x1ea
      _b = b;
    55b4:	ldrb.w	r9, [sp, #40]	; 0x28
    55b8:	strb.w	r9, [r2, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55bc:	mov.w	r9, #105	; 0x69
    55c0:	strb.w	r9, [r2, #492]	; 0x1ec
      _s = s;
    55c4:	mov.w	r9, #95	; 0x5f
    55c8:	strb.w	r9, [r2, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55cc:	ldrb.w	r9, [sp, #44]	; 0x2c
    55d0:	strb.w	r9, [r2, #498]	; 0x1f2
      _s = s;
    55d4:	mvn.w	r9, #121	; 0x79
    55d8:	strb.w	r9, [r2, #499]	; 0x1f3
      _b = b;
    55dc:	mov.w	r9, #106	; 0x6a
    55e0:	strb.w	r9, [r2, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55e4:	mvn.w	r9, #73	; 0x49
      _b = b;
    55e8:	strb.w	r4, [r2, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55ec:	mov.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55f0:	strb.w	r7, [r2, #501]	; 0x1f5
      _s = s;
      _b = b;
    55f4:	mvn.w	r7, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55f8:	strb.w	r4, [r2, #493]	; 0x1ed
      _b = b;
    55fc:	mvn.w	r4, #37	; 0x25
    5600:	strb.w	r7, [r2, #503]	; 0x1f7
    5604:	strb.w	r4, [r2, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5608:	ldrb.w	r4, [sp, #76]	; 0x4c
    560c:	ldrb.w	r7, [sp, #32]
    5610:	strb.w	r4, [r2, #513]	; 0x201
    5614:	ldrb.w	r4, [sp, #72]	; 0x48
    5618:	strb.w	r7, [r2, #504]	; 0x1f8
      _s = s;
      _b = b;
    561c:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5620:	strb.w	r4, [r2, #516]	; 0x204
      _s = s;
    5624:	mvn.w	r4, #81	; 0x51
      _b = b;
    5628:	strb.w	r7, [r2, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    562c:	strb.w	r4, [r2, #517]	; 0x205
      _b = b;
    5630:	mvn.w	r4, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5634:	ldrb.w	r7, [sp, #52]	; 0x34
      _s = s;
      _b = b;
    5638:	strb.w	r4, [r2, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    563c:	mvn.w	r4, #109	; 0x6d
    5640:	strb.w	r7, [r2, #507]	; 0x1fb
      _s = s;
    5644:	mvn.w	r7, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5648:	strb.w	r4, [r2, #519]	; 0x207
      _s = s;
    564c:	mvn.w	r4, #101	; 0x65
    5650:	strb.w	r7, [r2, #508]	; 0x1fc
    5654:	strb.w	r4, [r2, #520]	; 0x208
      _b = b;
    5658:	mvn.w	r4, #20
    565c:	strb.w	r7, [r2, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5660:	mvn.w	r7, #109	; 0x6d
      _s = s;
      _b = b;
    5664:	strb.w	r4, [r2, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5668:	ldrb.w	r4, [sp, #56]	; 0x38
    566c:	strb.w	r7, [r2, #510]	; 0x1fe
      _s = s;
    5670:	mvn.w	r7, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5674:	strb.w	r4, [r2, #522]	; 0x20a
      _s = s;
      _b = b;
    5678:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    567c:	strb.w	r7, [r2, #511]	; 0x1ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5680:	mvn.w	r7, #52	; 0x34
      _s = s;
      _b = b;
    5684:	strb.w	r4, [r2, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5688:	mov.w	r4, #37	; 0x25
    568c:	strb.w	r9, [r2, #502]	; 0x1f6
    5690:	mov.w	r9, #82	; 0x52
    5694:	strb.w	r4, [r2, #526]	; 0x20e
      _b = b;
    5698:	mvn.w	r4, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    569c:	strb.w	lr, [r2, #505]	; 0x1f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56a0:	strb.w	r7, [r2, #495]	; 0x1ef
      _s = s;
    56a4:	movs	r7, #122	; 0x7a
      _b = b;
    56a6:	strb.w	r0, [r2, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56aa:	strb.w	fp, [r2, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56ae:	mov.w	fp, #140	; 0x8c
      _s = s;
      _b = b;
    56b2:	strb.w	r4, [r2, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56b6:	mov.w	r4, #113	; 0x71
      _s = s;
    56ba:	strb.w	r9, [r2, #544]	; 0x220
    56be:	mov.w	r9, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56c2:	strb.w	r4, [r2, #528]	; 0x210
      _s = s;
    56c6:	mov.w	r4, #52	; 0x34
    56ca:	strb.w	r9, [r2, #541]	; 0x21d
      _b = b;
    56ce:	mvn.w	r9, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56d2:	strb.w	r4, [r2, #529]	; 0x211
      _b = b;
    56d6:	mvn.w	r4, #43	; 0x2b
    56da:	strb.w	r9, [r2, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56de:	mvn.w	r9, #120	; 0x78
      _s = s;
      _b = b;
    56e2:	strb.w	r4, [r2, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56e6:	ldrb.w	r4, [sp, #44]	; 0x2c
    56ea:	strb.w	r9, [r2, #543]	; 0x21f
      _s = s;
      _b = b;
    56ee:	mvn.w	r9, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56f2:	strb.w	r4, [r2, #531]	; 0x213
      _s = s;
    56f6:	mov.w	r4, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56fa:	strb.w	ip, [r2, #537]	; 0x219
      _s = s;
    56fe:	strb.w	r4, [r2, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5702:	strb.w	r4, [r2, #534]	; 0x216
      _s = s;
    5706:	mvn.w	r4, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    570a:	strb.w	sl, [r2, #525]	; 0x20d
      _s = s;
    570e:	strb.w	r4, [r2, #535]	; 0x217
      _b = b;
    5712:	mvn.w	r4, #65	; 0x41
    5716:	strb.w	r9, [r2, #533]	; 0x215
    571a:	mvn.w	r9, #96	; 0x60
    571e:	strb.w	r4, [r2, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5722:	mvn.w	r4, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5726:	strb.w	ip, [r1, #549]	; 0x225
      _s = s;
    572a:	strb.w	r4, [r2, #538]	; 0x21a
      _b = b;
    572e:	ldrb.w	r4, [sp, #64]	; 0x40
    5732:	strb.w	r4, [r2, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5736:	mvn.w	r4, #124	; 0x7c
    573a:	strb.w	r4, [r2, #540]	; 0x21c
      _s = s;
      _b = b;
    573e:	mvn.w	r4, #44	; 0x2c
    5742:	strb.w	r4, [r2, #515]	; 0x203
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5746:	mov.w	r4, #79	; 0x4f
    574a:	strb.w	r4, [r2, #523]	; 0x20b
      _b = b;
    574e:	mvn.w	r2, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5752:	movs	r4, #110	; 0x6e
      _b = b;
    5754:	strb.w	r2, [r1, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5758:	mvn.w	r2, #34	; 0x22
    575c:	strb.w	r2, [r1, #553]	; 0x229
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5760:	mvn.w	r2, #125	; 0x7d
    5764:	strb.w	r2, [r1, #546]	; 0x222
      _s = s;
    5768:	mvn.w	r2, #124	; 0x7c
    576c:	strb.w	r2, [r1, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5770:	strb.w	r2, [r1, #552]	; 0x228
      _s = s;
      _b = b;
    5774:	mvn.w	r2, #110	; 0x6e
    5778:	strb.w	r2, [r1, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    577c:	mvn.w	r2, #120	; 0x78
    5780:	strb.w	r2, [r1, #555]	; 0x22b
    5784:	strb.w	r2, [r1, #558]	; 0x22e
      _s = s;
      _b = b;
    5788:	ldrb.w	r2, [sp, #64]	; 0x40
    578c:	strb.w	r2, [r1, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5790:	mov.w	r2, #106	; 0x6a
      _b = b;
    5794:	strb.w	r9, [r1, #548]	; 0x224
    5798:	mvn.w	r9, #67	; 0x43
    579c:	strb.w	r8, [r1, #572]	; 0x23c
    57a0:	strb.w	r9, [r1, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57a4:	mvn.w	r9, #28
    57a8:	ldrb.w	r8, [sp, #40]	; 0x28
    57ac:	strb.w	r9, [r1, #556]	; 0x22c
      _b = b;
    57b0:	mvn.w	r9, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57b4:	strb.w	r8, [r1, #574]	; 0x23e
      _b = b;
    57b8:	mvn.w	r8, #52	; 0x34
    57bc:	strb.w	r9, [r1, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57c0:	mvn.w	r9, #119	; 0x77
      _s = s;
      _b = b;
    57c4:	strb.w	r8, [r1, #560]	; 0x230
    57c8:	mov.w	r8, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57cc:	strb.w	r9, [r1, #561]	; 0x231
      _s = s;
      _b = b;
    57d0:	strb.w	r9, [r1, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57d4:	mvn.w	r9, #5
      _b = b;
    57d8:	strb.w	r8, [r1, #569]	; 0x239
    57dc:	mov.w	r8, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57e0:	strb.w	r9, [r1, #562]	; 0x232
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57e4:	mov.w	r9, #111	; 0x6f
    57e8:	strb.w	r0, [r1, #570]	; 0x23a
    57ec:	strb.w	r9, [r1, #564]	; 0x234
      _s = s;
    57f0:	mvn.w	r9, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57f4:	strb.w	r0, [r1, #573]	; 0x23d
      _s = s;
    57f8:	mvn.w	r0, #3
    57fc:	strb.w	r9, [r1, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5800:	ldrb.w	r9, [sp, #60]	; 0x3c
      _s = s;
      _b = b;
    5804:	strb.w	r8, [r1, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5808:	mov.w	r8, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    580c:	strb.w	r9, [r1, #567]	; 0x237
      _s = s;
    5810:	mov.w	r9, #114	; 0x72
    5814:	strb.w	r2, [r1, #571]	; 0x23b
      _b = b;
    5818:	movs	r2, #161	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    581a:	strb.w	r9, [r1, #568]	; 0x238
    581e:	mov.w	r9, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5822:	strb.w	ip, [r1, #576]	; 0x240
      _s = s;
    5826:	strb.w	r9, [r1, #577]	; 0x241
      _b = b;
    582a:	ldrb.w	r9, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    582e:	strb.w	r8, [r1, #547]	; 0x223
    5832:	mov.w	r8, #20
      _b = b;
    5836:	strb.w	r9, [r1, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    583a:	ldrb.w	r9, [sp, #72]	; 0x48
      _s = s;
    583e:	strb.w	r0, [r1, #559]	; 0x22f
    5842:	movs	r0, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5844:	strb.w	r9, [r1, #582]	; 0x246
      _s = s;
    5848:	mvn.w	r9, #3
    584c:	strb.w	r9, [r1, #583]	; 0x247
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5850:	ldrb.w	r9, [sp, #52]	; 0x34
    5854:	strb.w	r9, [r1, #585]	; 0x249
      _s = s;
    5858:	ldrb.w	r9, [sp, #44]	; 0x2c
    585c:	strb.w	r4, [r1, #598]	; 0x256
    5860:	strb.w	r9, [r1, #586]	; 0x24a
    5864:	mov.w	r9, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5868:	strb.w	r4, [r1, #606]	; 0x25e
      _s = s;
      _b = b;
    586c:	mvn.w	r4, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5870:	strb.w	r9, [r1, #589]	; 0x24d
    5874:	mov.w	r9, #124	; 0x7c
      _b = b;
    5878:	strb.w	r4, [r1, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    587c:	mov.w	r4, #93	; 0x5d
    5880:	strb.w	r9, [r1, #595]	; 0x253
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5884:	ldrb.w	r9, [sp, #52]	; 0x34
      _s = s;
    5888:	strb.w	r4, [r1, #607]	; 0x25f
    588c:	mov.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5890:	strb.w	r9, [r1, #600]	; 0x258
      _s = s;
    5894:	mvn.w	r9, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5898:	strb.w	lr, [r1, #591]	; 0x24f
      _s = s;
    589c:	strb.w	r9, [r1, #601]	; 0x259
      _b = b;
    58a0:	mvn.w	r9, #58	; 0x3a
    58a4:	strb.w	lr, [r1, #608]	; 0x260
    58a8:	strb.w	r9, [r1, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58ac:	mov.w	r9, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58b0:	strb.w	r5, [r1, #609]	; 0x261
      _s = s;
    58b4:	strb.w	r9, [r1, #604]	; 0x25c
      _b = b;
    58b8:	mvn.w	r9, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    58bc:	strb.w	r7, [r1, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58c0:	movs	r7, #1
      _s = s;
      _b = b;
    58c2:	strb.w	r9, [r1, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58c6:	mvn.w	r9, #122	; 0x7a
    58ca:	strb.w	fp, [r1, #588]	; 0x24c
    58ce:	strb.w	r9, [r1, #579]	; 0x243
    58d2:	strb.w	r9, [r1, #603]	; 0x25b
      _s = s;
    58d6:	mvn.w	r9, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58da:	strb.w	fp, [r1, #594]	; 0x252
      _s = s;
    58de:	strb.w	r9, [r1, #580]	; 0x244
      _b = b;
    58e2:	mvn.w	r9, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58e6:	strb.w	fp, [r1, #597]	; 0x255
      _s = s;
      _b = b;
    58ea:	strb.w	r9, [r1, #584]	; 0x248
    58ee:	mvn.w	r9, #35	; 0x23
    58f2:	strb.w	fp, [r1, #611]	; 0x263
    58f6:	strb.w	r9, [r1, #587]	; 0x24b
    58fa:	mvn.w	r9, #23
    58fe:	strb.w	r9, [r1, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5902:	mvn.w	r9, #70	; 0x46
    5906:	strb.w	r9, [r1, #592]	; 0x250
      _b = b;
    590a:	mvn.w	r9, #38	; 0x26
    590e:	strb.w	r9, [r1, #593]	; 0x251
    5912:	mvn.w	r9, #25
    5916:	strb.w	r9, [r1, #596]	; 0x254
    591a:	strb.w	r9, [r1, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    591e:	mov.w	r9, #126	; 0x7e
      _s = s;
    5922:	strb.w	r4, [r1, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5926:	mvn.w	r4, #124	; 0x7c
    592a:	strb.w	r9, [r1, #615]	; 0x267
      _s = s;
    592e:	mov.w	r9, #115	; 0x73
      _b = b;
    5932:	strb.w	r2, [r1, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5936:	strb.w	r9, [r1, #616]	; 0x268
      _b = b;
    593a:	mvn.w	r9, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    593e:	strb.w	r2, [r1, #642]	; 0x282
    5942:	mov.w	r2, #123	; 0x7b
      _s = s;
      _b = b;
    5946:	strb.w	r9, [r1, #620]	; 0x26c
    594a:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    594e:	strb.w	r2, [r1, #618]	; 0x26a
      _s = s;
    5952:	mov.w	r2, #42	; 0x2a
      _b = b;
    5956:	strb.w	r9, [r1, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    595a:	mvn.w	r9, #125	; 0x7d
      _s = s;
    595e:	strb.w	r2, [r1, #619]	; 0x26b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5962:	mvn.w	r2, #126	; 0x7e
    5966:	strb.w	r9, [r1, #627]	; 0x273
      _s = s;
      _b = b;
    596a:	mvn.w	r9, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    596e:	strb.w	r2, [r1, #621]	; 0x26d
      _s = s;
    5972:	mov.w	r2, #45	; 0x2d
      _b = b;
    5976:	strb.w	r9, [r1, #629]	; 0x275
    597a:	mvn.w	r9, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    597e:	strb.w	r2, [r1, #625]	; 0x271
      _b = b;
    5982:	mvn.w	r2, #66	; 0x42
    5986:	strb.w	r9, [r1, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    598a:	mvn.w	r9, #5
      _b = b;
    598e:	strb.w	r2, [r1, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5992:	mvn.w	r2, #55	; 0x37
    5996:	strb.w	r9, [r1, #634]	; 0x27a
    599a:	strb.w	r2, [r1, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    599e:	mvn.w	r2, #123	; 0x7b
    59a2:	ldrb.w	r9, [sp, #56]	; 0x38
    59a6:	strb.w	r2, [r1, #630]	; 0x276
      _s = s;
    59aa:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59ae:	strb.w	r9, [r1, #639]	; 0x27f
      _s = s;
      _b = b;
    59b2:	mvn.w	r9, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59b6:	strb.w	r2, [r1, #631]	; 0x277
      _b = b;
    59ba:	mvn.w	r2, #90	; 0x5a
    59be:	strb.w	r9, [r1, #638]	; 0x27e
    59c2:	ldrb.w	r9, [sp, #72]	; 0x48
    59c6:	strb.w	r2, [r1, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59ca:	mvn.w	r2, #17
      _b = b;
    59ce:	strb.w	r9, [r1, #641]	; 0x281
    59d2:	mvn.w	r9, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59d6:	strb.w	r2, [r1, #637]	; 0x27d
    59da:	mvn.w	r2, #98	; 0x62
      _b = b;
    59de:	strb.w	r9, [r1, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59e2:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59e6:	strb.w	r5, [r1, #612]	; 0x264
    59ea:	strb.w	r5, [r1, #624]	; 0x270
      _s = s;
      _b = b;
    59ee:	movs	r5, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59f0:	strb.w	r4, [r1, #633]	; 0x279
    59f4:	strb.w	r4, [r1, #636]	; 0x27c
      _s = s;
      _b = b;
    59f8:	movs	r4, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59fa:	strb.w	r8, [r1, #622]	; 0x26e
    59fe:	strb.w	r2, [r1, #640]	; 0x280
      _b = b;
    5a02:	mvn.w	r2, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a06:	strb.w	r0, [r1, #643]	; 0x283
    5a0a:	strb.w	r9, [r1, #655]	; 0x28f
    5a0e:	mvn.w	r9, #45	; 0x2d
      _b = b;
    5a12:	strb.w	ip, [r1, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a16:	mov.w	ip, #142	; 0x8e
    5a1a:	strb.w	r9, [r1, #658]	; 0x292
      _b = b;
    5a1e:	mvn.w	r9, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a22:	strb.w	ip, [r1, #661]	; 0x295
      _b = b;
    5a26:	strb.w	r9, [r1, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a2a:	mvn.w	r9, #120	; 0x78
    5a2e:	strb.w	ip, [r1, #672]	; 0x2a0
      _s = s;
    5a32:	mvn.w	ip, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a36:	strb.w	r9, [r1, #663]	; 0x297
      _s = s;
      _b = b;
    5a3a:	mvn.w	r9, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a3e:	strb.w	ip, [r1, #673]	; 0x2a1
    5a42:	mvn.w	ip, #102	; 0x66
      _b = b;
    5a46:	strb.w	r9, [r1, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a4a:	mvn.w	r9, #121	; 0x79
      _s = s;
    5a4e:	strb.w	ip, [r1, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a52:	mvn.w	ip, #15
      _s = s;
      _b = b;
    5a56:	strb.w	r2, [r1, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a5a:	strb.w	r9, [r1, #666]	; 0x29a
      _s = s;
    5a5e:	mvn.w	r9, #8
    5a62:	ldrb.w	r2, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a66:	strb.w	ip, [r1, #645]	; 0x285
      _s = s;
      _b = b;
    5a6a:	mvn.w	ip, #26
    5a6e:	strb.w	r0, [r1, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a72:	strb.w	r2, [r1, #649]	; 0x289
      _b = b;
    5a76:	mov.w	r2, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a7a:	ldr	r0, [sp, #32]
      _s = s;
    5a7c:	strb.w	r9, [r1, #667]	; 0x29b
    5a80:	mvn.w	r9, #81	; 0x51
      _b = b;
    5a84:	strb.w	ip, [r1, #656]	; 0x290
    5a88:	mvn.w	ip, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a8c:	strb.w	sl, [r1, #646]	; 0x286
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a90:	mov.w	sl, #141	; 0x8d
      _s = s;
      _b = b;
    5a94:	strb.w	r2, [r1, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a98:	mvn.w	r2, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a9c:	strb.w	r0, [r1, #660]	; 0x294
    5aa0:	strb.w	r0, [r1, #669]	; 0x29d
    5aa4:	movs	r0, #138	; 0x8a
      _s = s;
    5aa6:	strb.w	r9, [r1, #670]	; 0x29e
      _b = b;
    5aaa:	mvn.w	r9, #47	; 0x2f
    5aae:	strb.w	ip, [r1, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ab2:	mvn.w	ip, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ab6:	strb.w	sl, [r1, #651]	; 0x28b
      _s = s;
    5aba:	strb.w	r2, [r1, #652]	; 0x28c
      _b = b;
    5abe:	movs	r2, #249	; 0xf9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ac0:	strb.w	sl, [r1, #654]	; 0x28e
    5ac4:	strb.w	sl, [r1, #657]	; 0x291
      _s = s;
      _b = b;
    5ac8:	mov.w	sl, #21
    5acc:	strb.w	r9, [r1, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ad0:	mvn.w	r9, #72	; 0x48
    5ad4:	strb.w	fp, [r1, #675]	; 0x2a3
    5ad8:	strb.w	r7, [r1, #648]	; 0x288
      _s = s;
      _b = b;
    5adc:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ae0:	strb.w	ip, [r1, #664]	; 0x298
      _b = b;
    5ae4:	mvn.w	ip, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ae8:	strb.w	r0, [r1, #678]	; 0x2a6
    5aec:	strb.w	r0, [r1, #681]	; 0x2a9
      _s = s;
    5af0:	mov.w	r0, #114	; 0x72
      _b = b;
    5af4:	strb.w	ip, [r1, #668]	; 0x29c
    5af8:	mvn.w	ip, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5afc:	strb.w	r0, [r1, #682]	; 0x2aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b00:	mvn.w	r0, #125	; 0x7d
      _s = s;
      _b = b;
    5b04:	strb.w	ip, [r1, #674]	; 0x2a2
    5b08:	mvn.w	ip, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b0c:	strb.w	r0, [r1, #684]	; 0x2ac
      _s = s;
      _b = b;
    5b10:	mov.w	r0, #97	; 0x61
    5b14:	strb.w	ip, [r1, #677]	; 0x2a5
    5b18:	mvn.w	ip, #23
    5b1c:	strb.w	r0, [r1, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b20:	mvn.w	r0, #50	; 0x32
      _s = s;
      _b = b;
    5b24:	strb.w	ip, [r1, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b28:	mov.w	ip, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b2c:	strb.w	r0, [r1, #687]	; 0x2af
    5b30:	strb.w	r0, [r1, #690]	; 0x2b2
    5b34:	mov.w	r0, #97	; 0x61
      _s = s;
    5b38:	strb.w	ip, [r1, #703]	; 0x2bf
    5b3c:	mov.w	ip, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b40:	strb.w	r0, [r1, #696]	; 0x2b8
      _s = s;
    5b44:	mov.w	r0, #42	; 0x2a
    5b48:	strb.w	ip, [r1, #679]	; 0x2a7
      _b = b;
    5b4c:	mvn.w	ip, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b50:	strb.w	r0, [r1, #697]	; 0x2b9
      _b = b;
    5b54:	mov.w	r0, #125	; 0x7d
    5b58:	strb.w	ip, [r1, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b5c:	mov.w	ip, #85	; 0x55
      _b = b;
    5b60:	strb.w	r0, [r1, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b64:	ldrb.w	r0, [sp, #36]	; 0x24
      _s = s;
    5b68:	strb.w	ip, [r1, #688]	; 0x2b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b6c:	mvn.w	ip, #51	; 0x33
    5b70:	strb.w	r0, [r1, #699]	; 0x2bb
      _s = s;
      _b = b;
    5b74:	mvn.w	r0, #38	; 0x26
    5b78:	strb.w	r4, [r1, #689]	; 0x2b1
    5b7c:	strb.w	r0, [r1, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b80:	mov.w	r0, #95	; 0x5f
      _s = s;
      _b = b;
    5b84:	strb.w	r4, [r1, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b88:	mov.w	r4, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b8c:	strb.w	r0, [r1, #702]	; 0x2be
      _s = s;
      _b = b;
    5b90:	mvn.w	r0, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b94:	strb.w	r4, [r1, #691]	; 0x2b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b98:	movs	r4, #150	; 0x96
      _s = s;
      _b = b;
    5b9a:	strb.w	r0, [r1, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b9e:	mvn.w	r0, #122	; 0x7a
      _s = s;
      _b = b;
    5ba2:	strb.w	r5, [r1, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ba6:	strb.w	r0, [r1, #705]	; 0x2c1
    5baa:	strb.w	r0, [r1, #708]	; 0x2c4
      _s = s;
    5bae:	mvn.w	r0, #40	; 0x28
    5bb2:	strb.w	r0, [r1, #685]	; 0x2ad
    5bb6:	mov.w	r0, #70	; 0x46
    5bba:	strb.w	r0, [r1, #694]	; 0x2b6
    5bbe:	mov.w	r0, #34	; 0x22
    5bc2:	strb.w	r0, [r1, #700]	; 0x2bc
    5bc6:	movs	r0, #246	; 0xf6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bc8:	strb.w	ip, [r1, #693]	; 0x2b5
      _s = s;
    5bcc:	mov.w	ip, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bd0:	strb.w	lr, [r1, #714]	; 0x2ca
      _s = s;
    5bd4:	mov.w	lr, #177	; 0xb1
    5bd8:	strb.w	ip, [r1, #706]	; 0x2c2
      _b = b;
    5bdc:	mvn.w	ip, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5be0:	strb.w	lr, [r1, #715]	; 0x2cb
      _b = b;
    5be4:	strb.w	ip, [r1, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5be8:	mvn.w	ip, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bec:	strb.w	lr, [r1, #720]	; 0x2d0
      _s = s;
    5bf0:	mvn.w	lr, #66	; 0x42
    5bf4:	strb.w	ip, [r1, #709]	; 0x2c5
      _b = b;
    5bf8:	mvn.w	ip, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bfc:	strb.w	r9, [r1, #723]	; 0x2d3
      _s = s;
    5c00:	mvn.w	r9, #106	; 0x6a
      _b = b;
    5c04:	strb.w	ip, [r1, #710]	; 0x2c6
    5c08:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c0c:	strb.w	lr, [r1, #721]	; 0x2d1
    5c10:	mov.w	lr, #115	; 0x73
    5c14:	strb.w	r9, [r1, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c18:	mvn.w	r9, #99	; 0x63
      _s = s;
      _b = b;
    5c1c:	strb.w	ip, [r1, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c20:	mvn.w	ip, #123	; 0x7b
      _s = s;
    5c24:	strb.w	lr, [r1, #724]	; 0x2d4
      _b = b;
    5c28:	mvn.w	lr, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c2c:	strb.w	r9, [r1, #717]	; 0x2cd
      _s = s;
    5c30:	mov.w	r9, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c34:	strb.w	ip, [r1, #711]	; 0x2c7
      _s = s;
      _b = b;
    5c38:	mvn.w	ip, #30
    5c3c:	strb.w	lr, [r1, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c40:	mvn.w	lr, #125	; 0x7d
    5c44:	strb.w	r9, [r1, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c48:	mvn.w	r9, #71	; 0x47
      _s = s;
      _b = b;
    5c4c:	strb.w	ip, [r1, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c50:	mov.w	ip, #46	; 0x2e
      _b = b;
    5c54:	strb.w	r7, [r1, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c58:	movs	r7, #59	; 0x3b
    5c5a:	strb.w	lr, [r1, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c5e:	mov.w	lr, #176	; 0xb0
      _s = s;
      _b = b;
    5c62:	strb.w	r2, [r1, #722]	; 0x2d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c66:	strb.w	r9, [r1, #726]	; 0x2d6
      _s = s;
    5c6a:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c6e:	mvn.w	r9, #114	; 0x72
      _s = s;
    5c72:	strb.w	r2, [r6, #742]	; 0x2e6
    5c76:	strb.w	r1, [r6, #730]	; 0x2da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c7a:	mvn.w	r1, #93	; 0x5d
    5c7e:	strb.w	r9, [r6, #735]	; 0x2df
      _s = s;
    5c82:	mvn.w	r9, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c86:	strb.w	r1, [r6, #732]	; 0x2dc
      _s = s;
    5c8a:	mvn.w	r1, #3
    5c8e:	strb.w	r1, [r6, #733]	; 0x2dd
      _b = b;
    5c92:	mvn.w	r1, #54	; 0x36
    5c96:	strb.w	r1, [r6, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c9a:	mvn.w	r1, #120	; 0x78
    5c9e:	strb.w	r1, [r6, #741]	; 0x2e5
      _s = s;
      _b = b;
    5ca2:	mvn.w	r1, #14
    5ca6:	strb.w	r1, [r6, #728]	; 0x2d8
    5caa:	mvn.w	r1, #31
    5cae:	strb.w	r1, [r6, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cb2:	mvn.w	r1, #103	; 0x67
    5cb6:	strb.w	r1, [r6, #729]	; 0x2d9
      _s = s;
      _b = b;
    5cba:	mvn.w	r1, #20
    5cbe:	strb.w	r1, [r6, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cc2:	movs	r1, #121	; 0x79
    5cc4:	strb.w	r9, [r6, #736]	; 0x2e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cc8:	mvn.w	r9, #124	; 0x7c
      _s = s;
      _b = b;
    5ccc:	strb.w	r8, [r6, #773]	; 0x305
    5cd0:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cd4:	strb.w	r9, [r6, #738]	; 0x2e2
      _s = s;
    5cd8:	mvn.w	r9, #95	; 0x5f
      _b = b;
    5cdc:	strb.w	r8, [r6, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ce0:	mvn.w	r8, #64	; 0x40
      _s = s;
    5ce4:	strb.w	r9, [r6, #739]	; 0x2e3
      _b = b;
    5ce8:	mvn.w	r9, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cec:	strb.w	r8, [r6, #765]	; 0x2fd
    5cf0:	mov.w	r8, #120	; 0x78
      _s = s;
      _b = b;
    5cf4:	strb.w	r9, [r6, #740]	; 0x2e4
    5cf8:	mvn.w	r9, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cfc:	strb.w	r8, [r6, #774]	; 0x306
      _s = s;
    5d00:	mov.w	r8, #71	; 0x47
      _b = b;
    5d04:	strb.w	r9, [r6, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d08:	mov.w	r9, #123	; 0x7b
    5d0c:	strb.w	r8, [r6, #775]	; 0x307
    5d10:	mvn.w	r8, #38	; 0x26
    5d14:	strb.w	r9, [r6, #754]	; 0x2f2
    5d18:	mov.w	r9, #85	; 0x55
    5d1c:	strb.w	r8, [r6, #751]	; 0x2ef
      _b = b;
    5d20:	mvn.w	r8, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d24:	strb.w	r9, [r6, #757]	; 0x2f5
      _b = b;
    5d28:	mvn.w	r9, #17
    5d2c:	strb.w	r8, [r6, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d30:	mov.w	r8, #97	; 0x61
      _b = b;
    5d34:	strb.w	r9, [r6, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d38:	mvn.w	r9, #126	; 0x7e
      _b = b;
    5d3c:	strb.w	r5, [r6, #770]	; 0x302
    5d40:	movs	r5, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d42:	strb.w	r9, [r6, #760]	; 0x2f8
      _b = b;
    5d46:	mvn.w	r9, #20
    5d4a:	strb.w	sl, [r6, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d4e:	mov.w	sl, #142	; 0x8e
      _s = s;
      _b = b;
    5d52:	strb.w	r9, [r6, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d56:	mov.w	r9, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d5a:	strb.w	fp, [r6, #750]	; 0x2ee
      _s = s;
    5d5e:	strb.w	r9, [r6, #769]	; 0x301
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d62:	mvn.w	r9, #50	; 0x32
      _s = s;
    5d66:	strb.w	r8, [r6, #766]	; 0x2fe
      _b = b;
    5d6a:	mov.w	r8, #207	; 0xcf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d6e:	strb.w	r9, [r6, #771]	; 0x303
    5d72:	mvn.w	r9, #118	; 0x76
      _s = s;
    5d76:	strb.w	r0, [r6, #745]	; 0x2e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d7a:	strb.w	r9, [r6, #744]	; 0x2e8
    5d7e:	strb.w	r9, [r6, #747]	; 0x2eb
      _s = s;
    5d82:	mvn.w	r9, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d86:	strb.w	r4, [r6, #756]	; 0x2f4
      _s = s;
    5d8a:	strb.w	r9, [r6, #748]	; 0x2ec
      _b = b;
    5d8e:	mvn.w	r9, #57	; 0x39
    5d92:	strb.w	r9, [r6, #749]	; 0x2ed
    5d96:	mvn.w	r9, #43	; 0x2b
    5d9a:	strb.w	r9, [r6, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d9e:	strb.w	r9, [r6, #768]	; 0x300
    5da2:	mvn.w	r9, #112	; 0x70
    5da6:	strb.w	r9, [r6, #753]	; 0x2f1
    5daa:	strb.w	r9, [r6, #759]	; 0x2f7
      _s = s;
    5dae:	mvn.w	r9, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5db2:	strb.w	r4, [r6, #762]	; 0x2fa
    5db6:	strb.w	lr, [r6, #798]	; 0x31e
    5dba:	mvn.w	lr, #125	; 0x7d
      _s = s;
    5dbe:	strb.w	r9, [r6, #763]	; 0x2fb
      _b = b;
    5dc2:	mvn.w	r9, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dc6:	strb.w	lr, [r6, #777]	; 0x309
      _s = s;
      _b = b;
    5dca:	mvn.w	lr, #25
    5dce:	strb.w	r9, [r6, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5dd2:	mov.w	r9, #76	; 0x4c
      _b = b;
    5dd6:	strb.w	lr, [r6, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5dda:	mov.w	lr, #97	; 0x61
    5dde:	strb.w	r9, [r6, #772]	; 0x304
      _b = b;
    5de2:	mvn.w	r9, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5de6:	strb.w	lr, [r6, #784]	; 0x310
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dea:	mvn.w	lr, #122	; 0x7a
      _s = s;
      _b = b;
    5dee:	strb.w	r9, [r6, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5df2:	mvn.w	r9, #126	; 0x7e
    5df6:	strb.w	lr, [r6, #786]	; 0x312
      _s = s;
      _b = b;
    5dfa:	mvn.w	lr, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dfe:	strb.w	r9, [r6, #783]	; 0x30f
      _s = s;
    5e02:	mvn.w	r9, #118	; 0x76
      _b = b;
    5e06:	strb.w	lr, [r6, #791]	; 0x317
    5e0a:	strb.w	lr, [r6, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e0e:	mov.w	lr, #113	; 0x71
      _s = s;
    5e12:	strb.w	r9, [r6, #778]	; 0x30a
      _b = b;
    5e16:	mvn.w	r9, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e1a:	strb.w	lr, [r6, #780]	; 0x30c
      _s = s;
    5e1e:	mov.w	lr, #69	; 0x45
      _b = b;
    5e22:	strb.w	r9, [r6, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e26:	mov.w	r9, #90	; 0x5a
    5e2a:	strb.w	lr, [r6, #781]	; 0x30d
    5e2e:	strb.w	lr, [r6, #805]	; 0x325
      _b = b;
    5e32:	mvn.w	lr, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e36:	strb.w	r9, [r6, #787]	; 0x313
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e3a:	mvn.w	r9, #91	; 0x5b
      _s = s;
      _b = b;
    5e3e:	strb.w	lr, [r6, #785]	; 0x311
    5e42:	mvn.w	lr, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e46:	strb.w	r9, [r6, #795]	; 0x31b
      _s = s;
    5e4a:	mov.w	r9, #85	; 0x55
      _b = b;
    5e4e:	strb.w	lr, [r6, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e52:	mvn.w	lr, #111	; 0x6f
      _s = s;
    5e56:	strb.w	r9, [r6, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e5a:	mvn.w	r9, #71	; 0x47
    5e5e:	strb.w	lr, [r6, #789]	; 0x315
    5e62:	mvn.w	lr, #107	; 0x6b
    5e66:	strb.w	r9, [r6, #804]	; 0x324
    5e6a:	mvn.w	r9, #68	; 0x44
    5e6e:	strb.w	lr, [r6, #792]	; 0x318
      _s = s;
    5e72:	mov.w	lr, #104	; 0x68
    5e76:	strb.w	ip, [r6, #790]	; 0x316
    5e7a:	mvn.w	ip, #42	; 0x2a
    5e7e:	strb.w	lr, [r6, #793]	; 0x319
      _b = b;
    5e82:	mvn.w	lr, #4
    5e86:	strb.w	r2, [r6, #803]	; 0x323
    5e8a:	strb.w	r0, [r6, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e8e:	strb.w	r9, [r6, #807]	; 0x327
    5e92:	mvn.w	r9, #95	; 0x5f
      _s = s;
    5e96:	strb.w	r7, [r6, #808]	; 0x328
    5e9a:	movs	r7, #99	; 0x63
      _b = b;
    5e9c:	strb.w	lr, [r6, #794]	; 0x31a
    5ea0:	strb.w	lr, [r6, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ea4:	mvn.w	lr, #69	; 0x45
      _s = s;
    5ea8:	strb.w	ip, [r6, #814]	; 0x32e
      _b = b;
    5eac:	mvn.w	ip, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5eb0:	strb.w	lr, [r6, #801]	; 0x321
      _s = s;
    5eb4:	mov.w	lr, #103	; 0x67
      _b = b;
    5eb8:	strb.w	ip, [r6, #815]	; 0x32f
    5ebc:	mvn.w	ip, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ec0:	strb.w	lr, [r6, #802]	; 0x322
      _b = b;
    5ec4:	mvn.w	lr, #10
    5ec8:	strb.w	ip, [r6, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ecc:	mvn.w	ip, #120	; 0x78
      _s = s;
      _b = b;
    5ed0:	strb.w	lr, [r6, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ed4:	mvn.w	lr, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ed8:	strb.w	ip, [r6, #819]	; 0x333
      _s = s;
    5edc:	mvn.w	ip, #104	; 0x68
    5ee0:	strb.w	lr, [r6, #817]	; 0x331
    5ee4:	mvn.w	lr, #51	; 0x33
    5ee8:	strb.w	ip, [r6, #820]	; 0x334
    5eec:	mvn.w	ip, #70	; 0x46
    5ef0:	strb.w	lr, [r6, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ef4:	mvn.w	lr, #117	; 0x75
      _s = s;
    5ef8:	strb.w	ip, [r6, #826]	; 0x33a
      _b = b;
    5efc:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f00:	strb.w	lr, [r6, #828]	; 0x33c
    5f04:	mvn.w	lr, #112	; 0x70
      _s = s;
      _b = b;
    5f08:	strb.w	ip, [r6, #833]	; 0x341
    5f0c:	mvn.w	ip, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f10:	strb.w	lr, [r6, #831]	; 0x33f
      _s = s;
    5f14:	mov.w	lr, #91	; 0x5b
      _b = b;
    5f18:	strb.w	ip, [r6, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f1c:	mvn.w	ip, #3
    5f20:	strb.w	lr, [r6, #832]	; 0x340
      _b = b;
    5f24:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f28:	strb.w	ip, [r6, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f2c:	mvn.w	ip, #109	; 0x6d
      _s = s;
    5f30:	strb.w	r4, [r6, #811]	; 0x32b
      _b = b;
    5f34:	mvn.w	r4, #17
    5f38:	strb.w	lr, [r6, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f3c:	mvn.w	lr, #103	; 0x67
    5f40:	strb.w	ip, [r6, #813]	; 0x32d
    5f44:	mvn.w	ip, #116	; 0x74
      _s = s;
      _b = b;
    5f48:	strb.w	r4, [r6, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f4c:	mvn.w	r4, #123	; 0x7b
    5f50:	strb.w	lr, [r6, #840]	; 0x348
    5f54:	mvn.w	lr, #87	; 0x57
    5f58:	strb.w	ip, [r6, #822]	; 0x336
    5f5c:	strb.w	ip, [r6, #837]	; 0x345
      _s = s;
      _b = b;
    5f60:	mvn.w	ip, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f64:	strb.w	r1, [r6, #799]	; 0x31f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f68:	strb.w	r4, [r6, #816]	; 0x330
    5f6c:	movs	r4, #181	; 0xb5
    5f6e:	strb.w	lr, [r6, #810]	; 0x32a
      _s = s;
    5f72:	mov.w	lr, #68	; 0x44
      _b = b;
    5f76:	strb.w	r5, [r6, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f7a:	movs	r5, #88	; 0x58
    5f7c:	strb.w	r7, [r6, #835]	; 0x343
      _b = b;
    5f80:	strb.w	r8, [r6, #821]	; 0x335
    5f84:	strb.w	ip, [r6, #824]	; 0x338
    5f88:	mvn.w	ip, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f8c:	strb.w	sl, [r6, #825]	; 0x339
      _s = s;
    5f90:	strb.w	sl, [r6, #838]	; 0x346
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f94:	strb.w	r9, [r6, #867]	; 0x363
      _s = s;
      _b = b;
    5f98:	mvn.w	r9, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f9c:	strb.w	r1, [r6, #858]	; 0x35a
    5fa0:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    5fa4:	strb.w	r9, [r6, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fa8:	mvn.w	r9, #107	; 0x6b
    5fac:	strb.w	r1, [r6, #843]	; 0x34b
      _s = s;
    5fb0:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fb4:	strb.w	r9, [r6, #870]	; 0x366
    5fb8:	mvn.w	r9, #90	; 0x5a
      _s = s;
    5fbc:	strb.w	r1, [r6, #844]	; 0x34c
      _b = b;
    5fc0:	mvn.w	r1, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fc4:	strb.w	r9, [r6, #873]	; 0x369
    5fc8:	mvn.w	r9, #100	; 0x64
      _s = s;
      _b = b;
    5fcc:	strb.w	r1, [r6, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fd0:	mvn.w	r1, #107	; 0x6b
    5fd4:	strb.w	r9, [r6, #864]	; 0x360
    5fd8:	mvn.w	r9, #122	; 0x7a
    5fdc:	strb.w	r1, [r6, #846]	; 0x34e
    5fe0:	strb.w	r9, [r6, #849]	; 0x351
    5fe4:	mvn.w	r9, #125	; 0x7d
      _s = s;
    5fe8:	strb.w	r1, [r6, #847]	; 0x34f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fec:	strb.w	r9, [r6, #852]	; 0x354
      _s = s;
      _b = b;
    5ff0:	mvn.w	r9, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ff4:	strb.w	r1, [r6, #850]	; 0x352
      _b = b;
    5ff8:	mov.w	r1, #103	; 0x67
    5ffc:	strb.w	r9, [r6, #854]	; 0x356
    6000:	mvn.w	r9, #23
    6004:	strb.w	r1, [r6, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6008:	mvn.w	r1, #55	; 0x37
      _b = b;
    600c:	strb.w	r9, [r6, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6010:	mvn.w	r9, #119	; 0x77
      _s = s;
    6014:	strb.w	r1, [r6, #856]	; 0x358
      _b = b;
    6018:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    601c:	strb.w	r9, [r6, #861]	; 0x35d
      _s = s;
      _b = b;
    6020:	mvn.w	r9, #5
    6024:	strb.w	ip, [r6, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6028:	mvn.w	ip, #80	; 0x50
      _b = b;
    602c:	strb.w	r1, [r6, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6030:	mvn.w	r1, #50	; 0x32
      _b = b;
    6034:	strb.w	r9, [r6, #866]	; 0x362
    6038:	mvn.w	r9, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    603c:	strb.w	ip, [r6, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6040:	mvn.w	ip, #97	; 0x61
      _s = s;
    6044:	strb.w	r1, [r6, #862]	; 0x35e
      _b = b;
    6048:	mvn.w	r1, #11
    604c:	strb.w	r9, [r6, #872]	; 0x368
    6050:	mov.w	r9, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6054:	strb.w	ip, [r6, #834]	; 0x342
      _s = s;
      _b = b;
    6058:	mvn.w	ip, #18
    605c:	strb.w	r1, [r6, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6060:	mov.w	r1, #45	; 0x2d
      _b = b;
    6064:	strb.w	r9, [r6, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6068:	mvn.w	r9, #127	; 0x7f
      _s = s;
      _b = b;
    606c:	strb.w	ip, [r6, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6070:	mov.w	ip, #75	; 0x4b
    6074:	strb.w	r1, [r6, #865]	; 0x361
      _b = b;
    6078:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    607a:	strb.w	r7, [r6, #853]	; 0x355
    607e:	strb.w	fp, [r6, #874]	; 0x36a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6082:	strb.w	r9, [r6, #855]	; 0x357
      _s = s;
    6086:	mov.w	r9, #119	; 0x77
      _b = b;
    608a:	strb.w	r2, [r6, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    608e:	strb.w	r9, [r6, #859]	; 0x35b
    6092:	mov.w	r9, #79	; 0x4f
      _b = b;
    6096:	strb.w	r0, [r6, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    609a:	strb.w	r9, [r6, #868]	; 0x364
    609e:	mov.w	r9, #124	; 0x7c
    60a2:	strb.w	r2, [r6, #895]	; 0x37f
    60a6:	strb.w	r9, [r6, #871]	; 0x367
      _b = b;
    60aa:	mvn.w	r9, #7
    60ae:	strb.w	r8, [r6, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60b2:	mov.w	r8, #153	; 0x99
      _s = s;
      _b = b;
    60b6:	strb.w	r9, [r6, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60ba:	mvn.w	r9, #62	; 0x3e
    60be:	strb.w	r4, [r6, #876]	; 0x36c
      _s = s;
    60c2:	movs	r4, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60c4:	strb.w	r9, [r6, #879]	; 0x36f
    60c8:	mvn.w	r9, #59	; 0x3b
    60cc:	strb.w	fp, [r6, #897]	; 0x381
    60d0:	strb.w	r9, [r6, #882]	; 0x372
    60d4:	mvn.w	r9, #57	; 0x39
      _s = s;
    60d8:	strb.w	lr, [r6, #877]	; 0x36d
    60dc:	mov.w	lr, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60e0:	strb.w	r9, [r6, #885]	; 0x375
    60e4:	mvn.w	r9, #73	; 0x49
      _s = s;
    60e8:	strb.w	r5, [r6, #880]	; 0x370
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60ec:	movs	r5, #145	; 0x91
    60ee:	strb.w	r9, [r6, #888]	; 0x378
      _s = s;
      _b = b;
    60f2:	mvn.w	r9, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60f6:	strb.w	ip, [r6, #883]	; 0x373
      _b = b;
    60fa:	mov.w	ip, #233	; 0xe9
    60fe:	strb.w	r9, [r6, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6102:	mvn.w	r9, #95	; 0x5f
    6106:	strb.w	r9, [r6, #891]	; 0x37b
      _s = s;
    610a:	mvn.w	r9, #10
    610e:	strb.w	r9, [r6, #892]	; 0x37c
      _b = b;
    6112:	mvn.w	r9, #58	; 0x3a
    6116:	strb.w	r9, [r6, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    611a:	mvn.w	r9, #26
    611e:	strb.w	r9, [r6, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6122:	mvn.w	r9, #118	; 0x76
    6126:	strb.w	r9, [r6, #900]	; 0x384
      _s = s;
    612a:	mvn.w	r9, #51	; 0x33
    612e:	strb.w	r9, [r6, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6132:	mvn.w	r9, #114	; 0x72
    6136:	strb.w	r9, [r6, #903]	; 0x387
      _s = s;
    613a:	mvn.w	r9, #68	; 0x44
    613e:	strb.w	r9, [r6, #904]	; 0x388
      _b = b;
    6142:	mvn.w	r9, #66	; 0x42
    6146:	strb.w	r9, [r6, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    614a:	mvn.w	r9, #116	; 0x74
    614e:	strb.w	r9, [r6, #906]	; 0x38a
      _s = s;
    6152:	mvn.w	r9, #124	; 0x7c
    6156:	strb.w	r9, [r6, #907]	; 0x38b
      _b = b;
    615a:	mvn.w	r9, #3
    615e:	strb.w	r9, [r6, #878]	; 0x36e
    6162:	mvn.w	r9, #5
    6166:	strb.w	r9, [r6, #881]	; 0x371
    616a:	mvn.w	r9, #42	; 0x2a
    616e:	strb.w	r9, [r6, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6172:	mov.w	r9, #177	; 0xb1
      _s = s;
      _b = b;
    6176:	strb.w	r1, [r6, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    617a:	mov.w	r1, #58	; 0x3a
    617e:	strb.w	r4, [r6, #913]	; 0x391
    6182:	mov.w	r4, #98	; 0x62
    6186:	strb.w	r1, [r6, #886]	; 0x376
    618a:	mov.w	r1, #74	; 0x4a
    618e:	strb.w	r4, [r6, #940]	; 0x3ac
    6192:	mvn.w	r4, #37	; 0x25
    6196:	strb.w	r1, [r6, #889]	; 0x379
      _b = b;
    619a:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    619e:	strb.w	r4, [r6, #916]	; 0x394
      _b = b;
    61a2:	mvn.w	r4, #16
    61a6:	strb.w	r1, [r6, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61aa:	mov.w	r1, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61ae:	strb.w	r8, [r6, #894]	; 0x37e
      _s = s;
    61b2:	strb.w	r1, [r6, #910]	; 0x38e
      _b = b;
    61b6:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61ba:	strb.w	fp, [r6, #909]	; 0x38d
      _s = s;
      _b = b;
    61be:	strb.w	r1, [r6, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61c2:	mvn.w	r1, #103	; 0x67
    61c6:	strb.w	sl, [r6, #927]	; 0x39f
    61ca:	strb.w	r1, [r6, #912]	; 0x390
      _s = s;
      _b = b;
    61ce:	mvn.w	r1, #26
    61d2:	strb.w	r0, [r6, #938]	; 0x3aa
    61d6:	strb.w	r1, [r6, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61da:	mvn.w	r1, #107	; 0x6b
      _s = s;
    61de:	strb.w	lr, [r6, #922]	; 0x39a
    61e2:	mov.w	lr, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61e6:	strb.w	r1, [r6, #918]	; 0x396
      _s = s;
    61ea:	mvn.w	r1, #20
      _b = b;
    61ee:	strb.w	ip, [r6, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61f2:	strb.w	r1, [r6, #919]	; 0x397
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61f6:	mvn.w	r1, #112	; 0x70
    61fa:	strb.w	r5, [r6, #915]	; 0x393
    61fe:	strb.w	r1, [r6, #921]	; 0x399
      _s = s;
      _b = b;
    6202:	mvn.w	r1, #32
    6206:	strb.w	r1, [r6, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    620a:	mvn.w	r1, #112	; 0x70
    620e:	strb.w	r1, [r6, #924]	; 0x39c
      _s = s;
    6212:	mvn.w	r1, #66	; 0x42
    6216:	strb.w	r1, [r6, #925]	; 0x39d
    621a:	mvn.w	r1, #3
    621e:	strb.w	r1, [r6, #928]	; 0x3a0
      _b = b;
    6222:	mvn.w	r1, #57	; 0x39
    6226:	strb.w	r1, [r6, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    622a:	mvn.w	r1, #125	; 0x7d
    622e:	strb.w	r1, [r6, #930]	; 0x3a2
      _s = s;
      _b = b;
    6232:	mvn.w	r1, #29
    6236:	strb.w	r1, [r6, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    623a:	mvn.w	r1, #127	; 0x7f
    623e:	strb.w	r1, [r6, #933]	; 0x3a5
    6242:	mvn.w	r1, #123	; 0x7b
    6246:	strb.w	r1, [r6, #936]	; 0x3a8
      _s = s;
    624a:	mvn.w	r1, #127	; 0x7f
    624e:	strb.w	r1, [r6, #937]	; 0x3a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6252:	mvn.w	r1, #98	; 0x62
    6256:	strb.w	r1, [r6, #939]	; 0x3ab
      _s = s;
    625a:	mvn.w	r1, #60	; 0x3c
    625e:	strb.w	r1, [r6, #934]	; 0x3a6
    6262:	movs	r1, #116	; 0x74
      _b = b;
    6264:	strb.w	r4, [r6, #920]	; 0x398
    6268:	mov.w	r4, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    626c:	strb.w	r1, [r6, #931]	; 0x3a3
    6270:	strb.w	r1, [r6, #949]	; 0x3b5
    6274:	mvn.w	r1, #106	; 0x6a
      _b = b;
    6278:	strb.w	r4, [r6, #926]	; 0x39e
    627c:	mvn.w	r4, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6280:	strb.w	r1, [r6, #952]	; 0x3b8
    6284:	mov.w	r1, #113	; 0x71
      _b = b;
    6288:	strb.w	r0, [r6, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    628c:	strb.w	r1, [r6, #955]	; 0x3bb
      _b = b;
    6290:	mvn.w	r1, #10
    6294:	strb.w	r0, [r6, #962]	; 0x3c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6298:	mov.w	r0, #79	; 0x4f
      _b = b;
    629c:	strb.w	r4, [r6, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62a0:	mvn.w	r4, #91	; 0x5b
      _s = s;
      _b = b;
    62a4:	strb.w	r1, [r6, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62a8:	mvn.w	r1, #68	; 0x44
      _s = s;
    62ac:	strb.w	r0, [r6, #964]	; 0x3c4
      _b = b;
    62b0:	mvn.w	r0, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62b4:	strb.w	r4, [r6, #945]	; 0x3b1
      _s = s;
    62b8:	mov.w	r4, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62bc:	strb.w	r1, [r6, #957]	; 0x3bd
      _s = s;
      _b = b;
    62c0:	mvn.w	r1, #11
    62c4:	strb.w	r0, [r6, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    62c8:	mvn.w	r0, #122	; 0x7a
    62cc:	strb.w	r4, [r6, #946]	; 0x3b2
      _b = b;
    62d0:	mvn.w	r4, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    62d4:	strb.w	r7, [r6, #958]	; 0x3be
      _b = b;
    62d8:	mvn.w	r7, #23
    62dc:	strb.w	r1, [r6, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62e0:	mvn.w	r1, #61	; 0x3d
      _s = s;
    62e4:	strb.w	r0, [r6, #967]	; 0x3c7
      _b = b;
    62e8:	mvn.w	r0, #16
    62ec:	strb.w	r4, [r6, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62f0:	mvn.w	r4, #90	; 0x5a
    62f4:	strb.w	r1, [r6, #960]	; 0x3c0
      _s = s;
    62f8:	mov.w	r1, #79	; 0x4f
      _b = b;
    62fc:	strb.w	r0, [r6, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6300:	mvn.w	r0, #97	; 0x61
      _s = s;
      _b = b;
    6304:	strb.w	r7, [r6, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6308:	mvn.w	r7, #99	; 0x63
    630c:	strb.w	r4, [r6, #948]	; 0x3b4
    6310:	movs	r4, #173	; 0xad
      _s = s;
    6312:	strb.w	r1, [r6, #961]	; 0x3c1
      _b = b;
    6316:	movs	r1, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6318:	strb.w	r0, [r6, #969]	; 0x3c9
      _s = s;
    631c:	mvn.w	r0, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6320:	strb.w	r7, [r6, #972]	; 0x3cc
    6324:	mvn.w	r7, #63	; 0x3f
      _s = s;
      _b = b;
    6328:	strb.w	r2, [r6, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    632c:	strb.w	r0, [r6, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6330:	movs	r0, #166	; 0xa6
      _s = s;
    6332:	strb.w	r2, [r6, #973]	; 0x3cd
    6336:	strb.w	lr, [r6, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    633a:	mov.w	lr, #178	; 0xb2
    633e:	strb.w	r9, [r6, #954]	; 0x3ba
      _s = s;
      _b = b;
    6342:	mov.w	r9, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6346:	strb.w	r4, [r6, #942]	; 0x3ae
      _s = s;
      _b = b;
    634a:	strb.w	r1, [r6, #950]	; 0x3b6
    634e:	strb.w	r1, [r6, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6352:	strb.w	r7, [r6, #963]	; 0x3c3
      _s = s;
      _b = b;
    6356:	mvn.w	r7, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    635a:	strb.w	r2, [r6, #976]	; 0x3d0
      _b = b;
    635e:	mvn.w	r2, #63	; 0x3f
    6362:	strb.w	r7, [r6, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6366:	mvn.w	r7, #111	; 0x6f
      _s = s;
      _b = b;
    636a:	strb.w	r2, [r6, #977]	; 0x3d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    636e:	mvn.w	r2, #118	; 0x76
    6372:	strb.w	r7, [r6, #975]	; 0x3cf
      _s = s;
    6376:	mov.w	r7, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    637a:	strb.w	r2, [r6, #978]	; 0x3d2
      _s = s;
      _b = b;
    637e:	mvn.w	r2, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6382:	strb.w	r7, [r6, #1003]	; 0x3eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6386:	mvn.w	r7, #112	; 0x70
      _s = s;
      _b = b;
    638a:	strb.w	r2, [r6, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    638e:	mvn.w	r2, #124	; 0x7c
    6392:	strb.w	r7, [r6, #1005]	; 0x3ed
      _s = s;
    6396:	mov.w	r7, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    639a:	strb.w	r2, [r6, #981]	; 0x3d5
      _s = s;
      _b = b;
    639e:	mvn.w	r2, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63a2:	strb.w	r7, [r6, #985]	; 0x3d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a6:	mvn.w	r7, #104	; 0x68
      _s = s;
      _b = b;
    63aa:	strb.w	r2, [r6, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63ae:	mvn.w	r2, #117	; 0x75
    63b2:	strb.w	r7, [r6, #987]	; 0x3db
      _s = s;
    63b6:	mov.w	r7, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63ba:	strb.w	r2, [r6, #984]	; 0x3d8
      _s = s;
      _b = b;
    63be:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63c2:	strb.w	r7, [r6, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c6:	mvn.w	r7, #104	; 0x68
      _s = s;
      _b = b;
    63ca:	strb.w	r2, [r6, #986]	; 0x3da
    63ce:	mvn.w	r2, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63d2:	strb.w	r7, [r6, #990]	; 0x3de
      _s = s;
    63d6:	mvn.w	r7, #61	; 0x3d
      _b = b;
    63da:	strb.w	r2, [r6, #992]	; 0x3e0
    63de:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63e2:	strb.w	r7, [r6, #991]	; 0x3df
    63e6:	movs	r7, #252	; 0xfc
      _b = b;
    63e8:	strb.w	ip, [r6, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63ec:	mov.w	ip, #124	; 0x7c
    63f0:	str	r7, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63f2:	mvn.w	r7, #104	; 0x68
      _s = s;
      _b = b;
    63f6:	strb.w	r2, [r6, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    63fa:	mov.w	r2, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63fe:	strb.w	r7, [r6, #996]	; 0x3e4
      _s = s;
      _b = b;
    6402:	mvn.w	r7, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6406:	strb.w	r0, [r6, #951]	; 0x3b7
    640a:	strb.w	lr, [r6, #966]	; 0x3c6
    640e:	strb.w	r8, [r6, #993]	; 0x3e1
      _s = s;
    6412:	mov.w	r8, #52	; 0x34
    6416:	strb.w	ip, [r6, #997]	; 0x3e5
    641a:	mov.w	ip, #174	; 0xae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    641e:	strb.w	sl, [r6, #999]	; 0x3e7
      _s = s;
    6422:	strb.w	r2, [r6, #1000]	; 0x3e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6426:	movs	r2, #170	; 0xaa
      _s = s;
      _b = b;
    6428:	strb.w	r4, [r6, #1004]	; 0x3ec
    642c:	strb.w	r9, [r6, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6430:	mov.w	r9, #169	; 0xa9
      _s = s;
    6434:	strb.w	fp, [r6, #979]	; 0x3d3
      _b = b;
    6438:	strb.w	r7, [r6, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    643c:	mvn.w	r7, #5
    6440:	strb.w	lr, [r6, #1024]	; 0x400
      _b = b;
    6444:	mvn.w	lr, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6448:	strb.w	r7, [r6, #1006]	; 0x3ee
    644c:	mov.w	r7, #108	; 0x6c
      _b = b;
    6450:	strb.w	lr, [r6, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6454:	mvn.w	lr, #80	; 0x50
    6458:	strb.w	r7, [r6, #982]	; 0x3d6
    645c:	mvn.w	r7, #39	; 0x27
    6460:	strb.w	lr, [r6, #1027]	; 0x403
      _b = b;
    6464:	mvn.w	lr, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6468:	strb.w	r7, [r6, #994]	; 0x3e2
      _b = b;
    646c:	mvn.w	r7, #66	; 0x42
    6470:	strb.w	lr, [r6, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6474:	mvn.w	lr, #106	; 0x6a
      _s = s;
      _b = b;
    6478:	strb.w	r7, [r6, #1007]	; 0x3ef
    647c:	mvn.w	r7, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6480:	strb.w	lr, [r6, #1029]	; 0x405
      _s = s;
    6484:	mvn.w	lr, #109	; 0x6d
      _b = b;
    6488:	strb.w	r7, [r6, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    648c:	mvn.w	r7, #127	; 0x7f
    6490:	strb.w	lr, [r6, #1030]	; 0x406
      _b = b;
    6494:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6498:	strb.w	r7, [r6, #1009]	; 0x3f1
      _b = b;
    649c:	mvn.w	r7, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64a0:	strb.w	r5, [r6, #1026]	; 0x402
    64a4:	mvn.w	r5, #73	; 0x49
      _s = s;
      _b = b;
    64a8:	strb.w	r7, [r6, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64ac:	mvn.w	r7, #93	; 0x5d
      _b = b;
    64b0:	strb.w	lr, [r6, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64b4:	mvn.w	lr, #92	; 0x5c
    64b8:	strb.w	r7, [r6, #1012]	; 0x3f4
      _b = b;
    64bc:	mvn.w	r7, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64c0:	strb.w	lr, [r6, #1033]	; 0x409
      _b = b;
    64c4:	mvn.w	lr, #26
    64c8:	strb.w	r7, [r6, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64cc:	mvn.w	r7, #97	; 0x61
    64d0:	strb.w	r5, [r6, #1035]	; 0x40b
      _s = s;
    64d4:	mvn.w	r5, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64d8:	strb.w	r7, [r6, #1017]	; 0x3f9
      _s = s;
      _b = b;
    64dc:	mvn.w	r7, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64e0:	strb.w	fp, [r6, #1002]	; 0x3ea
      _s = s;
      _b = b;
    64e4:	strb.w	r7, [r6, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64e8:	mvn.w	r7, #114	; 0x72
      _s = s;
      _b = b;
    64ec:	strb.w	lr, [r6, #1034]	; 0x40a
    64f0:	mov.w	lr, #221	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64f4:	strb.w	r7, [r6, #1020]	; 0x3fc
      _s = s;
      _b = b;
    64f8:	mvn.w	r7, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    64fc:	strb.w	r5, [r6, #1036]	; 0x40c
      _b = b;
    6500:	movs	r5, #225	; 0xe1
    6502:	strb.w	r7, [r6, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6506:	mvn.w	r7, #116	; 0x74
    650a:	strb.w	r7, [r6, #1023]	; 0x3ff
      _s = s;
      _b = b;
    650e:	mvn.w	r7, #20
    6512:	strb.w	r7, [r6, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6516:	mvn.w	r7, #55	; 0x37
    651a:	strb.w	r7, [r6, #1038]	; 0x40e
    651e:	mvn.w	r7, #120	; 0x78
    6522:	strb.w	r7, [r6, #1008]	; 0x3f0
    6526:	mvn.w	r7, #125	; 0x7d
    652a:	strb.w	r7, [r6, #1011]	; 0x3f3
    652e:	mvn.w	r7, #122	; 0x7a
    6532:	strb.w	r7, [r6, #1014]	; 0x3f6
    6536:	movs	r7, #200	; 0xc8
    6538:	str	r7, [sp, #56]	; 0x38
      _s = s;
      _b = b;
    653a:	strb.w	r0, [r6, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    653e:	mvn.w	r0, #111	; 0x6f
    6542:	ldrb.w	r7, [sp, #60]	; 0x3c
    6546:	strb.w	r0, [r6, #1054]	; 0x41e
      _b = b;
    654a:	mvn.w	r0, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    654e:	strb.w	r7, [r6, #1018]	; 0x3fa
      _b = b;
    6552:	movs	r7, #229	; 0xe5
    6554:	strb.w	r0, [r6, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6558:	mvn.w	r0, #90	; 0x5a
      _b = b;
    655c:	str	r7, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    655e:	mov.w	r7, #114	; 0x72
    6562:	strb.w	r0, [r6, #1057]	; 0x421
      _b = b;
    6566:	mvn.w	r0, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    656a:	strb.w	r7, [r6, #1039]	; 0x40f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    656e:	movs	r7, #234	; 0xea
      _s = s;
    6570:	strb.w	r8, [r6, #1015]	; 0x3f7
    6574:	mov.w	r8, #236	; 0xec
      _b = b;
    6578:	strb.w	r0, [r6, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    657c:	mvn.w	r0, #103	; 0x67
    6580:	str	r7, [sp, #36]	; 0x24
    6582:	mvn.w	r7, #125	; 0x7d
      _s = s;
    6586:	str.w	r8, [sp, #52]	; 0x34
      _b = b;
    658a:	mov.w	r8, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    658e:	strb.w	r0, [r6, #1059]	; 0x423
      _s = s;
    6592:	mvn.w	r0, #127	; 0x7f
      _b = b;
    6596:	str.w	r8, [sp, #40]	; 0x28
    659a:	mvn.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    659e:	strb.w	r7, [r6, #1047]	; 0x417
      _s = s;
    65a2:	mov.w	r7, #97	; 0x61
    65a6:	strb.w	r0, [r6, #1060]	; 0x424
      _b = b;
    65aa:	mvn.w	r0, #59	; 0x3b
    65ae:	strb.w	r8, [r6, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65b2:	mvn.w	r8, #54	; 0x36
      _s = s;
    65b6:	strb.w	r7, [r6, #1048]	; 0x418
      _b = b;
    65ba:	mvn.w	r7, #116	; 0x74
    65be:	strb.w	r0, [r6, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65c2:	mvn.w	r0, #109	; 0x6d
      _s = s;
    65c6:	strb.w	ip, [r6, #1021]	; 0x3fd
    65ca:	mvn.w	ip, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ce:	strb.w	r8, [r6, #1041]	; 0x411
      _s = s;
    65d2:	mov.w	r8, #104	; 0x68
      _b = b;
    65d6:	strb.w	r7, [r6, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65da:	mvn.w	r7, #97	; 0x61
    65de:	strb.w	r0, [r6, #1062]	; 0x426
      _s = s;
    65e2:	mvn.w	r0, #127	; 0x7f
    65e6:	strb.w	r8, [r6, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65ea:	mvn.w	r8, #75	; 0x4b
      _s = s;
    65ee:	strb.w	ip, [r6, #1045]	; 0x415
      _b = b;
    65f2:	mvn.w	ip, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65f6:	strb.w	r7, [r6, #1050]	; 0x41a
      _s = s;
    65fa:	mvn.w	r7, #70	; 0x46
    65fe:	strb.w	r0, [r6, #1063]	; 0x427
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6602:	mvn.w	r0, #97	; 0x61
    6606:	strb.w	r2, [r6, #1032]	; 0x408
    660a:	strb.w	r8, [r6, #1044]	; 0x414
      _s = s;
    660e:	mov.w	r8, #95	; 0x5f
      _b = b;
    6612:	strb.w	ip, [r6, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6616:	mov.w	ip, #154	; 0x9a
    661a:	strb.w	r7, [r6, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    661e:	strb.w	r7, [r6, #1053]	; 0x41d
      _s = s;
    6622:	movs	r7, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6624:	strb.w	r0, [r6, #1065]	; 0x429
      _s = s;
    6628:	mvn.w	r0, #4
    662c:	strb.w	fp, [r6, #1072]	; 0x430
      _b = b;
    6630:	mvn.w	fp, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6634:	strb.w	r0, [r6, #1066]	; 0x42a
      _b = b;
    6638:	mvn.w	r0, #41	; 0x29
    663c:	strb.w	fp, [r6, #1043]	; 0x413
    6640:	mvn.w	fp, #46	; 0x2e
    6644:	strb.w	r0, [r6, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6648:	mvn.w	r0, #97	; 0x61
      _s = s;
      _b = b;
    664c:	strb.w	fp, [r6, #1064]	; 0x428
    6650:	mvn.w	fp, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6654:	strb.w	r0, [r6, #1068]	; 0x42c
      _s = s;
    6658:	mvn.w	r0, #4
      _b = b;
    665c:	strb.w	fp, [r6, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6660:	mov.w	fp, #69	; 0x45
    6664:	strb.w	r0, [r6, #1069]	; 0x42d
      _b = b;
    6668:	mvn.w	r0, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    666c:	strb.w	fp, [r6, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6670:	mvn.w	fp, #75	; 0x4b
      _s = s;
      _b = b;
    6674:	strb.w	r0, [r6, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6678:	mvn.w	r0, #92	; 0x5c
    667c:	strb.w	fp, [r6, #1074]	; 0x432
      _s = s;
      _b = b;
    6680:	mvn.w	fp, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6684:	strb.w	r0, [r6, #1071]	; 0x42f
    6688:	movs	r0, #190	; 0xbe
      _s = s;
      _b = b;
    668a:	strb.w	fp, [r6, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    668e:	mvn.w	fp, #91	; 0x5b
    6692:	strb.w	r9, [r6, #1056]	; 0x420
    6696:	strb.w	fp, [r6, #1077]	; 0x435
      _s = s;
    669a:	mov.w	fp, #74	; 0x4a
      _b = b;
    669e:	strb.w	r1, [r6, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66a2:	strb.w	fp, [r6, #1081]	; 0x439
      _b = b;
    66a6:	mvn.w	fp, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66aa:	strb.w	sl, [r6, #1080]	; 0x438
      _s = s;
      _b = b;
    66ae:	strb.w	fp, [r6, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66b2:	mvn.w	fp, #117	; 0x75
    66b6:	strb.w	fp, [r6, #1083]	; 0x43b
      _s = s;
      _b = b;
    66ba:	mvn.w	fp, #75	; 0x4b
    66be:	strb.w	fp, [r6, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c2:	mvn.w	fp, #112	; 0x70
    66c6:	strb.w	fp, [r6, #1086]	; 0x43e
      _s = s;
    66ca:	mvn.w	fp, #55	; 0x37
    66ce:	strb.w	fp, [r6, #1087]	; 0x43f
      _b = b;
    66d2:	mvn.w	fp, #71	; 0x47
    66d6:	strb.w	fp, [r6, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66da:	mvn.w	fp, #124	; 0x7c
    66de:	strb.w	fp, [r6, #1089]	; 0x441
      _s = s;
    66e2:	mov.w	fp, #108	; 0x6c
    66e6:	strb.w	fp, [r6, #1090]	; 0x442
      _b = b;
    66ea:	mvn.w	fp, #51	; 0x33
    66ee:	strb.w	fp, [r6, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66f2:	mvn.w	fp, #120	; 0x78
    66f6:	strb.w	fp, [r6, #1092]	; 0x444
      _s = s;
    66fa:	mov.w	fp, #90	; 0x5a
    66fe:	strb.w	fp, [r6, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6702:	mvn.w	fp, #111	; 0x6f
    6706:	strb.w	fp, [r6, #1095]	; 0x447
      _s = s;
    670a:	mvn.w	fp, #37	; 0x25
    670e:	strb.w	fp, [r6, #1096]	; 0x448
      _b = b;
    6712:	mvn.w	fp, #58	; 0x3a
    6716:	strb.w	fp, [r6, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    671a:	mvn.w	fp, #117	; 0x75
    671e:	strb.w	fp, [r6, #1098]	; 0x44a
      _s = s;
    6722:	mvn.w	fp, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6726:	strb.w	r4, [r6, #1116]	; 0x45c
      _s = s;
    672a:	mov.w	r4, #103	; 0x67
    672e:	strb.w	fp, [r6, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6732:	mvn.w	fp, #117	; 0x75
      _s = s;
    6736:	strb.w	r4, [r6, #1117]	; 0x45d
      _b = b;
    673a:	mvn.w	r4, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    673e:	strb.w	fp, [r6, #1101]	; 0x44d
      _s = s;
    6742:	mvn.w	fp, #25
      _b = b;
    6746:	strb.w	r4, [r6, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    674a:	mvn.w	r4, #70	; 0x46
      _s = s;
    674e:	strb.w	fp, [r6, #1102]	; 0x44e
      _b = b;
    6752:	mvn.w	fp, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6756:	strb.w	r4, [r6, #1119]	; 0x45f
      _s = s;
    675a:	mov.w	r4, #76	; 0x4c
      _b = b;
    675e:	strb.w	fp, [r6, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6762:	mvn.w	fp, #116	; 0x74
      _s = s;
    6766:	strb.w	r4, [r6, #1120]	; 0x460
    676a:	mov.w	r4, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    676e:	strb.w	fp, [r6, #1104]	; 0x450
      _s = s;
    6772:	mvn.w	fp, #84	; 0x54
    6776:	strb.w	r4, [r6, #1123]	; 0x463
      _b = b;
    677a:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    677e:	strb.w	fp, [r6, #1105]	; 0x451
    6782:	mov.w	fp, #109	; 0x6d
      _b = b;
    6786:	strb.w	r4, [r6, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    678a:	mvn.w	r4, #104	; 0x68
      _s = s;
    678e:	strb.w	fp, [r6, #1078]	; 0x436
    6792:	mov.w	fp, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6796:	strb.w	r4, [r6, #1125]	; 0x465
      _s = s;
      _b = b;
    679a:	mov.w	r4, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    679e:	strb.w	fp, [r6, #1084]	; 0x43c
      _b = b;
    67a2:	mvn.w	fp, #17
    67a6:	strb.w	r4, [r6, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67aa:	mvn.w	r4, #96	; 0x60
      _s = s;
      _b = b;
    67ae:	strb.w	fp, [r6, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67b2:	mvn.w	fp, #106	; 0x6a
    67b6:	strb.w	r4, [r6, #1128]	; 0x468
      _s = s;
      _b = b;
    67ba:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67be:	strb.w	fp, [r6, #1110]	; 0x456
      _s = s;
    67c2:	mvn.w	fp, #84	; 0x54
      _b = b;
    67c6:	strb.w	r4, [r6, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67ca:	mvn.w	r4, #53	; 0x35
      _s = s;
    67ce:	strb.w	fp, [r6, #1108]	; 0x454
    67d2:	mvn.w	fp, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67d6:	strb.w	r4, [r6, #1131]	; 0x46b
      _s = s;
    67da:	mov.w	r4, #47	; 0x2f
    67de:	strb.w	fp, [r6, #1111]	; 0x457
      _b = b;
    67e2:	mvn.w	fp, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67e6:	strb.w	r4, [r6, #1132]	; 0x46c
      _b = b;
    67ea:	mvn.w	r4, #51	; 0x33
    67ee:	strb.w	lr, [r6, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67f2:	mov.w	lr, #102	; 0x66
      _s = s;
      _b = b;
    67f6:	strb.w	r5, [r6, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67fa:	strb.w	sl, [r6, #1107]	; 0x453
      _s = s;
      _b = b;
    67fe:	strb.w	r1, [r6, #1109]	; 0x455
    6802:	strb.w	r5, [r6, #1112]	; 0x458
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6806:	movs	r5, #17
    6808:	strb.w	r2, [r6, #1113]	; 0x459
    680c:	movs	r2, #80	; 0x50
      _s = s;
      _b = b;
    680e:	strb.w	fp, [r6, #1115]	; 0x45b
    6812:	strb.w	r4, [r6, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6816:	mvn.w	r4, #56	; 0x38
      _s = s;
    681a:	strb.w	r8, [r6, #1129]	; 0x469
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    681e:	mov.w	r8, #117	; 0x75
      _s = s;
      _b = b;
    6822:	strb.w	r1, [r6, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6826:	mvn.w	r1, #119	; 0x77
    682a:	strb.w	r8, [r6, #1122]	; 0x462
      _s = s;
      _b = b;
    682e:	mvn.w	r8, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6832:	strb.w	r4, [r6, #1134]	; 0x46e
      _s = s;
    6836:	mvn.w	r4, #125	; 0x7d
      _b = b;
    683a:	strb.w	r8, [r6, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    683e:	mvn.w	r8, #92	; 0x5c
    6842:	strb.w	r1, [r6, #1161]	; 0x489
      _s = s;
    6846:	mov.w	r1, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    684a:	strb.w	r8, [r6, #1140]	; 0x474
      _s = s;
    684e:	mvn.w	r8, #69	; 0x45
    6852:	strb.w	r4, [r6, #1135]	; 0x46f
      _b = b;
    6856:	mvn.w	r4, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    685a:	strb.w	r8, [r6, #1141]	; 0x475
      _b = b;
    685e:	mvn.w	r8, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6862:	strb.w	r1, [r6, #1162]	; 0x48a
      _b = b;
    6866:	mvn.w	r1, #19
    686a:	strb.w	r8, [r6, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    686e:	mvn.w	r8, #90	; 0x5a
      _s = s;
      _b = b;
    6872:	strb.w	r4, [r6, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6876:	mvn.w	r4, #73	; 0x49
    687a:	strb.w	r8, [r6, #1143]	; 0x477
      _s = s;
    687e:	mvn.w	r8, #32
    6882:	strb.w	r9, [r6, #1138]	; 0x472
    6886:	mov.w	r9, #107	; 0x6b
    688a:	strb.w	r8, [r6, #1144]	; 0x478
      _b = b;
    688e:	mvn.w	r8, #25
    6892:	strb.w	r1, [r6, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6896:	mvn.w	r1, #114	; 0x72
      _s = s;
      _b = b;
    689a:	strb.w	r8, [r6, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    689e:	mvn.w	r8, #97	; 0x61
    68a2:	strb.w	r4, [r6, #1137]	; 0x471
      _s = s;
      _b = b;
    68a6:	movs	r4, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68a8:	strb.w	r8, [r6, #1146]	; 0x47a
      _s = s;
    68ac:	mvn.w	r8, #70	; 0x46
    68b0:	strb.w	r9, [r6, #1126]	; 0x466
      _b = b;
    68b4:	mov.w	r9, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68b8:	strb.w	r8, [r6, #1147]	; 0x47b
      _b = b;
    68bc:	mvn.w	r8, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68c0:	strb.w	ip, [r6, #1114]	; 0x45a
      _b = b;
    68c4:	strb.w	r8, [r6, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68c8:	mov.w	r8, #119	; 0x77
      _b = b;
    68cc:	strb.w	ip, [r6, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68d0:	strb.w	r8, [r6, #1150]	; 0x47e
      _b = b;
    68d4:	mvn.w	r8, #16
    68d8:	strb.w	fp, [r6, #1154]	; 0x482
    68dc:	strb.w	r8, [r6, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68e0:	mvn.w	r8, #66	; 0x42
    68e4:	strb.w	r8, [r6, #1152]	; 0x480
      _s = s;
    68e8:	mvn.w	r8, #92	; 0x5c
    68ec:	strb.w	r8, [r6, #1153]	; 0x481
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68f0:	mvn.w	r8, #71	; 0x47
    68f4:	strb.w	r8, [r6, #1155]	; 0x483
      _s = s;
    68f8:	mvn.w	r8, #80	; 0x50
    68fc:	strb.w	r8, [r6, #1156]	; 0x484
      _b = b;
    6900:	mvn.w	r8, #10
    6904:	strb.w	r8, [r6, #1157]	; 0x485
    6908:	mov.w	r8, #233	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    690c:	strb.w	r1, [r6, #1164]	; 0x48c
      _s = s;
    6910:	mov.w	r1, #90	; 0x5a
    6914:	strb.w	r7, [r6, #1171]	; 0x493
      _b = b;
    6918:	movs	r7, #166	; 0xa6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    691a:	strb.w	r1, [r6, #1165]	; 0x48d
      _b = b;
    691e:	mvn.w	r1, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6922:	strb.w	r0, [r6, #1149]	; 0x47d
      _s = s;
      _b = b;
    6926:	strb.w	r1, [r6, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    692a:	mvn.w	r1, #116	; 0x74
    692e:	strb.w	sl, [r6, #1176]	; 0x498
    6932:	strb.w	r1, [r6, #1167]	; 0x48f
      _s = s;
    6936:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    693a:	strb.w	sl, [r6, #1182]	; 0x49e
      _s = s;
    693e:	strb.w	r1, [r6, #1168]	; 0x490
      _b = b;
    6942:	mvn.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6946:	strb.w	r0, [r6, #1186]	; 0x4a2
      _b = b;
    694a:	movs	r0, #226	; 0xe2
    694c:	strb.w	r1, [r6, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6950:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    6954:	strb.w	fp, [r6, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6958:	mvn.w	fp, #122	; 0x7a
    695c:	strb.w	r1, [r6, #1170]	; 0x492
    6960:	mvn.w	r1, #88	; 0x58
    6964:	strb.w	r1, [r6, #1158]	; 0x486
      _s = s;
    6968:	mov.w	r1, #92	; 0x5c
    696c:	strb.w	r1, [r6, #1159]	; 0x487
      _b = b;
    6970:	mvn.w	r1, #7
    6974:	strb.w	r1, [r6, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6978:	mvn.w	r1, #123	; 0x7b
    697c:	strb.w	r1, [r6, #1173]	; 0x495
      _s = s;
    6980:	mvn.w	r1, #109	; 0x6d
    6984:	strb.w	r1, [r6, #1174]	; 0x496
      _b = b;
    6988:	mvn.w	r1, #15
    698c:	strb.w	r1, [r6, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6990:	mvn.w	r1, #116	; 0x74
    6994:	strb.w	r1, [r6, #1177]	; 0x499
      _b = b;
    6998:	mvn.w	r1, #15
    699c:	strb.w	r1, [r6, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69a0:	mvn.w	r1, #107	; 0x6b
    69a4:	strb.w	r1, [r6, #1179]	; 0x49b
      _s = s;
    69a8:	mvn.w	r1, #117	; 0x75
    69ac:	strb.w	r1, [r6, #1180]	; 0x49c
      _b = b;
    69b0:	mvn.w	r1, #20
    69b4:	strb.w	r1, [r6, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69b8:	mvn.w	r1, #59	; 0x3b
    69bc:	strb.w	r1, [r6, #1183]	; 0x49f
      _b = b;
    69c0:	mvn.w	r1, #42	; 0x2a
    69c4:	strb.w	r1, [r6, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69c8:	mvn.w	r1, #118	; 0x76
    69cc:	strb.w	r1, [r6, #1185]	; 0x4a1
      _s = s;
      _b = b;
    69d0:	mvn.w	r1, #19
    69d4:	strb.w	r1, [r6, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69d8:	mvn.w	r1, #109	; 0x6d
    69dc:	strb.w	r1, [r6, #1188]	; 0x4a4
      _s = s;
    69e0:	mvn.w	r1, #103	; 0x67
    69e4:	strb.w	r1, [r6, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69e8:	mvn.w	r1, #93	; 0x5d
    69ec:	strb.w	r1, [r6, #1191]	; 0x4a7
      _s = s;
    69f0:	mvn.w	r1, #51	; 0x33
    69f4:	strb.w	r1, [r6, #1192]	; 0x4a8
      _b = b;
    69f8:	mvn.w	r1, #46	; 0x2e
    69fc:	strb.w	r1, [r6, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a00:	mov.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a04:	strb.w	ip, [r6, #1194]	; 0x4aa
      _s = s;
      _b = b;
    6a08:	mov.w	ip, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a0c:	strb.w	r1, [r6, #1195]	; 0x4ab
      _b = b;
    6a10:	mvn.w	r1, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a14:	strb.w	r2, [r6, #1200]	; 0x4b0
      _s = s;
    6a18:	movs	r2, #99	; 0x63
      _b = b;
    6a1a:	strb.w	r1, [r6, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a1e:	mov.w	r1, #103	; 0x67
    6a22:	strb.w	r2, [r6, #1213]	; 0x4bd
    6a26:	strb.w	r1, [r6, #1198]	; 0x4ae
      _b = b;
    6a2a:	mov.w	r1, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a2e:	strb.w	r2, [r6, #1225]	; 0x4c9
      _b = b;
    6a32:	mvn.w	r2, #15
    6a36:	strb.w	r1, [r6, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a3a:	mov.w	r1, #111	; 0x6f
      _b = b;
    6a3e:	strb.w	r2, [r6, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a42:	mvn.w	r2, #55	; 0x37
      _s = s;
    6a46:	strb.w	r1, [r6, #1201]	; 0x4b1
      _b = b;
    6a4a:	mov.w	r1, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a4e:	strb.w	r2, [r6, #1227]	; 0x4cb
      _s = s;
    6a52:	mov.w	r2, #32
      _b = b;
    6a56:	strb.w	r1, [r6, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a5a:	mov.w	r1, #58	; 0x3a
    6a5e:	strb.w	r2, [r6, #1216]	; 0x4c0
    6a62:	mov.w	r2, #67	; 0x43
    6a66:	strb.w	r1, [r6, #1204]	; 0x4b4
      _b = b;
    6a6a:	mov.w	r1, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a6e:	strb.w	r2, [r6, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a72:	mov.w	r2, #18
      _s = s;
      _b = b;
    6a76:	strb.w	r1, [r6, #1205]	; 0x4b5
    6a7a:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a7e:	strb.w	r2, [r6, #1206]	; 0x4b6
      _s = s;
    6a82:	mov.w	r2, #94	; 0x5e
      _b = b;
    6a86:	strb.w	r1, [r6, #1220]	; 0x4c4
    6a8a:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a8e:	strb.w	r2, [r6, #1210]	; 0x4ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a92:	mvn.w	r2, #83	; 0x53
      _s = s;
      _b = b;
    6a96:	strb.w	r1, [r6, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a9a:	mov.w	r1, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a9e:	strb.w	sl, [r6, #1203]	; 0x4b3
      _s = s;
    6aa2:	mov.w	sl, #222	; 0xde
    6aa6:	strb.w	r1, [r6, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6aaa:	mvn.w	r1, #51	; 0x33
    6aae:	strb.w	lr, [r6, #1197]	; 0x4ad
      _s = s;
      _b = b;
    6ab2:	mov.w	lr, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ab6:	strb.w	r1, [r6, #1212]	; 0x4bc
      _s = s;
      _b = b;
    6aba:	mvn.w	r1, #37	; 0x25
    6abe:	strb.w	r4, [r6, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ac2:	movs	r4, #213	; 0xd5
      _s = s;
      _b = b;
    6ac4:	strb.w	r1, [r6, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ac8:	mvn.w	r1, #43	; 0x2b
    6acc:	strb.w	r5, [r6, #1209]	; 0x4b9
    6ad0:	movs	r5, #55	; 0x37
    6ad2:	strb.w	r1, [r6, #1215]	; 0x4bf
      _s = s;
      _b = b;
    6ad6:	mvn.w	r1, #25
    6ada:	strb.w	r1, [r6, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ade:	mvn.w	r1, #70	; 0x46
    6ae2:	strb.w	r1, [r6, #1218]	; 0x4c2
    6ae6:	mvn.w	r1, #96	; 0x60
    6aea:	strb.w	r1, [r6, #1221]	; 0x4c5
      _s = s;
    6aee:	mvn.w	r1, #18
    6af2:	strb.w	r1, [r6, #1222]	; 0x4c6
      _b = b;
    6af6:	mvn.w	r1, #24
    6afa:	strb.w	r1, [r6, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6afe:	movs	r1, #203	; 0xcb
    6b00:	strb.w	r2, [r6, #1224]	; 0x4c8
      _s = s;
    6b04:	mov.w	r2, #60	; 0x3c
      _b = b;
    6b08:	strb.w	ip, [r3, #1232]	; 0x4d0
    6b0c:	strb.w	ip, [r3, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b10:	mvn.w	ip, #75	; 0x4b
    6b14:	strb.w	r2, [r6, #1228]	; 0x4cc
      _b = b;
    6b18:	mvn.w	r2, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b1c:	strb.w	ip, [r3, #1267]	; 0x4f3
      _b = b;
    6b20:	mvn.w	ip, #18
    6b24:	strb.w	r2, [r6, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b28:	mvn.w	r2, #49	; 0x31
      _s = s;
      _b = b;
    6b2c:	strb.w	ip, [r3, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b30:	mov.w	ip, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b34:	strb.w	r2, [r6, #1230]	; 0x4ce
      _s = s;
    6b38:	mov.w	r2, #58	; 0x3a
    6b3c:	strb.w	ip, [r3, #1270]	; 0x4f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b40:	mvn.w	ip, #112	; 0x70
      _s = s;
    6b44:	strb.w	r2, [r6, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b48:	mvn.w	r2, #62	; 0x3e
    6b4c:	strb.w	ip, [r3, #1239]	; 0x4d7
      _s = s;
    6b50:	mov.w	ip, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b54:	strb.w	r2, [r6, #1233]	; 0x4d1
      _s = s;
    6b58:	mvn.w	r2, #18
    6b5c:	strb.w	ip, [r3, #1240]	; 0x4d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b60:	mvn.w	ip, #120	; 0x78
      _s = s;
    6b64:	strb.w	r2, [r6, #1234]	; 0x4d2
      _b = b;
    6b68:	mvn.w	r2, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b6c:	strb.w	ip, [r3, #1242]	; 0x4da
      _s = s;
    6b70:	mov.w	ip, #40	; 0x28
      _b = b;
    6b74:	strb.w	r2, [r3, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b78:	mvn.w	r2, #75	; 0x4b
      _s = s;
    6b7c:	strb.w	ip, [r3, #1243]	; 0x4db
      _b = b;
    6b80:	mvn.w	ip, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b84:	strb.w	r2, [r3, #1236]	; 0x4d4
      _s = s;
    6b88:	mov.w	r2, #78	; 0x4e
      _b = b;
    6b8c:	strb.w	ip, [r3, #1244]	; 0x4dc
    6b90:	movs	r6, #47	; 0x2f
    6b92:	strb.w	ip, [r3, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b96:	mvn.w	ip, #118	; 0x76
      _s = s;
    6b9a:	strb.w	r2, [r3, #1237]	; 0x4d5
      _b = b;
    6b9e:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ba2:	strb.w	ip, [r3, #1245]	; 0x4dd
    6ba6:	strb.w	ip, [r3, #1263]	; 0x4ef
      _s = s;
    6baa:	mvn.w	ip, #6
      _b = b;
    6bae:	strb.w	r2, [r3, #1238]	; 0x4d6
    6bb2:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bb6:	strb.w	ip, [r3, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bba:	mvn.w	ip, #126	; 0x7e
    6bbe:	strb.w	fp, [r3, #1251]	; 0x4e3
      _s = s;
    6bc2:	mov.w	fp, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bc6:	strb.w	ip, [r3, #1248]	; 0x4e0
      _s = s;
    6bca:	mvn.w	ip, #84	; 0x54
      _b = b;
    6bce:	strb.w	r2, [r3, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6bd2:	movs	r2, #39	; 0x27
    6bd4:	strb.w	ip, [r3, #1249]	; 0x4e1
      _b = b;
    6bd8:	ldrb.w	ip, [sp, #52]	; 0x34
    6bdc:	strb.w	r9, [r3, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6be0:	strb.w	r9, [r3, #1258]	; 0x4ea
      _b = b;
    6be4:	strb.w	ip, [r3, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6be8:	mov.w	ip, #177	; 0xb1
      _s = s;
    6bec:	strb.w	fp, [r3, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bf0:	mvn.w	fp, #111	; 0x6f
      _s = s;
    6bf4:	strb.w	sl, [r3, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bf8:	mov.w	sl, #85	; 0x55
    6bfc:	strb.w	fp, [r3, #1254]	; 0x4e6
    6c00:	strb.w	fp, [r3, #1269]	; 0x4f5
      _s = s;
    6c04:	mov.w	fp, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c08:	strb.w	sl, [r3, #1278]	; 0x4fe
      _s = s;
      _b = b;
    6c0c:	mov.w	sl, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c10:	strb.w	fp, [r3, #1255]	; 0x4e7
      _b = b;
    6c14:	mvn.w	fp, #28
    6c18:	strb.w	sl, [r3, #1286]	; 0x506
    6c1c:	mov.w	sl, #53	; 0x35
    6c20:	strb.w	fp, [r3, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c24:	mvn.w	fp, #108	; 0x6c
    6c28:	strb.w	r1, [r3, #1296]	; 0x510
      _s = s;
      _b = b;
    6c2c:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c30:	strb.w	fp, [r3, #1257]	; 0x4e9
    6c34:	mvn.w	fp, #103	; 0x67
      _s = s;
      _b = b;
    6c38:	strb.w	sl, [r3, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c3c:	mov.w	sl, #108	; 0x6c
    6c40:	strb.w	fp, [r3, #1260]	; 0x4ec
      _s = s;
    6c44:	mvn.w	fp, #115	; 0x73
      _b = b;
    6c48:	strb.w	r1, [r3, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c4c:	mov.w	r1, #44	; 0x2c
      _s = s;
    6c50:	strb.w	fp, [r3, #1261]	; 0x4ed
    6c54:	mvn.w	fp, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c58:	strb.w	sl, [r3, #1281]	; 0x501
      _s = s;
    6c5c:	mvn.w	sl, #82	; 0x52
    6c60:	strb.w	fp, [r3, #1264]	; 0x4f0
      _b = b;
    6c64:	mvn.w	fp, #16
    6c68:	strb.w	r8, [r3, #1253]	; 0x4e5
    6c6c:	strb.w	fp, [r3, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c70:	mvn.w	fp, #109	; 0x6d
      _s = s;
      _b = b;
    6c74:	strb.w	r8, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c78:	strb.w	fp, [r3, #1266]	; 0x4f2
      _s = s;
      _b = b;
    6c7c:	mvn.w	fp, #64	; 0x40
    6c80:	strb.w	r7, [r3, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c84:	movs	r7, #119	; 0x77
      _b = b;
    6c86:	strb.w	fp, [r3, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c8a:	mov.w	fp, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c8e:	strb.w	r4, [r3, #1290]	; 0x50a
    6c92:	movs	r4, #12
      _s = s;
    6c94:	strb.w	fp, [r3, #1273]	; 0x4f9
    6c98:	mvn.w	fp, #126	; 0x7e
      _b = b;
    6c9c:	strb.w	r0, [r3, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ca0:	movs	r0, #207	; 0xcf
    6ca2:	strb.w	fp, [r3, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ca6:	mov.w	fp, #18
    6caa:	strb.w	r5, [r3, #1272]	; 0x4f8
    6cae:	strb.w	fp, [r3, #1284]	; 0x504
    6cb2:	mvn.w	fp, #95	; 0x5f
    6cb6:	strb.w	r1, [r3, #1275]	; 0x4fb
      _s = s;
      _b = b;
    6cba:	movs	r1, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cbc:	strb.w	fp, [r3, #1299]	; 0x513
      _s = s;
    6cc0:	mvn.w	fp, #75	; 0x4b
      _b = b;
    6cc4:	strb.w	lr, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cc8:	strb.w	fp, [r3, #1300]	; 0x514
    6ccc:	mvn.w	fp, #94	; 0x5e
    6cd0:	strb.w	lr, [r3, #1303]	; 0x517
      _b = b;
    6cd4:	mvn.w	lr, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cd8:	strb.w	sl, [r3, #1282]	; 0x502
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cdc:	mov.w	sl, #142	; 0x8e
      _s = s;
    6ce0:	strb.w	fp, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ce4:	ldrb.w	fp, [sp, #68]	; 0x44
      _s = s;
      _b = b;
    6ce8:	strb.w	r6, [r3, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cec:	strb.w	fp, [r3, #1287]	; 0x507
      _s = s;
    6cf0:	mov.w	fp, #95	; 0x5f
    6cf4:	strb.w	r2, [r3, #1291]	; 0x50b
    6cf8:	strb.w	fp, [r3, #1288]	; 0x508
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cfc:	mvn.w	fp, #39	; 0x27
      _s = s;
    6d00:	strb.w	r2, [r3, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d04:	strb.w	fp, [r3, #1293]	; 0x50d
      _s = s;
    6d08:	mov.w	fp, #33	; 0x21
      _b = b;
    6d0c:	strb.w	lr, [r3, #1313]	; 0x521
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d10:	strb.w	fp, [r3, #1294]	; 0x50e
      _b = b;
    6d14:	ldrb.w	fp, [sp, #36]	; 0x24
    6d18:	strb.w	lr, [r3, #1316]	; 0x524
    6d1c:	strb.w	fp, [r3, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d20:	mov.w	fp, #41	; 0x29
    6d24:	strb.w	r5, [r3, #1318]	; 0x526
    6d28:	movs	r5, #80	; 0x50
    6d2a:	strb.w	fp, [r3, #1297]	; 0x511
      _b = b;
    6d2e:	ldrb.w	fp, [sp, #44]	; 0x2c
    6d32:	strb.w	lr, [r3, #1331]	; 0x533
    6d36:	strb.w	fp, [r3, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d3a:	mvn.w	fp, #59	; 0x3b
      _s = s;
      _b = b;
    6d3e:	strb.w	lr, [r3, #1334]	; 0x536
    6d42:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d46:	strb.w	fp, [r3, #1302]	; 0x516
      _s = s;
      _b = b;
    6d4a:	mvn.w	fp, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d4e:	strb.w	ip, [r3, #1314]	; 0x522
      _s = s;
    6d52:	mov.w	ip, #19
      _b = b;
    6d56:	strb.w	fp, [r3, #1304]	; 0x518
    6d5a:	strb.w	fp, [r3, #1307]	; 0x51b
    6d5e:	mvn.w	fp, #17
    6d62:	strb.w	fp, [r3, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d66:	mvn.w	fp, #59	; 0x3b
    6d6a:	strb.w	fp, [r3, #1311]	; 0x51f
    6d6e:	mvn.w	fp, #109	; 0x6d
    6d72:	strb.w	fp, [r3, #1317]	; 0x525
      _s = s;
      _b = b;
    6d76:	mvn.w	fp, #17
    6d7a:	strb.w	fp, [r3, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d7e:	mvn.w	fp, #126	; 0x7e
    6d82:	strb.w	fp, [r3, #1320]	; 0x528
      _s = s;
      _b = b;
    6d86:	mvn.w	fp, #94	; 0x5e
    6d8a:	strb.w	fp, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d8e:	mvn.w	fp, #126	; 0x7e
    6d92:	strb.w	fp, [r3, #1326]	; 0x52e
      _s = s;
    6d96:	mvn.w	fp, #95	; 0x5f
    6d9a:	strb.w	fp, [r3, #1327]	; 0x52f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d9e:	mvn.w	fp, #108	; 0x6c
    6da2:	strb.w	fp, [r3, #1335]	; 0x537
    6da6:	mvn.w	fp, #65	; 0x41
    6daa:	strb.w	fp, [r3, #1305]	; 0x519
      _s = s;
    6dae:	mov.w	fp, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6db2:	strb.w	r6, [r3, #1350]	; 0x546
      _s = s;
    6db6:	mvn.w	r6, #84	; 0x54
    6dba:	strb.w	fp, [r3, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dbe:	mvn.w	fp, #41	; 0x29
      _s = s;
    6dc2:	strb.w	r6, [r3, #1354]	; 0x54a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dc6:	mov.w	r6, #18
    6dca:	strb.w	fp, [r3, #1308]	; 0x51c
      _s = s;
    6dce:	strb.w	fp, [r3, #1312]	; 0x520
    6dd2:	mov.w	fp, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dd6:	strb.w	r6, [r3, #1362]	; 0x552
      _s = s;
    6dda:	mvn.w	r6, #49	; 0x31
    6dde:	strb.w	fp, [r3, #1315]	; 0x523
    6de2:	mov.w	fp, #24
    6de6:	strb.w	r6, [r3, #1363]	; 0x553
    6dea:	mov.w	r6, #40	; 0x28
    6dee:	strb.w	fp, [r3, #1321]	; 0x529
      _b = b;
    6df2:	ldrb.w	fp, [sp, #48]	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6df6:	strb.w	r2, [r3, #1369]	; 0x559
      _b = b;
    6dfa:	mov.w	r2, #98	; 0x62
    6dfe:	strb.w	fp, [r3, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e02:	mvn.w	fp, #121	; 0x79
      _s = s;
      _b = b;
    6e06:	strb.w	r8, [r3, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e0a:	strb.w	fp, [r3, #1323]	; 0x52b
      _s = s;
    6e0e:	mvn.w	fp, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e12:	strb.w	r9, [r3, #1341]	; 0x53d
      _s = s;
    6e16:	strb.w	fp, [r3, #1324]	; 0x52c
      _b = b;
    6e1a:	ldrb.w	fp, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e1e:	strb.w	r8, [r3, #1359]	; 0x54f
      _s = s;
      _b = b;
    6e22:	strb.w	fp, [r3, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e26:	mvn.w	fp, #124	; 0x7c
      _s = s;
    6e2a:	strb.w	r6, [r3, #1366]	; 0x556
    6e2e:	movs	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e30:	strb.w	fp, [r3, #1329]	; 0x531
      _s = s;
    6e34:	mov.w	fp, #105	; 0x69
    6e38:	strb.w	r7, [r3, #1342]	; 0x53e
    6e3c:	movs	r7, #96	; 0x60
    6e3e:	strb.w	fp, [r3, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e42:	mvn.w	fp, #119	; 0x77
      _s = s;
      _b = b;
    6e46:	strb.w	r2, [r3, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e4a:	movs	r2, #114	; 0x72
    6e4c:	strb.w	fp, [r3, #1332]	; 0x534
      _s = s;
    6e50:	mov.w	fp, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e54:	strb.w	r4, [r3, #1356]	; 0x54c
      _s = s;
      _b = b;
    6e58:	movs	r4, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e5a:	strb.w	fp, [r3, #1333]	; 0x535
    6e5e:	mov.w	fp, #103	; 0x67
    6e62:	strb.w	fp, [r3, #1336]	; 0x538
      _b = b;
    6e66:	mvn.w	fp, #18
    6e6a:	strb.w	fp, [r3, #1340]	; 0x53c
    6e6e:	mvn.w	fp, #11
    6e72:	strb.w	fp, [r3, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e76:	mvn.w	fp, #103	; 0x67
    6e7a:	strb.w	fp, [r3, #1345]	; 0x541
      _b = b;
    6e7e:	mvn.w	fp, #18
    6e82:	strb.w	fp, [r3, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e86:	mov.w	fp, #79	; 0x4f
    6e8a:	strb.w	r0, [r3, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e8e:	movs	r0, #165	; 0xa5
      _s = s;
    6e90:	strb.w	fp, [r3, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e94:	mvn.w	fp, #100	; 0x64
      _s = s;
      _b = b;
    6e98:	strb.w	r1, [r3, #1358]	; 0x54e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e9c:	mvn.w	r1, #104	; 0x68
    6ea0:	strb.w	fp, [r3, #1344]	; 0x540
      _s = s;
    6ea4:	mov.w	fp, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ea8:	strb.w	r1, [r3, #1338]	; 0x53a
      _s = s;
      _b = b;
    6eac:	movs	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6eae:	strb.w	fp, [r3, #1348]	; 0x544
      _b = b;
    6eb2:	mvn.w	fp, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6eb6:	strb.w	sl, [r3, #1347]	; 0x543
      _s = s;
      _b = b;
    6eba:	strb.w	fp, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ebe:	mov.w	fp, #124	; 0x7c
      _b = b;
    6ec2:	strb.w	r8, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ec6:	strb.w	fp, [r3, #1351]	; 0x547
      _b = b;
    6eca:	mov.w	fp, #117	; 0x75
    6ece:	strb.w	r4, [r3, #1382]	; 0x566
    6ed2:	strb.w	fp, [r3, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ed6:	mov.w	fp, #52	; 0x34
    6eda:	strb.w	fp, [r3, #1353]	; 0x549
      _s = s;
    6ede:	mov.w	fp, #36	; 0x24
    6ee2:	strb.w	fp, [r3, #1360]	; 0x550
      _b = b;
    6ee6:	mov.w	fp, #14
    6eea:	strb.w	fp, [r3, #1361]	; 0x551
    6eee:	mov.w	fp, #116	; 0x74
    6ef2:	strb.w	fp, [r3, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ef6:	mvn.w	fp, #34	; 0x22
    6efa:	strb.w	fp, [r3, #1365]	; 0x555
      _s = s;
      _b = b;
    6efe:	mvn.w	fp, #43	; 0x2b
    6f02:	strb.w	fp, [r3, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f06:	strb.w	fp, [r3, #1368]	; 0x558
      _s = s;
      _b = b;
    6f0a:	ldrb.w	fp, [sp, #48]	; 0x30
    6f0e:	strb.w	fp, [r3, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f12:	mvn.w	fp, #39	; 0x27
    6f16:	strb.w	fp, [r3, #1371]	; 0x55b
      _s = s;
    6f1a:	mov.w	fp, #33	; 0x21
    6f1e:	strb.w	fp, [r3, #1372]	; 0x55c
      _b = b;
    6f22:	ldrb.w	fp, [sp, #28]
    6f26:	strb.w	fp, [r3, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f2a:	mov.w	fp, #122	; 0x7a
    6f2e:	strb.w	fp, [r3, #1381]	; 0x565
      _b = b;
    6f32:	ldrb.w	fp, [sp, #36]	; 0x24
    6f36:	strb.w	fp, [r3, #1385]	; 0x569
    6f3a:	ldrb.w	fp, [sp, #52]	; 0x34
    6f3e:	strb.w	fp, [r3, #1388]	; 0x56c
    6f42:	mvn.w	fp, #12
    6f46:	strb.w	fp, [r3, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f4a:	mvn.w	fp, #82	; 0x52
    6f4e:	strb.w	fp, [r3, #1392]	; 0x570
      _s = s;
    6f52:	mov.w	fp, #124	; 0x7c
    6f56:	strb.w	fp, [r3, #1393]	; 0x571
      _b = b;
    6f5a:	mvn.w	fp, #12
    6f5e:	strb.w	fp, [r3, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f62:	mvn.w	fp, #108	; 0x6c
      _s = s;
      _b = b;
    6f66:	strb.w	r8, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f6a:	strb.w	fp, [r3, #1395]	; 0x573
    6f6e:	mvn.w	fp, #120	; 0x78
      _s = s;
    6f72:	strb.w	r5, [r3, #1384]	; 0x568
      _b = b;
    6f76:	movs	r5, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f78:	strb.w	fp, [r3, #1401]	; 0x579
    6f7c:	mvn.w	fp, #72	; 0x48
      _s = s;
    6f80:	strb.w	ip, [r3, #1399]	; 0x577
    6f84:	mov.w	ip, #188	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f88:	strb.w	fp, [r3, #1380]	; 0x564
      _s = s;
    6f8c:	mov.w	fp, #56	; 0x38
      _b = b;
    6f90:	strb.w	lr, [r3, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f94:	mov.w	lr, #26
      _s = s;
    6f98:	strb.w	fp, [r3, #1396]	; 0x574
    6f9c:	mvn.w	fp, #4
    6fa0:	strb.w	fp, [r3, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fa4:	mvn.w	fp, #60	; 0x3c
    6fa8:	strb.w	fp, [r3, #1374]	; 0x55e
      _s = s;
    6fac:	mov.w	fp, #59	; 0x3b
    6fb0:	strb.w	fp, [r3, #1375]	; 0x55f
      _b = b;
    6fb4:	mvn.w	fp, #25
    6fb8:	strb.w	fp, [r3, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fbc:	mvn.w	fp, #105	; 0x69
    6fc0:	strb.w	fp, [r3, #1377]	; 0x561
      _s = s;
    6fc4:	mvn.w	fp, #101	; 0x65
    6fc8:	strb.w	fp, [r3, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fcc:	mvn.w	fp, #54	; 0x36
    6fd0:	strb.w	fp, [r3, #1383]	; 0x567
    6fd4:	mvn.w	fp, #51	; 0x33
    6fd8:	strb.w	fp, [r3, #1386]	; 0x56a
      _s = s;
    6fdc:	mov.w	fp, #75	; 0x4b
    6fe0:	strb.w	fp, [r3, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fe4:	mvn.w	fp, #57	; 0x39
    6fe8:	strb.w	fp, [r3, #1389]	; 0x56d
      _s = s;
    6fec:	ldrb.w	fp, [sp, #56]	; 0x38
    6ff0:	strb.w	fp, [r3, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ff4:	mvn.w	fp, #125	; 0x7d
    6ff8:	strb.w	fp, [r3, #1398]	; 0x576
      _s = s;
      _b = b;
    6ffc:	mvn.w	fp, #88	; 0x58
    7000:	strb.w	fp, [r3, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7004:	mvn.w	fp, #99	; 0x63
    7008:	strb.w	fp, [r3, #1410]	; 0x582
      _s = s;
    700c:	mov.w	fp, #105	; 0x69
    7010:	strb.w	fp, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7014:	mvn.w	fp, #124	; 0x7c
    7018:	strb.w	fp, [r3, #1407]	; 0x57f
      _s = s;
    701c:	mvn.w	fp, #100	; 0x64
    7020:	strb.w	fp, [r3, #1408]	; 0x580
      _b = b;
    7024:	ldrb.w	fp, [sp, #36]	; 0x24
    7028:	strb.w	fp, [r3, #1409]	; 0x581
    702c:	ldrb.w	fp, [sp, #44]	; 0x2c
    7030:	strb.w	fp, [r3, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7034:	mov.w	fp, #99	; 0x63
    7038:	strb.w	fp, [r3, #1414]	; 0x586
      _b = b;
    703c:	ldrb.w	fp, [sp, #36]	; 0x24
    7040:	strb.w	fp, [r3, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7044:	mvn.w	fp, #112	; 0x70
      _b = b;
    7048:	strb.w	r1, [r3, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    704c:	mvn.w	r1, #127	; 0x7f
      _s = s;
    7050:	strb.w	fp, [r3, #1420]	; 0x58c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7054:	strb.w	r1, [r3, #1404]	; 0x57c
      _s = s;
      _b = b;
    7058:	mvn.w	r1, #7
    705c:	ldrb.w	fp, [sp, #36]	; 0x24
    7060:	strb.w	r1, [r3, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7064:	mvn.w	r1, #61	; 0x3d
      _b = b;
    7068:	strb.w	fp, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    706c:	mvn.w	fp, #62	; 0x3e
    7070:	strb.w	r1, [r3, #1411]	; 0x583
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7074:	mvn.w	r1, #96	; 0x60
      _s = s;
    7078:	strb.w	fp, [r3, #1423]	; 0x58f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    707c:	mvn.w	fp, #111	; 0x6f
    7080:	strb.w	r1, [r3, #1413]	; 0x585
    7084:	strb.w	r1, [r3, #1416]	; 0x588
      _s = s;
    7088:	strb.w	r1, [r3, #1426]	; 0x592
      _b = b;
    708c:	mvn.w	r1, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7090:	strb.w	fp, [r3, #1425]	; 0x591
    7094:	mov.w	fp, #36	; 0x24
      _s = s;
      _b = b;
    7098:	strb.w	r1, [r3, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    709c:	mvn.w	r1, #98	; 0x62
    70a0:	strb.w	fp, [r3, #1431]	; 0x597
      _s = s;
    70a4:	mvn.w	fp, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70a8:	strb.w	r1, [r3, #1422]	; 0x58e
      _s = s;
      _b = b;
    70ac:	mvn.w	r1, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70b0:	strb.w	fp, [r3, #1432]	; 0x598
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70b4:	mov.w	fp, #105	; 0x69
      _s = s;
      _b = b;
    70b8:	strb.w	r1, [r3, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70bc:	mvn.w	r1, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70c0:	strb.w	fp, [r3, #1434]	; 0x59a
      _s = s;
      _b = b;
    70c4:	mvn.w	fp, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70c8:	strb.w	r1, [r3, #1435]	; 0x59b
      _b = b;
    70cc:	mov.w	r1, #88	; 0x58
    70d0:	strb.w	r8, [r3, #1424]	; 0x590
    70d4:	strb.w	r1, [r3, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70d8:	mov.w	r1, #108	; 0x6c
      _s = s;
    70dc:	strb.w	r7, [r3, #1417]	; 0x589
      _b = b;
    70e0:	movs	r7, #241	; 0xf1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70e2:	strb.w	r1, [r3, #1437]	; 0x59d
      _s = s;
    70e6:	mov.w	r1, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70ea:	strb.w	r2, [r3, #1428]	; 0x594
      _s = s;
    70ee:	movs	r2, #174	; 0xae
    70f0:	strb.w	r1, [r3, #1441]	; 0x5a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70f4:	mvn.w	r1, #6
      _s = s;
    70f8:	strb.w	r6, [r3, #1429]	; 0x595
    70fc:	movs	r6, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70fe:	strb.w	r1, [r3, #1443]	; 0x5a3
      _s = s;
    7102:	mov.w	r1, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7106:	strb.w	r0, [r3, #1419]	; 0x58b
      _s = s;
    710a:	strb.w	r1, [r3, #1444]	; 0x5a4
      _b = b;
    710e:	mvn.w	r1, #49	; 0x31
    7112:	strb.w	r5, [r3, #1430]	; 0x596
    7116:	strb.w	r1, [r3, #1445]	; 0x5a5
    711a:	ldrb.w	r1, [sp, #28]
    711e:	strb.w	r1, [r3, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7122:	mov.w	r1, #48	; 0x30
      _b = b;
    7126:	strb.w	fp, [r3, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    712a:	mvn.w	fp, #103	; 0x67
      _s = s;
    712e:	strb.w	r1, [r3, #1450]	; 0x5aa
      _b = b;
    7132:	mvn.w	r1, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7136:	strb.w	fp, [r3, #1455]	; 0x5af
    713a:	mvn.w	fp, #65	; 0x41
      _s = s;
      _b = b;
    713e:	strb.w	r1, [r3, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7142:	mov.w	r1, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7146:	strb.w	fp, [r3, #1458]	; 0x5b2
      _s = s;
      _b = b;
    714a:	mvn.w	fp, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    714e:	strb.w	lr, [r3, #1440]	; 0x5a0
      _s = s;
      _b = b;
    7152:	mvn.w	lr, #11
    7156:	strb.w	fp, [r3, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    715a:	mvn.w	fp, #57	; 0x39
      _s = s;
    715e:	strb.w	r1, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7162:	movs	r1, #132	; 0x84
    7164:	strb.w	fp, [r3, #1461]	; 0x5b5
      _s = s;
    7168:	mvn.w	fp, #82	; 0x52
      _b = b;
    716c:	strb.w	r8, [r3, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7170:	strb.w	fp, [r3, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7174:	mvn.w	fp, #54	; 0x36
      _s = s;
    7178:	strb.w	ip, [r3, #1438]	; 0x59e
      _b = b;
    717c:	mov.w	ip, #236	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7180:	strb.w	fp, [r3, #1464]	; 0x5b8
      _s = s;
    7184:	mov.w	fp, #117	; 0x75
    7188:	strb.w	r2, [r3, #1459]	; 0x5b3
    718c:	strb.w	fp, [r3, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7190:	mvn.w	fp, #59	; 0x3b
      _s = s;
      _b = b;
    7194:	strb.w	r7, [r3, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7198:	strb.w	fp, [r3, #1467]	; 0x5bb
      _s = s;
    719c:	mvn.w	fp, #64	; 0x40
      _b = b;
    71a0:	strb.w	lr, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71a4:	strb.w	fp, [r3, #1468]	; 0x5bc
      _b = b;
    71a8:	mov.w	fp, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71ac:	strb.w	r2, [r3, #1470]	; 0x5be
      _s = s;
      _b = b;
    71b0:	strb.w	fp, [r3, #1439]	; 0x59f
    71b4:	mov.w	fp, #92	; 0x5c
    71b8:	strb.w	lr, [r3, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71bc:	mvn.w	lr, #96	; 0x60
      _s = s;
      _b = b;
    71c0:	strb.w	fp, [r3, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71c4:	mvn.w	fp, #38	; 0x26
    71c8:	strb.w	r9, [r3, #1473]	; 0x5c1
    71cc:	strb.w	fp, [r3, #1446]	; 0x5a6
      _s = s;
    71d0:	mov.w	fp, #37	; 0x25
    71d4:	strb.w	fp, [r3, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71d8:	mvn.w	fp, #45	; 0x2d
    71dc:	strb.w	fp, [r3, #1449]	; 0x5a9
    71e0:	mvn.w	fp, #69	; 0x45
    71e4:	strb.w	fp, [r3, #1452]	; 0x5ac
      _s = s;
    71e8:	mvn.w	fp, #56	; 0x38
    71ec:	strb.w	fp, [r3, #1456]	; 0x5b0
      _b = b;
    71f0:	mvn.w	fp, #15
    71f4:	strb.w	fp, [r3, #1463]	; 0x5b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71f8:	mvn.w	fp, #75	; 0x4b
    71fc:	strb.w	fp, [r3, #1497]	; 0x5d9
      _s = s;
    7200:	mvn.w	fp, #121	; 0x79
    7204:	strb.w	fp, [r3, #1471]	; 0x5bf
    7208:	mov.w	fp, #46	; 0x2e
    720c:	strb.w	fp, [r3, #1474]	; 0x5c2
      _b = b;
    7210:	mvn.w	fp, #80	; 0x50
    7214:	strb.w	ip, [r3, #1475]	; 0x5c3
    7218:	strb.w	fp, [r3, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    721c:	mvn.w	fp, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7220:	strb.w	sl, [r3, #1476]	; 0x5c4
      _s = s;
    7224:	strb.w	fp, [r3, #1483]	; 0x5cb
      _b = b;
    7228:	mvn.w	fp, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    722c:	strb.w	r0, [r3, #1489]	; 0x5d1
      _b = b;
    7230:	strb.w	fp, [r3, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7234:	mvn.w	fp, #125	; 0x7d
      _s = s;
      _b = b;
    7238:	strb.w	ip, [r3, #1490]	; 0x5d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    723c:	strb.w	fp, [r3, #1485]	; 0x5cd
    7240:	mvn.w	fp, #101	; 0x65
    7244:	strb.w	lr, [r3, #1491]	; 0x5d3
      _s = s;
    7248:	mov.w	lr, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    724c:	strb.w	fp, [r3, #1488]	; 0x5d0
      _s = s;
      _b = b;
    7250:	mvn.w	fp, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7254:	strb.w	r9, [r3, #1492]	; 0x5d4
      _b = b;
    7258:	strb.w	fp, [r3, #1499]	; 0x5db
    725c:	mvn.w	fp, #50	; 0x32
    7260:	strb.w	ip, [r3, #1496]	; 0x5d8
    7264:	mov.w	ip, #82	; 0x52
    7268:	strb.w	fp, [r3, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    726c:	mvn.w	fp, #114	; 0x72
    7270:	strb.w	r2, [r3, #1500]	; 0x5dc
    7274:	strb.w	fp, [r3, #1479]	; 0x5c7
      _s = s;
    7278:	ldrb.w	fp, [sp, #32]
    727c:	strb.w	r6, [r3, #1477]	; 0x5c5
    7280:	strb.w	fp, [r3, #1480]	; 0x5c8
    7284:	mvn.w	fp, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7288:	strb.w	r1, [r3, #1482]	; 0x5ca
      _s = s;
    728c:	strb.w	fp, [r3, #1486]	; 0x5ce
      _b = b;
    7290:	mvn.w	fp, #8
    7294:	strb.w	r4, [r3, #1502]	; 0x5de
    7298:	strb.w	fp, [r3, #1487]	; 0x5cf
    729c:	mvn.w	fp, #13
    72a0:	strb.w	fp, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72a4:	mvn.w	fp, #77	; 0x4d
    72a8:	strb.w	fp, [r3, #1494]	; 0x5d6
      _s = s;
    72ac:	mvn.w	fp, #66	; 0x42
    72b0:	strb.w	fp, [r3, #1495]	; 0x5d7
    72b4:	mvn.w	fp, #106	; 0x6a
    72b8:	strb.w	fp, [r3, #1498]	; 0x5da
    72bc:	mov.w	fp, #113	; 0x71
    72c0:	strb.w	fp, [r3, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72c4:	mvn.w	fp, #100	; 0x64
    72c8:	strb.w	fp, [r3, #1503]	; 0x5df
      _s = s;
    72cc:	mvn.w	fp, #94	; 0x5e
    72d0:	strb.w	fp, [r3, #1504]	; 0x5e0
      _b = b;
    72d4:	mvn.w	fp, #39	; 0x27
    72d8:	strb.w	fp, [r3, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72dc:	mov.w	fp, #103	; 0x67
    72e0:	strb.w	fp, [r3, #1506]	; 0x5e2
      _s = s;
    72e4:	mov.w	fp, #95	; 0x5f
    72e8:	strb.w	fp, [r3, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72ec:	strb.w	fp, [r3, #1509]	; 0x5e5
      _s = s;
    72f0:	mov.w	fp, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72f4:	strb.w	r5, [r3, #1512]	; 0x5e8
      _s = s;
      _b = b;
    72f8:	movs	r5, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72fa:	strb.w	fp, [r3, #1510]	; 0x5e6
      _b = b;
    72fe:	mvn.w	fp, #114	; 0x72
    7302:	strb.w	r0, [r3, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7306:	mvn.w	r0, #96	; 0x60
      _s = s;
      _b = b;
    730a:	strb.w	fp, [r3, #1511]	; 0x5e7
    730e:	mvn.w	fp, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7312:	strb.w	r0, [r3, #1530]	; 0x5fa
      _s = s;
    7316:	movs	r0, #109	; 0x6d
      _b = b;
    7318:	strb.w	fp, [r3, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    731c:	mov.w	fp, #95	; 0x5f
      _s = s;
      _b = b;
    7320:	strb.w	ip, [r3, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7324:	mov.w	ip, #187	; 0xbb
    7328:	strb.w	fp, [r3, #1515]	; 0x5eb
      _s = s;
    732c:	mvn.w	fp, #84	; 0x54
    7330:	strb.w	lr, [r3, #1522]	; 0x5f2
      _b = b;
    7334:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7338:	strb.w	fp, [r3, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    733c:	mov.w	fp, #113	; 0x71
      _s = s;
      _b = b;
    7340:	strb.w	r5, [r3, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7344:	strb.w	fp, [r3, #1518]	; 0x5ee
      _s = s;
    7348:	mvn.w	fp, #126	; 0x7e
      _b = b;
    734c:	strb.w	r8, [r3, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7350:	strb.w	fp, [r3, #1519]	; 0x5ef
      _b = b;
    7354:	mvn.w	fp, #127	; 0x7f
    7358:	strb.w	fp, [r3, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    735c:	mvn.w	fp, #34	; 0x22
    7360:	strb.w	fp, [r3, #1521]	; 0x5f1
      _s = s;
    7364:	mov.w	fp, #72	; 0x48
    7368:	strb.w	fp, [r3, #1525]	; 0x5f5
      _b = b;
    736c:	ldrb.w	fp, [sp, #48]	; 0x30
    7370:	strb.w	fp, [r3, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7374:	mvn.w	fp, #65	; 0x41
    7378:	strb.w	fp, [r3, #1527]	; 0x5f7
      _s = s;
    737c:	mov.w	fp, #108	; 0x6c
    7380:	strb.w	fp, [r3, #1528]	; 0x5f8
      _b = b;
    7384:	ldrb.w	fp, [sp, #36]	; 0x24
    7388:	strb.w	fp, [r3, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    738c:	mvn.w	fp, #102	; 0x66
    7390:	strb.w	fp, [r3, #1531]	; 0x5fb
      _b = b;
    7394:	ldrb.w	fp, [sp, #28]
    7398:	strb.w	fp, [r3, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    739c:	mvn.w	fp, #119	; 0x77
    73a0:	strb.w	fp, [r3, #1533]	; 0x5fd
      _s = s;
    73a4:	mvn.w	fp, #85	; 0x55
    73a8:	strb.w	fp, [r3, #1534]	; 0x5fe
    73ac:	mvn.w	fp, #58	; 0x3a
    73b0:	strb.w	fp, [r3, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73b4:	strb.w	fp, [r3, #1524]	; 0x5f4
      _s = s;
      _b = b;
    73b8:	mvn.w	fp, #17
    73bc:	strb.w	fp, [r3, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73c0:	mvn.w	fp, #56	; 0x38
    73c4:	strb.w	fp, [r3, #1539]	; 0x603
      _s = s;
    73c8:	mvn.w	fp, #66	; 0x42
    73cc:	strb.w	r2, [r3, #1546]	; 0x60a
      _b = b;
    73d0:	mvn.w	r2, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73d4:	strb.w	fp, [r3, #1540]	; 0x604
      _b = b;
    73d8:	mvn.w	fp, #16
    73dc:	strb.w	r2, [r3, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e0:	mvn.w	r2, #96	; 0x60
      _s = s;
      _b = b;
    73e4:	strb.w	fp, [r3, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e8:	strb.w	r2, [r3, #1548]	; 0x60c
      _s = s;
    73ec:	mov.w	r2, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73f0:	ldrb.w	fp, [sp, #56]	; 0x38
      _s = s;
    73f4:	strb.w	r2, [r3, #1549]	; 0x60d
      _b = b;
    73f8:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73fc:	strb.w	fp, [r3, #1542]	; 0x606
      _s = s;
    7400:	mvn.w	fp, #124	; 0x7c
      _b = b;
    7404:	strb.w	r2, [r3, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7408:	mvn.w	r2, #118	; 0x76
      _s = s;
    740c:	strb.w	fp, [r3, #1543]	; 0x607
    7410:	mov.w	fp, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7414:	strb.w	r2, [r3, #1551]	; 0x60f
    7418:	mvn.w	r2, #108	; 0x6c
      _s = s;
      _b = b;
    741c:	strb.w	r7, [r3, #1544]	; 0x608
    7420:	movs	r7, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7422:	strb.w	r2, [r3, #1554]	; 0x612
      _s = s;
      _b = b;
    7426:	ldrb.w	r2, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    742a:	strb.w	r6, [r3, #1552]	; 0x610
      _b = b;
    742e:	movs	r6, #87	; 0x57
    7430:	strb.w	r2, [r3, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7434:	ldrb.w	r2, [sp, #32]
      _b = b;
    7438:	strb.w	r4, [r3, #1553]	; 0x611
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    743c:	strb.w	r2, [r3, #1558]	; 0x616
      _b = b;
    7440:	mvn.w	r2, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7444:	strb.w	sl, [r3, #1557]	; 0x615
      _s = s;
      _b = b;
    7448:	strb.w	r2, [r3, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    744c:	mvn.w	r2, #121	; 0x79
      _s = s;
      _b = b;
    7450:	strb.w	r4, [r3, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7454:	strb.w	r2, [r3, #1560]	; 0x618
      _s = s;
    7458:	mvn.w	r2, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    745c:	strb.w	r1, [r3, #1563]	; 0x61b
      _s = s;
    7460:	strb.w	r2, [r3, #1561]	; 0x619
    7464:	mvn.w	r2, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7468:	strb.w	r9, [r3, #1566]	; 0x61e
      _s = s;
    746c:	strb.w	r2, [r3, #1564]	; 0x61c
      _b = b;
    7470:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7474:	strb.w	r0, [r3, #1537]	; 0x601
      _b = b;
    7478:	movs	r0, #102	; 0x66
    747a:	strb.w	r2, [r3, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    747e:	mvn.w	r2, #58	; 0x3a
    7482:	strb.w	r2, [r3, #1567]	; 0x61f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7486:	mvn.w	r2, #73	; 0x49
    748a:	strb.w	r2, [r3, #1536]	; 0x600
    748e:	mvn.w	r2, #63	; 0x3f
    7492:	strb.w	r2, [r3, #1545]	; 0x609
    7496:	movs	r2, #158	; 0x9e
      _s = s;
    7498:	strb.w	fp, [r3, #1555]	; 0x613
      _b = b;
    749c:	mvn.w	fp, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74a0:	strb.w	r1, [r3, #1582]	; 0x62e
      _b = b;
    74a4:	mvn.w	r1, #34	; 0x22
    74a8:	strb.w	fp, [r3, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ac:	mvn.w	fp, #109	; 0x6d
      _s = s;
      _b = b;
    74b0:	strb.w	r1, [r3, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74b4:	mvn.w	r1, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74b8:	strb.w	fp, [r3, #1569]	; 0x621
      _s = s;
    74bc:	mvn.w	fp, #124	; 0x7c
    74c0:	strb.w	r1, [r3, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74c4:	mvn.w	r1, #124	; 0x7c
      _s = s;
    74c8:	strb.w	fp, [r3, #1570]	; 0x622
      _b = b;
    74cc:	mvn.w	fp, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74d0:	strb.w	r1, [r3, #1590]	; 0x636
      _s = s;
      _b = b;
    74d4:	mvn.w	r1, #112	; 0x70
    74d8:	strb.w	fp, [r3, #1571]	; 0x623
    74dc:	mvn.w	fp, #5
    74e0:	strb.w	r6, [r3, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74e4:	mvn.w	r6, #53	; 0x35
      _b = b;
    74e8:	strb.w	fp, [r3, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74ec:	mov.w	fp, #52	; 0x34
      _b = b;
    74f0:	strb.w	r1, [r3, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74f4:	mvn.w	r1, #124	; 0x7c
      _s = s;
    74f8:	strb.w	fp, [r3, #1576]	; 0x628
      _b = b;
    74fc:	mvn.w	fp, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7500:	strb.w	r6, [r3, #1594]	; 0x63a
      _b = b;
    7504:	mvn.w	r6, #9
    7508:	strb.w	fp, [r3, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    750c:	mvn.w	fp, #50	; 0x32
    7510:	strb.w	r1, [r3, #1593]	; 0x639
    7514:	mov.w	r1, #110	; 0x6e
    7518:	strb.w	fp, [r3, #1578]	; 0x62a
      _s = s;
    751c:	mov.w	fp, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7520:	strb.w	ip, [r3, #1572]	; 0x624
      _s = s;
    7524:	mov.w	ip, #176	; 0xb0
    7528:	strb.w	fp, [r3, #1579]	; 0x62b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    752c:	mvn.w	fp, #77	; 0x4d
    7530:	strb.w	r2, [r3, #1599]	; 0x63f
    7534:	mvn.w	r2, #53	; 0x35
      _s = s;
      _b = b;
    7538:	strb.w	r6, [r3, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    753c:	mvn.w	r6, #46	; 0x2e
    7540:	strb.w	r5, [r3, #1573]	; 0x625
    7544:	movs	r5, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7546:	strb.w	fp, [r3, #1581]	; 0x62d
    754a:	strb.w	sl, [r3, #1584]	; 0x630
      _s = s;
    754e:	strb.w	r4, [r3, #1591]	; 0x637
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7552:	strb.w	r9, [r3, #1596]	; 0x63c
      _s = s;
    7556:	strb.w	sl, [r3, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    755a:	strb.w	r1, [r3, #1587]	; 0x633
      _s = s;
    755e:	movs	r1, #57	; 0x39
      _b = b;
    7560:	strb.w	lr, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7564:	mov.w	lr, #81	; 0x51
      _b = b;
    7568:	strb.w	r0, [r3, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    756c:	mvn.w	r0, #96	; 0x60
    7570:	strb.w	r2, [r3, #1575]	; 0x627
      _s = s;
      _b = b;
    7574:	movs	r2, #148	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7576:	strb.w	r6, [r3, #1585]	; 0x631
      _b = b;
    757a:	mvn.w	r6, #51	; 0x33
    757e:	strb.w	r7, [r3, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7582:	strb.w	ip, [r3, #1600]	; 0x640
      _b = b;
    7586:	ldrb.w	fp, [sp, #28]
    758a:	strb.w	r6, [r3, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    758e:	mvn.w	r6, #95	; 0x5f
      _s = s;
      _b = b;
    7592:	strb.w	fp, [r3, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7596:	mvn.w	fp, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    759a:	strb.w	r6, [r3, #1602]	; 0x642
      _s = s;
    759e:	mvn.w	r6, #28
    75a2:	strb.w	fp, [r3, #1606]	; 0x646
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75a6:	mvn.w	fp, #98	; 0x62
      _s = s;
    75aa:	strb.w	r6, [r3, #1603]	; 0x643
      _b = b;
    75ae:	movs	r6, #168	; 0xa8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75b0:	strb.w	fp, [r3, #1608]	; 0x648
      _s = s;
    75b4:	ldrb.w	fp, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75b8:	strb.w	r0, [r3, #1605]	; 0x645
    75bc:	movs	r0, #208	; 0xd0
      _s = s;
    75be:	strb.w	fp, [r3, #1609]	; 0x649
      _b = b;
    75c2:	mvn.w	fp, #28
    75c6:	strb.w	r8, [r3, #1607]	; 0x647
    75ca:	strb.w	fp, [r3, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ce:	mvn.w	fp, #108	; 0x6c
      _s = s;
      _b = b;
    75d2:	strb.w	r4, [r3, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75d6:	strb.w	fp, [r3, #1611]	; 0x64b
      _s = s;
    75da:	mvn.w	fp, #60	; 0x3c
    75de:	strb.w	sl, [r3, #1618]	; 0x652
    75e2:	strb.w	fp, [r3, #1612]	; 0x64c
      _b = b;
    75e6:	ldrb.w	fp, [sp, #44]	; 0x2c
    75ea:	strb.w	fp, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ee:	mvn.w	fp, #101	; 0x65
    75f2:	strb.w	fp, [r3, #1614]	; 0x64e
    75f6:	mvn.w	fp, #66	; 0x42
    75fa:	strb.w	fp, [r3, #1617]	; 0x651
      _s = s;
      _b = b;
    75fe:	mvn.w	fp, #16
    7602:	strb.w	fp, [r3, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7606:	mvn.w	fp, #61	; 0x3d
    760a:	strb.w	fp, [r3, #1620]	; 0x654
      _s = s;
      _b = b;
    760e:	mvn.w	fp, #16
    7612:	strb.w	fp, [r3, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7616:	mvn.w	fp, #88	; 0x58
    761a:	strb.w	fp, [r3, #1623]	; 0x657
      _s = s;
    761e:	mvn.w	fp, #124	; 0x7c
    7622:	strb.w	fp, [r3, #1624]	; 0x658
      _b = b;
    7626:	mvn.w	fp, #15
    762a:	strb.w	fp, [r3, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    762e:	mvn.w	fp, #111	; 0x6f
    7632:	strb.w	fp, [r3, #1626]	; 0x65a
      _s = s;
    7636:	mov.w	fp, #113	; 0x71
    763a:	strb.w	fp, [r3, #1627]	; 0x65b
      _b = b;
    763e:	mvn.w	fp, #17
    7642:	strb.w	fp, [r3, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7646:	mvn.w	fp, #120	; 0x78
    764a:	strb.w	fp, [r3, #1629]	; 0x65d
      _s = s;
      _b = b;
    764e:	ldrb.w	fp, [sp, #36]	; 0x24
    7652:	strb.w	fp, [r3, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7656:	mvn.w	fp, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    765a:	strb.w	sl, [r3, #1632]	; 0x660
      _s = s;
    765e:	strb.w	fp, [r3, #1615]	; 0x64f
      _b = b;
    7662:	mov.w	fp, #196	; 0xc4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7666:	strb.w	ip, [r3, #1633]	; 0x661
    766a:	mov.w	ip, #215	; 0xd7
      _b = b;
    766e:	mov	r4, fp
    7670:	ldrb.w	fp, [sp, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7674:	strb.w	r5, [r3, #1621]	; 0x655
      _b = b;
    7678:	movs	r5, #63	; 0x3f
    767a:	strb.w	fp, [r3, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    767e:	mvn.w	fp, #114	; 0x72
      _s = s;
    7682:	strb.w	r1, [r3, #1630]	; 0x65e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7686:	strb.w	fp, [r3, #1635]	; 0x663
      _s = s;
    768a:	mvn.w	fp, #88	; 0x58
    768e:	strb.w	fp, [r3, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7692:	mov.w	fp, #94	; 0x5e
    7696:	strb.w	fp, [r3, #1638]	; 0x666
      _s = s;
    769a:	mov.w	fp, #40	; 0x28
    769e:	strb.w	fp, [r3, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76a2:	mov.w	fp, #122	; 0x7a
    76a6:	strb.w	fp, [r3, #1641]	; 0x669
      _s = s;
    76aa:	mov.w	fp, #116	; 0x74
    76ae:	strb.w	fp, [r3, #1642]	; 0x66a
      _b = b;
    76b2:	mvn.w	fp, #65	; 0x41
    76b6:	strb.w	fp, [r3, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ba:	mvn.w	fp, #118	; 0x76
    76be:	strb.w	fp, [r3, #1644]	; 0x66c
      _s = s;
    76c2:	mvn.w	fp, #50	; 0x32
    76c6:	strb.w	fp, [r3, #1645]	; 0x66d
      _b = b;
    76ca:	mvn.w	fp, #23
    76ce:	strb.w	fp, [r3, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76d2:	mvn.w	fp, #103	; 0x67
    76d6:	strb.w	fp, [r3, #1647]	; 0x66f
      _s = s;
      _b = b;
    76da:	mvn.w	fp, #9
    76de:	strb.w	fp, [r3, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76e2:	mvn.w	fp, #71	; 0x47
    76e6:	strb.w	fp, [r3, #1650]	; 0x672
      _s = s;
    76ea:	mov.w	fp, #108	; 0x6c
    76ee:	strb.w	fp, [r3, #1651]	; 0x673
      _b = b;
    76f2:	mvn.w	fp, #6
    76f6:	strb.w	fp, [r3, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76fa:	mvn.w	fp, #51	; 0x33
    76fe:	strb.w	fp, [r3, #1653]	; 0x675
      _s = s;
    7702:	mov.w	fp, #59	; 0x3b
    7706:	strb.w	fp, [r3, #1654]	; 0x676
      _b = b;
    770a:	mvn.w	fp, #6
    770e:	strb.w	fp, [r3, #1655]	; 0x677
    7712:	mvn.w	fp, #9
    7716:	strb.w	fp, [r3, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    771a:	mvn.w	fp, #38	; 0x26
    771e:	strb.w	fp, [r3, #1659]	; 0x67b
      _s = s;
    7722:	mov.w	fp, #37	; 0x25
    7726:	strb.w	fp, [r3, #1660]	; 0x67c
      _b = b;
    772a:	mvn.w	fp, #11
    772e:	strb.w	fp, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7732:	mvn.w	fp, #94	; 0x5e
    7736:	strb.w	fp, [r3, #1662]	; 0x67e
      _s = s;
      _b = b;
    773a:	mvn.w	fp, #77	; 0x4d
    773e:	strb.w	fp, [r3, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7742:	mvn.w	fp, #93	; 0x5d
    7746:	strb.w	fp, [r3, #1648]	; 0x670
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    774a:	mov.w	fp, #84	; 0x54
    774e:	strb.w	fp, [r3, #1665]	; 0x681
      _s = s;
    7752:	mov.w	fp, #91	; 0x5b
      _b = b;
    7756:	strb.w	r2, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    775a:	strb.w	fp, [r3, #1666]	; 0x682
      _b = b;
    775e:	mvn.w	fp, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7762:	strb.w	lr, [r3, #1657]	; 0x679
      _b = b;
    7766:	strb.w	fp, [r3, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    776a:	mov.w	fp, #100	; 0x64
      _s = s;
    776e:	strb.w	lr, [r3, #1663]	; 0x67f
    7772:	mov.w	lr, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7776:	strb.w	fp, [r3, #1671]	; 0x687
      _s = s;
    777a:	mvn.w	fp, #63	; 0x3f
      _b = b;
    777e:	strb.w	r6, [r3, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7782:	strb.w	fp, [r3, #1669]	; 0x685
      _b = b;
    7786:	mvn.w	fp, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    778a:	strb.w	r0, [r3, #1656]	; 0x678
      _s = s;
      _b = b;
    778e:	strb.w	fp, [r3, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7792:	mvn.w	fp, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7796:	strb.w	r7, [r3, #1668]	; 0x684
    779a:	movs	r7, #34	; 0x22
      _s = s;
    779c:	strb.w	fp, [r3, #1672]	; 0x688
    77a0:	mvn.w	fp, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77a4:	strb.w	r9, [r3, #1674]	; 0x68a
      _s = s;
    77a8:	strb.w	fp, [r3, #1675]	; 0x68b
      _b = b;
    77ac:	mvn.w	fp, #65	; 0x41
    77b0:	strb.w	sl, [r3, #1676]	; 0x68c
    77b4:	strb.w	fp, [r3, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77b8:	mvn.w	fp, #101	; 0x65
    77bc:	strb.w	r2, [r3, #1677]	; 0x68d
    77c0:	strb.w	fp, [r3, #1680]	; 0x690
      _s = s;
    77c4:	mvn.w	fp, #105	; 0x69
    77c8:	strb.w	lr, [r3, #1678]	; 0x68e
    77cc:	strb.w	fp, [r3, #1681]	; 0x691
      _b = b;
    77d0:	mvn.w	fp, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77d4:	strb.w	r2, [r3, #1686]	; 0x696
      _s = s;
      _b = b;
    77d8:	strb.w	fp, [r3, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77dc:	mvn.w	fp, #115	; 0x73
      _s = s;
    77e0:	strb.w	lr, [r3, #1690]	; 0x69a
      _b = b;
    77e4:	mov.w	lr, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77e8:	strb.w	fp, [r3, #1683]	; 0x693
      _s = s;
    77ec:	mov.w	fp, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77f0:	strb.w	r9, [r3, #1692]	; 0x69c
      _s = s;
    77f4:	strb.w	fp, [r3, #1684]	; 0x694
      _b = b;
    77f8:	mvn.w	fp, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    77fc:	strb.w	r0, [r3, #1693]	; 0x69d
      _b = b;
    7800:	strb.w	fp, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7804:	mvn.w	fp, #121	; 0x79
    7808:	strb.w	fp, [r3, #1687]	; 0x697
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    780c:	mvn.w	fp, #96	; 0x60
    7810:	strb.w	fp, [r3, #1689]	; 0x699
      _s = s;
      _b = b;
    7814:	mvn.w	fp, #39	; 0x27
    7818:	strb.w	fp, [r3, #1691]	; 0x69b
    781c:	ldrb.w	fp, [sp, #28]
    7820:	strb.w	fp, [r3, #1694]	; 0x69e
    7824:	mvn.w	fp, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7828:	strb.w	r9, [r3, #1695]	; 0x69f
      _s = s;
      _b = b;
    782c:	strb.w	r8, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7830:	strb.w	r8, [r3, #1713]	; 0x6b1
      _s = s;
      _b = b;
    7834:	mvn.w	r8, #58	; 0x3a
    7838:	strb.w	fp, [r3, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    783c:	mvn.w	fp, #106	; 0x6a
      _s = s;
      _b = b;
    7840:	strb.w	r8, [r3, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7844:	mvn.w	r8, #12
    7848:	strb.w	fp, [r3, #1698]	; 0x6a2
      _s = s;
      _b = b;
    784c:	mvn.w	fp, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7850:	strb.w	r8, [r3, #1716]	; 0x6b4
      _s = s;
    7854:	mov.w	r8, #88	; 0x58
      _b = b;
    7858:	strb.w	fp, [r3, #1688]	; 0x698
    785c:	mvn.w	fp, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7860:	strb.w	r8, [r3, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7864:	mov.w	r8, #59	; 0x3b
      _s = s;
      _b = b;
    7868:	strb.w	fp, [r3, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    786c:	mvn.w	fp, #115	; 0x73
    7870:	strb.w	r8, [r3, #1719]	; 0x6b7
      _s = s;
    7874:	mov.w	r8, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7878:	strb.w	fp, [r3, #1707]	; 0x6ab
    787c:	mvn.w	fp, #103	; 0x67
      _s = s;
    7880:	strb.w	r8, [r3, #1720]	; 0x6b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7884:	mov.w	r8, #125	; 0x7d
    7888:	strb.w	fp, [r3, #1710]	; 0x6ae
      _s = s;
    788c:	mov.w	fp, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7890:	strb.w	r8, [r3, #1722]	; 0x6ba
      _s = s;
    7894:	mov.w	r8, #79	; 0x4f
    7898:	strb.w	fp, [r3, #1711]	; 0x6af
      _b = b;
    789c:	mvn.w	fp, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78a0:	strb.w	r8, [r3, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78a4:	mvn.w	r8, #121	; 0x79
      _s = s;
    78a8:	str	r4, [sp, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78aa:	strb.w	r8, [r3, #1725]	; 0x6bd
      _s = s;
    78ae:	mov.w	r8, #95	; 0x5f
    78b2:	strb.w	r4, [r3, #1699]	; 0x6a3
      _b = b;
    78b6:	movs	r4, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78b8:	strb.w	r8, [r3, #1726]	; 0x6be
      _b = b;
    78bc:	mvn.w	r8, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78c0:	strb.w	ip, [r3, #1696]	; 0x6a0
    78c4:	mov.w	ip, #83	; 0x53
      _b = b;
    78c8:	strb.w	r8, [r3, #1727]	; 0x6bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78cc:	mvn.w	r8, #66	; 0x42
      _s = s;
      _b = b;
    78d0:	strb.w	r5, [r3, #1673]	; 0x689
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78d4:	strb.w	r8, [r3, #1728]	; 0x6c0
      _s = s;
    78d8:	mov.w	r8, #116	; 0x74
      _b = b;
    78dc:	strb.w	lr, [r3, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78e0:	strb.w	r2, [r3, #1701]	; 0x6a5
      _s = s;
    78e4:	strb.w	r6, [r3, #1702]	; 0x6a6
    78e8:	movs	r6, #90	; 0x5a
      _b = b;
    78ea:	strb.w	lr, [r3, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78ee:	mov.w	lr, #253	; 0xfd
    78f2:	strb.w	r5, [r3, #1708]	; 0x6ac
      _b = b;
    78f6:	mov.w	r5, #43	; 0x2b
    78fa:	strb.w	fp, [r3, #1712]	; 0x6b0
    78fe:	strb.w	r1, [r3, #1721]	; 0x6b9
    7902:	strb.w	r0, [r3, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7906:	strb.w	r8, [r3, #1729]	; 0x6c1
      _b = b;
    790a:	mvn.w	r8, #5
    790e:	strb.w	r5, [r3, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7912:	movs	r5, #239	; 0xef
      _s = s;
      _b = b;
    7914:	strb.w	r8, [r3, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7918:	mvn.w	r8, #64	; 0x40
      _s = s;
    791c:	strb.w	r1, [r3, #1735]	; 0x6c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7920:	strb.w	r8, [r3, #1731]	; 0x6c3
      _s = s;
    7924:	mov.w	r8, #61	; 0x3d
      _b = b;
    7928:	strb.w	fp, [r3, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    792c:	mvn.w	fp, #58	; 0x3a
      _s = s;
    7930:	strb.w	r8, [r3, #1705]	; 0x6a9
    7934:	mov.w	r8, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7938:	strb.w	r1, [r3, #1755]	; 0x6db
      _s = s;
    793c:	strb.w	r8, [r3, #1714]	; 0x6b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7940:	mvn.w	r8, #117	; 0x75
    7944:	strb.w	r8, [r3, #1704]	; 0x6a8
      _s = s;
    7948:	mov.w	r8, #50	; 0x32
    794c:	strb.w	r8, [r3, #1732]	; 0x6c4
      _b = b;
    7950:	mvn.w	r8, #6
    7954:	strb.w	r8, [r3, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7958:	mvn.w	r8, #45	; 0x2d
    795c:	strb.w	r8, [r3, #1734]	; 0x6c6
      _s = s;
      _b = b;
    7960:	mvn.w	r8, #9
    7964:	strb.w	r8, [r3, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7968:	mvn.w	r8, #50	; 0x32
    796c:	strb.w	r8, [r3, #1737]	; 0x6c9
      _s = s;
    7970:	mov.w	r8, #41	; 0x29
    7974:	strb.w	r8, [r3, #1738]	; 0x6ca
      _b = b;
    7978:	mvn.w	r8, #15
    797c:	strb.w	r8, [r3, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7980:	mvn.w	r8, #94	; 0x5e
    7984:	strb.w	r8, [r3, #1740]	; 0x6cc
      _s = s;
    7988:	mov.w	r8, #117	; 0x75
    798c:	strb.w	r8, [r3, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7990:	mvn.w	r8, #121	; 0x79
    7994:	strb.w	r8, [r3, #1743]	; 0x6cf
      _s = s;
    7998:	mvn.w	r8, #12
    799c:	strb.w	r8, [r3, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79a0:	mvn.w	r8, #118	; 0x76
    79a4:	strb.w	r8, [r3, #1746]	; 0x6d2
      _s = s;
    79a8:	ldrb.w	r8, [sp, #52]	; 0x34
    79ac:	strb.w	r8, [r3, #1747]	; 0x6d3
      _b = b;
    79b0:	mvn.w	r8, #46	; 0x2e
    79b4:	strb.w	r8, [r3, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79b8:	mvn.w	r8, #108	; 0x6c
    79bc:	strb.w	r8, [r3, #1749]	; 0x6d5
      _s = s;
    79c0:	mvn.w	r8, #43	; 0x2b
    79c4:	strb.w	r8, [r3, #1750]	; 0x6d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79c8:	mvn.w	r8, #122	; 0x7a
    79cc:	strb.w	r8, [r3, #1752]	; 0x6d8
      _s = s;
    79d0:	mvn.w	r8, #25
    79d4:	strb.w	r8, [r3, #1753]	; 0x6d9
      _b = b;
    79d8:	mvn.w	r8, #100	; 0x64
    79dc:	strb.w	r8, [r3, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79e0:	mov.w	r8, #99	; 0x63
    79e4:	strb.w	r8, [r3, #1756]	; 0x6dc
      _b = b;
    79e8:	mvn.w	r8, #43	; 0x2b
    79ec:	strb.w	r8, [r3, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79f0:	mvn.w	r8, #117	; 0x75
    79f4:	strb.w	r8, [r3, #1759]	; 0x6df
      _b = b;
    79f8:	mvn.w	r8, #39	; 0x27
    79fc:	strb.w	r8, [r3, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a00:	mov.w	r8, #33	; 0x21
      _s = s;
    7a04:	strb.w	r1, [r3, #1777]	; 0x6f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a08:	strb.w	r8, [r3, #1761]	; 0x6e1
      _s = s;
    7a0c:	mvn.w	r8, #84	; 0x54
      _b = b;
    7a10:	ldrb.w	r1, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a14:	strb.w	r8, [r3, #1762]	; 0x6e2
      _b = b;
    7a18:	ldrb.w	r8, [sp, #68]	; 0x44
    7a1c:	strb.w	r1, [r3, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a20:	mvn.w	r1, #124	; 0x7c
      _s = s;
      _b = b;
    7a24:	strb.w	r8, [r3, #1763]	; 0x6e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a28:	mov.w	r8, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a2c:	strb.w	r1, [r3, #1779]	; 0x6f3
      _s = s;
    7a30:	mov.w	r1, #24
    7a34:	strb.w	r8, [r3, #1765]	; 0x6e5
      _b = b;
    7a38:	mov.w	r8, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a3c:	strb.w	r1, [r3, #1780]	; 0x6f4
      _b = b;
    7a40:	strb.w	r8, [r3, #1751]	; 0x6d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a44:	mov.w	r8, #42	; 0x2a
      _s = s;
      _b = b;
    7a48:	ldrb.w	r1, [sp, #48]	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a4c:	strb.w	r8, [r3, #1758]	; 0x6de
      _s = s;
      _b = b;
    7a50:	mvn.w	r8, #35	; 0x23
    7a54:	strb.w	r1, [r3, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a58:	mvn.w	r1, #114	; 0x72
      _s = s;
      _b = b;
    7a5c:	strb.w	r8, [r3, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a60:	mvn.w	r8, #102	; 0x66
    7a64:	strb.w	r7, [r3, #1764]	; 0x6e4
      _s = s;
    7a68:	movs	r7, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a6a:	strb.w	r8, [r3, #1767]	; 0x6e7
      _s = s;
    7a6e:	mvn.w	r8, #85	; 0x55
      _b = b;
    7a72:	strb.w	r0, [r3, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a76:	movs	r0, #22
      _s = s;
    7a78:	strb.w	r8, [r3, #1768]	; 0x6e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a7c:	mvn.w	r8, #101	; 0x65
    7a80:	strb.w	sl, [r3, #1773]	; 0x6ed
      _s = s;
      _b = b;
    7a84:	mov.w	sl, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a88:	strb.w	r8, [r3, #1770]	; 0x6ea
      _s = s;
    7a8c:	mvn.w	r8, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a90:	strb.w	r1, [r3, #1782]	; 0x6f6
    7a94:	movs	r1, #26
      _s = s;
    7a96:	strb.w	r8, [r3, #1774]	; 0x6ee
      _b = b;
    7a9a:	mvn.w	r8, #23
    7a9e:	strb.w	r8, [r3, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7aa2:	mvn.w	r8, #116	; 0x74
    7aa6:	strb.w	r8, [r3, #1776]	; 0x6f0
      _s = s;
      _b = b;
    7aaa:	mvn.w	r8, #25
    7aae:	strb.w	r8, [r3, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab2:	mvn.w	r8, #43	; 0x2b
    7ab6:	strb.w	r8, [r3, #1785]	; 0x6f9
      _s = s;
    7aba:	mov.w	r8, #14
    7abe:	strb.w	r8, [r3, #1786]	; 0x6fa
      _b = b;
    7ac2:	mvn.w	r8, #41	; 0x29
    7ac6:	strb.w	r8, [r3, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7aca:	ldrb.w	r8, [sp, #36]	; 0x24
    7ace:	strb.w	r8, [r3, #1788]	; 0x6fc
      _s = s;
    7ad2:	mvn.w	r8, #119	; 0x77
    7ad6:	strb.w	r8, [r3, #1789]	; 0x6fd
      _b = b;
    7ada:	mvn.w	r8, #38	; 0x26
    7ade:	strb.w	r8, [r3, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ae2:	mvn.w	r8, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ae6:	strb.w	fp, [r3, #1815]	; 0x717
      _s = s;
    7aea:	mov.w	fp, #92	; 0x5c
    7aee:	strb.w	r8, [r3, #1792]	; 0x700
      _b = b;
    7af2:	ldrb.w	r8, [sp, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7af6:	strb.w	r2, [r3, #1800]	; 0x708
      _s = s;
    7afa:	mov.w	r2, #43	; 0x2b
      _b = b;
    7afe:	strb.w	r8, [r3, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b02:	mvn.w	r8, #8
      _s = s;
    7b06:	strb.w	fp, [r3, #1816]	; 0x718
      _b = b;
    7b0a:	mvn.w	fp, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b0e:	strb.w	r8, [r3, #1794]	; 0x702
      _s = s;
    7b12:	mov.w	r8, #94	; 0x5e
    7b16:	strb.w	ip, [r3, #1783]	; 0x6f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b1a:	mov.w	ip, #101	; 0x65
      _s = s;
    7b1e:	strb.w	r8, [r3, #1795]	; 0x703
      _b = b;
    7b22:	mov.w	r8, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b26:	strb.w	r6, [r3, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b2a:	movs	r6, #149	; 0x95
      _s = s;
      _b = b;
    7b2c:	strb.w	r8, [r3, #1796]	; 0x704
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b30:	mov.w	r8, #1
      _s = s;
      _b = b;
    7b34:	strb.w	r4, [r3, #1769]	; 0x6e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b38:	strb.w	r8, [r3, #1797]	; 0x705
    7b3c:	mvn.w	r8, #10
      _s = s;
      _b = b;
    7b40:	strb.w	r4, [r3, #1772]	; 0x6ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b44:	strb.w	r8, [r3, #1791]	; 0x6ff
      _s = s;
      _b = b;
    7b48:	mov.w	r8, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b4c:	strb.w	lr, [r3, #1771]	; 0x6eb
      _b = b;
    7b50:	strb.w	r8, [r3, #1799]	; 0x707
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b54:	mov.w	r8, #95	; 0x5f
    7b58:	strb.w	r2, [r3, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b5c:	movs	r2, #224	; 0xe0
      _s = s;
    7b5e:	strb.w	r8, [r3, #1801]	; 0x709
      _b = b;
    7b62:	mov.w	r8, #88	; 0x58
    7b66:	strb.w	r8, [r3, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b6a:	mvn.w	r8, #119	; 0x77
    7b6e:	strb.w	r8, [r3, #1803]	; 0x70b
      _s = s;
    7b72:	mvn.w	r8, #69	; 0x45
    7b76:	strb.w	r8, [r3, #1804]	; 0x70c
      _b = b;
    7b7a:	mvn.w	r8, #53	; 0x35
    7b7e:	strb.w	r8, [r3, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b82:	mvn.w	r8, #111	; 0x6f
    7b86:	strb.w	r8, [r3, #1806]	; 0x70e
      _s = s;
    7b8a:	mov.w	r8, #95	; 0x5f
    7b8e:	strb.w	r8, [r3, #1807]	; 0x70f
      _b = b;
    7b92:	ldrb.w	r8, [sp, #40]	; 0x28
    7b96:	strb.w	r8, [r3, #1808]	; 0x710
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b9a:	mvn.w	r8, #103	; 0x67
    7b9e:	strb.w	r8, [r3, #1809]	; 0x711
      _s = s;
      _b = b;
    7ba2:	mvn.w	r8, #8
    7ba6:	strb.w	r8, [r3, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7baa:	ldrb.w	r8, [sp, #56]	; 0x38
    7bae:	strb.w	r8, [r3, #1812]	; 0x714
      _s = s;
      _b = b;
    7bb2:	mvn.w	r8, #7
    7bb6:	strb.w	r8, [r3, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bba:	mov.w	r8, #65	; 0x41
      _s = s;
      _b = b;
    7bbe:	strb.w	fp, [r3, #1817]	; 0x719
    7bc2:	ldrb.w	fp, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bc6:	strb.w	r9, [r3, #1818]	; 0x71a
      _s = s;
      _b = b;
    7bca:	strb.w	fp, [r3, #1820]	; 0x71c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bce:	mvn.w	fp, #117	; 0x75
    7bd2:	strb.w	r4, [r3, #1848]	; 0x738
    7bd6:	strb.w	fp, [r3, #1821]	; 0x71d
      _s = s;
    7bda:	mvn.w	fp, #7
    7bde:	strb.w	fp, [r3, #1822]	; 0x71e
      _b = b;
    7be2:	mvn.w	fp, #71	; 0x47
    7be6:	strb.w	fp, [r3, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bea:	mvn.w	fp, #109	; 0x6d
    7bee:	strb.w	fp, [r3, #1824]	; 0x720
      _s = s;
    7bf2:	ldrb.w	fp, [sp, #32]
    7bf6:	strb.w	fp, [r3, #1825]	; 0x721
      _b = b;
    7bfa:	mvn.w	fp, #77	; 0x4d
    7bfe:	strb.w	fp, [r3, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c02:	mvn.w	fp, #121	; 0x79
    7c06:	strb.w	fp, [r3, #1827]	; 0x723
      _s = s;
    7c0a:	mvn.w	fp, #6
    7c0e:	strb.w	fp, [r3, #1828]	; 0x724
      _b = b;
    7c12:	mvn.w	fp, #120	; 0x78
    7c16:	strb.w	fp, [r3, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c1a:	mov.w	fp, #60	; 0x3c
    7c1e:	strb.w	fp, [r3, #1830]	; 0x726
      _s = s;
    7c22:	mov.w	fp, #124	; 0x7c
    7c26:	strb.w	fp, [r3, #1831]	; 0x727
    7c2a:	mov.w	fp, #69	; 0x45
    7c2e:	strb.w	fp, [r3, #1810]	; 0x712
    7c32:	mov.w	fp, #107	; 0x6b
    7c36:	strb.w	fp, [r3, #1819]	; 0x71b
      _b = b;
    7c3a:	mvn.w	fp, #61	; 0x3d
    7c3e:	strb.w	fp, [r3, #1832]	; 0x728
    7c42:	ldrb.w	fp, [sp, #68]	; 0x44
    7c46:	strb.w	fp, [r3, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c4a:	mov.w	fp, #37	; 0x25
    7c4e:	strb.w	fp, [r3, #1833]	; 0x729
      _s = s;
    7c52:	ldrb.w	fp, [sp, #32]
    7c56:	strb.w	fp, [r3, #1834]	; 0x72a
    7c5a:	mvn.w	fp, #25
    7c5e:	strb.w	fp, [r3, #1837]	; 0x72d
      _b = b;
    7c62:	mvn.w	fp, #38	; 0x26
    7c66:	strb.w	fp, [r3, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c6a:	mvn.w	fp, #71	; 0x47
    7c6e:	strb.w	fp, [r3, #1843]	; 0x733
      _b = b;
    7c72:	ldrb.w	fp, [sp, #48]	; 0x30
    7c76:	strb.w	fp, [r3, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c7a:	mov.w	fp, #62	; 0x3e
    7c7e:	strb.w	fp, [r3, #1849]	; 0x739
      _b = b;
    7c82:	mvn.w	fp, #43	; 0x2b
    7c86:	strb.w	fp, [r3, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c8a:	mov.w	fp, #24
    7c8e:	strb.w	fp, [r3, #1855]	; 0x73f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c92:	mvn.w	fp, #15
      _s = s;
      _b = b;
    7c96:	ldr	r4, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c98:	strb.w	fp, [r3, #1860]	; 0x744
      _s = s;
      _b = b;
    7c9c:	mvn.w	fp, #35	; 0x23
    7ca0:	strb.w	r4, [r3, #1859]	; 0x743
    7ca4:	strb.w	fp, [r3, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ca8:	ldrb.w	fp, [sp, #44]	; 0x2c
    7cac:	strb.w	r1, [r3, #1839]	; 0x72f
    7cb0:	strb.w	fp, [r3, #1863]	; 0x747
      _s = s;
    7cb4:	ldrb.w	fp, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cb8:	strb.w	r0, [r3, #1842]	; 0x732
      _s = s;
    7cbc:	strb.w	fp, [r3, #1864]	; 0x748
      _b = b;
    7cc0:	mvn.w	fp, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cc4:	strb.w	r5, [r3, #1851]	; 0x73b
      _s = s;
      _b = b;
    7cc8:	strb.w	fp, [r3, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ccc:	mov.w	fp, #31
      _s = s;
    7cd0:	strb.w	lr, [r3, #1867]	; 0x74b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cd4:	strb.w	fp, [r3, #1836]	; 0x72c
      _s = s;
    7cd8:	mvn.w	fp, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cdc:	strb.w	r4, [r3, #1869]	; 0x74d
    7ce0:	mov	r4, r3
      _s = s;
    7ce2:	strb.w	fp, [r3, #1840]	; 0x730
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ce6:	mov.w	fp, #13
      _s = s;
    7cea:	strb.w	lr, [r3, #1870]	; 0x74e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cee:	strb.w	fp, [r3, #1845]	; 0x735
      _s = s;
    7cf2:	mov.w	fp, #76	; 0x4c
    7cf6:	strb.w	fp, [r3, #1846]	; 0x736
      _b = b;
    7cfa:	mvn.w	fp, #87	; 0x57
    7cfe:	strb.w	fp, [r3, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d02:	mov.w	fp, #56	; 0x38
    7d06:	strb.w	fp, [r3, #1852]	; 0x73c
    7d0a:	mvn.w	fp, #127	; 0x7f
    7d0e:	strb.w	fp, [r3, #1858]	; 0x742
    7d12:	mov.w	fp, #114	; 0x72
    7d16:	strb.w	fp, [r3, #1861]	; 0x745
      _b = b;
    7d1a:	mvn.w	fp, #40	; 0x28
    7d1e:	strb.w	fp, [r3, #1841]	; 0x731
    7d22:	strb.w	fp, [r3, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d26:	mvn.w	fp, #13
    7d2a:	strb.w	fp, [r3, #1854]	; 0x73e
    7d2e:	mvn.w	fp, #18
    7d32:	strb.w	fp, [r3, #1857]	; 0x741
      _s = s;
      _b = b;
    7d36:	mvn.w	fp, #35	; 0x23
    7d3a:	strb.w	fp, [r3, #1865]	; 0x749
    7d3e:	ldrb.w	fp, [sp, #48]	; 0x30
    7d42:	strb.w	fp, [r3, #1868]	; 0x74c
    7d46:	ldrb.w	fp, [sp, #36]	; 0x24
    7d4a:	strb.w	fp, [r3, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d4e:	mov.w	fp, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d52:	strb.w	r0, [r3, #1872]	; 0x750
      _s = s;
    7d56:	mov.w	r0, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d5a:	strb.w	r8, [r3, #1884]	; 0x75c
    7d5e:	mvn.w	r8, #115	; 0x73
      _s = s;
    7d62:	strb.w	r0, [r3, #1873]	; 0x751
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d66:	strb.w	r8, [r3, #1896]	; 0x768
    7d6a:	mov.w	r8, #32
      _s = s;
      _b = b;
    7d6e:	ldr	r0, [sp, #56]	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d70:	strb.w	r8, [r3, #1875]	; 0x753
      _s = s;
      _b = b;
    7d74:	mvn.w	r8, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d78:	strb.w	fp, [r3, #1879]	; 0x757
      _b = b;
    7d7c:	strb.w	r8, [r3, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d80:	mov.w	r8, #105	; 0x69
      _b = b;
    7d84:	ldrb.w	fp, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d88:	strb.w	r8, [r3, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d8c:	strb.w	r8, [r3, #1890]	; 0x762
      _s = s;
    7d90:	mvn.w	r8, #4
      _b = b;
    7d94:	strb.w	fp, [r3, #1883]	; 0x75b
    7d98:	mov	fp, r0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d9a:	strb.w	r8, [r3, #1897]	; 0x769
      _b = b;
    7d9e:	mvn.w	r8, #53	; 0x35
    7da2:	strb.w	r0, [r3, #1886]	; 0x75e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7da6:	strb.w	r9, [r3, #1888]	; 0x760
      _b = b;
    7daa:	mov	r9, r0
    7dac:	strb.w	r8, [r3, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7db0:	mov.w	r0, #124	; 0x7c
    7db4:	mvn.w	r8, #5
      _b = b;
    7db8:	strb.w	fp, [r3, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dbc:	strb.w	r0, [r3, #1894]	; 0x766
    7dc0:	mov.w	fp, #51	; 0x33
      _b = b;
    7dc4:	strb.w	sl, [r3, #1880]	; 0x758
    7dc8:	mvn.w	r0, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7dcc:	strb.w	r8, [r3, #1900]	; 0x76c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dd0:	mov.w	sl, #113	; 0x71
      _s = s;
      _b = b;
    7dd4:	mvn.w	r8, #69	; 0x45
    7dd8:	strb.w	r0, [r3, #1895]	; 0x767
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ddc:	strb.w	fp, [r3, #1876]	; 0x754
      _b = b;
    7de0:	mov.w	r0, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7de4:	strb.w	sl, [r3, #1881]	; 0x759
    7de8:	mov.w	fp, #40	; 0x28
    7dec:	strb.w	ip, [r3, #1887]	; 0x75f
      _s = s;
    7df0:	mov.w	sl, #106	; 0x6a
      _b = b;
    7df4:	strb.w	r8, [r3, #1904]	; 0x770
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7df8:	mov.w	ip, #236	; 0xec
      _b = b;
    7dfc:	mvn.w	r8, #57	; 0x39
    7e00:	strb.w	r0, [r3, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e04:	strb.w	fp, [r3, #1878]	; 0x756
    7e08:	mov.w	fp, #30
      _s = s;
    7e0c:	strb.w	sl, [r3, #1882]	; 0x75a
    7e10:	mov.w	sl, #252	; 0xfc
    7e14:	strb.w	r7, [r3, #1891]	; 0x763
      _b = b;
    7e18:	movs	r0, #173	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e1a:	strb.w	r6, [r3, #1893]	; 0x765
    7e1e:	strb.w	r2, [r3, #1866]	; 0x74a
      _s = s;
      _b = b;
    7e22:	strb.w	r2, [r3, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e26:	movs	r2, #235	; 0xeb
      _s = s;
      _b = b;
    7e28:	strb.w	r8, [r3, #1907]	; 0x773
    7e2c:	mvn.w	r8, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e30:	strb.w	ip, [r3, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e34:	strb.w	r1, [r3, #1911]	; 0x777
    7e38:	strb.w	r1, [r3, #1917]	; 0x77d
    7e3c:	strb.w	r1, [r3, #1920]	; 0x780
    7e40:	strb.w	r1, [r3, #1923]	; 0x783
    7e44:	mvn.w	r1, #108	; 0x6c
    7e48:	strb.w	fp, [r3, #1914]	; 0x77a
      _s = s;
    7e4c:	mvn.w	fp, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e50:	strb.w	r1, [r3, #1899]	; 0x76b
      _s = s;
      _b = b;
    7e54:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e58:	strb.w	fp, [r3, #1918]	; 0x77e
    7e5c:	mov.w	fp, #98	; 0x62
      _b = b;
    7e60:	strb.w	r1, [r3, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e64:	mvn.w	r1, #122	; 0x7a
    7e68:	strb.w	fp, [r3, #1927]	; 0x787
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e6c:	mov.w	fp, #35	; 0x23
      _s = s;
    7e70:	strb.w	r1, [r3, #1924]	; 0x784
      _b = b;
    7e74:	mvn.w	r1, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e78:	strb.w	fp, [r3, #1908]	; 0x774
    7e7c:	mov.w	fp, #10
      _s = s;
      _b = b;
    7e80:	strb.w	r1, [r3, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e84:	mvn.w	r1, #112	; 0x70
      _s = s;
      _b = b;
    7e88:	ldr	r6, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e8a:	strb.w	r1, [r3, #1902]	; 0x76e
      _s = s;
    7e8e:	mvn.w	r1, #73	; 0x49
      _b = b;
    7e92:	ldr	r7, [sp, #48]	; 0x30
    7e94:	strb.w	r8, [r3, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e98:	mvn.w	r8, #58	; 0x3a
    7e9c:	strb.w	r5, [r3, #1930]	; 0x78a
    7ea0:	mov.w	r5, #66	; 0x42
    7ea4:	strb.w	r1, [r3, #1903]	; 0x76f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ea8:	mov.w	r1, #67	; 0x43
    7eac:	strb.w	fp, [r3, #1926]	; 0x786
      _s = s;
      _b = b;
    7eb0:	mvn.w	fp, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7eb4:	strb.w	sl, [r3, #1912]	; 0x778
    7eb8:	strb.w	r8, [r3, #1915]	; 0x77b
      _b = b;
    7ebc:	mov.w	r8, #228	; 0xe4
    7ec0:	strb.w	r6, [r3, #1916]	; 0x77c
    7ec4:	strb.w	r6, [r3, #1919]	; 0x77f
    7ec8:	movs	r6, #234	; 0xea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7eca:	strb.w	r9, [r3, #1921]	; 0x781
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ece:	mov.w	r9, #33	; 0x21
      _s = s;
      _b = b;
    7ed2:	strb.w	r7, [r3, #1922]	; 0x782
    7ed6:	strb.w	ip, [r3, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7eda:	mov.w	ip, #229	; 0xe5
      _b = b;
    7ede:	strb.w	r7, [r3, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ee2:	movs	r7, #37	; 0x25
    7ee4:	strb.w	r2, [r3, #1929]	; 0x789
    7ee8:	strb.w	r1, [r3, #1905]	; 0x771
      _s = s;
    7eec:	mov	r1, lr
    7eee:	strb.w	r5, [r3, #1906]	; 0x772
      _b = b;
    7ef2:	movs	r5, #230	; 0xe6
    7ef4:	strb.w	fp, [r3, #1931]	; 0x78b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ef8:	strb.w	sl, [r3, #1933]	; 0x78d
      _b = b;
    7efc:	mov.w	sl, #196	; 0xc4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f00:	strb.w	r2, [r3, #1935]	; 0x78f
      _s = s;
    7f04:	strb.w	r2, [r3, #1939]	; 0x793
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f08:	ldrb.w	r2, [sp, #44]	; 0x2c
      _s = s;
    7f0c:	ldrb.w	fp, [sp, #36]	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f10:	strb.w	r2, [r3, #1941]	; 0x795
      _s = s;
      _b = b;
    7f14:	mvn.w	r2, #66	; 0x42
    7f18:	strb.w	r0, [r3, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f1c:	mov.w	r0, #63	; 0x3f
      _b = b;
    7f20:	strb.w	r2, [r3, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f24:	mvn.w	r2, #28
      _s = s;
    7f28:	strb.w	fp, [r3, #1936]	; 0x790
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f2c:	strb.w	r2, [r3, #1944]	; 0x798
      _s = s;
      _b = b;
    7f30:	mvn.w	r2, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f34:	ldrb.w	fp, [sp, #28]
      _s = s;
      _b = b;
    7f38:	strb.w	r2, [r3, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f3c:	ldrb.w	r2, [sp, #68]	; 0x44
      _s = s;
      _b = b;
    7f40:	strb.w	sl, [r3, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f44:	strb.w	r2, [r3, #1947]	; 0x79b
      _s = s;
      _b = b;
    7f48:	ldrb.w	r2, [sp, #36]	; 0x24
    7f4c:	strb.w	sl, [r3, #1940]	; 0x794
    7f50:	mov.w	sl, #252	; 0xfc
    7f54:	strb.w	r2, [r3, #1949]	; 0x79d
    7f58:	mvn.w	r2, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f5c:	strb.w	r0, [r3, #1954]	; 0x7a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f60:	mov.w	r0, #49	; 0x31
      _s = s;
      _b = b;
    7f64:	strb.w	r2, [r3, #1952]	; 0x7a0
    7f68:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f6c:	strb.w	fp, [r3, #1938]	; 0x792
      _s = s;
      _b = b;
    7f70:	strb.w	r2, [r3, #1955]	; 0x7a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f74:	mov.w	r2, #37	; 0x25
      _s = s;
    7f78:	strb.w	lr, [r3, #1942]	; 0x796
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f7c:	strb.w	r2, [r3, #1956]	; 0x7a4
      _s = s;
    7f80:	mov.w	r2, #50	; 0x32
    7f84:	strb.w	lr, [r3, #1945]	; 0x799
    7f88:	strb.w	r2, [r3, #1957]	; 0x7a5
    7f8c:	mov.w	r2, #91	; 0x5b
    7f90:	strb.w	lr, [r3, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f94:	mov.w	lr, #243	; 0xf3
      _s = s;
    7f98:	strb.w	r2, [r3, #1960]	; 0x7a8
      _b = b;
    7f9c:	mvn.w	r2, #9
    7fa0:	strb.w	sl, [r3, #1958]	; 0x7a6
    7fa4:	strb.w	r2, [r3, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fa8:	mov.w	r2, #43	; 0x2b

Beam beams[BEAM_AM];

Segment seg[] = {
  Segment(0, 119)
};
    7fac:	ldr.w	fp, [pc, #1092]	; 83f4 <_GLOBAL__sub_I_nextTime3+0x7498>
    7fb0:	strb.w	r2, [r3, #1962]	; 0x7aa
    7fb4:	mov.w	r2, #33	; 0x21
    7fb8:	strb.w	r2, [r3, #1950]	; 0x79e
      _s = s;
    7fbc:	mov.w	r2, #59	; 0x3b
    7fc0:	strb.w	r2, [r3, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fc4:	mov.w	r2, #38	; 0x26
    7fc8:	strb.w	r2, [r3, #1953]	; 0x7a1
      _s = s;
    7fcc:	movs	r2, #226	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fce:	strb.w	r0, [r3, #1959]	; 0x7a7
      _s = s;
    7fd2:	mvn.w	r0, #60	; 0x3c
    7fd6:	strb.w	sl, [r3, #1966]	; 0x7ae
      _b = b;
    7fda:	mvn.w	sl, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fde:	strb.w	r0, [r3, #1963]	; 0x7ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fe2:	mvn.w	r0, #14
      _s = s;
      _b = b;
    7fe6:	strb.w	sl, [r3, #1967]	; 0x7af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fea:	ldrb.w	sl, [sp, #56]	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fee:	strb.w	r0, [r3, #1932]	; 0x78c
      _s = s;
      _b = b;
    7ff2:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ff6:	strb.w	sl, [r3, #1969]	; 0x7b1
      _b = b;
    7ffa:	mvn.w	sl, #10
    7ffe:	strb.w	r0, [r3, #1964]	; 0x7ac
    8002:	strb.w	sl, [r3, #1970]	; 0x7b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8006:	mov.w	sl, #105	; 0x69
    800a:	strb.w	ip, [r4, #1987]	; 0x7c3
    800e:	strb.w	sl, [r3, #1972]	; 0x7b4
      _b = b;
    8012:	mvn.w	sl, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8016:	strb.w	r9, [r4, #1983]	; 0x7bf
      _s = s;
      _b = b;
    801a:	strb.w	sl, [r3, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    801e:	mvn.w	sl, #102	; 0x66
    8022:	strb.w	r9, [r4, #1989]	; 0x7c5
    8026:	strb.w	sl, [r3, #1977]	; 0x7b9
      _s = s;
    802a:	ldrb.w	sl, [sp, #32]
      _b = b;
    802e:	strb.w	r6, [r4, #1985]	; 0x7c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8032:	strb.w	sl, [r3, #1978]	; 0x7ba
      _b = b;
    8036:	mvn.w	sl, #40	; 0x28
    803a:	strb.w	r8, [r4, #1988]	; 0x7c4
    803e:	strb.w	sl, [r3, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8042:	mov.w	sl, #53	; 0x35


#define LED_AM 120
#define BEAM_AM 1

Beam beams[BEAM_AM];
    8046:	ldr	r0, [pc, #872]	; (83b0 <_GLOBAL__sub_I_nextTime3+0x7454>)
    8048:	strb.w	sl, [r3, #1965]	; 0x7ad
    804c:	mov.w	sl, #48	; 0x30

Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    8050:	ldr.w	r9, [pc, #932]	; 83f8 <_GLOBAL__sub_I_nextTime3+0x749c>
    8054:	strb.w	sl, [r3, #1968]	; 0x7b0
    8058:	mov.w	sl, #52	; 0x34
    805c:	strb.w	sl, [r3, #1971]	; 0x7b3
    8060:	mvn.w	sl, #104	; 0x68
    8064:	strb.w	sl, [r3, #1974]	; 0x7b6
      _s = s;
    8068:	mvn.w	sl, #105	; 0x69
    806c:	strb.w	sl, [r3, #1975]	; 0x7b7
      _b = b;
    8070:	mvn.w	sl, #37	; 0x25
    8074:	strb.w	sl, [r3, #1976]	; 0x7b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8078:	mov.w	r3, #32
    807c:	strb.w	r3, [r4, #1986]	; 0x7c2
    8080:	mov.w	r3, #69	; 0x45
    8084:	strb.w	r3, [r4, #1980]	; 0x7bc
      _s = s;
    8088:	mov.w	r3, #43	; 0x2b
    808c:	strb.w	r3, [r4, #1981]	; 0x7bd
      _b = b;
    8090:	mvn.w	r3, #52	; 0x34
    8094:	strb.w	r3, [r4, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8098:	mvn.w	r3, #68	; 0x44
    809c:	strb.w	r3, [r4, #1984]	; 0x7c0
    80a0:	mvn.w	r3, #3
    80a4:	strb.w	r3, [r4, #1990]	; 0x7c6
    80a8:	mvn.w	r3, #6
    80ac:	strb.w	r3, [r4, #1996]	; 0x7cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80b0:	mov.w	r3, #35	; 0x23
      _s = s;
      _b = b;
    80b4:	strb.w	r8, [r4, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80b8:	strb.w	r3, [r4, #1998]	; 0x7ce
    80bc:	mov.w	r3, #32
      _s = s;
      _b = b;
    80c0:	strb.w	r5, [r4, #1994]	; 0x7ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80c4:	strb.w	r3, [r4, #2001]	; 0x7d1
    80c8:	mvn.w	r3, #14
      _s = s;
      _b = b;
    80cc:	strb.w	r5, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80d0:	strb.w	r3, [r4, #2013]	; 0x7dd
      _s = s;
    80d4:	mvn.w	r3, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80d8:	strb.w	r5, [r4, #2022]	; 0x7e6
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    80dc:	movs	r5, #0
      _s = s;
    80de:	strb.w	r3, [r4, #2017]	; 0x7e1
      _b = b;
    80e2:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80e6:	strb.w	ip, [r4, #2025]	; 0x7e9
      _s = s;
      _b = b;
    80ea:	strb.w	r3, [r4, #2027]	; 0x7eb
    80ee:	mvn.w	r3, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80f2:	strb.w	r1, [r4, #1993]	; 0x7c9
      _b = b;
    80f6:	strb.w	r3, [r4, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80fa:	mov.w	r3, #12
      _s = s;
    80fe:	strb.w	r1, [r4, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8102:	strb.w	r3, [r4, #2004]	; 0x7d4
      _s = s;
    8106:	mov.w	r3, #116	; 0x74
    810a:	strb.w	r1, [r4, #2023]	; 0x7e7
    810e:	strb.w	r3, [r4, #2005]	; 0x7d5
    8112:	mov.w	r3, #57	; 0x39
    8116:	strb.w	r2, [r4, #1999]	; 0x7cf
    811a:	strb.w	r3, [r4, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    811e:	mvn.w	r3, #15
      _s = s;
      _b = b;
    8122:	strb.w	r2, [r4, #2003]	; 0x7d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8126:	strb.w	r3, [r4, #2010]	; 0x7da
      _s = s;
    812a:	mvn.w	r3, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    812e:	strb.w	r7, [r4, #1992]	; 0x7c8
      _s = s;
    8132:	strb.w	r3, [r4, #2011]	; 0x7db
    8136:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    813a:	strb.w	r7, [r4, #1995]	; 0x7cb
      _s = s;
    813e:	strb.w	r3, [r4, #2014]	; 0x7de
      _b = b;
    8142:	mvn.w	r3, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8146:	strb.w	sl, [r4, #2002]	; 0x7d2
      _b = b;
    814a:	strb.w	r3, [r4, #2015]	; 0x7df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    814e:	mvn.w	r3, #20
      _s = s;
      _b = b;
    8152:	strb.w	r6, [r4, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8156:	strb.w	r3, [r4, #2016]	; 0x7e0
      _s = s;
      _b = b;
    815a:	mvn.w	r3, #57	; 0x39





Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    815e:	ldr.w	r8, [pc, #668]	; 83fc <_GLOBAL__sub_I_nextTime3+0x74a0>
    8162:	strb.w	r3, [r4, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8166:	mvn.w	r3, #24
    816a:	ldr	r7, [pc, #584]	; (83b4 <_GLOBAL__sub_I_nextTime3+0x7458>)
    816c:	strb.w	r3, [r4, #2019]	; 0x7e3
      _s = s;
      _b = b;
    8170:	mvn.w	r3, #62	; 0x3e
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    8174:	ldr.w	sl, [pc, #648]	; 8400 <_GLOBAL__sub_I_nextTime3+0x74a4>
    8178:	strb.w	r3, [r4, #2021]	; 0x7e5
    817c:	mvn.w	r3, #65	; 0x41
  Color pixelCol(r,g,b,RGB_MODE);
  return pixelCol;
}


Colore colore( LED_AM, seg, segAm, beams, BEAM_AM, &set_ledLib, &get_ledLib, &show_ledLib, &reset_ledLib );
    8180:	ldr	r6, [pc, #556]	; (83b0 <_GLOBAL__sub_I_nextTime3+0x7454>)
    8182:	strb.w	r3, [r4, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8186:	mvn.w	r3, #5
    818a:	strb.w	r3, [r4, #2026]	; 0x7ea
      _b = b;
    818e:	strb.w	r2, [r4, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8192:	strb.w	lr, [r4, #2007]	; 0x7d7
      _s = s;
      _b = b;
    8196:	strb.w	lr, [r4, #2009]	; 0x7d9


#define LED_AM 120
#define BEAM_AM 1

Beam beams[BEAM_AM];
    819a:	bl	9018 <Beam::Beam()>

Segment seg[] = {
  Segment(0, 119)
};
    819e:	mov	r1, r5
    81a0:	mov	r0, fp
    81a2:	movs	r2, #119	; 0x77
    81a4:	bl	84b0 <Segment::Segment(unsigned short, unsigned short)>





Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    81a8:	movs	r3, #82	; 0x52
    81aa:	movs	r2, #7
    81ac:	mov.w	r1, #676	; 0x2a4
    81b0:	ldr	r0, [pc, #516]	; (83b8 <_GLOBAL__sub_I_nextTime3+0x745c>)
    81b2:	bl	a740 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    81b6:	mov	r2, r8
    81b8:	mov	r1, r7
    81ba:	ldr	r0, [pc, #508]	; (83b8 <_GLOBAL__sub_I_nextTime3+0x745c>)
    81bc:	bl	d158 <__aeabi_atexit>
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    81c0:	movs	r3, #82	; 0x52
    81c2:	movs	r2, #8
    81c4:	mov.w	r1, #676	; 0x2a4
    81c8:	ldr	r0, [pc, #496]	; (83bc <_GLOBAL__sub_I_nextTime3+0x7460>)
    81ca:	bl	a740 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    81ce:	mov	r2, r8
    81d0:	mov	r1, r7
    81d2:	ldr	r0, [pc, #488]	; (83bc <_GLOBAL__sub_I_nextTime3+0x7460>)
    81d4:	bl	d158 <__aeabi_atexit>
//GIVE two digit identifier for synapse name
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    81d8:	movs	r3, #82	; 0x52
    81da:	mov	r0, sl
    81dc:	movs	r2, #2
    81de:	movs	r1, #120	; 0x78
    81e0:	bl	a740 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    81e4:	mov	r2, r8
    81e6:	mov	r1, r7
    81e8:	mov	r0, sl
    81ea:	bl	d158 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    81ee:	movs	r3, #82	; 0x52
    81f0:	mov	r0, r9
    81f2:	movs	r2, #14
    81f4:	movs	r1, #120	; 0x78
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    81f6:	ldr.w	sl, [pc, #524]	; 8404 <_GLOBAL__sub_I_nextTime3+0x74a8>
    81fa:	bl	a740 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    81fe:	mov	r2, r8
    8200:	mov	r1, r7
    8202:	mov	r0, r9
    8204:	bl	d158 <__aeabi_atexit>
  Color pixelCol(r,g,b,RGB_MODE);
  return pixelCol;
}


Colore colore( LED_AM, seg, segAm, beams, BEAM_AM, &set_ledLib, &get_ledLib, &show_ledLib, &reset_ledLib );
    8208:	ldr	r0, [pc, #436]	; (83c0 <_GLOBAL__sub_I_nextTime3+0x7464>)
    820a:	ldr	r3, [pc, #440]	; (83c4 <_GLOBAL__sub_I_nextTime3+0x7468>)
    820c:	mov	r2, fp
    820e:	ldr.w	ip, [pc, #504]	; 8408 <_GLOBAL__sub_I_nextTime3+0x74ac>
    8212:	movs	r1, #120	; 0x78
    8214:	ldrb	r3, [r3, #0]
    8216:	ldr.w	lr, [pc, #500]	; 840c <_GLOBAL__sub_I_nextTime3+0x74b0>
    821a:	str	r0, [sp, #8]
    821c:	movs	r0, #1
    821e:	ldr	r7, [pc, #424]	; (83c8 <_GLOBAL__sub_I_nextTime3+0x746c>)
    8220:	str	r6, [sp, #0]
    8222:	str.w	ip, [sp, #20]
    8226:	str.w	lr, [sp, #16]
    822a:	str	r7, [sp, #12]
    822c:	str	r0, [sp, #4]
    822e:	ldr	r0, [pc, #412]	; (83cc <_GLOBAL__sub_I_nextTime3+0x7470>)
    8230:	bl	8ee4 <Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())>
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8234:	ldr	r3, [pc, #408]	; (83d0 <_GLOBAL__sub_I_nextTime3+0x7474>)
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8236:	movs	r2, #1
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8238:	mov.w	ip, #2
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    823c:	add.w	r3, r3, #5440	; 0x1540
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8240:	ldr.w	r9, [pc, #460]	; 8410 <_GLOBAL__sub_I_nextTime3+0x74b4>
    8244:	ldr.w	r8, [pc, #460]	; 8414 <_GLOBAL__sub_I_nextTime3+0x74b8>
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    8248:	movw	r0, #8148	; 0x1fd4
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    824c:	mov	lr, r3
    824e:	ldr	r3, [pc, #388]	; (83d4 <_GLOBAL__sub_I_nextTime3+0x7478>)
    8250:	ldr.w	fp, [pc, #452]	; 8418 <_GLOBAL__sub_I_nextTime3+0x74bc>
    8254:	mov	r1, r5
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8256:	sub.w	r6, lr, #5440	; 0x1540
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    825a:	add.w	r7, r3, #5440	; 0x1540
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    825e:	movs	r3, #1
    8260:	add	r0, fp
    8262:	str	r2, [r6, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8264:	movs	r2, #10
    8266:	str	r2, [r6, #20]
    8268:	sub.w	r6, r7, #5440	; 0x1540
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    826c:	ldr	r2, [pc, #360]	; (83d8 <_GLOBAL__sub_I_nextTime3+0x747c>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    826e:	str	r3, [r6, #20]
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8270:	str.w	r2, [lr]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8274:	sub.w	r2, r7, #5440	; 0x1540
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8278:	strb	r3, [r6, #24]
      _cellmask = current_mask;
      _background = current_bg;
    827a:	ldr	r6, [pc, #348]	; (83d8 <_GLOBAL__sub_I_nextTime3+0x747c>)
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    827c:	str	r3, [r2, #4]
    827e:	movs	r3, #1
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8280:	str	r6, [r7, #0]
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8282:	movs	r7, #10
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8284:	ldr	r6, [pc, #340]	; (83dc <_GLOBAL__sub_I_nextTime3+0x7480>)
    8286:	movw	r2, #8112	; 0x1fb0
    828a:	str	r3, [r6, #4]
      _floorInit = floorInit;
      _minInit = minInit;
    828c:	str	r7, [r6, #16]
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    828e:	add.w	r6, r6, #5440	; 0x1540
    8292:	ldr	r3, [pc, #324]	; (83d8 <_GLOBAL__sub_I_nextTime3+0x747c>)
    8294:	ldr	r7, [pc, #328]	; (83e0 <_GLOBAL__sub_I_nextTime3+0x7484>)
    8296:	str	r3, [r6, #0]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8298:	movs	r6, #1
    829a:	ldr	r3, [pc, #328]	; (83e4 <_GLOBAL__sub_I_nextTime3+0x7488>)
    829c:	str	r6, [r3, #8]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    829e:	str	r6, [r3, #16]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    82a0:	str	r6, [r3, #4]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    82a2:	sub.w	r3, lr, #5440	; 0x1540
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    82a6:	ldr	r6, [pc, #320]	; (83e8 <_GLOBAL__sub_I_nextTime3+0x748c>)
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    82a8:	str.w	ip, [r3]
      _penalty = penalty;
    82ac:	str.w	ip, [r3, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    82b0:	ldr	r3, [pc, #304]	; (83e4 <_GLOBAL__sub_I_nextTime3+0x7488>)
    82b2:	str.w	ip, [r3]
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    82b6:	sub.w	r3, lr, #5440	; 0x1540
    82ba:	str	r5, [r3, #12]
      _minInit = minInit;
    82bc:	str	r5, [r3, #16]
      _maxInit = maxInit;
      _isBg = isBg;
    82be:	strb	r5, [r3, #24]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    82c0:	ldr	r3, [pc, #272]	; (83d4 <_GLOBAL__sub_I_nextTime3+0x7478>)
    82c2:	str	r5, [r3, #12]
      _minInit = minInit;
    82c4:	str	r5, [r3, #16]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    82c6:	ldr	r3, [pc, #276]	; (83dc <_GLOBAL__sub_I_nextTime3+0x7480>)
    82c8:	str	r5, [r3, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    82ca:	strb	r5, [r3, #24]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    82cc:	ldr	r3, [pc, #276]	; (83e4 <_GLOBAL__sub_I_nextTime3+0x7488>)
    82ce:	str	r5, [r3, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    82d0:	sub.w	r3, lr, #5440	; 0x1540
    82d4:	movw	lr, #5436	; 0x153c
    82d8:	str.w	r6, [r3, lr]
    82dc:	ldr	r3, [pc, #244]	; (83d4 <_GLOBAL__sub_I_nextTime3+0x7478>)
    82de:	str.w	r6, [r3, lr]
    82e2:	ldr	r3, [pc, #248]	; (83dc <_GLOBAL__sub_I_nextTime3+0x7480>)
    82e4:	str.w	r6, [r3, lr]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    82e8:	movs	r6, #4
    82ea:	ldr	r3, [pc, #232]	; (83d4 <_GLOBAL__sub_I_nextTime3+0x7478>)
    82ec:	str	r6, [r3, #0]
      _penalty = penalty;
    82ee:	str	r6, [r3, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    82f0:	movs	r6, #3
    82f2:	ldr	r3, [pc, #232]	; (83dc <_GLOBAL__sub_I_nextTime3+0x7480>)
    82f4:	str	r6, [r3, #0]
      _penalty = penalty;
    82f6:	str	r6, [r3, #8]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    82f8:	movs	r6, #20
    82fa:	str	r6, [r3, #20]
    82fc:	movs	r6, #10
    82fe:	ldr	r3, [pc, #228]	; (83e4 <_GLOBAL__sub_I_nextTime3+0x7488>)
    8300:	str	r6, [r3, #20]
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8302:	add.w	r3, r3, #5440	; 0x1540
    8306:	ldr	r6, [pc, #208]	; (83d8 <_GLOBAL__sub_I_nextTime3+0x747c>)
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8308:	str.w	ip, [r9]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    830c:	str	r6, [r3, #0]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    830e:	sub.w	r3, r3, #5440	; 0x1540
    8312:	ldr	r6, [pc, #212]	; (83e8 <_GLOBAL__sub_I_nextTime3+0x748c>)
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8314:	strb	r5, [r3, #24]
      _cellmask = current_mask;
    8316:	str.w	r6, [r3, lr]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    831a:	movs	r6, #20
    831c:	ldr	r3, [pc, #204]	; (83ec <_GLOBAL__sub_I_nextTime3+0x7490>)
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    831e:	str.w	ip, [r9, #8]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8322:	str	r6, [r3, #20]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8324:	movs	r6, #3
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8326:	str.w	r4, [r3, lr]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    832a:	str	r6, [r3, #0]
      _penalty = penalty;
    832c:	str	r6, [r3, #8]
      _reward = reward;
    832e:	movs	r6, #1
      _floorInit = floorInit;
    8330:	str	r5, [r3, #12]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8332:	str	r6, [r3, #4]
      _floorInit = floorInit;
      _minInit = minInit;
    8334:	movs	r6, #10
      _maxInit = maxInit;
      _isBg = isBg;
    8336:	strb	r5, [r3, #24]
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8338:	str	r6, [r3, #16]
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    833a:	add.w	r3, r3, #5440	; 0x1540
    833e:	ldr	r6, [pc, #176]	; (83f0 <_GLOBAL__sub_I_nextTime3+0x7494>)
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8340:	str.w	r4, [r9, lr]
      _background = current_bg;
    8344:	str	r6, [r3, #0]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8346:	movs	r3, #1
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8348:	str.w	r4, [sl, lr]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    834c:	str.w	r3, [r9, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8350:	movs	r3, #10
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8352:	str.w	ip, [r8]
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8356:	str.w	r3, [r9, #20]
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    835a:	add.w	r3, r9, #5440	; 0x1540
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    835e:	str.w	r5, [r9, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8362:	str	r6, [r3, #0]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8364:	movs	r3, #4
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8366:	str.w	r5, [r9, #16]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    836a:	str.w	r3, [sl]
      _penalty = penalty;
    836e:	str.w	r3, [sl, #8]
      _reward = reward;
    8372:	movs	r3, #1
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8374:	strb.w	r5, [r9, #24]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8378:	str.w	r3, [sl, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    837c:	str.w	r3, [sl, #20]
      _isBg = isBg;
    8380:	strb.w	r3, [sl, #24]
      _cellmask = current_mask;
      _background = current_bg;
    8384:	add.w	r3, sl, #5440	; 0x1540
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8388:	str.w	r5, [sl, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    838c:	str	r6, [r3, #0]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    838e:	movs	r3, #1
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8390:	str.w	r5, [sl, #16]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8394:	str.w	r3, [r8, #8]
      _reward = reward;
    8398:	str.w	r3, [r8, #4]
      _floorInit = floorInit;
      _minInit = minInit;
    839c:	str.w	r3, [r8, #16]
      _maxInit = maxInit;
    83a0:	movs	r3, #10
      _isBg = isBg;
      _cellmask = current_mask;
    83a2:	str.w	r4, [r8, lr]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    83a6:	str.w	r3, [r8, #20]
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    83aa:	add.w	r3, r8, #5440	; 0x1540
    83ae:	b.n	841c <_GLOBAL__sub_I_nextTime3+0x74c0>
    83b0:	.word	0x2000d224
    83b4:	.word	0x0000a459
    83b8:	.word	0x20004330
    83bc:	.word	0x2000e7b0
    83c0:	.word	0x000001e1
    83c4:	.word	0x20000f00
    83c8:	.word	0x0000022d
    83cc:	.word	0x2000fd08
    83d0:	.word	0x200018a8
    83d4:	.word	0x20012818
    83d8:	.word	0x200009b8
    83dc:	.word	0x2000fd90
    83e0:	.word	0x200092a0
    83e4:	.word	0x2000e7c4
    83e8:	.word	0x20004344
    83ec:	.word	0x200112d4
    83f0:	.word	0x20000c5c
    83f4:	.word	0x2000182c
    83f8:	.word	0x2000fd7c
    83fc:	.word	0x200009b4
    8400:	.word	0x2000fd68
    8404:	.word	0x20013d5c
    8408:	.word	0x000001fd
    840c:	.word	0x00000221
    8410:	.word	0x20002dec
    8414:	.word	0x2000d26c
    8418:	.word	0x2000531c
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, int reward, int penalty, int floorInit, int minInit, int maxInit, bool isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    841c:	str.w	r5, [r8, #12]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8420:	str	r6, [r3, #0]
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8422:	strb.w	r5, [r8, #24]
    8426:	str.w	r5, [fp, #28]
    842a:	str.w	r5, [fp, #32]
    842e:	bl	d7cc <memset>
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
            _sat_automaton = sat_automaton;
            _screen = screen;
    8432:	ldr	r3, [pc, #96]	; (8494 <_GLOBAL__sub_I_nextTime3+0x7538>)
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    8434:	movw	r0, #8148	; 0x1fd4
    8438:	movw	r2, #8112	; 0x1fb0
    843c:	mov	r1, r5
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
            _sat_automaton = sat_automaton;
            _screen = screen;
    843e:	str.w	r3, [fp, #16]
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    8442:	adds	r0, r7, r0
            _bg_automaton = bg_automaton;
    8444:	ldr	r3, [pc, #80]	; (8498 <_GLOBAL__sub_I_nextTime3+0x753c>)
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
            _sat_automaton = sat_automaton;
            _screen = screen;
            step = 0;
    8446:	str.w	r5, [fp, #24]
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
            _bg_automaton = bg_automaton;
    844a:	str.w	r3, [fp]
            _fg_automaton = fg_automaton;
    844e:	ldr	r3, [pc, #76]	; (849c <_GLOBAL__sub_I_nextTime3+0x7540>)
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    8450:	str	r5, [r7, #28]
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
    8452:	str.w	r3, [fp, #4]
            _grow_automaton = grow_automaton;
    8456:	ldr	r3, [pc, #72]	; (84a0 <_GLOBAL__sub_I_nextTime3+0x7544>)
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    8458:	str	r5, [r7, #32]
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
    845a:	str.w	r3, [fp, #8]
            _sat_automaton = sat_automaton;
    845e:	ldr	r3, [pc, #68]	; (84a4 <_GLOBAL__sub_I_nextTime3+0x7548>)
    8460:	str.w	r3, [fp, #12]
            _screen = screen;
            step = 0;
            makeNewFrame = true;
    8464:	mov.w	r3, #1
    8468:	strb.w	r3, [fp, #20]
        uint32_t nextTime2 = 0;
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
    846c:	bl	d7cc <memset>
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
    8470:	ldr	r3, [pc, #52]	; (84a8 <_GLOBAL__sub_I_nextTime3+0x754c>)
        

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
            _bg_automaton = bg_automaton;
    8472:	str.w	sl, [r7]
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
    8476:	str	r3, [r7, #8]
            _sat_automaton = sat_automaton;
            _screen = screen;
    8478:	ldr	r3, [pc, #48]	; (84ac <_GLOBAL__sub_I_nextTime3+0x7550>)

  
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
    847a:	str.w	r9, [r7, #4]
            _grow_automaton = grow_automaton;
            _sat_automaton = sat_automaton;
            _screen = screen;
    847e:	str	r3, [r7, #16]
            step = 0;
            makeNewFrame = true;
    8480:	mov.w	r3, #1
    public: 
        Screen (Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen) {
            _bg_automaton = bg_automaton;
            _fg_automaton = fg_automaton;
            _grow_automaton = grow_automaton;
            _sat_automaton = sat_automaton;
    8484:	str.w	r8, [r7, #12]
            _screen = screen;
            step = 0;
    8488:	str	r5, [r7, #24]
            makeNewFrame = true;
    848a:	strb	r3, [r7, #20]
  //synapse_A.show();
   
   

  // synapse_A.show();
}
    848c:	add	sp, #84	; 0x54
    848e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8492:	nop
    8494:	.word	0x20004330
    8498:	.word	0x20012818
    849c:	.word	0x200018a8
    84a0:	.word	0x2000fd90
    84a4:	.word	0x2000e7c4
    84a8:	.word	0x200112d4
    84ac:	.word	0x2000e7b0

000084b0 <Segment::Segment(unsigned short, unsigned short)>:
	e_spd = 0;
	e_pos = 0;
	e_len = 0;
}

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
    84b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84b4:	mov	r4, r0
    84b6:	movs	r6, #0
    84b8:	mov	r8, r1
    84ba:	mov	r5, r2
    84bc:	strb	r6, [r0, #6]
    84be:	adds	r0, #56	; 0x38
    84c0:	strb	r6, [r4, #7]
	initStartEnd(_startsLen, _startLeds, _segLen);
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
	startsLen = _startsLen;
    84c2:	movs	r7, #1
	e_spd = 0;
	e_pos = 0;
	e_len = 0;
}

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
    84c4:	bl	9820 <Color::Color()>
    84c8:	add.w	r0, r4, #72	; 0x48
    84cc:	bl	9820 <Color::Color()>
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
	startsLen = _startsLen;
	segLen = _segLen;
    84d0:	rsb	r5, r8, r5
	e_spd = 0;
	e_pos = 0;
	e_len = 0;
}

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
    84d4:	add.w	r0, r4, #88	; 0x58
    84d8:	bl	9820 <Color::Color()>
    84dc:	add.w	r0, r4, #104	; 0x68
    84e0:	bl	9820 <Color::Color()>
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
	startsLen = _startsLen;
	segLen = _segLen;
    84e4:	add	r5, r7
	ledDefMode = STARTEND;
	
	blendMode = ADD;
	effectID = BLACK;  // no effect on segment
	e_spd = 0;
    84e6:	movs	r3, #0
	e_len = 0;
}

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
	uint16_t len = _endLed - _startLed + 1;
	startLed = _startLed;
    84e8:	mov	r2, r4
	initStartEnd(1,&startLed,len);
}
    84ea:	mov	r0, r4
	e_len = 0;
}

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
	uint16_t len = _endLed - _startLed + 1;
	startLed = _startLed;
    84ec:	strh.w	r8, [r2, #24]!
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
	startsLen = _startsLen;
	segLen = _segLen;
    84f0:	strh	r5, [r4, #18]
Segment::Segment(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	initStartEnd(_startsLen, _startLeds, _segLen);
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
    84f2:	str	r2, [r4, #20]
	startsLen = _startsLen;
	segLen = _segLen;
	ledDefMode = STARTEND;
	
	blendMode = ADD;
    84f4:	str	r6, [r4, #32]
	effectID = BLACK;  // no effect on segment
    84f6:	strb	r6, [r4, #28]
	initStartEnd(_startsLen, _startLeds, _segLen);
}

void Segment::initStartEnd(uint16_t _startsLen, uint16_t *_startLeds, uint16_t _segLen){
	ledArray = _startLeds;
	startsLen = _startsLen;
    84f8:	strh	r7, [r4, #26]
	segLen = _segLen;
	ledDefMode = STARTEND;
    84fa:	strb	r7, [r4, #16]
	
	blendMode = ADD;
	effectID = BLACK;  // no effect on segment
	e_spd = 0;
    84fc:	str	r3, [r4, #36]	; 0x24
	e_pos = 0;
    84fe:	str	r3, [r4, #44]	; 0x2c
	e_len = 0;
    8500:	str	r3, [r4, #48]	; 0x30

Segment::Segment(uint16_t _startLed, uint16_t _endLed){
	uint16_t len = _endLed - _startLed + 1;
	startLed = _startLed;
	initStartEnd(1,&startLed,len);
}
    8502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8506:	nop

00008508 <Segment::setStaticColor(Color)>:
	e_spd = spd*360;
	e_len = len;
	e_bri = bri;
}

void Segment::setStaticColor(Color c){
    8508:	sub	sp, #16
    850a:	push	{r3, r4, r5, r6, r7, lr}
    850c:	add	r4, sp, #28
	e_color = c;
    850e:	add.w	r6, r0, #56	; 0x38
	e_spd = spd*360;
	e_len = len;
	e_bri = bri;
}

void Segment::setStaticColor(Color c){
    8512:	mov	r7, r0
	e_color = c;
    8514:	mov	r5, r4
	e_spd = spd*360;
	e_len = len;
	e_bri = bri;
}

void Segment::setStaticColor(Color c){
    8516:	stmia.w	r4, {r1, r2, r3}
	e_color = c;
    851a:	ldmia	r5!, {r0, r1, r2}
    851c:	ldrh	r3, [r5, #0]
    851e:	str	r0, [r7, #56]	; 0x38
	if(c.red() == 0 && c.green() == 0 && c.blue() == 0){
    8520:	mov	r0, r4
	e_len = len;
	e_bri = bri;
}

void Segment::setStaticColor(Color c){
	e_color = c;
    8522:	strh	r3, [r6, #12]
    8524:	str	r1, [r6, #4]
    8526:	str	r2, [r6, #8]
	if(c.red() == 0 && c.green() == 0 && c.blue() == 0){
    8528:	bl	9a68 <Color::red()>
    852c:	cbz	r0, 8544 <Segment::setStaticColor(Color)+0x3c>
		setStaticBlack();
		return;
	}else if(c.red() == 255 && c.green() == 255 && c.blue() == 255){
    852e:	mov	r0, r4
    8530:	bl	9a68 <Color::red()>
    8534:	cmp	r0, #255	; 0xff
    8536:	beq.n	856e <Segment::setStaticColor(Color)+0x66>
		setStaticWhite();
		return;
	}
	effectID = STATIC;
    8538:	movs	r3, #1
    853a:	strb	r3, [r7, #28]
}
    853c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8540:	add	sp, #16
    8542:	bx	lr
	e_bri = bri;
}

void Segment::setStaticColor(Color c){
	e_color = c;
	if(c.red() == 0 && c.green() == 0 && c.blue() == 0){
    8544:	mov	r0, r4
    8546:	bl	9a8c <Color::green()>
    854a:	cmp	r0, #0
    854c:	bne.n	852e <Segment::setStaticColor(Color)+0x26>
    854e:	mov	r0, r4
    8550:	bl	9ab0 <Color::blue()>
    8554:	mov	r3, r0
    8556:	cmp	r0, #0
    8558:	bne.n	852e <Segment::setStaticColor(Color)+0x26>
	}
	effectID = STATIC;
}

void Segment::setStaticBlack(){
	effectID = BLACK;
    855a:	strb	r0, [r7, #28]
	e_color.setRGB(0,0,0);
    855c:	mov	r2, r3
    855e:	mov	r0, r6
    8560:	mov	r1, r3
    8562:	bl	986c <Color::setRGB(unsigned char, unsigned char, unsigned char)>
	}else if(c.red() == 255 && c.green() == 255 && c.blue() == 255){
		setStaticWhite();
		return;
	}
	effectID = STATIC;
}
    8566:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    856a:	add	sp, #16
    856c:	bx	lr
void Segment::setStaticColor(Color c){
	e_color = c;
	if(c.red() == 0 && c.green() == 0 && c.blue() == 0){
		setStaticBlack();
		return;
	}else if(c.red() == 255 && c.green() == 255 && c.blue() == 255){
    856e:	mov	r0, r4
    8570:	bl	9a8c <Color::green()>
    8574:	cmp	r0, #255	; 0xff
    8576:	bne.n	8538 <Segment::setStaticColor(Color)+0x30>
    8578:	mov	r0, r4
    857a:	bl	9ab0 <Color::blue()>
    857e:	cmp	r0, #255	; 0xff
    8580:	mov	r3, r0
    8582:	bne.n	8538 <Segment::setStaticColor(Color)+0x30>
	effectID = BLACK;
	e_color.setRGB(0,0,0);
}

void Segment::setStaticWhite(){
	effectID = WHITE;
    8584:	movs	r1, #8
	e_color.setRGB(255,255,255);
    8586:	mov	r0, r6
    8588:	mov	r2, r3
	effectID = BLACK;
	e_color.setRGB(0,0,0);
}

void Segment::setStaticWhite(){
	effectID = WHITE;
    858a:	strb	r1, [r7, #28]
	e_color.setRGB(255,255,255);
    858c:	mov	r1, r3
    858e:	bl	986c <Color::setRGB(unsigned char, unsigned char, unsigned char)>
	}else if(c.red() == 255 && c.green() == 255 && c.blue() == 255){
		setStaticWhite();
		return;
	}
	effectID = STATIC;
}
    8592:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8596:	add	sp, #16
    8598:	bx	lr
    859a:	nop

0000859c <Segment::setFadeInOut(Color, Color, float, float)>:
	e_fromColor = e_color;
	e_spd = spd;
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
    859c:	sub	sp, #16
    859e:	push	{r4, r5, r6, r7, lr}
    85a0:	add	r7, sp, #24
    85a2:	mov	r4, r0
	effectID = FADEINOUT;
    85a4:	movs	r0, #6
	e_toColor = cIn;
	e_outColor = cOut;
    85a6:	add	r5, sp, #40	; 0x28
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
	effectID = FADEINOUT;
	e_toColor = cIn;
    85a8:	mov	r6, r7
	e_spd = spd;
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
	effectID = FADEINOUT;
    85aa:	strb	r0, [r4, #28]
	e_fromColor = e_color;
	e_spd = spd;
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
    85ac:	stmia.w	r7, {r1, r2, r3}
	effectID = FADEINOUT;
	e_toColor = cIn;
    85b0:	ldmia	r6!, {r0, r1, r2}
    85b2:	str	r0, [r4, #88]	; 0x58
	e_outColor = cOut;
	e_fromColor = e_color;
    85b4:	mov	r3, r4
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
	effectID = FADEINOUT;
	e_toColor = cIn;
    85b6:	str	r1, [r4, #92]	; 0x5c
    85b8:	str	r2, [r4, #96]	; 0x60
    85ba:	ldrh	r6, [r6, #0]
	e_outColor = cOut;
    85bc:	ldmia	r5!, {r0, r1, r2}
    85be:	ldrh	r5, [r5, #0]
    85c0:	str	r2, [r4, #112]	; 0x70
	e_fromColor = e_color;
	e_spd = inSpd;
	e_outSpd = outSpd;
	e_pos = 0;
    85c2:	movs	r2, #0
	e_pos = 0;
}

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
	effectID = FADEINOUT;
	e_toColor = cIn;
    85c4:	strh.w	r6, [r4, #100]	; 0x64
	e_outColor = cOut;
    85c8:	str	r0, [r4, #104]	; 0x68
    85ca:	strh.w	r5, [r4, #116]	; 0x74
    85ce:	str	r1, [r4, #108]	; 0x6c
	e_fromColor = e_color;
    85d0:	ldr.w	r5, [r3, #56]!
    85d4:	ldr	r0, [r3, #4]
    85d6:	ldr	r1, [r3, #8]
    85d8:	str	r5, [r4, #72]	; 0x48
    85da:	str	r0, [r4, #76]	; 0x4c
    85dc:	str	r1, [r4, #80]	; 0x50
    85de:	ldrh	r3, [r3, #12]
	e_spd = inSpd;
    85e0:	vstr	s0, [r4, #36]	; 0x24

void Segment::setFadeInOut(Color cIn, Color cOut, float inSpd, float outSpd){
	effectID = FADEINOUT;
	e_toColor = cIn;
	e_outColor = cOut;
	e_fromColor = e_color;
    85e4:	strh.w	r3, [r4, #84]	; 0x54
	e_spd = inSpd;
	e_outSpd = outSpd;
    85e8:	vstr	s1, [r4, #40]	; 0x28
	e_pos = 0;
    85ec:	str	r2, [r4, #44]	; 0x2c
}
    85ee:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    85f2:	add	sp, #16
    85f4:	bx	lr
    85f6:	nop

000085f8 <Segment::setPulsate(Color, float)>:

void Segment::setFire(){
	effectID = FIRE;
}

void Segment::setPulsate(Color c, float spd) {
    85f8:	sub	sp, #16
    85fa:	push	{r4, r5, r6, r7, lr}
    85fc:	add	r6, sp, #24
    85fe:	mov	r5, r0
	effectID = PULSATE;
    8600:	movs	r0, #10
	e_toColor = c;
	e_spd = spd;
	e_pos = 0;
    8602:	mov.w	lr, #0
	effectID = FIRE;
}

void Segment::setPulsate(Color c, float spd) {
	effectID = PULSATE;
	e_toColor = c;
    8606:	mov	r4, r6
	e_spd = spd;
    8608:	vstr	s0, [r5, #36]	; 0x24
void Segment::setFire(){
	effectID = FIRE;
}

void Segment::setPulsate(Color c, float spd) {
	effectID = PULSATE;
    860c:	strb	r0, [r5, #28]
	e_toColor = c;
	e_spd = spd;
	e_pos = 0;
    860e:	str.w	lr, [r5, #44]	; 0x2c

void Segment::setFire(){
	effectID = FIRE;
}

void Segment::setPulsate(Color c, float spd) {
    8612:	stmia.w	r6, {r1, r2, r3}
	effectID = PULSATE;
	e_toColor = c;
    8616:	ldmia	r4!, {r0, r1, r2}
    8618:	ldrh	r3, [r4, #0]
    861a:	str	r0, [r5, #88]	; 0x58
    861c:	strh.w	r3, [r5, #100]	; 0x64
    8620:	str	r1, [r5, #92]	; 0x5c
    8622:	str	r2, [r5, #96]	; 0x60
	e_spd = spd;
	e_pos = 0;
}
    8624:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8628:	add	sp, #16
    862a:	bx	lr

0000862c <Segment::getCurrentColor()>:

Color Segment::getCurrentColor(){
	return e_color;
    862c:	adds	r1, #56	; 0x38
	e_toColor = c;
	e_spd = spd;
	e_pos = 0;
}

Color Segment::getCurrentColor(){
    862e:	push	{r4}
    8630:	mov	r4, r0
	return e_color;
    8632:	ldmia	r1, {r0, r1, r2, r3}
    8634:	stmia.w	r4, {r0, r1, r2, r3}
}
    8638:	mov	r0, r4
    863a:	ldr.w	r4, [sp], #4
    863e:	bx	lr

00008640 <Segment::setBeamControl(BeamControl*)>:
Color Segment::getOutColor(){
	return e_outColor;
}

void Segment::setBeamControl(BeamControl *_beamControl){
	beamControl = _beamControl;
    8640:	str	r1, [r0, #120]	; 0x78
    8642:	bx	lr

00008644 <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)>:
	newBeam->begin(this, dir, spd, spdMode, len, col, PULSE);
	addBeam(newBeam);
	return newBeam;
}

boolean Segment::setNNBeam(boolean dir, float spd, byte spdMode, float len, Color col, int power){
    8644:	sub	sp, #8
    8646:	push	{r4, r5, r6, r7, lr}
    8648:	vpush	{d8}
    864c:	sub	sp, #28
    864e:	mov	r5, r0
	Beam* newBeam = beamControl->freeBeam();
    8650:	ldr	r0, [r0, #120]	; 0x78
	newBeam->begin(this, dir, spd, spdMode, len, col, PULSE);
	addBeam(newBeam);
	return newBeam;
}

boolean Segment::setNNBeam(boolean dir, float spd, byte spdMode, float len, Color col, int power){
    8652:	mov	r6, r1
    8654:	vmov.f32	s16, s0
    8658:	mov	r7, r2
    865a:	vmov.f32	s17, s1
    865e:	str	r3, [sp, #60]	; 0x3c
	Beam* newBeam = beamControl->freeBeam();
    8660:	bl	97ec <BeamControl::freeBeam()>
	if(newBeam == NULL) return false;
    8664:	mov	r4, r0
    8666:	cbz	r0, 86ac <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x68>
	newBeam->begin(this, dir, spd, spdMode, len, col, NEURAL, power);
    8668:	ldr	r1, [sp, #76]	; 0x4c
    866a:	movs	r2, #2
    866c:	add	r3, sp, #60	; 0x3c
    866e:	vmov.f32	s1, s17
    8672:	str	r1, [sp, #20]
    8674:	vmov.f32	s0, s16
    8678:	str	r2, [sp, #16]
    867a:	ldmia	r3, {r0, r1, r2, r3}
    867c:	stmia.w	sp, {r0, r1, r2, r3}
    8680:	mov	r2, r6
    8682:	mov	r3, r7
    8684:	mov	r1, r5
    8686:	mov	r0, r4
    8688:	bl	902c <Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)>
	addBeam(newBeam);
	return true;
}

void Segment::addBeam(Beam* beam){  // add the beam to the end of the linked list
	if(beamAnchor == NULL){
    868c:	ldr	r2, [r5, #12]
    868e:	cbnz	r2, 8694 <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x50>
    8690:	b.n	86ae <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x6a>
		beamAnchor = beam;
	}else{
		Beam* beamWalker = beamAnchor;
		while( beamWalker->nextBeam != NULL ){
    8692:	mov	r2, r3
    8694:	ldr	r3, [r2, #44]	; 0x2c
    8696:	cmp	r3, #0
    8698:	bne.n	8692 <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x4e>
boolean Segment::setNNBeam(boolean dir, float spd, byte spdMode, float len, Color col, int power){
	Beam* newBeam = beamControl->freeBeam();
	if(newBeam == NULL) return false;
	newBeam->begin(this, dir, spd, spdMode, len, col, NEURAL, power);
	addBeam(newBeam);
	return true;
    869a:	movs	r0, #1
	}else{
		Beam* beamWalker = beamAnchor;
		while( beamWalker->nextBeam != NULL ){
			beamWalker = beamWalker->nextBeam;
		}
		beamWalker->nextBeam = beam;
    869c:	str	r4, [r2, #44]	; 0x2c
	Beam* newBeam = beamControl->freeBeam();
	if(newBeam == NULL) return false;
	newBeam->begin(this, dir, spd, spdMode, len, col, NEURAL, power);
	addBeam(newBeam);
	return true;
}
    869e:	add	sp, #28
    86a0:	vpop	{d8}
    86a4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    86a8:	add	sp, #8
    86aa:	bx	lr
    86ac:	b.n	869e <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x5a>

void Segment::addBeam(Beam* beam){  // add the beam to the end of the linked list
	if(beamAnchor == NULL){
		beamAnchor = beam;
    86ae:	str	r4, [r5, #12]
boolean Segment::setNNBeam(boolean dir, float spd, byte spdMode, float len, Color col, int power){
	Beam* newBeam = beamControl->freeBeam();
	if(newBeam == NULL) return false;
	newBeam->begin(this, dir, spd, spdMode, len, col, NEURAL, power);
	addBeam(newBeam);
	return true;
    86b0:	movs	r0, #1
    86b2:	b.n	869e <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)+0x5a>

000086b4 <Segment::updateBeams(float)>:
		}
		beamWalker->nextBeam = beam;
	}
}

void Segment::updateBeams(float dt){
    86b4:	push	{r3, r4, r5, r6, r7, lr}
	Beam* beamWalker = beamAnchor;  // initing the walker
    86b6:	ldr	r4, [r0, #12]
	Beam* beamWalker_previous = NULL; // there is no previous beam yet..
	while( beamWalker != NULL ){ // loop thought the list of beams and move them.
    86b8:	cbz	r4, 86da <Segment::updateBeams(float)+0x26>
    86ba:	vmov	r6, s0
    86be:	mov	r7, r0
    86c0:	movs	r5, #0
		if( !beamWalker->move(dt) ){   //if the beam is finished, remove it from the list
    86c2:	vmov	s0, r6
    86c6:	mov	r0, r4
    86c8:	bl	90ec <Beam::move(float)>
    86cc:	cbnz	r0, 86dc <Segment::updateBeams(float)+0x28>
			if(beamWalker_previous == NULL) beamAnchor = beamWalker->nextBeam;  // set the previous' beam next beam to the current's beam next beam, if the current is the first use the anchor
    86ce:	cbz	r5, 86e6 <Segment::updateBeams(float)+0x32>
			else beamWalker_previous->nextBeam = beamWalker->nextBeam;
    86d0:	ldr	r3, [r4, #44]	; 0x2c
    86d2:	str	r3, [r5, #44]	; 0x2c
    86d4:	ldr	r4, [r4, #44]	; 0x2c
}

void Segment::updateBeams(float dt){
	Beam* beamWalker = beamAnchor;  // initing the walker
	Beam* beamWalker_previous = NULL; // there is no previous beam yet..
	while( beamWalker != NULL ){ // loop thought the list of beams and move them.
    86d6:	cmp	r4, #0
    86d8:	bne.n	86c2 <Segment::updateBeams(float)+0xe>
    86da:	pop	{r3, r4, r5, r6, r7, pc}
    86dc:	mov	r5, r4
    86de:	ldr	r4, [r4, #44]	; 0x2c
    86e0:	cmp	r4, #0
    86e2:	bne.n	86c2 <Segment::updateBeams(float)+0xe>
    86e4:	b.n	86da <Segment::updateBeams(float)+0x26>
		if( !beamWalker->move(dt) ){   //if the beam is finished, remove it from the list
			if(beamWalker_previous == NULL) beamAnchor = beamWalker->nextBeam;  // set the previous' beam next beam to the current's beam next beam, if the current is the first use the anchor
    86e6:	ldr	r4, [r4, #44]	; 0x2c
    86e8:	str	r4, [r7, #12]
}

void Segment::updateBeams(float dt){
	Beam* beamWalker = beamAnchor;  // initing the walker
	Beam* beamWalker_previous = NULL; // there is no previous beam yet..
	while( beamWalker != NULL ){ // loop thought the list of beams and move them.
    86ea:	cmp	r4, #0
    86ec:	bne.n	86c2 <Segment::updateBeams(float)+0xe>
    86ee:	b.n	86da <Segment::updateBeams(float)+0x26>

000086f0 <Segment::move(float)>:
		beamWalker->draw(setPixel,getPixel);
		beamWalker = beamWalker->nextBeam;
	}
}

void Segment::move(float dt){
    86f0:	push	{r4, lr}
    86f2:	mov	r4, r0
    86f4:	vpush	{d8}
    86f8:	sub	sp, #8
    86fa:	vmov.f32	s16, s0
	updateBeams(dt);
    86fe:	bl	86b4 <Segment::updateBeams(float)>
	
	switch (effectID) {
    8702:	ldrb	r3, [r4, #28]
    8704:	subs	r3, #2
    8706:	cmp	r3, #8
    8708:	bhi.n	8746 <Segment::move(float)+0x56>
    870a:	tbb	[pc, r3]
    870e:	.short	0x1c20
    8710:	.word	0x2c730520
    8714:	.short	0x1c1c
    8716:	.byte	0x5e
    8717:	.byte	0x00
		case RAINBOW:{
			e_pos += e_spd*dt;
			break;
		}
		case FADE:{
			e_pos += e_spd*dt;
    8718:	vldr	s15, [r4, #44]	; 0x2c
			if(e_pos >= 1){
    871c:	vmov.f32	s14, #112	; 0x3f800000  1.0
		case RAINBOW:{
			e_pos += e_spd*dt;
			break;
		}
		case FADE:{
			e_pos += e_spd*dt;
    8720:	vldr	s13, [r4, #36]	; 0x24
    8724:	vfma.f32	s15, s16, s13
			if(e_pos >= 1){
    8728:	vcmpe.f32	s15, s14
		case RAINBOW:{
			e_pos += e_spd*dt;
			break;
		}
		case FADE:{
			e_pos += e_spd*dt;
    872c:	vstr	s15, [r4, #44]	; 0x2c
			if(e_pos >= 1){
    8730:	vmrs	APSR_nzcv, fpscr
    8734:	blt.n	8746 <Segment::move(float)+0x56>
				setStaticColor(e_toColor);
    8736:	ldr	r2, [r4, #100]	; 0x64
    8738:	add.w	r3, r4, #88	; 0x58
    873c:	mov	r0, r4
    873e:	str	r2, [sp, #0]
    8740:	ldmia	r3, {r1, r2, r3}
    8742:	bl	8508 <Segment::setStaticColor(Color)>
		default:{
			
		}
		break;
	}
}
    8746:	add	sp, #8
    8748:	vpop	{d8}
    874c:	pop	{r4, pc}
		case SINES:{
			e_pos += e_spd*dt;
			break;
		}
		case RAINBOW:{
			e_pos += e_spd*dt;
    874e:	vldr	s15, [r4, #44]	; 0x2c
    8752:	vldr	s14, [r4, #36]	; 0x24
    8756:	vfma.f32	s15, s16, s14
    875a:	vstr	s15, [r4, #44]	; 0x2c
		default:{
			
		}
		break;
	}
}
    875e:	add	sp, #8
    8760:	vpop	{d8}
    8764:	pop	{r4, pc}
			}
			break;
		}
		case WIPE:{
			float spdBoost = e_spd;
			if(e_outSpd>0){
    8766:	vldr	s12, [r4, #40]	; 0x28
				setStaticColor(e_outColor);
			}
			break;
		}
		case WIPE:{
			float spdBoost = e_spd;
    876a:	vldr	s13, [r4, #36]	; 0x24
			if(e_outSpd>0){
    876e:	vcmpe.f32	s12, #0.0
    8772:	vmrs	APSR_nzcv, fpscr
    8776:	ble.n	8836 <Segment::move(float)+0x146>
				spdBoost = (1-e_pos)*e_spd*(e_outSpd) + e_spd*(1-e_outSpd);
    8778:	vmov.f32	s14, #112	; 0x3f800000  1.0
    877c:	vldr	s15, [r4, #44]	; 0x2c
    8780:	vsub.f32	s11, s14, s12
    8784:	vsub.f32	s14, s14, s15
    8788:	vmul.f32	s11, s11, s13
    878c:	vmul.f32	s14, s14, s13
    8790:	vmov.f32	s13, s11
    8794:	vfma.f32	s13, s12, s14
			}else if(e_outSpd<0){
				spdBoost = e_pos*e_spd*(-e_outSpd) + e_spd*(1+e_outSpd);
			}
			e_pos += spdBoost*dt;
    8798:	vfma.f32	s15, s13, s16
			if(e_pos >= 1 || e_pos <= 0){
    879c:	vmov.f32	s14, #112	; 0x3f800000  1.0
    87a0:	vcmpe.f32	s15, s14
			if(e_outSpd>0){
				spdBoost = (1-e_pos)*e_spd*(e_outSpd) + e_spd*(1-e_outSpd);
			}else if(e_outSpd<0){
				spdBoost = e_pos*e_spd*(-e_outSpd) + e_spd*(1+e_outSpd);
			}
			e_pos += spdBoost*dt;
    87a4:	vstr	s15, [r4, #44]	; 0x2c
			if(e_pos >= 1 || e_pos <= 0){
    87a8:	vmrs	APSR_nzcv, fpscr
    87ac:	bge.n	87b8 <Segment::move(float)+0xc8>
    87ae:	vcmpe.f32	s15, #0.0
    87b2:	vmrs	APSR_nzcv, fpscr
    87b6:	bhi.n	8746 <Segment::move(float)+0x56>
				setStaticColor(e_color);
    87b8:	ldr	r2, [r4, #68]	; 0x44
    87ba:	add.w	r3, r4, #56	; 0x38
    87be:	mov	r0, r4
    87c0:	str	r2, [sp, #0]
    87c2:	ldmia	r3, {r1, r2, r3}
    87c4:	bl	8508 <Segment::setStaticColor(Color)>
    87c8:	b.n	8746 <Segment::move(float)+0x56>
			}
			break;
		}
		case PULSATE: {
			e_pos += e_spd * dt;
    87ca:	vldr	s15, [r4, #44]	; 0x2c
			if (e_pos >= 2) {
    87ce:	vmov.f32	s14, #0	; 0x40000000  2.0
				setStaticColor(e_color);
			}
			break;
		}
		case PULSATE: {
			e_pos += e_spd * dt;
    87d2:	vldr	s13, [r4, #36]	; 0x24
    87d6:	vfma.f32	s15, s16, s13
			if (e_pos >= 2) {
    87da:	vcmpe.f32	s15, s14
    87de:	vmrs	APSR_nzcv, fpscr
				e_pos -= 2;
    87e2:	it	ge
    87e4:	vsubge.f32	s15, s15, s14
    87e8:	vstr	s15, [r4, #44]	; 0x2c
		default:{
			
		}
		break;
	}
}
    87ec:	add	sp, #8
    87ee:	vpop	{d8}
    87f2:	pop	{r4, pc}
				setStaticColor(e_toColor);
			}
			break;
		}
		case FADEINOUT:{
			e_pos +=  ((e_pos <= 1) ? e_spd : e_outSpd) * dt;
    87f4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    87f8:	vldr	s15, [r4, #44]	; 0x2c
    87fc:	vcmpe.f32	s15, s14
    8800:	vmrs	APSR_nzcv, fpscr
    8804:	ite	ls
    8806:	vldrls	s14, [r4, #36]	; 0x24
    880a:	vldrhi	s14, [r4, #40]	; 0x28
    880e:	vfma.f32	s15, s14, s16
			if(e_pos >= 2){
    8812:	vmov.f32	s14, #0	; 0x40000000  2.0
    8816:	vcmpe.f32	s15, s14
				setStaticColor(e_toColor);
			}
			break;
		}
		case FADEINOUT:{
			e_pos +=  ((e_pos <= 1) ? e_spd : e_outSpd) * dt;
    881a:	vstr	s15, [r4, #44]	; 0x2c
			if(e_pos >= 2){
    881e:	vmrs	APSR_nzcv, fpscr
    8822:	blt.n	8746 <Segment::move(float)+0x56>
				setStaticColor(e_outColor);
    8824:	ldr	r2, [r4, #116]	; 0x74
    8826:	add.w	r3, r4, #104	; 0x68
    882a:	mov	r0, r4
    882c:	str	r2, [sp, #0]
    882e:	ldmia	r3, {r1, r2, r3}
    8830:	bl	8508 <Segment::setStaticColor(Color)>
    8834:	b.n	8746 <Segment::move(float)+0x56>
		}
		case WIPE:{
			float spdBoost = e_spd;
			if(e_outSpd>0){
				spdBoost = (1-e_pos)*e_spd*(e_outSpd) + e_spd*(1-e_outSpd);
			}else if(e_outSpd<0){
    8836:	bmi.n	883e <Segment::move(float)+0x14e>
    8838:	vldr	s15, [r4, #44]	; 0x2c
    883c:	b.n	8798 <Segment::move(float)+0xa8>
				spdBoost = e_pos*e_spd*(-e_outSpd) + e_spd*(1+e_outSpd);
    883e:	vmov.f32	s14, #112	; 0x3f800000  1.0
    8842:	vldr	s15, [r4, #44]	; 0x2c
    8846:	vmul.f32	s11, s13, s15
    884a:	vadd.f32	s14, s12, s14
    884e:	vmul.f32	s14, s14, s13
    8852:	vfms.f32	s14, s12, s11
    8856:	vmov.f32	s13, s14
    885a:	b.n	8798 <Segment::move(float)+0xa8>

0000885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>:
	}
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    885c:	sub	sp, #8
    885e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8862:	sub	sp, #52	; 0x34
	uint16_t pixelIDs[startsLen];
    8864:	ldrh	r6, [r0, #26]
	}
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    8866:	add	r7, sp, #8
	// }
	// return ledArray[pixID];
// }

void Segment::getPixelID(uint16_t pixID, uint16_t* arraySize, uint16_t* returnArray){
	if(ledDefMode == STARTEND){
    8868:	ldrb.w	lr, [r0, #16]
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	uint16_t pixelIDs[startsLen];
    886c:	lsls	r5, r6, #1
    886e:	add.w	r4, r5, #8
    8872:	bic.w	r4, r4, #7
    8876:	sub.w	sp, sp, r4
	}
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    887a:	add.w	r4, r7, #80	; 0x50
	uint16_t pixelIDs[startsLen];
    887e:	add.w	r9, sp, #8
	}
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    8882:	stmia.w	r4, {r2, r3}
	// }
	// return ledArray[pixID];
// }

void Segment::getPixelID(uint16_t pixID, uint16_t* arraySize, uint16_t* returnArray){
	if(ledDefMode == STARTEND){
    8886:	cmp.w	lr, #0
    888a:	bne.n	892c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xd0>
		for(int i=0; i<startsLen; i++){
			returnArray[i] = ledArray[i] + pixID;
		}
		*arraySize = startsLen;
	}else{
		returnArray[0] = ledArray[pixID];
    888c:	uxth	r1, r1
    888e:	ldr	r3, [r0, #20]
    8890:	movs	r2, #1
    8892:	ldrh.w	r8, [r3, r1, lsl #1]
    8896:	str	r2, [r7, #4]
    8898:	strh.w	r8, [r9]
    889c:	mov	sl, r0
	}
	
	drawBeams(setPixel,getPixel);
}

void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    889e:	movs	r5, #0
    88a0:	add.w	r4, r7, #8
    88a4:	b.n	88d8 <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x7c>
		Color c = _c;
		if(blendMode != NORMAL){
			Color prevCol = getPixel(pixelIDs[i]);
			
			if(blendMode == ADD) c.add(prevCol);
			else if(blendMode == MULTIPLY) c.multiply(prevCol);
    88a6:	cmp	r3, #2
    88a8:	beq.n	891a <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xbe>
		}
		setPixel( pixelIDs[i], c.red(), c.green(), c.blue() );
    88aa:	mov	r0, r4
void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	uint16_t pixelIDs[startsLen];
	uint16_t arraySize = 0;
	getPixelID(segPixel,&arraySize,pixelIDs);
	
	for(int i=0; i<arraySize; i++){
    88ac:	adds	r5, #1
			Color prevCol = getPixel(pixelIDs[i]);
			
			if(blendMode == ADD) c.add(prevCol);
			else if(blendMode == MULTIPLY) c.multiply(prevCol);
		}
		setPixel( pixelIDs[i], c.red(), c.green(), c.blue() );
    88ae:	bl	9a68 <Color::red()>
    88b2:	mov	r6, r0
    88b4:	mov	r0, r4
    88b6:	bl	9a8c <Color::green()>
    88ba:	mov	fp, r0
    88bc:	mov	r0, r4
    88be:	bl	9ab0 <Color::blue()>
    88c2:	mov	r1, r6
    88c4:	mov	r3, r0
    88c6:	mov	r2, fp
    88c8:	mov	r0, r8
    88ca:	ldr	r6, [r7, #96]	; 0x60
    88cc:	blx	r6
void Segment::blendSetPixel(int segPixel, Color _c, void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	uint16_t pixelIDs[startsLen];
	uint16_t arraySize = 0;
	getPixelID(segPixel,&arraySize,pixelIDs);
	
	for(int i=0; i<arraySize; i++){
    88ce:	ldr	r3, [r7, #4]
    88d0:	cmp	r3, r5
    88d2:	ble.n	890e <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb2>
    88d4:	ldrh.w	r8, [r9, #2]!
		Color c = _c;
    88d8:	add.w	r3, r7, #80	; 0x50
		if(blendMode != NORMAL){
    88dc:	ldr.w	r6, [sl, #32]
	uint16_t pixelIDs[startsLen];
	uint16_t arraySize = 0;
	getPixelID(segPixel,&arraySize,pixelIDs);
	
	for(int i=0; i<arraySize; i++){
		Color c = _c;
    88e0:	ldmia	r3, {r0, r1, r2, r3}
		if(blendMode != NORMAL){
    88e2:	cmp	r6, #1
	uint16_t pixelIDs[startsLen];
	uint16_t arraySize = 0;
	getPixelID(segPixel,&arraySize,pixelIDs);
	
	for(int i=0; i<arraySize; i++){
		Color c = _c;
    88e4:	stmia.w	r4, {r0, r1, r2, r3}
		if(blendMode != NORMAL){
			Color prevCol = getPixel(pixelIDs[i]);
    88e8:	mov	r1, r8
    88ea:	add.w	r0, r7, #24
	uint16_t arraySize = 0;
	getPixelID(segPixel,&arraySize,pixelIDs);
	
	for(int i=0; i<arraySize; i++){
		Color c = _c;
		if(blendMode != NORMAL){
    88ee:	beq.n	88aa <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4e>
			Color prevCol = getPixel(pixelIDs[i]);
    88f0:	ldr	r3, [r7, #100]	; 0x64
    88f2:	blx	r3
			
			if(blendMode == ADD) c.add(prevCol);
    88f4:	ldr.w	r3, [sl, #32]
    88f8:	cmp	r3, #0
    88fa:	bne.n	88a6 <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4a>
    88fc:	ldr	r3, [r7, #36]	; 0x24
    88fe:	mov	r0, r4
    8900:	str	r3, [sp, #0]
    8902:	add.w	r3, r7, #24
    8906:	ldmia	r3, {r1, r2, r3}
    8908:	bl	9ad4 <Color::add(Color)>
    890c:	b.n	88aa <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4e>
		}
		setPixel( pixelIDs[i], c.red(), c.green(), c.blue() );
	}
	
	
}
    890e:	adds	r7, #44	; 0x2c
    8910:	mov	sp, r7
    8912:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8916:	add	sp, #8
    8918:	bx	lr
		Color c = _c;
		if(blendMode != NORMAL){
			Color prevCol = getPixel(pixelIDs[i]);
			
			if(blendMode == ADD) c.add(prevCol);
			else if(blendMode == MULTIPLY) c.multiply(prevCol);
    891a:	ldr	r3, [r7, #36]	; 0x24
    891c:	mov	r0, r4
    891e:	str	r3, [sp, #0]
    8920:	add.w	r3, r7, #24
    8924:	ldmia	r3, {r1, r2, r3}
    8926:	bl	9e68 <Color::multiply(Color)>
    892a:	b.n	88aa <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4e>
	// return ledArray[pixID];
// }

void Segment::getPixelID(uint16_t pixID, uint16_t* arraySize, uint16_t* returnArray){
	if(ledDefMode == STARTEND){
		for(int i=0; i<startsLen; i++){
    892c:	cmp	r6, #0
    892e:	beq.n	890e <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb2>
    8930:	ldr	r2, [r0, #20]
    8932:	sub.w	r4, r9, #2
    8936:	add	r5, r2
			returnArray[i] = ledArray[i] + pixID;
    8938:	ldrh.w	r3, [r2], #2
    893c:	add	r3, r1
	// return ledArray[pixID];
// }

void Segment::getPixelID(uint16_t pixID, uint16_t* arraySize, uint16_t* returnArray){
	if(ledDefMode == STARTEND){
		for(int i=0; i<startsLen; i++){
    893e:	cmp	r5, r2
			returnArray[i] = ledArray[i] + pixID;
    8940:	strh.w	r3, [r4, #2]!
	// return ledArray[pixID];
// }

void Segment::getPixelID(uint16_t pixID, uint16_t* arraySize, uint16_t* returnArray){
	if(ledDefMode == STARTEND){
		for(int i=0; i<startsLen; i++){
    8944:	bne.n	8938 <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xdc>
    8946:	str	r6, [r7, #4]
    8948:	ldrh.w	r8, [r9]
    894c:	b.n	889c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x40>
    894e:	nop

00008950 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>:
		}
		break;
	}
}

void Segment::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    8950:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8954:	vpush	{d8-d13}
	
	switch (effectID) {
    8958:	ldrb	r3, [r0, #28]
		}
		break;
	}
}

void Segment::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    895a:	sub	sp, #52	; 0x34
    895c:	mov	r4, r0
    895e:	mov	r5, r1
    8960:	mov	r6, r2
	
	switch (effectID) {
    8962:	cmp	r3, #10
    8964:	bhi.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8966:	tbh	[pc, r3, lsl #1]
    896a:	.short	0x007a
    896c:	.word	0x00b30098
    8970:	.word	0x012500e8
    8974:	.word	0x01950195
    8978:	.word	0x005c01ce
    897c:	.word	0x000b004d
				*/
			break;
		}
		case PULSATE: {
			float fade = e_pos;
			if (fade > 1) fade = 1 - (fade - 1);
    8980:	vmov.f32	s15, #112	; 0x3f800000  1.0
			}
				*/
			break;
		}
		case PULSATE: {
			float fade = e_pos;
    8984:	vldr	s16, [r0, #44]	; 0x2c
			if (fade > 1) fade = 1 - (fade - 1);
    8988:	vcmpe.f32	s16, s15
    898c:	vmrs	APSR_nzcv, fpscr
    8990:	ble.n	899a <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4a>
    8992:	vsub.f32	s16, s16, s15
    8996:	vsub.f32	s16, s15, s16
			e_color.fade(e_toColor, Color(0, 0, 0, RGB_MODE), fade);
    899a:	mov.w	r9, #0
    899e:	add.w	r8, sp, #32
    89a2:	add.w	r7, r4, #56	; 0x38
    89a6:	mov	r3, r9
    89a8:	mov	r2, r9
    89aa:	mov	r1, r9
    89ac:	mov	r0, r8
    89ae:	str.w	r9, [sp]
    89b2:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
    89b6:	add.w	lr, sp, #4
    89ba:	ldr.w	ip, [r4, #100]	; 0x64
    89be:	vmov.f32	s0, s16
    89c2:	ldmia.w	r8, {r0, r1, r2, r3}
    89c6:	stmia.w	lr, {r0, r1, r2, r3}
    89ca:	add.w	r3, r4, #88	; 0x58
    89ce:	str.w	ip, [sp]
    89d2:	mov	r0, r7
    89d4:	ldmia	r3, {r1, r2, r3}
    89d6:	bl	a250 <Color::fade(Color, Color, float)>
			for (int i = 0; i<segLen; i++) {
    89da:	ldrh	r3, [r4, #18]
    89dc:	cbz	r3, 8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    89de:	add.w	r8, r4, #64	; 0x40
				blendSetPixel(i, e_color, setPixel, getPixel);
    89e2:	str	r6, [sp, #12]
    89e4:	str	r5, [sp, #8]
    89e6:	ldmia.w	r8, {r0, r1}
    89ea:	ldmia.w	r7, {r2, r3}
    89ee:	stmia.w	sp, {r0, r1}
    89f2:	mov	r1, r9
    89f4:	mov	r0, r4
    89f6:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
		}
		case PULSATE: {
			float fade = e_pos;
			if (fade > 1) fade = 1 - (fade - 1);
			e_color.fade(e_toColor, Color(0, 0, 0, RGB_MODE), fade);
			for (int i = 0; i<segLen; i++) {
    89fa:	add.w	r9, r9, #1
    89fe:	ldrh	r3, [r4, #18]
    8a00:	cmp	r3, r9
    8a02:	bgt.n	89e2 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x92>
		beamWalker = beamWalker->nextBeam;  // go to the next beam
	}
}

void Segment::drawBeams(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	Beam* beamWalker = beamAnchor;
    8a04:	ldr	r4, [r4, #12]
	while( beamWalker != NULL ){
    8a06:	cbz	r4, 8a18 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xc8>
		beamWalker->draw(setPixel,getPixel);
    8a08:	mov	r0, r4
    8a0a:	mov	r2, r6
    8a0c:	mov	r1, r5
    8a0e:	bl	91a8 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
		beamWalker = beamWalker->nextBeam;
    8a12:	ldr	r4, [r4, #44]	; 0x2c
	}
}

void Segment::drawBeams(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	Beam* beamWalker = beamAnchor;
	while( beamWalker != NULL ){
    8a14:	cmp	r4, #0
    8a16:	bne.n	8a08 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb8>
					
		break;
	}
	
	drawBeams(setPixel,getPixel);
}
    8a18:	add	sp, #52	; 0x34
    8a1a:	vpop	{d8-d13}
    8a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
			break;
		}
		
		case WHITE:{
			if(blendMode!=MULTIPLY){
    8a22:	ldr	r3, [r0, #32]
    8a24:	cmp	r3, #2
    8a26:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
				for(int i=0; i<segLen; i++){
    8a28:	ldrh	r3, [r0, #18]
    8a2a:	cmp	r3, #0
    8a2c:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8a2e:	mov.w	r9, #0
    8a32:	add.w	r8, r0, #64	; 0x40
    8a36:	add.w	r7, r0, #56	; 0x38
					blendSetPixel(i,e_color,setPixel,getPixel);
    8a3a:	str	r6, [sp, #12]
    8a3c:	str	r5, [sp, #8]
    8a3e:	ldmia.w	r8, {r0, r1}
    8a42:	ldmia.w	r7, {r2, r3}
    8a46:	stmia.w	sp, {r0, r1}
    8a4a:	mov	r1, r9
    8a4c:	mov	r0, r4
    8a4e:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			break;
		}
		
		case WHITE:{
			if(blendMode!=MULTIPLY){
				for(int i=0; i<segLen; i++){
    8a52:	add.w	r9, r9, #1
    8a56:	ldrh	r3, [r4, #18]
    8a58:	cmp	r3, r9
    8a5a:	bgt.n	8a3a <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xea>
    8a5c:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
void Segment::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	
	switch (effectID) {
		
		case BLACK:{
			if(blendMode!=ADD){
    8a5e:	ldr	r3, [r0, #32]
    8a60:	cmp	r3, #0
    8a62:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
				for(int i=0; i<segLen; i++){
    8a64:	ldrh	r3, [r0, #18]
    8a66:	cmp	r3, #0
    8a68:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8a6a:	mov.w	r9, #0
    8a6e:	add.w	r8, r0, #64	; 0x40
    8a72:	add.w	r7, r0, #56	; 0x38
					blendSetPixel(i,e_color,setPixel,getPixel);
    8a76:	str	r6, [sp, #12]
    8a78:	str	r5, [sp, #8]
    8a7a:	ldmia.w	r8, {r0, r1}
    8a7e:	ldmia.w	r7, {r2, r3}
    8a82:	stmia.w	sp, {r0, r1}
    8a86:	mov	r1, r9
    8a88:	mov	r0, r4
    8a8a:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
	
	switch (effectID) {
		
		case BLACK:{
			if(blendMode!=ADD){
				for(int i=0; i<segLen; i++){
    8a8e:	add.w	r9, r9, #1
    8a92:	ldrh	r3, [r4, #18]
    8a94:	cmp	r3, r9
    8a96:	bgt.n	8a76 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x126>
    8a98:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			}
			break;
		}
			
		case STATIC:{
			for(int i=0; i<segLen; i++){
    8a9a:	ldrh	r3, [r0, #18]
    8a9c:	cmp	r3, #0
    8a9e:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8aa0:	mov.w	r9, #0
    8aa4:	add.w	r8, r0, #64	; 0x40
    8aa8:	add.w	r7, r0, #56	; 0x38
				blendSetPixel(i,e_color,setPixel,getPixel);
    8aac:	ldmia.w	r8, {r0, r1}
    8ab0:	str	r6, [sp, #12]
    8ab2:	str	r5, [sp, #8]
    8ab4:	stmia.w	sp, {r0, r1}
    8ab8:	mov	r1, r9
    8aba:	mov	r0, r4
			}
			break;
		}
			
		case STATIC:{
			for(int i=0; i<segLen; i++){
    8abc:	add.w	r9, r9, #1
				blendSetPixel(i,e_color,setPixel,getPixel);
    8ac0:	ldmia.w	r7, {r2, r3}
    8ac4:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			}
			break;
		}
			
		case STATIC:{
			for(int i=0; i<segLen; i++){
    8ac8:	ldrh	r3, [r4, #18]
    8aca:	cmp	r3, r9
    8acc:	bgt.n	8aac <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x15c>
    8ace:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			}
			break;
		}
			
		case RAINBOW:{
			Color rainCol;
    8ad0:	add	r7, sp, #32
    8ad2:	mov	r0, r7
    8ad4:	bl	9820 <Color::Color()>
			for(int i=0; i<segLen; i++){
    8ad8:	ldrh	r3, [r4, #18]
    8ada:	cmp	r3, #0
    8adc:	beq.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
				rainCol.setHSB( e_pos+i*(10/e_len), 100, e_bri);
    8ade:	vmov.f32	s16, #36	; 0x41200000  10.0
			break;
		}
			
		case RAINBOW:{
			Color rainCol;
			for(int i=0; i<segLen; i++){
    8ae2:	mov.w	r8, #0
    8ae6:	add.w	r9, sp, #40	; 0x28
				rainCol.setHSB( e_pos+i*(10/e_len), 100, e_bri);
    8aea:	vldr	s12, [r4, #48]	; 0x30
    8aee:	vmov	s15, r8
    8af2:	movs	r2, #100	; 0x64
    8af4:	ldrb.w	r3, [r4, #52]	; 0x34
    8af8:	vdiv.f32	s14, s16, s12
    8afc:	mov	r0, r7
    8afe:	vcvt.f32.s32	s13, s15
    8b02:	vldr	s15, [r4, #44]	; 0x2c
    8b06:	vfma.f32	s15, s13, s14
    8b0a:	vcvt.u32.f32	s15, s15
    8b0e:	vmov	r1, s15
    8b12:	bl	9880 <Color::setHSB(unsigned int, unsigned char, unsigned char)>
				blendSetPixel(i,rainCol,setPixel,getPixel);
    8b16:	str	r6, [sp, #12]
    8b18:	str	r5, [sp, #8]
    8b1a:	ldmia.w	r9, {r0, r1}
    8b1e:	ldmia.w	r7, {r2, r3}
    8b22:	stmia.w	sp, {r0, r1}
    8b26:	mov	r1, r8
    8b28:	mov	r0, r4
    8b2a:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			break;
		}
			
		case RAINBOW:{
			Color rainCol;
			for(int i=0; i<segLen; i++){
    8b2e:	add.w	r8, r8, #1
    8b32:	ldrh	r3, [r4, #18]
    8b34:	cmp	r3, r8
    8b36:	bgt.n	8aea <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x19a>
    8b38:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			}
			break;
		}
		
		case GRADIENT:{
			for(int i=0; i<segLen; i++){
    8b3a:	ldrh	r3, [r0, #18]
    8b3c:	cmp	r3, #0
    8b3e:	beq.w	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8b42:	add.w	r2, r0, #72	; 0x48
    8b46:	add.w	r7, r0, #56	; 0x38
    8b4a:	mov.w	r9, #0
    8b4e:	add.w	r8, r0, #64	; 0x40
    8b52:	add.w	fp, sp, #4
    8b56:	add.w	sl, r0, #88	; 0x58
    8b5a:	str	r2, [sp, #24]
				float fade = i*1./(segLen-1);
				e_color.fade(e_fromColor, e_toColor, fade);
    8b5c:	vmov	s15, r9
    8b60:	subs	r3, #1
    8b62:	ldr.w	lr, [r4, #84]	; 0x54
    8b66:	vcvt.f64.s32	d6, s15
    8b6a:	vmov	s15, r3
    8b6e:	vcvt.f64.s32	d7, s15
    8b72:	ldmia.w	sl, {r0, r1, r2, r3}
    8b76:	vdiv.f64	d0, d6, d7
    8b7a:	stmia.w	fp, {r0, r1, r2, r3}
    8b7e:	ldr	r3, [sp, #24]
    8b80:	mov	r0, r7
    8b82:	str.w	lr, [sp]
    8b86:	ldmia	r3, {r1, r2, r3}
    8b88:	vcvt.f32.f64	s0, d0
    8b8c:	bl	a250 <Color::fade(Color, Color, float)>
				
				blendSetPixel(i,e_color,setPixel,getPixel);
    8b90:	str	r6, [sp, #12]
    8b92:	str	r5, [sp, #8]
    8b94:	ldmia.w	r8, {r0, r1}
    8b98:	ldmia.w	r7, {r2, r3}
    8b9c:	stmia.w	sp, {r0, r1}
    8ba0:	mov	r1, r9
    8ba2:	mov	r0, r4
    8ba4:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			}
			break;
		}
		
		case GRADIENT:{
			for(int i=0; i<segLen; i++){
    8ba8:	add.w	r9, r9, #1
    8bac:	ldrh	r3, [r4, #18]
    8bae:	cmp	r3, r9
    8bb0:	bgt.n	8b5c <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x20c>
    8bb2:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			}
			break;
		}
		
		case SINES:{
			for(int i=0; i<segLen; i++){
    8bb4:	ldrh	r3, [r0, #18]
    8bb6:	cmp	r3, #0
    8bb8:	beq.w	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8bbc:	add.w	r9, sp, #40	; 0x28
    8bc0:	add.w	sl, r0, #56	; 0x38
    8bc4:	mov.w	r8, #0
    8bc8:	add	r7, sp, #32
    8bca:	str.w	r9, [sp, #28]
				float multi = (sin(i*0.5 + e_pos)+1) * (sin(i*0.3 + e_pos*-1.2)+1) /4 * 0.7 + 0.3;
    8bce:	vldr	d11, [pc, #760]	; 8ec8 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x578>
    8bd2:	vldr	d9, [pc, #764]	; 8ed0 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x580>
				Color sineCol(e_color.hue(), e_color.saturation(), e_color.brightness()*multi, HSB_MODE);
    8bd6:	vldr	d10, [pc, #768]	; 8ed8 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x588>
			break;
		}
		
		case SINES:{
			for(int i=0; i<segLen; i++){
				float multi = (sin(i*0.5 + e_pos)+1) * (sin(i*0.3 + e_pos*-1.2)+1) /4 * 0.7 + 0.3;
    8bda:	vldr	s24, [r4, #44]	; 0x2c
    8bde:	vmov	s15, r8
    8be2:	vcvt.f64.f32	d12, s24
    8be6:	vcvt.f64.s32	d13, s15
    8bea:	vmov.f64	d7, #96	; 0x3f000000  0.5
    8bee:	vmov.f64	d0, d12
    8bf2:	vfma.f64	d0, d13, d7
    8bf6:	bl	c368 <sin>
    8bfa:	vmov.f64	d8, d0
    8bfe:	vmul.f64	d0, d12, d11
    8c02:	vfma.f64	d0, d13, d9
    8c06:	bl	c368 <sin>
				Color sineCol(e_color.hue(), e_color.saturation(), e_color.brightness()*multi, HSB_MODE);
    8c0a:	mov	r0, sl
			break;
		}
		
		case SINES:{
			for(int i=0; i<segLen; i++){
				float multi = (sin(i*0.5 + e_pos)+1) * (sin(i*0.3 + e_pos*-1.2)+1) /4 * 0.7 + 0.3;
    8c0c:	vmov.f64	d12, d0
				Color sineCol(e_color.hue(), e_color.saturation(), e_color.brightness()*multi, HSB_MODE);
    8c10:	bl	a3e0 <Color::hue()>
    8c14:	mov	fp, r0
    8c16:	mov	r0, sl
    8c18:	bl	a408 <Color::saturation()>
    8c1c:	mov	r9, r0
    8c1e:	mov	r0, sl
    8c20:	bl	a430 <Color::brightness()>
    8c24:	vmov.f64	d7, #112	; 0x3f800000  1.0
    8c28:	vmov.f64	d6, #80	; 0x3e800000  0.250
    8c2c:	vmov	s11, r0
    8c30:	movs	r3, #1
    8c32:	mov	r2, r9
    8c34:	vadd.f64	d8, d8, d7
    8c38:	mov	r1, fp
    8c3a:	vadd.f64	d7, d12, d7
    8c3e:	str	r3, [sp, #0]
    8c40:	vcvt.f32.s32	s11, s11
    8c44:	mov	r0, r7
    8c46:	vmul.f64	d7, d8, d7
    8c4a:	vmul.f64	d7, d7, d6
    8c4e:	vmov.f64	d6, d9
    8c52:	vfma.f64	d6, d7, d10
    8c56:	vcvt.f32.f64	s14, d6
    8c5a:	vmul.f32	s14, s14, s11
    8c5e:	vcvt.u32.f32	s15, s14
    8c62:	vstr	s15, [sp, #24]
    8c66:	ldrb.w	r3, [sp, #24]
    8c6a:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
				
				blendSetPixel(i,sineCol,setPixel,getPixel);
    8c6e:	ldr	r3, [sp, #28]
    8c70:	str	r6, [sp, #12]
    8c72:	str	r5, [sp, #8]
    8c74:	ldmia.w	r3, {r0, r1}
    8c78:	ldmia.w	r7, {r2, r3}
    8c7c:	stmia.w	sp, {r0, r1}
    8c80:	mov	r1, r8
    8c82:	mov	r0, r4
    8c84:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			}
			break;
		}
		
		case SINES:{
			for(int i=0; i<segLen; i++){
    8c88:	add.w	r8, r8, #1
    8c8c:	ldrh	r3, [r4, #18]
    8c8e:	cmp	r3, r8
    8c90:	bgt.n	8bda <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x28a>
    8c92:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			}
			break;
		}
		
		case FADE: case FADEINOUT:{
			if( e_pos <= 1 ){
    8c94:	vmov.f32	s15, #112	; 0x3f800000  1.0
    8c98:	vldr	s0, [r0, #44]	; 0x2c
    8c9c:	vcmpe.f32	s0, s15
    8ca0:	vmrs	APSR_nzcv, fpscr
    8ca4:	bls.w	8e9c <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x54c>
				e_color.fade(e_fromColor, e_toColor, e_pos);
			}else{
				e_color.fade(e_toColor, e_outColor, e_pos-1);
    8ca8:	add.w	r3, r0, #104	; 0x68
    8cac:	ldr.w	ip, [r0, #100]	; 0x64
    8cb0:	add.w	r7, r0, #56	; 0x38
    8cb4:	add.w	lr, sp, #4
    8cb8:	vsub.f32	s0, s0, s15
    8cbc:	ldmia	r3, {r0, r1, r2, r3}
    8cbe:	stmia.w	lr, {r0, r1, r2, r3}
    8cc2:	add.w	r3, r4, #88	; 0x58
    8cc6:	str.w	ip, [sp]
    8cca:	mov	r0, r7
    8ccc:	ldmia	r3, {r1, r2, r3}
    8cce:	bl	a250 <Color::fade(Color, Color, float)>
			}
			for(int i=0; i<segLen; i++){
    8cd2:	ldrh	r3, [r4, #18]
    8cd4:	cmp	r3, #0
    8cd6:	beq.w	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8cda:	mov.w	r9, #0
    8cde:	add.w	r8, r4, #64	; 0x40
				blendSetPixel(i,e_color,setPixel,getPixel);
    8ce2:	str	r6, [sp, #12]
    8ce4:	str	r5, [sp, #8]
    8ce6:	ldmia.w	r8, {r0, r1}
    8cea:	ldmia.w	r7, {r2, r3}
    8cee:	stmia.w	sp, {r0, r1}
    8cf2:	mov	r1, r9
    8cf4:	mov	r0, r4
    8cf6:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			if( e_pos <= 1 ){
				e_color.fade(e_fromColor, e_toColor, e_pos);
			}else{
				e_color.fade(e_toColor, e_outColor, e_pos-1);
			}
			for(int i=0; i<segLen; i++){
    8cfa:	add.w	r9, r9, #1
    8cfe:	ldrh	r3, [r4, #18]
    8d00:	cmp	r3, r9
    8d02:	bgt.n	8ce2 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x392>
    8d04:	b.n	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
			break;
		}
		
		case WIPE:{
			boolean dir = e_spd > 0;
			float endLed = (segLen+e_len) * e_pos;
    8d06:	ldrh	r3, [r0, #18]
			float startLed = endLed - e_len;
			Color wipeCol;
    8d08:	add	r7, sp, #32
			break;
		}
		
		case WIPE:{
			boolean dir = e_spd > 0;
			float endLed = (segLen+e_len) * e_pos;
    8d0a:	vldr	s18, [r0, #48]	; 0x30
    8d0e:	vmov	s15, r3
    8d12:	vldr	s17, [r0, #44]	; 0x2c
			float startLed = endLed - e_len;
			Color wipeCol;
    8d16:	mov	r0, r7
			}
			break;
		}
		
		case WIPE:{
			boolean dir = e_spd > 0;
    8d18:	vldr	s16, [r4, #36]	; 0x24
			float endLed = (segLen+e_len) * e_pos;
    8d1c:	vcvt.f32.s32	s15, s15
    8d20:	vadd.f32	s15, s15, s18
    8d24:	vmul.f32	s17, s15, s17
			float startLed = endLed - e_len;
			Color wipeCol;
    8d28:	bl	9820 <Color::Color()>
		}
		
		case WIPE:{
			boolean dir = e_spd > 0;
			float endLed = (segLen+e_len) * e_pos;
			float startLed = endLed - e_len;
    8d2c:	vsub.f32	s18, s17, s18
			Color wipeCol;
			for(int i=startLed; i<=endLed; i++){
    8d30:	vcvt.s32.f32	s15, s18
    8d34:	vmov	r8, s15
    8d38:	vcvt.f32.s32	s15, s15
    8d3c:	vcmpe.f32	s17, s15
    8d40:	vmrs	APSR_nzcv, fpscr
    8d44:	blt.n	8dea <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x49a>
				if(i>=0 && i<segLen){
					float dist = constrain((i-startLed)/e_len,0,1);
					if(!dir) dist = 1-dist;
    8d46:	vmov.f32	s19, #112	; 0x3f800000  1.0
    8d4a:	ldrh	r3, [r4, #18]
    8d4c:	b.n	8dc2 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x472>
			float endLed = (segLen+e_len) * e_pos;
			float startLed = endLed - e_len;
			Color wipeCol;
			for(int i=startLed; i<=endLed; i++){
				if(i>=0 && i<segLen){
					float dist = constrain((i-startLed)/e_len,0,1);
    8d4e:	vcmp.f32	s0, s19
    8d52:	vmrs	APSR_nzcv, fpscr
    8d56:	it	gt
    8d58:	vmovgt.f32	s0, s19
					if(!dir) dist = 1-dist;
    8d5c:	vcmpe.f32	s16, #0.0
					wipeCol.fade(e_color,e_fromColor,dist);
    8d60:	add.w	r3, r4, #72	; 0x48
    8d64:	add.w	lr, sp, #4
    8d68:	add.w	ip, r4, #56	; 0x38
    8d6c:	ldr.w	r9, [r4, #68]	; 0x44
			float startLed = endLed - e_len;
			Color wipeCol;
			for(int i=startLed; i<=endLed; i++){
				if(i>=0 && i<segLen){
					float dist = constrain((i-startLed)/e_len,0,1);
					if(!dir) dist = 1-dist;
    8d70:	vmrs	APSR_nzcv, fpscr
					wipeCol.fade(e_color,e_fromColor,dist);
    8d74:	ldmia	r3, {r0, r1, r2, r3}
			float startLed = endLed - e_len;
			Color wipeCol;
			for(int i=startLed; i<=endLed; i++){
				if(i>=0 && i<segLen){
					float dist = constrain((i-startLed)/e_len,0,1);
					if(!dir) dist = 1-dist;
    8d76:	it	le
    8d78:	vsuble.f32	s0, s19, s0
					wipeCol.fade(e_color,e_fromColor,dist);
    8d7c:	stmia.w	lr, {r0, r1, r2, r3}
    8d80:	str.w	r9, [sp]
    8d84:	mov	r0, r7
    8d86:	ldmia.w	ip, {r1, r2, r3}
    8d8a:	bl	a250 <Color::fade(Color, Color, float)>
					blendSetPixel(i,wipeCol,setPixel,getPixel);
    8d8e:	add	r3, sp, #48	; 0x30
    8d90:	str	r6, [sp, #12]
    8d92:	str	r5, [sp, #8]
    8d94:	ldmdb	r3, {r0, r1}
    8d98:	ldmia.w	r7, {r2, r3}
    8d9c:	stmia.w	sp, {r0, r1}
    8da0:	mov	r1, r8
    8da2:	mov	r0, r4
    8da4:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
    8da8:	ldrh	r3, [r4, #18]
    8daa:	mov	r2, r3
		case WIPE:{
			boolean dir = e_spd > 0;
			float endLed = (segLen+e_len) * e_pos;
			float startLed = endLed - e_len;
			Color wipeCol;
			for(int i=startLed; i<=endLed; i++){
    8dac:	add.w	r8, r8, #1
    8db0:	vmov	s15, r8
    8db4:	vcvt.f32.s32	s15, s15
    8db8:	vcmpe.f32	s17, s15
    8dbc:	vmrs	APSR_nzcv, fpscr
    8dc0:	blt.n	8dec <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x49c>
				if(i>=0 && i<segLen){
    8dc2:	cmp.w	r8, #0
    8dc6:	mov	r2, r3
    8dc8:	blt.n	8dac <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x45c>
    8dca:	cmp	r3, r8
    8dcc:	ble.n	8dac <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x45c>
					float dist = constrain((i-startLed)/e_len,0,1);
    8dce:	vsub.f32	s15, s15, s18
    8dd2:	vldr	s14, [r4, #48]	; 0x30
    8dd6:	vdiv.f32	s0, s15, s14
    8dda:	vcmpe.f32	s0, #0.0
    8dde:	vmrs	APSR_nzcv, fpscr
    8de2:	bpl.n	8d4e <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x3fe>
    8de4:	vldr	s0, [pc, #248]	; 8ee0 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x590>
    8de8:	b.n	8d5c <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x40c>
    8dea:	ldrh	r2, [r4, #18]
					if(!dir) dist = 1-dist;
					wipeCol.fade(e_color,e_fromColor,dist);
					blendSetPixel(i,wipeCol,setPixel,getPixel);
				}
			}
			for(int i=endLed+1; i<segLen; i++){
    8dec:	vmov.f32	s15, #112	; 0x3f800000  1.0
    8df0:	vadd.f32	s17, s17, s15
    8df4:	vcvt.s32.f32	s15, s17
    8df8:	vmov	r7, s15
    8dfc:	cmp	r7, r2
    8dfe:	blt.n	8e20 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4d0>
    8e00:	b.n	8e3c <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4ec>
				if(dir) blendSetPixel(i,e_fromColor,setPixel,getPixel);
				else blendSetPixel(i,e_color,setPixel,getPixel);
    8e02:	str	r6, [sp, #12]
    8e04:	str	r5, [sp, #8]
    8e06:	ldmia.w	r2, {r0, r1}
    8e0a:	ldmia	r3, {r2, r3}
    8e0c:	stmia.w	sp, {r0, r1}
    8e10:	mov	r1, r7
    8e12:	mov	r0, r4
    8e14:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
					if(!dir) dist = 1-dist;
					wipeCol.fade(e_color,e_fromColor,dist);
					blendSetPixel(i,wipeCol,setPixel,getPixel);
				}
			}
			for(int i=endLed+1; i<segLen; i++){
    8e18:	adds	r7, #1
    8e1a:	ldrh	r3, [r4, #18]
    8e1c:	cmp	r3, r7
    8e1e:	ble.n	8e3c <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4ec>
				if(dir) blendSetPixel(i,e_fromColor,setPixel,getPixel);
    8e20:	vcmpe.f32	s16, #0.0
    8e24:	add.w	r2, r4, #80	; 0x50
    8e28:	add.w	r3, r4, #72	; 0x48
    8e2c:	vmrs	APSR_nzcv, fpscr
    8e30:	bgt.n	8e02 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4b2>
				else blendSetPixel(i,e_color,setPixel,getPixel);
    8e32:	add.w	r2, r4, #64	; 0x40
    8e36:	add.w	r3, r4, #56	; 0x38
    8e3a:	b.n	8e02 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x4b2>
			}
			for(int i=0; i<startLed-1; i++){
    8e3c:	vmov.f32	s17, #112	; 0x3f800000  1.0
    8e40:	vsub.f32	s17, s18, s17
    8e44:	vcmpe.f32	s17, #0.0
    8e48:	vmrs	APSR_nzcv, fpscr
    8e4c:	ble.w	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
    8e50:	movs	r7, #0
    8e52:	b.n	8e80 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x530>
				if(dir) blendSetPixel(i,e_color,setPixel,getPixel);
				else blendSetPixel(i,e_fromColor,setPixel,getPixel);
    8e54:	str	r6, [sp, #12]
    8e56:	str	r5, [sp, #8]
    8e58:	ldmia.w	r2, {r0, r1}
    8e5c:	ldmia	r3, {r2, r3}
    8e5e:	stmia.w	sp, {r0, r1}
    8e62:	mov	r1, r7
			}
			for(int i=endLed+1; i<segLen; i++){
				if(dir) blendSetPixel(i,e_fromColor,setPixel,getPixel);
				else blendSetPixel(i,e_color,setPixel,getPixel);
			}
			for(int i=0; i<startLed-1; i++){
    8e64:	adds	r7, #1
				if(dir) blendSetPixel(i,e_color,setPixel,getPixel);
				else blendSetPixel(i,e_fromColor,setPixel,getPixel);
    8e66:	mov	r0, r4
    8e68:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
			}
			for(int i=endLed+1; i<segLen; i++){
				if(dir) blendSetPixel(i,e_fromColor,setPixel,getPixel);
				else blendSetPixel(i,e_color,setPixel,getPixel);
			}
			for(int i=0; i<startLed-1; i++){
    8e6c:	vmov	s15, r7
    8e70:	vcvt.f32.s32	s15, s15
    8e74:	vcmpe.f32	s15, s17
    8e78:	vmrs	APSR_nzcv, fpscr
    8e7c:	bpl.w	8a04 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xb4>
				if(dir) blendSetPixel(i,e_color,setPixel,getPixel);
    8e80:	vcmpe.f32	s16, #0.0
    8e84:	add.w	r2, r4, #64	; 0x40
    8e88:	add.w	r3, r4, #56	; 0x38
    8e8c:	vmrs	APSR_nzcv, fpscr
    8e90:	bgt.n	8e54 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x504>
				else blendSetPixel(i,e_fromColor,setPixel,getPixel);
    8e92:	add.w	r2, r4, #80	; 0x50
    8e96:	add.w	r3, r4, #72	; 0x48
    8e9a:	b.n	8e54 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x504>
			break;
		}
		
		case FADE: case FADEINOUT:{
			if( e_pos <= 1 ){
				e_color.fade(e_fromColor, e_toColor, e_pos);
    8e9c:	add.w	r3, r0, #88	; 0x58
    8ea0:	ldr.w	ip, [r0, #84]	; 0x54
    8ea4:	add.w	r7, r0, #56	; 0x38
    8ea8:	add.w	lr, sp, #4
    8eac:	ldmia	r3, {r0, r1, r2, r3}
    8eae:	stmia.w	lr, {r0, r1, r2, r3}
    8eb2:	add.w	r3, r4, #72	; 0x48
    8eb6:	str.w	ip, [sp]
    8eba:	mov	r0, r7
    8ebc:	ldmia	r3, {r1, r2, r3}
    8ebe:	bl	a250 <Color::fade(Color, Color, float)>
    8ec2:	b.n	8cd2 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x382>
    8ec4:	nop.w
    8ec8:	.word	0x33333333
    8ecc:	.word	0xbff33333
    8ed0:	.word	0x33333333
    8ed4:	.word	0x3fd33333
    8ed8:	.word	0x66666666
    8edc:	.word	0x3fe66666
    8ee0:	.word	0x00000000

00008ee4 <Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())>:
#include "Arduino.h"
#include "Colore.h"



Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
    8ee4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    8ee8:	add.w	r9, r0, #88	; 0x58
    8eec:	mov	r8, r0
    8eee:	mov	fp, r1
    8ef0:	mov	r6, r2
    8ef2:	mov	r5, r3
    8ef4:	ldrh.w	r7, [sp, #36]	; 0x24
    8ef8:	bl	9324 <Neural::Neural()>
    8efc:	mov	r0, r9
    8efe:	bl	97dc <BeamControl::BeamControl()>
	spdFac = 1;
	totLedAm = leds;
	segArray = segments;
	segArray_len = segLen;
	
	setPixel = _setPixel;
    8f02:	ldr	r3, [sp, #40]	; 0x28



Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
	spdFac = 1;
    8f04:	mov.w	lr, #1065353216	; 0x3f800000
#include "Colore.h"



Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
    8f08:	ldr.w	ip, [pc, #96]	; 8f6c <Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())+0x88>
	spdFac = 1;
	totLedAm = leds;
	segArray = segments;
	segArray_len = segLen;
	
	setPixel = _setPixel;
    8f0c:	str.w	r3, [r8, #72]	; 0x48
	getPixel = _getPixel;
	showPixels = _showPixels;
	resetPixels = _resetPixels;
	
	neuralMode = false;
    8f10:	movs	r4, #0
	totLedAm = leds;
	segArray = segments;
	segArray_len = segLen;
	
	setPixel = _setPixel;
	getPixel = _getPixel;
    8f12:	ldr	r3, [sp, #44]	; 0x2c
	showPixels = _showPixels;
	resetPixels = _resetPixels;
	
	neuralMode = false;
	
	beamControl.begin(beamArray,beamAm);
    8f14:	mov	r2, r7


Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
	spdFac = 1;
	totLedAm = leds;
    8f16:	strh.w	fp, [r8, #48]	; 0x30
	showPixels = _showPixels;
	resetPixels = _resetPixels;
	
	neuralMode = false;
	
	beamControl.begin(beamArray,beamAm);
    8f1a:	mov	r0, r9
	totLedAm = leds;
	segArray = segments;
	segArray_len = segLen;
	
	setPixel = _setPixel;
	getPixel = _getPixel;
    8f1c:	str.w	r3, [r8, #84]	; 0x54
	showPixels = _showPixels;
    8f20:	ldr	r3, [sp, #48]	; 0x30

Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
	spdFac = 1;
	totLedAm = leds;
	segArray = segments;
    8f22:	str.w	r6, [r8, #52]	; 0x34
	segArray_len = segLen;
	
	setPixel = _setPixel;
	getPixel = _getPixel;
	showPixels = _showPixels;
    8f26:	str.w	r3, [r8, #76]	; 0x4c
	resetPixels = _resetPixels;
    8f2a:	ldr	r3, [sp, #52]	; 0x34
Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
	spdFac = 1;
	totLedAm = leds;
	segArray = segments;
	segArray_len = segLen;
    8f2c:	strh.w	r5, [r8, #56]	; 0x38
	
	setPixel = _setPixel;
	getPixel = _getPixel;
	showPixels = _showPixels;
	resetPixels = _resetPixels;
    8f30:	str.w	r3, [r8, #80]	; 0x50
	
	neuralMode = false;
	
	beamControl.begin(beamArray,beamAm);
    8f34:	ldr	r1, [sp, #32]
#include "Colore.h"



Colore::Colore(uint16_t leds, Segment *segments, uint16_t segLen, Beam *beamArray, uint16_t beamAm, void (*_setPixel)(int pixel, byte, byte, byte), Color (*_getPixel)(int), void (*_showPixels)(), void (*_resetPixels)()){
	dt = 0.05;
    8f36:	str.w	ip, [r8, #64]	; 0x40
	spdFac = 1;
    8f3a:	str.w	lr, [r8, #68]	; 0x44
	setPixel = _setPixel;
	getPixel = _getPixel;
	showPixels = _showPixels;
	resetPixels = _resetPixels;
	
	neuralMode = false;
    8f3e:	strb.w	r4, [r8, #58]	; 0x3a
	
	beamControl.begin(beamArray,beamAm);
    8f42:	bl	97e0 <BeamControl::begin(Beam*, unsigned short)>
	for(int i=0; i<segArray_len; i++){
    8f46:	ldrh.w	r3, [r8, #56]	; 0x38
    8f4a:	cbz	r3, 8f66 <Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())+0x82>
    8f4c:	mov	r5, r4
		segArray[i].setBeamControl( &beamControl );
    8f4e:	ldr.w	r0, [r8, #52]	; 0x34
    8f52:	mov	r1, r9
	resetPixels = _resetPixels;
	
	neuralMode = false;
	
	beamControl.begin(beamArray,beamAm);
	for(int i=0; i<segArray_len; i++){
    8f54:	adds	r5, #1
		segArray[i].setBeamControl( &beamControl );
    8f56:	add	r0, r4
    8f58:	adds	r4, #124	; 0x7c
    8f5a:	bl	8640 <Segment::setBeamControl(BeamControl*)>
	resetPixels = _resetPixels;
	
	neuralMode = false;
	
	beamControl.begin(beamArray,beamAm);
	for(int i=0; i<segArray_len; i++){
    8f5e:	ldrh.w	r3, [r8, #56]	; 0x38
    8f62:	cmp	r3, r5
    8f64:	bgt.n	8f4e <Colore::Colore(unsigned short, Segment*, unsigned short, Beam*, unsigned short, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int), void (*)(), void (*)())+0x6a>
		segArray[i].setBeamControl( &beamControl );
	}
}
    8f66:	mov	r0, r8
    8f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    8f6c:	.word	0x3d4ccccd

00008f70 <Colore::calcDt()>:
	if(neuralMode) neural.update();

	if(sendPixels) showPixels();
}

void Colore::calcDt(){
    8f70:	push	{r4, lr}
    8f72:	mov	r4, r0
	dt = (micros() - lastCalc) / 1000000.;  // assume one frame per second
    8f74:	bl	b85c <micros>
    8f78:	ldr	r3, [r4, #60]	; 0x3c
    8f7a:	subs	r0, r0, r3
    8f7c:	vmov	s15, r0
    8f80:	vldr	d5, [pc, #28]	; 8fa0 <Colore::calcDt()+0x30>
    8f84:	vcvt.f64.u32	d7, s15
    8f88:	vdiv.f64	d6, d7, d5
    8f8c:	vcvt.f32.f64	s12, d6
    8f90:	vstr	s12, [r4, #64]	; 0x40
	lastCalc = micros();
    8f94:	bl	b85c <micros>
    8f98:	str	r0, [r4, #60]	; 0x3c
    8f9a:	pop	{r4, pc}
    8f9c:	nop.w
    8fa0:	.word	0x00000000
    8fa4:	.word	0x412e8480

00008fa8 <Colore::update(bool, bool)>:

void Colore::update(boolean clearPixels){
	update(clearPixels,true);
}

void Colore::update(boolean clearPixels, boolean sendPixels){
    8fa8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fac:	mov	r5, r1
    8fae:	mov	r7, r2
    8fb0:	mov	r4, r0
	calcDt();
    8fb2:	bl	8f70 <Colore::calcDt()>
	
	if(clearPixels) resetPixels();
    8fb6:	cbnz	r5, 9008 <Colore::update(bool, bool)+0x60>

	for(int i=0; i<segArray_len; i++){
    8fb8:	ldrh	r3, [r4, #56]	; 0x38
    8fba:	cbz	r3, 8fea <Colore::update(bool, bool)+0x42>
    8fbc:	movs	r5, #0
    8fbe:	mov	r6, r5
		segArray[i].move(dt*spdFac);
    8fc0:	vldr	s15, [r4, #68]	; 0x44
void Colore::update(boolean clearPixels, boolean sendPixels){
	calcDt();
	
	if(clearPixels) resetPixels();

	for(int i=0; i<segArray_len; i++){
    8fc4:	adds	r6, #1
		segArray[i].move(dt*spdFac);
    8fc6:	vldr	s0, [r4, #64]	; 0x40
    8fca:	ldr	r0, [r4, #52]	; 0x34
    8fcc:	vmul.f32	s0, s0, s15
    8fd0:	add	r0, r5
    8fd2:	bl	86f0 <Segment::move(float)>
		segArray[i].draw(setPixel,getPixel);
    8fd6:	ldr	r0, [r4, #52]	; 0x34
    8fd8:	ldr	r2, [r4, #84]	; 0x54
    8fda:	add	r0, r5
    8fdc:	ldr	r1, [r4, #72]	; 0x48
    8fde:	bl	8950 <Segment::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
void Colore::update(boolean clearPixels, boolean sendPixels){
	calcDt();
	
	if(clearPixels) resetPixels();

	for(int i=0; i<segArray_len; i++){
    8fe2:	ldrh	r3, [r4, #56]	; 0x38
    8fe4:	adds	r5, #124	; 0x7c
    8fe6:	cmp	r3, r6
    8fe8:	bgt.n	8fc0 <Colore::update(bool, bool)+0x18>
		segArray[i].move(dt*spdFac);
		segArray[i].draw(setPixel,getPixel);
	}
	
	if(neuralMode) neural.update();
    8fea:	ldrb.w	r3, [r4, #58]	; 0x3a
    8fee:	cbnz	r3, 8ff6 <Colore::update(bool, bool)+0x4e>

	if(sendPixels) showPixels();
    8ff0:	cbnz	r7, 9000 <Colore::update(bool, bool)+0x58>
    8ff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(int i=0; i<segArray_len; i++){
		segArray[i].move(dt*spdFac);
		segArray[i].draw(setPixel,getPixel);
	}
	
	if(neuralMode) neural.update();
    8ff6:	mov	r0, r4
    8ff8:	bl	977c <Neural::update()>

	if(sendPixels) showPixels();
    8ffc:	cmp	r7, #0
    8ffe:	beq.n	8ff2 <Colore::update(bool, bool)+0x4a>
    9000:	ldr	r3, [r4, #76]	; 0x4c
}
    9002:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		segArray[i].draw(setPixel,getPixel);
	}
	
	if(neuralMode) neural.update();

	if(sendPixels) showPixels();
    9006:	bx	r3
}

void Colore::update(boolean clearPixels, boolean sendPixels){
	calcDt();
	
	if(clearPixels) resetPixels();
    9008:	ldr	r3, [r4, #80]	; 0x50
    900a:	blx	r3
    900c:	b.n	8fb8 <Colore::update(bool, bool)+0x10>
    900e:	nop

00009010 <Colore::update()>:
	neural.begin(bDec, nCharge, _DCSpd, _DCPower, _DCSpread, _DCSpdMode, fadeInSpd, fadeOutSpd, directSynapse, &beamControl);
	neuralMode = true;
}

void Colore::update(){
	update(true,true);
    9010:	movs	r2, #1
    9012:	mov	r1, r2
    9014:	b.w	8fa8 <Colore::update(bool, bool)>

00009018 <Beam::Beam()>:
#include "Arduino.h"
#include "Beam.h"


Beam::Beam(){
    9018:	push	{r4, lr}
    901a:	mov	r4, r0
    901c:	adds	r0, #24
    901e:	bl	9820 <Color::Color()>
	active = false;
    9022:	movs	r3, #0
}
    9024:	mov	r0, r4
#include "Arduino.h"
#include "Beam.h"


Beam::Beam(){
	active = false;
    9026:	strb.w	r3, [r4, #53]	; 0x35
}
    902a:	pop	{r4, pc}

0000902c <Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)>:
	
	// linked list pointer
	nextBeam = NULL;
}

void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode, int _power){
    902c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9030:	sub	sp, #16
    9032:	mov	r4, r0
    9034:	mov	lr, r3
    9036:	mov	r8, r1
    9038:	ldr	r3, [sp, #60]	; 0x3c
    903a:	mov	ip, r2
Beam::Beam(){
	active = false;
}

void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
    903c:	movs	r0, #1
	arrived = false;
    903e:	movs	r1, #0
	// linked list pointer
	nextBeam = NULL;
}

void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode, int _power){
	power = _power;
    9040:	str	r3, [r4, #48]	; 0x30
void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
	arrived = false;
	mode = _mode;
	onSegment = seg;
	length = len;
    9042:	movs	r3, #0
	
	// linked list pointer
	nextBeam = NULL;
}

void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode, int _power){
    9044:	ldrb.w	r2, [sp, #56]	; 0x38
	arrived = false;
	mode = _mode;
	onSegment = seg;
	length = len;
	spread = _spread;
	color = col;
    9048:	mov	r5, sp
void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
	arrived = false;
	mode = _mode;
	onSegment = seg;
	length = len;
    904a:	str	r3, [r4, #16]
    904c:	add	r3, sp, #40	; 0x28
}

void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
	arrived = false;
	mode = _mode;
    904e:	strb.w	r2, [r4, #54]	; 0x36
Beam::Beam(){
	active = false;
}

void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
    9052:	strb.w	r0, [r4, #53]	; 0x35
	arrived = false;
    9056:	strb.w	r1, [r4, #52]	; 0x34
	onSegment = seg;
	length = len;
	spread = _spread;
	color = col;
	dir = _dir;
	spdMode = _spdMode;
    905a:	strb.w	lr, [r4, #40]	; 0x28

void Beam::begin(Segment *seg, boolean _dir, float spd, byte _spdMode, float len, float _spread, Color col, byte _mode){    // speed in pixels/sec or segment/sec
	active = true;
	arrived = false;
	mode = _mode;
	onSegment = seg;
    905e:	str.w	r8, [r4]
	length = len;
	spread = _spread;
    9062:	vstr	s1, [r4, #20]
	color = col;
	dir = _dir;
    9066:	strb.w	ip, [r4, #12]
    906a:	ldmia	r3, {r0, r1, r2, r3}
    906c:	stmia.w	sp, {r0, r1, r2, r3}
	arrived = false;
	mode = _mode;
	onSegment = seg;
	length = len;
	spread = _spread;
	color = col;
    9070:	ldmia	r5!, {r0, r1, r2}
    9072:	ldrh	r3, [r5, #0]
    9074:	str	r0, [r4, #24]
    9076:	strh	r3, [r4, #36]	; 0x24
    9078:	str	r1, [r4, #28]
    907a:	str	r2, [r4, #32]
	dir = _dir;
	spdMode = _spdMode;
	int seglen = onSegment->getLen();
    907c:	ldrh.w	r3, [r8, #18]
    9080:	vmov	s13, r3
	
	if (spdMode==PIXEL_SPD){
		pixelSpd = spd;
		segSpd = spd / seglen;
    9084:	vcvt.f32.s32	s13, s13
	color = col;
	dir = _dir;
	spdMode = _spdMode;
	int seglen = onSegment->getLen();
	
	if (spdMode==PIXEL_SPD){
    9088:	cmp.w	lr, #0
    908c:	bne.n	90dc <Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)+0xb0>
		pixelSpd = spd;
		segSpd = spd / seglen;
    908e:	vdiv.f32	s15, s0, s13
	dir = _dir;
	spdMode = _spdMode;
	int seglen = onSegment->getLen();
	
	if (spdMode==PIXEL_SPD){
		pixelSpd = spd;
    9092:	vstr	s0, [r4, #8]
		segSpd = spd / seglen;
    9096:	vstr	s15, [r4, #4]
	}
	else if(spdMode==SEGMENT_SPD){
		segSpd = spd;
	}
	spreadFac = (spread/2)/seglen;
    909a:	vmov.f32	s12, #96	; 0x3f000000  0.5
	startFac = 0 - spreadFac;
    909e:	vldr	s14, [pc, #72]	; 90e8 <Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)+0xbc>
	endFac = 1 + spreadFac;
    90a2:	vmov.f32	s15, #112	; 0x3f800000  1.0
	
	posFactor = ((dir == UP) ? startFac : endFac);
    90a6:	cmp.w	ip, #0
	
	// linked list pointer
	nextBeam = NULL;
    90aa:	mov.w	r3, #0
		segSpd = spd / seglen;
	}
	else if(spdMode==SEGMENT_SPD){
		segSpd = spd;
	}
	spreadFac = (spread/2)/seglen;
    90ae:	vmul.f32	s1, s1, s12
	endFac = 1 + spreadFac;
	
	posFactor = ((dir == UP) ? startFac : endFac);
	
	// linked list pointer
	nextBeam = NULL;
    90b2:	str	r3, [r4, #44]	; 0x2c
		segSpd = spd / seglen;
	}
	else if(spdMode==SEGMENT_SPD){
		segSpd = spd;
	}
	spreadFac = (spread/2)/seglen;
    90b4:	vdiv.f32	s12, s1, s13
	startFac = 0 - spreadFac;
	endFac = 1 + spreadFac;
    90b8:	vadd.f32	s15, s12, s15
		segSpd = spd / seglen;
	}
	else if(spdMode==SEGMENT_SPD){
		segSpd = spd;
	}
	spreadFac = (spread/2)/seglen;
    90bc:	vstr	s12, [r4, #68]	; 0x44
	startFac = 0 - spreadFac;
    90c0:	vsub.f32	s14, s14, s12
	endFac = 1 + spreadFac;
    90c4:	vstr	s15, [r4, #64]	; 0x40
	
	posFactor = ((dir == UP) ? startFac : endFac);
    90c8:	it	eq
    90ca:	vmoveq.f32	s15, s14
	}
	else if(spdMode==SEGMENT_SPD){
		segSpd = spd;
	}
	spreadFac = (spread/2)/seglen;
	startFac = 0 - spreadFac;
    90ce:	vstr	s14, [r4, #60]	; 0x3c
	endFac = 1 + spreadFac;
	
	posFactor = ((dir == UP) ? startFac : endFac);
    90d2:	vstr	s15, [r4, #56]	; 0x38
}

void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode, int _power){
	power = _power;
	begin(seg, dir, spd, spdMode, 0, _spread, col, _mode);
}
    90d6:	add	sp, #16
    90d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	
	if (spdMode==PIXEL_SPD){
		pixelSpd = spd;
		segSpd = spd / seglen;
	}
	else if(spdMode==SEGMENT_SPD){
    90dc:	cmp.w	lr, #1
		segSpd = spd;
    90e0:	it	eq
    90e2:	vstreq	s0, [r4, #4]
    90e6:	b.n	909a <Beam::begin(Segment*, bool, float, unsigned char, float, Color, unsigned char, int)+0x6e>
    90e8:	.word	0x00000000

000090ec <Beam::move(float)>:
void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode){
	begin(seg, dir, spd, spdMode, 0, _spread, col, _mode);
}

boolean Beam::move(float dt){
	posFactor += segSpd*dt * ((dir == UP) ? 1 : -1);
    90ec:	ldrb	r3, [r0, #12]
    90ee:	vmov.f32	s13, #112	; 0x3f800000  1.0
    90f2:	vmov.f32	s12, #240	; 0xbf800000 -1.0
    90f6:	vldr	s14, [r0, #4]
    90fa:	cmp	r3, #0
    90fc:	vldr	s15, [r0, #56]	; 0x38
    9100:	vmul.f32	s0, s0, s14
	if( posFactor>endFac || posFactor<startFac ){
    9104:	vldr	s14, [r0, #64]	; 0x40
void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode){
	begin(seg, dir, spd, spdMode, 0, _spread, col, _mode);
}

boolean Beam::move(float dt){
	posFactor += segSpd*dt * ((dir == UP) ? 1 : -1);
    9108:	it	ne
    910a:	vmovne.f32	s13, s12
    910e:	vfma.f32	s15, s13, s0
	if( posFactor>endFac || posFactor<startFac ){
    9112:	vcmpe.f32	s15, s14
void Beam::begin(Segment *seg, boolean dir, float spd, byte spdMode, float _spread, Color col, byte _mode){
	begin(seg, dir, spd, spdMode, 0, _spread, col, _mode);
}

boolean Beam::move(float dt){
	posFactor += segSpd*dt * ((dir == UP) ? 1 : -1);
    9116:	vstr	s15, [r0, #56]	; 0x38
	if( posFactor>endFac || posFactor<startFac ){
    911a:	vmrs	APSR_nzcv, fpscr
    911e:	bgt.n	912e <Beam::move(float)+0x42>
    9120:	vldr	s14, [r0, #60]	; 0x3c
    9124:	vcmpe.f32	s15, s14
    9128:	vmrs	APSR_nzcv, fpscr
    912c:	bpl.n	9138 <Beam::move(float)+0x4c>
		active = false;
    912e:	movs	r3, #0
    9130:	strb.w	r3, [r0, #53]	; 0x35
		return false;
    9134:	mov	r0, r3
    9136:	bx	lr
	}
	return true;
    9138:	movs	r0, #1
}
    913a:	bx	lr

0000913c <Beam::justArrived()>:

boolean Beam::justArrived(){
	if (arrived) return false;
    913c:	ldrb.w	r3, [r0, #52]	; 0x34
    9140:	cbnz	r3, 9186 <Beam::justArrived()+0x4a>
	if( dir == UP ){
    9142:	ldrb	r3, [r0, #12]
		if( posFactor >= 1-spreadFac/4 ) return true;
    9144:	vmov.f32	s13, #80	; 0x3e800000  0.250
    9148:	vldr	s12, [r0, #68]	; 0x44
	return true;
}

boolean Beam::justArrived(){
	if (arrived) return false;
	if( dir == UP ){
    914c:	cbnz	r3, 916a <Beam::justArrived()+0x2e>
		if( posFactor >= 1-spreadFac/4 ) return true;
    914e:	vmov.f32	s15, #112	; 0x3f800000  1.0
    9152:	vldr	s14, [r0, #56]	; 0x38
    9156:	vfms.f32	s15, s12, s13
    915a:	vcmpe.f32	s14, s15
    915e:	vmrs	APSR_nzcv, fpscr
    9162:	ite	ge
    9164:	movge	r0, #1
    9166:	movlt	r0, #0
    9168:	bx	lr
	}
	if( dir == DOWN ){
		if( posFactor <= 0+spreadFac/4 ) return true;
    916a:	vldr	s15, [pc, #32]	; 918c <Beam::justArrived()+0x50>
    916e:	vldr	s14, [r0, #56]	; 0x38
    9172:	vfma.f32	s15, s12, s13
    9176:	vcmpe.f32	s14, s15
    917a:	vmrs	APSR_nzcv, fpscr
    917e:	ite	ls
    9180:	movls	r0, #1
    9182:	movhi	r0, #0
    9184:	bx	lr
	}
	return true;
}

boolean Beam::justArrived(){
	if (arrived) return false;
    9186:	movs	r0, #0
	}
	if( dir == DOWN ){
		if( posFactor <= 0+spreadFac/4 ) return true;
	}
	return false;
}
    9188:	bx	lr
    918a:	nop
    918c:	.word	0x00000000

00009190 <Beam::arrive()>:

void Beam::arrive(){
	arrived = true;
    9190:	movs	r3, #1
    9192:	strb.w	r3, [r0, #52]	; 0x34
    9196:	bx	lr

00009198 <Beam::isNeuralMode()>:
}

boolean Beam::isNeuralMode(){
    9198:	ldrb.w	r0, [r0, #54]	; 0x36
	if( mode==NEURAL ){
		return true;
	}
	return false;
}
    919c:	sub.w	r0, r0, #2
    91a0:	clz	r0, r0
    91a4:	lsrs	r0, r0, #5
    91a6:	bx	lr

000091a8 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>:

void Beam::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    91a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91ac:	vpush	{d8-d9}
	if(mode == FLASH){
    91b0:	ldrb.w	r3, [r0, #54]	; 0x36
		return true;
	}
	return false;
}

void Beam::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    91b4:	sub	sp, #32
    91b6:	mov	r5, r0
    91b8:	mov	r7, r1
	if(mode == FLASH){
    91ba:	cmp	r3, #1
		return true;
	}
	return false;
}

void Beam::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
    91bc:	mov	r8, r2
	if(mode == FLASH){
    91be:	beq.n	929a <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xf2>
		c.multiply(bri);
		
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
    91c0:	tst.w	r3, #253	; 0xfd
    91c4:	bne.w	9300 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x158>
    91c8:	ldr	r3, [r0, #0]
		float position = posFactor * onSegment->getLen();
		int startLed = position - spread/2;
    91ca:	vmov.f32	s14, #96	; 0x3f000000  0.5
		
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
    91ce:	vldr	s12, [r0, #56]	; 0x38
    91d2:	ldrh	r3, [r3, #18]
		int startLed = position - spread/2;
    91d4:	vldr	s13, [r0, #20]
		
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
    91d8:	vmov	s17, r3
    91dc:	vcvt.f32.s32	s15, s17
    91e0:	vmul.f32	s17, s15, s12
		int startLed = position - spread/2;
    91e4:	vmov.f32	s12, s17
		int endLed = position + spread/2;
    91e8:	vmov.f32	s15, s17
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
		int startLed = position - spread/2;
    91ec:	vfms.f32	s12, s13, s14
		int endLed = position + spread/2;
    91f0:	vfma.f32	s15, s13, s14
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
		int startLed = position - spread/2;
    91f4:	vcvt.s32.f32	s14, s12
		int endLed = position + spread/2;
    91f8:	vcvt.s32.f32	s15, s15
		for(int i=0; i<=onSegment->getLen(); i++){
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
		}
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
		int startLed = position - spread/2;
    91fc:	vmov	r4, s14
		int endLed = position + spread/2;
    9200:	vmov	r9, s15
		
		for(int i=startLed; i<=endLed; i++){
    9204:	cmp	r4, r9
    9206:	bgt.n	9300 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x158>
			if( i>=0 && i<onSegment->getLen() ){
				float dist = constrain(1-abs(i-position)/spread*2, 0, 1);
    9208:	vmov.f32	s18, #0	; 0x40000000  2.0
				Color c = color;
    920c:	add	r6, sp, #16
		int startLed = position - spread/2;
		int endLed = position + spread/2;
		
		for(int i=startLed; i<=endLed; i++){
			if( i>=0 && i<onSegment->getLen() ){
				float dist = constrain(1-abs(i-position)/spread*2, 0, 1);
    920e:	vmov.f32	s16, #112	; 0x3f800000  1.0
    9212:	b.n	9272 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xca>
    9214:	vldr	s13, [r5, #20]
    9218:	vmov.f32	s0, s16
    921c:	vdiv.f32	s14, s15, s13
    9220:	vfms.f32	s0, s14, s18
    9224:	vcmpe.f32	s0, #0.0
    9228:	vmrs	APSR_nzcv, fpscr
    922c:	bmi.n	930a <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x162>
    922e:	vcmp.f32	s0, s16
    9232:	vmrs	APSR_nzcv, fpscr
    9236:	it	gt
    9238:	vmovgt.f32	s0, s16
				Color c = color;
    923c:	add.w	r3, r5, #24
    9240:	ldmia	r3, {r0, r1, r2, r3}
    9242:	stmia.w	r6, {r0, r1, r2, r3}
				c.multiply(dist);
    9246:	mov	r0, r6
    9248:	bl	9f60 <Color::multiply(float)>
				onSegment->blendSetPixel(i,c,setPixel,getPixel);
    924c:	add	r3, sp, #32
    924e:	ldr.w	lr, [r5]
    9252:	str.w	r8, [sp, #12]
    9256:	str	r7, [sp, #8]
    9258:	ldmdb	r3, {r0, r1}
    925c:	ldmia.w	r6, {r2, r3}
    9260:	stmia.w	sp, {r0, r1}
    9264:	mov	r0, lr
    9266:	mov	r1, r4
    9268:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
	}else if(mode == PULSE || mode == NEURAL){
		float position = posFactor * onSegment->getLen();
		int startLed = position - spread/2;
		int endLed = position + spread/2;
		
		for(int i=startLed; i<=endLed; i++){
    926c:	adds	r4, #1
    926e:	cmp	r9, r4
    9270:	blt.n	9300 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x158>
			if( i>=0 && i<onSegment->getLen() ){
    9272:	cmp	r4, #0
    9274:	blt.n	926c <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xc4>
    9276:	ldr	r3, [r5, #0]
    9278:	ldrh	r3, [r3, #18]
    927a:	cmp	r3, r4
    927c:	ble.n	926c <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0xc4>
				float dist = constrain(1-abs(i-position)/spread*2, 0, 1);
    927e:	vmov	s15, r4
    9282:	vcvt.f32.s32	s15, s15
    9286:	vsub.f32	s15, s15, s17
    928a:	vcmpe.f32	s15, #0.0
    928e:	vmrs	APSR_nzcv, fpscr
    9292:	bgt.n	9214 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x6c>
    9294:	vneg.f32	s15, s15
    9298:	b.n	9214 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x6c>
}

void Beam::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	if(mode == FLASH){
		float bri;
		if(posFactor<0.5){
    929a:	vmov.f32	s15, #96	; 0x3f000000  0.5
    929e:	vldr	s0, [r0, #56]	; 0x38
    92a2:	vcmpe.f32	s0, s15
    92a6:	vmrs	APSR_nzcv, fpscr
    92aa:	bmi.n	9310 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x168>
			bri = posFactor*2;
		}else{
			bri = 1 - (posFactor*2 - 1);
    92ac:	vmov.f32	s13, #0	; 0x40000000  2.0
    92b0:	vmov.f32	s15, #240	; 0xbf800000 -1.0
    92b4:	vmov.f32	s14, #112	; 0x3f800000  1.0
    92b8:	vfma.f32	s15, s0, s13
    92bc:	vsub.f32	s0, s14, s15
		}
		
		Color c = color;
    92c0:	add.w	r3, r5, #24
    92c4:	add.w	r9, sp, #16
		c.multiply(bri);
		
		for(int i=0; i<=onSegment->getLen(); i++){
    92c8:	movs	r4, #0
    92ca:	add.w	sl, sp, #24
			bri = posFactor*2;
		}else{
			bri = 1 - (posFactor*2 - 1);
		}
		
		Color c = color;
    92ce:	ldmia	r3, {r0, r1, r2, r3}
    92d0:	stmia.w	r9, {r0, r1, r2, r3}
		c.multiply(bri);
    92d4:	mov	r0, r9
    92d6:	bl	9f60 <Color::multiply(float)>
		
		for(int i=0; i<=onSegment->getLen(); i++){
    92da:	ldr	r6, [r5, #0]
			onSegment->blendSetPixel(i,c,setPixel,getPixel);
    92dc:	str.w	r8, [sp, #12]
    92e0:	str	r7, [sp, #8]
    92e2:	ldmia.w	sl, {r0, r1}
    92e6:	ldmia.w	r9, {r2, r3}
    92ea:	stmia.w	sp, {r0, r1}
    92ee:	mov	r0, r6
    92f0:	mov	r1, r4
    92f2:	bl	885c <Segment::blendSetPixel(int, Color, void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))>
		}
		
		Color c = color;
		c.multiply(bri);
		
		for(int i=0; i<=onSegment->getLen(); i++){
    92f6:	ldr	r6, [r5, #0]
    92f8:	adds	r4, #1
    92fa:	ldrh	r3, [r6, #18]
    92fc:	cmp	r3, r4
    92fe:	bge.n	92dc <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x134>
				c.multiply(dist);
				onSegment->blendSetPixel(i,c,setPixel,getPixel);
			}
		}
	}
}
    9300:	add	sp, #32
    9302:	vpop	{d8-d9}
    9306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int startLed = position - spread/2;
		int endLed = position + spread/2;
		
		for(int i=startLed; i<=endLed; i++){
			if( i>=0 && i<onSegment->getLen() ){
				float dist = constrain(1-abs(i-position)/spread*2, 0, 1);
    930a:	vldr	s0, [pc, #12]	; 9318 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x170>
    930e:	b.n	923c <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x94>

void Beam::draw(void (*setPixel)(int pixel, byte, byte, byte), Color (*getPixel)(int)){
	if(mode == FLASH){
		float bri;
		if(posFactor<0.5){
			bri = posFactor*2;
    9310:	vadd.f32	s0, s0, s0
    9314:	b.n	92c0 <Beam::draw(void (*)(int, unsigned char, unsigned char, unsigned char), Color (*)(int))+0x118>
    9316:	nop
    9318:	.word	0x00000000

0000931c <Beam::isActive()>:
	}
}

boolean Beam::isActive(){
	return active;
    931c:	ldrb.w	r0, [r0, #53]	; 0x35
    9320:	bx	lr
    9322:	nop

00009324 <Neural::Neural()>:
#include "Arduino.h"
#include "Neural.h"

Neural::Neural(){
    9324:	push	{r4, r5, r6, r7, lr}
	beamDecay = 50;
	neuronChargeFac = 0.05;
	DCSpd = 100;
    9326:	movs	r1, #100	; 0x64
	DCPower = 100;
	DCSpread = 10;
	DCSpdMode = PIXEL_SPD;
    9328:	movs	r2, #0
Neural::Neural(){
	beamDecay = 50;
	neuronChargeFac = 0.05;
	DCSpd = 100;
	DCPower = 100;
	DCSpread = 10;
    932a:	ldr.w	lr, [pc, #44]	; 9358 <Neural::Neural()+0x34>
	DCSpdMode = PIXEL_SPD;
	fadeInSpd = 8;
    932e:	mov.w	r5, #1090519040	; 0x41000000
#include "Arduino.h"
#include "Neural.h"

Neural::Neural(){
	beamDecay = 50;
    9332:	movs	r7, #50	; 0x32
	neuronChargeFac = 0.05;
    9334:	ldr	r6, [pc, #24]	; (9350 <Neural::Neural()+0x2c>)
	DCSpd = 100;
	DCPower = 100;
	DCSpread = 10;
	DCSpdMode = PIXEL_SPD;
	fadeInSpd = 8;
	fadeOutSpd = 0.3;
    9336:	ldr	r4, [pc, #28]	; (9354 <Neural::Neural()+0x30>)
Neural::Neural(){
	beamDecay = 50;
	neuronChargeFac = 0.05;
	DCSpd = 100;
	DCPower = 100;
	DCSpread = 10;
    9338:	str.w	lr, [r0, #20]
#include "Arduino.h"
#include "Neural.h"

Neural::Neural(){
	beamDecay = 50;
    933c:	str	r7, [r0, #4]
	neuronChargeFac = 0.05;
    933e:	str	r6, [r0, #8]
	DCSpd = 100;
	DCPower = 100;
	DCSpread = 10;
	DCSpdMode = PIXEL_SPD;
	fadeInSpd = 8;
    9340:	str	r5, [r0, #28]
	fadeOutSpd = 0.3;
    9342:	str	r4, [r0, #32]
#include "Neural.h"

Neural::Neural(){
	beamDecay = 50;
	neuronChargeFac = 0.05;
	DCSpd = 100;
    9344:	str	r1, [r0, #12]
	DCPower = 100;
    9346:	str	r1, [r0, #16]
	DCSpread = 10;
	DCSpdMode = PIXEL_SPD;
    9348:	strb	r2, [r0, #24]
	fadeInSpd = 8;
	fadeOutSpd = 0.3;
	allowDirectSynapse = false;
    934a:	strb.w	r2, [r0, #36]	; 0x24
}
    934e:	pop	{r4, r5, r6, r7, pc}
    9350:	.word	0x3d4ccccd
    9354:	.word	0x3e99999a
    9358:	.word	0x41200000

0000935c <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)>:
		}
	}
}


boolean Neural::startNeuronBeam(Segment *neuron, Segment *skipSeg, float _spd, byte _spdMode, float _len, Color _col, int _power, boolean animNeur){
    935c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9360:	mov	r5, r2
	
	if(sendNeuronFire != NULL){
    9362:	ldr	r2, [r0, #40]	; 0x28
		}
	}
}


boolean Neural::startNeuronBeam(Segment *neuron, Segment *skipSeg, float _spd, byte _spdMode, float _len, Color _col, int _power, boolean animNeur){
    9364:	mov	r8, r0
    9366:	mov	r4, r1
    9368:	mov	r9, r3
    936a:	vpush	{d8}
    936e:	sub	sp, #60	; 0x3c
    9370:	vmov.f32	s16, s0
    9374:	vmov.f32	s17, s1
    9378:	ldrb.w	r7, [sp, #124]	; 0x7c
	
	if(sendNeuronFire != NULL){
    937c:	cbz	r2, 9382 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x26>
		sendNeuronFire(neuron);
    937e:	mov	r0, r1
    9380:	blx	r2
	}
	
	// stop if the segment not a NEURON
	if( neuron->nnType!=NEURON){
    9382:	ldrb	r6, [r4, #5]
    9384:	cmp	r6, #0
    9386:	bne.n	9424 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0xc8>
		Serial.println(F("Segment is not a NEURON"));
		return false;
	} 
	
	// get the color and change the brightness according to power
	_col.setHSB(_col.hue(), _col.saturation(), constrain(_power,0,100));
    9388:	add	r0, sp, #104	; 0x68
    938a:	bl	a3e0 <Color::hue()>
    938e:	mov	fp, r0
    9390:	add	r0, sp, #104	; 0x68
    9392:	bl	a408 <Color::saturation()>
    9396:	ldr	r3, [sp, #120]	; 0x78
    9398:	mov	r2, r0
    939a:	mov	r1, fp
    939c:	cmp	r3, #100	; 0x64
    939e:	add	r0, sp, #104	; 0x68
    93a0:	it	ge
    93a2:	movge	r3, #100	; 0x64
    93a4:	bic.w	r3, r3, r3, asr #31
    93a8:	uxtb	r3, r3
    93aa:	bl	9880 <Color::setHSB(unsigned int, unsigned char, unsigned char)>
	
	// animate the neuron
	if(animNeur){
    93ae:	cmp	r7, #0
    93b0:	bne.n	949e <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x142>
	
	
	//--- choose the next segment
	
	byte nextSegId;
	byte chooseAm = neuron->connAm;  // amount of connections that can be chosen from
    93b2:	ldrb	r1, [r4, #4]
	
	// stop if neuron has no connections
	if( chooseAm == 0 ){
    93b4:	cmp	r1, #0
    93b6:	beq.w	94fa <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x19e>
		Serial.println(F("Neuron has no connections, arrived at dead end"));
		return false;
	}
	
	// if the neuron has only one connection choose that one
	else if( chooseAm == 1 ) nextSegId = 0;
    93ba:	cmp	r1, #1
    93bc:	beq.w	9526 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1ca>
	else{
		
		// determine the place of the segment that has to be skipped in the connections array
		int skipId = -1;
		for (int i=0; i<chooseAm; i++){
			if( neuron->connSeg[i] == skipSeg ){
    93c0:	ldr	r3, [r4, #0]
    93c2:	ldr	r2, [r3, #0]
    93c4:	cmp	r5, r2
    93c6:	beq.w	9514 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1b8>
    93ca:	movs	r6, #0
    93cc:	b.n	93d6 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x7a>
    93ce:	ldr.w	r2, [r3, #4]!
    93d2:	cmp	r2, r5
    93d4:	beq.n	9440 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0xe4>
	// if multiple connections; choose one randomly
	else{
		
		// determine the place of the segment that has to be skipped in the connections array
		int skipId = -1;
		for (int i=0; i<chooseAm; i++){
    93d6:	adds	r6, #1
    93d8:	cmp	r6, r1
    93da:	bne.n	93ce <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x72>
				break;
			}
		}
		
		// choose one of the connected segments
		nextSegId = random(0,chooseAm);
    93dc:	mov	r1, r6
    93de:	movs	r0, #0
    93e0:	bl	bb44 <random(long, long)>
		if(skipId != -1 && nextSegId >= skipId) nextSegId++;  // correction for the skipped segment
	}
	
	Segment *nextSynapse = neuron->connSeg[nextSegId];
    93e4:	ldr	r3, [r4, #0]
    93e6:	uxtb	r0, r0
    93e8:	lsls	r0, r0, #2
    93ea:	ldr	r5, [r3, r0]
	
	
	
	// if the next segment is a NEURON; start another startNeuronBeam() skipping the current neuron and return
	if(nextSynapse->nnType == NEURON){
    93ec:	ldrb	r3, [r5, #5]
    93ee:	cmp	r3, #0
    93f0:	bne.n	945c <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x100>
		return startNeuronBeam( nextSynapse, neuron, _spd, _spdMode, _len, _col, _power, true);
    93f2:	movs	r3, #1
    93f4:	ldr	r2, [sp, #120]	; 0x78
    93f6:	vmov.f32	s1, s17
    93fa:	str	r3, [sp, #20]
    93fc:	add	r3, sp, #104	; 0x68
    93fe:	str	r2, [sp, #16]
    9400:	vmov.f32	s0, s16
    9404:	ldmia	r3, {r0, r1, r2, r3}
    9406:	stmia.w	sp, {r0, r1, r2, r3}
    940a:	mov	r3, r9
    940c:	mov	r2, r4
    940e:	mov	r1, r5
    9410:	mov	r0, r8
    9412:	bl	935c <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)>
    9416:	mov	r6, r0
	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}
    9418:	mov	r0, r6
    941a:	add	sp, #60	; 0x3c
    941c:	vpop	{d8}
    9420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9424:	movs	r1, #23
	}
	
	// stop if the segment not a NEURON
	if( neuron->nnType!=NEURON){
		Serial.println(F("Segment is not a NEURON"));
		return false;
    9426:	movs	r6, #0
    9428:	ldr	r0, [pc, #256]	; (952c <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1d0>)
    942a:	bl	ac68 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    942e:	ldr	r0, [pc, #256]	; (9530 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1d4>)
    9430:	bl	bd90 <Print::println()>
	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}
    9434:	mov	r0, r6
    9436:	add	sp, #60	; 0x3c
    9438:	vpop	{d8}
    943c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				break;
			}
		}
		
		// choose one of the connected segments
		nextSegId = random(0,chooseAm);
    9440:	subs	r1, #1
    9442:	movs	r0, #0
    9444:	uxtb	r1, r1
    9446:	bl	bb44 <random(long, long)>
    944a:	uxtb	r0, r0
		if(skipId != -1 && nextSegId >= skipId) nextSegId++;  // correction for the skipped segment
    944c:	cmp	r0, r6
    944e:	bge.n	9520 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1c4>
    9450:	lsls	r0, r0, #2
	}
	
	Segment *nextSynapse = neuron->connSeg[nextSegId];
    9452:	ldr	r3, [r4, #0]
    9454:	ldr	r5, [r3, r0]
	
	
	
	// if the next segment is a NEURON; start another startNeuronBeam() skipping the current neuron and return
	if(nextSynapse->nnType == NEURON){
    9456:	ldrb	r3, [r5, #5]
    9458:	cmp	r3, #0
    945a:	beq.n	93f2 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x96>
	}
	// continue if the next segment is a SYNAPSE

	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
    945c:	ldr	r3, [r5, #0]
    945e:	add	r7, sp, #56	; 0x38
		Serial.println(F("Segment is not a SYNAPSE"));
		return false;
	}
	
	// send the pulse into the neural network
	return synapse->setNNBeam(dir, _spd, _spdMode, _len, _col, _power);
    9460:	vmov.f32	s1, s17
	}
	// continue if the next segment is a SYNAPSE

	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
    9464:	ldr	r6, [r3, #4]
		Serial.println(F("Segment is not a SYNAPSE"));
		return false;
	}
	
	// send the pulse into the neural network
	return synapse->setNNBeam(dir, _spd, _spdMode, _len, _col, _power);
    9466:	vmov.f32	s0, s16
    946a:	ldr	r3, [sp, #120]	; 0x78
    946c:	str	r3, [sp, #12]
    946e:	add	r3, sp, #104	; 0x68
    9470:	ldmia	r3, {r0, r1, r2, r3}
    9472:	stmdb	r7, {r0, r1, r2, r3}
    9476:	ldmdb	r7, {r0, r1, r2}
    947a:	stmia.w	sp, {r0, r1, r2}
    947e:	subs	r1, r6, r4
    9480:	ldr	r3, [sp, #40]	; 0x28
    9482:	mov	r2, r9
    9484:	mov	r0, r5
    9486:	clz	r1, r1
    948a:	lsrs	r1, r1, #5
    948c:	bl	8644 <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)>
    9490:	mov	r6, r0
	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}
    9492:	mov	r0, r6
    9494:	add	sp, #60	; 0x3c
    9496:	vpop	{d8}
    949a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// get the color and change the brightness according to power
	_col.setHSB(_col.hue(), _col.saturation(), constrain(_power,0,100));
	
	// animate the neuron
	if(animNeur){
		Color neurCol = neuron->getCurrentColor();
    949e:	add.w	sl, sp, #24
    94a2:	mov	r1, r4
		neurCol.addHDR( _col, 1 );
		Color neurBGColor(0,0,neuron->power,HSB_MODE);
    94a4:	add.w	fp, sp, #40	; 0x28
	// get the color and change the brightness according to power
	_col.setHSB(_col.hue(), _col.saturation(), constrain(_power,0,100));
	
	// animate the neuron
	if(animNeur){
		Color neurCol = neuron->getCurrentColor();
    94a8:	mov	r0, sl
    94aa:	bl	862c <Segment::getCurrentColor()>
		neurCol.addHDR( _col, 1 );
    94ae:	ldr	r3, [sp, #116]	; 0x74
    94b0:	vmov.f32	s0, #112	; 0x3f800000  1.0
    94b4:	mov	r0, sl
    94b6:	str	r3, [sp, #0]
    94b8:	add	r3, sp, #104	; 0x68
    94ba:	ldmia	r3, {r1, r2, r3}
    94bc:	bl	9c38 <Color::addHDR(Color, float)>
		Color neurBGColor(0,0,neuron->power,HSB_MODE);
    94c0:	movs	r1, #1
    94c2:	ldrb	r3, [r4, #6]
    94c4:	mov	r2, r6
    94c6:	str	r1, [sp, #0]
    94c8:	mov	r0, fp
    94ca:	mov	r1, r6
    94cc:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
		neuron->setFadeInOut(neurCol,neurBGColor,fadeInSpd,fadeOutSpd);
    94d0:	add.w	lr, sp, #4
    94d4:	vldr	s1, [r8, #32]
    94d8:	vldr	s0, [r8, #28]
    94dc:	ldmia.w	fp, {r0, r1, r2, r3}
    94e0:	stmia.w	lr, {r0, r1, r2, r3}
    94e4:	ldr	r0, [sp, #36]	; 0x24
    94e6:	ldmia.w	sl, {r1, r2, r3}
    94ea:	str	r0, [sp, #0]
    94ec:	mov	r0, r4
    94ee:	bl	859c <Segment::setFadeInOut(Color, Color, float, float)>
	
	
	//--- choose the next segment
	
	byte nextSegId;
	byte chooseAm = neuron->connAm;  // amount of connections that can be chosen from
    94f2:	ldrb	r1, [r4, #4]
	
	// stop if neuron has no connections
	if( chooseAm == 0 ){
    94f4:	cmp	r1, #0
    94f6:	bne.w	93ba <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x5e>
    94fa:	movs	r1, #46	; 0x2e
    94fc:	ldr	r0, [pc, #52]	; (9534 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1d8>)
    94fe:	bl	ac68 <usb_serial_write>
    9502:	ldr	r0, [pc, #44]	; (9530 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0x1d4>)
    9504:	bl	bd90 <Print::println()>
	// determine the correct direction for the beam
	boolean dir = UP;
	if( nextSynapse->connSeg[1] == neuron ) dir = DOWN; // if the neuron at the end of the synapse is the neuron the beam came from; the direction is DOWN. Else its UP
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}
    9508:	mov	r0, r6
    950a:	add	sp, #60	; 0x3c
    950c:	vpop	{d8}
    9510:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				break;
			}
		}
		
		// choose one of the connected segments
		nextSegId = random(0,chooseAm);
    9514:	subs	r1, #1
    9516:	movs	r0, #0
    9518:	uxtb	r1, r1
    951a:	bl	bb44 <random(long, long)>
    951e:	uxtb	r0, r0
		if(skipId != -1 && nextSegId >= skipId) nextSegId++;  // correction for the skipped segment
    9520:	adds	r0, #1
    9522:	uxtb	r0, r0
    9524:	b.n	9450 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0xf4>
    9526:	movs	r0, #0
    9528:	b.n	9452 <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)+0xf6>
    952a:	nop
    952c:	.word	0x20000400
    9530:	.word	0x20000fbc
    9534:	.word	0x20000418

00009538 <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)>:
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}


boolean Neural::startSynapseBeam(Segment *synapse, boolean dir, float _spd, byte _spdMode, float _len, Color _col, int _power ){
    9538:	push	{r4, r5, r6, r7, lr}
	if( synapse->nnType != SYNAPSE ){
    953a:	ldrb	r4, [r1, #5]
		
	return startSynapseBeam(nextSynapse, dir, _spd, _spdMode, _len, _col, _power);
}


boolean Neural::startSynapseBeam(Segment *synapse, boolean dir, float _spd, byte _spdMode, float _len, Color _col, int _power ){
    953c:	sub	sp, #20
	if( synapse->nnType != SYNAPSE ){
    953e:	cbz	r4, 9566 <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)+0x2e>
    9540:	mov	r6, r2
    9542:	mov	r7, r3
		Serial.println(F("Segment is not a SYNAPSE"));
		return false;
	}
	
	// send the pulse into the neural network
	return synapse->setNNBeam(dir, _spd, _spdMode, _len, _col, _power);
    9544:	add	r2, sp, #44	; 0x2c
    9546:	ldr	r3, [sp, #56]	; 0x38
    9548:	mov	r5, r1
    954a:	str	r3, [sp, #12]
    954c:	ldr	r3, [sp, #40]	; 0x28
    954e:	ldmia	r2, {r0, r1, r2}
    9550:	stmia.w	sp, {r0, r1, r2}
    9554:	mov	r2, r7
    9556:	mov	r1, r6
    9558:	mov	r0, r5
    955a:	bl	8644 <Segment::setNNBeam(bool, float, unsigned char, float, Color, int)>
    955e:	mov	r4, r0
}
    9560:	mov	r0, r4
    9562:	add	sp, #20
    9564:	pop	{r4, r5, r6, r7, pc}
    9566:	movs	r1, #24
    9568:	ldr	r0, [pc, #16]	; (957c <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)+0x44>)
    956a:	bl	ac68 <usb_serial_write>
    956e:	ldr	r0, [pc, #16]	; (9580 <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)+0x48>)
    9570:	bl	bd90 <Print::println()>
    9574:	mov	r0, r4
    9576:	add	sp, #20
    9578:	pop	{r4, r5, r6, r7, pc}
    957a:	nop
    957c:	.word	0x20000448
    9580:	.word	0x20000fbc

00009584 <Neural::neuronDischarge(Segment*, int)>:
	
}


void Neural::neuronDischarge(Segment *neuron, int hue){
	if(sendNeuronDischarge != NULL){
    9584:	ldr	r3, [r0, #44]	; 0x2c
	}
	
}


void Neural::neuronDischarge(Segment *neuron, int hue){
    9586:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    958a:	mov	r4, r0
    958c:	sub	sp, #76	; 0x4c
    958e:	mov	r8, r1
    9590:	mov	sl, r2
	if(sendNeuronDischarge != NULL){
    9592:	cbz	r3, 9598 <Neural::neuronDischarge(Segment*, int)+0x14>
		sendNeuronDischarge(neuron);
    9594:	mov	r0, r1
    9596:	blx	r3
	}
	
	// animate the neuron
	Color white(255,255,255,RGB_MODE);
    9598:	movs	r5, #0
    959a:	movs	r3, #255	; 0xff
    959c:	add.w	r9, sp, #24
	Color black(0,0,0,RGB_MODE);
    95a0:	add	r7, sp, #40	; 0x28
	if(sendNeuronDischarge != NULL){
		sendNeuronDischarge(neuron);
	}
	
	// animate the neuron
	Color white(255,255,255,RGB_MODE);
    95a2:	mov	r2, r3
    95a4:	mov	r1, r3
    95a6:	mov	r0, r9
    95a8:	str	r5, [sp, #0]
    95aa:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
	Color black(0,0,0,RGB_MODE);
    95ae:	mov	r3, r5
    95b0:	mov	r2, r5
    95b2:	mov	r1, r5
    95b4:	str	r5, [sp, #0]
    95b6:	mov	r0, r7
    95b8:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
	neuron->setFadeInOut(white,black,8,3);
    95bc:	add.w	lr, sp, #4
    95c0:	ldr	r6, [sp, #36]	; 0x24
    95c2:	vmov.f32	s1, #8	; 0x40400000  3.0
    95c6:	vmov.f32	s0, #32	; 0x41000000  8.0
	neuron->power = 0;
	
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
    95ca:	add.w	fp, sp, #56	; 0x38
	}
	
	// animate the neuron
	Color white(255,255,255,RGB_MODE);
	Color black(0,0,0,RGB_MODE);
	neuron->setFadeInOut(white,black,8,3);
    95ce:	ldmia.w	r7, {r0, r1, r2, r3}
    95d2:	stmia.w	lr, {r0, r1, r2, r3}
    95d6:	mov	r0, r8
    95d8:	ldmia.w	r9, {r1, r2, r3}
    95dc:	str	r6, [sp, #0]
    95de:	bl	859c <Segment::setFadeInOut(Color, Color, float, float)>
	neuron->power = 0;
	
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
    95e2:	movs	r3, #100	; 0x64
    95e4:	movs	r2, #1
	
	// animate the neuron
	Color white(255,255,255,RGB_MODE);
	Color black(0,0,0,RGB_MODE);
	neuron->setFadeInOut(white,black,8,3);
	neuron->power = 0;
    95e6:	strb.w	r5, [r8, #6]
	
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
    95ea:	mov	r1, sl
    95ec:	mov	r0, fp
    95ee:	str	r2, [sp, #0]
    95f0:	mov	r2, r3
    95f2:	bl	9828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>
	
	// fire beams in all directions
	for (int i=0; i<neuron->connAm; i++){
    95f6:	ldrb.w	r3, [r8, #4]
    95fa:	cbz	r3, 9642 <Neural::neuronDischarge(Segment*, int)+0xbe>
		Segment *nextSynapse = neuron->connSeg[i];
    95fc:	ldr.w	r3, [r8]
		// determine the correct direction for the beam
		boolean dir = DOWN;
		if( nextSynapse->connSeg[0] == neuron ) dir = UP;
		
		// fire the beam
		startSynapseBeam(nextSynapse, dir, DCSpd, DCSpdMode, DCSpread, col, DCPower);
    9600:	ldrb.w	ip, [r4, #24]
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
	
	// fire beams in all directions
	for (int i=0; i<neuron->connAm; i++){
		Segment *nextSynapse = neuron->connSeg[i];
    9604:	ldr.w	r7, [r3, r5, lsl #2]
	
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
	
	// fire beams in all directions
	for (int i=0; i<neuron->connAm; i++){
    9608:	adds	r5, #1
		// determine the correct direction for the beam
		boolean dir = DOWN;
		if( nextSynapse->connSeg[0] == neuron ) dir = UP;
		
		// fire the beam
		startSynapseBeam(nextSynapse, dir, DCSpd, DCSpdMode, DCSpread, col, DCPower);
    960a:	vldr	s15, [r4, #12]
	for (int i=0; i<neuron->connAm; i++){
		Segment *nextSynapse = neuron->connSeg[i];
		
		// determine the correct direction for the beam
		boolean dir = DOWN;
		if( nextSynapse->connSeg[0] == neuron ) dir = UP;
    960e:	ldr	r3, [r7, #0]
		
		// fire the beam
		startSynapseBeam(nextSynapse, dir, DCSpd, DCSpdMode, DCSpread, col, DCPower);
    9610:	vldr	s1, [r4, #20]
    9614:	vcvt.f32.s32	s0, s15
    9618:	ldr.w	r9, [r3]
    961c:	ldr	r6, [r4, #16]
    961e:	ldmia.w	fp, {r0, r1, r2, r3}
    9622:	stmia.w	sp, {r0, r1, r2, r3}
    9626:	subs.w	r2, r9, r8
    962a:	mov	r3, ip
    962c:	str	r6, [sp, #16]
    962e:	mov	r1, r7
    9630:	it	ne
    9632:	movne	r2, #1
    9634:	mov	r0, r4
    9636:	bl	9538 <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)>
	
	// set the color for the beams
	Color col(hue,100,100,HSB_MODE);
	
	// fire beams in all directions
	for (int i=0; i<neuron->connAm; i++){
    963a:	ldrb.w	r3, [r8, #4]
    963e:	cmp	r3, r5
    9640:	bgt.n	95fc <Neural::neuronDischarge(Segment*, int)+0x78>
		if( nextSynapse->connSeg[0] == neuron ) dir = UP;
		
		// fire the beam
		startSynapseBeam(nextSynapse, dir, DCSpd, DCSpdMode, DCSpread, col, DCPower);
	}
    9642:	add	sp, #76	; 0x4c
    9644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009648 <Neural::arriveBeam(Beam*)>:
	// send the pulse into the neural network
	return synapse->setNNBeam(dir, _spd, _spdMode, _len, _col, _power);
}


void Neural::arriveBeam(Beam *beam){
    9648:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    964c:	mov	r4, r1
    964e:	sub	sp, #32
    9650:	mov	r7, r0
	beam->arrive();
    9652:	mov	r0, r1
    9654:	bl	9190 <Beam::arrive()>
	
	// stop if arrived at dead end
	if( beam->onSegment->connAm == 0 || beam->onSegment->connAm == 1 ){
    9658:	ldr	r6, [r4, #0]
    965a:	ldrb	r3, [r6, #4]
    965c:	cmp	r3, #1
    965e:	bls.w	9768 <Neural::arriveBeam(Beam*)+0x120>
		return;
	}
	
	// determine the segment it arrived at
	byte connId = ((beam->dir == UP) ? 1 : 0);
	Segment *nextSegment = beam->onSegment->connSeg[connId];
    9662:	ldrb	r3, [r4, #12]
    9664:	ldr	r2, [r6, #0]
    9666:	eor.w	r3, r3, #1
    966a:	ldr.w	r5, [r2, r3, lsl #2]
	
	//check the type of the next segment
	if( nextSegment->nnType == SYNAPSE && !allowDirectSynapse){
    966e:	ldrb.w	r8, [r5, #5]
    9672:	cmp.w	r8, #0
    9676:	bne.n	96f2 <Neural::arriveBeam(Beam*)+0xaa>
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
	boolean animNeuron = true;
	if(nextSegment->nnType == NEURON){
		nextSegment->power += beam->power * neuronChargeFac;
    9678:	ldrb	r3, [r5, #6]
		return;
	}
	
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
    967a:	ldr	r6, [r4, #48]	; 0x30
	boolean animNeuron = true;
	if(nextSegment->nnType == NEURON){
		nextSegment->power += beam->power * neuronChargeFac;
    967c:	vmov	s15, r3
    9680:	vmov	s14, r6
    9684:	vcvt.f32.s32	s15, s15
    9688:	vcvt.f32.s32	s13, s14
    968c:	vldr	s14, [r7, #8]
    9690:	vfma.f32	s15, s13, s14
    9694:	vcvt.u32.f32	s15, s15
    9698:	vstr	s15, [sp, #28]
    969c:	ldrb.w	r3, [sp, #28]
		if(nextSegment->power >= 100){
    96a0:	cmp	r3, #99	; 0x63
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
	boolean animNeuron = true;
	if(nextSegment->nnType == NEURON){
		nextSegment->power += beam->power * neuronChargeFac;
    96a2:	strb	r3, [r5, #6]
		if(nextSegment->power >= 100){
    96a4:	bhi.n	973e <Neural::arriveBeam(Beam*)+0xf6>
	}
	
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
	boolean animNeuron = true;
    96a6:	movs	r2, #1
			neuronDischarge(nextSegment, beam->color.hue());
			animNeuron = false; // dont animate the neuron when the beam passes, so it stays black for dramatic discharge effect
		}
	
		// calc the new power of the beam, stop if no power left
		newPower -= beamDecay;
    96a8:	ldr	r3, [r7, #4]
    96aa:	subs	r3, r6, r3
		if (newPower <= 0){
    96ac:	cmp	r3, #0
    96ae:	ble.n	96ec <Neural::arriveBeam(Beam*)+0xa4>
		}
	}
	
	// get the speed type and the according speed
	float spd = beam->segSpd;
	byte spdMode = beam->spdMode;
    96b0:	ldrb.w	lr, [r4, #40]	; 0x28
	if( spdMode == PIXEL_SPD ){
    96b4:	cmp.w	lr, #0
    96b8:	bne.n	9708 <Neural::arriveBeam(Beam*)+0xc0>
    96ba:	ldrb	r1, [r5, #5]
    96bc:	ldr	r6, [r4, #0]
		spd = beam->pixelSpd;
    96be:	vldr	s0, [r4, #8]
    96c2:	mov.w	lr, #0
	}

	// create the next beam
	if (nextSegment->nnType == SYNAPSE){
    96c6:	cbz	r1, 9714 <Neural::arriveBeam(Beam*)+0xcc>
		boolean dir = DOWN;
		if( nextSegment->connSeg[0] == beam->onSegment) dir = UP;
    96c8:	ldr	r1, [r5, #0]
		startSynapseBeam(nextSegment, dir, spd, spdMode, beam->spread, beam->color, newPower);
    96ca:	add.w	r2, r4, #24
    96ce:	vldr	s1, [r4, #20]
    96d2:	ldr	r4, [r1, #0]
    96d4:	str	r3, [sp, #16]
    96d6:	ldmia	r2, {r0, r1, r2, r3}
    96d8:	stmia.w	sp, {r0, r1, r2, r3}
    96dc:	subs	r2, r4, r6
    96de:	mov	r3, lr
    96e0:	mov	r1, r5
    96e2:	mov	r0, r7
    96e4:	it	ne
    96e6:	movne	r2, #1
    96e8:	bl	9538 <Neural::startSynapseBeam(Segment*, bool, float, unsigned char, float, Color, int)>
	}else{
		startNeuronBeam(nextSegment, beam->onSegment, spd, spdMode, beam->spread, beam->color, newPower, animNeuron);
	}
	
}
    96ec:	add	sp, #32
    96ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// determine the segment it arrived at
	byte connId = ((beam->dir == UP) ? 1 : 0);
	Segment *nextSegment = beam->onSegment->connSeg[connId];
	
	//check the type of the next segment
	if( nextSegment->nnType == SYNAPSE && !allowDirectSynapse){
    96f2:	ldrb.w	r1, [r7, #36]	; 0x24
    96f6:	cbz	r1, 9754 <Neural::arriveBeam(Beam*)+0x10c>
		}
	}
	
	// get the speed type and the according speed
	float spd = beam->segSpd;
	byte spdMode = beam->spdMode;
    96f8:	ldrb.w	lr, [r4, #40]	; 0x28
		return;
	}
	
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
    96fc:	ldr	r3, [r4, #48]	; 0x30
	}
	
	// get the speed type and the according speed
	float spd = beam->segSpd;
	byte spdMode = beam->spdMode;
	if( spdMode == PIXEL_SPD ){
    96fe:	cmp.w	lr, #0
    9702:	bne.n	9738 <Neural::arriveBeam(Beam*)+0xf0>
	}
	
	// increase the power of the segment it arrived at, accoring to the power of the beam
	// and discharge the neuron if neccesary
	int newPower = beam->power;
	boolean animNeuron = true;
    9704:	movs	r2, #1
    9706:	b.n	96be <Neural::arriveBeam(Beam*)+0x76>
    9708:	ldrb	r1, [r5, #5]
			return;
		}
	}
	
	// get the speed type and the according speed
	float spd = beam->segSpd;
    970a:	vldr	s0, [r4, #4]
    970e:	ldr	r6, [r4, #0]
	if( spdMode == PIXEL_SPD ){
		spd = beam->pixelSpd;
	}

	// create the next beam
	if (nextSegment->nnType == SYNAPSE){
    9710:	cmp	r1, #0
    9712:	bne.n	96c8 <Neural::arriveBeam(Beam*)+0x80>
		boolean dir = DOWN;
		if( nextSegment->connSeg[0] == beam->onSegment) dir = UP;
		startSynapseBeam(nextSegment, dir, spd, spdMode, beam->spread, beam->color, newPower);
	}else{
		startNeuronBeam(nextSegment, beam->onSegment, spd, spdMode, beam->spread, beam->color, newPower, animNeuron);
    9714:	add.w	r1, r4, #24
    9718:	vldr	s1, [r4, #20]
    971c:	str	r2, [sp, #20]
    971e:	str	r3, [sp, #16]
    9720:	ldmia	r1, {r0, r1, r2, r3}
    9722:	stmia.w	sp, {r0, r1, r2, r3}
    9726:	mov	r3, lr
    9728:	mov	r2, r6
    972a:	mov	r1, r5
    972c:	mov	r0, r7
    972e:	bl	935c <Neural::startNeuronBeam(Segment*, Segment*, float, unsigned char, float, Color, int, bool)>
	}
	
}
    9732:	add	sp, #32
    9734:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
	}
	
	// get the speed type and the according speed
	float spd = beam->segSpd;
    9738:	vldr	s0, [r4, #4]
    973c:	b.n	96c8 <Neural::arriveBeam(Beam*)+0x80>
	int newPower = beam->power;
	boolean animNeuron = true;
	if(nextSegment->nnType == NEURON){
		nextSegment->power += beam->power * neuronChargeFac;
		if(nextSegment->power >= 100){
			neuronDischarge(nextSegment, beam->color.hue());
    973e:	add.w	r0, r4, #24
    9742:	bl	a3e0 <Color::hue()>
    9746:	mov	r1, r5
    9748:	mov	r2, r0
    974a:	mov	r0, r7
    974c:	bl	9584 <Neural::neuronDischarge(Segment*, int)>
			animNeuron = false; // dont animate the neuron when the beam passes, so it stays black for dramatic discharge effect
    9750:	mov	r2, r8
    9752:	b.n	96a8 <Neural::arriveBeam(Beam*)+0x60>
    9754:	movs	r1, #36	; 0x24
    9756:	ldr	r0, [pc, #24]	; (9770 <Neural::arriveBeam(Beam*)+0x128>)
    9758:	bl	ac68 <usb_serial_write>
    975c:	ldr	r0, [pc, #20]	; (9774 <Neural::arriveBeam(Beam*)+0x12c>)
		startSynapseBeam(nextSegment, dir, spd, spdMode, beam->spread, beam->color, newPower);
	}else{
		startNeuronBeam(nextSegment, beam->onSegment, spd, spdMode, beam->spread, beam->color, newPower, animNeuron);
	}
	
}
    975e:	add	sp, #32
    9760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9764:	b.w	bd90 <Print::println()>
    9768:	movs	r1, #21
    976a:	ldr	r0, [pc, #12]	; (9778 <Neural::arriveBeam(Beam*)+0x130>)
    976c:	b.n	9758 <Neural::arriveBeam(Beam*)+0x110>
    976e:	nop
    9770:	.word	0x2000047c
    9774:	.word	0x20000fbc
    9778:	.word	0x20000464

0000977c <Neural::update()>:
}



void Neural::update(){
	for(int i=0; i<beamControl->beamArray_len; i++){
    977c:	ldr	r3, [r0, #0]
    977e:	ldrh	r2, [r3, #4]
    9780:	cbz	r2, 97d8 <Neural::update()+0x5c>
	sendNeuronDischarge = _sendNeuronDischarge;
}



void Neural::update(){
    9782:	push	{r4, r5, r6, lr}
	for(int i=0; i<beamControl->beamArray_len; i++){
    9784:	movs	r4, #0
    9786:	mov	r6, r0
    9788:	mov	r5, r4
    978a:	b.n	9796 <Neural::update()+0x1a>
    978c:	ldr	r3, [r6, #0]
    978e:	adds	r4, #72	; 0x48
    9790:	ldrh	r2, [r3, #4]
    9792:	cmp	r2, r5
    9794:	ble.n	97d6 <Neural::update()+0x5a>
		if( beamControl->beamArray[i].isActive() ){
    9796:	ldr	r0, [r3, #0]
}



void Neural::update(){
	for(int i=0; i<beamControl->beamArray_len; i++){
    9798:	adds	r5, #1
		if( beamControl->beamArray[i].isActive() ){
    979a:	add	r0, r4
    979c:	bl	931c <Beam::isActive()>
    97a0:	cmp	r0, #0
    97a2:	beq.n	978c <Neural::update()+0x10>
			if ( beamControl->beamArray[i].isNeuralMode() ){
    97a4:	ldr	r3, [r6, #0]
    97a6:	ldr	r0, [r3, #0]
    97a8:	add	r0, r4
    97aa:	bl	9198 <Beam::isNeuralMode()>
    97ae:	cmp	r0, #0
    97b0:	beq.n	978c <Neural::update()+0x10>
				if( beamControl->beamArray[i].justArrived() ){
    97b2:	ldr	r3, [r6, #0]
    97b4:	ldr	r0, [r3, #0]
    97b6:	add	r0, r4
    97b8:	bl	913c <Beam::justArrived()>
    97bc:	cmp	r0, #0
    97be:	beq.n	978c <Neural::update()+0x10>
					arriveBeam( &beamControl->beamArray[i] );
    97c0:	ldr	r3, [r6, #0]
    97c2:	mov	r0, r6
    97c4:	ldr	r1, [r3, #0]
    97c6:	add	r1, r4
    97c8:	adds	r4, #72	; 0x48
    97ca:	bl	9648 <Neural::arriveBeam(Beam*)>
}



void Neural::update(){
	for(int i=0; i<beamControl->beamArray_len; i++){
    97ce:	ldr	r3, [r6, #0]
    97d0:	ldrh	r2, [r3, #4]
    97d2:	cmp	r2, r5
    97d4:	bgt.n	9796 <Neural::update()+0x1a>
    97d6:	pop	{r4, r5, r6, pc}
    97d8:	bx	lr
    97da:	nop

000097dc <BeamControl::BeamControl()>:
#include "Arduino.h"
#include "BeamControl.h"


BeamControl::BeamControl(){
}
    97dc:	bx	lr
    97de:	nop

000097e0 <BeamControl::begin(Beam*, unsigned short)>:

void BeamControl::begin(Beam *_beamArray, uint16_t beamAm){
	beamArray = _beamArray;
	beamArray_len = beamAm;
	activeBeams = 0;
    97e0:	movs	r3, #0

BeamControl::BeamControl(){
}

void BeamControl::begin(Beam *_beamArray, uint16_t beamAm){
	beamArray = _beamArray;
    97e2:	str	r1, [r0, #0]
	beamArray_len = beamAm;
    97e4:	strh	r2, [r0, #4]
	activeBeams = 0;
    97e6:	strh	r3, [r0, #6]
    97e8:	bx	lr
    97ea:	nop

000097ec <BeamControl::freeBeam()>:
}

Beam* BeamControl::freeBeam(){
	for(int i=0; i<beamArray_len; i++){
    97ec:	ldrh	r3, [r0, #4]
    97ee:	cbz	r3, 981a <BeamControl::freeBeam()+0x2e>
	beamArray = _beamArray;
	beamArray_len = beamAm;
	activeBeams = 0;
}

Beam* BeamControl::freeBeam(){
    97f0:	push	{r4, r5, r6, lr}
	for(int i=0; i<beamArray_len; i++){
    97f2:	movs	r4, #0
    97f4:	mov	r6, r0
    97f6:	mov	r5, r4
    97f8:	b.n	9802 <BeamControl::freeBeam()+0x16>
    97fa:	ldrh	r3, [r6, #4]
    97fc:	adds	r4, #72	; 0x48
    97fe:	cmp	r3, r5
    9800:	ble.n	9816 <BeamControl::freeBeam()+0x2a>
		if( !beamArray[i].isActive() ){
    9802:	ldr	r0, [r6, #0]
	beamArray_len = beamAm;
	activeBeams = 0;
}

Beam* BeamControl::freeBeam(){
	for(int i=0; i<beamArray_len; i++){
    9804:	adds	r5, #1
		if( !beamArray[i].isActive() ){
    9806:	add	r0, r4
    9808:	bl	931c <Beam::isActive()>
    980c:	cmp	r0, #0
    980e:	bne.n	97fa <BeamControl::freeBeam()+0xe>
			return &beamArray[i];
    9810:	ldr	r0, [r6, #0]
    9812:	add	r0, r4
    9814:	pop	{r4, r5, r6, pc}
		}
	}
	return NULL;
    9816:	movs	r0, #0
    9818:	pop	{r4, r5, r6, pc}
    981a:	movs	r0, #0
    981c:	bx	lr
    981e:	nop

00009820 <Color::Color()>:
#include "Arduino.h"
#include "Color.h"


Color::Color(){
	RGB_updated = false;
    9820:	movs	r2, #0
    9822:	strb	r2, [r0, #12]
	HSB_updated = false;
    9824:	strb	r2, [r0, #13]
}
    9826:	bx	lr

00009828 <Color::Color(int, unsigned char, unsigned char, unsigned char)>:

Color::Color(int v1, byte v2, byte v3, byte mode){
    9828:	push	{r4, r5, r6, r7, lr}
    982a:	ldrb.w	r4, [sp, #20]
	if(mode == HSB_MODE){
    982e:	cmp	r4, #1
    9830:	beq.n	9842 <Color::Color(int, unsigned char, unsigned char, unsigned char)+0x1a>

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9832:	movs	r5, #1
	HSB_updated = false;
    9834:	movs	r4, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9836:	strb	r1, [r0, #0]
	RGB_color.g = g;
    9838:	strb	r2, [r0, #1]
	RGB_color.b = b;
    983a:	strb	r3, [r0, #2]
	RGB_updated = true;
    983c:	strb	r5, [r0, #12]
	HSB_updated = false;
    983e:	strb	r4, [r0, #13]
	if(mode == HSB_MODE){
		setHSB(v1, v2, v3);
		return;
	}
	setRGB(v1, v2, v3);
}
    9840:	pop	{r4, r5, r6, r7, pc}
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    9842:	add.w	r1, r1, #720	; 0x2d0
    9846:	ldr.w	lr, [pc, #32]	; 9868 <Color::Color(int, unsigned char, unsigned char, unsigned char)+0x40>
	HSB_color.s = s;
    984a:	strb	r2, [r0, #8]
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    984c:	mov.w	r6, #360	; 0x168
    9850:	lsrs	r5, r1, #3
	HSB_color.s = s;
	HSB_color.b = b;
    9852:	strb	r3, [r0, #9]
	RGB_updated = false;
    9854:	movs	r7, #0
	HSB_updated = true;
    9856:	strb	r4, [r0, #13]
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    9858:	umull	r2, r3, lr, r5
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    985c:	strb	r7, [r0, #12]
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    985e:	lsrs	r3, r3, #2
    9860:	mls	r1, r6, r3, r1
    9864:	str	r1, [r0, #4]
    9866:	pop	{r4, r5, r6, r7, pc}
    9868:	.word	0x16c16c17

0000986c <Color::setRGB(unsigned char, unsigned char, unsigned char)>:
		return;
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
    986c:	push	{r4, r5}
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    986e:	movs	r5, #1
	HSB_updated = false;
    9870:	movs	r4, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9872:	strb	r1, [r0, #0]
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9874:	strb	r5, [r0, #12]
	HSB_updated = false;
    9876:	strb	r4, [r0, #13]
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
    9878:	strb	r2, [r0, #1]
	RGB_color.b = b;
    987a:	strb	r3, [r0, #2]
	RGB_updated = true;
	HSB_updated = false;
}
    987c:	pop	{r4, r5}
    987e:	bx	lr

00009880 <Color::setHSB(unsigned int, unsigned char, unsigned char)>:

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    9880:	add.w	r1, r1, #720	; 0x2d0
	HSB_color.s = s;
    9884:	strb	r2, [r0, #8]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    9886:	movs	r2, #1
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
    9888:	strb	r3, [r0, #9]
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
    988a:	push	{r4, r5, r6, r7}
	HSB_color.h = (h+720)%360;
    988c:	ldr	r7, [pc, #28]	; (98ac <Color::setHSB(unsigned int, unsigned char, unsigned char)+0x2c>)
    988e:	lsrs	r4, r1, #3
    9890:	mov.w	r5, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    9894:	movs	r6, #0
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    9896:	umull	r7, r4, r7, r4
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    989a:	strb	r6, [r0, #12]
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    989c:	lsrs	r4, r4, #2
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    989e:	strb	r2, [r0, #13]
	RGB_updated = true;
	HSB_updated = false;
}

void Color::setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    98a0:	mls	r4, r5, r4, r1
    98a4:	str	r4, [r0, #4]
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
}
    98a6:	pop	{r4, r5, r6, r7}
    98a8:	bx	lr
    98aa:	nop
    98ac:	.word	0x16c16c17

000098b0 <Color::HSBtoRGB(HSB*)>:
	setRGB(c1.red(),c1.green(),c1.blue());
	fade(c2, fadeFac);
}

//// convert hsb to rgb
RGB Color::HSBtoRGB(HSB *color){
    98b0:	push	{r4, r5, r6, r7, lr}
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    98b2:	ldrb	r3, [r1, #5]
    98b4:	sub	sp, #20
  RGB output;
  int hue = color->h%360;
    98b6:	ldr	r7, [r1, #0]
    98b8:	cmp	r3, #99	; 0x63
    98ba:	bgt.n	991c <Color::HSBtoRGB(HSB*)+0x6c>
    98bc:	vmov	s15, r3
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
    98c0:	ldrb	r3, [r1, #4]
    98c2:	vcvt.f64.s32	d7, s15
    98c6:	vldr	d6, [pc, #400]	; 9a58 <Color::HSBtoRGB(HSB*)+0x1a8>
    98ca:	vmul.f64	d7, d7, d6
    98ce:	vcvt.u32.f64	s15, d7
    98d2:	vstr	s15, [sp, #4]
    98d6:	ldrb.w	r4, [sp, #4]
    98da:	cbz	r3, 9924 <Color::HSBtoRGB(HSB*)+0x74>
    98dc:	cmp	r3, #99	; 0x63
    98de:	ble.n	993a <Color::HSBtoRGB(HSB*)+0x8a>
    98e0:	movs	r3, #1
}

//// convert hsb to rgb
RGB Color::HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
    98e2:	ldr	r0, [pc, #380]	; (9a60 <Color::HSBtoRGB(HSB*)+0x1b0>)
    98e4:	asrs	r2, r7, #31
    98e6:	mov.w	lr, #360	; 0x168
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
    98ea:	mul.w	r3, r3, r4
}

//// convert hsb to rgb
RGB Color::HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
    98ee:	smull	r0, r1, r7, r0
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    98f2:	ldr	r0, [pc, #368]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
    98f4:	ubfx	r3, r3, #8, #8
}

//// convert hsb to rgb
RGB Color::HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
    98f8:	add	r1, r7
    98fa:	rsb	r2, r2, r1, asr #8
    98fe:	mls	r2, lr, r2, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    9902:	smull	r1, r0, r0, r2
    9906:	asrs	r1, r2, #31
    9908:	add	r0, r2
    990a:	rsb	r0, r1, r0, asr #5
    990e:	cmp	r0, #5
    9910:	bhi.n	9928 <Color::HSBtoRGB(HSB*)+0x78>
    9912:	tbb	[pc, r0]
    9916:	.short	0x8598
    9918:	.word	0x213a536d
//// convert hsb to rgb
RGB Color::HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
    991c:	ldrb	r3, [r1, #4]
    991e:	movs	r4, #254	; 0xfe
    9920:	cmp	r3, #0
    9922:	bne.n	98dc <Color::HSBtoRGB(HSB*)+0x2c>
    output.r=bri;
    output.g=bri;
    output.b=bri;  
    9924:	mov	r6, r4
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
    output.r=bri;
    output.g=bri;
    9926:	mov	r5, r4
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
      break;
    }
  }
  return output;
    9928:	movs	r0, #0
    992a:	bfi	r0, r4, #0, #8
    992e:	bfi	r0, r5, #8, #8
    9932:	bfi	r0, r6, #16, #8
}
    9936:	add	sp, #20
    9938:	pop	{r4, r5, r6, r7, pc}
    993a:	vmov	s15, r3
    993e:	vldr	d6, [pc, #280]	; 9a58 <Color::HSBtoRGB(HSB*)+0x1a8>
    9942:	vcvt.f64.s32	d7, s15
    9946:	vmul.f64	d7, d7, d6
    994a:	vcvt.s32.f64	s15, d7
    994e:	vmov	r3, s15
    9952:	rsb	r3, r3, #255	; 0xff
    9956:	b.n	98e2 <Color::HSBtoRGB(HSB*)+0x32>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
    9958:	ldr	r0, [pc, #264]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    995a:	subs	r7, r4, r3
      output.b = bri;
      break;

    case 5:
      output.r = bri;
      output.g = base;
    995c:	mov	r5, r3
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
    995e:	smull	lr, r6, r0, r2
    9962:	add	r6, r2
    9964:	rsb	r1, r1, r6, asr #5
    9968:	rsb	r1, r1, r1, lsl #4
    996c:	sub.w	r1, r2, r1, lsl #2
    9970:	rsb	r1, r1, #60	; 0x3c
    9974:	mul.w	r2, r1, r7
    9978:	smull	r1, r0, r0, r2
    997c:	asrs	r6, r2, #31
    997e:	add	r2, r0
    9980:	rsb	r2, r6, r2, asr #5
    9984:	add	r3, r2
    9986:	uxtb	r6, r3
      break;
    9988:	b.n	9928 <Color::HSBtoRGB(HSB*)+0x78>
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
    998a:	ldr	r7, [pc, #216]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    998c:	rsb	lr, r3, r4
      output.g = base;
      output.b = bri;
    9990:	mov	r6, r4
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
      output.g = base;
    9992:	mov	r5, r3
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
    9994:	smull	r4, r0, r7, r2
    9998:	add	r0, r2
    999a:	rsb	r1, r1, r0, asr #5
    999e:	rsb	r1, r1, r1, lsl #4
    99a2:	sub.w	r2, r2, r1, lsl #2
    99a6:	mul.w	r2, r2, lr
    99aa:	smull	r1, r7, r7, r2
    99ae:	asrs	r4, r2, #31
    99b0:	add	r2, r7
    99b2:	rsb	r2, r4, r2, asr #5
    99b6:	add	r3, r2
    99b8:	uxtb	r4, r3
      output.g = base;
      output.b = bri;
      break;
    99ba:	b.n	9928 <Color::HSBtoRGB(HSB*)+0x78>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
    99bc:	ldr	r5, [pc, #164]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    99be:	subs	r7, r4, r3
      output.b = bri;
    99c0:	mov	r6, r4
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
    99c2:	mov	r4, r3
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
    99c4:	smull	lr, r0, r5, r2
    99c8:	add	r0, r2
    99ca:	rsb	r1, r1, r0, asr #5
    99ce:	rsb	r1, r1, r1, lsl #4
    99d2:	sub.w	r1, r2, r1, lsl #2
    99d6:	rsb	r1, r1, #60	; 0x3c
    99da:	mul.w	r2, r1, r7
    99de:	smull	r0, r1, r5, r2
    99e2:	asrs	r5, r2, #31
    99e4:	add	r2, r1
    99e6:	rsb	r2, r5, r2, asr #5
    99ea:	add	r3, r2
    99ec:	uxtb	r5, r3
      output.b = bri;
      break;
    99ee:	b.n	9928 <Color::HSBtoRGB(HSB*)+0x78>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
    99f0:	ldr	r6, [pc, #112]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    99f2:	subs	r7, r4, r3
      output.b = base;
      break;

    case 2:
      output.r = base;
      output.g = bri;
    99f4:	mov	r5, r4
      output.g = bri;
      output.b = base;
      break;

    case 2:
      output.r = base;
    99f6:	mov	r4, r3
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
    99f8:	smull	lr, r0, r6, r2
    99fc:	add	r0, r2
    99fe:	rsb	r1, r1, r0, asr #5
    9a02:	rsb	r1, r1, r1, lsl #4
    9a06:	sub.w	r2, r2, r1, lsl #2
    9a0a:	mul.w	r2, r2, r7
    9a0e:	smull	r0, r1, r6, r2
    9a12:	asrs	r6, r2, #31
    9a14:	add	r2, r1
    9a16:	rsb	r2, r6, r2, asr #5
    9a1a:	add	r3, r2
    9a1c:	uxtb	r6, r3
      break;
    9a1e:	b.n	9928 <Color::HSBtoRGB(HSB*)+0x78>
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
    9a20:	ldr	r7, [pc, #64]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
    9a22:	rsb	lr, r3, r4
      output.g = bri;
    9a26:	mov	r5, r4
      output.b = base;
    9a28:	mov	r6, r3
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
    9a2a:	smull	r4, r0, r7, r2
    9a2e:	add	r0, r2
    9a30:	rsb	r1, r1, r0, asr #5
    9a34:	rsb	r1, r1, r1, lsl #4
    9a38:	sub.w	r1, r2, r1, lsl #2
    9a3c:	rsb	r1, r1, #60	; 0x3c
    9a40:	mul.w	r2, r1, lr
    9a44:	b.n	99aa <Color::HSBtoRGB(HSB*)+0xfa>
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
    9a46:	subs	r1, r4, r3
    9a48:	ldr	r0, [pc, #24]	; (9a64 <Color::HSBtoRGB(HSB*)+0x1b4>)
      output.b = base;
    9a4a:	mov	r6, r3
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
    9a4c:	mul.w	r2, r2, r1
    9a50:	smull	r0, r1, r0, r2
    9a54:	b.n	99e2 <Color::HSBtoRGB(HSB*)+0x132>
    9a56:	nop
    9a58:	.word	0x66666666
    9a5c:	.word	0x40046666
    9a60:	.word	0xb60b60b7
    9a64:	.word	0x88888889

00009a68 <Color::red()>:
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9a68:	ldrb	r3, [r0, #12]
void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
    9a6a:	push	{r4, lr}
    9a6c:	mov	r4, r0
	if(!RGB_updated){
    9a6e:	cbnz	r3, 9a88 <Color::red()+0x20>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9a70:	adds	r1, r0, #4
    9a72:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9a76:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9a78:	ubfx	r1, r0, #8, #8
    9a7c:	ubfx	r2, r0, #16, #8
    9a80:	strb	r0, [r4, #0]
    9a82:	strb	r1, [r4, #1]
    9a84:	strb	r2, [r4, #2]
	RGB_updated = true;
    9a86:	strb	r3, [r4, #12]
byte Color::red(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.r;
}
    9a88:	ldrb	r0, [r4, #0]
    9a8a:	pop	{r4, pc}

00009a8c <Color::green()>:

byte Color::green(){
	if(!RGB_updated){
    9a8c:	ldrb	r3, [r0, #12]
		updateRGB();
	}
	return RGB_color.r;
}

byte Color::green(){
    9a8e:	push	{r4, lr}
    9a90:	mov	r4, r0
	if(!RGB_updated){
    9a92:	cbnz	r3, 9aac <Color::green()+0x20>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9a94:	adds	r1, r0, #4
    9a96:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9a9a:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9a9c:	ubfx	r1, r0, #8, #8
    9aa0:	ubfx	r2, r0, #16, #8
    9aa4:	strb	r0, [r4, #0]
    9aa6:	strb	r1, [r4, #1]
    9aa8:	strb	r2, [r4, #2]
	RGB_updated = true;
    9aaa:	strb	r3, [r4, #12]
byte Color::green(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.g;
}
    9aac:	ldrb	r0, [r4, #1]
    9aae:	pop	{r4, pc}

00009ab0 <Color::blue()>:

byte Color::blue(){
	if(!RGB_updated){
    9ab0:	ldrb	r3, [r0, #12]
		updateRGB();
	}
	return RGB_color.g;
}

byte Color::blue(){
    9ab2:	push	{r4, lr}
    9ab4:	mov	r4, r0
	if(!RGB_updated){
    9ab6:	cbnz	r3, 9ad0 <Color::blue()+0x20>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9ab8:	adds	r1, r0, #4
    9aba:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9abe:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9ac0:	ubfx	r1, r0, #8, #8
    9ac4:	ubfx	r2, r0, #16, #8
    9ac8:	strb	r0, [r4, #0]
    9aca:	strb	r1, [r4, #1]
    9acc:	strb	r2, [r4, #2]
	RGB_updated = true;
    9ace:	strb	r3, [r4, #12]
byte Color::blue(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.b;
}
    9ad0:	ldrb	r0, [r4, #2]
    9ad2:	pop	{r4, pc}

00009ad4 <Color::add(Color)>:
		
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
    9ad4:	sub	sp, #16
    9ad6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9ada:	ldrb	r5, [r0, #12]
		
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
    9adc:	add	r7, sp, #36	; 0x24
    9ade:	mov	r4, r0
    9ae0:	stmia.w	r7, {r1, r2, r3}
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9ae4:	cbz	r5, 9b3e <Color::add(Color)+0x6a>
    9ae6:	ldrb.w	r3, [sp, #48]	; 0x30
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
    9aea:	ldrb	r5, [r4, #0]
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9aec:	cmp	r3, #0
    9aee:	beq.n	9b60 <Color::add(Color)+0x8c>
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
    9af0:	ldrb.w	r0, [sp, #36]	; 0x24
    9af4:	add	r5, r0
    9af6:	cmp	r5, #255	; 0xff
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9af8:	ldrb	r3, [r4, #12]
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
    9afa:	it	ge
    9afc:	movge	r5, #255	; 0xff
    9afe:	uxtb	r5, r5
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9b00:	cmp	r3, #0
    9b02:	beq.n	9b88 <Color::add(Color)+0xb4>
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
    9b04:	ldrb	r6, [r4, #1]
    9b06:	ldrb.w	r2, [sp, #37]	; 0x25
    9b0a:	adds	r3, r2, r6
    9b0c:	cmp	r3, #255	; 0xff
    9b0e:	it	ge
    9b10:	movge	r3, #255	; 0xff
    9b12:	uxtb	r6, r3
	byte b = constrain(blue() + toAdd.blue(), 0,255);
    9b14:	ldrb.w	r8, [r4, #2]
    9b18:	ldrb.w	r0, [sp, #38]	; 0x26
    9b1c:	add	r0, r8
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
    9b1e:	cmp	r0, #255	; 0xff
	RGB_updated = true;
    9b20:	mov.w	r2, #1
	HSB_updated = false;
    9b24:	mov.w	r3, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9b28:	strb	r5, [r4, #0]
	RGB_color.g = g;
	RGB_color.b = b;
    9b2a:	it	ge
    9b2c:	movge	r0, #255	; 0xff
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
    9b2e:	strb	r6, [r4, #1]
	RGB_color.b = b;
	RGB_updated = true;
    9b30:	strb	r2, [r4, #12]
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
    9b32:	strb	r0, [r4, #2]
	RGB_updated = true;
	HSB_updated = false;
    9b34:	strb	r3, [r4, #13]
void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
	byte b = constrain(blue() + toAdd.blue(), 0,255);
	setRGB(r,g,b);
}
    9b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b3a:	add	sp, #16
    9b3c:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b3e:	adds	r1, r0, #4
    9b40:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9b44:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b46:	ubfx	r1, r0, #8, #8
    9b4a:	ubfx	r2, r0, #16, #8
	RGB_updated = true;
    9b4e:	strb	r3, [r4, #12]
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9b50:	ldrb.w	r3, [sp, #48]	; 0x30
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b54:	strb	r0, [r4, #0]
    9b56:	strb	r1, [r4, #1]
    9b58:	strb	r2, [r4, #2]
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
    9b5a:	ldrb	r5, [r4, #0]
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9b5c:	cmp	r3, #0
    9b5e:	bne.n	9af0 <Color::add(Color)+0x1c>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b60:	adds	r1, r7, #4
    9b62:	mov	r0, r7
    9b64:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9b68:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b6a:	ubfx	r1, r0, #8, #8
    9b6e:	ubfx	r2, r0, #16, #8
    9b72:	strb.w	r0, [sp, #36]	; 0x24
		setRGB(r,g,b);
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
    9b76:	uxtab	r5, r5, r0
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b7a:	strb.w	r1, [sp, #37]	; 0x25
    9b7e:	strb.w	r2, [sp, #38]	; 0x26
	RGB_updated = true;
    9b82:	strb.w	r3, [sp, #48]	; 0x30
    9b86:	b.n	9af6 <Color::add(Color)+0x22>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b88:	add.w	sl, r4, #4
    9b8c:	mov	r0, r4
	RGB_updated = true;
    9b8e:	mov.w	r8, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b92:	mov	r1, sl
    9b94:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9b98:	ldrb.w	r2, [sp, #48]	; 0x30
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9b9c:	ubfx	r3, r0, #8, #8
    9ba0:	ubfx	r1, r0, #16, #8
    9ba4:	strb	r0, [r4, #0]
    9ba6:	strb	r3, [r4, #1]
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
    9ba8:	uxtb	r6, r3
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9baa:	strb	r1, [r4, #2]
	RGB_updated = true;
    9bac:	strb.w	r8, [r4, #12]
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9bb0:	cmp	r2, #0
    9bb2:	bne.n	9b06 <Color::add(Color)+0x32>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9bb4:	add.w	r9, r7, #4
    9bb8:	mov	r0, r7
    9bba:	mov	r1, r9
    9bbc:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9bc0:	ubfx	r2, r0, #8, #8
    9bc4:	strb.w	r0, [sp, #36]	; 0x24
    9bc8:	ubfx	r0, r0, #16, #8
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
    9bcc:	uxtab	r3, r6, r2
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9bd0:	ldrb	r1, [r4, #12]
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
    9bd2:	strb.w	r8, [sp, #48]	; 0x30
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
    9bd6:	cmp	r3, #255	; 0xff
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9bd8:	strb.w	r2, [sp, #37]	; 0x25
    9bdc:	strb.w	r0, [sp, #38]	; 0x26
	}
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
    9be0:	it	ge
    9be2:	movge	r3, #255	; 0xff
    9be4:	uxtb	r6, r3
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9be6:	cmp	r1, #0
    9be8:	bne.n	9b14 <Color::add(Color)+0x40>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9bea:	mov	r1, sl
    9bec:	mov	r0, r4
    9bee:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9bf2:	ldrb.w	r3, [sp, #48]	; 0x30
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9bf6:	ubfx	r2, r0, #8, #8
    9bfa:	strb	r0, [r4, #0]
    9bfc:	ubfx	r0, r0, #16, #8
	RGB_updated = true;
    9c00:	strb.w	r8, [r4, #12]
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9c04:	strb	r2, [r4, #1]
    9c06:	strb	r0, [r4, #2]
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
	byte b = constrain(blue() + toAdd.blue(), 0,255);
    9c08:	uxtb.w	r8, r0
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9c0c:	cmp	r3, #0
    9c0e:	bne.n	9b18 <Color::add(Color)+0x44>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9c10:	mov	r1, r9
    9c12:	mov	r0, r7
    9c14:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9c18:	ubfx	r3, r0, #16, #8
    9c1c:	ubfx	r2, r0, #8, #8
    9c20:	strb.w	r0, [sp, #36]	; 0x24
    9c24:	strb.w	r3, [sp, #38]	; 0x26
}

void Color::add(Color toAdd){
	byte r = constrain(red() + toAdd.red(), 0,255);
	byte g = constrain(green() + toAdd.green(), 0,255);
	byte b = constrain(blue() + toAdd.blue(), 0,255);
    9c28:	uxtab	r0, r8, r3
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9c2c:	strb.w	r2, [sp, #37]	; 0x25
    9c30:	b.n	9b1e <Color::add(Color)+0x4a>
    9c32:	nop
    9c34:	movs	r0, r0
	...

00009c38 <Color::addHDR(Color, float)>:
	byte b = constrain(blue() + toAdd.blue(), 0,255);
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
    9c38:	vcmp.f32	s0, #0.0
	byte g = constrain(green() + toAdd.green(), 0,255);
	byte b = constrain(blue() + toAdd.blue(), 0,255);
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
    9c3c:	sub	sp, #16
    9c3e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(fadeFac!=0.){
    9c42:	vmrs	APSR_nzcv, fpscr
	byte g = constrain(green() + toAdd.green(), 0,255);
	byte b = constrain(blue() + toAdd.blue(), 0,255);
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
    9c46:	add	r7, sp, #36	; 0x24
    9c48:	stmia.w	r7, {r1, r2, r3}
	if(fadeFac!=0.){
    9c4c:	beq.n	9d3e <Color::addHDR(Color, float)+0x106>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9c4e:	ldrb	r3, [r0, #12]
    9c50:	mov	r4, r0
    9c52:	cmp	r3, #0
    9c54:	beq.w	9e42 <Color::addHDR(Color, float)+0x20a>
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9c58:	ldrb	r3, [r4, #0]
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9c5a:	ldrb.w	r2, [sp, #48]	; 0x30
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9c5e:	vmov	s15, r3
    9c62:	vcvt.f32.s32	s11, s15
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9c66:	cmp	r2, #0
    9c68:	beq.n	9d46 <Color::addHDR(Color, float)+0x10e>
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9c6a:	ldrb.w	r3, [sp, #36]	; 0x24
    9c6e:	vmov	s15, r3
    9c72:	vcvt.f32.s32	s15, s15
    9c76:	vfma.f32	s11, s0, s15
    9c7a:	vcvt.s32.f32	s15, s11
    9c7e:	vmov	r5, s15
		int g = green() + toAdd.green()*fadeFac;
    9c82:	ldrb	r3, [r4, #1]
    9c84:	vmov	s15, r3
    9c88:	vcvt.f32.s32	s11, s15
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9c8c:	cmp	r2, #0
    9c8e:	beq.w	9db0 <Color::addHDR(Color, float)+0x178>
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9c92:	ldrb.w	r3, [sp, #37]	; 0x25
    9c96:	vmov	s15, r3
    9c9a:	vcvt.f32.s32	s15, s15
    9c9e:	vfma.f32	s11, s0, s15
    9ca2:	vcvt.s32.f32	s15, s11
    9ca6:	vmov	r6, s15
		int b = blue() + toAdd.blue()*fadeFac;
    9caa:	ldrb	r3, [r4, #2]
    9cac:	vmov	s15, r3
    9cb0:	vcvt.f32.s32	s11, s15
    9cb4:	ldrb.w	r3, [sp, #38]	; 0x26
    9cb8:	vmov	s15, r3
    9cbc:	vcvt.f32.s32	s15, s15
    9cc0:	vfma.f32	s11, s0, s15
    9cc4:	vcvt.s32.f32	s15, s11
    9cc8:	vmov	r3, s15
    9ccc:	vmov	r2, s15
    9cd0:	cmp	r3, r5
    9cd2:	it	lt
    9cd4:	movlt	r2, r5
    9cd6:	cmp	r2, r6
    9cd8:	it	lt
    9cda:	movlt	r2, r6
		
		int maxVal = r;
		if( g > maxVal ) maxVal = g;
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
    9cdc:	cmp	r2, #255	; 0xff
    9cde:	ble.n	9d30 <Color::addHDR(Color, float)+0xf8>
			float mult = 255./maxVal;
    9ce0:	vmov	s15, r2
    9ce4:	vldr	d3, [pc, #376]	; 9e60 <Color::addHDR(Color, float)+0x228>
    9ce8:	vcvt.f64.s32	d6, s15
			r *= mult;
    9cec:	vmov	s15, r5
    9cf0:	vcvt.f32.s32	s8, s15
			g *= mult;
    9cf4:	vmov	s15, r6
		int maxVal = r;
		if( g > maxVal ) maxVal = g;
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
			float mult = 255./maxVal;
    9cf8:	vdiv.f64	d5, d3, d6
			r *= mult;
			g *= mult;
    9cfc:	vcvt.f32.s32	s9, s15
			b *= mult;
    9d00:	vmov	s15, r3
    9d04:	vcvt.f32.s32	s14, s15
		int maxVal = r;
		if( g > maxVal ) maxVal = g;
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
			float mult = 255./maxVal;
    9d08:	vcvt.f32.f64	s15, d5
			r *= mult;
    9d0c:	vmul.f32	s12, s8, s15
			g *= mult;
    9d10:	vmul.f32	s13, s9, s15
			b *= mult;
    9d14:	vmul.f32	s15, s14, s15
		if( g > maxVal ) maxVal = g;
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
			float mult = 255./maxVal;
			r *= mult;
    9d18:	vcvt.s32.f32	s14, s12
			g *= mult;
			b *= mult;
    9d1c:	vcvt.s32.f32	s15, s15
		if( g > maxVal ) maxVal = g;
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
			float mult = 255./maxVal;
			r *= mult;
    9d20:	vmov	r5, s14
			g *= mult;
    9d24:	vcvt.s32.f32	s14, s13
			b *= mult;
    9d28:	vmov	r3, s15
		if( b > maxVal ) maxVal = b;
		
		if( maxVal > 255){
			float mult = 255./maxVal;
			r *= mult;
			g *= mult;
    9d2c:	vmov	r6, s14

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9d30:	movs	r1, #1
	HSB_updated = false;
    9d32:	movs	r2, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9d34:	strb	r5, [r4, #0]
	RGB_color.g = g;
    9d36:	strb	r6, [r4, #1]
	RGB_color.b = b;
    9d38:	strb	r3, [r4, #2]
	RGB_updated = true;
    9d3a:	strb	r1, [r4, #12]
	HSB_updated = false;
    9d3c:	strb	r2, [r4, #13]
			b *= mult;
		}
		
		setRGB(r,g,b);
	}
}
    9d3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d42:	add	sp, #16
    9d44:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d46:	adds	r1, r7, #4
    9d48:	mov	r0, r7
    9d4a:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9d4e:	movs	r6, #1
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9d50:	uxtb	r2, r0
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d52:	strb.w	r0, [sp, #36]	; 0x24
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9d56:	ldrb	r3, [r4, #12]
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9d58:	vmov	s15, r2
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d5c:	ubfx	r2, r0, #8, #8
    9d60:	ubfx	r0, r0, #16, #8
	RGB_updated = true;
    9d64:	strb.w	r6, [sp, #48]	; 0x30
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9d68:	vcvt.f32.s32	s15, s15
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d6c:	strb.w	r2, [sp, #37]	; 0x25
    9d70:	strb.w	r0, [sp, #38]	; 0x26
	setRGB(r,g,b);
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
    9d74:	vfma.f32	s11, s0, s15
    9d78:	vcvt.s32.f32	s15, s11
    9d7c:	vmov	r5, s15
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9d80:	cmp	r3, #0
    9d82:	bne.n	9e5c <Color::addHDR(Color, float)+0x224>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d84:	adds	r1, r4, #4
    9d86:	mov	r0, r4
    9d88:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9d8c:	ubfx	r2, r0, #8, #8
    9d90:	ubfx	r3, r0, #16, #8
	RGB_updated = true;
    9d94:	strb	r6, [r4, #12]
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9d96:	strb	r2, [r4, #1]
    9d98:	strb	r3, [r4, #2]
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9d9a:	ldrb	r3, [r4, #1]
    9d9c:	ldrb.w	r2, [sp, #48]	; 0x30
    9da0:	vmov	s15, r3
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9da4:	strb	r0, [r4, #0]
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9da6:	vcvt.f32.s32	s11, s15
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    9daa:	cmp	r2, #0
    9dac:	bne.w	9c92 <Color::addHDR(Color, float)+0x5a>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9db0:	add.w	r8, r7, #4
    9db4:	mov	r0, r7
	RGB_updated = true;
    9db6:	mov.w	r9, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9dba:	mov	r1, r8
    9dbc:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9dc0:	ubfx	r3, r0, #8, #8
    9dc4:	ubfx	r2, r0, #16, #8
	RGB_updated = true;
    9dc8:	strb.w	r9, [sp, #48]	; 0x30
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9dcc:	uxtb	r1, r3
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9dce:	strb.w	r3, [sp, #37]	; 0x25
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9dd2:	ldrb	r3, [r4, #12]
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9dd4:	vmov	s15, r1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9dd8:	strb.w	r0, [sp, #36]	; 0x24
    9ddc:	strb.w	r2, [sp, #38]	; 0x26
}

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
    9de0:	vcvt.f32.s32	s15, s15
    9de4:	vfma.f32	s11, s0, s15
    9de8:	vcvt.s32.f32	s15, s11
    9dec:	vmov	r6, s15
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9df0:	cmp	r3, #0
    9df2:	bne.w	9caa <Color::addHDR(Color, float)+0x72>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9df6:	adds	r1, r4, #4
    9df8:	mov	r0, r4
    9dfa:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9dfe:	ubfx	r3, r0, #16, #8
    9e02:	strb	r0, [r4, #0]
    9e04:	ubfx	r0, r0, #8, #8

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
		int b = blue() + toAdd.blue()*fadeFac;
    9e08:	uxtb	r1, r3
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9e0a:	ldrb.w	r2, [sp, #48]	; 0x30
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
    9e0e:	strb.w	r9, [r4, #12]

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
		int b = blue() + toAdd.blue()*fadeFac;
    9e12:	vmov	s15, r1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9e16:	strb	r3, [r4, #2]
    9e18:	strb	r0, [r4, #1]

void Color::addHDR(Color toAdd, float fadeFac){
	if(fadeFac!=0.){
		int r = red() + toAdd.red()*fadeFac;
		int g = green() + toAdd.green()*fadeFac;
		int b = blue() + toAdd.blue()*fadeFac;
    9e1a:	vcvt.f32.s32	s11, s15
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    9e1e:	cmp	r2, #0
    9e20:	bne.w	9cb4 <Color::addHDR(Color, float)+0x7c>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9e24:	mov	r1, r8
    9e26:	mov	r0, r7
    9e28:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9e2c:	ubfx	r2, r0, #8, #8
    9e30:	ubfx	r3, r0, #16, #8
    9e34:	strb.w	r0, [sp, #36]	; 0x24
    9e38:	strb.w	r2, [sp, #37]	; 0x25
    9e3c:	strb.w	r3, [sp, #38]	; 0x26
    9e40:	b.n	9cb4 <Color::addHDR(Color, float)+0x7c>
    9e42:	adds	r1, r0, #4
    9e44:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9e48:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9e4a:	ubfx	r1, r0, #8, #8
    9e4e:	ubfx	r2, r0, #16, #8
    9e52:	strb	r0, [r4, #0]
    9e54:	strb	r1, [r4, #1]
    9e56:	strb	r2, [r4, #2]
	RGB_updated = true;
    9e58:	strb	r3, [r4, #12]
    9e5a:	b.n	9c58 <Color::addHDR(Color, float)+0x20>
    9e5c:	mov	r2, r6
    9e5e:	b.n	9c82 <Color::addHDR(Color, float)+0x4a>
    9e60:	.word	0x00000000
    9e64:	.word	0x406fe000

00009e68 <Color::multiply(Color)>:
		
		setRGB(r,g,b);
	}
}

void Color::multiply(Color toMult){
    9e68:	sub	sp, #16
    9e6a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e6e:	sub	sp, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9e70:	ldrb	r5, [r0, #12]
		
		setRGB(r,g,b);
	}
}

void Color::multiply(Color toMult){
    9e72:	mov	r4, r0
    9e74:	add.w	r8, sp, #36	; 0x24
    9e78:	stmia.w	r8, {r1, r2, r3}
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9e7c:	cmp	r5, #0
    9e7e:	beq.n	9f1e <Color::multiply(Color)+0xb6>
    9e80:	ldrb.w	r3, [sp, #48]	; 0x30
		updateRGB();
	}
	return RGB_color.r;
    9e84:	ldrb	r6, [r4, #0]

byte Color::green(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.g;
    9e86:	ldrb	r7, [r4, #1]

byte Color::blue(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.b;
    9e88:	ldrb	r5, [r4, #2]
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9e8a:	cmp	r3, #0
    9e8c:	beq.n	9f38 <Color::multiply(Color)+0xd0>
		updateRGB();
	}
	return RGB_color.r;
    9e8e:	ldrb.w	r1, [sp, #36]	; 0x24
void Color::multiply(Color toMult){
	byte r = red();
	byte g = green();
	byte b = blue();
	
	if(toMult.red()!=255) r = r * toMult.red() / 255.;
    9e92:	cmp	r1, #255	; 0xff
    9e94:	beq.n	9eb6 <Color::multiply(Color)+0x4e>
    9e96:	smulbb	r1, r1, r6
    9e9a:	vmov	s15, r1
    9e9e:	vldr	d5, [pc, #184]	; 9f58 <Color::multiply(Color)+0xf0>
    9ea2:	vcvt.f64.s32	d7, s15
    9ea6:	vdiv.f64	d6, d7, d5
    9eaa:	vcvt.u32.f64	s15, d6
    9eae:	vstr	s15, [sp, #4]
    9eb2:	ldrb.w	r6, [sp, #4]

byte Color::green(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.g;
    9eb6:	ldrb.w	r2, [sp, #37]	; 0x25
	byte r = red();
	byte g = green();
	byte b = blue();
	
	if(toMult.red()!=255) r = r * toMult.red() / 255.;
	if(toMult.green()!=255) g = g * toMult.green() / 255.;
    9eba:	cmp	r2, #255	; 0xff
    9ebc:	beq.n	9ede <Color::multiply(Color)+0x76>
    9ebe:	smulbb	r2, r2, r7
    9ec2:	vmov	s15, r2
    9ec6:	vldr	d5, [pc, #144]	; 9f58 <Color::multiply(Color)+0xf0>
    9eca:	vcvt.f64.s32	d7, s15
    9ece:	vdiv.f64	d6, d7, d5
    9ed2:	vcvt.u32.f64	s15, d6
    9ed6:	vstr	s15, [sp, #4]
    9eda:	ldrb.w	r7, [sp, #4]

byte Color::blue(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.b;
    9ede:	ldrb.w	r3, [sp, #38]	; 0x26
	byte g = green();
	byte b = blue();
	
	if(toMult.red()!=255) r = r * toMult.red() / 255.;
	if(toMult.green()!=255) g = g * toMult.green() / 255.;
	if(toMult.blue()!=255) b = b * toMult.blue() / 255.;
    9ee2:	cmp	r3, #255	; 0xff
    9ee4:	beq.n	9f06 <Color::multiply(Color)+0x9e>
    9ee6:	smulbb	r3, r3, r5
    9eea:	vmov	s15, r3
    9eee:	vldr	d5, [pc, #104]	; 9f58 <Color::multiply(Color)+0xf0>
    9ef2:	vcvt.f64.s32	d7, s15
    9ef6:	vdiv.f64	d6, d7, d5
    9efa:	vcvt.u32.f64	s15, d6
    9efe:	vstr	s15, [sp, #4]
    9f02:	ldrb.w	r5, [sp, #4]

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9f06:	movs	r2, #1
	HSB_updated = false;
    9f08:	movs	r3, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9f0a:	strb	r6, [r4, #0]
	RGB_color.g = g;
    9f0c:	strb	r7, [r4, #1]
	RGB_color.b = b;
    9f0e:	strb	r5, [r4, #2]
	RGB_updated = true;
    9f10:	strb	r2, [r4, #12]
	HSB_updated = false;
    9f12:	strb	r3, [r4, #13]
	if(toMult.red()!=255) r = r * toMult.red() / 255.;
	if(toMult.green()!=255) g = g * toMult.green() / 255.;
	if(toMult.blue()!=255) b = b * toMult.blue() / 255.;
	
	setRGB(r,g,b);
}
    9f14:	add	sp, #8
    9f16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f1a:	add	sp, #16
    9f1c:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9f1e:	adds	r1, r0, #4
    9f20:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    9f24:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9f26:	ubfx	r1, r0, #8, #8
    9f2a:	ubfx	r2, r0, #16, #8
    9f2e:	strb	r0, [r4, #0]
    9f30:	strb	r1, [r4, #1]
    9f32:	strb	r2, [r4, #2]
	RGB_updated = true;
    9f34:	strb	r3, [r4, #12]
    9f36:	b.n	9e80 <Color::multiply(Color)+0x18>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9f38:	add.w	r1, r8, #4
    9f3c:	mov	r0, r8
    9f3e:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9f42:	ubfx	r2, r0, #8, #8
    9f46:	ubfx	r3, r0, #16, #8
    9f4a:	strb.w	r0, [sp, #36]	; 0x24
    9f4e:	strb.w	r2, [sp, #37]	; 0x25
    9f52:	strb.w	r3, [sp, #38]	; 0x26
    9f56:	b.n	9e8e <Color::multiply(Color)+0x26>
    9f58:	.word	0x00000000
    9f5c:	.word	0x406fe000

00009f60 <Color::multiply(float)>:
	
	setRGB(r,g,b);
}

void Color::multiply(float multFac){
	if(multFac!=1.){
    9f60:	vmov.f32	s15, #112	; 0x3f800000  1.0
    9f64:	vcmp.f32	s0, s15
    9f68:	vmrs	APSR_nzcv, fpscr
    9f6c:	beq.n	9fc8 <Color::multiply(float)+0x68>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9f6e:	ldrb	r3, [r0, #12]
	if(toMult.blue()!=255) b = b * toMult.blue() / 255.;
	
	setRGB(r,g,b);
}

void Color::multiply(float multFac){
    9f70:	push	{r4, lr}
    9f72:	mov	r4, r0
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9f74:	cbz	r3, 9fca <Color::multiply(float)+0x6a>
}

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
    9f76:	ldrb	r3, [r4, #1]

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9f78:	movs	r2, #1
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9f7a:	ldrb	r1, [r4, #0]
}

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
    9f7c:	vmov	s13, r3
		byte b = blue()*multFac;
    9f80:	ldrb	r3, [r4, #2]
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9f82:	vmov	s15, r1
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    9f86:	strb	r2, [r4, #12]
}

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
    9f88:	vcvt.f32.s32	s13, s13
		byte b = blue()*multFac;
    9f8c:	vmov	s14, r3
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9f90:	vcvt.f32.s32	s15, s15
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
    9f94:	movs	r3, #0

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
    9f96:	vcvt.f32.s32	s14, s14
}

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
    9f9a:	vmul.f32	s13, s13, s0
void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
    9f9e:	strb	r3, [r4, #13]

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
    9fa0:	vmul.f32	s14, s14, s0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9fa4:	vmul.f32	s0, s15, s0
}

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
    9fa8:	vcvt.u32.f32	s15, s13
    9fac:	vmov	r1, s15
		byte b = blue()*multFac;
    9fb0:	vcvt.u32.f32	s15, s14
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
    9fb4:	strb	r1, [r4, #1]

void Color::multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
    9fb6:	vmov	r2, s15
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9fba:	vcvt.u32.f32	s15, s0
	RGB_color.g = g;
	RGB_color.b = b;
    9fbe:	strb	r2, [r4, #2]
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    9fc0:	vmov	r3, s15
    9fc4:	strb	r3, [r4, #0]
    9fc6:	pop	{r4, pc}
    9fc8:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    9fca:	adds	r1, r0, #4
    9fcc:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    9fd0:	ubfx	r2, r0, #8, #8
    9fd4:	ubfx	r3, r0, #16, #8
    9fd8:	strb	r0, [r4, #0]
    9fda:	strb	r2, [r4, #1]
    9fdc:	strb	r3, [r4, #2]
    9fde:	b.n	9f76 <Color::multiply(float)+0x16>

00009fe0 <Color::fade(Color, float)>:
		setRGB(r,g,b);
	}
}

void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
    9fe0:	vmov.f32	s15, #112	; 0x3f800000  1.0
		byte b = blue()*multFac;
		setRGB(r,g,b);
	}
}

void Color::fade(Color toFade, float fadeFac){
    9fe4:	sub	sp, #16
    9fe6:	push	{r4, r5, r6, r7, lr}
	if(fadeFac==1.){
    9fe8:	vcmp.f32	s0, s15
		byte b = blue()*multFac;
		setRGB(r,g,b);
	}
}

void Color::fade(Color toFade, float fadeFac){
    9fec:	sub	sp, #12
    9fee:	mov	r4, r0
    9ff0:	add	r5, sp, #36	; 0x24
	if(fadeFac==1.){
    9ff2:	vmrs	APSR_nzcv, fpscr
		byte b = blue()*multFac;
		setRGB(r,g,b);
	}
}

void Color::fade(Color toFade, float fadeFac){
    9ff6:	stmia.w	r5, {r1, r2, r3}
	if(fadeFac==1.){
    9ffa:	bne.n	a02a <Color::fade(Color, float)+0x4a>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    9ffc:	ldrb.w	r3, [sp, #48]	; 0x30
    a000:	cmp	r3, #0
    a002:	beq.w	a152 <Color::fade(Color, float)+0x172>

byte Color::green(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.g;
    a006:	ldrb.w	r5, [sp, #37]	; 0x25

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    a00a:	movs	r2, #1

byte Color::blue(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.b;
    a00c:	ldrb.w	r0, [sp, #38]	; 0x26
void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
    a010:	movs	r3, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    a012:	ldrb.w	r1, [sp, #36]	; 0x24
	RGB_color.g = g;
    a016:	strb	r5, [r4, #1]
	RGB_color.b = b;
    a018:	strb	r0, [r4, #2]
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    a01a:	strb	r1, [r4, #0]
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    a01c:	strb	r2, [r4, #12]
	HSB_updated = false;
    a01e:	strb	r3, [r4, #13]
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
		byte b = constrain(blue()*(1-fadeFac) + toFade.blue()*fadeFac, 0,255);
		
		setRGB(r,g,b);
	}
}
    a020:	add	sp, #12
    a022:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a026:	add	sp, #16
    a028:	bx	lr
}

void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
    a02a:	vcmp.f32	s0, #0.0
    a02e:	vmrs	APSR_nzcv, fpscr
    a032:	beq.n	a020 <Color::fade(Color, float)+0x40>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    a034:	ldrb	r3, [r0, #12]
    a036:	cmp	r3, #0
    a038:	beq.w	a1aa <Color::fade(Color, float)+0x1ca>

void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
    a03c:	ldrb	r3, [r4, #0]
    a03e:	vmov.f32	s11, #112	; 0x3f800000  1.0
    a042:	vmov	s14, r3
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    a046:	ldrb.w	r3, [sp, #48]	; 0x30

void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
    a04a:	vsub.f32	s11, s11, s0
    a04e:	vcvt.f32.s32	s14, s14
    a052:	vmul.f32	s10, s14, s11
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    a056:	cmp	r3, #0
    a058:	beq.w	a186 <Color::fade(Color, float)+0x1a6>

void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
    a05c:	ldrb.w	r3, [sp, #36]	; 0x24
    a060:	vmov.f32	s14, s10
    a064:	vmov	s15, r3
    a068:	vcvt.f32.s32	s15, s15
    a06c:	vfma.f32	s14, s0, s15
    a070:	vcmpe.f32	s14, #0.0
    a074:	vmrs	APSR_nzcv, fpscr
    a078:	bmi.w	a242 <Color::fade(Color, float)+0x262>
    a07c:	vldr	s15, [pc, #460]	; a24c <Color::fade(Color, float)+0x26c>
    a080:	vcmpe.f32	s14, s15
    a084:	vmrs	APSR_nzcv, fpscr
    a088:	ble.n	a170 <Color::fade(Color, float)+0x190>
    a08a:	movs	r6, #255	; 0xff
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    a08c:	ldrb	r3, [r4, #12]
    a08e:	cmp	r3, #0
    a090:	beq.w	a1e8 <Color::fade(Color, float)+0x208>
void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
    a094:	ldrb	r3, [r4, #1]
    a096:	vmov	s14, r3
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    a09a:	ldrb.w	r3, [sp, #48]	; 0x30
void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
    a09e:	vcvt.f32.s32	s14, s14
    a0a2:	vmul.f32	s10, s14, s11
	}
	return RGB_color.r;
}

byte Color::green(){
	if(!RGB_updated){
    a0a6:	cmp	r3, #0
    a0a8:	beq.w	a1c4 <Color::fade(Color, float)+0x1e4>
void Color::fade(Color toFade, float fadeFac){
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
    a0ac:	ldrb.w	r3, [sp, #37]	; 0x25
    a0b0:	vmov.f32	s14, s10
    a0b4:	vmov	s15, r3
    a0b8:	vcvt.f32.s32	s15, s15
    a0bc:	vfma.f32	s14, s0, s15
    a0c0:	vcmpe.f32	s14, #0.0
    a0c4:	vmrs	APSR_nzcv, fpscr
    a0c8:	bmi.w	a23e <Color::fade(Color, float)+0x25e>
    a0cc:	vldr	s15, [pc, #380]	; a24c <Color::fade(Color, float)+0x26c>
    a0d0:	vcmpe.f32	s14, s15
    a0d4:	vmrs	APSR_nzcv, fpscr
    a0d8:	bgt.n	a182 <Color::fade(Color, float)+0x1a2>
    a0da:	vcvt.u32.f32	s15, s14
    a0de:	vstr	s15, [sp, #4]
    a0e2:	ldrb.w	r7, [sp, #4]
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    a0e6:	ldrb	r3, [r4, #12]
    a0e8:	cmp	r3, #0
    a0ea:	beq.w	a222 <Color::fade(Color, float)+0x242>
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
		byte b = constrain(blue()*(1-fadeFac) + toFade.blue()*fadeFac, 0,255);
    a0ee:	ldrb	r3, [r4, #2]
    a0f0:	vmov	s15, r3
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    a0f4:	ldrb.w	r3, [sp, #48]	; 0x30
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
		byte b = constrain(blue()*(1-fadeFac) + toFade.blue()*fadeFac, 0,255);
    a0f8:	vcvt.f32.s32	s15, s15
    a0fc:	vmul.f32	s11, s15, s11
	}
	return RGB_color.g;
}

byte Color::blue(){
	if(!RGB_updated){
    a100:	cmp	r3, #0
    a102:	beq.n	a204 <Color::fade(Color, float)+0x224>
	if(fadeFac==1.){
		setRGB(toFade.red(),toFade.green(),toFade.blue());
	}else if(fadeFac!=0.){
		byte r = constrain(red()*(1-fadeFac) + toFade.red()*fadeFac, 0,255);
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
		byte b = constrain(blue()*(1-fadeFac) + toFade.blue()*fadeFac, 0,255);
    a104:	ldrb.w	r3, [sp, #38]	; 0x26
    a108:	vmov	s15, r3
    a10c:	vcvt.f32.s32	s15, s15
    a110:	vfma.f32	s11, s0, s15
    a114:	vcmpe.f32	s11, #0.0
    a118:	vmrs	APSR_nzcv, fpscr
    a11c:	bmi.w	a246 <Color::fade(Color, float)+0x266>
    a120:	vldr	s14, [pc, #296]	; a24c <Color::fade(Color, float)+0x26c>
    a124:	vcmpe.f32	s11, s14
    a128:	vmrs	APSR_nzcv, fpscr
    a12c:	bgt.n	a17e <Color::fade(Color, float)+0x19e>
    a12e:	vcvt.u32.f32	s15, s11
    a132:	vstr	s15, [sp, #4]
    a136:	ldrb.w	r3, [sp, #4]

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    a13a:	movs	r1, #1
	HSB_updated = false;
    a13c:	movs	r2, #0
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    a13e:	strb	r6, [r4, #0]
	RGB_color.g = g;
    a140:	strb	r7, [r4, #1]
	RGB_color.b = b;
    a142:	strb	r3, [r4, #2]
	RGB_updated = true;
    a144:	strb	r1, [r4, #12]
	HSB_updated = false;
    a146:	strb	r2, [r4, #13]
		byte g = constrain(green()*(1-fadeFac) + toFade.green()*fadeFac, 0,255);
		byte b = constrain(blue()*(1-fadeFac) + toFade.blue()*fadeFac, 0,255);
		
		setRGB(r,g,b);
	}
}
    a148:	add	sp, #12
    a14a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a14e:	add	sp, #16
    a150:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a152:	adds	r1, r5, #4
    a154:	mov	r0, r5
    a156:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    a15a:	ubfx	r2, r0, #8, #8
    a15e:	ubfx	r3, r0, #16, #8
    a162:	strb.w	r0, [sp, #36]	; 0x24
    a166:	strb.w	r2, [sp, #37]	; 0x25
    a16a:	strb.w	r3, [sp, #38]	; 0x26
    a16e:	b.n	a006 <Color::fade(Color, float)+0x26>
    a170:	vcvt.u32.f32	s15, s14
    a174:	vstr	s15, [sp, #4]
    a178:	ldrb.w	r6, [sp, #4]
    a17c:	b.n	a08c <Color::fade(Color, float)+0xac>
    a17e:	movs	r3, #255	; 0xff
    a180:	b.n	a13a <Color::fade(Color, float)+0x15a>
    a182:	movs	r7, #255	; 0xff
    a184:	b.n	a0e6 <Color::fade(Color, float)+0x106>
    a186:	adds	r1, r5, #4
    a188:	mov	r0, r5
    a18a:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a18e:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a190:	ubfx	r1, r0, #8, #8
    a194:	ubfx	r2, r0, #16, #8
    a198:	strb.w	r0, [sp, #36]	; 0x24
    a19c:	strb.w	r1, [sp, #37]	; 0x25
    a1a0:	strb.w	r2, [sp, #38]	; 0x26
	RGB_updated = true;
    a1a4:	strb.w	r3, [sp, #48]	; 0x30
    a1a8:	b.n	a05c <Color::fade(Color, float)+0x7c>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1aa:	adds	r1, r0, #4
    a1ac:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a1b0:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1b2:	ubfx	r1, r0, #8, #8
    a1b6:	ubfx	r2, r0, #16, #8
    a1ba:	strb	r0, [r4, #0]
    a1bc:	strb	r1, [r4, #1]
    a1be:	strb	r2, [r4, #2]
	RGB_updated = true;
    a1c0:	strb	r3, [r4, #12]
    a1c2:	b.n	a03c <Color::fade(Color, float)+0x5c>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1c4:	adds	r1, r5, #4
    a1c6:	mov	r0, r5
    a1c8:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a1cc:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1ce:	ubfx	r1, r0, #8, #8
    a1d2:	ubfx	r2, r0, #16, #8
    a1d6:	strb.w	r0, [sp, #36]	; 0x24
    a1da:	strb.w	r1, [sp, #37]	; 0x25
    a1de:	strb.w	r2, [sp, #38]	; 0x26
	RGB_updated = true;
    a1e2:	strb.w	r3, [sp, #48]	; 0x30
    a1e6:	b.n	a0ac <Color::fade(Color, float)+0xcc>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1e8:	adds	r1, r4, #4
    a1ea:	mov	r0, r4
    a1ec:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a1f0:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a1f2:	ubfx	r1, r0, #8, #8
    a1f6:	ubfx	r2, r0, #16, #8
    a1fa:	strb	r0, [r4, #0]
    a1fc:	strb	r1, [r4, #1]
    a1fe:	strb	r2, [r4, #2]
	RGB_updated = true;
    a200:	strb	r3, [r4, #12]
    a202:	b.n	a094 <Color::fade(Color, float)+0xb4>
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a204:	adds	r1, r5, #4
    a206:	mov	r0, r5
    a208:	bl	98b0 <Color::HSBtoRGB(HSB*)>
    a20c:	ubfx	r2, r0, #8, #8
    a210:	ubfx	r3, r0, #16, #8
    a214:	strb.w	r0, [sp, #36]	; 0x24
    a218:	strb.w	r2, [sp, #37]	; 0x25
    a21c:	strb.w	r3, [sp, #38]	; 0x26
    a220:	b.n	a104 <Color::fade(Color, float)+0x124>
    a222:	adds	r1, r4, #4
    a224:	mov	r0, r4
    a226:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a22a:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a22c:	ubfx	r1, r0, #8, #8
    a230:	ubfx	r2, r0, #16, #8
    a234:	strb	r0, [r4, #0]
    a236:	strb	r1, [r4, #1]
    a238:	strb	r2, [r4, #2]
	RGB_updated = true;
    a23a:	strb	r3, [r4, #12]
    a23c:	b.n	a0ee <Color::fade(Color, float)+0x10e>
    a23e:	movs	r7, #0
    a240:	b.n	a0e6 <Color::fade(Color, float)+0x106>
    a242:	movs	r6, #0
    a244:	b.n	a08c <Color::fade(Color, float)+0xac>
    a246:	movs	r3, #0
    a248:	b.n	a13a <Color::fade(Color, float)+0x15a>
    a24a:	nop
    a24c:	.word	0x437f0000

0000a250 <Color::fade(Color, Color, float)>:
		
		setRGB(r,g,b);
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
    a250:	sub	sp, #16
    a252:	push	{r4, r5, r6, r7, lr}
    a254:	sub	sp, #12
    a256:	mov	r4, r0
    a258:	add	r5, sp, #36	; 0x24
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    a25a:	ldrb.w	r6, [sp, #48]	; 0x30
		
		setRGB(r,g,b);
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
    a25e:	stmia.w	r5, {r1, r2, r3}
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte Color::red(){
	if(!RGB_updated){
    a262:	cbz	r6, a296 <Color::fade(Color, Color, float)+0x46>

byte Color::green(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.g;
    a264:	ldrb.w	r0, [sp, #37]	; 0x25

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    a268:	movs	r5, #1
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
	setRGB(c1.red(),c1.green(),c1.blue());
	fade(c2, fadeFac);
    a26a:	ldr	r2, [sp, #64]	; 0x40
void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
    a26c:	movs	r1, #0

byte Color::blue(){
	if(!RGB_updated){
		updateRGB();
	}
	return RGB_color.b;
    a26e:	ldrb.w	r7, [sp, #38]	; 0x26
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
	setRGB(c1.red(),c1.green(),c1.blue());
	fade(c2, fadeFac);
    a272:	add	r3, sp, #52	; 0x34
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    a274:	ldrb.w	r6, [sp, #36]	; 0x24
	RGB_color.g = g;
    a278:	strb	r0, [r4, #1]
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
	setRGB(c1.red(),c1.green(),c1.blue());
	fade(c2, fadeFac);
    a27a:	mov	r0, r4
void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
    a27c:	strb	r1, [r4, #13]
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
    a27e:	strb	r7, [r4, #2]
	}
	setRGB(v1, v2, v3);
}

void Color::setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
    a280:	strb	r6, [r4, #0]
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
    a282:	strb	r5, [r4, #12]
	}
}

void Color::fade(Color c1, Color c2, float fadeFac){
	setRGB(c1.red(),c1.green(),c1.blue());
	fade(c2, fadeFac);
    a284:	str	r2, [sp, #0]
    a286:	ldmia	r3, {r1, r2, r3}
    a288:	bl	9fe0 <Color::fade(Color, float)>
}
    a28c:	add	sp, #12
    a28e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a292:	add	sp, #16
    a294:	bx	lr
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a296:	adds	r1, r5, #4
    a298:	mov	r0, r5
    a29a:	bl	98b0 <Color::HSBtoRGB(HSB*)>
	RGB_updated = true;
    a29e:	movs	r3, #1
	RGB_updated = false;
	HSB_updated = true;
}

void Color::updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
    a2a0:	ubfx	r1, r0, #8, #8
    a2a4:	ubfx	r2, r0, #16, #8
    a2a8:	strb.w	r0, [sp, #36]	; 0x24
    a2ac:	strb.w	r1, [sp, #37]	; 0x25
    a2b0:	strb.w	r2, [sp, #38]	; 0x26
	RGB_updated = true;
    a2b4:	strb.w	r3, [sp, #48]	; 0x30
    a2b8:	b.n	a264 <Color::fade(Color, Color, float)+0x14>
    a2ba:	nop
    a2bc:	movs	r0, r0
	...

0000a2c0 <Color::RGBtoHSB(RGB*)>:
    }
  }
  return output;
}

HSB Color::RGBtoHSB(RGB *color){
    a2c0:	push	{r4, r5}
    a2c2:	mov	r1, r0
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    a2c4:	ldrb	r4, [r2, #0]
    a2c6:	ldrb	r0, [r2, #1]
    a2c8:	ldrb	r5, [r2, #2]
    a2ca:	mov	r2, r4
    a2cc:	cmp	r4, r0
  byte max_rgb = max(max(color->r,color->g), color->b);
  byte min_rgb = min(min(color->r,color->g), color->b);
  
  HSB output;
  output.s = max_rgb - min_rgb;
    a2ce:	mov	r3, r4
    a2d0:	it	cc
    a2d2:	movcc	r2, r0
    a2d4:	cmp	r4, r0
    a2d6:	it	cs
    a2d8:	movcs	r3, r0
    a2da:	cmp	r2, r5
    a2dc:	it	cc
    a2de:	movcc	r2, r5
    a2e0:	cmp	r3, r5
    a2e2:	ite	ls
    a2e4:	subls	r3, r2, r3
    a2e6:	subhi	r3, r2, r5
    a2e8:	uxtb	r3, r3
    a2ea:	strb	r3, [r1, #4]

  if (output.s == 0) output.h = 0;
    a2ec:	cbz	r3, a340 <Color::RGBtoHSB(RGB*)+0x80>
  else if (max_rgb == color->r){
    a2ee:	cmp	r2, r4
    a2f0:	beq.n	a344 <Color::RGBtoHSB(RGB*)+0x84>
    if(color->b>color->g) output.h = 360+(0 + (float)(color->g-color->b) /  output.s) * 60;
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
    a2f2:	cmp	r2, r0
    a2f4:	beq.n	a3ae <Color::RGBtoHSB(RGB*)+0xee>
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;
    a2f6:	cmp	r5, r2
    a2f8:	beq.n	a37e <Color::RGBtoHSB(RGB*)+0xbe>

  output.s = (float)output.s/max_rgb*100;
  output.b = max_rgb/2.55;
    a2fa:	vmov	s15, r2
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;

  output.s = (float)output.s/max_rgb*100;
    a2fe:	vmov	s14, r2
    a302:	vldr	s12, [pc, #204]	; a3d0 <Color::RGBtoHSB(RGB*)+0x110>
  output.b = max_rgb/2.55;

  return output;
    a306:	mov	r0, r1
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;

  output.s = (float)output.s/max_rgb*100;
  output.b = max_rgb/2.55;
    a308:	vcvt.f64.s32	d3, s15
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;

  output.s = (float)output.s/max_rgb*100;
    a30c:	vmov	s15, r3
    a310:	vcvt.f32.s32	s14, s14
    a314:	vcvt.f32.u32	s15, s15
  output.b = max_rgb/2.55;
    a318:	vldr	d4, [pc, #172]	; a3c8 <Color::RGBtoHSB(RGB*)+0x108>
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;

  output.s = (float)output.s/max_rgb*100;
    a31c:	vdiv.f32	s13, s15, s14
  output.b = max_rgb/2.55;
    a320:	vdiv.f64	d5, d3, d4
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;

  output.s = (float)output.s/max_rgb*100;
    a324:	vmul.f32	s15, s13, s12
    a328:	vcvt.u32.f32	s15, s15
    a32c:	vmov	r3, s15
    a330:	strb	r3, [r1, #4]
  output.b = max_rgb/2.55;
    a332:	vcvt.u32.f64	s15, d5
    a336:	vmov	r3, s15
    a33a:	strb	r3, [r1, #5]

  return output;
    a33c:	pop	{r4, r5}
    a33e:	bx	lr
  byte min_rgb = min(min(color->r,color->g), color->b);
  
  HSB output;
  output.s = max_rgb - min_rgb;

  if (output.s == 0) output.h = 0;
    a340:	str	r3, [r1, #0]
    a342:	b.n	a2fa <Color::RGBtoHSB(RGB*)+0x3a>
  else if (max_rgb == color->r){
    if(color->b>color->g) output.h = 360+(0 + (float)(color->g-color->b) /  output.s) * 60;
    a344:	cmp	r5, r0
    a346:	sub.w	r0, r0, r5
    a34a:	bls.n	a3b6 <Color::RGBtoHSB(RGB*)+0xf6>
    a34c:	vmov	s13, r3
    a350:	vmov	s15, r0
    a354:	vldr	s10, [pc, #124]	; a3d4 <Color::RGBtoHSB(RGB*)+0x114>
    a358:	vcvt.f32.s32	s15, s15
    a35c:	vldr	s11, [pc, #120]	; a3d8 <Color::RGBtoHSB(RGB*)+0x118>
    a360:	vcvt.f32.s32	s12, s13
    a364:	vldr	s14, [pc, #116]	; a3dc <Color::RGBtoHSB(RGB*)+0x11c>
    a368:	vdiv.f32	s13, s15, s12
    a36c:	vadd.f32	s15, s13, s10
    a370:	vfma.f32	s14, s15, s11
    a374:	vcvt.s32.f32	s15, s14
    a378:	vstr	s15, [r1]
    a37c:	b.n	a2fa <Color::RGBtoHSB(RGB*)+0x3a>
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
  else if (max_rgb == color->b) output.h = (4 + (float)(color->r-color->g) /  output.s) * 60;
    a37e:	vmov.f32	s11, #16	; 0x40800000  4.0
    a382:	subs	r0, r4, r0
    a384:	vmov	s15, r0
    a388:	vldr	s12, [pc, #76]	; a3d8 <Color::RGBtoHSB(RGB*)+0x118>
    a38c:	vcvt.f32.s32	s15, s15
    a390:	vmov	s14, r3
    a394:	vcvt.f32.s32	s13, s14
    a398:	vdiv.f32	s14, s15, s13
    a39c:	vadd.f32	s15, s14, s11
    a3a0:	vmul.f32	s15, s15, s12
    a3a4:	vcvt.s32.f32	s15, s15
    a3a8:	vstr	s15, [r1]
    a3ac:	b.n	a2fa <Color::RGBtoHSB(RGB*)+0x3a>
  if (output.s == 0) output.h = 0;
  else if (max_rgb == color->r){
    if(color->b>color->g) output.h = 360+(0 + (float)(color->g-color->b) /  output.s) * 60;
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
  } 
  else if (max_rgb == color->g) output.h = (2 + (float)(color->b-color->r) /  output.s) * 60;
    a3ae:	subs	r0, r5, r4
    a3b0:	vmov.f32	s11, #0	; 0x40000000  2.0
    a3b4:	b.n	a384 <Color::RGBtoHSB(RGB*)+0xc4>
  output.s = max_rgb - min_rgb;

  if (output.s == 0) output.h = 0;
  else if (max_rgb == color->r){
    if(color->b>color->g) output.h = 360+(0 + (float)(color->g-color->b) /  output.s) * 60;
    else output.h = (0 + (float)(color->g-color->b) /  output.s) * 60;
    a3b6:	vmov	s15, r0
    a3ba:	vldr	s11, [pc, #24]	; a3d4 <Color::RGBtoHSB(RGB*)+0x114>
    a3be:	vldr	s12, [pc, #24]	; a3d8 <Color::RGBtoHSB(RGB*)+0x118>
    a3c2:	vcvt.f32.s32	s15, s15
    a3c6:	b.n	a390 <Color::RGBtoHSB(RGB*)+0xd0>
    a3c8:	.word	0x66666666
    a3cc:	.word	0x40046666
    a3d0:	.word	0x42c80000
    a3d4:	.word	0x00000000
    a3d8:	.word	0x42700000
    a3dc:	.word	0x43b40000

0000a3e0 <Color::hue()>:
	}
	return RGB_color.b;
}

int Color::hue(){
	if(!HSB_updated){
    a3e0:	ldrb	r3, [r0, #13]
		updateRGB();
	}
	return RGB_color.b;
}

int Color::hue(){
    a3e2:	push	{r4, r5, lr}
    a3e4:	mov	r4, r0
    a3e6:	sub	sp, #12
	if(!HSB_updated){
    a3e8:	cbnz	r3, a402 <Color::hue()+0x22>
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a3ea:	mov	r2, r0
    a3ec:	mov	r1, r0
    a3ee:	mov	r0, sp
    a3f0:	bl	a2c0 <Color::RGBtoHSB(RGB*)>
    a3f4:	adds	r3, r4, #4
	HSB_updated = true;
    a3f6:	movs	r2, #1
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a3f8:	ldmia.w	sp, {r0, r1}
    a3fc:	stmia.w	r3, {r0, r1}
	HSB_updated = true;
    a400:	strb	r2, [r4, #13]
int Color::hue(){
	if(!HSB_updated){
		updateHSB();
	}
	return HSB_color.h;
}
    a402:	ldr	r0, [r4, #4]
    a404:	add	sp, #12
    a406:	pop	{r4, r5, pc}

0000a408 <Color::saturation()>:

byte Color::saturation(){
	if(!HSB_updated){
    a408:	ldrb	r3, [r0, #13]
		updateHSB();
	}
	return HSB_color.h;
}

byte Color::saturation(){
    a40a:	push	{r4, r5, lr}
    a40c:	mov	r4, r0
    a40e:	sub	sp, #12
	if(!HSB_updated){
    a410:	cbnz	r3, a42a <Color::saturation()+0x22>
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a412:	mov	r2, r0
    a414:	mov	r1, r0
    a416:	mov	r0, sp
    a418:	bl	a2c0 <Color::RGBtoHSB(RGB*)>
    a41c:	adds	r3, r4, #4
	HSB_updated = true;
    a41e:	movs	r2, #1
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a420:	ldmia.w	sp, {r0, r1}
    a424:	stmia.w	r3, {r0, r1}
	HSB_updated = true;
    a428:	strb	r2, [r4, #13]
byte Color::saturation(){
	if(!HSB_updated){
		updateHSB();
	}
	return HSB_color.s;
}
    a42a:	ldrb	r0, [r4, #8]
    a42c:	add	sp, #12
    a42e:	pop	{r4, r5, pc}

0000a430 <Color::brightness()>:

byte Color::brightness(){
	if(!HSB_updated){
    a430:	ldrb	r3, [r0, #13]
		updateHSB();
	}
	return HSB_color.s;
}

byte Color::brightness(){
    a432:	push	{r4, r5, lr}
    a434:	mov	r4, r0
    a436:	sub	sp, #12
	if(!HSB_updated){
    a438:	cbnz	r3, a452 <Color::brightness()+0x22>
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a43a:	mov	r2, r0
    a43c:	mov	r1, r0
    a43e:	mov	r0, sp
    a440:	bl	a2c0 <Color::RGBtoHSB(RGB*)>
    a444:	adds	r3, r4, #4
	HSB_updated = true;
    a446:	movs	r2, #1
	RGB_color = HSBtoRGB(&HSB_color);
	RGB_updated = true;
}

void Color::updateHSB(){
	HSB_color = RGBtoHSB(&RGB_color);
    a448:	ldmia.w	sp, {r0, r1}
    a44c:	stmia.w	r3, {r0, r1}
	HSB_updated = true;
    a450:	strb	r2, [r4, #13]
byte Color::brightness(){
	if(!HSB_updated){
		updateHSB();
	}
	return HSB_color.b;
}
    a452:	ldrb	r0, [r4, #9]
    a454:	add	sp, #12
    a456:	pop	{r4, r5, pc}

0000a458 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    a458:	push	{r4, lr}
    a45a:	mov	r4, r0
  if(pixels)   free(pixels);
    a45c:	ldr	r0, [r0, #8]
    a45e:	cbz	r0, a464 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    a460:	bl	d24c <free>
  if(pin >= 0) pinMode(pin, INPUT);
    a464:	ldrsb.w	r0, [r4, #6]
    a468:	cmp	r0, #0
    a46a:	blt.n	a474 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    a46c:	uxtb	r0, r0
    a46e:	movs	r1, #0
    a470:	bl	b93c <pinMode>
}
    a474:	mov	r0, r4
    a476:	pop	{r4, pc}

0000a478 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    a478:	push	{r4, lr}
    a47a:	mov	r4, r0
  if(pin >= 0) {
    a47c:	ldrsb.w	r0, [r0, #6]
    a480:	cmp	r0, #0
    a482:	blt.n	a494 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    a484:	uxtb	r0, r0
    a486:	movs	r1, #1
    a488:	bl	b93c <pinMode>
    digitalWrite(pin, LOW);
    a48c:	movs	r1, #0
    a48e:	ldrb	r0, [r4, #6]
    a490:	bl	b930 <digitalWrite>
  }
  begun = true;
    a494:	movs	r3, #1
    a496:	strb	r3, [r4, #1]
    a498:	pop	{r4, pc}
    a49a:	nop

0000a49c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    a49c:	push	{r3, r4, r5, lr}
    a49e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    a4a0:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    a4a2:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    a4a4:	cbz	r0, a4aa <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    a4a6:	bl	d24c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    a4aa:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    a4ac:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    a4ae:	ldrb	r0, [r4, #12]
    a4b0:	cmp	r3, r0
    a4b2:	ite	eq
    a4b4:	moveq	r0, #3
    a4b6:	movne	r0, #4
    a4b8:	smulbb	r0, r0, r5
    a4bc:	uxth	r0, r0
    a4be:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    a4c0:	bl	d164 <calloc>
    a4c4:	str	r0, [r4, #8]
    a4c6:	cbz	r0, a4cc <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    a4c8:	strh	r5, [r4, #2]
    a4ca:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    a4cc:	strh	r0, [r4, #4]
    a4ce:	strh	r0, [r4, #2]
    a4d0:	pop	{r3, r4, r5, pc}
    a4d2:	nop

0000a4d4 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    a4d4:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a4d6:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    a4d8:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a4dc:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a4e0:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    a4e2:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    a4e6:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a4ea:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a4ee:	ite	hi
    a4f0:	movhi	r6, #0
    a4f2:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    a4f4:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a4f8:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    a4fc:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    a4fe:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    a500:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    a502:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    a504:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    a506:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    a508:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    a50a:	cbz	r5, a522 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    a50c:	subs	r1, r2, r1
    a50e:	clz	r1, r1
    a512:	lsrs	r1, r1, #5
    a514:	cmp	r1, r4
    a516:	beq.n	a522 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    a518:	ldrh	r1, [r0, #2]
  }
}
    a51a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    a51e:	b.w	a49c <Adafruit_NeoPixel::updateLength(unsigned short)>
    a522:	pop	{r4, r5, r6, r7, pc}

0000a524 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    a524:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    a528:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    a52a:	sub	sp, #20
    a52c:	str	r0, [sp, #12]

  if(!pixels) return;
    a52e:	cmp	r3, #0
    a530:	beq.n	a616 <Adafruit_NeoPixel::show()+0xf2>
    a532:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    a534:	bl	b85c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    a538:	ldr	r3, [r4, #16]
    a53a:	subs	r0, r0, r3
    a53c:	cmp.w	r0, #300	; 0x12c
    a540:	bcc.n	a534 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    a542:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a544:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a546:	ldr	r0, [pc, #408]	; (a6e0 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a548:	ldrsb.w	r3, [r6, #6]
    a54c:	ldr	r4, [pc, #404]	; (a6e4 <Adafruit_NeoPixel::show()+0x1c0>)
    a54e:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a550:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a552:	ldr	r1, [pc, #404]	; (a6e8 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    a554:	ldr.w	ip, [r4, r3]
    a558:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    a55a:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a55c:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    a560:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    a564:	mov	r5, r6
    a566:	mov	r6, r3
    a568:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    a56a:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    a56c:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a56e:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a570:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a572:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a574:	ldr	r4, [pc, #372]	; (a6ec <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a576:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    a57a:	str	r2, [sp, #8]
    a57c:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    a57e:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a580:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a582:	ldr	r1, [pc, #364]	; (a6f0 <Adafruit_NeoPixel::show()+0x1cc>)
    a584:	ldr	r0, [r4, #0]
    a586:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    a588:	cmp	r2, #0
    a58a:	beq.n	a61c <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a58c:	ldr	r5, [pc, #356]	; (a6f4 <Adafruit_NeoPixel::show()+0x1d0>)
    a58e:	lsrs	r3, r3, #8
    while(p < end) {
    a590:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    a592:	umull	r2, r3, r5, r3
    a596:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    a59a:	bcs.n	a5f6 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    a59c:	ldr	r7, [pc, #344]	; (a6f8 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    a59e:	ldr	r6, [pc, #348]	; (a6fc <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    a5a0:	ldr	r3, [sp, #4]
    a5a2:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    a5a6:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    a5aa:	ldrb.w	sl, [r3], #1
    a5ae:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    a5b0:	ldr	r2, [r4, #0]
    a5b2:	ldr	r3, [r1, #0]
    a5b4:	subs	r2, r2, r0
    a5b6:	lsrs	r3, r3, #8
    a5b8:	umull	fp, r3, r5, r3
    a5bc:	cmp.w	r2, r3, lsr #4
    a5c0:	bcc.n	a5b0 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    a5c2:	ldr	r3, [pc, #296]	; (a6ec <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    a5c4:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    a5c8:	ldr	r0, [r3, #0]
        *set = msk;
    a5ca:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    a5ce:	beq.n	a6ce <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    a5d0:	ldr	r3, [r4, #0]
    a5d2:	ldr	r2, [r1, #0]
    a5d4:	subs	r3, r3, r0
    a5d6:	umull	fp, r2, r7, r2
    a5da:	cmp.w	r3, r2, lsr #19
    a5de:	bcc.n	a5d0 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a5e0:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    a5e4:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a5e8:	mov.w	lr, lr, lsr #1
    a5ec:	bne.n	a5b0 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    a5ee:	ldr	r3, [sp, #8]
    a5f0:	ldr	r2, [sp, #4]
    a5f2:	cmp	r3, r2
    a5f4:	bne.n	a5a0 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    a5f6:	ldr	r5, [pc, #244]	; (a6ec <Adafruit_NeoPixel::show()+0x1c8>)
    a5f8:	ldr	r4, [pc, #248]	; (a6f4 <Adafruit_NeoPixel::show()+0x1d0>)
    a5fa:	ldr	r2, [r5, #0]
    a5fc:	ldr	r3, [r1, #0]
    a5fe:	subs	r2, r2, r0
    a600:	lsrs	r3, r3, #8
    a602:	umull	r6, r3, r4, r3
    a606:	cmp.w	r2, r3, lsr #4
    a60a:	bcc.n	a5fa <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    a60c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    a60e:	bl	b85c <micros>
    a612:	ldr	r3, [sp, #12]
    a614:	str	r0, [r3, #16]
}
    a616:	add	sp, #20
    a618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    a61c:	ldr	r6, [pc, #212]	; (a6f4 <Adafruit_NeoPixel::show()+0x1d0>)
    a61e:	lsrs	r3, r3, #7
    a620:	umull	r2, r3, r6, r3
    while(p < end) {
    a624:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    a626:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    a62a:	ldr	r3, [sp, #4]
    a62c:	cmp	r3, r2
    a62e:	bcs.n	a69a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    a630:	ldr.w	lr, [pc, #204]	; a700 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    a634:	ldr	r7, [pc, #196]	; (a6fc <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    a636:	ldr	r3, [sp, #4]
    a638:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    a63c:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    a640:	ldrb.w	fp, [r3], #1
    a644:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    a646:	ldr	r2, [r4, #0]
    a648:	ldr	r3, [r1, #0]
    a64a:	subs	r2, r2, r0
    a64c:	lsrs	r3, r3, #7
    a64e:	umull	r5, r3, r6, r3
    a652:	cmp.w	r2, r3, lsr #4
    a656:	bcc.n	a646 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    a658:	ldr	r3, [pc, #144]	; (a6ec <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    a65a:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    a65e:	ldr	r0, [r3, #0]
        *set = msk;
    a660:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    a664:	beq.n	a6bc <Adafruit_NeoPixel::show()+0x198>
    a666:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    a66a:	ldr	r2, [r4, #0]
    a66c:	ldr	r5, [r1, #0]
    a66e:	subs	r2, r2, r0
    a670:	umull	ip, r3, lr, r5
    a674:	subs	r5, r5, r3
    a676:	add.w	r3, r3, r5, lsr #1
    a67a:	cmp.w	r2, r3, lsr #19
    a67e:	bcc.n	a66a <Adafruit_NeoPixel::show()+0x146>
    a680:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a684:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    a688:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    a68c:	mov.w	r9, r9, lsr #1
    a690:	bne.n	a646 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    a692:	ldr	r3, [sp, #8]
    a694:	ldr	r2, [sp, #4]
    a696:	cmp	r3, r2
    a698:	bne.n	a636 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    a69a:	ldr	r5, [pc, #80]	; (a6ec <Adafruit_NeoPixel::show()+0x1c8>)
    a69c:	ldr	r4, [pc, #84]	; (a6f4 <Adafruit_NeoPixel::show()+0x1d0>)
    a69e:	ldr	r2, [r5, #0]
    a6a0:	ldr	r3, [r1, #0]
    a6a2:	subs	r2, r2, r0
    a6a4:	lsrs	r3, r3, #7
    a6a6:	umull	r6, r3, r4, r3
    a6aa:	cmp.w	r2, r3, lsr #4
    a6ae:	bcc.n	a69e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    a6b0:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    a6b2:	bl	b85c <micros>
    a6b6:	ldr	r3, [sp, #12]
    a6b8:	str	r0, [r3, #16]
    a6ba:	b.n	a616 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    a6bc:	ldr	r3, [r4, #0]
    a6be:	ldr	r2, [r1, #0]
    a6c0:	subs	r3, r3, r0
    a6c2:	umull	r5, r2, r7, r2
    a6c6:	cmp.w	r3, r2, lsr #19
    a6ca:	bcc.n	a6bc <Adafruit_NeoPixel::show()+0x198>
    a6cc:	b.n	a684 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    a6ce:	ldr	r3, [r4, #0]
    a6d0:	ldr	r2, [r1, #0]
    a6d2:	subs	r3, r3, r0
    a6d4:	umull	fp, r2, r6, r2
    a6d8:	cmp.w	r3, r2, lsr #20
    a6dc:	bcc.n	a6ce <Adafruit_NeoPixel::show()+0x1aa>
    a6de:	b.n	a5e0 <Adafruit_NeoPixel::show()+0xbc>
    a6e0:	.word	0xe000edfc
    a6e4:	.word	0x200004c0
    a6e8:	.word	0xe0001000
    a6ec:	.word	0xe0001004
    a6f0:	.word	0x20000f08
    a6f4:	.word	0x014f8b59
    a6f8:	.word	0x6b5fca6b
    a6fc:	.word	0x431bde83
    a700:	.word	0x421f67b3

0000a704 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    a704:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    a706:	ldrb	r3, [r0, #1]
    a708:	cbz	r3, a726 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    a70a:	mov	r4, r0
    a70c:	ldrsb.w	r0, [r0, #6]
    a710:	mov	r5, r1
    a712:	cmp	r0, #0
    a714:	blt.n	a72a <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    a716:	uxtb	r0, r0
    a718:	movs	r1, #0
    a71a:	bl	b93c <pinMode>
    a71e:	ldrb	r3, [r4, #1]
    pin = p;
    a720:	strb	r5, [r4, #6]
    if(begun) {
    a722:	cbnz	r3, a72c <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    a724:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    a726:	strb	r1, [r0, #6]
    a728:	pop	{r3, r4, r5, pc}
    a72a:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    a72c:	mov	r0, r5
    a72e:	movs	r1, #1
    a730:	bl	b93c <pinMode>
      digitalWrite(p, LOW);
    a734:	mov	r0, r5
    a736:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    a738:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    a73c:	b.w	b930 <digitalWrite>

0000a740 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    a740:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    a742:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    a744:	mov	r4, r0
    a746:	mov	r7, r1
    a748:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    a74a:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    a74c:	strb	r5, [r0, #1]
    a74e:	strb	r5, [r0, #7]
    a750:	str	r5, [r0, #8]
    a752:	str	r5, [r0, #16]
{
  updateType(t);
    a754:	bl	a4d4 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    a758:	mov	r1, r7
    a75a:	mov	r0, r4
    a75c:	bl	a49c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    a760:	mov	r0, r4
    a762:	mov	r1, r6
    a764:	bl	a704 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    a768:	mov	r0, r4
    a76a:	pop	{r3, r4, r5, r6, r7, pc}

0000a76c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    a76c:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    a76e:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    a770:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    a774:	cmp	r4, r1
    a776:	bls.n	a7ac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    a778:	ldrb	r4, [r0, #7]
    a77a:	cbz	r4, a78e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    a77c:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    a780:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    a784:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    a788:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    a78a:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    a78c:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    a78e:	ldrb	r5, [r0, #15]
    a790:	ldrb	r4, [r0, #12]
    a792:	cmp	r4, r5
    a794:	beq.n	a7b0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    a796:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    a798:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    a79a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    a79e:	strb	r7, [r1, r5]
    a7a0:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    a7a2:	strb	r2, [r1, r5]
    p[gOffset] = g;
    a7a4:	ldrb	r2, [r0, #13]
    a7a6:	strb	r3, [r1, r2]
    p[bOffset] = b;
    a7a8:	ldrb	r3, [r0, #14]
    a7aa:	strb	r6, [r1, r3]
  }
}
    a7ac:	pop	{r4, r5, r6, r7}
    a7ae:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    a7b0:	add.w	r1, r1, r1, lsl #1
    a7b4:	ldr	r4, [r0, #8]
    a7b6:	add	r1, r4
    a7b8:	b.n	a7a2 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    a7ba:	nop

0000a7bc <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    a7bc:	ldrh	r3, [r0, #2]
    a7be:	cmp	r3, r1
    a7c0:	bls.n	a7f2 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    a7c2:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    a7c4:	ldrb	r2, [r0, #15]
    a7c6:	ldrb	r3, [r0, #12]
    a7c8:	cmp	r2, r3
    a7ca:	beq.n	a7f6 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    a7cc:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    a7ce:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    a7d0:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a7d4:	ldrb	r3, [r1, r3]
    a7d6:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    a7d8:	cbnz	r4, a828 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    a7da:	lsls	r3, r3, #16
    a7dc:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    a7de:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    a7e0:	orr.w	r0, r3, r5, lsl #24
    a7e4:	ldrb	r3, [r1, r4]
    a7e6:	ldrb	r2, [r1, r2]
    a7e8:	orrs	r3, r0
    a7ea:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    a7ee:	pop	{r4, r5}
    a7f0:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    a7f2:	movs	r0, #0
    a7f4:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    a7f6:	add.w	r1, r1, r1, lsl #1
    a7fa:	ldr	r3, [r0, #8]
    if(brightness) {
    a7fc:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    a7fe:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a800:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    a802:	cbz	r4, a858 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    a804:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a806:	lsls	r2, r2, #8
    a808:	ldrb	r3, [r0, #14]
    a80a:	ldrb	r0, [r1, r5]
    a80c:	ldrb	r3, [r1, r3]
    a80e:	lsls	r0, r0, #8
    a810:	lsls	r3, r3, #8
    a812:	udiv	r2, r2, r4
    a816:	udiv	r0, r0, r4
    a81a:	lsls	r2, r2, #16
    a81c:	udiv	r3, r3, r4
    a820:	orr.w	r0, r2, r0, lsl #8
    a824:	orrs	r0, r3
    a826:	b.n	a7ee <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a828:	lsls	r3, r3, #8
    a82a:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    a82c:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a82e:	lsls	r5, r5, #8
    a830:	ldrb	r2, [r1, r2]
    a832:	ldrb	r0, [r1, r0]
    a834:	lsls	r2, r2, #8
    a836:	lsls	r0, r0, #8
    a838:	udiv	r1, r3, r4
    a83c:	udiv	r5, r5, r4
    a840:	udiv	r2, r2, r4
    a844:	lsls	r3, r1, #16
    a846:	udiv	r0, r0, r4
    a84a:	orr.w	r3, r3, r5, lsl #24
    a84e:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    a850:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    a852:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    a856:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    a858:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    a85a:	lsls	r2, r2, #16
    a85c:	ldrb	r3, [r0, #14]
    a85e:	ldrb	r0, [r1, r4]
    a860:	ldrb	r3, [r1, r3]
    a862:	orr.w	r0, r2, r0, lsl #8
    a866:	orrs	r0, r3
    a868:	b.n	a7ee <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    a86a:	nop

0000a86c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    a86c:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    a86e:	movs	r1, #0
    a870:	mov	r3, r0
    a872:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    a876:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    a878:	movs	r4, #0
    a87a:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    a87c:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    a880:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    a882:	bfc	r2, #0, #4
    a886:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    a888:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    a88c:	cmp	r3, r5
    a88e:	bne.n	a876 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    a890:	mov	r2, r4
    a892:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    a894:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    a896:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    a89a:	add.w	r3, r0, r2, lsl #4
    a89e:	adds	r3, #8
    a8a0:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    a8a2:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    a8a6:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    a8aa:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    a8ae:	beq.n	a8b8 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    a8b0:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    a8b2:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    a8b4:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    a8b6:	str	r6, [r1, #8]
    a8b8:	adds	r2, #1
    a8ba:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    a8bc:	cmp	r2, #12
    a8be:	bne.n	a89a <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    a8c0:	pop	{r4, r5, r6}
    a8c2:	bx	lr

0000a8c4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    a8c4:	ldr	r0, [pc, #4]	; (a8cc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    a8c6:	b.w	a86c <TimeAlarmsClass::TimeAlarmsClass()>
    a8ca:	nop
    a8cc:	.word	0x200152a0

0000a8d0 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    a8d0:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    a8d2:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    a8d4:	ubfx	r3, r3, #16, #15
    a8d8:	ldr	r1, [pc, #20]	; (a8f0 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    a8da:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    a8dc:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    a8e0:	ldr	r4, [pc, #16]	; (a8f4 <rx_event+0x24>)
    a8e2:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    a8e4:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    a8e8:	strh.w	r5, [r4, r2, lsl #1]
}
    a8ec:	pop	{r4, r5}
    a8ee:	bx	lr
    a8f0:	.word	0x20015b30
    a8f4:	.word	0x20015b28

0000a8f8 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    a8f8:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    a8fa:	ldr	r3, [pc, #84]	; (a950 <usb_serial_flush_callback+0x58>)
    a8fc:	ldrb	r3, [r3, #0]
    a8fe:	cbnz	r3, a910 <usb_serial_flush_callback+0x18>
    a900:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    a904:	ldr	r3, [pc, #76]	; (a954 <usb_serial_flush_callback+0x5c>)
    a906:	ldrb	r3, [r3, #0]
    a908:	cbz	r3, a910 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    a90a:	ldr	r5, [pc, #76]	; (a958 <usb_serial_flush_callback+0x60>)
    a90c:	ldrh	r2, [r5, #0]
    a90e:	cbnz	r2, a912 <usb_serial_flush_callback+0x1a>
    a910:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a912:	ldr	r7, [pc, #72]	; (a95c <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a914:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a916:	ldr	r6, [pc, #72]	; (a960 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a918:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a91c:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a91e:	ldr	r0, [pc, #68]	; (a964 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a920:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a924:	add.w	r1, r0, r1, lsl #8
    a928:	mov	r0, r6
    a92a:	bl	b6f8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a92e:	mov	r1, r6
    a930:	movs	r0, #4
    a932:	bl	b728 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a936:	ldrb	r3, [r7, #0]
    a938:	adds	r3, #1
    a93a:	uxtb	r3, r3
    a93c:	cmp	r3, #6
    a93e:	it	ls
    a940:	strbls	r3, [r7, #0]
	tx_available = 0;
    a942:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    a946:	it	hi
    a948:	strbhi	r4, [r7, #0]
	tx_available = 0;
    a94a:	strh	r3, [r5, #0]
    a94c:	pop	{r3, r4, r5, r6, r7, pc}
    a94e:	nop
    a950:	.word	0x20015a64
    a954:	.word	0x20015cd0
    a958:	.word	0x20015ba0
    a95c:	.word	0x20015a65
    a960:	.word	0x20015bc0
    a964:	.word	0x20015364

0000a968 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a96c:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a96e:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a970:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a972:	cmp	r1, #0
    a974:	beq.w	aaa0 <usb_serial_write.part.1+0x138>
    a978:	movs	r3, #0
    a97a:	ldr.w	r8, [pc, #320]	; aabc <usb_serial_write.part.1+0x154>
    a97e:	ldr.w	r9, [pc, #304]	; aab0 <usb_serial_write.part.1+0x148>
    a982:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    a984:	ldr	r6, [pc, #284]	; (aaa4 <usb_serial_write.part.1+0x13c>)
    a986:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a98a:	ldr.w	sl, [pc, #308]	; aac0 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    a98e:	ldr	r2, [pc, #280]	; (aaa8 <usb_serial_write.part.1+0x140>)
    a990:	ldrb	r4, [r2, #0]
    a992:	ldr	r2, [pc, #280]	; (aaac <usb_serial_write.part.1+0x144>)
    a994:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a998:	cmp	r3, #0
    a99a:	bne.n	aa58 <usb_serial_write.part.1+0xf0>
    a99c:	mov	r5, r3
    a99e:	mov	r4, r3
    a9a0:	b.n	a9cc <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a9a2:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    a9a6:	cbnz	r4, a9aa <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    a9a8:	ldr	r5, [r6, #0]
    a9aa:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a9ac:	cmp	r3, #0
    a9ae:	bne.n	aa4c <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a9b0:	ldr	r3, [r6, #0]
    a9b2:	subs	r3, r3, r5
    a9b4:	cmp	r3, #120	; 0x78
    a9b6:	bhi.n	aa94 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a9b8:	ldrb.w	r3, [sl]
    a9bc:	cmp	r3, #0
    a9be:	beq.n	aa4c <usb_serial_write.part.1+0xe4>
			yield();
    a9c0:	bl	ba14 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a9c4:	ldrh.w	r3, [r8]
    a9c8:	cmp	r3, #0
    a9ca:	bne.n	aa54 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    a9cc:	mov	r0, r7
    a9ce:	bl	b774 <usb_transfer_status>
			if (!(status & 0x80)) {
    a9d2:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a9d6:	ldr	r2, [pc, #216]	; (aab0 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    a9d8:	bne.n	a9a2 <usb_serial_write.part.1+0x3a>
    a9da:	ldr	r2, [pc, #204]	; (aaa8 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a9dc:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    a9e0:	strb.w	r0, [r9]
    a9e4:	ldrb	r4, [r2, #0]
    a9e6:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a9e8:	ldr	r1, [pc, #200]	; (aab4 <usb_serial_write.part.1+0x14c>)
    a9ea:	lsls	r4, r4, #8
		if (size >= tx_available) {
    a9ec:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a9ee:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a9f2:	add	r0, r4
    a9f4:	add	r0, r1
		if (size >= tx_available) {
    a9f6:	bcc.n	aa6a <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    a9f8:	ldr	r1, [sp, #8]
    a9fa:	bl	be30 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    a9fe:	ldr	r3, [pc, #180]	; (aab4 <usb_serial_write.part.1+0x14c>)
    aa00:	mov.w	r2, #256	; 0x100
    aa04:	mov	r0, r7
    aa06:	adds	r1, r3, r4
    aa08:	movs	r3, #0
    aa0a:	bl	b6f8 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    aa0e:	mov	r1, r7
    aa10:	movs	r0, #4
    aa12:	bl	b728 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    aa16:	ldr	r3, [pc, #144]	; (aaa8 <usb_serial_write.part.1+0x140>)
    aa18:	ldr	r2, [pc, #140]	; (aaa8 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    aa1a:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    aa1c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    aa1e:	ldr	r0, [pc, #152]	; (aab8 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    aa20:	adds	r3, #1
    aa22:	uxtb	r3, r3
    aa24:	cmp	r3, #6
    aa26:	it	hi
    aa28:	movhi	r3, #0
    aa2a:	strb	r3, [r2, #0]
			size -= tx_available;
    aa2c:	ldrh.w	r2, [r8]
			sent += tx_available;
    aa30:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    aa32:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    aa36:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    aa3a:	add	r3, r2
    aa3c:	str	r3, [sp, #4]
			data += tx_available;
    aa3e:	ldr	r3, [sp, #8]
    aa40:	add	r3, r2
    aa42:	str	r3, [sp, #8]
    aa44:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    aa46:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    aa4a:	bne.n	a98e <usb_serial_write.part.1+0x26>
    aa4c:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    aa4e:	add	sp, #20
    aa50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa54:	ldr	r2, [pc, #80]	; (aaa8 <usb_serial_write.part.1+0x140>)
    aa56:	ldrb	r4, [r2, #0]
    aa58:	mov	r2, r3
    aa5a:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aa5e:	lsls	r4, r4, #8
    aa60:	ldr	r1, [pc, #80]	; (aab4 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    aa62:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aa64:	add	r0, r4
    aa66:	add	r0, r1
		if (size >= tx_available) {
    aa68:	bcs.n	a9f8 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    aa6a:	ldr	r1, [sp, #8]
    aa6c:	mov	r2, fp
    aa6e:	str	r3, [sp, #12]
    aa70:	bl	be30 <memcpy>
			tx_available -= size;
    aa74:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    aa76:	mov.w	r1, #3221225472	; 0xc0000000
    aa7a:	ldr	r2, [pc, #60]	; (aab8 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    aa7c:	rsb	r3, fp, r3
    aa80:	strh.w	r3, [r8]
    aa84:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    aa86:	str.w	r1, [r2, #132]	; 0x84
    aa8a:	add	r3, fp
    aa8c:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    aa8e:	add	sp, #20
    aa90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    aa94:	movs	r3, #1
				return sent;
    aa96:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    aa98:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    aa9a:	add	sp, #20
    aa9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    aaa0:	mov	r0, r1
    aaa2:	b.n	aa4e <usb_serial_write.part.1+0xe6>
    aaa4:	.word	0x20015cd8
    aaa8:	.word	0x20015a65
    aaac:	.word	0x20015bc0
    aab0:	.word	0x20015ca0
    aab4:	.word	0x20015364
    aab8:	.word	0x402e0000
    aabc:	.word	0x20015ba0
    aac0:	.word	0x20015cd0

0000aac4 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    aac4:	bx	lr
    aac6:	nop

0000aac8 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aac8:	movs	r1, #0
    aaca:	movs	r2, #224	; 0xe0
    aacc:	ldr	r0, [pc, #128]	; (ab50 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    aace:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    aad0:	mov	r4, r1
    aad2:	ldr	r6, [pc, #128]	; (ab54 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aad4:	ldr	r5, [pc, #128]	; (ab58 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aad6:	bl	d7cc <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    aada:	ldr	r7, [pc, #128]	; (ab5c <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aadc:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    aade:	ldr	r3, [pc, #128]	; (ab60 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aae0:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    aae2:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aae4:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    aae6:	ldr	r6, [pc, #124]	; (ab64 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    aae8:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aaea:	bl	d7cc <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    aaee:	mov	r3, r4
    aaf0:	mov	r2, r4
    aaf2:	movs	r1, #16
    aaf4:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    aaf6:	str	r4, [r7, #0]
    aaf8:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    aafa:	str	r4, [r6, #0]
    aafc:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    aafe:	bl	b690 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    ab02:	mov	r2, r4
    ab04:	ldr	r3, [pc, #96]	; (ab68 <usb_serial_configure+0xa0>)
    ab06:	movs	r1, #64	; 0x40
    ab08:	movs	r0, #3
    ab0a:	bl	b62c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    ab0e:	mov	r3, r4
    ab10:	mov	r2, r4
    ab12:	movs	r1, #64	; 0x40
    ab14:	movs	r0, #4
    ab16:	bl	b690 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    ab1a:	mov	r3, r4
    ab1c:	movs	r2, #64	; 0x40
    ab1e:	mov	r0, r5
    ab20:	ldr	r1, [pc, #72]	; (ab6c <usb_serial_configure+0xa4>)
    ab22:	bl	b6f8 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    ab26:	mov	r1, r5
    ab28:	movs	r0, #3
    ab2a:	bl	b750 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    ab2e:	ldr	r3, [pc, #64]	; (ab70 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    ab30:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    ab32:	ldr	r1, [pc, #64]	; (ab74 <usb_serial_configure+0xac>)
    ab34:	ldr	r0, [pc, #64]	; (ab78 <usb_serial_configure+0xb0>)
    ab36:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    ab38:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    ab3c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    ab40:	ldr.w	r2, [r3, #328]	; 0x148
    ab44:	orr.w	r2, r2, #16777216	; 0x1000000
    ab48:	str.w	r2, [r3, #328]	; 0x148
    ab4c:	pop	{r3, r4, r5, r6, r7, pc}
    ab4e:	nop
    ab50:	.word	0x20015bc0
    ab54:	.word	0x20015a65
    ab58:	.word	0x20015b40
    ab5c:	.word	0x20015b30
    ab60:	.word	0x20015ba0
    ab64:	.word	0x20015b28
    ab68:	.word	0x0000a8d1
    ab6c:	.word	0x20015a68
    ab70:	.word	0x402e0000
    ab74:	.word	0x20015ca4
    ab78:	.word	0x0000a8f9

0000ab7c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    ab7c:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    ab7e:	ldr	r5, [pc, #56]	; (abb8 <usb_serial_getchar+0x3c>)
    ab80:	ldr	r3, [pc, #56]	; (abbc <usb_serial_getchar+0x40>)
    ab82:	ldrh	r2, [r5, #0]
    ab84:	ldrh	r0, [r3, #0]
    ab86:	cmp	r2, r0
    ab88:	bcs.n	abb2 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    ab8a:	adds	r3, r2, #1
    ab8c:	ldr	r1, [pc, #48]	; (abc0 <usb_serial_getchar+0x44>)
    ab8e:	uxth	r3, r3
    ab90:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    ab92:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    ab94:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    ab96:	bls.n	ab9c <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    ab98:	mov	r0, r4
	}
	return -1;
}
    ab9a:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    ab9c:	movs	r3, #0
    ab9e:	movs	r2, #64	; 0x40
    aba0:	ldr	r0, [pc, #32]	; (abc4 <usb_serial_getchar+0x48>)
    aba2:	bl	b6f8 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    aba6:	ldr	r1, [pc, #28]	; (abc4 <usb_serial_getchar+0x48>)
    aba8:	movs	r0, #3
    abaa:	bl	b750 <usb_receive>
		}
		return c;
    abae:	mov	r0, r4
    abb0:	pop	{r3, r4, r5, pc}
	}
	return -1;
    abb2:	mov.w	r0, #4294967295
    abb6:	pop	{r3, r4, r5, pc}
    abb8:	.word	0x20015b28
    abbc:	.word	0x20015b30
    abc0:	.word	0x20015a68
    abc4:	.word	0x20015b40

0000abc8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    abc8:	ldr	r3, [pc, #20]	; (abe0 <usb_serial_peekchar+0x18>)
    abca:	ldr	r2, [pc, #24]	; (abe4 <usb_serial_peekchar+0x1c>)
    abcc:	ldrh	r3, [r3, #0]
    abce:	ldrh	r2, [r2, #0]
    abd0:	cmp	r2, r3
    abd2:	bls.n	abda <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    abd4:	ldr	r2, [pc, #16]	; (abe8 <usb_serial_peekchar+0x20>)
    abd6:	ldrb	r0, [r2, r3]
    abd8:	bx	lr
	}

	return -1;
    abda:	mov.w	r0, #4294967295
}
    abde:	bx	lr
    abe0:	.word	0x20015b28
    abe4:	.word	0x20015b30
    abe8:	.word	0x20015a68

0000abec <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    abec:	ldr	r2, [pc, #8]	; (abf8 <usb_serial_available+0xc>)
    abee:	ldr	r3, [pc, #12]	; (abfc <usb_serial_available+0x10>)
    abf0:	ldrh	r0, [r2, #0]
    abf2:	ldrh	r3, [r3, #0]
}
    abf4:	subs	r0, r0, r3
    abf6:	bx	lr
    abf8:	.word	0x20015b30
    abfc:	.word	0x20015b28

0000ac00 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    ac00:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    ac02:	ldr	r3, [pc, #40]	; (ac2c <usb_serial_flush_input+0x2c>)
    ac04:	ldr	r4, [pc, #40]	; (ac30 <usb_serial_flush_input+0x30>)
    ac06:	ldrh	r5, [r3, #0]
    ac08:	ldrh	r3, [r4, #0]
    ac0a:	cmp	r3, r5
    ac0c:	bcc.n	ac10 <usb_serial_flush_input+0x10>
    ac0e:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    ac10:	movs	r3, #0
    ac12:	ldr	r1, [pc, #32]	; (ac34 <usb_serial_flush_input+0x34>)
    ac14:	ldr	r0, [pc, #32]	; (ac38 <usb_serial_flush_input+0x38>)
    ac16:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    ac18:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    ac1a:	bl	b6f8 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    ac1e:	ldr	r1, [pc, #24]	; (ac38 <usb_serial_flush_input+0x38>)
    ac20:	movs	r0, #3
	}
}
    ac22:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    ac26:	b.w	b750 <usb_receive>
    ac2a:	nop
    ac2c:	.word	0x20015b30
    ac30:	.word	0x20015b28
    ac34:	.word	0x20015a68
    ac38:	.word	0x20015b40

0000ac3c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    ac3c:	ldr	r3, [pc, #36]	; (ac64 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ac3e:	push	{lr}
    ac40:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    ac42:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ac44:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    ac48:	cbnz	r3, ac54 <usb_serial_putchar+0x18>
    ac4a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    ac4e:	add	sp, #12
    ac50:	ldr.w	pc, [sp], #4
    ac54:	movs	r1, #1
    ac56:	add.w	r0, sp, #7
    ac5a:	bl	a968 <usb_serial_write.part.1>
    ac5e:	add	sp, #12
    ac60:	ldr.w	pc, [sp], #4
    ac64:	.word	0x20015cd0

0000ac68 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    ac68:	ldr	r3, [pc, #16]	; (ac7c <usb_serial_write+0x14>)
    ac6a:	ldrb	r3, [r3, #0]
    ac6c:	and.w	r2, r3, #255	; 0xff
    ac70:	cbz	r3, ac76 <usb_serial_write+0xe>
    ac72:	b.w	a968 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    ac76:	mov	r0, r2
    ac78:	bx	lr
    ac7a:	nop
    ac7c:	.word	0x20015cd0

0000ac80 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    ac80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    ac84:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    ac86:	ldr.w	r8, [pc, #64]	; acc8 <usb_serial_write_buffer_free+0x48>
    ac8a:	movs	r3, #1
    ac8c:	ldr	r5, [pc, #48]	; (acc0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    ac8e:	mov	r7, r4
    ac90:	ldr	r6, [pc, #48]	; (acc4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    ac92:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    ac96:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ac98:	mov	r0, r5
    ac9a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    ac9c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    ac9e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    aca2:	beq.n	acb0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    aca4:	bl	b774 <usb_transfer_status>
    aca8:	lsls	r3, r0, #24
    acaa:	it	pl
    acac:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    acb0:	cmp	r4, #7
    acb2:	bne.n	ac96 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    acb4:	movs	r3, #0
	return sum;
}
    acb6:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    acb8:	strb.w	r3, [r8]
	return sum;
}
    acbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc0:	.word	0x20015bc0
    acc4:	.word	0x20015a65
    acc8:	.word	0x20015a64

0000accc <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    accc:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    acce:	ldr	r3, [pc, #80]	; (ad20 <usb_serial_flush_output+0x54>)
    acd0:	ldrb	r3, [r3, #0]
    acd2:	cbz	r3, acda <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    acd4:	ldr	r4, [pc, #76]	; (ad24 <usb_serial_flush_output+0x58>)
    acd6:	ldrh	r2, [r4, #0]
    acd8:	cbnz	r2, acdc <usb_serial_flush_output+0x10>
    acda:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    acdc:	ldr	r6, [pc, #72]	; (ad28 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    acde:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    ace2:	ldr	r5, [pc, #72]	; (ad2c <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    ace4:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    ace6:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    ace8:	rsb	r2, r2, #256	; 0x100
    acec:	ldr	r0, [pc, #64]	; (ad30 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    acee:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    acf2:	ldr	r7, [pc, #64]	; (ad34 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    acf4:	add.w	r1, r0, r1, lsl #8
    acf8:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    acfa:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    acfe:	bl	b6f8 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ad02:	mov	r1, r5
    ad04:	movs	r0, #4
    ad06:	bl	b728 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ad0a:	ldrb	r3, [r6, #0]
    ad0c:	adds	r3, #1
    ad0e:	uxtb	r3, r3
    ad10:	cmp	r3, #6
    ad12:	it	hi
    ad14:	movhi	r3, #0
    ad16:	strb	r3, [r6, #0]
	tx_available = 0;
    ad18:	movs	r3, #0
    ad1a:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    ad1c:	strb	r3, [r7, #0]
    ad1e:	pop	{r3, r4, r5, r6, r7, pc}
    ad20:	.word	0x20015cd0
    ad24:	.word	0x20015ba0
    ad28:	.word	0x20015a65
    ad2c:	.word	0x20015bc0
    ad30:	.word	0x20015364
    ad34:	.word	0x20015a64

0000ad38 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ad38:	ldr	r2, [pc, #556]	; (af68 <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ad3a:	ldr	r3, [pc, #560]	; (af6c <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ad3c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    ad3e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    ad42:	ldr	r5, [pc, #556]	; (af70 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ad44:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    ad46:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    ad48:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ad4a:	bls.n	ad88 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    ad4c:	ldr	r3, [pc, #548]	; (af74 <set_arm_clock+0x23c>)
    ad4e:	cmp	r0, r3
    ad50:	bls.w	af54 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ad54:	ldr	r3, [pc, #544]	; (af78 <set_arm_clock+0x240>)
    ad56:	movw	r6, #1300	; 0x514
    ad5a:	ldr.w	lr, [pc, #600]	; afb4 <set_arm_clock+0x27c>
    ad5e:	add	r3, r0
    ad60:	ldr	r5, [pc, #536]	; (af7c <set_arm_clock+0x244>)
    ad62:	lsrs	r2, r3, #8
    ad64:	umull	r3, r2, lr, r2
    ad68:	lsrs	r3, r2, #7
    ad6a:	add.w	r3, r3, r3, lsl #2
    ad6e:	add.w	r2, r3, r3, lsl #2
    ad72:	addw	r3, r2, #1250	; 0x4e2
    ad76:	cmp	r3, r6
    ad78:	it	cs
    ad7a:	movcs	r3, r6
    ad7c:	sub.w	r3, r3, #800	; 0x320
    ad80:	umull	r3, r6, r5, r3
    ad84:	lsrs	r6, r6, #3
    ad86:	b.n	ad90 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    ad88:	cmp	r0, #25
    ad8a:	ite	cc
    ad8c:	movcc	r6, #6
    ad8e:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ad90:	ldr	r2, [pc, #472]	; (af6c <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ad92:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ad96:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ad9a:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ad9c:	orr.w	r3, r3, #192	; 0xc0
    ada0:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ada4:	bcs.n	adbc <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ada6:	ldr	r3, [pc, #456]	; (af70 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ada8:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    adac:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    adae:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    adb0:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    adb2:	ldr	r3, [r2, #0]
    adb4:	cmp	r3, #0
    adb6:	bge.n	adb2 <set_arm_clock+0x7a>
    adb8:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    adbc:	ands.w	r3, r4, #33554432	; 0x2000000
    adc0:	bne.n	ae20 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    adc2:	ldr	r5, [pc, #444]	; (af80 <set_arm_clock+0x248>)
    adc4:	ldr	r2, [pc, #444]	; (af84 <set_arm_clock+0x24c>)
    adc6:	ldr.w	ip, [r5, #16]
    adca:	mov	r5, r2
    adcc:	and.w	r2, ip, r2
    add0:	cmp	r2, r5
    add2:	itet	eq
    add4:	moveq.w	r3, #402653184	; 0x18000000
    add8:	movne.w	r2, #4096	; 0x1000
    addc:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    adde:	eor.w	r5, r4, r3
    ade2:	tst.w	r5, #939524096	; 0x38000000
    ade6:	beq.n	adf6 <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    ade8:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    adec:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    adf0:	ldr	r5, [pc, #376]	; (af6c <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    adf2:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    adf4:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    adf6:	eor.w	r3, r1, r2
    adfa:	tst.w	r3, #12288	; 0x3000
    adfe:	beq.n	ae12 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    ae00:	ldr	r3, [pc, #360]	; (af6c <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    ae02:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    ae06:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ae08:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    ae0a:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ae0c:	ldr	r3, [r2, #72]	; 0x48
    ae0e:	lsls	r5, r3, #28
    ae10:	bmi.n	ae0c <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ae12:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ae16:	ldr	r2, [pc, #340]	; (af6c <set_arm_clock+0x234>)
    ae18:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ae1a:	ldr	r3, [r2, #72]	; 0x48
    ae1c:	lsls	r1, r3, #26
    ae1e:	bmi.n	ae1a <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    ae20:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ae22:	ldr	r5, [pc, #356]	; (af88 <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    ae24:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    ae26:	mul.w	r3, r1, r2
    ae2a:	mul.w	r3, r0, r3
    ae2e:	cmp	r3, r5
    ae30:	bhi.n	ae46 <set_arm_clock+0x10e>
		if (div_arm < 8) {
    ae32:	cmp	r2, #7
    ae34:	bhi.w	af40 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    ae38:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    ae3a:	mul.w	r3, r1, r2
    ae3e:	mul.w	r3, r0, r3
    ae42:	cmp	r3, r5
    ae44:	bls.n	ae32 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ae46:	ldr	r0, [pc, #324]	; (af8c <set_arm_clock+0x254>)
    ae48:	ldr	r5, [pc, #324]	; (af90 <set_arm_clock+0x258>)
    ae4a:	add	r0, r3
    ae4c:	umull	r3, r0, r5, r0
    ae50:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    ae52:	cmp	r3, #108	; 0x6c
    ae54:	bhi.n	af4a <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    ae56:	cmp	r3, #53	; 0x35
    ae58:	bhi.n	af58 <set_arm_clock+0x220>
    ae5a:	ldr.w	r8, [pc, #348]	; afb8 <set_arm_clock+0x280>
    ae5e:	movs	r3, #54	; 0x36
    ae60:	ldr	r0, [pc, #304]	; (af94 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae62:	ldr.w	ip, [pc, #284]	; af80 <set_arm_clock+0x248>
    ae66:	ldr	r5, [pc, #304]	; (af98 <set_arm_clock+0x260>)
    ae68:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    ae6c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae70:	and.w	r5, r9, r5
    ae74:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    ae76:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ae7a:	beq.n	ae94 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ae7c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ae80:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ae84:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ae86:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ae8a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ae8e:	ldr	r3, [r5, #0]
    ae90:	cmp	r3, #0
    ae92:	bge.n	ae8e <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ae94:	ldr.w	ip, [pc, #212]	; af6c <set_arm_clock+0x234>
    ae98:	subs	r2, #1
    ae9a:	ldr.w	r3, [ip, #16]
    ae9e:	and.w	r3, r3, #7
    aea2:	cmp	r3, r2
    aea4:	beq.n	aeb6 <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aea6:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aeaa:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aeac:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aeb0:	ldr	r3, [r5, #72]	; 0x48
    aeb2:	lsls	r3, r3, #15
    aeb4:	bmi.n	aeb0 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aeb6:	subs	r1, #1
    aeb8:	lsls	r1, r1, #10
    aeba:	eor.w	r3, r4, r1
    aebe:	tst.w	r3, #7168	; 0x1c00
    aec2:	beq.n	aeda <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    aec4:	ldr	r3, [pc, #164]	; (af6c <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aec6:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aeca:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aece:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aed0:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    aed2:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aed4:	ldr	r3, [r2, #72]	; 0x48
    aed6:	lsls	r1, r3, #30
    aed8:	bmi.n	aed4 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aeda:	ldr	r3, [pc, #192]	; (af9c <set_arm_clock+0x264>)
    aedc:	ldr	r1, [pc, #192]	; (afa0 <set_arm_clock+0x268>)
    aede:	add	r3, r0
    aee0:	lsrs	r3, r3, #7
    aee2:	umull	r3, r1, r1, r3
    aee6:	lsrs	r1, r1, #12
    aee8:	cmp	r1, #4
    aeea:	it	cs
    aeec:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    aeee:	subs	r3, r1, #1
    aef0:	lsls	r3, r3, #8
    aef2:	eor.w	r2, r4, r3
    aef6:	tst.w	r2, #768	; 0x300
    aefa:	beq.n	af0a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aefc:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    af00:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    af04:	ldr	r2, [pc, #100]	; (af6c <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    af06:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    af08:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    af0a:	ldr	r3, [pc, #96]	; (af6c <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    af0c:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    af10:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    af12:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    af14:	ldr	r3, [r2, #72]	; 0x48
    af16:	lsls	r3, r3, #26
    af18:	bmi.n	af14 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    af1a:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    af1e:	ldr	r2, [pc, #132]	; (afa4 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    af20:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    af22:	ldr	r3, [pc, #132]	; (afa8 <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    af24:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    af26:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    af28:	bcs.n	af3c <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    af2a:	ldr	r3, [pc, #68]	; (af70 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    af2c:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    af30:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    af32:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    af34:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    af36:	ldr	r3, [r2, #0]
    af38:	cmp	r3, #0
    af3a:	bge.n	af36 <set_arm_clock+0x1fe>
	}

	return frequency;
}
    af3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    af40:	cmp	r1, #4
    af42:	bhi.n	ae46 <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    af44:	adds	r1, #1
				div_arm = 1;
    af46:	movs	r2, #1
    af48:	b.n	ae26 <set_arm_clock+0xee>
    af4a:	ldr.w	r8, [pc, #112]	; afbc <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    af4e:	movs	r3, #108	; 0x6c
    af50:	ldr	r0, [pc, #88]	; (afac <set_arm_clock+0x274>)
    af52:	b.n	ae62 <set_arm_clock+0x12a>
    af54:	movs	r6, #18
    af56:	b.n	ad90 <set_arm_clock+0x58>
    af58:	ldr	r0, [pc, #84]	; (afb0 <set_arm_clock+0x278>)
    af5a:	ldr.w	r8, [pc, #100]	; afc0 <set_arm_clock+0x288>
    af5e:	mul.w	r0, r0, r3
    af62:	orr.w	r8, r3, r8
    af66:	b.n	ae62 <set_arm_clock+0x12a>
    af68:	.word	0x1f78a400
    af6c:	.word	0x400fc000
    af70:	.word	0x40080000
    af74:	.word	0x23c34600
    af78:	.word	0xdc3cba00
    af7c:	.word	0x51eb851f
    af80:	.word	0x400d8000
    af84:	.word	0x80003040
    af88:	.word	0x269fb1ff
    af8c:	.word	0x005b8d80
    af90:	.word	0x165e9f81
    af94:	.word	0x269fb200
    af98:	.word	0x8001307f
    af9c:	.word	0x08f0d17f
    afa0:	.word	0x00e5109f
    afa4:	.word	0x20000f08
    afa8:	.word	0x20000f04
    afac:	.word	0x4d3f6400
    afb0:	.word	0x00b71b00
    afb4:	.word	0x004cb223
    afb8:	.word	0x80002036
    afbc:	.word	0x8000206c
    afc0:	.word	0x80002000

0000afc4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    afc4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    afc6:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    afc8:	cbz	r3, afd2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    afca:	ldr	r3, [r2, #4]
    afcc:	orr.w	r3, r3, #32768	; 0x8000
    afd0:	str	r3, [r2, #4]
	}
	__disable_irq();
    afd2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    afd4:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    afd6:	cbz	r4, b000 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    afd8:	ldr	r3, [pc, #64]	; (b01c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    afda:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    afdc:	ldr.w	r4, [r3, #432]	; 0x1b0
    afe0:	tst	r4, r1
    afe2:	bne.n	b014 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    afe4:	ldr.w	r4, [r3, #320]	; 0x140
    afe8:	orr.w	r4, r4, #16384	; 0x4000
    afec:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    aff0:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    aff4:	ldr.w	r4, [r3, #320]	; 0x140
    aff8:	lsls	r4, r4, #17
    affa:	bpl.n	afe4 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    affc:	tst	r1, r5
    affe:	bne.n	b014 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    b000:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    b002:	ldr	r4, [pc, #24]	; (b01c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    b004:	str	r2, [r0, #8]
	endpoint->status = 0;
    b006:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    b008:	ldr.w	r3, [r4, #432]	; 0x1b0
    b00c:	orrs	r1, r3
    b00e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b012:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    b014:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b016:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b018:	pop	{r4, r5}
    b01a:	bx	lr
    b01c:	.word	0x402e0000

0000b020 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b020:	push	{r3, r4, r5, lr}
    b022:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    b024:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    b026:	b.n	b036 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    b028:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    b02a:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    b02c:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    b02e:	ldr	r2, [r5, #52]	; 0x34
    b030:	mov	r3, r4
    b032:	cmp	r4, r2
    b034:	beq.n	b048 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    b036:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    b038:	cbz	r3, b048 <run_callbacks+0x28>
    b03a:	cmp	r3, #1
    b03c:	beq.n	b048 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    b03e:	ldr	r2, [r3, #4]
    b040:	lsls	r2, r2, #24
    b042:	bpl.n	b028 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    b044:	str	r3, [r5, #48]	; 0x30
			return;
    b046:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    b048:	movs	r3, #0
    b04a:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    b04c:	str	r3, [r5, #52]	; 0x34
    b04e:	pop	{r3, r4, r5, pc}

0000b050 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b050:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    b052:	cbnz	r1, b086 <endpoint0_transmit.constprop.0+0x36>
    b054:	ldr	r4, [pc, #124]	; (b0d4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b056:	ldr	r3, [pc, #128]	; (b0d8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b058:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b05a:	ldr	r0, [pc, #128]	; (b0dc <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b05c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b05e:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    b060:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b062:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    b064:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b066:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    b068:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    b06a:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b06e:	ldr	r5, [pc, #112]	; (b0e0 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b070:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    b074:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    b076:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b07a:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    b07c:	ldr.w	r3, [r2, #432]	; 0x1b0
    b080:	cmp	r3, #0
    b082:	bne.n	b07c <endpoint0_transmit.constprop.0+0x2c>
}
    b084:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b086:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b088:	ldr	r3, [pc, #88]	; (b0e4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b08a:	ldr	r5, [pc, #80]	; (b0dc <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b08c:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b08e:	ldr	r4, [pc, #68]	; (b0d4 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b090:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    b094:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b096:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b098:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b09a:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    b09e:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b0a0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b0a4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b0a6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b0aa:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b0ae:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    b0b2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b0b4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b0b6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b0ba:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b0be:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b0c2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b0c4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    b0c6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b0ca:	ldr.w	r3, [r2, #432]	; 0x1b0
    b0ce:	cmp	r3, #0
    b0d0:	bne.n	b0ca <endpoint0_transmit.constprop.0+0x7a>
    b0d2:	b.n	b056 <endpoint0_transmit.constprop.0+0x6>
    b0d4:	.word	0x20017000
    b0d8:	.word	0x20016020
    b0dc:	.word	0x402e0000
    b0e0:	.word	0x20015cb0
    b0e4:	.word	0x20016000

0000b0e8 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    b0e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    b0ec:	ldr	r4, [pc, #696]	; (b3a8 <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    b0ee:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    b0f0:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b0f4:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    b0f8:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    b0fc:	beq.n	b1bc <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b0fe:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b102:	cmp	r3, #0
    b104:	beq.n	b1b2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b106:	mov.w	r9, #65537	; 0x10001
    b10a:	ldr.w	fp, [pc, #700]	; b3c8 <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b10e:	mov	r6, r4
    b110:	ldr	r7, [pc, #664]	; (b3ac <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b112:	mov	sl, r9
    b114:	ldr	r1, [r7, #40]	; 0x28
    b116:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    b118:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b11c:	ldr.w	r3, [r4, #320]	; 0x140
    b120:	orr.w	r3, r3, #8192	; 0x2000
    b124:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b128:	ldr.w	r3, [r4, #320]	; 0x140
    b12c:	lsls	r5, r3, #18
    b12e:	bpl.n	b11c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b130:	ldr.w	r3, [r6, #320]	; 0x140
    b134:	bic.w	r3, r3, #8192	; 0x2000
    b138:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b13c:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b140:	ldr.w	r3, [r4, #436]	; 0x1b4
    b144:	ands.w	r3, r3, #65537	; 0x10001
    b148:	bne.n	b140 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b14a:	uxth	r0, r1
    b14c:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    b150:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b154:	cmp	r0, r5
    b156:	bhi.w	b27a <isr+0x192>
    b15a:	cmp.w	r0, #1664	; 0x680
    b15e:	bcs.w	b4c4 <isr+0x3dc>
    b162:	cmp.w	r0, #258	; 0x102
    b166:	beq.w	b3e4 <isr+0x2fc>
    b16a:	bhi.w	b300 <isr+0x218>
    b16e:	cmp	r0, #128	; 0x80
    b170:	beq.w	b38e <isr+0x2a6>
    b174:	cmp	r0, #130	; 0x82
    b176:	bne.w	b2f0 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b17a:	uxth	r2, r2
    b17c:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b180:	cmp	r1, #7
    b182:	bhi.w	b2f0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b186:	lsls	r1, r1, #2
    b188:	ldr	r0, [pc, #548]	; (b3b0 <isr+0x2c8>)
		reply_buffer[0] = 0;
    b18a:	ldr	r5, [pc, #552]	; (b3b4 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b18c:	add	r0, r1
    b18e:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b190:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    b192:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    b194:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b196:	bpl.w	b516 <isr+0x42e>
    b19a:	lsls	r2, r1, #15
    b19c:	bpl.n	b1a2 <isr+0xba>
			reply_buffer[0] = 1;
    b19e:	movs	r3, #1
    b1a0:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    b1a2:	movs	r1, #2
    b1a4:	ldr	r0, [pc, #524]	; (b3b4 <isr+0x2cc>)
    b1a6:	bl	b050 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b1aa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b1ae:	cmp	r3, #0
    b1b0:	bne.n	b114 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b1b2:	ldr	r2, [pc, #500]	; (b3a8 <isr+0x2c0>)
    b1b4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    b1b8:	cmp	r3, #0
    b1ba:	bne.n	b246 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    b1bc:	tst.w	r8, #64	; 0x40
    b1c0:	beq.n	b1f4 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b1c2:	ldr	r3, [pc, #484]	; (b3a8 <isr+0x2c0>)
    b1c4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b1c8:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b1ca:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b1ce:	ldr.w	r1, [r3, #444]	; 0x1bc
    b1d2:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b1d6:	ldr.w	r4, [r2, #432]	; 0x1b0
    b1da:	ldr	r3, [pc, #460]	; (b3a8 <isr+0x2c0>)
    b1dc:	cmp	r4, #0
    b1de:	bne.n	b1d6 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b1e0:	mov.w	r2, #4294967295
    b1e4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b1e8:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    b1ec:	bl	aac4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    b1f0:	ldr	r3, [pc, #452]	; (b3b8 <isr+0x2d0>)
    b1f2:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    b1f4:	tst.w	r8, #16777216	; 0x1000000
    b1f8:	beq.n	b202 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b1fa:	ldr	r3, [pc, #448]	; (b3bc <isr+0x2d4>)
    b1fc:	ldr	r3, [r3, #0]
    b1fe:	cbz	r3, b202 <isr+0x11a>
    b200:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    b202:	tst.w	r8, #33554432	; 0x2000000
    b206:	beq.n	b210 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b208:	ldr	r3, [pc, #436]	; (b3c0 <isr+0x2d8>)
    b20a:	ldr	r3, [r3, #0]
    b20c:	cbz	r3, b210 <isr+0x128>
    b20e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    b210:	tst.w	r8, #4
    b214:	beq.n	b21c <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b216:	ldr	r3, [pc, #400]	; (b3a8 <isr+0x2c0>)
    b218:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b21c:	ldr	r3, [pc, #392]	; (b3a8 <isr+0x2c0>)
    b21e:	ldr.w	r2, [r3, #328]	; 0x148
    b222:	lsls	r2, r2, #24
    b224:	bpl.n	b240 <isr+0x158>
    b226:	tst.w	r8, #128	; 0x80
    b22a:	beq.n	b240 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    b22c:	ldr	r1, [pc, #404]	; (b3c4 <isr+0x2dc>)
    b22e:	ldrb	r2, [r1, #0]
    b230:	cmp	r2, #0
    b232:	beq.w	b504 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    b236:	subs	r3, r2, #1
    b238:	uxtb	r3, r3
    b23a:	strb	r3, [r1, #0]
    b23c:	cbnz	r3, b240 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    b23e:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    b240:	add	sp, #12
    b242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b246:	ldr	r1, [pc, #384]	; (b3c8 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    b248:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    b24c:	ldr	r0, [r1, #0]
    b24e:	tst	r3, r0
    b250:	bne.w	b592 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    b254:	ldr	r2, [pc, #352]	; (b3b8 <isr+0x2d0>)
    b256:	ldr	r4, [r2, #0]
			if (completestatus) {
    b258:	ands	r4, r3
    b25a:	beq.n	b1bc <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b25c:	lsls	r6, r4, #29
    b25e:	bmi.w	b5cc <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b262:	lsls	r5, r4, #13
    b264:	bmi.w	b5dc <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    b268:	lsls	r0, r4, #28
    b26a:	bmi.w	b5d4 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    b26e:	lsls	r1, r4, #12
    b270:	bpl.n	b1bc <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b272:	ldr	r0, [pc, #344]	; (b3cc <isr+0x2e4>)
    b274:	bl	b020 <run_callbacks>
    b278:	b.n	b1bc <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b27a:	movw	r5, #8225	; 0x2021
    b27e:	cmp	r0, r5
    b280:	beq.n	b2e8 <isr+0x200>
    b282:	bhi.n	b34c <isr+0x264>
    b284:	cmp.w	r0, #2176	; 0x880
    b288:	beq.w	b4a8 <isr+0x3c0>
    b28c:	cmp.w	r0, #2304	; 0x900
    b290:	bne.n	b2f0 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b292:	ubfx	r1, r1, #16, #8
    b296:	ldr	r2, [pc, #312]	; (b3d0 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b298:	ldr	r0, [pc, #312]	; (b3d4 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    b29a:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b29c:	ldr	r1, [pc, #312]	; (b3d8 <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b29e:	ldr	r2, [pc, #316]	; (b3dc <isr+0x2f4>)
    b2a0:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b2a2:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b2a6:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b2aa:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    b2ae:	bl	aac8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b2b2:	ldr	r2, [pc, #300]	; (b3e0 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b2b4:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b2b6:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b2b8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    b2ba:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b2bc:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b2be:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b2c0:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b2c4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b2c6:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b2c8:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b2cc:	ldr	r2, [pc, #248]	; (b3c8 <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b2ce:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b2d2:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b2d4:	ldr.w	r3, [r4, #432]	; 0x1b0
    b2d8:	cmp	r3, #0
    b2da:	bne.n	b2d4 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b2dc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b2e0:	cmp	r3, #0
    b2e2:	bne.w	b114 <isr+0x2c>
    b2e6:	b.n	b1b2 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    b2e8:	lsrs	r0, r2, #16
    b2ea:	cmp	r0, #7
    b2ec:	beq.w	b51e <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b2f0:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b2f4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b2f8:	cmp	r3, #0
    b2fa:	bne.w	b114 <isr+0x2c>
    b2fe:	b.n	b1b2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b300:	movw	r5, #770	; 0x302
    b304:	cmp	r0, r5
    b306:	beq.w	b44e <isr+0x366>
    b30a:	cmp.w	r0, #1280	; 0x500
    b30e:	bne.n	b2f0 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b310:	ldr	r2, [pc, #204]	; (b3e0 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    b312:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b314:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b316:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b318:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b31a:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b31c:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b320:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b322:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b326:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b328:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b32c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b330:	cmp	r3, #0
    b332:	bne.n	b32c <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b334:	lsrs	r3, r1, #16
    b336:	lsls	r3, r3, #25
    b338:	orr.w	r3, r3, #16777216	; 0x1000000
    b33c:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b340:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b344:	cmp	r3, #0
    b346:	bne.w	b114 <isr+0x2c>
    b34a:	b.n	b1b2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    b34c:	movw	r3, #8737	; 0x2221
    b350:	cmp	r0, r3
    b352:	beq.n	b43c <isr+0x354>
    b354:	movw	r3, #8993	; 0x2321
    b358:	cmp	r0, r3
    b35a:	bne.n	b2f0 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b35c:	ldr	r3, [pc, #128]	; (b3e0 <isr+0x2f8>)
    b35e:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    b360:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b362:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b364:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b366:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b368:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b36c:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b36e:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b372:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b374:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b376:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b37a:	ldr.w	r3, [r4, #432]	; 0x1b0
    b37e:	cmp	r3, #0
    b380:	bne.n	b37a <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b382:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b386:	cmp	r3, #0
    b388:	bne.w	b114 <isr+0x2c>
    b38c:	b.n	b1b2 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b38e:	ldr	r2, [pc, #36]	; (b3b4 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    b390:	movs	r1, #2
    b392:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    b394:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b396:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b398:	bl	b050 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b39c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b3a0:	cmp	r3, #0
    b3a2:	bne.w	b114 <isr+0x2c>
    b3a6:	b.n	b1b2 <isr+0xca>
    b3a8:	.word	0x402e0000
    b3ac:	.word	0x20017000
    b3b0:	.word	0x402e01c0
    b3b4:	.word	0x20015cc0
    b3b8:	.word	0x20015ca8
    b3bc:	.word	0x20015ca4
    b3c0:	.word	0x20015cac
    b3c4:	.word	0x20015cb4
    b3c8:	.word	0x20015cb0
    b3cc:	.word	0x200171c0
    b3d0:	.word	0x20015cd0
    b3d4:	.word	0x00cc0002
    b3d8:	.word	0x000200c8
    b3dc:	.word	0x00c80002
    b3e0:	.word	0x20016020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b3e4:	uxth	r2, r2
    b3e6:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b3ea:	cmp	r3, #7
    b3ec:	bhi.n	b2f0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b3ee:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b3f2:	mov.w	r3, r3, lsl #2
    b3f6:	ldr	r2, [pc, #492]	; (b5e4 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b3f8:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b3fc:	add	r2, r3
    b3fe:	ldr	r3, [r2, #0]
    b400:	ite	ne
    b402:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b406:	biceq.w	r3, r3, #1
    b40a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b40c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b40e:	ldr	r3, [pc, #472]	; (b5e8 <isr+0x500>)
    b410:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b412:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b414:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b416:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b41a:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b41c:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b420:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b422:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b424:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b428:	ldr.w	r3, [r4, #432]	; 0x1b0
    b42c:	cmp	r3, #0
    b42e:	bne.n	b428 <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b430:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b434:	cmp	r3, #0
    b436:	bne.w	b114 <isr+0x2c>
    b43a:	b.n	b1b2 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b43c:	ldr	r3, [pc, #428]	; (b5ec <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    b43e:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b442:	ldr	r2, [pc, #428]	; (b5f0 <isr+0x508>)
    b444:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b446:	ldr	r3, [pc, #428]	; (b5f4 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b448:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    b44a:	strb	r1, [r3, #0]
    b44c:	b.n	b35c <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    b44e:	uxth	r2, r2
    b450:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    b454:	cmp	r3, #7
    b456:	bhi.w	b2f0 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    b45a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b45e:	mov.w	r3, r3, lsl #2
    b462:	ldr	r2, [pc, #384]	; (b5e4 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b464:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b468:	add	r2, r3
    b46a:	ldr	r3, [r2, #0]
    b46c:	ite	ne
    b46e:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b472:	orreq.w	r3, r3, #1
    b476:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b478:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b47a:	ldr	r3, [pc, #364]	; (b5e8 <isr+0x500>)
    b47c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b47e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b480:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b482:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b486:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b488:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b48c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b48e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    b490:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    b494:	ldr.w	r3, [r4, #432]	; 0x1b0
    b498:	cmp	r3, #0
    b49a:	bne.n	b494 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b49c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b4a0:	cmp	r3, #0
    b4a2:	bne.w	b114 <isr+0x2c>
    b4a6:	b.n	b1b2 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b4a8:	ldr	r2, [pc, #332]	; (b5f8 <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b4aa:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b4ac:	ldr	r3, [pc, #332]	; (b5fc <isr+0x514>)
    b4ae:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b4b0:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    b4b2:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b4b4:	bl	b050 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b4b8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    b4bc:	cmp	r3, #0
    b4be:	bne.w	b114 <isr+0x2c>
    b4c2:	b.n	b1b2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b4c4:	ldr	r3, [pc, #312]	; (b600 <isr+0x518>)
    b4c6:	ldr	r0, [r3, #4]
    b4c8:	cmp	r0, #0
    b4ca:	beq.w	b2f0 <isr+0x208>
    b4ce:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b4d0:	uxth.w	lr, r2
    b4d4:	b.n	b4e0 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b4d6:	adds	r3, #12
    b4d8:	ldr	r0, [r3, #4]
    b4da:	cmp	r0, #0
    b4dc:	beq.w	b2f0 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b4e0:	ldrh	r5, [r3, #0]
    b4e2:	cmp	r5, r1
    b4e4:	bne.n	b4d6 <isr+0x3ee>
    b4e6:	ldrh	r5, [r3, #2]
    b4e8:	cmp	r5, lr
    b4ea:	bne.n	b4d6 <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    b4ec:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    b4ee:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    b4f0:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    b4f2:	ite	eq
    b4f4:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    b4f6:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    b4f8:	cmp	r1, r2
    b4fa:	it	cs
    b4fc:	movcs	r1, r2
    b4fe:	bl	b050 <endpoint0_transmit.constprop.0>
    b502:	b.n	b1aa <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    b504:	ldr.w	r2, [r3, #328]	; 0x148
    b508:	bic.w	r2, r2, #128	; 0x80
    b50c:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    b510:	add	sp, #12
    b512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b516:	lsls	r3, r1, #31
    b518:	bpl.w	b1a2 <isr+0xba>
    b51c:	b.n	b19e <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b51e:	ldr	r5, [pc, #228]	; (b604 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b520:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    b522:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b524:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b526:	ldr	r3, [pc, #224]	; (b608 <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    b528:	ldr	r1, [pc, #224]	; (b60c <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    b52a:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    b52c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b52e:	ldr	r1, [pc, #224]	; (b610 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b530:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    b534:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b536:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b53a:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b53e:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b542:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b546:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b548:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b54a:	sub.w	r0, r1, #4096	; 0x1000
    b54e:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    b550:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b554:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b556:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b558:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    b55c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b560:	cmp	r3, #0
    b562:	bne.n	b55c <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    b564:	ldr	r2, [pc, #128]	; (b5e8 <isr+0x500>)
    b566:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    b568:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    b56a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    b56c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b56e:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    b572:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b574:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    b578:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b57a:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b57e:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    b580:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b584:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    b588:	ldr.w	r3, [r4, #432]	; 0x1b0
    b58c:	cmp	r3, #0
    b58e:	bne.n	b588 <isr+0x4a0>
    b590:	b.n	b1aa <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    b592:	ldr	r4, [pc, #112]	; (b604 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b594:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b598:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b59a:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    b59c:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b59e:	cmp	r4, r0
    b5a0:	bne.w	b254 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b5a4:	ldr	r1, [pc, #108]	; (b614 <isr+0x52c>)
    b5a6:	ldr	r4, [pc, #112]	; (b618 <isr+0x530>)
    b5a8:	ldmia	r1, {r0, r1}
    b5aa:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b5ac:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b5ae:	str	r0, [r4, #0]
    b5b0:	strh	r1, [r4, #4]
    b5b2:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    b5b4:	bne.w	b254 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    b5b8:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b5bc:	movs	r4, #80	; 0x50
    b5be:	ldr	r0, [pc, #92]	; (b61c <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    b5c0:	orr.w	r1, r1, #128	; 0x80
    b5c4:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b5c8:	strb	r4, [r0, #0]
    b5ca:	b.n	b254 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    b5cc:	ldr	r0, [pc, #80]	; (b620 <isr+0x538>)
    b5ce:	bl	b020 <run_callbacks>
    b5d2:	b.n	b262 <isr+0x17a>
    b5d4:	ldr	r0, [pc, #76]	; (b624 <isr+0x53c>)
    b5d6:	bl	b020 <run_callbacks>
    b5da:	b.n	b26e <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    b5dc:	ldr	r0, [pc, #72]	; (b628 <isr+0x540>)
    b5de:	bl	b020 <run_callbacks>
    b5e2:	b.n	b268 <isr+0x180>
    b5e4:	.word	0x402e01c0
    b5e8:	.word	0x20016020
    b5ec:	.word	0x20015cd8
    b5f0:	.word	0x20015d6c
    b5f4:	.word	0x20015ca1
    b5f8:	.word	0x20015cd0
    b5fc:	.word	0x20015cc0
    b600:	.word	0x20000740
    b604:	.word	0x20015cb8
    b608:	.word	0x20016000
    b60c:	.word	0x00078080
    b610:	.word	0x20017cc8
    b614:	.word	0x20015cc8
    b618:	.word	0x20015d64
    b61c:	.word	0x20015cb4
    b620:	.word	0x20017100
    b624:	.word	0x20017180
    b628:	.word	0x20017140

0000b62c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b62c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b62e:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b632:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b636:	ite	ne
    b638:	movne	r7, #0
    b63a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b63e:	cmp	r2, #2
    b640:	bls.n	b646 <usb_config_rx+0x1a>
    b642:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b646:	mov.w	sl, r0, lsl #7
    b64a:	ldr.w	r9, [pc, #64]	; b68c <usb_config_rx+0x60>
    b64e:	mov	r5, r1
    b650:	mov	r4, r0
    b652:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b656:	movs	r1, #0
    b658:	movs	r2, #64	; 0x40
    b65a:	mov	r8, r3
    b65c:	mov	r0, r6
    b65e:	bl	d7cc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b662:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b664:	orr.w	r1, r7, r5, lsl #16
    b668:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b66c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b670:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    b672:	cmp.w	r8, #0
    b676:	beq.n	b642 <usb_config_rx+0x16>
    b678:	ldr	r3, [pc, #12]	; (b688 <usb_config_rx+0x5c>)
    b67a:	lsls	r0, r4
    b67c:	ldr	r4, [r3, #0]
    b67e:	orrs	r0, r4
    b680:	str	r0, [r3, #0]
    b682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b686:	nop
    b688:	.word	0x20015ca8
    b68c:	.word	0x20017000

0000b690 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b690:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b692:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    b696:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b69a:	ite	ne
    b69c:	movne	r7, #0
    b69e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6a2:	cmp	r2, #2
    b6a4:	bls.n	b6aa <usb_config_tx+0x1a>
    b6a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b6aa:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6ac:	lsls	r5, r0, #7
    b6ae:	ldr.w	r9, [pc, #68]	; b6f4 <usb_config_tx+0x64>
    b6b2:	mov	r8, r1
    b6b4:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b6b6:	movs	r1, #0
    b6b8:	mov	r4, r0
    b6ba:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6bc:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    b6c0:	mov	r0, sl
    b6c2:	bl	d7cc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b6c6:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    b6c8:	orr.w	r1, r7, r8, lsl #16
    b6cc:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    b6d0:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    b6d4:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b6d8:	cmp	r6, #0
    b6da:	beq.n	b6a6 <usb_config_tx+0x16>
    b6dc:	add.w	r0, r4, #16
    b6e0:	ldr	r3, [pc, #12]	; (b6f0 <usb_config_tx+0x60>)
    b6e2:	lsls	r2, r0
    b6e4:	ldr	r0, [r3, #0]
    b6e6:	orrs	r2, r0
    b6e8:	str	r2, [r3, #0]
    b6ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6ee:	nop
    b6f0:	.word	0x20015ca8
    b6f4:	.word	0x20017000

0000b6f8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b6f8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    b6fa:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    b6fc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b6fe:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    b702:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    b704:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b706:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b708:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    b70c:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    b710:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b714:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    b718:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    b71a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b71c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    b71e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    b720:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    b722:	pop	{r4, r5, r6, r7}
    b724:	bx	lr
    b726:	nop

0000b728 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b728:	subs	r3, r0, #2
    b72a:	cmp	r3, #2
    b72c:	bls.n	b730 <usb_transmit+0x8>
    b72e:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    b730:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b732:	ldr	r3, [pc, #24]	; (b74c <usb_transmit+0x24>)
    b734:	add.w	r4, r0, #16
    b738:	movs	r5, #1
    b73a:	mov	r2, r1
    b73c:	add.w	r0, r3, r0, lsl #7
    b740:	lsl.w	r1, r5, r4
}
    b744:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    b746:	b.w	afc4 <schedule_transfer>
    b74a:	nop
    b74c:	.word	0x20017040

0000b750 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b750:	subs	r3, r0, #2
    b752:	cmp	r3, #2
    b754:	bls.n	b758 <usb_receive+0x8>
    b756:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    b758:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b75a:	ldr	r3, [pc, #20]	; (b770 <usb_receive+0x20>)
    b75c:	movs	r4, #1
    b75e:	mov	r2, r1
    b760:	lsl.w	r1, r4, r0
    b764:	add.w	r0, r3, r0, lsl #7
}
    b768:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b76c:	b.w	afc4 <schedule_transfer>
    b770:	.word	0x20017000

0000b774 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b774:	ldr	r2, [pc, #32]	; (b798 <usb_transfer_status+0x24>)
    b776:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b77a:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b77c:	orr.w	r3, r3, #16384	; 0x4000
    b780:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b784:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    b786:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b78a:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b78c:	tst.w	r3, #16384	; 0x4000
    b790:	beq.n	b77a <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    b792:	mov	r0, r1
    b794:	bx	lr
    b796:	nop
    b798:	.word	0x402e0000

0000b79c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b79c:	cmp	r0, #0
    b79e:	beq.n	b846 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    b7a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7a4:	mov	r9, r0
    b7a6:	sub	sp, #12
    b7a8:	ldr	r4, [pc, #156]	; (b848 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7aa:	movs	r0, #1
    b7ac:	ldr	r5, [pc, #156]	; (b84c <delay+0xb0>)
    b7ae:	ldr	r6, [pc, #160]	; (b850 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7b0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b7b4:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7b6:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7b8:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    b7bc:	cmp	r3, #0
    b7be:	bne.n	b7b0 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    b7c0:	ldr	r7, [pc, #144]	; (b854 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b7c2:	mov.w	lr, #1000	; 0x3e8
    b7c6:	ldr	r0, [pc, #144]	; (b858 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    b7c8:	ldr.w	ip, [r7]
    b7cc:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b7ce:	add.w	r7, r7, #1660944384	; 0x63000000
    b7d2:	ldr	r3, [r0, #0]
    b7d4:	rsb	r1, r1, ip
    b7d8:	add.w	r7, r7, #1818624	; 0x1bc000
    b7dc:	addw	r7, r7, #3711	; 0xe7f
    b7e0:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    b7e4:	mov	sl, r7
    b7e6:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b7e8:	lsrs	r3, r3, #18
    b7ea:	udiv	r3, r1, r3
    b7ee:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7f2:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b7f6:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7f8:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7fa:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    b7fe:	cmp	r3, #0
    b800:	bne.n	b7f2 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    b802:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    b806:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b80a:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    b80c:	mul.w	r2, lr, r2
    b810:	rsb	r1, r1, ip
    b814:	umull	r3, lr, sl, r3
    b818:	rsb	r3, r8, r2
    b81c:	mov.w	r2, lr, lsr #18
    b820:	udiv	r1, r1, r2
    b824:	adds	r2, r1, r3
    b826:	cmp.w	r2, #1000	; 0x3e8
    b82a:	bcc.n	b83c <delay+0xa0>
			if (--msec == 0) return;
    b82c:	subs.w	r9, r9, #1
			start += 1000;
    b830:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    b834:	bne.n	b7f2 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    b836:	add	sp, #12
    b838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b83c:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    b83e:	bl	ba14 <yield>
	}
    b842:	ldr	r0, [sp, #4]
    b844:	b.n	b7f2 <delay+0x56>
    b846:	bx	lr
    b848:	.word	0x20017280
    b84c:	.word	0x20015cd8
    b850:	.word	0x20015cd4
    b854:	.word	0xe0001004
    b858:	.word	0x20000f08

0000b85c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    b85c:	push	{r4, r5, r6}
    b85e:	ldr	r3, [pc, #56]	; (b898 <micros+0x3c>)
    b860:	movs	r6, #1
    b862:	ldr	r5, [pc, #56]	; (b89c <micros+0x40>)
    b864:	ldr	r0, [pc, #56]	; (b8a0 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b866:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b86a:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    b86c:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b86e:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    b872:	cmp	r2, #0
    b874:	bne.n	b866 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    b876:	ldr	r3, [pc, #44]	; (b8a4 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    b878:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b87c:	ldr	r2, [pc, #40]	; (b8a8 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    b87e:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    b880:	ldr	r5, [pc, #40]	; (b8ac <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    b882:	ldr	r2, [r2, #0]
	return usec;
    b884:	subs	r4, r3, r4
    b886:	umull	r2, r3, r5, r2
    b88a:	lsrs	r3, r3, #18
    b88c:	udiv	r4, r4, r3
}
    b890:	mla	r0, r0, r1, r4
    b894:	pop	{r4, r5, r6}
    b896:	bx	lr
    b898:	.word	0x20017280
    b89c:	.word	0x20015cd8
    b8a0:	.word	0x20015cd4
    b8a4:	.word	0xe0001004
    b8a8:	.word	0x20000f08
    b8ac:	.word	0x431bde83

0000b8b0 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    b8b0:	cmp	r0, #28
    b8b2:	bhi.n	b8e0 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    b8b4:	ldr	r1, [pc, #68]	; (b8fc <analogRead+0x4c>)
    b8b6:	ldrb	r3, [r1, #0]
    b8b8:	cbz	r3, b8c6 <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    b8ba:	ldr	r2, [pc, #68]	; (b900 <analogRead+0x50>)
    b8bc:	ldr	r3, [r2, #72]	; 0x48
    b8be:	ands.w	r3, r3, #128	; 0x80
    b8c2:	bne.n	b8bc <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    b8c4:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    b8c6:	ldr	r3, [pc, #60]	; (b904 <analogRead+0x54>)
    b8c8:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    b8ca:	lsls	r2, r3, #24
    b8cc:	bmi.n	b8e4 <analogRead+0x34>
		ADC1_HC0 = ch;
    b8ce:	ldr	r2, [pc, #48]	; (b900 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    b8d0:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    b8d2:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    b8d4:	ldr	r3, [r1, #32]
    b8d6:	ldr	r2, [pc, #40]	; (b900 <analogRead+0x50>)
    b8d8:	lsls	r0, r3, #31
    b8da:	bpl.n	b8d4 <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    b8dc:	ldr	r0, [r2, #36]	; 0x24
    b8de:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    b8e0:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    b8e2:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    b8e4:	ldr	r2, [pc, #32]	; (b908 <analogRead+0x58>)
    b8e6:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    b8ea:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    b8ec:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    b8ee:	ldr	r3, [r1, #32]
    b8f0:	ldr	r2, [pc, #20]	; (b908 <analogRead+0x58>)
    b8f2:	lsls	r3, r3, #31
    b8f4:	bpl.n	b8ee <analogRead+0x3e>
		return ADC2_R0;
    b8f6:	ldr	r0, [r2, #36]	; 0x24
    b8f8:	bx	lr
    b8fa:	nop
    b8fc:	.word	0x20015cdc
    b900:	.word	0x400c4000
    b904:	.word	0x200004a4
    b908:	.word	0x400c8000

0000b90c <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b90c:	lsls	r0, r0, #4
    b90e:	ldr	r3, [pc, #28]	; (b92c <digitalWrite.part.0+0x20>)
    b910:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    b912:	ldr	r3, [r3, r0]
	mask = p->mask;
    b914:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    b916:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    b918:	tst	r0, r2
    b91a:	beq.n	b922 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    b91c:	cbnz	r1, b924 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    b91e:	str.w	r2, [r3, #136]	; 0x88
    b922:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    b924:	str.w	r2, [r3, #132]	; 0x84
    b928:	bx	lr
    b92a:	nop
    b92c:	.word	0x200004c0

0000b930 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b930:	cmp	r0, #39	; 0x27
    b932:	bhi.n	b938 <digitalWrite+0x8>
    b934:	b.w	b90c <digitalWrite.part.0>
    b938:	bx	lr
    b93a:	nop

0000b93c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b93c:	cmp	r0, #39	; 0x27
    b93e:	bhi.n	b97a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    b940:	lsls	r0, r0, #4
    b942:	ldr	r2, [pc, #104]	; (b9ac <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b944:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b946:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b94a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    b94c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b94e:	beq.n	b97c <pinMode+0x40>
    b950:	cmp	r1, #4
    b952:	beq.n	b97c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b954:	ldr	r4, [r3, #12]
    b956:	ldr	r2, [r0, #4]
    b958:	bic.w	r2, r2, r4
    b95c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b95e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    b960:	cbz	r1, b99e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    b962:	cmp	r1, #2
    b964:	beq.n	b9a4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b966:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b968:	ldr	r3, [r3, #4]
}
    b96a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b96e:	ite	eq
    b970:	ldreq	r1, [pc, #60]	; (b9b0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b972:	ldrne	r1, [pc, #64]	; (b9b4 <pinMode+0x78>)
    b974:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b976:	movs	r2, #21
    b978:	str	r2, [r3, #0]
}
    b97a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b97c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    b97e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b980:	ldr	r4, [r0, #4]
    b982:	orr.w	r2, r2, r4
    b986:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b988:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    b98a:	beq.n	b99e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b98c:	movw	r1, #2104	; 0x838
    b990:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b992:	ldr	r3, [r3, #4]
    b994:	movs	r2, #21
}
    b996:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b99a:	str	r2, [r3, #0]
}
    b99c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b99e:	movs	r1, #56	; 0x38
    b9a0:	str	r1, [r2, #0]
    b9a2:	b.n	b992 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b9a4:	ldr	r1, [pc, #16]	; (b9b8 <pinMode+0x7c>)
    b9a6:	str	r1, [r2, #0]
    b9a8:	b.n	b992 <pinMode+0x56>
    b9aa:	nop
    b9ac:	.word	0x200004c0
    b9b0:	.word	0x00013038
    b9b4:	.word	0x00010038
    b9b8:	.word	0x0001f038

0000b9bc <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b9bc:	ldr	r2, [pc, #72]	; (ba08 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b9be:	ldr	r3, [pc, #76]	; (ba0c <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b9c0:	ldr.w	r0, [r2, #544]	; 0x220
    b9c4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b9c8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b9ca:	push	{r4, lr}
    b9cc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b9ce:	bhi.n	b9d6 <usb_init_serialnumber+0x1a>
    b9d0:	add.w	r0, r0, r0, lsl #2
    b9d4:	lsls	r0, r0, #1
    b9d6:	ldr	r4, [pc, #56]	; (ba10 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b9d8:	add	r1, sp, #4
    b9da:	movs	r2, #10
    b9dc:	bl	c038 <ultoa>
    b9e0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b9e2:	movs	r3, #0
    b9e4:	mov	r0, r4
		char c = buf[i];
    b9e6:	ldrb.w	r2, [r1], #1
    b9ea:	adds	r3, #1
		if (!c) break;
    b9ec:	cbz	r2, b9fe <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b9ee:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b9f0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b9f4:	bne.n	b9e6 <usb_init_serialnumber+0x2a>
    b9f6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b9f8:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    b9fa:	add	sp, #16
    b9fc:	pop	{r4, pc}
    b9fe:	lsls	r3, r3, #1
    ba00:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ba02:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    ba04:	add	sp, #16
    ba06:	pop	{r4, pc}
    ba08:	.word	0x401f4400
    ba0c:	.word	0x0098967f
    ba10:	.word	0x20000fa4

0000ba14 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ba14:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    ba16:	ldr	r4, [pc, #132]	; (ba9c <yield+0x88>)
    ba18:	ldrb	r3, [r4, #0]
    ba1a:	cbnz	r3, ba3e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ba1c:	ldr	r3, [pc, #128]	; (baa0 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    ba1e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ba20:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    ba22:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ba24:	cbnz	r3, ba6e <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    ba26:	ldr	r3, [pc, #124]	; (baa4 <yield+0x90>)
    ba28:	ldrb	r3, [r3, #0]
    ba2a:	cmp	r3, #0
    ba2c:	bne.n	ba82 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    ba2e:	ldr	r3, [pc, #120]	; (baa8 <yield+0x94>)

	running = 0;
    ba30:	movs	r1, #0
    ba32:	ldr	r2, [r3, #0]
    ba34:	strb	r1, [r4, #0]
    ba36:	cbz	r2, ba3e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ba38:	mrs	r2, IPSR
		if (ipsr != 0) return;
    ba3c:	cbz	r2, ba40 <yield+0x2c>
    ba3e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ba40:	mrs	r0, PRIMASK
		__disable_irq();
    ba44:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    ba46:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    ba48:	cbz	r2, ba88 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    ba4a:	ldr	r4, [pc, #96]	; (baac <yield+0x98>)
    ba4c:	ldrb	r1, [r4, #0]
    ba4e:	cbnz	r1, ba88 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    ba50:	movs	r6, #1
		firstYield = first->_next;
    ba52:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    ba54:	strb	r6, [r4, #0]
		firstYield = first->_next;
    ba56:	str	r5, [r3, #0]
		if (firstYield) {
    ba58:	cbz	r5, ba90 <yield+0x7c>
			firstYield->_prev = nullptr;
    ba5a:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ba5c:	cbnz	r0, ba60 <yield+0x4c>
    ba5e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    ba60:	movs	r5, #0
		(*(first->_function))(*first);
    ba62:	ldr	r3, [r2, #8]
    ba64:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    ba66:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    ba68:	blx	r3
		runningFromYield = false;
    ba6a:	strb	r5, [r4, #0]
    ba6c:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ba6e:	bl	abec <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    ba72:	cmp	r0, #0
    ba74:	beq.n	ba26 <yield+0x12>
    ba76:	bl	bd84 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    ba7a:	ldr	r3, [pc, #40]	; (baa4 <yield+0x90>)
    ba7c:	ldrb	r3, [r3, #0]
    ba7e:	cmp	r3, #0
    ba80:	beq.n	ba2e <yield+0x1a>
    ba82:	bl	c340 <HardwareSerial::processSerialEvents()>
    ba86:	b.n	ba2e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ba88:	cmp	r0, #0
    ba8a:	bne.n	ba3e <yield+0x2a>
    ba8c:	cpsie	i
    ba8e:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    ba90:	ldr	r3, [pc, #28]	; (bab0 <yield+0x9c>)
    ba92:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ba94:	cmp	r0, #0
    ba96:	bne.n	ba60 <yield+0x4c>
    ba98:	b.n	ba5e <yield+0x4a>
    ba9a:	nop
    ba9c:	.word	0x20015cdd
    baa0:	.word	0x20000fba
    baa4:	.word	0x20015d2c
    baa8:	.word	0x20015cf4
    baac:	.word	0x20015cf8
    bab0:	.word	0x20015cf0

0000bab4 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    bab4:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    bab6:	ldr	r4, [pc, #100]	; (bb1c <random(unsigned long) [clone .part.0]+0x68>)
    bab8:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    baba:	cbz	r3, bb00 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    babc:	ldr	r1, [pc, #96]	; (bb20 <random(unsigned long) [clone .part.0]+0x6c>)
    babe:	asrs	r5, r3, #31
    bac0:	ldr.w	lr, [pc, #104]	; bb2c <random(unsigned long) [clone .part.0]+0x78>
    bac4:	smull	r6, r7, r3, r1
    bac8:	ldr	r6, [pc, #88]	; (bb24 <random(unsigned long) [clone .part.0]+0x70>)
    baca:	smull	r2, r1, r1, r3
    bace:	adds	r2, r3, r7
    bad0:	add	r1, r3
    bad2:	rsb	r2, r5, r2, asr #16
    bad6:	rsb	r1, r5, r1, asr #16
    bada:	movw	r5, #16807	; 0x41a7
    bade:	mls	r2, lr, r2, r3
    bae2:	mul.w	r1, r6, r1
    bae6:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    baea:	cmp	r3, #0
    baec:	bge.n	bb0e <random(unsigned long) [clone .part.0]+0x5a>
    baee:	mvn.w	r2, #2147483648	; 0x80000000
    baf2:	add	r2, r3
    baf4:	udiv	r3, r2, r0
	seed = x;
    baf8:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    bafa:	mls	r0, r0, r3, r2
    bafe:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    bb00:	ldr	r2, [pc, #36]	; (bb28 <random(unsigned long) [clone .part.0]+0x74>)
    bb02:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    bb06:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    bb08:	mls	r0, r0, r3, r2
    bb0c:	pop	{r4, r5, r6, r7, pc}
    bb0e:	mov	r2, r3
    bb10:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    bb14:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    bb16:	mls	r0, r0, r3, r2
    bb1a:	pop	{r4, r5, r6, r7, pc}
    bb1c:	.word	0x20015ce0
    bb20:	.word	0x834e0b5f
    bb24:	.word	0xfffff4ec
    bb28:	.word	0x1f0cce42
    bb2c:	.word	0x0001f31d

0000bb30 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    bb30:	cbz	r0, bb36 <randomSeed(unsigned long)+0x6>
    bb32:	ldr	r3, [pc, #4]	; (bb38 <randomSeed(unsigned long)+0x8>)
    bb34:	str	r0, [r3, #0]
    bb36:	bx	lr
    bb38:	.word	0x20015ce0

0000bb3c <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    bb3c:	cbz	r0, bb42 <random(unsigned long)+0x6>
    bb3e:	b.w	bab4 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    bb42:	bx	lr

0000bb44 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    bb44:	cmp	r0, r1
    bb46:	bge.n	bb56 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    bb48:	push	{r4, lr}
    bb4a:	mov	r4, r0
    bb4c:	subs	r0, r1, r0
    bb4e:	bl	bab4 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    bb52:	add	r0, r4
}
    bb54:	pop	{r4, pc}
    bb56:	bx	lr

0000bb58 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    bb58:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bb5a:	mrs	r2, PRIMASK
		__disable_irq();
    bb5e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    bb60:	ldrb	r3, [r0, #29]
    bb62:	cbnz	r3, bb72 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    bb64:	ldrb	r1, [r0, #28]
    bb66:	cmp	r1, #1
    bb68:	beq.n	bb7c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    bb6a:	cmp	r1, #3
    bb6c:	beq.n	bb90 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    bb6e:	movs	r3, #1
    bb70:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bb72:	cbnz	r2, bb76 <EventResponder::triggerEventNotImmediate()+0x1e>
    bb74:	cpsie	i
	}
	enableInterrupts(irq);
}
    bb76:	ldr.w	r4, [sp], #4
    bb7a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    bb7c:	ldr	r4, [pc, #68]	; (bbc4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    bb7e:	ldr	r1, [r4, #0]
    bb80:	cbz	r1, bbac <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bb82:	ldr	r1, [pc, #68]	; (bbc8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    bb84:	str	r3, [r0, #20]
				_prev = lastYield;
    bb86:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    bb88:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    bb8a:	str	r3, [r0, #24]
				_prev->_next = this;
    bb8c:	str	r0, [r3, #20]
    bb8e:	b.n	bb6e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    bb90:	ldr	r4, [pc, #56]	; (bbcc <EventResponder::triggerEventNotImmediate()+0x74>)
    bb92:	ldr	r1, [r4, #0]
    bb94:	cbz	r1, bbb8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bb96:	ldr	r1, [pc, #56]	; (bbd0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    bb98:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    bb9a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    bb9c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    bb9e:	str	r3, [r0, #24]
				_prev->_next = this;
    bba0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    bba2:	ldr	r3, [pc, #48]	; (bbd4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    bba4:	mov.w	r1, #268435456	; 0x10000000
    bba8:	str	r1, [r3, #0]
    bbaa:	b.n	bb6e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    bbac:	ldr	r3, [pc, #24]	; (bbc8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    bbae:	str	r1, [r0, #20]
				_prev = nullptr;
    bbb0:	str	r1, [r0, #24]
				firstYield = this;
    bbb2:	str	r0, [r4, #0]
				lastYield = this;
    bbb4:	str	r0, [r3, #0]
    bbb6:	b.n	bb6e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    bbb8:	ldr	r3, [pc, #20]	; (bbd0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    bbba:	str	r1, [r0, #20]
				_prev = nullptr;
    bbbc:	str	r1, [r0, #24]
				firstInterrupt = this;
    bbbe:	str	r0, [r4, #0]
				lastInterrupt = this;
    bbc0:	str	r0, [r3, #0]
    bbc2:	b.n	bba2 <EventResponder::triggerEventNotImmediate()+0x4a>
    bbc4:	.word	0x20015cf4
    bbc8:	.word	0x20015cf0
    bbcc:	.word	0x20015ce4
    bbd0:	.word	0x20015ce8
    bbd4:	.word	0xe000ed04

0000bbd8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    bbd8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    bbda:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    bbdc:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    bbde:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    bbe0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    bbe2:	beq.n	bbec <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    bbe4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    bbe8:	b.w	bb58 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    bbec:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    bbee:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    bbf2:	bx	r3

0000bbf4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    bbf4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bbf6:	mrs	r1, PRIMASK
		__disable_irq();
    bbfa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bbfc:	ldr	r4, [pc, #48]	; (bc30 <EventResponder::runFromInterrupt()+0x3c>)
    bbfe:	ldr	r3, [r4, #0]
		if (first) {
    bc00:	cbz	r3, bc26 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bc02:	ldr	r6, [pc, #48]	; (bc34 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    bc04:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    bc06:	ldr	r2, [r3, #20]
    bc08:	str	r2, [r4, #0]
			if (firstInterrupt) {
    bc0a:	cbz	r2, bc2c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    bc0c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bc0e:	cbnz	r1, bc12 <EventResponder::runFromInterrupt()+0x1e>
    bc10:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    bc12:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    bc14:	mov	r0, r3
    bc16:	ldr	r3, [r3, #8]
    bc18:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bc1a:	mrs	r1, PRIMASK
		__disable_irq();
    bc1e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bc20:	ldr	r3, [r4, #0]
		if (first) {
    bc22:	cmp	r3, #0
    bc24:	bne.n	bc06 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bc26:	cbnz	r1, bc2a <EventResponder::runFromInterrupt()+0x36>
    bc28:	cpsie	i
    bc2a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bc2c:	str	r2, [r6, #0]
    bc2e:	b.n	bc0e <EventResponder::runFromInterrupt()+0x1a>
    bc30:	.word	0x20015ce4
    bc34:	.word	0x20015ce8

0000bc38 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    bc38:	b.w	bbf4 <EventResponder::runFromInterrupt()>

0000bc3c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    bc3c:	ldr	r2, [pc, #96]	; (bca0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    bc3e:	push	{r4, r5}
	if (listActive == nullptr) {
    bc40:	ldr	r4, [r2, #0]
    bc42:	cmp	r4, #0
    bc44:	beq.n	bc98 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    bc46:	ldr	r3, [r0, #0]
    bc48:	ldr	r1, [r4, #0]
    bc4a:	cmp	r3, r1
    bc4c:	bcs.n	bc6e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    bc4e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    bc50:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    bc52:	str	r4, [r0, #8]
		_prev = nullptr;
    bc54:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    bc56:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    bc58:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    bc5a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    bc5c:	movs	r3, #2
}
    bc5e:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    bc60:	strb	r3, [r0, #20]
}
    bc62:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    bc64:	str	r3, [r0, #0]
    bc66:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    bc68:	ldr	r1, [r2, #0]
    bc6a:	cmp	r3, r1
    bc6c:	bcc.n	bc80 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    bc6e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    bc70:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    bc72:	cmp	r2, #0
    bc74:	bne.n	bc64 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    bc76:	str	r2, [r0, #8]
		_prev = timer;
    bc78:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    bc7a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    bc7c:	str	r0, [r4, #8]
    bc7e:	b.n	bc5c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    bc80:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    bc82:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    bc84:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    bc86:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    bc88:	str	r5, [r0, #12]
				timer->_prev = this;
    bc8a:	str	r0, [r4, #12]
				_prev->_next = this;
    bc8c:	ldr	r1, [r0, #12]
    bc8e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    bc90:	str	r3, [r4, #0]
				_state = TimerActive;
    bc92:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    bc94:	pop	{r4, r5}
    bc96:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    bc98:	str	r4, [r0, #8]
		_prev = nullptr;
    bc9a:	str	r4, [r0, #12]
		listActive = this;
    bc9c:	str	r0, [r2, #0]
    bc9e:	b.n	bc5c <MillisTimer::addToActiveList()+0x20>
    bca0:	.word	0x20015cec

0000bca4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    bca4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    bca6:	ldr	r6, [pc, #136]	; (bd30 <MillisTimer::runFromTimer()+0x8c>)
    bca8:	ldr	r4, [r6, #0]
	while (timer) {
    bcaa:	cbz	r4, bcf8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    bcac:	ldr	r3, [r4, #0]
    bcae:	cmp	r3, #0
    bcb0:	bne.n	bd28 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    bcb2:	mov	r5, r3
    bcb4:	ldr	r7, [pc, #124]	; (bd34 <MillisTimer::runFromTimer()+0x90>)
    bcb6:	b.n	bcc2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    bcb8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    bcba:	cbz	r4, bcf8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    bcbc:	ldr	r3, [r4, #0]
    bcbe:	cmp	r3, #0
    bcc0:	bne.n	bd28 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    bcc2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    bcc4:	cbz	r3, bcc8 <MillisTimer::runFromTimer()+0x24>
    bcc6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    bcc8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    bcca:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bccc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    bcce:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bcd0:	ldr	r3, [r3, #0]
    bcd2:	cmp	r3, r7
    bcd4:	bne.n	bd1a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    bcd6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    bcd8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    bcda:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    bcdc:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    bcde:	beq.n	bd22 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    bce0:	bl	bb58 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    bce4:	ldr	r3, [r4, #4]
    bce6:	cmp	r3, #0
    bce8:	beq.n	bcb8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    bcea:	str	r3, [r4, #0]
				timer->addToActiveList();
    bcec:	mov	r0, r4
    bcee:	bl	bc3c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    bcf2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    bcf4:	cmp	r4, #0
    bcf6:	bne.n	bcbc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bcf8:	mrs	r3, PRIMASK
		__disable_irq();
    bcfc:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    bcfe:	ldr	r2, [pc, #56]	; (bd38 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    bd00:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    bd02:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    bd04:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    bd06:	cbnz	r3, bd0a <MillisTimer::runFromTimer()+0x66>
    bd08:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    bd0a:	cbz	r0, bd18 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    bd0c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    bd0e:	bl	bc3c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    bd12:	mov	r0, r4
    bd14:	cmp	r0, #0
    bd16:	bne.n	bd0c <MillisTimer::runFromTimer()+0x68>
    bd18:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    bd1a:	mov	r2, r4
    bd1c:	movs	r1, #0
    bd1e:	blx	r3
    bd20:	b.n	bce4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    bd22:	ldr	r3, [r0, #8]
    bd24:	blx	r3
    bd26:	b.n	bce4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    bd28:	subs	r3, #1
    bd2a:	str	r3, [r4, #0]
			break;
    bd2c:	b.n	bcf8 <MillisTimer::runFromTimer()+0x54>
    bd2e:	nop
    bd30:	.word	0x20015cec
    bd34:	.word	0x0000bbd9
    bd38:	.word	0x20015cfc

0000bd3c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bd3c:	ldr	r2, [pc, #16]	; (bd50 <systick_isr+0x14>)
    bd3e:	ldr	r3, [pc, #20]	; (bd54 <systick_isr+0x18>)
    bd40:	ldr	r1, [r2, #0]
	systick_millis_count++;
    bd42:	ldr	r2, [pc, #20]	; (bd58 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bd44:	str	r1, [r3, #0]
	systick_millis_count++;
    bd46:	ldr	r3, [r2, #0]
    bd48:	adds	r3, #1
    bd4a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    bd4c:	b.w	bca4 <MillisTimer::runFromTimer()>
    bd50:	.word	0xe0001004
    bd54:	.word	0x20015cd4
    bd58:	.word	0x20015cd8

0000bd5c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    bd5c:	b.w	ac00 <usb_serial_flush_input>

0000bd60 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    bd60:	b.w	abc8 <usb_serial_peekchar>

0000bd64 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    bd64:	b.w	ab7c <usb_serial_getchar>

0000bd68 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    bd68:	b.w	abec <usb_serial_available>

0000bd6c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    bd6c:	b.w	accc <usb_serial_flush_output>

0000bd70 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bd70:	b.w	ac80 <usb_serial_write_buffer_free>

0000bd74 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bd74:	mov	r0, r1
    bd76:	mov	r1, r2
    bd78:	b.w	ac68 <usb_serial_write>

0000bd7c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bd7c:	mov	r0, r1
    bd7e:	b.w	ac3c <usb_serial_putchar>
    bd82:	nop

0000bd84 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    bd84:	ldr	r3, [pc, #4]	; (bd8c <serialEvent()+0x8>)
    bd86:	movs	r2, #0
    bd88:	strb	r2, [r3, #0]
    bd8a:	bx	lr
    bd8c:	.word	0x20000fba

0000bd90 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    bd90:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    bd92:	ldr	r4, [pc, #24]	; (bdac <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    bd94:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    bd96:	ldr	r3, [r0, #0]
    bd98:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    bd9a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    bd9c:	add	r1, sp, #4
    bd9e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    bda0:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    bda4:	blx	r3
}
    bda6:	add	sp, #8
    bda8:	pop	{r4, pc}
    bdaa:	nop
    bdac:	.word	0x200007d4

0000bdb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    bdb0:	push	{r4, r5, r6, r7, lr}
    bdb2:	mov	r6, r0
    bdb4:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    bdb6:	cmp	r2, #0
    bdb8:	beq.n	be22 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    bdba:	cmp	r2, #1
    bdbc:	it	eq
    bdbe:	moveq	r2, #10
	}


	if (n == 0) {
    bdc0:	cbz	r1, be18 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    bdc2:	movs	r5, #33	; 0x21
    bdc4:	b.n	bdc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    bdc6:	uxtb	r5, r7
    bdc8:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    bdca:	udiv	r4, r1, r2
    bdce:	mls	r1, r2, r4, r1
    bdd2:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bdd4:	cmp	r1, #9
    bdd6:	add.w	r1, r0, #55	; 0x37
    bdda:	add.w	r0, r0, #48	; 0x30
    bdde:	it	hi
    bde0:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    bde2:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bde4:	add	r4, sp, #40	; 0x28
    bde6:	it	ls
    bde8:	uxtbls	r0, r0
    bdea:	add	r4, r5
    bdec:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    bdf0:	cmp	r1, #0
    bdf2:	bne.n	bdc6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    bdf4:	cbz	r3, be04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    bdf6:	subs	r5, #1
		buf[i] = '-';
    bdf8:	add	r3, sp, #40	; 0x28
    bdfa:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    bdfc:	uxtb	r5, r5
		buf[i] = '-';
    bdfe:	add	r3, r5
    be00:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    be04:	ldr	r3, [r6, #0]
    be06:	add	r1, sp, #4
    be08:	rsb	r2, r5, #34	; 0x22
    be0c:	mov	r0, r6
    be0e:	add	r1, r5
    be10:	ldr	r3, [r3, #4]
    be12:	blx	r3
}
    be14:	add	sp, #44	; 0x2c
    be16:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    be18:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    be1a:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    be1c:	strb.w	r2, [sp, #37]	; 0x25
    be20:	b.n	bdf4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    be22:	ldr	r3, [r0, #0]
    be24:	uxtb	r1, r1
    be26:	ldr	r3, [r3, #0]
    be28:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    be2a:	add	sp, #44	; 0x2c
    be2c:	pop	{r4, r5, r6, r7, pc}
    be2e:	nop

0000be30 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    be30:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    be32:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    be36:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    be3a:	bne.n	bf18 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    be3c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    be3e:	bcc.n	bec4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    be40:	ldr.w	r3, [r1], #4
    be44:	str.w	r3, [r0], #4
    be48:	ldr.w	r3, [r1], #4
    be4c:	str.w	r3, [r0], #4
    be50:	ldr.w	r3, [r1], #4
    be54:	str.w	r3, [r0], #4
    be58:	ldr.w	r3, [r1], #4
    be5c:	str.w	r3, [r0], #4
    be60:	ldr.w	r3, [r1], #4
    be64:	str.w	r3, [r0], #4
    be68:	ldr.w	r3, [r1], #4
    be6c:	str.w	r3, [r0], #4
    be70:	ldr.w	r3, [r1], #4
    be74:	str.w	r3, [r0], #4
    be78:	ldr.w	r3, [r1], #4
    be7c:	str.w	r3, [r0], #4
    be80:	ldr.w	r3, [r1], #4
    be84:	str.w	r3, [r0], #4
    be88:	ldr.w	r3, [r1], #4
    be8c:	str.w	r3, [r0], #4
    be90:	ldr.w	r3, [r1], #4
    be94:	str.w	r3, [r0], #4
    be98:	ldr.w	r3, [r1], #4
    be9c:	str.w	r3, [r0], #4
    bea0:	ldr.w	r3, [r1], #4
    bea4:	str.w	r3, [r0], #4
    bea8:	ldr.w	r3, [r1], #4
    beac:	str.w	r3, [r0], #4
    beb0:	ldr.w	r3, [r1], #4
    beb4:	str.w	r3, [r0], #4
    beb8:	ldr.w	r3, [r1], #4
    bebc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bec0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    bec2:	bcs.n	be40 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    bec4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    bec6:	bcc.n	beec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bec8:	ldr.w	r3, [r1], #4
    becc:	str.w	r3, [r0], #4
    bed0:	ldr.w	r3, [r1], #4
    bed4:	str.w	r3, [r0], #4
    bed8:	ldr.w	r3, [r1], #4
    bedc:	str.w	r3, [r0], #4
    bee0:	ldr.w	r3, [r1], #4
    bee4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    bee8:	subs	r2, #16
	bhs	.Lmid_block_loop
    beea:	bcs.n	bec8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    beec:	adds	r2, #12
	blo	.Lcopy_less_than_4
    beee:	bcc.n	befc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    bef0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    bef4:	str.w	r3, [r0], #4
	subs	r2, #4
    bef8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    befa:	bcs.n	bef0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    befc:	adds	r2, #4
	beq	.Ldone
    befe:	beq.n	bf12 <memcpy+0xe2>

	lsls	r2, r2, #31
    bf00:	lsls	r2, r2, #31
	itt ne
    bf02:	itt	ne
	ldrbne  r3, [r1], #1
    bf04:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bf08:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    bf0c:	bcc.n	bf12 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    bf0e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    bf10:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bf12:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bf14:	bx	lr
    bf16:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    bf18:	cmp	r2, #8
	blo	.Lbyte_copy
    bf1a:	bcc.n	bf44 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    bf1c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    bf1e:	beq.n	be3c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    bf20:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    bf24:	beq.n	be3c <memcpy+0xc>

	rsb	r3, #4
    bf26:	rsb	r3, r3, #4
	subs	r2, r3
    bf2a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    bf2c:	lsls	r3, r3, #31
	itt ne
    bf2e:	itt	ne
	ldrbne  r3, [r1], #1
    bf30:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bf34:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    bf38:	bcc.n	be3c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    bf3a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    bf3e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    bf42:	b.n	be3c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    bf44:	subs	r2, #4
	blo	.Lcopy_less_than_4
    bf46:	bcc.n	befc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    bf48:	subs	r2, #1
	ldrb    r3, [r1], #1
    bf4a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    bf4e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    bf52:	bcs.n	bf48 <memcpy+0x118>

	ldrb	r3, [r1]
    bf54:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    bf56:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    bf58:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    bf5a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    bf5c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    bf5e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bf60:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bf62:	bx	lr

0000bf64 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    bf64:	movs	r0, #4
    bf66:	mov	r1, lr
    bf68:	tst	r0, r1
    bf6a:	beq.n	bf74 <_MSP>
    bf6c:	mrs	r0, PSP
    bf70:	b.w	bf7c <HardFault_HandlerC>

0000bf74 <_MSP>:
    bf74:	mrs	r0, MSP
    bf78:	b.w	bf7c <HardFault_HandlerC>

0000bf7c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bf7c:	ldr	r3, [pc, #108]	; (bfec <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    bf7e:	movs	r1, #5
    bf80:	ldr	r2, [pc, #108]	; (bff0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    bf82:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    bf84:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    bf86:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    bf8a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    bf8c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    bf90:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bf92:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    bf94:	ldr	r4, [pc, #92]	; (bff4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bf96:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    bf98:	ldr	r0, [pc, #92]	; (bff8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bf9a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    bf9c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    bfa0:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    bfa4:	ldr	r3, [r4, #0]
    bfa6:	cmp	r3, r0
    bfa8:	bls.n	bfb0 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    bfaa:	ldr	r0, [pc, #80]	; (bffc <HardFault_HandlerC+0x80>)
    bfac:	bl	ad38 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    bfb0:	ldr	r5, [pc, #56]	; (bfec <HardFault_HandlerC+0x70>)
    bfb2:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    bfb4:	movs	r0, #0
    bfb6:	ldr	r2, [pc, #72]	; (c000 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    bfb8:	ldr	r1, [pc, #72]	; (c004 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    bfba:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    bfbe:	str	r0, [sp, #4]
    bfc0:	ldr	r3, [sp, #4]
    bfc2:	cmp	r3, r2
    bfc4:	bhi.n	bfd2 <HardFault_HandlerC+0x56>
    bfc6:	ldr	r3, [sp, #4]
    bfc8:	adds	r3, #1
    bfca:	str	r3, [sp, #4]
    bfcc:	ldr	r3, [sp, #4]
    bfce:	cmp	r3, r2
    bfd0:	bls.n	bfc6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    bfd2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    bfd6:	str	r0, [sp, #4]
    bfd8:	ldr	r3, [sp, #4]
    bfda:	cmp	r3, r1
    bfdc:	bhi.n	bfba <HardFault_HandlerC+0x3e>
    bfde:	ldr	r3, [sp, #4]
    bfe0:	adds	r3, #1
    bfe2:	str	r3, [sp, #4]
    bfe4:	ldr	r3, [sp, #4]
    bfe6:	cmp	r3, r1
    bfe8:	bls.n	bfde <HardFault_HandlerC+0x62>
    bfea:	b.n	bfba <HardFault_HandlerC+0x3e>
    bfec:	.word	0x401bc000
    bff0:	.word	0x401f8000
    bff4:	.word	0x20000f08
    bff8:	.word	0x23c345ff
    bffc:	.word	0x11e1a300
    c000:	.word	0x000f423f
    c004:	.word	0x0089543f

0000c008 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    c008:	ldr	r2, [pc, #36]	; (c030 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    c00a:	push	{r3, lr}
        char *prev = __brkval;
    c00c:	ldr	r3, [r2, #0]
        if (incr != 0) {
    c00e:	cbz	r0, c01a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    c010:	add	r0, r3
    c012:	ldr	r1, [pc, #32]	; (c034 <_sbrk+0x2c>)
    c014:	cmp	r0, r1
    c016:	bhi.n	c01e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    c018:	str	r0, [r2, #0]
        }
        return prev;
}
    c01a:	mov	r0, r3
    c01c:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    c01e:	bl	d1e0 <__errno>
    c022:	movs	r2, #12
                        return (void *)-1;
    c024:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    c028:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    c02a:	mov	r0, r3
    c02c:	pop	{r3, pc}
    c02e:	nop
    c030:	.word	0x20000fcc
    c034:	.word	0x20280000

0000c038 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c038:	push	{r4, r5, r6, r7}
    c03a:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    c03c:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    c03e:	mov	r7, r6
    c040:	b.n	c044 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    c042:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    c044:	udiv	r3, r0, r2
    c048:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c04c:	add.w	r4, r0, #55	; 0x37
    c050:	cmp	r0, #9
    c052:	add.w	r0, r0, #48	; 0x30
    c056:	uxtb	r4, r4
    c058:	it	ls
    c05a:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    c05c:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c05e:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    c062:	cmp	r3, #0
    c064:	bne.n	c042 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    c066:	adds	r2, r1, r5
    c068:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    c06a:	cbz	r5, c080 <ultoa+0x48>
    c06c:	adds	r3, #1
		t = buf[j];
    c06e:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    c072:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c074:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    c076:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c078:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    c07a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    c07e:	blt.n	c06c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    c080:	mov	r0, r1
    c082:	pop	{r4, r5, r6, r7}
    c084:	bx	lr
    c086:	nop

0000c088 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c088:	ldr	r0, [pc, #656]	; (c31c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c08a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c08e:	ldr	r3, [pc, #656]	; (c320 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c090:	ldr	r2, [r0, #120]	; 0x78
    c092:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    c096:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c098:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c09a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c09c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c0a0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0a4:	ldr	r4, [pc, #636]	; (c324 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c0a6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c0aa:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c0ac:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0b0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c0b2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0b4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c0b8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c0bc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c0c0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c0c4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c0c8:	ldrh.w	r0, [r3, #392]	; 0x188
    c0cc:	uxth	r0, r0
    c0ce:	orr.w	r0, r0, #240	; 0xf0
    c0d2:	strh.w	r0, [r3, #392]	; 0x188
    c0d6:	add.w	r0, r1, r1, lsl #1
    c0da:	ldr	r3, [pc, #580]	; (c320 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    c0dc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c0de:	movs	r5, #0
    c0e0:	lsls	r0, r0, #5
    c0e2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c0e4:	cmp	r1, #4
    c0e6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c0e8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c0ec:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    c0ee:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c0f0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c0f2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c0f4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c0f6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c0f8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c0fa:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c0fc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c0fe:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c100:	bne.n	c0d6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c102:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c106:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c10a:	ldr	r3, [pc, #540]	; (c328 <pwm_init+0x2a0>)
    c10c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c110:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c112:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c114:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c118:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c11a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c11e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c122:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c126:	ldrh.w	r0, [r4, #392]	; 0x188
    c12a:	uxth	r0, r0
    c12c:	orr.w	r0, r0, #3840	; 0xf00
    c130:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c134:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c138:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c13c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c140:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c144:	ldrh.w	r0, [r3, #392]	; 0x188
    c148:	uxth	r0, r0
    c14a:	orr.w	r0, r0, #240	; 0xf0
    c14e:	strh.w	r0, [r3, #392]	; 0x188
    c152:	add.w	r0, r1, r1, lsl #1
    c156:	ldr	r3, [pc, #464]	; (c328 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    c158:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c15a:	movs	r5, #0
    c15c:	lsls	r0, r0, #5
    c15e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c160:	cmp	r1, #4
    c162:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c164:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c166:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c16a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c16c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c16e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c170:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c172:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c174:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c176:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c178:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c17a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c17c:	bne.n	c152 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c17e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c182:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c186:	ldr	r3, [pc, #420]	; (c32c <pwm_init+0x2a4>)
    c188:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c18c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c18e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c190:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c194:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c196:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c19a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c19e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c1a2:	ldrh.w	r0, [r4, #392]	; 0x188
    c1a6:	uxth	r0, r0
    c1a8:	orr.w	r0, r0, #3840	; 0xf00
    c1ac:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c1b0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c1b4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c1b8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c1bc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c1c0:	ldrh.w	r0, [r3, #392]	; 0x188
    c1c4:	uxth	r0, r0
    c1c6:	orr.w	r0, r0, #240	; 0xf0
    c1ca:	strh.w	r0, [r3, #392]	; 0x188
    c1ce:	add.w	r0, r1, r1, lsl #1
    c1d2:	ldr	r3, [pc, #344]	; (c32c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    c1d4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c1d6:	movs	r5, #0
    c1d8:	lsls	r0, r0, #5
    c1da:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c1dc:	cmp	r1, #4
    c1de:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c1e0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c1e2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c1e6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c1e8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c1ea:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c1ec:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c1ee:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    c1f0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c1f2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c1f4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c1f6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c1f8:	bne.n	c1ce <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c1fa:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c1fe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c202:	ldr	r3, [pc, #300]	; (c330 <pwm_init+0x2a8>)
    c204:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c208:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c20a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c20c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c210:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c212:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c216:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c21a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c21e:	ldrh.w	r0, [r4, #392]	; 0x188
    c222:	uxth	r0, r0
    c224:	orr.w	r0, r0, #3840	; 0xf00
    c228:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c22c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c230:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    c234:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    c238:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c23c:	ldrh.w	r0, [r3, #392]	; 0x188
    c240:	uxth	r0, r0
    c242:	orr.w	r0, r0, #240	; 0xf0
    c246:	strh.w	r0, [r3, #392]	; 0x188
    c24a:	add.w	r0, r1, r1, lsl #1
    c24e:	ldr	r3, [pc, #224]	; (c330 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    c250:	adds	r1, #1
    c252:	lsls	r0, r0, #5
    c254:	mov	r4, r3
    c256:	cmp	r1, #4
    c258:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c25a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c25c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    c260:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c262:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c264:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    c266:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c268:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    c26a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    c26c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    c26e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    c270:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    c272:	bne.n	c24a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c274:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c278:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c27a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c27c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c280:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c282:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c286:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c288:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c28c:	orrs	r3, r7
    c28e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c292:	ldrh.w	r3, [r4, #392]	; 0x188
    c296:	uxth	r3, r3
    c298:	orr.w	r3, r3, #3840	; 0xf00
    c29c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c2a0:	lsls	r0, r2, #5
    c2a2:	ldr	r3, [pc, #144]	; (c334 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2a4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c2a6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2a8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c2aa:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c2ac:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c2ae:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c2b0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c2b2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c2b6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c2b8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c2ba:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2bc:	bne.n	c2a0 <pwm_init+0x218>
    c2be:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c2c0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c2c2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c2c6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c2ca:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c2cc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c2d0:	lsls	r0, r2, #5
    c2d2:	ldr	r3, [pc, #100]	; (c338 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2d4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c2d6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2d8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c2da:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c2dc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c2de:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c2e0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c2e2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c2e4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c2e6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c2e8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c2ea:	bne.n	c2d0 <pwm_init+0x248>
    c2ec:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c2ee:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c2f0:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c2f4:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c2f8:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c2fa:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    c2fe:	lsls	r0, r2, #5
    c300:	ldr	r3, [pc, #56]	; (c33c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c302:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c304:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c306:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    c308:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    c30a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c30c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c30e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c310:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c312:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    c314:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c316:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c318:	bne.n	c2fe <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    c31a:	pop	{r4, r5, r6, r7, pc}
    c31c:	.word	0x400fc000
    c320:	.word	0x403dc000
    c324:	.word	0xfc030000
    c328:	.word	0x403e0000
    c32c:	.word	0x403e4000
    c330:	.word	0x403e8000
    c334:	.word	0x401dc000
    c338:	.word	0x401e0000
    c33c:	.word	0x401e4000

0000c340 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    c340:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    c342:	ldr	r3, [pc, #28]	; (c360 <HardwareSerial::processSerialEvents()+0x20>)
    c344:	ldrb	r4, [r3, #0]
    c346:	cbz	r4, c35c <HardwareSerial::processSerialEvents()+0x1c>
    c348:	ldr	r5, [pc, #24]	; (c364 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    c34a:	ldr.w	r3, [r5, #4]!
    c34e:	cmp	r3, #0
    c350:	beq.n	c34a <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    c352:	blx	r3
			if (--handlers_still_to_process == 0) return;
    c354:	subs	r3, r4, #1
    c356:	ands.w	r4, r3, #255	; 0xff
    c35a:	bne.n	c34a <HardwareSerial::processSerialEvents()+0xa>
    c35c:	pop	{r3, r4, r5, pc}
    c35e:	nop
    c360:	.word	0x20015d2c
    c364:	.word	0x20015d0c

0000c368 <sin>:
    c368:	push	{lr}
    c36a:	vmov.f64	d7, d0
    c36e:	vmov	r3, s15
    c372:	ldr	r2, [pc, #140]	; (c400 <sin+0x98>)
    c374:	bic.w	r3, r3, #2147483648	; 0x80000000
    c378:	cmp	r3, r2
    c37a:	sub	sp, #20
    c37c:	ble.n	c3b4 <sin+0x4c>
    c37e:	ldr	r2, [pc, #132]	; (c404 <sin+0x9c>)
    c380:	cmp	r3, r2
    c382:	ble.n	c38e <sin+0x26>
    c384:	vsub.f64	d0, d0, d0
    c388:	add	sp, #20
    c38a:	ldr.w	pc, [sp], #4
    c38e:	mov	r0, sp
    c390:	bl	c408 <__ieee754_rem_pio2>
    c394:	and.w	r0, r0, #3
    c398:	cmp	r0, #1
    c39a:	beq.n	c3d8 <sin+0x70>
    c39c:	cmp	r0, #2
    c39e:	beq.n	c3c4 <sin+0x5c>
    c3a0:	cbz	r0, c3e6 <sin+0x7e>
    c3a2:	vldr	d1, [sp, #8]
    c3a6:	vldr	d0, [sp]
    c3aa:	bl	c6a8 <__kernel_cos>
    c3ae:	vneg.f64	d0, d0
    c3b2:	b.n	c388 <sin+0x20>
    c3b4:	movs	r0, #0
    c3b6:	vldr	d1, [pc, #64]	; c3f8 <sin+0x90>
    c3ba:	bl	ce48 <__kernel_sin>
    c3be:	add	sp, #20
    c3c0:	ldr.w	pc, [sp], #4
    c3c4:	movs	r0, #1
    c3c6:	vldr	d1, [sp, #8]
    c3ca:	vldr	d0, [sp]
    c3ce:	bl	ce48 <__kernel_sin>
    c3d2:	vneg.f64	d0, d0
    c3d6:	b.n	c388 <sin+0x20>
    c3d8:	vldr	d1, [sp, #8]
    c3dc:	vldr	d0, [sp]
    c3e0:	bl	c6a8 <__kernel_cos>
    c3e4:	b.n	c388 <sin+0x20>
    c3e6:	movs	r0, #1
    c3e8:	vldr	d1, [sp, #8]
    c3ec:	vldr	d0, [sp]
    c3f0:	bl	ce48 <__kernel_sin>
    c3f4:	b.n	c388 <sin+0x20>
    c3f6:	nop
	...
    c400:	.word	0x3fe921fb
    c404:	.word	0x7fefffff

0000c408 <__ieee754_rem_pio2>:
    c408:	push	{r4, r5, r6, lr}
    c40a:	vmov	r2, r3, d0
    c40e:	ldr	r1, [pc, #632]	; (c688 <__ieee754_rem_pio2+0x280>)
    c410:	bic.w	r6, r3, #2147483648	; 0x80000000
    c414:	cmp	r6, r1
    c416:	sub	sp, #32
    c418:	ble.n	c4e0 <__ieee754_rem_pio2+0xd8>
    c41a:	ldr	r1, [pc, #624]	; (c68c <__ieee754_rem_pio2+0x284>)
    c41c:	cmp	r6, r1
    c41e:	mov	r5, r3
    c420:	bgt.n	c45c <__ieee754_rem_pio2+0x54>
    c422:	cmp	r3, #0
    c424:	vldr	d7, [pc, #544]	; c648 <__ieee754_rem_pio2+0x240>
    c428:	ble.w	c5ea <__ieee754_rem_pio2+0x1e2>
    c42c:	vsub.f64	d7, d0, d7
    c430:	sub.w	r1, r1, #634880	; 0x9b000
    c434:	sub.w	r1, r1, #1920	; 0x780
    c438:	cmp	r6, r1
    c43a:	beq.n	c504 <__ieee754_rem_pio2+0xfc>
    c43c:	vldr	d6, [pc, #528]	; c650 <__ieee754_rem_pio2+0x248>
    c440:	vsub.f64	d5, d7, d6
    c444:	vsub.f64	d7, d7, d5
    c448:	movs	r3, #1
    c44a:	vstr	d5, [r0]
    c44e:	vsub.f64	d7, d7, d6
    c452:	vstr	d7, [r0, #8]
    c456:	mov	r0, r3
    c458:	add	sp, #32
    c45a:	pop	{r4, r5, r6, pc}
    c45c:	ldr	r1, [pc, #560]	; (c690 <__ieee754_rem_pio2+0x288>)
    c45e:	cmp	r6, r1
    c460:	mov	r4, r0
    c462:	ble.n	c512 <__ieee754_rem_pio2+0x10a>
    c464:	ldr	r1, [pc, #556]	; (c694 <__ieee754_rem_pio2+0x28c>)
    c466:	cmp	r6, r1
    c468:	bgt.n	c4f4 <__ieee754_rem_pio2+0xec>
    c46a:	mov	r0, r2
    c46c:	asrs	r2, r6, #20
    c46e:	subw	r2, r2, #1046	; 0x416
    c472:	sub.w	r1, r6, r2, lsl #20
    c476:	vmov	d6, r0, r1
    c47a:	vldr	d7, [pc, #476]	; c658 <__ieee754_rem_pio2+0x250>
    c47e:	vcvt.s32.f64	s8, d6
    c482:	movs	r3, #0
    c484:	vcvt.f64.s32	d4, s8
    c488:	vsub.f64	d6, d6, d4
    c48c:	vmul.f64	d6, d6, d7
    c490:	vcvt.s32.f64	s10, d6
    c494:	vstr	d4, [sp, #8]
    c498:	vcvt.f64.s32	d5, s10
    c49c:	vsub.f64	d6, d6, d5
    c4a0:	vmul.f64	d7, d6, d7
    c4a4:	vcmp.f64	d7, #0.0
    c4a8:	vmrs	APSR_nzcv, fpscr
    c4ac:	vstr	d5, [sp, #16]
    c4b0:	vstr	d7, [sp, #24]
    c4b4:	bne.w	c62e <__ieee754_rem_pio2+0x226>
    c4b8:	vcmp.f64	d5, #0.0
    c4bc:	vmrs	APSR_nzcv, fpscr
    c4c0:	ite	eq
    c4c2:	moveq	r3, #1
    c4c4:	movne	r3, #2
    c4c6:	ldr	r1, [pc, #464]	; (c698 <__ieee754_rem_pio2+0x290>)
    c4c8:	str	r1, [sp, #4]
    c4ca:	movs	r1, #2
    c4cc:	str	r1, [sp, #0]
    c4ce:	add	r0, sp, #8
    c4d0:	mov	r1, r4
    c4d2:	bl	c7c8 <__kernel_rem_pio2>
    c4d6:	cmp	r5, #0
    c4d8:	blt.w	c612 <__ieee754_rem_pio2+0x20a>
    c4dc:	mov	r3, r0
    c4de:	b.n	c4ee <__ieee754_rem_pio2+0xe6>
    c4e0:	movs	r4, #0
    c4e2:	movs	r5, #0
    c4e4:	vstr	d0, [r0]
    c4e8:	strd	r4, r5, [r0, #8]
    c4ec:	movs	r3, #0
    c4ee:	mov	r0, r3
    c4f0:	add	sp, #32
    c4f2:	pop	{r4, r5, r6, pc}
    c4f4:	vsub.f64	d7, d0, d0
    c4f8:	movs	r3, #0
    c4fa:	vstr	d7, [r0, #8]
    c4fe:	vstr	d7, [r0]
    c502:	b.n	c4ee <__ieee754_rem_pio2+0xe6>
    c504:	vldr	d5, [pc, #344]	; c660 <__ieee754_rem_pio2+0x258>
    c508:	vldr	d6, [pc, #348]	; c668 <__ieee754_rem_pio2+0x260>
    c50c:	vsub.f64	d7, d7, d5
    c510:	b.n	c440 <__ieee754_rem_pio2+0x38>
    c512:	bl	cef8 <fabs>
    c516:	vmov.f64	d7, #96	; 0x3f000000  0.5
    c51a:	vldr	d6, [pc, #340]	; c670 <__ieee754_rem_pio2+0x268>
    c51e:	vfma.f64	d7, d0, d6
    c522:	vcvt.s32.f64	s15, d7
    c526:	vldr	d3, [pc, #288]	; c648 <__ieee754_rem_pio2+0x240>
    c52a:	vmov	r3, s15
    c52e:	vldr	d6, [pc, #288]	; c650 <__ieee754_rem_pio2+0x248>
    c532:	cmp	r3, #31
    c534:	vcvt.f64.s32	d5, s15
    c538:	vneg.f64	d4, d5
    c53c:	vmul.f64	d7, d5, d6
    c540:	vfma.f64	d0, d4, d3
    c544:	bgt.n	c57e <__ieee754_rem_pio2+0x176>
    c546:	ldr	r2, [pc, #340]	; (c69c <__ieee754_rem_pio2+0x294>)
    c548:	subs	r1, r3, #1
    c54a:	ldr.w	r2, [r2, r1, lsl #2]
    c54e:	cmp	r6, r2
    c550:	beq.n	c57e <__ieee754_rem_pio2+0x176>
    c552:	vsub.f64	d6, d0, d7
    c556:	vstr	d6, [r4]
    c55a:	vsub.f64	d0, d0, d6
    c55e:	vsub.f64	d0, d0, d7
    c562:	cmp	r5, #0
    c564:	vstr	d0, [r4, #8]
    c568:	bge.n	c4ee <__ieee754_rem_pio2+0xe6>
    c56a:	vneg.f64	d6, d6
    c56e:	vneg.f64	d0, d0
    c572:	vstr	d6, [r4]
    c576:	vstr	d0, [r4, #8]
    c57a:	negs	r3, r3
    c57c:	b.n	c4ee <__ieee754_rem_pio2+0xe6>
    c57e:	vsub.f64	d6, d0, d7
    c582:	vmov	r2, s13
    c586:	asrs	r6, r6, #20
    c588:	ubfx	r2, r2, #20, #11
    c58c:	subs	r2, r6, r2
    c58e:	cmp	r2, #16
    c590:	vstr	d6, [r4]
    c594:	ble.n	c55a <__ieee754_rem_pio2+0x152>
    c596:	vmov.f64	d3, d0
    c59a:	vldr	d7, [pc, #196]	; c660 <__ieee754_rem_pio2+0x258>
    c59e:	vldr	d6, [pc, #200]	; c668 <__ieee754_rem_pio2+0x260>
    c5a2:	vfma.f64	d3, d4, d7
    c5a6:	vsub.f64	d0, d0, d3
    c5aa:	vfma.f64	d0, d4, d7
    c5ae:	vmov.f64	d7, d0
    c5b2:	vfnms.f64	d7, d5, d6
    c5b6:	vsub.f64	d6, d3, d7
    c5ba:	vmov	r2, s13
    c5be:	ubfx	r2, r2, #20, #11
    c5c2:	subs	r6, r6, r2
    c5c4:	cmp	r6, #49	; 0x31
    c5c6:	vstr	d6, [r4]
    c5ca:	ble.n	c640 <__ieee754_rem_pio2+0x238>
    c5cc:	vmov.f64	d0, d3
    c5d0:	vldr	d6, [pc, #164]	; c678 <__ieee754_rem_pio2+0x270>
    c5d4:	vldr	d2, [pc, #168]	; c680 <__ieee754_rem_pio2+0x278>
    c5d8:	vfma.f64	d0, d4, d6
    c5dc:	vsub.f64	d7, d3, d0
    c5e0:	vfma.f64	d7, d4, d6
    c5e4:	vfnms.f64	d7, d5, d2
    c5e8:	b.n	c552 <__ieee754_rem_pio2+0x14a>
    c5ea:	ldr	r1, [pc, #180]	; (c6a0 <__ieee754_rem_pio2+0x298>)
    c5ec:	vadd.f64	d7, d0, d7
    c5f0:	cmp	r6, r1
    c5f2:	beq.n	c632 <__ieee754_rem_pio2+0x22a>
    c5f4:	vldr	d6, [pc, #88]	; c650 <__ieee754_rem_pio2+0x248>
    c5f8:	vadd.f64	d5, d7, d6
    c5fc:	vsub.f64	d7, d7, d5
    c600:	mov.w	r3, #4294967295
    c604:	vadd.f64	d7, d7, d6
    c608:	vstr	d5, [r0]
    c60c:	vstr	d7, [r0, #8]
    c610:	b.n	c4ee <__ieee754_rem_pio2+0xe6>
    c612:	vldr	d6, [r4]
    c616:	vldr	d7, [r4, #8]
    c61a:	vneg.f64	d6, d6
    c61e:	vneg.f64	d7, d7
    c622:	negs	r3, r0
    c624:	vstr	d6, [r4]
    c628:	vstr	d7, [r4, #8]
    c62c:	b.n	c4ee <__ieee754_rem_pio2+0xe6>
    c62e:	movs	r3, #3
    c630:	b.n	c4c6 <__ieee754_rem_pio2+0xbe>
    c632:	vldr	d5, [pc, #44]	; c660 <__ieee754_rem_pio2+0x258>
    c636:	vldr	d6, [pc, #48]	; c668 <__ieee754_rem_pio2+0x260>
    c63a:	vadd.f64	d7, d7, d5
    c63e:	b.n	c5f8 <__ieee754_rem_pio2+0x1f0>
    c640:	vmov.f64	d0, d3
    c644:	b.n	c55a <__ieee754_rem_pio2+0x152>
    c646:	nop
    c648:	.word	0x54400000
    c64c:	.word	0x3ff921fb
    c650:	.word	0x1a626331
    c654:	.word	0x3dd0b461
    c658:	.word	0x00000000
    c65c:	.word	0x41700000
    c660:	.word	0x1a600000
    c664:	.word	0x3dd0b461
    c668:	.word	0x2e037073
    c66c:	.word	0x3ba3198a
    c670:	.word	0x6dc9c883
    c674:	.word	0x3fe45f30
    c678:	.word	0x2e000000
    c67c:	.word	0x3ba3198a
    c680:	.word	0x252049c1
    c684:	.word	0x397b839a
    c688:	.word	0x3fe921fb
    c68c:	.word	0x4002d97b
    c690:	.word	0x413921fb
    c694:	.word	0x7fefffff
    c698:	.word	0x20000858
    c69c:	.word	0x200007d8
    c6a0:	.word	0x3ff921fb
    c6a4:	.word	0x00000000

0000c6a8 <__kernel_cos>:
    c6a8:	vmov	r3, s1
    c6ac:	bic.w	r3, r3, #2147483648	; 0x80000000
    c6b0:	cmp.w	r3, #1044381696	; 0x3e400000
    c6b4:	bge.n	c710 <__kernel_cos+0x68>
    c6b6:	vcvt.s32.f64	s15, d0
    c6ba:	vmov	r3, s15
    c6be:	cmp	r3, #0
    c6c0:	beq.n	c786 <__kernel_cos+0xde>
    c6c2:	vmul.f64	d7, d0, d0
    c6c6:	vldr	d4, [pc, #200]	; c790 <__kernel_cos+0xe8>
    c6ca:	vldr	d5, [pc, #204]	; c798 <__kernel_cos+0xf0>
    c6ce:	vldr	d6, [pc, #208]	; c7a0 <__kernel_cos+0xf8>
    c6d2:	vfma.f64	d5, d7, d4
    c6d6:	vldr	d4, [pc, #208]	; c7a8 <__kernel_cos+0x100>
    c6da:	vfma.f64	d6, d7, d5
    c6de:	vldr	d5, [pc, #208]	; c7b0 <__kernel_cos+0x108>
    c6e2:	vfma.f64	d4, d7, d6
    c6e6:	vldr	d6, [pc, #208]	; c7b8 <__kernel_cos+0x110>
    c6ea:	vfma.f64	d5, d7, d4
    c6ee:	vfma.f64	d6, d7, d5
    c6f2:	vmul.f64	d6, d6, d7
    c6f6:	vnmul.f64	d0, d1, d0
    c6fa:	vmov.f64	d5, #96	; 0x3f000000  0.5
    c6fe:	vfma.f64	d0, d7, d6
    c702:	vmov.f64	d6, #112	; 0x3f800000  1.0
    c706:	vfnms.f64	d0, d7, d5
    c70a:	vsub.f64	d0, d6, d0
    c70e:	bx	lr
    c710:	vldr	d4, [pc, #124]	; c790 <__kernel_cos+0xe8>
    c714:	vmul.f64	d7, d0, d0
    c718:	vldr	d5, [pc, #124]	; c798 <__kernel_cos+0xf0>
    c71c:	vldr	d6, [pc, #128]	; c7a0 <__kernel_cos+0xf8>
    c720:	vfma.f64	d5, d7, d4
    c724:	vldr	d4, [pc, #128]	; c7a8 <__kernel_cos+0x100>
    c728:	vfma.f64	d6, d7, d5
    c72c:	ldr	r2, [pc, #144]	; (c7c0 <__kernel_cos+0x118>)
    c72e:	vfma.f64	d4, d7, d6
    c732:	vldr	d5, [pc, #124]	; c7b0 <__kernel_cos+0x108>
    c736:	vldr	d6, [pc, #128]	; c7b8 <__kernel_cos+0x110>
    c73a:	vfma.f64	d5, d7, d4
    c73e:	cmp	r3, r2
    c740:	vfma.f64	d6, d7, d5
    c744:	vmul.f64	d6, d6, d7
    c748:	ble.n	c6f6 <__kernel_cos+0x4e>
    c74a:	ldr	r2, [pc, #120]	; (c7c4 <__kernel_cos+0x11c>)
    c74c:	cmp	r3, r2
    c74e:	bgt.n	c77c <__kernel_cos+0xd4>
    c750:	vmov.f64	d4, #112	; 0x3f800000  1.0
    c754:	movs	r0, #0
    c756:	sub.w	r1, r3, #2097152	; 0x200000
    c75a:	vmov	d5, r0, r1
    c75e:	vsub.f64	d4, d4, d5
    c762:	vnmul.f64	d1, d1, d0
    c766:	vmov.f64	d3, #96	; 0x3f000000  0.5
    c76a:	vfma.f64	d1, d7, d6
    c76e:	vfnms.f64	d5, d7, d3
    c772:	vsub.f64	d5, d5, d1
    c776:	vsub.f64	d0, d4, d5
    c77a:	bx	lr
    c77c:	vmov.f64	d4, #103	; 0x3f380000  0.7187500
    c780:	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    c784:	b.n	c762 <__kernel_cos+0xba>
    c786:	vmov.f64	d0, #112	; 0x3f800000  1.0
    c78a:	bx	lr
    c78c:	nop.w
    c790:	.word	0xbe8838d4
    c794:	.word	0xbda8fae9
    c798:	.word	0xbdb4b1c4
    c79c:	.word	0x3e21ee9e
    c7a0:	.word	0x809c52ad
    c7a4:	.word	0xbe927e4f
    c7a8:	.word	0x19cb1590
    c7ac:	.word	0x3efa01a0
    c7b0:	.word	0x16c15177
    c7b4:	.word	0xbf56c16c
    c7b8:	.word	0x5555554c
    c7bc:	.word	0x3fa55555
    c7c0:	.word	0x3fd33332
    c7c4:	.word	0x3fe90000

0000c7c8 <__kernel_rem_pio2>:
    c7c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7cc:	vpush	{d8-d11}
    c7d0:	sub.w	sp, sp, #588	; 0x24c
    c7d4:	ldr	r4, [pc, #704]	; (ca98 <__kernel_rem_pio2+0x2d0>)
    c7d6:	ldr	r6, [sp, #656]	; 0x290
    c7d8:	ldr	r5, [pc, #704]	; (ca9c <__kernel_rem_pio2+0x2d4>)
    c7da:	ldr.w	r6, [r4, r6, lsl #2]
    c7de:	str	r3, [sp, #4]
    c7e0:	subs	r4, r2, #3
    c7e2:	smull	r7, r5, r5, r4
    c7e6:	asrs	r4, r4, #31
    c7e8:	rsb	r4, r4, r5, asr #2
    c7ec:	bic.w	r4, r4, r4, asr #31
    c7f0:	subs	r7, r3, #1
    c7f2:	add.w	sl, r4, #1
    c7f6:	sub.w	sl, sl, sl, lsl #2
    c7fa:	mov	fp, r1
    c7fc:	adds	r1, r6, r7
    c7fe:	str	r4, [sp, #8]
    c800:	mov	r9, r0
    c802:	add.w	sl, r2, sl, lsl #3
    c806:	sub.w	r3, r4, r7
    c80a:	bmi.n	c83e <__kernel_rem_pio2+0x76>
    c80c:	add	r1, r3
    c80e:	adds	r1, #1
    c810:	add	r2, sp, #104	; 0x68
    c812:	ldr	r0, [sp, #660]	; 0x294
    c814:	b.n	c82c <__kernel_rem_pio2+0x64>
    c816:	ldr.w	r4, [r0, r3, lsl #2]
    c81a:	vmov	s15, r4
    c81e:	adds	r3, #1
    c820:	vcvt.f64.s32	d7, s15
    c824:	cmp	r3, r1
    c826:	vstmia	r2!, {d7}
    c82a:	beq.n	c83e <__kernel_rem_pio2+0x76>
    c82c:	cmp	r3, #0
    c82e:	bge.n	c816 <__kernel_rem_pio2+0x4e>
    c830:	vldr	d7, [pc, #588]	; ca80 <__kernel_rem_pio2+0x2b8>
    c834:	adds	r3, #1
    c836:	cmp	r3, r1
    c838:	vstmia	r2!, {d7}
    c83c:	bne.n	c82c <__kernel_rem_pio2+0x64>
    c83e:	cmp	r6, #0
    c840:	blt.w	ce08 <__kernel_rem_pio2+0x640>
    c844:	ldr	r3, [sp, #4]
    c846:	add	r0, sp, #424	; 0x1a8
    c848:	add.w	lr, r6, #1
    c84c:	lsls	r4, r3, #3
    c84e:	add.w	lr, r0, lr, lsl #3
    c852:	add.w	r1, r9, r4
    c856:	mov	r5, r7
    c858:	cmp	r7, #0
    c85a:	blt.w	cbee <__kernel_rem_pio2+0x426>
    c85e:	add	r3, sp, #104	; 0x68
    c860:	vldr	d7, [pc, #540]	; ca80 <__kernel_rem_pio2+0x2b8>
    c864:	add.w	r2, r3, r5, lsl #3
    c868:	adds	r2, #8
    c86a:	mov	r3, r9
    c86c:	vldmia	r3!, {d5}
    c870:	vldmdb	r2!, {d6}
    c874:	cmp	r3, r1
    c876:	vfma.f64	d7, d5, d6
    c87a:	bne.n	c86c <__kernel_rem_pio2+0xa4>
    c87c:	vstmia	r0!, {d7}
    c880:	cmp	r0, lr
    c882:	add.w	r5, r5, #1
    c886:	bne.n	c858 <__kernel_rem_pio2+0x90>
    c888:	add.w	r3, r6, #1073741824	; 0x40000000
    c88c:	subs	r3, #2
    c88e:	lsls	r3, r3, #2
    c890:	add	r2, sp, #24
    c892:	vldr	d9, [pc, #500]	; ca88 <__kernel_rem_pio2+0x2c0>
    c896:	vldr	d8, [pc, #504]	; ca90 <__kernel_rem_pio2+0x2c8>
    c89a:	add.w	r8, r3, #4
    c89e:	add	r3, r2
    c8a0:	add	r4, r9
    c8a2:	add	r8, r2
    c8a4:	str	r3, [sp, #12]
    c8a6:	mov	r5, r6
    c8a8:	str.w	fp, [sp, #16]
    c8ac:	add	r3, sp, #584	; 0x248
    c8ae:	add.w	r3, r3, r5, lsl #3
    c8b2:	cmp	r5, #0
    c8b4:	vldr	d0, [r3, #-160]	; 0xffffff60
    c8b8:	ble.n	c8ea <__kernel_rem_pio2+0x122>
    c8ba:	add	r1, sp, #424	; 0x1a8
    c8bc:	add.w	r3, r1, r5, lsl #3
    c8c0:	add	r2, sp, #20
    c8c2:	vmul.f64	d7, d0, d9
    c8c6:	vcvt.s32.f64	s14, d7
    c8ca:	vldmdb	r3!, {d6}
    c8ce:	vcvt.f64.s32	d7, s14
    c8d2:	vfms.f64	d0, d7, d8
    c8d6:	vcvt.s32.f64	s11, d0
    c8da:	cmp	r3, r1
    c8dc:	vmov	r0, s11
    c8e0:	vadd.f64	d0, d7, d6
    c8e4:	str.w	r0, [r2, #4]!
    c8e8:	bne.n	c8c2 <__kernel_rem_pio2+0xfa>
    c8ea:	mov	r0, sl
    c8ec:	bl	d020 <scalbn>
    c8f0:	vmov.f64	d10, d0
    c8f4:	vmov.f64	d0, #64	; 0x3e000000  0.125
    c8f8:	vmul.f64	d0, d10, d0
    c8fc:	bl	cf08 <floor>
    c900:	vmov.f64	d7, #32	; 0x41000000  8.0
    c904:	vfms.f64	d10, d0, d7
    c908:	vcvt.s32.f64	s15, d10
    c90c:	cmp.w	sl, #0
    c910:	vmov	fp, s15
    c914:	vcvt.f64.s32	d7, s15
    c918:	vsub.f64	d10, d10, d7
    c91c:	ble.w	cbb8 <__kernel_rem_pio2+0x3f0>
    c920:	add.w	lr, r5, #4294967295
    c924:	add	r3, sp, #24
    c926:	rsb	r2, sl, #24
    c92a:	ldr.w	r3, [r3, lr, lsl #2]
    c92e:	asr.w	r0, r3, r2
    c932:	lsl.w	r2, r0, r2
    c936:	add	r1, sp, #24
    c938:	subs	r3, r3, r2
    c93a:	rsb	r2, sl, #23
    c93e:	str.w	r3, [r1, lr, lsl #2]
    c942:	add	fp, r0
    c944:	asr.w	r1, r3, r2
    c948:	cmp	r1, #0
    c94a:	ble.n	c9c0 <__kernel_rem_pio2+0x1f8>
    c94c:	cmp	r5, #0
    c94e:	add.w	fp, fp, #1
    c952:	ble.w	cd9e <__kernel_rem_pio2+0x5d6>
    c956:	movs	r2, #0
    c958:	mov	r0, r2
    c95a:	add.w	lr, sp, #20
    c95e:	mov	ip, r1
    c960:	b.n	c974 <__kernel_rem_pio2+0x1ac>
    c962:	rsb	r1, r3, #16777216	; 0x1000000
    c966:	cbz	r3, c96e <__kernel_rem_pio2+0x1a6>
    c968:	str.w	r1, [lr]
    c96c:	movs	r0, #1
    c96e:	adds	r2, #1
    c970:	cmp	r5, r2
    c972:	ble.n	c992 <__kernel_rem_pio2+0x1ca>
    c974:	ldr.w	r3, [lr, #4]!
    c978:	cmp	r0, #0
    c97a:	beq.n	c962 <__kernel_rem_pio2+0x19a>
    c97c:	rsb	r3, r3, #16711935	; 0xff00ff
    c980:	adds	r2, #1
    c982:	add.w	r3, r3, #65280	; 0xff00
    c986:	cmp	r5, r2
    c988:	str.w	r3, [lr]
    c98c:	mov.w	r0, #1
    c990:	bgt.n	c974 <__kernel_rem_pio2+0x1ac>
    c992:	mov	r1, ip
    c994:	cmp.w	sl, #0
    c998:	ble.n	c9bc <__kernel_rem_pio2+0x1f4>
    c99a:	cmp.w	sl, #1
    c99e:	beq.w	cbc6 <__kernel_rem_pio2+0x3fe>
    c9a2:	cmp.w	sl, #2
    c9a6:	bne.n	c9bc <__kernel_rem_pio2+0x1f4>
    c9a8:	subs	r2, r5, #1
    c9aa:	add	r3, sp, #24
    c9ac:	add.w	lr, sp, #24
    c9b0:	ldr.w	r3, [r3, r2, lsl #2]
    c9b4:	ubfx	r3, r3, #0, #22
    c9b8:	str.w	r3, [lr, r2, lsl #2]
    c9bc:	cmp	r1, #2
    c9be:	beq.n	caa0 <__kernel_rem_pio2+0x2d8>
    c9c0:	vcmp.f64	d10, #0.0
    c9c4:	vmrs	APSR_nzcv, fpscr
    c9c8:	bne.n	cac4 <__kernel_rem_pio2+0x2fc>
    c9ca:	add.w	lr, r5, #4294967295
    c9ce:	cmp	r6, lr
    c9d0:	bgt.n	c9f2 <__kernel_rem_pio2+0x22a>
    c9d2:	add.w	r2, r5, #1073741824	; 0x40000000
    c9d6:	subs	r2, #1
    c9d8:	add	r3, sp, #24
    c9da:	add.w	r2, r3, r2, lsl #2
    c9de:	movs	r0, #0
    c9e0:	ldr.w	r3, [r2], #-4
    c9e4:	cmp	r2, r8
    c9e6:	orr.w	r0, r0, r3
    c9ea:	bne.n	c9e0 <__kernel_rem_pio2+0x218>
    c9ec:	cmp	r0, #0
    c9ee:	bne.w	cc1c <__kernel_rem_pio2+0x454>
    c9f2:	subs	r3, r6, #1
    c9f4:	add	r2, sp, #24
    c9f6:	ldr.w	r3, [r2, r3, lsl #2]
    c9fa:	cmp	r3, #0
    c9fc:	bne.w	cd98 <__kernel_rem_pio2+0x5d0>
    ca00:	ldr	r3, [sp, #12]
    ca02:	mov.w	lr, #1
    ca06:	ldr.w	r2, [r3], #-4
    ca0a:	add.w	lr, lr, #1
    ca0e:	cmp	r2, #0
    ca10:	beq.n	ca06 <__kernel_rem_pio2+0x23e>
    ca12:	add	lr, r5
    ca14:	adds	r3, r5, #1
    ca16:	cmp	r3, lr
    ca18:	bgt.n	ca76 <__kernel_rem_pio2+0x2ae>
    ca1a:	ldr	r2, [sp, #8]
    ca1c:	adds	r0, r3, r2
    ca1e:	ldr	r2, [sp, #4]
    ca20:	add.w	r0, r0, #1073741824	; 0x40000000
    ca24:	adds	r1, r2, r5
    ca26:	add.w	ip, lr, r2
    ca2a:	ldr	r2, [sp, #660]	; 0x294
    ca2c:	subs	r0, #1
    ca2e:	add.w	r0, r2, r0, lsl #2
    ca32:	add	r2, sp, #104	; 0x68
    ca34:	add.w	r1, r2, r1, lsl #3
    ca38:	add.w	ip, r2, ip, lsl #3
    ca3c:	add	r2, sp, #424	; 0x1a8
    ca3e:	add.w	r5, r2, r3, lsl #3
    ca42:	ldr.w	r3, [r0, #4]!
    ca46:	vmov	s14, r3
    ca4a:	vcvt.f64.s32	d7, s14
    ca4e:	cmp	r7, #0
    ca50:	vstmia	r1!, {d7}
    ca54:	vldr	d7, [pc, #40]	; ca80 <__kernel_rem_pio2+0x2b8>
    ca58:	blt.n	ca6e <__kernel_rem_pio2+0x2a6>
    ca5a:	mov	r3, r9
    ca5c:	mov	r2, r1
    ca5e:	vldmia	r3!, {d5}
    ca62:	vldmdb	r2!, {d6}
    ca66:	cmp	r3, r4
    ca68:	vfma.f64	d7, d5, d6
    ca6c:	bne.n	ca5e <__kernel_rem_pio2+0x296>
    ca6e:	cmp	r1, ip
    ca70:	vstmia	r5!, {d7}
    ca74:	bne.n	ca42 <__kernel_rem_pio2+0x27a>
    ca76:	mov	r5, lr
    ca78:	b.n	c8ac <__kernel_rem_pio2+0xe4>
    ca7a:	nop
    ca7c:	nop.w
	...
    ca8c:	.word	0x3e700000
    ca90:	.word	0x00000000
    ca94:	.word	0x41700000
    ca98:	.word	0x20000960
    ca9c:	.word	0x2aaaaaab
    caa0:	vmov.f64	d0, #112	; 0x3f800000  1.0
    caa4:	vsub.f64	d10, d0, d10
    caa8:	cmp	r0, #0
    caaa:	beq.n	c9c0 <__kernel_rem_pio2+0x1f8>
    caac:	mov	r0, sl
    caae:	str	r1, [sp, #20]
    cab0:	bl	d020 <scalbn>
    cab4:	vsub.f64	d10, d10, d0
    cab8:	vcmp.f64	d10, #0.0
    cabc:	vmrs	APSR_nzcv, fpscr
    cac0:	ldr	r1, [sp, #20]
    cac2:	beq.n	c9ca <__kernel_rem_pio2+0x202>
    cac4:	vmov.f64	d0, d10
    cac8:	rsb	r0, sl, #0
    cacc:	vmov	s22, fp
    cad0:	mov	r9, r1
    cad2:	ldr.w	fp, [sp, #16]
    cad6:	bl	d020 <scalbn>
    cada:	vldr	d6, [pc, #836]	; ce20 <__kernel_rem_pio2+0x658>
    cade:	vcmpe.f64	d0, d6
    cae2:	vmrs	APSR_nzcv, fpscr
    cae6:	blt.w	cdce <__kernel_rem_pio2+0x606>
    caea:	vldr	d7, [pc, #828]	; ce28 <__kernel_rem_pio2+0x660>
    caee:	vmul.f64	d7, d0, d7
    caf2:	vcvt.s32.f64	s14, d7
    caf6:	add	r1, sp, #24
    caf8:	vcvt.f64.s32	d5, s14
    cafc:	vfms.f64	d0, d5, d6
    cb00:	vcvt.s32.f64	s0, d0
    cb04:	adds	r3, r5, #1
    cb06:	vmov	r2, s0
    cb0a:	str.w	r2, [r1, r5, lsl #2]
    cb0e:	vmov	r2, s14
    cb12:	str.w	r2, [r1, r3, lsl #2]
    cb16:	add.w	sl, sl, #24
    cb1a:	vmov.f64	d0, #112	; 0x3f800000  1.0
    cb1e:	mov	r0, sl
    cb20:	str	r3, [sp, #4]
    cb22:	bl	d020 <scalbn>
    cb26:	ldr	r3, [sp, #4]
    cb28:	cmp	r3, #0
    cb2a:	blt.w	cdea <__kernel_rem_pio2+0x622>
    cb2e:	add	r4, sp, #424	; 0x1a8
    cb30:	lsls	r7, r3, #3
    cb32:	add	r2, sp, #24
    cb34:	vldr	d6, [pc, #752]	; ce28 <__kernel_rem_pio2+0x660>
    cb38:	add.w	r2, r2, r3, lsl #2
    cb3c:	add.w	ip, r4, r7
    cb40:	adds	r2, #4
    cb42:	add.w	r0, ip, #8
    cb46:	vldmdb	r2!, {s14}
    cb4a:	vcvt.f64.s32	d7, s14
    cb4e:	vmul.f64	d7, d7, d0
    cb52:	vstmdb	r0!, {d7}
    cb56:	vmul.f64	d0, d0, d6
    cb5a:	cmp	r0, r4
    cb5c:	bne.n	cb46 <__kernel_rem_pio2+0x37e>
    cb5e:	add.w	r8, sp, #416	; 0x1a0
    cb62:	movs	r5, #0
    cb64:	add.w	lr, sp, #264	; 0x108
    cb68:	cmp	r6, #0
    cb6a:	blt.w	cd92 <__kernel_rem_pio2+0x5ca>
    cb6e:	ldr	r0, [pc, #720]	; (ce40 <__kernel_rem_pio2+0x678>)
    cb70:	mov	r1, ip
    cb72:	vldr	d6, [pc, #700]	; ce30 <__kernel_rem_pio2+0x668>
    cb76:	vldr	d7, [pc, #704]	; ce38 <__kernel_rem_pio2+0x670>
    cb7a:	movs	r2, #0
    cb7c:	b.n	cb86 <__kernel_rem_pio2+0x3be>
    cb7e:	cmp	r5, r2
    cb80:	blt.n	cb94 <__kernel_rem_pio2+0x3cc>
    cb82:	vldmia	r0!, {d6}
    cb86:	vldmia	r1!, {d5}
    cb8a:	adds	r2, #1
    cb8c:	cmp	r6, r2
    cb8e:	vfma.f64	d7, d5, d6
    cb92:	bge.n	cb7e <__kernel_rem_pio2+0x3b6>
    cb94:	sub.w	ip, ip, #8
    cb98:	add.w	r2, lr, r5, lsl #3
    cb9c:	cmp	ip, r8
    cb9e:	vstr	d7, [r2]
    cba2:	add.w	r5, r5, #1
    cba6:	bne.n	cb68 <__kernel_rem_pio2+0x3a0>
    cba8:	ldr	r2, [sp, #656]	; 0x290
    cbaa:	cmp	r2, #3
    cbac:	bhi.w	cd0a <__kernel_rem_pio2+0x542>
    cbb0:	tbb	[pc, r2]
    cbb4:	.word	0x50b5b5dd
    cbb8:	bne.n	cbdc <__kernel_rem_pio2+0x414>
    cbba:	subs	r3, r5, #1
    cbbc:	add	r2, sp, #24
    cbbe:	ldr.w	r1, [r2, r3, lsl #2]
    cbc2:	asrs	r1, r1, #23
    cbc4:	b.n	c948 <__kernel_rem_pio2+0x180>
    cbc6:	subs	r2, r5, #1
    cbc8:	add	r3, sp, #24
    cbca:	add.w	lr, sp, #24
    cbce:	ldr.w	r3, [r3, r2, lsl #2]
    cbd2:	ubfx	r3, r3, #0, #23
    cbd6:	str.w	r3, [lr, r2, lsl #2]
    cbda:	b.n	c9bc <__kernel_rem_pio2+0x1f4>
    cbdc:	vmov.f64	d7, #96	; 0x3f000000  0.5
    cbe0:	vcmpe.f64	d10, d7
    cbe4:	vmrs	APSR_nzcv, fpscr
    cbe8:	bge.n	cc02 <__kernel_rem_pio2+0x43a>
    cbea:	movs	r1, #0
    cbec:	b.n	c9c0 <__kernel_rem_pio2+0x1f8>
    cbee:	vldr	d7, [pc, #584]	; ce38 <__kernel_rem_pio2+0x670>
    cbf2:	vstmia	r0!, {d7}
    cbf6:	cmp	r0, lr
    cbf8:	add.w	r5, r5, #1
    cbfc:	bne.w	c858 <__kernel_rem_pio2+0x90>
    cc00:	b.n	c888 <__kernel_rem_pio2+0xc0>
    cc02:	cmp	r5, #0
    cc04:	add.w	fp, fp, #1
    cc08:	it	gt
    cc0a:	movgt	r1, #2
    cc0c:	bgt.w	c956 <__kernel_rem_pio2+0x18e>
    cc10:	vmov.f64	d7, #112	; 0x3f800000  1.0
    cc14:	movs	r1, #2
    cc16:	vsub.f64	d10, d7, d10
    cc1a:	b.n	c9c0 <__kernel_rem_pio2+0x1f8>
    cc1c:	add	r2, sp, #24
    cc1e:	vmov	s22, fp
    cc22:	ldr.w	r2, [r2, lr, lsl #2]
    cc26:	ldr.w	fp, [sp, #16]
    cc2a:	mov	r3, lr
    cc2c:	mov	r9, r1
    cc2e:	sub.w	sl, sl, #24
    cc32:	cmp	r2, #0
    cc34:	bne.w	cb1a <__kernel_rem_pio2+0x352>
    cc38:	add.w	r2, lr, #1073741824	; 0x40000000
    cc3c:	subs	r2, #1
    cc3e:	add	r1, sp, #24
    cc40:	add.w	r2, r1, r2, lsl #2
    cc44:	ldr.w	r1, [r2], #-4
    cc48:	subs	r3, #1
    cc4a:	sub.w	sl, sl, #24
    cc4e:	cmp	r1, #0
    cc50:	beq.n	cc44 <__kernel_rem_pio2+0x47c>
    cc52:	b.n	cb1a <__kernel_rem_pio2+0x352>
    cc54:	cmp	r3, #0
    cc56:	ble.w	cde4 <__kernel_rem_pio2+0x61c>
    cc5a:	add.w	r2, r3, #536870912	; 0x20000000
    cc5e:	subs	r2, #1
    cc60:	add.w	r4, lr, r7
    cc64:	lsls	r0, r2, #3
    cc66:	vldr	d7, [r4]
    cc6a:	add.w	r4, r0, #8
    cc6e:	adds	r0, #16
    cc70:	add	r4, lr
    cc72:	add	r0, lr
    cc74:	add	r5, sp, #272	; 0x110
    cc76:	vldmdb	r4!, {d6}
    cc7a:	vadd.f64	d5, d6, d7
    cc7e:	vsub.f64	d6, d6, d5
    cc82:	vadd.f64	d7, d6, d7
    cc86:	vstmdb	r0!, {d7}
    cc8a:	vmov.f64	d7, d5
    cc8e:	cmp	r0, r5
    cc90:	vstr	d5, [r4]
    cc94:	bne.n	cc76 <__kernel_rem_pio2+0x4ae>
    cc96:	cmp	r3, #1
    cc98:	ble.w	cde4 <__kernel_rem_pio2+0x61c>
    cc9c:	lsls	r2, r2, #3
    cc9e:	add	r7, lr
    cca0:	add.w	r0, r2, #16
    cca4:	vldr	d7, [r7]
    cca8:	adds	r2, #8
    ccaa:	add	r0, lr
    ccac:	add.w	r3, lr, r2
    ccb0:	add	r4, sp, #280	; 0x118
    ccb2:	mov	r2, r0
    ccb4:	vldmdb	r3!, {d6}
    ccb8:	vadd.f64	d5, d7, d6
    ccbc:	vsub.f64	d6, d6, d5
    ccc0:	vadd.f64	d7, d6, d7
    ccc4:	vstmdb	r2!, {d7}
    ccc8:	vmov.f64	d7, d5
    cccc:	cmp	r4, r2
    ccce:	vstr	d5, [r3]
    ccd2:	bne.n	ccb4 <__kernel_rem_pio2+0x4ec>
    ccd4:	vldr	d7, [pc, #352]	; ce38 <__kernel_rem_pio2+0x670>
    ccd8:	vldmdb	r0!, {d6}
    ccdc:	cmp	r4, r0
    ccde:	vadd.f64	d7, d7, d6
    cce2:	bne.n	ccd8 <__kernel_rem_pio2+0x510>
    cce4:	mov	r3, r9
    cce6:	cmp	r3, #0
    cce8:	beq.n	cdb8 <__kernel_rem_pio2+0x5f0>
    ccea:	vneg.f64	d7, d7
    ccee:	vldr	d5, [lr]
    ccf2:	vldr	d6, [lr, #8]
    ccf6:	vneg.f64	d5, d5
    ccfa:	vstr	d5, [fp]
    ccfe:	vstr	d7, [fp, #16]
    cd02:	vneg.f64	d7, d6
    cd06:	vstr	d7, [fp, #8]
    cd0a:	vmov	r3, s22
    cd0e:	and.w	r0, r3, #7
    cd12:	add.w	sp, sp, #588	; 0x24c
    cd16:	vpop	{d8-d11}
    cd1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd1e:	vldr	d7, [pc, #280]	; ce38 <__kernel_rem_pio2+0x670>
    cd22:	add.w	r2, r7, #8
    cd26:	add	r2, lr
    cd28:	vldmdb	r2!, {d6}
    cd2c:	cmp	r2, lr
    cd2e:	vadd.f64	d7, d7, d6
    cd32:	bne.n	cd28 <__kernel_rem_pio2+0x560>
    cd34:	mov	r2, r9
    cd36:	cbz	r2, cda2 <__kernel_rem_pio2+0x5da>
    cd38:	vneg.f64	d5, d7
    cd3c:	vldr	d6, [lr]
    cd40:	cmp	r3, #0
    cd42:	vstr	d5, [fp]
    cd46:	vsub.f64	d7, d6, d7
    cd4a:	ble.n	cd64 <__kernel_rem_pio2+0x59c>
    cd4c:	add	r0, sp, #272	; 0x110
    cd4e:	movs	r2, #1
    cd50:	vldmia	r0!, {d6}
    cd54:	adds	r2, #1
    cd56:	cmp	r3, r2
    cd58:	vadd.f64	d7, d7, d6
    cd5c:	bge.n	cd50 <__kernel_rem_pio2+0x588>
    cd5e:	mov	r3, r9
    cd60:	cmp	r3, #0
    cd62:	beq.n	cd06 <__kernel_rem_pio2+0x53e>
    cd64:	vneg.f64	d7, d7
    cd68:	vstr	d7, [fp, #8]
    cd6c:	b.n	cd0a <__kernel_rem_pio2+0x542>
    cd6e:	vldr	d7, [pc, #200]	; ce38 <__kernel_rem_pio2+0x670>
    cd72:	adds	r7, #8
    cd74:	add	lr, r7
    cd76:	vldmdb	lr!, {d6}
    cd7a:	subs	r3, #1
    cd7c:	adds	r2, r3, #1
    cd7e:	vadd.f64	d7, d7, d6
    cd82:	bne.n	cd76 <__kernel_rem_pio2+0x5ae>
    cd84:	mov	r3, r9
    cd86:	cbz	r3, cd8c <__kernel_rem_pio2+0x5c4>
    cd88:	vneg.f64	d7, d7
    cd8c:	vstr	d7, [fp]
    cd90:	b.n	cd0a <__kernel_rem_pio2+0x542>
    cd92:	vldr	d7, [pc, #164]	; ce38 <__kernel_rem_pio2+0x670>
    cd96:	b.n	cb94 <__kernel_rem_pio2+0x3cc>
    cd98:	mov.w	lr, #1
    cd9c:	b.n	ca12 <__kernel_rem_pio2+0x24a>
    cd9e:	movs	r0, #0
    cda0:	b.n	c994 <__kernel_rem_pio2+0x1cc>
    cda2:	vldr	d6, [lr]
    cda6:	cmp	r3, #0
    cda8:	vstr	d7, [fp]
    cdac:	vsub.f64	d7, d6, d7
    cdb0:	bgt.n	cd4c <__kernel_rem_pio2+0x584>
    cdb2:	vstr	d7, [fp, #8]
    cdb6:	b.n	cd0a <__kernel_rem_pio2+0x542>
    cdb8:	ldrd	r0, r1, [lr]
    cdbc:	ldrd	r2, r3, [lr, #8]
    cdc0:	vstr	d7, [fp, #16]
    cdc4:	strd	r0, r1, [fp]
    cdc8:	strd	r2, r3, [fp, #8]
    cdcc:	b.n	cd0a <__kernel_rem_pio2+0x542>
    cdce:	vcvt.s32.f64	s0, d0
    cdd2:	add	r1, sp, #24
    cdd4:	vmov	r2, s0
    cdd8:	mov	r3, r5
    cdda:	str.w	r2, [r1, r5, lsl #2]
    cdde:	b.n	cb1a <__kernel_rem_pio2+0x352>
    cde0:	add.w	lr, sp, #264	; 0x108
    cde4:	vldr	d7, [pc, #80]	; ce38 <__kernel_rem_pio2+0x670>
    cde8:	b.n	cce4 <__kernel_rem_pio2+0x51c>
    cdea:	ldr	r2, [sp, #656]	; 0x290
    cdec:	cmp	r2, #3
    cdee:	bhi.n	cd0a <__kernel_rem_pio2+0x542>
    cdf0:	add	r1, pc, #4	; (adr r1, cdf8 <__kernel_rem_pio2+0x630>)
    cdf2:	ldr.w	pc, [r1, r2, lsl #2]
    cdf6:	nop
    cdf8:	.word	0x0000ce19
    cdfc:	.word	0x0000ce0f
    ce00:	.word	0x0000ce0f
    ce04:	.word	0x0000cde1
    ce08:	ldr	r3, [sp, #4]
    ce0a:	lsls	r4, r3, #3
    ce0c:	b.n	c888 <__kernel_rem_pio2+0xc0>
    ce0e:	vldr	d7, [pc, #40]	; ce38 <__kernel_rem_pio2+0x670>
    ce12:	add.w	lr, sp, #264	; 0x108
    ce16:	b.n	cd34 <__kernel_rem_pio2+0x56c>
    ce18:	vldr	d7, [pc, #28]	; ce38 <__kernel_rem_pio2+0x670>
    ce1c:	b.n	cd84 <__kernel_rem_pio2+0x5bc>
    ce1e:	nop
    ce20:	.word	0x00000000
    ce24:	.word	0x41700000
    ce28:	.word	0x00000000
    ce2c:	.word	0x3e700000
    ce30:	.word	0x40000000
    ce34:	.word	0x3ff921fb
	...
    ce40:	.word	0x20000978
    ce44:	.word	0x00000000

0000ce48 <__kernel_sin>:
    ce48:	vmov	r3, s1
    ce4c:	bic.w	r3, r3, #2147483648	; 0x80000000
    ce50:	cmp.w	r3, #1044381696	; 0x3e400000
    ce54:	bge.n	ce60 <__kernel_sin+0x18>
    ce56:	vcvt.s32.f64	s15, d0
    ce5a:	vmov	r3, s15
    ce5e:	cbz	r3, ceaa <__kernel_sin+0x62>
    ce60:	vmul.f64	d7, d0, d0
    ce64:	vmul.f64	d4, d0, d7
    ce68:	vldr	d5, [pc, #84]	; cec0 <__kernel_sin+0x78>
    ce6c:	vldr	d6, [pc, #88]	; cec8 <__kernel_sin+0x80>
    ce70:	vldr	d3, [pc, #92]	; ced0 <__kernel_sin+0x88>
    ce74:	vfma.f64	d6, d7, d5
    ce78:	vldr	d5, [pc, #92]	; ced8 <__kernel_sin+0x90>
    ce7c:	vfma.f64	d3, d7, d6
    ce80:	vldr	d6, [pc, #92]	; cee0 <__kernel_sin+0x98>
    ce84:	vfma.f64	d5, d7, d3
    ce88:	vfma.f64	d6, d7, d5
    ce8c:	cbz	r0, ceac <__kernel_sin+0x64>
    ce8e:	vnmul.f64	d6, d6, d4
    ce92:	vmov.f64	d3, #96	; 0x3f000000  0.5
    ce96:	vldr	d5, [pc, #80]	; cee8 <__kernel_sin+0xa0>
    ce9a:	vfma.f64	d6, d1, d3
    ce9e:	vfnms.f64	d1, d7, d6
    cea2:	vfma.f64	d1, d4, d5
    cea6:	vsub.f64	d0, d0, d1
    ceaa:	bx	lr
    ceac:	vldr	d5, [pc, #64]	; cef0 <__kernel_sin+0xa8>
    ceb0:	vfma.f64	d5, d7, d6
    ceb4:	vfma.f64	d0, d4, d5
    ceb8:	bx	lr
    ceba:	nop
    cebc:	nop.w
    cec0:	.word	0x5acfd57c
    cec4:	.word	0x3de5d93a
    cec8:	.word	0x8a2b9ceb
    cecc:	.word	0xbe5ae5e6
    ced0:	.word	0x57b1fe7d
    ced4:	.word	0x3ec71de3
    ced8:	.word	0x19c161d5
    cedc:	.word	0xbf2a01a0
    cee0:	.word	0x1110f8a6
    cee4:	.word	0x3f811111
    cee8:	.word	0x55555549
    ceec:	.word	0x3fc55555
    cef0:	.word	0x55555549
    cef4:	.word	0xbfc55555

0000cef8 <fabs>:
    cef8:	vmov	r2, r3, d0
    cefc:	bic.w	r3, r3, #2147483648	; 0x80000000
    cf00:	vmov	d0, r2, r3
    cf04:	bx	lr
    cf06:	nop

0000cf08 <floor>:
    cf08:	push	{r4, r5, r6}
    cf0a:	sub	sp, #12
    cf0c:	vstr	d0, [sp]
    cf10:	ldr	r1, [sp, #4]
    cf12:	ldr	r4, [sp, #0]
    cf14:	ubfx	r2, r1, #20, #11
    cf18:	subw	r3, r2, #1023	; 0x3ff
    cf1c:	cmp	r3, #19
    cf1e:	mov	r5, r1
    cf20:	mov	r0, r4
    cf22:	bgt.n	cf62 <floor+0x5a>
    cf24:	cmp	r3, #0
    cf26:	blt.n	cfb0 <floor+0xa8>
    cf28:	ldr	r2, [pc, #236]	; (d018 <floor+0x110>)
    cf2a:	asrs	r2, r3
    cf2c:	and.w	r6, r1, r2
    cf30:	orrs	r4, r6
    cf32:	beq.n	cf6c <floor+0x64>
    cf34:	vldr	d7, [pc, #216]	; d010 <floor+0x108>
    cf38:	vldr	d6, [sp]
    cf3c:	vadd.f64	d7, d6, d7
    cf40:	vcmpe.f64	d7, #0.0
    cf44:	vmrs	APSR_nzcv, fpscr
    cf48:	ble.n	cf54 <floor+0x4c>
    cf4a:	cmp	r1, #0
    cf4c:	blt.n	cfd6 <floor+0xce>
    cf4e:	bic.w	r1, r5, r2
    cf52:	movs	r0, #0
    cf54:	mov	r3, r1
    cf56:	mov	r2, r0
    cf58:	vmov	d0, r2, r3
    cf5c:	add	sp, #12
    cf5e:	pop	{r4, r5, r6}
    cf60:	bx	lr
    cf62:	cmp	r3, #51	; 0x33
    cf64:	ble.n	cf76 <floor+0x6e>
    cf66:	cmp.w	r3, #1024	; 0x400
    cf6a:	beq.n	cfcc <floor+0xc4>
    cf6c:	vldr	d0, [sp]
    cf70:	add	sp, #12
    cf72:	pop	{r4, r5, r6}
    cf74:	bx	lr
    cf76:	subw	r2, r2, #1043	; 0x413
    cf7a:	mov.w	r4, #4294967295
    cf7e:	lsr.w	r2, r4, r2
    cf82:	tst	r0, r2
    cf84:	beq.n	cf6c <floor+0x64>
    cf86:	vldr	d7, [pc, #136]	; d010 <floor+0x108>
    cf8a:	vldr	d6, [sp]
    cf8e:	vadd.f64	d7, d6, d7
    cf92:	vcmpe.f64	d7, #0.0
    cf96:	vmrs	APSR_nzcv, fpscr
    cf9a:	ble.n	cf54 <floor+0x4c>
    cf9c:	cmp	r1, #0
    cf9e:	blt.n	cfe2 <floor+0xda>
    cfa0:	mov	r1, r5
    cfa2:	bic.w	r0, r0, r2
    cfa6:	mov	r3, r1
    cfa8:	mov	r2, r0
    cfaa:	vmov	d0, r2, r3
    cfae:	b.n	cf5c <floor+0x54>
    cfb0:	vldr	d7, [pc, #92]	; d010 <floor+0x108>
    cfb4:	vadd.f64	d7, d0, d7
    cfb8:	vcmpe.f64	d7, #0.0
    cfbc:	vmrs	APSR_nzcv, fpscr
    cfc0:	ble.n	cf54 <floor+0x4c>
    cfc2:	cmp	r1, #0
    cfc4:	blt.n	cff8 <floor+0xf0>
    cfc6:	movs	r0, #0
    cfc8:	mov	r1, r0
    cfca:	b.n	cf54 <floor+0x4c>
    cfcc:	vldr	d7, [sp]
    cfd0:	vadd.f64	d0, d7, d7
    cfd4:	b.n	cf70 <floor+0x68>
    cfd6:	mov.w	r1, #1048576	; 0x100000
    cfda:	asr.w	r3, r1, r3
    cfde:	add	r5, r3
    cfe0:	b.n	cf4e <floor+0x46>
    cfe2:	cmp	r3, #20
    cfe4:	beq.n	d008 <floor+0x100>
    cfe6:	movs	r1, #1
    cfe8:	rsb	r3, r3, #52	; 0x34
    cfec:	lsl.w	r3, r1, r3
    cff0:	adds	r0, r3, r0
    cff2:	it	cs
    cff4:	addcs	r5, r5, r1
    cff6:	b.n	cfa0 <floor+0x98>
    cff8:	bic.w	r2, r1, #2147483648	; 0x80000000
    cffc:	ldr	r3, [pc, #28]	; (d01c <floor+0x114>)
    cffe:	orrs	r2, r4
    d000:	it	ne
    d002:	movne	r1, r3
    d004:	movs	r0, #0
    d006:	b.n	cf54 <floor+0x4c>
    d008:	adds	r5, #1
    d00a:	b.n	cfa0 <floor+0x98>
    d00c:	nop.w
    d010:	.word	0x8800759c
    d014:	.word	0x7e37e43c
    d018:	.word	0x000fffff
    d01c:	.word	0xbff00000

0000d020 <scalbn>:
    d020:	push	{r4, lr}
    d022:	vpush	{d8}
    d026:	sub	sp, #8
    d028:	vstr	d0, [sp]
    d02c:	ldr	r3, [sp, #4]
    d02e:	ldr	r1, [sp, #0]
    d030:	ubfx	r2, r3, #20, #11
    d034:	cbnz	r2, d082 <scalbn+0x62>
    d036:	bic.w	r3, r3, #2147483648	; 0x80000000
    d03a:	orrs	r3, r1
    d03c:	beq.n	d09a <scalbn+0x7a>
    d03e:	vldr	d7, [pc, #216]	; d118 <scalbn+0xf8>
    d042:	ldr	r2, [pc, #244]	; (d138 <scalbn+0x118>)
    d044:	vmul.f64	d7, d0, d7
    d048:	cmp	r0, r2
    d04a:	vstr	d7, [sp]
    d04e:	ldr	r3, [sp, #4]
    d050:	blt.n	d0a6 <scalbn+0x86>
    d052:	ubfx	r2, r3, #20, #11
    d056:	subs	r2, #54	; 0x36
    d058:	adds	r4, r0, r2
    d05a:	movw	r2, #2046	; 0x7fe
    d05e:	cmp	r4, r2
    d060:	bgt.n	d0c4 <scalbn+0xa4>
    d062:	cmp	r4, #0
    d064:	ble.n	d0b6 <scalbn+0x96>
    d066:	bic.w	r1, r3, #2139095040	; 0x7f800000
    d06a:	ldrd	r2, r3, [sp]
    d06e:	bic.w	r1, r1, #7340032	; 0x700000
    d072:	orr.w	r3, r1, r4, lsl #20
    d076:	vmov	d0, r2, r3
    d07a:	add	sp, #8
    d07c:	vpop	{d8}
    d080:	pop	{r4, pc}
    d082:	movw	r1, #2047	; 0x7ff
    d086:	cmp	r2, r1
    d088:	bne.n	d058 <scalbn+0x38>
    d08a:	vldr	d7, [sp]
    d08e:	vadd.f64	d0, d7, d7
    d092:	add	sp, #8
    d094:	vpop	{d8}
    d098:	pop	{r4, pc}
    d09a:	vldr	d0, [sp]
    d09e:	add	sp, #8
    d0a0:	vpop	{d8}
    d0a4:	pop	{r4, pc}
    d0a6:	vldr	d0, [pc, #120]	; d120 <scalbn+0x100>
    d0aa:	vmul.f64	d0, d7, d0
    d0ae:	add	sp, #8
    d0b0:	vpop	{d8}
    d0b4:	pop	{r4, pc}
    d0b6:	cmn.w	r4, #53	; 0x35
    d0ba:	bge.n	d0e0 <scalbn+0xc0>
    d0bc:	movw	r3, #50000	; 0xc350
    d0c0:	cmp	r0, r3
    d0c2:	ble.n	d100 <scalbn+0xe0>
    d0c4:	vldr	d8, [pc, #96]	; d128 <scalbn+0x108>
    d0c8:	vldr	d1, [sp]
    d0cc:	vmov.f64	d0, d8
    d0d0:	bl	d13c <copysign>
    d0d4:	vmul.f64	d0, d0, d8
    d0d8:	add	sp, #8
    d0da:	vpop	{d8}
    d0de:	pop	{r4, pc}
    d0e0:	bic.w	r1, r3, #2139095040	; 0x7f800000
    d0e4:	ldrd	r2, r3, [sp]
    d0e8:	bic.w	r1, r1, #7340032	; 0x700000
    d0ec:	adds	r4, #54	; 0x36
    d0ee:	orr.w	r3, r1, r4, lsl #20
    d0f2:	vldr	d0, [pc, #60]	; d130 <scalbn+0x110>
    d0f6:	vmov	d7, r2, r3
    d0fa:	vmul.f64	d0, d7, d0
    d0fe:	b.n	d07a <scalbn+0x5a>
    d100:	vldr	d8, [pc, #28]	; d120 <scalbn+0x100>
    d104:	vldr	d1, [sp]
    d108:	vmov.f64	d0, d8
    d10c:	bl	d13c <copysign>
    d110:	vmul.f64	d0, d0, d8
    d114:	b.n	d07a <scalbn+0x5a>
    d116:	nop
    d118:	.word	0x00000000
    d11c:	.word	0x43500000
    d120:	.word	0xc2f8f359
    d124:	.word	0x01a56e1f
    d128:	.word	0x8800759c
    d12c:	.word	0x7e37e43c
    d130:	.word	0x00000000
    d134:	.word	0x3c900000
    d138:	.word	0xffff3cb0

0000d13c <copysign>:
    d13c:	vmov	r2, r3, d0
    d140:	vmov	r0, s3
    d144:	bic.w	r1, r3, #2147483648	; 0x80000000
    d148:	and.w	r0, r0, #2147483648	; 0x80000000
    d14c:	orr.w	r3, r1, r0
    d150:	vmov	d0, r2, r3
    d154:	bx	lr
    d156:	nop

0000d158 <__aeabi_atexit>:
    d158:	mov	r3, r1
    d15a:	mov	r1, r0
    d15c:	mov	r0, r3
    d15e:	b.w	d1d4 <__cxa_atexit>
    d162:	nop

0000d164 <calloc>:
    d164:	ldr	r3, [pc, #8]	; (d170 <calloc+0xc>)
    d166:	mov	r2, r1
    d168:	mov	r1, r0
    d16a:	ldr	r0, [r3, #0]
    d16c:	b.w	d174 <_calloc_r>
    d170:	.word	0x200013f8

0000d174 <_calloc_r>:
    d174:	push	{r4, lr}
    d176:	mul.w	r1, r2, r1
    d17a:	bl	d25c <_malloc_r>
    d17e:	mov	r4, r0
    d180:	cbz	r0, d1ba <_calloc_r+0x46>
    d182:	ldr.w	r2, [r0, #-4]
    d186:	bic.w	r2, r2, #3
    d18a:	subs	r2, #4
    d18c:	cmp	r2, #36	; 0x24
    d18e:	bhi.n	d1c2 <_calloc_r+0x4e>
    d190:	cmp	r2, #19
    d192:	bls.n	d1be <_calloc_r+0x4a>
    d194:	movs	r3, #0
    d196:	cmp	r2, #27
    d198:	str	r3, [r0, #0]
    d19a:	str	r3, [r0, #4]
    d19c:	bls.n	d1cc <_calloc_r+0x58>
    d19e:	cmp	r2, #36	; 0x24
    d1a0:	str	r3, [r0, #8]
    d1a2:	str	r3, [r0, #12]
    d1a4:	iteee	ne
    d1a6:	addne.w	r2, r0, #16
    d1aa:	streq	r3, [r0, #16]
    d1ac:	streq	r3, [r0, #20]
    d1ae:	addeq.w	r2, r0, #24
    d1b2:	movs	r3, #0
    d1b4:	str	r3, [r2, #0]
    d1b6:	str	r3, [r2, #4]
    d1b8:	str	r3, [r2, #8]
    d1ba:	mov	r0, r4
    d1bc:	pop	{r4, pc}
    d1be:	mov	r2, r0
    d1c0:	b.n	d1b2 <_calloc_r+0x3e>
    d1c2:	movs	r1, #0
    d1c4:	bl	d7cc <memset>
    d1c8:	mov	r0, r4
    d1ca:	pop	{r4, pc}
    d1cc:	add.w	r2, r0, #8
    d1d0:	b.n	d1b2 <_calloc_r+0x3e>
    d1d2:	nop

0000d1d4 <__cxa_atexit>:
    d1d4:	mov	r3, r2
    d1d6:	mov	r2, r1
    d1d8:	mov	r1, r0
    d1da:	movs	r0, #2
    d1dc:	b.w	d894 <__register_exitproc>

0000d1e0 <__errno>:
    d1e0:	ldr	r3, [pc, #4]	; (d1e8 <__errno+0x8>)
    d1e2:	ldr	r0, [r3, #0]
    d1e4:	bx	lr
    d1e6:	nop
    d1e8:	.word	0x200013f8

0000d1ec <__libc_init_array>:
    d1ec:	push	{r4, r5, r6, lr}
    d1ee:	ldr	r6, [pc, #60]	; (d22c <__libc_init_array+0x40>)
    d1f0:	ldr	r5, [pc, #60]	; (d230 <__libc_init_array+0x44>)
    d1f2:	subs	r6, r6, r5
    d1f4:	asrs	r6, r6, #2
    d1f6:	it	ne
    d1f8:	movne	r4, #0
    d1fa:	beq.n	d208 <__libc_init_array+0x1c>
    d1fc:	adds	r4, #1
    d1fe:	ldr.w	r3, [r5], #4
    d202:	blx	r3
    d204:	cmp	r6, r4
    d206:	bne.n	d1fc <__libc_init_array+0x10>
    d208:	ldr	r6, [pc, #40]	; (d234 <__libc_init_array+0x48>)
    d20a:	ldr	r5, [pc, #44]	; (d238 <__libc_init_array+0x4c>)
    d20c:	subs	r6, r6, r5
    d20e:	bl	dba8 <___init_veneer>
    d212:	asrs	r6, r6, #2
    d214:	it	ne
    d216:	movne	r4, #0
    d218:	beq.n	d228 <__libc_init_array+0x3c>
    d21a:	adds	r4, #1
    d21c:	ldr.w	r3, [r5], #4
    d220:	blx	r3
    d222:	cmp	r6, r4
    d224:	bne.n	d21a <__libc_init_array+0x2e>
    d226:	pop	{r4, r5, r6, pc}
    d228:	pop	{r4, r5, r6, pc}
    d22a:	nop
    d22c:	.word	0x60001600
    d230:	.word	0x60001600
    d234:	.word	0x6000160c
    d238:	.word	0x60001600

0000d23c <malloc>:
    d23c:	ldr	r3, [pc, #8]	; (d248 <malloc+0xc>)
    d23e:	mov	r1, r0
    d240:	ldr	r0, [r3, #0]
    d242:	b.w	d25c <_malloc_r>
    d246:	nop
    d248:	.word	0x200013f8

0000d24c <free>:
    d24c:	ldr	r3, [pc, #8]	; (d258 <free+0xc>)
    d24e:	mov	r1, r0
    d250:	ldr	r0, [r3, #0]
    d252:	b.w	d9d4 <_free_r>
    d256:	nop
    d258:	.word	0x200013f8

0000d25c <_malloc_r>:
    d25c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d260:	add.w	r5, r1, #11
    d264:	cmp	r5, #22
    d266:	sub	sp, #12
    d268:	mov	r6, r0
    d26a:	bls.w	d3ac <_malloc_r+0x150>
    d26e:	bics.w	r5, r5, #7
    d272:	bmi.w	d3f4 <_malloc_r+0x198>
    d276:	cmp	r1, r5
    d278:	bhi.w	d3f4 <_malloc_r+0x198>
    d27c:	bl	d868 <__malloc_lock>
    d280:	cmp.w	r5, #504	; 0x1f8
    d284:	bcc.w	d7c0 <_malloc_r+0x564>
    d288:	lsrs	r3, r5, #9
    d28a:	beq.w	d402 <_malloc_r+0x1a6>
    d28e:	cmp	r3, #4
    d290:	bhi.w	d59a <_malloc_r+0x33e>
    d294:	lsrs	r0, r5, #6
    d296:	add.w	lr, r0, #57	; 0x39
    d29a:	mov.w	r3, lr, lsl #1
    d29e:	adds	r0, #56	; 0x38
    d2a0:	ldr	r7, [pc, #784]	; (d5b4 <_malloc_r+0x358>)
    d2a2:	add.w	r3, r7, r3, lsl #2
    d2a6:	sub.w	r1, r3, #8
    d2aa:	ldr	r4, [r3, #4]
    d2ac:	cmp	r1, r4
    d2ae:	bne.n	d2c0 <_malloc_r+0x64>
    d2b0:	b.n	d40c <_malloc_r+0x1b0>
    d2b2:	cmp	r2, #0
    d2b4:	bge.w	d410 <_malloc_r+0x1b4>
    d2b8:	ldr	r4, [r4, #12]
    d2ba:	cmp	r1, r4
    d2bc:	beq.w	d40c <_malloc_r+0x1b0>
    d2c0:	ldr	r3, [r4, #4]
    d2c2:	bic.w	r3, r3, #3
    d2c6:	subs	r2, r3, r5
    d2c8:	cmp	r2, #15
    d2ca:	ble.n	d2b2 <_malloc_r+0x56>
    d2cc:	ldr	r1, [pc, #740]	; (d5b4 <_malloc_r+0x358>)
    d2ce:	ldr	r4, [r7, #16]
    d2d0:	add.w	lr, r1, #8
    d2d4:	cmp	r4, lr
    d2d6:	beq.w	d640 <_malloc_r+0x3e4>
    d2da:	ldr	r3, [r4, #4]
    d2dc:	bic.w	r3, r3, #3
    d2e0:	subs	r2, r3, r5
    d2e2:	cmp	r2, #15
    d2e4:	bgt.w	d61a <_malloc_r+0x3be>
    d2e8:	cmp	r2, #0
    d2ea:	str.w	lr, [r1, #20]
    d2ee:	str.w	lr, [r1, #16]
    d2f2:	bge.w	d432 <_malloc_r+0x1d6>
    d2f6:	cmp.w	r3, #512	; 0x200
    d2fa:	bcs.w	d5cc <_malloc_r+0x370>
    d2fe:	lsrs	r3, r3, #3
    d300:	add.w	ip, r3, #1
    d304:	movs	r2, #1
    d306:	asrs	r3, r3, #2
    d308:	lsl.w	r3, r2, r3
    d30c:	ldr	r2, [r1, #4]
    d30e:	ldr.w	r8, [r1, ip, lsl #3]
    d312:	str.w	r8, [r4, #8]
    d316:	add.w	r9, r1, ip, lsl #3
    d31a:	orrs	r2, r3
    d31c:	sub.w	r3, r9, #8
    d320:	str	r3, [r4, #12]
    d322:	str	r2, [r1, #4]
    d324:	str.w	r4, [r1, ip, lsl #3]
    d328:	str.w	r4, [r8, #12]
    d32c:	asrs	r3, r0, #2
    d32e:	movs	r4, #1
    d330:	lsls	r4, r3
    d332:	cmp	r4, r2
    d334:	bhi.w	d44c <_malloc_r+0x1f0>
    d338:	tst	r4, r2
    d33a:	bne.n	d34a <_malloc_r+0xee>
    d33c:	bic.w	r0, r0, #3
    d340:	lsls	r4, r4, #1
    d342:	tst	r4, r2
    d344:	add.w	r0, r0, #4
    d348:	beq.n	d340 <_malloc_r+0xe4>
    d34a:	add.w	r9, r7, r0, lsl #3
    d34e:	mov	ip, r9
    d350:	mov	r8, r0
    d352:	ldr.w	r1, [ip, #12]
    d356:	cmp	ip, r1
    d358:	bne.n	d36a <_malloc_r+0x10e>
    d35a:	b.n	d644 <_malloc_r+0x3e8>
    d35c:	cmp	r2, #0
    d35e:	bge.w	d664 <_malloc_r+0x408>
    d362:	ldr	r1, [r1, #12]
    d364:	cmp	ip, r1
    d366:	beq.w	d644 <_malloc_r+0x3e8>
    d36a:	ldr	r3, [r1, #4]
    d36c:	bic.w	r3, r3, #3
    d370:	subs	r2, r3, r5
    d372:	cmp	r2, #15
    d374:	ble.n	d35c <_malloc_r+0x100>
    d376:	mov	r4, r1
    d378:	ldr.w	ip, [r1, #12]
    d37c:	ldr.w	r8, [r4, #8]!
    d380:	adds	r3, r1, r5
    d382:	orr.w	r5, r5, #1
    d386:	str	r5, [r1, #4]
    d388:	orr.w	r1, r2, #1
    d38c:	str.w	ip, [r8, #12]
    d390:	mov	r0, r6
    d392:	str.w	r8, [ip, #8]
    d396:	str	r3, [r7, #20]
    d398:	str	r3, [r7, #16]
    d39a:	str.w	lr, [r3, #12]
    d39e:	str.w	lr, [r3, #8]
    d3a2:	str	r1, [r3, #4]
    d3a4:	str	r2, [r3, r2]
    d3a6:	bl	d86c <__malloc_unlock>
    d3aa:	b.n	d3ec <_malloc_r+0x190>
    d3ac:	cmp	r1, #16
    d3ae:	bhi.n	d3f4 <_malloc_r+0x198>
    d3b0:	bl	d868 <__malloc_lock>
    d3b4:	movs	r5, #16
    d3b6:	movs	r3, #6
    d3b8:	movs	r0, #2
    d3ba:	ldr	r7, [pc, #504]	; (d5b4 <_malloc_r+0x358>)
    d3bc:	add.w	r3, r7, r3, lsl #2
    d3c0:	sub.w	r2, r3, #8
    d3c4:	ldr	r4, [r3, #4]
    d3c6:	cmp	r4, r2
    d3c8:	beq.w	d656 <_malloc_r+0x3fa>
    d3cc:	ldr	r3, [r4, #4]
    d3ce:	ldr	r1, [r4, #12]
    d3d0:	ldr	r5, [r4, #8]
    d3d2:	bic.w	r3, r3, #3
    d3d6:	add	r3, r4
    d3d8:	mov	r0, r6
    d3da:	ldr	r2, [r3, #4]
    d3dc:	str	r1, [r5, #12]
    d3de:	orr.w	r2, r2, #1
    d3e2:	str	r5, [r1, #8]
    d3e4:	str	r2, [r3, #4]
    d3e6:	bl	d86c <__malloc_unlock>
    d3ea:	adds	r4, #8
    d3ec:	mov	r0, r4
    d3ee:	add	sp, #12
    d3f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3f4:	movs	r4, #0
    d3f6:	movs	r3, #12
    d3f8:	mov	r0, r4
    d3fa:	str	r3, [r6, #0]
    d3fc:	add	sp, #12
    d3fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d402:	movs	r3, #128	; 0x80
    d404:	mov.w	lr, #64	; 0x40
    d408:	movs	r0, #63	; 0x3f
    d40a:	b.n	d2a0 <_malloc_r+0x44>
    d40c:	mov	r0, lr
    d40e:	b.n	d2cc <_malloc_r+0x70>
    d410:	add	r3, r4
    d412:	ldr	r1, [r4, #12]
    d414:	ldr	r2, [r3, #4]
    d416:	ldr	r5, [r4, #8]
    d418:	orr.w	r2, r2, #1
    d41c:	str	r1, [r5, #12]
    d41e:	mov	r0, r6
    d420:	str	r5, [r1, #8]
    d422:	str	r2, [r3, #4]
    d424:	bl	d86c <__malloc_unlock>
    d428:	adds	r4, #8
    d42a:	mov	r0, r4
    d42c:	add	sp, #12
    d42e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d432:	add	r3, r4
    d434:	mov	r0, r6
    d436:	ldr	r2, [r3, #4]
    d438:	orr.w	r2, r2, #1
    d43c:	str	r2, [r3, #4]
    d43e:	bl	d86c <__malloc_unlock>
    d442:	adds	r4, #8
    d444:	mov	r0, r4
    d446:	add	sp, #12
    d448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d44c:	ldr	r4, [r7, #8]
    d44e:	ldr	r3, [r4, #4]
    d450:	bic.w	r8, r3, #3
    d454:	cmp	r8, r5
    d456:	bcc.n	d462 <_malloc_r+0x206>
    d458:	rsb	r3, r5, r8
    d45c:	cmp	r3, #15
    d45e:	bgt.w	d57a <_malloc_r+0x31e>
    d462:	ldr	r3, [pc, #340]	; (d5b8 <_malloc_r+0x35c>)
    d464:	ldr.w	r9, [pc, #352]	; d5c8 <_malloc_r+0x36c>
    d468:	ldr	r2, [r3, #0]
    d46a:	ldr.w	r3, [r9]
    d46e:	adds	r3, #1
    d470:	add	r2, r5
    d472:	add.w	sl, r4, r8
    d476:	beq.w	d73a <_malloc_r+0x4de>
    d47a:	add.w	r2, r2, #4096	; 0x1000
    d47e:	adds	r2, #15
    d480:	bic.w	r2, r2, #4080	; 0xff0
    d484:	bic.w	r2, r2, #15
    d488:	mov	r1, r2
    d48a:	mov	r0, r6
    d48c:	str	r2, [sp, #4]
    d48e:	bl	d870 <_sbrk_r>
    d492:	cmp.w	r0, #4294967295
    d496:	mov	fp, r0
    d498:	ldr	r2, [sp, #4]
    d49a:	beq.w	d74e <_malloc_r+0x4f2>
    d49e:	cmp	sl, r0
    d4a0:	bhi.w	d69c <_malloc_r+0x440>
    d4a4:	ldr	r3, [pc, #276]	; (d5bc <_malloc_r+0x360>)
    d4a6:	ldr	r1, [r3, #0]
    d4a8:	cmp	sl, fp
    d4aa:	add	r1, r2
    d4ac:	str	r1, [r3, #0]
    d4ae:	beq.w	d758 <_malloc_r+0x4fc>
    d4b2:	ldr.w	r0, [r9]
    d4b6:	ldr.w	lr, [pc, #272]	; d5c8 <_malloc_r+0x36c>
    d4ba:	adds	r0, #1
    d4bc:	ittet	ne
    d4be:	rsbne	sl, sl, fp
    d4c2:	addne	r1, sl
    d4c4:	streq.w	fp, [lr]
    d4c8:	strne	r1, [r3, #0]
    d4ca:	ands.w	r1, fp, #7
    d4ce:	beq.w	d700 <_malloc_r+0x4a4>
    d4d2:	rsb	r0, r1, #8
    d4d6:	rsb	r1, r1, #4096	; 0x1000
    d4da:	add	fp, r0
    d4dc:	adds	r1, #8
    d4de:	add	r2, fp
    d4e0:	ubfx	r2, r2, #0, #12
    d4e4:	rsb	r9, r2, r1
    d4e8:	mov	r1, r9
    d4ea:	mov	r0, r6
    d4ec:	str	r3, [sp, #4]
    d4ee:	bl	d870 <_sbrk_r>
    d4f2:	adds	r3, r0, #1
    d4f4:	ldr	r3, [sp, #4]
    d4f6:	beq.w	d778 <_malloc_r+0x51c>
    d4fa:	rsb	r2, fp, r0
    d4fe:	add	r2, r9
    d500:	orr.w	r2, r2, #1
    d504:	ldr	r1, [r3, #0]
    d506:	str.w	fp, [r7, #8]
    d50a:	add	r1, r9
    d50c:	cmp	r4, r7
    d50e:	str.w	r2, [fp, #4]
    d512:	str	r1, [r3, #0]
    d514:	ldr.w	r9, [pc, #164]	; d5bc <_malloc_r+0x360>
    d518:	beq.n	d548 <_malloc_r+0x2ec>
    d51a:	cmp.w	r8, #15
    d51e:	bls.w	d71c <_malloc_r+0x4c0>
    d522:	ldr	r2, [r4, #4]
    d524:	sub.w	r3, r8, #12
    d528:	bic.w	r3, r3, #7
    d52c:	adds	r0, r4, r3
    d52e:	and.w	r2, r2, #1
    d532:	mov.w	lr, #5
    d536:	orrs	r2, r3
    d538:	cmp	r3, #15
    d53a:	str	r2, [r4, #4]
    d53c:	str.w	lr, [r0, #4]
    d540:	str.w	lr, [r0, #8]
    d544:	bhi.w	d780 <_malloc_r+0x524>
    d548:	ldr	r3, [pc, #116]	; (d5c0 <_malloc_r+0x364>)
    d54a:	ldr	r4, [r7, #8]
    d54c:	ldr	r2, [r3, #0]
    d54e:	cmp	r1, r2
    d550:	it	hi
    d552:	strhi	r1, [r3, #0]
    d554:	ldr	r3, [pc, #108]	; (d5c4 <_malloc_r+0x368>)
    d556:	ldr	r2, [r3, #0]
    d558:	cmp	r1, r2
    d55a:	ldr	r2, [r4, #4]
    d55c:	it	hi
    d55e:	strhi	r1, [r3, #0]
    d560:	bic.w	r2, r2, #3
    d564:	cmp	r5, r2
    d566:	sub.w	r3, r2, r5
    d56a:	bhi.n	d570 <_malloc_r+0x314>
    d56c:	cmp	r3, #15
    d56e:	bgt.n	d57a <_malloc_r+0x31e>
    d570:	mov	r0, r6
    d572:	bl	d86c <__malloc_unlock>
    d576:	movs	r4, #0
    d578:	b.n	d3ec <_malloc_r+0x190>
    d57a:	adds	r2, r4, r5
    d57c:	orr.w	r3, r3, #1
    d580:	orr.w	r5, r5, #1
    d584:	str	r5, [r4, #4]
    d586:	mov	r0, r6
    d588:	str	r2, [r7, #8]
    d58a:	str	r3, [r2, #4]
    d58c:	bl	d86c <__malloc_unlock>
    d590:	adds	r4, #8
    d592:	mov	r0, r4
    d594:	add	sp, #12
    d596:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d59a:	cmp	r3, #20
    d59c:	bls.n	d682 <_malloc_r+0x426>
    d59e:	cmp	r3, #84	; 0x54
    d5a0:	bhi.w	d6ec <_malloc_r+0x490>
    d5a4:	lsrs	r0, r5, #12
    d5a6:	add.w	lr, r0, #111	; 0x6f
    d5aa:	mov.w	r3, lr, lsl #1
    d5ae:	adds	r0, #110	; 0x6e
    d5b0:	b.n	d2a0 <_malloc_r+0x44>
    d5b2:	nop
    d5b4:	.word	0x200013fc
    d5b8:	.word	0x20015d38
    d5bc:	.word	0x20015d3c
    d5c0:	.word	0x20015d34
    d5c4:	.word	0x20015d30
    d5c8:	.word	0x20001808
    d5cc:	lsrs	r2, r3, #9
    d5ce:	cmp	r2, #4
    d5d0:	bls.n	d690 <_malloc_r+0x434>
    d5d2:	cmp	r2, #20
    d5d4:	bhi.w	d73e <_malloc_r+0x4e2>
    d5d8:	add.w	r1, r2, #92	; 0x5c
    d5dc:	lsls	r1, r1, #1
    d5de:	adds	r2, #91	; 0x5b
    d5e0:	add.w	ip, r7, r1, lsl #2
    d5e4:	ldr.w	r1, [r7, r1, lsl #2]
    d5e8:	ldr.w	r8, [pc, #476]	; d7c8 <_malloc_r+0x56c>
    d5ec:	sub.w	ip, ip, #8
    d5f0:	cmp	ip, r1
    d5f2:	beq.w	d706 <_malloc_r+0x4aa>
    d5f6:	ldr	r2, [r1, #4]
    d5f8:	bic.w	r2, r2, #3
    d5fc:	cmp	r3, r2
    d5fe:	bcs.n	d606 <_malloc_r+0x3aa>
    d600:	ldr	r1, [r1, #8]
    d602:	cmp	ip, r1
    d604:	bne.n	d5f6 <_malloc_r+0x39a>
    d606:	ldr.w	ip, [r1, #12]
    d60a:	ldr	r2, [r7, #4]
    d60c:	str.w	ip, [r4, #12]
    d610:	str	r1, [r4, #8]
    d612:	str.w	r4, [ip, #8]
    d616:	str	r4, [r1, #12]
    d618:	b.n	d32c <_malloc_r+0xd0>
    d61a:	adds	r3, r4, r5
    d61c:	orr.w	r7, r2, #1
    d620:	orr.w	r5, r5, #1
    d624:	str	r5, [r4, #4]
    d626:	mov	r0, r6
    d628:	str	r3, [r1, #20]
    d62a:	str	r3, [r1, #16]
    d62c:	str.w	lr, [r3, #12]
    d630:	str.w	lr, [r3, #8]
    d634:	str	r7, [r3, #4]
    d636:	str	r2, [r3, r2]
    d638:	adds	r4, #8
    d63a:	bl	d86c <__malloc_unlock>
    d63e:	b.n	d3ec <_malloc_r+0x190>
    d640:	ldr	r2, [r1, #4]
    d642:	b.n	d32c <_malloc_r+0xd0>
    d644:	add.w	r8, r8, #1
    d648:	tst.w	r8, #3
    d64c:	add.w	ip, ip, #8
    d650:	bne.w	d352 <_malloc_r+0xf6>
    d654:	b.n	d6b8 <_malloc_r+0x45c>
    d656:	ldr	r4, [r3, #12]
    d658:	cmp	r3, r4
    d65a:	it	eq
    d65c:	addeq	r0, #2
    d65e:	beq.w	d2cc <_malloc_r+0x70>
    d662:	b.n	d3cc <_malloc_r+0x170>
    d664:	add	r3, r1
    d666:	mov	r4, r1
    d668:	ldr	r2, [r3, #4]
    d66a:	ldr	r1, [r1, #12]
    d66c:	ldr.w	r5, [r4, #8]!
    d670:	orr.w	r2, r2, #1
    d674:	str	r2, [r3, #4]
    d676:	mov	r0, r6
    d678:	str	r1, [r5, #12]
    d67a:	str	r5, [r1, #8]
    d67c:	bl	d86c <__malloc_unlock>
    d680:	b.n	d3ec <_malloc_r+0x190>
    d682:	add.w	lr, r3, #92	; 0x5c
    d686:	add.w	r0, r3, #91	; 0x5b
    d68a:	mov.w	r3, lr, lsl #1
    d68e:	b.n	d2a0 <_malloc_r+0x44>
    d690:	lsrs	r2, r3, #6
    d692:	add.w	r1, r2, #57	; 0x39
    d696:	lsls	r1, r1, #1
    d698:	adds	r2, #56	; 0x38
    d69a:	b.n	d5e0 <_malloc_r+0x384>
    d69c:	cmp	r4, r7
    d69e:	ldr	r3, [pc, #296]	; (d7c8 <_malloc_r+0x56c>)
    d6a0:	beq.w	d4a4 <_malloc_r+0x248>
    d6a4:	ldr	r4, [r3, #8]
    d6a6:	ldr	r2, [r4, #4]
    d6a8:	bic.w	r2, r2, #3
    d6ac:	b.n	d564 <_malloc_r+0x308>
    d6ae:	ldr.w	r3, [r9], #-8
    d6b2:	cmp	r9, r3
    d6b4:	bne.w	d7bc <_malloc_r+0x560>
    d6b8:	tst.w	r0, #3
    d6bc:	add.w	r0, r0, #4294967295
    d6c0:	bne.n	d6ae <_malloc_r+0x452>
    d6c2:	ldr	r3, [r7, #4]
    d6c4:	bic.w	r3, r3, r4
    d6c8:	str	r3, [r7, #4]
    d6ca:	lsls	r4, r4, #1
    d6cc:	cmp	r4, r3
    d6ce:	bhi.w	d44c <_malloc_r+0x1f0>
    d6d2:	cmp	r4, #0
    d6d4:	beq.w	d44c <_malloc_r+0x1f0>
    d6d8:	tst	r4, r3
    d6da:	mov	r0, r8
    d6dc:	bne.w	d34a <_malloc_r+0xee>
    d6e0:	lsls	r4, r4, #1
    d6e2:	tst	r4, r3
    d6e4:	add.w	r0, r0, #4
    d6e8:	beq.n	d6e0 <_malloc_r+0x484>
    d6ea:	b.n	d34a <_malloc_r+0xee>
    d6ec:	cmp.w	r3, #340	; 0x154
    d6f0:	bhi.n	d724 <_malloc_r+0x4c8>
    d6f2:	lsrs	r0, r5, #15
    d6f4:	add.w	lr, r0, #120	; 0x78
    d6f8:	mov.w	r3, lr, lsl #1
    d6fc:	adds	r0, #119	; 0x77
    d6fe:	b.n	d2a0 <_malloc_r+0x44>
    d700:	mov.w	r1, #4096	; 0x1000
    d704:	b.n	d4de <_malloc_r+0x282>
    d706:	movs	r1, #1
    d708:	ldr.w	r3, [r8, #4]
    d70c:	asrs	r2, r2, #2
    d70e:	lsl.w	r2, r1, r2
    d712:	orrs	r2, r3
    d714:	str.w	r2, [r8, #4]
    d718:	mov	r1, ip
    d71a:	b.n	d60c <_malloc_r+0x3b0>
    d71c:	movs	r3, #1
    d71e:	str.w	r3, [fp, #4]
    d722:	b.n	d570 <_malloc_r+0x314>
    d724:	movw	r2, #1364	; 0x554
    d728:	cmp	r3, r2
    d72a:	bhi.n	d76e <_malloc_r+0x512>
    d72c:	lsrs	r0, r5, #18
    d72e:	add.w	lr, r0, #125	; 0x7d
    d732:	mov.w	r3, lr, lsl #1
    d736:	adds	r0, #124	; 0x7c
    d738:	b.n	d2a0 <_malloc_r+0x44>
    d73a:	adds	r2, #16
    d73c:	b.n	d488 <_malloc_r+0x22c>
    d73e:	cmp	r2, #84	; 0x54
    d740:	bhi.n	d790 <_malloc_r+0x534>
    d742:	lsrs	r2, r3, #12
    d744:	add.w	r1, r2, #111	; 0x6f
    d748:	lsls	r1, r1, #1
    d74a:	adds	r2, #110	; 0x6e
    d74c:	b.n	d5e0 <_malloc_r+0x384>
    d74e:	ldr	r4, [r7, #8]
    d750:	ldr	r2, [r4, #4]
    d752:	bic.w	r2, r2, #3
    d756:	b.n	d564 <_malloc_r+0x308>
    d758:	ubfx	r0, sl, #0, #12
    d75c:	cmp	r0, #0
    d75e:	bne.w	d4b2 <_malloc_r+0x256>
    d762:	add	r2, r8
    d764:	ldr	r3, [r7, #8]
    d766:	orr.w	r2, r2, #1
    d76a:	str	r2, [r3, #4]
    d76c:	b.n	d548 <_malloc_r+0x2ec>
    d76e:	movs	r3, #254	; 0xfe
    d770:	mov.w	lr, #127	; 0x7f
    d774:	movs	r0, #126	; 0x7e
    d776:	b.n	d2a0 <_malloc_r+0x44>
    d778:	movs	r2, #1
    d77a:	mov.w	r9, #0
    d77e:	b.n	d504 <_malloc_r+0x2a8>
    d780:	add.w	r1, r4, #8
    d784:	mov	r0, r6
    d786:	bl	d9d4 <_free_r>
    d78a:	ldr.w	r1, [r9]
    d78e:	b.n	d548 <_malloc_r+0x2ec>
    d790:	cmp.w	r2, #340	; 0x154
    d794:	bhi.n	d7a2 <_malloc_r+0x546>
    d796:	lsrs	r2, r3, #15
    d798:	add.w	r1, r2, #120	; 0x78
    d79c:	lsls	r1, r1, #1
    d79e:	adds	r2, #119	; 0x77
    d7a0:	b.n	d5e0 <_malloc_r+0x384>
    d7a2:	movw	r1, #1364	; 0x554
    d7a6:	cmp	r2, r1
    d7a8:	bhi.n	d7b6 <_malloc_r+0x55a>
    d7aa:	lsrs	r2, r3, #18
    d7ac:	add.w	r1, r2, #125	; 0x7d
    d7b0:	lsls	r1, r1, #1
    d7b2:	adds	r2, #124	; 0x7c
    d7b4:	b.n	d5e0 <_malloc_r+0x384>
    d7b6:	movs	r1, #254	; 0xfe
    d7b8:	movs	r2, #126	; 0x7e
    d7ba:	b.n	d5e0 <_malloc_r+0x384>
    d7bc:	ldr	r3, [r7, #4]
    d7be:	b.n	d6ca <_malloc_r+0x46e>
    d7c0:	lsrs	r0, r5, #3
    d7c2:	adds	r3, r0, #1
    d7c4:	lsls	r3, r3, #1
    d7c6:	b.n	d3ba <_malloc_r+0x15e>
    d7c8:	.word	0x200013fc

0000d7cc <memset>:
    d7cc:	push	{r4, r5, r6}
    d7ce:	lsls	r4, r0, #30
    d7d0:	beq.n	d860 <memset+0x94>
    d7d2:	subs	r4, r2, #1
    d7d4:	cmp	r2, #0
    d7d6:	beq.n	d85c <memset+0x90>
    d7d8:	uxtb	r5, r1
    d7da:	mov	r3, r0
    d7dc:	b.n	d7e4 <memset+0x18>
    d7de:	subs	r2, r4, #1
    d7e0:	cbz	r4, d85c <memset+0x90>
    d7e2:	mov	r4, r2
    d7e4:	strb.w	r5, [r3], #1
    d7e8:	lsls	r2, r3, #30
    d7ea:	bne.n	d7de <memset+0x12>
    d7ec:	cmp	r4, #3
    d7ee:	bls.n	d84e <memset+0x82>
    d7f0:	uxtb	r5, r1
    d7f2:	orr.w	r5, r5, r5, lsl #8
    d7f6:	cmp	r4, #15
    d7f8:	orr.w	r5, r5, r5, lsl #16
    d7fc:	bls.n	d832 <memset+0x66>
    d7fe:	add.w	r2, r3, #16
    d802:	mov	r6, r4
    d804:	subs	r6, #16
    d806:	cmp	r6, #15
    d808:	str.w	r5, [r2, #-16]
    d80c:	str.w	r5, [r2, #-12]
    d810:	str.w	r5, [r2, #-8]
    d814:	str.w	r5, [r2, #-4]
    d818:	add.w	r2, r2, #16
    d81c:	bhi.n	d804 <memset+0x38>
    d81e:	sub.w	r2, r4, #16
    d822:	bic.w	r2, r2, #15
    d826:	and.w	r4, r4, #15
    d82a:	adds	r2, #16
    d82c:	cmp	r4, #3
    d82e:	add	r3, r2
    d830:	bls.n	d84e <memset+0x82>
    d832:	mov	r6, r3
    d834:	mov	r2, r4
    d836:	subs	r2, #4
    d838:	cmp	r2, #3
    d83a:	str.w	r5, [r6], #4
    d83e:	bhi.n	d836 <memset+0x6a>
    d840:	subs	r2, r4, #4
    d842:	bic.w	r2, r2, #3
    d846:	adds	r2, #4
    d848:	add	r3, r2
    d84a:	and.w	r4, r4, #3
    d84e:	cbz	r4, d85c <memset+0x90>
    d850:	uxtb	r1, r1
    d852:	add	r4, r3
    d854:	strb.w	r1, [r3], #1
    d858:	cmp	r3, r4
    d85a:	bne.n	d854 <memset+0x88>
    d85c:	pop	{r4, r5, r6}
    d85e:	bx	lr
    d860:	mov	r4, r2
    d862:	mov	r3, r0
    d864:	b.n	d7ec <memset+0x20>
    d866:	nop

0000d868 <__malloc_lock>:
    d868:	bx	lr
    d86a:	nop

0000d86c <__malloc_unlock>:
    d86c:	bx	lr
    d86e:	nop

0000d870 <_sbrk_r>:
    d870:	push	{r3, r4, r5, lr}
    d872:	ldr	r4, [pc, #28]	; (d890 <_sbrk_r+0x20>)
    d874:	movs	r3, #0
    d876:	mov	r5, r0
    d878:	mov	r0, r1
    d87a:	str	r3, [r4, #0]
    d87c:	bl	c008 <_sbrk>
    d880:	adds	r3, r0, #1
    d882:	beq.n	d886 <_sbrk_r+0x16>
    d884:	pop	{r3, r4, r5, pc}
    d886:	ldr	r3, [r4, #0]
    d888:	cmp	r3, #0
    d88a:	beq.n	d884 <_sbrk_r+0x14>
    d88c:	str	r3, [r5, #0]
    d88e:	pop	{r3, r4, r5, pc}
    d890:	.word	0x200176c0

0000d894 <__register_exitproc>:
    d894:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d898:	ldr	r4, [pc, #148]	; (d930 <__register_exitproc+0x9c>)
    d89a:	ldr	r5, [r4, #0]
    d89c:	ldr.w	r4, [r5, #328]	; 0x148
    d8a0:	mov	r6, r0
    d8a2:	mov	r8, r1
    d8a4:	mov	sl, r2
    d8a6:	mov	r9, r3
    d8a8:	cbz	r4, d91c <__register_exitproc+0x88>
    d8aa:	ldr	r0, [r4, #4]
    d8ac:	cmp	r0, #31
    d8ae:	bgt.n	d8e0 <__register_exitproc+0x4c>
    d8b0:	adds	r3, r0, #1
    d8b2:	cbz	r6, d8d2 <__register_exitproc+0x3e>
    d8b4:	add.w	r5, r4, r0, lsl #2
    d8b8:	movs	r2, #1
    d8ba:	str.w	sl, [r5, #136]	; 0x88
    d8be:	ldr.w	r1, [r4, #392]	; 0x188
    d8c2:	lsls	r2, r0
    d8c4:	orrs	r1, r2
    d8c6:	cmp	r6, #2
    d8c8:	str.w	r1, [r4, #392]	; 0x188
    d8cc:	str.w	r9, [r5, #264]	; 0x108
    d8d0:	beq.n	d910 <__register_exitproc+0x7c>
    d8d2:	adds	r0, #2
    d8d4:	str	r3, [r4, #4]
    d8d6:	str.w	r8, [r4, r0, lsl #2]
    d8da:	movs	r0, #0
    d8dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8e0:	ldr	r3, [pc, #80]	; (d934 <__register_exitproc+0xa0>)
    d8e2:	cbz	r3, d926 <__register_exitproc+0x92>
    d8e4:	mov.w	r0, #400	; 0x190
    d8e8:	bl	d23c <malloc>
    d8ec:	mov	r4, r0
    d8ee:	cbz	r0, d926 <__register_exitproc+0x92>
    d8f0:	ldr.w	r3, [r5, #328]	; 0x148
    d8f4:	movs	r7, #0
    d8f6:	stmia.w	r0, {r3, r7}
    d8fa:	str.w	r4, [r5, #328]	; 0x148
    d8fe:	mov	r0, r7
    d900:	movs	r3, #1
    d902:	str.w	r7, [r4, #392]	; 0x188
    d906:	str.w	r7, [r4, #396]	; 0x18c
    d90a:	cmp	r6, #0
    d90c:	beq.n	d8d2 <__register_exitproc+0x3e>
    d90e:	b.n	d8b4 <__register_exitproc+0x20>
    d910:	ldr.w	r1, [r4, #396]	; 0x18c
    d914:	orrs	r2, r1
    d916:	str.w	r2, [r4, #396]	; 0x18c
    d91a:	b.n	d8d2 <__register_exitproc+0x3e>
    d91c:	add.w	r4, r5, #332	; 0x14c
    d920:	str.w	r4, [r5, #328]	; 0x148
    d924:	b.n	d8aa <__register_exitproc+0x16>
    d926:	mov.w	r0, #4294967295
    d92a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d92e:	nop
    d930:	.word	0x200009b0
    d934:	.word	0x0000d23d

0000d938 <_malloc_trim_r>:
    d938:	push	{r3, r4, r5, r6, r7, lr}
    d93a:	ldr	r7, [pc, #140]	; (d9c8 <_malloc_trim_r+0x90>)
    d93c:	mov	r4, r1
    d93e:	mov	r6, r0
    d940:	bl	d868 <__malloc_lock>
    d944:	ldr	r3, [r7, #8]
    d946:	ldr	r5, [r3, #4]
    d948:	bic.w	r5, r5, #3
    d94c:	subs	r1, r5, r4
    d94e:	addw	r1, r1, #4079	; 0xfef
    d952:	bic.w	r1, r1, #4080	; 0xff0
    d956:	bic.w	r1, r1, #15
    d95a:	sub.w	r4, r1, #4096	; 0x1000
    d95e:	cmp.w	r4, #4096	; 0x1000
    d962:	blt.n	d974 <_malloc_trim_r+0x3c>
    d964:	movs	r1, #0
    d966:	mov	r0, r6
    d968:	bl	d870 <_sbrk_r>
    d96c:	ldr	r3, [r7, #8]
    d96e:	add	r3, r5
    d970:	cmp	r0, r3
    d972:	beq.n	d97e <_malloc_trim_r+0x46>
    d974:	mov	r0, r6
    d976:	bl	d86c <__malloc_unlock>
    d97a:	movs	r0, #0
    d97c:	pop	{r3, r4, r5, r6, r7, pc}
    d97e:	negs	r1, r4
    d980:	mov	r0, r6
    d982:	bl	d870 <_sbrk_r>
    d986:	adds	r0, #1
    d988:	beq.n	d9a6 <_malloc_trim_r+0x6e>
    d98a:	ldr	r3, [pc, #64]	; (d9cc <_malloc_trim_r+0x94>)
    d98c:	ldr	r2, [r7, #8]
    d98e:	ldr	r1, [r3, #0]
    d990:	subs	r5, r5, r4
    d992:	orr.w	r5, r5, #1
    d996:	mov	r0, r6
    d998:	subs	r1, r1, r4
    d99a:	str	r5, [r2, #4]
    d99c:	str	r1, [r3, #0]
    d99e:	bl	d86c <__malloc_unlock>
    d9a2:	movs	r0, #1
    d9a4:	pop	{r3, r4, r5, r6, r7, pc}
    d9a6:	movs	r1, #0
    d9a8:	mov	r0, r6
    d9aa:	bl	d870 <_sbrk_r>
    d9ae:	ldr	r2, [r7, #8]
    d9b0:	subs	r3, r0, r2
    d9b2:	cmp	r3, #15
    d9b4:	ble.n	d974 <_malloc_trim_r+0x3c>
    d9b6:	ldr	r4, [pc, #24]	; (d9d0 <_malloc_trim_r+0x98>)
    d9b8:	ldr	r1, [pc, #16]	; (d9cc <_malloc_trim_r+0x94>)
    d9ba:	ldr	r4, [r4, #0]
    d9bc:	orr.w	r3, r3, #1
    d9c0:	subs	r0, r0, r4
    d9c2:	str	r3, [r2, #4]
    d9c4:	str	r0, [r1, #0]
    d9c6:	b.n	d974 <_malloc_trim_r+0x3c>
    d9c8:	.word	0x200013fc
    d9cc:	.word	0x20015d3c
    d9d0:	.word	0x20001808

0000d9d4 <_free_r>:
    d9d4:	cmp	r1, #0
    d9d6:	beq.n	da64 <_free_r+0x90>
    d9d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9dc:	mov	r5, r1
    d9de:	mov	r8, r0
    d9e0:	bl	d868 <__malloc_lock>
    d9e4:	ldr.w	r7, [r5, #-4]
    d9e8:	ldr	r1, [pc, #424]	; (db94 <_free_r+0x1c0>)
    d9ea:	bic.w	r3, r7, #1
    d9ee:	sub.w	r4, r5, #8
    d9f2:	adds	r2, r4, r3
    d9f4:	ldr	r6, [r1, #8]
    d9f6:	ldr	r0, [r2, #4]
    d9f8:	cmp	r2, r6
    d9fa:	bic.w	r0, r0, #3
    d9fe:	beq.n	dac6 <_free_r+0xf2>
    da00:	lsls	r6, r7, #31
    da02:	str	r0, [r2, #4]
    da04:	bmi.n	da1e <_free_r+0x4a>
    da06:	ldr.w	r7, [r5, #-8]
    da0a:	subs	r4, r4, r7
    da0c:	add.w	lr, r1, #8
    da10:	ldr	r5, [r4, #8]
    da12:	cmp	r5, lr
    da14:	add	r3, r7
    da16:	beq.n	daf8 <_free_r+0x124>
    da18:	ldr	r7, [r4, #12]
    da1a:	str	r7, [r5, #12]
    da1c:	str	r5, [r7, #8]
    da1e:	adds	r5, r2, r0
    da20:	ldr	r5, [r5, #4]
    da22:	lsls	r5, r5, #31
    da24:	bpl.n	daac <_free_r+0xd8>
    da26:	orr.w	r2, r3, #1
    da2a:	str	r2, [r4, #4]
    da2c:	str	r3, [r4, r3]
    da2e:	cmp.w	r3, #512	; 0x200
    da32:	bcs.n	da66 <_free_r+0x92>
    da34:	lsrs	r3, r3, #3
    da36:	adds	r2, r3, #1
    da38:	ldr	r5, [r1, #4]
    da3a:	ldr.w	r7, [r1, r2, lsl #3]
    da3e:	str	r7, [r4, #8]
    da40:	movs	r0, #1
    da42:	asrs	r3, r3, #2
    da44:	lsl.w	r3, r0, r3
    da48:	add.w	r0, r1, r2, lsl #3
    da4c:	orrs	r5, r3
    da4e:	subs	r0, #8
    da50:	str	r0, [r4, #12]
    da52:	str	r5, [r1, #4]
    da54:	str.w	r4, [r1, r2, lsl #3]
    da58:	str	r4, [r7, #12]
    da5a:	mov	r0, r8
    da5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da60:	b.w	d86c <__malloc_unlock>
    da64:	bx	lr
    da66:	lsrs	r2, r3, #9
    da68:	cmp	r2, #4
    da6a:	bhi.n	db14 <_free_r+0x140>
    da6c:	lsrs	r2, r3, #6
    da6e:	add.w	r7, r2, #57	; 0x39
    da72:	lsls	r7, r7, #1
    da74:	add.w	r5, r2, #56	; 0x38
    da78:	add.w	r0, r1, r7, lsl #2
    da7c:	ldr.w	r2, [r1, r7, lsl #2]
    da80:	ldr	r1, [pc, #272]	; (db94 <_free_r+0x1c0>)
    da82:	subs	r0, #8
    da84:	cmp	r0, r2
    da86:	beq.n	db24 <_free_r+0x150>
    da88:	ldr	r1, [r2, #4]
    da8a:	bic.w	r1, r1, #3
    da8e:	cmp	r3, r1
    da90:	bcs.n	da98 <_free_r+0xc4>
    da92:	ldr	r2, [r2, #8]
    da94:	cmp	r0, r2
    da96:	bne.n	da88 <_free_r+0xb4>
    da98:	ldr	r0, [r2, #12]
    da9a:	str	r0, [r4, #12]
    da9c:	str	r2, [r4, #8]
    da9e:	str	r4, [r0, #8]
    daa0:	str	r4, [r2, #12]
    daa2:	mov	r0, r8
    daa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    daa8:	b.w	d86c <__malloc_unlock>
    daac:	ldr	r5, [r2, #8]
    daae:	ldr	r7, [pc, #232]	; (db98 <_free_r+0x1c4>)
    dab0:	cmp	r5, r7
    dab2:	add	r3, r0
    dab4:	beq.n	db36 <_free_r+0x162>
    dab6:	ldr	r0, [r2, #12]
    dab8:	str	r0, [r5, #12]
    daba:	orr.w	r2, r3, #1
    dabe:	str	r5, [r0, #8]
    dac0:	str	r2, [r4, #4]
    dac2:	str	r3, [r4, r3]
    dac4:	b.n	da2e <_free_r+0x5a>
    dac6:	lsls	r7, r7, #31
    dac8:	add	r3, r0
    daca:	bmi.n	dadc <_free_r+0x108>
    dacc:	ldr.w	r2, [r5, #-8]
    dad0:	subs	r4, r4, r2
    dad2:	add	r3, r2
    dad4:	ldr	r0, [r4, #8]
    dad6:	ldr	r2, [r4, #12]
    dad8:	str	r2, [r0, #12]
    dada:	str	r0, [r2, #8]
    dadc:	ldr	r2, [pc, #188]	; (db9c <_free_r+0x1c8>)
    dade:	ldr	r2, [r2, #0]
    dae0:	orr.w	r0, r3, #1
    dae4:	cmp	r3, r2
    dae6:	str	r0, [r4, #4]
    dae8:	str	r4, [r1, #8]
    daea:	bcc.n	da5a <_free_r+0x86>
    daec:	ldr	r3, [pc, #176]	; (dba0 <_free_r+0x1cc>)
    daee:	mov	r0, r8
    daf0:	ldr	r1, [r3, #0]
    daf2:	bl	d938 <_malloc_trim_r>
    daf6:	b.n	da5a <_free_r+0x86>
    daf8:	adds	r1, r2, r0
    dafa:	ldr	r1, [r1, #4]
    dafc:	lsls	r1, r1, #31
    dafe:	bmi.n	db8a <_free_r+0x1b6>
    db00:	ldr	r1, [r2, #8]
    db02:	ldr	r2, [r2, #12]
    db04:	str	r2, [r1, #12]
    db06:	add	r3, r0
    db08:	orr.w	r0, r3, #1
    db0c:	str	r1, [r2, #8]
    db0e:	str	r0, [r4, #4]
    db10:	str	r3, [r4, r3]
    db12:	b.n	da5a <_free_r+0x86>
    db14:	cmp	r2, #20
    db16:	bhi.n	db48 <_free_r+0x174>
    db18:	add.w	r7, r2, #92	; 0x5c
    db1c:	lsls	r7, r7, #1
    db1e:	add.w	r5, r2, #91	; 0x5b
    db22:	b.n	da78 <_free_r+0xa4>
    db24:	asrs	r2, r5, #2
    db26:	ldr	r3, [r1, #4]
    db28:	movs	r5, #1
    db2a:	lsl.w	r2, r5, r2
    db2e:	orrs	r3, r2
    db30:	str	r3, [r1, #4]
    db32:	mov	r2, r0
    db34:	b.n	da9a <_free_r+0xc6>
    db36:	orr.w	r2, r3, #1
    db3a:	str	r4, [r1, #20]
    db3c:	str	r4, [r1, #16]
    db3e:	str	r5, [r4, #12]
    db40:	str	r5, [r4, #8]
    db42:	str	r2, [r4, #4]
    db44:	str	r3, [r4, r3]
    db46:	b.n	da5a <_free_r+0x86>
    db48:	cmp	r2, #84	; 0x54
    db4a:	bhi.n	db5a <_free_r+0x186>
    db4c:	lsrs	r2, r3, #12
    db4e:	add.w	r7, r2, #111	; 0x6f
    db52:	lsls	r7, r7, #1
    db54:	add.w	r5, r2, #110	; 0x6e
    db58:	b.n	da78 <_free_r+0xa4>
    db5a:	cmp.w	r2, #340	; 0x154
    db5e:	bhi.n	db6e <_free_r+0x19a>
    db60:	lsrs	r2, r3, #15
    db62:	add.w	r7, r2, #120	; 0x78
    db66:	lsls	r7, r7, #1
    db68:	add.w	r5, r2, #119	; 0x77
    db6c:	b.n	da78 <_free_r+0xa4>
    db6e:	movw	r0, #1364	; 0x554
    db72:	cmp	r2, r0
    db74:	bhi.n	db84 <_free_r+0x1b0>
    db76:	lsrs	r2, r3, #18
    db78:	add.w	r7, r2, #125	; 0x7d
    db7c:	lsls	r7, r7, #1
    db7e:	add.w	r5, r2, #124	; 0x7c
    db82:	b.n	da78 <_free_r+0xa4>
    db84:	movs	r7, #254	; 0xfe
    db86:	movs	r5, #126	; 0x7e
    db88:	b.n	da78 <_free_r+0xa4>
    db8a:	orr.w	r2, r3, #1
    db8e:	str	r2, [r4, #4]
    db90:	str	r3, [r4, r3]
    db92:	b.n	da5a <_free_r+0x86>
    db94:	.word	0x200013fc
    db98:	.word	0x20001404
    db9c:	.word	0x20001804
    dba0:	.word	0x20015d38
    dba4:	.word	0x00000000

0000dba8 <___init_veneer>:
    dba8:	ldr.w	pc, [pc]	; dbac <___init_veneer+0x4>
    dbac:	.word	0x600015a9

Disassembly of section .fini:

0000dbb0 <_fini>:
    dbb0:	push	{r3, r4, r5, r6, r7, lr}
    dbb2:	nop
